BOOL WebCore::RenderSVGRoot::shouldApplyViewportClip(WebCore::RenderSVGRoot *this)
{
  unsigned int v1;

  v1 = (*((_QWORD *)this + 12) >> 10) & 7;
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    if (v1 < 4)
      return 1;
  }
  else if (v1 - 1 < 3)
  {
    return 1;
  }
  if ((*((_QWORD *)this + 12) & 0x1C00) == 0x1000)
    return 1;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8);
}

float WebCore::RenderSVGRoot::strokeBoundingBox(WebCore::RenderSVGRoot *this)
{
  return *((float *)this + 65);
}

void WebCore::RenderSVGRoot::paint(WebCore::RenderSVGRoot *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  unint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::RenderSVGRoot *v37;
  WebCore::GraphicsContext *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  _DWORD v56[4];
  int32x2_t v57;
  WTF *v58;

  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10))
    || (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 10) + 72))(*((_QWORD *)a2 + 10)))
  {
    v6 = *((_QWORD *)this + 20);
    v7 = HIDWORD(v6);
    if ((int)v6 >= 1 && SHIDWORD(v6) >= 1)
    {
      v10 = *((_DWORD *)this + 38);
      v9 = *((_DWORD *)this + 39);
      v11 = *((_DWORD *)a3 + 1);
      v12 = __OFADD__(*(_DWORD *)a3, v10);
      v13 = *(_DWORD *)a3 + v10;
      LODWORD(v14) = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
      v14 = v12 ? v14 : v13;
      v12 = __OFADD__(v11, v9);
      v15 = v11 + v9;
      LODWORD(v16) = (v11 >> 31) + 0x7FFFFFFF;
      v16 = v12 ? v16 : v15;
      v58 = (WTF *)(v14 | (v16 << 32));
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8)
        || (*((_BYTE *)a2 + 21) & 0x10) != 0)
      {
        goto LABEL_39;
      }
      v17 = *((_QWORD *)this + 24);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 20);
        v19 = *(_QWORD *)(v17 + 28);
      }
      else
      {
        v18 = 0;
        v19 = v6;
      }
      v20 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      if (v20 <= 5 && ((1 << v20) & 0x2A) != 0)
      {
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v54 = v18 + v19;
          if (__OFADD__((_DWORD)v18, (_DWORD)v19))
            v54 = (v18 >> 31) + 0x7FFFFFFF;
          v12 = __OFSUB__((_DWORD)v6, v54);
          v55 = v6 - v54;
          if (v12)
            v55 = 0x7FFFFFFF;
          v18 = v18 & 0xFFFFFFFF00000000 | v55;
        }
        else
        {
          v52 = HIDWORD(v18) + HIDWORD(v19);
          if (__OFADD__(HIDWORD(v18), HIDWORD(v19)))
            v52 = (HIDWORD(v18) >> 31) + 0x7FFFFFFF;
          v12 = __OFSUB__((_DWORD)v7, v52);
          v53 = v7 - v52;
          if (v12)
            v53 = 0x7FFFFFFF;
          v18 = v18 | ((unint64_t)v53 << 32);
        }
      }
      v21 = v18 + v14;
      if (__OFADD__((_DWORD)v18, (_DWORD)v14))
        v21 = (v18 >> 31) + 0x7FFFFFFF;
      v12 = __OFADD__(HIDWORD(v18), (_DWORD)v16);
      v22 = HIDWORD(v18) + v16;
      if (v12)
        v22 = (HIDWORD(v18) >> 31) + 0x7FFFFFFF;
      if ((int)v19 >= 1)
      {
        v23 = HIDWORD(v19);
        if (SHIDWORD(v19) >= 1)
        {
          v24 = *((_DWORD *)a2 + 2);
          if (v24 >= 1)
          {
            v25 = *((_DWORD *)a2 + 3);
            if (v25 >= 1)
            {
              v26 = *(_DWORD *)a2;
              v12 = __OFADD__(*(_DWORD *)a2, v24);
              v27 = *(_DWORD *)a2 + v24;
              if (v12)
                v27 = (v26 >> 31) + 0x7FFFFFFF;
              if ((int)v21 < v27)
              {
                v12 = __OFADD__(v21, (_DWORD)v19);
                v28 = v21 + v19;
                if (v12)
                  v28 = (v21 >> 31) + 0x7FFFFFFF;
                if (v26 < v28)
                {
                  v29 = *((_DWORD *)a2 + 1);
                  v12 = __OFADD__(v29, v25);
                  v30 = v29 + v25;
                  if (v12)
                    v30 = (v29 >> 31) + 0x7FFFFFFF;
                  if (v22 < v30)
                  {
                    v12 = __OFADD__(v22, (_DWORD)v23);
                    v31 = v22 + v23;
                    if (v12)
                      v31 = (v22 >> 31) + 0x7FFFFFFF;
                    if ((int)v29 < v31)
                    {
LABEL_39:
                      v32 = WebCore::RenderBox::pushContentsClip(this, a2, (const WebCore::LayoutPoint *)&v58);
                      WebCore::RenderSVGRoot::paintObject(this, (WebCore::RenderSVGRoot **)a2, &v58);
                      if (!v32)
                        goto LABEL_48;
                      v34 = *((unsigned __int16 *)a2 + 8);
                      if (v34 == 4096 || v34 == 0x2000)
                        WebCore::RegionContext::popClip(*((_QWORD *)a2 + 9));
                      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 104))(*((_QWORD *)a2 + 10), 1);
                      if (v34 == 16)
                      {
                        *((_WORD *)a2 + 8) = 64;
                        (*(void (**)(WebCore::RenderSVGRoot *, WebCore::PaintInfo *, WTF **))(*(_QWORD *)this + 1448))(this, a2, &v58);
                      }
                      else if (v34 != 1)
                      {
                        goto LABEL_48;
                      }
                      *((_WORD *)a2 + 8) = v34;
LABEL_48:
                      if (*((unsigned __int16 *)a2 + 8) <= 1u && (*((_BYTE *)this + 22) & 1) != 0)
                      {
                        v35 = *((_QWORD *)this + 18);
                        if (v35)
                        {
                          v36 = *(_QWORD *)(v35 + 264);
                          if (v36)
                          {
                            if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
                              && (*((_BYTE *)this + 120) & 0x30) == 0)
                            {
                              v37 = (WebCore::RenderSVGRoot *)*((_QWORD *)a2 + 3);
                              if ((!v37 || v37 == this) && (*((_BYTE *)a2 + 20) & 0x40) == 0)
                              {
                                v38 = (WebCore::GraphicsContext *)*((_QWORD *)a2 + 10);
                                v57.i32[0] = ((int)((_DWORD)v58 - (v33 & 0xFFFFFFC0) + 32) >> 6) + (int)v58 / 64;
                                v57.i32[1] = ((int)(HIDWORD(v58) - (v33 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v58) / 64;
                                v39 = HIDWORD(*(_QWORD *)a2);
                                if ((int)*(_QWORD *)a2 >= 0)
                                  v40 = *(_QWORD *)a2;
                                else
                                  v40 = *(_QWORD *)a2 + 63;
                                v41 = *(_QWORD *)a2 - (v40 & 0xFFFFFFC0);
                                if ((int)v39 >= 0)
                                  v42 = HIDWORD(*(_QWORD *)a2);
                                else
                                  v42 = v39 + 63;
                                v43 = v39 - (v42 & 0xFFFFFFC0);
                                v44 = *((_DWORD *)a2 + 2);
                                v45 = *((_DWORD *)a2 + 3);
                                v12 = __OFADD__(v41, v44);
                                v46 = v41 + v44;
                                if (v12)
                                  v46 = (v41 >> 31) + 0x7FFFFFFF;
                                v47 = v40 >> 6;
                                v48 = v42 >> 6;
                                v49 = v43 + v45;
                                if (__OFADD__(v43, v45))
                                  v49 = (v43 >> 31) + 0x7FFFFFFF;
                                v50 = v43 + 32;
                                v51 = v41 + 32;
                                v56[0] = v47 + (v51 >> 6);
                                v56[1] = v48 + (v50 >> 6);
                                v56[2] = v46 / 64 - (v51 >> 6) + ((int)(v46 - (v47 & 0xFFFFFFC0) + 32) >> 6);
                                v56[3] = v49 / 64 - (v50 >> 6) + ((int)(v49 - (v46 & 0xFFFFFFC0) + 32) >> 6);
                                WebCore::RenderLayerScrollableArea::paintOverflowControls(v36, v38, &v57, (const WebCore::IntRect *)v56, 0);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void WebCore::RenderSVGRoot::paintObject(WebCore::RenderSVGRoot *this, WebCore::RenderSVGRoot **a2, WTF **a3)
{
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WebCore::RenderSVGRoot *v14;
  uint64_t *v15;
  WebCore::RenderSVGRoot *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  WebCore::RenderSVGRoot *v35;
  WebCore::RenderLayerModelObject *v36;
  uint64_t v37;
  WebCore::Page *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  unsigned int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  _DWORD v58[2];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  WebCore::RenderSVGRoot *v65;

  if (*((unsigned __int16 *)a2 + 8) <= 1u
    && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
    && (*((_BYTE *)this + 120) & 0x30) == 0
    && (*((_BYTE *)this + 23) & 0x60) != 0)
  {
    WebCore::RenderBox::paintBoxDecorations(this, (WebCore::PaintInfo *)a2, a3);
  }
  v7 = *((_DWORD *)this + 38);
  v6 = *((_DWORD *)this + 39);
  v8 = *((_DWORD *)a3 + 1);
  v9 = __OFADD__(*(_DWORD *)a3, v7);
  LODWORD(v10) = *(_DWORD *)a3 + v7;
  if (v9)
    v10 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
  else
    v10 = v10;
  v9 = __OFADD__(v8, v6);
  LODWORD(v11) = v8 + v6;
  if (v9)
    v11 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v11 = v11;
  v12 = v10 | (v11 << 32);
  v59 = v12;
  v13 = *((unsigned __int16 *)a2 + 8);
  if (v13 == 2048)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
    {
      v60 = *(_OWORD *)((char *)this + 228);
      v35 = a2[3];
      if ((!v35 || v35 == this)
        && ((*(uint64_t (**)(WebCore::RenderSVGRoot *))(*(_QWORD *)a2[10] + 40))(a2[10]) & 1) == 0)
      {
        v36 = (WebCore::RenderLayerModelObject *)WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(this);
        if (v36)
          WebCore::RenderSVGResourceClipper::applyMaskClipping(v36, (WebCore::PaintInfo *)a2, this, (const WebCore::FloatRect *)&v60);
      }
      return;
    }
  }
  else if (v13 == 1024 && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
  {
    v14 = a2[3];
    if ((!v14 || v14 == this)
      && ((*(uint64_t (**)(WebCore::RenderSVGRoot *))(*(_QWORD *)a2[10] + 40))(a2[10]) & 1) == 0)
    {
      v15 = (uint64_t *)WebCore::RenderLayerModelObject::svgMaskerResourceFromStyle(this);
      if (v15)
        WebCore::RenderSVGResourceMasker::applyMask(v15, (WebCore::PaintInfo *)a2, this, (const WebCore::LayoutPoint *)&v59);
    }
    return;
  }
  if ((*((_BYTE *)a2 + 20) & 0x40) != 0)
    return;
  v16 = a2[10];
  if ((*(unsigned int (**)(WebCore::RenderSVGRoot *))(*(_QWORD *)v16 + 72))(v16))
  {
    v17 = *((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
    if (v17)
    {
      while (1)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        v19 = *(unsigned __int8 *)(v18 + 46);
        if (v19 != 69
          && ((*(_BYTE *)(v18 + 52) & 7) != 4 || (*(_BYTE *)(v18 + 53) & 1) != 0 || (*(_BYTE *)(v18 + 53) & 8) == 0)
          && v19 != 77)
        {
          *((_BYTE *)v16 + 716) |= 2u;
          return;
        }
        v17 = *(unsigned int *)(v18 + 47) | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32);
        if (!v17)
          return;
      }
    }
    return;
  }
  v20 = *((unsigned int *)this + 16);
  if (!(v20 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    || (v21 = *(_QWORD *)((v20 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) == 0)
  {
    if (*((_WORD *)a2 + 8) == 8)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                          + 8)
                                              + 528)
                                  + 8)
                      + 24);
      if (v37)
        v38 = *(WebCore::Page **)(v37 + 8);
      else
        v38 = 0;
      v39 = *((_QWORD *)this + 24);
      if (v39)
      {
        v40 = *(_QWORD *)(v39 + 20);
        v41 = (uint64_t *)(v39 + 28);
      }
      else
      {
        v40 = 0;
        v41 = (uint64_t *)((char *)this + 160);
      }
      v42 = *v41;
      *(_QWORD *)&v60 = v40;
      *((_QWORD *)&v60 + 1) = v42;
      WebCore::Page::addRelevantUnpaintedObject(v38, this, (const WebCore::LayoutRect *)&v60);
    }
    return;
  }
  v22 = *((unsigned __int16 *)a2 + 8);
  if (!*((_WORD *)a2 + 8))
    return;
  v23 = *a3;
  if ((*((_BYTE *)this + 22) & 1) == 0
    || ((*((_BYTE *)this + 45) & 2) != 0
      ? (v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
      : (v53 = *((_QWORD *)this + 12)),
        v24 = v53 & 0x1C00,
        v24 == 2048))
  {
    LODWORD(v24) = 0;
  }
  else if (v24)
  {
    v25 = *(_QWORD *)(*((_QWORD *)this + 18) + 264);
    if (v25)
    {
      v54 = v25 + 104;
      LODWORD(v25) = *(_DWORD *)(v25 + 104);
      LODWORD(v24) = *(_DWORD *)(v54 + 4);
    }
    else
    {
      LODWORD(v24) = 0;
    }
    goto LABEL_40;
  }
  LODWORD(v25) = 0;
LABEL_40:
  v26 = -(int)v25;
  if (v26 >= -33554432)
    v27 = v26 << 6;
  else
    v27 = 0x80000000;
  if (v26 > 0x1FFFFFF)
    v27 = 0x7FFFFFFF;
  if ((int)v24 <= 0x2000000)
    v28 = -64 * v24;
  else
    v28 = 0x80000000;
  if ((int)v24 < -33554431)
    v28 = 0x7FFFFFFF;
  v29 = (unint64_t)v23 >> 32;
  v30 = (_DWORD)v23 + v27;
  if (__OFADD__((_DWORD)v23, v27))
    v30 = (v23 >> 31) + 0x7FFFFFFF;
  v58[0] = v30;
  v31 = HIDWORD(v23) + v28;
  if (__OFADD__((_DWORD)v29, v28))
    v31 = (v29 >> 31) + 0x7FFFFFFF;
  v58[1] = v31;
  if (v22 == 64)
  {
LABEL_80:
    v47 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
    v48 = *(unsigned __int8 *)(v47 + 52);
    if ((v48 & 0xE) != 0 && (v48 & 0xF) != 0)
    {
      v57 = *(float *)(v47 + 48);
      if (((v57 < 3.0) & (v48 >> 4)) != 0 || v57 > 0.0)
        goto LABEL_110;
    }
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v50 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v50)
      {
        if ((*(_WORD *)(v50 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19651F1FCLL);
        }
        if ((*(_WORD *)(v50 + 30) & 1) != 0)
        {
          v55 = *(_QWORD *)(*(_QWORD *)(v50 + 40) + 8);
          if (*(_BYTE *)(v55 + 3382) || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v55 + 1944) + 248) + 1149) & 0x20) != 0)
          {
LABEL_110:
            if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
            {
              v56 = *((_QWORD *)this + 20);
              *(_QWORD *)&v60 = v12;
              *((_QWORD *)&v60 + 1) = v56;
              WebCore::RenderElement::paintOutline(this, (WebCore::PaintInfo *)a2, (const WebCore::LayoutRect *)&v60);
            }
          }
        }
      }
    }
    return;
  }
  v32 = *((_OWORD *)a2 + 3);
  v62 = *((_OWORD *)a2 + 2);
  v63 = v32;
  v64 = *((_OWORD *)a2 + 4);
  v65 = a2[10];
  v33 = *((_OWORD *)a2 + 1);
  v60 = *(_OWORD *)a2;
  v61 = v33;
  if (v22 == 32)
  {
    v34 = 16;
    goto LABEL_70;
  }
  if (v22 == 2)
  {
    v34 = 1;
LABEL_70:
    LOWORD(v61) = v34;
  }
  if (*((_QWORD *)&v61 + 1) && *((WebCore::RenderSVGRoot **)&v61 + 1) == this)
    *((_QWORD *)&v61 + 1) = 0;
  while (1)
  {
    v43 = *(_BYTE *)(v21 + 45);
    if ((v43 & 2) == 0)
      break;
    v44 = *(unsigned int *)(v21 + 47);
    if (v44 | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32))
    {
      v21 = *(_QWORD *)((v44 | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32)) + 8);
      if (v21)
        continue;
    }
    goto LABEL_75;
  }
LABEL_90:
  if ((*(_BYTE *)(v21 + 21) & 0x80) == 0)
    goto LABEL_91;
  if ((v43 & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651F21CLL);
  }
  v52 = *(_QWORD *)(v21 + 144);
  if (!v52 || (*(_BYTE *)(v52 + 25) & 8) == 0)
LABEL_91:
    (*(void (**)(uint64_t, __int128 *, _DWORD *))(*(_QWORD *)v21 + 680))(v21, &v60, v58);
  while (1)
  {
    v51 = *(unsigned int *)(v21 + 47);
    if (!(v51 | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32)))
      break;
    v21 = *(_QWORD *)((v51 | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32)) + 8);
    if (!v21)
      break;
    v43 = *(_BYTE *)(v21 + 45);
    if ((v43 & 2) == 0)
      goto LABEL_90;
  }
LABEL_75:
  v45 = *((unsigned __int16 *)a2 + 8);
  if (v45 == 64 || v45 == 16)
    goto LABEL_80;
}

float WebCore::RenderSVGRoot::objectBoundingBox(WebCore::RenderSVGRoot *this)
{
  return *((float *)this + 57);
}

void WebCore::RenderSVGRoot::willBeDestroyed(WTF ***this, WebCore::RenderBox *a2)
{
  void *v3;
  WTF **v4;
  WTF *v5;

  WebCore::RenderBlock::removePercentHeightDescendant(this, a2);
  if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this[3][1] + 5) + 8) + 3405))
  {
    v4 = this[4];
    if (v4)
    {
      v5 = v4[1];
      if (v5)
        (*(void (**)(WTF *, WTF ***))(*(_QWORD *)v5 + 672))(v5, this);
    }
  }
  WebCore::RenderBox::willBeDestroyed((WebCore::RenderBox *)this, v3);
}

BOOL WebCore::RenderSVGRoot::needsHasSVGTransformFlags(WebCore::RenderSVGRoot *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    goto LABEL_54;
  }
  if (WebCore::SVGSVGElement::hasTransformRelatedAttributes((WebCore::SVGSVGElement *)v2))
    return 1;
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  if (*(_QWORD *)(v6 + 1272) == v5)
    return 0;
  if ((*(_WORD *)(v5 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651F5CCLL);
  }
  v7 = *(_QWORD *)(v6 + 528);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          ++*(_DWORD *)v10;
          v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 48) + 16) + 1352))(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16));
          v12 = v11;
          if (*(_DWORD *)v10 == 1)
          {
            WebCore::Page::~Page(v10);
            WTF::fastFree(v27, v28);
            if ((v12 & 1) != 0)
              return 0;
          }
          else
          {
            --*(_DWORD *)v10;
            if ((v11 & 1) != 0)
              return 0;
          }
        }
      }
    }
  }
  v13 = *((_QWORD *)this + 3);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 40) + 8) + 528) + 8)
                  + 120);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = v16 + 2;
      if ((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19651F60CLL);
        }
        v17 = (*(unsigned __int8 *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
        if ((*(_BYTE *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
          LOBYTE(v17) = 0;
        if ((v17 & 1) != 0)
          v18 = *(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL;
        else
          v18 = 0;
        if (v16)
          goto LABEL_24;
      }
      else
      {
        v18 = 0;
        if (v16)
        {
LABEL_24:
          *(_DWORD *)(v15 + 24) = v16;
LABEL_25:
          if (!v18)
            goto LABEL_38;
          v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 40)
                                                                          + 8)
                                                              + 528)
                                                  + 8)
                                      + 120)
                          + 8);
          v20 = *(_DWORD *)(v19 + 24);
          *(_DWORD *)(v19 + 24) = v20 + 2;
          if ((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) == 0)
          {
            v22 = 0;
            if (v20)
            {
LABEL_34:
              *(_DWORD *)(v19 + 24) = v20;
              goto LABEL_35;
            }
LABEL_47:
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v3);
              v13 = *((_QWORD *)this + 3);
            }
LABEL_35:
            if (*(_BYTE *)(v22 + 46) == 7)
            {
              v23 = *(_QWORD *)(v13 + 8);
              v24 = *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8);
              if (*(_QWORD *)(v24 + 1272) == v23
                && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 528) + 8) + 296) + 3358) & 0x20) != 0)
              {
                return 1;
              }
            }
            goto LABEL_38;
          }
          if ((*(_BYTE *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          {
            v21 = (*(unsigned __int8 *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
            if ((*(_BYTE *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
              LOBYTE(v21) = 0;
            if ((v21 & 1) != 0)
              v22 = *(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL;
            else
              v22 = 0;
            if (v20)
              goto LABEL_34;
            goto LABEL_47;
          }
LABEL_54:
          __break(0xC471u);
          JUMPOUT(0x19651F550);
        }
      }
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v3);
        v13 = *((_QWORD *)this + 3);
      }
      goto LABEL_25;
    }
  }
LABEL_38:
  v25 = *(_QWORD *)(v13 + 8);
  if ((*(_WORD *)(v25 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651F5ECLL);
  }
  v26 = *(_QWORD *)(v25 + 32);
  if (v26)
    return (*(_WORD *)(v26 + 28) & 0x20) == 0;
  return 0;
}

uint64_t WebCore::RenderSVGRoot::updateFromStyle(WebCore::RenderSVGRoot *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;

  WebCore::RenderBox::updateFromStyle(this);
  result = (*(uint64_t (**)(WebCore::RenderSVGRoot *))(*(_QWORD *)this + 832))(this);
  if ((result & 1) != 0
    || (v3 = *((_QWORD *)this + 11), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    || (v18 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v18 + 328))
    || *(_QWORD *)(v18 + 320)
    || *(_QWORD *)(v18 + 312)
    || *(_QWORD *)(v18 + 304)
    || (*(_DWORD *)(v18 + 636) & 0x180) == 0x80)
  {
    v4 = *((_DWORD *)this + 5);
LABEL_4:
    v5 = 0x20000;
    goto LABEL_5;
  }
  v19 = *(float *)(v18 + 260);
  v4 = *((_DWORD *)this + 5);
  if (v19 != -1.0)
    goto LABEL_4;
  v5 = 0;
LABEL_5:
  v6 = v4 & 0xFFEDFFFF;
  if ((_DWORD)result)
    v7 = 0x100000;
  else
    v7 = 0;
  *((_DWORD *)this + 5) = v6 | v5 | v7;
  v8 = *((unsigned int *)this + 16);
  if (!(v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    goto LABEL_23;
  v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v9 || (*(_BYTE *)(v9 + 45) & 1) == 0 || *(_BYTE *)(v9 + 46) != 88)
    goto LABEL_23;
  ++*(_DWORD *)(v9 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 832))(v9);
  if ((result & 1) != 0
    || (v10 = *(_QWORD *)(v9 + 88), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40) + 20))
    || (v20 = *(_QWORD *)(v10 + 40), *(_QWORD *)(v20 + 328))
    || *(_QWORD *)(v20 + 320)
    || *(_QWORD *)(v20 + 312)
    || *(_QWORD *)(v20 + 304)
    || (*(_DWORD *)(v20 + 636) & 0x180) == 0x80)
  {
    v11 = *(_DWORD *)(v9 + 20);
  }
  else
  {
    v21 = *(float *)(v20 + 260);
    v11 = *(_DWORD *)(v9 + 20);
    if (v21 == -1.0)
    {
      v12 = 0;
      goto LABEL_16;
    }
  }
  v12 = 0x20000;
LABEL_16:
  v13 = v11 & 0xFFEDFFFF;
  if ((_DWORD)result)
    v14 = 0x100000;
  else
    v14 = 0;
  *(_DWORD *)(v9 + 20) = v13 | v12 | v14;
  if (((*(_DWORD *)(v9 + 96) >> 10) & 7u) - 1 <= 2)
    *(_DWORD *)(v9 + 20) |= 0x10000u;
  v15 = *(_DWORD *)(v9 + 16);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19651F860);
  }
  *(_DWORD *)(v9 + 16) = v15 - 1;
LABEL_23:
  v16 = (*((_QWORD *)this + 12) >> 10) & 7;
  v17 = *((_DWORD *)this + 5);
  if ((v17 & 0x80000) != 0)
  {
    if (v16 >= 4)
      goto LABEL_25;
LABEL_27:
    *((_DWORD *)this + 5) = v17 | 0x10000;
    return result;
  }
  if (v16 - 1 < 3)
    goto LABEL_27;
LABEL_25:
  if ((*((_QWORD *)this + 12) & 0x1C00) == 0x1000
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8))
  {
    goto LABEL_27;
  }
  return result;
}

uint64_t WebCore::RenderSVGViewportContainer::updateFromStyle(WebCore::RenderSVGViewportContainer *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  float v9;

  result = (*(uint64_t (**)(WebCore::RenderSVGViewportContainer *))(*(_QWORD *)this + 832))(this);
  if ((result & 1) != 0
    || (v3 = *((_QWORD *)this + 11), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    || (v8 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v8 + 328))
    || *(_QWORD *)(v8 + 320)
    || *(_QWORD *)(v8 + 312)
    || *(_QWORD *)(v8 + 304)
    || (*(_DWORD *)(v8 + 636) & 0x180) == 0x80)
  {
    v4 = *((_DWORD *)this + 5);
LABEL_4:
    v5 = 0x20000;
    goto LABEL_5;
  }
  v9 = *(float *)(v8 + 260);
  v4 = *((_DWORD *)this + 5);
  if (v9 != -1.0)
    goto LABEL_4;
  v5 = 0;
LABEL_5:
  v6 = v4 & 0xFFEDFFFF;
  if ((_DWORD)result)
    v7 = 0x100000;
  else
    v7 = 0;
  *((_DWORD *)this + 5) = v6 | v5 | v7;
  if (((*((_DWORD *)this + 24) >> 10) & 7u) - 1 <= 2)
    *((_DWORD *)this + 5) |= 0x10000u;
  return result;
}

WTF *WebCore::RenderSVGRoot::updateLayerTransform(WebCore::RenderSVGRoot *this, void *a2)
{
  WTF *result;
  uint64_t v4;
  WTF::String *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  result = WebCore::RenderLayerModelObject::updateLayerTransform(this, a2);
  if ((*((_BYTE *)this + 21) & 0x80) != 0)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v7 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19651FA50);
    }
    result = (WTF *)WebCore::Element::hasAttribute((WebCore::Element *)v7, (const WebCore::QualifiedName *)&WebCore::SVGNames::viewBoxAttr, v4, v5, v6);
    if ((_DWORD)result)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if ((*(_WORD *)(v8 + 28) & 0x20) == 0
        || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x19651FAA8);
      }
      if (*(_BYTE *)(v8 + 232))
      {
        v9 = *(_QWORD **)(v8 + 216);
        v10 = v9[3];
        if (v10 && *(_DWORD *)(v10 - 12))
        {
          v16 = *(unsigned int *)(v10 - 4);
          if ((_DWORD)v16)
          {
            v17 = 8 * v16;
            v18 = (uint64_t *)v9[3];
            while ((unint64_t)(*v18 + 1) <= 1)
            {
              ++v18;
              v17 -= 8;
              if (!v17)
                goto LABEL_9;
            }
          }
          else
          {
            v18 = (uint64_t *)v9[3];
          }
          v19 = (uint64_t *)(v10 + 8 * v16);
          if (v18 != v19)
          {
            v20 = *v18;
LABEL_28:
            if (*(_QWORD *)(v20 + 8))
            {
              v11 = v9 + 6;
              goto LABEL_10;
            }
            while (++v18 != v19)
            {
              v20 = *v18;
              if ((unint64_t)(*v18 + 1) > 1)
              {
                if (v18 != v19)
                  goto LABEL_28;
                break;
              }
            }
          }
        }
LABEL_9:
        v11 = v9 + 5;
LABEL_10:
        v12 = *v11;
        if (*(float *)(v12 + 36) <= 0.0 || *(float *)(v12 + 40) <= 0.0)
        {
          v13 = *((_QWORD *)this + 18);
          for (i = *(_QWORD *)(v13 + 24) | 0x40000; ; i = v15 | 0x100000)
          {
            *(_QWORD *)(v13 + 24) = i;
            v13 = *(_QWORD *)(v13 + 40);
            if (!v13)
              break;
            v15 = *(_QWORD *)(v13 + 24);
            if ((v15 & 0x100000) != 0)
              break;
          }
        }
      }
    }
  }
  return result;
}

BOOL WebCore::RenderSVGRoot::nodeAtPoint(WebCore::RenderBox *this, int *a2, WebCore::HitTestResult *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  signed int v31;
  int v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  signed int v54;
  int v55;
  signed int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  WebCore::ImageOverlay *v65;
  WebCore::Node *v66;
  void *v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::RenderBox *v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  _QWORD v83[2];
  int v84[2];
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  int v89;

  v12 = *((_DWORD *)this + 38);
  v11 = *((_DWORD *)this + 39);
  v13 = a5[1];
  v14 = __OFADD__(*a5, v12);
  v15 = *a5 + v12;
  if (v14)
    v16 = ((*a5 >> 31) + 0x7FFFFFFF);
  else
    v16 = v15;
  v14 = __OFADD__(v13, v11);
  v17 = v13 + v11;
  if (v14)
    v18 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v18 = v17;
  v86 = v16 | (v18 << 32);
  v19 = *((_QWORD *)this + 24);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 20);
    v21 = (uint64_t *)(v19 + 28);
  }
  else
  {
    v20 = 0;
    v21 = (uint64_t *)((char *)this + 160);
  }
  v22 = *v21;
  v85 = *v21;
  v14 = __OFADD__((_DWORD)v20, (_DWORD)v16);
  v23 = v20 + v16;
  v24 = HIDWORD(v20);
  v25 = (v20 >> 31) + 0x7FFFFFFF;
  if (v14)
    v26 = v25;
  else
    v26 = v23;
  if (__OFADD__((_DWORD)v24, (_DWORD)v18))
    v27 = (v24 >> 31) + 0x7FFFFFFF;
  else
    v27 = v24 + v18;
  v84[0] = v26;
  v84[1] = v27;
  v28 = WebCore::RenderBox::contentBoxRect(this);
  if ((int)v16 >= (int)v28)
  {
    v31 = v28 + v29;
    if (__OFADD__((_DWORD)v28, v29))
      v31 = (v28 >> 31) + 0x7FFFFFFF;
    if (v31 > (int)v16 && (int)v18 >= SHIDWORD(v28))
    {
      v32 = HIDWORD(v28) + v30;
      if (__OFADD__(HIDWORD(v28), v30))
        v32 = (HIDWORD(v28) >> 31) + 0x7FFFFFFF;
      if (v32 > (int)v18)
        goto LABEL_23;
    }
  }
  v37 = (*((_QWORD *)this + 12) >> 10) & 7;
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    if (v37 < 4)
      goto LABEL_54;
  }
  else if (v37 - 1 < 3)
  {
    goto LABEL_54;
  }
  if ((*((_QWORD *)this + 12) & 0x1C00) != 0x1000)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8)
       || (int)v22 < 1;
    if (!v38 && SHIDWORD(v22) >= 1)
    {
      v40 = a4[4];
      if (v40 >= 1)
      {
        v41 = a4[5];
        if (v41 >= 1)
        {
          v42 = a4[2];
          v14 = __OFADD__(v42, v40);
          v43 = v42 + v40;
          if (v14)
            v43 = (v42 >> 31) + 0x7FFFFFFF;
          if (v26 < v43)
          {
            v44 = v26 + v22;
            if (__OFADD__(v26, (_DWORD)v22))
              v44 = (v26 >> 31) + 0x7FFFFFFF;
            if ((int)v42 < v44)
            {
              v45 = a4[3];
              v14 = __OFADD__(v45, v41);
              v46 = v45 + v41;
              if (v14)
                v46 = (v45 >> 31) + 0x7FFFFFFF;
              if ((int)v27 < v46)
              {
                v47 = v27 + HIDWORD(v22);
                if (__OFADD__(v27, HIDWORD(v22)))
                  v47 = (v27 >> 31) + 0x7FFFFFFF;
                if ((int)v45 < v47)
                {
                  if (*((_BYTE *)a4 + 65)
                    || WebCore::LayoutRect::contains((WebCore::LayoutRect *)v84, (const WebCore::LayoutRect *)(a4 + 2))
                    || (LODWORD(v87) = WebCore::LayoutRect::operator WebCore::FloatRect(v84),
                        HIDWORD(v87) = v72,
                        v88 = v73,
                        v89 = v74,
                        WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 8), (const WebCore::FloatRect *)&v87)))
                  {
LABEL_23:
                    v33 = *((unsigned __int8 *)this + 75);
                    for (i = *(unsigned int *)((char *)this + 71); ; i = *(unsigned int *)(v36 + 40))
                    {
                      v35 = i | (v33 << 32);
                      if (!v35)
                        break;
                      v36 = *(_QWORD *)(v35 + 8);
                      if (!v36)
                        break;
                      if ((*(_BYTE *)(v36 + 21) & 0x80) == 0
                        && (*(unsigned int (**)(uint64_t, int *, WebCore::HitTestResult *, _DWORD *, uint64_t *, uint64_t))(*(_QWORD *)v36 + 336))(v36, a2, a3, a4, &v86, a6))
                      {
                        v75 = a4[1];
                        LODWORD(v76) = *a4 - v86;
                        if (__OFSUB__(*a4, (_DWORD)v86))
                          v76 = ((*a4 >> 31) + 0x7FFFFFFF);
                        else
                          v76 = v76;
                        LODWORD(v77) = v75 - HIDWORD(v86);
                        if (__OFSUB__(v75, HIDWORD(v86)))
                          v77 = (v75 >> 31) + 0x7FFFFFFF;
                        else
                          v77 = v77;
                        v87 = v76 | (v77 << 32);
                        WebCore::RenderObject::updateHitTestResult((unsigned int *)this, a3, (const WebCore::LayoutPoint *)&v87);
                        return 1;
                      }
                      v33 = *(unsigned __int8 *)(v36 + 44);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_54:
  if (a6 > 1
    || (*(_QWORD *)a2 & 0xFF00000000) != 0 && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0)
  {
    return 0;
  }
  if ((*((_BYTE *)this + 120) & 0x30) != 0)
    return 0;
  v48 = *((_QWORD *)this + 4);
  if (v48)
  {
    v49 = *(_QWORD *)(v48 + 8);
    if (v49)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v49 + 104) + 239) & 0x18) != 0)
        return 0;
    }
  }
  if ((*(_QWORD *)a2 & 0x10) == 0)
  {
    v69 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v70 = *(_QWORD *)(*(_QWORD *)(v69 + 40) + 8);
    if (*(_BYTE *)(v70 + 3441))
    {
      if (*(_QWORD *)(v70 + 1272) != v69)
        return 0;
    }
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v71 = 0;
    else
      v71 = this;
    if (v48 && (*((_BYTE *)this + 45) & 2) != 0)
      v71 = *(WebCore::RenderBox **)(v48 + 8);
    if ((*(_BYTE *)(*((_QWORD *)v71 + 13) + 239) & 1) != 0 || (*((_WORD *)v71 + 62) & 0x3C0) == 0)
      return 0;
  }
  v50 = *((_QWORD *)this + 20);
  v83[0] = v86;
  v83[1] = v50;
  if ((int)v50 < 1)
    return 0;
  v51 = HIDWORD(v50);
  if (SHIDWORD(v50) < 1)
    return 0;
  v52 = a4[4];
  if (v52 < 1)
    return 0;
  v53 = a4[5];
  if (v53 < 1)
    return 0;
  v54 = a4[2];
  v14 = __OFADD__(v54, v52);
  v55 = v54 + v52;
  if (v14)
    v55 = (v54 >> 31) + 0x7FFFFFFF;
  if (v55 <= (int)v86)
    return 0;
  v14 = __OFADD__((_DWORD)v86, (_DWORD)v50);
  v56 = v86 + v50;
  if (v14)
    v56 = (v86 >> 31) + 0x7FFFFFFF;
  if (v54 >= v56)
    return 0;
  v57 = a4[3];
  v14 = __OFADD__(v57, v53);
  v58 = v57 + v53;
  if (v14)
    v58 = (v57 >> 31) + 0x7FFFFFFF;
  if (v58 <= SHIDWORD(v86))
    return 0;
  v14 = __OFADD__(HIDWORD(v86), (_DWORD)v51);
  v59 = HIDWORD(v86) + v51;
  if (v14)
    v59 = (HIDWORD(v86) >> 31) + 0x7FFFFFFF;
  if ((int)v57 >= v59)
    return 0;
  if (!*((_BYTE *)a4 + 65)
    && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)v83, (const WebCore::LayoutRect *)(a4 + 2)))
  {
    LODWORD(v87) = WebCore::LayoutRect::operator WebCore::FloatRect((int *)v83);
    HIDWORD(v87) = v78;
    v88 = v79;
    v89 = v80;
    if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 8), (const WebCore::FloatRect *)&v87))
      return 0;
  }
  v61 = *a4 - v86;
  if (__OFSUB__(*a4, (_DWORD)v86))
    v61 = (*a4 >> 31) + 0x7FFFFFFF;
  v62 = a4[1];
  v63 = v62 - HIDWORD(v86);
  if (__OFSUB__(v62, HIDWORD(v86)))
    v63 = (v62 >> 31) + 0x7FFFFFFF;
  v64 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v64 <= 5 && ((1 << v64) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v82 = *((_DWORD *)this + 40);
      v14 = __OFSUB__(v82, v61);
      v61 = v82 - v61;
      if (v14)
        v61 = (v82 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v81 = *((_DWORD *)this + 41);
      v14 = __OFSUB__(v81, (_DWORD)v63);
      v63 = v81 - v63;
      if (v14)
        v63 = (v81 >> 31) + 0x7FFFFFFF;
    }
  }
  v87 = v61 | (unint64_t)(v63 << 32);
  WebCore::RenderObject::updateHitTestResult((unsigned int *)this, a3, (const WebCore::LayoutPoint *)&v87);
  v65 = (WebCore::ImageOverlay *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 320))(this);
  if (v65)
  {
    v66 = v65;
    *((_DWORD *)v65 + 6) += 2;
    v68 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v65, a2, (uint64_t)a4, (WebCore::LayoutRect *)v83);
    if (*((_DWORD *)v66 + 6) == 2)
    {
      if ((*((_WORD *)v66 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v66, v67);
    }
    else
    {
      *((_DWORD *)v66 + 6) -= 2;
    }
    return !v68;
  }
  return !WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, a2, (uint64_t)a4, (WebCore::LayoutRect *)v83);
}

BOOL WebCore::RenderSVGRoot::hasRelativeDimensions(WebCore::RenderSVGRoot *this)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  uint64_t v5;
  unsigned int v7;
  char v8;
  unsigned int v9;
  unsigned __int8 v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965201A0);
  }
  WebCore::SVGSVGElement::intrinsicHeight((uint64_t *)v2, (uint64_t)&v9);
  v3 = v10;
  if ((v10 & 0xF7) == 3)
  {
    v4 = 1;
  }
  else
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v5 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1965201C0);
    }
    WebCore::SVGSVGElement::intrinsicWidth((uint64_t *)v5, (uint64_t)&v7);
    v4 = (v8 & 0xF7) == 3;
    if (v8 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v7);
    }
  }
  if (v3 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  return v4;
}

void WebCore::RenderSVGRoot::mapLocalToContainer(uint64_t a1, const WebCore::RenderLayerModelObject *a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v10;
  double (*v11)[4][4];
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float64x2_t *v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  double (*v34)[4][4];
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  double v48;
  int v49;
  double v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float64x2_t *v59;
  void *v60;
  double v61;
  float64x2_t *v62;
  float v63;
  float32x2_t v64;
  const double *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  float v80;
  double v81;
  double v82;
  int v83;
  int v84;
  int v85;
  WTF *v86;
  WTF *v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  BOOL v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  char v111;
  _BYTE v112[48];
  __int128 v113;
  __int128 v114;
  WTF *v115[2];
  __int128 v116;
  __int128 v117;
  float32x2_t v118;
  float64x2x4_t v119;
  float64x2x4_t v120;
  float64x2x4_t v121;
  float64x2x4_t v122;

  if (a2 == (const WebCore::RenderLayerModelObject *)a1)
    return;
  v102 = 0;
  v10 = WebCore::RenderObject::container((WebCore::RenderObject *)a1, a2, &v102);
  if (!v10)
    return;
  v12 = v10;
  ++*(_DWORD *)(v10 + 16);
  if ((*(_DWORD *)(a1 + 20) & 0x1800000) != 0x1000000)
    goto LABEL_162;
  v13 = a1;
  if ((*(_BYTE *)(a1 + 45) & 2) != 0)
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if ((*(_QWORD *)(v13 + 96) & 0x380000) == 0x300000)
  {
    a4 |= 1u;
  }
  else
  {
LABEL_162:
    if ((a4 & 1) != 0 && WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)a1))
      a4 &= ~1u;
  }
  if (a5)
    *a5 = a4 & 1;
  v14 = *(_DWORD *)(a3 + 112);
  if (v14)
  {
    v15 = *(_DWORD *)(a3 + 96);
    v16 = *(_DWORD *)(a3 + 100);
    if (v15 == 0x80000000)
      v17 = 0x7FFFFFFFLL;
    else
      v17 = -v15;
    if (v16 == 0x80000000)
      v18 = 0x7FFFFFFFLL;
    else
      v18 = -v16;
    v19 = v17 | (v18 << 32);
  }
  else
  {
    v19 = *(_QWORD *)(a3 + 96);
  }
  v20 = (float)((float)(int)v19 * 0.015625) + *(float *)a3;
  v21 = (float)((float)SHIDWORD(v19) * 0.015625) + *(float *)(a3 + 4);
  v118.f32[0] = v20;
  v118.f32[1] = v21;
  v22 = *(float64x2_t **)(a3 + 80);
  if (v22)
  {
    if (v14)
    {
      WebCore::TransformationMatrix::inverse(v22->f64, v11, (uint64_t)&v103);
      if (v111)
        v88 = (__int128 *)&v103;
      else
        v88 = &constinit_5;
      v89 = v88[5];
      v114 = v88[4];
      *(_OWORD *)v115 = v89;
      v90 = v88[7];
      v116 = v88[6];
      v117 = v90;
      v91 = v88[1];
      *(_OWORD *)v112 = *v88;
      *(_OWORD *)&v112[16] = v91;
      v92 = v88[3];
      *(_OWORD *)&v112[32] = v88[2];
      v113 = v92;
      LODWORD(v20) = WebCore::TransformationMatrix::projectPoint((float64x2_t *)v112, (const WebCore::FloatPoint *)&v118, 0).u32[0];
    }
    else
    {
      LODWORD(v20) = WebCore::TransformationMatrix::mapPoint(v22, &v118).u32[0];
    }
  }
  v23 = v20 * 64.0;
  if (v23 > -2147483650.0)
    v24 = (int)v23;
  else
    v24 = 0x80000000;
  if (v23 < 2147483650.0)
    v25 = v24;
  else
    v25 = 0x7FFFFFFF;
  LODWORD(v103.f64[0]) = v25;
  v26 = v21 * 64.0;
  if (v26 >= 2147483650.0)
  {
    v27 = 0x7FFFFFFF;
  }
  else if (v26 <= -2147483650.0)
  {
    v27 = 0x80000000;
  }
  else
  {
    v27 = (int)v26;
  }
  HIDWORD(v103.f64[0]) = v27;
  v101 = WebCore::RenderBox::offsetFromContainer((WebCore::RenderBox *)a1, (WebCore::RenderElement *)v12, (const WebCore::LayoutPoint *)&v103, 0, v26);
  if ((a4 & 2) == 0)
  {
    v28 = 0;
LABEL_37:
    if (*(_DWORD *)(a3 + 108) == 1)
    {
      v31 = WebCore::RenderBox::contentBoxLocation((WebCore::RenderBox *)a1);
      v32 = v101 - v31;
      if (__OFSUB__((_DWORD)v101, (_DWORD)v31))
        v32 = (v101 >> 31) + 0x7FFFFFFF;
      LODWORD(v101) = v32;
      v33 = HIDWORD(v101) - HIDWORD(v31);
      if (__OFSUB__(HIDWORD(v101), HIDWORD(v31)))
        v33 = (HIDWORD(v101) >> 31) + 0x7FFFFFFF;
      HIDWORD(v101) = v33;
    }
    else
    {
      v32 = v101;
      v33 = HIDWORD(v101);
    }
    *(_QWORD *)&v103.f64[0] = __PAIR64__(v33, v32);
    WebCore::TransformState::move((WebCore::TransformState *)a3, (WebCore::LayoutSize *)&v103, v28);
    goto LABEL_45;
  }
  v28 = WebCore::RenderObject::participatesInPreserve3D((WebCore::RenderObject *)a1);
  v29 = *(_DWORD *)(a1 + 20);
  if ((v29 & 0x20000) == 0)
    goto LABEL_150;
  v41 = a1;
  if ((*(_BYTE *)(a1 + 45) & 2) != 0)
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v42 = *(_QWORD *)(v41 + 88);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 32) + 40) + 20))
  {
    v43 = *(_QWORD **)(v42 + 40);
    if (!v43[41] && !v43[38] && !v43[39] && !v43[40] && (v29 & 0x100000) == 0)
    {
LABEL_150:
      v30 = v12;
      if ((*(_BYTE *)(v12 + 45) & 2) != 0)
        v30 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8);
      if (*(float *)(*(_QWORD *)(*(_QWORD *)(v30 + 88) + 40) + 260) == -1.0)
        goto LABEL_37;
      v98 = *(_QWORD *)(a1 + 32);
      if (v98)
        v98 = *(_QWORD *)(v98 + 8);
      if (v98 != v12)
        goto LABEL_37;
    }
  }
  v107 = (float64x2_t)xmmword_1969FE080;
  v108 = xmmword_1969FE090;
  v109 = (float64x2_t)xmmword_1969FE0A0;
  v110 = xmmword_1969FE0B0;
  v103 = (float64x2_t)xmmword_1969FE040;
  v104 = *(float64x2_t *)algn_1969FE050;
  v105 = (float64x2_t)xmmword_1969FE060;
  v106 = (float64x2_t)unk_1969FE070;
  WebCore::RenderObject::getTransformFromContainer((WebCore::RenderObject *)a1, (const WebCore::LayoutSize *)&v101, (WebCore::TransformationMatrix *)&v103);
  if (*(_DWORD *)(a3 + 108) == 1)
  {
    v44 = WebCore::RenderBox::contentBoxLocation((WebCore::RenderBox *)a1);
    v45 = v44 + v101;
    if (__OFADD__((_DWORD)v44, (_DWORD)v101))
      v45 = (v44 >> 31) + 0x7FFFFFFF;
    v46 = HIDWORD(v44) + HIDWORD(v101);
    if (__OFADD__(HIDWORD(v44), HIDWORD(v101)))
      v46 = (HIDWORD(v44) >> 31) + 0x7FFFFFFF;
    if (v45 == 0x80000000)
      v47 = 0x7FFFFFFF;
    else
      v47 = -v45;
    v48 = (double)v47 * 0.015625;
    if (v46 == 0x80000000)
      v49 = 0x7FFFFFFF;
    else
      v49 = -v46;
    v50 = (double)v49 * 0.015625;
    if (v48 != 0.0)
    {
      v103.f64[0] = v103.f64[0] + v104.f64[1] * v48;
      v105.f64[0] = v105.f64[0] + v106.f64[1] * v48;
      v107.f64[0] = v107.f64[0] + v108.f64[1] * v48;
      v109.f64[0] = v109.f64[0] + v110.f64[1] * v48;
    }
    if (v50 != 0.0)
    {
      v103.f64[1] = v103.f64[1] + v104.f64[1] * v50;
      v105.f64[1] = v105.f64[1] + v106.f64[1] * v50;
      v107.f64[1] = v107.f64[1] + v108.f64[1] * v50;
      v109.f64[1] = v109.f64[1] + v110.f64[1] * v50;
    }
  }
  WebCore::TransformState::applyTransform((float64x2_t **)a3, &v103, v28, 0);
LABEL_45:
  if (!v102)
  {
    v39 = *(_DWORD *)(a3 + 108);
    if (v39 == 1)
      goto LABEL_53;
    v40 = a4 & 0xFFFFFFFB;
    if (!v39)
    {
      (*(void (**)(uint64_t, const WebCore::RenderLayerModelObject *, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v12 + 576))(v12, a2, a3, v40, a5);
      goto LABEL_53;
    }
    v51 = *(_DWORD *)(a3 + 112);
    if (v51)
    {
      v52 = *(_DWORD *)(a3 + 96);
      v53 = *(_DWORD *)(a3 + 100);
      if (v52 == 0x80000000)
        v54 = 0x7FFFFFFFLL;
      else
        v54 = -v52;
      if (v53 == 0x80000000)
        v55 = 0x7FFFFFFFLL;
      else
        v55 = -v53;
      v56 = v54 | (v55 << 32);
    }
    else
    {
      v56 = *(_QWORD *)(a3 + 96);
    }
    v57 = (float)((float)(int)v56 * 0.015625) + *(float *)a3;
    v58 = (float)((float)SHIDWORD(v56) * 0.015625) + *(float *)(a3 + 4);
    v118.f32[0] = v57;
    v118.f32[1] = v58;
    v59 = *(float64x2_t **)(a3 + 80);
    if (v59)
    {
      v99 = v39;
      v100 = v51;
      if (v51)
      {
        WebCore::TransformationMatrix::inverse(v59->f64, v34, (uint64_t)&v103);
        if (v111)
          v93 = (__int128 *)&v103;
        else
          v93 = &constinit_5;
        v94 = v93[5];
        v114 = v93[4];
        *(_OWORD *)v115 = v94;
        v95 = v93[7];
        v116 = v93[6];
        v117 = v95;
        v96 = v93[1];
        *(_OWORD *)v112 = *v93;
        *(_OWORD *)&v112[16] = v96;
        v97 = v93[3];
        *(_OWORD *)&v112[32] = v93[2];
        v113 = v97;
        LODWORD(v57) = WebCore::TransformationMatrix::projectPoint((float64x2_t *)v112, (const WebCore::FloatPoint *)&v118, 0).u32[0];
      }
      else
      {
        LODWORD(v57) = WebCore::TransformationMatrix::mapPoint(v59, &v118).u32[0];
      }
      v39 = v99;
      v51 = v100;
    }
    *(float *)v112 = v57;
    *(float *)&v112[4] = v58;
    BYTE8(v114) = 0;
    memset(&v112[8], 0, 33);
    v115[1] = 0;
    *(_QWORD *)&v116 = 0;
    v115[0] = 0;
    BYTE8(v116) = 0;
    *(_WORD *)((char *)&v116 + 9) = 1;
    LODWORD(v117) = v51;
    HIDWORD(v116) = v39;
    (*(void (**)(uint64_t, const WebCore::RenderLayerModelObject *, _BYTE *, uint64_t, _BYTE *))(*(_QWORD *)v12 + 576))(v12, a2, v112, v40, a5);
    v61 = 1.0 / *(float *)(*(_QWORD *)(a1 + 104) + 184);
    v62 = (float64x2_t *)v115[1];
    v115[1] = 0;
    if (v62)
    {
      v63 = v61;
      v64 = vmul_n_f32(vcvt_f32_f64(v62[6]), v63);
      v103.f64[0] = v61;
      v103.f64[1] = v61 * 0.0;
      v104.f64[0] = v61 * 0.0;
      v104.f64[1] = v61 * 0.0;
      v105.f64[0] = v61 * 0.0;
      v105.f64[1] = v61;
      v106.f64[0] = v61 * 0.0;
      v106.f64[1] = v61 * 0.0;
      v107 = (float64x2_t)xmmword_1969FE080;
      v108 = xmmword_1969FE090;
      v109 = (float64x2_t)xmmword_1969FE0A0;
      v110 = xmmword_1969FE0B0;
      v65 = (const double *)v62;
      v66 = v103;
      v67 = v104;
      v68 = v105;
      v69 = v106;
      v121 = vld4q_dup_f64(v65);
      v65 += 4;
      v119 = vld4q_dup_f64(v65);
      v65 += 4;
      v103 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v121.val[0], v103), v121.val[1], v105), v121.val[2], (float64x2_t)xmmword_1969FE080), v121.val[3], (float64x2_t)xmmword_1969FE0A0);
      v104 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v121.val[0], v104), v121.val[1], v106), v121.val[2], xmmword_1969FE090), v121.val[3], xmmword_1969FE0B0);
      v122 = vld4q_dup_f64(v65);
      v65 += 4;
      v105 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v119.val[0], v66), v119.val[1], v105), v119.val[2], (float64x2_t)xmmword_1969FE080), v119.val[3], (float64x2_t)xmmword_1969FE0A0);
      v106 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v119.val[0], v67), v119.val[1], v106), v119.val[2], xmmword_1969FE090), v119.val[3], xmmword_1969FE0B0);
      v120 = vld4q_dup_f64(v65);
      v107 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v122.val[0], v66), v122.val[1], v68), v122.val[2], (float64x2_t)xmmword_1969FE080), v122.val[3], (float64x2_t)xmmword_1969FE0A0);
      v108 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v122.val[0], v67), v122.val[1], v69), v122.val[2], xmmword_1969FE090), v122.val[3], xmmword_1969FE0B0);
      v110 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v120.val[0], v67), v120.val[1], v69), v120.val[2], xmmword_1969FE090), v120.val[3], xmmword_1969FE0B0);
      v109 = vcvtq_f64_f32(v64);
      WebCore::TransformState::applyTransform((float64x2_t **)a3, &v103, v28, 0);
      WTF::fastFree((WTF *)v62, v70);
    }
    v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 528);
    if (!v71 || (v72 = *(_QWORD *)(v71 + 8)) == 0 || (v73 = *(_QWORD *)(v72 + 288)) == 0)
    {
LABEL_119:
      v86 = v115[1];
      v115[1] = 0;
      if (v86)
        WTF::fastFree(v86, v60);
      v87 = v115[0];
      v115[0] = 0;
      if (v87)
        WTF::fastFree(v87, v60);
      goto LABEL_53;
    }
    v74 = *(_QWORD *)(v73 + 64);
    ++*(_DWORD *)(v73 + 8);
    v75 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v74 + 832))(v73 + 64, 0, 1);
    if ((int)v75 >= -33554432)
      v76 = (_DWORD)v75 << 6;
    else
      v76 = 0x80000000;
    v77 = 0x7FFFFFFF;
    if ((int)v75 > 0x1FFFFFF)
      v76 = 0x7FFFFFFF;
    if (SHIDWORD(v75) >= -33554432)
      v78 = HIDWORD(v75) << 6;
    else
      v78 = 0x80000000;
    if (SHIDWORD(v75) <= 0x1FFFFFF)
      v79 = v78;
    else
      v79 = 0x7FFFFFFF;
    v80 = v61;
    v81 = (float)((float)((float)v76 * 0.015625) * v80) * 64.0;
    if (v81 < 2147483650.0)
    {
      if (v81 <= -2147483650.0)
        v77 = 0x80000000;
      else
        v77 = (int)v81;
    }
    v82 = (float)((float)((float)v79 * 0.015625) * v80) * 64.0;
    if (v82 >= 2147483650.0)
    {
      if (v77 == 0x80000000)
        v84 = 0x7FFFFFFF;
      else
        v84 = -v77;
      v85 = -2147483647;
      goto LABEL_117;
    }
    if (v82 <= -2147483650.0)
    {
      if (v77 == 0x80000000)
        v84 = 0x7FFFFFFF;
      else
        v84 = -v77;
    }
    else
    {
      v83 = (int)v82;
      if (v77 == 0x80000000)
        v84 = 0x7FFFFFFF;
      else
        v84 = -v77;
      if (v83 != 0x80000000)
      {
        v85 = -v83;
LABEL_117:
        LODWORD(v103.f64[0]) = v84;
        HIDWORD(v103.f64[0]) = v85;
        WebCore::TransformState::move((WebCore::TransformState *)a3, (WebCore::LayoutSize *)&v103, 0);
        if (*(_DWORD *)(v73 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
        else
          --*(_DWORD *)(v73 + 8);
        goto LABEL_119;
      }
    }
    v85 = 0x7FFFFFFF;
    goto LABEL_117;
  }
  v35 = WebCore::RenderObject::offsetFromAncestorContainer(a2, (const WebCore::RenderElement *)v12);
  if ((_DWORD)v35 == 0x80000000)
    v36 = 0x7FFFFFFF;
  else
    v36 = -(int)v35;
  if (HIDWORD(v35) == 0x80000000)
    v37 = 0x7FFFFFFF;
  else
    v37 = -HIDWORD(v35);
  *(_QWORD *)&v103.f64[0] = __PAIR64__(v37, v36);
  WebCore::TransformState::move((WebCore::TransformState *)a3, (WebCore::LayoutSize *)&v103, v28);
LABEL_53:
  v38 = *(_DWORD *)(v12 + 16);
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x196520A68);
  }
  *(_DWORD *)(v12 + 16) = v38 - 1;
}

uint64_t WebCore::RenderSVGRoot::overflowClipRect(WebCore::RenderBox *a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v3 = a2[1];
  v5 = WebCore::RenderBox::contentBoxLocation(a1);
  if (__OFADD__(v4, (_DWORD)v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = v3 + HIDWORD(v5);
  if (__OFADD__(v3, HIDWORD(v5)))
    v7 = (v3 >> 31) + 0x7FFFFFFF;
  (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1016))(a1);
  (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1024))(a1);
  (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 944))(a1);
  (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 952))(a1);
  (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1000))(a1);
  (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1008))(a1);
  (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 928))(a1);
  (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 936))(a1);
  return v6 | (v7 << 32);
}

uint64_t WebCore::RenderSVGRoot::boundingRects(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(result + 160);
  *(_QWORD *)&v8 = *a3;
  *((_QWORD *)&v8 + 1) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
  {
    result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v8);
    v5 = *(unsigned int *)(a2 + 12);
    v6 = *(_QWORD *)a2;
    v7 = *(_OWORD *)result;
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = v8;
  }
  *(_OWORD *)(v6 + 16 * v5) = v7;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

uint64_t WebCore::RenderSVGRoot::absoluteQuads(int *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  float v5;
  float v6;
  uint64_t result;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v15;
  float v16;
  int v17;
  float v18;
  float v19;
  int v20;
  float v21;
  _OWORD v22[2];

  v4 = (uint64_t)a1;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0
    || (v12 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))(), v4 = (uint64_t)a1, !v12)
    || (result = WebCore::RenderFragmentedFlow::absoluteQuadsForBox(v12, a2, a3, a1), v4 = (uint64_t)a1,
                                                                                      (result & 1) == 0))
  {
    v5 = (float)*(int *)(v4 + 160) * 0.015625;
    v6 = (float)*(int *)(v4 + 164) * 0.015625;
    v15 = 0;
    v16 = v5 + 0.0;
    v17 = 0;
    v18 = v5 + 0.0;
    v19 = v6 + 0.0;
    v20 = 0;
    v21 = v6 + 0.0;
    result = (uint64_t)WebCore::RenderObject::localToContainerQuad(v4, (float *)&v15, 0, 2u, v22);
    v8 = a2[3];
    if ((_DWORD)v8 == a2[2])
    {
      result = WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v8 + 1, (unint64_t)v22);
      v9 = (_OWORD *)(*(_QWORD *)a2 + 32 * a2[3]);
      v10 = *(_OWORD *)result;
      v11 = *(_OWORD *)(result + 16);
    }
    else
    {
      v9 = (_OWORD *)(*(_QWORD *)a2 + 32 * v8);
      v10 = v22[0];
      v11 = v22[1];
    }
    *v9 = v10;
    v9[1] = v11;
    ++a2[3];
  }
  return result;
}

uint64_t WebCore::RenderSVGShape::isEmpty(WebCore::RenderSVGShape *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 28);
  if (!v1)
    return 1;
  v2 = *(_DWORD *)(v1 + 64);
  if (v2 != 2)
    return !v2;
  result = *(_QWORD *)(v1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

uint64_t WebCore::RenderSVGShape::fillShape(WebCore::RenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  return (*(uint64_t (**)(WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)a2 + 176))(a2, *((_QWORD *)this + 28));
}

uint64_t WebCore::RenderSVGShape::strokeShape(WebCore::RenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  __int128 *v3;
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  float64x2_t v9[3];
  char *v10;

  v3 = (__int128 *)*((_QWORD *)this + 28);
  if ((*(_WORD *)(*((_QWORD *)this + 17) + 8) & 0x400) != 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v4 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652106CLL);
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652108CLL);
    }
    *(_DWORD *)(v4 + 24) += 2;
    (*(void (**)(float64x2_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 1320))(v9, v4, 1);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    {
      v6 = qword_1EE2F95E8;
      v7 = *((_DWORD *)v3 + 16);
      if ((_DWORD)qword_1EE2F95E8 == -1)
      {
        if (v7 == -1)
          goto LABEL_12;
      }
      else if (v7 == -1)
      {
LABEL_9:
        ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v6])(&v10, (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8);
        LODWORD(qword_1EE2F95E8) = -1;
LABEL_12:
        v3 = &WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath;
        WebCore::Path::transform((WebCore::Path *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, v9);
        return (*(uint64_t (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)a2 + 184))(a2, v3);
      }
    }
    else
    {
      qword_1EE2F95E8 = 0;
      xmmword_1EE2F95C8 = 0u;
      unk_1EE2F95D8 = 0u;
      WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath = 0u;
      unk_1EE2F95B8 = 0u;
      v7 = *((_DWORD *)v3 + 16);
      if (v7 == -1)
      {
        v6 = 0;
        goto LABEL_9;
      }
    }
    v10 = (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
        + 8;
    ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_2[v7])(&v10);
    goto LABEL_12;
  }
  return (*(uint64_t (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)a2 + 184))(a2, v3);
}

__int128 *WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::RenderSVGShape *this, const WebCore::Path *a2, float64x2_t *a3)
{
  int v4;
  int v5;
  char *v7;
  char v8;

  {
    qword_1EE2F95E8 = 0;
    xmmword_1EE2F95C8 = 0u;
    unk_1EE2F95D8 = 0u;
    WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath = 0u;
    unk_1EE2F95B8 = 0u;
    v5 = *((_DWORD *)a2 + 16);
    if (v5 == -1)
    {
      v4 = 0;
      goto LABEL_4;
    }
LABEL_6:
    v7 = (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
       + 8;
    ((void (*)(char **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_2[v5])(&v7, (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8, (char *)a2 + 8);
    goto LABEL_7;
  }
  v4 = qword_1EE2F95E8;
  v5 = *((_DWORD *)a2 + 16);
  if ((_DWORD)qword_1EE2F95E8 == -1)
  {
    if (v5 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v5 != -1)
    goto LABEL_6;
LABEL_4:
  ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v4])(&v8, (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8);
  LODWORD(qword_1EE2F95E8) = -1;
LABEL_7:
  WebCore::Path::transform((WebCore::Path *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, a3);
  return &WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath;
}

uint64_t WebCore::RenderSVGShape::nonScalingStrokeTransform(WebCore::RenderSVGShape *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196521260);
  }
  *(_DWORD *)(v1 + 24) += 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 1320))(v1, 1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return result;
}

BOOL WebCore::RenderSVGShape::shapeDependentStrokeContains(_QWORD *a1, float *a2, int a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  float64x2_t v20[3];
  char *v21;

  if (a3 != 1 && (*(_WORD *)(a1[17] + 8) & 0x400) != 0)
  {
    v5 = *(_QWORD *)(a1[3] + 8);
    if ((*(_WORD *)(v5 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196521510);
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 1184))(*(_QWORD *)(a1[3] + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196521530);
    }
    *(_DWORD *)(v5 + 24) += 2;
    (*(void (**)(float64x2_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 1320))(v20, v5, 1);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    v7 = a1[28];
    {
      v8 = qword_1EE2F95E8;
      v9 = *(_DWORD *)(v7 + 64);
      if ((_DWORD)qword_1EE2F95E8 == -1)
      {
        if (v9 == -1)
          goto LABEL_21;
      }
      else if (v9 == -1)
      {
LABEL_10:
        ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v8])(&v21, (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8);
        LODWORD(qword_1EE2F95E8) = -1;
        goto LABEL_21;
      }
    }
    else
    {
      qword_1EE2F95E8 = 0;
      xmmword_1EE2F95C8 = 0u;
      unk_1EE2F95D8 = 0u;
      WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath = 0u;
      unk_1EE2F95B8 = 0u;
      v9 = *(_DWORD *)(v7 + 64);
      if (v9 == -1)
      {
        v8 = 0;
        goto LABEL_10;
      }
    }
    v21 = (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
        + 8;
    ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_2[v9])(&v21);
LABEL_21:
    WebCore::Path::transform((WebCore::Path *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, v20);
    v21 = (char *)vcvt_f32_f64(vaddq_f64(v20[2], vmlaq_n_f64(vmulq_n_f64(v20[1], a2[1]), v20[0], *a2)));
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E3449CB8;
    v16[1] = a1;
    v19 = v16;
    if ((_DWORD)qword_1EE2F95E8 == 2)
    {
      if (*((_QWORD *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
           + 1)
        && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
                                                 + 1)
                                              + 200))(*((_QWORD *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
                                                        + 1)) & 1) != 0)
      {
        goto LABEL_26;
      }
    }
    else if (!(_DWORD)qword_1EE2F95E8)
    {
LABEL_26:
      v14 = 0;
LABEL_28:
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      return v14;
    }
    v17 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath);
    v14 = WebCore::PathCG::strokeContains(v17, (float *)&v21, &v19);
    goto LABEL_28;
  }
  v10 = a1[28];
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E3449CE0;
  v11[1] = a1;
  *(_QWORD *)&v20[0].f64[0] = v11;
  v12 = *(_DWORD *)(v10 + 64);
  if (v12 == 2)
  {
    v13 = *(_QWORD *)(v10 + 8);
    if (v13 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 200))(v13) & 1) != 0)
      goto LABEL_16;
LABEL_17:
    v15 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v10);
    v14 = WebCore::PathCG::strokeContains(v15, a2, v20);
    goto LABEL_18;
  }
  if (v12)
    goto LABEL_17;
LABEL_16:
  v14 = 0;
LABEL_18:
  (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  return v14;
}

BOOL WebCore::RenderSVGShape::shapeDependentFillContains(uint64_t a1, float *a2, BOOL a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_DWORD *)(v5 + 64);
  if (v6 == 2)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7) & 1) != 0)
      return 0;
LABEL_5:
    v8 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v5);
    return WebCore::PathCG::contains(v8, a2, a3);
  }
  if (v6)
    goto LABEL_5;
  return 0;
}

void WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)0,(WebCore::SVGPaintServerHandling::URIResolving)0>(WebCore::RenderLayerModelObject *this@<X0>, WebCore::RenderStyle *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  WebCore::SVGRenderStyle *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  int v13;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::SVGRenderStyle *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 1944)
                             + 248)
                 + 1148) & 0x10) != 0)
  {
    v41 = 0x11040000000000FFLL;
    LODWORD(v42) = 0;
    *(_QWORD *)a3 = 0x11040000000000FFLL;
    *(_DWORD *)(a3 + 8) = 2;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_((uint64_t)&v45, &v41);
    return;
  }
  v8 = (WebCore::SVGRenderStyle *)*((_QWORD *)a2 + 7);
  v9 = *((_QWORD *)v8 + 2);
  v10 = *(unsigned __int8 *)(v9 + 56);
  if (v10 == 1)
  {
LABEL_3:
    *(_DWORD *)(a3 + 8) = 0;
    return;
  }
  if (v10 >= 3)
  {
    v12 = WebCore::RenderLayerModelObject::svgFillPaintServerResourceFromStyle(this, a2, a4, a5, a6);
    if (v12)
    {
      *(_QWORD *)a3 = v12;
      v13 = 1;
LABEL_27:
      *(_DWORD *)(a3 + 8) = v13;
      return;
    }
    if (v10 == 3 || v10 == 6)
      goto LABEL_3;
    v8 = (WebCore::SVGRenderStyle *)*((_QWORD *)a2 + 7);
    v9 = *((_QWORD *)v8 + 2);
  }
  ++*(_DWORD *)v8;
  WebCore::SVGPaintServerHandling::resolveColorFromStyle((uint64_t)a2, v9 + 8, *(unsigned __int8 *)(v9 + 57), v9 + 24, &v38);
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::SVGRenderStyle::~SVGRenderStyle(v8, v15);
    WTF::fastFree(v28, v29);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  v16 = v38;
  if ((v38 & 0x4000000000000) != 0)
  {
LABEL_26:
    *(_QWORD *)a3 = v16;
    v13 = 2;
    goto LABEL_27;
  }
  v17 = *((_QWORD *)this + 4);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = *(WebCore::SVGRenderStyle **)(v18 + 136);
      ++*(_DWORD *)v19;
      v20 = *((_QWORD *)v19 + 2);
      v40 = *((_QWORD *)this + 14) + 328;
      v41 = (uint64_t)&v40;
      v42 = &v40;
      v43 = &v40;
      v44 = &v40;
      v21 = *(unsigned int *)(v20 + 16);
      if ((_DWORD)v21 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        v45 = &v41;
        ((void (*)(unint64_t *__return_ptr, uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v21])(&v39, &v45, v20 + 8);
        v24 = v38;
        v23 = v39;
        if ((v38 & 0x8000000000000) == 0)
        {
          if (v38 != v39 || (v39 & 0x8000000000000) != 0)
          {
LABEL_22:
            v38 = v39;
LABEL_23:
            if (*(_DWORD *)v19 == 1)
            {
              WebCore::SVGRenderStyle::~SVGRenderStyle(v19, v22);
              WTF::fastFree(v30, v31);
            }
            else
            {
              --*(_DWORD *)v19;
            }
            v16 = v38;
            goto LABEL_26;
          }
          v23 = v38;
          goto LABEL_37;
        }
      }
      if ((v23 & 0x8000000000000) == 0
        || *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v24) != HIBYTE(v23)
        || BYTE6(v24) != BYTE6(v23))
      {
        v35 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v22);
        }
        goto LABEL_22;
      }
LABEL_37:
      if ((v23 & 0x8000000000000) != 0)
      {
        v32 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v22);
        }
      }
      goto LABEL_23;
    }
  }
  *(_DWORD *)(a3 + 8) = 0;
  if ((v16 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v15);
    }
  }
}

float WebCore::RenderSVGShape::strokeWidth(WebCore::RenderSVGShape *this)
{
  uint64_t v1;
  void *v3;
  unsigned __int8 *v4;
  WebCore::Length *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  float v16;
  float v17;
  unint64_t v18;
  char v19;
  float v20;
  float v21;
  WTF *v22;
  WTF *v23[5];
  _DWORD v24[4];
  int v25;
  char v26;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196521A60);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196521A80);
  }
  *(_DWORD *)(v1 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v23, (const WebCore::SVGElement *)v1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  v4 = (unsigned __int8 *)*((_QWORD *)this + 13);
  v5 = (WebCore::Length *)(v4 + 244);
  v6 = v4[248];
  if (v6 == 4)
  {
    if (v4[250])
      v7 = *(float *)v5;
    else
      v7 = (float)*(int *)v5;
  }
  else if (v6 == 11)
  {
    v18 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v23);
    v17 = *((float *)&v18 + 1);
    v16 = *(float *)&v18;
    if (!v19)
    {
      v17 = 0.0;
      v16 = 0.0;
    }
    v20 = hypotf(v16, v17);
    WebCore::Length::nonNanCalculatedValue(v5, v20 / 1.4142);
    v7 = v21;
  }
  else
  {
    v7 = 0.0;
    if (v6 == 3)
    {
      v8 = *((float *)v4 + 61);
      if (!v4[250])
        v8 = (float)SLODWORD(v8);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v23, 2, (uint64_t)v24, v8 / 100.0);
      if (v25 != -1)
      {
        if (!v25)
          v7 = *(float *)v24;
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v25])(&v26, v24);
      }
    }
  }
  v9 = v23[0];
  v23[0] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *((unsigned int *)v9 + 7);
      if ((_DWORD)v13)
      {
        v22 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v9 + 2), (WTF::StringImpl *)(*((_QWORD *)v9 + 2) + 32 * v13));
        v9 = v22;
      }
      v14 = (WTF *)*((_QWORD *)v9 + 2);
      if (v14)
      {
        *((_QWORD *)v9 + 2) = 0;
        *((_DWORD *)v9 + 6) = 0;
        v15 = v9;
        WTF::fastFree(v14, v3);
        v9 = v15;
      }
      WTF::fastFree(v9, v3);
    }
  }
  return v7;
}

void WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)1,(WebCore::SVGPaintServerHandling::URIResolving)0>(WebCore::RenderLayerModelObject *this@<X0>, WebCore::RenderStyle *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  WebCore::SVGRenderStyle *v6;
  WebCore::SVGRenderStyle *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  uint64_t v15;
  int v16;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t **v49;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 1944)
                             + 248)
                 + 1148) & 0x10) != 0)
  {
    WebCore::SVGRenderStyle::initialStrokePaintColor((uint64_t)&v45);
    if ((_DWORD)v46)
      goto LABEL_49;
    v12 = v45;
    *(_QWORD *)a3 = v45;
    if (((unint64_t)v12 & 0x8000000000000) != 0)
    {
      v37 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFLL);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
      v13 = (int)v46;
      *(_DWORD *)(a3 + 8) = 2;
      if (v13 == -1)
        return;
    }
    else
    {
      v13 = 0;
      *(_DWORD *)(a3 + 8) = 2;
    }
    ((void (*)(uint64_t ***, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v49, &v45);
    return;
  }
  v9 = (WebCore::SVGRenderStyle *)*((_QWORD *)a2 + 7);
  v10 = *((_QWORD *)v9 + 3);
  v11 = *(unsigned __int8 *)(v10 + 80);
  if (v11 == 1)
  {
LABEL_3:
    *(_DWORD *)(a3 + 8) = 0;
    return;
  }
  if (v11 >= 3)
  {
    v15 = WebCore::RenderLayerModelObject::svgStrokePaintServerResourceFromStyle(this, a2, a4, a5, a6);
    if (v15)
    {
      *(_QWORD *)a3 = v15;
      v16 = 1;
LABEL_30:
      *(_DWORD *)(a3 + 8) = v16;
      return;
    }
    if (v11 == 3 || v11 == 6)
      goto LABEL_3;
    v9 = (WebCore::SVGRenderStyle *)*((_QWORD *)a2 + 7);
    v10 = *((_QWORD *)v9 + 3);
  }
  ++*(_DWORD *)v9;
  WebCore::SVGPaintServerHandling::resolveColorFromStyle((uint64_t)a2, v10 + 8, *(unsigned __int8 *)(v10 + 81), v10 + 24, &v42);
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::SVGRenderStyle::~SVGRenderStyle(v9, v18);
    WTF::fastFree(v30, v31);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  v19 = v42;
  if ((v42 & 0x4000000000000) != 0)
  {
LABEL_29:
    *(_QWORD *)a3 = v19;
    v16 = 2;
    goto LABEL_30;
  }
  v20 = *((_QWORD *)this + 4);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v6 = *(WebCore::SVGRenderStyle **)(v21 + 136);
      ++*(_DWORD *)v6;
      v22 = *((_QWORD *)v6 + 3);
      v44 = *((_QWORD *)this + 14) + 328;
      v45 = &v44;
      v46 = &v44;
      v47 = &v44;
      v48 = &v44;
      v23 = *(unsigned int *)(v22 + 16);
      if ((_DWORD)v23 != -1)
      {
        v49 = &v45;
        ((void (*)(unint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v23])(&v43, &v49, v22 + 8);
        v26 = v42;
        v25 = v43;
        if ((v42 & 0x8000000000000) == 0)
        {
          if (v42 != v43 || (v43 & 0x8000000000000) != 0)
          {
LABEL_25:
            v42 = v43;
LABEL_26:
            if (*(_DWORD *)v6 == 1)
            {
              WebCore::SVGRenderStyle::~SVGRenderStyle(v6, v24);
              WTF::fastFree(v32, v33);
            }
            else
            {
              --*(_DWORD *)v6;
            }
            v19 = v42;
            goto LABEL_29;
          }
          v25 = v42;
          goto LABEL_40;
        }
LABEL_50:
        if ((v25 & 0x8000000000000) == 0
          || *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v26) != HIBYTE(v25)
          || BYTE6(v26) != BYTE6(v25))
        {
          v39 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            atomic_store(1u, v39);
            WTF::fastFree((WTF *)v39, v24);
          }
          goto LABEL_25;
        }
LABEL_40:
        if ((v25 & 0x8000000000000) != 0)
        {
          v34 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v24);
          }
        }
        goto LABEL_26;
      }
LABEL_49:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_50;
    }
  }
  *(_DWORD *)(a3 + 8) = 0;
  if ((v19 & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v18);
    }
  }
}

uint64_t WebCore::RenderSVGShape::layout(WebCore::RenderSVGShape *this)
{
  float v2;
  float v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unsigned int v21;
  _BYTE v22[56];

  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v22, this, 0, 0, 1);
  if (*((_BYTE *)this + 216))
  {
    (*(void (**)(WebCore::RenderSVGShape *))(*(_QWORD *)this + 920))(this);
    *((_BYTE *)this + 216) = 0;
    v2 = *((float *)this + 42);
    v3 = *((float *)this + 43);
    v4 = floorf(v2 * 64.0);
    if (v4 > -2147500000.0)
      v5 = (int)v4;
    else
      v5 = 0x80000000;
    if (v4 < 2147500000.0)
      v6 = v5;
    else
      v6 = 0x7FFFFFFFLL;
    v7 = floorf(v3 * 64.0);
    if (v7 > -2147500000.0)
      v8 = (int)v7;
    else
      v8 = 0x80000000;
    if (v7 < 2147500000.0)
      v9 = v8;
    else
      v9 = 0x7FFFFFFFLL;
    v10 = v2 + *((float *)this + 44);
    v11 = v3 + *((float *)this + 45);
    v12 = ceilf(v10 * 64.0);
    if (v12 >= 2147500000.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v12 <= -2147500000.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v12;
    }
    v14 = ceilf(v11 * 64.0);
    if (v14 >= 2147500000.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147500000.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
    v16 = __OFSUB__(v13, (_DWORD)v6);
    v17 = v13 - v6;
    LODWORD(v18) = (v13 >> 31) + 0x7FFFFFFF;
    if (v16)
      v18 = v18;
    else
      v18 = v17;
    v19 = v15 - v9;
    if (__OFSUB__(v15, (_DWORD)v9))
      v19 = (v15 >> 31) + 0x7FFFFFFF;
    *((_QWORD *)this + 19) = v6 | (v9 << 32);
    *((_QWORD *)this + 20) = v18 | (v19 << 32);
  }
  (*(void (**)(WebCore::RenderSVGShape *))(*(_QWORD *)this + 856))(this);
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v22);
  v21 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v21;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v21 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::SVGPaintServerHandling::preparePaintOperation<(WebCore::SVGPaintServerHandling::Operation)0>(WebCore::GraphicsContext **a1, WebCore::RenderLayerModelObject *this, WebCore::RenderStyle *a3, double a4, double a5, float a6)
{
  int v9;
  uint64_t v10;
  WebCore::RenderSVGShape *v12;
  const WebCore::RenderStyle *v13;
  WebCore::GraphicsContext *v14;
  _BYTE v15[8];
  int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;

  WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)0,(WebCore::SVGPaintServerHandling::URIResolving)0>(this, a3, (uint64_t)&v17, a4, a5, a6);
  v9 = v18;
  if (!v18)
    goto LABEL_16;
  if (v18 != 1)
    goto LABEL_12;
  if (((*(uint64_t (**)(uint64_t, WebCore::GraphicsContext *, WebCore::RenderLayerModelObject *, WebCore::RenderStyle *))(*(_QWORD *)v17 + 944))(v17, *a1, this, a3) & 1) != 0)goto LABEL_14;
  WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)0,(WebCore::SVGPaintServerHandling::URIResolving)1>(this, (uint64_t)a3, (uint64_t)v15);
  if (v18 == -1)
  {
    if (v16 == -1)
      goto LABEL_11;
  }
  else if (v16 == -1)
  {
    ((void (*)(uint64_t **, uint64_t *))off_1E3449C28[v18])(&v19, &v17);
    v18 = -1;
    goto LABEL_9;
  }
  v19 = &v17;
  ((void (*)(uint64_t **, uint64_t *, _BYTE *))off_1E3449CF8[v16])(&v19, &v17, v15);
LABEL_9:
  if (v16 != -1)
    ((void (*)(uint64_t **, _BYTE *))off_1E3449C28[v16])(&v19, v15);
LABEL_11:
  v9 = v18;
  if (!v18)
  {
LABEL_16:
    v10 = 0;
LABEL_17:
    ((void (*)(_BYTE *, uint64_t *))off_1E3449C28[v9])(v15, &v17);
    return v10;
  }
LABEL_12:
  if (v9 == 2)
  {
    WebCore::SVGPaintServerHandling::prepareFillOperation(a1, this, a3, (const WebCore::Color *)&v17);
LABEL_14:
    v9 = v18;
    v10 = 1;
    if (v18 == -1)
      return v10;
    goto LABEL_17;
  }
  v12 = (WebCore::RenderSVGShape *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderSVGShape::strokeShape(v12, v13, v14);
}

float WebCore::RenderSVGShape::strokeShape(WebCore::RenderSVGShape *this, const WebCore::RenderStyle *a2, WebCore::GraphicsContext *a3, double a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  __int16 v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  char v34;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 24) + 80) == 1)
    return *(float *)&a4;
  v9 = *((_QWORD *)a2 + 3);
  if (*(_BYTE *)(v9 + 248))
    v10 = *(_BYTE *)(v9 + 248) == 11;
  else
    v10 = 1;
  if (!v10)
  {
    if (*(_BYTE *)(v9 + 250))
    {
      LODWORD(a4) = *(_DWORD *)(v9 + 244);
      if (*(float *)&a4 == 0.0)
        return *(float *)&a4;
    }
    else if (!*(_DWORD *)(v9 + 244))
    {
      return *(float *)&a4;
    }
  }
  v11 = *(_WORD *)(*((_QWORD *)this + 17) + 8);
  if ((v11 & 0x400) == 0)
    goto LABEL_24;
  v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v12 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196522414);
  }
  *(_DWORD *)(v12 + 24) += 2;
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 1320))(&v22, v12, 1);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  LODWORD(a4) = LODWORD(v22);
  v14 = v22 * v25 - v23 * v24;
  v15 = fabs(v14);
  if ((unint64_t)(*(_QWORD *)&v15 - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&v15 - 1) <= 0xFFFFFFFFFFFFELL)
  {
    v17 = 1.0;
    if (v22 == 1.0 && v23 == 0.0 && v24 == 0.0 && v25 == 1.0)
    {
      v19 = -v26;
      v20 = -v27;
      v29 = 0.0;
      v30 = 0.0;
      v18 = 1.0;
    }
    else
    {
      v17 = v25 / v14;
      v18 = v22 / v14;
      v19 = (v24 * v27 - v25 * v26) / v14;
      v29 = -v23 / v14;
      v30 = -v24 / v14;
      v20 = (v23 * v26 - v22 * v27) / v14;
    }
    v28 = v17;
    v31 = v18;
    v32 = v19;
    v33 = v20;
    v34 = 1;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
    a4 = (*(double (**)(WebCore::GraphicsContext *, double *))(*(_QWORD *)a3 + 656))(a3, &v28);
LABEL_24:
    v28 = *(double *)&a3;
    if (WebCore::SVGPaintServerHandling::preparePaintOperation<(WebCore::SVGPaintServerHandling::Operation)1>((unsigned int **)&v28, this, a2, a4, a5, a6))(*(void (**)(WebCore::RenderSVGShape *, WebCore::GraphicsContext *))(*(_QWORD *)this + 904))(this, a3);
    if ((v11 & 0x400) != 0)
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  }
  return *(float *)&a4;
}

uint64_t WebCore::SVGPaintServerHandling::preparePaintOperation<(WebCore::SVGPaintServerHandling::Operation)1>(unsigned int **a1, WebCore::RenderLayerModelObject *this, WebCore::RenderStyle *a3, double a4, double a5, float a6)
{
  int v9;
  unsigned int *v10;
  float v11;
  WebCore::GraphicsContext *v12;
  void *v13;
  const WebCore::RenderElement *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;

  WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)1,(WebCore::SVGPaintServerHandling::URIResolving)0>(this, a3, (uint64_t)&v23, a4, a5, a6);
  v9 = v24;
  if (!v24)
    goto LABEL_19;
  if (v24 != 1)
    goto LABEL_12;
  if (((*(uint64_t (**)(uint64_t, unsigned int *, WebCore::RenderLayerModelObject *, WebCore::RenderStyle *))(*(_QWORD *)v23 + 952))(v23, *a1, this, a3) & 1) != 0)goto LABEL_17;
  WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)1,(WebCore::SVGPaintServerHandling::URIResolving)1>(this, (uint64_t)a3, (uint64_t)&v21);
  if (v24 == -1)
  {
    if (v22 == -1)
      goto LABEL_11;
  }
  else if (v22 == -1)
  {
    ((void (*)(uint64_t **, uint64_t *))off_1E3449C28[v24])(&v25, &v23);
    v24 = -1;
    goto LABEL_9;
  }
  v25 = &v23;
  ((void (*)(uint64_t **, uint64_t *, unint64_t *))off_1E3449CF8[v22])(&v25, &v23, &v21);
LABEL_9:
  if (v22 != -1)
    ((void (*)(uint64_t **, unint64_t *))off_1E3449C28[v22])(&v25, &v21);
LABEL_11:
  v9 = v24;
  if (v24)
  {
LABEL_12:
    if (v9 == 2)
    {
      v10 = *a1;
      v11 = *(float *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 24) + 4);
      if (*((float *)*a1 + 84) != v11)
      {
        *((float *)v10 + 84) = v11;
        v10[46] |= 0x100u;
      }
      (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v10 + 88))(v10, v10 + 2);
      v12 = (WebCore::GraphicsContext *)*a1;
      WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)a3, (const WebCore::Color *)&v23, &v21);
      WebCore::GraphicsContext::setStrokeColor(v12, (const WebCore::Color *)&v21);
      v15 = v21;
      if ((v21 & 0x8000000000000) == 0)
        goto LABEL_16;
    }
    else
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v18 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v13);
    }
LABEL_16:
    WebCore::SVGRenderSupport::applyStrokeStyleToContext(*a1, a3, this, v14);
LABEL_17:
    v9 = v24;
    v16 = 1;
    if (v24 == -1)
      return v16;
    goto LABEL_20;
  }
LABEL_19:
  v16 = 0;
LABEL_20:
  ((void (*)(unint64_t *, uint64_t *))off_1E3449C28[v9])(&v21, &v23);
  return v16;
}

unint64_t WebCore::RenderSVGShape::paint(WebCore::RenderSVGShape *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  unint64_t result;
  WebCore::RenderSVGShape *v7;
  const WebCore::RenderLayerModelObject *v8;
  double v9;
  int v10;
  WebCore::RenderSVGShape *v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WebCore::RenderSVGShape *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  int v38;
  float v39;
  int v40;
  signed int v41;
  signed int v42;
  __n128 v43;
  double v44;
  float v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
  if ((result & 1) == 0 && (*((_WORD *)a2 + 8) & 0xC58) != 0)
  {
    v7 = (WebCore::RenderSVGShape *)*((_QWORD *)a2 + 3);
    if ((!v7 || v7 == this)
      && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
      && (*((_DWORD *)this + 30) & 0x30) != 0x10
      && (*((_QWORD *)this + 12) & 0x1FLL) != 0x1A)
    {
      result = (*(uint64_t (**)(WebCore::RenderSVGShape *))(*(_QWORD *)this + 928))(this);
      if ((result & 1) == 0)
      {
        v10 = *((unsigned __int16 *)a2 + 8);
        if (v10 == 2048)
        {
          v56 = *(_OWORD *)((char *)this + 168);
          result = *((_QWORD *)a2 + 10);
          v11 = (WebCore::RenderSVGShape *)*((_QWORD *)a2 + 3);
          if ((!v11 || v11 == this)
            && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
            && (*((_BYTE *)this + 120) & 0x30) == 0)
          {
            result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 40))(result);
            if ((result & 1) == 0)
            {
              result = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(this);
              if (result)
                return (unint64_t)WebCore::RenderSVGResourceClipper::applyMaskClipping((WebCore::RenderLayerModelObject *)result, a2, this, (const WebCore::FloatRect *)&v56);
            }
          }
        }
        else
        {
          v13 = *((_DWORD *)this + 38);
          v12 = *((_DWORD *)this + 39);
          v14 = *((_DWORD *)a3 + 1);
          v15 = __OFADD__(*(_DWORD *)a3, v13);
          v16 = *(_DWORD *)a3 + v13;
          if (v15)
            v17 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
          else
            v17 = v16;
          v15 = __OFADD__(v14, v12);
          v18 = v14 + v12;
          if (v15)
            v19 = (v14 >> 31) + 0x7FFFFFFF;
          else
            v19 = v18;
          v55 = v17 | (v19 << 32);
          if (v10 == 1024)
          {
            result = *((_QWORD *)a2 + 10);
            v20 = (WebCore::RenderSVGShape *)*((_QWORD *)a2 + 3);
            if (!v20 || v20 == this)
            {
              result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 40))(result);
              if ((result & 1) == 0)
              {
                result = WebCore::RenderLayerModelObject::svgMaskerResourceFromStyle(this);
                if (result)
                  return (unint64_t)WebCore::RenderSVGResourceMasker::applyMask((uint64_t *)result, a2, this, (const WebCore::LayoutPoint *)&v55);
              }
            }
          }
          else
          {
            result = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, v8, v9);
            v23 = result + v17;
            if (__OFADD__((_DWORD)result, (_DWORD)v17))
              v23 = (result >> 31) + 0x7FFFFFFF;
            v24 = HIDWORD(result) + v19;
            if (__OFADD__(HIDWORD(result), (_DWORD)v19))
              v24 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
            if (v21 >= 1 && v22 >= 1)
            {
              v25 = *((_DWORD *)a2 + 2);
              if (v25 >= 1)
              {
                v26 = *((_DWORD *)a2 + 3);
                if (v26 >= 1)
                {
                  v27 = *(_DWORD *)a2;
                  v15 = __OFADD__(*(_DWORD *)a2, v25);
                  v28 = *(_DWORD *)a2 + v25;
                  if (v15)
                    v28 = (v27 >> 31) + 0x7FFFFFFF;
                  if ((int)v23 < v28)
                  {
                    v29 = v23 + v21;
                    if (__OFADD__(v23, v21))
                      v29 = (v23 >> 31) + 0x7FFFFFFF;
                    if (v27 < v29)
                    {
                      v30 = *((_DWORD *)a2 + 1);
                      v15 = __OFADD__(v30, v26);
                      v31 = v30 + v26;
                      if (v15)
                        v31 = (v30 >> 31) + 0x7FFFFFFF;
                      if (v24 < v31)
                      {
                        v32 = v24 + v22;
                        if (__OFADD__(v24, v22))
                          v32 = (v24 >> 31) + 0x7FFFFFFF;
                        if ((int)v30 < v32)
                        {
                          v33 = *((unsigned __int16 *)a2 + 8);
                          if (v33 == 64 || v33 == 16)
                          {
                            v34 = *((_QWORD *)this + 20);
                            *(_QWORD *)&v56 = v17 | (v19 << 32);
                            *((_QWORD *)&v56 + 1) = v34;
                            return WebCore::RenderElement::paintOutline(this, a2, (const WebCore::LayoutRect *)&v56);
                          }
                          else
                          {
                            v35 = *((_QWORD *)a2 + 10);
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 96))(v35, 1);
                            v36 = floorf((*(float (**)(WebCore::RenderSVGShape *))(*(_QWORD *)this + 248))(this)* 64.0);
                            if (v36 >= 2147500000.0)
                            {
                              v38 = 0x7FFFFFFF;
                            }
                            else if (v36 <= -2147500000.0)
                            {
                              v38 = 0x80000000;
                            }
                            else
                            {
                              v38 = (int)v36;
                            }
                            v39 = floorf(v37 * 64.0);
                            if (v39 >= 2147500000.0)
                            {
                              v40 = 0x7FFFFFFF;
                            }
                            else if (v39 <= -2147500000.0)
                            {
                              v40 = 0x80000000;
                            }
                            else
                            {
                              v40 = (int)v39;
                            }
                            v15 = __OFSUB__((_DWORD)v17, v38);
                            v41 = v17 - v38;
                            if (v15)
                              v41 = (v17 >> 31) + 0x7FFFFFFF;
                            v15 = __OFSUB__((_DWORD)v19, v40);
                            v42 = v19 - v40;
                            if (v15)
                              v42 = (v19 >> 31) + 0x7FFFFFFF;
                            (*(void (**)(_QWORD, float, float))(**((_QWORD **)a2 + 10) + 648))(*((_QWORD *)a2 + 10), (float)v41 * 0.015625, (float)v42 * 0.015625);
                            if ((*(_WORD *)(*((_QWORD *)this + 17) + 4) & 3) == 2)
                            {
                              v46 = *((_QWORD *)a2 + 10);
                              if (*(_BYTE *)(v46 + 342))
                              {
                                *(_BYTE *)(v46 + 342) = 0;
                                *(_DWORD *)(v46 + 184) |= 0x800u;
                              }
                              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 88))(v46, v46 + 8);
                            }
                            v47 = (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 13) + 236) >> 11) & 7) - 2;
                            if (v47 > 4)
                              v48 = &WebCore::RenderStyle::paintTypesForPaintOrder(WebCore::PaintOrder)::fill;
                            else
                              v48 = (char *)*(&off_1E3449DB0 + v47);
                            v49 = *v48;
                            if (v49 == 2)
                            {
                              (*(void (**)(WebCore::RenderSVGShape *, WebCore::PaintInfo *))(*(_QWORD *)this + 960))(this, a2);
                            }
                            else if (v49 == 1)
                            {
                              v43.n128_f32[0] = WebCore::RenderSVGShape::strokeShape(this, (WebCore::RenderSVGShape *)((char *)this + 80), *((WebCore::GraphicsContext **)a2 + 10), v43.n128_f64[0], v44, v45);
                            }
                            else if (!*v48)
                            {
                              v50 = *((_QWORD *)a2 + 10);
                              *(_QWORD *)&v56 = v50;
                              if (WebCore::SVGPaintServerHandling::preparePaintOperation<(WebCore::SVGPaintServerHandling::Operation)0>((WebCore::GraphicsContext **)&v56, this, (WebCore::RenderSVGShape *)((char *)this + 80), v43.n128_f64[0], v44, v45))(*(void (**)(WebCore::RenderSVGShape *, uint64_t))(*(_QWORD *)this + 896))(this, v50);
                            }
                            v51 = v48[1];
                            if (v48[1])
                            {
                              if (v51 == 1)
                              {
                                v43.n128_f32[0] = WebCore::RenderSVGShape::strokeShape(this, (WebCore::RenderSVGShape *)((char *)this + 80), *((WebCore::GraphicsContext **)a2 + 10), v43.n128_f64[0], v44, v45);
                              }
                              else if (v51 == 2)
                              {
                                (*(void (**)(WebCore::RenderSVGShape *, WebCore::PaintInfo *))(*(_QWORD *)this + 960))(this, a2);
                              }
                            }
                            else
                            {
                              v52 = *((_QWORD *)a2 + 10);
                              *(_QWORD *)&v56 = v52;
                              if (WebCore::SVGPaintServerHandling::preparePaintOperation<(WebCore::SVGPaintServerHandling::Operation)0>((WebCore::GraphicsContext **)&v56, this, (WebCore::RenderSVGShape *)((char *)this + 80), v43.n128_f64[0], v44, v45))(*(void (**)(WebCore::RenderSVGShape *, uint64_t))(*(_QWORD *)this + 896))(this, v52);
                            }
                            v53 = v48[2];
                            if (v48[2])
                            {
                              if (v53 == 1)
                              {
                                v43.n128_f32[0] = WebCore::RenderSVGShape::strokeShape(this, (WebCore::RenderSVGShape *)((char *)this + 80), *((WebCore::GraphicsContext **)a2 + 10), v43.n128_f64[0], v44, v45);
                              }
                              else if (v53 == 2)
                              {
                                (*(void (**)(WebCore::RenderSVGShape *, WebCore::PaintInfo *, __n128))(*(_QWORD *)this + 960))(this, a2, v43);
                              }
                            }
                            else
                            {
                              v54 = *((_QWORD *)a2 + 10);
                              *(_QWORD *)&v56 = v54;
                              if (WebCore::SVGPaintServerHandling::preparePaintOperation<(WebCore::SVGPaintServerHandling::Operation)0>((WebCore::GraphicsContext **)&v56, this, (WebCore::RenderSVGShape *)((char *)this + 80), v43.n128_f64[0], v44, v45))(*(void (**)(WebCore::RenderSVGShape *, uint64_t, __n128))(*(_QWORD *)this + 896))(this, v54, v43);
                            }
                            return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v35 + 104))(v35, 1, v43);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

float WebCore::RenderSVGShape::getTotalLength(WebCore::Path **this)
{
  float result;
  unsigned int *v2;
  void *v3;
  float v4;
  float v5;
  uint64_t v6;
  WebCore::Path *v7;
  char v8;

  if (this[28])
  {
    WebCore::Path::length(this[28]);
  }
  else
  {
    WebCore::RenderSVGShape::createPath((WebCore::RenderSVGShape *)this, (unsigned int **)&v7);
    v2 = (unsigned int *)v7;
    WebCore::Path::length(v7);
    v5 = v4;
    if (v2)
    {
      v6 = v2[16];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v6])(&v8, v2 + 2);
      v2[16] = -1;
      WTF::fastFree((WTF *)v2, v3);
    }
    return v5;
  }
  return result;
}

unsigned int *WebCore::RenderSVGShape::createPath@<X0>(WebCore::RenderSVGShape *this@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  const WebCore::SVGElement *v4;
  unsigned int *result;
  unsigned int *v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];
  _BYTE v12[56];
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196522D94);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196522DB4);
  }
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::pathFromGraphicsElement((WebCore *)v3, v4, (uint64_t)v11);
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x48);
  v6 = result;
  *((_BYTE *)result + 8) = 0;
  v7 = result + 2;
  result[16] = -1;
  v8 = v13;
  if (v13 == -1)
  {
    *a2 = result;
  }
  else
  {
    result = (unsigned int *)((uint64_t (*)(char *, void *, _BYTE *))off_1E3449C70[v13])(&v10, v7, v12);
    v6[16] = v8;
    v9 = v13;
    *a2 = v6;
    if ((_DWORD)v9 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v9])(&v10, v12);
  }
  v13 = -1;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v7);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

float WebCore::RenderSVGShape::getPointAtLength(WebCore::RenderSVGShape *this, float a2)
{
  WebCore::Path *v4;
  float v5;
  unsigned int *v6;
  void *v7;
  uint64_t v8;
  WebCore::Path *v10;
  _BYTE v11[8];
  float v12;

  v4 = (WebCore::Path *)*((_QWORD *)this + 28);
  if (v4)
  {
    WebCore::Path::traversalStateAtLength(v4, a2, (uint64_t)v11);
    return v12;
  }
  else
  {
    WebCore::RenderSVGShape::createPath(this, (unsigned int **)&v10);
    v6 = (unsigned int *)v10;
    WebCore::Path::traversalStateAtLength(v10, a2, (uint64_t)v11);
    v5 = v12;
    if (v6)
    {
      v8 = v6[16];
      if ((_DWORD)v8 != -1)
        ((void (*)(_BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v8])(v11, v6 + 2);
      v6[16] = -1;
      WTF::fastFree((WTF *)v6, v7);
    }
  }
  return v5;
}

BOOL WebCore::RenderSVGShape::nodeAtPoint(uint64_t a1, uint64_t a2, WebCore::HitTestResult *a3, unsigned int *a4, _DWORD *a5, int a6)
{
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  _BOOL8 v21;
  void *v22;
  WTF *v23;
  int v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  float v46;
  float v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  char v55;
  char v56;
  int v57;
  char v58;
  int v59;
  WebCore::RenderStyle *v60;
  uint64_t v61;
  int v62;
  int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  int v74;
  int v75;
  int v76;
  char v77;
  float v78;
  float v79;
  _QWORD *v80;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  WebCore::ImageOverlay *v85;
  WebCore::Node *v86;
  void *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  WebCore::ImageOverlay *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  char v96;
  int v97;
  int v98;
  char v99;
  char v100;
  float v101;
  float v102;
  unint64_t v103;
  int v104;
  int v105;
  char v106;

  if (a6 != 4)
    return 0;
  if (_MergedGlobals_259 == 1)
  {
    v11 = dword_1ECE84AB8;
  }
  else
  {
    v11 = 0;
    qword_1ECE84AB0 = 0;
    *(_QWORD *)&dword_1ECE84AB8 = 0;
    _MergedGlobals_259 = 1;
  }
  dword_1ECE84AB8 = v11 + 1;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    if (*(_QWORD *)(v12 + 8) && qword_1ECE84AB0)
    {
      v13 = *(_DWORD *)(qword_1ECE84AB0 - 8);
      v14 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      for (i = 1; ; ++i)
      {
        v19 = *(_QWORD *)(qword_1ECE84AB0 + 8 * v17);
        if (!v19)
          break;
        if (v19 != -1 && v19 == v12)
          return 0;
        v17 = (v17 + i) & v13;
      }
    }
    goto LABEL_18;
  }
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a1;
  v23 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v12;
  if (!v23)
  {
LABEL_18:
    ++*(_DWORD *)v12;
    goto LABEL_19;
  }
  if (*(_DWORD *)v23 != 1)
  {
    --*(_DWORD *)v23;
    goto LABEL_18;
  }
  WTF::fastFree(v23, v22);
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
    goto LABEL_18;
LABEL_19:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84AB0, (_QWORD *)a1, (uint64_t)&v103);
  v25 = *(_DWORD *)(a1 + 152);
  v24 = *(_DWORD *)(a1 + 156);
  v26 = a5[1];
  v27 = __OFADD__(*a5, v25);
  v28 = *a5 + v25;
  if (v27)
    v29 = (*a5 >> 31) + 0x7FFFFFFF;
  else
    v29 = v28;
  v27 = __OFADD__(v26, v24);
  v30 = v26 + v24;
  if (v27)
    v31 = (v26 >> 31) + 0x7FFFFFFF;
  else
    v31 = v30;
  v33 = *a4;
  v32 = a4[1];
  v34 = floorf((*(float (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) * 64.0);
  if (v34 >= 2147500000.0)
  {
    v36 = 0x7FFFFFFF;
  }
  else if (v34 <= -2147500000.0)
  {
    v36 = 0x80000000;
  }
  else
  {
    v36 = (int)v34;
  }
  v37 = floorf(v35 * 64.0);
  if (v37 >= 2147500000.0)
  {
    v38 = 0x7FFFFFFF;
  }
  else if (v37 <= -2147500000.0)
  {
    v38 = 0x80000000;
  }
  else
  {
    v38 = (int)v37;
  }
  v27 = __OFSUB__(v36, v29);
  v39 = v36 - v29;
  v40 = (v36 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v40 = v39;
  v27 = __OFSUB__(v38, v31);
  v41 = v38 - v31;
  v42 = (v38 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v42 = v41;
  v27 = __OFADD__(v33, v40);
  v43 = v33 + v40;
  if (v27)
    v43 = (v33 >> 31) + 0x7FFFFFFF;
  v27 = __OFADD__(v32, v42);
  v44 = v32 + v42;
  v45 = (v32 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v45 = v44;
  v46 = (float)v43 * 0.015625;
  v47 = (float)v45 * 0.015625;
  *(float *)&v103 = v46;
  *((float *)&v103 + 1) = v47;
  if (WebCore::RenderLayerModelObject::pointInSVGClippingArea((WebCore::RenderLayerModelObject *)a1, (const WebCore::FloatPoint *)&v103))
  {
    v50 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v51 = *(_QWORD *)(*(_QWORD *)(v50 + 40) + 8);
    if (*(_BYTE *)(v51 + 3441) && *(_QWORD *)(v51 + 1272) != v50)
      goto LABEL_149;
    v52 = a1;
    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
    {
      v52 = *(_QWORD *)(a1 + 32);
      if (v52)
        v52 = *(_QWORD *)(v52 + 8);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v52 + 104) + 239) & 1) != 0)
LABEL_149:
      v53 = 0;
    else
      v53 = (*(_DWORD *)(v52 + 124) >> 6) & 0xF;
    v54 = 0;
    if ((*(_DWORD *)a2 & 0x40) != 0)
      v53 = 3;
    switch(v53)
    {
      case 1:
      case 8:
        v54 = 1;
        goto LABEL_49;
      case 2:
        v55 = 0;
        v54 = 0;
        goto LABEL_57;
      case 3:
        v56 = 0;
        v54 = 0;
        v55 = 1;
        goto LABEL_58;
      case 4:
        v54 = 1;
        goto LABEL_55;
      case 5:
LABEL_49:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        goto LABEL_61;
      case 6:
        v55 = 0;
        v54 = 0;
        v57 = 0;
        v56 = 1;
        goto LABEL_61;
      case 7:
        v56 = 0;
        v54 = 0;
        v57 = 0;
        v55 = 1;
LABEL_61:
        v58 = 1;
        goto LABEL_62;
      case 9:
        v56 = 0;
        v58 = 0;
        v54 = 0;
        v55 = 1;
        goto LABEL_59;
      case 10:
LABEL_55:
        v55 = 0;
        v56 = 0;
        goto LABEL_58;
      default:
        v55 = 1;
LABEL_57:
        v56 = 1;
LABEL_58:
        v58 = 1;
LABEL_59:
        v57 = 1;
LABEL_62:
        if (*(_BYTE *)(a2 + 4) && (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0)
          v59 = 1;
        else
          v59 = (*(_DWORD *)(a1 + 120) >> 4) & 3;
        if (((v59 != 0) & ~v57) != 0)
          break;
        v60 = (WebCore::RenderStyle *)(a1 + 80);
        v61 = *(_QWORD *)(a1 + 136);
        v62 = *(unsigned __int16 *)(v61 + 4);
        if ((*(_DWORD *)a2 & 0x40) != 0)
          v63 = 4;
        else
          v63 = 8;
        if ((v55 & 1) != 0 || v54 && *(_BYTE *)(*(_QWORD *)(v61 + 24) + 80) == 1)
          goto LABEL_84;
        v97 = v63;
        v98 = *(unsigned __int16 *)(v61 + 4);
        v101 = v46;
        v102 = v47;
        v99 = v58;
        *(float *)&v48 = WebCore::RenderSVGShape::strokeWidth((WebCore::RenderSVGShape *)a1);
        v60 = (WebCore::RenderStyle *)(a1 + 80);
        v58 = v99;
        if (*(float *)&v48 == 0.0
          || (*(_BYTE *)(a1 + 217) & 7) == 0
          || (v64 = *(float *)(a1 + 200),
              v65 = *(float *)(a1 + 204),
              v66 = *(float *)(a1 + 208),
              v67 = *(float *)(a1 + 212),
              v66 <= 0.0)
          || v67 <= 0.0
          || v64 > v101
          || (float)(v66 + v64) < v101
          || (*(float *)&v48 = v102, v65 > v102)
          || (*(float *)&v49 = v67 + v65, *(float *)&v49 < v102))
        {
          v63 = v97;
          v62 = v98;
        }
        else
        {
          WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)1,(WebCore::SVGPaintServerHandling::URIResolving)0>((WebCore::RenderLayerModelObject *)a1, v60, (uint64_t)&v103, v48, v49, v66);
          if (v54 && !v104)
          {
            _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEPN7WebCore28RenderSVGResourcePaintServerENS9_5ColorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SB_SC_EEEEEEDcSG_DpT0_(&v106, &v103);
            v58 = v99;
            v63 = v97;
            v62 = v98;
            v60 = (WebCore::RenderStyle *)(a1 + 80);
            goto LABEL_84;
          }
          v76 = (*(uint64_t (**)(uint64_t, float *, _QWORD))(*(_QWORD *)a1 + 936))(a1, &v101, 0);
          if (v104 == -1)
          {
            v58 = v99;
            v63 = v97;
            v62 = v98;
            v60 = (WebCore::RenderStyle *)(a1 + 80);
            if (v76)
              goto LABEL_132;
          }
          else
          {
            v96 = v76;
            ((void (*)(char *, unint64_t *))off_1E3449C28[v104])(&v106, &v103);
            v58 = v99;
            v63 = v97;
            v62 = v98;
            v60 = (WebCore::RenderStyle *)(a1 + 80);
            if ((v96 & 1) != 0)
            {
LABEL_132:
              v88 = *a4 - v29;
              if (__OFSUB__(*a4, v29))
                v88 = (*a4 >> 31) + 0x7FFFFFFF;
              v89 = a4[1];
              v90 = v89 - v31;
              if (__OFSUB__(v89, v31))
                v90 = (v89 >> 31) + 0x7FFFFFFF;
              v103 = v88 | (unint64_t)(v90 << 32);
              (*(void (**)(uint64_t, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)a1 + 328))(a1, a3, &v103);
              v91 = (WebCore::ImageOverlay *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
              v86 = v91;
              if (v91)
                *((_DWORD *)v91 + 6) += 2;
              if ((*(_BYTE *)(a1 + 217) & 7) != 0)
              {
                v92 = *(_DWORD *)(a1 + 184);
                v93 = *(_DWORD *)(a1 + 188);
                v94 = *(_DWORD *)(a1 + 192);
                v95 = *(_DWORD *)(a1 + 196);
              }
              else
              {
                v95 = 0;
                v94 = 0;
                v93 = 0;
                v92 = 0;
              }
              v103 = __PAIR64__(v93, v92);
              v104 = v94;
              v105 = v95;
              v21 = !WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, v91, (int *)a2, (uint64_t)a4, (float *)&v103);
              if (v86)
              {
LABEL_129:
                if (*((_DWORD *)v86 + 6) == 2)
                {
                  if ((*((_WORD *)v86 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v86, v87);
                }
                else
                {
                  *((_DWORD *)v86 + 6) -= 2;
                }
                goto LABEL_116;
              }
              goto LABEL_116;
            }
          }
        }
LABEL_84:
        if ((v56 & 1) == 0 && (!v54 || *(_BYTE *)(*(_QWORD *)(v61 + 16) + 56) != 1))
        {
          v101 = v46;
          v102 = v47;
          v68 = *(float *)(a1 + 176);
          if (v68 > 0.0)
          {
            v69 = *(float *)(a1 + 180);
            if (v69 > 0.0)
            {
              v70 = *(float *)(a1 + 168);
              v71 = v70 + v68;
              if (v70 <= v46 && v71 >= v46)
              {
                LODWORD(v49) = *(_DWORD *)(a1 + 172);
                *(float *)&v48 = *(float *)&v49 + v69;
                if (*(float *)&v49 <= v47 && *(float *)&v48 >= v47)
                {
                  v74 = v63;
                  v75 = v62;
                  v100 = v58;
                  WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)0,(WebCore::SVGPaintServerHandling::URIResolving)0>((WebCore::RenderLayerModelObject *)a1, v60, (uint64_t)&v103, v48, v49, v70);
                  if (!v54 || v104)
                  {
                    v77 = (*(uint64_t (**)(uint64_t, float *, BOOL))(*(_QWORD *)a1 + 944))(a1, &v101, (v75 & v74) != 0);
                    if (v104 != -1)
                      ((void (*)(char *, unint64_t *))off_1E3449C28[v104])(&v106, &v103);
                    v58 = v100;
                    if ((v77 & 1) != 0)
                    {
LABEL_123:
                      v82 = *a4 - v29;
                      if (__OFSUB__(*a4, v29))
                        v82 = (*a4 >> 31) + 0x7FFFFFFF;
                      v83 = a4[1];
                      v84 = v83 - v31;
                      if (__OFSUB__(v83, v31))
                        v84 = (v83 >> 31) + 0x7FFFFFFF;
                      v103 = v82 | (unint64_t)(v84 << 32);
                      (*(void (**)(uint64_t, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)a1 + 328))(a1, a3, &v103);
                      v85 = (WebCore::ImageOverlay *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
                      if (!v85)
                      {
                        v21 = !WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, 0, (int *)a2, (uint64_t)a4, (float *)(a1 + 168));
                        goto LABEL_116;
                      }
                      v86 = v85;
                      *((_DWORD *)v85 + 6) += 2;
                      v21 = !WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, v85, (int *)a2, (uint64_t)a4, (float *)(a1 + 168));
                      goto LABEL_129;
                    }
                  }
                  else
                  {
                    v58 = v100;
                  }
                }
              }
            }
          }
        }
        if ((v58 & 1) != 0)
          break;
        v78 = *(float *)(a1 + 168);
        if (v78 > v46)
          break;
        if ((float)(v78 + *(float *)(a1 + 176)) < v46)
          break;
        v79 = *(float *)(a1 + 172);
        if (v79 > v47 || (float)(v79 + *(float *)(a1 + 180)) < v47)
          break;
        goto LABEL_123;
    }
  }
  v21 = 0;
LABEL_116:
  if (v12)
  {
    v80 = *(_QWORD **)(v12 + 8);
    if (v80)
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84AB0, v80);
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree((WTF *)v12, v80);
    else
      --*(_DWORD *)v12;
  }
  return v21;
}

float WebCore::RenderSVGShape::strokeBoundingBox(WebCore::RenderSVGShape *this)
{
  if ((*((_BYTE *)this + 217) & 7) != 0)
    return *((float *)this + 46);
  else
    return 0.0;
}

uint64_t WebCore::RenderSVGShape::calculateStrokeBoundingBox(WebCore::RenderSVGShape *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  WebCore::Path *v7;
  double v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  uint64_t v21;
  void *v22;
  float64x2_t v23;
  double v24;
  double v26;
  int8x16_t v27;
  int8x16_t v28;
  float64x2_t v29;
  double v30;
  uint64_t v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  _QWORD *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  _QWORD *v48;
  char *v49;
  int v50;
  int v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v56;
  char v57;
  double v58;
  float64x2_t v59;
  double v60;
  float64x2_t v61;

  v3 = *((float *)this + 42);
  v2 = *((float *)this + 43);
  v5 = *((float *)this + 44);
  v4 = *((float *)this + 45);
  v6 = *((_QWORD *)this + 17);
  if (*(_BYTE *)(*(_QWORD *)(v6 + 24) + 80) == 1)
  {
LABEL_53:
    v15 = v3;
    v16 = v2;
    v17 = v5;
    v14 = v4;
    return (*(uint64_t (**)(WebCore::RenderSVGShape *, uint64_t, float, float, float, float))(*(_QWORD *)this + 952))(this, 1, v15, v16, v17, v14);
  }
  if ((*(_WORD *)(v6 + 8) & 0x400) != 0)
  {
    v21 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v21 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196523BA8);
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196523BC8);
    }
    *(_DWORD *)(v21 + 24) += 2;
    (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 1320))(&v58, v21, 1);
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v22);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
    v23.f64[0] = v60;
    v24 = vmuld_lane_f64(-v59.f64[0], v59, 1) + v58 * v60;
    if (((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
      && (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL)
    {
      goto LABEL_53;
    }
    v26 = 1.0;
    if (v58 == 1.0 && v59.f64[0] == 0.0 && v59.f64[1] == 0.0 && v60 == 1.0)
    {
      v29 = vnegq_f64(v61);
      v53 = 0.0;
      v54 = 0.0;
      v30 = 1.0;
    }
    else
    {
      v26 = v60 / v24;
      v23.f64[1] = v58;
      v27 = (int8x16_t)vmulq_f64(v61, vnegq_f64(v23));
      v28 = (int8x16_t)vdivq_f64(vmlaq_f64((float64x2_t)vextq_s8(v27, v27, 8uLL), v61, v59), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24, 0));
      v29 = (float64x2_t)vextq_s8(v28, v28, 8uLL);
      v53 = -v59.f64[0] / v24;
      v54 = -v59.f64[1] / v24;
      v30 = v58 / v24;
    }
    v52 = v26;
    v55 = v30;
    v56 = v29;
    v57 = 1;
    v31 = *((_QWORD *)this + 28);
    {
      v32 = qword_1EE2F95E8;
      v33 = *(_DWORD *)(v31 + 64);
      if ((_DWORD)qword_1EE2F95E8 == -1)
      {
        if (v33 == -1)
          goto LABEL_37;
      }
      else if (v33 == -1)
      {
LABEL_34:
        ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v32])(&v49, (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8);
        LODWORD(qword_1EE2F95E8) = -1;
LABEL_37:
        WebCore::Path::transform((WebCore::Path *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, (float64x2_t *)&v58);
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v34 = off_1E3449D20;
        v34[1] = this;
        v48 = v34;
        v35 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath);
        WebCore::PathCG::strokeBoundingRect(v35, &v48);
        v49 = (char *)__PAIR64__(v37, v36);
        v50 = v38;
        v51 = v39;
        v40 = v48;
        v48 = 0;
        if (v40)
          (*(void (**)(_QWORD *))(*v40 + 8))(v40);
        v41 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v52, (const WebCore::FloatRect *)&v49);
        if (v43 <= 0.0 || v44 <= 0.0)
        {
          v41 = v3;
          v42 = v2;
          v43 = v5;
          v44 = v4;
        }
        else if (v5 > 0.0 && v4 > 0.0)
        {
          v45 = v43 + v41;
          if (v41 >= v3)
            v41 = v3;
          v46 = v44 + v42;
          if (v42 >= v2)
            v42 = v2;
          if ((float)(v3 + v5) >= v45)
            v45 = v3 + v5;
          if ((float)(v2 + v4) >= v46)
            v46 = v2 + v4;
          v43 = v45 - v41;
          v44 = v46 - v42;
        }
        v3 = v41;
        v2 = v42;
        v5 = v43;
        v4 = v44;
        goto LABEL_53;
      }
    }
    else
    {
      qword_1EE2F95E8 = 0;
      xmmword_1EE2F95C8 = 0u;
      unk_1EE2F95D8 = 0u;
      WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath = 0u;
      unk_1EE2F95B8 = 0u;
      v33 = *(_DWORD *)(v31 + 64);
      if (v33 == -1)
      {
        v32 = 0;
        goto LABEL_34;
      }
    }
    v49 = (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
        + 8;
    ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_2[v33])(&v49);
    goto LABEL_37;
  }
  v7 = (WebCore::Path *)*((_QWORD *)this + 28);
  v8 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x10));
  **(_QWORD **)&v8 = off_1E3449D48;
  *(_QWORD *)(*(_QWORD *)&v8 + 8) = this;
  v52 = v8;
  v9 = WebCore::Path::ensurePlatformPathImpl(v7);
  WebCore::PathCG::strokeBoundingRect(v9, &v52);
  if (v12 <= 0.0 || (v14 = v13, v13 <= 0.0))
  {
    v15 = v3;
    v16 = v2;
    v17 = v5;
    v14 = v4;
  }
  else
  {
    v15 = v10;
    v16 = v11;
    v17 = v12;
    if (v5 > 0.0 && v4 > 0.0)
    {
      v18 = v12 + v10;
      if (v15 >= v3)
        v15 = v3;
      v19 = v13 + v11;
      if (v16 >= v2)
        v16 = v2;
      if ((float)(v3 + v5) >= v18)
        v18 = v3 + v5;
      if ((float)(v2 + v4) >= v19)
        v19 = v2 + v4;
      v17 = v18 - v15;
      v14 = v19 - v16;
    }
  }
  v20 = v52;
  v52 = 0.0;
  if (v20 != 0.0)
    (*(void (**)(double))(**(_QWORD **)&v20 + 8))(COERCE_DOUBLE(*(_QWORD *)&v20));
  return (*(uint64_t (**)(WebCore::RenderSVGShape *, uint64_t, float, float, float, float))(*(_QWORD *)this + 952))(this, 1, v15, v16, v17, v14);
}

uint64_t WebCore::RenderSVGShape::styleWillChange(WTF **a1, uint64_t a2, WebCore::RenderStyle *a3)
{
  if ((_DWORD)a2 == 8 && (*(_WORD *)((_BYTE *)a1 + 69) & 2) != 0)
    *((_BYTE *)a1 + 216) = 1;
  return WebCore::RenderLayerModelObject::styleWillChange(a1, a2, a3);
}

uint64_t WebCore::RenderSVGShape::needsHasSVGTransformFlags(WebCore::RenderSVGShape *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196523CB8);
  }
  *(_DWORD *)(v1 + 24) += 2;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1352))(v1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v3;
}

void WebCore::RenderSVGShape::applyTransform(WebCore::MotionPath *a1, float64x2_t *a2, WebCore::RenderStyle *a3, const WebCore::FloatRect *a4, char a5)
{
  uint64_t v5;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  void *v15;
  _BYTE v16[56];
  _BYTE v17[56];

  v5 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 1184))(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196523DC4);
  }
  *(_DWORD *)(v5 + 24) += 2;
  v17[0] = 0;
  v17[48] = 0;
  v16[0] = 0;
  v16[48] = 0;
  WebCore::RenderLayerModelObject::applySVGTransform(a1, a2, (_QWORD *)v5, a3, a4, (uint64_t)v17, (uint64_t)v16, a5, v11, v12, v13, v14);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v15);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
}

void WebCore::RenderSVGText::~RenderSVGText(WebCore::RenderSVGText *this, void *a2)
{
  WTF *v3;
  void *v4;
  uint64_t v5;
  WTF *v6;

  v3 = (WTF *)*((_QWORD *)this + 61);
  if (v3)
  {
    *((_QWORD *)this + 61) = 0;
    *((_DWORD *)this + 124) = 0;
    WTF::fastFree(v3, a2);
  }
  WebCore::SVGTextMetricsBuilder::~SVGTextMetricsBuilder((WebCore::RenderSVGText *)((char *)this + 336), (WTF::StringImpl *)a2);
  v5 = *((_QWORD *)this + 41);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), v4);
  v6 = (WTF *)*((_QWORD *)this + 39);
  if (v6)
  {
    *((_QWORD *)this + 39) = 0;
    *((_DWORD *)this + 80) = 0;
    WTF::fastFree(v6, v4);
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, v4);
}

{
  WTF *v3;
  void *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 61);
  if (v3)
  {
    *((_QWORD *)this + 61) = 0;
    *((_DWORD *)this + 124) = 0;
    WTF::fastFree(v3, a2);
  }
  WebCore::SVGTextMetricsBuilder::~SVGTextMetricsBuilder((WebCore::RenderSVGText *)((char *)this + 336), (WTF::StringImpl *)a2);
  v5 = *((_QWORD *)this + 41);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), v4);
  v6 = (WTF *)*((_QWORD *)this + 39);
  if (v6)
  {
    *((_QWORD *)this + 39) = 0;
    *((_DWORD *)this + 80) = 0;
    WTF::fastFree(v6, v4);
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, v4);
  if (*((_DWORD *)this + 4))
    bzero(this, 0x208uLL);
  else
    bmalloc::api::isoDeallocate(this, v7);
}

uint64_t WebCore::RenderSVGText::textElement(WebCore::RenderSVGText *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::textTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196523F0CLL);
  }
  return v1;
}

BOOL WebCore::RenderSVGText::isChildAllowed(WebCore::RenderSVGText *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3)
{
  return (*((_BYTE *)a2 + 20) & 1) == 0;
}

uint64_t WebCore::RenderSVGText::locateRenderSVGTextAncestor(uint64_t this, WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(this + 46) != 85)
  {
    v2 = *(_QWORD *)(this + 32);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    {
      while (*(_BYTE *)(v3 + 46) != 85)
      {
        v4 = *(_QWORD *)(v3 + 32);
        if (!v4)
          return 0;
        this = 0;
        v3 = *(_QWORD *)(v4 + 8);
        if (!v3)
          return this;
      }
      return v3;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t WebCore::RenderSVGText::subtreeChildWasAdded(uint64_t this, WebCore::RenderObject *a2)
{
  unint64_t v2;
  WebCore::SVGTextLayoutAttributes ***v3;
  unsigned int v5;
  BOOL v6;
  int v7;
  void *v9;
  uint64_t v10;
  WebCore::SVGTextLayoutAttributes ***v11;
  WebCore::SVGTextLayoutAttributes *v12;
  WebCore::SVGTextLayoutAttributes **v13;
  uint64_t v14;
  WebCore::RenderElement *v15;
  WebCore::SVGTextLayoutAttributes **v16;
  WebCore::RenderSVGInlineText *v17;
  WebCore::RenderSVGInlineText *v18;
  WebCore::RenderSVGInlineText *v19;
  WebCore::SVGTextLayoutAttributes *v20;
  WebCore::SVGTextLayoutAttributes *v21;
  WebCore::SVGTextLayoutAttributes *v22;
  char v23;
  WTF *v24;
  uint64_t v25;

  if ((*(_DWORD *)(this + 20) & 0x204) == 0x200
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 3405))
  {
    v2 = this + 304;
    v3 = (WebCore::SVGTextLayoutAttributes ***)this;
    this = WebCore::SVGTextLayoutAttributesBuilder::clearTextPositioningElements(this + 304, a2);
    v5 = *((unsigned __int8 *)a2 + 46) - 71;
    v6 = v5 > 0xF;
    v7 = (1 << v5) & 0xA003;
    if (!v6 && v7 != 0)
    {
      v24 = 0;
      v25 = 0;
      WebCore::collectLayoutAttributes((const WebCore::RenderObject *)v3, (uint64_t)&v24);
      if (HIDWORD(v25))
      {
        v10 = 0;
        v11 = v3 + 61;
        while (1)
        {
          v12 = (WebCore::SVGTextLayoutAttributes *)*((_QWORD *)v24 + v10);
          if (!*((_DWORD *)v3 + 125))
            break;
          v13 = *v11;
          v14 = *((unsigned int *)v3 + 125);
          while (*v13 != v12)
          {
            ++v13;
            if (!--v14)
              goto LABEL_19;
          }
          if (++v10 == HIDWORD(v25))
            goto LABEL_16;
        }
LABEL_19:
        v20 = (WebCore::SVGTextLayoutAttributes *)*((_QWORD *)v24 + v10);
        v23 = 0;
        v21 = 0;
        v22 = 0;
        v15 = (WebCore::RenderElement *)WebCore::SVGTextLayoutAttributes::context(v12);
        WebCore::findPreviousAndNextAttributes((uint64_t)v3, v15, (WebCore::RenderSVGInlineText *)&v23, (BOOL *)&v22, &v21, v16);
        if (v22)
        {
          v17 = (WebCore::RenderSVGInlineText *)WebCore::SVGTextLayoutAttributes::context(v22);
          WebCore::SVGTextLayoutAttributesBuilder::buildLayoutAttributesForTextRenderer(v2, v17);
        }
        v18 = (WebCore::RenderSVGInlineText *)WebCore::SVGTextLayoutAttributes::context(v20);
        WebCore::SVGTextLayoutAttributesBuilder::buildLayoutAttributesForTextRenderer(v2, v18);
        if (v21)
        {
          v19 = (WebCore::RenderSVGInlineText *)WebCore::SVGTextLayoutAttributes::context(v21);
          WebCore::SVGTextLayoutAttributesBuilder::buildLayoutAttributesForTextRenderer(v2, v19);
        }
        v11 = v3 + 61;
LABEL_16:
        WTF::Vector<WebCore::SVGTextLayoutAttributes *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v11, (const void **)&v24);
      }
      this = (uint64_t)v24;
      if (v24)
      {
        v24 = 0;
        LODWORD(v25) = 0;
        return WTF::fastFree((WTF *)this, v9);
      }
    }
  }
  return this;
}

uint64_t WebCore::SVGTextLayoutAttributesBuilder::clearTextPositioningElements(uint64_t this, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(this + 16))
  {
    if (*(_DWORD *)(this + 20))
      *(_DWORD *)(this + 20) = 0;
    v2 = *(WTF **)(this + 8);
    if (v2)
    {
      *(_QWORD *)(this + 8) = 0;
      *(_DWORD *)(this + 16) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return this;
}

const WebCore::RenderObject *WebCore::collectLayoutAttributes(const WebCore::RenderObject *this, uint64_t a2)
{
  const WebCore::RenderObject *v3;
  WebCore::RenderObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;

  if (this)
  {
    v3 = this;
    v4 = this;
    do
    {
      if (*((_BYTE *)v4 + 46) == 72)
      {
        v7 = (char *)v4 + 424;
        v5 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
        {
          v6 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v7);
          v5 = *(unsigned int *)(a2 + 12);
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = *v6;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (char *)v4 + 424;
        }
        *(_DWORD *)(a2 + 12) = v5 + 1;
      }
      this = (const WebCore::RenderObject *)WebCore::RenderObject::nextInPreOrder(v4, v3);
      v4 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebCore::findPreviousAndNextAttributes(uint64_t a1, WebCore::RenderElement *a2, WebCore::RenderSVGInlineText *a3, BOOL *a4, WebCore::SVGTextLayoutAttributes **a5, WebCore::SVGTextLayoutAttributes **a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int PreviousAndNextAttributes;
  unint64_t v10;
  uint64_t result;
  WebCore::SVGTextLayoutAttributes *v13;
  WebCore::SVGTextLayoutAttributes **v14;
  BOOL *v15;
  WebCore::RenderSVGInlineText *v16;
  WebCore::RenderElement *v17;
  uint64_t v18;

  if (!(*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)))
    return 0;
  v6 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if (!v6)
    return 0;
  while (1)
  {
    v7 = *(_DWORD *)(v6 + 16) + 1;
    *(_DWORD *)(v6 + 16) = v7;
    v8 = *(unsigned __int8 *)(v6 + 46);
    if (v8 != 72)
    {
      if ((v8 - 71) > 0xF || ((1 << (v8 - 71)) & 0xA001) == 0)
      {
        PreviousAndNextAttributes = 3;
      }
      else
      {
        v17 = a2;
        v18 = v6;
        v15 = a4;
        v16 = a3;
        v14 = a5;
        PreviousAndNextAttributes = WebCore::findPreviousAndNextAttributes((WebCore *)v6, a2, a3, a4, a5, a6);
        a2 = v17;
        v6 = v18;
        a4 = v15;
        a3 = v16;
        a5 = v14;
        v7 = *(_DWORD *)(v18 + 16);
      }
      goto LABEL_7;
    }
    if ((WebCore::RenderElement *)v6 == a2)
    {
      *(_BYTE *)a3 = 1;
LABEL_6:
      PreviousAndNextAttributes = 3;
      goto LABEL_7;
    }
    v13 = (WebCore::SVGTextLayoutAttributes *)(v6 + 424);
    if (!*(_BYTE *)a3)
    {
      *(_QWORD *)a4 = v13;
      goto LABEL_6;
    }
    *a5 = v13;
    PreviousAndNextAttributes = 1;
LABEL_7:
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1965242E8);
    }
    *(_DWORD *)(v6 + 16) = v7 - 1;
    if (PreviousAndNextAttributes != 3)
    {
      if (PreviousAndNextAttributes)
        return 1;
    }
    v10 = *(unsigned int *)(v6 + 47) | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32);
    if (!v10)
      return 0;
    result = 0;
    v6 = *(_QWORD *)(v10 + 8);
    if (!v6)
      return result;
  }
}

uint64_t WTF::Vector<WebCore::SVGTextLayoutAttributes *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a2 != (const void **)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *((_DWORD *)a2 + 3);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::SVGTextLayoutAttributes *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1, a2);
        WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, *((unsigned int *)a2 + 3));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *a2, 8 * v4);
      v6 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      v6 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + 8 * v6), (char *)*a2 + 8 * v6, (_BYTE *)*a2 + 8 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 8 * v6));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

void WebCore::RenderSVGText::willBeDestroyed(WebCore::RenderSVGText *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  if (*((_DWORD *)this + 124))
  {
    if (*((_DWORD *)this + 125))
      *((_DWORD *)this + 125) = 0;
    v3 = (WTF *)*((_QWORD *)this + 61);
    if (v3)
    {
      *((_QWORD *)this + 61) = 0;
      *((_DWORD *)this + 124) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  if (*((_DWORD *)this + 80))
  {
    if (*((_DWORD *)this + 81))
      *((_DWORD *)this + 81) = 0;
    v4 = (WTF *)*((_QWORD *)this + 39);
    if (v4)
    {
      *((_QWORD *)this + 39) = 0;
      *((_DWORD *)this + 80) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  WebCore::RenderSVGBlock::willBeDestroyed(this, (const WebCore::RenderElement *)a2);
}

uint64_t WTF::Vector<WebCore::SVGTextLayoutAttributes *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    v2 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

uint64_t WebCore::RenderSVGText::subtreeChildWillBeRemoved(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  WebCore::SVGTextLayoutAttributes *v15;
  BOOL v16[15];
  char v17;

  if ((*(_DWORD *)(result + 20) & 0x204) == 0x200)
  {
    v8 = result;
    if (*(_DWORD *)(result + 320))
    {
      if (*(_DWORD *)(result + 324))
        *(_DWORD *)(result + 324) = 0;
      result = *(_QWORD *)(result + 312);
      if (result)
      {
        *(_QWORD *)(v8 + 312) = 0;
        *(_DWORD *)(v8 + 320) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
    }
    if (*(_DWORD *)(v8 + 500) && a2[46] == 72)
    {
      v17 = 0;
      v15 = 0;
      *(_QWORD *)v16 = 0;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 3405))
      {
        result = WebCore::findPreviousAndNextAttributes(v8, (WebCore::RenderElement *)a2, (WebCore::RenderSVGInlineText *)&v17, v16, &v15, a6);
        if (*(_QWORD *)v16)
        {
          v12 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v12 == *(_DWORD *)(a3 + 8))
          {
            result = (uint64_t)WTF::Vector<WebCore::SVGTextLayoutAttributes *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGTextLayoutAttributes *&>(a3, (unint64_t)v16);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = *(_QWORD *)v16;
            *(_DWORD *)(a3 + 12) = v12 + 1;
          }
        }
      }
      if (v15)
      {
        v13 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
        {
          result = (uint64_t)WTF::Vector<WebCore::SVGTextLayoutAttributes *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGTextLayoutAttributes *&>(a3, (unint64_t)&v15);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v15;
          *(_DWORD *)(a3 + 12) = v13 + 1;
        }
      }
      v9 = *(unsigned int *)(v8 + 500);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD **)(v8 + 488);
        if ((_BYTE *)*v10 == a2 + 424)
        {
          v11 = 0;
LABEL_11:
          result = (uint64_t)memmove(&v10[v11], &v10[v11 + 1], 8 * v9 - (8 * v11 + 8));
          --*(_DWORD *)(v8 + 500);
        }
        else
        {
          v11 = 0;
          while (v9 - 1 != v11)
          {
            v14 = (_BYTE *)v10[++v11];
            if (v14 == a2 + 424)
              goto LABEL_11;
          }
        }
      }
    }
  }
  return result;
}

void WebCore::RenderSVGText::subtreeTextDidChange(WebCore::RenderSVGText *this, WebCore::RenderSVGInlineText *a2)
{
  int v2;
  uint64_t v4;
  WebCore::RenderSVGInlineText **i;
  WebCore::RenderElement *v6;
  uint64_t v7;
  int v8;
  WTF *v9;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x200) != 0)
  {
    v4 = *((unsigned int *)this + 125);
    if ((_DWORD)v4)
    {
      for (i = (WebCore::RenderSVGInlineText **)*((_QWORD *)this + 61);
            *i != (WebCore::RenderSVGInlineText *)((char *)a2 + 424);
            ++i)
      {
        if (!--v4)
          return;
      }
      if (*((_DWORD *)this + 80))
      {
        if (*((_DWORD *)this + 81))
          *((_DWORD *)this + 81) = 0;
        v9 = (WTF *)*((_QWORD *)this + 39);
        if (v9)
        {
          *((_QWORD *)this + 39) = 0;
          *((_DWORD *)this + 80) = 0;
          WTF::fastFree(v9, a2);
          v2 = *((_DWORD *)this + 5);
        }
      }
      *((_BYTE *)this + 248) |= 2u;
      if ((v2 & 8) == 0)
      {
        *((_DWORD *)this + 5) = v2 | 8;
        v6 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
        WebCore::RenderObject::scheduleLayout(this, v6);
        if ((*((_BYTE *)this + 21) & 0x80) != 0)
        {
          if ((*((_BYTE *)this + 45) & 0x10) == 0
            || ((v7 = *((_QWORD *)this + 18)) == 0
              ? (v8 = MEMORY[8])
              : (v8 = *(_DWORD *)(v7 + 8) + 1, *(_DWORD *)(v7 + 8) = v8),
                *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
                !v8))
          {
            __break(0xC471u);
            JUMPOUT(0x196524768);
          }
          *(_DWORD *)(v7 + 8) = v8 - 1;
        }
      }
    }
  }
}

uint64_t WebCore::RenderSVGText::layout(WebCore::RenderSVGText *this, const WebCore::RenderElement *a2)
{
  __int16 v3;
  __int16 v4;
  unint64_t v5;
  char v6;
  WebCore::RenderSVGText *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::FontCascade *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  char v19;
  WebCore::RenderSVGText *v20;
  WebCore::RenderSVGText *v21;
  uint64_t v22;
  _QWORD *v23;
  WebCore::FontCascade *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::RenderSVGText *v28;
  WebCore::RenderSVGText *v29;
  int v30;
  WebCore::RenderSVGText *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  void *v44;
  char v45;
  unint64_t v46;
  unsigned __int8 v47;
  float v48;
  float v49;
  float v50;
  WebCore::SVGPolyElement **v54;
  __int128 v55;
  char v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t result;
  unsigned int v63;
  uint64_t v64;
  WebCore::RenderSVGText *v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::FontCascade *v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73[16];
  __int128 v74;
  __int128 v75;
  _BYTE v76[56];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = WebCore::SVGRenderSupport::checkForSVGRepaintDuringLayout(this, a2);
    v4 = 256;
  }
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v76, this, v4 | v3, 0, 1);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 40) + 44);
  if (v5 >= 5)
    v6 = 2;
  else
    v6 = 0x705020406uLL >> (8 * v5);
  v11 = (*(float (**)(WebCore::RenderSVGText *, _QWORD))(*(_QWORD *)this + 752))(this, v6 & 7);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 8) + 680) + 680) & 0x800000000000) != 0
    || (*((_BYTE *)this + 248) & 4) == 0)
  {
    v19 = 0;
  }
  else
  {
    if ((*(_WORD *)(v18 + 28) & 0x20) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v18 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965248A0);
    }
    if (*(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::textTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196524DC8);
    }
    WebCore::SVGGraphicsElement::animatedLocalTransform((WebCore::SVGPolyElement **)v18, (__int128 *)v73);
    v55 = v74;
    *((_OWORD *)this + 16) = *(_OWORD *)v73;
    *((_OWORD *)this + 17) = v55;
    *((_OWORD *)this + 18) = v75;
    v19 = 1;
  }
  if ((*((_BYTE *)this + 21) & 2) == 0)
  {
    v20 = this;
    while (1)
    {
      do
      {
        v21 = v20;
        if (*((_BYTE *)v20 + 46) == 72)
        {
          *(_QWORD *)v73 = (char *)v20 + 424;
          v22 = *((unsigned int *)this + 125);
          if ((_DWORD)v22 == *((_DWORD *)this + 124))
          {
            v23 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 488, v22 + 1, (unint64_t)v73);
            v22 = *((unsigned int *)this + 125);
            *(_QWORD *)(*((_QWORD *)this + 61) + 8 * v22) = *v23;
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)this + 61) + 8 * v22) = (char *)v20 + 424;
          }
          *((_DWORD *)this + 125) = v22 + 1;
        }
        v20 = (WebCore::RenderSVGText *)(*(uint64_t (**)(WebCore::RenderSVGText *))(*(_QWORD *)v21 + 112))(v21);
      }
      while (v20);
      if (v21 == this)
        break;
      while (1)
      {
        v25 = *(unsigned int *)((char *)v21 + 47);
        if (v25 | ((unint64_t)*((unsigned __int8 *)v21 + 51) << 32))
        {
          v20 = *(WebCore::RenderSVGText **)((v25 | ((unint64_t)*((unsigned __int8 *)v21 + 51) << 32)) + 8);
          if (v20)
            break;
        }
        v26 = *((_QWORD *)v21 + 4);
        if (v26)
        {
          v21 = *(WebCore::RenderSVGText **)(v26 + 8);
          if (v21 && v21 != this)
            continue;
        }
        goto LABEL_27;
      }
    }
LABEL_27:
    v28 = this;
    while (1)
    {
      do
      {
        v29 = v28;
        v30 = *((unsigned __int8 *)v28 + 46);
        if (v30 == 72)
          v31 = v28;
        else
          v31 = 0;
        if (v31)
          ++*((_DWORD *)v31 + 4);
        if (v30 == 72)
        {
          v32 = *((_QWORD *)v28 + 4);
          if (v32)
            v32 = *(_QWORD *)(v32 + 8);
          if (WebCore::RenderSVGInlineText::computeNewScaledFontForStyle(v28, (const WebCore::RenderObject *)(v32 + 80), (WebCore::RenderSVGText *)((char *)v28 + 120), (float *)v28 + 32, v24))*((_WORD *)v29 + 56) = 0;
        }
        if (v31)
        {
          v33 = *((_DWORD *)v31 + 4);
          if (!v33)
          {
            __break(0xC471u);
            JUMPOUT(0x196524D88);
          }
          *((_DWORD *)v31 + 4) = v33 - 1;
        }
        v28 = (WebCore::RenderSVGText *)(*(uint64_t (**)(WebCore::RenderSVGText *))(*(_QWORD *)v29 + 112))(v29);
      }
      while (v28);
      if (v29 == this)
        goto LABEL_51;
      while (1)
      {
        v34 = *(unsigned int *)((char *)v29 + 47);
        if (v34 | ((unint64_t)*((unsigned __int8 *)v29 + 51) << 32))
        {
          v28 = *(WebCore::RenderSVGText **)((v34 | ((unint64_t)*((unsigned __int8 *)v29 + 51) << 32)) + 8);
          if (v28)
            break;
        }
        v35 = *((_QWORD *)v29 + 4);
        if (v35)
        {
          v29 = *(WebCore::RenderSVGText **)(v35 + 8);
          if (v29 && v29 != this)
            continue;
        }
        goto LABEL_51;
      }
    }
  }
  v56 = *((_BYTE *)this + 248);
  if ((v56 & 2) != 0)
  {
    if ((*((_BYTE *)this + 248) & 8) != 0)
      WebCore::updateFontInAllDescendants(this, v7, v8, v9, v10);
LABEL_51:
    v37 = *((_QWORD *)this + 41);
    if (v37)
    {
      *((_QWORD *)this + 41) = 0;
      WTF::fastFree((WTF *)(v37 - 16), v7);
    }
    if (!*((_DWORD *)this + 81))
    {
      *((_DWORD *)this + 76) = 0;
      v73[0] = 1;
      WebCore::SVGTextLayoutAttributesBuilder::collectTextPositioningElements((uint64_t)this + 304, this, v73);
    }
    if (*((_DWORD *)this + 76))
    {
      WebCore::SVGTextLayoutAttributesBuilder::buildCharacterDataMap((WebCore::RenderSVGText *)((char *)this + 304), this);
      *(_QWORD *)v73 = (char *)this + 328;
      v73[8] = 0;
      WebCore::SVGTextMetricsBuilder::walkTree((unint64_t)this + 336, (uint64_t)this, 0, (uint64_t)v73);
    }
    *((_BYTE *)this + 248) = *((_BYTE *)this + 248) & 0xF4 | 1;
    v19 = 1;
    goto LABEL_58;
  }
  v64 = WebCore::lineageOfType<WebCore::LegacyRenderSVGRoot>((uint64_t)this);
  if (v64)
  {
    v69 = *(_BYTE *)(v64 + 408) & 1;
  }
  else
  {
    v71 = WebCore::lineageOfType<WebCore::RenderSVGRoot>((uint64_t)this);
    if (v71)
      v69 = *(_BYTE *)(v71 + 218) != 0;
    else
      v69 = 0;
  }
  if ((v56 & 8) != 0 || v69)
  {
    WebCore::updateFontInAllDescendants(this, v65, v66, v67, v68);
    *((_BYTE *)this + 248) &= ~8u;
    v19 = 1;
  }
  WebCore::SVGTextLayoutAttributesBuilder::rebuildMetricsForSubtree((WebCore::RenderSVGText *)((char *)this + 304), this);
LABEL_58:
  v38 = *((_DWORD *)this + 5);
  v39 = *((float *)this + 126);
  v40 = *((float *)this + 127);
  v41 = *((float *)this + 128);
  v42 = *((float *)this + 129);
  v43 = *((unsigned int *)this + 16);
  if (!(v43 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    || !*(_QWORD *)((v43 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
  {
    memset(v73, 0, sizeof(v73));
    WebCore::RenderSVGText::updatePositionAndOverflow((uint64_t)this, (const WebCore::FloatRect *)v73);
    *((_DWORD *)this + 5) |= 0x40000u;
  }
  v72 = 0;
  WebCore::RenderBlockFlow::rebuildFloatingObjectSetFromIntrudingFloats(this);
  WebCore::RenderBlockFlow::layoutInlineChildren(this, 1, (WebCore::LayoutUnit *)((char *)&v72 + 4), (WebCore::LayoutUnit *)&v72);
  v45 = *((_BYTE *)this + 248);
  if ((v45 & 1) != 0)
  {
    v45 &= ~1u;
    *((_BYTE *)this + 248) = v45;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    WebCore::RenderLayerModelObject::updateLayerTransform(this, v44);
    goto LABEL_97;
  }
  if ((v45 & 4) != 0)
  {
    v46 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 40) + 44);
    if (v46 >= 5)
      v47 = 2;
    else
      v47 = 0x705020406uLL >> (8 * v46);
    if (v11 != (*(float (**)(WebCore::RenderSVGText *, _QWORD))(*(_QWORD *)this + 752))(this, v47)
      || v13 != v48
      || v15 != v49
      || v17 != v50)
    {
      v54 = *(WebCore::SVGPolyElement ***)(*((_QWORD *)this + 3) + 8);
      if ((*((_WORD *)v54 + 14) & 0x20) == 0
        || ((*((uint64_t (**)(_QWORD))*v54 + 148))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196524B94);
      }
      if (*((_QWORD *)v54[12] + 3) != *(_QWORD *)(WebCore::SVGNames::textTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x196524DE8);
      }
      WebCore::SVGGraphicsElement::animatedLocalTransform(v54, (__int128 *)v73);
      v57 = v74;
      *((_OWORD *)this + 16) = *(_OWORD *)v73;
      *((_OWORD *)this + 17) = v57;
      *((_OWORD *)this + 18) = v75;
    }
    *((_BYTE *)this + 248) &= ~4u;
  }
  v58 = v38 & 0x208;
  if ((v19 & 1) != 0 || v39 != *((float *)this + 126) || v40 != *((float *)this + 127))
  {
    if (v58 == 520)
      WebCore::SVGResourcesCache::clientLayoutChanged(this, (WebCore::RenderElement *)v44);
    goto LABEL_93;
  }
  v70 = v42 != *((float *)this + 129) || v41 != *((float *)this + 128);
  if (v58 == 520)
    WebCore::SVGResourcesCache::clientLayoutChanged(this, (WebCore::RenderElement *)v44);
  if (v70)
  {
LABEL_93:
    v59 = *((_QWORD *)this + 4);
    if (v59)
    {
      v60 = *(_QWORD *)(v59 + 8);
      if (v60)
      {
        ++*(_DWORD *)(v60 + 16);
        WebCore::RenderObject::invalidateCachedBoundaries(v60);
        v61 = *(_DWORD *)(v60 + 16);
        if (!v61)
        {
          __break(0xC471u);
          JUMPOUT(0x196524DA8);
        }
        *(_DWORD *)(v60 + 16) = v61 - 1;
      }
    }
  }
LABEL_97:
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v76);
  v63 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v63;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v63 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::updateFontInAllDescendants(WebCore *this, WebCore::RenderSVGText *a2, uint64_t a3, uint64_t a4, WebCore::FontCascade *a5)
{
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t result;

  v6 = (unsigned __int8 *)this;
  while (1)
  {
    v7 = v6[46];
    if (v7 == 72)
      v8 = v6;
    else
      v8 = 0;
    if (v8)
      ++*((_DWORD *)v8 + 4);
    if (v7 == 72)
      WebCore::RenderSVGInlineText::updateScaledFont((WebCore::RenderSVGInlineText *)v6, (uint64_t)a2, a3, a4, a5);
    if (!v8)
      goto LABEL_12;
    v9 = *((_DWORD *)v8 + 4);
    if (!v9)
      break;
    *((_DWORD *)v8 + 4) = v9 - 1;
LABEL_12:
    result = WebCore::RenderObject::nextInPreOrder((WebCore::RenderObject *)v6, this);
    v6 = (unsigned __int8 *)result;
    if (!result)
      return result;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::lineageOfType<WebCore::LegacyRenderSVGRoot>(uint64_t result)
{
  uint64_t v1;

  while (*(_BYTE *)(result + 46) != 103)
  {
    v1 = *(_QWORD *)(result + 32);
    if (!v1)
      return 0;
    result = *(_QWORD *)(v1 + 8);
    if (!result)
      return result;
  }
  return result;
}

uint64_t WebCore::lineageOfType<WebCore::RenderSVGRoot>(uint64_t result)
{
  uint64_t v1;

  while (*(_BYTE *)(result + 46) != 83)
  {
    v1 = *(_QWORD *)(result + 32);
    if (!v1)
      return 0;
    result = *(_QWORD *)(v1 + 8);
    if (!result)
      return result;
  }
  return result;
}

float WebCore::RenderSVGText::objectBoundingBox(WebCore::RenderSVGText *this)
{
  return *((float *)this + 126);
}

uint64_t WebCore::RenderSVGText::updatePositionAndOverflow(uint64_t this, const WebCore::FloatRect *a2)
{
  float v2;
  float v3;
  unsigned int v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  _QWORD *v17;
  const WebCore::FloatRect *v19;
  const WebCore::RenderLayerModelObject *v20;
  double v21;
  uint64_t v22;
  WebCore::ShadowData *v23;
  _QWORD v24[2];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v17 = (_QWORD *)this;
    WebCore::RenderBox::clearOverflow((WebCore::RenderBox *)this, a2);
    *(_OWORD *)(v17 + 63) = *(_OWORD *)a2;
    v17[19] = WebCore::enclosingLayoutRect((WebCore *)(v17 + 63), v19);
    v17[20] = v20;
    v24[0] = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v17, v20, v21);
    v24[1] = v22;
    v23 = *(WebCore::ShadowData **)(v17[13] + 160);
    if (v23)
      WebCore::ShadowData::adjustRectForShadow(v23, (WebCore::LayoutRect *)v24);
    return WebCore::RenderBox::addVisualOverflow((uint64_t)v17, (const WebCore::LayoutRect *)v24);
  }
  else
  {
    v2 = *((float *)a2 + 1);
    v3 = floorf(*(float *)a2 * 64.0);
    if (v3 >= 2147500000.0)
    {
      v4 = 0x7FFFFFFF;
    }
    else if (v3 <= -2147500000.0)
    {
      v4 = 0x80000000;
    }
    else
    {
      v4 = (int)v3;
    }
    v5 = floorf(v2 * 64.0);
    if (v5 >= 2147500000.0)
    {
      v6 = 0x7FFFFFFFLL;
    }
    else if (v5 <= -2147500000.0)
    {
      v6 = 0x80000000;
    }
    else
    {
      v6 = (int)v5;
    }
    v7 = v2 + *((float *)a2 + 3);
    v8 = ceilf((float)(*(float *)a2 + *((float *)a2 + 2)) * 64.0);
    if (v8 >= 2147500000.0)
    {
      v9 = 0x7FFFFFFF;
    }
    else if (v8 <= -2147500000.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v8;
    }
    v10 = ceilf(v7 * 64.0);
    if (v10 >= 2147500000.0)
    {
      v11 = 0x7FFFFFFF;
    }
    else if (v10 > -2147500000.0)
    {
      v11 = (int)v10;
    }
    else
    {
      v11 = 0x80000000;
    }
    v12 = __OFSUB__(v9, v4);
    v13 = v9 - v4;
    LODWORD(v14) = (v9 >> 31) + 0x7FFFFFFF;
    if (v12)
      v14 = v14;
    else
      v14 = v13;
    LODWORD(v15) = (v11 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__(v11, (_DWORD)v6))
      v15 = v15;
    else
      v15 = v11 - v6;
    v16.i64[0] = __PAIR64__(v6, v4);
    *(_QWORD *)(this + 152) = v4 | (unint64_t)(v6 << 32);
    *(_QWORD *)(this + 160) = v14 | (v15 << 32);
    v16.i64[1] = __PAIR64__(v15, v14);
    *(float32x4_t *)(this + 504) = vmulq_f32(vcvtq_f32_s32(v16), (float32x4_t)vdupq_n_s32(0x3C800000u));
  }
  return this;
}

uint64_t WebCore::RenderSVGText::nodeAtFloatPoint(uint64_t a1, uint64_t a2, WebCore::HitTestResult *a3, float *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int i;
  uint64_t v30;
  uint64_t v32;
  void *v34;
  WTF *v35;
  const WebCore::FloatPoint *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v44;
  BOOL v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  float32x4_t *v52;
  char v53;
  double v54;
  double v55;
  float v56;
  float v57;
  float v58;
  int v59;
  float v60;
  int v61;
  int8x8_t v62;
  _QWORD *v63;
  uint64_t v64;
  float32x4_t v65;
  uint64_t v66;
  float32x2_t v67;
  double v68;
  double v69;
  float v70;
  float v71;
  float v72;
  float v73;
  __int16 v74;
  float v75;
  float v76;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
  if (*(_BYTE *)(v11 + 3441) && *(_QWORD *)(v11 + 1272) != v10)
    goto LABEL_76;
  v12 = a1;
  if ((*(_BYTE *)(a1 + 45) & 2) != 0)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      v12 = *(_QWORD *)(v12 + 8);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 104) + 239) & 1) != 0)
LABEL_76:
    v13 = 0;
  else
    v13 = (*(_DWORD *)(v12 + 124) >> 6) & 0xF;
  if ((*(_BYTE *)a2 & 0x40) != 0)
    v13 = 3;
  v14 = v13 == 0;
  v15 = (0x201u >> v13) & 1;
  v16 = (0x61Du >> v13) & 1;
  v17 = v13 > 0xA;
  if (v13 <= 0xA)
  {
    v18 = (0x6EDu >> v13) & 1;
  }
  else
  {
    v14 = 1;
    LOBYTE(v15) = 1;
    v18 = 1;
  }
  if (v17)
    v19 = 1;
  else
    v19 = v16;
  if (*(_BYTE *)(a2 + 4) && (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0)
    v20 = 1;
  else
    v20 = (*(_DWORD *)(a1 + 120) >> 4) & 3;
  if (((v20 != 0) & ~v19) != 0)
    return 0;
  if ((v15 & 1) != 0
    || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 24) + 80) != 1 ? (v21 = 1) : (v21 = v18), (v21 & 1) == 0))
  {
    if (v14 || ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 16) + 56) == 1) & ~v18) != 0)
      return 0;
  }
  if (byte_1ECE84AA9 == 1)
  {
    v22 = dword_1ECE84AC8 + 1;
  }
  else
  {
    *(_QWORD *)&dword_1ECE84AC8 = 0;
    qword_1ECE84AC0 = 0;
    v22 = 1;
    byte_1ECE84AA9 = 1;
  }
  dword_1ECE84AC8 = v22;
  v23 = *(_QWORD *)(a1 + 8);
  if (v23)
  {
    if (*(_QWORD *)(v23 + 8) && qword_1ECE84AC0)
    {
      v24 = *(_DWORD *)(qword_1ECE84AC0 - 8);
      v25 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      for (i = 1; ; ++i)
      {
        v30 = *(_QWORD *)(qword_1ECE84AC0 + 8 * v28);
        if (!v30)
          break;
        if (v30 != -1 && v30 == v23)
          return 0;
        v28 = (v28 + i) & v24;
      }
    }
  }
  else
  {
    v23 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 8) = a1;
    v35 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v23;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
      {
        WTF::fastFree(v35, v34);
        v23 = *(_QWORD *)(a1 + 8);
        if (!v23)
          goto LABEL_42;
      }
      else
      {
        --*(_DWORD *)v35;
      }
    }
  }
  ++*(_DWORD *)v23;
LABEL_42:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84AC0, (_QWORD *)a1, (uint64_t)&v65);
  v37 = *(double *)(a1 + 256);
  v38 = *(double *)(a1 + 264);
  v39 = *(double *)(a1 + 272);
  v40 = *(double *)(a1 + 280);
  v41 = v37 * v40 - v38 * v39;
  v42 = fabs(v41);
  if ((unint64_t)(*(_QWORD *)&v42 - 0x10000000000000) >> 53 > 0x3FE
    && (unint64_t)(*(_QWORD *)&v42 - 1) > 0xFFFFFFFFFFFFELL)
  {
    v53 = 0;
    v65.i8[0] = 0;
    v52 = (float32x4_t *)&constinit_3;
    v47 = 1.0;
    v51 = 0.0;
    v50 = 0.0;
    v44 = 1.0;
  }
  else
  {
    v44 = 1.0;
    if (v37 == 1.0 && v38 == 0.0 && (v39 == 0.0 ? (v45 = v40 == 1.0) : (v45 = 0), v45))
    {
      v50 = -*(double *)(a1 + 288);
      v51 = -*(double *)(a1 + 296);
      v65.i64[1] = 0;
      v66 = 0;
      v47 = 1.0;
    }
    else
    {
      v44 = v40 / v41;
      *(double *)&v46 = -v39 / v41;
      v47 = v37 / v41;
      v49 = *(double *)(a1 + 288);
      v48 = *(double *)(a1 + 296);
      v50 = (v39 * v48 - v40 * v49) / v41;
      *(double *)&v65.i64[1] = -v38 / v41;
      v66 = v46;
      v51 = (v38 * v49 - v37 * v48) / v41;
    }
    *(double *)v65.i64 = v44;
    v67 = *(float32x2_t *)&v47;
    v68 = v50;
    v52 = &v65;
    v53 = 1;
    v69 = v51;
  }
  LOBYTE(v70) = v53;
  v54 = *a4;
  v55 = a4[1];
  v56 = v50 + *(double *)v52[1].i64 * v55 + v44 * v54;
  v57 = v51 + v47 * v55 + *(double *)&v52->i64[1] * v54;
  v75 = v56;
  v76 = v57;
  if (WebCore::SVGRenderSupport::pointInClippingArea((WebCore::SVGRenderSupport *)a1, (const WebCore::RenderElement *)&v75, v36))
  {
    v58 = floorf(v75);
    if (v58 >= 2147500000.0)
    {
      v59 = 0x7FFFFFFF;
    }
    else if (v58 <= -2147500000.0)
    {
      v59 = 0x80000000;
    }
    else
    {
      v59 = (int)v58;
    }
    v60 = floorf(v76);
    if (v60 >= 2147500000.0)
    {
      v61 = 0x7FFFFFFF;
    }
    else if (v60 <= -2147500000.0)
    {
      v61 = 0x80000000;
    }
    else
    {
      v61 = (int)v60;
    }
    v62 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(v61, v59), (int32x2_t)0xFE000000FE000000);
    v66 = 0x4000000040;
    *(int8x8_t *)v65.f32 = vorr_s8((int8x8_t)(*(_QWORD *)&v62 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v61, v59)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v61, v59), 6uLL)), v62));
    v65.i64[1] = v65.i32[0] & 0xFFFFFFC0 | ((unint64_t)((v65.i32[1] & 0xFFFFFFC0) >> 6) << 38);
    v67 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)v65.f32), (float32x2_t)vdup_n_s32(0x3C800000u));
    *(float *)&v68 = (float)(int)(v65.i32[0] & 0xFFFFFFC0) * 0.015625;
    *((float *)&v68 + 1) = (float)(int)(v65.i32[1] & 0xFFFFFFC0) * 0.015625;
    *(float *)&v69 = *(float *)&v68 + 1.0;
    *((float *)&v69 + 1) = *((float *)&v68 + 1);
    v70 = *(float *)&v68 + 1.0;
    v71 = *((float *)&v68 + 1) + 1.0;
    v72 = *(float *)&v68;
    v73 = *((float *)&v68 + 1) + 1.0;
    v74 = 256;
    v64 = 0;
    v32 = WebCore::RenderBlock::nodeAtPoint(a1, (int *)a2, a3, &v65, (const WebCore::LayoutPoint *)&v64, a5);
  }
  else
  {
    v32 = 0;
  }
  if (v23)
  {
    v63 = *(_QWORD **)(v23 + 8);
    if (v63)
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84AC0, v63);
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((WTF *)v23, v63);
    else
      --*(_DWORD *)v23;
  }
  return v32;
}

uint64_t WebCore::RenderSVGText::localToParentTransform(WebCore::RenderSVGText *this)
{
  return (uint64_t)this + 256;
}

uint64_t WebCore::RenderSVGText::nodeAtPoint(uint64_t a1, uint64_t a2, WebCore::HitTestResult *a3, float32x4_t *a4, const WebCore::LayoutPoint *a5, uint64_t a6)
{
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  char v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int i;
  uint64_t v39;
  uint64_t v41;
  void *v42;
  WTF *v43;
  unsigned __int32 v44;
  unsigned __int32 v45;
  float v46;
  float v47;
  unsigned int v48;
  float v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _QWORD *v58;
  int v59;
  _QWORD v60[3];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
    return WebCore::RenderBlock::nodeAtPoint(a1, (int *)a2, a3, a4, a5, a6);
  v14 = *(_DWORD *)(a1 + 152);
  v13 = *(_DWORD *)(a1 + 156);
  v15 = *((_DWORD *)a5 + 1);
  v16 = __OFADD__(*(_DWORD *)a5, v14);
  v17 = *(_DWORD *)a5 + v14;
  if (v16)
    v18 = (*(_DWORD *)a5 >> 31) + 0x7FFFFFFF;
  else
    v18 = v17;
  v16 = __OFADD__(v15, v13);
  v19 = v15 + v13;
  if (v16)
    v20 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v20 = v19;
  v21 = (*(_DWORD *)(a1 + 124) >> 6) & 0xF;
  if ((*(_BYTE *)a2 & 0x40) != 0)
    v21 = 3;
  v22 = (0x201u >> v21) & 1;
  v23 = v21 == 0;
  v24 = v21 > 0xA;
  if (v21 <= 0xA)
    v25 = (0x61Du >> v21) & 1;
  else
    v25 = 1;
  if (v21 <= 0xA)
    v26 = (0x6EDu >> v21) & 1;
  else
    v26 = 1;
  if (v24)
    v27 = 1;
  else
    v27 = v22;
  v28 = v24 || v23;
  if (*(_BYTE *)(a2 + 4) && (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0)
    v29 = 1;
  else
    v29 = (*(_DWORD *)(a1 + 120) >> 4) & 3;
  if (((v29 != 0) & ~v25) == 0)
  {
    if ((v27 & 1) == 0
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 24) + 80) != 1 ? (v30 = 1) : (v30 = v26), (v30 & 1) != 0)
      || (v28 & 1) == 0 && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 16) + 56) == 1) & ~v26) == 0)
    {
      if (byte_1ECE84AAA == 1)
      {
        v31 = dword_1ECE84AD8;
      }
      else
      {
        v31 = 0;
        *(_QWORD *)&dword_1ECE84AD8 = 0;
        qword_1ECE84AD0 = 0;
        byte_1ECE84AAA = 1;
      }
      dword_1ECE84AD8 = v31 + 1;
      v32 = *(_QWORD *)(a1 + 8);
      if (v32)
      {
        if (*(_QWORD *)(v32 + 8) && qword_1ECE84AD0)
        {
          v33 = *(_DWORD *)(qword_1ECE84AD0 - 8);
          v34 = (~(v32 << 32) + v32) ^ ((unint64_t)(~(v32 << 32) + v32) >> 22);
          v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
          v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
          v37 = v33 & ((v36 >> 31) ^ v36);
          for (i = 1; ; ++i)
          {
            v39 = *(_QWORD *)(qword_1ECE84AD0 + 8 * v37);
            if (!v39)
              break;
            if (v39 != -1 && v39 == v32)
              return 0;
            v37 = (v37 + i) & v33;
          }
        }
      }
      else
      {
        v32 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v32 = 1;
        *(_QWORD *)(v32 + 8) = a1;
        v43 = *(WTF **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v32;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
          {
            WTF::fastFree(v43, v42);
            v32 = *(_QWORD *)(a1 + 8);
            if (!v32)
            {
              v59 = v20;
              goto LABEL_52;
            }
          }
          else
          {
            --*(_DWORD *)v43;
          }
        }
      }
      v59 = v20;
      ++*(_DWORD *)v32;
LABEL_52:
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84AD0, (_QWORD *)a1, (uint64_t)v60);
      v44 = a4->i32[0];
      v45 = a4->u32[1];
      v46 = floorf((*(float (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) * 64.0);
      if (v46 >= 2147500000.0)
      {
        v48 = 0x7FFFFFFF;
      }
      else if (v46 <= -2147500000.0)
      {
        v48 = 0x80000000;
      }
      else
      {
        v48 = (int)v46;
      }
      v49 = floorf(v47 * 64.0);
      if (v49 >= 2147500000.0)
      {
        v50 = 0x7FFFFFFF;
      }
      else if (v49 <= -2147500000.0)
      {
        v50 = 0x80000000;
      }
      else
      {
        v50 = (int)v49;
      }
      v16 = __OFSUB__(v48, v18);
      v51 = v48 - v18;
      v52 = (v48 >> 31) + 0x7FFFFFFF;
      if (!v16)
        v52 = v51;
      v16 = __OFSUB__(v50, v59);
      v53 = v50 - v59;
      v54 = (v50 >> 31) + 0x7FFFFFFF;
      if (!v16)
        v54 = v53;
      v16 = __OFADD__(v44, v52);
      v55 = v44 + v52;
      if (v16)
        v55 = (v44 >> 31) + 0x7FFFFFFF;
      v16 = __OFADD__(v45, v54);
      v56 = v45 + v54;
      v57 = (v45 >> 31) + 0x7FFFFFFF;
      if (!v16)
        v57 = v56;
      v60[0] = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v57, v55)), (float32x2_t)vdup_n_s32(0x3C800000u));
      if (WebCore::RenderLayerModelObject::pointInSVGClippingArea((WebCore::RenderLayerModelObject *)a1, (const WebCore::FloatPoint *)v60))v41 = WebCore::RenderBlock::nodeAtPoint(a1, (int *)a2, a3, a4, a5, a6);
      else
        v41 = 0;
      if (v32)
      {
        v58 = *(_QWORD **)(v32 + 8);
        if (v58)
          WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84AD0, v58);
        if (*(_DWORD *)v32 == 1)
          WTF::fastFree((WTF *)v32, v58);
        else
          --*(_DWORD *)v32;
      }
      return v41;
    }
  }
  return 0;
}

void WebCore::RenderSVGText::applyTransform(WebCore::MotionPath *a1, float64x2_t *a2, WebCore::RenderStyle *a3, const WebCore::FloatRect *a4, char a5)
{
  uint64_t v5;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  void *v15;
  _BYTE v16[56];
  _BYTE v17[56];

  v5 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 1184))(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::textTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196525B28);
  }
  *(_DWORD *)(v5 + 24) += 2;
  v17[0] = 0;
  v17[48] = 0;
  v16[0] = 0;
  v16[48] = 0;
  WebCore::RenderLayerModelObject::applySVGTransform(a1, a2, (_QWORD *)v5, a3, a4, (uint64_t)v17, (uint64_t)v16, a5, v11, v12, v13, v14);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v15);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
}

unsigned int *WebCore::RenderSVGText::positionForPoint@<X0>(uint64_t a1@<X0>, const WebCore::LayoutPoint *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  WebCore::SVGRootInlineBox *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v17;
  _DWORD v19[2];

  if (*(_DWORD *)(a1 + 240) != 2)
    return WebCore::RenderObject::createVisiblePosition((unsigned int *)a1, 0, 1, a5);
  v6 = *(_QWORD *)(a1 + 232);
  if (!v6)
    return WebCore::RenderObject::createVisiblePosition((unsigned int *)a1, 0, 1, a5);
  v7 = *(WebCore::SVGRootInlineBox **)(v6 + 8);
  if (!v7)
    return WebCore::RenderObject::createVisiblePosition((unsigned int *)a1, 0, 1, a5);
  v14 = a1;
  v17 = a5;
  if (((*(uint64_t (**)(WebCore::SVGRootInlineBox *))(*(_QWORD *)v7 + 88))(v7) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196525D48);
  }
  if (((*(uint64_t (**)(WebCore::SVGRootInlineBox *))(*(_QWORD *)v7 + 112))(v7) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196525D68);
  }
  v8 = WebCore::SVGRootInlineBox::closestLeafChildForPosition(v7, a2);
  if (!v8)
  {
    a5 = v17;
    a1 = v14;
    return WebCore::RenderObject::createVisiblePosition((unsigned int *)a1, 0, 1, a5);
  }
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 32);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  v12 = *(float *)(v9 + 48) * 64.0;
  if (v12 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else if (v12 <= -2147483650.0)
  {
    v13 = 0x80000000;
  }
  else
  {
    v13 = (int)v12;
  }
  v19[0] = *(_DWORD *)a2;
  v19[1] = v13;
  return (unsigned int *)(*(uint64_t (**)(uint64_t, _DWORD *, _QWORD, uint64_t))(*(_QWORD *)v11 + 352))(v11, v19, a3, a4);
}

uint64_t WebCore::RenderSVGText::paint(WebCore::RenderSVGText *this, WebCore::RenderSVGText **a2, const WebCore::LayoutPoint *a3)
{
  uint64_t result;
  int v6;
  WebCore::RenderSVGText *v7;
  __int128 v8;
  WebCore::RenderSVGText *v9;
  __int128 v10;
  WebCore::PaintInfo *v11;
  const WebCore::LayoutPoint *v12;
  WebCore::RenderSVGText *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  signed int v24;
  signed int v25;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  WebCore::RenderSVGText *v33;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    result = WebCore::RenderLayerModelObject::shouldPaintSVGRenderer((uint64_t)this, (uint64_t)a2, 0xC58u);
    if ((_DWORD)result)
    {
      v14 = *((unsigned __int16 *)a2 + 8);
      if (v14 == 2048)
      {
        v28 = *(_OWORD *)((char *)this + 504);
        return WebCore::RenderLayerModelObject::paintSVGClippingMask((uint64_t)this, (WebCore::PaintInfo *)a2, (const WebCore::FloatRect *)&v28);
      }
      v16 = *((_DWORD *)this + 38);
      v15 = *((_DWORD *)this + 39);
      v17 = *((_DWORD *)a3 + 1);
      v18 = __OFADD__(*(_DWORD *)a3, v16);
      v19 = *(_DWORD *)a3 + v16;
      if (v18)
        v20 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
      else
        v20 = v19;
      v18 = __OFADD__(v17, v15);
      v21 = v17 + v15;
      if (v18)
        v22 = (v17 >> 31) + 0x7FFFFFFF;
      else
        v22 = v21;
      *(_QWORD *)&v28 = v20 | (v22 << 32);
      if (v14 == 16 || v14 == 64)
        return WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)a2, a3);
      if (v14 == 1024)
        return WebCore::RenderLayerModelObject::paintSVGMask((uint64_t)this, (WebCore::PaintInfo *)a2, (const WebCore::LayoutPoint *)&v28);
      v9 = a2[10];
      (*(void (**)(WebCore::RenderSVGText *, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
      v23 = WebCore::RenderLayerModelObject::nominalSVGLayoutLocation(this);
      v24 = v20 - v23;
      if (__OFSUB__((_DWORD)v20, (_DWORD)v23))
        v24 = (v20 >> 31) + 0x7FFFFFFF;
      v25 = v22 - HIDWORD(v23);
      if (__OFSUB__((_DWORD)v22, HIDWORD(v23)))
        v25 = (v22 >> 31) + 0x7FFFFFFF;
      (*(void (**)(WebCore::RenderSVGText *, float, float))(*(_QWORD *)a2[10] + 648))(a2[10], (float)v24 * 0.015625, (float)v25 * 0.015625);
      v13 = this;
      v11 = (WebCore::PaintInfo *)a2;
      v12 = a3;
      goto LABEL_7;
    }
  }
  else
  {
    result = (*(uint64_t (**)(WebCore::RenderSVGText *, WebCore::RenderSVGText **, const WebCore::LayoutPoint *))(*(_QWORD *)a2[10] + 40))(a2[10], a2, a3);
    if ((result & 1) != 0)
      return result;
    v6 = *((unsigned __int16 *)a2 + 8);
    if (v6 != 8)
    {
      if (*((unsigned __int16 *)a2 + 8) > 0x7FFu)
      {
        if (v6 != 2048)
          return result;
      }
      else if (v6 != 1024 && v6 != 16 && v6 != 64)
      {
        return result;
      }
    }
    v7 = a2[3];
    if (!v7 || v7 == this)
    {
      v8 = *((_OWORD *)a2 + 3);
      v30 = *((_OWORD *)a2 + 2);
      v31 = v8;
      v32 = *((_OWORD *)a2 + 4);
      v9 = a2[10];
      v33 = v9;
      v10 = *((_OWORD *)a2 + 1);
      v28 = *(_OWORD *)a2;
      v29 = v10;
      (*(void (**)(WebCore::RenderSVGText *, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
      WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)&v28, (WebCore::RenderSVGText *)((char *)this + 256));
      v27 = 0;
      WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v28, (const WebCore::LayoutPoint *)&v27);
      if (*((_WORD *)a2 + 8) != 8)
        return (*(uint64_t (**)(WebCore::RenderSVGText *, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
      LOWORD(v29) = 64;
      v27 = 0;
      v11 = (WebCore::PaintInfo *)&v28;
      v12 = (const WebCore::LayoutPoint *)&v27;
      v13 = this;
LABEL_7:
      WebCore::RenderBlock::paint((uint64_t)v13, v11, v12);
      return (*(uint64_t (**)(WebCore::RenderSVGText *, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
    }
  }
  return result;
}

_QWORD *WebCore::RenderSVGText::strokeBoundingBox(_QWORD *this)
{
  _QWORD *v1;
  const WebCore::SVGElement *v2;
  void *v3;
  uint64_t v4[5];
  const WebCore::SVGElement *v5;

  if (*(_BYTE *)(*(_QWORD *)(this[17] + 24) + 80) != 1)
  {
    v1 = this;
    v2 = (const WebCore::SVGElement *)WebCore::RenderSVGText::textElement((WebCore::RenderSVGText *)this);
    *((_DWORD *)v2 + 6) += 2;
    v5 = v2;
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v4, v2);
    WebCore::SVGLengthContext::valueForLength((WebCore::SVGLengthContext *)v4, (unsigned __int8 *)(v1[13] + 244), 2);
    WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v4, v3);
    return WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v5);
  }
  return this;
}

float32_t WebCore::RenderSVGText::repaintRectInLocalCoordinates(WebCore::RenderSVGText *this, const WebCore::RenderLayerModelObject *a2, double a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  WebCore::ShadowData *v9;
  __int32 v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    LODWORD(v14) = WebCore::SVGBoundingBoxComputation::computeRepaintBoundingBox(this, a2, a3);
    HIDWORD(v14) = v11;
    v15 = v12;
    v16 = v13;
  }
  else
  {
    WebCore::RenderSVGText::strokeBoundingBox(this);
    v14 = __PAIR64__(v6, v5);
    v15 = v7;
    v16 = v8;
    WebCore::SVGRenderSupport::intersectRepaintRectWithResources((uint64_t)this, (float32x2_t *)&v14, (uint64_t)a2);
  }
  v9 = *(WebCore::ShadowData **)(*((_QWORD *)this + 13) + 160);
  if (v9)
    WebCore::ShadowData::adjustRectForShadow(v9, (WebCore::FloatRect *)&v14);
  return *(float *)&v14;
}

float WebCore::SVGBoundingBoxComputation::computeRepaintBoundingBox(WebCore::SVGBoundingBoxComputation *this, const WebCore::RenderLayerModelObject *a2, double a3)
{
  WTF *v4;
  void *v5;
  float v6;
  WTF *v7;
  void *v9;
  WTF *v10;
  WTF *v11;

  v4 = (WTF *)*((_QWORD *)this + 1);
  if (!v4)
  {
    v4 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *((_QWORD *)v4 + 1) = this;
    v10 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WTF::fastFree(v10, v9);
        v4 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  ++*(_DWORD *)v4;
  v11 = v4;
  v6 = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v11, WebCore::SVGBoundingBoxComputation::repaintBoundingBoxDecoration, 0, a3);
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v5);
    else
      --*(_DWORD *)v7;
  }
  return v6;
}

void WebCore::RenderSVGText::styleDidChange(WebCore::RenderObject *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v27;

  if ((_DWORD)a2 == 8
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
  {
    if (a3)
    {
      v6 = *((_QWORD *)a3 + 1);
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 40);
      v8 = *(unsigned int *)(v7 + 20);
      v9 = (_DWORD)v8 || (v24 = *(_QWORD **)(v6 + 40), v24[41]) || v24[38] || v24[39] || v24[40] != 0;
      v10 = *((_QWORD *)this + 11);
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 40);
      v12 = *(_DWORD *)(v11 + 20);
      if (v12 || (v25 = *(_QWORD **)(v10 + 40), v25[41]) || v25[38] || v25[39])
      {
        if ((_DWORD)v8 != v12)
          LOBYTE(v9) = 0;
        if (!v9)
          goto LABEL_23;
      }
      else if ((v25[40] == 0) == v9 || (_DWORD)v8 != 0)
      {
        goto LABEL_23;
      }
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_QWORD **)(v7 + 8);
      if ((_DWORD)v8)
      {
        v15 = 8 * v8 - 8;
        v16 = v14;
        v17 = *(_QWORD **)(v11 + 8);
        while (1)
        {
          v18 = v15;
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v16 + 32))(*v16, *v17))
            goto LABEL_23;
          ++v16;
          ++v17;
          v15 = v18 - 8;
          if (!v18)
            goto LABEL_14;
        }
      }
      v17 = *(_QWORD **)(v11 + 8);
      v16 = *(_QWORD **)(v7 + 8);
LABEL_14:
      if (v16 != &v14[v8])
        goto LABEL_23;
      if (v17 != (_QWORD *)(v13 + 8 * v8))
        goto LABEL_23;
      v19 = *(_QWORD **)(*((_QWORD *)a3 + 1) + 40);
      v20 = *(_QWORD **)(*((_QWORD *)this + 11) + 40);
      if (v19[40] != v20[40] || v19[39] != v20[39] || v19[38] != v20[38])
        goto LABEL_23;
      v21 = v19 + 41;
      v22 = v20[41];
    }
    else
    {
      v23 = *((_QWORD *)this + 11);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 40) + 20)
        || (v27 = *(_QWORD **)(v23 + 40), v27[41])
        || v27[38]
        || (v22 = v27[39]) != 0)
      {
LABEL_23:
        *((_BYTE *)this + 248) |= 4u;
        goto LABEL_24;
      }
      v21 = v27 + 40;
    }
    if (*v21 == v22)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_24:
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    WebCore::RenderBlockFlow::styleDidChange((uint64_t)this, a2, (uint64_t)a3);
  }
  else
  {
    if ((_DWORD)a2 == 8)
      WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)this);
    WebCore::RenderBlockFlow::styleDidChange((uint64_t)this, a2, (uint64_t)a3);
    WebCore::SVGResourcesCache::clientStyleChanged((uint64_t)this, a2, a3, (WebCore::RenderObject *)((char *)this + 80));
  }
}

uint64_t WebCore::RenderSVGText::setNeedsTransformUpdate(uint64_t this)
{
  *(_BYTE *)(this + 248) |= 4u;
  return this;
}

void WebCore::RenderSVGTextPath::~RenderSVGTextPath(WebCore::RenderSVGTextPath *this, void *a2)
{
  uint64_t v3;
  char v4;

  v3 = *((unsigned int *)this + 58);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v3])(&v4, (char *)this + 176);
  *((_DWORD *)this + 58) = -1;
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *((unsigned int *)this + 58);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v3])(&v5, (char *)this + 176);
  *((_DWORD *)this + 58) = -1;
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

WebCore::Node *WebCore::RenderSVGTextPath::targetElement(WebCore::RenderSVGTextPath *this)
{
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _WORD *v7;
  double v8;
  double v9;
  float v10;
  const WebCore::TreeScope *v11;
  uint64_t v12;
  BOOL v13;
  void *v14;
  WebCore::Node *v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;
  WebCore::Node *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WebCore::Node *v28;
  WTF::StringImpl *v29;
  WebCore::Node *v30;
  WTF::StringImpl *v31;

  v2 = WTF::downcast<WebCore::SVGGraphicsElement,WebCore::Node>(*(_WORD **)(*((_QWORD *)this + 3) + 8));
  if (*(_QWORD *)(*((_QWORD *)v2 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::textPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196526808);
  }
  v3 = *((_QWORD *)v2 + 31);
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  v21 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v21)
  {
    v22 = 8 * v21;
    v23 = *(uint64_t **)(v3 + 24);
    while ((unint64_t)(*v23 + 1) <= 1)
    {
      ++v23;
      v22 -= 8;
      if (!v22)
        goto LABEL_3;
    }
  }
  else
  {
    v23 = *(uint64_t **)(v3 + 24);
  }
  v26 = (uint64_t *)(v4 + 8 * v21);
  if (v23 == v26)
    goto LABEL_3;
  v27 = *v23;
LABEL_52:
  if (!*(_QWORD *)(v27 + 8))
  {
    while (++v23 != v26)
    {
      v27 = *v23;
      if ((unint64_t)(*v23 + 1) > 1)
      {
        if (v23 != v26)
          goto LABEL_52;
        break;
      }
    }
LABEL_3:
    v5 = v3 + 40;
    goto LABEL_4;
  }
  v5 = v3 + 48;
LABEL_4:
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 32);
  if (v6)
    *(_DWORD *)v6 += 2;
  v29 = v6;
  v7 = WTF::downcast<WebCore::SVGGraphicsElement,WebCore::Node>(*(_WORD **)(*((_QWORD *)this + 3) + 8));
  if (*(_QWORD *)(*((_QWORD *)v7 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::textPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196526828);
  }
  v11 = (const WebCore::TreeScope *)*((_QWORD *)v7 + 5);
  v12 = *(_QWORD *)v11;
  if (*(_QWORD *)v11)
    v13 = (*(_WORD *)(*(_QWORD *)v11 + 28) & 0x80) == 0;
  else
    v13 = 1;
  if (!v13 && !*(_BYTE *)(v12 + 193))
  {
    v24 = *(_QWORD *)(v12 + 200);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 8);
      if (v25)
      {
        if (*(_WORD *)(*(_QWORD *)(v25 + 96) + 10) == 242)
          v11 = (const WebCore::TreeScope *)*((_QWORD *)v11 + 2);
      }
    }
  }
  v28 = 0;
  WebCore::SVGURIReference::targetElementFromIRIString((WTF::StringImpl *)&v29, v11, &v28, (uint64_t *)&v30, v8, v9, v10);
  v15 = v28;
  v28 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v14);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v30;
  if (v30)
  {
    if ((*((_WORD *)v30 + 14) & 0x20) != 0)
    {
      if (!(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v30 + 1192))(v30))
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v30;
  v30 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v14);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  return v17;
}

double WebCore::RenderSVGTextPath::layoutPath@<D0>(WebCore::RenderSVGTextPath *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v4;
  const WebCore::SVGElement *v5;
  WebCore::Node *v6;
  float64x2_t *v7;
  void *v8;
  double result;
  uint64_t v10;
  float64x2_t v11[2];
  float64x2_t v12;
  double v13;
  double v14;
  _OWORD v15[2];
  double v16;
  double v17;

  v4 = WebCore::RenderSVGTextPath::targetElement(this);
  if (!v4)
  {
    *(_QWORD *)(a2 + 64) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v6 = v4;
  *((_DWORD *)v4 + 6) += 2;
  WebCore::pathFromGraphicsElement(v4, v5, a2);
  if ((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  if ((*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_22;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
  {
LABEL_5:
    (*(void (**)(float64x2_t *__return_ptr, WebCore::Node *))(*(_QWORD *)v6 + 1344))(v11, v6);
    v7 = v11;
    goto LABEL_6;
  }
  if ((*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 4
    || (*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0
    || (*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 0x10) == 0)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x196526954);
  }
  v10 = *(_QWORD *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x90);
  if (!v10)
    goto LABEL_5;
  WebCore::RenderLayer::currentTransform(v10, (const WebCore::RenderElement *)0x1E, (uint64_t)v11);
  result = v14;
  v15[0] = v11[0];
  v15[1] = v12;
  v16 = v13;
  v17 = v14;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v11[0], (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v12, (float64x2_t)xmmword_1968A14C0))))) & 1) == 0&& v13 == 0.0&& v14 == 0.0)
  {
    goto LABEL_7;
  }
  v7 = (float64x2_t *)v15;
LABEL_6:
  WebCore::Path::transform((WebCore::Path *)a2, v7);
LABEL_7:
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v6, v8);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::RenderSVGTextPath::startOffset(WebCore::RenderSVGTextPath *this)
{
  _WORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = WTF::downcast<WebCore::SVGGraphicsElement,WebCore::Node>(*(_WORD **)(*((_QWORD *)this + 3) + 8));
  if (*(_QWORD *)(*((_QWORD *)v1 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::textPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196526AC4);
  }
  v2 = (_QWORD *)*((_QWORD *)v1 + 32);
  v3 = v2[3];
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v6 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = (uint64_t *)v2[3];
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
          goto LABEL_3;
      }
    }
    else
    {
      v8 = (uint64_t *)v2[3];
    }
    v9 = (uint64_t *)(v3 + 8 * v6);
    if (v8 != v9)
    {
      v10 = *v8;
LABEL_15:
      if (*(_QWORD *)(v10 + 8))
      {
        v4 = v2 + 6;
        return *v4 + 28;
      }
      while (++v8 != v9)
      {
        v10 = *v8;
        if ((unint64_t)(*v8 + 1) > 1)
        {
          if (v8 != v9)
            goto LABEL_15;
          break;
        }
      }
    }
  }
LABEL_3:
  v4 = v2 + 5;
  return *v4 + 28;
}

uint64_t WebCore::RenderSVGTransformableContainer::operator new(uint64_t this)
{
  if (this == 272)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::RenderSVGTransformableContainer::RenderSVGTransformableContainer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  double result;

  v3 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 87, a2, a3, 0, 516);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_WORD *)(v3 + 168) = 0;
  *(_BYTE *)(v3 + 170) = 0;
  *(_OWORD *)(v3 + 172) = 0u;
  *(_OWORD *)(v3 + 188) = 0u;
  *(int32x4_t *)(v3 + 204) = vdupq_n_s32(0x7FC00000u);
  *(_QWORD *)v3 = off_1E34494D8;
  *(_OWORD *)(v3 + 224) = constinit_3;
  *(_OWORD *)(v3 + 240) = unk_1969FE0D0;
  result = 0.0;
  *(_OWORD *)(v3 + 256) = xmmword_1969FE0E0;
  return result;
}

void WebCore::RenderSVGTransformableContainer::~RenderSVGTransformableContainer(WebCore::RenderSVGTransformableContainer *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

BOOL WebCore::RenderSVGTransformableContainer::needsHasSVGTransformFlags(WebCore::RenderSVGTransformableContainer *this)
{
  uint64_t v1;
  void *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196526D08);
  }
  *(_DWORD *)(v1 + 24) += 2;
  v3 = 1;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1352))(v1) & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24);
    v5 = *(_QWORD *)(WebCore::SVGNames::useTag + 24);
    if (v4 != v5
      && ((*(_BYTE *)(v1 + 22) & 0x10) == 0
       || v4 != *(_QWORD *)(WebCore::SVGNames::gTag + 24)
       || (v6 = *(_QWORD *)(v1 + 120)) == 0
       || (v8 = *(_QWORD *)(v6 + 56)) == 0
       || (v9 = *(_QWORD *)(v8 + 8)) == 0
       || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != v5))
    {
      v3 = 0;
    }
  }
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v3;
}

WTF *WebCore::RenderSVGTransformableContainer::updateLayerTransform(WebCore::RenderSVGTransformableContainer *this)
{
  uint64_t v1;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF *v34;
  _QWORD v35[5];

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196526E68);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196526E88);
  }
  v4 = *(_DWORD *)(v1 + 24) + 2;
  *(_DWORD *)(v1 + 24) = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24);
  v6 = *(_QWORD *)(WebCore::SVGNames::useTag + 24);
  if (v5 == v6)
  {
    v12 = v1;
LABEL_20:
    *(_DWORD *)(v12 + 24) = v4 + 2;
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v35, (const WebCore::SVGElement *)v1);
    v13 = *(_QWORD *)(v12 + 248);
    v14 = *(_QWORD *)(v13 + 24);
    if (v14 && *(_DWORD *)(v14 - 12))
    {
      v22 = *(unsigned int *)(v14 - 4);
      if ((_DWORD)v22)
      {
        v23 = 8 * v22;
        v24 = *(uint64_t **)(v13 + 24);
        while ((unint64_t)(*v24 + 1) <= 1)
        {
          ++v24;
          v23 -= 8;
          if (!v23)
            goto LABEL_21;
        }
      }
      else
      {
        v24 = *(uint64_t **)(v13 + 24);
      }
      v30 = (uint64_t *)(v14 + 8 * v22);
      if (v24 != v30)
      {
        v31 = *v24;
LABEL_51:
        if (*(_QWORD *)(v31 + 8))
        {
          v15 = v13 + 48;
LABEL_22:
          v9 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v15 + 28), (const WebCore::SVGLengthContext *)v35);
          v16 = *(_QWORD *)(v12 + 256);
          v17 = *(_QWORD *)(v16 + 24);
          if (v17 && *(_DWORD *)(v17 - 12))
          {
            v25 = *(unsigned int *)(v17 - 4);
            if ((_DWORD)v25)
            {
              v26 = 8 * v25;
              v27 = *(uint64_t **)(v16 + 24);
              while ((unint64_t)(*v27 + 1) <= 1)
              {
                ++v27;
                v26 -= 8;
                if (!v26)
                  goto LABEL_23;
              }
            }
            else
            {
              v27 = *(uint64_t **)(v16 + 24);
            }
            v32 = (uint64_t *)(v17 + 8 * v25);
            if (v27 != v32)
            {
              v33 = *v27;
LABEL_60:
              if (*(_QWORD *)(v33 + 8))
              {
                v18 = v16 + 48;
LABEL_24:
                v7 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v18 + 28), (const WebCore::SVGLengthContext *)v35);
                v19 = (unsigned int *)v35[0];
                v35[0] = 0;
                if (v19)
                {
                  do
                  {
                    v20 = __ldaxr(v19);
                    v21 = v20 - 1;
                  }
                  while (__stlxr(v21, v19));
                  if (!v21)
                  {
                    atomic_store(1u, v19);
                    v34 = (WTF *)v19;
                    v28 = v19[7];
                    if ((_DWORD)v28)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v34 + 2), (WTF::StringImpl *)(*((_QWORD *)v34 + 2) + 32 * v28));
                    v29 = (WTF *)*((_QWORD *)v34 + 2);
                    if (v29)
                    {
                      *((_QWORD *)v34 + 2) = 0;
                      *((_DWORD *)v34 + 6) = 0;
                      WTF::fastFree(v29, v3);
                    }
                    WTF::fastFree(v34, v3);
                  }
                }
                if (*(_DWORD *)(v12 + 24) == 2)
                {
                  if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v12, v3);
                }
                else
                {
                  *(_DWORD *)(v12 + 24) -= 2;
                }
                goto LABEL_8;
              }
              while (++v27 != v32)
              {
                v33 = *v27;
                if ((unint64_t)(*v27 + 1) > 1)
                {
                  if (v27 != v32)
                    goto LABEL_60;
                  break;
                }
              }
            }
          }
LABEL_23:
          v18 = v16 + 40;
          goto LABEL_24;
        }
        while (++v24 != v30)
        {
          v31 = *v24;
          if ((unint64_t)(*v24 + 1) > 1)
          {
            if (v24 != v30)
              goto LABEL_51;
            break;
          }
        }
      }
    }
LABEL_21:
    v15 = v13 + 40;
    goto LABEL_22;
  }
  v7 = 0.0;
  if ((*(_BYTE *)(v1 + 22) & 0x10) == 0
    || v5 != *(_QWORD *)(WebCore::SVGNames::gTag + 24)
    || (v8 = *(_QWORD *)(v1 + 120)) == 0
    || (v11 = *(_QWORD *)(v8 + 56)) == 0
    || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
    v9 = 0.0;
    goto LABEL_8;
  }
  v9 = 0.0;
  if (*(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == v6)
  {
    v4 = *(_DWORD *)(v12 + 24);
    goto LABEL_20;
  }
LABEL_8:
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  *((_QWORD *)this + 28) = 0x3FF0000000000000;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0x3FF0000000000000;
  *((double *)this + 32) = v9;
  *((double *)this + 33) = v7;
  return WebCore::RenderLayerModelObject::updateLayerTransform(this, v3);
}

void WebCore::RenderSVGTransformableContainer::applyTransform(uint64_t a1, float64x2_t *a2, WebCore::RenderStyle *a3, const WebCore::FloatRect *a4, char a5)
{
  __int128 v10;
  char v11;
  uint64_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  void *v17;
  _BYTE v18[56];
  _OWORD v19[3];
  char v20;

  if (*(double *)(a1 + 224) == 1.0
    && *(double *)(a1 + 232) == 0.0
    && *(double *)(a1 + 240) == 0.0
    && *(double *)(a1 + 248) == 1.0
    && *(double *)(a1 + 256) == 0.0
    && *(double *)(a1 + 264) == 0.0)
  {
    v11 = 0;
    LOBYTE(v19[0]) = 0;
  }
  else
  {
    v10 = *(_OWORD *)(a1 + 240);
    v19[0] = *(_OWORD *)(a1 + 224);
    v19[1] = v10;
    v19[2] = *(_OWORD *)(a1 + 256);
    v11 = 1;
  }
  v20 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v12 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965271E4);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 1184))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196527204);
  }
  *(_DWORD *)(v12 + 24) += 2;
  v18[0] = 0;
  v18[48] = 0;
  WebCore::RenderLayerModelObject::applySVGTransform((WebCore::MotionPath *)a1, a2, (_QWORD *)v12, a3, a4, (uint64_t)v18, (uint64_t)v19, a5, v13, v14, v15, v16);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v17);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
}

uint64_t WebCore::RenderSVGViewportContainer::operator new(uint64_t this)
{
  if (this == 296)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderSVGViewportContainer::RenderSVGViewportContainer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  WTF *v15;

  v6 = WebCore::RenderObject::RenderObject(a1, 88, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8), 16, 516);
  *(_QWORD *)v6 = off_1E3422BC8;
  *(_QWORD *)(v6 + 70) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  v7 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(v6 + 88) = v7;
  *(_QWORD *)(v6 + 96) = a3[2];
  v8 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v6 + 104) = v8;
  v9 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(v6 + 112) = v9;
  *(_QWORD *)(v6 + 120) = a3[5];
  v10 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(v6 + 128) = v10;
  v11 = a3[7];
  a3[7] = 0;
  *(_QWORD *)(v6 + 136) = v11;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_WORD *)(v6 + 168) = 0;
  *(_BYTE *)(v6 + 170) = 0;
  *(_OWORD *)(v6 + 172) = 0u;
  *(_OWORD *)(v6 + 188) = 0u;
  *(int32x4_t *)(v6 + 204) = vdupq_n_s32(0x7FC00000u);
  *(_QWORD *)v6 = off_1E3449888;
  *(_OWORD *)(v6 + 224) = constinit_3;
  *(_OWORD *)(v6 + 240) = unk_1969FE0D0;
  *(_OWORD *)(v6 + 256) = xmmword_1969FE0E0;
  *(_QWORD *)(v6 + 272) = 0;
  *(_QWORD *)(v6 + 280) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = a2;
    v15 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WTF::fastFree(v15, v14);
        v12 = *(_QWORD *)(a2 + 8);
        if (!v12)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  ++*(_DWORD *)v12;
LABEL_3:
  *(_QWORD *)(a1 + 288) = v12;
  return a1;
}

double WebCore::RenderSVGViewportContainer::RenderSVGViewportContainer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  double result;

  v3 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 88, a2, a3, 0, 516);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_WORD *)(v3 + 168) = 0;
  *(_BYTE *)(v3 + 170) = 0;
  *(_OWORD *)(v3 + 172) = 0u;
  *(_OWORD *)(v3 + 188) = 0u;
  *(int32x4_t *)(v3 + 204) = vdupq_n_s32(0x7FC00000u);
  *(_QWORD *)v3 = off_1E3449888;
  *(_OWORD *)(v3 + 224) = constinit_3;
  *(_OWORD *)(v3 + 240) = unk_1969FE0D0;
  result = 0.0;
  *(_OWORD *)(v3 + 256) = xmmword_1969FE0E0;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  return result;
}

void WebCore::RenderSVGViewportContainer::~RenderSVGViewportContainer(WebCore::RenderSVGViewportContainer *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  void *v4;

  v3 = (WTF *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 36) = 0;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

BOOL WebCore::RenderSVGViewportContainer::updateLayoutSizeIfNeeded(WebCore::RenderSVGViewportContainer *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  float v26;
  WTF *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  float v33;
  int v34;
  float v35;
  uint64_t v36;
  WebCore::RenderLayerScrollableArea *v37;
  float v38;
  float v39;
  int v40;
  uint64_t v41;
  WebCore::RenderLayerScrollableArea *v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  WTF *v73[5];

  v2 = *((float *)this + 70);
  v3 = *((float *)this + 71);
  v4 = 0.0;
  v5 = 0.0;
  if ((*((_BYTE *)this + 45) & 1) != 0)
    goto LABEL_14;
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965279D8);
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196527A38);
  }
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v73, (const WebCore::SVGElement *)v6);
  v7 = *(_QWORD *)(v6 + 288);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_5;
  v45 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v45)
  {
    v46 = 8 * v45;
    v47 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v47 + 1) <= 1)
    {
      ++v47;
      v46 -= 8;
      if (!v46)
        goto LABEL_5;
    }
  }
  else
  {
    v47 = *(uint64_t **)(v7 + 24);
  }
  v65 = (uint64_t *)(v8 + 8 * v45);
  if (v47 == v65)
    goto LABEL_5;
  v66 = *v47;
LABEL_113:
  if (!*(_QWORD *)(v66 + 8))
  {
    while (++v47 != v65)
    {
      v66 = *v47;
      if ((unint64_t)(*v47 + 1) > 1)
      {
        if (v47 != v65)
          goto LABEL_113;
        break;
      }
    }
LABEL_5:
    v9 = v7 + 40;
    goto LABEL_6;
  }
  v9 = v7 + 48;
LABEL_6:
  v5 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v9 + 28), (const WebCore::SVGLengthContext *)v73);
  v10 = *(_QWORD *)(v6 + 296);
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(_DWORD *)(v11 - 12))
  {
    v48 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v48)
    {
      v49 = 8 * v48;
      v50 = *(uint64_t **)(v10 + 24);
      while ((unint64_t)(*v50 + 1) <= 1)
      {
        ++v50;
        v49 -= 8;
        if (!v49)
          goto LABEL_7;
      }
    }
    else
    {
      v50 = *(uint64_t **)(v10 + 24);
    }
    v67 = (uint64_t *)(v11 + 8 * v48);
    if (v50 != v67)
    {
      v68 = *v50;
LABEL_122:
      if (*(_QWORD *)(v68 + 8))
      {
        v12 = v10 + 48;
        goto LABEL_8;
      }
      while (++v50 != v67)
      {
        v68 = *v50;
        if ((unint64_t)(*v50 + 1) > 1)
        {
          if (v50 != v67)
            goto LABEL_122;
          break;
        }
      }
    }
  }
LABEL_7:
  v12 = v10 + 40;
LABEL_8:
  v4 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v12 + 28), (const WebCore::SVGLengthContext *)v73);
  v14 = v73[0];
  v73[0] = 0;
  if (!v14)
    goto LABEL_11;
  do
  {
    v15 = __ldaxr((unsigned int *)v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v14));
  if (v16)
  {
LABEL_11:
    if (!v6)
      goto LABEL_14;
    goto LABEL_12;
  }
  atomic_store(1u, (unsigned int *)v14);
  v59 = *((unsigned int *)v14 + 7);
  if ((_DWORD)v59)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v14 + 2), (WTF::StringImpl *)(*((_QWORD *)v14 + 2) + 32 * v59));
  v60 = (WTF *)*((_QWORD *)v14 + 2);
  if (v60)
  {
    *((_QWORD *)v14 + 2) = 0;
    *((_DWORD *)v14 + 6) = 0;
    WTF::fastFree(v60, v13);
  }
  WTF::fastFree(v14, v13);
  if (v6)
  {
LABEL_12:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v13);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
LABEL_14:
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v30 = *((_QWORD *)this + 4);
    if (v30)
      v31 = *(_QWORD *)(v30 + 8);
    else
      v31 = 0;
    if (*(_BYTE *)(v31 + 46) != 83)
    {
      __break(0xC471u);
      JUMPOUT(0x196527A18);
    }
    WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)v31);
    v33 = (float)v32 * 0.015625;
    v35 = (float)v34 * 0.015625;
    v36 = *(_QWORD *)(v31 + 144);
    if (!v36)
    {
      v39 = 0.0;
      v38 = 0.0;
      goto LABEL_46;
    }
    v37 = *(WebCore::RenderLayerScrollableArea **)(v36 + 264);
    v38 = 0.0;
    v39 = 0.0;
    if (v37)
    {
      if ((*(_BYTE *)(v31 + 22) & 1) != 0)
      {
        if (!(*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v37 + 400))(v37)
          || (v58 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v37 + 400))(v37),
              ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 272))(v58) & 1) == 0))
        {
          if (!(*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v37 + 392))(v37)
            || (v64 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v37 + 392))(v37),
                ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 272))(v64) & 1) == 0))
          {
            v40 = (unsigned __int16)*(_DWORD *)(v31 + 96) >> 13;
            if (v40 == 1)
            {
              if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 88) + 40) + 584) & 1) != 0)
                goto LABEL_37;
            }
            else if ((v40 - 3) >= 2)
            {
              goto LABEL_37;
            }
            v39 = (float)(int)WebCore::RenderLayerScrollableArea::verticalScrollbarWidth(v37, 0, (*(_DWORD *)(v31 + 20) & 0x1000) == 0);
          }
        }
      }
    }
LABEL_37:
    v41 = *(_QWORD *)(v31 + 144);
    if (!v41)
      goto LABEL_46;
    v42 = *(WebCore::RenderLayerScrollableArea **)(v41 + 264);
    if (!v42)
      goto LABEL_46;
    if ((*(_BYTE *)(v31 + 22) & 1) == 0)
      goto LABEL_46;
    if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v42 + 400))(v42))
    {
      v57 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v42 + 400))(v42);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 272))(v57) & 1) != 0)
        goto LABEL_46;
    }
    if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v42 + 392))(v42))
    {
      v63 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v42 + 392))(v42);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 272))(v63) & 1) != 0)
        goto LABEL_46;
    }
    v43 = (*(_DWORD *)(v31 + 96) >> 10) & 7;
    if (v43 == 1)
    {
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 88) + 40) + 584) & 1) == 0)
        goto LABEL_88;
    }
    else if ((v43 - 3) < 2)
    {
LABEL_88:
      v38 = (float)(int)WebCore::RenderLayerScrollableArea::horizontalScrollbarHeight(v42, 0, (*(_DWORD *)(v31 + 20) & 0x1000) == 0);
    }
LABEL_46:
    v21 = v33 + v39;
    v26 = v35 + v38;
    goto LABEL_47;
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v17 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965279F8);
  }
  if (*(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196527A58);
  }
  *(_DWORD *)(v17 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v73, (const WebCore::SVGElement *)v17);
  v18 = *(_QWORD *)(v17 + 304);
  v19 = *(_QWORD *)(v18 + 24);
  if (!v19 || !*(_DWORD *)(v19 - 12))
    goto LABEL_18;
  v51 = *(unsigned int *)(v19 - 4);
  if ((_DWORD)v51)
  {
    v52 = 8 * v51;
    v53 = *(uint64_t **)(v18 + 24);
    while ((unint64_t)(*v53 + 1) <= 1)
    {
      ++v53;
      v52 -= 8;
      if (!v52)
        goto LABEL_18;
    }
  }
  else
  {
    v53 = *(uint64_t **)(v18 + 24);
  }
  v69 = (uint64_t *)(v19 + 8 * v51);
  if (v53 == v69)
    goto LABEL_18;
  v70 = *v53;
LABEL_131:
  if (!*(_QWORD *)(v70 + 8))
  {
    while (++v53 != v69)
    {
      v70 = *v53;
      if ((unint64_t)(*v53 + 1) > 1)
      {
        if (v53 != v69)
          goto LABEL_131;
        break;
      }
    }
LABEL_18:
    v20 = v18 + 40;
    goto LABEL_19;
  }
  v20 = v18 + 48;
LABEL_19:
  v21 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v20 + 28), (const WebCore::SVGLengthContext *)v73);
  v22 = *(_QWORD *)(v17 + 312);
  v23 = *(_QWORD *)(v22 + 24);
  if (v23 && *(_DWORD *)(v23 - 12))
  {
    v54 = *(unsigned int *)(v23 - 4);
    if ((_DWORD)v54)
    {
      v55 = 8 * v54;
      v56 = *(uint64_t **)(v22 + 24);
      while ((unint64_t)(*v56 + 1) <= 1)
      {
        ++v56;
        v55 -= 8;
        if (!v55)
          goto LABEL_20;
      }
    }
    else
    {
      v56 = *(uint64_t **)(v22 + 24);
    }
    v71 = (uint64_t *)(v23 + 8 * v54);
    if (v56 != v71)
    {
      v72 = *v56;
LABEL_140:
      if (*(_QWORD *)(v72 + 8))
      {
        v24 = v22 + 48;
        goto LABEL_21;
      }
      while (++v56 != v71)
      {
        v72 = *v56;
        if ((unint64_t)(*v56 + 1) > 1)
        {
          if (v56 != v71)
            goto LABEL_140;
          break;
        }
      }
    }
  }
LABEL_20:
  v24 = v22 + 40;
LABEL_21:
  v26 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v24 + 28), (const WebCore::SVGLengthContext *)v73);
  v27 = v73[0];
  v73[0] = 0;
  if (!v27)
    goto LABEL_24;
  do
  {
    v28 = __ldaxr((unsigned int *)v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)v27));
  if (v29)
  {
LABEL_24:
    if (!v17)
      goto LABEL_47;
    goto LABEL_25;
  }
  atomic_store(1u, (unsigned int *)v27);
  v61 = *((unsigned int *)v27 + 7);
  if ((_DWORD)v61)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v27 + 2), (WTF::StringImpl *)(*((_QWORD *)v27 + 2) + 32 * v61));
  v62 = (WTF *)*((_QWORD *)v27 + 2);
  if (v62)
  {
    *((_QWORD *)v27 + 2) = 0;
    *((_DWORD *)v27 + 6) = 0;
    WTF::fastFree(v62, v25);
  }
  WTF::fastFree(v27, v25);
  if (v17)
  {
LABEL_25:
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v25);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
LABEL_47:
  *((float *)this + 68) = v5;
  *((float *)this + 69) = v4;
  *((float *)this + 70) = v21;
  *((float *)this + 71) = v26;
  if ((*((_BYTE *)this + 20) & 8) != 0)
    return 1;
  if (v3 == v26)
    return v2 != v21;
  return 1;
}

BOOL WebCore::RenderSVGViewportContainer::needsHasSVGTransformFlags(WebCore::RenderSVGViewportContainer *this)
{
  uint64_t v2;
  void *v3;
  _BOOL8 v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 36) + 8) + 24) + 8);
    if ((*(_WORD *)(v2 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196527DCCLL);
    }
  }
  else
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v2 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196527DECLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x196527CC8);
    }
  }
  *(_DWORD *)(v2 + 24) += 2;
  if (WebCore::SVGSVGElement::hasTransformRelatedAttributes((WebCore::SVGSVGElement *)v2))
  {
    v4 = 1;
  }
  else if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 + 280);
    v4 = 1;
    if (*(float *)(v5 + 28) == 0.0 && *(float *)(v5 + 32) == 0.0)
    {
      if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        goto LABEL_23;
      }
      v4 = *(float *)(*(_QWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 184) != 1.0;
    }
  }
  else
  {
    v4 = 0;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v4;
}

unsigned int *WebCore::RenderSVGViewportContainer::updateLayerTransform(WebCore::RenderSVGViewportContainer *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  float v7;
  float v8;
  double *v9;
  __n128 *v10;
  double v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  float64x2_t v18;
  __int128 v21;
  unsigned int *result;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v35;
  double v36;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  _BYTE v47[32];

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 36) + 8) + 24) + 8);
    if ((*(_WORD *)(v6 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1965281C8);
    }
  }
  else
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v6 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965281E8);
    }
    if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196527E84);
    }
  }
  *(_DWORD *)(v6 + 24) += 2;
  *((_QWORD *)this + 29) = 0;
  v8 = *((float *)this + 70);
  v7 = *((float *)this + 71);
  *((_QWORD *)this + 28) = 0x3FF0000000000000;
  v9 = (double *)((char *)this + 224);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0x3FF0000000000000;
  v10 = (__n128 *)((char *)this + 256);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    a2.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v6 + 280) + 28);
    if (a2.n128_f32[0] != 0.0 || a2.n128_f32[1] != 0.0)
    {
      a2 = (__n128)vaddq_f64(vcvtq_f64_f32((float32x2_t)a2.n128_u64[0]), (float64x2_t)0);
      *v10 = a2;
    }
    if ((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196528208);
    }
    a2.n128_u32[0] = *(_DWORD *)(*(_QWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 184);
    if (a2.n128_f32[0] != 1.0)
    {
      v11 = a2.n128_f32[0] * 0.0;
      *((double *)this + 28) = a2.n128_f32[0];
      *((double *)this + 29) = v11;
      *((double *)this + 30) = v11;
      *((double *)this + 31) = a2.n128_f32[0];
      a2.n128_f32[0] = 1.0 / a2.n128_f32[0];
      v8 = v8 * a2.n128_f32[0];
      v7 = v7 * a2.n128_f32[0];
    }
  }
  else
  {
    a2.n128_u64[0] = *((_QWORD *)this + 34);
    if (a2.n128_f32[0] != 0.0 || a2.n128_f32[1] != 0.0)
    {
      a2 = (__n128)vaddq_f64(vcvtq_f64_f32((float32x2_t)a2.n128_u64[0]), (float64x2_t)0);
      *v10 = a2;
    }
  }
  if (WebCore::Element::hasAttribute((WebCore::Element *)v6, (const WebCore::QualifiedName *)&WebCore::SVGNames::viewBoxAttr, a4, a5, a2))
  {
    if (!*(_BYTE *)(v6 + 232))
      goto LABEL_24;
    v13 = *(_QWORD **)(v6 + 216);
    v14 = v13[3];
    if (v14 && *(_DWORD *)(v14 - 12))
    {
      v41 = *(unsigned int *)(v14 - 4);
      if ((_DWORD)v41)
      {
        v42 = 8 * v41;
        v43 = (uint64_t *)v13[3];
        while ((unint64_t)(*v43 + 1) <= 1)
        {
          ++v43;
          v42 -= 8;
          if (!v42)
            goto LABEL_21;
        }
      }
      else
      {
        v43 = (uint64_t *)v13[3];
      }
      v44 = (uint64_t *)(v14 + 8 * v41);
      if (v43 != v44)
      {
        v45 = *v43;
LABEL_58:
        if (*(_QWORD *)(v45 + 8))
        {
          v15 = v13 + 6;
          goto LABEL_22;
        }
        while (++v43 != v44)
        {
          v45 = *v43;
          if ((unint64_t)(*v43 + 1) > 1)
          {
            if (v43 != v44)
              goto LABEL_58;
            break;
          }
        }
      }
    }
LABEL_21:
    v15 = v13 + 5;
LABEL_22:
    v16 = *v15;
    if (*(float *)(v16 + 36) <= 0.0 || *(float *)(v16 + 40) <= 0.0)
    {
      v38 = *((_QWORD *)this + 18);
      for (i = *(_QWORD *)(v38 + 24) | 0x40000; ; i = v40 | 0x100000)
      {
        *(_QWORD *)(v38 + 24) = i;
        v38 = *(_QWORD *)(v38 + 40);
        if (!v38)
          break;
        v40 = *(_QWORD *)(v38 + 24);
        if ((v40 & 0x100000) != 0)
          break;
      }
      goto LABEL_36;
    }
LABEL_24:
    WebCore::SVGSVGElement::viewBoxToViewTransform((WebCore::SVGFitToViewBox ***)v6, v8, v7, v12, (WebCore::AffineTransform *)&v46);
    _V0.D[1] = *(_QWORD *)&v47[16];
    *(_QWORD *)&v18.f64[0] = v46;
    v18.f64[1] = *(float64_t *)v47;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v18, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(*(float64x2_t *)&v47[8], (float64x2_t)xmmword_1968A14B0))))) & 1) != 0|| *((double *)&v46 + 1) != 0.0|| *(double *)&v47[24] != 0.0)
    {
      _D6 = *v9;
      _D5 = *((double *)this + 29);
      if (*v9 == 1.0
        && _D5 == 0.0
        && *((double *)this + 30) == 0.0
        && *((double *)this + 31) == 1.0
        && v10->n128_f64[0] == 0.0
        && *((double *)this + 33) == 0.0)
      {
        v21 = *(_OWORD *)v47;
        *(_OWORD *)v9 = v46;
        *((_OWORD *)this + 15) = v21;
        *((_OWORD *)this + 16) = *(_OWORD *)&v47[16];
      }
      else
      {
        v24 = *((double *)this + 30);
        v25 = *((double *)this + 31);
        v26 = *((double *)&v46 + 1) * v24 + *(double *)&v46 * _D6;
        v27 = *((double *)&v46 + 1) * v25 + *(double *)&v46 * _D5;
        v28 = v24 * *(double *)&v47[8] + *(double *)v47 * _D6;
        v29 = v25 * *(double *)&v47[8] + *(double *)v47 * _D5;
        __asm { FMLA            D7, D6, V0.D[1] }
        v35 = *((double *)this + 33);
        v36 = *((double *)this + 32) + _D7;
        __asm { FMLA            D1, D5, V0.D[1] }
        *((double *)this + 28) = v26;
        *((double *)this + 29) = v27;
        *((double *)this + 30) = v28;
        *((double *)this + 31) = v29;
        *((double *)this + 32) = v36;
        *((double *)this + 33) = _D1 + v35;
      }
    }
LABEL_36:
    result = (unsigned int *)WebCore::RenderLayerModelObject::updateLayerTransform(this, v12);
    if (!v6)
      return result;
    goto LABEL_37;
  }
  result = (unsigned int *)WebCore::RenderLayerModelObject::updateLayerTransform(this, v12);
LABEL_37:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v23);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

void WebCore::RenderSVGViewportContainer::applyTransform(uint64_t a1, float64x2_t *a2, WebCore::RenderStyle *a3, const WebCore::FloatRect *a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v9;
  char v10;
  void *v11;
  _BYTE v12[56];
  _OWORD v13[3];
  char v14;

  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8) + 24) + 8);
    if ((*(_WORD *)(v9 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1965283F0);
    }
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v9 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1965282C4);
    }
  }
  *(_DWORD *)(v9 + 24) += 2;
  a7.n128_u64[0] = 1.0;
  if (*(double *)(a1 + 224) == 1.0
    && *(double *)(a1 + 232) == 0.0
    && *(double *)(a1 + 240) == 0.0
    && *(double *)(a1 + 248) == 1.0
    && *(double *)(a1 + 256) == 0.0
    && (a6.n128_u64[0] = *(_QWORD *)(a1 + 264), a6.n128_f64[0] == 0.0))
  {
    v10 = 0;
    LOBYTE(v13[0]) = 0;
  }
  else
  {
    a7 = *(__n128 *)(a1 + 240);
    v13[0] = *(_OWORD *)(a1 + 224);
    v13[1] = a7;
    a6 = *(__n128 *)(a1 + 256);
    v13[2] = a6;
    v10 = 1;
  }
  v14 = v10;
  v12[0] = 0;
  v12[48] = 0;
  WebCore::RenderLayerModelObject::applySVGTransform((WebCore::MotionPath *)a1, a2, (_QWORD *)v9, a3, a4, (uint64_t)v13, (uint64_t)v12, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
}

uint64_t WebCore::RenderSVGViewportContainer::overflowClipRect(uint64_t a1, _DWORD *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  __int128 v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD v41[2];
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  _OWORD v48[3];
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;

  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8) + 24) + 8);
    if ((*(_WORD *)(v7 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19652884CLL);
    }
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v7 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652886CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196528484);
    }
  }
  *(_DWORD *)(v7 + 24) += 2;
  a5.n128_f32[0] = ceilf((float)(*(float *)(a1 + 284) + 0.0) * 64.0);
  if (!WebCore::Element::hasAttribute((WebCore::Element *)v7, (const WebCore::QualifiedName *)&WebCore::SVGNames::viewBoxAttr, a3, a4, a5))goto LABEL_36;
  if (!*(_BYTE *)(v7 + 232))
    goto LABEL_13;
  v9 = *(_QWORD **)(v7 + 216);
  v10 = v9[3];
  if (v10 && *(_DWORD *)(v10 - 12))
  {
    v36 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v36)
    {
      v37 = 8 * v36;
      v38 = (uint64_t *)v9[3];
      while ((unint64_t)(*v38 + 1) <= 1)
      {
        ++v38;
        v37 -= 8;
        if (!v37)
          goto LABEL_10;
      }
    }
    else
    {
      v38 = (uint64_t *)v9[3];
    }
    v39 = (uint64_t *)(v10 + 8 * v36);
    if (v38 != v39)
    {
      v40 = *v38;
LABEL_67:
      if (*(_QWORD *)(v40 + 8))
      {
        v11 = v9 + 6;
        goto LABEL_11;
      }
      while (++v38 != v39)
      {
        v40 = *v38;
        if ((unint64_t)(*v38 + 1) > 1)
        {
          if (v38 != v39)
            goto LABEL_67;
          break;
        }
      }
    }
  }
LABEL_10:
  v11 = v9 + 5;
LABEL_11:
  v12 = *v11;
  if (*(float *)(v12 + 36) <= 0.0 || *(float *)(v12 + 40) <= 0.0)
  {
    v34 = 0;
    if (!v7)
      return v34;
    goto LABEL_44;
  }
LABEL_13:
  WebCore::SVGSVGElement::viewBoxToViewTransform((WebCore::SVGFitToViewBox ***)v7, *(float *)(a1 + 280), *(float *)(a1 + 284), v8, (WebCore::AffineTransform *)&v49);
  v13 = v49 == 1.0;
  if (v50 != 0.0)
    v13 = 0;
  if (v51 != 0.0)
    v13 = 0;
  if (v52 != 1.0)
    v13 = 0;
  if (v13 && v53 == 0.0 && v54 == 0.0)
  {
LABEL_36:
    v27 = 0;
    v25 = 0;
    goto LABEL_37;
  }
  v14 = v49 * v52 - v50 * v51;
  v15 = fabs(v14);
  if ((unint64_t)(*(_QWORD *)&v15 - 0x10000000000000) >> 53 > 0x3FE
    && (unint64_t)(*(_QWORD *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v42) = 0;
    v21 = (double *)&constinit_3;
  }
  else
  {
    if (v13)
    {
      v19 = -v53;
      v20 = -v54;
      v43 = 0.0;
      v44 = 0.0;
      v17 = 1.0;
      v18 = 1.0;
    }
    else
    {
      v17 = v52 / v14;
      v18 = v49 / v14;
      v19 = (v51 * v54 - v52 * v53) / v14;
      v43 = -v50 / v14;
      v44 = -v51 / v14;
      v20 = (v50 * v53 - v49 * v54) / v14;
    }
    v42 = v17;
    v45 = v18;
    v46 = v19;
    v21 = &v42;
    v47 = v20;
  }
  v22 = *((_OWORD *)v21 + 1);
  v48[0] = *(_OWORD *)v21;
  v48[1] = v22;
  v48[2] = *((_OWORD *)v21 + 2);
  v41[0] = 0;
  v41[1] = *(_QWORD *)(a1 + 280);
  v24 = floorf(WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v48, (const WebCore::FloatRect *)v41) * 64.0);
  if (v24 >= 2147500000.0)
  {
    v25 = 0x7FFFFFFF;
  }
  else if (v24 > -2147500000.0)
  {
    v25 = (int)v24;
  }
  else
  {
    v25 = 0x80000000;
  }
  v26 = floorf(v23 * 64.0);
  if (v26 >= 2147500000.0)
  {
    v27 = 0x7FFFFFFF;
  }
  else if (v26 <= -2147500000.0)
  {
    v27 = 0x80000000;
  }
  else
  {
    v27 = (int)v26;
  }
LABEL_37:
  v28 = a2[1];
  v29 = __OFADD__(v25, *a2);
  v30 = v25 + *a2;
  LODWORD(v31) = (v25 >> 31) + 0x7FFFFFFF;
  if (v29)
    v31 = v31;
  else
    v31 = v30;
  v29 = __OFADD__(v27, v28);
  v32 = v27 + v28;
  LODWORD(v33) = (v27 >> 31) + 0x7FFFFFFF;
  if (v29)
    v33 = v33;
  else
    v33 = v32;
  v34 = v31 | (v33 << 32);
  if (v7)
  {
LABEL_44:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return v34;
}

const char *WebCore::RenderSVGResourceRadialGradient::renderName(WebCore::RenderSVGResourceRadialGradient *this)
{
  return "RenderSVGResourceRadialGradient";
}

void WebCore::RenderSVGResourceRadialGradient::invalidateGradient(WebCore::RenderSVGResourceRadialGradient *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v21 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v21 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  if (*((_BYTE *)this + 408))
  {
    v11 = *((unsigned int *)this + 77);
    v12 = (WTF *)*((_QWORD *)this + 37);
    if ((_DWORD)v11)
    {
      v13 = (WTF *)((char *)v12 + 16 * v11);
      do
      {
        v14 = *((_QWORD *)v12 + 1);
        if ((v14 & 0x8000000000000) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, a2);
          }
        }
        v12 = (WTF *)((char *)v12 + 16);
      }
      while (v12 != v13);
      v12 = (WTF *)*((_QWORD *)this + 37);
    }
    if ((WebCore::RenderSVGResourceRadialGradient *)((char *)this + 312) != v12 && v12 != 0)
    {
      *((_QWORD *)this + 37) = 0;
      *((_DWORD *)this + 76) = 0;
      WTF::fastFree(v12, a2);
    }
    *((_BYTE *)this + 408) = 0;
  }
  v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v19 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196528AFCLL);
  }
  *(_DWORD *)(v19 + 24) += 2;
  WebCore::notifyResourceChanged((WebCore *)v19, (WebCore::SVGElement *)a2);
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, v20);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
}

uint64_t WebCore::RenderSVGResourceRadialGradient::gradientUnits(WebCore::RenderSVGResourceRadialGradient *this)
{
  if (*((_BYTE *)this + 408))
    return (*((unsigned __int8 *)this + 352) >> 2) & 3;
  else
    return 0;
}

double WebCore::RenderSVGResourceRadialGradient::gradientTransform@<D0>(WebCore::RenderSVGResourceRadialGradient *this@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  if (*((_BYTE *)this + 408))
  {
    v2 = *(_OWORD *)((char *)this + 248);
    v3 = *(_OWORD *)((char *)this + 264);
    v4 = *(_OWORD *)((char *)this + 280);
    *a2 = v2;
    a2[1] = v3;
    a2[2] = v4;
  }
  else
  {
    *a2 = WebCore::identity;
    a2[1] = unk_1969FE100;
    *(_QWORD *)&v2 = 0;
    a2[2] = xmmword_1969FE110;
  }
  return *(double *)&v2;
}

const char *WebCore::RenderSVGRoot::renderName(WebCore::RenderSVGRoot *this)
{
  return "RenderSVGRoot";
}

uint64_t WebCore::RenderSVGRoot::canHaveChildren(WebCore::RenderSVGRoot *this)
{
  return 1;
}

float WebCore::RenderSVGRoot::objectBoundingBoxWithoutTransformations(WebCore::RenderSVGRoot *this)
{
  return *((float *)this + 61);
}

float WebCore::RenderSVGRoot::repaintRectInLocalCoordinates(uint64_t a1, double a2)
{
  WTF *v3;
  void *v4;
  float v5;
  WTF *v6;
  void *v8;
  WTF *v9;
  WTF *v10;

  v3 = *(WTF **)(a1 + 8);
  if (!v3)
  {
    v3 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = a1;
    v9 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v8);
        v3 = *(WTF **)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  ++*(_DWORD *)v3;
  v10 = v3;
  v5 = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v10, WebCore::SVGBoundingBoxComputation::repaintBoundingBoxDecoration, 0, a2);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  return v5;
}

void WebCore::RenderSVGRoot::computeFloatVisibleRectInContainer(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t WebCore::RenderSVGRoot::canBeSelectionLeaf(WebCore::RenderSVGRoot *this)
{
  return 0;
}

uint64_t WebCore::RenderSVGRoot::requiresLayer(WebCore::RenderSVGRoot *this)
{
  return 1;
}

const char *WebCore::RenderSVGShape::renderName(WebCore::RenderSVGShape *this)
{
  return "RenderSVGShape";
}

const char *WebCore::RenderSVGText::renderName(WebCore::RenderSVGText *this)
{
  return "RenderSVGText";
}

__n128 WebCore::RenderSVGText::localTransform@<Q0>(WebCore::RenderSVGText *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *((_OWORD *)this + 17);
  *(_OWORD *)a2 = *((_OWORD *)this + 16);
  *(_OWORD *)(a2 + 16) = v2;
  result = *((__n128 *)this + 18);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t WebCore::RenderSVGText::requiresLayer(WebCore::RenderSVGText *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                    + 680) >> 47) & 1;
}

const char *WebCore::RenderSVGTextPath::renderName(WebCore::RenderSVGTextPath *this)
{
  return "RenderSVGTextPath";
}

const char *WebCore::RenderSVGTransformableContainer::renderName(WebCore::RenderSVGTransformableContainer *this)
{
  return "RenderSVGTransformableContainer";
}

const char *WebCore::RenderSVGViewportContainer::renderName(WebCore::RenderSVGViewportContainer *this)
{
  return "RenderSVGViewportContainer";
}

double WebCore::RenderSVGViewportContainer::overridenObjectBoundingBoxWithoutTransformations@<D0>(WebCore::RenderSVGViewportContainer *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = 0;
  result = *((double *)this + 35);
  *(double *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

WebCore::RadialGradientAttributes *WebCore::RadialGradientAttributes::RadialGradientAttributes(WebCore::RadialGradientAttributes *this)
{
  char *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  *(_OWORD *)this = constinit_3;
  *((_OWORD *)this + 1) = unk_1969FE0D0;
  *((_OWORD *)this + 2) = xmmword_1969FE0E0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 2;
  *((_BYTE *)this + 96) = 1;
  *((_BYTE *)this + 104) = *((_BYTE *)this + 104) & 0x80 | 9;
  v2 = (char *)this + 108;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SVGLengthValue::SVGLengthValue(v2, 0, &v16);
  v4 = v16;
  v16 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SVGLengthValue::SVGLengthValue((char *)this + 116, 0, &v16);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SVGLengthValue::SVGLengthValue((char *)this + 124, 0, &v16);
  v8 = v16;
  v16 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v16 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((char *)this + 132, 2, &v16);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v16 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((char *)this + 140, 2, &v16);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v16 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((char *)this + 148, 2, &v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  *((_BYTE *)this + 156) &= 0xC0u;
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEPN7WebCore28RenderSVGResourcePaintServerENS9_5ColorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

void WebCore::SVGTextMetricsBuilder::~SVGTextMetricsBuilder(WebCore::SVGTextMetricsBuilder *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    v6 = (_DWORD *)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = 0;
    if (v6)
    {
      if (!*v6)
        goto LABEL_34;
      --*v6;
    }
    v7 = *(_QWORD *)v5;
    *(_QWORD *)v5 = 0;
    if (!v7)
    {
LABEL_14:
      WTF::fastFree(v5, a2);
      goto LABEL_15;
    }
    v8 = *(_DWORD *)(v7 + 8);
    if (v8)
    {
      *(_DWORD *)(v7 + 8) = v8 - 1;
      goto LABEL_14;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1965290D0);
  }
LABEL_15:
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, a2);
    else
      --*(_DWORD *)v12;
  }
}

_WORD *WTF::downcast<WebCore::SVGGraphicsElement,WebCore::Node>(_WORD *a1)
{
  if ((a1[14] & 0x20) == 0 || ((*(uint64_t (**)(_WORD *))(*(_QWORD *)a1 + 1184))(a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196529124);
  }
  return a1;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::RenderSVGShape::shapeDependentStrokeContains(WebCore::FloatPoint const&,WebCore::RenderSVGShape::PointCoordinateSpace)::$_0,void,WebCore::GraphicsContext &>::call(uint64_t a1, unsigned int *a2, uint64_t a3, const WebCore::RenderElement *a4)
{
  return WebCore::SVGRenderSupport::applyStrokeStyleToContext(a2, (WebCore::GraphicsContext *)(*(_QWORD *)(a1 + 8) + 80), *(const WebCore::RenderStyle **)(a1 + 8), a4);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::RenderSVGShape::shapeDependentStrokeContains(WebCore::FloatPoint const&,WebCore::RenderSVGShape::PointCoordinateSpace)::$_1,void,WebCore::GraphicsContext &>::call(uint64_t a1, unsigned int *a2, uint64_t a3, const WebCore::RenderElement *a4)
{
  return WebCore::SVGRenderSupport::applyStrokeStyleToContext(a2, (WebCore::GraphicsContext *)(*(_QWORD *)(a1 + 8) + 80), *(const WebCore::RenderStyle **)(a1 + 8), a4);
}

unsigned int *WebCore::SVGPaintServerHandling::resolveColorFromStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t v6;
  unsigned int *result;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t *v29;

  v24 = *(_QWORD *)(a1 + 32) + 328;
  v25 = (unint64_t)&v24;
  v26 = &v24;
  v27 = &v24;
  v28 = &v24;
  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_22;
  v29 = &v25;
  result = (unsigned int *)((uint64_t (*)(unint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v6])(&v29, a2);
  if (!a3 && (*(_DWORD *)(a1 + 44) & 0xC00) == 0x800)
  {
    v24 = *(_QWORD *)(a1 + 32) + 328;
    v25 = (unint64_t)&v24;
    v26 = &v24;
    v27 = &v24;
    v28 = &v24;
    v11 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v11 != -1)
    {
      v29 = &v25;
      result = (unsigned int *)((unsigned int *(*)(uint64_t *__return_ptr, unint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v11])(&v23, &v29, a4);
      v13 = v23;
      if ((v23 & 0x4000000000000) == 0)
        goto LABEL_13;
      if ((*a5 & 0x8000000000000) != 0)
        v14 = *(float *)((*a5 & 0xFFFFFFFFFFFFLL) + 0x10);
      else
        v14 = (float)*a5 / 255.0;
      result = (unsigned int *)WebCore::Color::colorWithAlpha((uint64_t)&v23, v14, (uint64_t *)&v25);
      v15 = *a5;
      v16 = v25;
      if ((*a5 & 0x8000000000000) != 0)
      {
        if ((v25 & 0x8000000000000) == 0
          || *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v15) != HIBYTE(v25)
          || BYTE6(v15) != BYTE6(v25))
        {
          result = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
          do
          {
            v21 = __ldaxr(result);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, result));
          if (!v22)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v12);
          }
          goto LABEL_11;
        }
      }
      else
      {
        if (v15 != v25 || (v25 & 0x8000000000000) != 0)
        {
LABEL_11:
          *a5 = v25;
          v25 = 0;
LABEL_12:
          v13 = v23;
LABEL_13:
          if ((v13 & 0x8000000000000) == 0)
            return result;
          goto LABEL_23;
        }
        v16 = *a5;
      }
      if ((v16 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
        do
        {
          v17 = __ldaxr(result);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, result));
        if (!v18)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v12);
        }
      }
      goto LABEL_12;
    }
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_23:
    result = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(result);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, result));
    if (!v20)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v12);
    }
  }
  return result;
}

void WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)0,(WebCore::SVGPaintServerHandling::URIResolving)1>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::SVGRenderStyle *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::SVGRenderStyle *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 1944)
                             + 248)
                 + 1148) & 0x10) != 0)
  {
    v35 = 0x11040000000000FFLL;
    LODWORD(v36) = 0;
    *(_QWORD *)a3 = 0x11040000000000FFLL;
    *(_DWORD *)(a3 + 8) = 2;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_((uint64_t)&v39, &v35);
    return;
  }
  v4 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  v5 = *((_QWORD *)v4 + 2);
  v6 = *(unsigned __int8 *)(v5 + 56);
  if (v6 == 1 || v6 >= 3 && (v6 != 6 ? (v8 = v6 == 3) : (v8 = 1), v8))
  {
    *(_DWORD *)(a3 + 8) = 0;
    return;
  }
  ++*(_DWORD *)v4;
  WebCore::SVGPaintServerHandling::resolveColorFromStyle(a2, v5 + 8, *(unsigned __int8 *)(v5 + 57), v5 + 24, &v32);
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::SVGRenderStyle::~SVGRenderStyle(v4, v9);
    WTF::fastFree(v22, v23);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  v10 = v32;
  if ((v32 & 0x4000000000000) != 0)
    goto LABEL_24;
  v11 = a1[4];
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *(WebCore::SVGRenderStyle **)(v12 + 136);
      ++*(_DWORD *)v13;
      v14 = *((_QWORD *)v13 + 2);
      v34 = a1[14] + 328;
      v35 = (uint64_t)&v34;
      v36 = &v34;
      v37 = &v34;
      v38 = &v34;
      v15 = *(unsigned int *)(v14 + 16);
      if ((_DWORD)v15 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        v39 = &v35;
        ((void (*)(unint64_t *__return_ptr, uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v15])(&v33, &v39, v14 + 8);
        v18 = v32;
        v17 = v33;
        if ((v32 & 0x8000000000000) == 0)
        {
          if (v32 != v33 || (v33 & 0x8000000000000) != 0)
          {
LABEL_20:
            v32 = v33;
LABEL_21:
            if (*(_DWORD *)v13 == 1)
            {
              WebCore::SVGRenderStyle::~SVGRenderStyle(v13, v16);
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*(_DWORD *)v13;
            }
            v10 = v32;
LABEL_24:
            *(_QWORD *)a3 = v10;
            *(_DWORD *)(a3 + 8) = 2;
            return;
          }
          v17 = v32;
          goto LABEL_34;
        }
      }
      if ((v17 & 0x8000000000000) == 0
        || *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v18) != HIBYTE(v17)
        || BYTE6(v18) != BYTE6(v17))
      {
        v29 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, v16);
        }
        goto LABEL_20;
      }
LABEL_34:
      if ((v17 & 0x8000000000000) != 0)
      {
        v26 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v16);
        }
      }
      goto LABEL_21;
    }
  }
  *(_DWORD *)(a3 + 8) = 0;
  if ((v10 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v9);
    }
  }
}

unsigned int *WebCore::SVGPaintServerHandling::prepareFillOperation(WebCore::GraphicsContext **this, const WebCore::RenderLayerModelObject *a2, const WebCore::RenderStyle *a3, const WebCore::Color *a4)
{
  uint64_t v7;
  float *v8;
  float v9;
  float *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  WebCore::GraphicsContext *v14;
  unsigned int *result;
  void *v16;
  WTF *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;

  v7 = *((_QWORD *)a3 + 7);
  ++*(_DWORD *)v7;
  v8 = (float *)*this;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                         + 1944)
                             + 248)
                 + 1148) & 0x10) != 0)
  {
    if (v8[84] != 1.0)
    {
      v8[84] = 1.0;
      *((_DWORD *)v8 + 46) |= 0x100u;
    }
    (*(void (**)(float *, _DWORD *))(*(_QWORD *)v8 + 88))(v8, (_DWORD *)v8 + 2);
    v10 = (float *)*this;
    v13 = *(_WORD *)(v7 + 4) & 4;
    if ((((*((_BYTE *)*this + 192) == 0) ^ (v13 >> 2)) & 1) == 0)
    {
      v12 = v13 >> 2;
      goto LABEL_14;
    }
  }
  else
  {
    v9 = *(float *)(*(_QWORD *)(v7 + 16) + 4);
    if (v8[84] != v9)
    {
      v8[84] = v9;
      *((_DWORD *)v8 + 46) |= 0x100u;
    }
    (*(void (**)(float *, _DWORD *))(*(_QWORD *)v8 + 88))(v8, (_DWORD *)v8 + 2);
    v10 = (float *)*this;
    v11 = *(_WORD *)(v7 + 4) & 8;
    if ((((*((_BYTE *)*this + 192) == 0) ^ (v11 >> 3)) & 1) == 0)
    {
      v12 = v11 >> 3;
LABEL_14:
      *((_BYTE *)v10 + 192) = v12;
      *((_DWORD *)v10 + 46) |= 2u;
    }
  }
  (*(void (**)(float *, float *))(*(_QWORD *)v10 + 88))(v10, v10 + 2);
  v14 = *this;
  WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)a3, a4, &v21);
  result = (unsigned int *)WebCore::GraphicsContext::setFillColor(v14, (const WebCore::Color *)&v21);
  if ((v21 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(result);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, result));
    if (!v20)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
    }
  }
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)v7, v16);
    return (unsigned int *)WTF::fastFree(v17, v18);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEPN7WebCore28RenderSVGResourcePaintServerENS9_5ColorEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS8_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3449C28[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEPN7WebCore28RenderSVGResourcePaintServerENS9_5ColorEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS8_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3449C28[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEPN7WebCore28RenderSVGResourcePaintServerENS9_5ColorEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS8_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, unint64_t *a2, unint64_t *a3, float result)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;

  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_10;
  if ((_DWORD)v6 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E3449C28[v6])(&v14, v5);
LABEL_10:
    *(_QWORD *)v5 = 0;
    if (*a3)
    {
      *(_QWORD *)v5 = *a3;
      *a3 = 0;
    }
    *(_DWORD *)(v5 + 8) = 2;
    return result;
  }
  v7 = *a2;
  v8 = *a3;
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v8 & 0x8000000000000) == 0
      || (result = *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10),
          *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4))
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
      || result != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v7) != HIBYTE(v8)
      || BYTE6(v7) != BYTE6(v8))
    {
      v10 = a2;
      v11 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
        a2 = v10;
      }
      goto LABEL_8;
    }
  }
  else if (v7 != v8 || (v8 & 0x8000000000000) != 0)
  {
LABEL_8:
    *a2 = *a3;
    *a3 = 0;
  }
  return result;
}

void WebCore::SVGPaintServerHandling::requestPaintServer<(WebCore::SVGPaintServerHandling::Operation)1,(WebCore::SVGPaintServerHandling::URIResolving)1>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::SVGRenderStyle *v3;
  WebCore::SVGRenderStyle *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v9;
  uint64_t *v10;
  int v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t **v43;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 1944)
                             + 248)
                 + 1148) & 0x10) != 0)
  {
    WebCore::SVGRenderStyle::initialStrokePaintColor((uint64_t)&v39);
    if ((_DWORD)v40)
      goto LABEL_46;
    v10 = v39;
    *(_QWORD *)a3 = v39;
    if (((unint64_t)v10 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFLL);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      v11 = (int)v40;
      *(_DWORD *)(a3 + 8) = 2;
      if (v11 == -1)
        return;
    }
    else
    {
      v11 = 0;
      *(_DWORD *)(a3 + 8) = 2;
    }
    ((void (*)(uint64_t ***, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v43, &v39);
    return;
  }
  v5 = *(WebCore::SVGRenderStyle **)(a2 + 56);
  v6 = *((_QWORD *)v5 + 3);
  v7 = *(unsigned __int8 *)(v6 + 80);
  if (v7 == 1 || v7 >= 3 && (v7 != 6 ? (v9 = v7 == 3) : (v9 = 1), v9))
  {
    *(_DWORD *)(a3 + 8) = 0;
    return;
  }
  ++*(_DWORD *)v5;
  WebCore::SVGPaintServerHandling::resolveColorFromStyle(a2, v6 + 8, *(unsigned __int8 *)(v6 + 81), v6 + 24, &v36);
  if (*(_DWORD *)v5 == 1)
  {
    WebCore::SVGRenderStyle::~SVGRenderStyle(v5, v12);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  v13 = v36;
  if ((v36 & 0x4000000000000) != 0)
    goto LABEL_27;
  v14 = a1[4];
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v3 = *(WebCore::SVGRenderStyle **)(v15 + 136);
      ++*(_DWORD *)v3;
      v16 = *((_QWORD *)v3 + 3);
      v38 = a1[14] + 328;
      v39 = &v38;
      v40 = &v38;
      v41 = &v38;
      v42 = &v38;
      v17 = *(unsigned int *)(v16 + 16);
      if ((_DWORD)v17 != -1)
      {
        v43 = &v39;
        ((void (*)(unint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v17])(&v37, &v43, v16 + 8);
        v20 = v36;
        v19 = v37;
        if ((v36 & 0x8000000000000) == 0)
        {
          if (v36 != v37 || (v37 & 0x8000000000000) != 0)
          {
LABEL_23:
            v36 = v37;
LABEL_24:
            if (*(_DWORD *)v3 == 1)
            {
              WebCore::SVGRenderStyle::~SVGRenderStyle(v3, v18);
              WTF::fastFree(v26, v27);
            }
            else
            {
              --*(_DWORD *)v3;
            }
            v13 = v36;
LABEL_27:
            *(_QWORD *)a3 = v13;
            *(_DWORD *)(a3 + 8) = 2;
            return;
          }
          v19 = v36;
          goto LABEL_37;
        }
LABEL_47:
        if ((v19 & 0x8000000000000) == 0
          || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v20) != HIBYTE(v19)
          || BYTE6(v20) != BYTE6(v19))
        {
          v33 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, v33);
            WTF::fastFree((WTF *)v33, v18);
          }
          goto LABEL_23;
        }
LABEL_37:
        if ((v19 & 0x8000000000000) != 0)
        {
          v28 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v18);
          }
        }
        goto LABEL_24;
      }
LABEL_46:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_47;
    }
  }
  *(_DWORD *)(a3 + 8) = 0;
  if ((v13 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v12);
    }
  }
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::RenderSVGShape::calculateStrokeBoundingBox(void)::$_0,void,WebCore::GraphicsContext &>::call(uint64_t a1, unsigned int *a2, uint64_t a3, const WebCore::RenderElement *a4)
{
  return WebCore::SVGRenderSupport::applyStrokeStyleToContext(a2, (WebCore::GraphicsContext *)(*(_QWORD *)(a1 + 8) + 80), *(const WebCore::RenderStyle **)(a1 + 8), a4);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::RenderSVGShape::calculateStrokeBoundingBox(void)::$_1,void,WebCore::GraphicsContext &>::call(uint64_t a1, unsigned int *a2, uint64_t a3, const WebCore::RenderElement *a4)
{
  return WebCore::SVGRenderSupport::applyStrokeStyleToContext(a2, (WebCore::GraphicsContext *)(*(_QWORD *)(a1 + 8) + 80), *(const WebCore::RenderStyle **)(a1 + 8), a4);
}

_QWORD *WTF::Vector<WebCore::SVGTextLayoutAttributes *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGTextLayoutAttributes *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<std::pair<int,int>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

float32_t WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox(uint64_t a1, __int16 *a2, _BYTE *a3, double a4)
{
  unsigned __int8 *v7;
  int v8;
  int v9;
  float32_t result;
  float32x2_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;

  v7 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  v8 = v7[52] & 7;
  if (v8 == 4 && (v7[53] & 1) == 0 && (v7[53] & 0x10) != 0)
    return WebCore::SVGBoundingBoxComputation::handleShapeOrTextOrInline(a1, a2, a3, a4);
  v9 = v7[46];
  if ((v9 - 84) < 3)
    return WebCore::SVGBoundingBoxComputation::handleShapeOrTextOrInline(a1, a2, a3, a4);
  if (v9 == 83)
    return WebCore::SVGBoundingBoxComputation::handleRootOrContainer(a1, a2, a3, *(float32x2_t *)&a4);
  if (v9 == 71)
    return WebCore::SVGBoundingBoxComputation::handleShapeOrTextOrInline(a1, a2, a3, a4);
  if (v8 == 4 && (v7[53] & 1) == 0 && (v7[53] & 2) != 0)
    return WebCore::SVGBoundingBoxComputation::handleRootOrContainer(a1, a2, a3, *(float32x2_t *)&a4);
  if (v9 == 70 || (result = 0.0, v9 == 67))
  {
    *(double *)&v11 = (*(double (**)(unsigned __int8 *))(*(_QWORD *)v7 + 232))(v7);
    v15 = __PAIR64__(v12, v11.u32[0]);
    v16 = v13;
    v17 = v14;
    WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects(a1, a2, (float32x2_t *)&v15, WebCore::SVGBoundingBoxComputation::filterBoundingBoxDecoration, v11);
    if (a3)
      *a3 = 1;
    return *(float *)&v15;
  }
  return result;
}

float32_t WebCore::SVGBoundingBoxComputation::handleShapeOrTextOrInline(uint64_t a1, __int16 *a2, _BYTE *a3, double a4)
{
  __int16 v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  __int16 v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int v33;
  __int16 v35;
  unint64_t v36;
  unint64_t v37;

  v36 = 0;
  v37 = 0;
  v7 = *a2;
  if ((*a2 & 1) != 0)
  {
    *(float *)&a4 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 232))(*(_QWORD *)(*(_QWORD *)a1 + 8));
    v9 = *(float *)&a4;
    v8 = v12;
    v11 = v13;
    v10 = v14;
    v36 = __PAIR64__(LODWORD(v12), LODWORD(a4));
    v37 = __PAIR64__(LODWORD(v14), LODWORD(v13));
    v7 = *a2;
    if ((*a2 & 2) == 0)
      goto LABEL_5;
  }
  else
  {
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    if ((v7 & 2) == 0)
      goto LABEL_5;
  }
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((v7 & 0x200) == 0
    || (*(_BYTE *)(v19 + 52) & 7) != 4
    || (*(_BYTE *)(v19 + 53) & 1) != 0
    || (*(_BYTE *)(v19 + 53) & 0x10) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 240))(v19);
    if (v21 > 0.0)
    {
      v17 = v22;
      if (v22 > 0.0)
      {
        v16 = *(float *)&a4;
        v15 = v20;
        v18 = v21;
        goto LABEL_11;
      }
    }
LABEL_5:
    v15 = v8;
    v16 = v9;
    v17 = v10;
    v18 = v11;
    goto LABEL_23;
  }
  if ((*(_BYTE *)(v19 + 217) & 7) == 0)
    goto LABEL_5;
  v16 = *(float *)(v19 + 200);
  v15 = *(float *)(v19 + 204);
  v18 = *(float *)(v19 + 208);
  v17 = *(float *)(v19 + 212);
  if (v18 <= 0.0 || v17 <= 0.0)
    goto LABEL_5;
LABEL_11:
  if (v11 <= 0.0 || v10 <= 0.0)
  {
    v36 = __PAIR64__(LODWORD(v15), LODWORD(v16));
  }
  else
  {
    *(float *)&a4 = v18 + v16;
    if (v16 >= v9)
      v16 = v9;
    v23 = v17 + v15;
    if (v15 >= v8)
      v15 = v8;
    if ((float)(v11 + v9) >= *(float *)&a4)
      *(float *)&a4 = v11 + v9;
    if ((float)(v10 + v8) >= v23)
      v23 = v10 + v8;
    v36 = __PAIR64__(LODWORD(v15), LODWORD(v16));
    v18 = *(float *)&a4 - v16;
    v17 = v23 - v15;
  }
  v37 = __PAIR64__(LODWORD(v17), LODWORD(v18));
LABEL_23:
  v24 = *a2;
  if ((*a2 & 4) != 0)
  {
    v25 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v25)
    {
      if (*(_BYTE *)(v25 + 46) == 73)
      {
        ++*(_DWORD *)(v25 + 16);
        v35 = v24 & 0x208 | 7;
        *(float *)&a4 = WebCore::RenderSVGPath::computeMarkerBoundingBox(v25, (uint64_t)&v35);
        if (v27 > 0.0 && v28 > 0.0)
        {
          if (v18 <= 0.0 || v17 <= 0.0)
          {
            v36 = __PAIR64__(LODWORD(v26), LODWORD(a4));
            v37 = __PAIR64__(LODWORD(v28), LODWORD(v27));
          }
          else
          {
            if (*(float *)&a4 >= v16)
              v29 = v16;
            else
              v29 = *(float *)&a4;
            if (v26 >= v15)
              v30 = v15;
            else
              v30 = v26;
            v31 = v27 + *(float *)&a4;
            if ((float)(v18 + v16) >= v31)
              v31 = v18 + v16;
            v32 = v28 + v26;
            if ((float)(v17 + v15) >= v32)
              v32 = v17 + v15;
            v36 = __PAIR64__(LODWORD(v30), LODWORD(v29));
            *(float *)&a4 = v31 - v29;
            LODWORD(v37) = LODWORD(a4);
            *((float *)&v37 + 1) = v32 - v30;
          }
        }
        v33 = *(_DWORD *)(v25 + 16);
        if (!v33)
        {
          __break(0xC471u);
          JUMPOUT(0x19652A214);
        }
        *(_DWORD *)(v25 + 16) = v33 - 1;
      }
    }
  }
  WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects(a1, a2, (float32x2_t *)&v36, WebCore::SVGBoundingBoxComputation::filterBoundingBoxDecoration, *(float32x2_t *)&a4);
  if (a3)
    *a3 = 1;
  return *(float *)&v36;
}

float WebCore::SVGBoundingBoxComputation::handleRootOrContainer(uint64_t a1, __int16 *a2, _BYTE *a3, float32x2_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v27;
  int v28;
  WTF *v29;
  void *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __int16 v34;
  int v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  WTF *v46;
  WTF *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  WTF *v56[2];
  float64x2_t v57;
  __int128 v58;
  char v59;
  __int128 v60;
  WTF *v61;
  __int128 v62;
  float64x2_t v63;
  float64x2_t v64;
  __int128 v65;

  v62 = 0uLL;
  if (!(*(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 68) << 32))
    || (v7 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 68) << 32))
                       + 8)) == 0)
  {
LABEL_8:
    LOBYTE(v8) = 0;
    goto LABEL_9;
  }
  LOBYTE(v8) = 0;
  while ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
  {
    v9 = *(unsigned int *)(v7 + 47);
    if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
      goto LABEL_8;
    v7 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
    if (!v7)
      goto LABEL_9;
  }
  v8 = 0;
  a4 = 0;
LABEL_37:
  v27 = *(_DWORD *)(v7 + 16) + 1;
  *(_DWORD *)(v7 + 16) = v27;
  v28 = *(unsigned __int8 *)(v7 + 46);
  if (v28 != 69)
  {
    if ((*(_BYTE *)(v7 + 52) & 7) != 4 || (*(_BYTE *)(v7 + 53) & 1) != 0)
    {
      if (v28 == 77)
      {
LABEL_76:
        v27 = *(_DWORD *)(v7 + 16);
        goto LABEL_77;
      }
    }
    else if ((*(_BYTE *)(v7 + 53) & 8) != 0
           || v28 == 77
           || (*(_BYTE *)(v7 + 53) & 0x10) != 0
           && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 912))(v7) & 1) != 0)
    {
      goto LABEL_76;
    }
    v29 = *(WTF **)(v7 + 8);
    if (!v29)
    {
      v29 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v29 = 1;
      *((_QWORD *)v29 + 1) = v7;
      v53 = *(WTF **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = v29;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
        {
          WTF::fastFree(v53, v52);
          v29 = *(WTF **)(v7 + 8);
        }
        else
        {
          --*(_DWORD *)v53;
        }
      }
    }
    ++*(_DWORD *)v29;
    v61 = v29;
    a4.f32[0] = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox(&v61, a2, 0);
    *(_QWORD *)&v60 = __PAIR64__(v31, a4.u32[0]);
    *((_QWORD *)&v60 + 1) = __PAIR64__(v33, v32);
    v34 = *a2;
    if ((*a2 & 0x100) != 0
      && (*(_BYTE *)(v7 + 52) & 7) == 4
      && (*(_BYTE *)(v7 + 53) & 1) == 0
      && (*(_BYTE *)(v7 + 53) & 2) != 0)
    {
      LOWORD(v56[0]) = v34 & 0x200 | 0x80;
      a4 = WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects((uint64_t)&v61, v56, (float32x2_t *)&v60, WebCore::SVGBoundingBoxComputation::filterBoundingBoxDecoration, a4);
      v34 = *a2;
    }
    if ((v34 & 0x40) != 0)
      goto LABEL_49;
    v35 = *(_DWORD *)(v7 + 20);
    if ((v35 & 0x20000) != 0)
    {
      v43 = v7;
      if ((*(_BYTE *)(v7 + 45) & 2) != 0)
        v43 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8);
      v44 = *(_QWORD *)(v43 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + 40) + 20)
        || (v45 = *(_QWORD **)(v44 + 40), v45[41])
        || v45[38]
        || v45[39]
        || v45[40])
      {
        if ((v35 & 0x8000) == 0)
          goto LABEL_45;
      }
      else if ((~v35 & 0x108000) != 0)
      {
        goto LABEL_45;
      }
      v46 = *(WTF **)(v7 + 8);
      if (!v46)
      {
        v46 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v46 = 1;
        *((_QWORD *)v46 + 1) = v7;
        v55 = *(WTF **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = v46;
        if (v55)
        {
          if (*(_DWORD *)v55 == 1)
          {
            WTF::fastFree(v55, v54);
            v46 = *(WTF **)(v7 + 8);
          }
          else
          {
            --*(_DWORD *)v55;
          }
        }
      }
      ++*(_DWORD *)v46;
      v56[0] = v46;
      WebCore::SVGLayerTransformComputation::computeAccumulatedTransform((uint64_t)v56, *(_QWORD *)(*(_QWORD *)a1 + 8), 1, (uint64_t)&v63);
      v47 = v56[0];
      v56[0] = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1)
          WTF::fastFree(v47, v30);
        else
          --*(_DWORD *)v47;
      }
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v63, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v64, (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| *(double *)&v65 != 0.0|| (a4 = *(float32x2_t *)((char *)&v65 + 8), *((double *)&v65 + 1) != 0.0))
      {
        *(float64x2_t *)v56 = v63;
        v57 = v64;
        v58 = v65;
        v59 = 1;
        a4.f32[0] = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v56, (const WebCore::FloatRect *)&v60);
        *(_QWORD *)&v60 = __PAIR64__(v48, a4.u32[0]);
        *((_QWORD *)&v60 + 1) = __PAIR64__(v50, v49);
      }
    }
LABEL_45:
    if (*a2 == 1)
    {
      if ((*(_BYTE *)(v7 + 52) & 7) != 4
        || (*(_BYTE *)(v7 + 53) & 1) != 0
        || (*(_BYTE *)(v7 + 53) & 2) == 0
        || *(_BYTE *)(v7 + 168))
      {
        if (v8)
        {
          v36 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v62, *(float32x2_t *)&v60), *(int8x8_t *)&v60, *(int8x8_t *)&v62);
          v37 = vadd_f32(*(float32x2_t *)&v62, *(float32x2_t *)((char *)&v62 + 8));
          v38 = vadd_f32(*(float32x2_t *)&v60, *(float32x2_t *)((char *)&v60 + 8));
          a4 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v38, v37), (int8x8_t)v38, (int8x8_t)v37), v36);
          *(float32x2_t *)&v62 = v36;
          *((float32x2_t *)&v62 + 1) = a4;
        }
        else
        {
          a4 = (float32x2_t)v60;
          v62 = v60;
        }
        v8 = 1;
      }
LABEL_74:
      if (*(_DWORD *)v29 == 1)
        WTF::fastFree(v29, v30);
      else
        --*(_DWORD *)v29;
      goto LABEL_76;
    }
LABEL_49:
    a4 = *(float32x2_t *)((char *)&v60 + 8);
    if (*((float *)&v60 + 2) > 0.0 && *((float *)&v60 + 3) > 0.0)
    {
      v39.i32[0] = DWORD2(v62);
      if (*((float *)&v62 + 2) <= 0.0 || *((float *)&v62 + 3) <= 0.0)
      {
        a4 = (float32x2_t)v60;
        v62 = v60;
      }
      else
      {
        v40 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v62, *(float32x2_t *)&v60), *(int8x8_t *)&v60, *(int8x8_t *)&v62);
        v39.i32[1] = HIDWORD(v62);
        v41 = vadd_f32(v39, *(float32x2_t *)&v62);
        v42 = vadd_f32(*(float32x2_t *)((char *)&v60 + 8), *(float32x2_t *)&v60);
        a4 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v42, v41), (int8x8_t)v42, (int8x8_t)v41), v40);
        *(float32x2_t *)&v62 = v40;
        *((float32x2_t *)&v62 + 1) = a4;
      }
    }
    goto LABEL_74;
  }
LABEL_77:
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x19652A8C0);
  }
  *(_DWORD *)(v7 + 16) = v27 - 1;
  while (1)
  {
    v51 = *(unsigned int *)(v7 + 47);
    if (!(v51 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
      break;
    v7 = *(_QWORD *)((v51 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
    if (!v7)
      break;
    if ((*(_BYTE *)(v7 + 45) & 0x10) != 0)
      goto LABEL_37;
  }
LABEL_9:
  LOWORD(v56[0]) = 128;
  v10.n128_u64[0] = (unint64_t)WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects(a1, a2, (float32x2_t *)&v62, v56, a4);
  if ((*a2 & 8) != 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if ((*(_BYTE *)(v11 + 22) & 1) != 0)
    {
      if ((*(_BYTE *)(v11 + 52) & 7) == 4 && (*(_BYTE *)(v11 + 53) & 1) == 0)
      {
        v13 = (int *)(v11 + 16);
        ++*(_DWORD *)(v11 + 16);
        v56[0] = *(WTF **)(v11 + 152);
        v14 = (*(uint64_t (**)(uint64_t, WTF **, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)v11 + 880))(v11, v56, 0, 0, 0, v10);
        v17 = *v13;
        if (!*v13)
        {
          __break(0xC471u);
          JUMPOUT(0x19652A8A0);
        }
      }
      else
      {
        if ((*(_BYTE *)(v11 + 45) & 4) == 0)
          return 0.0;
        v13 = (int *)(v11 + 16);
        ++*(_DWORD *)(v11 + 16);
        v56[0] = *(WTF **)(v11 + 152);
        v14 = (*(uint64_t (**)(uint64_t, WTF **, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)v11 + 1416))(v11, v56, 0, 0, 0, v10);
        v17 = *v13;
        if (!*v13)
        {
          __break(0xC471u);
          JUMPOUT(0x19652A880);
        }
      }
      *v13 = v17 - 1;
      v18 = (float)(int)v14 * 0.015625;
      v19 = (float)SHIDWORD(v14) * 0.015625;
      if (*(float *)&v62 >= v18)
        v20 = *(float *)&v62;
      else
        v20 = (float)(int)v14 * 0.015625;
      if (*((float *)&v62 + 1) >= v19)
        v21 = *((float *)&v62 + 1);
      else
        v21 = (float)SHIDWORD(v14) * 0.015625;
      v22 = v18 + (float)((float)v15 * 0.015625);
      if (v22 >= (float)(*(float *)&v62 + *((float *)&v62 + 2)))
        v22 = *(float *)&v62 + *((float *)&v62 + 2);
      v23 = *((float *)&v62 + 1) + *((float *)&v62 + 3);
      v24 = v19 + (float)((float)v16 * 0.015625);
      if (v24 < (float)(*((float *)&v62 + 1) + *((float *)&v62 + 3)))
        v23 = v24;
      if (v20 >= v22 || v21 >= v23)
      {
        v20 = 0.0;
        v21 = 0.0;
        v22 = 0.0;
        v23 = 0.0;
      }
      *(_QWORD *)&v62 = __PAIR64__(LODWORD(v21), LODWORD(v20));
      *((float *)&v62 + 2) = v22 - v20;
      *((float *)&v62 + 3) = v23 - v21;
    }
  }
  if (a3)
    *a3 = v8;
  return *(float *)&v62;
}

float32x2_t WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects(uint64_t a1, _WORD *a2, float32x2_t *a3, _WORD *a4, float32x2_t result)
{
  int v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v47;
  int32x2_t v48;
  float v49;
  float32x2_t v50;
  float32x2_t v51;
  BOOL v52;
  float v53;
  float v54;

  v8 = (unsigned __int16)*a4;
  v9 = (unsigned __int16)*a2;
  if (*a4)
  {
    while ((v9 & -v8 & v8) == 0)
    {
      v8 &= v8 - 1;
      if (!(_WORD)v8)
        goto LABEL_22;
    }
    v10 = WebCore::RenderLayerModelObject::svgFilterResourceFromStyle(*(WebCore::RenderLayerModelObject **)(*(_QWORD *)a1 + 8));
    LOWORD(v9) = *a2;
    if (v10)
    {
      result.f32[0] = WebCore::RenderSVGResourceFilter::resourceBoundingBox(v10, *(_QWORD *)(*(_QWORD *)a1 + 8));
      v14 = a3->f32[1];
      if (a3->f32[0] >= result.f32[0])
        v15 = a3->f32[0];
      else
        v15 = result.f32[0];
      v16 = a3[1].f32[1];
      if (v14 >= v11)
        v17 = a3->f32[1];
      else
        v17 = v11;
      v18 = result.f32[0] + v12;
      if (v18 >= (float)(a3->f32[0] + a3[1].f32[0]))
        v18 = a3->f32[0] + a3[1].f32[0];
      v19 = v11 + v13;
      if (v19 >= (float)(v14 + v16))
        v19 = v14 + v16;
      if (v15 >= v18 || v17 >= v19)
      {
        v15 = 0.0;
        v17 = 0.0;
        v18 = 0.0;
        v19 = 0.0;
      }
      a3->f32[0] = v15;
      a3->f32[1] = v17;
      result.f32[0] = v18 - v15;
      a3[1].i32[0] = result.i32[0];
      a3[1].f32[1] = v19 - v17;
      LOWORD(v9) = *a2;
    }
  }
LABEL_22:
  if ((v9 & 8) != 0)
  {
    v21 = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(*(WebCore::RenderLayerModelObject **)(*(_QWORD *)a1 + 8));
    LOWORD(v9) = *a2;
    if (v21)
    {
      v22 = v21;
      ++*(_DWORD *)(v21 + 16);
      result.f32[0] = WebCore::RenderSVGResourceClipper::resourceBoundingBox((_QWORD *)v21, *(_QWORD *)(*(_QWORD *)a1 + 8), (v9 & 0x200) == 0);
      v26 = a3->f32[1];
      if (a3->f32[0] >= result.f32[0])
        v27 = a3->f32[0];
      else
        v27 = result.f32[0];
      v28 = a3[1].f32[1];
      if (v26 >= v23)
        v29 = a3->f32[1];
      else
        v29 = v23;
      v30 = result.f32[0] + v24;
      if (v30 >= (float)(a3->f32[0] + a3[1].f32[0]))
        v30 = a3->f32[0] + a3[1].f32[0];
      v31 = v23 + v25;
      if (v31 >= (float)(v26 + v28))
        v31 = v26 + v28;
      if (v27 >= v30 || v29 >= v31)
      {
        v27 = 0.0;
        v29 = 0.0;
        v30 = 0.0;
        v31 = 0.0;
      }
      a3->f32[0] = v27;
      a3->f32[1] = v29;
      result.f32[0] = v30 - v27;
      a3[1].i32[0] = result.i32[0];
      a3[1].f32[1] = v31 - v29;
      v9 = *(_DWORD *)(v22 + 16);
      if (!v9)
        goto LABEL_77;
      *(_DWORD *)(v22 + 16) = v9 - 1;
      LOWORD(v9) = *a2;
    }
  }
  if ((v9 & 0x10) != 0)
  {
    v33 = WebCore::RenderLayerModelObject::svgMaskerResourceFromStyle(*(WebCore::RenderLayerModelObject **)(*(_QWORD *)a1 + 8));
    if (v33)
    {
      v34 = v33;
      v35 = *(_DWORD *)(v33 + 16) + 1;
      *(_DWORD *)(v33 + 16) = v35;
      v36 = WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects(WTF::OptionSet<WebCore::SVGBoundingBoxComputation::DecorationOption> const&,WebCore::FloatRect &,WTF::OptionSet<WebCore::SVGBoundingBoxComputation::DecorationOption> const&)const::s_maskBoundingBoxNestingLevel++;
      if (WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects(WTF::OptionSet<WebCore::SVGBoundingBoxComputation::DecorationOption> const&,WebCore::FloatRect &,WTF::OptionSet<WebCore::SVGBoundingBoxComputation::DecorationOption> const&)const::s_maskBoundingBoxNestingLevel <= 1)
      {
        result.f32[0] = WebCore::RenderSVGResourceMasker::resourceBoundingBox((_QWORD *)v33, *(_QWORD *)(*(_QWORD *)a1 + 8), (*a2 & 0x200) == 0);
        v40 = a3->f32[1];
        if (a3->f32[0] >= result.f32[0])
          v41 = a3->f32[0];
        else
          v41 = result.f32[0];
        v42 = a3[1].f32[1];
        if (v40 >= v37)
          v43 = a3->f32[1];
        else
          v43 = v37;
        v44 = result.f32[0] + v38;
        if (v44 >= (float)(a3->f32[0] + a3[1].f32[0]))
          v44 = a3->f32[0] + a3[1].f32[0];
        v45 = v37 + v39;
        if (v45 >= (float)(v40 + v42))
          v45 = v40 + v42;
        if (v41 >= v44 || v43 >= v45)
        {
          v41 = 0.0;
          v43 = 0.0;
          v44 = 0.0;
          v45 = 0.0;
        }
        a3->f32[0] = v41;
        a3->f32[1] = v43;
        result.f32[0] = v44 - v41;
        a3[1].i32[0] = result.i32[0];
        a3[1].f32[1] = v45 - v43;
        v35 = *(_DWORD *)(v34 + 16);
        v36 = WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects(WTF::OptionSet<WebCore::SVGBoundingBoxComputation::DecorationOption> const&,WebCore::FloatRect &,WTF::OptionSet<WebCore::SVGBoundingBoxComputation::DecorationOption> const&)const::s_maskBoundingBoxNestingLevel
            - 1;
      }
      WebCore::SVGBoundingBoxComputation::adjustBoxForClippingAndEffects(WTF::OptionSet<WebCore::SVGBoundingBoxComputation::DecorationOption> const&,WebCore::FloatRect &,WTF::OptionSet<WebCore::SVGBoundingBoxComputation::DecorationOption> const&)const::s_maskBoundingBoxNestingLevel = v36;
      if (v35)
      {
        *(_DWORD *)(v34 + 16) = v35 - 1;
        goto LABEL_62;
      }
LABEL_77:
      __break(0xC471u);
      JUMPOUT(0x19652AC24);
    }
  }
LABEL_62:
  if ((*a2 & 0x20) == 0)
    return result;
  v47 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 424))(*(_QWORD *)(*(_QWORD *)a1 + 8))
                              + 8)
                  + 16);
  if ((*(_BYTE *)(v47 + 52) & 0xF) != 0)
  {
    v49 = *(float *)(v47 + 48);
    v48.i32[0] = *(_DWORD *)(v47 + 56);
    if ((*(_BYTE *)(v47 + 52) & 0x10) == 0)
      goto LABEL_65;
    v52 = v49 < 3.0;
    v53 = v49 + -3.0;
    if (v49 < 3.0)
      v49 = 3.0;
    v54 = 0.0;
    if (!v52)
      v54 = v53;
LABEL_74:
    if (v54 < 0.0)
      v54 = 0.0;
    *(float *)v48.i32 = *(float *)v48.i32 + v54;
    goto LABEL_65;
  }
  v48.i32[0] = *(_DWORD *)(v47 + 56);
  v49 = 0.0;
  if ((*(_BYTE *)(v47 + 52) & 0x10) != 0)
  {
    v54 = -3.0;
    goto LABEL_74;
  }
LABEL_65:
  *(float *)v48.i32 = fmaxf(v49 + *(float *)v48.i32, 0.0);
  v50 = (float32x2_t)vdup_lane_s32(v48, 0);
  v51 = vsub_f32(*a3, v50);
  result = vadd_f32(v50, vadd_f32(a3[1], v50));
  *a3 = v51;
  a3[1] = result;
  return result;
}

uint64_t WebCore::SVGContainerLayout::layoutChildren(WebCore::SVGContainerLayout *this, const WebCore::RenderObject *a2)
{
  int v2;
  WebCore::SVGContainerLayout *v4;
  WebCore::SVGContainerLayout *v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  uint64_t result;
  void *v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _BYTE v51[20];
  __int128 v52;
  char v53;

  v2 = (int)a2;
  v4 = *(WebCore::SVGContainerLayout **)(*(_QWORD *)this + 8);
  if (v4)
  {
    v5 = v4;
    while (1)
    {
      v6 = *((unsigned __int8 *)v5 + 46);
      if (v6 == 83)
        break;
      if (v6 == 88)
      {
        v9 = *((unsigned __int8 *)v5 + 169);
        goto LABEL_10;
      }
      v7 = *((_QWORD *)v5 + 4);
      if (v7)
      {
        v5 = *(WebCore::SVGContainerLayout **)(v7 + 8);
        if (v5)
          continue;
      }
      goto LABEL_7;
    }
    v9 = *((unsigned __int8 *)v5 + 218);
LABEL_10:
    v8 = v9 != 0;
  }
  else
  {
LABEL_7:
    v8 = 0;
  }
  result = WebCore::SVGContainerLayout::transformToRootChanged(v4, a2);
  v12 = result;
  if (*((_DWORD *)this + 4))
  {
    if (*((_DWORD *)this + 5))
      *((_DWORD *)this + 5) = 0;
    result = *((_QWORD *)this + 1);
    if (result)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      result = WTF::fastFree((WTF *)result, v11);
    }
  }
  if (*(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 8) + 68) << 32))
  {
    v13 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 8) + 68) << 32))
                    + 8);
    if (v13)
    {
      while (1)
      {
        v14 = *(unsigned __int8 *)(v13 + 46);
        if (v14 != 83)
        {
          if ((*(_BYTE *)(v13 + 52) & 7) != 4)
          {
            v15 = v14 - 67;
            v16 = v15 > 0x13;
            v17 = (1 << v15) & 0xE0011;
            goto LABEL_21;
          }
          if (v14 != 85 && (*(_BYTE *)(v13 + 53) & 1) != 0)
          {
            v34 = v14 - 67;
            v16 = v34 > 0x13;
            v17 = (1 << v34) & 0xA0011;
LABEL_21:
            if (v16 || v17 == 0)
              goto LABEL_41;
          }
        }
        if ((*(_BYTE *)(v13 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19652B1C4);
        }
        v19 = *((unsigned int *)this + 5);
        if ((_DWORD)v19 == *((_DWORD *)this + 4))
        {
          v20 = v19 + (v19 >> 2);
          if (v20 >= 0x10)
            v21 = v20 + 1;
          else
            v21 = 16;
          if (v21 <= v19 + 1)
            v22 = v19 + 1;
          else
            v22 = v21;
          if (v22 >> 29)
          {
LABEL_134:
            __break(0xC471u);
            JUMPOUT(0x19652B1A4);
          }
          v23 = (void *)*((_QWORD *)this + 1);
          v24 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
          *((_DWORD *)this + 4) = v22;
          *((_QWORD *)this + 1) = v24;
          result = (uint64_t)memcpy(v24, v23, 8 * v19);
          if (v23)
          {
            if (*((void **)this + 1) == v23)
            {
              *((_QWORD *)this + 1) = 0;
              *((_DWORD *)this + 4) = 0;
            }
            result = WTF::fastFree((WTF *)v23, v11);
          }
          v19 = *((unsigned int *)this + 5);
          v25 = (uint64_t *)(*((_QWORD *)this + 1) + 8 * v19);
        }
        else
        {
          v25 = (uint64_t *)(*((_QWORD *)this + 1) + 8 * v19);
        }
        *v25 = v13;
        *((_DWORD *)this + 5) = v19 + 1;
LABEL_41:
        v26 = *(_DWORD *)(v13 + 20);
        v27 = v2;
        if (v12)
        {
          if (*(_BYTE *)(v13 + 46) == 85)
          {
            v28 = *(_DWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 248) |= 8u;
            *(_DWORD *)(v13 + 16) = v28 + 1;
            if (v28 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x19652B1E4);
            }
            *(_DWORD *)(v13 + 16) = v28;
          }
          v27 = 1;
        }
        if (!v8)
          goto LABEL_80;
        if ((*(_BYTE *)(v13 + 45) & 1) == 0)
        {
          result = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
          if (result)
          {
            if ((*(_WORD *)(result + 28) & 0x20) == 0)
              goto LABEL_72;
            *(_DWORD *)(result + 24) += 2;
            if (*(_BYTE *)(result + 145))
            {
LABEL_66:
              if ((*(_BYTE *)(v13 + 52) & 7) == 4
                && (*(_BYTE *)(v13 + 53) & 1) == 0
                && (*(_BYTE *)(v13 + 53) & 0x10) != 0)
              {
                v38 = *(_DWORD *)(v13 + 16);
                *(_BYTE *)(v13 + 216) = 1;
                *(_DWORD *)(v13 + 16) = v38 + 1;
                if (v38 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19652B2A4);
                }
                *(_DWORD *)(v13 + 16) = v38;
                v27 = 1;
              }
              else
              {
                v36 = *(unsigned __int8 *)(v13 + 46);
                if (v36 == 85)
                {
                  v37 = *(_DWORD *)(v13 + 16);
                  *(_BYTE *)(v13 + 248) |= 0xAu;
                  *(_DWORD *)(v13 + 16) = v37 + 1;
                  if (v37 == -1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19652B244);
                  }
                  *(_DWORD *)(v13 + 16) = v37;
                  v27 = 1;
                }
                else
                {
                  v50 = result;
                  if (v36 == 82 || v36 == 78)
                  {
                    ++*(_DWORD *)(v13 + 16);
                    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 960))(v13);
                    v49 = *(_DWORD *)(v13 + 16);
                    if (!v49)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19652B284);
                    }
                    *(_DWORD *)(v13 + 16) = v49 - 1;
                  }
                  result = v50;
                }
              }
            }
            else
            {
              v29 = *(_QWORD *)(result + 128);
              if (v29 && *(_DWORD *)(v29 - 12))
              {
                v30 = *(unsigned int *)(v29 - 4);
                if ((_DWORD)v30)
                {
                  v31 = 8 * v30;
                  v32 = *(_QWORD *)(result + 128);
                  while ((unint64_t)(*(_QWORD *)v32 + 1) <= 1)
                  {
                    v32 += 8;
                    v31 -= 8;
                    if (!v31)
                      goto LABEL_70;
                  }
                }
                else
                {
                  v32 = *(_QWORD *)(result + 128);
                }
                v35 = v29 + 8 * v30;
                if (v32 != v35)
                {
                  if (*(_QWORD *)(*(_QWORD *)v32 + 8))
                    goto LABEL_66;
                  while (1)
                  {
                    v32 += 8;
                    if (v32 == v35)
                      break;
                    if ((unint64_t)(*(_QWORD *)v32 + 1) > 1)
                    {
                      if (v32 == v35)
                        break;
                      if (*(_QWORD *)(*(_QWORD *)v32 + 8))
                        goto LABEL_66;
                    }
                  }
                }
              }
            }
LABEL_70:
            if (*(_DWORD *)(result + 24) != 2)
            {
              *(_DWORD *)(result + 24) -= 2;
              goto LABEL_72;
            }
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
            {
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
LABEL_72:
              if ((v27 & 1) == 0)
                goto LABEL_88;
              goto LABEL_81;
            }
          }
LABEL_80:
          if (!v27)
            goto LABEL_88;
        }
LABEL_81:
        v39 = *(_DWORD *)(v13 + 20);
        if ((v39 & 8) == 0)
        {
          *(_DWORD *)(v13 + 20) = v39 | 8;
          if ((v39 & 0x8000) != 0)
          {
            if ((*(_BYTE *)(v13 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19652B204);
            }
            v40 = *(_QWORD *)(v13 + 144);
            if (v40)
            {
              v41 = *(_DWORD *)(v40 + 8) + 1;
              *(_DWORD *)(v40 + 8) = v41;
            }
            else
            {
              v41 = MEMORY[8];
            }
            *(_QWORD *)(v40 + 24) = *(_QWORD *)(v40 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v41)
            {
              __break(0xC471u);
              JUMPOUT(0x19652B224);
            }
            *(_DWORD *)(v40 + 8) = v41 - 1;
          }
        }
LABEL_88:
        v42 = *(_BYTE *)(v13 + 45);
        if ((v42 & 2) != 0)
          v43 = 0;
        else
          v43 = v13;
        if (v43)
        {
          ++*(_DWORD *)(v43 + 16);
          if ((v42 & 2) == 0)
          {
LABEL_93:
            if ((*(_BYTE *)(v13 + 20) & 0xF8) != 0)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 688))(v13);
            if ((v26 & 0x200) == 0)
            {
              v44 = *(_DWORD *)(v13 + 20);
              if ((v44 & 0x200) != 0)
              {
                if ((v44 & 0x8000) == 0)
                  goto LABEL_98;
                if ((*(_BYTE *)(v13 + 45) & 0x10) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19652B264);
                }
                v48 = *(_QWORD *)(v13 + 144);
                if (!v48 || (*(_BYTE *)(v48 + 25) & 8) == 0)
                {
LABEL_98:
                  v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8);
                  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 528) + 8) + 288) + 476)
                    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 1944) + 24) + 8)
                                                         + 40)
                                             + 8)
                                 + 3382))
                  {
                    LOBYTE(v52) = 0;
                    v53 = 0;
                    v51[0] = 0;
                    v51[16] = 0;
                    result = WebCore::RenderObject::issueRepaint(v13, &v52, 0, 0, (uint64_t)v51);
                  }
                }
              }
            }
          }
          v46 = *(_DWORD *)(v43 + 16);
          if (!v46)
            goto LABEL_134;
          *(_DWORD *)(v43 + 16) = v46 - 1;
          goto LABEL_103;
        }
        if ((*(_BYTE *)(v13 + 45) & 2) == 0)
          goto LABEL_93;
LABEL_103:
        v47 = *(unsigned int *)(v13 + 47);
        if (v47 | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32))
        {
          v13 = *(_QWORD *)((v47 | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32)) + 8);
          if (v13)
            continue;
        }
        return result;
      }
    }
  }
  return result;
}

BOOL WebCore::SVGContainerLayout::transformToRootChanged(WebCore::SVGContainerLayout *this, const WebCore::RenderObject *a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;

  if (!this)
    return 0;
  while (1)
  {
    v2 = *((unsigned __int8 *)this + 46);
    if (v2 == 87)
    {
      v5 = *((_DWORD *)this + 4);
      *((_DWORD *)this + 4) = v5 + 1;
      if (v5 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x19652B364);
      }
      goto LABEL_9;
    }
    if (v2 == 88)
    {
      v5 = *((_DWORD *)this + 4);
      *((_DWORD *)this + 4) = v5 + 1;
      if (v5 == -1)
        goto LABEL_18;
LABEL_9:
      v6 = *((unsigned __int8 *)this + 170);
      goto LABEL_10;
    }
    if (v2 == 83)
      break;
    v3 = *((_QWORD *)this + 4);
    if (!v3)
      return 0;
    v4 = 0;
    this = *(WebCore::SVGContainerLayout **)(v3 + 8);
    if (!this)
      return v4;
  }
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = v5 + 1;
  if (v5 == -1)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x19652B344);
  }
  v6 = *((unsigned __int8 *)this + 217);
LABEL_10:
  v4 = v6 != 0;
  *((_DWORD *)this + 4) = v5;
  return v4;
}

void WebCore::SVGContainerLayout::positionChildrenRelativeToContainer(WebCore::SVGContainerLayout *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  float v10;
  float v11;
  int v12;
  float v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  unsigned int v20;
  float v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  if (!*((_DWORD *)this + 5))
    return;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = *(unsigned __int8 *)(v2 + 46);
  if (v3 == 88)
  {
    if ((*(_BYTE *)(v2 + 45) & 1) == 0)
    {
      v9 = 0;
      v8 = 0;
      goto LABEL_23;
    }
  }
  else if (v3 == 83)
  {
    ++*(_DWORD *)(v2 + 16);
    v4 = v2;
    v5 = WebCore::RenderBox::contentBoxLocation((WebCore::RenderBox *)v2);
    v6 = *(_DWORD *)(v4 + 16);
    if (!v6)
    {
      __break(0xC471u);
      return;
    }
    v7 = v4;
    if (HIDWORD(v5) == 0x80000000)
      v8 = 0x7FFFFFFF;
    else
      v8 = -HIDWORD(v5);
    if ((_DWORD)v5 == 0x80000000)
      v9 = 0x7FFFFFFF;
    else
      v9 = -(int)v5;
    *(_DWORD *)(v7 + 16) = v6 - 1;
    goto LABEL_23;
  }
  v10 = floorf((*(float (**)(uint64_t))(*(_QWORD *)v2 + 248))(v2) * 64.0);
  if (v10 > -2147500000.0)
    v12 = (int)v10;
  else
    v12 = 0x80000000;
  if (v10 < 2147500000.0)
    v9 = v12;
  else
    v9 = 0x7FFFFFFF;
  v13 = floorf(v11 * 64.0);
  if (v13 >= 2147500000.0)
  {
    v8 = 0x7FFFFFFF;
  }
  else if (v13 <= -2147500000.0)
  {
    v8 = 0x80000000;
  }
  else
  {
    v8 = (int)v13;
  }
LABEL_23:
  v14 = *((unsigned int *)this + 5);
  if ((_DWORD)v14)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 1);
    v16 = 8 * v14;
    do
    {
      v17 = *v15;
      v18 = floorf((*(float (**)(_QWORD))(*(_QWORD *)*v15 + 248))(*v15) * 64.0);
      if (v18 >= 2147500000.0)
      {
        v20 = 0x7FFFFFFF;
      }
      else if (v18 <= -2147500000.0)
      {
        v20 = 0x80000000;
      }
      else
      {
        v20 = (int)v18;
      }
      v21 = floorf(v19 * 64.0);
      if (v21 >= 2147500000.0)
      {
        v22 = 0x7FFFFFFF;
      }
      else if (v21 <= -2147500000.0)
      {
        v22 = 0x80000000;
      }
      else
      {
        v22 = (int)v21;
      }
      v23 = __OFSUB__(v20, v9);
      v24 = v20 - v9;
      LODWORD(v25) = (v20 >> 31) + 0x7FFFFFFF;
      if (v23)
        v25 = v25;
      else
        v25 = v24;
      v23 = __OFSUB__(v22, v8);
      v26 = v22 - v8;
      LODWORD(v27) = (v22 >> 31) + 0x7FFFFFFF;
      if (v23)
        v27 = v27;
      else
        v27 = v26;
      v30 = v25 | (v27 << 32);
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 840))(v17);
      if ((_DWORD)v30 != (_DWORD)v28 || HIDWORD(v30) != HIDWORD(v28))
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 848))(v17, &v30);
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
}

void WebCore::SVGInlineFlowBox::paintSelectionBackground(WebCore::SVGInlineFlowBox *this, WebCore::PaintInfo *a2)
{
  __int128 v2;
  __int128 v3;
  WebCore::SVGInlineTextBox *i;
  _OWORD v5[5];
  uint64_t v6;

  v2 = *((_OWORD *)a2 + 3);
  v5[2] = *((_OWORD *)a2 + 2);
  v5[3] = v2;
  v5[4] = *((_OWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 10);
  v3 = *((_OWORD *)a2 + 1);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  for (i = (WebCore::SVGInlineTextBox *)*((_QWORD *)this + 9); i; i = (WebCore::SVGInlineTextBox *)*((_QWORD *)i + 1))
  {
    if ((*(unsigned int (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)i + 96))(i))
    {
      WebCore::SVGInlineTextBox::paintSelectionBackground(i, (WebCore::PaintInfo *)v5);
    }
    else if ((*(unsigned int (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)i + 104))(i))
    {
      WebCore::SVGInlineFlowBox::paintSelectionBackground(i, (WebCore::PaintInfo *)v5);
    }
  }
}

void WebCore::SVGInlineTextBox::paintSelectionBackground(WebCore::SVGInlineTextBox *this, WebCore::PaintInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t started;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  float64x2_t v28;
  float32x2_t v29;
  __n128 v30;
  float64x2_t v31;
  int32x2_t v32;
  int64x2_t v33;
  float64x2_t v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  double v42;
  double v43;
  float64x2_t v44;
  double v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  double v53;
  BOOL v54;
  float64x2_t v55;
  float64x2_t v56;
  int8x16_t v57;
  unsigned int v58;
  float32x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  int32x2_t v62;
  int64x2_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  WebCore::RenderStyle *v69;
  int v70;
  _DWORD v71[4];
  __int128 v72;
  float64x2_t v73;
  __int128 v74;
  unint64_t v75[2];

  v4 = *((_QWORD *)this + 4);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 45) & 2) == 0)
  {
    __break(0xC471u);
    goto LABEL_98;
  }
  if (*(_BYTE *)(v4 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652BCD0);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v5 + 120) & 0x30) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
    if (v6)
      v7 = *(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    if ((*(_BYTE *)(v7 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652BCF0);
    }
    v8 = *((unsigned __int16 *)a2 + 8);
    if (WebCore::LegacyInlineTextBox::selectionState(this) && v8 != 128)
    {
      v9 = *((_QWORD *)this + 4);
      if (v9)
        v9 = *(_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 45) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19652BD10);
      }
      if (*(_BYTE *)(v9 + 46) != 72)
      {
        __break(0xC471u);
        JUMPOUT(0x19652BD30);
      }
      v10 = *(_QWORD *)(v9 + 32);
      if (v10)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (!v11)
            return;
          if ((*(_BYTE *)(v11 + 45) & 1) == 0)
            break;
          v10 = *(_QWORD *)(v11 + 32);
          if (!v10)
            return;
        }
        WebCore::RenderElement::selectionBackgroundColor((WebCore::RenderElement *)v11, v75);
        v13 = v75[0];
        if ((v75[0] & 0x8000000000000) != 0)
        {
          v64 = (unsigned int *)(v75[0] & 0xFFFFFFFFFFFFLL);
          if (*(float *)((v75[0] & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_94;
        }
        else if (!LOBYTE(v75[0]))
        {
          return;
        }
        v14 = *((_QWORD *)this + 4);
        if (v14)
          v14 = *(_QWORD *)(v14 + 8);
        if ((*(_BYTE *)(v14 + 45) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19652BD50);
        }
        if (*(_BYTE *)(v14 + 46) != 72)
        {
          __break(0xC471u);
          JUMPOUT(0x19652BD70);
        }
        if (*(float *)(v14 + 300) >= 0.5)
        {
          started = WebCore::LegacyInlineTextBox::selectionStartEnd(this);
          v72 = constinit_10;
          v73 = (float64x2_t)unk_1969FE138;
          v74 = xmmword_1969FE148;
          v16 = *((unsigned int *)this + 31);
          if ((_DWORD)v16)
          {
            v17 = 0;
            v18 = 0;
            v69 = (WebCore::RenderStyle *)(v7 + 80);
            v19 = HIDWORD(started);
            v20 = v16 << 7;
            v70 = started;
            v67 = v16 << 7;
            v68 = HIDWORD(started);
            while (1)
            {
              if (v18 >= *((unsigned int *)this + 31))
              {
                __break(0xC471u);
LABEL_98:
                JUMPOUT(0x19652BCB0);
              }
              v21 = *((_QWORD *)this + 14);
              v22 = *(_DWORD *)(v21 + v17) - *((_DWORD *)this + 18);
              v23 = v22 <= started ? started : *(_DWORD *)(v21 + v17) - *((_DWORD *)this + 18);
              v24 = v19 >= (*(_DWORD *)(v21 + v17 + 8) & 0x7FFFFFFF) + v22
                  ? (*(_DWORD *)(v21 + v17 + 8) & 0x7FFFFFFF) + v22
                  : v19;
              if (v23 < v24)
                break;
LABEL_67:
              ++v18;
              v17 += 128;
              if (v20 == v17)
                goto LABEL_83;
            }
            v25 = *((_QWORD *)a2 + 10);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 96))(v25, 1);
            if ((*(_DWORD *)(v21 + v17 + 8) & 0x80000000) != 0)
            {
              v52 = v21 + v17;
              v53 = *(double *)(v21 + v17 + 80);
              v54 = v53 == 1.0
                 && *(double *)(v52 + 88) == 0.0
                 && *(double *)(v21 + v17 + 96) == 0.0
                 && *(double *)(v21 + v17 + 104) == 1.0
                 && *(double *)(v21 + v17 + 112) == 0.0
                 && *(double *)(v21 + v17 + 120) == 0.0;
              v41 = *(float64x2_t *)(v52 + 32);
              v30 = *(__n128 *)(v52 + 48);
              v44 = *(float64x2_t *)(v52 + 64);
              if (!v54)
              {
                v55 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v30, *(double *)(v21 + v17 + 88)), v41, v53);
                v56 = vmulq_n_f64((float64x2_t)v30, *(double *)(v21 + v17 + 120));
                v30 = (__n128)vmlaq_n_f64(vmulq_n_f64((float64x2_t)v30, *(double *)(v21 + v17 + 104)), v41, *(double *)(v21 + v17 + 96));
                v44 = vaddq_f64(v44, vmlaq_n_f64(v56, v41, *(double *)(v21 + v17 + 112)));
                v41 = v55;
              }
              v72 = (__int128)v41;
              v73 = (float64x2_t)v30;
              v74 = (__int128)v44;
              v42 = v41.f64[1];
              v57 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64((float64x2_t)v30, (float64x2_t)xmmword_1968A14C0));
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v57))) & 1) == 0
                && v44.f64[0] == 0.0
                && (v45 = v44.f64[1], v44.f64[1] == 0.0))
              {
                v43 = 1.0;
                v41.f64[0] = 1.0;
              }
              else
              {
                v58 = (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, v57)) & 0xF) == 0;
                v59 = *(float32x2_t *)(v21 + v17 + 12);
                v60 = vaddq_f64(v44, vcvtq_f64_f32(v59));
                v61 = vcvtq_f64_f32(vneg_f32(v59));
                v62 = vdup_n_s32(v58);
                v63.i64[0] = v62.u32[0];
                v63.i64[1] = v62.u32[1];
                v44 = vaddq_f64(v60, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v63, 0x3FuLL)), (int8x16_t)v61, (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v30, v61, 1), v41, v61.f64[0])));
                v74 = (__int128)v44;
                v45 = v44.f64[1];
                v43 = v30.n128_f64[1];
              }
              goto LABEL_59;
            }
            v26 = v21 + v17;
            if (*(double *)(v21 + v17 + 32) == 1.0
              && *(double *)(v26 + 40) == 0.0
              && *(double *)(v21 + v17 + 48) == 0.0
              && *(double *)(v21 + v17 + 56) == 1.0
              && *(double *)(v21 + v17 + 64) == 0.0
              && *(double *)(v21 + v17 + 72) == 0.0)
            {
              v41 = *(float64x2_t *)(v21 + v17 + 96);
              v30 = *(__n128 *)(v21 + v17 + 112);
              v72 = *(_OWORD *)(v21 + v17 + 80);
              v73 = v41;
              v74 = (__int128)v30;
              v42 = *((double *)&v72 + 1);
              *(_QWORD *)&v41.f64[0] = v72;
              v43 = v73.f64[1];
              v30.n128_u64[0] = *(_QWORD *)&v73.f64[0];
              v45 = *((double *)&v74 + 1);
              *(_QWORD *)&v44.f64[0] = v74;
              goto LABEL_59;
            }
            v27 = *(_OWORD *)(v21 + v17 + 32);
            v28 = *(float64x2_t *)(v21 + v17 + 64);
            v73 = *(float64x2_t *)(v21 + v17 + 48);
            v74 = (__int128)v28;
            v72 = v27;
            v29 = *(float32x2_t *)(v26 + 12);
            v30 = (__n128)vaddq_f64(v28, vcvtq_f64_f32(v29));
            v31 = vcvtq_f64_f32(vneg_f32(v29));
            *(int16x4_t *)&v28.f64[0] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v73, (float64x2_t)xmmword_1968A14C0))));
            LOWORD(v28.f64[0]) = vmaxv_u16(*(uint16x4_t *)&v28.f64[0]);
            v32 = vdup_n_s32(LODWORD(v28.f64[0]) ^ 1u);
            v33.i64[0] = v32.u32[0];
            v33.i64[1] = v32.u32[1];
            v34 = vaddq_f64((float64x2_t)v30, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v33, 0x3FuLL)), (int8x16_t)v31, (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v73, v31, 1), (float64x2_t)v72, v31.f64[0])));
            v74 = (__int128)v34;
            v35 = *(double *)(v26 + 80);
            v36 = v21 + v17;
            if (v35 == 1.0)
            {
              v37 = *(double *)(v36 + 88);
              if (v37 == 0.0
                && *(double *)(v36 + 96) == 0.0
                && *(double *)(v21 + v17 + 104) == 1.0
                && *(double *)(v21 + v17 + 112) == 0.0
                && *(double *)(v21 + v17 + 120) == 0.0)
              {
                v45 = v34.f64[1];
                v42 = *((double *)&v72 + 1);
                v43 = v73.f64[1];
                v44.f64[0] = v34.f64[0];
                v30.n128_u64[0] = *(_QWORD *)&v73.f64[0];
                *(_QWORD *)&v41.f64[0] = v72;
LABEL_59:
                if (v41.f64[0] != 1.0
                  || v42 != 0.0
                  || v30.n128_f64[0] != 0.0
                  || v43 != 1.0
                  || v44.f64[0] != 0.0
                  || v45 != 0.0)
                {
                  (*(void (**)(_QWORD, __int128 *, __n128))(**((_QWORD **)a2 + 10) + 656))(*((_QWORD *)a2 + 10), &v72, v30);
                }
                v46 = v23 - v22;
                v47 = v24 - v22;
                WebCore::GraphicsContext::setFillColor(*((WebCore::GraphicsContext **)a2 + 10), (const WebCore::Color *)v75);
                v48 = *((_QWORD *)a2 + 10);
                v71[0] = WebCore::SVGInlineTextBox::selectionRectForTextFragment(this, (const WebCore::SVGTextFragment *)(v21 + v17), v46, v47, v69);
                v71[1] = v49;
                v71[2] = v50;
                v71[3] = v51;
                (*(void (**)(uint64_t, _DWORD *, unint64_t *))(*(_QWORD *)v48 + 224))(v48, v71, v75);
                *((_BYTE *)this + 84) &= 0xF0u;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 104))(v25, 1);
                LODWORD(started) = v70;
                v20 = v67;
                LODWORD(v19) = v68;
                goto LABEL_67;
              }
            }
            else
            {
              v37 = *(double *)(v36 + 88);
            }
            v38 = *(double *)(v21 + v17 + 96);
            v39 = *(double *)(v21 + v17 + 104);
            v40 = *(double *)(v21 + v17 + 120);
            v41.f64[0] = vmlad_n_f64(vmuld_lane_f64(v38, (float64x2_t)v72, 1), v35, *(double *)&v72);
            v42 = vmlad_n_f64(vmuld_lane_f64(v39, (float64x2_t)v72, 1), v37, *(double *)&v72);
            v30.n128_f64[0] = vmlad_n_f64(vmuld_lane_f64(v38, v73, 1), v35, v73.f64[0]);
            v43 = vmlad_n_f64(vmuld_lane_f64(v39, v73, 1), v37, v73.f64[0]);
            v44.f64[0] = *(double *)(v21 + v17 + 112) + vmlad_n_f64(vmuld_lane_f64(v38, v34, 1), v35, v34.f64[0]);
            *(float64_t *)&v72 = v41.f64[0];
            *((double *)&v72 + 1) = v42;
            *(_QWORD *)&v73.f64[0] = v30.n128_u64[0];
            v73.f64[1] = v43;
            v45 = v40 + vmlad_n_f64(vmuld_lane_f64(v39, v34, 1), v37, v34.f64[0]);
            *(float64_t *)&v74 = v44.f64[0];
            *((double *)&v74 + 1) = v45;
            goto LABEL_59;
          }
LABEL_83:
          v13 = v75[0];
        }
        if ((v13 & 0x8000000000000) != 0)
        {
          v64 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
          do
          {
LABEL_94:
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
          {
            atomic_store(1u, v64);
            WTF::fastFree((WTF *)v64, v12);
          }
        }
      }
    }
  }
}

void WebCore::SVGInlineFlowBox::paint(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const WebCore::RenderElement *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  const WebCore::SVGFilter *v24;
  _QWORD *j;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int i;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::LegacyRenderSVGResourceClipper *v39;
  char v40;
  WebCore::GraphicsContext *v41;
  float v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  char v47;
  uint64_t v48;
  WebCore::LegacyRenderSVGResourceFilter *v49;
  char v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  WebCore::SVGDocumentExtensions *v69;
  WTF *v70;
  uint64_t *v71;
  char v72;
  _WORD *v73;
  _WORD *v74;
  __int128 v75;
  _DWORD v76[4];
  int32x2_t v77[2];
  const WebCore::SVGFilter *v78;
  __int128 v79;

  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if ((*(_BYTE *)(v7 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652C268);
  }
  v75 = 0uLL;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 96))(*((_QWORD *)a2 + 10), 1);
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8)
                                          + 1944)
                              + 248)
                  + 1148);
  v11 = *(_QWORD *)(v7 + 88);
  v12 = *(_QWORD *)(v11 + 32);
  v13 = 1.0;
  if (*(_BYTE *)(v7 + 46) != 103 && (v10 & 0x10) == 0)
    v13 = *(float *)(v12 + 4);
  v14 = *(_DWORD *)(*(_QWORD *)(v11 + 40) + 636);
  v15 = *(_QWORD *)(v12 + 48);
  if (*(_QWORD *)(v15 + 8))
  {
    while (1)
    {
      v16 = *(uint64_t (**)())(v15 + 16);
      if (v16)
        break;
      v15 = *(_QWORD *)(v15 + 8);
      if (!v15)
        goto LABEL_12;
    }
  }
  else
  {
    if (*(_QWORD *)(v15 + 16))
      v16 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v16 = 0;
    if (!v16)
      goto LABEL_12;
  }
  v73 = (_WORD *)WebCore::RenderElement::element((WebCore::RenderElement *)v7);
  LOBYTE(v16) = (v73[14] & 0x20) != 0
             && (v74 = v73, (*(unsigned int (**)(_WORD *))(*(_QWORD *)v73 + 1184))(v73))
             && *((_BYTE *)v74 + 200) != 0;
LABEL_12:
  v17 = v14 & 0x1F00000;
  if (v13 < 1.0 || v17 != 0x100000 || (v16 & 1) != 0 || (v14 & 0x2000000) != 0)
  {
    LODWORD(v79) = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 256))(v7, 0);
    *(_QWORD *)((char *)&v79 + 4) = __PAIR64__(v55, v54);
    HIDWORD(v79) = v56;
    (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)a2 + 10) + 456))(*((_QWORD *)a2 + 10), &v79);
    v57 = *((_QWORD *)a2 + 10);
    if (v17 == 0x100000)
    {
      (*(void (**)(uint64_t, float))(*(_QWORD *)v57 + 592))(v57, v13);
    }
    else
    {
      v58 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 636) >> 20) & 0x1F;
      if (v58 != HIBYTE(*(unsigned __int16 *)(v57 + 194)))
      {
        *(_WORD *)(v57 + 194) = *(_WORD *)(v57 + 194) | (unsigned __int16)((_WORD)v58 << 8);
        *(_DWORD *)(v57 + 184) |= 0x20u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 88))(v57, v57 + 8);
      (*(void (**)(_QWORD, float))(**((_QWORD **)a2 + 10) + 592))(*((_QWORD *)a2 + 10), v13);
      v59 = *((_QWORD *)a2 + 10);
      if ((*(_WORD *)(v59 + 194) & 0xFF00) != 0x100)
      {
        *(_WORD *)(v59 + 194) = *(_WORD *)(v59 + 194) | 0x100;
        *(_DWORD *)(v59 + 184) |= 0x20u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 88))(v59, v59 + 8);
    }
    v18 = 6;
  }
  else
  {
    v18 = 2;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 264);
  if (v19 && (*(_DWORD *)(v19 + 12) - 1) <= 1)
  {
    WebCore::SVGRenderSupport::clipContextToCSSClippingArea(*((_QWORD *)a2 + 10), (WebCore::GraphicsContext *)v7, v9);
    v20 = 1;
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8);
  if ((*(_QWORD *)(v21[85] + 680) & 0x800000000000) != 0 || (*(_WORD *)(v7 + 69) & 0x1000) == 0)
    goto LABEL_22;
  if (!v21[226])
  {
    v60 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v60 = 0;
    v61 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v21);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
    *(_QWORD *)(v60 + 8) = v61;
    *(_OWORD *)(v60 + 16) = 0u;
    *(_OWORD *)(v60 + 32) = 0u;
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v63 = 0;
    *(_QWORD *)(v60 + 48) = v63;
    *(_QWORD *)(v60 + 56) = 0;
    *(_QWORD *)(v60 + 64) = 0;
    v64 = v21[66];
    if (!v64)
      goto LABEL_85;
    v65 = *(_QWORD *)(v64 + 8);
    if (v65
      && (v66 = *(_QWORD *)(v65 + 24)) != 0
      && (v67 = *(_QWORD *)(v66 + 8)) != 0
      && (*(_WORD *)(v67 + 658) & 4) != 0)
    {
      v68 = *(_BYTE *)(v67 + 545) == 0;
    }
    else
    {
LABEL_85:
      v68 = 1;
    }
    *(_BYTE *)(v60 + 72) = v68;
    v69 = (WebCore::SVGDocumentExtensions *)v21[226];
    v21[226] = v60;
    if (v69)
    {
      WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v69, v8);
      if (*(_DWORD *)v70)
      {
        *((_OWORD *)v70 + 3) = 0u;
        *((_OWORD *)v70 + 4) = 0u;
        *((_OWORD *)v70 + 1) = 0u;
        *((_OWORD *)v70 + 2) = 0u;
        *(_OWORD *)v70 = 0u;
      }
      else
      {
        WTF::fastFree(v70, v8);
      }
    }
  }
  v26 = **(_QWORD **)(v21[226] + 48);
  if (!v26)
    goto LABEL_22;
  v27 = *(_DWORD *)(v26 - 8);
  v28 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
  v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
  v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
  v31 = v27 & ((v30 >> 31) ^ v30);
  for (i = 1; ; v31 = (v33 + i++) & v27)
  {
    v33 = v31;
    v34 = *(_QWORD *)(v26 + 16 * v31);
    if (v34 != -1)
    {
      if (!v34)
        goto LABEL_22;
      if (*(_QWORD *)(v34 + 8) == v7)
        break;
    }
  }
  v35 = *(uint64_t ***)(v26 + 16 * v33 + 8);
  if (!v35)
  {
LABEL_22:
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 32);
    if (*(_DWORD *)(v22 + 20) == 1 && !*(_BYTE *)(**(_QWORD **)(v22 + 8) + 12))
      goto LABEL_87;
    goto LABEL_23;
  }
  v36 = *v35;
  if ((v10 & 0x10) != 0)
  {
LABEL_92:
    if (!v36)
      goto LABEL_51;
    goto LABEL_43;
  }
  if (!v36)
  {
LABEL_23:
    v23 = 0;
LABEL_24:
    v24 = 0;
    goto LABEL_25;
  }
  v37 = v36[2];
  if (v37)
  {
    v71 = *(uint64_t **)(v37 + 8);
    if (v71)
    {
      *(_QWORD *)&v79 = *((_QWORD *)a2 + 10);
      v72 = WebCore::LegacyRenderSVGResourceMasker::applyResource(v71, (WebCore::SVGRenderingContext *)v7, v7 + 80, (uint64_t *)&v79);
      *((_QWORD *)a2 + 10) = v79;
      if ((v72 & 1) == 0)
        goto LABEL_87;
      v36 = *v35;
      goto LABEL_92;
    }
  }
LABEL_43:
  v38 = *v36;
  if (v38)
  {
    v39 = *(WebCore::LegacyRenderSVGResourceClipper **)(v38 + 8);
    v40 = v39 ? v20 : 1;
    if ((v40 & 1) == 0)
    {
      v41 = (WebCore::GraphicsContext *)*((_QWORD *)a2 + 10);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 256))(v7, 0);
      if (v43 <= 0.0 || v42 <= 0.0)
      {
        *((_QWORD *)a2 + 10) = v41;
        goto LABEL_51;
      }
      LODWORD(v79) = (*(float (**)(uint64_t))(*(_QWORD *)v7 + 232))(v7);
      *(_QWORD *)((char *)&v79 + 4) = __PAIR64__(v45, v44);
      HIDWORD(v79) = v46;
      v47 = WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(v39, v41, (WebCore::RenderElement *)v7, (float32x2_t *)&v79, (const WebCore::FloatRect *)&v79, 1.0);
      *((_QWORD *)a2 + 10) = v41;
      if ((v47 & 1) == 0)
      {
LABEL_87:
        v23 = 0;
        v24 = 0;
        goto LABEL_26;
      }
    }
  }
LABEL_51:
  if ((v10 & 0x10) != 0)
    goto LABEL_23;
  if (!*v35)
    goto LABEL_23;
  v48 = (*v35)[1];
  if (!v48)
    goto LABEL_23;
  v49 = *(WebCore::LegacyRenderSVGResourceFilter **)(v48 + 8);
  v23 = (uint64_t *)v49;
  if (!v49 || WebCore::LegacyRenderSVGResourceFilter::isIdentity(v49, (WebCore::SVGFilterElement *)v8))
    goto LABEL_24;
  v24 = (const WebCore::SVGFilter *)*((_QWORD *)a2 + 10);
  v75 = *a2;
  v18 |= 8u;
  v78 = v24;
  v50 = WebCore::LegacyRenderSVGResourceFilter::applyResource(v23, v7, v7 + 80, &v78);
  *((_QWORD *)a2 + 10) = v78;
  if ((v50 & 1) == 0)
    goto LABEL_26;
  v76[0] = WebCore::LegacyRenderSVGResourceFilter::drawingRegion((WebCore::LegacyRenderSVGResourceFilter *)v23, (WebCore::RenderObject *)v7);
  v76[1] = v51;
  v76[2] = v52;
  v76[3] = v53;
  WebCore::IntRect::IntRect((int *)v77, (const WebCore::FloatRect *)v76);
  WebCore::LayoutRect::LayoutRect((int8x8_t *)&v79, v77);
  *a2 = v79;
LABEL_25:
  v18 |= 1u;
LABEL_26:
  if ((v18 & 1) != 0)
  {
    for (j = *(_QWORD **)(a1 + 72); j; j = (_QWORD *)j[1])
      (*(void (**)(_QWORD *, __int128 *, uint64_t, _QWORD, _QWORD))(*j + 56))(j, a2, a3, 0, 0);
  }
  if ((v18 & 0xE) != 0)
  {
    if ((v18 & 8) != 0)
    {
      *(_QWORD *)&v79 = *((_QWORD *)a2 + 10);
      WebCore::LegacyRenderSVGResourceFilter::postApplyResource(v23, (WebCore::RenderElement *)v7, (uint64_t *)&v79);
      *((_QWORD *)a2 + 10) = v24;
      *a2 = v75;
    }
    if ((v18 & 4) != 0)
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 10) + 608))(*((_QWORD *)a2 + 10));
    if ((v18 & 2) != 0)
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 104))(*((_QWORD *)a2 + 10), 1);
  }
}

float WebCore::SVGInlineFlowBox::calculateBoundaries(WebCore::SVGInlineFlowBox *this, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  WebCore::SVGInlineTextBox *v5;
  void *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;

  v19 = 0;
  v20 = 0;
  v5 = (WebCore::SVGInlineTextBox *)*((_QWORD *)this + 9);
  a5.n128_u32[0] = 0;
  a4.n128_u32[0] = 0;
  a3.n128_u32[0] = 0;
  a2.n128_u32[0] = 0;
  if (v5)
  {
    do
    {
      if ((*(unsigned int (**)(WebCore::SVGInlineTextBox *, __n128, __n128, __n128, __n128))(*(_QWORD *)v5 + 96))(v5, a2, a3, a4, a5))
      {
        a2.n128_f32[0] = WebCore::SVGInlineTextBox::calculateBoundaries(v5, v6);
        if (a4.n128_f32[0] > 0.0 && a5.n128_f32[0] > 0.0)
        {
          if (*(float *)&v20 <= 0.0 || *((float *)&v20 + 1) <= 0.0)
          {
            v19 = __PAIR64__(a3.n128_u32[0], a2.n128_u32[0]);
            v20 = __PAIR64__(a5.n128_u32[0], a4.n128_u32[0]);
          }
          else
          {
            if (a2.n128_f32[0] >= *(float *)&v19)
              v7 = *(float *)&v19;
            else
              v7 = a2.n128_f32[0];
            if (a3.n128_f32[0] >= *((float *)&v19 + 1))
              v8 = *((float *)&v19 + 1);
            else
              v8 = a3.n128_f32[0];
            v9 = a4.n128_f32[0] + a2.n128_f32[0];
            if ((float)(*(float *)&v20 + *(float *)&v19) >= v9)
              v9 = *(float *)&v20 + *(float *)&v19;
            a4.n128_f32[0] = *((float *)&v20 + 1) + *((float *)&v19 + 1);
            v10 = a5.n128_f32[0] + a3.n128_f32[0];
            if ((float)(*((float *)&v20 + 1) + *((float *)&v19 + 1)) >= v10)
              v10 = *((float *)&v20 + 1) + *((float *)&v19 + 1);
            v19 = __PAIR64__(LODWORD(v8), LODWORD(v7));
            a2.n128_f32[0] = v9 - v7;
            a3.n128_f32[0] = v10 - v8;
            v20 = __PAIR64__(a3.n128_u32[0], a2.n128_u32[0]);
          }
        }
      }
      else if ((*(unsigned int (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)v5 + 104))(v5))
      {
        WebCore::SVGInlineFlowBox::calculateBoundaries(v5);
        v16 = __PAIR64__(v12, v11);
        v17 = v13;
        v18 = v14;
        a2 = WebCore::FloatRect::unite((float32x2_t *)&v19, (float32x2_t *)&v16);
      }
      v5 = (WebCore::SVGInlineTextBox *)*((_QWORD *)v5 + 1);
    }
    while (v5);
    a2.n128_u32[0] = v19;
  }
  return a2.n128_f32[0];
}

float WebCore::SVGInlineTextBox::calculateBoundaries(WebCore::SVGInlineTextBox *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  WebCore::AffineTransform *v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  double *v24;
  double v25;
  float64x2_t v26;
  double *v27;
  WebCore::AffineTransform *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float64x2_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float64x2_t v49;
  float64x2_t v50;
  __int128 v51;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if ((*(_BYTE *)(v4 + 45) & 2) == 0)
  {
    __break(0xC471u);
    goto LABEL_50;
  }
  if (*(_BYTE *)(v4 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652C8D4);
  }
  if (v3)
    v3 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652C8F4);
  }
  if (*(_BYTE *)(v3 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652C914);
  }
  v5 = *(float *)(v4 + 120);
  v7 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v3 + 128), a2) + 4);
  v8 = 0.0;
  v49 = (float64x2_t)constinit_10;
  v50 = (float64x2_t)unk_1969FE138;
  v51 = xmmword_1969FE148;
  v9 = *((unsigned int *)this + 31);
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  if ((_DWORD)v9)
  {
    v14 = 0;
    v15 = 0;
    v16 = v9 << 7;
    v44 = v7 / v5;
    while (v15 < *((unsigned int *)this + 31))
    {
      v17 = *((_QWORD *)this + 14);
      v18 = (double *)(v17 + v14);
      v20 = *(float *)(v17 + v14 + 12);
      v19 = *(float *)(v17 + v14 + 16);
      v21 = v19 - v44;
      v23 = *(float *)(v17 + v14 + 20);
      v22 = *(float *)(v17 + v14 + 24);
      v45 = v20;
      v46 = v19 - v44;
      v47 = v23;
      v48 = v22;
      if ((*(_DWORD *)(v17 + v14 + 8) & 0x80000000) != 0)
      {
        WebCore::SVGTextFragment::buildTransformForTextOnPath((WebCore::SVGTextFragment *)v18, &v49);
      }
      else
      {
        v25 = v18[4];
        v24 = v18 + 4;
        if (v25 == 1.0
          && *(double *)(v17 + v14 + 40) == 0.0
          && *(double *)(v17 + v14 + 48) == 0.0
          && *(double *)(v17 + v14 + 56) == 1.0
          && *(double *)(v17 + v14 + 64) == 0.0
          && (v42 = v17 + v14, *(double *)(v17 + v14 + 72) == 0.0))
        {
          v43 = *(float64x2_t *)(v42 + 96);
          v49 = *(float64x2_t *)(v42 + 80);
          v50 = v43;
          v51 = *(_OWORD *)(v42 + 112);
        }
        else
        {
          v26 = *(float64x2_t *)(v24 + 2);
          v49 = *(float64x2_t *)v24;
          v50 = v26;
          v51 = *((_OWORD *)v24 + 2);
          WebCore::SVGTextFragment::transformAroundOrigin((WebCore::SVGTextFragment *)&v49, v6, v20, v19);
          v27 = (double *)(v17 + v14);
          v28 = (WebCore::AffineTransform *)(v17 + v14 + 80);
          if (!WebCore::AffineTransform::isIdentity(v28))
          {
            v29 = v27[11];
            v30 = v27[12];
            v31 = v27[13];
            v32 = v31 * v49.f64[1] + v49.f64[0] * v29;
            v33 = v30 * v50.f64[1] + v50.f64[0] * *(double *)v28;
            v34 = v31 * v50.f64[1] + v50.f64[0] * v29;
            v35 = v27[14] + v30 * *((double *)&v51 + 1) + *(double *)&v51 * *(double *)v28;
            v36 = v27[15] + v31 * *((double *)&v51 + 1) + *(double *)&v51 * v29;
            v49.f64[0] = v30 * v49.f64[1] + v49.f64[0] * *(double *)v28;
            v49.f64[1] = v32;
            v50.f64[0] = v33;
            v50.f64[1] = v34;
            *(double *)&v51 = v35;
            *((double *)&v51 + 1) = v36;
          }
        }
      }
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v49, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v50, (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| *(double *)&v51 != 0.0|| *((double *)&v51 + 1) != 0.0)
      {
        v20 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v49, (const WebCore::FloatRect *)&v45);
        v21 = v37;
        v23 = v38;
        v22 = v39;
        v45 = v20;
        v46 = v37;
        v47 = v38;
      }
      if (v23 > 0.0 && v22 > 0.0)
      {
        if (v10 <= 0.0 || v8 <= 0.0)
        {
          v12 = v20;
          v11 = v21;
          v10 = v23;
          v8 = v22;
        }
        else
        {
          v40 = v12 + v10;
          if (v20 < v12)
            v12 = v20;
          v41 = v11 + v8;
          if (v21 < v11)
            v11 = v21;
          if (v40 < (float)(v23 + v20))
            v40 = v23 + v20;
          if (v41 < (float)(v22 + v21))
            v41 = v22 + v21;
          v10 = v40 - v12;
          v8 = v41 - v11;
        }
      }
      ++v15;
      v14 += 128;
      if (v16 == v14)
        return v12;
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x19652C8B4);
  }
  return v12;
}

WTF *WebCore::SVGInlineTextBox::dirtyOwnLineBoxes(WTF **this)
{
  WTF *result;
  void *v3;

  result = (WTF *)WebCore::LegacyInlineBox::dirtyLineBoxes((WebCore::LegacyInlineBox *)this);
  if (*((_DWORD *)this + 30))
  {
    if (*((_DWORD *)this + 31))
      *((_DWORD *)this + 31) = 0;
    result = this[14];
    if (result)
    {
      this[14] = 0;
      *((_DWORD *)this + 30) = 0;
      return (WTF *)WTF::fastFree(result, v3);
    }
  }
  return result;
}

WTF *WebCore::SVGInlineTextBox::dirtyLineBoxes(WebCore::SVGInlineTextBox *this)
{
  WTF *result;
  void *v3;
  uint64_t i;
  uint64_t v5;

  result = (WTF *)(*(uint64_t (**)(WebCore::SVGInlineTextBox *, uint64_t))(*(_QWORD *)this + 176))(this, 1);
  for (i = *((_QWORD *)this + 3); i; i = *(_QWORD *)(i + 24))
  {
    if ((*(_WORD *)(i + 52) & 0x100) != 0)
      break;
    result = (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)i + 176))(i, 1);
  }
  if (*((_DWORD *)this + 30))
  {
    if (*((_DWORD *)this + 31))
      *((_DWORD *)this + 31) = 0;
    result = (WTF *)*((_QWORD *)this + 14);
    if (result)
    {
      *((_QWORD *)this + 14) = 0;
      *((_DWORD *)this + 30) = 0;
      result = (WTF *)WTF::fastFree(result, v3);
    }
  }
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5))
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x19652CA68);
    }
    while (1)
    {
      result = WebCore::SVGInlineTextBox::dirtyOwnLineBoxes((WTF **)v5);
      v5 = *(_QWORD *)(v5 + 64);
      if (!v5)
        break;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) & 1) == 0)
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t WebCore::SVGInlineTextBox::offsetForPositionInFragment(WebCore::SVGInlineTextBox *this, const WebCore::SVGTextFragment *a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  float64x2_t v17;
  float64x2_t v18;
  __int128 v19;
  _BYTE v20[8];
  WTF::StringImpl *v21;
  float v22;

  v6 = *((_QWORD *)this + 4);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if ((*(_BYTE *)(v7 + 45) & 2) == 0)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  if (*(_BYTE *)(v7 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652CC58);
  }
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  if ((*(_BYTE *)(v6 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652CC78);
  }
  if (*(_BYTE *)(v6 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652CC98);
  }
  v8 = *(float *)(v7 + 120);
  WebCore::SVGInlineTextBox::constructTextRun((WebCore::SVGInlineTextBox *)v20, (unint64_t)this, (const WebCore::SVGTextFragment *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 124), *(_DWORD *)a2, *((_DWORD *)a2 + 2));
  v17 = (float64x2_t)constinit_10;
  v18 = (float64x2_t)unk_1969FE138;
  v19 = xmmword_1969FE148;
  WebCore::SVGTextFragment::buildFragmentTransform(a2, &v17);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v17, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v18, (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| *(double *)&v19 != 0.0|| *((double *)&v19 + 1) != 0.0)
  {
    v9 = hypot(v17.f64[0], v17.f64[1]);
    v22 = v9;
  }
  v10 = *((_QWORD *)this + 4);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  if ((*(_BYTE *)(v10 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652CCB8);
  }
  if (*(_BYTE *)(v10 + 46) != 72)
  {
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x19652CC38);
  }
  v11 = *(_DWORD *)a2;
  v12 = *((_DWORD *)this + 18);
  v14 = WebCore::FontCascade::offsetForPosition((WebCore::FontCascade *)(v10 + 128), (const WebCore::TextRun *)v20, v8 * a3);
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v11 - v12 + v14;
}

uint64_t WebCore::SVGInlineTextBox::renderer(uint64_t this)
{
  if (this)
    this = *(_QWORD *)(this + 8);
  if ((*(_BYTE *)(this + 45) & 2) == 0 || *(_BYTE *)(this + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652CD18);
  }
  return this;
}

WTF::StringImpl *WebCore::SVGInlineTextBox::constructTextRun(WebCore::SVGInlineTextBox *this, unint64_t a2, const WebCore::SVGTextFragment *a3, unsigned int a4, int a5)
{
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;

  v7 = a3;
  v9 = *(_QWORD *)(a2 + 32);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  if ((*(_BYTE *)(v9 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652CEF8);
  }
  if (*(_BYTE *)(v9 + 46) != 72)
  {
    a2 = (unint64_t)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app"
                           "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/"
                           "local/include/wtf/TypeCasts.h";
    __break(0xC471u);
    goto LABEL_34;
  }
  v10 = *(_QWORD *)(v9 + 104);
  if (v10)
    v11 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  else
    v11 = 0x100000000;
  if (v11 <= a4)
  {
    v13 = 0x100000000;
  }
  else
  {
    v12 = a5 & 0x7FFFFFFF;
    if (v11 - a4 <= (a5 & 0x7FFFFFFFu))
    {
      if (!a4)
      {
        v13 = v11;
        goto LABEL_12;
      }
      v12 = v11 - a4;
    }
    v13 = v12;
    v14 = v11 - (unint64_t)a4;
    if ((v11 & 0x100000000) != 0)
    {
      if (v14 >= v13)
      {
        v13 |= 0x100000000uLL;
        goto LABEL_12;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v14 < v13)
      goto LABEL_34;
  }
LABEL_12:
  v5 = *(unsigned __int8 *)(a2 + 54);
  v6 = *(unsigned __int16 *)(a2 + 52);
  a2 = v13;
  if ((v13 & 0x100000000) != 0)
  {
    if ((_DWORD)v13)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_15:
      result = v16;
      goto LABEL_16;
    }
  }
  else if ((_DWORD)v13)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_15;
  }
LABEL_35:
  result = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_16:
  *(_DWORD *)this = 0;
  if (result)
    *(_DWORD *)result += 2;
  *((_QWORD *)this + 1) = result;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 3) = 0x3F80000000000000;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = 4;
  *((_BYTE *)this + 37) = (v7 >> 2) & 4 | *((_BYTE *)this + 37) & 0xE0 | ((v6 | (v5 << 16)) >> 1) & 2 | 8;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_BYTE *)this + 37) |= 0x10u;
  return result;
}

float64_t WebCore::SVGTextFragment::buildFragmentTransform(WebCore::SVGTextFragment *this, float64x2_t *a2)
{
  float64x2_t *v4;
  WebCore::AffineTransform *v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  WebCore::AffineTransform *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;

  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
  {
    *(_QWORD *)&v6.f64[0] = *(_OWORD *)&WebCore::SVGTextFragment::buildTransformForTextOnPath(this, a2);
  }
  else
  {
    v4 = (float64x2_t *)((char *)this + 32);
    if (WebCore::AffineTransform::isIdentity((WebCore::SVGTextFragment *)((char *)this + 32)))
    {
      v6 = *((float64x2_t *)this + 5);
      v7 = *((float64x2_t *)this + 7);
      a2[1] = *((float64x2_t *)this + 6);
      a2[2] = v7;
      *a2 = v6;
    }
    else
    {
      v8 = *v4;
      v9 = *((float64x2_t *)this + 4);
      a2[1] = *((float64x2_t *)this + 3);
      a2[2] = v9;
      *a2 = v8;
      WebCore::SVGTextFragment::transformAroundOrigin((WebCore::SVGTextFragment *)a2, v5, *((float *)this + 3), *((float *)this + 4));
      v10 = (WebCore::SVGTextFragment *)((char *)this + 80);
      if (!WebCore::AffineTransform::isIdentity(v10))
      {
        v11 = *((float64x2_t *)v10 + 1);
        v14 = *(float64x2_t *)v10;
        v15 = v11;
        v16 = *((float64x2_t *)v10 + 2);
        WebCore::AffineTransform::multiply((WebCore::AffineTransform *)&v14, (const WebCore::AffineTransform *)a2);
        v12 = v15;
        *a2 = v14;
        a2[1] = v12;
        v6.f64[0] = v16.f64[0];
        a2[2] = v16;
      }
    }
  }
  return v6.f64[0];
}

float WebCore::SVGInlineTextBox::selectionRectForTextFragment(WebCore::SVGInlineTextBox *this, const WebCore::SVGTextFragment *a2, unsigned int a3, unsigned int a4, const WebCore::RenderStyle *a5)
{
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  double v15;
  int v16;
  float v17;
  double v18;
  int v19;
  unsigned int v20;
  double v21;
  int v22;
  double v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  int v33;
  WTF::StringImpl *v34;
  float v35;
  WTF::StringImpl *v36;
  WTF *v38;
  void *v39;
  signed int v40;
  double v41;
  double v42;
  float v43;
  unsigned int v44;
  _BYTE v45[8];
  WTF::StringImpl *v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v10 = *((_QWORD *)this + 4);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  if ((*(_BYTE *)(v11 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652D33CLL);
  }
  if (*(_BYTE *)(v11 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652D35CLL);
  }
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  if ((*(_BYTE *)(v10 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652D37CLL);
  }
  if (*(_BYTE *)(v10 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652D39CLL);
  }
  v12 = *(float *)(v11 + 120);
  v13 = v10 + 128;
  v14 = (float)(v12 * *((float *)a2 + 4))
      - *(float *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v10 + 128), a2) + 4);
  v15 = (float)(v12 * *((float *)a2 + 6)) * 64.0;
  if (v15 >= 2147483650.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v15 <= -2147483650.0)
  {
    v16 = 0x80000000;
  }
  else
  {
    v16 = (int)v15;
  }
  v17 = (float)v16 * 0.015625;
  v18 = (float)((float)(v12 * *((float *)a2 + 3)) + 0.0) * 64.0;
  if (v18 > -2147483650.0)
    v19 = (int)v18;
  else
    v19 = 0x80000000;
  if (v18 < 2147483650.0)
    v20 = v19;
  else
    v20 = 0x7FFFFFFF;
  v21 = v14 * 64.0;
  if (v21 > -2147483650.0)
    v22 = (int)v21;
  else
    v22 = 0x80000000;
  if (v21 >= 2147483650.0)
    v22 = 0x7FFFFFFF;
  v48 = v20;
  v49 = v22;
  LODWORD(v50) = 0;
  v23 = v17 * 64.0;
  if (v23 >= 2147483650.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else if (v23 <= -2147483650.0)
  {
    v24 = 0x80000000;
  }
  else
  {
    v24 = (int)v23;
  }
  HIDWORD(v50) = v24;
  WebCore::SVGInlineTextBox::constructTextRun((WebCore::SVGInlineTextBox *)v45, (unint64_t)this, (const WebCore::SVGTextFragment *)*((unsigned int *)a5 + 11), *(_DWORD *)a2, *((_DWORD *)a2 + 2));
  v25 = *((_QWORD *)this + 4);
  if (v25)
    v25 = *(_QWORD *)(v25 + 8);
  if ((*(_BYTE *)(v25 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652D3BCLL);
  }
  if (*(_BYTE *)(v25 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652D3DCLL);
  }
  v26 = *(unsigned __int16 *)(v25 + 112);
  if (v26 <= 0x100)
    LOBYTE(v26) = 0;
  WebCore::FontCascade::adjustSelectionRectForText(v13, (void *)(v26 != 0), (uint64_t)v45, (WebCore::LayoutRect *)&v48, a3, a4 | 0x100000000);
  v27 = *((_QWORD *)this + 4);
  if (v27)
    v27 = *(_QWORD *)(v27 + 8);
  if ((*(_BYTE *)(v27 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652D3FCLL);
  }
  if (*(_BYTE *)(v27 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652D41CLL);
  }
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) + 40) + 8) + 528);
  v29 = 1.0;
  if (v28)
  {
    v30 = *(_QWORD *)(v28 + 8);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 24);
      if (v31)
      {
        v32 = *(float **)(v31 + 8);
        if (v32)
        {
          v33 = (*(_DWORD *)v32)++;
          v29 = v32[91];
          if (v33)
          {
            *(_DWORD *)v32 = v33;
          }
          else
          {
            WebCore::Page::~Page((WebCore::Page *)v32);
            WTF::fastFree(v38, v39);
          }
        }
      }
    }
  }
  if ((v47 & 2) != 0)
  {
    v40 = v48 + v50;
    if (__OFADD__(v48, (_DWORD)v50))
      v40 = (v48 >> 31) + 0x7FFFFFFF;
    v41 = (double)v40 * 0.015625 + -0.000122070312;
    if (v41 < 0.0)
      v42 = round((v41 + (double)-v40) * v29) / v29 - (double)-v40;
    else
      v42 = round(v41 * v29) / v29;
    v52 = v50;
    v44 = v48 + v50;
    if (__OFADD__(v48, (_DWORD)v50))
      v44 = (v48 >> 31) + 0x7FFFFFFF;
    v51 = ((unint64_t)v49 << 32) | v44;
    v43 = v42;
    v35 = v43 - WebCore::snapSizeToDevicePixel((int *)&v52, (int *)&v51, v29);
  }
  else
  {
    v35 = WebCore::snapRectToDevicePixels((int *)&v48, v29);
  }
  if (v12 != 1.0)
    v35 = (float)(1.0 / v12) * v35;
  v36 = v46;
  v46 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v34);
    else
      *(_DWORD *)v36 -= 2;
  }
  return v35;
}

uint64_t WebCore::SVGInlineTextBox::localSelectionRect(WebCore::SVGInlineTextBox *this, unsigned int a2, unsigned int a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const WebCore::RenderStyle *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float64x2_t v35;
  float32x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint16x4_t v39;
  int32x2_t v40;
  int64x2_t v41;
  float64x2_t v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  double v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float64x2_t *v59;
  double v60;
  BOOL v61;
  float64x2_t v62;
  float64x2_t v63;
  int8x16_t v64;
  unsigned int v65;
  float32x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  int32x2_t v69;
  int64x2_t v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int32x2_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int32x2_t v91;
  int8x16_t v92;
  int32x2_t v93;
  int8x16_t v94;
  int32x2_t v95;
  float v97;
  float v98;
  float v99;
  float v100;
  int8x16_t v101;
  float64x2_t v102;
  float64x2_t v103;

  v7 = *((_DWORD *)this + 18);
  v6 = *((_DWORD *)this + 19);
  WebCore::LegacyInlineTextBox::isLineBreak(this);
  v8 = v6 + v7;
  if (__CFADD__(v6, v7))
  {
    __break(1u);
    goto LABEL_112;
  }
  if (v8 >= a2)
    v9 = a2;
  else
    v9 = v6 + v7;
  v10 = v9 - v7;
  if (v7 <= a2)
    v11 = v10;
  else
    v11 = 0;
  if (v8 >= a3)
    v8 = a3;
  v12 = v8 - v7;
  if (v7 <= a3)
    v13 = v12;
  else
    v13 = 0;
  v14.i64[1] = 0;
  if (v11 >= v13)
    return v14.i64[1];
  v15 = *((_QWORD *)this + 4);
  if (v15)
    v15 = *(_QWORD *)(v15 + 8);
  if ((*(_BYTE *)(v15 + 45) & 2) == 0)
  {
LABEL_112:
    __break(0xC471u);
    JUMPOUT(0x19652DC78);
  }
  if (*(_BYTE *)(v15 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652DC98);
  }
  v16 = *(_QWORD *)(v15 + 32);
  if (v16)
    v16 = *(_QWORD *)(v16 + 8);
  v17 = *((unsigned int *)this + 31);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 0;
    v20 = (const WebCore::RenderStyle *)(v16 + 80);
    v21 = v17 << 7;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    v25 = 0.0;
    while (1)
    {
      if (v19 >= *((unsigned int *)this + 31))
      {
        __break(0xC471u);
        JUMPOUT(0x19652DCA0);
      }
      v26 = *((_QWORD *)this + 14);
      v27 = *(_DWORD *)(v26 + v18) - *((_DWORD *)this + 18);
      v28 = (*(_DWORD *)(v26 + v18 + 8) & 0x7FFFFFFF) + v27;
      if (v27 <= v11)
        v29 = v11;
      else
        v29 = *(_DWORD *)(v26 + v18) - *((_DWORD *)this + 18);
      if (v13 < v28)
        v28 = v13;
      if (v29 >= v28)
        goto LABEL_66;
      v30 = WebCore::SVGInlineTextBox::selectionRectForTextFragment(this, (const WebCore::SVGTextFragment *)(v26 + v18), v29 - v27, v28 - v27, v20);
      v97 = v30;
      v98 = v31;
      v99 = v32;
      v100 = v33;
      if ((*(_DWORD *)(v26 + v18 + 8) & 0x80000000) != 0)
      {
        v59 = (float64x2_t *)(v26 + v18);
        v60 = *(double *)(v26 + v18 + 80);
        v61 = v60 == 1.0
           && v59[5].f64[1] == 0.0
           && *(double *)(v26 + v18 + 96) == 0.0
           && *(double *)(v26 + v18 + 104) == 1.0
           && *(double *)(v26 + v18 + 112) == 0.0
           && *(double *)(v26 + v18 + 120) == 0.0;
        v49 = v59[2];
        v51 = v59[3];
        v53 = v59[4];
        if (!v61)
        {
          v62 = vmlaq_n_f64(vmulq_n_f64(v51, *(double *)(v26 + v18 + 88)), v49, v60);
          v63 = vmulq_n_f64(v51, *(double *)(v26 + v18 + 120));
          v51 = vmlaq_n_f64(vmulq_n_f64(v51, *(double *)(v26 + v18 + 104)), v49, *(double *)(v26 + v18 + 96));
          v53 = vaddq_f64(v53, vmlaq_n_f64(v63, v49, *(double *)(v26 + v18 + 112)));
          v49 = v62;
        }
        v101 = (int8x16_t)v49;
        v102 = v51;
        v103 = v53;
        v50 = v49.f64[1];
        v64 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v51, (float64x2_t)xmmword_1968A14C0));
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v64))) & 1) == 0
          && v53.f64[0] == 0.0
          && (v54 = v53.f64[1], v53.f64[1] == 0.0))
        {
          v52 = 1.0;
          v49.f64[0] = 1.0;
        }
        else
        {
          v65 = (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, v64)) & 0xF) == 0;
          v66 = *(float32x2_t *)(v26 + v18 + 12);
          v67 = vaddq_f64(v53, vcvtq_f64_f32(v66));
          v68 = vcvtq_f64_f32(vneg_f32(v66));
          v69 = vdup_n_s32(v65);
          v70.i64[0] = v69.u32[0];
          v70.i64[1] = v69.u32[1];
          v53 = vaddq_f64(v67, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v70, 0x3FuLL)), (int8x16_t)v68, (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v51, v68, 1), v49, v68.f64[0])));
          v103 = v53;
          v54 = v53.f64[1];
          v52 = v51.f64[1];
        }
        goto LABEL_46;
      }
      v34 = v26 + v18;
      if (*(double *)(v26 + v18 + 32) == 1.0
        && *(double *)(v34 + 40) == 0.0
        && *(double *)(v26 + v18 + 48) == 0.0
        && *(double *)(v26 + v18 + 56) == 1.0
        && *(double *)(v26 + v18 + 64) == 0.0
        && *(double *)(v26 + v18 + 72) == 0.0)
      {
        v49 = *(float64x2_t *)(v26 + v18 + 96);
        v101 = *(int8x16_t *)(v26 + v18 + 80);
        v102 = v49;
        v103 = *(float64x2_t *)(v26 + v18 + 112);
        v50 = *(double *)&v101.i64[1];
        *(_QWORD *)&v49.f64[0] = v101.i64[0];
        v52 = v102.f64[1];
        v51.f64[0] = v102.f64[0];
        v54 = v103.f64[1];
        v53.f64[0] = v103.f64[0];
      }
      else
      {
        v35 = *(float64x2_t *)(v26 + v18 + 64);
        v102 = *(float64x2_t *)(v26 + v18 + 48);
        v103 = v35;
        v101 = *(int8x16_t *)(v26 + v18 + 32);
        v36 = *(float32x2_t *)(v34 + 12);
        v37 = vaddq_f64(v35, vcvtq_f64_f32(v36));
        v38 = vcvtq_f64_f32(vneg_f32(v36));
        v39 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(v101, v101, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v102, (float64x2_t)xmmword_1968A14C0))));
        v39.i16[0] = vmaxv_u16(v39);
        v40 = vdup_n_s32(v39.i32[0] ^ 1u);
        v41.i64[0] = v40.u32[0];
        v41.i64[1] = v40.u32[1];
        v42 = vaddq_f64(v37, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v41, 0x3FuLL)), (int8x16_t)v38, (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v102, v38, 1), (float64x2_t)v101, v38.f64[0])));
        v103 = v42;
        v43 = *(double *)(v34 + 80);
        v44 = v26 + v18;
        if (v43 != 1.0)
        {
          v45 = *(double *)(v44 + 88);
LABEL_33:
          v46 = *(double *)(v26 + v18 + 96);
          v47 = *(double *)(v26 + v18 + 104);
          v48 = *(double *)(v26 + v18 + 120);
          v49.f64[0] = vmlad_n_f64(vmuld_lane_f64(v46, (float64x2_t)v101, 1), v43, *(double *)v101.i64);
          v50 = vmlad_n_f64(vmuld_lane_f64(v47, (float64x2_t)v101, 1), v45, *(double *)v101.i64);
          v51.f64[0] = vmlad_n_f64(vmuld_lane_f64(v46, v102, 1), v43, v102.f64[0]);
          v52 = vmlad_n_f64(vmuld_lane_f64(v47, v102, 1), v45, v102.f64[0]);
          v53.f64[0] = *(double *)(v26 + v18 + 112) + vmlad_n_f64(vmuld_lane_f64(v46, v42, 1), v43, v42.f64[0]);
          v101.i64[0] = *(_QWORD *)&v49.f64[0];
          *(double *)&v101.i64[1] = v50;
          v102.f64[0] = v51.f64[0];
          v102.f64[1] = v52;
          v54 = v48 + vmlad_n_f64(vmuld_lane_f64(v47, v42, 1), v45, v42.f64[0]);
          v103.f64[0] = v53.f64[0];
          v103.f64[1] = v54;
          goto LABEL_46;
        }
        v45 = *(double *)(v44 + 88);
        if (v45 != 0.0
          || *(double *)(v44 + 96) != 0.0
          || *(double *)(v26 + v18 + 104) != 1.0
          || *(double *)(v26 + v18 + 112) != 0.0
          || *(double *)(v26 + v18 + 120) != 0.0)
        {
          goto LABEL_33;
        }
        v54 = v42.f64[1];
        v50 = *(double *)&v101.i64[1];
        v52 = v102.f64[1];
        v53.f64[0] = v42.f64[0];
        v51.f64[0] = v102.f64[0];
        *(_QWORD *)&v49.f64[0] = v101.i64[0];
      }
LABEL_46:
      if (v49.f64[0] != 1.0 || v50 != 0.0 || v51.f64[0] != 0.0 || v52 != 1.0 || v53.f64[0] != 0.0 || v54 != 0.0)
      {
        v30 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v101, (const WebCore::FloatRect *)&v97);
        v97 = v30;
        v98 = v31;
        v99 = v32;
      }
      if (v32 > 0.0 && v33 > 0.0)
      {
        if (v24 <= 0.0 || v25 <= 0.0)
        {
          v22 = v30;
          v23 = v31;
          v24 = v32;
          v25 = v33;
        }
        else
        {
          v55 = v22 + v24;
          if (v30 < v22)
            v22 = v30;
          v56 = v23 + v25;
          if (v31 < v23)
            v23 = v31;
          v57 = v32 + v30;
          if (v55 >= v57)
            v57 = v55;
          v58 = v33 + v31;
          if (v56 >= v58)
            v58 = v56;
          v24 = v57 - v22;
          v25 = v58 - v23;
        }
      }
LABEL_66:
      ++v19;
      v18 += 128;
      if (v21 == v18)
        goto LABEL_84;
    }
  }
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
LABEL_84:
  v71 = floorf(v22);
  v72 = 2147500000.0;
  if (v71 < 2147500000.0)
  {
    v72 = -2147500000.0;
    if (v71 > -2147500000.0)
      v72 = (float)(int)v71;
  }
  v73 = floorf(v23);
  v74 = 2147500000.0;
  if (v73 < 2147500000.0)
  {
    v74 = -2147500000.0;
    if (v73 > -2147500000.0)
      v74 = (float)(int)v73;
  }
  v75 = ceilf(v22 + v24);
  v76 = 2147500000.0;
  if (v75 < 2147500000.0)
  {
    v76 = -2147500000.0;
    if (v75 > -2147500000.0)
      v76 = (float)(int)v75;
  }
  v77 = ceilf(v23 + v25);
  v78 = 2147500000.0;
  if (v77 < 2147500000.0)
  {
    v78 = -2147500000.0;
    if (v77 > -2147500000.0)
      v78 = (float)(int)v77;
  }
  if (v72 >= 2147500000.0)
  {
    v79 = 0x7FFFFFFFLL;
  }
  else if (v72 <= -2147500000.0)
  {
    v79 = 0x80000000;
  }
  else
  {
    v79 = (int)v72;
  }
  v80 = 0x7FFFFFFFLL;
  v81 = 0x80000000;
  if (v74 > -2147500000.0)
    v81 = (int)v74;
  if (v74 < 2147500000.0)
    v80 = v81;
  v82 = v76 - v72;
  v83 = v78 - v74;
  if (v82 >= 2147500000.0)
  {
    v84 = 0x7FFFFFFFLL;
  }
  else if (v82 <= -2147500000.0)
  {
    v84 = 0x80000000;
  }
  else
  {
    v84 = (int)v82;
  }
  if (v83 >= 2147500000.0)
  {
    v85 = 0x7FFFFFFFLL;
  }
  else if (v83 <= -2147500000.0)
  {
    v85 = 0x80000000;
  }
  else
  {
    v85 = (int)v83;
  }
  v86.i64[0] = v84;
  v86.i64[1] = v79;
  v87.i64[0] = v85;
  v87.i64[1] = v80;
  v88 = vcgt_s32((int32x2_t)__PAIR64__(v79, v84), (int32x2_t)0xFE000000FE000000);
  v89.i64[0] = v88.i32[0];
  v89.i64[1] = v88.i32[1];
  v90 = v89;
  v91 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v79, v84));
  v89.i64[0] = v91.i32[0];
  v89.i64[1] = v91.i32[1];
  v92 = vorrq_s8(vandq_s8(v89, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64(v86, 6uLL), v89), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
  v93 = vcgt_s32((int32x2_t)__PAIR64__(v80, v85), (int32x2_t)0xFE000000FE000000);
  v89.i64[0] = v93.i32[0];
  v89.i64[1] = v93.i32[1];
  v94 = v89;
  v95 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v80, v85));
  v89.i64[0] = v95.i32[0];
  v89.i64[1] = v95.i32[1];
  v14 = vorrq_s8(vbslq_s8(v94, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v89, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v87, 0x26uLL))), vbslq_s8(v90, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v92));
  return v14.i64[1];
}

WTF::StringImpl *WebCore::SVGInlineTextBox::paint(WTF::StringImpl *result, uint64_t a2, int32x2_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  WebCore::RenderStyle *v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::AffineTransform *v26;
  __int128 v27;
  __int128 v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __n128 v39;
  int v40;
  unint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unsigned int v48;
  int v50;
  uint64_t v51;
  BOOL v52;
  char v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  _BOOL4 v56;
  char v57;
  float v58;
  int v59;
  int32x2_t *v60;
  WebCore::RenderStyle *v61;
  int v62;
  uint64_t v63;
  WebCore::RenderStyle *CachedPseudoStyle;
  _BOOL4 v65;
  int v66;
  WTF::StringImpl *v67[2];
  float64x2_t v68;
  __int128 v69;

  v5 = (uint64_t)result;
  v6 = *((_QWORD *)result + 4);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  if ((*(_BYTE *)(v6 + 45) & 2) == 0)
  {
    __break(0xC471u);
    goto LABEL_142;
  }
  if (*(_BYTE *)(v6 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652E27CLL);
  }
  v7 = *(_QWORD *)(v6 + 32);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v7 + 120) & 0x30) == 0)
  {
    v8 = *(_QWORD *)(*((_QWORD *)result + 3) + 32);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    if ((*(_BYTE *)(v9 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652E29CLL);
    }
    v10 = *(unsigned __int16 *)(a2 + 16);
    v11 = *(_DWORD *)(a2 + 20);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40) + 8) + 3382))
    {
      v12 = 0;
    }
    else
    {
      result = (WTF::StringImpl *)WebCore::LegacyInlineTextBox::selectionState(result);
      v12 = (_DWORD)result != 0;
    }
    if (v12 || v10 != 128)
    {
      v13 = *(_QWORD *)(v5 + 32);
      if (v13)
        v13 = *(_QWORD *)(v13 + 8);
      if ((*(_BYTE *)(v13 + 45) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19652E2BCLL);
      }
      if (*(_BYTE *)(v13 + 46) != 72)
      {
        __break(0xC471u);
        JUMPOUT(0x19652E2DCLL);
      }
      if (*(float *)(v13 + 300) >= 0.5)
      {
        v14 = (WebCore::RenderStyle *)(v9 + 80);
        v15 = *(_QWORD *)(v9 + 136);
        v16 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 16) + 56);
        v65 = v16 != 1;
        if (*(_BYTE *)(*(_QWORD *)(v15 + 24) + 80) == 1)
        {
          v66 = 0;
        }
        else
        {
          v50 = 0;
          v51 = *(_QWORD *)(v9 + 104);
          if (*(_BYTE *)(v51 + 248) && *(_BYTE *)(v51 + 248) != 11)
          {
            if (*(_BYTE *)(v51 + 250))
              v52 = *(float *)(v51 + 244) == 0.0;
            else
              v52 = *(_DWORD *)(v51 + 244) == 0;
            v50 = v52;
          }
          v66 = v50 ^ 1;
        }
        if ((v11 & 2) == 0 && v12)
        {
          LODWORD(v67[0]) = 8;
          v54 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
          if (*MEMORY[0x1E0CBF2F8])
            *(_DWORD *)v54 += 2;
          v67[1] = v54;
          CachedPseudoStyle = (WebCore::RenderStyle *)WebCore::RenderElement::getCachedPseudoStyle(v9, (uint64_t)v67, 0);
          result = v67[1];
          v67[1] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
            else
              *(_DWORD *)result -= 2;
          }
          if (CachedPseudoStyle)
          {
            v56 = v16 != 1 || *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)CachedPseudoStyle + 7) + 16) + 56) != 1;
            v65 = v56;
            if ((v66 & 1) != 0)
            {
              v66 = 1;
            }
            else
            {
              result = (WTF::StringImpl *)WebCore::RenderStyle::hasVisibleStroke(CachedPseudoStyle);
              v66 = (int)result;
            }
            v14 = (WebCore::RenderStyle *)(v9 + 80);
          }
          else
          {
            v14 = (WebCore::RenderStyle *)(v9 + 80);
            CachedPseudoStyle = (WebCore::RenderStyle *)(v9 + 80);
          }
        }
        else
        {
          CachedPseudoStyle = (WebCore::RenderStyle *)(v9 + 80);
        }
        v18 = *(_QWORD *)(v5 + 32);
        if (v18)
          v19 = *(_QWORD *)(v18 + 8);
        else
          v19 = 0;
        if ((*(_BYTE *)(v19 + 45) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19652E2FCLL);
        }
        if (*(_BYTE *)(v19 + 46) != 72)
        {
          __break(0xC471u);
          JUMPOUT(0x19652E31CLL);
        }
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 1148) & 0x10) != 0)
        {
          v65 = 1;
          v66 = 0;
        }
        *(_OWORD *)v67 = constinit_10;
        v68 = (float64x2_t)unk_1969FE138;
        v69 = xmmword_1969FE148;
        v20 = *(unsigned int *)(v5 + 124);
        if ((_DWORD)v20)
        {
          v60 = a3;
          v61 = v14;
          v62 = v10;
          v21 = 0;
          v22 = 0;
          v63 = v20 << 7;
          while (1)
          {
            if (v22 >= *(unsigned int *)(v5 + 124))
            {
              __break(0xC471u);
              JUMPOUT(0x19652E5D0);
            }
            v23 = *(_QWORD *)(v5 + 112);
            v24 = v23 + v21;
            v25 = *(_QWORD *)(a2 + 80);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 96))(v25, 1);
            if ((*(_DWORD *)(v23 + v21 + 8) & 0x80000000) != 0)
            {
              WebCore::SVGTextFragment::buildTransformForTextOnPath((WebCore::SVGTextFragment *)(v23 + v21), (float64x2_t *)v67);
            }
            else if (*(double *)(v24 + 32) == 1.0
                   && *(double *)(v23 + v21 + 40) == 0.0
                   && *(double *)(v23 + v21 + 48) == 0.0
                   && *(double *)(v23 + v21 + 56) == 1.0
                   && *(double *)(v23 + v21 + 64) == 0.0
                   && (v44 = v23 + v21, *(double *)(v23 + v21 + 72) == 0.0))
            {
              v45 = *(_OWORD *)(v44 + 80);
              v46 = *(_OWORD *)(v44 + 112);
              v68 = *(float64x2_t *)(v44 + 96);
              v69 = v46;
              *(_OWORD *)v67 = v45;
            }
            else
            {
              v27 = *(_OWORD *)(v24 + 32);
              v28 = *(_OWORD *)(v24 + 64);
              v68 = *(float64x2_t *)(v24 + 48);
              v69 = v28;
              *(_OWORD *)v67 = v27;
              v29 = (double *)(v23 + v21);
              WebCore::SVGTextFragment::transformAroundOrigin((WebCore::SVGTextFragment *)v67, v26, *(float *)(v23 + v21 + 12), *(float *)(v23 + v21 + 16));
              v30 = v29 + 10;
              if (!WebCore::AffineTransform::isIdentity((WebCore::AffineTransform *)(v29 + 10)))
              {
                v31 = v29[11];
                v32 = v29[12];
                v33 = v29[13];
                v34 = v33 * *(double *)&v67[1] + *(double *)v67 * v31;
                v35 = v32 * v68.f64[1] + v68.f64[0] * *v30;
                v36 = v33 * v68.f64[1] + v68.f64[0] * v31;
                v37 = v29[14] + v32 * *((double *)&v69 + 1) + *(double *)&v69 * *v30;
                v38 = v29[15] + v33 * *((double *)&v69 + 1) + *(double *)&v69 * v31;
                *(double *)v67 = v32 * *(double *)&v67[1] + *(double *)v67 * *v30;
                v67[1] = *(WTF::StringImpl **)&v34;
                v68.f64[0] = v35;
                v68.f64[1] = v36;
                *(double *)&v69 = v37;
                *((double *)&v69 + 1) = v38;
              }
            }
            v39 = (__n128)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)v67, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v68, (float64x2_t)xmmword_1968A14C0)));
            v39.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v39);
            v39.n128_u16[0] = vmaxv_u16((uint16x4_t)v39.n128_u64[0]);
            if ((v39.n128_u8[0] & 1) != 0
              || (v39.n128_u64[0] = v69, *(double *)&v69 != 0.0)
              || (v39.n128_u64[0] = *((_QWORD *)&v69 + 1), *((double *)&v69 + 1) != 0.0))
            {
              (*(void (**)(_QWORD, WTF::StringImpl **, __n128))(**(_QWORD **)(a2 + 80) + 656))(*(_QWORD *)(a2 + 80), v67, v39);
            }
            v40 = *(_DWORD *)(v9 + 120);
            if ((v40 & 0x8000) != 0)
              WebCore::SVGInlineTextBox::paintDecoration(v5, *(WebCore::GraphicsContext **)(a2 + 80), 1, v24);
            if ((v40 & 0x10000) != 0)
              WebCore::SVGInlineTextBox::paintDecoration(v5, *(WebCore::GraphicsContext **)(a2 + 80), 2, v24);
            v41 = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 + 104) + 236) >> 11) & 7) - 2;
            v42 = &WebCore::RenderStyle::paintTypesForPaintOrder(WebCore::PaintOrder)::fill;
            if (v41 <= 4)
              v42 = (char *)*(&off_1E344A000 + v41);
            if (!v66)
            {
              if (!v65)
                goto LABEL_58;
              if (!*v42)
              {
                *(_BYTE *)(v5 + 84) = *(_BYTE *)(v5 + 84) & 0xF0 | 5;
                WebCore::SVGInlineTextBox::paintText((WebCore::SVGInlineTextBox *)v5, *(WebCore::GraphicsContext **)(a2 + 80), v61, CachedPseudoStyle, (const WebCore::SVGTextFragment *)v24, v12, v62 == 128);
              }
              if (!v42[1])
              {
                *(_BYTE *)(v5 + 84) = *(_BYTE *)(v5 + 84) & 0xF0 | 5;
                WebCore::SVGInlineTextBox::paintText((WebCore::SVGInlineTextBox *)v5, *(WebCore::GraphicsContext **)(a2 + 80), v61, CachedPseudoStyle, (const WebCore::SVGTextFragment *)v24, v12, v62 == 128);
              }
              if (v42[2])
                goto LABEL_58;
              goto LABEL_62;
            }
            if (*v42 == 1)
              break;
            if (!*v42 && v65)
            {
              v53 = 5;
LABEL_116:
              *(_BYTE *)(v5 + 84) = *(_BYTE *)(v5 + 84) & 0xF0 | v53;
              WebCore::SVGInlineTextBox::paintText((WebCore::SVGInlineTextBox *)v5, *(WebCore::GraphicsContext **)(a2 + 80), v61, CachedPseudoStyle, (const WebCore::SVGTextFragment *)v24, v12, v62 == 128);
            }
            if (v42[1] == 1)
            {
              v57 = 6;
            }
            else
            {
              if (v42[1] || !v65)
                goto LABEL_123;
              v57 = 5;
            }
            *(_BYTE *)(v5 + 84) = *(_BYTE *)(v5 + 84) & 0xF0 | v57;
            WebCore::SVGInlineTextBox::paintText((WebCore::SVGInlineTextBox *)v5, *(WebCore::GraphicsContext **)(a2 + 80), v61, CachedPseudoStyle, (const WebCore::SVGTextFragment *)v24, v12, v62 == 128);
LABEL_123:
            if (v42[2] == 1)
            {
              v43 = 6;
              goto LABEL_63;
            }
            if (v42[2] || !v65)
              goto LABEL_58;
LABEL_62:
            v43 = 5;
LABEL_63:
            *(_BYTE *)(v5 + 84) = *(_BYTE *)(v5 + 84) & 0xF0 | v43;
            WebCore::SVGInlineTextBox::paintText((WebCore::SVGInlineTextBox *)v5, *(WebCore::GraphicsContext **)(a2 + 80), v61, CachedPseudoStyle, (const WebCore::SVGTextFragment *)v24, v12, v62 == 128);
LABEL_58:
            if ((v40 & 0x20000) != 0)
              WebCore::SVGInlineTextBox::paintDecoration(v5, *(WebCore::GraphicsContext **)(a2 + 80), 4, v24);
            *(_BYTE *)(v5 + 84) &= 0xF0u;
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v25 + 104))(v25, 1, v39);
            ++v22;
            v21 += 128;
            if (v63 == v21)
            {
              v18 = *(_QWORD *)(v5 + 32);
              a3 = v60;
              goto LABEL_71;
            }
          }
          v53 = 6;
          goto LABEL_116;
        }
LABEL_71:
        if (v18)
          v18 = *(_QWORD *)(v18 + 8);
        if ((*(_BYTE *)(v18 + 45) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19652E33CLL);
        }
        if (*(_BYTE *)(v18 + 46) != 72)
        {
          __break(0xC471u);
          JUMPOUT(0x19652E35CLL);
        }
        v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 8) + 88) + 16);
        v48 = *(unsigned __int8 *)(v47 + 52);
        if ((v48 & 0xE) != 0 && (v48 & 0xF) != 0)
        {
          v58 = *(float *)(v47 + 48);
          if ((((v58 < 3.0) & (v48 >> 4)) != 0 || v58 > 0.0) && (*(_BYTE *)(v9 + 45) & 0x20) != 0)
          {
            ++*(_DWORD *)(v9 + 16);
            result = (WTF::StringImpl *)WebCore::RenderInline::paintOutline(v9, (WebCore::PaintInfo *)a2, a3);
            v59 = *(_DWORD *)(v9 + 16);
            if (v59)
            {
              *(_DWORD *)(v9 + 16) = v59 - 1;
              return result;
            }
            __break(0xC471u);
LABEL_142:
            JUMPOUT(0x19652E25CLL);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::hasVisibleStroke(WebCore::RenderStyle *this)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  int v5;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 7) + 24) + 80) == 1)
    return 0;
  v2 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v2 + 248))
    v3 = *(_BYTE *)(v2 + 248) == 11;
  else
    v3 = 1;
  if (v3)
  {
    v5 = 0;
  }
  else
  {
    if (*(_BYTE *)(v2 + 250))
      v4 = *(float *)(v2 + 244) == 0.0;
    else
      v4 = *(_DWORD *)(v2 + 244) == 0;
    v5 = v4;
  }
  return v5 ^ 1u;
}

void WebCore::SVGInlineTextBox::paintDecoration(uint64_t a1, WebCore::GraphicsContext *a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  if ((*(_BYTE *)(v8 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652E9B0);
  }
  if (*(_BYTE *)(v8 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652E9D0);
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 120) & 0x78000) == 0)
    return;
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 32);
      v11 = v10 ? *(_QWORD *)(v10 + 8) : 0;
      if ((*(_BYTE *)(v11 + 45) & 8) == 0)
        break;
      if ((*(_BYTE *)(v11 + 100) & 0xF) == 0)
      {
        v9 = *(_QWORD *)(v9 + 24);
        if (v9)
          continue;
      }
      goto LABEL_16;
    }
LABEL_69:
    __break(0xC471u);
    JUMPOUT(0x19652E960);
  }
  v11 = 0;
LABEL_16:
  v12 = *(_QWORD *)(v11 + 104);
  if ((*(_BYTE *)(v12 + 239) & 4) != 0 || (*(_DWORD *)(v11 + 120) & 0x30) == 0x10)
    return;
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652E9F0);
  }
  if (*(_BYTE *)(v7 + 46) != 72)
    goto LABEL_69;
  v13 = *(_QWORD *)(v11 + 136);
  v14 = (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8) + 104) + 236) >> 11) & 7)
      - 2;
  if (v14 > 4)
    v15 = &WebCore::RenderStyle::paintTypesForPaintOrder(WebCore::PaintOrder)::fill;
  else
    v15 = (char *)*(&off_1E344A000 + v14);
  if (*v15 == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(v13 + 24) + 80) == 1)
      goto LABEL_31;
    v17 = 2;
    if (!*(_BYTE *)(v12 + 248) || *(_BYTE *)(v12 + 248) == 11)
      goto LABEL_29;
    if (*(_BYTE *)(v12 + 250))
    {
      if (*(float *)(v12 + 244) == 0.0)
        goto LABEL_31;
    }
    else if (!*(_DWORD *)(v12 + 244))
    {
      goto LABEL_31;
    }
    v17 = 2;
    goto LABEL_29;
  }
  if (!*v15 && *(_BYTE *)(*(_QWORD *)(v13 + 16) + 56) != 1)
  {
    v17 = 1;
LABEL_29:
    *(_BYTE *)(a1 + 84) = *(_BYTE *)(a1 + 84) & 0xF0 | v17;
    WebCore::SVGInlineTextBox::paintDecorationWithStyle(a1, a2, a3, a4, (_QWORD *)v11);
  }
LABEL_31:
  if (!v15[1])
  {
    if (*(_BYTE *)(*(_QWORD *)(v13 + 16) + 56) == 1)
      goto LABEL_42;
    v19 = 1;
    goto LABEL_41;
  }
  if (v15[1] == 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 136) + 24) + 80) != 1)
  {
    v18 = *(_QWORD *)(v11 + 104);
    v19 = 2;
    if (!*(_BYTE *)(v18 + 248) || *(_BYTE *)(v18 + 248) == 11)
      goto LABEL_41;
    if (!*(_BYTE *)(v18 + 250))
    {
      if (!*(_DWORD *)(v18 + 244))
        goto LABEL_42;
      goto LABEL_38;
    }
    if (*(float *)(v18 + 244) != 0.0)
    {
LABEL_38:
      v19 = 2;
LABEL_41:
      *(_BYTE *)(a1 + 84) = *(_BYTE *)(a1 + 84) & 0xF0 | v19;
      WebCore::SVGInlineTextBox::paintDecorationWithStyle(a1, a2, a3, a4, (_QWORD *)v11);
    }
  }
LABEL_42:
  if (v15[2])
  {
    if (v15[2] == 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 136) + 24) + 80) != 1)
    {
      v20 = *(_QWORD *)(v11 + 104);
      v21 = 2;
      if (!*(_BYTE *)(v20 + 248) || *(_BYTE *)(v20 + 248) == 11)
        goto LABEL_53;
      if (*(_BYTE *)(v20 + 250))
      {
        if (*(float *)(v20 + 244) != 0.0)
          goto LABEL_49;
      }
      else if (*(_DWORD *)(v20 + 244))
      {
LABEL_49:
        v21 = 2;
LABEL_53:
        *(_BYTE *)(a1 + 84) = *(_BYTE *)(a1 + 84) & 0xF0 | v21;
        WebCore::SVGInlineTextBox::paintDecorationWithStyle(a1, a2, a3, a4, (_QWORD *)v11);
      }
    }
  }
  else if (*(_BYTE *)(*(_QWORD *)(v13 + 16) + 56) != 1)
  {
    v21 = 1;
    goto LABEL_53;
  }
}

uint64_t WebCore::SVGInlineTextBox::paintText(WebCore::SVGInlineTextBox *this, WebCore::GraphicsContext *a2, const WebCore::RenderStyle *a3, const WebCore::RenderStyle *a4, const WebCore::SVGTextFragment *a5, char a6, char a7)
{
  unsigned int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  WebCore::SVGInlineTextBox *v19;
  WebCore::GraphicsContext *v20;
  const WebCore::RenderStyle *v21;
  const WebCore::SVGTextFragment *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t result;
  unint64_t started;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::RenderElement *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  const WebCore::RenderElement *v40;
  const WebCore::RenderStyle *v43[3];
  _BYTE v44[8];
  WTF::StringImpl *v45;

  if ((a6 & 1) == 0)
  {
    v11 = *(_DWORD *)a5;
    v12 = *((_DWORD *)a5 + 2);
LABEL_3:
    WebCore::SVGInlineTextBox::constructTextRun((WebCore::SVGInlineTextBox *)v44, (unint64_t)this, (const WebCore::SVGTextFragment *)*((unsigned int *)a3 + 11), v11, v12);
LABEL_4:
    v18 = *((_DWORD *)a5 + 2) & 0x7FFFFFFF;
    v19 = this;
    v20 = a2;
    v21 = a3;
    v22 = a5;
    v23 = 0;
LABEL_5:
    WebCore::SVGInlineTextBox::paintTextWithShadows(v19, v20, v21, (WebCore::TextRun *)v44, v22, v23, v18, v13, v14, v15, v16, v17);
    goto LABEL_6;
  }
  started = WebCore::LegacyInlineTextBox::selectionStartEnd(this);
  v27 = started;
  v28 = HIDWORD(started);
  v11 = *(_DWORD *)a5;
  v29 = *(_DWORD *)a5 - *((_DWORD *)this + 18);
  v12 = *((_DWORD *)a5 + 2);
  if (v29 <= started)
    v30 = started;
  else
    v30 = *(_DWORD *)a5 - *((_DWORD *)this + 18);
  if (HIDWORD(started) >= (v12 & 0x7FFFFFFF) + v29)
    LODWORD(v28) = (v12 & 0x7FFFFFFF) + v29;
  if (v30 >= v28)
    goto LABEL_3;
  v31 = v30 - v29;
  v32 = v28 - v29;
  WebCore::SVGInlineTextBox::constructTextRun((WebCore::SVGInlineTextBox *)v44, (unint64_t)this, (const WebCore::SVGTextFragment *)*((unsigned int *)a3 + 11), v11, v12);
  if (v31 >= v32)
    goto LABEL_4;
  if (v29 < v27 && (a7 & 1) == 0)
    WebCore::SVGInlineTextBox::paintTextWithShadows(this, a2, a3, (WebCore::TextRun *)v44, a5, 0, v31, v13, v14, v15, v16, v17);
  v33 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
  if (v33)
    v34 = *(WebCore::RenderElement **)(v33 + 8);
  else
    v34 = 0;
  if ((*((_BYTE *)v34 + 45) & 8) == 0)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  WebCore::SVGResourcesCache::SetStyleForScope::SetStyleForScope((WebCore::SVGResourcesCache::SetStyleForScope *)v43, v34, a3, a4);
  WebCore::SVGInlineTextBox::paintTextWithShadows(this, a2, a4, (WebCore::TextRun *)v44, a5, v31, v32, v35, v36, v37, v38, v39);
  WebCore::SVGResourcesCache::SetStyleForScope::~SetStyleForScope(v43, v40);
  v18 = *((_DWORD *)a5 + 2) & 0x7FFFFFFF;
  if (v32 < v18 && (a7 & 1) == 0)
  {
    v19 = this;
    v20 = a2;
    v21 = a3;
    v22 = a5;
    v23 = v32;
    goto LABEL_5;
  }
LABEL_6:
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGInlineTextBox::acquirePaintingResource(WebCore::SVGInlineTextBox *this, WebCore::GraphicsContext **a2, double a3, WebCore::RenderBoxModelObject *a4, const WebCore::RenderStyle *a5, double a6, float a7)
{
  WebCore::GraphicsContext *v8;
  float v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  const WebCore::RenderObject *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF *v29;
  void *v30;

  v8 = *a2;
  if ((*((_BYTE *)this + 84) & 1) != 0)
  {
    v25 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
    if (v25)
      v25 = *(_QWORD *)(v25 + 8);
    if ((*(_BYTE *)(v25 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652EEB0);
    }
    result = WebCore::SVGPaintServerHandling::preparePaintOperation<(WebCore::SVGPaintServerHandling::Operation)0>(a2, (WebCore::RenderLayerModelObject *)v25, a5, a3, a6, a7);
    if ((_DWORD)result)
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
      if (*((_BYTE *)v8 + 341) != 1)
      {
        *((_BYTE *)v8 + 341) = 1;
        *((_DWORD *)v8 + 46) |= 0x200u;
      }
      v13 = (char *)v8 + 8;
LABEL_29:
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)v8 + 88))(v8, v13);
      goto LABEL_30;
    }
  }
  else
  {
    if ((*((_BYTE *)this + 84) & 2) == 0)
    {
LABEL_30:
      v26 = *((_DWORD *)v8 + 22);
      if (v26 == 1 && !*((_DWORD *)v8 + 8) && *((_QWORD *)v8 + 3)
        || (v27 = *((_DWORD *)v8 + 44), v27 == 1) && !*((_DWORD *)v8 + 30) && *((_QWORD *)v8 + 14)
        || v26 == 2 && *((_QWORD *)v8 + 3)
        || v27 == 2 && *((_QWORD *)v8 + 14))
      {
        (*(void (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)v8 + 592))(v8, 1.0);
        if (*((_BYTE *)v8 + 194) != 2 || *((_BYTE *)v8 + 195) != 1)
        {
          *((_WORD *)v8 + 97) = 258;
          *((_DWORD *)v8 + 46) |= 0x20u;
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 88))(v8, (uint64_t)v8 + 8);
      }
      return 1;
    }
    v10 = *(float *)&a3;
    v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v11 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652EED0);
    }
    result = WebCore::SVGPaintServerHandling::preparePaintOperation<(WebCore::SVGPaintServerHandling::Operation)1>((unsigned int **)a2, (WebCore::RenderLayerModelObject *)v11, a5, a3, a6, a7);
    if ((_DWORD)result)
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
      if (*((_BYTE *)v8 + 341) != 2)
      {
        *((_BYTE *)v8 + 341) = 2;
        *((_DWORD *)v8 + 46) |= 0x200u;
      }
      v13 = (char *)v8 + 8;
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 88))(v8, (uint64_t)v8 + 8);
      if ((*(_WORD *)(*((_QWORD *)a5 + 7) + 8) & 0x400) != 0)
      {
        v15 = 1.0;
        v16 = 1.0;
        if ((~*(_DWORD *)(*((_QWORD *)a5 + 4) + 208) & 0x30) == 0)
        {
          WebCore::RenderSVGInlineText::computeScalingFactorForRenderer(a4, v14);
          v16 = 1.0 / v17;
        }
        v18 = v16 * *(float *)(*((_QWORD *)a4 + 13) + 184);
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 3) + 8) + 40) + 8) + 528);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = *(_QWORD *)(v20 + 24);
            if (v21)
            {
              v22 = *(_QWORD *)(v21 + 8);
              if (v22)
              {
                v23 = (*(_DWORD *)v22)++;
                v15 = *(float *)(v22 + 364);
                if (v23)
                {
                  *(_DWORD *)v22 = v23;
                }
                else
                {
                  WebCore::Page::~Page(v22);
                  WTF::fastFree(v29, v30);
                }
              }
            }
          }
        }
        v10 = v18 * v15;
      }
      if (v10 == 1.0)
        goto LABEL_30;
      v24 = *((float *)v8 + 47);
      if (v24 != (float)(v10 * v24))
      {
        *((float *)v8 + 47) = v10 * v24;
        *((_DWORD *)v8 + 46) |= 8u;
      }
      goto LABEL_29;
    }
  }
  return result;
}

uint64_t WebCore::SVGInlineTextBox::acquireLegacyPaintingResource(WebCore::SVGInlineTextBox *this, WebCore::GraphicsContext **a2, float a3, WebCore::RenderBoxModelObject *a4, const WebCore::RenderStyle *a5)
{
  WebCore::RenderElement *v10;
  WebCore::LegacyRenderSVGResource *v11;
  uint64_t v12;
  unint64_t *v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v23 = 0;
  if ((*((_BYTE *)this + 84) & 1) != 0)
  {
    v10 = WebCore::LegacyRenderSVGResource::fillPaintingResource(a4, a5, (const WebCore::RenderStyle *)&v23, a5);
LABEL_3:
    *((_QWORD *)this + 11) = v10;
    goto LABEL_4;
  }
  if ((*((_BYTE *)this + 84) & 2) != 0)
  {
    v10 = WebCore::LegacyRenderSVGResource::strokePaintingResource(a4, a5, (const WebCore::RenderStyle *)&v23, a5);
    goto LABEL_3;
  }
  v10 = (WebCore::RenderElement *)*((_QWORD *)this + 11);
LABEL_4:
  if (v10)
  {
    v11 = (WebCore::LegacyRenderSVGResource *)(*(uint64_t (**)(WebCore::RenderElement *, WebCore::RenderBoxModelObject *, const WebCore::RenderStyle *, WebCore::GraphicsContext **, _QWORD))(*(_QWORD *)v10 + 32))(v10, a4, a5, a2, *((_BYTE *)this + 84) & 0xF);
    if ((v11 & 1) != 0
      || (v23 & 0x4000000000000) != 0
      && (v14 = WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(v11),
          WebCore::Color::operator=(v14 + 1, &v23),
          *((_QWORD *)this + 11) = v14,
          ((*(uint64_t (**)(unint64_t *, WebCore::RenderBoxModelObject *, const WebCore::RenderStyle *, WebCore::GraphicsContext **, _QWORD))(*v14 + 32))(v14, a4, a5, a2, *((_BYTE *)this + 84) & 0xF) & 1) != 0))
    {
      if ((*((_BYTE *)this + 84) & 2) != 0)
      {
        if ((*(_WORD *)(*((_QWORD *)a5 + 7) + 8) & 0x400) != 0)
        {
          v15 = 1.0;
          if ((~*(_DWORD *)(*((_QWORD *)a5 + 4) + 208) & 0x30) == 0)
          {
            WebCore::RenderSVGInlineText::computeScalingFactorForRenderer(a4, (const WebCore::RenderObject *)a2);
            v15 = 1.0 / v16;
          }
          v17 = v15 * *(float *)(*((_QWORD *)a4 + 13) + 184);
          a3 = v17
             * WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 3)
                                                                                                  + 8)
                                                                                      + 40)
                                                                          + 8));
        }
        if (a3 != 1.0)
        {
          v18 = (uint64_t)*a2;
          v19 = *((float *)*a2 + 47);
          if (v19 != (float)(a3 * v19))
          {
            *(float *)(v18 + 188) = a3 * v19;
            *(_DWORD *)(v18 + 184) |= 8u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(v18, v18 + 8);
        }
      }
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *((_QWORD *)this + 11) = 0;
    }
  }
  else
  {
    v12 = 0;
  }
  if ((v23 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  return v12;
}

void WebCore::SVGInlineTextBox::paintDecorationWithStyle(uint64_t a1, WebCore::GraphicsContext *a2, char a3, uint64_t a4, _QWORD *a5)
{
  const WebCore::RenderObject *v10;
  _DWORD *v11;
  _QWORD *v12;
  WebCore::FontCascade *v13;
  void *v14;
  float v15;
  float v16;
  float32x2_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float32_t v21;
  float32x2_t v22;
  double v23;
  double v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::GraphicsContext *v29;
  int v30;
  int v31;
  WebCore::GraphicsContext *v32;
  float v33;
  float v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  _DWORD *v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  _QWORD *v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  char v60;
  int v61;
  __int16 v62;
  char v63;
  _QWORD v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  float v69;
  float v70[2];
  uint64_t v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v10 = (const WebCore::RenderObject *)(a5 + 10);
  v69 = 1.0;
  v35 = 0;
  v36 = 0;
  v43 = 256;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v44 = 0;
  v11 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v11 += 2;
  v45 = v11;
  v46 = 0;
  v47 = 2143289344;
  v48 = 0;
  v49 = 0;
  v50 = 26216000;
  v51 = 257;
  v52 = 0xE00000000000;
  v54 = 0;
  v53 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = 0x100000001;
  v12[1] = 0;
  v55 = v12;
  v56 = 0;
  v57 &= 0xFC00u;
  v58 = 0;
  v59 = 4;
  v60 = 0;
  v61 = 0;
  v62 = 4;
  v63 = 0;
  v67 = 0u;
  v68 = 0u;
  v66 = 0u;
  v65 = 0u;
  *(_QWORD *)((char *)v64 + 7) = 0;
  v64[0] = 0;
  WebCore::RenderSVGInlineText::computeNewScaledFontForStyle((WebCore::RenderSVGInlineText *)a5, v10, (const WebCore::RenderStyle *)&v69, (float *)&v35, v13);
  v15 = *(float *)(a4 + 20);
  v16 = *(float *)&v52 / 20.0;
  if (v15 > 0.0 || v16 > 0.0)
  {
    v17 = *(float32x2_t *)(a4 + 12);
    v18 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)&v35, v14);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
    if (v69 != 1.0)
    {
      v15 = v15 * v69;
      v17 = vmul_n_f32(v17, v69);
      v70[0] = 1.0 / v69;
      v70[1] = 1.0 / v69;
      (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a2 + 632))(a2, v70);
    }
    v19 = *(float *)(v18 + 4);
    if (a3 == 4)
    {
      v20 = (float)(v19 * 5.0) * 0.125;
    }
    else
    {
      v20 = v16;
      if (a3 != 2)
      {
        if (a3 == 1)
          v20 = v19 + (float)(v16 * 1.5);
        else
          v20 = 0.0;
      }
    }
    v21 = v20 - v19;
    v72 = 0;
    v22.i32[0] = 0;
    v22.f32[1] = v21;
    v32 = (WebCore::GraphicsContext *)vadd_f32(v17, v22);
    v33 = v15;
    v34 = v16;
    v23 = WebCore::Path::addRect((WebCore::Path *)v70, (const WebCore::FloatRect *)&v32);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5[3] + 8) + 40) + 8) + 680) + 680) & 0x800000000000) == 0)
    {
      v32 = a2;
      if (WebCore::SVGInlineTextBox::acquireLegacyPaintingResource((WebCore::SVGInlineTextBox *)a1, &v32, v69, (WebCore::RenderBoxModelObject *)a5, v10))
      {
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
        if (v26)
          v27 = *(_QWORD *)(v26 + 8);
        else
          v27 = 0;
        if ((*(_BYTE *)(v27 + 45) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19652F530);
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88));
        *(_QWORD *)(a1 + 88) = 0;
      }
      goto LABEL_31;
    }
    v32 = a2;
    *(float *)&v23 = v69;
    if (!WebCore::SVGInlineTextBox::acquirePaintingResource((WebCore::SVGInlineTextBox *)a1, &v32, v23, (WebCore::RenderBoxModelObject *)a5, v10, v24, v25))
    {
LABEL_31:
      if (v72 != -1)
        ((void (*)(WebCore::GraphicsContext **, uint64_t *))off_1E3449EC0[v72])(&v32, &v71);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      goto LABEL_34;
    }
    if ((*(_BYTE *)(a1 + 84) & 1) != 0)
    {
      v28 = 22;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 84) & 2) == 0)
      {
LABEL_23:
        v29 = v32;
        v30 = *((_DWORD *)v32 + 22);
        if (v30 == 1 && !*((_DWORD *)v32 + 8) && *((_QWORD *)v32 + 3)
          || (v31 = *((_DWORD *)v32 + 44), v31 == 1) && !*((_DWORD *)v32 + 30) && *((_QWORD *)v32 + 14)
          || v30 == 2 && *((_QWORD *)v32 + 3)
          || v31 == 2 && *((_QWORD *)v32 + 14))
        {
          (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)v32 + 608))(v32);
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v29 + 104))(v29, 1);
        goto LABEL_31;
      }
      v28 = 23;
    }
    (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a2 + 8 * v28))(a2, v70);
    goto LABEL_23;
  }
LABEL_34:
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&v35, v14);
}

uint64_t WebCore::SVGInlineTextBox::paintTextWithShadows(WebCore::SVGInlineTextBox *this, WebCore::GraphicsContext *a2, const WebCore::RenderStyle *a3, WebCore::TextRun *a4, const WebCore::SVGTextFragment *a5, uint64_t a6, unsigned int a7, double a8, double a9, double a10, double a11, double a12)
{
  float32x2_t v12;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  float v25;
  double v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::RenderBoxModelObject *v32;
  uint64_t result;
  WebCore::RenderBoxModelObject *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::TextRun *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::GraphicsContext *v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::RenderObject *v68;
  WebCore::RenderSVGText *RenderSVGTextAncestor;
  _QWORD *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  _DWORD *v79;
  double v80;
  WebCore::GraphicsContext *v81;
  __int32 v82;
  unsigned int v83;
  unsigned int v84;
  WebCore::GraphicsContext *v85;
  WebCore::GraphicsContext *v86;
  double v87;
  WebCore::GraphicsContext *v88;
  __int32 v89;
  unsigned int v90;
  unsigned int v91;
  _DWORD *v92;
  void *v93;
  uint64_t v94;
  float32x2_t v95;
  double v96;
  _DWORD *v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  WebCore::GraphicsContext *v105;
  WebCore::GraphicsContext *v106;
  float32x4_t v107;

  v19 = *((_QWORD *)this + 4);
  if (v19)
    v20 = *(_QWORD *)(v19 + 8);
  else
    v20 = 0;
  if ((*(_BYTE *)(v20 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652FAF0);
  }
  if (*(_BYTE *)(v20 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652FB10);
  }
  if (v19)
    v19 = *(_QWORD *)(v19 + 8);
  if ((*(_BYTE *)(v19 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652FB30);
  }
  if (*(_BYTE *)(v19 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x19652FB50);
  }
  LODWORD(a12) = *(_DWORD *)(v20 + 120);
  v21 = v19 + 128;
  v22 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 160);
  v12.i32[0] = 1.0;
  v23 = (int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)&a12, v12)), 0);
  v24 = vbsl_s8(v23, (int8x8_t)vmul_n_f32(*(float32x2_t *)((char *)a5 + 20), *(float *)&a12), *(int8x8_t *)((char *)a5 + 20));
  v95 = (float32x2_t)vbsl_s8(v23, (int8x8_t)vmul_n_f32(*(float32x2_t *)((char *)a5 + 12), *(float *)&a12), *(int8x8_t *)((char *)a5 + 12));
  v96 = a12;
  v25 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v19 + 128), a2) + 4);
  LODWORD(v26) = v95.i32[1];
  v27 = v95.f32[0];
  v107.i32[0] = v95.i32[0];
  v107.f32[1] = v95.f32[1] - v25;
  *(int8x8_t *)&v107.u32[2] = v24;
  v105 = a2;
  v106 = a2;
  v28 = a7 | 0x100000000;
  while (1)
  {
    v29 = *((_QWORD *)this + 4);
    if (v29)
      v29 = *(_QWORD *)(v29 + 8);
    if ((*(_BYTE *)(v29 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652FB70);
    }
    if (*(_BYTE *)(v29 + 46) != 72)
    {
      __break(0xC471u);
      JUMPOUT(0x19652FB90);
    }
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 24) + 8) + 40) + 8) + 680)
                    + 680);
    v31 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
    if ((v30 & 0x800000000000) != 0)
      break;
    if (v31)
      v32 = *(WebCore::RenderBoxModelObject **)(v31 + 8);
    else
      v32 = 0;
    if ((*((_BYTE *)v32 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652FC64);
    }
    result = WebCore::SVGInlineTextBox::acquireLegacyPaintingResource(this, &v106, *(float *)&v96, v32, a3);
    if (!(_DWORD)result)
      return result;
LABEL_24:
    v104 = 0uLL;
    v35 = *((_QWORD *)this + 4);
    if (v35)
      v36 = *(_QWORD *)(v35 + 8);
    else
      v36 = 0;
    if ((*(_BYTE *)(v36 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652FBB0);
    }
    if (*(_BYTE *)(v36 + 46) != 72)
    {
      __break(0xC471u);
      JUMPOUT(0x19652FBD0);
    }
    v94 = v22;
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 24) + 8) + 40) + 8) + 680)
                    + 680) & 0x800000000000) != 0)
    {
      v67 = WebCore::SVGInlineTextBox::renderer(v35);
      RenderSVGTextAncestor = (WebCore::RenderSVGText *)WebCore::RenderSVGText::locateRenderSVGTextAncestor(v67, v68);
      v101 = constinit_10;
      v102 = unk_1969FE138;
      v103 = xmmword_1969FE148;
      if ((*((_BYTE *)this + 84) & 1) != 0)
      {
        if (*((_DWORD *)v106 + 22) != 1 || *((_DWORD *)v106 + 8))
          v75 = 0;
        else
          v75 = (_QWORD *)*((_QWORD *)v106 + 3);
        WTF::RefPtr<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::operator=((uint64_t *)&v104 + 1, v75);
        v76 = WebCore::SourceBrush::gradientSpaceTransform((WebCore::GraphicsContext *)((char *)v106 + 8));
        v78 = *((_OWORD *)v76 + 1);
        v77 = *((_OWORD *)v76 + 2);
        v101 = *(_OWORD *)v76;
        v102 = v78;
        v103 = v77;
        v74 = (char *)v106 + 8;
      }
      else
      {
        if (*((_DWORD *)v106 + 44) != 1 || *((_DWORD *)v106 + 30))
          v70 = 0;
        else
          v70 = (_QWORD *)*((_QWORD *)v106 + 14);
        WTF::RefPtr<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::operator=((uint64_t *)&v104 + 1, v70);
        v71 = WebCore::SourceBrush::gradientSpaceTransform((WebCore::GraphicsContext *)((char *)v106 + 96));
        v73 = *((_OWORD *)v71 + 1);
        v72 = *((_OWORD *)v71 + 2);
        v101 = *(_OWORD *)v71;
        v102 = v73;
        v103 = v72;
        v74 = (char *)v106 + 96;
      }
      if (*((_DWORD *)v74 + 20) == 2)
        v79 = (_DWORD *)*((_QWORD *)v74 + 2);
      else
        v79 = 0;
      WTF::RefPtr<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>::operator=((uint64_t *)&v104, v79);
      if (*((_QWORD *)&v104 + 1))
      {
        v81 = v106;
        LODWORD(v97) = WebCore::RenderSVGText::repaintRectInLocalCoordinates(RenderSVGTextAncestor, 0, v80);
        HIDWORD(v97) = v82;
        v98 = __PAIR64__(v84, v83);
        (*(void (**)(WebCore::GraphicsContext *, _DWORD **, _QWORD, __int128 *, uint64_t))(*(_QWORD *)v81 + 232))(v81, &v97, *((_QWORD *)&v104 + 1), &v101, 1);
      }
      else
      {
        if (!(_QWORD)v104)
        {
LABEL_130:
          v22 = v94;
          goto LABEL_29;
        }
        v86 = v106;
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v106 + 96))(v106, 1);
        v88 = v106;
        if (*((_DWORD *)v106 + 44) == 2)
        {
          v92 = (_DWORD *)*((_QWORD *)v106 + 14);
          if (v92)
          {
            ++*v92;
            v97 = v92;
            WebCore::SourceBrush::setPattern((uint64_t)v88 + 8, (uint64_t *)&v97);
            *((_DWORD *)v88 + 46) |= 1u;
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v88 + 88))(v88, (uint64_t)v88 + 8);
            WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>::~Ref((uint64_t *)&v97, v93);
            v88 = v106;
          }
        }
        LODWORD(v97) = WebCore::RenderSVGText::repaintRectInLocalCoordinates(RenderSVGTextAncestor, 0, v87);
        HIDWORD(v97) = v89;
        v98 = __PAIR64__(v91, v90);
        (*(void (**)(WebCore::GraphicsContext *, _DWORD **, uint64_t))(*(_QWORD *)v88 + 216))(v88, &v97, 1);
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v86 + 104))(v86, 1);
      }
      v85 = v106;
      if (*((_BYTE *)v106 + 194) != 7 || *((_BYTE *)v106 + 195) != 1)
      {
        *((_WORD *)v106 + 97) = 263;
        *((_DWORD *)v85 + 46) |= 0x20u;
      }
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v85 + 88))(v85, (uint64_t)v85 + 8);
      (*(void (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)v106 + 592))(v106, 1.0);
      goto LABEL_130;
    }
LABEL_29:
    WebCore::ShadowApplier::ShadowApplier((uint64_t)&v97, (uint64_t)a3, (uint64_t)v106, v22, 0, &v107, 1, 0, 0);
    if ((v100 & 8) == 0)
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v106 + 96))(v106, 1);
    *(float *)&v101 = 1.0 / *(float *)&v96;
    *((float *)&v101 + 1) = 1.0 / *(float *)&v96;
    (*(void (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)v106 + 632))(v106, &v101);
    *(float32x2_t *)&v101 = vadd_f32(v95, (float32x2_t)v97);
    v38.n128_f32[0] = WebCore::FontCascade::drawText(v21, (uint64_t)v106);
    if ((v100 & 8) == 0)
      (*(void (**)(WebCore::GraphicsContext *, uint64_t, float))(*(_QWORD *)v106 + 104))(v106, 1, v38.n128_f32[0]);
    if (v104 != 0)
      (*(void (**)(WebCore::GraphicsContext *, __n128))(*(_QWORD *)v106 + 608))(v106, v38);
    if (v99)
    {
      if ((v100 & 1) != 0)
      {
        (*(void (**)(unint64_t, uint64_t, __n128))(*(_QWORD *)v98 + 104))(v98, 1, v38);
      }
      else if ((v100 & 2) == 0)
      {
        v58 = v98;
        v59 = v98 + 8;
        LOBYTE(v101) = 0;
        LOBYTE(v103) = 0;
        WebCore::GraphicsContextState::setDropShadow(v98 + 8, (uint64_t)&v101);
        if ((_BYTE)v103)
        {
          if ((v102 & 0x8000000000000) != 0)
          {
            v61 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFLL);
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              atomic_store(1u, v61);
              WTF::fastFree((WTF *)v61, v60);
            }
          }
        }
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v58 + 88))(v58, v59);
      }
    }
    v39 = v104;
    *(_QWORD *)&v104 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
      {
        if (*(_BYTE *)(v39 + 40))
        {
          v64 = *(unsigned int *)(v39 + 32);
          if ((_DWORD)v64 != -1)
            ((void (*)(__int128 *, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v64])(&v101, v39 + 24, v38);
          *(_DWORD *)(v39 + 32) = -1;
        }
        v65 = *(unsigned int *)(v39 + 16);
        if ((_DWORD)v65 != -1)
          ((void (*)(__int128 *, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v65])(&v101, v39 + 8, v38);
        *(_DWORD *)(v39 + 16) = -1;
        WTF::fastFree((WTF *)v39, v37);
      }
      else
      {
        --*(_DWORD *)v39;
      }
    }
    v40 = v21;
    v41 = v28;
    v42 = a4;
    v43 = a6;
    v44 = *((_QWORD *)&v104 + 1);
    *((_QWORD *)&v104 + 1) = 0;
    if (!v44)
      goto LABEL_48;
    v45 = *(_QWORD *)(v44 + 8);
    if (__ldaxr((unsigned __int8 *)v45))
    {
      __clrex();
LABEL_42:
      MEMORY[0x19AEA534C](v45, v38);
      goto LABEL_43;
    }
    if (__stxr(1u, (unsigned __int8 *)v45))
      goto LABEL_42;
LABEL_43:
    v47 = *(_QWORD *)(v45 + 8);
    v48 = v47 - 1;
    *(_QWORD *)(v45 + 8) = v47 - 1;
    if (v47 == 1)
    {
      v66 = *(_QWORD *)(v45 + 16);
      v49 = *(_QWORD *)(v45 + 24);
      *(_QWORD *)(v45 + 24) = 0;
      v50 = v66 != 0;
    }
    else
    {
      v49 = 0;
      v50 = 1;
    }
    v51 = __ldxr((unsigned __int8 *)v45);
    if (v51 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v45))
        goto LABEL_47;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v45);
LABEL_47:
    if (!v48)
    {
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      if (!v50)
        WTF::fastFree((WTF *)v45, v37);
    }
LABEL_48:
    v52 = *((_QWORD *)this + 4);
    if (v52)
      v52 = *(_QWORD *)(v52 + 8);
    if ((*(_BYTE *)(v52 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19652FBF0);
    }
    if (*(_BYTE *)(v52 + 46) != 72)
    {
      __break(0xC471u);
      JUMPOUT(0x19652FC24);
    }
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 24) + 8) + 40) + 8) + 680)
                    + 680) & 0x800000000000) != 0)
    {
      v55 = v105;
      v56 = *((_DWORD *)v105 + 22);
      a6 = v43;
      if (v56 == 1 && !*((_DWORD *)v105 + 8) && *((_QWORD *)v105 + 3)
        || (v57 = *((_DWORD *)v105 + 44), v57 == 1) && !*((_DWORD *)v105 + 30) && *((_QWORD *)v105 + 14)
        || v56 == 2 && *((_QWORD *)v105 + 3)
        || v57 == 2 && *((_QWORD *)v105 + 14))
      {
        (*(void (**)(WebCore::GraphicsContext *, __n128))(*(_QWORD *)v105 + 608))(v105, v38);
      }
      result = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v55 + 104))(v55, 1);
      a4 = v42;
      v28 = v41;
    }
    else
    {
      v53 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
      a6 = v43;
      if (v53)
        v54 = *(_QWORD *)(v53 + 8);
      else
        v54 = 0;
      a4 = v42;
      if ((*(_BYTE *)(v54 + 45) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19652FC84);
      }
      v28 = v41;
      result = (*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v38);
      *((_QWORD *)this + 11) = 0;
    }
    v21 = v40;
    if (v94)
    {
      v22 = *(_QWORD *)(v94 + 56);
      if (v22)
        continue;
    }
    return result;
  }
  if (v31)
    v34 = *(WebCore::RenderBoxModelObject **)(v31 + 8);
  else
    v34 = 0;
  if ((*((_BYTE *)v34 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19652FC44);
  }
  result = WebCore::SVGInlineTextBox::acquirePaintingResource(this, &v105, v96, v34, a3, v26, v27);
  if ((result & 1) != 0)
    goto LABEL_24;
  return result;
}

uint64_t *WTF::RefPtr<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::operator=(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  if (a2)
  {
    v4 = a2[1];
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_6:
    ++*(_QWORD *)(v4 + 8);
    v6 = __ldxr((unsigned __int8 *)v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
LABEL_11:
  v7 = *a1;
  *a1 = (uint64_t)a2;
  if (!v7)
    return a1;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_16:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v16 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v16 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (v11)
        return a1;
      goto LABEL_24;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (v11)
    return a1;
LABEL_24:
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    WTF::fastFree((WTF *)v8, a2);
  return a1;
}

uint64_t *WTF::RefPtr<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>::operator=(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (a2)
    ++*a2;
  v3 = *a1;
  *a1 = (uint64_t)a2;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      if (*(_BYTE *)(v3 + 40))
      {
        v5 = *(unsigned int *)(v3 + 32);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v5])(&v7, v3 + 24);
        *(_DWORD *)(v3 + 32) = -1;
      }
      v6 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v6])(&v8, v3 + 8);
      *(_DWORD *)(v3 + 16) = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      if (*(_BYTE *)(v3 + 40))
      {
        v5 = *(unsigned int *)(v3 + 32);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v5])(&v7, v3 + 24);
        *(_DWORD *)(v3 + 32) = -1;
      }
      v6 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v6])(&v8, v3 + 8);
      *(_DWORD *)(v3 + 16) = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::SVGInlineTextBox::nodeAtPoint(WebCore::LegacyInlineBox *this, WTF::StringImpl *a2, WebCore::HitTestResult *a3, int32x2_t *a4, int32x2_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  float32x2_t v28;
  float32x2_t v29;
  __int16 v30;
  float v31;
  float32x2_t v32;
  float v33;
  float v34;
  float v35;
  float32x2_t v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  double *v50;
  float32x2_t v51;
  float v52;
  float v53;
  float v54;
  __int32 v55;
  float v56;
  double *v57;
  double v58;
  float64x2_t v59;
  double v60;
  double v61;
  float64x2_t v62;
  double v63;
  BOOL v64;
  float64x2_t v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  float64x2_t *v78;
  float v79;
  float v80;
  int v81;
  unsigned int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int32 v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  _BYTE *v105;
  WebCore::ImageOverlay *v106;
  WebCore::Node *v107;
  void *v108;
  _BOOL4 v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  int8x16_t v127;
  unsigned int v128;
  float64x2_t v129;
  int32x2_t v130;
  int64x2_t v131;
  float64x2_t *v132;
  float32x2_t v134;
  float32x4_t v135;
  __int128 v136;
  float32x4_t v137;
  __int128 v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float32x2_t v142;
  float v143;
  float v144;

  v10 = *((_QWORD *)this + 4);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  if ((*(_BYTE *)(v11 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196530B78);
  }
  if (*(_BYTE *)(v11 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x196530B98);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
  if (*(_BYTE *)(v13 + 3441) && *(_QWORD *)(v13 + 1272) != v12)
    goto LABEL_181;
  v14 = *(_QWORD *)(v11 + 32);
  if (v14)
    v14 = *(_QWORD *)(v14 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v14 + 104) + 239) & 1) != 0)
LABEL_181:
    v15 = 0;
  else
    v15 = (*(_DWORD *)(v14 + 124) >> 6) & 0xF;
  if ((*(_BYTE *)a2 & 0x40) != 0)
    v15 = 3;
  v16 = (0x201u >> v15) & 1;
  v17 = v15 == 0;
  v18 = v15 > 0xA;
  if (v15 <= 0xA)
    v19 = (0x61Du >> v15) & 1;
  else
    v19 = 1;
  if (v15 <= 0xA)
    v20 = (0x6EDu >> v15) & 1;
  else
    v20 = 1;
  if (v18)
    v21 = 1;
  else
    v21 = v16;
  v22 = v18 || v17;
  if (v10)
    v23 = *(_QWORD *)(v10 + 8);
  else
    v23 = 0;
  if ((*(_BYTE *)(v23 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196530BB8);
  }
  if (*(_BYTE *)(v23 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x196530BD8);
  }
  v24 = *(_QWORD *)(v23 + 32);
  if (v24)
    v24 = *(_QWORD *)(v24 + 8);
  if (*((_BYTE *)a2 + 4) && (*(_BYTE *)(*(_QWORD *)(v24 + 104) + 239) & 4) != 0)
    v25 = 1;
  else
    v25 = (*(_DWORD *)(v24 + 120) >> 4) & 3;
  if (((v25 != 0) & ~v19) != 0)
    return 0;
  if ((v21 & 1) != 0)
    goto LABEL_51;
  if (v10)
    v26 = *(_QWORD *)(v10 + 8);
  else
    v26 = 0;
  if ((*(_BYTE *)(v26 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196530C80);
  }
  if (*(_BYTE *)(v26 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x196530CA0);
  }
  v27 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 8) + 136) + 24) + 80) == 1
      ? v20
      : 1;
  if ((v27 & 1) == 0)
  {
LABEL_51:
    if ((v22 & 1) != 0)
      return 0;
    if (v10)
      v10 = *(_QWORD *)(v10 + 8);
    if ((*(_BYTE *)(v10 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196530CC0);
    }
    if (*(_BYTE *)(v10 + 46) != 72)
    {
      __break(0xC471u);
      JUMPOUT(0x196530CE0);
    }
    if (((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 136) + 16) + 56) == 1) & ~v20) != 0)
      return 0;
  }
  v28 = *(float32x2_t *)((char *)this + 44);
  v29 = vmul_f32(vcvt_f32_s32(*a5), (float32x2_t)vdup_n_s32(0x3C800000u));
  v30 = *((_WORD *)this + 26);
  if ((v30 & 0x800) != 0)
  {
    v31 = *((float *)this + 10);
  }
  else
  {
    v31 = WebCore::LegacyInlineBox::logicalHeight(this, a2);
    v30 = *((_WORD *)this + 26);
  }
  v32 = vadd_f32(v28, v29);
  if ((v30 & 0x800) != 0)
  {
    v134 = v32;
    v33 = WebCore::LegacyInlineBox::logicalHeight(this, a2);
    v32 = v134;
  }
  else
  {
    v33 = *((float *)this + 10);
  }
  v142 = v32;
  v143 = v31;
  v144 = v33;
  if (v31 <= 0.0)
    return 0;
  if (v33 <= 0.0)
    return 0;
  v34 = (float)a4[2].i32[0] * 0.015625;
  if (v34 <= 0.0)
    return 0;
  v35 = (float)a4[2].i32[1] * 0.015625;
  if (v35 <= 0.0)
    return 0;
  v36 = vmul_f32(vcvt_f32_s32(a4[1]), (float32x2_t)vdup_n_s32(0x3C800000u));
  if (v36.f32[0] >= (float)(v32.f32[0] + v31))
    return 0;
  v37 = v36.f32[0] + v34;
  if (v32.f32[0] >= (float)(v36.f32[0] + v34))
    return 0;
  v38 = v36.f32[1] + v35;
  if (v32.f32[1] >= (float)(v36.f32[1] + v35))
    return 0;
  v39 = v33 + v32.f32[1];
  if (v36.f32[1] >= v39)
    return 0;
  if (!a4[8].i8[1])
  {
    v42 = vmvn_s8((int8x8_t)vcge_f32(v36, v32));
    if (((v42.i8[0] & 1) != 0 || (float)(v32.f32[0] + v31) < v37 || (v42.i8[4] & 1) != 0 || v39 < v38)
      && !WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)&a4[4], (const WebCore::FloatRect *)&v142))
    {
      return 0;
    }
  }
  v40 = *((_QWORD *)this + 4);
  if (v40)
    v41 = *(_QWORD *)(v40 + 8);
  else
    v41 = 0;
  if ((*(_BYTE *)(v41 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196530D00);
  }
  if (*(_BYTE *)(v41 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x196530D20);
  }
  if (v40)
    v40 = *(_QWORD *)(v40 + 8);
  if ((*(_BYTE *)(v40 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196530D40);
  }
  if (*(_BYTE *)(v40 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x196530D60);
  }
  v43 = *(float *)(v41 + 120);
  v44 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v40 + 128), a2) + 4);
  v45 = *((unsigned int *)this + 31);
  if (!(_DWORD)v45)
    return 0;
  v46 = 0;
  v47 = *((_QWORD *)this + 14);
  v48 = v45 << 7;
  v49 = v44 / v43;
  while (1)
  {
    v50 = (double *)(v47 + v46);
    v51 = *(float32x2_t *)(v47 + v46 + 12);
    v52 = v51.f32[1] - v49;
    v53 = *(float *)(v47 + v46 + 20);
    v54 = *(float *)(v47 + v46 + 24);
    v137.i32[0] = v51.i32[0];
    v137.f32[1] = v51.f32[1] - v49;
    *(float *)&v55 = v51.f32[0] + v53;
    v137.i32[2] = v55;
    v137.f32[3] = v51.f32[1] - v49;
    v56 = (float)(v51.f32[1] - v49) + v54;
    *(_QWORD *)&v138 = __PAIR64__(LODWORD(v56), v55);
    *((_QWORD *)&v138 + 1) = __PAIR64__(LODWORD(v56), v51.u32[0]);
    if ((*(_DWORD *)(v47 + v46 + 8) & 0x80000000) != 0)
    {
      v119 = v50[10];
      v120 = v50[11];
      if (v119 == 1.0
        && v120 == 0.0
        && (v121 = *(double *)(v47 + v46 + 96), v121 == 0.0)
        && *(double *)(v47 + v46 + 104) == 1.0
        && (v132 = (float64x2_t *)(v47 + v46), v123 = *(double *)(v47 + v46 + 112), v123 == 0.0))
      {
        v124 = v132[7].f64[1];
        v62 = v132[2];
        v65 = v132[3];
        v59 = v132[4];
        if (v124 == 0.0)
          goto LABEL_151;
        v122 = 1.0;
      }
      else
      {
        v62 = *(float64x2_t *)(v47 + v46 + 32);
        v65 = *(float64x2_t *)(v47 + v46 + 48);
        v59 = *(float64x2_t *)(v47 + v46 + 64);
        v121 = *(double *)(v47 + v46 + 96);
        v122 = *(double *)(v47 + v46 + 104);
        v123 = *(double *)(v47 + v46 + 112);
        v124 = *(double *)(v47 + v46 + 120);
      }
      v125 = vmlaq_n_f64(vmulq_n_f64(v65, v120), v62, v119);
      v126 = vmulq_n_f64(v65, v124);
      v65 = vmlaq_n_f64(vmulq_n_f64(v65, v122), v62, v121);
      v59 = vaddq_f64(v59, vmlaq_n_f64(v126, v62, v123));
      v62 = v125;
LABEL_151:
      v139 = v62;
      v140 = v65;
      v141 = v59;
      v63 = v62.f64[1];
      v127 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v65, (float64x2_t)xmmword_1968A14C0));
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v127))) & 1) == 0
        && v59.f64[0] == 0.0
        && (v68 = v59.f64[1], v59.f64[1] == 0.0))
      {
        v66 = 1.0;
        v62.f64[0] = 1.0;
      }
      else
      {
        v128 = (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, v127)) & 0xF) == 0;
        v129 = vcvtq_f64_f32(vneg_f32(v51));
        v130 = vdup_n_s32(v128);
        v131.i64[0] = v130.u32[0];
        v131.i64[1] = v130.u32[1];
        v59 = vaddq_f64(vaddq_f64(v59, vcvtq_f64_f32(v51)), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v131, 0x3FuLL)), (int8x16_t)v129, (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v65, v129, 1), v62, v129.f64[0])));
        v141 = v59;
        v68 = v59.f64[1];
        v66 = v65.f64[1];
      }
      goto LABEL_105;
    }
    v58 = v50[4];
    v57 = v50 + 4;
    if (v58 == 1.0
      && *(double *)(v47 + v46 + 40) == 0.0
      && *(double *)(v47 + v46 + 48) == 0.0
      && *(double *)(v47 + v46 + 56) == 1.0
      && *(double *)(v47 + v46 + 64) == 0.0
      && (v78 = (float64x2_t *)(v47 + v46), *(double *)(v47 + v46 + 72) == 0.0))
    {
      v59 = v78[6];
      v139 = v78[5];
      v140 = v59;
      v141 = v78[7];
      v63 = v139.f64[1];
      v62.f64[0] = v139.f64[0];
      v66 = v59.f64[1];
      v65.f64[0] = v59.f64[0];
      v68 = v141.f64[1];
      v59.f64[0] = v141.f64[0];
    }
    else
    {
      v59 = *(float64x2_t *)(v57 + 4);
      v140 = *(float64x2_t *)(v57 + 2);
      v141 = v59;
      v139 = *(float64x2_t *)v57;
      v60 = (float)-v51.f32[0];
      v61 = (float)-v51.f32[1];
      v63 = v139.f64[1];
      v62.f64[0] = v139.f64[0];
      v64 = v139.f64[0] == 1.0;
      if (v139.f64[1] != 0.0)
        v64 = 0;
      v66 = v140.f64[1];
      v65.f64[0] = v140.f64[0];
      if (v140.f64[0] != 0.0)
        v64 = 0;
      v67 = v140.f64[1] * v61 + v60 * v139.f64[1];
      if (!v64 || v140.f64[1] != 1.0)
      {
        v60 = v140.f64[0] * v61 + v60 * v139.f64[0];
        v61 = v67;
      }
      v59.f64[0] = v141.f64[0] + v51.f32[0] + v60;
      v68 = v59.f64[1] + v51.f32[1] + v61;
      v141.f64[0] = v59.f64[0];
      v141.f64[1] = v68;
      v69 = (double *)(v47 + v46);
      v71 = *(double *)(v47 + v46 + 80);
      v70 = *(double *)(v47 + v46 + 88);
      if (v71 != 1.0
        || v70 != 0.0
        || *(double *)(v47 + v46 + 96) != 0.0
        || *(double *)(v47 + v46 + 104) != 1.0
        || *(double *)(v47 + v46 + 112) != 0.0
        || *(double *)(v47 + v46 + 120) != 0.0)
      {
        v72 = v69[12];
        v73 = v69[13];
        v74 = v69[15];
        v63 = v139.f64[1] * v73 + v139.f64[0] * v70;
        v62.f64[0] = v139.f64[1] * v72 + v139.f64[0] * v71;
        v66 = v73 * v140.f64[1] + v140.f64[0] * v70;
        v65.f64[0] = v72 * v140.f64[1] + v140.f64[0] * v71;
        v75 = v68 * v72 + v59.f64[0] * v71;
        v76 = v68 * v73 + v59.f64[0] * v70;
        v77 = v69[14] + v75;
        v139.f64[0] = v62.f64[0];
        v139.f64[1] = v63;
        v140.f64[0] = v65.f64[0];
        v140.f64[1] = v66;
        v68 = v74 + v76;
        v141.f64[0] = v77;
        v141.f64[1] = v74 + v76;
        v59.f64[0] = v77;
      }
    }
LABEL_105:
    if (v62.f64[0] != 1.0
      || v63 != 0.0
      || v65.f64[0] != 0.0
      || v66 != 1.0
      || v59.f64[0] != 0.0
      || (v79 = v51.f32[1] - v49, v80 = *(float *)&v55, v68 != 0.0))
    {
      WebCore::AffineTransform::mapQuad(&v139, &v137, &v135);
      v137 = v135;
      v138 = v136;
      v56 = *((float *)&v136 + 1);
      v80 = *(float *)&v136;
      v79 = v135.f32[1];
      v51.i32[0] = v135.i32[0];
      v52 = v135.f32[3];
      v55 = v135.i32[2];
    }
    v82 = a4->i32[0];
    v81 = a4->i32[1];
    v83 = v80 - v51.f32[0];
    v84 = v56 - v79;
    v85 = *(float *)&v55 - v51.f32[0];
    v86 = v52 - v79;
    v87 = (float)((float)a4->i32[0] * 0.015625) - v51.f32[0];
    v88 = (float)((float)v81 * 0.015625) - v79;
    v89 = (float)(v84 * v84) + (float)(v83 * v83);
    v90 = (float)(v84 * (float)(v52 - v79)) + (float)(v83 * v85);
    v91 = (float)(v84 * v88) + (float)(v83 * v87);
    v92 = (float)(v86 * v86) + (float)(v85 * v85);
    v93 = (float)(v88 * v86) + (float)(v85 * v87);
    v94 = 1.0 / (float)((float)(v89 * v92) - (float)(v90 * v90));
    v95 = (float)((float)(v92 * v91) - (float)(v90 * v93)) * v94;
    if (v95 < 0.0
      || ((v96 = (float)((float)(v89 * v93) - (float)(v90 * v91)) * v94, v96 >= 0.0)
        ? (v97 = (float)(v95 + v96) > 1.0)
        : (v97 = 1),
          v97))
    {
      v110 = *((float *)&v138 + 2) - v51.f32[0];
      v111 = *((float *)&v138 + 3) - v79;
      v112 = (float)(v111 * v111) + (float)(v110 * v110);
      v113 = (float)(v84 * v111) + (float)(v110 * v83);
      v114 = (float)(v88 * v111) + (float)(v110 * v87);
      v115 = 1.0 / (float)((float)(v112 * v89) - (float)(v113 * v113));
      v116 = (float)((float)(v89 * v114) - (float)(v113 * v91)) * v115;
      if (v116 < 0.0)
        goto LABEL_135;
      v117 = (float)((float)(v112 * v91) - (float)(v113 * v114)) * v115;
      if (v117 < 0.0 || (float)(v116 + v117) > 1.0)
        goto LABEL_135;
    }
    v98 = *((_QWORD *)this + 4);
    if (v98)
      v99 = *(_QWORD *)(v98 + 8);
    else
      v99 = 0;
    if ((*(_BYTE *)(v99 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196530BF8);
    }
    if (*(_BYTE *)(v99 + 46) != 72)
    {
      __break(0xC471u);
      JUMPOUT(0x196530C18);
    }
    v100 = v82 - a5->i32[0];
    if (__OFSUB__(v82, a5->i32[0]))
      v100 = (v82 >> 31) + 0x7FFFFFFF;
    v101 = a5->i32[1];
    v102 = __OFSUB__(v81, v101);
    v103 = v81 - v101;
    if (v102)
      v103 = (v81 >> 31) + 0x7FFFFFFF;
    v135.i32[0] = v100;
    v135.i32[1] = v103;
    WebCore::RenderObject::updateHitTestResult((unsigned int *)v99, a3, (const WebCore::LayoutPoint *)&v135);
    v104 = *((_QWORD *)this + 4);
    if (v104)
      v105 = *(_BYTE **)(v104 + 8);
    else
      v105 = 0;
    if ((v105[45] & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196530C38);
    }
    if (v105[46] != 72)
    {
      __break(0xC471u);
      JUMPOUT(0x196530C58);
    }
    v106 = (WebCore::ImageOverlay *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v105 + 320))(v105);
    if (v106)
      break;
    if (!WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, 0, (int *)a2, (uint64_t)a4, (float *)&v142))return 1;
LABEL_135:
    v46 += 128;
    if (v48 == v46)
      return 0;
  }
  v107 = v106;
  *((_DWORD *)v106 + 6) += 2;
  v109 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, v106, (int *)a2, (uint64_t)a4, (float *)&v142);
  if (*((_DWORD *)v107 + 6) == 2)
  {
    if ((*((_WORD *)v107 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v107, v108);
  }
  else
  {
    *((_DWORD *)v107 + 6) -= 2;
  }
  if (v109)
    goto LABEL_135;
  return 1;
}

void WebCore::pathFromGraphicsElement(WebCore *this@<X0>, const WebCore::SVGElement *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  __n128 v20;
  unsigned __int8 *v21;
  WebCore::Length *v22;
  int v23;
  unsigned __int8 *v24;
  WebCore::Length *v25;
  int v26;
  float v27;
  unsigned __int8 *v28;
  WebCore::Length *v29;
  int v30;
  float v31;
  unsigned __int8 *v32;
  WebCore::Length *v33;
  int v34;
  float v35;
  unsigned __int8 *v36;
  WebCore::Length *v37;
  int v38;
  float v39;
  unsigned __int8 *v40;
  WebCore::Length *v41;
  int v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  float v71;
  unsigned int v72;
  float v73;
  unsigned __int32 v74;
  float v75;
  unsigned __int32 v76;
  float v77;
  unsigned __int32 v78;
  float v79;
  unsigned __int32 v80;
  float v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  WebCore::SVGAnimatedPathSegList *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  float v97;
  char v98;
  unsigned __int32 v99;
  float v100;
  char v101;
  float v102;
  unsigned __int32 v103;
  float v104;
  float v105;
  char v106;
  float v107;
  float v108;
  char v109;
  float v110;
  float v111;
  char v112;
  float v113;
  float v114;
  char v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  unsigned __int32 v132;
  unsigned __int32 v133;
  unsigned __int32 v134;
  unsigned __int32 v135;
  unsigned __int32 v136;
  unsigned __int32 v137;
  unsigned __int32 v138;
  unsigned __int32 v139;
  unsigned __int32 v140;
  float v141[10];
  __n128 v142;
  int v143;
  _BYTE v144[32];
  __int128 v145;
  int v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(*((_QWORD *)this + 12) + 10);
  if (v5 == 227)
  {
    v6 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (!v6)
    {
LABEL_165:
      v91 = (WebCore::SVGAnimatedPathSegList *)*((_QWORD *)this + 28);
      ++*((_DWORD *)v91 + 2);
      WebCore::SVGAnimatedPathSegList::currentPath(v91, a2, a3);
      if (*((_DWORD *)v91 + 2) == 1)
        (*(void (**)(WebCore::SVGAnimatedPathSegList *))(*(_QWORD *)v91 + 8))(v91);
      else
        --*((_DWORD *)v91 + 2);
      return;
    }
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v7 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v7 + 1;
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 136) + 64) + 64);
      if (v8)
      {
        ++*(_DWORD *)(v8 + 8);
        v9 = *(_QWORD *)(v8 + 16);
        v10 = *(_DWORD *)(v8 + 24);
        {
          qword_1EE2F9570 = 0;
          xmmword_1EE2F9550 = 0u;
          unk_1EE2F9560 = 0u;
          xmmword_1EE2F9530 = 0u;
          unk_1EE2F9540 = 0u;
          xmmword_1EE2F9510 = 0u;
          unk_1EE2F9520 = 0u;
          xmmword_1EE2F94F0 = 0u;
          unk_1EE2F9500 = 0u;
          xmmword_1EE2F94D0 = 0u;
          unk_1EE2F94E0 = 0u;
          xmmword_1EE2F94B0 = 0u;
          unk_1EE2F94C0 = 0u;
          xmmword_1EE2F9490 = 0u;
          unk_1EE2F94A0 = 0u;
          xmmword_1EE2F9470 = 0u;
          unk_1EE2F9480 = 0u;
          xmmword_1EE2F9450 = 0u;
          unk_1EE2F9460 = 0u;
          xmmword_1EE2F9430 = 0u;
          unk_1EE2F9440 = 0u;
          xmmword_1EE2F9410 = 0u;
          unk_1EE2F9420 = 0u;
          xmmword_1EE2F93F0 = 0u;
          unk_1EE2F9400 = 0u;
          WebCore::cachedTransformedByteStreamPath(WebCore::SVGPathByteStream const&,float,WebCore::FloatPoint const&)::cache = 0u;
          unk_1EE2F93E0 = 0u;
        }
        *(_QWORD *)v144 = 0;
        v11 = *(_DWORD **)(v9 + 8);
        ++*v11;
        *(_QWORD *)&v144[8] = v11;
        *(_QWORD *)&v144[16] = v10;
        *(_DWORD *)&v144[24] = 0;
        v13 = WTF::TinyLRUCache<WebCore::SVGPathTransformedByteStream,WebCore::Path,4ul,WebCore::TransformedByteStreamPathPolicy>::get((uint64_t)&WebCore::cachedTransformedByteStreamPath(WebCore::SVGPathByteStream const&,float,WebCore::FloatPoint const&)::cache, (uint64_t)v144);
        v14 = *(_QWORD *)&v144[8];
        *(_QWORD *)&v144[8] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
          {
            v50 = *(unsigned int *)(v14 + 88);
            if ((_DWORD)v50 != -1)
              ((void (*)(__n128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v50])(&v142, v14 + 32);
            *(_DWORD *)(v14 + 88) = -1;
            v51 = *(WTF **)(v14 + 8);
            if (v51)
            {
              *(_QWORD *)(v14 + 8) = 0;
              *(_DWORD *)(v14 + 16) = 0;
              WTF::fastFree(v51, v12);
            }
            WTF::fastFree((WTF *)v14, v12);
          }
          else
          {
            --*(_DWORD *)v14;
          }
        }
        v15 = *(WTF **)v144;
        if (*(_QWORD *)v144)
        {
          *(_QWORD *)(*(_QWORD *)v144 + 8) = 0;
          *(_QWORD *)v144 = 0;
          if (*(_DWORD *)v15 == 1)
            WTF::fastFree(v15, v12);
          else
            --*(_DWORD *)v15;
        }
        *(_DWORD *)(a3 + 64) = 0;
        v16 = *((unsigned int *)v13 + 16);
        if ((_DWORD)v16 == -1)
        {
          *(_DWORD *)(a3 + 64) = -1;
        }
        else
        {
          *(_QWORD *)v144 = a3 + 8;
          ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v16])(v144);
        }
        if (*(_DWORD *)(v8 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        else
          --*(_DWORD *)(v8 + 8);
        v17 = *(_DWORD *)(v6 + 16);
        if (v17)
        {
          *(_DWORD *)(v6 + 16) = v17 - 1;
          return;
        }
LABEL_168:
        __break(0xC471u);
        JUMPOUT(0x1965317B0);
      }
      if (v7 == -1)
        goto LABEL_168;
      *(_DWORD *)(v6 + 16) = v7;
      goto LABEL_165;
    }
    __break(0xC471u);
LABEL_221:
    JUMPOUT(0x196531718);
  }
  if (*(unsigned __int16 *)(*((_QWORD *)this + 12) + 10) > 0xE5u)
  {
    switch(v5)
    {
      case 232:
        v18 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
        if (v18)
        {
          if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1965318ACLL);
          }
          WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v144, this);
          v21 = *(unsigned __int8 **)(*(_QWORD *)(v18 + 88) + 8);
          v22 = (WebCore::Length *)(v21 + 4);
          v23 = v21[8];
          if (v23 == 4)
          {
            if (v21[10])
              v20.n128_u32[0] = *(_DWORD *)v22;
            else
              v20.n128_f32[0] = (float)*(int *)v22;
          }
          else if (v23 == 11)
          {
            LODWORD(v97) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v144);
            if (!v98)
              v97 = 0.0;
            WebCore::Length::nonNanCalculatedValue(v22, v97);
          }
          else
          {
            v20.n128_u32[0] = 0;
            if (v23 == 3)
            {
              v73 = *((float *)v21 + 1);
              if (!v21[10])
                v73 = (float)SLODWORD(v73);
              WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v144, 0, (uint64_t)&v142, v73 / 100.0);
              v74 = 0;
              if (v143 != -1)
              {
                if (!v143)
                  v74 = v142.n128_u32[0];
                ((void (*)(float *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v143])(v141, &v142);
              }
              v20.n128_u32[0] = v74;
            }
          }
          v24 = *(unsigned __int8 **)(*(_QWORD *)(v18 + 88) + 8);
          v25 = (WebCore::Length *)(v24 + 12);
          v26 = v24[16];
          switch(v26)
          {
            case 4:
              if (v24[18])
                v27 = *(float *)v25;
              else
                v27 = (float)*(int *)v25;
              break;
            case 11:
              v99 = v20.n128_u32[0];
              LODWORD(v100) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v144) >> 32;
              if (!v101)
                v100 = 0.0;
              WebCore::Length::nonNanCalculatedValue(v25, v100);
              v27 = v20.n128_f32[0];
              v20.n128_u32[0] = v99;
              break;
            case 3:
              v136 = v20.n128_u32[0];
              v102 = *((float *)v24 + 3);
              if (!v24[18])
                v102 = (float)SLODWORD(v102);
              WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v144, 1, (uint64_t)&v142, v102 / 100.0);
              v103 = 0;
              if (v143 != -1)
              {
                if (!v143)
                  v103 = v142.n128_u32[0];
                ((void (*)(float *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v143])(v141, &v142);
              }
              v20.n128_u32[0] = v136;
              LODWORD(v27) = v103;
              break;
            default:
              goto LABEL_89;
          }
          if (v20.n128_f32[0] > 0.0 && v27 > 0.0)
          {
            v28 = *(unsigned __int8 **)(*(_QWORD *)(v18 + 136) + 64);
            v29 = (WebCore::Length *)(v28 + 44);
            v30 = v28[48];
            if (v30 == 4)
            {
              if (v28[50])
                v31 = *(float *)v29;
              else
                v31 = (float)*(int *)v29;
            }
            else if (v30 == 11)
            {
              v137 = v20.n128_u32[0];
              v104 = v27;
              LODWORD(v105) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v144);
              if (!v106)
                v105 = 0.0;
              WebCore::Length::nonNanCalculatedValue(v29, v105);
              v31 = v20.n128_f32[0];
              v27 = v104;
              v20.n128_u32[0] = v137;
            }
            else
            {
              v31 = 0.0;
              if (v30 == 3)
              {
                v125 = v27;
                v132 = v20.n128_u32[0];
                v75 = *((float *)v28 + 11);
                if (!v28[50])
                  v75 = (float)SLODWORD(v75);
                WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v144, 0, (uint64_t)&v142, v75 / 100.0);
                v76 = 0;
                if (v143 != -1)
                {
                  if (!v143)
                    v76 = v142.n128_u32[0];
                  ((void (*)(float *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v143])(v141, &v142);
                }
                v27 = v125;
                v20.n128_u32[0] = v132;
                LODWORD(v31) = v76;
              }
            }
            v32 = *(unsigned __int8 **)(*(_QWORD *)(v18 + 136) + 64);
            v33 = (WebCore::Length *)(v32 + 52);
            v34 = v32[56];
            if (v34 == 4)
            {
              if (v32[58])
                v35 = *(float *)v33;
              else
                v35 = (float)*(int *)v33;
            }
            else if (v34 == 11)
            {
              v129 = v27;
              v138 = v20.n128_u32[0];
              v107 = v31;
              LODWORD(v108) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v144) >> 32;
              if (!v109)
                v108 = 0.0;
              WebCore::Length::nonNanCalculatedValue(v33, v108);
              v35 = v20.n128_f32[0];
              v31 = v107;
              v27 = v129;
              v20.n128_u32[0] = v138;
            }
            else
            {
              v35 = 0.0;
              if (v34 == 3)
              {
                v120 = v31;
                v126 = v27;
                v133 = v20.n128_u32[0];
                v77 = *((float *)v32 + 13);
                if (!v32[58])
                  v77 = (float)SLODWORD(v77);
                WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v144, 1, (uint64_t)&v142, v77 / 100.0);
                v78 = 0;
                if (v143 != -1)
                {
                  if (!v143)
                    v78 = v142.n128_u32[0];
                  ((void (*)(float *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v143])(v141, &v142);
                }
                v27 = v126;
                v20.n128_u32[0] = v133;
                v31 = v120;
                LODWORD(v35) = v78;
              }
            }
            v36 = *(unsigned __int8 **)(*(_QWORD *)(v18 + 136) + 64);
            v37 = (WebCore::Length *)(v36 + 28);
            v38 = v36[32];
            if (v38 == 4)
            {
              if (v36[34])
                v39 = *(float *)v37;
              else
                v39 = (float)*(int *)v37;
            }
            else if (v38 == 11)
            {
              v130 = v27;
              v139 = v20.n128_u32[0];
              v123 = v31;
              v110 = v35;
              LODWORD(v111) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v144);
              if (!v112)
                v111 = 0.0;
              WebCore::Length::nonNanCalculatedValue(v37, v111);
              v39 = v20.n128_f32[0];
              v35 = v110;
              v31 = v123;
              v27 = v130;
              v20.n128_u32[0] = v139;
            }
            else
            {
              v39 = 0.0;
              if (v38 == 3)
              {
                v117 = v35;
                v121 = v31;
                v127 = v27;
                v134 = v20.n128_u32[0];
                v79 = *((float *)v36 + 7);
                if (!v36[34])
                  v79 = (float)SLODWORD(v79);
                WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v144, 0, (uint64_t)&v142, v79 / 100.0);
                v80 = 0;
                if (v143 != -1)
                {
                  if (!v143)
                    v80 = v142.n128_u32[0];
                  ((void (*)(float *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v143])(v141, &v142);
                }
                v27 = v127;
                v20.n128_u32[0] = v134;
                v35 = v117;
                v31 = v121;
                LODWORD(v39) = v80;
              }
            }
            v40 = *(unsigned __int8 **)(*(_QWORD *)(v18 + 136) + 64);
            v41 = (WebCore::Length *)(v40 + 36);
            v42 = v40[40];
            if (v42 == 4)
            {
              if (v40[42])
                v43 = *(float *)v41;
              else
                v43 = (float)*(int *)v41;
            }
            else if (v42 == 11)
            {
              v131 = v27;
              v140 = v20.n128_u32[0];
              v119 = v35;
              v124 = v31;
              v113 = v39;
              LODWORD(v114) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v144) >> 32;
              if (!v115)
                v114 = 0.0;
              WebCore::Length::nonNanCalculatedValue(v41, v114);
              v39 = v113;
              v43 = v20.n128_f32[0];
              v35 = v119;
              v31 = v124;
              v27 = v131;
              v20.n128_u32[0] = v140;
            }
            else
            {
              v43 = 0.0;
              if (v42 == 3)
              {
                v116 = v39;
                v118 = v35;
                v122 = v31;
                v128 = v27;
                v135 = v20.n128_u32[0];
                v81 = *((float *)v40 + 9);
                if (!v40[42])
                  v81 = (float)SLODWORD(v81);
                WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v144, 1, (uint64_t)&v142, v81 / 100.0);
                if (v143 != -1)
                {
                  if (!v143)
                    v43 = v142.n128_f32[0];
                  ((void (*)(float *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v143])(v141, &v142);
                }
                v27 = v128;
                v20.n128_u32[0] = v135;
                v35 = v118;
                v31 = v122;
                v39 = v116;
              }
            }
            *(_QWORD *)v141 = __PAIR64__(LODWORD(v43), LODWORD(v39));
            v44 = *(_QWORD *)(*(_QWORD *)(v18 + 136) + 64);
            if (!*(_BYTE *)(v44 + 32) || v39 < 0.0)
            {
              v39 = fmaxf(v43, 0.0);
              v141[0] = v39;
            }
            if (!*(_BYTE *)(v44 + 40) || v43 < 0.0)
            {
              v43 = fmaxf(v39, 0.0);
              v141[1] = v43;
            }
            *(_DWORD *)(a3 + 64) = 0;
            if (v39 <= 0.0 && v43 <= 0.0)
            {
              v142.n128_u64[0] = __PAIR64__(LODWORD(v35), LODWORD(v31));
              v142.n128_u64[1] = __PAIR64__(LODWORD(v27), v20.n128_u32[0]);
              WebCore::Path::addRect((WebCore::Path *)a3, (const WebCore::FloatRect *)&v142);
            }
            else
            {
              v142.n128_u64[0] = __PAIR64__(LODWORD(v35), LODWORD(v31));
              v142.n128_u64[1] = __PAIR64__(LODWORD(v27), v20.n128_u32[0]);
              WebCore::Path::addRoundedRect((WebCore::Path *)a3, &v142, v141, 1, v20);
            }
            goto LABEL_50;
          }
LABEL_89:
          *(_QWORD *)(a3 + 64) = 0;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)a3 = 0u;
          *(_OWORD *)(a3 + 16) = 0u;
LABEL_50:
          v45 = *(_QWORD *)v144;
          *(_QWORD *)v144 = 0;
          if (!v45)
            return;
          do
          {
            v46 = __ldaxr((unsigned int *)v45);
            v47 = --v46 == 0;
          }
          while (__stlxr(v46, (unsigned int *)v45));
          goto LABEL_52;
        }
        break;
      case 230:
        WebCore::pathFromPolylineElement(a3, *((WebCore::SVGPolyElement **)this + 28));
        return;
      case 242:
        WebCore::pathFromUseElement((WebCore *)a3, this);
        return;
    }
LABEL_190:
    *(_QWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  if (*(unsigned __int16 *)(*((_QWORD *)this + 12) + 10) > 0xE4u)
  {
    v82 = (uint64_t *)*((_QWORD *)this + 28);
    v84 = v82 + 3;
    v83 = v82[3];
    if (v83
      && *(_DWORD *)(v83 - 12)
      && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v84, (uint64_t **)v144), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v84, (uint64_t **)&v142), *(_QWORD *)&v144[8] != v142.n128_u64[1]))
    {
      v85 = v82 + 6;
    }
    else
    {
      v85 = v82 + 5;
    }
    v86 = *v85;
    if (!*(_DWORD *)(*v85 + 44))
      goto LABEL_190;
    *(_DWORD *)(a3 + 64) = 0;
    WebCore::Path::moveTo((WebCore::Path *)a3, (const WebCore::FloatPoint *)(**(_QWORD **)(v86 + 32) + 28));
    v87 = *(unsigned int *)(v86 + 44);
    if (v87 >= 2)
    {
      v88 = 1;
      while (v88 < *(unsigned int *)(v86 + 44))
      {
        WebCore::Path::addLineTo(a3, (const WebCore::FloatPoint *)(*(_QWORD *)(*(_QWORD *)(v86 + 32) + 8 * v88++) + 28));
        if (v87 == v88)
          goto LABEL_155;
      }
      __break(0xC471u);
      goto LABEL_221;
    }
LABEL_155:
    v89 = *(_DWORD *)(a3 + 64);
    if (v89 == 2)
    {
      v92 = *(_QWORD *)(a3 + 8);
      if (!v92)
        goto LABEL_170;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 200))(v92) & 1) != 0)
        return;
      v89 = *(_DWORD *)(a3 + 64);
    }
    else if (!v89)
    {
      return;
    }
    if (v89 == 2)
    {
      v94 = *(_QWORD *)(a3 + 8);
      if (!v94)
        goto LABEL_170;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 208))(v94) & 1) != 0)
        return;
      if (*(_DWORD *)(a3 + 64) != 1)
      {
LABEL_170:
        v93 = WebCore::Path::ensureImpl((WebCore::Path *)a3);
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 120))(v93);
        return;
      }
      v90 = *(_DWORD *)(a3 + 60);
    }
    else
    {
      if (v89 != 1)
        goto LABEL_170;
      v90 = *(_DWORD *)(a3 + 60);
      if (v90 == 6 || v90 == 15)
        return;
    }
    if (v90 == 5)
    {
      *(_OWORD *)v144 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)&v144[13] = *(_QWORD *)(a3 + 21);
      v95 = *(_OWORD *)&v144[16];
      *(_OWORD *)(a3 + 40) = v145;
      v96 = v146;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v144;
      *(_OWORD *)(a3 + 24) = v95;
      *(_DWORD *)(a3 + 56) = v96;
      *(_DWORD *)(a3 + 60) = 6;
      return;
    }
    goto LABEL_170;
  }
  if (v5 != 221)
  {
    if (v5 == 184)
    {
      WebCore::pathFromCircleElement((WebCore *)a3, this);
      return;
    }
    if (v5 == 189)
    {
      WebCore::pathFromEllipseElement((WebCore *)a3, this);
      return;
    }
    goto LABEL_190;
  }
  *(_DWORD *)(a3 + 64) = 0;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v141, this);
  v52 = *((_QWORD *)this + 28);
  v54 = (uint64_t *)(v52 + 24);
  v53 = *(_QWORD *)(v52 + 24);
  if (v53
    && *(_DWORD *)(v53 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v54, (uint64_t **)v144), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v54, (uint64_t **)&v142), *(_QWORD *)&v144[8] != v142.n128_u64[1]))
  {
    v55 = v52 + 48;
  }
  else
  {
    v55 = v52 + 40;
  }
  v56 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v55 + 28), (const WebCore::SVGLengthContext *)v141);
  v57 = *((_QWORD *)this + 29);
  v59 = (uint64_t *)(v57 + 24);
  v58 = *(_QWORD *)(v57 + 24);
  if (v58
    && *(_DWORD *)(v58 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v59, (uint64_t **)v144), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v59, (uint64_t **)&v142), *(_QWORD *)&v144[8] != v142.n128_u64[1]))
  {
    v60 = v57 + 48;
  }
  else
  {
    v60 = v57 + 40;
  }
  v61 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v60 + 28), (const WebCore::SVGLengthContext *)v141);
  *(float *)v144 = v56;
  *(float *)&v144[4] = v61;
  WebCore::Path::moveTo((WebCore::Path *)a3, (const WebCore::FloatPoint *)v144);
  v62 = *((_QWORD *)this + 30);
  v64 = (uint64_t *)(v62 + 24);
  v63 = *(_QWORD *)(v62 + 24);
  if (v63
    && *(_DWORD *)(v63 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v64, (uint64_t **)v144), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v64, (uint64_t **)&v142), *(_QWORD *)&v144[8] != v142.n128_u64[1]))
  {
    v65 = v62 + 48;
  }
  else
  {
    v65 = v62 + 40;
  }
  v66 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v65 + 28), (const WebCore::SVGLengthContext *)v141);
  v67 = *((_QWORD *)this + 31);
  v69 = (uint64_t *)(v67 + 24);
  v68 = *(_QWORD *)(v67 + 24);
  if (v68
    && *(_DWORD *)(v68 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v69, (uint64_t **)v144), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v69, (uint64_t **)&v142), *(_QWORD *)&v144[8] != v142.n128_u64[1]))
  {
    v70 = v67 + 48;
  }
  else
  {
    v70 = v67 + 40;
  }
  v71 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v70 + 28), (const WebCore::SVGLengthContext *)v141);
  *(float *)v144 = v66;
  *(float *)&v144[4] = v71;
  WebCore::Path::addLineTo(a3, (const WebCore::FloatPoint *)v144);
  v45 = *(_QWORD *)v141;
  *(_QWORD *)v141 = 0;
  if (!v45)
    return;
  do
  {
    v72 = __ldaxr((unsigned int *)v45);
    v47 = --v72 == 0;
  }
  while (__stlxr(v72, (unsigned int *)v45));
LABEL_52:
  if (v47)
  {
    atomic_store(1u, (unsigned int *)v45);
    v48 = *(unsigned int *)(v45 + 28);
    if ((_DWORD)v48)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v45 + 16), (WTF::StringImpl *)(*(_QWORD *)(v45 + 16) + 32 * v48));
    v49 = *(WTF **)(v45 + 16);
    if (v49)
    {
      *(_QWORD *)(v45 + 16) = 0;
      *(_DWORD *)(v45 + 24) = 0;
      WTF::fastFree(v49, v19);
    }
    WTF::fastFree((WTF *)v45, v19);
  }
}

void WebCore::pathFromCircleElement(WebCore *this, const WebCore::SVGCircleElement *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  float *v6;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  float *v11;
  int v12;
  float v13;
  float v14;
  unsigned __int8 *v15;
  WebCore::Length *v16;
  int v17;
  float v18;
  float v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  WebCore::Length *v25;
  float v26;
  float v27;
  unint64_t v28;
  char v29;
  float v30;
  WebCore::Length *v31;
  WebCore::Length *v32;
  float v33;
  char v34;
  WebCore::Length *v35;
  float v36;
  float v37;
  char v38;
  float v39;
  unsigned __int32 v40;
  unsigned __int32 v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  unsigned __int32 v46;
  float v47;
  float v48;
  float v49;
  float v50;
  WTF *v51[5];
  __n128 v52;
  int v53;
  char v54;

  v3 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    return;
  }
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196531F14);
  }
  *((_DWORD *)this + 16) = 0;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v51, a2);
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 64);
  v6 = (float *)(v5 + 20);
  v7 = *(unsigned __int8 *)(v5 + 24);
  switch(v7)
  {
    case 4:
      if (*(_BYTE *)(v5 + 26))
        v8 = *v6;
      else
        v8 = (float)*(int *)v6;
LABEL_17:
      if (v8 > 0.0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 64);
        v11 = (float *)(v10 + 4);
        v12 = *(unsigned __int8 *)(v10 + 8);
        if (v12 == 4)
        {
          if (*(_BYTE *)(v10 + 10))
            v13 = *v11;
          else
            v13 = (float)*(int *)v11;
        }
        else if (v12 == 11)
        {
          v44 = v3;
          v32 = (WebCore::Length *)(v10 + 4);
          v49 = v8;
          LODWORD(v33) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v51);
          if (!v34)
            v33 = 0.0;
          v35 = v32;
          v3 = v44;
          WebCore::Length::nonNanCalculatedValue(v35, v33);
          v13 = v36;
          v8 = v49;
        }
        else
        {
          v13 = 0.0;
          if (v12 == 3)
          {
            v47 = v8;
            v14 = *(float *)(v10 + 4);
            if (!*(_BYTE *)(v10 + 10))
              v14 = (float)SLODWORD(v14);
            WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v51, 0, (uint64_t)&v52, v14 / 100.0);
            *(float *)&v41 = 0.0;
            if (v53 != -1)
            {
              if (!v53)
                v41 = v52.n128_u32[0];
              ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v53])(&v54, &v52);
            }
            v8 = v47;
            v13 = *(float *)&v41;
          }
        }
        v15 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 136) + 64);
        v16 = (WebCore::Length *)(v15 + 12);
        v17 = v15[16];
        if (v17 == 4)
        {
          if (v15[18])
            v18 = *(float *)v16;
          else
            v18 = (float)*(int *)v16;
        }
        else if (v17 == 11)
        {
          v50 = v8;
          v45 = v13;
          LODWORD(v37) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v51) >> 32;
          if (!v38)
            v37 = 0.0;
          WebCore::Length::nonNanCalculatedValue(v16, v37);
          v18 = v39;
          v13 = v45;
          v8 = v50;
        }
        else
        {
          v18 = 0.0;
          if (v17 == 3)
          {
            v42 = v13;
            v48 = v8;
            v19 = *((float *)v15 + 3);
            if (!v15[18])
              v19 = (float)SLODWORD(v19);
            WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v51, 1, (uint64_t)&v52, v19 / 100.0);
            *(float *)&v40 = 0.0;
            if (v53 != -1)
            {
              if (!v53)
                v40 = v52.n128_u32[0];
              ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v53])(&v54, &v52);
            }
            v8 = v48;
            v18 = *(float *)&v40;
            v13 = v42;
          }
        }
        v52.n128_f32[0] = v13 - v8;
        v52.n128_f32[1] = v18 - v8;
        v52.n128_f32[2] = v8 + v8;
        v52.n128_f32[3] = v8 + v8;
        WebCore::Path::addEllipseInRect(this, &v52);
      }
      break;
    case 11:
      v43 = v3;
      v25 = (WebCore::Length *)(v5 + 20);
      v28 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v51);
      v27 = *((float *)&v28 + 1);
      v26 = *(float *)&v28;
      if (!v29)
      {
        v27 = 0.0;
        v26 = 0.0;
      }
      v30 = hypotf(v26, v27);
      v31 = v25;
      v3 = v43;
      WebCore::Length::nonNanCalculatedValue(v31, v30 / 1.4142);
      goto LABEL_17;
    case 3:
      v9 = *(float *)(v5 + 20);
      if (!*(_BYTE *)(v5 + 26))
        v9 = (float)SLODWORD(v9);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v51, 2, (uint64_t)&v52, v9 / 100.0);
      *(float *)&v46 = 0.0;
      if (v53 != -1)
      {
        if (!v53)
          v46 = v52.n128_u32[0];
        ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v53])(&v54, &v52);
      }
      v8 = *(float *)&v46;
      goto LABEL_17;
  }
  v20 = v51[0];
  v51[0] = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v23 = *((unsigned int *)v20 + 7);
      if ((_DWORD)v23)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v23));
      v24 = (WTF *)*((_QWORD *)v20 + 2);
      if (v24)
      {
        *((_QWORD *)v20 + 2) = 0;
        *((_DWORD *)v20 + 6) = 0;
        WTF::fastFree(v24, v4);
      }
      WTF::fastFree(v20, v4);
    }
  }
}

void WebCore::pathFromEllipseElement(WebCore *this, const WebCore::SVGEllipseElement *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  float *v6;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  float *v11;
  int v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  int v17;
  float v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  unsigned __int8 *v23;
  WebCore::Length *v24;
  int v25;
  float v26;
  float v27;
  uint64_t v28;
  WTF *v29;
  WebCore::Length *v30;
  float v31;
  char v32;
  WebCore::Length *v33;
  WebCore::Length *v34;
  float v35;
  char v36;
  WebCore::Length *v37;
  float v38;
  WebCore::Length *v39;
  float v40;
  char v41;
  WebCore::Length *v42;
  float v43;
  float v44;
  char v45;
  float v46;
  unsigned __int32 v47;
  unsigned __int32 v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unsigned __int32 v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  unsigned __int32 v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  WTF *v66[5];
  __n128 v67;
  int v68;
  char v69;

  v3 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    return;
  }
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965323F8);
  }
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v66, a2);
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 64);
  v6 = (float *)(v5 + 28);
  v7 = *(unsigned __int8 *)(v5 + 32);
  switch(v7)
  {
    case 4:
      if (*(_BYTE *)(v5 + 34))
        v8 = *v6;
      else
        v8 = (float)*(int *)v6;
      break;
    case 11:
      v55 = v3;
      v30 = (WebCore::Length *)(v5 + 28);
      LODWORD(v31) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v66);
      if (!v32)
        v31 = 0.0;
      v33 = v30;
      v3 = v55;
      WebCore::Length::nonNanCalculatedValue(v33, v31);
      break;
    case 3:
      v9 = *(float *)(v5 + 28);
      if (!*(_BYTE *)(v5 + 34))
        v9 = (float)SLODWORD(v9);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v66, 0, (uint64_t)&v67, v9 / 100.0);
      *(float *)&v59 = 0.0;
      if (v68 != -1)
      {
        if (!v68)
          v59 = v67.n128_u32[0];
        ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v68])(&v69, &v67);
      }
      v8 = *(float *)&v59;
      break;
    default:
      goto LABEL_35;
  }
  if (v8 > 0.0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 64);
    v11 = (float *)(v10 + 36);
    v12 = *(unsigned __int8 *)(v10 + 40);
    switch(v12)
    {
      case 4:
        if (*(_BYTE *)(v10 + 42))
          v13 = *v11;
        else
          v13 = (float)*(int *)v11;
        break;
      case 11:
        v56 = v3;
        v34 = (WebCore::Length *)(v10 + 36);
        v63 = v8;
        LODWORD(v35) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v66) >> 32;
        if (!v36)
          v35 = 0.0;
        v37 = v34;
        v3 = v56;
        WebCore::Length::nonNanCalculatedValue(v37, v35);
        v13 = v38;
        v8 = v63;
        break;
      case 3:
        v60 = v8;
        v14 = *(float *)(v10 + 36);
        if (!*(_BYTE *)(v10 + 42))
          v14 = (float)SLODWORD(v14);
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v66, 1, (uint64_t)&v67, v14 / 100.0);
        *(float *)&v48 = 0.0;
        if (v68 != -1)
        {
          if (!v68)
            v48 = v67.n128_u32[0];
          ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v68])(&v69, &v67);
        }
        v8 = v60;
        v13 = *(float *)&v48;
        break;
      default:
        goto LABEL_35;
    }
    if (v13 > 0.0)
    {
      *((_DWORD *)this + 16) = 0;
      v15 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 64);
      v16 = (float *)(v15 + 4);
      v17 = *(unsigned __int8 *)(v15 + 8);
      if (v17 == 4)
      {
        if (*(_BYTE *)(v15 + 10))
          v18 = *v16;
        else
          v18 = (float)*(int *)v16;
      }
      else if (v17 == 11)
      {
        v57 = v3;
        v39 = (WebCore::Length *)(v15 + 4);
        v64 = v8;
        v51 = v13;
        LODWORD(v40) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v66);
        if (!v41)
          v40 = 0.0;
        v42 = v39;
        v3 = v57;
        WebCore::Length::nonNanCalculatedValue(v42, v40);
        v18 = v43;
        v13 = v51;
        v8 = v64;
      }
      else
      {
        v18 = 0.0;
        if (v17 == 3)
        {
          v49 = v13;
          v61 = v8;
          v22 = *(float *)(v15 + 4);
          if (!*(_BYTE *)(v15 + 10))
            v22 = (float)SLODWORD(v22);
          WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v66, 0, (uint64_t)&v67, v22 / 100.0);
          *(float *)&v53 = 0.0;
          if (v68 != -1)
          {
            if (!v68)
              v53 = v67.n128_u32[0];
            ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v68])(&v69, &v67);
          }
          v8 = v61;
          v13 = v49;
          v18 = *(float *)&v53;
        }
      }
      v23 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 136) + 64);
      v24 = (WebCore::Length *)(v23 + 12);
      v25 = v23[16];
      if (v25 == 4)
      {
        if (v23[18])
          v26 = *(float *)v24;
        else
          v26 = (float)*(int *)v24;
      }
      else if (v25 == 11)
      {
        v65 = v8;
        v52 = v13;
        v58 = v18;
        LODWORD(v44) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v66) >> 32;
        if (!v45)
          v44 = 0.0;
        WebCore::Length::nonNanCalculatedValue(v24, v44);
        v26 = v46;
        v13 = v52;
        v18 = v58;
        v8 = v65;
      }
      else
      {
        v26 = 0.0;
        if (v25 == 3)
        {
          v50 = v13;
          v54 = v18;
          v62 = v8;
          v27 = *((float *)v23 + 3);
          if (!v23[18])
            v27 = (float)SLODWORD(v27);
          WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v66, 1, (uint64_t)&v67, v27 / 100.0);
          *(float *)&v47 = 0.0;
          if (v68 != -1)
          {
            if (!v68)
              v47 = v67.n128_u32[0];
            ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v68])(&v69, &v67);
          }
          v8 = v62;
          v13 = v50;
          v18 = v54;
          v26 = *(float *)&v47;
        }
      }
      v67.n128_f32[0] = v18 - v8;
      v67.n128_f32[1] = v26 - v13;
      v67.n128_f32[2] = v8 + v8;
      v67.n128_f32[3] = v13 + v13;
      WebCore::Path::addEllipseInRect(this, &v67);
      goto LABEL_36;
    }
  }
LABEL_35:
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
LABEL_36:
  v19 = v66[0];
  v66[0] = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v19));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v19);
      v28 = *((unsigned int *)v19 + 7);
      if ((_DWORD)v28)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v19 + 2), (WTF::StringImpl *)(*((_QWORD *)v19 + 2) + 32 * v28));
      v29 = (WTF *)*((_QWORD *)v19 + 2);
      if (v29)
      {
        *((_QWORD *)v19 + 2) = 0;
        *((_DWORD *)v19 + 6) = 0;
        WTF::fastFree(v29, v4);
      }
      WTF::fastFree(v19, v4);
    }
  }
}

uint64_t WebCore::pathFromPolylineElement(uint64_t a1, WebCore::SVGPolyElement *this)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = WebCore::SVGPolyElement::points(this);
  if (*(_DWORD *)(result + 44))
  {
    v4 = result;
    *(_DWORD *)(a1 + 64) = 0;
    result = WebCore::Path::moveTo((WebCore::Path *)a1, (const WebCore::FloatPoint *)(**(_QWORD **)(result + 32) + 28));
    v5 = *(unsigned int *)(v4 + 44);
    if (v5 >= 2)
    {
      v6 = 1;
      while (v6 < *(unsigned int *)(v4 + 44))
      {
        result = WebCore::Path::addLineTo(a1, (const WebCore::FloatPoint *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6++) + 28));
        if (v5 == v6)
          return result;
      }
      __break(0xC471u);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

WebCore::Document *WebCore::pathFromUseElement(WebCore *this, const WebCore::SVGUseElement *a2)
{
  WebCore::Document *result;
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  const WebCore::SVGElement *v14;
  void *v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31[5];
  WebCore::Node *v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;

  result = WebCore::SVGUseElement::clipChild(a2, &v32);
  v5 = v32;
  if (!v32)
  {
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    return result;
  }
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v31, a2);
  v6 = *((_QWORD *)a2 + 31);
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7 || !*(_DWORD *)(v7 - 12))
    goto LABEL_3;
  v19 = *(unsigned int *)(v7 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = *(uint64_t **)(v6 + 24);
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_3;
    }
  }
  else
  {
    v21 = *(uint64_t **)(v6 + 24);
  }
  v27 = (uint64_t *)(v7 + 8 * v19);
  if (v21 == v27)
    goto LABEL_3;
  v28 = *v21;
LABEL_39:
  if (!*(_QWORD *)(v28 + 8))
  {
    while (++v21 != v27)
    {
      v28 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v27)
          goto LABEL_39;
        break;
      }
    }
LABEL_3:
    v8 = v6 + 40;
    goto LABEL_4;
  }
  v8 = v6 + 48;
LABEL_4:
  v9 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v8 + 28), (const WebCore::SVGLengthContext *)v31);
  v10 = *((_QWORD *)a2 + 32);
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11 || !*(_DWORD *)(v11 - 12))
    goto LABEL_5;
  v22 = *(unsigned int *)(v11 - 4);
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    v24 = *(uint64_t **)(v10 + 24);
    while ((unint64_t)(*v24 + 1) <= 1)
    {
      ++v24;
      v23 -= 8;
      if (!v23)
        goto LABEL_5;
    }
  }
  else
  {
    v24 = *(uint64_t **)(v10 + 24);
  }
  v29 = (uint64_t *)(v11 + 8 * v22);
  if (v24 == v29)
    goto LABEL_5;
  v30 = *v24;
LABEL_48:
  if (!*(_QWORD *)(v30 + 8))
  {
    while (++v24 != v29)
    {
      v30 = *v24;
      if ((unint64_t)(*v24 + 1) > 1)
      {
        if (v24 != v29)
          goto LABEL_48;
        break;
      }
    }
LABEL_5:
    v12 = v10 + 40;
    goto LABEL_6;
  }
  v12 = v10 + 48;
LABEL_6:
  v13 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v12 + 28), (const WebCore::SVGLengthContext *)v31);
  WebCore::pathFromGraphicsElement(v5, v14);
  if (v9 != 0.0 || v13 != 0.0)
  {
    v33 = (float64x2_t)0x3FF0000000000000uLL;
    v34 = 0;
    v35 = 0x3FF0000000000000;
    v36 = v9;
    v37 = v13;
    WebCore::Path::transform(this, &v33);
  }
  v16 = v31[0];
  v31[0] = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v25 = *((unsigned int *)v16 + 7);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v16 + 2), (WTF::StringImpl *)(*((_QWORD *)v16 + 2) + 32 * v25));
      v26 = (WTF *)*((_QWORD *)v16 + 2);
      if (v26)
      {
        *((_QWORD *)v16 + 2) = 0;
        *((_DWORD *)v16 + 6) = 0;
        WTF::fastFree(v26, v15);
      }
      WTF::fastFree(v16, v15);
    }
  }
  result = v32;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        return (WebCore::Document *)WebCore::Node::removedLastRef(v32);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGRenderSupport::clippedOverflowRectForRepaint(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  float v15;
  int v16;
  uint64_t v17;
  float v19;
  int v20;
  uint64_t v21;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD v29[4];
  uint64_t v30;
  char v31;

  v5 = *(unsigned __int8 *)(a1 + 46);
  if (v5 != 83)
  {
    if ((*(_BYTE *)(a1 + 52) & 7) != 4)
    {
      v6 = v5 - 67;
      v7 = v6 > 0x13;
      v8 = 1 << v6;
      v9 = 917521;
      goto LABEL_4;
    }
    if (v5 != 85 && (*(_BYTE *)(a1 + 53) & 1) != 0)
    {
      v25 = v5 - 67;
      v7 = v25 > 0x13;
      v8 = 1 << v25;
      v9 = 655377;
LABEL_4:
      v10 = v8 & v9;
      if (v7 || v10 == 0)
        goto LABEL_9;
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v27 = a1;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v27 = a1;
      do
        v27 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8);
      while ((*(_BYTE *)(v27 + 45) & 0x10) == 0);
    }
    while ((*(_BYTE *)(v27 + 21) & 0x80) == 0)
    {
      do
        v27 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8);
      while ((*(_BYTE *)(v27 + 45) & 0x10) == 0);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v27 + 144) + 224);
    if (v28)
    {
      if (*(_QWORD *)(v28 + 8))
        return 0;
    }
  }
LABEL_9:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0 || (*(_BYTE *)(a1 + 120) & 0x30) != 0)
  {
    v26 = a1;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v26 = a1;
      do
        v26 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8);
      while ((*(_BYTE *)(v26 + 45) & 0x10) == 0);
    }
    while ((*(_BYTE *)(v26 + 21) & 0x80) == 0)
    {
      do
        v26 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8);
      while ((*(_BYTE *)(v26 + 45) & 0x10) == 0);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v26 + 144) + 26) & 8) == 0)
      return 0;
  }
  v29[0] = (*(float (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 256))(a1, (a3 >> 36) & 1);
  v29[1] = v12;
  v29[2] = v13;
  v29[3] = v14;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(&v30, a1, v29, a2, 0xC00000000);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x196532B04);
  }
  v15 = floorf(*(float *)&v30 * 64.0);
  if (v15 > -2147500000.0)
    v16 = (int)v15;
  else
    v16 = 0x80000000;
  if (v15 < 2147500000.0)
    LODWORD(v17) = v16;
  else
    LODWORD(v17) = 0x7FFFFFFF;
  if (v15 >= 2147500000.0 || v15 <= -2147500000.0)
    v17 = v17;
  else
    v17 = (int)v15;
  v19 = floorf(*((float *)&v30 + 1) * 64.0);
  if (v19 > -2147500000.0)
    v20 = (int)v19;
  else
    v20 = 0x80000000;
  if (v19 < 2147500000.0)
    LODWORD(v21) = v20;
  else
    LODWORD(v21) = 0x7FFFFFFF;
  if (v19 >= 2147500000.0 || v19 <= -2147500000.0)
    v21 = v21;
  else
    v21 = (int)v19;
  return v17 | (v21 << 32);
}

_QWORD *WebCore::SVGRenderSupport::computeFloatVisibleRectInContainer@<X0>(_QWORD *result@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __n128 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float v32;
  float v33;
  double v34;
  double v35;
  float v36;
  float v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float v43;
  float v44;
  double v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v51;
  float v52;
  float v54;
  float v55;
  float v57;
  float v58;
  float v60;
  __n128 v61;

  v8 = result[4];
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  if ((*(_BYTE *)(v9 + 45) & 1) != 0)
    goto LABEL_69;
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8);
  if (!v10)
    goto LABEL_69;
  v11 = *(_WORD *)(v10 + 28);
  if ((v11 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196532E88);
  }
  if ((v11 & 0x20) != 0)
  {
    v13 = *a2;
    v61 = *a2;
    v12 = *(_QWORD *)(result[11] + 16);
    v13.n128_u32[0] = 0;
    if ((*(_BYTE *)(v12 + 52) & 0x1F) == 0x10)
    {
      v14 = v61.n128_f32[2] + 0.0;
      v15 = v61.n128_f32[1];
      v16 = v61.n128_f32[0];
      v17 = v61.n128_f32[3] + 0.0;
    }
    else
    {
      if ((*(_BYTE *)(v12 + 52) & 0xF) != 0)
      {
        v13.n128_u32[0] = *(_DWORD *)(v12 + 48);
        v60 = 3.0;
        if (v13.n128_f32[0] >= 3.0)
          v60 = *(float *)(v12 + 48);
        if ((*(_BYTE *)(v12 + 52) & 0x10) != 0)
          v13.n128_f32[0] = v60;
      }
      v16 = v61.n128_f32[0] - v13.n128_f32[0];
      v14 = v13.n128_f32[0] + (float)(v13.n128_f32[0] + v61.n128_f32[2]);
      v15 = v61.n128_f32[1] - v13.n128_f32[0];
      v17 = v13.n128_f32[0] + (float)(v13.n128_f32[0] + v61.n128_f32[3]);
    }
    v18 = (double *)(*(uint64_t (**)(_QWORD *, __n128))(*result + 272))(result, v13);
    v20 = *v18;
    v19 = v18[1];
    v22 = v18[2];
    v21 = v18[3];
    if (*v18 == 1.0 && v19 == 0.0 && (v22 == 0.0 ? (v23 = v21 == 1.0) : (v23 = 0), v23))
    {
      v24 = v18[4];
      v25 = v18[5];
      v26 = v16 + v24;
      v27 = v15 + v25;
    }
    else
    {
      v28 = v22 * v15;
      v29 = v18[4];
      v30 = v18[5];
      v31 = v21 * v15;
      v32 = v29 + v28 + v20 * v16;
      v33 = v30 + v31 + v19 * v16;
      v34 = (float)(v16 + v14);
      v35 = v30 + v31 + v19 * v34;
      v36 = v29 + v28 + v20 * v34;
      v37 = v35;
      v38 = (float)(v17 + v15);
      v39 = v22 * v38;
      v40 = v29 + v39 + v20 * v34;
      v41 = v21 * v38;
      v42 = v30 + v41 + v19 * v34;
      v43 = v40;
      v44 = v42;
      v45 = v29 + v39 + v20 * v16;
      v46 = v45;
      v47 = v30 + v41 + v19 * v16;
      if (v46 >= v43)
        v26 = v40;
      else
        v26 = v45;
      if (v36 >= v32)
        v48 = v32;
      else
        v48 = v36;
      if (v26 >= v48)
        v26 = v48;
      v49 = fabsf(v26);
      if (v49 == INFINITY || v49 > 2147500000.0)
        v26 = (float)((SLODWORD(v26) >> 31) ^ 0x7FFFFFFF);
      if (v47 >= v44)
        v27 = v44;
      else
        v27 = v47;
      if (v37 >= v33)
        v51 = v33;
      else
        v51 = v37;
      if (v27 >= v51)
        v27 = v51;
      v52 = fabsf(v27);
      if (v52 == INFINITY || v52 > 2147500000.0)
        v27 = (float)((SLODWORD(v27) >> 31) ^ 0x7FFFFFFF);
      if (v32 < v36)
        v32 = v36;
      if (v43 >= v46)
        v54 = v40;
      else
        v54 = v46;
      if (v32 < v54)
        v32 = v54;
      v55 = fabsf(v32);
      if (v55 == INFINITY || v55 > 2147500000.0)
        v32 = (float)((SLODWORD(v32) >> 31) ^ 0x7FFFFFFF);
      if (v33 < v37)
        v33 = v37;
      if (v44 >= v47)
        v57 = v44;
      else
        v57 = v47;
      if (v33 < v57)
        v33 = v57;
      v58 = fabsf(v33);
      if (v58 == INFINITY || v58 > 2147500000.0)
        v33 = (float)((SLODWORD(v33) >> 31) ^ 0x7FFFFFFF);
      v14 = v32 - v26;
      v17 = v33 - v27;
    }
    v61.n128_u64[0] = __PAIR64__(LODWORD(v27), LODWORD(v26));
    v61.n128_u64[1] = __PAIR64__(LODWORD(v17), LODWORD(v14));
    return (_QWORD *)(*(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v9 + 480))(v9, &v61, a3, a4);
  }
  else
  {
LABEL_69:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::SVGRenderSupport::localToParentTransform(WebCore::SVGRenderSupport *this, const WebCore::RenderElement *a2, WebCore::AffineTransform *a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  const WebCore::AffineTransform *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 && *(_BYTE *)(v5 + 46) == 103)
    {
      v10 = (const WebCore::AffineTransform *)(*(uint64_t (**)(WebCore::SVGRenderSupport *, const WebCore::RenderElement *, WebCore::AffineTransform *))(*(_QWORD *)this + 272))(this, a2, a3);
      v11 = *(_OWORD *)(v5 + 360);
      v13 = *(_OWORD *)(v5 + 344);
      v14 = v11;
      v15 = *(_OWORD *)(v5 + 376);
      WebCore::AffineTransform::multiply((WebCore::AffineTransform *)&v13, v10);
      v12 = v14;
      *(_OWORD *)a2 = v13;
      *((_OWORD *)a2 + 1) = v12;
      v7 = v15;
      goto LABEL_5;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = (_OWORD *)(*(uint64_t (**)(WebCore::SVGRenderSupport *, const WebCore::RenderElement *, WebCore::AffineTransform *))(*(_QWORD *)this + 272))(this, a2, a3);
  v8 = v6[1];
  v7 = v6[2];
  *(_OWORD *)a2 = *v6;
  *((_OWORD *)a2 + 1) = v8;
LABEL_5:
  *((_OWORD *)a2 + 2) = v7;
  return v5;
}

uint64_t WebCore::SVGRenderSupport::mapLocalToContainer(WebCore::SVGRenderSupport *this, const WebCore::RenderElement *a2, float64x2_t **a3, WebCore::TransformState *a4, BOOL *a5)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  double v37;
  double v38;
  __int128 v39;

  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9 && *(_BYTE *)(v9 + 46) == 103)
    {
      v18 = (double *)(*(uint64_t (**)(WebCore::SVGRenderSupport *, const WebCore::RenderElement *, float64x2_t **, WebCore::TransformState *, BOOL *))(*(_QWORD *)this + 272))(this, a2, a3, a4, a5);
      v19 = *(double *)(v9 + 344);
      v20 = *(double *)(v9 + 352);
      v21 = *(double *)(v9 + 360);
      v22 = *(double *)(v9 + 368);
      v23 = v18[1];
      v11 = v21 * v23 + *v18 * v19;
      v12 = v22 * v23 + *v18 * v20;
      v24 = v18[2];
      v25 = v18[3];
      v13 = v21 * v25 + v24 * v19;
      v14 = v22 * v25 + v24 * v20;
      v26 = v18[4];
      v27 = v18[5];
      v15 = *(double *)(v9 + 376) + v21 * v27 + v26 * v19;
      v16 = *(double *)(v9 + 384) + v22 * v27 + v26 * v20;
      goto LABEL_5;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = (double *)(*(uint64_t (**)(WebCore::SVGRenderSupport *, const WebCore::RenderElement *, float64x2_t **, WebCore::TransformState *, BOOL *))(*(_QWORD *)this + 272))(this, a2, a3, a4, a5);
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = v10[3];
  v15 = v10[4];
  v16 = v10[5];
LABEL_5:
  v28.f64[0] = v11;
  v28.f64[1] = v12;
  v29 = 0;
  v30 = 0;
  v31 = v13;
  v32 = v14;
  v33 = 0;
  v34 = 0;
  v35 = constinit_13;
  v36 = unk_1969F8D70;
  v37 = v15;
  v38 = v16;
  v39 = xmmword_1968A14C0;
  WebCore::TransformState::applyTransform(a3, &v28, 0, 0);
  return (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *, float64x2_t **, uint64_t, WebCore::TransformState *))(*(_QWORD *)v9 + 576))(v9, a2, a3, 2, a4);
}

uint64_t WebCore::SVGRenderSupport::checkForSVGRepaintDuringLayout(WebCore::SVGRenderSupport *this, const WebCore::RenderElement *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  char v8;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x200) != 0)
  {
    if ((v2 & 0x8000) == 0)
      goto LABEL_24;
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
      goto LABEL_20;
    v7 = *((_QWORD *)this + 18);
    if (!v7 || (*(_BYTE *)(v7 + 25) & 8) == 0)
    {
LABEL_24:
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 528)
                                             + 8)
                                 + 288)
                     + 476))
      {
        v3 = *((_QWORD *)this + 4);
        if (!v3)
          return 1;
        v4 = *(_QWORD *)(v3 + 8);
        if (!v4 || (*(_BYTE *)(v4 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v4 + 53) & 3) != 0)
          return 1;
        v6 = *(_DWORD *)(v4 + 16) + 1;
        *(_DWORD *)(v4 + 16) = v6;
        if (*(_BYTE *)(v4 + 210)
          || (v8 = (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *))(*(_QWORD *)v4 + 800))(v4, a2),
              v6 = *(_DWORD *)(v4 + 16),
              (v8 & 1) != 0))
        {
          if (v6)
          {
            result = 0;
LABEL_12:
            *(_DWORD *)(v4 + 16) = v6 - 1;
            return result;
          }
        }
        else if (v6)
        {
          result = 1;
          goto LABEL_12;
        }
LABEL_20:
        __break(0xC471u);
        JUMPOUT(0x1965331C8);
      }
    }
  }
  return 0;
}

void WebCore::SVGRenderSupport::computeContainerBoundingBoxes(uint64_t a1, float32x2_t *a2, _BYTE *a3, float *a4, uint64_t a5)
{
  uint64_t v5;
  int v10;
  float64x2_t *v11;
  WebCore::AffineTransform *v12;
  int v13;
  int v14;
  int v15;
  int8x8_t v16;
  __int32 v17;
  float32x2_t v18;
  __int32 v19;
  int8x8_t v20;
  float32x2_t v21;
  int8x8_t v22;
  int v23;
  int v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  int8x8_t v39;
  __int32 v40;
  float32x2_t v41;
  __int32 v42;
  int8x8_t v43;
  float32x2_t v44;
  int8x8_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  int v54;
  int v55;
  int8x8_t v56;
  float32x2_t v57;
  int8x8_t v58;
  int v59;
  int8x8_t v60;
  float32x2_t v61;
  int8x8_t v62;
  float v63;
  int v64;
  int v65;
  int v66;

  *a2 = 0;
  a2[1] = 0;
  *a3 = 0;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  if (*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v5 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v5)
    {
      while (1)
      {
        v10 = *(_DWORD *)(v5 + 16) + 1;
        *(_DWORD *)(v5 + 16) = v10;
        if (*(_BYTE *)(v5 + 46) != 91)
          break;
LABEL_28:
        if (!v10)
          goto LABEL_74;
        *(_DWORD *)(v5 + 16) = v10 - 1;
        v38 = *(unsigned int *)(v5 + 47);
        if (v38 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
        {
          v5 = *(_QWORD *)((v38 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
          if (v5)
            continue;
        }
        return;
      }
      if ((*(_BYTE *)(v5 + 52) & 7) == 4)
      {
        v54 = *(unsigned __int8 *)(v5 + 53);
        if ((~v54 & 9) == 0
          || (~v54 & 0x11) == 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 816))(v5) & 1) != 0)
        {
LABEL_27:
          v10 = *(_DWORD *)(v5 + 16);
          goto LABEL_28;
        }
      }
      v11 = (float64x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5);
      v12 = (WebCore::AffineTransform *)v11;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v11, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v11[1], (float64x2_t)xmmword_1968A14C0))))) & 1) == 0&& v11[2].f64[0] == 0.0&& v11[2].f64[1] == 0.0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 232))(v5);
        if ((*(_BYTE *)(v5 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v5 + 53) & 3) != 0)
        {
          if (*a3)
          {
            v39.i32[1] = v40;
            v41.i32[1] = v42;
            v43 = (int8x8_t)vadd_f32((float32x2_t)v39, v41);
            v44 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, (float32x2_t)v39), v39, (int8x8_t)*a2);
            v45 = (int8x8_t)vadd_f32(*a2, a2[1]);
            *a2 = v44;
            a2[1] = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v43, (float32x2_t)v45), v43, v45), v44);
          }
          else
          {
            a2->i32[0] = v39.i32[0];
            a2->i32[1] = v40;
            a2[1].i32[0] = v41.i32[0];
            a2[1].i32[1] = v42;
            *a3 = 1;
          }
        }
        else
        {
          v59 = *(_DWORD *)(v5 + 16);
          *(_DWORD *)(v5 + 16) = v59 + 1;
          if (*(_BYTE *)(v5 + 208))
          {
            if (*a3)
            {
              v39.i32[1] = v40;
              v41.i32[1] = v42;
              v60 = (int8x8_t)vadd_f32((float32x2_t)v39, v41);
              v61 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, (float32x2_t)v39), v39, (int8x8_t)*a2);
              v62 = (int8x8_t)vadd_f32(*a2, a2[1]);
              *a2 = v61;
              a2[1] = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v60, (float32x2_t)v62), v60, v62), v61);
            }
            else
            {
              a2->i32[0] = v39.i32[0];
              a2->i32[1] = v40;
              a2[1].i32[0] = v41.i32[0];
              a2[1].i32[1] = v42;
              *a3 = 1;
            }
          }
          if (v59 == -1)
          {
LABEL_74:
            __break(0xC471u);
            JUMPOUT(0x196533660);
          }
          *(_DWORD *)(v5 + 16) = v59;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 256))(v5, a5);
        if (v28 <= 0.0 || v29 <= 0.0)
          goto LABEL_27;
        v46 = a4[2];
        if (v46 > 0.0)
        {
          v47 = a4[3];
          if (v47 > 0.0)
          {
            v48 = a4[1];
            if (v26 >= *a4)
              v49 = *a4;
            else
              v49 = v26;
            if (v27 >= v48)
              v50 = a4[1];
            else
              v50 = v27;
            v51 = v46 + *a4;
            v52 = v28 + v26;
            if (v51 >= v52)
              v52 = v51;
            v53 = v29 + v27;
            if ((float)(v47 + v48) >= v53)
              v53 = v47 + v48;
            *a4 = v49;
            a4[1] = v50;
            a4[2] = v52 - v49;
            a4[3] = v53 - v50;
            goto LABEL_27;
          }
        }
      }
      else
      {
        v63 = (*(float (**)(uint64_t))(*(_QWORD *)v5 + 232))(v5);
        v64 = v13;
        v65 = v14;
        v66 = v15;
        *(float *)v16.i32 = WebCore::AffineTransform::mapRect(v12, (const WebCore::FloatRect *)&v63);
        if ((*(_BYTE *)(v5 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v5 + 53) & 3) != 0)
        {
          if (*a3)
          {
            v16.i32[1] = v17;
            v18.i32[1] = v19;
            v20 = (int8x8_t)vadd_f32((float32x2_t)v16, v18);
            v21 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, (float32x2_t)v16), v16, (int8x8_t)*a2);
            v22 = (int8x8_t)vadd_f32(*a2, a2[1]);
            *a2 = v21;
            a2[1] = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v20, (float32x2_t)v22), v20, v22), v21);
          }
          else
          {
            a2->i32[0] = v16.i32[0];
            a2->i32[1] = v17;
            a2[1].i32[0] = v18.i32[0];
            a2[1].i32[1] = v19;
            *a3 = 1;
          }
        }
        else
        {
          v55 = *(_DWORD *)(v5 + 16);
          *(_DWORD *)(v5 + 16) = v55 + 1;
          if (*(_BYTE *)(v5 + 208))
          {
            if (*a3)
            {
              v16.i32[1] = v17;
              v18.i32[1] = v19;
              v56 = (int8x8_t)vadd_f32((float32x2_t)v16, v18);
              v57 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, (float32x2_t)v16), v16, (int8x8_t)*a2);
              v58 = (int8x8_t)vadd_f32(*a2, a2[1]);
              *a2 = v57;
              a2[1] = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v56, (float32x2_t)v58), v56, v58), v57);
            }
            else
            {
              a2->i32[0] = v16.i32[0];
              a2->i32[1] = v17;
              a2[1].i32[0] = v18.i32[0];
              a2[1].i32[1] = v19;
              *a3 = 1;
            }
          }
          if (v55 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x196533680);
          }
          *(_DWORD *)(v5 + 16) = v55;
        }
        v63 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 256))(v5, a5);
        v64 = v23;
        v65 = v24;
        v66 = v25;
        v26 = WebCore::AffineTransform::mapRect(v12, (const WebCore::FloatRect *)&v63);
        if (v28 <= 0.0 || v29 <= 0.0)
          goto LABEL_27;
        v30 = a4[2];
        if (v30 > 0.0)
        {
          v31 = a4[3];
          if (v31 > 0.0)
          {
            v32 = a4[1];
            if (v26 >= *a4)
              v33 = *a4;
            else
              v33 = v26;
            if (v27 >= v32)
              v34 = a4[1];
            else
              v34 = v27;
            v35 = v30 + *a4;
            v36 = v28 + v26;
            if (v35 >= v36)
              v36 = v35;
            v37 = v29 + v27;
            if ((float)(v31 + v32) >= v37)
              v37 = v31 + v32;
            *a4 = v33;
            a4[1] = v34;
            a4[2] = v36 - v33;
            v29 = v37 - v34;
            goto LABEL_26;
          }
        }
      }
      *a4 = v26;
      a4[1] = v27;
      a4[2] = v28;
LABEL_26:
      a4[3] = v29;
      goto LABEL_27;
    }
  }
}

void WebCore::SVGRenderSupport::computeContainerStrokeBoundingBox(WebCore::SVGRenderSupport *this, const WebCore::RenderElement *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  int v7;
  __int32 v8;
  int v9;
  int v10;
  WebCore::AffineTransform *v11;
  float32x2_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _DWORD v18[4];
  float32x2_t v19;
  int v20;
  int v21;
  float32x2_t v22[2];

  v22[0] = 0;
  v22[1] = 0;
  a6.n128_u32[0] = 0;
  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v6 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    a5.n128_u32[0] = 0;
    a4.n128_u32[0] = 0;
    a3.n128_u32[0] = 0;
    if (v6)
    {
      while (1)
      {
        v7 = *(_DWORD *)(v6 + 16) + 1;
        *(_DWORD *)(v6 + 16) = v7;
        if (*(_BYTE *)(v6 + 46) != 91)
        {
          if ((*(_BYTE *)(v6 + 52) & 7) != 4
            || (v14 = *(unsigned __int8 *)(v6 + 53), (~v14 & 9) != 0)
            && ((~v14 & 0x11) != 0
             || ((*(uint64_t (**)(uint64_t, const WebCore::RenderElement *, __n128, __n128, __n128, __n128))(*(_QWORD *)v6 + 816))(v6, a2, a3, a4, a5, a6) & 1) == 0))
          {
            v19.i32[0] = (*(float (**)(uint64_t))(*(_QWORD *)v6 + 240))(v6);
            v19.i32[1] = v8;
            v20 = v9;
            v21 = v10;
            if ((*(_BYTE *)(v6 + 45) & 2) == 0)
              WebCore::SVGRenderSupport::intersectRepaintRectWithResources(v6, &v19, 1);
            v11 = (WebCore::AffineTransform *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6);
            if (WebCore::AffineTransform::isIdentity(v11))
            {
              v12 = &v19;
            }
            else
            {
              v18[0] = WebCore::AffineTransform::mapRect(v11, (const WebCore::FloatRect *)&v19);
              v18[1] = v15;
              v18[2] = v16;
              v18[3] = v17;
              v12 = (float32x2_t *)v18;
            }
            a3 = WebCore::FloatRect::unite(v22, v12);
          }
          v7 = *(_DWORD *)(v6 + 16);
        }
        if (!v7)
          break;
        *(_DWORD *)(v6 + 16) = v7 - 1;
        v13 = *(unsigned int *)(v6 + 47);
        if (v13 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32))
        {
          v6 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
          if (v6)
            continue;
        }
        return;
      }
      __break(0xC471u);
    }
  }
}

void WebCore::SVGRenderSupport::intersectRepaintRectWithResources(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v31;
  uint64_t v32;
  __int32 v33;
  int v34;
  int v35;
  WebCore::LegacyRenderSVGResourceFilter *v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  WebCore::SVGDocumentExtensions *v50;
  WTF *v51;
  void *v52;
  float32x2_t v53;
  int v54;
  int v55;

  if ((*(_WORD *)(a1 + 69) & 0x1000) != 0)
  {
    v4 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8);
    if ((*(_QWORD *)(v4[85] + 680) & 0x800000000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196533AF8);
    }
    if (!v4[226])
    {
      v40 = WTF::fastMalloc((WTF *)0x50);
      *(_DWORD *)v40 = 0;
      v41 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v4);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
      *(_QWORD *)(v40 + 8) = v41;
      *(_OWORD *)(v40 + 16) = 0u;
      *(_OWORD *)(v40 + 32) = 0u;
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v43 = 0;
      *(_QWORD *)(v40 + 48) = v43;
      *(_QWORD *)(v40 + 56) = 0;
      *(_QWORD *)(v40 + 64) = 0;
      v45 = v4[66];
      if (!v45)
        goto LABEL_49;
      v46 = *(_QWORD *)(v45 + 8);
      if (v46
        && (v47 = *(_QWORD *)(v46 + 24)) != 0
        && (v48 = *(_QWORD *)(v47 + 8)) != 0
        && (*(_WORD *)(v48 + 658) & 4) != 0)
      {
        v49 = *(_BYTE *)(v48 + 545) == 0;
      }
      else
      {
LABEL_49:
        v49 = 1;
      }
      *(_BYTE *)(v40 + 72) = v49;
      v50 = (WebCore::SVGDocumentExtensions *)v4[226];
      v4[226] = v40;
      if (v50)
      {
        WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v50, v44);
        if (*(_DWORD *)v51)
        {
          *((_OWORD *)v51 + 3) = 0u;
          *((_OWORD *)v51 + 4) = 0u;
          *((_OWORD *)v51 + 1) = 0u;
          *((_OWORD *)v51 + 2) = 0u;
          *(_OWORD *)v51 = 0u;
        }
        else
        {
          WTF::fastFree(v51, v52);
        }
      }
    }
    v7 = **(_QWORD **)(v4[226] + 48);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      for (i = 1; ; ++i)
      {
        v14 = v12;
        v15 = *(_QWORD *)(v7 + 16 * v12);
        if (v15 != -1)
        {
          if (!v15)
            return;
          if (*(_QWORD *)(v15 + 8) == a1)
            break;
        }
        v12 = (v14 + i) & v8;
      }
      v16 = *(_QWORD ***)(v7 + 16 * v14 + 8);
      if (v16)
      {
        v17 = *v16;
        if (*v16)
        {
          v18 = v17[1];
          if (!v18
            || (v36 = *(WebCore::LegacyRenderSVGResourceFilter **)(v18 + 8)) == 0
            || (a2->f32[0] = WebCore::LegacyRenderSVGResourceFilter::resourceBoundingBox(v36, a1),
                a2->i32[1] = v37,
                a2[1].i32[0] = v38,
                a2[1].i32[1] = v39,
                (v17 = *v16) != 0))
          {
            if (!*v17)
              goto LABEL_32;
            v19 = *(_QWORD *)(*v17 + 8);
            if (!v19)
              goto LABEL_32;
            WebCore::LegacyRenderSVGResourceClipper::resourceBoundingBox(v19, a1, a3);
            v24 = a2->f32[1];
            if (a2->f32[0] >= v20)
              v25 = a2->f32[0];
            else
              v25 = v20;
            v26 = a2[1].f32[1];
            if (v24 >= v21)
              v27 = a2->f32[1];
            else
              v27 = v21;
            v28 = v20 + v22;
            if (v28 >= (float)(a2->f32[0] + a2[1].f32[0]))
              v28 = a2->f32[0] + a2[1].f32[0];
            v29 = v21 + v23;
            if (v29 >= (float)(v24 + v26))
              v29 = v24 + v26;
            if (v25 >= v28 || v27 >= v29)
            {
              v25 = 0.0;
              v27 = 0.0;
              v28 = 0.0;
              v29 = 0.0;
            }
            a2->f32[0] = v25;
            a2->f32[1] = v27;
            a2[1].f32[0] = v28 - v25;
            a2[1].f32[1] = v29 - v27;
            v17 = *v16;
            if (*v16)
            {
LABEL_32:
              v31 = v17[2];
              if (v31)
              {
                v32 = *(_QWORD *)(v31 + 8);
                if (v32)
                {
                  v53.i32[0] = WebCore::LegacyRenderSVGResourceMasker::resourceBoundingBox(v32, a1, a3);
                  v53.i32[1] = v33;
                  v54 = v34;
                  v55 = v35;
                  WebCore::FloatRect::intersect(a2, &v53);
                }
              }
            }
          }
        }
      }
    }
  }
}

BOOL WebCore::SVGRenderSupport::paintInfoIntersectsRepaintRect(WebCore::SVGRenderSupport *this, const WebCore::FloatRect *a2, const WebCore::AffineTransform *a3, const WebCore::PaintInfo *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;
  double v16;
  float v17;
  float v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float v24;
  float v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v37;
  float v39;
  float v40;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  _BOOL4 v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v63;
  float v64;
  float v65;
  float v66;

  v5 = *(double *)a2;
  v4 = *((double *)a2 + 1);
  if (*(double *)a2 != 1.0)
  {
    v6 = *((double *)a2 + 2);
    v7 = *((double *)a2 + 3);
    v9 = *((double *)a2 + 4);
    v8 = *((double *)a2 + 5);
    goto LABEL_3;
  }
  v55 = v4 == 0.0;
  v6 = *((double *)a2 + 2);
  v7 = *((double *)a2 + 3);
  if (v6 != 0.0)
    v55 = 0;
  if (v7 != 1.0)
    v55 = 0;
  v9 = *((double *)a2 + 4);
  v8 = *((double *)a2 + 5);
  if (!v55 || v9 != 0.0 || v8 != 0.0)
  {
    if (v55)
    {
      v42 = *((float *)this + 2);
      v43 = *((float *)this + 3);
      v65 = v9;
      v66 = v8;
      v29 = *(float *)this + v65;
      v33 = *((float *)this + 1) + v66;
      goto LABEL_53;
    }
LABEL_3:
    v10 = *((float *)this + 1);
    v11 = *(float *)this;
    v12 = v6 * v10;
    v13 = v7 * v10;
    v14 = v9 + v12 + v5 * v11;
    v15 = v8 + v13 + v4 * v11;
    v16 = (float)(*(float *)this + *((float *)this + 2));
    v17 = v9 + v12 + v5 * v16;
    v18 = v8 + v13 + v4 * v16;
    v19 = (float)(v10 + *((float *)this + 3));
    v20 = v6 * v19;
    v21 = v9 + v6 * v19 + v5 * v16;
    v22 = v7 * v19;
    v23 = v8 + v22 + v4 * v16;
    v24 = v21;
    v25 = v23;
    v26 = v9 + v20 + v5 * v11;
    v27 = v26;
    v28 = v8 + v22 + v4 * v11;
    if (v27 >= v24)
      v29 = v24;
    else
      v29 = v26;
    if (v17 >= v14)
      v30 = v14;
    else
      v30 = v17;
    if (v29 >= v30)
      v29 = v30;
    v31 = fabsf(v29);
    if (v31 == INFINITY || v31 > 2147500000.0)
      v29 = (float)((SLODWORD(v29) >> 31) ^ 0x7FFFFFFF);
    if (v28 >= v25)
      v33 = v23;
    else
      v33 = v28;
    if (v18 >= v15)
      v34 = v15;
    else
      v34 = v18;
    if (v33 >= v34)
      v33 = v34;
    v35 = fabsf(v33);
    if (v35 == INFINITY || v35 > 2147500000.0)
      v33 = (float)((SLODWORD(v33) >> 31) ^ 0x7FFFFFFF);
    if (v14 < v17)
      v14 = v17;
    if (v24 >= v27)
      v27 = v24;
    if (v14 >= v27)
      v27 = v14;
    v37 = fabsf(v27);
    if (v37 == INFINITY || v37 > 2147500000.0)
      v27 = (float)((SLODWORD(v27) >> 31) ^ 0x7FFFFFFF);
    if (v15 < v18)
      v15 = v18;
    if (v25 >= v28)
      v39 = v23;
    else
      v39 = v28;
    if (v15 < v39)
      v15 = v39;
    v40 = fabsf(v15);
    if (v40 == INFINITY || v40 > 2147500000.0)
      v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
    v42 = v27 - v29;
    v43 = v15 - v33;
LABEL_53:
    v44 = 0;
    if (v42 > 0.0 && v43 > 0.0)
    {
      v44 = 0;
      v45 = (float)*((int *)a3 + 2) * 0.015625;
      if (v45 > 0.0)
      {
        v46 = (float)*((int *)a3 + 3) * 0.015625;
        if (v46 > 0.0)
        {
          v47 = (float)*(int *)a3 * 0.015625;
          v48 = (float)*((int *)a3 + 1) * 0.015625;
          v49 = v47 + v45;
          v50 = v48 + v46;
          if (v47 >= (float)(v29 + v42) || v29 >= v49 || v33 >= v50)
            return 0;
          return v48 < (float)(v33 + v43);
        }
      }
    }
    return v44;
  }
  v56 = *((float *)this + 2);
  if (v56 <= 0.0)
    return 0;
  v57 = *((float *)this + 3);
  if (v57 <= 0.0)
    return 0;
  v44 = 0;
  v58 = (float)*((int *)a3 + 2) * 0.015625;
  if (v58 > 0.0)
  {
    v59 = (float)*((int *)a3 + 3) * 0.015625;
    if (v59 > 0.0)
    {
      v60 = (float)*(int *)a3 * 0.015625;
      v61 = v56 + *(float *)this;
      if (*(float *)this >= (float)(v60 + v58) || v60 >= v61)
        return 0;
      v63 = (float)*((int *)a3 + 1) * 0.015625;
      v64 = *((float *)this + 1);
      if (v64 >= (float)(v63 + v59))
        return 0;
      return v63 < (float)(v57 + v64);
    }
  }
  return v44;
}

uint64_t WebCore::SVGRenderSupport::transformToRootChanged(WebCore::SVGRenderSupport *this, WebCore::RenderElement *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;

  if (!this)
    return 0;
  while (1)
  {
    v2 = 0;
    v3 = *((unsigned __int8 *)this + 46);
    if (v3 <= 0x66)
    {
      if (v3 == 83)
        return v2;
      goto LABEL_14;
    }
    if (v3 == 103)
      return v2;
    if (v3 == 104)
    {
      v4 = *((_DWORD *)this + 4);
      *((_DWORD *)this + 4) = v4 + 1;
      if (v4 != -1)
      {
        v2 = (*((unsigned __int8 *)this + 211) >> 1) & 1;
        goto LABEL_10;
      }
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x196533ED4);
    }
    if (v3 == 105)
      break;
LABEL_14:
    v2 = *((_QWORD *)this + 4);
    if (!v2)
      return v2;
    this = *(WebCore::SVGRenderSupport **)(v2 + 8);
    if (!this)
      return 0;
  }
  v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = v4 + 1;
  if (v4 == -1)
    goto LABEL_19;
  v2 = *((_BYTE *)this + 211) & 1;
LABEL_10:
  *((_DWORD *)this + 4) = v4;
  return v2;
}

uint64_t WebCore::SVGRenderSupport::layoutChildren(uint64_t this, WebCore::RenderElement *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int *v18;
  uint64_t **v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  WTF **v29;
  WTF **v30;
  uint64_t v31;
  WTF **v32;
  WTF **v33;
  uint64_t v34;
  WTF **v35;
  uint64_t v36;
  WTF **v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  WTF **v47;
  WTF **v48;
  __int128 v49;
  WTF **v50;
  WTF **v51;
  WTF **v52;
  _QWORD v53[2];
  _BYTE v54[20];

  v2 = (int)a2;
  ++*(_DWORD *)(this + 16);
  v3 = this;
  while (1)
  {
    v4 = *(unsigned __int8 *)(v3 + 46);
    if (v4 == 103)
    {
      v8 = *(_BYTE *)(v3 + 408) & 1;
      goto LABEL_11;
    }
    if (v4 == 105)
      break;
    v5 = *(_QWORD *)(v3 + 32);
    if (v5)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if (v5)
        ++*(_DWORD *)(v5 + 16);
    }
    v6 = *(_DWORD *)(v3 + 16);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1965343E8);
    }
    *(_DWORD *)(v3 + 16) = v6 - 1;
    v3 = v5;
    if (!v5)
    {
      v7 = 0;
      goto LABEL_13;
    }
  }
  v8 = *(_BYTE *)(v3 + 211) & 2;
LABEL_11:
  v9 = *(_DWORD *)(v3 + 16);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x196534408);
  }
  v7 = v8 != 0;
  *(_DWORD *)(v3 + 16) = v9 - 1;
LABEL_13:
  v10 = this;
  do
  {
    v11 = 0;
    v12 = *(unsigned __int8 *)(v10 + 46);
    if (v12 <= 0x66)
    {
      if (v12 == 83)
        goto LABEL_23;
    }
    else
    {
      switch(v12)
      {
        case 'g':
          goto LABEL_23;
        case 'h':
          v13 = *(_DWORD *)(v10 + 16);
          *(_DWORD *)(v10 + 16) = v13 + 1;
          if (v13 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x196534428);
          }
          v11 = (*(unsigned __int8 *)(v10 + 211) >> 1) & 1;
LABEL_22:
          *(_DWORD *)(v10 + 16) = v13;
          goto LABEL_23;
        case 'i':
          v13 = *(_DWORD *)(v10 + 16);
          *(_DWORD *)(v10 + 16) = v13 + 1;
          if (v13 == -1)
          {
            __break(0xC471u);
LABEL_154:
            JUMPOUT(0x1965343A8);
          }
          v11 = *(_BYTE *)(v10 + 211) & 1;
          goto LABEL_22;
      }
    }
    v43 = *(_QWORD *)(v10 + 32);
    if (!v43)
      break;
    v10 = *(_QWORD *)(v43 + 8);
  }
  while (v10);
  v11 = 0;
LABEL_23:
  v53[0] = 0;
  v53[1] = 0;
  v14 = *(unsigned int *)(this + 64);
  if (v14 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
  {
    v15 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
    if (v15)
    {
      while (1)
      {
        v16 = *(_DWORD *)(v15 + 20);
        v17 = v2;
        if (v11)
        {
          if (*(_BYTE *)(v15 + 46) == 85)
          {
            v28 = *(_DWORD *)(v15 + 16);
            *(_BYTE *)(v15 + 248) |= 8u;
            *(_DWORD *)(v15 + 16) = v28 + 1;
            if (v28 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x196534468);
            }
            *(_DWORD *)(v15 + 16) = v28;
          }
          v17 = 1;
        }
        if (!v7)
          goto LABEL_27;
        if ((*(_BYTE *)(v15 + 45) & 1) != 0)
          goto LABEL_46;
        v24 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
        if (!v24)
          goto LABEL_27;
        if ((*(_WORD *)(v24 + 28) & 0x20) == 0)
          goto LABEL_46;
        v26 = *(_DWORD *)(v24 + 24);
        *(_DWORD *)(v24 + 24) = v26 + 2;
        if (!*(_BYTE *)(v24 + 145))
        {
          v27 = *(_QWORD *)(v24 + 128);
          if (!v27 || !*(_DWORD *)(v27 - 12))
            goto LABEL_52;
          v42 = *(unsigned int *)(v27 - 4);
          if ((_DWORD)v42)
          {
            v23 = 8 * v42;
            v22 = *(uint64_t **)(v24 + 128);
            while ((unint64_t)(*v22 + 1) <= 1)
            {
              ++v22;
              v23 -= 8;
              if (!v23)
                goto LABEL_52;
            }
          }
          else
          {
            v22 = *(uint64_t **)(v24 + 128);
          }
          v44 = (uint64_t *)(v27 + 8 * v42);
          if (v22 == v44)
            goto LABEL_52;
          v45 = *v22;
LABEL_123:
          if (!*(_QWORD *)(v45 + 8))
          {
            while (++v22 != v44)
            {
              v45 = *v22;
              if ((unint64_t)(*v22 + 1) > 1)
              {
                if (v22 == v44)
                  break;
                goto LABEL_123;
              }
            }
LABEL_52:
            if (v26)
            {
              *(_DWORD *)(v24 + 24) = v26;
              goto LABEL_46;
            }
            goto LABEL_134;
          }
        }
        if ((*(_BYTE *)(v15 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v15 + 53) & 0x11) != 0)
        {
          if (*(_BYTE *)(v15 + 46) != 85)
            goto LABEL_128;
          v46 = *(_DWORD *)(v15 + 16);
          *(_BYTE *)(v15 + 248) |= 0xAu;
          *(_DWORD *)(v15 + 16) = v46 + 1;
          if (v46 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x196534630);
          }
        }
        else
        {
          v46 = *(_DWORD *)(v15 + 16);
          *(_BYTE *)(v15 + 208) |= 2u;
          *(_DWORD *)(v15 + 16) = v46 + 1;
          if (v46 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1965345F8);
          }
        }
        *(_DWORD *)(v15 + 16) = v46;
LABEL_128:
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 224))(v15);
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          v17 = 1;
LABEL_134:
          if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          {
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
LABEL_46:
            if ((v17 & 1) == 0)
              goto LABEL_28;
            goto LABEL_47;
          }
LABEL_27:
          if (!v17)
            goto LABEL_28;
          goto LABEL_47;
        }
        *(_DWORD *)(v24 + 24) -= 2;
LABEL_47:
        v25 = *(_DWORD *)(v15 + 20);
        if ((v25 & 8) == 0)
        {
          *(_DWORD *)(v15 + 20) = v25 | 8;
          if ((v25 & 0x8000) != 0)
          {
            if ((*(_BYTE *)(v15 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1965344B0);
            }
            v40 = *(_QWORD *)(v15 + 144);
            if (v40)
            {
              v41 = *(_DWORD *)(v40 + 8) + 1;
              *(_DWORD *)(v40 + 8) = v41;
            }
            else
            {
              v41 = MEMORY[8];
            }
            *(_QWORD *)(v40 + 24) = *(_QWORD *)(v40 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v41)
            {
              __break(0xC471u);
              JUMPOUT(0x1965344D0);
            }
            *(_DWORD *)(v40 + 8) = v41 - 1;
          }
        }
LABEL_28:
        if ((*(_BYTE *)(v15 + 20) & 0xF8) != 0)
        {
          if ((*(_BYTE *)(v15 + 45) & 2) != 0)
          {
            __break(0xC471u);
            goto LABEL_154;
          }
          v18 = (int *)(v15 + 16);
          ++*(_DWORD *)(v15 + 16);
          v19 = (uint64_t **)WebCore::SVGResourcesCache::cachedResourcesForRenderer((WebCore::SVGResourcesCache *)v15, a2);
          if (v19)
            WebCore::SVGResources::layoutDifferentRootIfNeeded(v19, (const WebCore::RenderElement *)v15);
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 688))(v15);
          if ((v16 & 0x200) == 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 1944)
                                                                         + 24)
                                                             + 8)
                                                 + 40)
                                     + 8)
                         + 3382))
          {
            LOBYTE(v49) = 0;
            LOBYTE(v50) = 0;
            v54[0] = 0;
            v54[16] = 0;
            this = WebCore::RenderObject::issueRepaint(v15, &v49, 0, 0, (uint64_t)v54);
          }
          v20 = *v18;
          if (!*v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1965343C8);
          }
        }
        else
        {
          if (!v7 || (*(_BYTE *)(v15 + 45) & 2) != 0)
            goto LABEL_35;
          v18 = (int *)(v15 + 16);
          ++*(_DWORD *)(v15 + 16);
          this = (uint64_t)WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)v53, (_QWORD *)v15, (uint64_t)&v49);
          v20 = *(_DWORD *)(v15 + 16);
          if (!v20)
          {
            __break(0xC471u);
            JUMPOUT(0x196534534);
          }
        }
        *v18 = v20 - 1;
LABEL_35:
        v21 = *(unsigned int *)(v15 + 47);
        if (v21 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32))
        {
          v15 = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32)) + 8);
          if (v15)
            continue;
        }
        v29 = (WTF **)v53[0];
        goto LABEL_61;
      }
    }
  }
  v29 = 0;
LABEL_61:
  if (v7)
  {
    if (v29)
    {
      v31 = *((unsigned int *)v29 - 1);
      v32 = &v29[v31];
      if (*((_DWORD *)v29 - 3))
      {
        v30 = v29;
        if ((_DWORD)v31)
        {
          v39 = 8 * v31;
          v30 = v29;
          while ((unint64_t)*v30 + 1 <= 1)
          {
            ++v30;
            v39 -= 8;
            if (!v39)
            {
              v30 = v32;
              goto LABEL_65;
            }
          }
        }
        goto LABEL_65;
      }
      v30 = &v29[v31];
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v32 = &v29[v31];
LABEL_65:
    *(_QWORD *)&v49 = v53;
    *((_QWORD *)&v49 + 1) = v30;
    v50 = v32;
    if (v29)
    {
      v34 = *((unsigned int *)v29 - 1);
      v33 = &v29[v34];
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    v51 = v33;
    v52 = &v29[v34];
    if (v30 != v33)
    {
      if (!*((_QWORD *)*v30 + 1))
      {
        v47 = v30;
        do
        {
          v48 = v47 + 1;
          v47 = v32;
          if (v48 != v32)
          {
            v47 = v48;
            while ((unint64_t)*v47 + 1 <= 1)
            {
              if (++v47 == v32)
              {
                v47 = v32;
                break;
              }
            }
          }
          v30 = v33;
          if (v47 == v33)
            break;
          v30 = v47;
        }
        while (!*((_QWORD *)*v47 + 1));
      }
      *((_QWORD *)&v49 + 1) = v30;
    }
    if (v29)
      v35 = &v29[*((unsigned int *)v29 - 1)];
    else
      v35 = 0;
    if (v30 != v35)
    {
      do
      {
        WebCore::invalidateResourcesOfChildren(*((WebCore **)*v30 + 1), a2);
        this = (uint64_t)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v49);
        v30 = (WTF **)*((_QWORD *)&v49 + 1);
      }
      while (*((WTF ***)&v49 + 1) != v35);
      v29 = (WTF **)v53[0];
    }
  }
  if (v29)
  {
    v36 = *((unsigned int *)v29 - 1);
    if ((_DWORD)v36)
    {
      v37 = v29;
      do
      {
        v38 = *v37;
        if (*v37 != (WTF *)-1)
        {
          *v37 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
              WTF::fastFree(v38, a2);
            else
              --*(_DWORD *)v38;
          }
        }
        ++v37;
        --v36;
      }
      while (v36);
    }
    return WTF::fastFree((WTF *)(v29 - 2), a2);
  }
  return this;
}

_QWORD *WebCore::invalidateResourcesOfChildren(WebCore *this, WebCore::RenderElement *a2)
{
  _QWORD *result;
  WebCore::RenderElement *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (_QWORD *)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
  if (result)
    result = WebCore::SVGResources::removeClientFromCache(result, this, 0);
  v5 = *((unsigned __int8 *)this + 68);
  for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v8 + 47))
  {
    v7 = i | (v5 << 32);
    if (!v7)
      break;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      break;
    if ((*(_BYTE *)(v8 + 45) & 2) == 0)
    {
LABEL_7:
      result = (_QWORD *)WebCore::invalidateResourcesOfChildren((WebCore *)v8, v4);
      while (1)
      {
        v9 = *(unsigned int *)(v8 + 47);
        if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)))
          return result;
        v8 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
        if (!v8)
          return result;
        if ((*(_BYTE *)(v8 + 45) & 2) == 0)
          goto LABEL_7;
      }
    }
    v5 = *(unsigned __int8 *)(v8 + 51);
  }
  return result;
}

uint64_t WebCore::SVGRenderSupport::clipContextToCSSClippingArea(uint64_t this, WebCore::GraphicsContext *a2, const WebCore::RenderElement *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  float v11;
  int v12;
  int v13;
  int v14;
  const WebCore::SVGElement *v15;
  __int16 v16;
  WebCore::SVGLengthContext *v17;
  unint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  double v29;
  double v31;
  int8x16_t v32;
  int8x16_t v33;
  float64x2_t v34;
  double v35;
  __int128 *v36;
  float64x2_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  float v43;
  float v44;
  const WebCore::SVGElement *v45;
  __int16 v46;
  WebCore::SVGLengthContext *v47;
  void *v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  double v53;
  uint64_t v54;
  WTF *v55;
  char v56;
  uint64_t v57;
  WTF *v58;
  unint64_t v59;
  char v60;
  WTF *v61;
  WTF *v62;
  double v63;
  double v64;
  __int128 v65;
  float64x2_t v66;
  float64x2_t v67[3];
  float v68;
  int v69;
  int v70;
  int v71;
  _BYTE v72[32];
  float64x2_t v73;
  unsigned int *v74;
  _BYTE v75[56];
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 264);
  if (v3)
  {
    v5 = this;
    v6 = *(_DWORD *)(v3 + 12);
    ++*(_DWORD *)(v3 + 8);
    if (v6 != 1)
      goto LABEL_36;
    v7 = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 272))(a2);
    *(_OWORD *)v72 = *(_OWORD *)v7;
    *(_OWORD *)&v72[16] = *(_OWORD *)(v7 + 16);
    v73 = *(float64x2_t *)(v7 + 32);
    v8 = *(unsigned __int8 *)(v3 + 16);
    v9 = 0;
    if (v8 > 7)
      goto LABEL_18;
    v10 = 1 << v8;
    if ((v10 & 0x47) != 0)
    {
      (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 240))(a2);
LABEL_8:
      v9 = v12;
LABEL_20:
      v68 = v11;
      v69 = v9;
      v70 = v13;
      v71 = v14;
      v68 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v72, (const WebCore::FloatRect *)&v68);
      v69 = v23;
      v70 = v24;
      v71 = v25;
      v26 = (*(uint64_t (**)(_QWORD, float *))(**(_QWORD **)(v3 + 24) + 32))(*(_QWORD *)(v3 + 24), &v68);
      v76 = 0;
      v27 = *(unsigned int *)(v26 + 64);
      if ((_DWORD)v27 == -1)
      {
        v76 = -1;
      }
      else
      {
        v63 = COERCE_DOUBLE(v75);
        ((void (*)(double *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v27])(&v63);
      }
      v28.f64[0] = *(float64_t *)&v72[24];
      v29 = vmuld_lane_f64(-*(double *)&v72[8], *(float64x2_t *)&v72[8], 1) + *(double *)v72 * *(double *)&v72[24];
      if (((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
        && (*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL)
      {
        LOBYTE(v63) = 0;
        v36 = &constinit_10;
      }
      else
      {
        v31 = 1.0;
        if (*(double *)v72 == 1.0
          && *(double *)&v72[8] == 0.0
          && *(double *)&v72[16] == 0.0
          && *(double *)&v72[24] == 1.0)
        {
          v34 = vnegq_f64(v73);
          v64 = 0.0;
          *(_QWORD *)&v65 = 0;
          v35 = 1.0;
        }
        else
        {
          v31 = *(double *)&v72[24] / v29;
          v28.f64[1] = *(float64_t *)v72;
          v32 = (int8x16_t)vmulq_f64(v73, vnegq_f64(v28));
          v33 = (int8x16_t)vdivq_f64(vmlaq_f64((float64x2_t)vextq_s8(v32, v32, 8uLL), v73, *(float64x2_t *)&v72[8]), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29, 0));
          v34 = (float64x2_t)vextq_s8(v33, v33, 8uLL);
          v64 = -*(double *)&v72[8] / v29;
          *(double *)&v65 = -*(double *)&v72[16] / v29;
          v35 = *(double *)v72 / v29;
        }
        v63 = v31;
        *((double *)&v65 + 1) = v35;
        v36 = (__int128 *)&v63;
        v66 = v34;
      }
      v37 = (float64x2_t)v36[1];
      v67[0] = (float64x2_t)*v36;
      v67[1] = v37;
      v67[2] = (float64x2_t)v36[2];
      WebCore::Path::transform((WebCore::Path *)&v74, v67);
      v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24));
      this = (*(uint64_t (**)(uint64_t, unsigned int **, uint64_t))(*(_QWORD *)v5 + 496))(v5, &v74, v38);
      if (v76 != -1)
        this = ((uint64_t (*)(double *, _BYTE *))off_1E3449EC0[v76])(&v63, v75);
      v6 = *(_DWORD *)(v3 + 12);
LABEL_36:
      if (v6 != 2)
      {
LABEL_60:
        if (*(_DWORD *)(v3 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
        --*(_DWORD *)(v3 + 8);
        return this;
      }
      v39 = *(unsigned __int8 *)(v3 + 16);
      if (v39 > 7)
      {
        v42 = 0;
        v43 = 0.0;
        v44 = 0.0;
      }
      else
      {
        v40 = 1 << v39;
        if ((v40 & 0x47) != 0)
        {
          (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 240))(a2);
          goto LABEL_58;
        }
        if ((v40 & 0x38) != 0
          || (*((_BYTE *)a2 + 45) & 1) != 0
          || (v45 = *(const WebCore::SVGElement **)(*((_QWORD *)a2 + 3) + 8)) == 0)
        {
          (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 232))(a2);
          goto LABEL_58;
        }
        v46 = *((_WORD *)v45 + 14);
        if ((v46 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196534C38);
        }
        if ((v46 & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196534C78);
        }
        v47 = (WebCore::SVGLengthContext *)WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v74, v45);
        v49 = WebCore::SVGLengthContext::viewportSize(v47);
        v50 = v74;
        v74 = 0;
        if (v50)
        {
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v56 = (char)v48;
            atomic_store(1u, v50);
            v62 = (WTF *)v50;
            v57 = v50[7];
            if ((_DWORD)v57)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v62 + 2), (WTF::StringImpl *)(*((_QWORD *)v62 + 2) + 32 * v57));
            v58 = (WTF *)*((_QWORD *)v62 + 2);
            if (v58)
            {
              *((_QWORD *)v62 + 2) = 0;
              *((_DWORD *)v62 + 6) = 0;
              WTF::fastFree(v58, v48);
            }
            WTF::fastFree(v62, v48);
            LOBYTE(v48) = v56;
          }
        }
        v42 = 0;
        v44 = *((float *)&v49 + 1);
        if ((_BYTE)v48)
          v43 = *(float *)&v49;
        else
          v43 = 0.0;
        if (!(_BYTE)v48)
          v44 = 0.0;
      }
      v41 = 0;
LABEL_58:
      v66 = 0u;
      v65 = 0u;
      v63 = COERCE_DOUBLE(__PAIR64__(v42, v41));
      v64 = COERCE_DOUBLE(__PAIR64__(LODWORD(v44), LODWORD(v43)));
      v76 = 0;
      v53 = WebCore::Path::addRoundedRect((WebCore::Path *)&v74, (WebCore::FloatRect *)&v63, 0);
      this = (*(uint64_t (**)(uint64_t, unsigned int **, uint64_t, double))(*(_QWORD *)v5 + 496))(v5, &v74, 1, v53);
      if (v76 != -1)
        this = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E3449EC0[v76])(v72, v75);
      goto LABEL_60;
    }
    if ((v10 & 0x38) != 0
      || (*((_BYTE *)a2 + 45) & 1) != 0
      || (v15 = *(const WebCore::SVGElement **)(*((_QWORD *)a2 + 3) + 8)) == 0)
    {
      (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 232))(a2);
      goto LABEL_8;
    }
    v16 = *((_WORD *)v15 + 14);
    if ((v16 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196534C18);
    }
    if ((v16 & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196534C58);
    }
    v17 = (WebCore::SVGLengthContext *)WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v74, v15);
    v18 = WebCore::SVGLengthContext::viewportSize(v17);
    v20 = v74;
    v74 = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v59 = v18;
        v60 = (char)v19;
        atomic_store(1u, v20);
        v61 = (WTF *)v20;
        v54 = v20[7];
        if ((_DWORD)v54)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v61 + 2), (WTF::StringImpl *)(*((_QWORD *)v61 + 2) + 32 * v54));
        v55 = (WTF *)*((_QWORD *)v61 + 2);
        if (v55)
        {
          *((_QWORD *)v61 + 2) = 0;
          *((_DWORD *)v61 + 6) = 0;
          WTF::fastFree(v55, v19);
        }
        WTF::fastFree(v61, v19);
        v18 = v59;
        LOBYTE(v19) = v60;
      }
    }
    if ((_BYTE)v19)
    {
      v14 = HIDWORD(v18);
      v13 = v18;
    }
    else
    {
LABEL_18:
      v13 = 0;
      v14 = 0;
    }
    v11 = 0.0;
    goto LABEL_20;
  }
  return this;
}

uint64_t WebCore::SVGRenderSupport::pointInClippingArea(WebCore::SVGRenderSupport *this, const WebCore::RenderElement *a2, const WebCore::FloatPoint *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t isPointInCSSClippingArea;
  uint64_t **v8;
  uint64_t v9;
  WebCore::LegacyRenderSVGResourceClipper *v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  _DWORD v15[4];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
  {
    v5 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 264);
    if (v5 && (v6 = v5[3], ++v5[2], (v6 - 1) <= 1))
    {
      isPointInCSSClippingArea = WebCore::isPointInCSSClippingArea(this, a2, a3);
    }
    else
    {
      v8 = (uint64_t **)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
      if (v8 && *v8 && (v9 = **v8) != 0 && (v10 = *(WebCore::LegacyRenderSVGResourceClipper **)(v9 + 8)) != 0)
      {
        v15[0] = (*(float (**)(WebCore::SVGRenderSupport *))(*(_QWORD *)this + 232))(this);
        v15[1] = v11;
        v15[2] = v12;
        v15[3] = v13;
        isPointInCSSClippingArea = WebCore::LegacyRenderSVGResourceClipper::hitTestClipContent(v10, (const WebCore::FloatRect *)v15, a2);
      }
      else
      {
        isPointInCSSClippingArea = 1;
      }
      if (!v5)
        return isPointInCSSClippingArea;
    }
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
    return isPointInCSSClippingArea;
  }
  result = 433;
  __break(0xC471u);
  return result;
}

BOOL WebCore::isPointInCSSClippingArea(WebCore *this, const WebCore::RenderElement *a2, const WebCore::FloatPoint *a3)
{
  uint64_t v3;
  float *v4;
  int v5;
  unsigned int v6;
  int v7;
  void (*v8)(void);
  unsigned int v9;
  int v10;
  void (*v11)(void);
  _BOOL8 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  const WebCore::SVGElement *v21;
  __int16 v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  const WebCore::SVGElement *v27;
  __int16 v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  __n128 v48;
  int v49;
  uint64_t v50;
  unint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  WTF *v55;
  unint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  WTF *v59;
  const WebCore::RenderElement *v60;
  const WebCore::RenderElement *v61;
  _DWORD v62[4];
  __int128 v63;
  __int128 v64;
  char v65;
  WTF *v66;
  unint64_t v67[7];
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 264);
  if (!v3)
    return 1;
  v4 = (float *)a2;
  v5 = *(_DWORD *)(v3 + 12);
  ++*(_DWORD *)(v3 + 8);
  if (v5 != 2)
  {
    if (v5 != 1)
    {
      v12 = 1;
      goto LABEL_81;
    }
    v6 = *(unsigned __int8 *)(v3 + 16);
    if (v6 > 7)
    {
      v14 = 0.0;
      v15 = 0.0;
      v16 = 0.0;
    }
    else
    {
      v7 = 1 << v6;
      if ((v7 & 0x47) != 0)
      {
        v8 = *(void (**)(void))(*(_QWORD *)this + 240);
LABEL_13:
        v8();
        goto LABEL_45;
      }
      if ((v7 & 0x38) != 0
        || (*((_BYTE *)this + 45) & 1) != 0
        || (v21 = *(const WebCore::SVGElement **)(*((_QWORD *)this + 3) + 8)) == 0)
      {
        v8 = *(void (**)(void))(*(_QWORD *)this + 232);
        goto LABEL_13;
      }
      v22 = *((_WORD *)v21 + 14);
      if ((v22 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196535238);
      }
      if ((v22 & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196535278);
      }
      WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v66, v21);
      v23 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)&v66);
      v24 = (unsigned int *)v66;
      v66 = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v60 = a2;
          v52 = v23;
          atomic_store(1u, v24);
          v53 = v24;
          v54 = v24[7];
          if ((_DWORD)v54)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v53 + 2), (WTF::StringImpl *)(*((_QWORD *)v53 + 2) + 32 * v54));
          v55 = (WTF *)*((_QWORD *)v53 + 2);
          if (v55)
          {
            *((_QWORD *)v53 + 2) = 0;
            v53[6] = 0;
            WTF::fastFree(v55, a2);
          }
          WTF::fastFree((WTF *)v53, a2);
          v23 = v52;
          a2 = v60;
        }
      }
      v14 = 0.0;
      v16 = *((float *)&v23 + 1);
      if ((_BYTE)a2)
        v15 = *(float *)&v23;
      else
        v15 = 0.0;
      if (!(_BYTE)a2)
        v16 = 0.0;
    }
    v13 = 0.0;
LABEL_45:
    v66 = (WTF *)__PAIR64__(LODWORD(v14), LODWORD(v13));
    v67[0] = __PAIR64__(LODWORD(v16), LODWORD(v15));
    v33 = v4[1];
    v34 = v15 + v13;
    v35 = v14 + v16;
    if (v13 > *v4 || v34 < *v4 || v14 > v33 || v35 < v33)
      goto LABEL_73;
    v39 = (*(uint64_t (**)(_QWORD, WTF **))(**(_QWORD **)(v3 + 24) + 32))(*(_QWORD *)(v3 + 24), &v66);
    v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24));
    v41 = *(_DWORD *)(v39 + 64);
    if (v41 == 2)
    {
      v42 = *(_QWORD *)(v39 + 8);
      if (v42 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 200))(v42) & 1) != 0)
        goto LABEL_73;
    }
    else if (!v41)
    {
LABEL_73:
      v12 = 0;
      goto LABEL_81;
    }
    v43 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v39);
    v12 = WebCore::PathCG::contains(v43, v4, v40);
    goto LABEL_81;
  }
  v9 = *(unsigned __int8 *)(v3 + 16);
  if (v9 > 7)
  {
    v18 = 0.0;
    v19 = 0.0;
    v20 = 0.0;
  }
  else
  {
    v10 = 1 << v9;
    if ((v10 & 0x47) != 0)
    {
      v11 = *(void (**)(void))(*(_QWORD *)this + 240);
LABEL_16:
      v11();
      goto LABEL_62;
    }
    if ((v10 & 0x38) != 0
      || (*((_BYTE *)this + 45) & 1) != 0
      || (v27 = *(const WebCore::SVGElement **)(*((_QWORD *)this + 3) + 8)) == 0)
    {
      v11 = *(void (**)(void))(*(_QWORD *)this + 232);
      goto LABEL_16;
    }
    v28 = *((_WORD *)v27 + 14);
    if ((v28 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196535258);
    }
    if ((v28 & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196535298);
    }
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v66, v27);
    v29 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)&v66);
    v30 = (unsigned int *)v66;
    v66 = 0;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v61 = a2;
        v56 = v29;
        atomic_store(1u, v30);
        v57 = v30;
        v58 = v30[7];
        if ((_DWORD)v58)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v57 + 2), (WTF::StringImpl *)(*((_QWORD *)v57 + 2) + 32 * v58));
        v59 = (WTF *)*((_QWORD *)v57 + 2);
        if (v59)
        {
          *((_QWORD *)v57 + 2) = 0;
          v57[6] = 0;
          WTF::fastFree(v59, a2);
        }
        WTF::fastFree((WTF *)v57, a2);
        v29 = v56;
        a2 = v61;
      }
    }
    v18 = 0.0;
    v20 = *((float *)&v29 + 1);
    if ((_BYTE)a2)
      v19 = *(float *)&v29;
    else
      v19 = 0.0;
    if (!(_BYTE)a2)
      v20 = 0.0;
  }
  v17 = 0.0;
LABEL_62:
  v44 = v4[1];
  if (v17 > *v4 || (float)(v19 + v17) < *v4 || v18 > v44 || (float)(v18 + v20) < v44)
    goto LABEL_73;
  v64 = 0u;
  v63 = 0u;
  *(float *)v62 = v17;
  *(float *)&v62[1] = v18;
  *(float *)&v62[2] = v19;
  *(float *)&v62[3] = v20;
  v68 = 0;
  v48.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)&v66, (WebCore::FloatRect *)v62, 0);
  v49 = v68;
  if (v68 == 2)
  {
    if (v67[0]
      && ((*(uint64_t (**)(unint64_t, double))(*(_QWORD *)v67[0] + 200))(v67[0], v48.n128_f64[0]) & 1) != 0)
    {
      v12 = 0;
LABEL_79:
      v49 = v68;
      if (v68 == -1)
        goto LABEL_81;
      goto LABEL_80;
    }
LABEL_78:
    v50 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)&v66);
    v12 = WebCore::PathCG::contains(v50, v4, 0);
    goto LABEL_79;
  }
  if (v68)
    goto LABEL_78;
  v12 = 0;
LABEL_80:
  ((void (*)(char *, unint64_t *, __n128))off_1E3449EC0[v49])(&v65, v67, v48);
LABEL_81:
  if (*(_DWORD *)(v3 + 8) == 1)
    (*(void (**)(uint64_t, const WebCore::RenderElement *, const WebCore::FloatPoint *))(*(_QWORD *)v3 + 8))(v3, a2, a3);
  else
    --*(_DWORD *)(v3 + 8);
  return v12;
}

unsigned int *WebCore::SVGRenderSupport::applyStrokeStyleToContext(unsigned int *this, WebCore::GraphicsContext *a2, const WebCore::RenderStyle *a3, const WebCore::RenderElement *a4)
{
  uint64_t v5;
  __int16 v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  WebCore::Length *v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  float v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  WebCore::SVGLengthValue *v38;
  char v39;
  WebCore::SVGLengthValue *v40;
  float v41;
  unsigned __int8 *v42;
  WebCore::Length *v43;
  int v44;
  float v45;
  void *v46;
  WTF *v47;
  float v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  _DWORD *v52;
  float TotalLength;
  int v54;
  float v55;
  float v56;
  unint64_t v57;
  char v58;
  float v59;
  float v60;
  float v61;
  unint64_t v62;
  char v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  WTF *v68[5];
  WTF *v69;
  uint64_t *v70;
  uint64_t *v71[2];
  int v72;
  char v73[9];

  if ((*((_BYTE *)a3 + 45) & 1) != 0)
    return this;
  v5 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
  if (!v5)
    return this;
  v6 = *(_WORD *)(v5 + 28);
  if ((v6 & 8) == 0)
  {
    __break(0xC471u);
    goto LABEL_98;
  }
  v7 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v7 + 2;
  if ((v6 & 0x20) != 0)
  {
    v9 = (uint64_t)this;
    v10 = *((_QWORD *)a2 + 7);
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v68, (const WebCore::SVGElement *)v5);
    v11 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
    v12 = (WebCore::Length *)(v11 + 244);
    v13 = v11[248];
    if (v13 == 4)
    {
      if (v11[250])
        v14 = *(float *)v12;
      else
        v14 = (float)*(int *)v12;
    }
    else if (v13 == 11)
    {
      v57 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v68);
      v56 = *((float *)&v57 + 1);
      v55 = *(float *)&v57;
      if (!v58)
      {
        v56 = 0.0;
        v55 = 0.0;
      }
      v59 = hypotf(v55, v56);
      WebCore::Length::nonNanCalculatedValue(v12, v59 / 1.4142);
    }
    else
    {
      v14 = 0.0;
      if (v13 == 3)
      {
        v22 = *((float *)v11 + 61);
        if (!v11[250])
          v22 = (float)SLODWORD(v22);
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v68, 2, (uint64_t)v71, v22 / 100.0);
        v23 = 0.0;
        if (v72 != -1)
        {
          if (!v72)
            v23 = *(float *)v71;
          ((void (*)(WTF **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v72])(&v69, v71);
        }
        v14 = v23;
      }
    }
    if (*(float *)(v9 + 188) != v14)
    {
      *(float *)(v9 + 188) = v14;
      *(_DWORD *)(v9 + 184) |= 8u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, v9 + 8);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 296))(v9, (unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 3) + 236) >> 14);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 312))(v9, *(_WORD *)(*((_QWORD *)a2 + 3) + 238) & 3);
    v15 = *((_QWORD *)a2 + 3);
    if ((*(_BYTE *)(v15 + 238) & 3) == 0)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v9 + 320))(v9, *(float *)(v15 + 208));
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *(unsigned int *)(v16 + 76);
    if (!(_DWORD)v17)
    {
      if (*(_BYTE *)(v9 + 193) != 1)
      {
        *(_BYTE *)(v9 + 193) = 1;
        *(_DWORD *)(v9 + 184) |= 0x10u;
      }
      this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, v9 + 8);
LABEL_19:
      v19 = v68[0];
      v68[0] = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr((unsigned int *)v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)v19));
        if (!v21)
        {
          atomic_store(1u, (unsigned int *)v19);
          v49 = *((unsigned int *)v19 + 7);
          if ((_DWORD)v49)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v19 + 2), (WTF::StringImpl *)(*((_QWORD *)v19 + 2) + 32 * v49));
          v50 = (WTF *)*((_QWORD *)v19 + 2);
          if (v50)
          {
            *((_QWORD *)v19 + 2) = 0;
            *((_DWORD *)v19 + 6) = 0;
            WTF::fastFree(v50, v18);
          }
          this = (unsigned int *)WTF::fastFree(v19, v18);
        }
      }
      v7 = *(_DWORD *)(v5 + 24) - 2;
      if (*(_DWORD *)(v5 + 24) != 2)
        goto LABEL_6;
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, v18);
      return this;
    }
    if (!(v17 >> 29))
    {
      v24 = WTF::fastMalloc((WTF *)(8 * v17));
      v25 = (WTF *)v24;
      v26 = *(unsigned int *)(v16 + 76);
      if ((_DWORD)v26)
      {
        v27 = *(uint64_t **)(v16 + 64);
        v28 = 8 * v26;
        v29 = (_QWORD *)v24;
        do
        {
          v30 = *v27++;
          *v29++ = v30;
          v28 -= 8;
        }
        while (v28);
      }
      v31 = 1.0;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 1192))(v5)
        || ((v32 = *(uint64_t **)(v5 + 216), (v33 = v32[3]) == 0)
         || !*(_DWORD *)(v33 - 12)
         || (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v32 + 3, v71), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v32 + 3, (uint64_t **)&v69), v71[1] == v70)? (v34 = v32 + 5): (v34 = v32 + 6), v35 = *v34, *(float *)(v35 + 28) == 0.0))
      {
LABEL_45:
        v70 = 0;
        v36 = (WTF *)WTF::fastMalloc((WTF *)(8 * v17));
        v37 = 0;
        LODWORD(v70) = v17;
        v69 = v36;
        v38 = (WTF *)((char *)v25 + 8 * v17);
        v39 = 1;
        v40 = v25;
        do
        {
          while (1)
          {
            v41 = v31 * WebCore::SVGLengthValue::value(v40, (const WebCore::SVGLengthContext *)v68);
            *((double *)v36 + v37) = v41;
            v40 = (WebCore::SVGLengthValue *)((char *)v40 + 8);
            if (v41 <= 0.0)
              break;
            v39 = 0;
            ++v37;
            if (v40 == v38)
            {
              HIDWORD(v70) = v37;
LABEL_52:
              v42 = *(unsigned __int8 **)(v10 + 24);
              v43 = (WebCore::Length *)(v42 + 56);
              v44 = v42[60];
              if (v44 == 4)
              {
                if (v42[62])
                  v45 = *(float *)v43;
                else
                  v45 = (float)*(int *)v43;
              }
              else if (v44 == 11)
              {
                v62 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v68);
                v61 = *((float *)&v62 + 1);
                v60 = *(float *)&v62;
                if (!v63)
                {
                  v61 = 0.0;
                  v60 = 0.0;
                }
                v64 = hypotf(v60, v61);
                WebCore::Length::nonNanCalculatedValue(v43, v64 / 1.4142);
              }
              else
              {
                v45 = 0.0;
                if (v44 == 3)
                {
                  v48 = *((float *)v42 + 14);
                  if (!v42[62])
                    v48 = (float)SLODWORD(v48);
                  WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v68, 2, (uint64_t)v71, v48 / 100.0);
                  v66 = 0.0;
                  if (v72 != -1)
                  {
                    if (!v72)
                      v66 = *(float *)v71;
                    ((void (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v72])(v73, v71);
                  }
                  v45 = v66;
                }
              }
              (*(void (**)(uint64_t, WTF **, float))(*(_QWORD *)v9 + 304))(v9, &v69, v31 * v45);
              goto LABEL_56;
            }
          }
          ++v37;
        }
        while (v40 != v38);
        HIDWORD(v70) = v37;
        if ((v39 & 1) == 0)
          goto LABEL_52;
        if (*(_BYTE *)(v9 + 193) != 1)
        {
          *(_BYTE *)(v9 + 193) = 1;
          *(_DWORD *)(v9 + 184) |= 0x10u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, v9 + 8);
LABEL_56:
        v47 = v69;
        if (v69)
        {
          v69 = 0;
          LODWORD(v70) = 0;
          WTF::fastFree(v47, v46);
        }
        this = (unsigned int *)WTF::fastFree(v25, v46);
        goto LABEL_19;
      }
      v65 = *(float *)(v35 + 28);
      v67 = v10;
      if ((*((_BYTE *)a3 + 52) & 7) == 4)
      {
        v51 = *((unsigned __int8 *)a3 + 53);
        if ((~v51 & 0x11) != 0)
        {
          if ((v51 & 1) != 0)
            goto LABEL_82;
          if ((v51 & 0x10) == 0)
            goto LABEL_45;
          v52 = (_DWORD *)((char *)a3 + 16);
          ++*((_DWORD *)a3 + 4);
          TotalLength = WebCore::RenderSVGShape::getTotalLength((WebCore::Path **)a3);
          v54 = *((_DWORD *)a3 + 4);
          if (!v54)
          {
            __break(0xC471u);
            JUMPOUT(0x196535930);
          }
        }
        else
        {
          v52 = (_DWORD *)((char *)a3 + 16);
          ++*((_DWORD *)a3 + 4);
          TotalLength = WebCore::LegacyRenderSVGShape::getTotalLength((WebCore::Path **)a3);
          v54 = *((_DWORD *)a3 + 4);
          if (!v54)
          {
            __break(0xC471u);
            JUMPOUT(0x1965359D0);
          }
        }
        *v52 = v54 - 1;
        v31 = TotalLength / v65;
      }
LABEL_82:
      v10 = v67;
      goto LABEL_45;
    }
    __break(0xC471u);
LABEL_98:
    JUMPOUT(0x196535814);
  }
  if (v7)
  {
LABEL_6:
    *(_DWORD *)(v5 + 24) = v7;
    return this;
  }
  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  return this;
}

uint64_t WebCore::SVGRenderStyle::strokeDashArray(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a2 + 76);
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = v2;
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(v4 + 8) = v2;
      *(_QWORD *)v4 = this;
      v5 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v5)
      {
        v6 = *(uint64_t **)(a2 + 64);
        v7 = 8 * v5;
        do
        {
          v8 = *v6++;
          *(_QWORD *)this = v8;
          this += 8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return this;
}

float WebCore::SVGGeometryElement::pathLength(WebCore::SVGGeometryElement *this)
{
  uint64_t v1;
  uint64_t *v2;
  char *v3;
  WebCore::SVGGeometryElement *v5;
  uint64_t *v6[5];
  uint64_t *v7[5];

  v2 = (uint64_t *)((char *)this + 24);
  v1 = *((_QWORD *)this + 3);
  if (v1
    && *(_DWORD *)(v1 - 12)
    && (v5 = this,
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 3, v7), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v2, v6), this = v5, v7[1] != v6[1]))
  {
    v3 = (char *)v5 + 48;
  }
  else
  {
    v3 = (char *)this + 40;
  }
  return *(float *)(*(_QWORD *)v3 + 28);
}

uint64_t WebCore::SVGRenderSupport::styleChanged(uint64_t this, WebCore::RenderElement *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  __int16 v14;
  uint64_t v15;
  uint64_t (*v16)();
  _BYTE v17[8];
  WTF::StringImpl *v18;
  char v19;

  if ((*(_BYTE *)(this + 45) & 1) == 0)
  {
    v3 = this;
    v4 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    if (v4)
    {
      v5 = *(_WORD *)(v4 + 28);
      if ((v5 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196535CFCLL);
      }
      if ((v5 & 0x20) != 0
        && (!a2
         || ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 40) + 636) & 0x1F00000) != 0x100000) != ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 636) & 0x1F00000) != 0x100000)))
      {
        *(_DWORD *)(v4 + 24) += 2;
        v6 = *(_QWORD *)(v4 + 32);
        if (!v6)
        {
LABEL_8:
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
          return this;
        }
        while (1)
        {
          v7 = *(_WORD *)(v6 + 28);
          if ((v7 & 8) == 0)
            goto LABEL_8;
          if ((v7 & 0x20) != 0)
          {
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1184))(v6);
            if ((_DWORD)this)
              break;
          }
          v6 = *(_QWORD *)(v6 + 32);
          if (!v6)
            goto LABEL_8;
        }
LABEL_14:
        *(_DWORD *)(v6 + 24) += 2;
        v17[0] = 0;
        v19 = 0;
        this = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 264))(v6, v17);
        v8 = this;
        if (v19)
        {
          this = (uint64_t)v18;
          v18 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
            else
              *(_DWORD *)this -= 2;
          }
        }
        if (!v8)
        {
LABEL_27:
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
          while (1)
          {
            v6 = *(_QWORD *)(v6 + 32);
            if (!v6)
              goto LABEL_8;
            v14 = *(_WORD *)(v6 + 28);
            if ((v14 & 8) == 0)
              goto LABEL_8;
            if ((v14 & 0x20) != 0)
            {
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1184))(v6);
              if ((this & 1) != 0)
                goto LABEL_14;
            }
          }
        }
        v9 = *(_QWORD *)(v8 + 8);
        v10 = *(_QWORD *)(v9 + 32);
        v11 = *(_QWORD *)(v10 + 48);
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v15 = *(_QWORD *)(v10 + 48);
          while (!*(_QWORD *)(v15 + 16))
          {
            v15 = *(_QWORD *)(v15 + 8);
            if (!v15)
              goto LABEL_24;
          }
        }
        else
        {
          if (*(_QWORD *)(v11 + 16))
            v13 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v13 = 0;
          if (v13)
            goto LABEL_45;
LABEL_24:
          if (!*(_DWORD *)(*(_QWORD *)(v10 + 32) + 20)
            && (*(_DWORD *)(*(_QWORD *)(v9 + 40) + 636) & 0x1F00000) == 0x100000
            && *(float *)(v10 + 4) >= 1.0)
          {
            goto LABEL_27;
          }
        }
        if (v12)
        {
          while (!*(_QWORD *)(v11 + 16))
          {
            v11 = *(_QWORD *)(v11 + 8);
            if (!v11)
              goto LABEL_49;
          }
          goto LABEL_56;
        }
LABEL_45:
        if (*(_QWORD *)(v11 + 16))
          v16 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v16 = 0;
        if (!v16)
        {
LABEL_49:
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
          goto LABEL_8;
        }
LABEL_56:
        *(_BYTE *)(v6 + 200) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 636) & 0x1F00000) != 0x100000;
        goto LABEL_49;
      }
    }
  }
  return this;
}

uint64_t WebCore::SVGRenderSupport::calculateApproximateStrokeBoundingBox(WebCore::SVGRenderSupport *this, const WebCore::RenderElement *a2)
{
  int v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float64x2_t v19;
  double v20;
  double v22;
  int8x16_t v23;
  int8x16_t v24;
  float64x2_t v25;
  double v26;
  uint64_t v27;
  int v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  int v47;
  float v48;
  double v49;
  uint64_t v50;
  int v51;
  float v52;
  double v53;
  float v54;
  float v55;
  __int128 *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  __int32 v67;
  float v68;
  float v69;
  uint64_t v70;
  int v71;
  float v72;
  double v73;
  uint64_t v74;
  int v75;
  float v76;
  double v77;
  unint64_t v78;
  float v79;
  float v80;
  double v81;
  double v82;
  double v83;
  double v84;
  float64x2_t v85;
  char v86;
  double v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  __int128 *v91;
  float v92;
  float v93;

  if ((*((_BYTE *)this + 52) & 7) != 4)
  {
LABEL_2:
    __break(0xC471u);
    JUMPOUT(0x196535DF0);
  }
  v3 = *((unsigned __int8 *)this + 53);
  if ((~v3 & 0x11) == 0)
  {
    ++*((_DWORD *)this + 4);
    v4 = *((_QWORD *)this + 17);
    if (*(_BYTE *)(*(_QWORD *)(v4 + 24) + 80) == 1)
    {
      v5 = *((float *)this + 36);
      v6 = *((float *)this + 37);
      v7 = *((float *)this + 38);
      v8 = *((float *)this + 39);
LABEL_6:
      result = (*(uint64_t (**)(WebCore::SVGRenderSupport *, _QWORD, float, float, float, float))(*(_QWORD *)this + 856))(this, 0, v5, v6, v7, v8);
      v10 = *((_DWORD *)this + 4);
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x19653633CLL);
      }
      *((_DWORD *)this + 4) = v10 - 1;
      return result;
    }
    v5 = *((float *)this + 36);
    v6 = *((float *)this + 37);
    v7 = *((float *)this + 38);
    v8 = *((float *)this + 39);
    if ((*(_WORD *)(v4 + 8) & 0x400) == 0)
    {
      v16 = WebCore::LegacyRenderSVGShape::strokeWidth(this);
      if (v16 > 0.0)
      {
        v17 = v16 * 0.5;
        switch((*((unsigned __int8 *)this + 208) >> 4) & 7)
        {
          case 0:
            goto LABEL_6;
          case 1:
            v46 = *((_QWORD *)this + 13);
            v47 = *(_DWORD *)(v46 + 236);
            if ((v47 & 0x30000) != 0)
              goto LABEL_64;
            v48 = *(float *)(v46 + 208);
            if ((*(_DWORD *)(v46 + 236) & 0xC000) == 0x8000 && v48 < 1.41421356)
            {
              v49 = v17 * 1.41421356;
              goto LABEL_66;
            }
            if (v48 < 1.0)
              v48 = 1.0;
            v17 = v17 * v48;
            goto LABEL_18;
          case 2:
            v47 = *(_DWORD *)(*((_QWORD *)this + 13) + 236);
LABEL_64:
            if ((v47 & 0xC000) == 0x8000)
            {
              v49 = v17 * 1.41421356;
LABEL_66:
              v17 = v49;
            }
            goto LABEL_18;
          case 3:
          case 4:
            if ((*(_WORD *)(*((_QWORD *)this + 17) + 4) & 3) == 2)
              v17 = v17 + 1.0;
            goto LABEL_18;
          default:
LABEL_18:
            v5 = v5 - v17;
            v7 = v17 + (float)(v7 + v17);
            v6 = v6 - v17;
            v8 = v17 + (float)(v8 + v17);
            break;
        }
      }
      goto LABEL_6;
    }
    v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v18 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965364D8);
    }
    if (((*(uint64_t (**)(_QWORD, const WebCore::RenderElement *))(*(_QWORD *)v18 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8), a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965364F8);
    }
    *(_DWORD *)(v18 + 24) += 2;
    (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 1320))(&v87, v18, 1);
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
    v19.f64[0] = v89;
    v20 = vmuld_lane_f64(-v88.f64[0], v88, 1) + v87 * v89;
    if (((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
      && (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL)
    {
      goto LABEL_6;
    }
    v22 = 1.0;
    if (v87 == 1.0 && v88.f64[0] == 0.0 && v88.f64[1] == 0.0 && v89 == 1.0)
    {
      v25 = vnegq_f64(v90);
      v82 = 0.0;
      v83 = 0.0;
      v26 = 1.0;
    }
    else
    {
      v22 = v89 / v20;
      v19.f64[1] = v87;
      v23 = (int8x16_t)vmulq_f64(v90, vnegq_f64(v19));
      v24 = (int8x16_t)vdivq_f64(vmlaq_f64((float64x2_t)vextq_s8(v23, v23, 8uLL), v90, v88), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0));
      v25 = (float64x2_t)vextq_s8(v24, v24, 8uLL);
      v82 = -v88.f64[0] / v20;
      v83 = -v88.f64[1] / v20;
      v26 = v87 / v20;
    }
    v81 = v22;
    v84 = v26;
    v85 = v25;
    v86 = 1;
    v27 = *((_QWORD *)this + 33);
    {
      v28 = qword_1EE2F9680;
      v29 = *(_DWORD *)(v27 + 64);
      if ((_DWORD)qword_1EE2F9680 == -1)
      {
        if (v29 == -1)
          goto LABEL_36;
        goto LABEL_35;
      }
      if (v29 != -1)
      {
LABEL_35:
        v91 = (__int128 *)((char *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
                         + 8);
        ((void (*)(__int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_3[v29])(&v91);
LABEL_36:
        WebCore::Path::transform((WebCore::Path *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, (float64x2_t *)&v87);
        WebCore::Path::fastBoundingRect((WebCore::Path *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath);
        v31 = v30;
        v33 = v32;
        v35 = v34;
        v37 = v36;
        v38 = WebCore::LegacyRenderSVGShape::strokeWidth(this);
        if (v38 > 0.0)
        {
          v39 = v38 * 0.5;
          switch((*((unsigned __int8 *)this + 208) >> 4) & 7)
          {
            case 0:
              break;
            case 1:
              v50 = *((_QWORD *)this + 13);
              v51 = *(_DWORD *)(v50 + 236);
              if ((v51 & 0x30000) != 0)
                goto LABEL_72;
              v52 = *(float *)(v50 + 208);
              if ((*(_DWORD *)(v50 + 236) & 0xC000) == 0x8000 && v52 < 1.41421356)
              {
                v53 = v39 * 1.41421356;
                goto LABEL_74;
              }
              if (v52 < 1.0)
                v52 = 1.0;
              v39 = v39 * v52;
              goto LABEL_40;
            case 2:
              v51 = *(_DWORD *)(*((_QWORD *)this + 13) + 236);
LABEL_72:
              if ((v51 & 0xC000) == 0x8000)
              {
                v53 = v39 * 1.41421356;
LABEL_74:
                v39 = v53;
              }
              goto LABEL_40;
            case 3:
            case 4:
              if ((*(_WORD *)(*((_QWORD *)this + 17) + 4) & 3) == 2)
                v39 = v39 + 1.0;
              goto LABEL_40;
            default:
LABEL_40:
              v31 = v31 - v39;
              v35 = v39 + (float)(v35 + v39);
              v33 = v33 - v39;
              v37 = v39 + (float)(v37 + v39);
              break;
          }
        }
        v91 = (__int128 *)__PAIR64__(LODWORD(v33), LODWORD(v31));
        v92 = v35;
        v93 = v37;
        v40 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v81, (const WebCore::FloatRect *)&v91);
        if (v42 <= 0.0 || v43 <= 0.0)
        {
          v43 = v8;
          v42 = v7;
          v41 = v6;
          v40 = v5;
        }
        else if (v7 > 0.0 && v8 > 0.0)
        {
          v44 = v42 + v40;
          if (v40 >= v5)
            v40 = v5;
          v45 = v43 + v41;
          if (v41 >= v6)
            v41 = v6;
          if ((float)(v5 + v7) >= v44)
            v44 = v5 + v7;
          if ((float)(v6 + v8) >= v45)
            v45 = v6 + v8;
          v42 = v44 - v40;
          v43 = v45 - v41;
        }
        v8 = v43;
        v7 = v42;
        v6 = v41;
        v5 = v40;
        goto LABEL_6;
      }
    }
    else
    {
      qword_1EE2F9680 = 0;
      xmmword_1EE2F9660 = 0u;
      unk_1EE2F9670 = 0u;
      WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath = 0u;
      *(_OWORD *)algn_1EE2F9650 = 0u;
      v29 = *(_DWORD *)(v27 + 64);
      if (v29 != -1)
        goto LABEL_35;
      v28 = 0;
    }
    ((void (*)(__int128 **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v28])(&v91, (char *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8);
    LODWORD(qword_1EE2F9680) = -1;
    goto LABEL_36;
  }
  if ((v3 & 1) != 0 || (v3 & 0x10) == 0)
    goto LABEL_2;
  v11 = *((_QWORD *)this + 17);
  if (*(_BYTE *)(*(_QWORD *)(v11 + 24) + 80) == 1)
  {
    v12 = *((float *)this + 42);
    v13 = *((float *)this + 43);
    v14 = *((float *)this + 44);
    v15 = *((float *)this + 45);
  }
  else
  {
    v12 = *((float *)this + 42);
    v13 = *((float *)this + 43);
    v14 = *((float *)this + 44);
    v15 = *((float *)this + 45);
    if ((*(_WORD *)(v11 + 8) & 0x400) != 0)
    {
      LODWORD(v91) = *((_DWORD *)this + 42);
      *((float *)&v91 + 1) = v13;
      v92 = v14;
      v93 = v15;
      WebCore::RenderSVGShape::nonScalingStrokeTransform((uint64_t *)&v87, this);
      WebCore::AffineTransform::inverse((float64x2_t *)&v87, (uint64_t)&v81);
      if (v86)
      {
        v56 = WebCore::RenderSVGShape::nonScalingStrokePath(this, *((const WebCore::Path **)this + 28), (float64x2_t *)&v87);
        WebCore::Path::fastBoundingRect((WebCore::Path *)v56);
        v58 = v57;
        v60 = v59;
        v62 = v61;
        v64 = v63;
        v65 = WebCore::RenderSVGShape::strokeWidth(this);
        if (v65 > 0.0)
        {
          v66 = v65 * 0.5;
          switch(*((_BYTE *)this + 217) & 7)
          {
            case 0:
              break;
            case 1:
              v74 = *((_QWORD *)this + 13);
              v75 = *(_DWORD *)(v74 + 236);
              if ((v75 & 0x30000) != 0)
                goto LABEL_112;
              v76 = *(float *)(v74 + 208);
              if ((*(_DWORD *)(v74 + 236) & 0xC000) == 0x8000 && v76 < 1.41421356)
              {
                v77 = v66 * 1.41421356;
                goto LABEL_114;
              }
              if (v76 < 1.0)
                v76 = 1.0;
              v66 = v66 * v76;
              goto LABEL_95;
            case 2:
              v75 = *(_DWORD *)(*((_QWORD *)this + 13) + 236);
LABEL_112:
              if ((v75 & 0xC000) == 0x8000)
              {
                v77 = v66 * 1.41421356;
LABEL_114:
                v66 = v77;
              }
              goto LABEL_95;
            case 3:
            case 4:
              if ((*(_WORD *)(*((_QWORD *)this + 17) + 4) & 3) == 2)
                v66 = v66 + 1.0;
              goto LABEL_95;
            default:
LABEL_95:
              v58 = v58 - v66;
              v62 = v66 + (float)(v62 + v66);
              v60 = v60 - v66;
              v64 = v66 + (float)(v64 + v66);
              break;
          }
        }
        v78 = __PAIR64__(LODWORD(v60), LODWORD(v58));
        v79 = v62;
        v80 = v64;
        LODWORD(v78) = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v81, (const WebCore::FloatRect *)&v78);
        HIDWORD(v78) = v67;
        v79 = v68;
        v80 = v69;
        WebCore::FloatRect::unite((float32x2_t *)&v91, (float32x2_t *)&v78);
        v13 = *((float *)&v91 + 1);
        v12 = *(float *)&v91;
        v14 = v92;
        v15 = v93;
      }
    }
    else
    {
      v54 = WebCore::RenderSVGShape::strokeWidth(this);
      if (v54 > 0.0)
      {
        v55 = v54 * 0.5;
        switch(*((_BYTE *)this + 217) & 7)
        {
          case 0:
            return (*(uint64_t (**)(WebCore::SVGRenderSupport *, _QWORD, float, float, float, float))(*(_QWORD *)this + 952))(this, 0, v12, v13, v14, v15);
          case 1:
            v70 = *((_QWORD *)this + 13);
            v71 = *(_DWORD *)(v70 + 236);
            if ((v71 & 0x30000) != 0)
              goto LABEL_104;
            v72 = *(float *)(v70 + 208);
            if ((*(_DWORD *)(v70 + 236) & 0xC000) == 0x8000 && v72 < 1.41421356)
            {
              v73 = v55 * 1.41421356;
              goto LABEL_106;
            }
            if (v72 < 1.0)
              v72 = 1.0;
            v55 = v55 * v72;
            goto LABEL_89;
          case 2:
            v71 = *(_DWORD *)(*((_QWORD *)this + 13) + 236);
LABEL_104:
            if ((v71 & 0xC000) == 0x8000)
            {
              v73 = v55 * 1.41421356;
LABEL_106:
              v55 = v73;
            }
            goto LABEL_89;
          case 3:
          case 4:
            if ((*(_WORD *)(*((_QWORD *)this + 17) + 4) & 3) == 2)
              v55 = v55 + 1.0;
            goto LABEL_89;
          default:
LABEL_89:
            v12 = v12 - v55;
            v14 = v55 + (float)(v14 + v55);
            v13 = v13 - v55;
            v15 = v55 + (float)(v15 + v55);
            break;
        }
      }
    }
  }
  return (*(uint64_t (**)(WebCore::SVGRenderSupport *, _QWORD, float, float, float, float))(*(_QWORD *)this + 952))(this, 0, v12, v13, v14, v15);
}

uint64_t WebCore::writeSVGPaintingFeatures(WebCore *a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::Color *v5;
  float v6;
  int32x4_t v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  double v11;
  double v12;
  float v13;
  double v14;
  double v15;
  float v16;
  uint64_t result;
  void *v18;
  int v19;
  WebCore::RenderElement *v20;
  WebCore::Color *v21;
  WebCore::SVGGeometryElement **v22;
  const WebCore::RenderElement *v23;
  const WebCore::SVGGraphicsElement *v24;
  void *v25;
  WebCore::RenderElement *v26;
  void *v27;
  const WebCore::LegacyRenderSVGResource *v28;
  unsigned int *v29;
  unsigned int v30;
  BOOL v31;
  WebCore::RenderElement *v32;
  WebCore::Color *v33;
  uint64_t v34;
  const WebCore::RenderElement *v35;
  const WebCore::SVGGraphicsElement *v36;
  void *v37;
  WebCore::RenderElement *v38;
  const WebCore::LegacyRenderSVGResource *v39;
  unsigned int v40;
  WTF *v41;
  void *v42;
  float64x2_t v43[3];
  float64x2_t v44[2];
  double v45;
  double v46;

  v4 = *(_QWORD *)(a2 + 136);
  ++*(_DWORD *)v4;
  (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 264))(v44, a2);
  v6 = 0.0;
  v7 = (int32x4_t)vceqq_f64(v44[1], (float64x2_t)xmmword_1968A14C0);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v44[0], (float64x2_t)xmmword_1968A14B0), v7)))) & 1) != 0|| v45 != 0.0|| (HIDWORD(v9) = HIDWORD(v46), v46 != 0.0))
  {
    (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 264))(v43, a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v8 = WTF::TextStream::operator<<();
    WebCore::operator<<(v8, v43);
    WTF::TextStream::operator<<();
  }
  v10 = *(_BYTE *)(*(_QWORD *)(a2 + 104) + 234) & 7;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 104) + 234) & 7) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (v10 <= 4)
      WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  LODWORD(v9) = 1.0;
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 32) + 4) != 1.0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if ((*(_BYTE *)(a2 + 52) & 7) == 4)
  {
    v19 = *(unsigned __int8 *)(a2 + 53);
    if ((~v19 & 0x11) == 0)
    {
      v44[0].f64[0] = 0.0;
      v20 = WebCore::LegacyRenderSVGResource::strokePaintingResource((WebCore::LegacyRenderSVGResource *)a2, (WebCore::RenderElement *)(a2 + 80), (const WebCore::RenderStyle *)v44, v5);
      if (!v20)
      {
LABEL_21:
        v26 = WebCore::LegacyRenderSVGResource::fillPaintingResource((WebCore::LegacyRenderSVGResource *)a2, (WebCore::RenderElement *)(a2 + 80), (const WebCore::RenderStyle *)v44, v21);
        if (v26)
          WebCore::writeSVGFillPaintingResource(a1, (WTF::TextStream *)a2, v26, v28);
        if ((*(_WORD *)(v4 + 4) & 4) != 0)
        {
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
        }
        if ((*(_QWORD *)&v44[0].f64[0] & 0x8000000000000) == 0)
          goto LABEL_11;
        v29 = (unsigned int *)(*(_QWORD *)&v44[0].f64[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v30 = __ldaxr(v29);
          v31 = --v30 == 0;
        }
        while (__stlxr(v30, v29));
        goto LABEL_28;
      }
      v22 = *(WebCore::SVGGeometryElement ***)(*(_QWORD *)(a2 + 24) + 8);
      if ((*((_WORD *)v22 + 14) & 0x20) != 0)
      {
        v23 = v20;
        if (((*((uint64_t (**)(_QWORD))*v22 + 148))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196536B78);
        }
        *((_DWORD *)v22 + 6) += 2;
        WebCore::writeSVGStrokePaintingResource(a1, (WTF::TextStream *)a2, v23, v22, v24);
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v25);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
        goto LABEL_21;
      }
LABEL_54:
      __break(0xC471u);
      JUMPOUT(0x196536B58);
    }
    if ((v19 & 1) != 0 || (v19 & 0x10) == 0)
      goto LABEL_11;
    v44[0].f64[0] = 0.0;
    v32 = WebCore::LegacyRenderSVGResource::strokePaintingResource((WebCore::LegacyRenderSVGResource *)a2, (WebCore::RenderElement *)(a2 + 80), (const WebCore::RenderStyle *)v44, v5);
    if (v32)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if ((*(_WORD *)(v34 + 28) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196536BACLL);
      }
      v35 = v32;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v34 + 1184))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)) & 1) == 0)
        goto LABEL_54;
      *(_DWORD *)(v34 + 24) += 2;
      WebCore::writeSVGStrokePaintingResource(a1, (WTF::TextStream *)a2, v35, (WebCore::SVGGeometryElement **)v34, v36);
      if (*(_DWORD *)(v34 + 24) == 2)
      {
        if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v34, v37);
      }
      else
      {
        *(_DWORD *)(v34 + 24) -= 2;
      }
    }
    v38 = WebCore::LegacyRenderSVGResource::fillPaintingResource((WebCore::LegacyRenderSVGResource *)a2, (WebCore::RenderElement *)(a2 + 80), (const WebCore::RenderStyle *)v44, v33);
    if (v38)
      WebCore::writeSVGFillPaintingResource(a1, (WTF::TextStream *)a2, v38, v39);
    if ((*(_WORD *)(v4 + 4) & 4) != 0)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
    if ((*(_QWORD *)&v44[0].f64[0] & 0x8000000000000) == 0)
      goto LABEL_11;
    v29 = (unsigned int *)(*(_QWORD *)&v44[0].f64[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v40 = __ldaxr(v29);
      v31 = --v40 == 0;
    }
    while (__stlxr(v40, v29));
LABEL_28:
    if (v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v27);
    }
  }
LABEL_11:
  *(_QWORD *)&v44[0].f64[0] = a2;
  *(_QWORD *)&v44[0].f64[1] = a1;
  WebCore::writeSVGPaintingFeatures(WTF::TextStream &,WebCore::RenderElement const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()((uint64_t)v44, (int)"start marker", 13, (WebCore::SVGURIReference *)(*(_QWORD *)(v4 + 40) + 8), v9, *(double *)v7.i64, v6);
  WebCore::writeSVGPaintingFeatures(WTF::TextStream &,WebCore::RenderElement const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()((uint64_t)v44, (int)"middle marker", 14, (WebCore::SVGURIReference *)(*(_QWORD *)(v4 + 40) + 16), v11, v12, v13);
  result = WebCore::writeSVGPaintingFeatures(WTF::TextStream &,WebCore::RenderElement const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()((uint64_t)v44, (int)"end marker", 11, (WebCore::SVGURIReference *)(*(_QWORD *)(v4 + 40) + 24), v14, v15, v16);
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)v4, v18);
    return WTF::fastFree(v41, v42);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WebCore::writeSVGStrokePaintingResource(WebCore *this, WTF::TextStream *a2, const WebCore::RenderElement *a3, WebCore::SVGGeometryElement **a4, const WebCore::SVGGraphicsElement *a5)
{
  const WebCore::LegacyRenderSVGResource *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  WebCore::Length *v12;
  int v13;
  float v14;
  float v15;
  unsigned __int8 *v16;
  WebCore::Length *v17;
  int v18;
  float v19;
  float v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  char *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t result;
  void *v37;
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  float v44;
  unint64_t v45;
  char v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unint64_t v51;
  char v52;
  float v53;
  float v54;
  WTF *v55[5];
  WTF *v56;
  unsigned int v57;
  int v58;
  char v59;

  WTF::TextStream::operator<<();
  WebCore::writeSVGPaintingResource(this, a3, v9);
  v10 = *((_QWORD *)a2 + 17);
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v55, (const WebCore::SVGElement *)a4);
  v11 = *(unsigned __int8 **)(v10 + 24);
  v12 = (WebCore::Length *)(v11 + 56);
  v13 = v11[60];
  if (v13 == 4)
  {
    if (v11[62])
      v14 = *(float *)v12;
    else
      v14 = (float)*(int *)v12;
  }
  else if (v13 == 11)
  {
    v45 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v55);
    v44 = *((float *)&v45 + 1);
    v43 = *(float *)&v45;
    if (!v46)
    {
      v44 = 0.0;
      v43 = 0.0;
    }
    v47 = hypotf(v43, v44);
    WebCore::Length::nonNanCalculatedValue(v12, v47 / 1.4142);
    v14 = v48;
  }
  else
  {
    v14 = 0.0;
    if (v13 == 3)
    {
      v15 = *((float *)v11 + 14);
      if (!v11[62])
        v15 = (float)SLODWORD(v15);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v55, 2, (uint64_t)&v56, v15 / 100.0);
      if (v58 != -1)
      {
        if (!v58)
          v14 = *(float *)&v56;
        ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v58])(&v59, &v56);
      }
    }
  }
  v16 = (unsigned __int8 *)*((_QWORD *)a2 + 13);
  v17 = (WebCore::Length *)(v16 + 244);
  v18 = v16[248];
  if (v18 == 4)
  {
    if (v16[250])
      v19 = *(float *)v17;
    else
      v19 = (float)*(int *)v17;
  }
  else if (v18 == 11)
  {
    v51 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v55);
    v50 = *((float *)&v51 + 1);
    v49 = *(float *)&v51;
    if (!v52)
    {
      v50 = 0.0;
      v49 = 0.0;
    }
    v53 = hypotf(v49, v50);
    WebCore::Length::nonNanCalculatedValue(v17, v53 / 1.4142);
    v19 = v54;
  }
  else
  {
    v19 = 0.0;
    if (v18 == 3)
    {
      v20 = *((float *)v16 + 61);
      if (!v16[250])
        v20 = (float)SLODWORD(v20);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v55, 2, (uint64_t)&v56, v20 / 100.0);
      if (v58 != -1)
      {
        if (!v58)
          v19 = *(float *)&v56;
        ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v58])(&v59, &v56);
      }
    }
  }
  WebCore::SVGRenderStyle::strokeDashArray((uint64_t)&v56, *(_QWORD *)(v10 + 24));
  v22 = v57;
  v23 = v57 >> 29;
  v24 = (WTF *)(8 * v57);
  if (!v57)
  {
    v25 = 0;
    v27 = v56;
    if (!v56)
      goto LABEL_30;
    goto LABEL_75;
  }
  if (v23)
  {
    __break(0xC471u);
    JUMPOUT(0x19653728CLL);
  }
  v25 = (char *)WTF::fastMalloc((WTF *)(8 * v57));
  v26 = 0;
  v27 = v56;
  do
  {
    *(double *)((char *)v26 + (_QWORD)v25) = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)((char *)v26 + (_QWORD)v27), (const WebCore::SVGLengthContext *)v55);
    v26 = (WTF *)((char *)v26 + 8);
  }
  while (v24 != v26);
  if (v27)
LABEL_75:
    WTF::fastFree(v27, v21);
LABEL_30:
  if (*(float *)(*(_QWORD *)(v10 + 24) + 4) != 1.0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (v19 != 1.0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  v28 = *((_QWORD *)a2 + 13);
  if (*(float *)(v28 + 208) != 4.0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v28 = *((_QWORD *)a2 + 13);
  }
  v29 = *(_DWORD *)(v28 + 236);
  v30 = (unsigned __int16)v29 >> 14;
  if ((unsigned __int16)v29 >> 14)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (v30 == 1 || v30 == 2)
      WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v29 = *(_DWORD *)(*((_QWORD *)a2 + 13) + 236);
  }
  v31 = HIWORD(v29) & 3;
  if (v31)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (v31 == 1 || v31 == 2)
      WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (v14 != 0.0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (v22)
  {
    if (v23)
    {
      __break(0xC471u);
      JUMPOUT(0x196537294);
    }
    v32 = (void *)WTF::fastMalloc(v24);
    memcpy(v32, v25, (size_t)v24);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (v22 != 1)
    {
      v33 = 8;
      do
      {
        if (v33)
          WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v33 += 8;
      }
      while (v24 != (WTF *)v33);
    }
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::fastFree((WTF *)v32, v34);
  }
  if ((*((unsigned int (**)(WebCore::SVGGeometryElement **))*a4 + 149))(a4))
  {
    *((_DWORD *)a4 + 6) += 2;
    if (WebCore::SVGGeometryElement::pathLength(a4[27]) != 0.0)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
    if (*((_DWORD *)a4 + 6) == 2)
    {
      if ((*((_WORD *)a4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a4, v35);
    }
    else
    {
      *((_DWORD *)a4 + 6) -= 2;
    }
  }
  result = WTF::TextStream::operator<<();
  if (v25)
    result = WTF::fastFree((WTF *)v25, v37);
  v38 = v55[0];
  v55[0] = 0;
  if (v38)
  {
    do
    {
      v39 = __ldaxr((unsigned int *)v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)v38));
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)v38);
      v41 = *((unsigned int *)v38 + 7);
      if ((_DWORD)v41)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v38 + 2), (WTF::StringImpl *)(*((_QWORD *)v38 + 2) + 32 * v41));
      v42 = (WTF *)*((_QWORD *)v38 + 2);
      if (v42)
      {
        *((_QWORD *)v38 + 2) = 0;
        *((_DWORD *)v38 + 6) = 0;
        WTF::fastFree(v42, v37);
      }
      return WTF::fastFree(v38, v37);
    }
  }
  return result;
}

uint64_t WebCore::writeSVGFillPaintingResource(WebCore *this, WTF::TextStream *a2, const WebCore::RenderElement *a3, const WebCore::LegacyRenderSVGResource *a4)
{
  const WebCore::LegacyRenderSVGResource *v7;
  uint64_t v8;

  WTF::TextStream::operator<<();
  WebCore::writeSVGPaintingResource(this, a3, v7);
  v8 = *((_QWORD *)a2 + 17);
  if (*(float *)(*(_QWORD *)(v8 + 16) + 4) != 1.0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if ((*(_WORD *)(v8 + 4) & 8) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  return WTF::TextStream::operator<<();
}

uint64_t WebCore::writeSVGPaintingFeatures(WTF::TextStream &,WebCore::RenderElement const&,WTF::OptionSet<WebCore::RenderAsTextFlag>)::$_0::operator()(uint64_t result, int a2, int a3, WebCore::SVGURIReference *this, double a5, double a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if ((*(_BYTE *)(*(_QWORD *)result + 45) & 1) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 24) + 8);
    if (v7)
    {
      if ((*(_WORD *)(v7 + 28) & 8) != 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
        *(_DWORD *)(v8 + 24) += 2;
        result = (uint64_t)WebCore::SVGURIReference::fragmentIdentifierFromIRIString(this, (const WTF::String *)v8, &v12, a5, a6, a7);
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        v10 = v12;
        if (v12)
        {
          if (*((_DWORD *)v12 + 1))
          {
            *(_DWORD *)v12 += 2;
            v13 = v10;
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            v11 = v13;
            v13 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
              else
                *(_DWORD *)v11 -= 2;
            }
          }
          result = (uint64_t)v12;
          v12 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
      else
      {
        result = 105;
        __break(0xC471u);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::writeSVGGraphicsElement(WebCore *this, WebCore::SVGPolyElement **a2, const WebCore::SVGGraphicsElement *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::SVGPolyElement **v8;
  uint64_t v9;
  WebCore::SVGPolyElement **v10;
  uint64_t v11;
  WebCore::SVGPolyElement **v12;
  uint64_t v13;
  WebCore::SVGPolyElement **v14;
  WebCore::SVGPointList *v15;
  __n128 v16;
  WebCore::SVGPolyElement *v17;
  uint64_t v18;
  char *v19;
  WebCore::SVGPolyElement *v20;
  uint64_t v21;
  char *v22;
  WebCore::SVGPolyElement *v23;
  uint64_t v24;
  char *v25;
  WebCore::SVGPolyElement *v26;
  uint64_t v27;
  char *v28;
  WebCore::SVGPolyElement *v29;
  uint64_t v30;
  char *v31;
  WebCore::SVGPolyElement *v32;
  uint64_t v33;
  char *v34;
  WebCore::SVGPolyElement *v35;
  uint64_t v36;
  char *v37;
  WebCore::SVGPolyElement *v38;
  uint64_t v39;
  WebCore::SVGPolyElement *v40;
  uint64_t v41;
  char *v42;
  WebCore::SVGPolyElement *v43;
  uint64_t v44;
  char *v45;
  WebCore::SVGPolyElement *v46;
  uint64_t v47;
  char *v48;
  WebCore::SVGPolyElement *v49;
  uint64_t v50;
  WTF *v51;
  unsigned int v52;
  unsigned int v53;
  WebCore::SVGPolyElement *v54;
  uint64_t v55;
  char *v56;
  WebCore::SVGPolyElement *v57;
  uint64_t v58;
  char *v59;
  WebCore::SVGPolyElement *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  WTF *v77;
  WTF::StringImpl *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  WTF *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF *v147[5];
  void (**v148)(WebCore::SVGPathByteStreamSource *__hidden);
  WTF *v149;
  uint64_t v150;
  uint64_t v151;

  result = (WTF::StringImpl *)WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v147, (const WebCore::SVGElement *)a2);
  v6 = *((_QWORD *)a2[12] + 3);
  v7 = *(_QWORD *)(WebCore::SVGNames::rectTag + 24);
  if (v6 == v7)
    v8 = a2;
  else
    v8 = 0;
  if (v6 == v7)
  {
    v17 = a2[28];
    v18 = *((_QWORD *)v17 + 3);
    if (v18 && *(_DWORD *)(v18 - 12))
    {
      v62 = *(unsigned int *)(v18 - 4);
      if ((_DWORD)v62)
      {
        v63 = 8 * v62;
        v64 = (uint64_t *)*((_QWORD *)v17 + 3);
        while ((unint64_t)(*v64 + 1) <= 1)
        {
          ++v64;
          v63 -= 8;
          if (!v63)
            goto LABEL_23;
        }
      }
      else
      {
        v64 = (uint64_t *)*((_QWORD *)v17 + 3);
      }
      v115 = (uint64_t *)(v18 + 8 * v62);
      if (v64 != v115)
      {
        v116 = *v64;
LABEL_176:
        if (*(_QWORD *)(v116 + 8))
        {
          v19 = (char *)v17 + 48;
LABEL_24:
          WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v19 + 28), (const WebCore::SVGLengthContext *)v147);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v20 = v8[29];
          v21 = *((_QWORD *)v20 + 3);
          if (v21 && *(_DWORD *)(v21 - 12))
          {
            v65 = *(unsigned int *)(v21 - 4);
            if ((_DWORD)v65)
            {
              v66 = 8 * v65;
              v67 = (uint64_t *)*((_QWORD *)v20 + 3);
              while ((unint64_t)(*v67 + 1) <= 1)
              {
                ++v67;
                v66 -= 8;
                if (!v66)
                  goto LABEL_25;
              }
            }
            else
            {
              v67 = (uint64_t *)*((_QWORD *)v20 + 3);
            }
            v117 = (uint64_t *)(v21 + 8 * v65);
            if (v67 != v117)
            {
              v118 = *v67;
LABEL_185:
              if (*(_QWORD *)(v118 + 8))
              {
                v22 = (char *)v20 + 48;
LABEL_26:
                WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v22 + 28), (const WebCore::SVGLengthContext *)v147);
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                v23 = v8[30];
                v24 = *((_QWORD *)v23 + 3);
                if (v24 && *(_DWORD *)(v24 - 12))
                {
                  v68 = *(unsigned int *)(v24 - 4);
                  if ((_DWORD)v68)
                  {
                    v69 = 8 * v68;
                    v70 = (uint64_t *)*((_QWORD *)v23 + 3);
                    while ((unint64_t)(*v70 + 1) <= 1)
                    {
                      ++v70;
                      v69 -= 8;
                      if (!v69)
                        goto LABEL_27;
                    }
                  }
                  else
                  {
                    v70 = (uint64_t *)*((_QWORD *)v23 + 3);
                  }
                  v119 = (uint64_t *)(v24 + 8 * v68);
                  if (v70 != v119)
                  {
                    v120 = *v70;
LABEL_194:
                    if (*(_QWORD *)(v120 + 8))
                    {
                      v25 = (char *)v23 + 48;
                      goto LABEL_28;
                    }
                    while (++v70 != v119)
                    {
                      v120 = *v70;
                      if ((unint64_t)(*v70 + 1) > 1)
                      {
                        if (v70 != v119)
                          goto LABEL_194;
                        break;
                      }
                    }
                  }
                }
LABEL_27:
                v25 = (char *)v23 + 40;
LABEL_28:
                WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v25 + 28), (const WebCore::SVGLengthContext *)v147);
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                v26 = v8[31];
                v27 = *((_QWORD *)v26 + 3);
                if (v27 && *(_DWORD *)(v27 - 12))
                {
                  v71 = *(unsigned int *)(v27 - 4);
                  if ((_DWORD)v71)
                  {
                    v72 = 8 * v71;
                    v73 = (uint64_t *)*((_QWORD *)v26 + 3);
                    while ((unint64_t)(*v73 + 1) <= 1)
                    {
                      ++v73;
                      v72 -= 8;
                      if (!v72)
                        goto LABEL_29;
                    }
                  }
                  else
                  {
                    v73 = (uint64_t *)*((_QWORD *)v26 + 3);
                  }
                  v121 = (uint64_t *)(v27 + 8 * v71);
                  if (v73 != v121)
                  {
                    v122 = *v73;
LABEL_203:
                    if (*(_QWORD *)(v122 + 8))
                    {
                      v28 = (char *)v26 + 48;
                      goto LABEL_46;
                    }
                    while (++v73 != v121)
                    {
                      v122 = *v73;
                      if ((unint64_t)(*v73 + 1) > 1)
                      {
                        if (v73 != v121)
                          goto LABEL_203;
                        break;
                      }
                    }
                  }
                }
LABEL_29:
                v28 = (char *)v26 + 40;
LABEL_46:
                WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v28 + 28), (const WebCore::SVGLengthContext *)v147);
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                result = (WTF::StringImpl *)WTF::TextStream::operator<<();
                goto LABEL_47;
              }
              while (++v67 != v117)
              {
                v118 = *v67;
                if ((unint64_t)(*v67 + 1) > 1)
                {
                  if (v67 != v117)
                    goto LABEL_185;
                  break;
                }
              }
            }
          }
LABEL_25:
          v22 = (char *)v20 + 40;
          goto LABEL_26;
        }
        while (++v64 != v115)
        {
          v116 = *v64;
          if ((unint64_t)(*v64 + 1) > 1)
          {
            if (v64 != v115)
              goto LABEL_176;
            break;
          }
        }
      }
    }
LABEL_23:
    v19 = (char *)v17 + 40;
    goto LABEL_24;
  }
  v9 = *(_QWORD *)(WebCore::SVGNames::lineTag + 24);
  if (v6 == v9)
    v10 = a2;
  else
    v10 = 0;
  if (v6 == v9)
  {
    v29 = a2[28];
    v30 = *((_QWORD *)v29 + 3);
    if (v30 && *(_DWORD *)(v30 - 12))
    {
      v80 = *(unsigned int *)(v30 - 4);
      if ((_DWORD)v80)
      {
        v81 = 8 * v80;
        v82 = (uint64_t *)*((_QWORD *)v29 + 3);
        while ((unint64_t)(*v82 + 1) <= 1)
        {
          ++v82;
          v81 -= 8;
          if (!v81)
            goto LABEL_31;
        }
      }
      else
      {
        v82 = (uint64_t *)*((_QWORD *)v29 + 3);
      }
      v123 = (uint64_t *)(v30 + 8 * v80);
      if (v82 != v123)
      {
        v124 = *v82;
LABEL_212:
        if (*(_QWORD *)(v124 + 8))
        {
          v31 = (char *)v29 + 48;
LABEL_32:
          WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v31 + 28), (const WebCore::SVGLengthContext *)v147);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v32 = v10[29];
          v33 = *((_QWORD *)v32 + 3);
          if (v33 && *(_DWORD *)(v33 - 12))
          {
            v83 = *(unsigned int *)(v33 - 4);
            if ((_DWORD)v83)
            {
              v84 = 8 * v83;
              v85 = (uint64_t *)*((_QWORD *)v32 + 3);
              while ((unint64_t)(*v85 + 1) <= 1)
              {
                ++v85;
                v84 -= 8;
                if (!v84)
                  goto LABEL_33;
              }
            }
            else
            {
              v85 = (uint64_t *)*((_QWORD *)v32 + 3);
            }
            v125 = (uint64_t *)(v33 + 8 * v83);
            if (v85 != v125)
            {
              v126 = *v85;
LABEL_221:
              if (*(_QWORD *)(v126 + 8))
              {
                v34 = (char *)v32 + 48;
LABEL_34:
                WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v34 + 28), (const WebCore::SVGLengthContext *)v147);
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                v35 = v10[30];
                v36 = *((_QWORD *)v35 + 3);
                if (v36 && *(_DWORD *)(v36 - 12))
                {
                  v86 = *(unsigned int *)(v36 - 4);
                  if ((_DWORD)v86)
                  {
                    v87 = 8 * v86;
                    v88 = (uint64_t *)*((_QWORD *)v35 + 3);
                    while ((unint64_t)(*v88 + 1) <= 1)
                    {
                      ++v88;
                      v87 -= 8;
                      if (!v87)
                        goto LABEL_35;
                    }
                  }
                  else
                  {
                    v88 = (uint64_t *)*((_QWORD *)v35 + 3);
                  }
                  v127 = (uint64_t *)(v36 + 8 * v86);
                  if (v88 != v127)
                  {
                    v128 = *v88;
LABEL_230:
                    if (*(_QWORD *)(v128 + 8))
                    {
                      v37 = (char *)v35 + 48;
                      goto LABEL_36;
                    }
                    while (++v88 != v127)
                    {
                      v128 = *v88;
                      if ((unint64_t)(*v88 + 1) > 1)
                      {
                        if (v88 != v127)
                          goto LABEL_230;
                        break;
                      }
                    }
                  }
                }
LABEL_35:
                v37 = (char *)v35 + 40;
LABEL_36:
                WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v37 + 28), (const WebCore::SVGLengthContext *)v147);
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                v38 = v10[31];
                v39 = *((_QWORD *)v38 + 3);
                if (v39 && *(_DWORD *)(v39 - 12))
                {
                  v89 = *(unsigned int *)(v39 - 4);
                  if ((_DWORD)v89)
                  {
                    v90 = 8 * v89;
                    v91 = (uint64_t *)*((_QWORD *)v38 + 3);
                    while ((unint64_t)(*v91 + 1) <= 1)
                    {
                      ++v91;
                      v90 -= 8;
                      if (!v90)
                        goto LABEL_37;
                    }
                  }
                  else
                  {
                    v91 = (uint64_t *)*((_QWORD *)v38 + 3);
                  }
                  v129 = (uint64_t *)(v39 + 8 * v89);
                  if (v91 != v129)
                  {
                    v130 = *v91;
LABEL_239:
                    if (*(_QWORD *)(v130 + 8))
                    {
                      v28 = (char *)v38 + 48;
                      goto LABEL_46;
                    }
                    while (++v91 != v129)
                    {
                      v130 = *v91;
                      if ((unint64_t)(*v91 + 1) > 1)
                      {
                        if (v91 != v129)
                          goto LABEL_239;
                        break;
                      }
                    }
                  }
                }
LABEL_37:
                v28 = (char *)v38 + 40;
                goto LABEL_46;
              }
              while (++v85 != v125)
              {
                v126 = *v85;
                if ((unint64_t)(*v85 + 1) > 1)
                {
                  if (v85 != v125)
                    goto LABEL_221;
                  break;
                }
              }
            }
          }
LABEL_33:
          v34 = (char *)v32 + 40;
          goto LABEL_34;
        }
        while (++v82 != v123)
        {
          v124 = *v82;
          if ((unint64_t)(*v82 + 1) > 1)
          {
            if (v82 != v123)
              goto LABEL_212;
            break;
          }
        }
      }
    }
LABEL_31:
    v31 = (char *)v29 + 40;
    goto LABEL_32;
  }
  v11 = *(_QWORD *)(WebCore::SVGNames::ellipseTag + 24);
  if (v6 == v11)
    v12 = a2;
  else
    v12 = 0;
  if (v6 == v11)
  {
    v40 = a2[28];
    v41 = *((_QWORD *)v40 + 3);
    if (v41 && *(_DWORD *)(v41 - 12))
    {
      v92 = *(unsigned int *)(v41 - 4);
      if ((_DWORD)v92)
      {
        v93 = 8 * v92;
        v94 = (uint64_t *)*((_QWORD *)v40 + 3);
        while ((unint64_t)(*v94 + 1) <= 1)
        {
          ++v94;
          v93 -= 8;
          if (!v93)
            goto LABEL_39;
        }
      }
      else
      {
        v94 = (uint64_t *)*((_QWORD *)v40 + 3);
      }
      v131 = (uint64_t *)(v41 + 8 * v92);
      if (v94 != v131)
      {
        v132 = *v94;
LABEL_248:
        if (*(_QWORD *)(v132 + 8))
        {
          v42 = (char *)v40 + 48;
LABEL_40:
          WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v42 + 28), (const WebCore::SVGLengthContext *)v147);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v43 = v12[29];
          v44 = *((_QWORD *)v43 + 3);
          if (v44 && *(_DWORD *)(v44 - 12))
          {
            v95 = *(unsigned int *)(v44 - 4);
            if ((_DWORD)v95)
            {
              v96 = 8 * v95;
              v97 = (uint64_t *)*((_QWORD *)v43 + 3);
              while ((unint64_t)(*v97 + 1) <= 1)
              {
                ++v97;
                v96 -= 8;
                if (!v96)
                  goto LABEL_41;
              }
            }
            else
            {
              v97 = (uint64_t *)*((_QWORD *)v43 + 3);
            }
            v133 = (uint64_t *)(v44 + 8 * v95);
            if (v97 != v133)
            {
              v134 = *v97;
LABEL_257:
              if (*(_QWORD *)(v134 + 8))
              {
                v45 = (char *)v43 + 48;
LABEL_42:
                WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v45 + 28), (const WebCore::SVGLengthContext *)v147);
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                v46 = v12[30];
                v47 = *((_QWORD *)v46 + 3);
                if (v47 && *(_DWORD *)(v47 - 12))
                {
                  v98 = *(unsigned int *)(v47 - 4);
                  if ((_DWORD)v98)
                  {
                    v99 = 8 * v98;
                    v100 = (uint64_t *)*((_QWORD *)v46 + 3);
                    while ((unint64_t)(*v100 + 1) <= 1)
                    {
                      ++v100;
                      v99 -= 8;
                      if (!v99)
                        goto LABEL_43;
                    }
                  }
                  else
                  {
                    v100 = (uint64_t *)*((_QWORD *)v46 + 3);
                  }
                  v135 = (uint64_t *)(v47 + 8 * v98);
                  if (v100 != v135)
                  {
                    v136 = *v100;
LABEL_266:
                    if (*(_QWORD *)(v136 + 8))
                    {
                      v48 = (char *)v46 + 48;
                      goto LABEL_44;
                    }
                    while (++v100 != v135)
                    {
                      v136 = *v100;
                      if ((unint64_t)(*v100 + 1) > 1)
                      {
                        if (v100 != v135)
                          goto LABEL_266;
                        break;
                      }
                    }
                  }
                }
LABEL_43:
                v48 = (char *)v46 + 40;
LABEL_44:
                WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v48 + 28), (const WebCore::SVGLengthContext *)v147);
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                WTF::TextStream::operator<<();
                v49 = v12[31];
                v50 = *((_QWORD *)v49 + 3);
                if (v50 && *(_DWORD *)(v50 - 12))
                {
                  v101 = *(unsigned int *)(v50 - 4);
                  if ((_DWORD)v101)
                  {
                    v102 = 8 * v101;
                    v103 = (uint64_t *)*((_QWORD *)v49 + 3);
                    while ((unint64_t)(*v103 + 1) <= 1)
                    {
                      ++v103;
                      v102 -= 8;
                      if (!v102)
                        goto LABEL_45;
                    }
                  }
                  else
                  {
                    v103 = (uint64_t *)*((_QWORD *)v49 + 3);
                  }
                  v137 = (uint64_t *)(v50 + 8 * v101);
                  if (v103 != v137)
                  {
                    v138 = *v103;
LABEL_275:
                    if (*(_QWORD *)(v138 + 8))
                    {
                      v28 = (char *)v49 + 48;
                      goto LABEL_46;
                    }
                    while (++v103 != v137)
                    {
                      v138 = *v103;
                      if ((unint64_t)(*v103 + 1) > 1)
                      {
                        if (v103 != v137)
                          goto LABEL_275;
                        break;
                      }
                    }
                  }
                }
LABEL_45:
                v28 = (char *)v49 + 40;
                goto LABEL_46;
              }
              while (++v97 != v133)
              {
                v134 = *v97;
                if ((unint64_t)(*v97 + 1) > 1)
                {
                  if (v97 != v133)
                    goto LABEL_257;
                  break;
                }
              }
            }
          }
LABEL_41:
          v45 = (char *)v43 + 40;
          goto LABEL_42;
        }
        while (++v94 != v131)
        {
          v132 = *v94;
          if ((unint64_t)(*v94 + 1) > 1)
          {
            if (v94 != v131)
              goto LABEL_248;
            break;
          }
        }
      }
    }
LABEL_39:
    v42 = (char *)v40 + 40;
    goto LABEL_40;
  }
  v13 = *(_QWORD *)(WebCore::SVGNames::circleTag + 24);
  if (v6 == v13)
    v14 = a2;
  else
    v14 = 0;
  if (v6 == v13)
  {
    v54 = a2[28];
    v55 = *((_QWORD *)v54 + 3);
    if (v55 && *(_DWORD *)(v55 - 12))
    {
      v104 = *(unsigned int *)(v55 - 4);
      if ((_DWORD)v104)
      {
        v105 = 8 * v104;
        v106 = (uint64_t *)*((_QWORD *)v54 + 3);
        while ((unint64_t)(*v106 + 1) <= 1)
        {
          ++v106;
          v105 -= 8;
          if (!v105)
            goto LABEL_52;
        }
      }
      else
      {
        v106 = (uint64_t *)*((_QWORD *)v54 + 3);
      }
      v139 = (uint64_t *)(v55 + 8 * v104);
      if (v106 != v139)
      {
        v140 = *v106;
LABEL_284:
        if (*(_QWORD *)(v140 + 8))
        {
          v56 = (char *)v54 + 48;
LABEL_53:
          WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v56 + 28), (const WebCore::SVGLengthContext *)v147);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v57 = v14[29];
          v58 = *((_QWORD *)v57 + 3);
          if (v58 && *(_DWORD *)(v58 - 12))
          {
            v107 = *(unsigned int *)(v58 - 4);
            if ((_DWORD)v107)
            {
              v108 = 8 * v107;
              v109 = (uint64_t *)*((_QWORD *)v57 + 3);
              while ((unint64_t)(*v109 + 1) <= 1)
              {
                ++v109;
                v108 -= 8;
                if (!v108)
                  goto LABEL_54;
              }
            }
            else
            {
              v109 = (uint64_t *)*((_QWORD *)v57 + 3);
            }
            v141 = (uint64_t *)(v58 + 8 * v107);
            if (v109 != v141)
            {
              v142 = *v109;
LABEL_293:
              if (*(_QWORD *)(v142 + 8))
              {
                v59 = (char *)v57 + 48;
                goto LABEL_55;
              }
              while (++v109 != v141)
              {
                v142 = *v109;
                if ((unint64_t)(*v109 + 1) > 1)
                {
                  if (v109 != v141)
                    goto LABEL_293;
                  break;
                }
              }
            }
          }
LABEL_54:
          v59 = (char *)v57 + 40;
LABEL_55:
          WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v59 + 28), (const WebCore::SVGLengthContext *)v147);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v60 = v14[30];
          v61 = *((_QWORD *)v60 + 3);
          if (v61 && *(_DWORD *)(v61 - 12))
          {
            v110 = *(unsigned int *)(v61 - 4);
            if ((_DWORD)v110)
            {
              v111 = 8 * v110;
              v112 = (uint64_t *)*((_QWORD *)v60 + 3);
              while ((unint64_t)(*v112 + 1) <= 1)
              {
                ++v112;
                v111 -= 8;
                if (!v111)
                  goto LABEL_56;
              }
            }
            else
            {
              v112 = (uint64_t *)*((_QWORD *)v60 + 3);
            }
            v143 = (uint64_t *)(v61 + 8 * v110);
            if (v112 != v143)
            {
              v144 = *v112;
LABEL_302:
              if (*(_QWORD *)(v144 + 8))
              {
                v28 = (char *)v60 + 48;
                goto LABEL_46;
              }
              while (++v112 != v143)
              {
                v144 = *v112;
                if ((unint64_t)(*v112 + 1) > 1)
                {
                  if (v112 != v143)
                    goto LABEL_302;
                  break;
                }
              }
            }
          }
LABEL_56:
          v28 = (char *)v60 + 40;
          goto LABEL_46;
        }
        while (++v106 != v139)
        {
          v140 = *v106;
          if ((unint64_t)(*v106 + 1) > 1)
          {
            if (v106 != v139)
              goto LABEL_284;
            break;
          }
        }
      }
    }
LABEL_52:
    v56 = (char *)v54 + 40;
    goto LABEL_53;
  }
  if (v6 != *(_QWORD *)(WebCore::SVGNames::polygonTag + 24) && v6 != *(_QWORD *)(WebCore::SVGNames::polylineTag + 24))
  {
    if (v6 != *(_QWORD *)(WebCore::SVGNames::pathTag + 24))
      goto LABEL_47;
    v145 = 0;
    v74 = *((_QWORD *)WebCore::SVGPathElement::pathByteStream((WebCore::SVGPathElement *)a2) + 1);
    v75 = *(unsigned int *)(v74 + 20);
    if ((_DWORD)v75)
    {
      v148 = off_1E346F660;
      v149 = 0;
      v150 = *(_QWORD *)(v74 + 8);
      v151 = v150 + v75;
      WebCore::SVGPathParser::parseToString((uint64_t)&v148, &v145, 0, 1);
      if (v149)
      {
        *((_QWORD *)v149 + 1) = 0;
        v77 = v149;
        v149 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 1)
            WTF::fastFree(v77, v76);
          else
            --*(_DWORD *)v77;
        }
      }
      v78 = v145;
      if (v145)
      {
        v79 = 0;
        *(_DWORD *)v145 += 2;
        goto LABEL_157;
      }
    }
    else
    {
      v78 = 0;
    }
    v79 = 1;
LABEL_157:
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    result = v78;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v78, v5);
        if ((v79 & 1) != 0)
          goto LABEL_47;
LABEL_161:
        if (*(_DWORD *)v78 != 2)
        {
          *(_DWORD *)v78 -= 2;
          goto LABEL_47;
        }
        result = v78;
        goto LABEL_166;
      }
      *(_DWORD *)v78 -= 2;
    }
    if ((v79 & 1) != 0)
      goto LABEL_47;
    goto LABEL_161;
  }
  v15 = (WebCore::SVGPointList *)WebCore::SVGPolyElement::points(a2[28]);
  WebCore::SVGPointList::valueAsString(v15, &v146, v16);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  result = v146;
  v146 = 0;
  if (result)
  {
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_47;
    }
LABEL_166:
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  }
LABEL_47:
  v51 = v147[0];
  v147[0] = 0;
  if (v51)
  {
    do
    {
      v52 = __ldaxr((unsigned int *)v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, (unsigned int *)v51));
    if (!v53)
    {
      atomic_store(1u, (unsigned int *)v51);
      v113 = *((unsigned int *)v51 + 7);
      if ((_DWORD)v113)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v51 + 2), (WTF::StringImpl *)(*((_QWORD *)v51 + 2) + 32 * v113));
      v114 = (WTF *)*((_QWORD *)v51 + 2);
      if (v114)
      {
        *((_QWORD *)v51 + 2) = 0;
        *((_DWORD *)v51 + 6) = 0;
        WTF::fastFree(v114, v5);
      }
      return (WTF::StringImpl *)WTF::fastFree(v51, v5);
    }
  }
  return result;
}

uint64_t WebCore::SVGPolyElement::points(WebCore::SVGPolyElement *this)
{
  uint64_t v1;
  uint64_t *v2;
  char *v3;
  WebCore::SVGPolyElement *v5;
  uint64_t *v6[5];
  uint64_t *v7[5];

  v2 = (uint64_t *)((char *)this + 24);
  v1 = *((_QWORD *)this + 3);
  if (v1
    && *(_DWORD *)(v1 - 12)
    && (v5 = this,
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 3, v7), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v2, v6), this = v5, v7[1] != v6[1]))
  {
    v3 = (char *)v5 + 48;
  }
  else
  {
    v3 = (char *)this + 40;
  }
  return *(_QWORD *)v3;
}

void WebCore::writeSVGResourceContainer(WTF::TextStream *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 v22;
  uint64_t v27;
  void *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::String *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  WTF::String *v95;
  __n128 v96;
  uint64_t v97;
  float started;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  WTF *v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  WebCore::SVGRadialGradientElement *v112;
  uint64_t v113;
  WTF::String *v114;
  __n128 v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  WTF *v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  float v129;
  float v130;
  float v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unsigned int v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  float64x2_t v153;
  float64x2_t v154;
  __int128 v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  double v158;
  WTF::StringImpl *v159[2];
  float64x2_t v160;
  __int128 v161;
  WTF *v162;
  float64x2_t v163;
  float64x2_t v164;
  __int128 v165;
  WTF *v166;
  __int16 v167;
  WTF *v168;
  uint64_t v169;
  _DWORD v170[87];
  char v171;
  char v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WebCore::writeStandardPrefix(a1, (WebCore::SVGBoundingBoxComputation *)a2, a3, 1);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965395ACLL);
  }
  v7 = *(_QWORD *)(v6 + 104);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v135 = *(_DWORD *)(v7 + 4);
    if ((v135 & 1) != 0)
    {
      v136 = *(_QWORD **)(v7 + 40);
      LODWORD(v137) = *(_DWORD *)(v7 + 52);
    }
    else
    {
      v136 = (_QWORD *)(v7 + 32);
      LODWORD(v137) = v135 >> 5;
    }
    if ((_DWORD)v137)
    {
      v137 = v137;
      while (1)
      {
        v139 = *v136;
        if (*v136 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v139 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v139 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v136 += 2;
        if (!--v137)
          goto LABEL_190;
      }
    }
    else
    {
LABEL_190:
      v136 = 0;
    }
    v8 = (WTF::StringImpl **)(v136 + 1);
  }
  else
  {
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  v9 = *v8;
  if (v9)
    *(_DWORD *)v9 += 2;
  v157 = v9;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v11 = v157;
  v157 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = a2 + 216;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(a2 + 216) + 56))(a2 + 216))
  {
    v43 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if ((*(_WORD *)(v43 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965395CCLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v43 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1965395ECLL);
    }
    v44 = *(_QWORD **)(v43 + 216);
    v45 = v44[3];
    if (v45 && *(_DWORD *)(v45 - 12))
    {
      v77 = *(unsigned int *)(v45 - 4);
      if ((_DWORD)v77)
      {
        v78 = 8 * v77;
        v79 = (uint64_t *)v44[3];
        while ((unint64_t)(*v79 + 1) <= 1)
        {
          ++v79;
          v78 -= 8;
          if (!v78)
            goto LABEL_43;
        }
      }
      else
      {
        v79 = (uint64_t *)v44[3];
      }
      v141 = (uint64_t *)(v45 + 8 * v77);
      if (v79 != v141)
      {
        v142 = *v79;
LABEL_211:
        if (*(_QWORD *)(v142 + 8))
        {
          v46 = v44 + 6;
          goto LABEL_44;
        }
        while (++v79 != v141)
        {
          v142 = *v79;
          if ((unint64_t)(*v79 + 1) > 1)
          {
            if (v79 != v141)
              goto LABEL_211;
            break;
          }
        }
      }
    }
LABEL_43:
    v46 = v44 + 5;
LABEL_44:
    v47 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v46 + 32))(*v46);
    WebCore::writeNameValuePair<WebCore::SVGUnitTypes::SVGUnitType>((uint64_t)a1, (uint64_t)"maskUnits", 10, v47);
    v48 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if ((*(_WORD *)(v48 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19653960CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v48 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19653962CLL);
    }
    v49 = *(_QWORD **)(v48 + 224);
    v50 = v49[3];
    if (v50 && *(_DWORD *)(v50 - 12))
    {
      v80 = *(unsigned int *)(v50 - 4);
      if ((_DWORD)v80)
      {
        v81 = 8 * v80;
        v82 = (uint64_t *)v49[3];
        while ((unint64_t)(*v82 + 1) <= 1)
        {
          ++v82;
          v81 -= 8;
          if (!v81)
            goto LABEL_47;
        }
      }
      else
      {
        v82 = (uint64_t *)v49[3];
      }
      v143 = (uint64_t *)(v50 + 8 * v80);
      if (v82 != v143)
      {
        v144 = *v82;
LABEL_220:
        if (*(_QWORD *)(v144 + 8))
        {
          v51 = v49 + 6;
          goto LABEL_48;
        }
        while (++v82 != v143)
        {
          v144 = *v82;
          if ((unint64_t)(*v82 + 1) > 1)
          {
            if (v82 != v143)
              goto LABEL_220;
            break;
          }
        }
      }
    }
LABEL_47:
    v51 = v49 + 5;
LABEL_48:
    v52 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v51 + 32))(*v51);
    v53 = "maskContentUnits";
    v54 = (uint64_t)a1;
    v55 = 17;
LABEL_55:
    WebCore::writeNameValuePair<WebCore::SVGUnitTypes::SVGUnitType>(v54, (uint64_t)v53, v55, v52);
LABEL_56:
    WTF::TextStream::operator<<();
    goto LABEL_57;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 56))(a2 + 216) == 6)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if ((*(_WORD *)(v13 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19653964CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19653966CLL);
    }
    v14 = *(_QWORD **)(v13 + 192);
    v15 = v14[3];
    if (v15 && *(_DWORD *)(v15 - 12))
    {
      v88 = *(unsigned int *)(v15 - 4);
      if ((_DWORD)v88)
      {
        v89 = 8 * v88;
        v90 = (uint64_t *)v14[3];
        while ((unint64_t)(*v90 + 1) <= 1)
        {
          ++v90;
          v89 -= 8;
          if (!v89)
            goto LABEL_15;
        }
      }
      else
      {
        v90 = (uint64_t *)v14[3];
      }
      v145 = (uint64_t *)(v15 + 8 * v88);
      if (v90 != v145)
      {
        v146 = *v90;
LABEL_229:
        if (*(_QWORD *)(v146 + 8))
        {
          v16 = v14 + 6;
          goto LABEL_16;
        }
        while (++v90 != v145)
        {
          v146 = *v90;
          if ((unint64_t)(*v90 + 1) > 1)
          {
            if (v90 != v145)
              goto LABEL_229;
            break;
          }
        }
      }
    }
LABEL_15:
    v16 = v14 + 5;
LABEL_16:
    v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v16 + 32))(*v16);
    WebCore::writeNameValuePair<WebCore::SVGUnitTypes::SVGUnitType>((uint64_t)a1, (uint64_t)"filterUnits", 12, v17);
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if ((*(_WORD *)(v18 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19653968CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1965396ACLL);
    }
    v19 = *(_QWORD **)(v18 + 200);
    v20 = v19[3];
    if (v20 && *(_DWORD *)(v20 - 12))
    {
      v91 = *(unsigned int *)(v20 - 4);
      if ((_DWORD)v91)
      {
        v92 = 8 * v91;
        v93 = (uint64_t *)v19[3];
        while ((unint64_t)(*v93 + 1) <= 1)
        {
          ++v93;
          v92 -= 8;
          if (!v92)
            goto LABEL_19;
        }
      }
      else
      {
        v93 = (uint64_t *)v19[3];
      }
      v147 = (uint64_t *)(v20 + 8 * v91);
      if (v93 != v147)
      {
        v148 = *v93;
LABEL_238:
        if (*(_QWORD *)(v148 + 8))
        {
          v21 = v19 + 6;
LABEL_20:
          v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v21 + 32))(*v21);
          WebCore::writeNameValuePair<WebCore::SVGUnitTypes::SVGUnitType>((uint64_t)a1, (uint64_t)"primitiveUnits", 15, v22);
          WTF::TextStream::operator<<();
          v153 = 0uLL;
          __asm { FMOV            V0.2S, #1.0 }
          v158 = _D0;
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
          if ((*(_WORD *)(v27 + 28) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1965396CCLL);
          }
          if (*(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x1965396ECLL);
          }
          *(_DWORD *)(v27 + 24) += 2;
          bzero(&v159[1], 0x2C8uLL);
          LODWORD(v156) = 0;
          v159[0] = (WTF::StringImpl *)off_1E340BA10;
          WebCore::GraphicsContextState::GraphicsContextState((uint64_t)&v159[1], &v156, 0);
          v169 = 1;
          v170[86] = 0;
          v171 &= 0xFCu;
          v168 = (WTF *)v170;
          v159[0] = (WTF::StringImpl *)off_1E33FFA58;
          v172 = 0;
          WebCore::SVGFilter::create((uint64_t *)v27, 1, &v158, &v153, &v153, (const WebCore::SVGFilter *)v159, 0, 0, &v156);
          v159[0] = (WTF::StringImpl *)off_1E340BA10;
          if (HIDWORD(v169))
            WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct((unsigned int *)v168, (unsigned int *)v168 + 86 * HIDWORD(v169));
          v29 = v168;
          if (v170 != (_DWORD *)v168 && v168)
          {
            v168 = 0;
            LODWORD(v169) = 0;
            WTF::fastFree(v29, v28);
          }
          WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)&v159[1], v28);
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, v30);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
          v31 = v156;
          if (!v156)
            goto LABEL_57;
          v32 = *((_DWORD *)a1 + 6);
          v33 = v32 + 1;
          *((_DWORD *)a1 + 6) = v32 + 1;
          v34 = *(unsigned int *)(v31 + 108);
          if ((_DWORD)v34)
          {
            v35 = *(_QWORD *)(v31 + 96);
            v36 = v35 + 32 * v34;
            do
            {
              v37 = *(unsigned int *)(v36 - 32);
              if (*(_DWORD *)(v31 + 124) <= v37)
              {
                __break(0xC471u);
                JUMPOUT(0x1965398D0);
              }
              v38 = *(_BYTE **)(*(_QWORD *)(v31 + 112) + 8 * v37);
              if (v38[48] == 19)
                v39 = v36 - 32;
              else
                v39 = v36;
              v40 = *(_DWORD *)(v36 - 28);
              *((_DWORD *)a1 + 6) = v33 + v40;
              (*(void (**)(_BYTE *, WTF::TextStream *, _QWORD))(*(_QWORD *)v38 + 72))(v38, a1, 0);
              v33 = *((_DWORD *)a1 + 6) - v40;
              *((_DWORD *)a1 + 6) = v33;
              v36 = v39 - 32;
            }
            while (v39 - 32 != v35);
            v32 = v33 - 1;
          }
          *((_DWORD *)a1 + 6) = v32;
          v156 = 0;
          v41 = *(WTF **)(v31 + 8);
          if (__ldaxr((unsigned __int8 *)v41))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v41))
          {
            goto LABEL_103;
          }
          MEMORY[0x19AEA534C](v41);
LABEL_103:
          v83 = *((_QWORD *)v41 + 1);
          v84 = v83 - 1;
          *((_QWORD *)v41 + 1) = v83 - 1;
          if (v83 == 1)
          {
            v140 = *((_QWORD *)v41 + 2);
            v85 = *((_QWORD *)v41 + 3);
            *((_QWORD *)v41 + 3) = 0;
            v86 = v140 != 0;
          }
          else
          {
            v85 = 0;
            v86 = 1;
          }
          v87 = __ldxr((unsigned __int8 *)v41);
          if (v87 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v41))
            {
              if (v84)
                goto LABEL_57;
              goto LABEL_111;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(v41);
          if (v84)
            goto LABEL_57;
LABEL_111:
          if (v85)
            (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
          if (!v86)
            goto LABEL_114;
          goto LABEL_57;
        }
        while (++v93 != v147)
        {
          v148 = *v93;
          if ((unint64_t)(*v93 + 1) > 1)
          {
            if (v93 != v147)
              goto LABEL_238;
            break;
          }
        }
      }
    }
LABEL_19:
    v21 = v19 + 5;
    goto LABEL_20;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 56))(a2 + 216) == 7)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if ((*(_WORD *)(v56 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1965394FCLL);
    }
    v57 = *(_QWORD **)(v56 + 216);
    v58 = v57[3];
    if (v58 && *(_DWORD *)(v58 - 12))
    {
      v109 = *(unsigned int *)(v58 - 4);
      if ((_DWORD)v109)
      {
        v110 = 8 * v109;
        v111 = (uint64_t *)v57[3];
        while ((unint64_t)(*v111 + 1) <= 1)
        {
          ++v111;
          v110 -= 8;
          if (!v110)
            goto LABEL_53;
        }
      }
      else
      {
        v111 = (uint64_t *)v57[3];
      }
      v149 = (uint64_t *)(v58 + 8 * v109);
      if (v111 != v149)
      {
        v150 = *v111;
LABEL_248:
        if (*(_QWORD *)(v150 + 8))
        {
          v59 = v57 + 6;
          goto LABEL_54;
        }
        while (++v111 != v149)
        {
          v150 = *v111;
          if ((unint64_t)(*v111 + 1) > 1)
          {
            if (v111 != v149)
              goto LABEL_248;
            break;
          }
        }
      }
    }
LABEL_53:
    v59 = v57 + 5;
LABEL_54:
    v52 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v59 + 32))(*v59);
    v53 = "clipPathUnits";
    v54 = (uint64_t)a1;
    v55 = 14;
    goto LABEL_55;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 56))(a2 + 216) == 1)
  {
    v64 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if ((*(_WORD *)(v64 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196539720);
    }
    if (*(_QWORD *)(*(_QWORD *)(v64 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196539740);
    }
    v65 = *(_QWORD **)(v64 + 232);
    v66 = v65[3];
    if (v66 && *(_DWORD *)(v66 - 12))
    {
      v132 = *(unsigned int *)(v66 - 4);
      if ((_DWORD)v132)
      {
        v133 = 8 * v132;
        v134 = (uint64_t *)v65[3];
        while ((unint64_t)(*v134 + 1) <= 1)
        {
          ++v134;
          v133 -= 8;
          if (!v133)
            goto LABEL_70;
        }
      }
      else
      {
        v134 = (uint64_t *)v65[3];
      }
      v151 = (uint64_t *)(v66 + 8 * v132);
      if (v134 != v151)
      {
        v152 = *v134;
LABEL_257:
        if (*(_QWORD *)(v152 + 8))
        {
          v67 = v65 + 6;
LABEL_71:
          v68 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v67 + 32))(*v67);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          if (v68 == 2 || v68 == 1)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
          }
          else
          {
            v69 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
              *(_DWORD *)v69 += 2;
            v159[0] = v69;
          }
          WTF::TextStream::operator<<();
          v128 = v159[0];
          v159[0] = 0;
          if (v128)
          {
            if (*(_DWORD *)v128 == 2)
              WTF::StringImpl::destroy(v128, v127);
            else
              *(_DWORD *)v128 -= 2;
          }
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v129 = WebCore::LegacyRenderSVGResourceMarker::referencePoint((WebCore::LegacyRenderSVGResourceMarker *)a2);
          v131 = v130;
          WTF::TextStream::operator<<();
          *(double *)v159 = v129;
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v153.f64[0] = v131;
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          if ((WebCore::LegacyRenderSVGResourceMarker::angle((WebCore::LegacyRenderSVGResourceMarker *)a2) & 0xFF00000000) != 0)
            WTF::TextStream::operator<<();
          else
            WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          goto LABEL_57;
        }
        while (++v134 != v151)
        {
          v152 = *v134;
          if ((unint64_t)(*v134 + 1) > 1)
          {
            if (v134 != v151)
              goto LABEL_257;
            break;
          }
        }
      }
    }
LABEL_70:
    v67 = v65 + 5;
    goto LABEL_71;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 56))(a2 + 216) == 2)
  {
    v153.f64[0] = 0.0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v159, 2, (uint64_t *)&v153);
    v153.f64[0] = 0.0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v159[1], 2, (uint64_t *)&v153);
    v153.f64[0] = 0.0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v160, 2, (uint64_t *)&v153);
    v153.f64[0] = 0.0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v160.f64[1], 2, (uint64_t *)&v153);
    LODWORD(v162) = 16908550;
    v163 = (float64x2_t)constinit_10;
    v161 = 0uLL;
    v164 = (float64x2_t)unk_1969FE138;
    v165 = xmmword_1969FE148;
    v166 = 0;
    v167 &= 0xFC00u;
    WebCore::LegacyRenderSVGResourcePattern::collectPatternAttributes((unsigned int *)a2, (__n128 *)v159, v70, v71, (__n128)xmmword_1969FE148);
    WebCore::writeNameValuePair<WebCore::SVGUnitTypes::SVGUnitType>((uint64_t)a1, (uint64_t)"patternUnits", 13, BYTE2(v162));
    WebCore::writeNameValuePair<WebCore::SVGUnitTypes::SVGUnitType>((uint64_t)a1, (uint64_t)"patternContentUnits", 20, BYTE3(v162));
    v153 = v163;
    v154 = v164;
    v155 = v165;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v163, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v164, (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| *(double *)&v155 != 0.0|| *((double *)&v155 + 1) != 0.0)
    {
      v72 = WTF::TextStream::operator<<();
      WebCore::operator<<(v72, &v153);
      WTF::TextStream::operator<<();
    }
    WTF::TextStream::operator<<();
    v41 = v166;
    v166 = 0;
    if (v41)
    {
      do
      {
        v73 = __ldaxr((unsigned int *)v41);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, (unsigned int *)v41));
      if (!v74)
      {
        atomic_store(1u, (unsigned int *)v41);
        v75 = *((unsigned int *)v41 + 7);
        if ((_DWORD)v75)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v41 + 2), (WTF::StringImpl *)(*((_QWORD *)v41 + 2) + 32 * v75));
        v76 = (WTF *)*((_QWORD *)v41 + 2);
        if (v76)
        {
          *((_QWORD *)v41 + 2) = 0;
          *((_DWORD *)v41 + 6) = 0;
          WTF::fastFree(v76, v30);
        }
        goto LABEL_114;
      }
    }
    goto LABEL_57;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 56))(a2 + 216) == 3)
  {
    WebCore::LinearGradientAttributes::LinearGradientAttributes((WebCore::LinearGradientAttributes *)v159);
    v97 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if ((*(_WORD *)(v97 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196539760);
    }
    if (*(_QWORD *)(*(_QWORD *)(v97 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::linearGradientTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196539780);
    }
    WebCore::SVGLinearGradientElement::collectGradientAttributes((WebCore::SVGLinearGradientElement *)v97, (WebCore::LinearGradientAttributes *)v159, v96, v94, v95);
    v153 = *(float64x2_t *)v159;
    v154 = v160;
    v155 = v161;
    WebCore::writeCommonGradientProperties((uint64_t)a1, v166 & 3, &v153, (v166 >> 2) & 3);
    WTF::TextStream::operator<<();
    started = WebCore::LegacyRenderSVGResourceLinearGradient::startPoint((WebCore::LegacyRenderSVGResourceLinearGradient *)a2, (const WebCore::LinearGradientAttributes *)v159);
    v100 = v99;
    WTF::TextStream::operator<<();
    v153.f64[0] = started;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v158 = v100;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v101 = WebCore::LegacyRenderSVGResourceLinearGradient::endPoint((WebCore::LegacyRenderSVGResourceLinearGradient *)a2, (const WebCore::LinearGradientAttributes *)v159);
    v103 = v102;
    WTF::TextStream::operator<<();
    v153.f64[0] = v101;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v158 = v103;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v41 = v162;
    if (HIDWORD(v163.f64[0]))
    {
      v104 = (WTF *)((char *)v162 + 16 * HIDWORD(v163.f64[0]));
      do
      {
        v105 = *((_QWORD *)v41 + 1);
        if ((v105 & 0x8000000000000) != 0)
        {
          v106 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFLL);
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
          {
            atomic_store(1u, v106);
            WTF::fastFree((WTF *)v106, v30);
          }
        }
        v41 = (WTF *)((char *)v41 + 16);
      }
      while (v41 != v104);
      v41 = v162;
    }
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 56))(a2 + 216) != 4)
      goto LABEL_56;
    WebCore::RadialGradientAttributes::RadialGradientAttributes((WebCore::RadialGradientAttributes *)v159);
    v112 = (WebCore::SVGRadialGradientElement *)WebCore::LegacyRenderSVGResourceRadialGradient::radialGradientElement((WebCore::LegacyRenderSVGResourceRadialGradient *)a2);
    WebCore::SVGRadialGradientElement::collectGradientAttributes(v112, (WebCore::RadialGradientAttributes *)v159, v115, v113, v114);
    v153 = *(float64x2_t *)v159;
    v154 = v160;
    v155 = v161;
    WebCore::writeCommonGradientProperties((uint64_t)a1, v166 & 3, &v153, (v166 >> 2) & 3);
    v116 = WebCore::LegacyRenderSVGResourceRadialGradient::focalPoint((WebCore::LegacyRenderSVGResourceRadialGradient *)a2, (const WebCore::RadialGradientAttributes *)v159);
    v118 = v117;
    v119 = WebCore::LegacyRenderSVGResourceRadialGradient::centerPoint((WebCore::LegacyRenderSVGResourceRadialGradient *)a2, (const WebCore::RadialGradientAttributes *)v159);
    v121 = v120;
    WebCore::LegacyRenderSVGResourceRadialGradient::radius((WebCore::LegacyRenderSVGResourceRadialGradient *)a2, (const WebCore::RadialGradientAttributes *)v159);
    WebCore::LegacyRenderSVGResourceRadialGradient::focalRadius((WebCore::LegacyRenderSVGResourceRadialGradient *)a2, (const WebCore::RadialGradientAttributes *)v159);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v153.f64[0] = v119;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v158 = v121;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v153.f64[0] = v116;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v158 = v118;
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v41 = v162;
    if (HIDWORD(v163.f64[0]))
    {
      v122 = (WTF *)((char *)v162 + 16 * HIDWORD(v163.f64[0]));
      do
      {
        v123 = *((_QWORD *)v41 + 1);
        if ((v123 & 0x8000000000000) != 0)
        {
          v124 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFLL);
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (!v126)
          {
            atomic_store(1u, v124);
            WTF::fastFree((WTF *)v124, v30);
          }
        }
        v41 = (WTF *)((char *)v41 + 16);
      }
      while (v41 != v122);
      v41 = v162;
    }
  }
  if ((WTF *)&v163.f64[1] != v41 && v41 != 0)
  {
    v162 = 0;
    LODWORD(v163.f64[0]) = 0;
LABEL_114:
    WTF::fastFree(v41, v30);
  }
LABEL_57:
  v60 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v60 + 1;
  v61 = *(unsigned int *)(a2 + 64);
  if (v61 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
  {
    v62 = *(_QWORD *)((v61 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
    if (v62)
    {
      do
      {
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                    + 680)
                        + 680) & 0x800000000000) == 0
          || (*(_BYTE *)(v62 + 21) & 0x80) == 0)
        {
          WebCore::write(a1, v62, v5);
        }
        v63 = *(unsigned int *)(v62 + 47);
        if (!(v63 | ((unint64_t)*(unsigned __int8 *)(v62 + 51) << 32)))
          break;
        v62 = *(_QWORD *)((v63 | ((unint64_t)*(unsigned __int8 *)(v62 + 51) << 32)) + 8);
      }
      while (v62);
      v60 = *((_DWORD *)a1 + 6) - 1;
    }
  }
  *((_DWORD *)a1 + 6) = v60;
}

void WebCore::writeStandardPrefix(WTF::TextStream *this, WebCore::SVGBoundingBoxComputation *a2, __int16 a3, int a4)
{
  int v6;
  double v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v6 = (int)this;
  if (a4)
    WTF::TextStream::writeIndent(this);
  (*(void (**)(WebCore::SVGBoundingBoxComputation *))(*(_QWORD *)a2 + 104))(a2);
  WTF::TextStream::operator<<();
  if ((a3 & 0x40) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if ((*((_BYTE *)a2 + 45) & 1) == 0)
  {
    if (*(_QWORD *)(*((_QWORD *)a2 + 3) + 8))
    {
      WTF::TextStream::operator<<();
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*((_QWORD *)a2 + 3) + 8) + 104))(&v10);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      v9 = v10;
      v10 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  WebCore::writeDebugInfo(v6, a2, v7, a3);
}

uint64_t WebCore::writeNameValuePair<WebCore::SVGUnitTypes::SVGUnitType>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a4 == 2 || a4 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v5 += 2;
    v8 = v5;
  }
  WTF::TextStream::operator<<();
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::TextStream::operator<<();
}

uint64_t WebCore::writeCommonGradientProperties(uint64_t a1, int a2, float64x2_t *a3, int a4)
{
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  result = WebCore::writeNameValuePair<WebCore::SVGUnitTypes::SVGUnitType>(a1, (uint64_t)"gradientUnits", 14, a4);
  if (a2 != 1)
  {
    WTF::TextStream::operator<<();
    if (a2 == 3 || a2 == 2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    else
    {
      v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v7 += 2;
      v12 = v7;
    }
    WTF::String::convertToASCIIUppercase((WTF::String *)&v12);
    WTF::TextStream::operator<<();
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v12;
    v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = WTF::TextStream::operator<<();
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*a3, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(a3[1], (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| a3[2].f64[0] != 0.0|| a3[2].f64[1] != 0.0)
  {
    v11 = WTF::TextStream::operator<<();
    WebCore::operator<<(v11, a3);
    return WTF::TextStream::operator<<();
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceRadialGradient::radialGradientElement(WebCore::LegacyRenderSVGResourceRadialGradient *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(result + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::radialGradientTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196539D5CLL);
  }
  return result;
}

WTF::TextStream *WebCore::writeSVGContainer(WTF::TextStream *result, uint64_t a2, unsigned __int16 a3)
{
  int v3;
  WebCore *v5;
  uint64_t v6;
  double v7;
  double v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned __int8 *)(a2 + 46);
  if (v3 != 77 && v3 != 97)
  {
    v5 = result;
    v6 = a3;
    WebCore::writeStandardPrefix(result, (WebCore::SVGBoundingBoxComputation *)a2, a3, 1);
    WebCore::writePositionAndStyle(v5, (_BYTE *)a2, v6);
    WTF::TextStream::operator<<();
    result = (WTF::TextStream *)WebCore::writeResources((uint64_t)v5, a2, v6, v7, v8, v9);
    v10 = *((_DWORD *)v5 + 6);
    *((_DWORD *)v5 + 6) = v10 + 1;
    v11 = *(unsigned int *)(a2 + 64);
    if (v11 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
    {
      v12 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
      if (v12)
      {
        do
        {
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                      + 680)
                          + 680) & 0x800000000000) == 0
            || (*(_BYTE *)(v12 + 21) & 0x80) == 0)
          {
            result = (WTF::TextStream *)WebCore::write(v5, v12, v6);
          }
          v13 = *(unsigned int *)(v12 + 47);
          if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)))
            break;
          v12 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8);
        }
        while (v12);
        v10 = *((_DWORD *)v5 + 6) - 1;
      }
    }
    *((_DWORD *)v5 + 6) = v10;
  }
  return result;
}

WebCore *WebCore::writePositionAndStyle(WebCore *a1, _BYTE *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((a3 & 0x10) != 0)
  {
    if ((a2[45] & 4) != 0)
    {
      v5 = WTF::TextStream::operator<<();
      WebCore::operator<<(v5);
    }
    WTF::TextStream::operator<<();
  }
  v6 = WTF::TextStream::operator<<();
  (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)a2 + 440))(a2, 0, 0x1E00000000);
  WebCore::operator<<(v6);
  WebCore::writeSVGPaintingFeatures(a1, (uint64_t)a2);
  return a1;
}

uint64_t WebCore::writeResources(uint64_t result, uint64_t a2, __int16 a3, double a4, double a5, float a6)
{
  uint64_t v7;
  WTF::TextStream *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t (*v12)();
  uint64_t v13;
  WebCore::TreeScope *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  WebCore::SVGBoundingBoxComputation *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  WebCore::TreeScope *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WebCore::SVGBoundingBoxComputation *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  WebCore::SVGBoundingBoxComputation *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  int v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  int v94;
  int v95;

  v7 = a2;
  v8 = (WTF::TextStream *)result;
  v9 = a2;
  if ((*(_BYTE *)(a2 + 45) & 2) != 0)
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 48);
  if (*(_QWORD *)(v10 + 8))
  {
    v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 48);
    while (!*(_QWORD *)(v84 + 16))
    {
      v84 = *(_QWORD *)(v84 + 8);
      if (!v84)
        goto LABEL_49;
    }
    v11 = *(_DWORD **)(v10 + 16);
    if (!v11)
    {
LABEL_9:
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
      *(_DWORD *)(v13 + 24) += 2;
      if (v11)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v11 + 88))(&v93, v11, v13);
      }
      else
      {
        v93 = 0;
        WTF::URL::invalidate((WTF::URL *)&v93);
      }
      result = (uint64_t)v93;
      if (v93)
      {
        if (*((_DWORD *)v93 + 1))
        {
          WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)&v93, (const WTF::String *)v13, &v92, a4, a5, a6);
          v14 = *(WebCore::TreeScope **)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40);
          v15 = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
            v16 = (*(_WORD *)(*(_QWORD *)v14 + 28) & 0x80) == 0;
          else
            v16 = 1;
          if (!v16 && !*(_BYTE *)(v15 + 193))
          {
            v82 = *(_QWORD *)(v15 + 200);
            if (v82)
            {
              v83 = *(_QWORD *)(v82 + 8);
              if (v83)
              {
                if (*(_WORD *)(*(_QWORD *)(v83 + 96) + 10) == 242)
                  v14 = (WebCore::TreeScope *)*((_QWORD *)v14 + 2);
              }
            }
          }
          if (v92)
          {
            if (*((_DWORD *)v92 + 1))
            {
              v17 = WebCore::TreeScope::svgResourcesMap(v14);
              v18 = *(_QWORD *)(v17 + 48);
              if (v18)
              {
                v19 = *(_DWORD *)(v17 + 56);
                v20 = v19 - 1;
                v21 = *(_DWORD *)(v17 + 64);
                v22 = *((_DWORD *)v92 + 4);
                v23 = (v21 ^ (v22 >> 8)) & (v19 - 1);
                v24 = *(WTF::StringImpl **)(v18 + 16 * v23);
                if (v24)
                {
                  v25 = v22 >> 8;
                  v26 = -1;
                  do
                  {
                    v27 = *((_DWORD *)v24 + 4);
                    a2 = (v23 + v19);
                    if (++v26 > (((_DWORD)a2 - ((v21 ^ (v27 >> 8)) & v20)) & v20))
                      break;
                    if (v24 == v92 && v27 >> 8 == v25)
                    {
                      v28 = *(WebCore::SVGBoundingBoxComputation **)(v18 + 16 * v23 + 8);
                      if (v28
                        && !(*(unsigned int (**)(_QWORD *))(*((_QWORD *)v28 + 27) + 56))((_QWORD *)v28 + 27))
                      {
                        WTF::TextStream::writeIndent(v8);
                        WTF::TextStream::operator<<();
                        v29 = v92;
                        if (v92)
                          *(_DWORD *)v92 += 2;
                        v91 = v29;
                        WTF::TextStream::operator<<();
                        WTF::TextStream::operator<<();
                        WTF::TextStream::operator<<();
                        WTF::TextStream::operator<<();
                        WTF::TextStream::operator<<();
                        v31 = v91;
                        v91 = 0;
                        if (v31)
                        {
                          if (*(_DWORD *)v31 == 2)
                            WTF::StringImpl::destroy(v31, v30);
                          else
                            *(_DWORD *)v31 -= 2;
                        }
                        WTF::TextStream::operator<<();
                        WebCore::writeStandardPrefix(v8, v28, a3, 0);
                        v32 = WTF::TextStream::operator<<();
                        LODWORD(v88) = WebCore::LegacyRenderSVGResourceMasker::resourceBoundingBox((uint64_t)v28, v7, 1);
                        HIDWORD(v88) = v33;
                        v89 = v34;
                        v90 = v35;
                        WebCore::operator<<(v32);
                        WTF::TextStream::operator<<();
                      }
                      break;
                    }
                    v23 = ((_DWORD)v23 + 1) & v20;
                    v24 = *(WTF::StringImpl **)(v18 + 16 * v23);
                  }
                  while (v24);
                }
              }
            }
            v36 = v92;
            v92 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v36 -= 2;
            }
          }
          result = (uint64_t)v93;
          v93 = 0;
          if (!result)
            goto LABEL_44;
        }
        else
        {
          v93 = 0;
        }
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
LABEL_44:
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, (void *)a2);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      if (v11)
      {
        if (v11[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      goto LABEL_49;
    }
LABEL_8:
    ++v11[2];
    goto LABEL_9;
  }
  v11 = *(_DWORD **)(v10 + 16);
  v12 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (!v11)
    v12 = 0;
  if (v12)
  {
    if (!v11)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_49:
  v37 = *(_QWORD *)(v9 + 88);
  v38 = *(_QWORD *)(*(_QWORD *)(v37 + 40) + 264);
  if (v38 && !*(_DWORD *)(v38 + 12))
  {
    v60 = *(WTF::StringImpl **)(v38 + 32);
    if (v60)
      *(_DWORD *)v60 += 2;
    result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40);
    v61 = *(_QWORD *)result;
    if (*(_QWORD *)result)
      v62 = (*(_WORD *)(*(_QWORD *)result + 28) & 0x80) == 0;
    else
      v62 = 1;
    if (!v62 && !*(_BYTE *)(v61 + 193))
    {
      v85 = *(_QWORD *)(v61 + 200);
      if (v85)
      {
        v86 = *(_QWORD *)(v85 + 8);
        if (v86)
        {
          if (*(_WORD *)(*(_QWORD *)(v86 + 96) + 10) == 242)
            result = *(_QWORD *)(result + 16);
        }
      }
    }
    if (v60)
    {
      if (*((_DWORD *)v60 + 1))
      {
        result = WebCore::TreeScope::svgResourcesMap((WebCore::TreeScope *)result);
        v63 = *(_QWORD *)(result + 48);
        if (v63)
        {
          v64 = *(_DWORD *)(result + 56);
          v65 = v64 - 1;
          v66 = *(_DWORD *)(result + 64);
          v67 = *((_DWORD *)v60 + 4);
          v68 = (v66 ^ (v67 >> 8)) & (v64 - 1);
          v69 = *(WTF::StringImpl **)(v63 + 16 * v68);
          if (v69)
          {
            v70 = v67 >> 8;
            v71 = -1;
            do
            {
              v72 = *((_DWORD *)v69 + 4);
              result = (v68 + v64);
              if (++v71 > (((_DWORD)result - ((v66 ^ (v72 >> 8)) & v65)) & v65))
                break;
              if (v69 == v60 && v72 >> 8 == v70)
              {
                v73 = *(WebCore::SVGBoundingBoxComputation **)(v63 + 16 * v68 + 8);
                if (v73)
                {
                  result = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v73 + 27) + 56))((_QWORD *)v73 + 27);
                  if ((_DWORD)result == 7)
                  {
                    WTF::TextStream::writeIndent(v8);
                    WTF::TextStream::operator<<();
                    *(_DWORD *)v60 += 2;
                    WTF::TextStream::operator<<();
                    WTF::TextStream::operator<<();
                    WTF::TextStream::operator<<();
                    WTF::TextStream::operator<<();
                    WTF::TextStream::operator<<();
                    if (*(_DWORD *)v60 == 2)
                      WTF::StringImpl::destroy(v60, v74);
                    else
                      *(_DWORD *)v60 -= 2;
                    WTF::TextStream::operator<<();
                    WebCore::writeStandardPrefix(v8, v73, a3, 0);
                    v75 = WTF::TextStream::operator<<();
                    WebCore::LegacyRenderSVGResourceClipper::resourceBoundingBox((uint64_t)v73, v7, 1);
                    v93 = (WTF::StringImpl *)__PAIR64__(v77, v76);
                    v94 = v78;
                    v95 = v79;
                    WebCore::operator<<(v75);
                    result = WTF::TextStream::operator<<();
                  }
                }
                break;
              }
              v68 = ((_DWORD)v68 + 1) & v65;
              v69 = *(WTF::StringImpl **)(v63 + 16 * v68);
            }
            while (v69);
          }
        }
      }
      if (*(_DWORD *)v60 == 2)
        result = WTF::StringImpl::destroy(v60, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v60 -= 2;
    }
    v37 = *(_QWORD *)(v9 + 88);
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v37 + 32) + 32);
  if (*(_DWORD *)(v39 + 20) == 1)
  {
    v40 = **(_QWORD **)(v39 + 8);
    if (v40 && *(_BYTE *)(v40 + 12) == 0)
    {
      v42 = (unsigned int *)(v40 + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
      v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8);
      *(_DWORD *)(v44 + 24) += 2;
      WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)(v40 + 16), (const WTF::String *)v44, &v88, a4, a5, a6);
      if (*(_DWORD *)(v44 + 24) == 2)
      {
        if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v44, v45);
      }
      else
      {
        *(_DWORD *)(v44 + 24) -= 2;
      }
      v46 = *(WebCore::TreeScope **)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40);
      v47 = *(_QWORD *)v46;
      if (*(_QWORD *)v46)
        v48 = (*(_WORD *)(*(_QWORD *)v46 + 28) & 0x80) == 0;
      else
        v48 = 1;
      if (!v48 && !*(_BYTE *)(v47 + 193))
      {
        v80 = *(_QWORD *)(v47 + 200);
        if (v80)
        {
          v81 = *(_QWORD *)(v80 + 8);
          if (v81)
          {
            if (*(_WORD *)(*(_QWORD *)(v81 + 96) + 10) == 242)
              v46 = (WebCore::TreeScope *)*((_QWORD *)v46 + 2);
          }
        }
      }
      v49 = WebCore::getRenderSVGResourceById<WebCore::LegacyRenderSVGResourceFilter>(v46, (const WTF::AtomString *)&v88);
      if (v49)
      {
        v51 = (WebCore::SVGBoundingBoxComputation *)v49;
        WTF::TextStream::writeIndent(v8);
        WTF::TextStream::operator<<();
        v52 = v88;
        if (v88)
          *(_DWORD *)v88 += 2;
        v87 = v52;
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v53);
          else
            *(_DWORD *)v87 -= 2;
        }
        WTF::TextStream::operator<<();
        WebCore::writeStandardPrefix(v8, v51, a3, 0);
        v54 = WTF::TextStream::operator<<();
        LODWORD(v93) = WebCore::LegacyRenderSVGResourceFilter::resourceBoundingBox(v51, v7);
        HIDWORD(v93) = v55;
        v94 = v56;
        v95 = v57;
        WebCore::operator<<(v54);
        WTF::TextStream::operator<<();
      }
      result = (uint64_t)v88;
      v88 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v50);
        else
          *(_DWORD *)result -= 2;
      }
      do
      {
        v58 = __ldaxr(v42);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v42));
      if (!v59)
      {
        atomic_store(1u, (unsigned int *)(v40 + 8));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      }
    }
  }
  return result;
}

uint64_t WebCore::write(WTF::TextStream *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a3;
  WebCore::writeStandardPrefix(a1, (WebCore::SVGBoundingBoxComputation *)a2, a3, 1);
  WebCore::writePositionAndStyle(a1, (_BYTE *)a2, v5);
  result = WTF::TextStream::operator<<();
  v7 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v7 + 1;
  v8 = *(unsigned int *)(a2 + 64);
  if (v8 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
  {
    v9 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
    if (v9)
    {
      do
      {
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                    + 680)
                        + 680) & 0x800000000000) == 0
          || (*(_BYTE *)(v9 + 21) & 0x80) == 0)
        {
          result = WebCore::write(a1, v9, v5);
        }
        v10 = *(unsigned int *)(v9 + 47);
        if (!(v10 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)))
          break;
        v9 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
      }
      while (v9);
      v7 = *((_DWORD *)a1 + 6) - 1;
    }
  }
  *((_DWORD *)a1 + 6) = v7;
  return result;
}

uint64_t WebCore::writeSVGText(WTF::TextStream *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v5;
  double v6;
  double v7;
  float v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  WTF::StringImpl *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  BOOL v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  WTF::StringImpl *v56[2];

  v5 = a3;
  WebCore::writeStandardPrefix(a1, (WebCore::SVGBoundingBoxComputation *)a2, a3, 1);
  if (*(_DWORD *)(a2 + 240) == 2)
  {
    v14 = *(_QWORD *)(a2 + 232);
    if (v14)
    {
      v15 = *(float **)(v14 + 8);
      if (v15)
      {
        if (((*(uint64_t (**)(float *))(*(_QWORD *)v15 + 88))(v15) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19653AD70);
        }
        if (((*(uint64_t (**)(float *))(*(_QWORD *)v15 + 112))(v15) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19653AD90);
        }
        v16 = WTF::TextStream::operator<<();
        v17 = (float)*(int *)(a2 + 152) * 0.015625;
        v18 = (float)*(int *)(a2 + 156) * 0.015625;
        v19 = v15[10];
        v21 = WebCore::LegacyInlineBox::logicalHeight((WebCore::LegacyInlineBox *)v15, v20);
        v22 = floorf(v17);
        v23 = -2147500000.0;
        if (v22 > -2147500000.0)
          v23 = (float)(int)v22;
        if (v22 < 2147500000.0)
          v24 = v23;
        else
          v24 = 2147500000.0;
        v25 = floorf(v18);
        v26 = -2147500000.0;
        if (v25 > -2147500000.0)
          v26 = (float)(int)v25;
        if (v25 < 2147500000.0)
          v27 = v26;
        else
          v27 = 2147500000.0;
        v28 = v21 + v18;
        v29 = ceilf(v19 + v17);
        v30 = 2147500000.0;
        if (v29 < 2147500000.0)
        {
          v30 = -2147500000.0;
          if (v29 > -2147500000.0)
            v30 = (float)(int)v29;
        }
        v31 = ceilf(v28);
        v32 = 2147500000.0;
        if (v31 < 2147500000.0)
        {
          v32 = -2147500000.0;
          if (v31 > -2147500000.0)
            v32 = (float)(int)v31;
        }
        if (v24 >= 2147500000.0)
          v33 = 0x7FFFFFFFLL;
        else
          v33 = v24 <= -2147500000.0 ? 0x80000000 : (int)v24;
        if (v27 >= 2147500000.0)
          v34 = 0x7FFFFFFF00000000;
        else
          v34 = v27 <= -2147500000.0 ? 0x8000000000000000 : (unint64_t)(int)v27 << 32;
        v35 = v30 - v24;
        v36 = v32 - v27;
        if (v35 >= 2147500000.0)
          v37 = 0x7FFFFFFFLL;
        else
          v37 = v35 <= -2147500000.0 ? 0x80000000 : (int)v35;
        if (v36 >= 2147500000.0)
          v38 = 0x7FFFFFFF00000000;
        else
          v38 = v36 <= -2147500000.0 ? 0x8000000000000000 : (unint64_t)(int)v36 << 32;
        v56[0] = (WTF::StringImpl *)(v34 | v33);
        v56[1] = (WTF::StringImpl *)(v38 | v37);
        WebCore::operator<<(v16);
        WTF::TextStream::operator<<();
        v39 = *(_QWORD *)(a2 + 32);
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 8);
          if (v40)
          {
            WebCore::RenderStyle::visitedDependentColor(v40 + 80, 5, 0, (uint64_t *)v56);
            WebCore::RenderStyle::visitedDependentColor(a2 + 80, 5, 0, (uint64_t *)&v55);
            if (((unint64_t)v56[0] & 0x8000000000000) != 0)
            {
              if ((v55 & 0x8000000000000) == 0)
              {
                v43 = 0;
LABEL_53:
                if (((unint64_t)v56[0] & 0x8000000000000) != 0)
                {
                  v49 = (unsigned int *)((unint64_t)v56[0] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v50 = __ldaxr(v49);
                    v51 = v50 - 1;
                  }
                  while (__stlxr(v51, v49));
                  if (!v51)
                  {
                    atomic_store(1u, v49);
                    WTF::fastFree((WTF *)v49, v41);
                  }
                }
                if (!v43)
                {
                  WebCore::RenderStyle::visitedDependentColor(a2 + 80, 5, 0, (uint64_t *)&v55);
                  WebCore::serializationForRenderTreeAsText((WebCore *)&v55, (uint64_t *)v56);
                  WTF::TextStream::operator<<();
                  WTF::TextStream::operator<<();
                  WTF::TextStream::operator<<();
                  WTF::TextStream::operator<<();
                  WTF::TextStream::operator<<();
                  v45 = v56[0];
                  v56[0] = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2)
                      WTF::StringImpl::destroy(v45, v44);
                    else
                      *(_DWORD *)v45 -= 2;
                  }
                  if ((v55 & 0x8000000000000) != 0)
                  {
                    v46 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v47 = __ldaxr(v46);
                      v48 = v47 - 1;
                    }
                    while (__stlxr(v48, v46));
                    if (!v48)
                    {
                      atomic_store(1u, v46);
                      WTF::fastFree((WTF *)v46, v44);
                    }
                  }
                }
                goto LABEL_2;
              }
              v52 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
              if (*(float *)(((unint64_t)v56[0] & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v55 & 0xFFFFFFFFFFFFLL)
                                                                                             + 4))
              {
                if (*(float *)(((unint64_t)v56[0] & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v55 & 0xFFFFFFFFFFFFLL)
                                                                                               + 8))
                {
                  if (*(float *)(((unint64_t)v56[0] & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v55 & 0xFFFFFFFFFFFFLL) + 0xC))
                    v43 = *(float *)(((unint64_t)v56[0] & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v55 & 0xFFFFFFFFFFFFLL) + 0x10)
                       && (unint64_t)v56[0] >> 56 == HIBYTE(v55)
                       && BYTE6(v56[0]) == BYTE6(v55);
                  else
                    v43 = 0;
                }
                else
                {
                  v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
            }
            else
            {
              v43 = (v55 & 0x8000000000000) == 0 && v56[0] == (WTF::StringImpl *)v55;
              if ((v55 & 0x8000000000000) == 0)
                goto LABEL_53;
              v43 = 0;
              v52 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
            }
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              atomic_store(1u, v52);
              WTF::fastFree((WTF *)v52, v41);
            }
            goto LABEL_53;
          }
        }
      }
    }
  }
LABEL_2:
  WTF::TextStream::operator<<();
  result = WebCore::writeResources((uint64_t)a1, a2, v5, v6, v7, v8);
  v10 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v10 + 1;
  v11 = *(unsigned int *)(a2 + 64);
  if (v11 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
  {
    v12 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
    if (v12)
    {
      do
      {
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                    + 680)
                        + 680) & 0x800000000000) == 0
          || (*(_BYTE *)(v12 + 21) & 0x80) == 0)
        {
          result = WebCore::write(a1, v12, v5);
        }
        v13 = *(unsigned int *)(v12 + 47);
        if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)))
          break;
        v12 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8);
      }
      while (v12);
      v10 = *((_DWORD *)a1 + 6) - 1;
    }
  }
  *((_DWORD *)a1 + 6) = v10;
  return result;
}

WTF::StringImpl *WebCore::writeSVGInlineText(WTF::TextStream *a1, WebCore::SVGBoundingBoxComputation *a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v6;
  WebCore::RenderObject *v7;
  unint64_t RunLocation;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  double v31;
  float v32;
  WTF::StringImpl *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  char v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  WebCore::SVGRenderStyle *v57;
  WTF::StringImpl *v58[2];

  v3 = (uint64_t)a2;
  WebCore::writeStandardPrefix(a1, a2, a3, 1);
  v6 = WTF::TextStream::operator<<();
  RunLocation = WebCore::RenderText::firstRunLocation((WebCore::RenderText *)v3, v7);
  v9 = (float)(int)RunLocation;
  v10 = (float)SHIDWORD(RunLocation);
  WebCore::RenderSVGInlineText::floatLinesBoundingBox((WebCore::RenderSVGInlineText *)v3);
  v13 = 2147500000.0;
  if (v9 < 2147500000.0)
  {
    v13 = -2147500000.0;
    if (v9 > -2147500000.0)
      v13 = (float)(int)v9;
  }
  v14 = 2147500000.0;
  if (v10 < 2147500000.0)
  {
    v14 = -2147500000.0;
    if (v10 > -2147500000.0)
      v14 = (float)(int)v10;
  }
  v15 = v12 + v10;
  v16 = ceilf(v11 + v9);
  v17 = 2147500000.0;
  if (v16 < 2147500000.0)
  {
    v17 = -2147500000.0;
    if (v16 > -2147500000.0)
      v17 = (float)(int)v16;
  }
  v18 = ceilf(v15);
  v19 = 2147500000.0;
  if (v18 < 2147500000.0)
  {
    v19 = -2147500000.0;
    if (v18 > -2147500000.0)
      v19 = (float)(int)v18;
  }
  v20 = 0x7FFFFFFFLL;
  v21 = 0x80000000;
  if (v13 > -2147500000.0)
    v21 = (int)v13;
  if (v13 < 2147500000.0)
    v20 = v21;
  v22 = 0x7FFFFFFF00000000;
  v23 = 0x8000000000000000;
  if (v14 > -2147500000.0)
    v23 = (unint64_t)(int)v14 << 32;
  if (v14 < 2147500000.0)
    v22 = v23;
  v24 = v17 - v13;
  v25 = v19 - v14;
  v26 = 0x7FFFFFFFLL;
  v27 = 0x80000000;
  if (v24 > -2147500000.0)
    v27 = (int)v24;
  if (v24 < 2147500000.0)
    v26 = v27;
  v28 = 0x7FFFFFFF00000000;
  v29 = 0x8000000000000000;
  if (v25 > -2147500000.0)
    v29 = (unint64_t)(int)v25 << 32;
  if (v25 < 2147500000.0)
    v28 = v29;
  v58[0] = (WTF::StringImpl *)(v22 | v20);
  v58[1] = (WTF::StringImpl *)(v28 | v26);
  WebCore::operator<<(v6);
  WTF::TextStream::operator<<();
  result = (WTF::StringImpl *)WebCore::writeResources((uint64_t)a1, v3, a3, v30, v31, v32);
  while (1)
  {
    v3 = *(_QWORD *)(v3 + 64);
    if (!v3)
      return result;
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    if ((_DWORD)result)
    {
      v34 = *(unsigned int *)(v3 + 124);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(v3 + 32);
        if (v35)
          v36 = *(_QWORD *)(v35 + 8);
        else
          v36 = 0;
        if ((*(_BYTE *)(v36 + 45) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19653B57CLL);
        }
        if (*(_BYTE *)(v36 + 46) != 72)
        {
          __break(0xC471u);
          JUMPOUT(0x19653B59CLL);
        }
        v37 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(v36 + 32) + 8) + 136);
        ++*(_DWORD *)v37;
        if (v35)
          v35 = *(_QWORD *)(v35 + 8);
        if ((*(_BYTE *)(v35 + 45) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19653B5BCLL);
        }
        if (*(_BYTE *)(v35 + 46) != 72)
        {
          __break(0xC471u);
          JUMPOUT(0x19653B5DCLL);
        }
        v38 = *(WTF::StringImpl **)(v35 + 104);
        if (v38)
          *(_DWORD *)v38 += 2;
        v39 = 0;
        v40 = 0;
        ++*((_DWORD *)a1 + 6);
        v56 = v34 << 7;
        v57 = (WebCore::SVGRenderStyle *)v37;
        while (2)
        {
          if (v40 >= *(unsigned int *)(v3 + 124))
          {
            __break(0xC471u);
            JUMPOUT(0x19653B5E4);
          }
          v41 = (_DWORD *)(*(_QWORD *)(v3 + 112) + v39);
          WTF::TextStream::writeIndent(a1);
          WTF::TextStream::operator<<();
          v42 = *(_QWORD *)(v3 + 32);
          if (v42)
            v43 = *(_QWORD *)(v42 + 8);
          else
            v43 = 0;
          if ((*(_BYTE *)(v43 + 45) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19653B53CLL);
          }
          if (*(_BYTE *)(v43 + 46) != 72)
          {
            __break(0xC471u);
            JUMPOUT(0x19653B55CLL);
          }
          v44 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 32) + 8) + 124) >> 13;
          v53 = 2;
          switch(v44)
          {
            case 1:
            case 2:
              goto LABEL_53;
            case 3:
            case 5:
              LOBYTE(v44) = 3;
              goto LABEL_53;
            case 4:
              goto LABEL_54;
            default:
              LOBYTE(v44) = 0;
LABEL_53:
              v53 = v44;
LABEL_54:
              v45 = (v37[4] >> 4) & 3;
              v46 = v53 & 6;
              if (v45 == 2 || v45 == 1)
              {
                WTF::TextStream::operator<<();
                if (v46 == 2)
                  WTF::TextStream::operator<<();
LABEL_58:
                WTF::TextStream::operator<<();
                goto LABEL_59;
              }
              if (v46 == 2)
                goto LABEL_58;
LABEL_59:
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              v37 = (unsigned __int8 *)v57;
              if ((*(_WORD *)(v3 + 52) & 4) != 0)
                WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              if (v38)
              {
                if (!*v41)
                {
                  v47 = *((_DWORD *)v38 + 1);
                  if (v47 <= (v41[2] & 0x7FFFFFFFu))
                  {
                    *(_DWORD *)v38 += 2;
                    v48 = v38;
LABEL_65:
                    v49 = 0;
                    v50 = *((_QWORD *)v48 + 1);
                    v51 = ((unint64_t)*((unsigned int *)v48 + 4) >> 2) & 1;
                    goto LABEL_66;
                  }
                }
                WTF::StringImpl::substring(v38);
                v48 = v58[0];
                if (v58[0])
                {
                  v47 = *((_DWORD *)v58[0] + 1);
                  goto LABEL_65;
                }
                v50 = 0;
                v47 = 0;
                v51 = 1;
                v49 = 1;
              }
              else
              {
                v48 = 0;
                v50 = 0;
                v47 = 0;
                v49 = 1;
                v51 = 1;
              }
LABEL_66:
              WebCore::quoteAndEscapeNonPrintables(v50, v47 | (v51 << 32), v58);
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              result = v58[0];
              v58[0] = 0;
              if (!result)
                goto LABEL_69;
              if (*(_DWORD *)result == 2)
              {
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v52);
                if ((v49 & 1) != 0)
                  goto LABEL_72;
LABEL_70:
                if (*(_DWORD *)v48 == 2)
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(v48, v52);
                else
                  *(_DWORD *)v48 -= 2;
                goto LABEL_72;
              }
              *(_DWORD *)result -= 2;
LABEL_69:
              if ((v49 & 1) == 0)
                goto LABEL_70;
LABEL_72:
              v39 += 128;
              ++v40;
              if (v56 != v39)
                continue;
              --*((_DWORD *)a1 + 6);
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(v38, v52);
                else
                  *(_DWORD *)v38 -= 2;
              }
              if (*(_DWORD *)v57 == 1)
              {
                WebCore::SVGRenderStyle::~SVGRenderStyle(v57, v52);
                result = (WTF::StringImpl *)WTF::fastFree(v54, v55);
              }
              else
              {
                --*(_DWORD *)v57;
              }
              break;
          }
          break;
        }
      }
    }
  }
}

uint64_t WebCore::write(WTF::TextStream *a1, WebCore::SVGBoundingBoxComputation *a2, __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  const WebCore::SVGGraphicsElement *v8;
  void *v9;
  double v10;
  double v11;
  float v12;

  WebCore::writeStandardPrefix(a1, a2, a3, 1);
  v6 = WTF::TextStream::operator<<();
  (*(uint64_t (**)(WebCore::SVGBoundingBoxComputation *, _QWORD, uint64_t))(*(_QWORD *)a2 + 440))(a2, 0, 0x1E00000000);
  WebCore::operator<<(v6);
  WebCore::writeSVGPaintingFeatures(a1, (uint64_t)a2);
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if ((*(_WORD *)(v7 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 1184))(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19653B7B8);
  }
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::writeSVGGraphicsElement(a1, (WebCore::SVGPolyElement **)v7, v8);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  WTF::TextStream::operator<<();
  return WebCore::writeResources((uint64_t)a1, (uint64_t)a2, a3, v10, v11, v12);
}

unsigned int *WebCore::writeSVGGradientStop(WTF::TextStream *a1, WebCore::SVGBoundingBoxComputation *a2, __int16 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  WebCore::writeStandardPrefix(a1, a2, a3, 1);
  WTF::TextStream::operator<<();
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::stopTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19653B96CLL);
  }
  v5 = *(_QWORD *)(v4 + 176);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6 && *(_DWORD *)(v6 - 12))
  {
    v12 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(v5 + 24);
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_4;
      }
    }
    else
    {
      v14 = *(uint64_t **)(v5 + 24);
    }
    v15 = (uint64_t *)(v6 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      if (!*(_QWORD *)(v16 + 8))
      {
        while (++v14 != v15)
        {
          v16 = *v14;
          if ((unint64_t)(*v14 + 1) > 1)
          {
            if (v14 != v15)
              goto LABEL_23;
            break;
          }
        }
      }
    }
  }
LABEL_4:
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if ((*(_WORD *)(v7 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::stopTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19653B98CLL);
  }
  WebCore::SVGStopElement::stopColorIncludingOpacity(v7, &v19);
  WebCore::serializationForRenderTreeAsText((WebCore *)&v19, (uint64_t *)&v20);
  WTF::TextStream::operator<<();
  v9 = v20;
  v20 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = (unsigned int *)WTF::TextStream::operator<<();
  if ((v19 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(result);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, result));
    if (!v18)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  return result;
}

uint64_t WebCore::getRenderSVGResourceById<WebCore::LegacyRenderSVGResourceFilter>(WebCore::TreeScope *a1, const WTF::AtomString *a2)
{
  uint64_t result;
  uint64_t v3;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  result = WebCore::TreeScope::lookupLegacySVGResoureById(a1, a2);
  if (result)
  {
    v3 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(result + 216) + 56))(result + 216) == 6)
      return v3;
    else
      return 0;
  }
  return result;
}

void WebCore::SVGRenderingContext::prepareToRenderSVGContent(_QWORD *a1, WebCore::GraphicsContext *a2, const WebCore::RenderElement *a3, int a4)
{
  WebCore::GraphicsContext *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t **v17;
  WebCore::SVGFilterElement *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::LegacyRenderSVGResourceClipper *v24;
  char v25;
  WebCore::RenderElement *v26;
  WebCore::GraphicsContext *v27;
  float v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WebCore::LegacyRenderSVGResourceFilter *v42;
  WebCore::SVGResourcesCache *v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  WebCore::SVGRenderingContext *v50;
  char v51;
  _WORD *v52;
  _WORD *v53;
  _DWORD v54[4];
  int32x2_t v55[2];
  const WebCore::SVGFilter *v56;
  __int128 v57;

  *a1 = a2;
  a1[1] = a3;
  a1[3] = 0;
  v6 = a2;
  if (!a4)
  {
    (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)a3 + 10) + 96))(*((_QWORD **)a3 + 10), 1);
    *((_DWORD *)a1 + 12) |= 2u;
    v6 = (WebCore::GraphicsContext *)*a1;
  }
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 40) + 8)
                                         + 1944)
                             + 248)
                 + 1148);
  v8 = *((_QWORD *)v6 + 11);
  v9 = *(_QWORD *)(v8 + 32);
  v10 = 1.0;
  if (*((_BYTE *)a2 + 46) != 103 && (v7 & 0x10) == 0)
    v10 = *(float *)(v9 + 4);
  v11 = *(_DWORD *)(*(_QWORD *)(v8 + 40) + 636);
  v12 = *(_QWORD *)(v9 + 48);
  if (*(_QWORD *)(v12 + 8))
  {
    while (1)
    {
      v13 = *(uint64_t (**)())(v12 + 16);
      if (v13)
        goto LABEL_61;
      v12 = *(_QWORD *)(v12 + 8);
      if (!v12)
        goto LABEL_11;
    }
  }
  if (*(_QWORD *)(v12 + 16))
    v13 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v13 = 0;
  if (v13)
  {
LABEL_61:
    v52 = (_WORD *)WebCore::RenderElement::element(a2);
    LOBYTE(v13) = (v52[14] & 0x20) != 0
               && (v53 = v52, (*(unsigned int (**)(_WORD *))(*(_QWORD *)v52 + 1184))(v52))
               && *((_BYTE *)v53 + 200) != 0;
  }
LABEL_11:
  v14 = v11 & 0x1F00000;
  if (v10 < 1.0 || v14 != 0x100000 || (v13 & 1) != 0 || (v11 & 0x2000000) != 0)
  {
    LODWORD(v57) = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 256))(*a1, 0);
    *(_QWORD *)((char *)&v57 + 4) = __PAIR64__(v37, v36);
    HIDWORD(v57) = v38;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1[1] + 80) + 456))(*(_QWORD *)(a1[1] + 80), &v57);
    v39 = *(_QWORD *)(a1[1] + 80);
    if (v14 == 0x100000)
    {
      (*(void (**)(uint64_t, float))(*(_QWORD *)v39 + 592))(v39, v10);
    }
    else
    {
      v40 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 11) + 40) + 636) >> 20) & 0x1F;
      if (v40 != HIBYTE(*(unsigned __int16 *)(v39 + 194)))
      {
        *(_WORD *)(v39 + 194) = *(_WORD *)(v39 + 194) | (unsigned __int16)((_WORD)v40 << 8);
        *(_DWORD *)(v39 + 184) |= 0x20u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 88))(v39, v39 + 8);
      (*(void (**)(_QWORD, float))(**(_QWORD **)(a1[1] + 80) + 592))(*(_QWORD *)(a1[1] + 80), v10);
      v41 = *(_QWORD *)(a1[1] + 80);
      if ((*(_WORD *)(v41 + 194) & 0xFF00) != 0x100)
      {
        *(_WORD *)(v41 + 194) = *(_WORD *)(v41 + 194) | 0x100;
        *(_DWORD *)(v41 + 184) |= 0x20u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 88))(v41, v41 + 8);
    }
    *((_DWORD *)a1 + 12) |= 4u;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 11) + 40) + 264);
  if (v15 && (*(_DWORD *)(v15 + 12) - 1) <= 1)
  {
    WebCore::SVGRenderSupport::clipContextToCSSClippingArea(*(_QWORD *)(a1[1] + 80), a2, a3);
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0
    || (v17 = (uint64_t **)WebCore::SVGResourcesCache::cachedResourcesForRenderer((WebCore::SVGResourcesCache *)*a1, a2)) == 0)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 11) + 32) + 32);
    if (*(_DWORD *)(v35 + 20) != 1 || *(_BYTE *)(**(_QWORD **)(v35 + 8) + 12))
      goto LABEL_36;
    return;
  }
  v19 = v17;
  v20 = (uint64_t)v6 + 80;
  v21 = *v17;
  if ((v7 & 0x10) == 0)
  {
    if (!v21)
      goto LABEL_35;
    v22 = v21[2];
    if (!v22)
      goto LABEL_23;
    v49 = *(uint64_t **)(v22 + 8);
    if (!v49)
      goto LABEL_23;
    v50 = (WebCore::SVGRenderingContext *)*a1;
    *(_QWORD *)&v57 = *(_QWORD *)(a1[1] + 80);
    v51 = WebCore::LegacyRenderSVGResourceMasker::applyResource(v49, v50, (uint64_t)v6 + 80, (uint64_t *)&v57);
    *(_QWORD *)(a1[1] + 80) = v57;
    if ((v51 & 1) == 0)
      return;
    v21 = *v19;
  }
  if (v21)
  {
LABEL_23:
    v23 = *v21;
    if (v23)
    {
      v24 = *(WebCore::LegacyRenderSVGResourceClipper **)(v23 + 8);
      v25 = v24 ? v16 : 1;
      if ((v25 & 1) == 0)
      {
        v26 = (WebCore::RenderElement *)*a1;
        v27 = *(WebCore::GraphicsContext **)(a1[1] + 80);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 256))(*a1, 0);
        if (v29 <= 0.0 || v28 <= 0.0)
        {
          *(_QWORD *)(a1[1] + 80) = v27;
          v33 = 1;
        }
        else
        {
          LODWORD(v57) = (*(float (**)(WebCore::RenderElement *))(*(_QWORD *)v26 + 232))(v26);
          *(_QWORD *)((char *)&v57 + 4) = __PAIR64__(v31, v30);
          HIDWORD(v57) = v32;
          v33 = WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(v24, v27, v26, (float32x2_t *)&v57, (const WebCore::FloatRect *)&v57, 1.0);
          *(_QWORD *)(a1[1] + 80) = v27;
          if ((v33 & 1) == 0)
            return;
        }
        *((_BYTE *)a1 + 52) = (v33 & 2) != 0;
      }
    }
  }
  if ((v7 & 0x10) != 0)
  {
LABEL_36:
    *((_DWORD *)a1 + 12) |= 1u;
    return;
  }
  if (!*v19 || (v34 = (*v19)[1]) == 0)
  {
LABEL_35:
    a1[3] = 0;
    goto LABEL_36;
  }
  v42 = *(WebCore::LegacyRenderSVGResourceFilter **)(v34 + 8);
  a1[3] = v42;
  if (!v42 || WebCore::LegacyRenderSVGResourceFilter::isIdentity(v42, v18))
    goto LABEL_36;
  v43 = (WebCore::SVGResourcesCache *)*a1;
  v44 = a1[1];
  a1[2] = *(_QWORD *)(v44 + 80);
  *((_OWORD *)a1 + 2) = *(_OWORD *)v44;
  *((_DWORD *)a1 + 12) |= 8u;
  v56 = *(const WebCore::SVGFilter **)(v44 + 80);
  v45 = WebCore::LegacyRenderSVGResourceFilter::applyResource((uint64_t *)a1[3], (uint64_t)v43, v20, &v56);
  *(_QWORD *)(a1[1] + 80) = v56;
  if ((v45 & 1) != 0)
  {
    v54[0] = WebCore::LegacyRenderSVGResourceFilter::drawingRegion((WebCore::LegacyRenderSVGResourceFilter *)a1[3], (WebCore::RenderObject *)*a1);
    v54[1] = v46;
    v54[2] = v47;
    v54[3] = v48;
    WebCore::IntRect::IntRect((int *)v55, (const WebCore::FloatRect *)v54);
    WebCore::LayoutRect::LayoutRect((int8x8_t *)&v57, v55);
    *(_OWORD *)a1[1] = v57;
    goto LABEL_36;
  }
}

double WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem@<D0>(WebCore::SVGRenderingContext *this@<X0>, const WebCore::RenderObject *a2@<X1>, double *a3@<X8>)
{
  WebCore::SVGRenderingContext *v3;
  __int128 v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 *v31;
  double result;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v3 = this;
  {
    WebCore::currentContentTransformation(void)::s_currentContentTransformation = constinit_10;
    *(_OWORD *)&qword_1EE2F9610 = unk_1969FE138;
    xmmword_1EE2F9620 = xmmword_1969FE148;
  }
  v5 = *(_OWORD *)&qword_1EE2F9610;
  *(_OWORD *)a3 = WebCore::currentContentTransformation(void)::s_currentContentTransformation;
  *((_OWORD *)a3 + 1) = v5;
  *((_OWORD *)a3 + 2) = xmmword_1EE2F9620;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v7 = 1.0;
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = (*(_DWORD *)v10)++;
          v7 = *(float *)(v10 + 364);
          if (v11)
          {
            *(_DWORD *)v10 = v11;
          }
          else
          {
            WebCore::Page::~Page(v10);
            WTF::fastFree(v27, v28);
          }
        }
      }
    }
  }
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  v15 = a3[3];
  v16 = a3[4];
  v17 = a3[5];
  while (1)
  {
    v18 = v12;
    v19 = v14;
    v20 = v16;
    v21 = (double *)(*(uint64_t (**)(WebCore::SVGRenderingContext *, const WebCore::RenderObject *))(*(_QWORD *)v3 + 272))(v3, a2);
    v22 = v21[1];
    v23 = v21[2];
    v24 = v21[3];
    v12 = v23 * v13 + v18 * *v21;
    v13 = v24 * v13 + v18 * v22;
    v14 = v23 * v15 + v19 * *v21;
    v15 = v24 * v15 + v19 * v22;
    v16 = v21[4] + v23 * v17 + v20 * *v21;
    v17 = v21[5] + v24 * v17 + v20 * v22;
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
    a3[3] = v15;
    a3[4] = v16;
    a3[5] = v17;
    v25 = *((unsigned __int8 *)v3 + 46);
    if (v25 == 83 || v25 == 103)
      break;
    v26 = *((_QWORD *)v3 + 4);
    if (v26)
    {
      v3 = *(WebCore::SVGRenderingContext **)(v26 + 8);
      if (v3)
        continue;
    }
    goto LABEL_28;
  }
  while ((*((_BYTE *)v3 + 45) & 0x10) == 0)
  {
    v33 = *((_QWORD *)v3 + 4);
    if (v33)
    {
      v3 = *(WebCore::SVGRenderingContext **)(v33 + 8);
      if (v3)
        continue;
    }
    goto LABEL_28;
  }
LABEL_17:
  if ((*((_BYTE *)v3 + 21) & 0x80) != 0)
  {
    v30 = (_QWORD *)*((_QWORD *)v3 + 18);
    if (v30)
    {
      do
      {
        v31 = (__int128 *)v30[25];
        if (v31)
        {
          v34 = v31[2];
          v36 = *v31;
          v37 = v34;
          v38 = v31[6];
          WebCore::AffineTransform::multiply((WebCore::AffineTransform *)&v36, (const WebCore::AffineTransform *)a3);
          v35 = v37;
          *(_OWORD *)a3 = v36;
          *((_OWORD *)a3 + 1) = v35;
          *((_OWORD *)a3 + 2) = v38;
        }
        if (v30[32])
          break;
        v30 = (_QWORD *)v30[5];
      }
      while (v30);
      v12 = *a3;
      v13 = a3[1];
      v14 = a3[2];
      v15 = a3[3];
    }
  }
  else
  {
    while (1)
    {
      v29 = *((_QWORD *)v3 + 4);
      if (!v29)
        break;
      v3 = *(WebCore::SVGRenderingContext **)(v29 + 8);
      if (!v3)
        break;
      if ((*((_BYTE *)v3 + 45) & 0x10) != 0)
        goto LABEL_17;
    }
  }
LABEL_28:
  *a3 = v12 * v7;
  a3[1] = v13 * v7;
  result = v14 * v7;
  a3[2] = result;
  a3[3] = v15 * v7;
  return result;
}

uint64_t WebCore::SVGRenderingContext::clipToImageBuffer(uint64_t result, const WebCore::FloatRect *a2, float *a3, uint64_t *a4, int a5)
{
  uint64_t v7;
  float v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  double v36;
  BOOL v37;
  BOOL v38;
  double v39;
  double v40;
  double v41;
  double v42;
  __int128 *v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  float v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  _OWORD v64[3];
  __int128 v65;
  __int128 v66;
  __int128 v67;

  if (*a4)
  {
    v7 = result;
    v65 = constinit_10;
    v66 = unk_1969FE138;
    v67 = xmmword_1969FE148;
    v8 = *a3;
    v9 = *a3;
    v57 = a3[1];
    v10 = v57;
    v11 = v9 * 0.0;
    *(double *)&v65 = v9;
    *((double *)&v65 + 1) = v9 * 0.0;
    v12 = v57 * 0.0;
    *(double *)&v66 = v12;
    *((double *)&v66 + 1) = v57;
    v13 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v65, a2);
    v17 = floorf(v13);
    v18 = 2147500000.0;
    if (v17 < 2147500000.0)
    {
      v18 = -2147500000.0;
      v37 = v17 <= -2147500000.0;
      v19 = (float)(int)v17;
      if (!v37)
        v18 = v19;
    }
    v20 = floorf(v14);
    v21 = 2147500000.0;
    if (v20 < 2147500000.0)
    {
      v21 = -2147500000.0;
      if (v20 > -2147500000.0)
        v21 = (float)(int)v20;
    }
    v22 = v14 + v16;
    v23 = ceilf(v13 + v15);
    v24 = 2147500000.0;
    if (v23 < 2147500000.0)
    {
      v24 = -2147500000.0;
      v37 = v23 <= -2147500000.0;
      v25 = (float)(int)v23;
      if (!v37)
        v24 = v25;
    }
    v26 = ceilf(v22);
    v27 = 2147500000.0;
    if (v26 < 2147500000.0)
    {
      v27 = -2147500000.0;
      v37 = v26 <= -2147500000.0;
      v28 = (float)(int)v26;
      if (!v37)
        v27 = v28;
    }
    if (v18 >= 2147500000.0)
    {
      v29 = 0x7FFFFFFF;
    }
    else if (v18 <= -2147500000.0)
    {
      v29 = 0x80000000;
    }
    else
    {
      v29 = (int)v18;
    }
    v30 = 2147500000.0;
    if (v21 < 2147500000.0)
    {
      v30 = -2147500000.0;
      if (v21 > -2147500000.0)
        v30 = (float)(int)v21;
    }
    v31 = v24 - v18;
    v32 = v27 - v21;
    v33 = 2147500000.0;
    if (v31 < 2147500000.0)
    {
      v33 = -2147500000.0;
      if (v31 > -2147500000.0)
        v33 = (float)(int)v31;
    }
    v34 = 2147500000.0;
    if (v32 < 2147500000.0)
    {
      v34 = -2147500000.0;
      if (v32 > -2147500000.0)
        v34 = (float)(int)v32;
    }
    v35 = v9 * v10 - v11 * v12;
    v36 = fabs(v35);
    v37 = (unint64_t)(*(_QWORD *)&v36 - 0x10000000000000) >> 53 > 0x3FE
       && (unint64_t)(*(_QWORD *)&v36 - 1) > 0xFFFFFFFFFFFFELL;
    if (v37)
    {
      LOBYTE(v58) = 0;
      v43 = &constinit_10;
    }
    else
    {
      if (v8 == 1.0 && v11 == 0.0 && (v12 == 0.0 ? (v38 = v57 == 1.0) : (v38 = 0), v38))
      {
        v59 = 0.0;
        v60 = 0.0;
        v39 = 1.0;
        v41 = -0.0;
        v40 = 1.0;
        v42 = -0.0;
      }
      else
      {
        v39 = v10 / v35;
        v40 = v9 / v35;
        v41 = (v10 * -0.0 + v12 * 0.0) / v35;
        v59 = -v11 / v35;
        v60 = -v12 / v35;
        v42 = (v9 * -0.0 + v11 * 0.0) / v35;
      }
      v58 = v39;
      v61 = v40;
      v62 = v41;
      v43 = (__int128 *)&v58;
      v63 = v42;
    }
    v44 = v43[1];
    v64[0] = *v43;
    v64[1] = v44;
    v64[2] = v43[2];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 656))(v7, v64);
    v45 = *a4;
    *(float *)&v58 = (float)v29;
    *((float *)&v58 + 1) = v30;
    v59 = COERCE_DOUBLE(__PAIR64__(LODWORD(v34), LODWORD(v33)));
    (*(void (**)(uint64_t, uint64_t, double *))(*(_QWORD *)v7 + 504))(v7, v45, &v58);
    result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 656))(v7, &v65);
    if (a5)
    {
      {
        WebCore::currentContentTransformation(void)::s_currentContentTransformation = constinit_10;
        *(_OWORD *)&qword_1EE2F9610 = unk_1969FE138;
        xmmword_1EE2F9620 = xmmword_1969FE148;
        return result;
      }
      v47 = (__n128)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)WebCore::currentContentTransformation(void)::s_currentContentTransformation, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(*(float64x2_t *)&qword_1EE2F9610, (float64x2_t)xmmword_1968A14C0)));
      v47.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v47);
      v47.n128_u16[0] = vmaxv_u16((uint16x4_t)v47.n128_u64[0]);
      if ((v47.n128_u8[0] & 1) != 0
        || (v47.n128_u64[0] = xmmword_1EE2F9620, *(double *)&xmmword_1EE2F9620 != 0.0)
        || (v47.n128_u64[0] = *((_QWORD *)&xmmword_1EE2F9620 + 1), *((double *)&xmmword_1EE2F9620 + 1) != 0.0))
      {
        v48 = *a4;
        *a4 = 0;
        if (v48)
        {
          v49 = *(_QWORD *)(v48 + 8);
          if (__ldaxr((unsigned __int8 *)v49))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v49))
          {
            goto LABEL_48;
          }
          result = MEMORY[0x19AEA534C](v49, v47);
LABEL_48:
          v51 = *(_QWORD *)(v49 + 8);
          v52 = v51 - 1;
          *(_QWORD *)(v49 + 8) = v51 - 1;
          if (v51 == 1)
          {
            v56 = *(_QWORD *)(v49 + 16);
            v53 = *(_QWORD *)(v49 + 24);
            *(_QWORD *)(v49 + 24) = 0;
            v54 = v56 != 0;
          }
          else
          {
            v53 = 0;
            v54 = 1;
          }
          v55 = __ldxr((unsigned __int8 *)v49);
          if (v55 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v49))
            {
              if (v52)
                return result;
LABEL_56:
              if (v53)
                result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v53 + 8))(v53, v47);
              if (!v54)
                return WTF::fastFree((WTF *)v49, v46);
              return result;
            }
          }
          else
          {
            __clrex();
          }
          result = WTF::Lock::unlockSlow((WTF::Lock *)v49);
          if (v52)
            return result;
          goto LABEL_56;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGRenderingContext::bufferForeground(WebCore::LegacyRenderSVGImage **a1, uint64_t *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  float v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t result;
  float v28;
  int v29;
  uint64_t v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  WebCore::LegacyRenderSVGImage *v54;
  WebCore::LegacyRenderSVGImage *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  float v70[2];
  float v71;
  float v72;
  float v73;
  float v74;
  char v75;
  _QWORD v76[2];

  v4 = (*(float (**)(WebCore::LegacyRenderSVGImage *))(*(_QWORD *)*a1 + 232))(*a1);
  v6 = v5;
  v8 = v7;
  v71 = v4;
  v72 = v9;
  v73 = v5;
  v74 = v7;
  if (!*a2)
    goto LABEL_31;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)a1[1] + 10) + 672))(&v64, *((_QWORD *)a1[1] + 10), 0);
  v10 = ceilf(v6);
  if (v10 >= 2147500000.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v10 <= -2147500000.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v10;
  }
  v12 = ceilf(v8);
  if (v12 >= 2147500000.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else if (v12 <= -2147500000.0)
  {
    v13 = 0x80000000;
  }
  else
  {
    v13 = (int)v12;
  }
  v14 = vcvtpd_s64_f64(hypot(*(long double *)&v64, *((long double *)&v64 + 1)) * (double)v11);
  v15 = vcvtpd_s64_f64(hypot(*(long double *)&v65, *((long double *)&v65 + 1)) * (double)v13);
  v16 = WebCore::ImageBuffer::calculateBackendSize(*(float *)(*a2 + 16), *(float *)(*a2 + 20), *(float *)(*a2 + 24));
  if (v14 != (_DWORD)v16 || v15 != HIDWORD(v16))
  {
    v19 = *a2;
    *a2 = 0;
    if (!v19)
      goto LABEL_31;
    v20 = *(_QWORD *)(v19 + 8);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_17:
    v22 = *(_QWORD *)(v20 + 8);
    v23 = v22 - 1;
    *(_QWORD *)(v20 + 8) = v22 - 1;
    if (v22 == 1)
    {
      v63 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 24) = 0;
      v25 = v63 != 0;
    }
    else
    {
      v24 = 0;
      v25 = 1;
    }
    v26 = __ldxr((unsigned __int8 *)v20);
    if (v26 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
      {
        if (v23)
          goto LABEL_29;
LABEL_25:
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        if (!v25)
          WTF::fastFree((WTF *)v20, v17);
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
    if (v23)
      goto LABEL_29;
    goto LABEL_25;
  }
LABEL_29:
  result = *a2;
  if (!*a2)
  {
    v6 = v73;
    v8 = v74;
LABEL_31:
    v28 = ceilf(v6);
    if (v28 >= 2147500000.0)
    {
      v29 = 0x7FFFFFFF;
    }
    else if (v28 <= -2147500000.0)
    {
      v29 = 0x80000000;
    }
    else
    {
      v29 = (int)v28;
    }
    v30 = *((_QWORD *)a1[1] + 10);
    v31 = ceilf(v8);
    v32 = 2147500000.0;
    if (v31 < 2147500000.0)
    {
      v32 = -2147500000.0;
      v33 = v31 <= -2147500000.0;
      v34 = (float)(int)v31;
      if (!v33)
        v32 = v34;
    }
    v70[0] = (float)v29;
    v70[1] = v32;
    v35 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v35 != -1)
    {
      *(_QWORD *)&v64 = &v75;
      v76[0] = &v64;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v76, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, float *, uint64_t *, _QWORD))(*(_QWORD *)v30 + 336))(&v64, v30, v70, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
    result = v64;
    *(_QWORD *)&v64 = 0;
    v37 = *a2;
    *a2 = result;
    if (!v37)
    {
LABEL_74:
      if (!result)
        return result;
      goto LABEL_75;
    }
    v38 = *(_QWORD *)(v37 + 8);
    if (__ldaxr((unsigned __int8 *)v38))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v38))
    {
      goto LABEL_44;
    }
    MEMORY[0x19AEA534C](v38);
LABEL_44:
    v40 = *(_QWORD *)(v38 + 8);
    v41 = v40 - 1;
    *(_QWORD *)(v38 + 8) = v40 - 1;
    if (v40 == 1)
    {
      v61 = *(_QWORD *)(v38 + 16);
      v42 = *(_QWORD *)(v38 + 24);
      *(_QWORD *)(v38 + 24) = 0;
      v43 = v61 != 0;
    }
    else
    {
      v42 = 0;
      v43 = 1;
    }
    v44 = __ldxr((unsigned __int8 *)v38);
    if (v44 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v38))
      {
        if (v41)
          goto LABEL_56;
LABEL_52:
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        if (!v43)
          WTF::fastFree((WTF *)v38, v36);
LABEL_56:
        v45 = v64;
        *(_QWORD *)&v64 = 0;
        if (!v45)
          goto LABEL_73;
        v46 = *(_QWORD *)(v45 + 8);
        if (__ldaxr((unsigned __int8 *)v46))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v46))
        {
          goto LABEL_61;
        }
        MEMORY[0x19AEA534C](v46);
LABEL_61:
        v48 = *(_QWORD *)(v46 + 8);
        v49 = v48 - 1;
        *(_QWORD *)(v46 + 8) = v48 - 1;
        if (v48 == 1)
        {
          v62 = *(_QWORD *)(v46 + 16);
          v50 = *(_QWORD *)(v46 + 24);
          *(_QWORD *)(v46 + 24) = 0;
          v51 = v62 != 0;
        }
        else
        {
          v50 = 0;
          v51 = 1;
        }
        v52 = __ldxr((unsigned __int8 *)v46);
        if (v52 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v46))
          {
            if (!v49)
              goto LABEL_69;
            goto LABEL_73;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v46);
        if (!v49)
        {
LABEL_69:
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          if (!v51)
            WTF::fastFree((WTF *)v46, v36);
        }
LABEL_73:
        result = *a2;
        goto LABEL_74;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
    if (v41)
      goto LABEL_56;
    goto LABEL_52;
  }
LABEL_75:
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)v53 + 648))(v53, -v71, -v72);
  v54 = *a1;
  v55 = a1[1];
  v56 = *((_OWORD *)v55 + 1);
  v57 = *((_OWORD *)v55 + 2);
  v58 = *((_OWORD *)v55 + 4);
  v67 = *((_OWORD *)v55 + 3);
  v68 = v58;
  v66 = v57;
  v64 = *(_OWORD *)v55;
  v65 = v56;
  v69 = v53;
  if (*((_BYTE *)v54 + 46) != 92)
  {
    __break(0xC471u);
    JUMPOUT(0x19653C9F4);
  }
  WebCore::LegacyRenderSVGImage::paintForeground(v54, (WebCore::PaintInfo *)&v64);
  v59 = *((_QWORD *)a1[1] + 10);
  v60 = *a2;
  v76[0] = 0;
  v76[1] = *(_QWORD *)(v60 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 384))(v59);
  return 1;
}

void WebCore::SVGInlineFlowBox::~SVGInlineFlowBox(WebCore::SVGInlineFlowBox *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E6E0;
  v3 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341E8B8;
  v4 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
}

{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E6E0;
  v3 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341E8B8;
  v4 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::SVGInlineFlowBox::isSVGInlineFlowBox(WebCore::SVGInlineFlowBox *this)
{
  return 1;
}

float WebCore::SVGInlineFlowBox::virtualLogicalHeight(WebCore::SVGInlineFlowBox *this)
{
  return *((float *)this + 26);
}

void WebCore::SVGInlineTextBox::~SVGInlineTextBox(WebCore::SVGInlineTextBox *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  __int16 v5;
  WTF *v6;
  char v7;
  WebCore::SVGInlineTextBox *v8;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 26);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3449ED8[v4])(&v7, (char *)this + 96);
  *((_DWORD *)this + 26) = -1;
  *(_QWORD *)this = off_1E341E7D0;
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x2000) == 0 && WebCore::gTextBoxesWithOverflow)
  {
    v8 = this;
    WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::remove((uint64_t *)WebCore::gTextBoxesWithOverflow, &v8);
    v5 = *((_WORD *)this + 26);
  }
  if ((v5 & 0x4000) != 0)
    WebCore::removeBoxFromGlyphDisplayListCache(this, (const WebCore::LegacyInlineTextBox *)a2);
  *(_QWORD *)this = off_1E341E8B8;
  v6 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
}

{
  WTF *v3;
  uint64_t v4;
  __int16 v5;
  WTF *v6;
  char v7;
  WebCore::SVGInlineTextBox *v8;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 26);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3449ED8[v4])(&v7, (char *)this + 96);
  *((_DWORD *)this + 26) = -1;
  *(_QWORD *)this = off_1E341E7D0;
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x2000) == 0 && WebCore::gTextBoxesWithOverflow)
  {
    v8 = this;
    WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::remove((uint64_t *)WebCore::gTextBoxesWithOverflow, &v8);
    v5 = *((_WORD *)this + 26);
  }
  if ((v5 & 0x4000) != 0)
    WebCore::removeBoxFromGlyphDisplayListCache(this, (const WebCore::LegacyInlineTextBox *)a2);
  *(_QWORD *)this = off_1E341E8B8;
  v6 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::SVGInlineTextBox::isSVGInlineTextBox(WebCore::SVGInlineTextBox *this)
{
  return 1;
}

float WebCore::SVGInlineTextBox::virtualLogicalHeight(WebCore::SVGInlineTextBox *this)
{
  return *((float *)this + 20);
}

double WebCore::SVGTextFragment::transformAroundOrigin(WebCore::SVGTextFragment *this, WebCore::AffineTransform *a2, float a3, float a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double result;

  v4 = *((double *)this + 4) + a3;
  v5 = *((double *)this + 5) + a4;
  v6 = (float)-a3;
  v7 = (float)-a4;
  v8 = *((double *)this + 1);
  v9 = *(double *)this == 1.0;
  if (v8 != 0.0)
    v9 = 0;
  v10 = *((double *)this + 2);
  v11 = *((double *)this + 3);
  if (v10 != 0.0)
    v9 = 0;
  v12 = v11 * v7 + v6 * v8;
  if (!v9 || v11 != 1.0)
  {
    v6 = v10 * v7 + v6 * *(double *)this;
    v7 = v12;
  }
  *((double *)this + 4) = v4 + v6;
  result = v5 + v7;
  *((double *)this + 5) = v5 + v7;
  return result;
}

float64x2_t WebCore::SVGTextFragment::buildTransformForTextOnPath(WebCore::SVGTextFragment *this, float64x2_t *a2)
{
  double v2;
  double v3;
  float64x2_t result;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  int8x16_t v13;
  unsigned int v14;
  float32x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  int8x16_t v18;
  int32x2_t v19;
  int64x2_t v20;

  v2 = *((double *)this + 10);
  v3 = *((double *)this + 11);
  if (v2 == 1.0
    && v3 == 0.0
    && (v7 = *((double *)this + 12), v7 == 0.0)
    && *((double *)this + 13) == 1.0
    && (v9 = *((double *)this + 14), v9 == 0.0))
  {
    v10 = *((double *)this + 15);
    result = *((float64x2_t *)this + 2);
    v5 = *((float64x2_t *)this + 3);
    v6 = *((float64x2_t *)this + 4);
    if (v10 == 0.0)
      goto LABEL_5;
    v8 = 1.0;
  }
  else
  {
    result = *((float64x2_t *)this + 2);
    v5 = *((float64x2_t *)this + 3);
    v6 = *((float64x2_t *)this + 4);
    v7 = *((double *)this + 12);
    v8 = *((double *)this + 13);
    v9 = *((double *)this + 14);
    v10 = *((double *)this + 15);
  }
  v11 = vmlaq_n_f64(vmulq_n_f64(v5, v3), result, v2);
  v12 = vmulq_n_f64(v5, v10);
  v5 = vmlaq_n_f64(vmulq_n_f64(v5, v8), result, v7);
  v6 = vaddq_f64(v6, vmlaq_n_f64(v12, result, v9));
  result = v11;
LABEL_5:
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  v13 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v5, (float64x2_t)xmmword_1968A14C0));
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v13))) & 1) != 0 || v6.f64[0] != 0.0 || v6.f64[1] != 0.0)
  {
    v14 = (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, v13)) & 0xF) == 0;
    v15 = *(float32x2_t *)((char *)this + 12);
    v16 = vaddq_f64(v6, vcvtq_f64_f32(v15));
    v17 = vcvtq_f64_f32(vneg_f32(v15));
    v18 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v5, v17, 1), result, v17.f64[0]);
    v19 = vdup_n_s32(v14);
    v20.i64[0] = v19.u32[0];
    v20.i64[1] = v19.u32[1];
    result = vaddq_f64(v16, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v20, 0x3FuLL)), (int8x16_t)v17, v18));
    a2[2] = result;
  }
  return result;
}

uint64_t WebCore::writeSVGPaintingResource(WebCore *this, WTF::TextStream *a2, const WebCore::LegacyRenderSVGResource *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if ((*(unsigned int (**)(WTF::TextStream *))(*(_QWORD *)a2 + 56))(a2) == 5)
  {
    WTF::TextStream::operator<<();
    WebCore::serializationForRenderTreeAsText((WTF::TextStream *)((char *)a2 + 8), (uint64_t *)&v14);
    WTF::TextStream::operator<<();
    v5 = v14;
    v14 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    return WTF::TextStream::operator<<();
  }
  else
  {
    v7 = (*(uint64_t (**)(WTF::TextStream *))(*(_QWORD *)a2 + 56))(a2);
    if (v7 == 2 || v7 == 4 || v7 == 3)
      WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v8 = *(_QWORD *)(*((_QWORD *)a2 - 24) + 8);
    if ((*(_WORD *)(v8 + 28) & 0x20) != 0)
    {
      v9 = *(_QWORD *)(v8 + 104);
      if (v9 && *(_QWORD *)(v9 + 24))
      {
        v10 = *(_DWORD *)(v9 + 4);
        if ((v10 & 1) != 0)
        {
          v11 = *(uint64_t **)(v9 + 40);
          LODWORD(v12) = *(_DWORD *)(v9 + 52);
        }
        else
        {
          v11 = (uint64_t *)(v9 + 32);
          LODWORD(v12) = v10 >> 5;
        }
        if ((_DWORD)v12)
        {
          v12 = v12;
          do
          {
            v13 = *v11;
            if (*v11 == WebCore::HTMLNames::idAttr
              || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
              && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
            {
              break;
            }
            v11 += 2;
            --v12;
          }
          while (v12);
        }
      }
      WTF::TextStream::operator<<();
      return WTF::TextStream::operator<<();
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

WebCore::SVGRootInlineBox *WebCore::SVGRootInlineBox::SVGRootInlineBox(WebCore::SVGRootInlineBox *this, WebCore::RenderSVGText *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  void *v10;
  WTF *v11;

  *(_QWORD *)this = off_1E341E8B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if (!v4)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = a2;
    v11 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WTF::fastFree(v11, v10);
        v4 = *((_QWORD *)a2 + 1);
        if (!v4)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  ++*(_DWORD *)v4;
LABEL_3:
  *((_QWORD *)this + 4) = v4;
  *((_QWORD *)this + 5) = 0;
  v5 = *((unsigned __int16 *)this + 26);
  *((_DWORD *)this + 12) = 0;
  v6 = (v5 | (*((unsigned __int8 *)this + 54) << 16)) & 0xFFFE5000;
  *((_WORD *)this + 26) = v6 | 0x2800;
  v7 = HIWORD(v6);
  *((_BYTE *)this + 54) = BYTE2(v6);
  *((_DWORD *)this + 14) &= 0xFFFBFFF8;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_QWORD *)this = off_1E341E990;
  *(_QWORD *)((char *)this + 124) = 0;
  *(_QWORD *)((char *)this + 116) = 0;
  v8 = (v6 | (*((_DWORD *)a2 + 5) >> 1) & 0x800) ^ 0x2800;
  *((_BYTE *)this + 54) = v7;
  *((_WORD *)this + 26) = v8;
  *(_QWORD *)this = off_1E344A058;
  *((_DWORD *)this + 33) = 0;
  return this;
}

void WebCore::SVGRootInlineBox::paint(WebCore::LegacyRootInlineBox *a1, __int128 *a2, _DWORD *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::GraphicsContext *v19;
  char v20;
  _QWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  WebCore::LegacyInlineBox *i;
  WebCore::RenderLayerModelObject *v29;
  WebCore::SVGInlineTextBox *v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v10 = *((_QWORD *)a1 + 4);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  if ((*(_BYTE *)(v11 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19653D48CLL);
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
    goto LABEL_5;
  *(_QWORD *)&v34 = WebCore::LegacyInlineFlowBox::visualOverflowRect((uint64_t)a1, a4);
  *((_QWORD *)&v34 + 1) = v23;
  WebCore::LegacyInlineBox::flipForWritingMode((uint64_t)a1, (WebCore::LayoutRect *)&v34);
  v24 = a3[1];
  v25 = v34 + *a3;
  if (__OFADD__((_DWORD)v34, *a3))
    v25 = (v34 >> 31) + 0x7FFFFFFF;
  v26 = __OFADD__(DWORD1(v34), v24);
  v27 = DWORD1(v34) + v24;
  if (v26)
    v27 = (DWORD1(v34) >> 31) + 0x7FFFFFFF;
  *(_QWORD *)&v34 = __PAIR64__(v27, v25);
  if (WebCore::LayoutRect::intersects((WebCore::LayoutRect *)a2, (const WebCore::LayoutRect *)&v34))
  {
    v10 = *((_QWORD *)a1 + 4);
LABEL_5:
    if (v10)
      v12 = *(_QWORD *)(v10 + 8);
    else
      v12 = 0;
    if ((*(_BYTE *)(v12 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19653D4ACLL);
    }
    if ((*(_BYTE *)(v12 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19653D4CCLL);
    }
    if (*(_BYTE *)(v12 + 46) != 85)
    {
      __break(0xC471u);
      JUMPOUT(0x19653D4ECLL);
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 3382))
    {
      v13 = 0;
    }
    else
    {
      v13 = WebCore::LegacyRootInlineBox::selectionState(a1) != 0;
      v10 = *((_QWORD *)a1 + 4);
    }
    v14 = *((_DWORD *)a2 + 5);
    v15 = a2[3];
    v36 = a2[2];
    v37 = v15;
    v38 = a2[4];
    v39 = *((_QWORD *)a2 + 10);
    v16 = a2[1];
    v34 = *a2;
    v35 = v16;
    if (v10)
      v17 = *(_QWORD *)(v10 + 8);
    else
      v17 = 0;
    if ((*(_BYTE *)(v17 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19653D50CLL);
    }
    if (*((_QWORD *)&v35 + 1) && *((_QWORD *)&v35 + 1) == v17)
      *((_QWORD *)&v35 + 1) = 0;
    if ((v14 & 2) != 0)
      v13 = 0;
    if (v13)
    {
      v30 = (WebCore::SVGInlineTextBox *)*((_QWORD *)a1 + 9);
      if (v30)
      {
        do
        {
          if ((*(unsigned int (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)v30 + 96))(v30))
          {
            WebCore::SVGInlineTextBox::paintSelectionBackground(v30, (WebCore::PaintInfo *)&v34);
          }
          else if ((*(unsigned int (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)v30 + 104))(v30))
          {
            WebCore::SVGInlineFlowBox::paintSelectionBackground(v30, (WebCore::PaintInfo *)&v34);
          }
          v30 = (WebCore::SVGInlineTextBox *)*((_QWORD *)v30 + 1);
        }
        while (v30);
        v10 = *((_QWORD *)a1 + 4);
      }
    }
    if (v10)
      v18 = *(_QWORD *)(v10 + 8);
    else
      v18 = 0;
    if ((*(_BYTE *)(v18 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19653D52CLL);
    }
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8) + 40) + 8) + 680)
                    + 680) & 0x800000000000) != 0)
    {
      for (i = (WebCore::LegacyInlineBox *)*((_QWORD *)a1 + 9); i; i = (WebCore::LegacyInlineBox *)*((_QWORD *)i + 1))
      {
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)i + 4) + 8) + 45) & 2) == 0)
        {
          v29 = (WebCore::RenderLayerModelObject *)WebCore::LegacyInlineBox::boxModelObject(i);
          if ((WebCore::RenderLayerModelObject::hasSelfPaintingLayer(v29) & 1) != 0)
            continue;
        }
        (*(void (**)(WebCore::LegacyInlineBox *, __int128 *, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)i + 56))(i, &v34, a3, a4, a5);
      }
    }
    else
    {
      if (v10)
        v19 = *(WebCore::GraphicsContext **)(v10 + 8);
      else
        v19 = 0;
      if ((*((_BYTE *)v19 + 45) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19653D54CLL);
      }
      if ((*((_BYTE *)v19 + 52) & 7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19653D56CLL);
      }
      if (*((_BYTE *)v19 + 46) != 85)
      {
        __break(0xC471u);
        JUMPOUT(0x19653D58CLL);
      }
      v32 = 0u;
      memset(v33, 0, 21);
      v31 = 0u;
      WebCore::SVGRenderingContext::prepareToRenderSVGContent(&v31, v19, (const WebCore::RenderElement *)a2, 0);
      v20 = v33[1];
      if ((v33[1] & 1) != 0)
      {
        v21 = (_QWORD *)*((_QWORD *)a1 + 9);
        if (v21)
        {
          do
          {
            (*(void (**)(_QWORD *, __int128 *, _DWORD *, _QWORD, _QWORD))(*v21 + 56))(v21, a2, a3, 0, 0);
            v21 = (_QWORD *)v21[1];
          }
          while (v21);
          v20 = v33[1];
        }
      }
      if ((v20 & 0xE) != 0)
      {
        if ((v20 & 8) != 0)
        {
          v40 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 80);
          WebCore::LegacyRenderSVGResourceFilter::postApplyResource(*((uint64_t **)&v32 + 1), (WebCore::RenderElement *)v31, &v40);
          v22 = (_OWORD *)*((_QWORD *)&v31 + 1);
          *(_QWORD *)(*((_QWORD *)&v31 + 1) + 80) = v32;
          *v22 = v33[0];
          v20 = v33[1];
        }
        if ((v20 & 4) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)&v31 + 1) + 80) + 608))(*(_QWORD *)(*((_QWORD *)&v31 + 1) + 80));
          v20 = v33[1];
        }
        if ((v20 & 2) != 0)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)&v31 + 1) + 80) + 104))(*(_QWORD *)(*((_QWORD *)&v31 + 1) + 80), 1);
      }
    }
  }
}

uint64_t WebCore::LegacyInlineFlowBox::visualOverflowRect(uint64_t a1, int a2)
{
  uint64_t v2;
  float v4;
  float v5;
  float v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  float v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
    return *(_QWORD *)(v2 + 20);
  v4 = (float)a2;
  if ((*(_WORD *)(a1 + 52) & 0x800) != 0)
  {
    v6 = v4 * 0.015625;
    v5 = *(float *)(a1 + 44);
  }
  else
  {
    v5 = v4 * 0.015625;
    v6 = *(float *)(a1 + 48);
  }
  v7 = floorf(v5 * 64.0);
  if (v7 > -2147500000.0)
    v8 = (int)v7;
  else
    v8 = 0x80000000;
  if (v7 < 2147500000.0)
    v9 = v8;
  else
    v9 = 0x7FFFFFFFLL;
  v10 = floorf(v6 * 64.0);
  if (v10 > -2147500000.0)
    v11 = (int)v10;
  else
    v11 = 0x80000000;
  if (v10 < 2147500000.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFFLL;
  return v9 | (v12 << 32);
}

void WebCore::SVGRootInlineBox::computePerCharacterLayoutInformation(WebCore::SVGRootInlineBox *this)
{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  _QWORD v5[2];
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _DWORD v18[26];
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 4);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19653DA1CLL);
  }
  if ((*(_BYTE *)(v2 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19653DA3CLL);
  }
  if (*(_BYTE *)(v2 + 46) != 85)
  {
    __break(0xC471u);
    JUMPOUT(0x19653DA5CLL);
  }
  if (*(_DWORD *)(v2 + 500))
  {
    v3 = (uint64_t *)(v2 + 488);
    if ((*(_BYTE *)(v2 + 248) & 1) != 0)
      WebCore::SVGRootInlineBox::reorderValueListsToLogicalOrder((uint64_t)this, (uint64_t)v3);
    v6 = v3;
    v7 = 0u;
    v8 = 0u;
    memset(v9, 0, sizeof(v9));
    v10 = 0;
    v11 = constinit_11;
    v12 = xmmword_1969FE180;
    v16 = xmmword_1969FE190;
    v15 = xmmword_1969FE180;
    v13 = xmmword_1969FE190;
    v14 = constinit_11;
    v18[24] = 0;
    memset(v18, 0, 28);
    v17 = 0u;
    v19 = 0;
    v20 = 0;
    v21 = 1065353216;
    WebCore::SVGRootInlineBox::layoutCharactersInTextBoxes((uint64_t)this, this, &v6);
    WebCore::SVGTextChunkBuilder::layoutTextChunks((uint64_t *)v9, (uint64_t)&v7);
    if (HIDWORD(v7))
      WebCore::SVGTextLayoutEngine::finalizeTransformMatrices((WTF *)&v6, &v7);
    if (HIDWORD(v8))
      WebCore::SVGTextLayoutEngine::finalizeTransformMatrices((WTF *)&v6, &v8);
    v5[0] = 0;
    v5[1] = 0;
    WebCore::SVGRootInlineBox::layoutChildBoxes(this, this, (WebCore::FloatRect *)v5);
    WebCore::SVGRootInlineBox::layoutRootBox(this, (const WebCore::FloatRect *)v5);
    WebCore::SVGTextLayoutEngine::~SVGTextLayoutEngine((WebCore::SVGTextLayoutEngine *)&v6, v4);
  }
}

uint64_t WebCore::SVGRootInlineBox::reorderValueListsToLogicalOrder(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  void *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  WebCore::InlineIterator::Box *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  _QWORD v30[2];
  int v31;
  char v32;
  char *v33;

  if (a1)
  {
    v2 = (WTF *)a1;
    a1 = *(_QWORD *)(a1 + 104);
    if (a1)
      goto LABEL_58;
    a1 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)a1 = 1;
    *(_QWORD *)(a1 + 8) = v2;
    v21 = (unsigned int *)*((_QWORD *)v2 + 13);
    *((_QWORD *)v2 + 13) = a1;
    if (!v21)
      goto LABEL_58;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (v23)
      goto LABEL_57;
    goto LABEL_62;
  }
  while (1)
  {
    v27 = 0;
    v28[0] = a1;
    v29 = 1;
    v26 = 0;
    std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBox::firstLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> const&>((uint64_t)v28, (uint64_t)v30);
    v3 = 0;
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v30) & 1) == 0)
    {
      LOBYTE(v4) = 0x80;
      while (1)
      {
        if (v31 == -1)
          goto LABEL_61;
        v33 = &v32;
        v5 = ((uint64_t (*)(char **, _QWORD *))off_1E344A188[v31])(&v33, v30);
        v4 = v5 >= v4 ? v4 : v5;
        if (v31 == -1)
          goto LABEL_61;
        v33 = &v32;
        v6 = ((uint64_t (*)(char **, _QWORD *))off_1E344A188[v31])(&v33, v30);
        v3 = v3 <= v6 ? v6 : v3;
        if (HIDWORD(v27) != (_DWORD)v27)
          break;
        v7 = WTF::Vector<WebCore::InlineIterator::LeafBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)v30);
        v2 = (WTF *)((char *)v26 + 24 * HIDWORD(v27));
        *(_BYTE *)v2 = 0;
        *((_DWORD *)v2 + 4) = -1;
        v8 = *(unsigned int *)(v7 + 16);
        if ((_DWORD)v8 != -1)
        {
          ((void (*)(char **, WTF *, unint64_t))off_1E344A1A8[v8])(&v33, v2, v7);
LABEL_15:
          *((_DWORD *)v2 + 4) = v8;
        }
        ++HIDWORD(v27);
        if (v31 == -1)
          goto LABEL_61;
        v33 = &v32;
        ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v31])(&v33, v30);
        if (v31 != -1)
        {
          v33 = (char *)v30;
          ((void (*)(char **, _QWORD *, _QWORD *))off_1E344A1B8[v31])(&v33, v30, v30);
        }
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v30) & 1) != 0)
        {
          v9 = v4 | 1;
          goto LABEL_23;
        }
      }
      v2 = (WTF *)((char *)v26 + 24 * HIDWORD(v27));
      *(_BYTE *)v2 = 0;
      *((_DWORD *)v2 + 4) = -1;
      LODWORD(v8) = v31;
      if (v31 == -1)
      {
        ++HIDWORD(v27);
        goto LABEL_61;
      }
      ((void (*)(char **, WTF *, _QWORD *))off_1E344A1A8[v31])(&v33, v2, v30);
      goto LABEL_15;
    }
    v9 = 129;
LABEL_23:
    if (v31 != -1)
      ((void (*)(char **, _QWORD *))off_1E344A198[v31])(&v33, v30);
    if (v29 != -1)
      break;
LABEL_61:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_62:
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, v20);
LABEL_57:
    a1 = *((_QWORD *)v2 + 13);
    if (a1)
    {
      do
LABEL_58:
        v24 = __ldaxr((unsigned int *)a1);
      while (__stlxr(v24 + 1, (unsigned int *)a1));
    }
  }
  v30[0] = &v33;
  result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E344A1C8[v29])(v30, v28);
  v12 = HIDWORD(v27);
  v13 = (unsigned int *)v26;
  if ((*(_BYTE *)(result + 124) & 0x10) == 0 && v9 <= v3)
  {
    if (!HIDWORD(v27))
      goto LABEL_34;
    v16 = v3;
    v17 = (WTF *)((char *)v26 + 24 * HIDWORD(v27));
    while (1)
    {
      v2 = v26;
      if (v26 < v17)
        break;
LABEL_51:
      LOBYTE(v9) = v9 + 1;
      if (v16 < v9)
      {
        v12 = HIDWORD(v27);
        v13 = (unsigned int *)v26;
        goto LABEL_28;
      }
    }
    while (1)
    {
      v18 = *((unsigned int *)v2 + 4);
      if ((_DWORD)v18 == -1)
        goto LABEL_61;
      v30[0] = &v33;
      if (((unsigned int (*)(_QWORD *, WTF *))off_1E344A188[v18])(v30, v2) < v9)
      {
        v2 = (WTF *)((char *)v2 + 24);
        if (v2 < v17)
          continue;
      }
      v19 = v2;
      if (v2 < v17)
      {
        v19 = v2;
        do
        {
          if (WebCore::InlineIterator::Box::bidiLevel(v19) < v9)
            break;
          v19 = (WebCore::InlineIterator::Box *)((char *)v19 + 24);
        }
        while (v19 < v17);
      }
      result = WebCore::SVGRootInlineBox::reorderValueListsToLogicalOrder(WTF::Vector<WebCore::SVGTextLayoutAttributes *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WebCore::InlineIterator::LeafBoxIterator *,WebCore::InlineIterator::LeafBoxIterator *>(a2, (uint64_t *)v2, (uint64_t *)v19);
      v2 = v19;
      if (v19 >= v17)
        goto LABEL_51;
    }
  }
LABEL_28:
  if (v12)
  {
    v14 = 24 * v12;
    do
    {
      v15 = v13[4];
      if ((_DWORD)v15 != -1)
        result = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E344A198[v15])(v30, v13);
      v13[4] = -1;
      v13 += 6;
      v14 -= 24;
    }
    while (v14);
    v13 = (unsigned int *)v26;
  }
LABEL_34:
  if (v13)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    result = WTF::fastFree((WTF *)v13, v11);
  }
  if (v29 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E344A138[v29])(v30, v28);
  return result;
}

uint64_t WebCore::SVGRootInlineBox::layoutCharactersInTextBoxes(uint64_t this, WebCore::LegacyInlineFlowBox *a2, uint64_t **a3)
{
  WebCore::LegacyInlineFlowBox *v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  WTF *v26;
  unint64_t v27;
  unint64_t v28;
  WTF **v29;
  WTF **v30;
  WTF **v31;
  __int16 v32;
  int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  float v43;
  unsigned __int16 *v44;
  uint64_t v45;
  float v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  float v56;
  float v57;
  unsigned int v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WebCore::SVGTextLayoutAttributes *v68;
  int v69;
  unsigned int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  int v77;
  int v78;
  uint64_t v79;
  WebCore::LegacyInlineFlowBox *v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  float *v85;
  float v86;
  int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  float *v100;
  float v101;
  int v102;
  BOOL v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  float v107;
  int v108;
  float v109;
  void *v110;
  uint64_t v111;
  float v112;
  float v113;
  int v114;
  WTF *v115;
  float v116;
  WTF *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  float v122;
  int v123;
  float v124;
  float v125;
  int v126;
  float v127;
  float v128;
  float v129;
  int v130;
  _BOOL4 v131;
  float v132;
  float v133;
  float v134;
  float v135;
  unsigned int v136;
  int v137;
  int32x4_t v138;
  unsigned int v139;
  unsigned int v140;
  char v141;
  float v142;
  float v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  WebCore::SVGElement *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  void *v158;
  float v159;
  WTF *v160;
  uint64_t v161;
  WTF *v162;
  unint64_t v163;
  WTF *v164;
  int8x16_t v165;
  int8x16_t v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  float v176;
  float *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  WTF *v181;
  uint64_t v182;
  float v183;
  float v184;
  uint64_t v185;
  uint64_t v186;
  WebCore::RenderSVGTextPath *v187;
  void *v188;
  int *v189;
  uint64_t v190;
  int v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  int v204;
  int32_t IntPropertyValue;
  uint64_t v206;
  void *v207;
  BOOL v208;
  uint64_t *v210;
  uint64_t v211;
  WTF *v212;
  float v213;
  float v214;
  float v215;
  float v216;
  char v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  WebCore::SVGRootInlineBox *v221;
  _QWORD *v222;
  uint64_t *v223;
  char v224;
  unsigned __int16 *v225;
  int v226;
  float v227;
  WebCore::Length *v228;
  WebCore::Length *v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  WebCore::FontCascade *v233;
  WebCore::SVGElement *v234;
  float v235;
  unsigned int v236;
  unsigned int v237;
  float v238;
  float v239;
  unsigned int v240;
  float v241;
  WebCore::LegacyInlineFlowBox *v242;
  uint64_t v243;
  WTF *v244;
  WTF *v245;
  float v246;
  WebCore::SVGTextLayoutAttributes *v247;
  WTF *v248[5];
  WTF *v249[9];
  __int128 v250;
  unint64_t v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  _BYTE v259[28];
  int v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  int8x16x2_t v265;
  int8x16x2_t v266;
  int8x16x2_t v267;
  int8x16x2_t v268;

  v221 = (WebCore::SVGRootInlineBox *)this;
  v264 = *MEMORY[0x1E0C80C00];
  v3 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)a2 + 9);
  if (v3)
  {
    v222 = a3 + 1;
    while (1)
    {
      this = (*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v3 + 96))(v3);
      v6 = *((_QWORD *)v3 + 4);
      v242 = v3;
      if ((_DWORD)this)
        break;
      if (v6)
        v6 = *(_QWORD *)(v6 + 8);
      if ((*(_BYTE *)(v6 + 45) & 1) == 0)
      {
        v151 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8);
        if (v151)
        {
          *(_DWORD *)(v151 + 24) += 2;
          if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v3 + 104))(v3) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19653EFB4);
          }
          if ((*(_WORD *)(v151 + 28) & 0x20) != 0
            && *(_QWORD *)(*(_QWORD *)(v151 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::textPathTag + 24))
          {
            v249[0] = (WTF *)*a3;
            memset(&v249[1], 0, 64);
            v250 = 0u;
            LODWORD(v251) = 0;
            v252 = constinit_11;
            v253 = xmmword_1969FE180;
            v254 = xmmword_1969FE190;
            v255 = constinit_11;
            v256 = xmmword_1969FE180;
            v257 = xmmword_1969FE190;
            v260 = 0;
            v258 = 0u;
            memset(v259, 0, sizeof(v259));
            v262 = 0;
            v261 = 0;
            v263 = 1065353216;
            WebCore::SVGRootInlineBox::layoutCharactersInTextBoxes(v221, v3, (WebCore::SVGTextLayoutEngine *)v249);
            v186 = *((_QWORD *)v3 + 4);
            if (v186)
              v187 = *(WebCore::RenderSVGTextPath **)(v186 + 8);
            else
              v187 = 0;
            if (*((_BYTE *)v187 + 46) != 86)
            {
              __break(0xC471u);
              JUMPOUT(0x19653F918);
            }
            WebCore::SVGTextLayoutEngine::beginTextPathLayout((WebCore::SVGTextLayoutEngine *)a3, v187, (WebCore::SVGTextLayoutEngine *)v249);
            WebCore::SVGTextLayoutEngine::~SVGTextLayoutEngine((WebCore::SVGTextLayoutEngine *)v249, v188);
            WebCore::SVGRootInlineBox::layoutCharactersInTextBoxes(v221, v3, (WebCore::SVGTextLayoutEngine *)a3);
            this = WebCore::SVGTextLayoutEngine::endTextPathLayout((uint64_t)a3);
          }
          else
          {
            this = WebCore::SVGRootInlineBox::layoutCharactersInTextBoxes(v221, v3, (WebCore::SVGTextLayoutEngine *)a3);
          }
          if (*(_DWORD *)(v151 + 24) == 2)
          {
            if ((*(_WORD *)(v151 + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v151, v152);
          }
          else
          {
            *(_DWORD *)(v151 + 24) -= 2;
          }
        }
      }
LABEL_254:
      v3 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v3 + 1);
      if (!v3)
        return this;
    }
    if (v6)
      v7 = *(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    if ((*(_BYTE *)(v7 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19653EDECLL);
    }
    if (*(_BYTE *)(v7 + 46) != 72)
    {
      __break(0xC471u);
      JUMPOUT(0x19653EE0CLL);
    }
    v8 = *(_QWORD *)(v7 + 32);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    if (*((_DWORD *)v3 + 30))
    {
      if (*((_DWORD *)v3 + 31))
        *((_DWORD *)v3 + 31) = 0;
      this = *((_QWORD *)v3 + 14);
      if (this)
      {
        *((_QWORD *)v3 + 14) = 0;
        *((_DWORD *)v3 + 30) = 0;
        this = WTF::fastFree((WTF *)this, v5);
      }
    }
    v10 = (unsigned __int16)*(_DWORD *)(v9 + 124) >> 13;
    v217 = 2;
    switch((unsigned __int16)*(_DWORD *)(v9 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_13;
      case 3:
      case 5:
        LOBYTE(v10) = 3;
        goto LABEL_13;
      case 4:
        goto LABEL_14;
      default:
        LOBYTE(v10) = 0;
LABEL_13:
        v217 = v10;
LABEL_14:
        *((_BYTE *)a3 + 234) = (v217 & 6) == 2;
        v230 = v7;
        if (!*((_BYTE *)a3 + 235))
          goto LABEL_15;
        v179 = *((_DWORD *)a3 + 76);
        if (v179 == 2)
        {
          v210 = a3[31];
          if (v210)
          {
            this = (*(uint64_t (**)(uint64_t *))(*v210 + 200))(v210);
            if ((this & 1) != 0)
              goto LABEL_250;
          }
        }
        else if (!v179)
        {
          goto LABEL_369;
        }
LABEL_15:
        v11 = *(_QWORD *)(v7 + 32);
        if (v11)
          v12 = *(_QWORD *)(v11 + 8);
        else
          v12 = 0;
        if ((*(_BYTE *)(v12 + 45) & 1) != 0)
        {
          v13 = 0;
        }
        else
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8);
          if (v13)
          {
            v14 = *(_WORD *)(v13 + 28);
            if ((v14 & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19653EE2CLL);
            }
            if ((v14 & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19653EE4CLL);
            }
            v224 = 0;
            *(_DWORD *)(v13 + 24) += 2;
            goto LABEL_22;
          }
        }
        v224 = 1;
LABEL_22:
        v234 = (WebCore::SVGElement *)v13;
        while (1)
        {
          v15 = *(unsigned __int8 *)(v12 + 46);
          if ((v15 - 84) < 3 || v15 == 71)
          {
            if ((*(_BYTE *)(v12 + 45) & 1) == 0)
            {
              v16 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8);
              if (v16)
              {
                if ((*(_WORD *)(v16 + 28) & 0x20) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19653EDCCLL);
                }
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 1216))(v16))
                {
                  *(_DWORD *)(v16 + 24) += 2;
                  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v248, (const WebCore::SVGElement *)v16);
                  v17 = *(uint64_t **)(v16 + 224);
                  v19 = v17 + 3;
                  v18 = v17[3];
                  if (v18
                    && *(_DWORD *)(v18 - 12)
                    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v19, (uint64_t **)v249), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v19, (uint64_t **)&v244), v249[1] != v245))
                  {
                    v20 = v17 + 6;
                  }
                  else
                  {
                    v20 = v17 + 5;
                  }
                  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v20 + 32))(*v20) == 1
                    && WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(v16 + 232), (const WebCore::SVGLengthContext *)v248) > 0.0)
                  {
                    WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)v248, v5);
                    if (*(_DWORD *)(v16 + 24) == 2)
                    {
                      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v16, v5);
                    }
                    else
                    {
                      *(_DWORD *)(v16 + 24) -= 2;
                    }
                    v231 = 1;
LABEL_40:
                    v243 = *(_QWORD *)(v9 + 136);
                    *((_DWORD *)a3 + 51) = 0;
                    *((_DWORD *)a3 + 52) = 0;
                    v24 = *(_QWORD *)(v7 + 104);
                    if (!v24)
                    {
                      v26 = 0;
                      LODWORD(v27) = 0;
                      v28 = 0;
                      v249[0] = (WTF *)&v249[2];
                      LODWORD(v249[1]) = 32;
                      *((_QWORD *)&v250 + 1) = 0;
                      v251 = 0;
LABEL_44:
                      HIDWORD(v249[1]) = v27;
                      v27 = v28;
                      v29 = &v249[2];
                      v30 = &v249[2];
                      goto LABEL_45;
                    }
                    v25 = *(_DWORD *)(v24 + 16);
                    v26 = *(WTF **)(v24 + 8);
                    v27 = *(unsigned int *)(v24 + 4);
                    v249[0] = (WTF *)&v249[2];
                    v249[1] = (WTF *)32;
                    *((_QWORD *)&v250 + 1) = 0;
                    v251 = 0;
                    if ((v25 & 4) != 0)
                    {
                      if (v27 <= 0x20)
                      {
                        v28 = v27;
                        goto LABEL_44;
                      }
                      if (v27 <= 0x29)
                        v163 = 41;
                      else
                        v163 = v27;
                      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v249, v163);
                      HIDWORD(v249[1]) = v27;
                      v30 = (WTF **)v249[0];
                      if (v27 < 0x40)
                      {
                        v29 = (WTF **)v249[0];
                      }
                      else
                      {
                        v29 = (WTF **)((char *)v249[0] + 2 * (v27 & 0xFFFFFFC0));
                        v164 = v249[0];
                        do
                        {
                          v265.val[0] = *(int8x16_t *)v26;
                          v165 = *((int8x16_t *)v26 + 1);
                          v266.val[0] = (int8x16_t)*((_OWORD *)v26 + 2);
                          v166 = *((int8x16_t *)v26 + 3);
                          v26 = (WTF *)((char *)v26 + 64);
                          v267.val[1] = 0uLL;
                          v267.val[0] = v166;
                          v266.val[1] = 0u;
                          v268.val[0] = v165;
                          v265.val[1] = 0u;
                          v167 = (char *)v164;
                          vst2q_s8(v167, v265);
                          v167 += 32;
                          v268.val[1] = 0u;
                          vst2q_s8(v167, v268);
                          v168 = (char *)v164 + 64;
                          vst2q_s8(v168, v266);
                          v169 = (char *)v164 + 96;
                          vst2q_s8(v169, v267);
                          v164 = (WTF *)((char *)v164 + 128);
                        }
                        while (v164 != (WTF *)v29);
                      }
LABEL_45:
                      v31 = (WTF **)((char *)v30 + 2 * v27);
                      while (v29 != v31)
                      {
                        v32 = *(unsigned __int8 *)v26;
                        v26 = (WTF *)((char *)v26 + 1);
                        *(_WORD *)v29 = v32;
                        v29 = (WTF **)((char *)v29 + 2);
                      }
                      v26 = v249[0];
                      v27 = HIDWORD(v249[1]);
                    }
                    *((_QWORD *)&v250 + 1) = v26;
                    v251 = v27;
                    v232 = *(_QWORD *)(v9 + 112);
                    v233 = (WebCore::FontCascade *)(v232 + 32);
                    v33 = *(_BYTE *)(v243 + 9) & 3;
                    if (v33 != 3)
                    {
                      if (v33 == 1)
                      {
                        v182 = WebCore::FontCascade::metricsOfPrimaryFont(v233, v5);
                        v183 = *(float *)(v182 + 4) + *(float *)(v182 + 12);
                        v184 = -0.5;
                      }
                      else
                      {
                        v34 = 0.0;
                        if (v33 != 2)
                          goto LABEL_52;
                        v185 = WebCore::FontCascade::metricsOfPrimaryFont(v233, v5);
                        v183 = *(float *)(v185 + 4) + *(float *)(v185 + 12);
                        v184 = 0.5;
                      }
                      v34 = v183 * v184;
                      goto LABEL_52;
                    }
                    v181 = *(WTF **)(*(_QWORD *)(v243 + 56) + 40);
                    v248[0] = v181;
                    if (((unint64_t)v181 & 0xFF00000000) == 0x200000000)
                    {
                      v34 = (float)(*(float *)&v181 / 100.0) * *(float *)(v232 + 204);
                    }
                    else
                    {
                      WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v244, v234);
                      v34 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)v248, (const WebCore::SVGLengthContext *)&v244);
                      WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)&v244, v207);
                    }
LABEL_52:
                    v35 = *(_QWORD *)(v7 + 32);
                    if (v35)
                    {
                      v35 = *(_QWORD *)(v35 + 8);
                      if ((*(_BYTE *)(v7 + 45) & 2) != 0)
                        v36 = v35;
                      else
                        v36 = v7;
                    }
                    else
                    {
                      v36 = v7;
                    }
                    v37 = *(_BYTE *)(*(_QWORD *)(v36 + 136) + 8) & 0xF;
                    if ((*(_BYTE *)(*(_QWORD *)(v36 + 136) + 8) & 0xF) != 0)
                    {
                      v177 = (float *)WebCore::FontCascade::metricsOfPrimaryFont(v233, v5);
                      v43 = v177[1];
                      v176 = v177[3];
                      if ((v37 - 5) >= 3)
                      {
                        switch(v37)
                        {
                          case 1:
                          case 2:
                            break;
                          case 3:
LABEL_362:
                            v43 = v177[9] * 0.5;
                            break;
                          case 4:
LABEL_364:
                            v43 = v43 - v176;
                            goto LABEL_366;
                          case 9:
LABEL_359:
                            v43 = (float)(v43 * 8.0) / 10.0;
                            break;
                          case 10:
LABEL_366:
                            v43 = v43 * 0.5;
                            break;
                          default:
                            goto LABEL_67;
                        }
                      }
                      else
                      {
LABEL_354:
                        v43 = -v176;
                      }
                    }
                    else
                    {
                      if (*((_BYTE *)a3 + 234))
                        v38 = 8;
                      else
                        v38 = 5;
                      while (2)
                      {
                        v39 = v35;
                        if ((*(_BYTE *)(v35 + 45) & 2) != 0)
                          v39 = *(_QWORD *)(*(_QWORD *)(v35 + 32) + 8);
                        v40 = *(unsigned __int8 *)(*(_QWORD *)(v39 + 136) + 8);
                        if (v40 >= 0x10)
                          v41 = v40 >> 4;
                        else
                          v41 = v38;
                        if (v41 == 5)
                        {
LABEL_66:
                          WebCore::FontCascade::metricsOfPrimaryFont(v233, v5);
LABEL_67:
                          v43 = 0.0;
                        }
                        else
                        {
                          switch(v41)
                          {
                            case 2u:
                            case 3u:
                              v170 = *(_QWORD *)(v35 + 32);
                              v35 = 0;
                              if (v170)
                                v35 = *(_QWORD *)(v170 + 8);
                              continue;
                            case 4u:
                            case 0xAu:
                              v176 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(v233, v5) + 12);
                              goto LABEL_354;
                            case 6u:
                              v43 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(v233, v5) + 4);
                              goto LABEL_359;
                            case 7u:
                              v43 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(v233, v5) + 4);
                              goto LABEL_366;
                            case 8u:
                              v178 = WebCore::FontCascade::metricsOfPrimaryFont(v233, v5);
                              v43 = *(float *)(v178 + 4);
                              v176 = *(float *)(v178 + 12);
                              goto LABEL_364;
                            case 9u:
                              v177 = (float *)WebCore::FontCascade::metricsOfPrimaryFont(v233, v5);
                              goto LABEL_362;
                            case 0xBu:
                              v43 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(v233, v5) + 4);
                              break;
                            default:
                              goto LABEL_66;
                          }
                        }
                        break;
                      }
                    }
                    v44 = 0;
                    v45 = 0;
                    v226 = 0;
                    v223 = (uint64_t *)(v7 + 440);
                    v241 = v34 - v43;
                    v46 = 0.0;
                    v228 = (WebCore::Length *)(v232 + 240);
                    v229 = (WebCore::Length *)(v232 + 232);
                    do
                    {
                      v47 = *(_DWORD *)(v7 + 452);
                      v48 = *((unsigned int *)a3 + 52);
                      if (v48 >= v47)
                        break;
                      v49 = *((_DWORD *)v3 + 18);
                      v50 = *((_DWORD *)v3 + 19);
                      v51 = *(_QWORD *)(v7 + 440);
                      v52 = *((_DWORD *)a3 + 51);
                      v240 = v45;
                      if (v52 >= v49)
                      {
                        LODWORD(v53) = *((_DWORD *)a3 + 52);
                        goto LABEL_72;
                      }
                      v189 = (int *)(v51 + 40 * v48 + 8);
                      v190 = -v48;
                      do
                      {
                        v191 = *v189;
                        v189 += 10;
                        v52 += v191;
                        if (v47 - 1 == (_DWORD)v48)
                        {
                          *((_DWORD *)a3 + 51) = v52;
                          *((_DWORD *)a3 + 52) = v47;
                          v3 = v242;
                          LOBYTE(v45) = v240;
                          goto LABEL_240;
                        }
                        --v190;
                        LODWORD(v48) = v48 + 1;
                      }
                      while (v52 < v49);
                      *((_DWORD *)a3 + 51) = v52;
                      *((_DWORD *)a3 + 52) = v48;
                      v53 = -v190;
                      v3 = v242;
                      v7 = v230;
                      v45 = v240;
LABEL_72:
                      if (v52 >= v50 + v49)
                        break;
                      v54 = v53;
                      v55 = v51 + 40 * v53;
                      v56 = *(float *)v55;
                      v57 = *(float *)(v55 + 4);
                      v58 = *(_DWORD *)(v55 + 8);
                      v59 = *(unsigned __int8 *)(v55 + 16);
                      v60 = *(WTF::StringImpl **)(v55 + 24);
                      if (v60)
                        *(_DWORD *)v60 += 2;
                      v61 = *(WTF::StringImpl **)(v51 + 40 * v54 + 32);
                      if (v61)
                        *(_DWORD *)v61 += 2;
                      if (v56 == 0.0)
                      {
                        v208 = v57 == 0.0 && v59 == 0;
                        if (v208 && v58 == 1)
                        {
                          *((_DWORD *)a3 + 51) = v52 + 1;
                          *((_DWORD *)a3 + 52) = v48 + 1;
                          v137 = 2;
                          goto LABEL_189;
                        }
                      }
                      v62 = *((unsigned int *)a3 + 48);
                      v63 = *((_DWORD *)*a3 + 3);
                      if (v63 == (_DWORD)v62)
                        goto LABEL_356;
                      if (v63 <= v62)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19653F980);
                      }
                      v64 = **a3;
                      v247 = *(WebCore::SVGTextLayoutAttributes **)(v64 + 8 * v62);
                      v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v247 + 8) + 104);
                      if (v65)
                        LODWORD(v65) = *(_DWORD *)(v65 + 4);
                      if (*((_DWORD *)a3 + 49) != (_DWORD)v65)
                        goto LABEL_83;
                      v154 = (v62 + 1);
                      *((_DWORD *)a3 + 48) = v154;
                      if (v63 == (_DWORD)v154)
                      {
LABEL_356:
                        v137 = 3;
                        goto LABEL_189;
                      }
                      if (v63 <= v154)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19653F998);
                      }
                      v247 = *(WebCore::SVGTextLayoutAttributes **)(v64 + 8 * v154);
                      *((_DWORD *)a3 + 49) = 0;
                      *((_DWORD *)a3 + 50) = 0;
LABEL_83:
                      v225 = v44;
                      v236 = v58;
                      v66 = 0;
                      v67 = 0;
                      v235 = v46;
                      v239 = v56;
                      while (1)
                      {
                        v68 = v247;
                        v69 = *((_DWORD *)v247 + 7);
                        v70 = *((_DWORD *)a3 + 50);
                        if (v70 != v69)
                          break;
LABEL_438:
                        if ((WebCore::SVGTextLayoutEngine::currentLogicalCharacterAttributes((WebCore::SVGTextLayoutEngine *)a3, &v247) & 1) == 0)
                        {
                          v137 = 3;
                          v44 = v225;
                          v45 = v240;
                          goto LABEL_182;
                        }
                      }
                      v71 = v66;
                      v72 = v67;
                      while (1)
                      {
                        if (*((_DWORD *)v68 + 7) <= v70)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19653F988);
                        }
                        v73 = *((_QWORD *)v68 + 2);
                        v74 = v73 + 40 * v70;
                        v76 = *(float *)v74;
                        v75 = *(float *)(v74 + 4);
                        v237 = *(_DWORD *)(v74 + 8);
                        v66 = *(WTF::StringImpl **)(v74 + 24);
                        if (v66)
                          *(_DWORD *)v66 += 2;
                        if (v71)
                        {
                          if (*(_DWORD *)v71 == 2)
                            WTF::StringImpl::destroy(v71, v42);
                          else
                            *(_DWORD *)v71 -= 2;
                        }
                        v67 = *(WTF::StringImpl **)(v73 + 40 * v70 + 32);
                        if (v67)
                          *(_DWORD *)v67 += 2;
                        if (v72)
                        {
                          if (*(_DWORD *)v72 == 2)
                            WTF::StringImpl::destroy(v72, v42);
                          else
                            *(_DWORD *)v72 -= 2;
                        }
                        if (v76 != 0.0)
                          break;
                        v77 = *((_DWORD *)a3 + 49);
                        if (v75 != 0.0)
                          goto LABEL_99;
                        v70 = *((_DWORD *)a3 + 50) + 1;
                        *((_DWORD *)a3 + 49) = v77 + v237;
                        *((_DWORD *)a3 + 50) = v70;
                        v71 = v66;
                        v72 = v67;
                        v46 = v235;
                        if (v70 == v69)
                          goto LABEL_438;
                      }
                      v77 = *((_DWORD *)a3 + 49);
LABEL_99:
                      v78 = v77 + 1;
                      v79 = *((_QWORD *)v247 + 1);
                      v80 = v242;
                      if (!v79)
                        goto LABEL_107;
                      v81 = *(_DWORD *)(v79 - 8);
                      v82 = 9 * ((v77 - (v78 << 15)) ^ ((v77 - (v78 << 15)) >> 10));
                      v83 = (v82 ^ (v82 >> 6)) + ~((v82 ^ (v82 >> 6)) << 11);
                      v84 = v81 & (v83 ^ HIWORD(v83));
                      v85 = (float *)(v79 + 24 * v84);
                      v86 = *v85;
                      if (*(_DWORD *)v85 != v78)
                      {
                        v87 = 1;
                        while (v86 != 0.0)
                        {
                          v84 = (v84 + v87) & v81;
                          v85 = (float *)(v79 + 24 * v84);
                          v86 = *v85;
                          ++v87;
                          if (*(_DWORD *)v85 == v78)
                            goto LABEL_106;
                        }
                        v85 = (float *)(v79 + 24 * *(unsigned int *)(v79 - 4));
                      }
LABEL_106:
                      if (v85 != (float *)(v79 + 24 * *(unsigned int *)(v79 - 4)))
                      {
                        v88 = v85[1];
                        v89 = v85[2];
                        v90 = v85[3];
                        v91 = v85[4];
                        v92 = v85[5];
                      }
                      else
                      {
LABEL_107:
                        v88 = 3.4028e38;
                        v89 = 3.4028e38;
                        v90 = 3.4028e38;
                        v91 = 3.4028e38;
                        v92 = 3.4028e38;
                      }
                      v93 = *((_QWORD *)v242 + 2);
                      v94 = *(_QWORD *)(*(_QWORD *)v247 + 8);
                      if (v77 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v94 + 32) + 8) + 46) != 86)
                      {
LABEL_109:
                        v95 = *(_QWORD *)(v94 + 432);
                        if (!v95)
                          goto LABEL_517;
                        v96 = *(_DWORD *)(v95 - 8);
                        v97 = 9 * ((v77 - (v78 << 15)) ^ ((v77 - (v78 << 15)) >> 10));
                        v98 = (v97 ^ (v97 >> 6)) + ~((v97 ^ (v97 >> 6)) << 11);
                        v99 = v96 & (v98 ^ HIWORD(v98));
                        v100 = (float *)(v95 + 24 * v99);
                        v101 = *v100;
                        if (*(_DWORD *)v100 != v78)
                        {
                          v102 = 1;
                          while (v101 != 0.0)
                          {
                            v99 = (v99 + v102) & v96;
                            v100 = (float *)(v95 + 24 * v99);
                            v101 = *v100;
                            ++v102;
                            if (*(_DWORD *)v100 == v78)
                              goto LABEL_116;
                          }
                          v100 = (float *)(v95 + 24 * *(unsigned int *)(v95 - 4));
                        }
LABEL_116:
                        if (v100 == (float *)(v95 + 24 * *(unsigned int *)(v95 - 4))
                          || v100[1] == 3.4028e38 && v100[2] == 3.4028e38)
                        {
LABEL_517:
                          if (*((_BYTE *)a3 + 232))
                            v103 = v93 == 0;
                          else
                            v103 = 1;
                          v104 = !v103;
                        }
                        else
                        {
LABEL_222:
                          v104 = 1;
                        }
                      }
                      else
                      {
                        v206 = *(unsigned int *)(v94 + 40);
                        if (v206 | ((unint64_t)*(unsigned __int8 *)(v94 + 44) << 32))
                        {
                          v80 = v242;
                          if (!*(_QWORD *)((v206 | ((unint64_t)*(unsigned __int8 *)(v94 + 44) << 32)) + 8))
                            goto LABEL_222;
                          goto LABEL_109;
                        }
                        v104 = 1;
                        v80 = v242;
                      }
                      if (*((_DWORD *)a3 + 51) == *((_DWORD *)v80 + 18))
                      {
                        if (!*((_BYTE *)a3 + 235) && *((_BYTE *)a3 + 232) && v93)
                        {
                          if (*((_BYTE *)a3 + 234))
                          {
                            if (v89 == 3.4028e38)
                              goto LABEL_285;
                          }
                          else if (v88 == 3.4028e38)
                          {
LABEL_285:
                            v155 = *(_QWORD *)(*(_QWORD *)(v93 + 32) + 8);
                            if (v155)
                            {
                              v156 = *(unsigned __int8 *)(v155 + 46);
                              if (((v156 - 84) < 3 || v156 == 71) && (*(_BYTE *)(v155 + 45) & 1) == 0)
                              {
                                v157 = *(_QWORD *)(*(_QWORD *)(v155 + 24) + 8);
                                if (v157)
                                {
                                  if ((*(_WORD *)(v157 + 28) & 0x20) == 0)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19653F50CLL);
                                  }
                                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v157 + 1216))(v157))
                                  {
                                    *(_DWORD *)(v157 + 24) += 2;
                                    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v244, (const WebCore::SVGElement *)v157);
                                    v159 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(v157 + 232), (const WebCore::SVGLengthContext *)&v244)+ *((float *)a3 + 57);
                                    if (*((_BYTE *)a3 + 233))
                                      v89 = v159;
                                    else
                                      v88 = v159;
                                    v160 = v244;
                                    v244 = 0;
                                    if (v160)
                                    {
                                      do
                                      {
                                        v139 = __ldaxr((unsigned int *)v160);
                                        v140 = v139 - 1;
                                      }
                                      while (__stlxr(v140, (unsigned int *)v160));
                                      if (!v140)
                                      {
                                        atomic_store(1u, (unsigned int *)v160);
                                        v211 = *((unsigned int *)v160 + 7);
                                        if ((_DWORD)v211)
                                          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v160 + 2), (WTF::StringImpl *)(*((_QWORD *)v160 + 2) + 32 * v211));
                                        v212 = (WTF *)*((_QWORD *)v160 + 2);
                                        if (v212)
                                        {
                                          *((_QWORD *)v160 + 2) = 0;
                                          *((_DWORD *)v160 + 6) = 0;
                                          WTF::fastFree(v212, v158);
                                        }
                                        WTF::fastFree(v160, v158);
                                      }
                                    }
                                    v80 = v242;
                                    if (*(_DWORD *)(v157 + 24) == 2)
                                    {
                                      if ((*(_WORD *)(v157 + 30) & 0x400) == 0)
                                        WebCore::Node::removedLastRef((WebCore::Node *)v157, v158);
                                    }
                                    else
                                    {
                                      *(_DWORD *)(v157 + 24) -= 2;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (v104)
                          v141 = 16;
                        else
                          v141 = 0;
                        *((_BYTE *)v80 + 84) = *((_BYTE *)v80 + 84) & 0xEF | v141;
                      }
                      v46 = 0.0;
                      if (v92 != 3.4028e38)
                        v46 = v92;
                      v105 = *(unsigned __int16 *)(v243 + 4);
                      if (*((_BYTE *)a3 + 234))
                        v106 = v105 >> 13;
                      else
                        v106 = (v105 >> 10) & 7;
                      v44 = (unsigned __int16 *)((char *)v26 + 2 * *((unsigned int *)a3 + 51));
                      if (v106)
                      {
                        v107 = 90.0;
                        switch(v106)
                        {
                          case 1u:
                            break;
                          case 2u:
                            *(float *)&v173 = 180.0;
                            goto LABEL_414;
                          case 3u:
                            *(float *)&v173 = 270.0;
LABEL_414:
                            v107 = *(float *)&v173;
                            break;
                          case 4u:
                            IntPropertyValue = u_getIntPropertyValue(*v44, UCHAR_EAST_ASIAN_WIDTH);
                            if (IntPropertyValue >= 6)
                              goto LABEL_129;
                            v107 = flt_1969FE1A0[IntPropertyValue];
                            break;
                          default:
                            goto LABEL_129;
                        }
                      }
                      else
                      {
LABEL_129:
                        v107 = 0.0;
                      }
                      v108 = *((unsigned __int8 *)a3 + 234);
                      v109 = fmodf(v107, 180.0);
                      v111 = WebCore::FontCascade::metricsOfPrimaryFont(v233, v110);
                      if (v108)
                      {
                        v192 = *(float *)(v111 + 4) - *(float *)(v111 + 12);
                        if (v107 == 0.0)
                        {
                          v113 = (float)(v192 - v239) * 0.5;
                          v112 = *(float *)(v111 + 4);
                        }
                        else
                        {
                          if (v107 == 180.0)
                          {
                            v192 = (float)(v239 + v192) * 0.5;
                            goto LABEL_390;
                          }
                          v193 = v239;
                          if (v107 != 270.0)
                          {
                            v192 = 0.0;
LABEL_390:
                            v193 = 0.0;
                          }
                          v113 = v192;
                          v112 = v193;
                          if (v109 != 0.0)
                            goto LABEL_137;
                        }
LABEL_452:
                        v239 = v57;
                        goto LABEL_137;
                      }
                      if (v107 == 90.0)
                      {
                        v112 = -v239;
LABEL_134:
                        v113 = 0.0;
                      }
                      else
                      {
                        if (v107 == 180.0)
                        {
                          v112 = -*(float *)(v111 + 4);
                        }
                        else
                        {
                          v112 = 0.0;
                          if (v107 != 270.0)
                            goto LABEL_134;
                        }
                        v113 = v239;
                      }
                      if (v107 != 0.0 && v109 != 0.0)
                        goto LABEL_452;
LABEL_137:
                      v238 = v112;
                      v227 = v113;
                      v114 = *((unsigned __int8 *)a3 + 235);
                      if (!*((_BYTE *)a3 + 235))
                      {
                        if (v88 == 3.4028e38)
                          v88 = *((float *)a3 + 53) + *((float *)a3 + 55);
                        if (v89 == 3.4028e38)
                          v89 = *((float *)a3 + 54) + *((float *)a3 + 56);
                        *((_DWORD *)a3 + 55) = 0;
                        *((_DWORD *)a3 + 56) = 0;
                      }
                      if (v90 != 3.4028e38 || v91 != 3.4028e38)
                      {
                        v143 = 0.0;
                        if (v90 != 3.4028e38)
                          v143 = v90;
                        if (v91 == 3.4028e38)
                          v91 = 0.0;
                        if (v114)
                        {
                          if (*((_BYTE *)a3 + 234))
                          {
                            v143 = v143 + *((float *)a3 + 55);
                            goto LABEL_232;
                          }
                          *((float *)a3 + 55) = v143;
                          v91 = v91 + *((float *)a3 + 56);
                        }
                        else
                        {
LABEL_232:
                          *((float *)a3 + 55) = v143;
                        }
                        *((float *)a3 + 56) = v91;
                      }
                      v115 = *(WTF **)(*(_QWORD *)(v243 + 32) + 4);
                      v248[0] = v115;
                      if (((unint64_t)v115 & 0xFF00000000) == 0x200000000)
                      {
                        v116 = (float)(*(float *)&v115 / 100.0) * *(float *)(v232 + 204);
LABEL_320:
                        v45 = v240;
                        goto LABEL_149;
                      }
                      WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v244, v234);
                      v116 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)v248, (const WebCore::SVGLengthContext *)&v244);
                      v117 = v244;
                      v244 = 0;
                      v45 = v240;
                      if (v117)
                      {
                        do
                        {
                          v118 = __ldaxr((unsigned int *)v117);
                          v119 = v118 - 1;
                        }
                        while (__stlxr(v119, (unsigned int *)v117));
                        if (!v119)
                        {
                          atomic_store(1u, (unsigned int *)v117);
                          v161 = *((unsigned int *)v117 + 7);
                          if ((_DWORD)v161)
                            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v117 + 2), (WTF::StringImpl *)(*((_QWORD *)v117 + 2) + 32 * v161));
                          v162 = (WTF *)*((_QWORD *)v117 + 2);
                          if (v162)
                          {
                            *((_QWORD *)v117 + 2) = 0;
                            *((_DWORD *)v117 + 6) = 0;
                            WTF::fastFree(v162, v42);
                          }
                          WTF::fastFree(v117, v42);
                          goto LABEL_320;
                        }
                      }
LABEL_149:
                      v120 = v232;
                      if (v116 != 0.0)
                        goto LABEL_345;
                      v121 = *(unsigned __int8 *)(v232 + 236);
                      if (v121 != 4)
                      {
                        if (v121 == 3)
                        {
                          if (*(_BYTE *)(v232 + 238))
                            v216 = *(float *)v229;
                          else
                            v216 = (float)*(int *)v229;
                          v120 = v232;
                          v122 = (float)(v216 / 100.0) * *(float *)(v232 + 204);
                        }
                        else
                        {
                          v120 = v232;
                          v45 = v240;
                          if (v121 != 11)
                            goto LABEL_154;
                          WebCore::Length::nonNanCalculatedValue(v229, *(float *)(v232 + 204));
                        }
                        v45 = v240;
                        goto LABEL_153;
                      }
                      v122 = *(_BYTE *)(v232 + 238) ? *(float *)v229 : (float)*(int *)v229;
LABEL_153:
                      if (v122 != 0.0)
                        goto LABEL_345;
LABEL_154:
                      v123 = *(unsigned __int8 *)(v120 + 244);
                      v124 = 0.0;
                      if (v123 != 4)
                      {
                        if (v123 == 3)
                        {
                          if (*(_BYTE *)(v232 + 246))
                            v215 = *(float *)v228;
                          else
                            v215 = (float)*(int *)v228;
                          v125 = (float)(v215 / 100.0) * *(float *)(v232 + 204);
                          goto LABEL_480;
                        }
                        if (v123 == 11)
                        {
                          WebCore::Length::nonNanCalculatedValue(v228, *(float *)(v232 + 204));
LABEL_480:
                          v45 = v240;
                          goto LABEL_157;
                        }
LABEL_352:
                        v45 = v240;
                        goto LABEL_158;
                      }
                      if (*(_BYTE *)(v120 + 246))
                        v125 = *(float *)v228;
                      else
                        v125 = (float)*(int *)v228;
LABEL_157:
                      if (v125 != 0.0)
                      {
LABEL_345:
                        v124 = v116 + WebCore::FontCascade::letterSpacing(v233);
                        if (v26 && v225 && WebCore::FontCascade::wordSpacing(v233) != 0.0)
                        {
                          if ((v174 = *v44, v174 <= 0x20) && ((1 << v174) & 0x100000600) != 0 || v174 == 160)
                          {
                            v175 = *v225;
                            if ((v175 > 0x20 || ((1 << v175) & 0x100000600) == 0) && v175 != 160)
                              v124 = v124 + WebCore::FontCascade::wordSpacing(v233);
                          }
                        }
                        goto LABEL_352;
                      }
LABEL_158:
                      if (!*((_BYTE *)a3 + 235))
                      {
                        v126 = *((unsigned __int8 *)a3 + 234);
                        if (*((_BYTE *)a3 + 234))
                          v88 = v241 + v88;
                        else
                          v89 = v89 - v241;
                        v127 = v88 + *((float *)a3 + 55);
                        v128 = v89 + *((float *)a3 + 56);
                        goto LABEL_162;
                      }
                      v194 = *((float *)a3 + 82);
                      v195 = v239 * v194;
                      v196 = *((float *)a3 + 80);
                      v197 = *((float *)a3 + 79);
                      if (*((_BYTE *)a3 + 234))
                      {
                        v198 = v89 + v197;
                        if (v89 != 3.4028e38)
                          v196 = v198;
                        v199 = *((float *)a3 + 55);
                        v200 = *((float *)a3 + 56) + v196;
                        *((_DWORD *)a3 + 56) = 0;
                        v227 = v227 + (float)(v241 + v199);
                        v201 = v195 * 0.5;
                        v238 = v238 - (float)(v195 * 0.5);
                      }
                      else
                      {
                        v213 = v88 + v197;
                        if (v88 != 3.4028e38)
                          v196 = v213;
                        v214 = *((float *)a3 + 56);
                        v200 = *((float *)a3 + 55) + v196;
                        *((_DWORD *)a3 + 55) = 0;
                        v201 = v195 * 0.5;
                        v227 = v227 - (float)(v195 * 0.5);
                        v238 = v238 + (float)(v214 - v241);
                      }
                      v202 = v201 + v200;
                      *((float *)a3 + 80) = v200 + (float)((float)(v195 + *((float *)a3 + 81)) + (float)(v124 * v194));
                      if (v202 < 0.0)
                      {
                        v137 = 2;
                        v45 = v240;
                        v46 = v235;
                        v136 = v237;
                        goto LABEL_181;
                      }
                      if (v202 <= *((float *)a3 + 78))
                      {
                        WebCore::Path::traversalStateAtLength((WebCore::Path *)(a3 + 30), v202, (uint64_t)&v244);
                        v128 = *((float *)&v245 + 1);
                        v127 = *(float *)&v245;
                        v126 = *((unsigned __int8 *)a3 + 234);
                        if (*((_BYTE *)a3 + 234))
                          v46 = v246 + -90.0;
                        else
                          v46 = v246;
                        v45 = v240;
LABEL_162:
                        v129 = v238;
                        if (v104)
                        {
                          if (v126)
                            v142 = v128;
                          else
                            v142 = v127;
                          *((float *)a3 + 57) = v142;
                          *((_BYTE *)a3 + 233) = v126;
                          *((_BYTE *)a3 + 232) = v231;
                        }
                        v130 = 1;
                        if (*((float *)a3 + 55) == 0.0
                          && !v126
                          && *((float *)a3 + 56) == 0.0
                          && !*((_BYTE *)a3 + 235)
                          && v46 == 0.0)
                        {
                          v131 = v107 != 0.0;
                          if (v46 != v235)
                            v131 = 1;
                          v130 = v231 | v226 | v131;
                        }
                        if ((v45 & v130 & 1) != 0)
                        {
                          WebCore::SVGTextLayoutEngine::recordTextFragment((uint64_t)a3, (uint64_t)v242, v223);
                          v129 = v238;
                          v45 = v240;
                          v226 = 0;
                        }
                        if (((v45 ^ 1 | v130) & 1) != 0)
                        {
                          a3[8] = *(uint64_t **)((char *)a3 + 204);
                          *((float *)a3 + 19) = v127;
                          *((float *)a3 + 20) = v128;
                          if (v46 != 0.0)
                          {
                            WebCore::AffineTransform::rotate((float64x2_t *)a3 + 6, v46);
                            v129 = v238;
                          }
                          if (v227 != 0.0 || v129 != 0.0)
                            WebCore::AffineTransform::translate((WebCore::AffineTransform *)(a3 + 12), v227, v129);
                          if (v107 != 0.0)
                            WebCore::AffineTransform::rotate((float64x2_t *)a3 + 6, v107);
                          if (*((_BYTE *)a3 + 235))
                          {
                            v203 = *((float *)a3 + 82);
                            *((_DWORD *)a3 + 18) = (_DWORD)a3[9] & 0x7FFFFFFF | ((v203 != 1.0) << 31);
                            v204 = *((unsigned __int8 *)a3 + 234);
                            if (v203 != 1.0)
                            {
                              v218 = v203;
                              v219 = 20;
                              if (!*((_BYTE *)a3 + 234))
                                v219 = 18;
                              v220 = 21;
                              if (!*((_BYTE *)a3 + 234))
                                v220 = 19;
                              *(double *)&a3[v219] = *(double *)&a3[v219] * v218;
                              *(double *)&a3[v220] = *(double *)&a3[v220] * v218;
                            }
                            v240 = 1;
                            goto LABEL_404;
                          }
                          *((_DWORD *)a3 + 18) &= ~0x80000000;
                          v45 = 1;
LABEL_175:
                          if (v124 != 0.0)
                            v226 = 1;
                          v132 = v127 - *((float *)a3 + 55);
                          if (*((_BYTE *)a3 + 234))
                          {
                            v134 = v239 + v124;
                            v133 = v132 - v241;
                          }
                          else
                          {
                            v133 = (float)(v239 + v124) + v132;
                            v134 = v241;
                          }
                          v135 = (float)(v128 - *((float *)a3 + 56)) + v134;
                        }
                        else
                        {
                          if (!*((_BYTE *)a3 + 235))
                            goto LABEL_175;
                          v204 = *((unsigned __int8 *)a3 + 234);
LABEL_404:
                          v133 = v239 + v127;
                          v135 = v239 + v128;
                          if (v204)
                            v133 = v127;
                          else
                            v135 = v128;
                          v45 = v240;
                        }
                        v136 = v237;
                        v137 = 0;
                        *((float *)a3 + 53) = v133;
                        *((float *)a3 + 54) = v135;
LABEL_181:
                        v138.i64[0] = v136 | 0x100000000;
                        v138.i64[1] = v236 | 0x100000000;
                        *(int32x4_t *)((char *)a3 + 196) = vaddq_s32(*(int32x4_t *)((char *)a3 + 196), v138);
                        goto LABEL_182;
                      }
                      v137 = 3;
                      v45 = v240;
                      v46 = v235;
LABEL_182:
                      if (v67)
                      {
                        if (*(_DWORD *)v67 == 2)
                        {
                          v146 = v45;
                          WTF::StringImpl::destroy(v67, v42);
                          v45 = v146;
                        }
                        else
                        {
                          *(_DWORD *)v67 -= 2;
                        }
                      }
                      if (v66)
                      {
                        if (*(_DWORD *)v66 == 2)
                        {
                          v147 = v45;
                          WTF::StringImpl::destroy(v66, v42);
                          v45 = v147;
                        }
                        else
                        {
                          *(_DWORD *)v66 -= 2;
                        }
                      }
                      v3 = v242;
                      v7 = v230;
LABEL_189:
                      if (v61)
                      {
                        if (*(_DWORD *)v61 == 2)
                        {
                          v144 = v45;
                          WTF::StringImpl::destroy(v61, v42);
                          v45 = v144;
                        }
                        else
                        {
                          *(_DWORD *)v61 -= 2;
                        }
                      }
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                        {
                          v145 = v45;
                          WTF::StringImpl::destroy(v60, v42);
                          v45 = v145;
                        }
                        else
                        {
                          *(_DWORD *)v60 -= 2;
                        }
                      }
                    }
                    while (v137 != 3);
LABEL_240:
                    if ((v45 & 1) != 0)
                      WebCore::SVGTextLayoutEngine::recordTextFragment((uint64_t)a3, (uint64_t)v3, v223);
                    this = (uint64_t)v249[0];
                    v148 = &v249[2] == (WTF **)v249[0] || v249[0] == 0;
                    v149 = v234;
                    if (!v148)
                    {
                      v249[0] = 0;
                      LODWORD(v249[1]) = 0;
                      this = WTF::fastFree((WTF *)this, v42);
                      v149 = v234;
                    }
                    if ((v224 & 1) == 0)
                    {
                      if (*((_DWORD *)v149 + 6) == 2)
                      {
                        if ((*((_WORD *)v149 + 15) & 0x400) == 0)
                          this = (uint64_t)WebCore::Node::removedLastRef(v149, v42);
                      }
                      else
                      {
                        *((_DWORD *)v149 + 6) -= 2;
                      }
                    }
LABEL_250:
                    if (!*((_BYTE *)a3 + 235))
                    {
                      v249[0] = v3;
                      v150 = *((unsigned int *)a3 + 5);
                      if ((_DWORD)v150 == *((_DWORD *)a3 + 4))
                      {
                        this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v222, v150 + 1, (unint64_t)v249);
                        v150 = *((unsigned int *)a3 + 5);
                        a3[1][v150] = *(_QWORD *)this;
                      }
                      else
                      {
                        *(_QWORD *)(*v222 + 8 * v150) = v3;
                      }
                      *((_DWORD *)a3 + 5) = v150 + 1;
                      goto LABEL_254;
                    }
LABEL_369:
                    v249[0] = v3;
                    v180 = *((unsigned int *)a3 + 9);
                    if ((_DWORD)v180 == *((_DWORD *)a3 + 8))
                    {
                      this = (uint64_t)WTF::Vector<WebCore::RenderBox *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderBox *&>((uint64_t)(a3 + 3), (unint64_t)v249);
                      v3 = v242;
                    }
                    else
                    {
                      v3 = v242;
                      a3[3][v180] = (uint64_t)v242;
                      *((_DWORD *)a3 + 9) = v180 + 1;
                    }
                    goto LABEL_254;
                  }
                  v21 = v248[0];
                  v248[0] = 0;
                  if (v21)
                  {
                    do
                    {
                      v22 = __ldaxr((unsigned int *)v21);
                      v23 = v22 - 1;
                    }
                    while (__stlxr(v23, (unsigned int *)v21));
                    if (!v23)
                    {
                      atomic_store(1u, (unsigned int *)v21);
                      v171 = *((unsigned int *)v21 + 7);
                      if ((_DWORD)v171)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v21 + 2), (WTF::StringImpl *)(*((_QWORD *)v21 + 2) + 32 * v171));
                      v172 = (WTF *)*((_QWORD *)v21 + 2);
                      if (v172)
                      {
                        *((_QWORD *)v21 + 2) = 0;
                        *((_DWORD *)v21 + 6) = 0;
                        WTF::fastFree(v172, v5);
                      }
                      WTF::fastFree(v21, v5);
                    }
                  }
                  if (*(_DWORD *)(v16 + 24) == 2)
                  {
                    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v16, v5);
                  }
                  else
                  {
                    *(_DWORD *)(v16 + 24) -= 2;
                  }
                }
              }
            }
            v15 = *(unsigned __int8 *)(v12 + 46);
          }
          if (v15 != 85)
          {
            v153 = *(_QWORD *)(v12 + 32);
            if (v153)
            {
              v12 = *(_QWORD *)(v153 + 8);
              if (v12)
                continue;
            }
          }
          v231 = 0;
          goto LABEL_40;
        }
    }
  }
  return this;
}

void WebCore::SVGRootInlineBox::layoutChildBoxes(WebCore::SVGRootInlineBox *this, WebCore::LegacyInlineFlowBox *a2, WebCore::FloatRect *a3)
{
  uint64_t v3;
  void *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  int v33;
  int v34;
  int v35;

  v3 = *((_QWORD *)a2 + 9);
  if (v3)
  {
    if (!a3)
    {
      while (1)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3) & 1) != 0)
        {
          *(float *)(v3 + 44) = WebCore::SVGInlineTextBox::calculateBoundaries((WebCore::SVGInlineTextBox *)v3, v24);
          *(_DWORD *)(v3 + 48) = v25;
          *(_DWORD *)(v3 + 40) = v26;
          *(_DWORD *)(v3 + 80) = v27;
        }
        else
        {
          v28 = *(_QWORD *)(v3 + 32);
          if (v28)
            v28 = *(_QWORD *)(v28 + 8);
          if ((*(_BYTE *)(v28 + 45) & 1) == 0 && *(_QWORD *)(*(_QWORD *)(v28 + 24) + 8))
          {
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3))
            {
LABEL_41:
              __break(0xC471u);
              return;
            }
            WebCore::SVGRootInlineBox::layoutChildBoxes(this, (WebCore::LegacyInlineFlowBox *)v3, 0);
            *(float *)(v3 + 44) = WebCore::SVGInlineFlowBox::calculateBoundaries((WebCore::SVGInlineFlowBox *)v3, v29, v30, v31, v32);
            *(_DWORD *)(v3 + 48) = v33;
            *(_DWORD *)(v3 + 40) = v34;
            *(_DWORD *)(v3 + 104) = v35;
          }
        }
        v3 = *(_QWORD *)(v3 + 8);
        if (!v3)
          return;
      }
    }
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3))
      {
        v7 = WebCore::SVGInlineTextBox::calculateBoundaries((WebCore::SVGInlineTextBox *)v3, v6);
        *(float *)(v3 + 44) = v7;
        *(float *)(v3 + 48) = v8;
        *(float *)(v3 + 40) = v9;
        *(float *)(v3 + 80) = v10;
      }
      else
      {
        v19 = *(_QWORD *)(v3 + 32);
        if (v19)
          v19 = *(_QWORD *)(v19 + 8);
        if ((*(_BYTE *)(v19 + 45) & 1) != 0 || !*(_QWORD *)(*(_QWORD *)(v19 + 24) + 8))
          goto LABEL_21;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3) & 1) == 0)
          goto LABEL_41;
        WebCore::SVGRootInlineBox::layoutChildBoxes(this, (WebCore::LegacyInlineFlowBox *)v3, 0);
        v7 = WebCore::SVGInlineFlowBox::calculateBoundaries((WebCore::SVGInlineFlowBox *)v3, v20, v21, v22, v23);
        *(float *)(v3 + 44) = v7;
        *(float *)(v3 + 48) = v8;
        *(float *)(v3 + 40) = v9;
        *(float *)(v3 + 104) = v10;
      }
      if (v9 > 0.0 && v10 > 0.0)
      {
        v11 = *((float *)a3 + 2);
        if (v11 <= 0.0 || (v12 = *((float *)a3 + 3), v12 <= 0.0))
        {
          *(float *)a3 = v7;
          *((float *)a3 + 1) = v8;
          *((float *)a3 + 2) = v9;
        }
        else
        {
          v13 = *((float *)a3 + 1);
          if (v7 >= *(float *)a3)
            v14 = *(float *)a3;
          else
            v14 = v7;
          if (v8 >= v13)
            v15 = *((float *)a3 + 1);
          else
            v15 = v8;
          v16 = v11 + *(float *)a3;
          v17 = v7 + v9;
          if (v16 >= v17)
            v17 = v16;
          v18 = v8 + v10;
          if ((float)(v12 + v13) >= v18)
            v18 = v12 + v13;
          *(float *)a3 = v14;
          *((float *)a3 + 1) = v15;
          *((float *)a3 + 2) = v17 - v14;
          v10 = v18 - v15;
        }
        *((float *)a3 + 3) = v10;
      }
LABEL_21:
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
}

uint64_t WebCore::SVGRootInlineBox::layoutRootBox(WebCore::SVGRootInlineBox *this, const WebCore::FloatRect *a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  _QWORD *i;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  int v12;
  int v13;
  float v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *((_QWORD *)this + 4);
  if (v4)
    v5 = *(_BYTE **)(v4 + 8);
  else
    v5 = 0;
  if ((v5[45] & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19653FDE0);
  }
  if ((v5[52] & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19653FE00);
  }
  if (v5[46] != 85)
  {
    __break(0xC471u);
    JUMPOUT(0x19653FE20);
  }
  result = WebCore::RenderSVGText::updatePositionAndOverflow((uint64_t)v5, a2);
  for (i = (_QWORD *)*((_QWORD *)this + 9); i; i = (_QWORD *)i[1])
  {
    v8 = i[4];
    if (v8)
      v8 = *(_QWORD *)(v8 + 8);
    if ((*(_BYTE *)(v8 + 45) & 1) == 0 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8))
      result = (*(uint64_t (**)(_QWORD *, float, float))(*i + 48))(i, -*(float *)a2, -*((float *)a2 + 1));
  }
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  v9 = *((float *)a2 + 3);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 2);
  *((float *)this + 33) = v9;
  v10 = *((float *)a2 + 1);
  v11 = floorf(v10 * 64.0);
  if (v11 > -2147500000.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v14 = ceilf((float)(v9 + v10) * 64.0);
  if (v14 >= 2147500000.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147500000.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
  v16 = __OFSUB__(v15, v13);
  v17 = v15 - v13;
  if (v16)
    v17 = (v15 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 29) = 0;
  *((_DWORD *)this + 30) = v17;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 32) = v17;
  return result;
}

void WebCore::SVGTextLayoutEngine::beginTextPathLayout(WebCore::SVGTextLayoutEngine *this, WebCore::RenderSVGTextPath *a2, WebCore::SVGTextLayoutEngine *a3)
{
  __n128 v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t started;
  int v11;
  float v12;
  WebCore::Node *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  WebCore::RenderObject *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  const WebCore::SVGElement *v41;
  WebCore::SVGTextContentElement **v42;
  void *v43;
  float v44;
  float v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  float v50;
  WebCore::SVGTextChunk *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  WTF *v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  WTF *v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  WTF *v73;
  _BYTE v74[56];
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 235) = 1;
  v6.n128_f64[0] = WebCore::RenderSVGTextPath::layoutPath(a2, (uint64_t)&v73);
  v7 = (_QWORD *)((char *)this + 248);
  v8 = *((unsigned int *)this + 76);
  if ((_DWORD)v8 == -1)
  {
    if (v75 == -1)
      goto LABEL_8;
  }
  else if (v75 == -1)
  {
    ((void (*)(char **, char *, double))off_1E344A148[v8])(&v72, (char *)this + 248, v6.n128_f64[0]);
    *((_DWORD *)this + 76) = -1;
    goto LABEL_6;
  }
  v72 = (char *)this + 248;
  ((void (*)(char **, char *, _BYTE *, __n128))off_1E344A160[v75])(&v72, (char *)this + 248, v74, v6);
LABEL_6:
  if (v75 != -1)
    ((void (*)(char **, _BYTE *))off_1E344A148[v75])(&v72, v74);
LABEL_8:
  v9 = *((_DWORD *)this + 76);
  if (v9 == 2)
  {
    if (*v7 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 200))(*v7) & 1) != 0)
      return;
  }
  else if (!v9)
  {
    return;
  }
  started = WebCore::RenderSVGTextPath::startOffset(a2);
  WebCore::Path::length((WebCore::SVGTextLayoutEngine *)((char *)this + 240));
  *((_DWORD *)this + 78) = v11;
  if (*(_BYTE *)(WebCore::RenderSVGTextPath::startOffset(a2) + 4) == 2)
  {
    v12 = *(float *)started;
    if (*(_BYTE *)(started + 4) == 2)
      v12 = *(float *)started / 100.0;
    *((float *)this + 79) = *((float *)this + 78) * v12;
    goto LABEL_24;
  }
  *((_DWORD *)this + 79) = *(_DWORD *)started;
  v13 = WebCore::RenderSVGTextPath::targetElement(a2);
  if (!v13)
    goto LABEL_24;
  v15 = *((_DWORD *)v13 + 6);
  *((_DWORD *)v13 + 6) = v15 + 2;
  v16 = *((_QWORD *)v13 + 27);
  v17 = *(_QWORD *)(v16 + 24);
  if (v17 && *(_DWORD *)(v17 - 12))
  {
    v65 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v65)
    {
      v66 = 8 * v65;
      v67 = *(uint64_t **)(v16 + 24);
      while ((unint64_t)(*v67 + 1) <= 1)
      {
        ++v67;
        v66 -= 8;
        if (!v66)
          goto LABEL_19;
      }
    }
    else
    {
      v67 = *(uint64_t **)(v16 + 24);
    }
    v70 = (uint64_t *)(v17 + 8 * v65);
    if (v67 != v70)
    {
      v71 = *v67;
LABEL_102:
      if (*(_QWORD *)(v71 + 8))
      {
        v18 = v16 + 48;
        goto LABEL_20;
      }
      while (++v67 != v70)
      {
        v71 = *v67;
        if ((unint64_t)(*v67 + 1) > 1)
        {
          if (v67 != v70)
            goto LABEL_102;
          break;
        }
      }
    }
  }
LABEL_19:
  v18 = v16 + 40;
LABEL_20:
  v19 = *(float *)(*(_QWORD *)v18 + 28);
  if (v19 != 0.0)
    *((float *)this + 79) = *((float *)this + 79) * (float)(*((float *)this + 78) / v19);
  if (v15)
  {
    *((_DWORD *)v13 + 6) = v15;
  }
  else if ((*((_WORD *)v13 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v13, v14);
  }
LABEL_24:
  WebCore::SVGTextChunkBuilder::buildTextChunks((WebCore::SVGTextLayoutEngine *)((char *)a3 + 40), (uint64_t)a3 + 8);
  v21 = *((_DWORD *)a3 + 13);
  if (v21)
  {
    v22 = (uint64_t *)*((_QWORD *)a3 + 5);
    v23 = &v22[3 * v21];
    v24 = 0.0;
    do
    {
      v25 = *((unsigned int *)v22 + 3);
      v26 = 8 * v25;
      if ((_DWORD)v25)
      {
        v27 = 8 * v25;
        v28 = *v22;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)v28 + 124))
          {
            v29 = *(_QWORD *)(*(_QWORD *)v28 + 112);
            break;
          }
          v29 = 0;
          v28 += 8;
          v27 -= 8;
        }
        while (v27);
      }
      else
      {
        v29 = 0;
      }
      while (v26)
      {
        v30 = *(_QWORD *)(*v22 - 8 + v26);
        v31 = *(unsigned int *)(v30 + 124);
        v26 -= 8;
        if ((_DWORD)v31)
        {
          v32 = (float *)(*(_QWORD *)(v30 + 112) + (v31 << 7) - 128);
          goto LABEL_35;
        }
      }
      v32 = 0;
LABEL_35:
      v33 = *((_DWORD *)v22 + 4);
      if (v29)
      {
        if ((v33 & 0x10) != 0)
        {
          v34 = v32[4] + v32[6];
          v35 = *(float *)(v29 + 16);
        }
        else
        {
          v34 = v32[3] + v32[5];
          v35 = *(float *)(v29 + 12);
        }
        v36 = v34 - v35;
      }
      else
      {
        v36 = 0.0;
      }
      v37 = -v36;
      if ((v33 & 8) != 0)
        v38 = -v36;
      else
        v38 = 0.0;
      if ((v33 & 8) != 0)
        v37 = 0.0;
      if ((v33 & 4) == 0)
        v37 = v38;
      v39 = v36 * -0.5;
      if ((v33 & 2) == 0)
        v39 = v37;
      v24 = v24 + v39;
      v22 += 3;
    }
    while (v22 != v23);
  }
  else
  {
    v24 = 0.0;
  }
  v40 = v24 + *((float *)this + 79);
  *((float *)this + 79) = v40;
  *((float *)this + 80) = v40;
  v41 = (const WebCore::SVGElement *)WebCore::SVGTextContentElement::elementFromRenderer((uint64_t)a2, v20);
  if (v41)
  {
    v42 = (WebCore::SVGTextContentElement **)v41;
    *((_DWORD *)v41 + 6) += 2;
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v73, v41);
    v44 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(v42 + 29), (const WebCore::SVGLengthContext *)&v73);
    if (v44 == 0.0)
    {
      v61 = v73;
      v73 = 0;
      if (v61)
      {
        do
        {
          v62 = __ldaxr((unsigned int *)v61);
          v63 = --v62 == 0;
        }
        while (__stlxr(v62, (unsigned int *)v61));
LABEL_80:
        if (v63)
        {
          atomic_store(1u, (unsigned int *)v61);
          v68 = *((unsigned int *)v61 + 7);
          if ((_DWORD)v68)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v61 + 2), (WTF::StringImpl *)(*((_QWORD *)v61 + 2) + 32 * v68));
          v69 = (WTF *)*((_QWORD *)v61 + 2);
          if (v69)
          {
            *((_QWORD *)v61 + 2) = 0;
            *((_DWORD *)v61 + 6) = 0;
            WTF::fastFree(v69, v43);
          }
          WTF::fastFree(v61, v43);
        }
      }
LABEL_81:
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v42, v43);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
      return;
    }
    v45 = v44;
    v46 = *((unsigned int *)a3 + 13);
    if ((_DWORD)v46)
    {
      v47 = (unsigned int *)*((_QWORD *)a3 + 5);
      v48 = &v47[6 * v46];
      v49 = 24 * v46;
      v50 = 0.0;
      v51 = (WebCore::SVGTextChunk *)v47;
      do
      {
        v50 = v50 + WebCore::SVGTextChunk::totalLength(v51);
        v51 = (WebCore::SVGTextChunk *)((char *)v51 + 24);
        v49 -= 24;
      }
      while (v49);
      v52 = 0;
      do
      {
        v53 = v47[3];
        if ((_DWORD)v53)
        {
          v54 = 0;
          v55 = *(_QWORD *)v47;
          v56 = *(_QWORD *)v47 + 8 * v53;
          do
          {
            v57 = *(unsigned int *)(*(_QWORD *)v55 + 124);
            if ((_DWORD)v57)
            {
              v58 = v57 << 7;
              v59 = (int *)(*(_QWORD *)(*(_QWORD *)v55 + 112) + 8);
              do
              {
                v60 = *v59;
                v59 += 32;
                v54 += v60 & 0x7FFFFFFF;
                v58 -= 128;
              }
              while (v58);
            }
            v55 += 8;
          }
          while (v55 != v56);
        }
        else
        {
          v54 = 0;
        }
        v52 += v54;
        v47 += 6;
      }
      while (v47 != v48);
      if (WebCore::SVGTextContentElement::lengthAdjust(v42[28]) == 1)
      {
        if (v52 >= 2)
          *((float *)this + 81) = (float)(v45 - v50) / (float)(v52 - 1);
LABEL_78:
        v61 = v73;
        v73 = 0;
        if (v61)
        {
          do
          {
            v64 = __ldaxr((unsigned int *)v61);
            v63 = --v64 == 0;
          }
          while (__stlxr(v64, (unsigned int *)v61));
          goto LABEL_80;
        }
        goto LABEL_81;
      }
    }
    else
    {
      v50 = 0.0;
      if (WebCore::SVGTextContentElement::lengthAdjust(v42[28]) == 1)
        goto LABEL_78;
    }
    *((float *)this + 82) = v45 / v50;
    goto LABEL_78;
  }
}

uint64_t WebCore::SVGTextLayoutEngine::endTextPathLayout(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = this;
  *(_BYTE *)(this + 235) = 0;
  v2 = *(unsigned int *)(this + 304);
  if ((_DWORD)v2 == -1)
    goto LABEL_4;
  if ((_DWORD)v2)
  {
    this = ((uint64_t (*)(char *, uint64_t))off_1E344A148[v2])(&v3, this + 248);
LABEL_4:
    *(_DWORD *)(v1 + 304) = 0;
  }
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_DWORD *)(v1 + 328) = 1065353216;
  return this;
}

uint64_t WebCore::SVGRootInlineBox::closestLeafChildForPosition(WebCore::SVGRootInlineBox *this, const WebCore::LayoutPoint *a2)
{
  float *LeafDescendant;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float *v10;
  uint64_t v11;
  uint64_t result;

  LeafDescendant = (float *)WebCore::LegacyInlineFlowBox::firstLeafDescendant(this);
  v5 = WebCore::LegacyInlineFlowBox::lastLeafDescendant(this);
  if (LeafDescendant != (float *)v5)
  {
    v6 = v5;
    v7 = 0;
    if (LeafDescendant)
    {
LABEL_3:
      while (1)
      {
        if ((*(unsigned int (**)(float *))(*(_QWORD *)LeafDescendant + 96))(LeafDescendant))
        {
          v8 = LeafDescendant[12];
          v9 = (float)*((int *)a2 + 1) * 0.015625;
          if (v9 >= v8
            && v9 <= (float)(v8 + (*(float (**)(float *))(*(_QWORD *)LeafDescendant + 120))(LeafDescendant)))
          {
            v7 = LeafDescendant;
            if ((float)((float)*(int *)a2 * 0.015625) < (float)(LeafDescendant[11] + LeafDescendant[10]))
              break;
          }
        }
        while (1)
        {
          v10 = (float *)*((_QWORD *)LeafDescendant + 1);
          if (v10)
            break;
LABEL_8:
          LeafDescendant = (float *)*((_QWORD *)LeafDescendant + 3);
          if (!LeafDescendant)
            goto LABEL_17;
        }
        do
        {
          if (((*(uint64_t (**)(float *))(*(_QWORD *)v10 + 136))(v10) & 1) != 0)
          {
            LeafDescendant = v10;
            goto LABEL_3;
          }
          if (((*(uint64_t (**)(float *))(*(_QWORD *)v10 + 72))(v10) & 1) == 0)
          {
            result = 96;
            __break(0xC471u);
            return result;
          }
          v11 = WebCore::LegacyInlineFlowBox::firstLeafDescendant((WebCore::LegacyInlineFlowBox *)v10);
          v10 = (float *)*((_QWORD *)v10 + 1);
        }
        while (v10 && !v11);
        if (!v11)
          goto LABEL_8;
        LeafDescendant = (float *)v11;
      }
    }
    else
    {
LABEL_17:
      if (v7)
        return (uint64_t)v7;
      else
        return v6;
    }
  }
  return (uint64_t)LeafDescendant;
}

uint64_t WebCore::SVGRootInlineBox::nodeAtPoint(WebCore::LegacyInlineFlowBox *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8)
{
  uint64_t result;
  WebCore::LegacyInlineFlowBox *v16;
  WebCore::LegacyInlineFlowBox *v17;
  WebCore::LegacyInlineFlowBox *v18;
  uint64_t LeafDescendant;

  result = WebCore::LegacyInlineFlowBox::firstLeafDescendant(a1);
  if (result)
  {
    v16 = (WebCore::LegacyInlineFlowBox *)result;
LABEL_3:
    if ((*(unsigned int (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v16 + 96))(v16)
      && ((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v16 + 64))(v16, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v17 = v16;
      do
      {
        v18 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v17 + 1);
        if (v18)
        {
          do
          {
            if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v18 + 136))(v18) & 1) != 0)
            {
              v16 = v18;
              goto LABEL_3;
            }
            if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v18 + 72))(v18) & 1) == 0)
            {
              result = 96;
              __break(0xC471u);
              return result;
            }
            LeafDescendant = WebCore::LegacyInlineFlowBox::firstLeafDescendant(v18);
            v16 = (WebCore::LegacyInlineFlowBox *)LeafDescendant;
            v18 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v18 + 1);
          }
          while (v18 && !LeafDescendant);
          if (LeafDescendant)
            goto LABEL_3;
        }
        v17 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v17 + 3);
      }
      while (v17);
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::SVGTextChunk::SVGTextChunk(uint64_t Ref, char *a2, unsigned int a3, int a4)
{
  unint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  unint64_t v39;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45[5];
  uint64_t *v46[5];
  uint64_t *v47[5];

  *(_QWORD *)Ref = 0;
  *(_QWORD *)(Ref + 8) = 0;
  *(_QWORD *)(Ref + 16) = 1;
  if (*((_DWORD *)a2 + 3) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x196540AECLL);
  }
  v7 = a2;
  v8 = Ref;
  v9 = a3;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * a3) + 32);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  if ((*(_BYTE *)(v11 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196540A00);
  }
  if (*(_BYTE *)(v11 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x196540A20);
  }
  v12 = *(_QWORD *)(v11 + 32);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 136);
  if ((*(_BYTE *)(v13 + 123) & 4) != 0)
  {
    v15 = 9;
    *(_DWORD *)(Ref + 16) = 9;
  }
  else
  {
    v15 = 1;
  }
  if (((*(_DWORD *)(v13 + 124) >> 13) & 6u) - 2 <= 3)
  {
    v15 |= 0x10u;
    *(_DWORD *)(Ref + 16) = v15;
  }
  v16 = (*(unsigned __int8 *)(v14 + 4) >> 4) & 3;
  if (v16 == 1)
  {
    v17 = 2;
  }
  else
  {
    if (v16 != 2)
      goto LABEL_15;
    v17 = 4;
  }
  *(_DWORD *)(Ref + 16) = v17 | v15;
LABEL_15:
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  if ((*(_BYTE *)(v10 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196540A40);
  }
  if (*(_BYTE *)(v10 + 46) != 72)
  {
    __break(0xC471u);
    JUMPOUT(0x196540A60);
  }
  v18 = *(_QWORD *)(v10 + 32);
  if (!v18)
    goto LABEL_36;
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
    goto LABEL_36;
  v20 = *(unsigned __int8 *)(v19 + 46);
  if ((v20 - 84) >= 3 && v20 != 71)
    goto LABEL_36;
  if ((*(_BYTE *)(v19 + 45) & 1) != 0)
    goto LABEL_36;
  v4 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8);
  if (!v4)
    goto LABEL_36;
  if ((*(_WORD *)(v4 + 28) & 0x20) == 0)
  {
    a2 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Develope"
         "r/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
    Ref = 105;
    __break(0xC471u);
    goto LABEL_70;
  }
  Ref = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 1216))(v4);
  if (!(_DWORD)Ref)
    goto LABEL_36;
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v45, (const WebCore::SVGElement *)v4);
  *(float *)(v8 + 20) = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(v4 + 232), (const WebCore::SVGLengthContext *)v45);
  v21 = *(uint64_t **)(v4 + 224);
  v22 = v21[3];
  if (v22
    && *(_DWORD *)(v22 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v21 + 3, v47), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v21 + 3, v46), v47[1] != v46[1]))
  {
    v23 = v21 + 6;
  }
  else
  {
    v23 = v21 + 5;
  }
  v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v23 + 32))(*v23);
  if (v24 == 1)
  {
    v25 = 32;
  }
  else
  {
    if (v24 != 2)
      goto LABEL_31;
    v25 = 64;
  }
  *(_DWORD *)(v8 + 16) |= v25;
LABEL_31:
  Ref = (uint64_t)v45[0];
  v45[0] = 0;
  if (Ref)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)Ref);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)Ref));
    if (!v27)
      goto LABEL_71;
  }
  while (1)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
LABEL_36:
    v28 = *((unsigned int *)v7 + 3);
    if (v28 >= a3)
    {
      v4 = a4 - a3;
      if (v28 - v9 >= v4)
        break;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    atomic_store(1u, (unsigned int *)Ref);
    v41 = *(unsigned int *)(Ref + 28);
    if ((_DWORD)v41)
    {
      v44 = Ref;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(Ref + 16), (WTF::StringImpl *)(*(_QWORD *)(Ref + 16) + 32 * v41));
      Ref = v44;
    }
    v42 = *(WTF **)(Ref + 16);
    if (v42)
    {
      *(_QWORD *)(Ref + 16) = 0;
      *(_DWORD *)(Ref + 24) = 0;
      v43 = Ref;
      WTF::fastFree(v42, a2);
      Ref = v43;
    }
    Ref = WTF::fastFree((WTF *)Ref, a2);
  }
  if (a4 != a3)
  {
    v29 = *(_QWORD *)v7;
    v30 = *(unsigned int *)(v8 + 8);
    v31 = *(unsigned int *)(v8 + 12);
    v32 = v31 + v4;
    if (v31 + v4 > v30)
    {
      v33 = v30 + (v30 >> 2);
      if (v33 >= 0x10)
        v34 = v33 + 1;
      else
        v34 = 16;
      if (v34 <= v32)
        v35 = v31 + v4;
      else
        v35 = v34;
      if (v35 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x196540AF4);
      }
      v36 = *(void **)v8;
      v37 = (void *)WTF::fastMalloc((WTF *)(8 * v35));
      *(_DWORD *)(v8 + 8) = v35;
      *(_QWORD *)v8 = v37;
      memcpy(v37, v36, 8 * v31);
      if (v36)
      {
        if (*(void **)v8 == v36)
        {
          *(_QWORD *)v8 = 0;
          *(_DWORD *)(v8 + 8) = 0;
        }
        WTF::fastFree((WTF *)v36, v38);
      }
    }
    v39 = *(unsigned int *)(v8 + 12);
    if (v32 < v39)
    {
      __break(0xC471u);
      JUMPOUT(0x196540AFCLL);
    }
    memcpy((void *)(*(_QWORD *)v8 + 8 * v39), (const void *)(v29 + 8 * v9), 8 * v4);
    *(_DWORD *)(v8 + 12) = v32;
  }
  return v8;
}

uint64_t WebCore::SVGTextContentElement::lengthAdjust(WebCore::SVGTextContentElement *this)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  WebCore::SVGTextContentElement *v5;
  uint64_t *v6[5];
  uint64_t *v7[5];

  v2 = (uint64_t *)((char *)this + 24);
  v1 = *((_QWORD *)this + 3);
  if (v1
    && *(_DWORD *)(v1 - 12)
    && (v5 = this,
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 3, v7), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v2, v6), this = v5, v7[1] != v6[1]))
  {
    v3 = (_QWORD *)((char *)v5 + 48);
  }
  else
  {
    v3 = (_QWORD *)((char *)this + 40);
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
}

float WebCore::SVGTextChunk::totalLength(WebCore::SVGTextChunk *this)
{
  uint64_t v1;
  float *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;

  v1 = *((unsigned int *)this + 3);
  v2 = (float *)(8 * v1);
  if ((_DWORD)v1)
  {
    v3 = 8 * v1;
    v4 = *(_QWORD *)this;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v4 + 124))
      {
        v3 = *(_QWORD *)(*(_QWORD *)v4 + 112);
        break;
      }
      v4 += 8;
      v3 -= 8;
    }
    while (v3);
  }
  else
  {
    v3 = 0;
  }
  while (v2)
  {
    v5 = *(_QWORD *)((char *)v2 + *(_QWORD *)this - 8);
    v6 = *(unsigned int *)(v5 + 124);
    v2 -= 2;
    if ((_DWORD)v6)
    {
      v2 = (float *)(*(_QWORD *)(v5 + 112) + (v6 << 7) - 128);
      break;
    }
  }
  if (!v3)
    return 0.0;
  if ((*((_BYTE *)this + 16) & 0x10) != 0)
  {
    v7 = v2[4] + v2[6];
    v8 = *(float *)(v3 + 16);
  }
  else
  {
    v7 = v2[3] + v2[5];
    v8 = *(float *)(v3 + 12);
  }
  return v7 - v8;
}

void WebCore::SVGTextChunk::processTextLengthSpacingCorrection(WebCore::SVGTextChunk *this)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  float v11;
  float v12;
  float v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;

  v1 = *((unsigned int *)this + 3);
  if ((_DWORD)v1)
  {
    v3 = 0;
    v4 = *(_QWORD *)this;
    v5 = *(_QWORD *)this + 8 * v1;
    v6 = *(_QWORD *)this;
    do
    {
      v7 = *(unsigned int *)(*(_QWORD *)v6 + 124);
      if ((_DWORD)v7)
      {
        v8 = v7 << 7;
        v9 = (int *)(*(_QWORD *)(*(_QWORD *)v6 + 112) + 8);
        do
        {
          v10 = *v9;
          v9 += 32;
          v3 += v10 & 0x7FFFFFFF;
          v8 -= 128;
        }
        while (v8);
      }
      v6 += 8;
    }
    while (v6 != v5);
    v11 = 0.0;
    if (v3 >= 2)
    {
      v12 = *((float *)this + 5);
      v13 = WebCore::SVGTextChunk::totalLength(this);
      v14 = 0;
      v15 = v4;
      do
      {
        v16 = *(unsigned int *)(*(_QWORD *)v15 + 124);
        if ((_DWORD)v16)
        {
          v17 = v16 << 7;
          v18 = (int *)(*(_QWORD *)(*(_QWORD *)v15 + 112) + 8);
          do
          {
            v19 = *v18;
            v18 += 32;
            v14 += v19 & 0x7FFFFFFF;
            v17 -= 128;
          }
          while (v17);
        }
        v15 += 8;
      }
      while (v15 != v5);
      v11 = (float)(v12 - v13) / (float)(v14 - 1);
    }
    if ((*((_DWORD *)this + 4) & 0x10) != 0)
    {
      v24 = 0;
      do
      {
        v25 = *(unsigned int *)(*(_QWORD *)v4 + 124);
        if ((_DWORD)v25)
        {
          v26 = v25 << 7;
          v27 = (float *)(*(_QWORD *)(*(_QWORD *)v4 + 112) + 16);
          do
          {
            *v27 = *v27 + (float)(v11 * (float)v24);
            v24 += *(_DWORD *)(v27 - 2) & 0x7FFFFFFF;
            v27 += 32;
            v26 -= 128;
          }
          while (v26);
        }
        v4 += 8;
      }
      while (v4 != v5);
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = *(unsigned int *)(*(_QWORD *)v4 + 124);
        if ((_DWORD)v21)
        {
          v22 = v21 << 7;
          v23 = (float *)(*(_QWORD *)(*(_QWORD *)v4 + 112) + 12);
          do
          {
            *v23 = *v23 + (float)(v11 * (float)v20);
            v20 += *(_DWORD *)(v23 - 1) & 0x7FFFFFFF;
            v23 += 32;
            v22 -= 128;
          }
          while (v22);
        }
        v4 += 8;
      }
      while (v4 != v5);
    }
  }
}

void WebCore::SVGTextChunk::buildBoxTransformations(WebCore::SVGTextChunk *this, uint64_t *a2)
{
  uint64_t v2;
  int v5;
  double v6;
  uint64_t *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  BOOL v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;

  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2)
  {
    LOBYTE(v5) = 0;
    v6 = 0.0;
    v7 = *(uint64_t **)this;
    v8 = *(_QWORD *)this + 8 * v2;
    v9 = 1.0;
    v10 = 0.0;
    v11 = 1.0;
    v12 = 0.0;
    v13 = 0.0;
    while (1)
    {
      v14 = *v7;
      if ((v5 & 1) != 0)
        goto LABEL_21;
      v5 = *(_DWORD *)(v14 + 124);
      if (v5)
        break;
LABEL_47:
      if (++v7 == (uint64_t *)v8)
        return;
    }
    v15 = *(_QWORD *)(v14 + 112);
    v16 = *((float *)this + 5);
    v17 = v16 / WebCore::SVGTextChunk::totalLength(this);
    v18 = *(float *)(v15 + 12);
    v19 = *(float *)(v15 + 16);
    v20 = v18;
    v21 = v19;
    v22 = v11 == 1.0;
    if (v10 != 0.0)
      v22 = 0;
    if (v6 != 0.0)
      v22 = 0;
    v23 = v9 * v21 + v20 * v10;
    if (!v22 || v9 != 1.0)
    {
      v20 = v6 * v21 + v20 * v11;
      v21 = v23;
    }
    v24 = v17;
    if ((*((_BYTE *)this + 16) & 0x10) != 0)
    {
      v6 = v6 * v24;
      v9 = v9 * v24;
    }
    else
    {
      v11 = v11 * v24;
      v10 = v10 * v24;
    }
    v25 = v12 + v20;
    v26 = v13 + v21;
    v27 = (float)-v18;
    v28 = (float)-v19;
    v29 = v11 == 1.0;
    if (v10 != 0.0)
      v29 = 0;
    if (v6 != 0.0)
      v29 = 0;
    v30 = v9 * v28 + v27 * v10;
    if (!v29 || v9 != 1.0)
    {
      v27 = v6 * v28 + v27 * v11;
      v28 = v30;
    }
    v12 = v25 + v27;
    v13 = v26 + v28;
LABEL_21:
    v31 = *a2;
    if (*a2
      || (WTF::HashTable<WebCore::SVGInlineTextBox *,WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>>,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashMap<WebCore::SVGInlineTextBox *,WebCore::AffineTransform,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SVGInlineTextBox *>>::rehash(a2, 8u), (v31 = *a2) != 0))
    {
      v32 = *(_DWORD *)(v31 - 8);
    }
    else
    {
      v32 = 0;
    }
    v33 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
    v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
    v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
    v36 = v32 & ((v35 >> 31) ^ v35);
    v37 = v31 + 56 * v36;
    v38 = *(_QWORD *)v37;
    if (*(_QWORD *)v37)
    {
      v39 = 0;
      v40 = 1;
      do
      {
        if (v38 == v14)
        {
          *(double *)(v37 + 8) = v11;
          *(double *)(v37 + 16) = v10;
          *(double *)(v37 + 24) = v6;
          *(double *)(v37 + 32) = v9;
          LOBYTE(v5) = 1;
          *(double *)(v37 + 40) = v12;
          *(double *)(v37 + 48) = v13;
          goto LABEL_47;
        }
        if (v38 == -1)
          v39 = v37;
        v36 = (v36 + v40) & v32;
        v37 = v31 + 56 * v36;
        v38 = *(_QWORD *)v37;
        ++v40;
      }
      while (*(_QWORD *)v37);
      if (v39)
      {
        *(_QWORD *)v39 = 0;
        *(_OWORD *)(v39 + 8) = constinit_11;
        *(_OWORD *)(v39 + 24) = xmmword_1969FE180;
        *(_OWORD *)(v39 + 40) = xmmword_1969FE190;
        --*(_DWORD *)(*a2 - 16);
        v37 = v39;
      }
    }
    *(_QWORD *)v37 = v14;
    *(double *)(v37 + 8) = v11;
    *(double *)(v37 + 16) = v10;
    *(double *)(v37 + 24) = v6;
    *(double *)(v37 + 32) = v9;
    *(double *)(v37 + 40) = v12;
    *(double *)(v37 + 48) = v13;
    v41 = *a2;
    if (*a2)
      v42 = *(_DWORD *)(v41 - 12) + 1;
    else
      v42 = 1;
    *(_DWORD *)(v41 - 12) = v42;
    v43 = *a2;
    if (*a2)
      v44 = *(_DWORD *)(v43 - 12);
    else
      v44 = 0;
    v45 = (*(_DWORD *)(v43 - 16) + v44);
    v46 = *(unsigned int *)(v43 - 4);
    if (v46 > 0x400)
    {
      if (v46 > 2 * v45)
        goto LABEL_46;
    }
    else
    {
      if (3 * v46 > 4 * v45)
      {
LABEL_46:
        LOBYTE(v5) = 1;
        goto LABEL_47;
      }
      if (!(_DWORD)v46)
      {
        v47 = 8;
        goto LABEL_45;
      }
    }
    v47 = (_DWORD)v46 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v46));
LABEL_45:
    WTF::HashTable<WebCore::SVGInlineTextBox *,WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>>,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashMap<WebCore::SVGInlineTextBox *,WebCore::AffineTransform,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SVGInlineTextBox *>>::rehash(a2, v47);
    goto LABEL_46;
  }
}

WTF *WebCore::SVGTextChunkBuilder::buildTextChunks(WTF *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  int v23;
  uint64_t v24;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t)result;
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 12);
    do
    {
      if (v4 >= *(unsigned int *)(a2 + 12))
      {
        __break(0xC471u);
        return result;
      }
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v4) + 84) & 0x10) != 0)
      {
        if (v5 == (_DWORD)v2)
        {
          v5 = v4;
        }
        else
        {
          v19 = a2;
          v20 = v2;
          v18 = v4;
          WebCore::SVGTextChunk::SVGTextChunk((uint64_t)&v21, (char *)a2, v5, v4);
          v13 = *(_DWORD *)(v3 + 12);
          if (v13 == *(_DWORD *)(v3 + 8))
          {
            WTF::Vector<WebCore::SVGTextChunk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGTextChunk>(v3, (unint64_t)&v21);
          }
          else
          {
            v16 = *(_QWORD *)v3 + 24 * v13;
            *(_QWORD *)v16 = 0;
            *(_QWORD *)(v16 + 8) = 0;
            v17 = v21;
            v21 = 0;
            *(_QWORD *)v16 = v17;
            *(_DWORD *)(v16 + 8) = v22;
            LODWORD(v17) = v23;
            v23 = 0;
            *(_DWORD *)(v16 + 12) = (_DWORD)v17;
            *(_QWORD *)(v16 + 16) = v24;
            ++*(_DWORD *)(v3 + 12);
          }
          result = v21;
          if (v21)
          {
            v21 = 0;
            v22 = 0;
            result = (WTF *)WTF::fastFree(result, v12);
          }
          v4 = v18;
          a2 = v19;
          v5 = v18;
          v2 = v20;
        }
      }
      ++v4;
    }
    while (v2 != v4);
    if (v5 != (_DWORD)v2)
    {
      WebCore::SVGTextChunk::SVGTextChunk((uint64_t)&v21, (char *)a2, v5, v2);
      v7 = *(unsigned int *)(v3 + 12);
      if ((_DWORD)v7 == *(_DWORD *)(v3 + 8))
      {
        v8 = WTF::Vector<WebCore::SVGTextChunk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v7 + 1, (unint64_t)&v21);
        v9 = *(_QWORD *)v3 + 24 * *(unsigned int *)(v3 + 12);
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        v10 = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)v9 = v10;
        LODWORD(v10) = *(_DWORD *)(v8 + 8);
        *(_DWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v9 + 8) = v10;
        LODWORD(v10) = *(_DWORD *)(v8 + 12);
        *(_DWORD *)(v8 + 12) = 0;
        *(_DWORD *)(v9 + 12) = v10;
        v11 = (_QWORD *)(v9 + 16);
      }
      else
      {
        v14 = *(_QWORD *)v3 + 24 * v7;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        v15 = v21;
        v21 = 0;
        *(_QWORD *)v14 = v15;
        *(_DWORD *)(v14 + 8) = v22;
        LODWORD(v15) = v23;
        v23 = 0;
        *(_DWORD *)(v14 + 12) = (_DWORD)v15;
        v11 = (_QWORD *)(v14 + 16);
        v8 = (unint64_t)&v21;
      }
      *v11 = *(_QWORD *)(v8 + 16);
      ++*(_DWORD *)(v3 + 12);
      result = v21;
      if (v21)
      {
        v21 = 0;
        v22 = 0;
        return (WTF *)WTF::fastFree(result, v6);
      }
    }
  }
  return result;
}

void WebCore::SVGTextChunkBuilder::layoutTextChunks(uint64_t *a1, uint64_t a2)
{
  void *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;

  WebCore::SVGTextChunkBuilder::buildTextChunks((WTF *)a1, a2);
  v4 = *((_DWORD *)a1 + 3);
  if (!v4)
    return;
  v5 = (uint64_t *)*a1;
  v6 = *a1 + 24 * v4;
  v7 = -0.5;
  do
  {
    if (*((float *)v5 + 5) > 0.0)
    {
      v31 = *((_DWORD *)v5 + 4);
      if ((v31 & 0x60) != 0)
      {
        v32 = v6;
        if ((v31 & 0x20) != 0)
          WebCore::SVGTextChunk::processTextLengthSpacingCorrection((WebCore::SVGTextChunk *)v5);
        else
          WebCore::SVGTextChunk::buildBoxTransformations((WebCore::SVGTextChunk *)v5, a1 + 2);
        v6 = v32;
        v7 = -0.5;
      }
    }
    v8 = *((_DWORD *)v5 + 4);
    if ((v8 & 8) != 0)
    {
      if ((v8 & 4) != 0)
        goto LABEL_33;
    }
    else if ((v8 & 6) == 0)
    {
      goto LABEL_33;
    }
    v9 = *v5;
    v10 = *((unsigned int *)v5 + 3);
    v11 = (float *)(8 * v10);
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      v13 = *v5;
      while (!*(_DWORD *)(*(_QWORD *)v13 + 124))
      {
        v13 += 8;
        v12 -= 8;
        if (!v12)
          goto LABEL_50;
      }
      v14 = *(_QWORD *)(*(_QWORD *)v13 + 112);
    }
    else
    {
LABEL_50:
      v14 = 0;
    }
    v15 = v9 + 8 * v10;
    while (v11)
    {
      v16 = *(_QWORD *)((char *)v11 + v9 - 8);
      v17 = *(unsigned int *)(v16 + 124);
      v11 -= 2;
      if ((_DWORD)v17)
      {
        v11 = (float *)(*(_QWORD *)(v16 + 112) + (v17 << 7) - 128);
        break;
      }
    }
    if (v14)
    {
      if ((v8 & 0x10) != 0)
      {
        v18 = v11[4] + v11[6];
        v19 = *(float *)(v14 + 16);
      }
      else
      {
        v18 = v11[3] + v11[5];
        v19 = *(float *)(v14 + 12);
      }
      v20 = v18 - v19;
    }
    else
    {
      v20 = 0.0;
    }
    v21 = -v20;
    if ((v8 & 8) != 0)
      v22 = -v20;
    else
      v22 = 0.0;
    if ((v8 & 8) != 0)
      v21 = 0.0;
    if ((v8 & 4) == 0)
      v21 = v22;
    v23 = v20 * v7;
    if ((v8 & 2) == 0)
      v23 = v21;
    if ((_DWORD)v10)
    {
      if ((v8 & 0x10) != 0)
      {
        do
        {
          v33 = *(unsigned int *)(*(_QWORD *)v9 + 124);
          if ((_DWORD)v33)
          {
            v34 = v33 << 7;
            v35 = (float *)(*(_QWORD *)(*(_QWORD *)v9 + 112) + 16);
            do
            {
              *v35 = v23 + *v35;
              v35 += 32;
              v34 -= 128;
            }
            while (v34);
          }
          v9 += 8;
        }
        while (v9 != v15);
      }
      else
      {
        do
        {
          v24 = *(unsigned int *)(*(_QWORD *)v9 + 124);
          if ((_DWORD)v24)
          {
            v25 = v24 << 7;
            v26 = (float *)(*(_QWORD *)(*(_QWORD *)v9 + 112) + 12);
            do
            {
              *v26 = v23 + *v26;
              v26 += 32;
              v25 -= 128;
            }
            while (v25);
          }
          v9 += 8;
        }
        while (v9 != v15);
      }
    }
LABEL_33:
    v5 += 3;
  }
  while (v5 != (uint64_t *)v6);
  if (*((_DWORD *)a1 + 2))
  {
    v27 = *((unsigned int *)a1 + 3);
    v28 = (WTF *)*a1;
    if ((_DWORD)v27)
    {
      v29 = 24 * v27;
      do
      {
        v30 = *(WTF **)v28;
        if (*(_QWORD *)v28)
        {
          *(_QWORD *)v28 = 0;
          *((_DWORD *)v28 + 2) = 0;
          WTF::fastFree(v30, v3);
        }
        v28 = (WTF *)((char *)v28 + 24);
        v29 -= 24;
      }
      while (v29);
      *((_DWORD *)a1 + 3) = 0;
      v28 = (WTF *)*a1;
    }
    if (v28)
    {
      *a1 = 0;
      *((_DWORD *)a1 + 2) = 0;
      WTF::fastFree(v28, v3);
    }
  }
}

uint64_t WebCore::SVGTextLayoutAttributes::context(WebCore::SVGTextLayoutAttributes *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8);
}

unint64_t WebCore::SVGTextLayoutAttributesBuilder::buildLayoutAttributesForTextRenderer(unint64_t this, WebCore::RenderSVGInlineText *a2)
{
  WebCore::SVGTextLayoutAttributesBuilder *v3;
  WebCore::RenderSVGInlineText *v4;
  uint64_t i;
  uint64_t v6;
  char *v7;
  char v8;

  v3 = (WebCore::SVGTextLayoutAttributesBuilder *)this;
  v4 = a2;
  if (*((_BYTE *)a2 + 46) == 85)
  {
LABEL_7:
    if (!*(_DWORD *)(this + 20))
    {
      v6 = *(_QWORD *)(this + 24);
      if (v6)
      {
        *(_QWORD *)(this + 24) = 0;
        WTF::fastFree((WTF *)(v6 - 16), a2);
      }
      *(_DWORD *)v3 = 0;
      LOBYTE(v7) = 1;
      this = WebCore::SVGTextLayoutAttributesBuilder::collectTextPositioningElements((uint64_t)v3, v4, (BOOL *)&v7);
      if (!*(_DWORD *)v3)
        return this;
      WebCore::SVGTextLayoutAttributesBuilder::buildCharacterDataMap(v3, v4);
    }
    v7 = (char *)v3 + 24;
    v8 = 0;
    return WebCore::SVGTextMetricsBuilder::walkTree((unint64_t)v3 + 32, (uint64_t)v4, (uint64_t)a2, (uint64_t)&v7);
  }
  for (i = *((_QWORD *)a2 + 4); i; i = *((_QWORD *)v4 + 4))
  {
    v4 = *(WebCore::RenderSVGInlineText **)(i + 8);
    if (!v4)
      break;
    if (*((_BYTE *)v4 + 46) == 85)
      goto LABEL_7;
  }
  return this;
}

uint64_t WebCore::SVGTextLayoutAttributesBuilder::collectTextPositioningElements(uint64_t this, WebCore::RenderBoxModelObject *a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  if (!(*((unsigned int *)a2 + 16) | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)))
    return this;
  v3 = *(_QWORD *)((*((unsigned int *)a2 + 16) | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
  if (!v3)
    return this;
  v5 = this;
  v6 = &WebCore::SVGNames::textTag;
  v7 = &WebCore::SVGNames::tspanTag;
  do
  {
    v8 = *(unsigned __int8 *)(v3 + 46);
    if (v8 == 72)
      v9 = v3;
    else
      v9 = 0;
    if (!v9)
    {
      if (v8 != 72)
        goto LABEL_35;
      goto LABEL_9;
    }
    ++*(_DWORD *)(v9 + 16);
    if (v8 != 72)
    {
      if (!MEMORY[0x10])
      {
        __break(0xC471u);
        JUMPOUT(0x1965419C4);
      }
      --MEMORY[0x10];
LABEL_35:
      if ((v8 - 71) > 0xF || ((1 << (v8 - 71)) & 0xA001) == 0)
        goto LABEL_14;
      v14 = (int *)(v3 + 16);
      ++*(_DWORD *)(v3 + 16);
      if ((v8 - 84) >= 3 && v8 != 71)
        goto LABEL_60;
      if ((*(_BYTE *)(v3 + 45) & 1) != 0)
      {
        v23 = 0;
      }
      else
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        if (v23 && (*(_WORD *)(v23 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196541A04);
        }
      }
      if ((*(_WORD *)(v23 + 28) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1965419E4);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24);
      if (v24 == *(_QWORD *)(*v6 + 24)
        || v24 == *(_QWORD *)(*v7 + 24)
        || v24 == *(_QWORD *)(WebCore::SVGNames::altGlyphTag + 24)
        || v24 == *(_QWORD *)(WebCore::SVGNames::trefTag + 24))
      {
        v25 = v7;
        v26 = v6;
        v27 = (_QWORD *)(v5 + 8);
        *(_DWORD *)(v23 + 24) += 2;
        v28 = *(_DWORD *)v5;
        *(_QWORD *)&v31 = v23;
        *((_QWORD *)&v31 + 1) = v28;
        v29 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v29 == *(_DWORD *)(v5 + 16))
          *(_OWORD *)(*(_QWORD *)(v5 + 8) + 16 * *(unsigned int *)(v5 + 20)) = *(_OWORD *)WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v29 + 1, (unint64_t)&v31);
        else
          *(_OWORD *)(*v27 + 16 * v29) = v31;
        ++*(_DWORD *)(v5 + 20);
        this = WebCore::SVGTextLayoutAttributesBuilder::collectTextPositioningElements((WebCore::SVGTextLayoutAttributesBuilder *)v5, (WebCore::RenderBoxModelObject *)v3, a3);
        if (*(_DWORD *)(v5 + 20) <= v29)
          goto LABEL_73;
        *(_DWORD *)(*(_QWORD *)(v5 + 8) + 16 * v29 + 12) = *(_DWORD *)v5
                                                         - *(_DWORD *)(*(_QWORD *)(v5 + 8) + 16 * v29 + 8);
        if (*(_DWORD *)(v23 + 24) != 2)
        {
          *(_DWORD *)(v23 + 24) -= 2;
          v6 = v26;
LABEL_50:
          v7 = v25;
          goto LABEL_51;
        }
        v6 = v26;
        v7 = v25;
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v23);
          goto LABEL_50;
        }
      }
      else
      {
LABEL_60:
        v30 = v7;
        this = WebCore::SVGTextLayoutAttributesBuilder::collectTextPositioningElements((WebCore::SVGTextLayoutAttributesBuilder *)v5, (WebCore::RenderBoxModelObject *)v3, a3);
        v7 = v30;
      }
LABEL_51:
      v13 = *v14;
      if (*v14)
        goto LABEL_13;
LABEL_73:
      __break(0xC471u);
      JUMPOUT(0x19654189CLL);
    }
LABEL_9:
    v10 = *(_QWORD *)(v3 + 32);
    v11 = *(_QWORD *)(v3 + 104);
    if (!v11)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v10 + 8) + 120) & 0x38000000) != 0x8000000)
        goto LABEL_12;
      LODWORD(v12) = 0;
LABEL_11:
      *(_DWORD *)v5 += v12;
      goto LABEL_12;
    }
    v12 = *(unsigned int *)(v11 + 4);
    if ((*(_DWORD *)(*(_QWORD *)(v10 + 8) + 120) & 0x38000000) == 0x8000000)
      goto LABEL_11;
    if (!(_DWORD)v12)
      goto LABEL_12;
    for (i = 0; i != v12; ++i)
    {
      if (i >= *(unsigned int *)(v11 + 4))
      {
        v20 = 0;
LABEL_27:
        *a3 = v20;
        ++*(_DWORD *)v5;
        continue;
      }
      v18 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        v19 = *(unsigned __int8 *)(v18 + i);
      else
        v19 = *(unsigned __int16 *)(v18 + 2 * i);
      v20 = v19 == 32;
      if (!v20 || !*a3)
        goto LABEL_27;
    }
    if (!v9)
      goto LABEL_14;
LABEL_12:
    v15 = *(_DWORD *)(v9 + 16);
    v14 = (int *)(v9 + 16);
    v13 = v15;
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1965419A4);
    }
LABEL_13:
    *v14 = v13 - 1;
LABEL_14:
    v16 = *(unsigned int *)(v3 + 47);
    if (!(v16 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
      break;
    v3 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
  }
  while (v3);
  return this;
}

void WebCore::SVGTextLayoutAttributesBuilder::buildCharacterDataMap(WebCore::SVGTextLayoutAttributesBuilder *this, WebCore::RenderSVGText *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14[7];
  int v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;

  v3 = *((unsigned __int8 *)a2 + 46);
  if ((v3 - 84) >= 3 && v3 != 71)
    goto LABEL_29;
  if ((*((_BYTE *)a2 + 45) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v4 && (*(_WORD *)(v4 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196541C68);
    }
  }
  if ((*(_WORD *)(v4 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    goto LABEL_37;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
  if (v5 == *(_QWORD *)(WebCore::SVGNames::textTag + 24)
    || v5 == *(_QWORD *)(WebCore::SVGNames::tspanTag + 24)
    || v5 == *(_QWORD *)(WebCore::SVGNames::altGlyphTag + 24)
    || v5 == *(_QWORD *)(WebCore::SVGNames::trefTag + 24))
  {
    v6 = 0;
    *(_DWORD *)(v4 + 24) += 2;
  }
  else
  {
LABEL_29:
    v4 = 0;
    v6 = 1;
  }
  v7 = *(_DWORD *)this;
  v18 = v4;
  v19 = 0;
  v20 = v7;
  WebCore::SVGTextLayoutAttributesBuilder::fillCharacterDataMap((uint64_t)this, &v18);
  v14[0] = 1;
  v8 = WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::find((uint64_t *)this + 3, v14);
  v9 = (int *)*((_QWORD *)this + 3);
  if (v9)
    v9 += 6 * *(v9 - 1);
  if (v9 == v8)
  {
    v17 = 2139095039;
    v16 = xmmword_1969FE160;
    v15 = 1;
    WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::inlineSet<unsigned int,WebCore::SVGCharacterData&>((uint64_t *)this + 3, &v15, (__n128 *)&v16, (uint64_t)v14);
  }
  else
  {
    if (*((float *)v8 + 1) == 3.4028e38)
      v8[1] = 0;
    if (*((float *)v8 + 2) == 3.4028e38)
      v8[2] = 0;
  }
  v10 = *((unsigned int *)this + 5);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 16 * v10;
    while (v12 < *((unsigned int *)this + 5))
    {
      WebCore::SVGTextLayoutAttributesBuilder::fillCharacterDataMap((uint64_t)this, (_DWORD *)(*((_QWORD *)this + 1) + v11));
      ++v12;
      v11 += 16;
      if (v13 == v11)
        goto LABEL_16;
    }
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x196541C48);
  }
LABEL_16:
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
}

unint64_t WebCore::SVGTextLayoutAttributesBuilder::rebuildMetricsForSubtree(WebCore::SVGTextLayoutAttributesBuilder *this, WebCore::RenderSVGText *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  return WebCore::SVGTextMetricsBuilder::walkTree((unint64_t)this + 32, (uint64_t)a2, 0, (uint64_t)&v3);
}

void WebCore::SVGTextLayoutAttributesBuilder::fillCharacterDataMap(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v34;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  unsigned int v58;
  int *v59;
  uint64_t v60;
  uint64_t v62;
  int32x4_t v63;
  _DWORD *v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int32x4_t v73;
  unsigned int v74;
  __n128 v75;
  int v76;
  float v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;

  v2 = a2;
  v4 = *(uint64_t **)(*(_QWORD *)a2 + 240);
  v6 = v4 + 3;
  v5 = v4[3];
  if (v5
    && *(_DWORD *)(v5 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v6, &v80), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v6, &v78), v81 != v79))
  {
    v7 = v4 + 6;
  }
  else
  {
    v7 = v4 + 5;
  }
  v8 = *v7;
  v9 = *(uint64_t **)(*(_QWORD *)v2 + 248);
  v11 = v9 + 3;
  v10 = v9[3];
  v72 = v8;
  if (v10
    && *(_DWORD *)(v10 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v11, &v80), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v11, &v78), v8 = v72, v81 != v79))
  {
    v12 = v9 + 6;
  }
  else
  {
    v12 = v9 + 5;
  }
  v13 = *v12;
  v14 = *(uint64_t **)(*(_QWORD *)v2 + 256);
  v16 = v14 + 3;
  v15 = v14[3];
  v71 = v13;
  if (v15
    && *(_DWORD *)(v15 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v16, &v80), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v16, &v78), v13 = v71, v8 = v72, v81 != v79))
  {
    v17 = v14 + 6;
  }
  else
  {
    v17 = v14 + 5;
  }
  v18 = *v17;
  v19 = *(uint64_t **)(*(_QWORD *)v2 + 264);
  v21 = v19 + 3;
  v20 = v19[3];
  v70 = v18;
  if (v20
    && *(_DWORD *)(v20 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v21, &v80), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v21, &v78), v18 = v70, v13 = v71, v8 = v72, v81 != v79))
  {
    v22 = v19 + 6;
  }
  else
  {
    v22 = v19 + 5;
  }
  v23 = *v22;
  v24 = *(uint64_t **)(*(_QWORD *)v2 + 272);
  v26 = v24 + 3;
  v25 = v24[3];
  v69 = v23;
  if (v25
    && *(_DWORD *)(v25 - 12)
    && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v26, &v80), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v26, &v78), v23 = v69, v18 = v70, v13 = v71, v8 = v72, v81 != v79))
  {
    v27 = v24 + 6;
  }
  else
  {
    v27 = v24 + 5;
  }
  v28 = *(unsigned int *)(v8 + 44);
  v29 = *(unsigned int *)(v13 + 44);
  v30 = *(unsigned int *)(v23 + 44);
  v67 = *(unsigned int *)(v18 + 44);
  v68 = *v27;
  v31 = *(unsigned int *)(*v27 + 44);
  if ((_DWORD)v28)
    v32 = 0;
  else
    v32 = (_DWORD)v29 == 0;
  v34 = v32 && *(_DWORD *)(v18 + 44) == 0 && (_DWORD)v30 == 0;
  v66 = v31;
  if (!v34 || (_DWORD)v31 != 0)
  {
    v77 = 3.4028e38;
    v36 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
      *(_DWORD *)(v36 + 24) += 2;
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v80, (const WebCore::SVGElement *)v36);
    LODWORD(v38) = v2[3];
    if ((_DWORD)v38)
    {
      v62 = v36;
      v39 = 0;
      v64 = v2;
      v65 = (uint64_t *)(a1 + 24);
      v63 = vdupq_n_s32(0x7F7FFFFFu);
      v41 = v71;
      v40 = v72;
      v43 = v69;
      v42 = v70;
      do
      {
        if (v39 >= v28)
          v44 = 0;
        else
          v44 = v40;
        if (v39 >= v29)
          v45 = 0;
        else
          v45 = v41;
        if (v39 < v67)
          v46 = v42;
        else
          v46 = 0;
        if (v39 >= v30)
          v47 = 0;
        else
          v47 = v43;
        if (v39 < v66)
          v48 = v68;
        else
          v48 = 0;
        if (v39 >= v28 && v39 >= v29 && !v46 && v39 >= v30 && !v48)
          break;
        LODWORD(v78) = v39 + v2[2] + 1;
        v49 = WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::find(v65, (int *)&v78);
        v50 = *v65;
        if (*v65)
          v50 += 24 * *(unsigned int *)(v50 - 4);
        v2 = v64;
        if ((int *)v50 == v49)
        {
          v75 = (__n128)v63;
          v76 = 2139095039;
          if (v44)
          {
            if (v39 >= *(unsigned int *)(v44 + 44))
            {
              __break(0xC471u);
              JUMPOUT(0x196542284);
            }
            v75.n128_u32[0] = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + 8 * v39) + 28), (const WebCore::SVGLengthContext *)&v80);
          }
          if (v45)
          {
            if (v39 >= *(unsigned int *)(v45 + 44))
            {
              __break(0xC471u);
              JUMPOUT(0x19654227CLL);
            }
            v75.n128_u32[1] = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8 * v39) + 28), (const WebCore::SVGLengthContext *)&v80);
          }
          if (v46)
          {
            if (v39 >= *(unsigned int *)(v46 + 44))
            {
              __break(0xC471u);
              JUMPOUT(0x196542294);
            }
            v75.n128_u32[2] = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(v46 + 32) + 8 * v39) + 28), (const WebCore::SVGLengthContext *)&v80);
            v2 = v64;
          }
          if (v47)
          {
            if (v39 >= *(unsigned int *)(v47 + 44))
            {
              __break(0xC471u);
              JUMPOUT(0x19654228CLL);
            }
            v75.n128_u32[3] = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(v47 + 32) + 8 * v39) + 28), (const WebCore::SVGLengthContext *)&v80);
          }
          if (v48)
          {
            if (v39 >= *(unsigned int *)(v48 + 44))
            {
              __break(0xC471u);
              JUMPOUT(0x19654229CLL);
            }
            v76 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 32) + 8 * v39) + 28);
            v77 = *(float *)&v76;
            v2 = v64;
          }
          v74 = v39 + v2[2] + 1;
          WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::inlineSet<unsigned int,WebCore::SVGCharacterData&>(v65, (int *)&v74, &v75, (uint64_t)&v78);
        }
        else
        {
          WebCore::updateCharacterData(v39, &v77, (float *)v49 + 1, (const WebCore::SVGLengthContext *)&v80, v44, v45, v46, v47, v48);
        }
        ++v39;
        v38 = v2[3];
        v41 = v71;
        v40 = v72;
        v43 = v69;
        v42 = v70;
      }
      while (v39 < v38);
      v51 = LODWORD(v77);
      v36 = v62;
      if (v77 != 3.4028e38)
      {
        v57 = *(_DWORD *)(v68 + 44);
        if (v57 < v38)
        {
          v58 = v57 + 1;
          v73 = vdupq_n_s32(0x7F7FFFFFu);
          do
          {
            LODWORD(v78) = v58 + v2[2];
            v59 = WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::find(v65, (int *)&v78);
            v60 = *v65;
            if (*v65)
              v60 += 24 * *(unsigned int *)(v60 - 4);
            if ((int *)v60 == v59)
            {
              v75 = (__n128)v73;
              v76 = v51;
              v74 = v58 + v2[2];
              WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::inlineSet<unsigned int,WebCore::SVGCharacterData&>(v65, (int *)&v74, &v75, (uint64_t)&v78);
            }
            else
            {
              v59[5] = v51;
            }
          }
          while (v58++ < v2[3]);
        }
      }
    }
    v52 = v80;
    v80 = 0;
    if (v52)
    {
      do
      {
        v53 = __ldaxr((unsigned int *)v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, (unsigned int *)v52));
      if (!v54)
      {
        atomic_store(1u, (unsigned int *)v52);
        v55 = *((unsigned int *)v52 + 7);
        if ((_DWORD)v55)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct((WTF::StringImpl *)v52[2], (WTF::StringImpl *)(v52[2] + 32 * v55));
        v56 = (WTF *)v52[2];
        if (v56)
        {
          v52[2] = 0;
          *((_DWORD *)v52 + 6) = 0;
          WTF::fastFree(v56, v37);
        }
        WTF::fastFree((WTF *)v52, v37);
      }
    }
    if (v36)
    {
      if (*(_DWORD *)(v36 + 24) == 2)
      {
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36);
      }
      else
      {
        *(_DWORD *)(v36 + 24) -= 2;
      }
    }
  }
}

int *WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::find(uint64_t *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *result;
  int v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ HIWORD(v6)) & v3;
  result = (int *)(v2 + 24 * v7);
  v9 = *result;
  if (*result != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      result = (int *)(v2 + 24 * v7);
      v9 = *result;
      ++v10;
      if (*result == v4)
        return result;
    }
    return (int *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

float WebCore::updateCharacterData(unsigned int a1, float *a2, float *a3, const WebCore::SVGLengthContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float result;

  if (a5)
  {
    if (*(_DWORD *)(a5 + 44) <= a1)
    {
      __break(0xC471u);
      JUMPOUT(0x196542480);
    }
    result = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8 * a1) + 28), a4);
    *a3 = result;
  }
  if (a6)
  {
    if (*(_DWORD *)(a6 + 44) <= a1)
      goto LABEL_21;
    result = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8 * a1) + 28), a4);
    a3[1] = result;
  }
  if (a7)
  {
    if (*(_DWORD *)(a7 + 44) <= a1)
    {
      __break(0xC471u);
      JUMPOUT(0x196542490);
    }
    result = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(a7 + 32) + 8 * a1) + 28), a4);
    a3[2] = result;
  }
  if (a8)
  {
    if (*(_DWORD *)(a8 + 44) <= a1)
    {
      __break(0xC471u);
      JUMPOUT(0x196542488);
    }
    result = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)(*(_QWORD *)(a8 + 32) + 8 * a1) + 28), a4);
    a3[3] = result;
  }
  if (a9)
  {
    if (*(_DWORD *)(a9 + 44) > a1)
    {
      result = *(float *)(*(_QWORD *)(*(_QWORD *)(a9 + 32) + 8 * a1) + 28);
      a3[4] = result;
      *a2 = result;
      return result;
    }
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x196542478);
  }
  return result;
}

__n128 WebCore::SVGTextLayoutEngine::recordTextFragment(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  float *v38;
  float v39;
  __n128 v40;

  v3 = (__int128 *)(a1 + 64);
  v4 = *(unsigned int *)(a1 + 208);
  v5 = *(_DWORD *)(a1 + 204) - *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 72) & 0x80000000 | v5 & 0x7FFFFFFF;
  v6 = v4 - 1;
  v7 = *((_DWORD *)a3 + 3);
  if (v7 <= (int)v4 - 1)
    goto LABEL_25;
  v9 = *a3;
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(*a3 + 40 * v6);
  if ((v5 & 0x7FFFFFFE) == 0)
    goto LABEL_11;
  v10 = *(unsigned int *)(a1 + 68);
  if (*(_BYTE *)(a1 + 234))
  {
    v35 = 0.0;
    if (v10 >= v4)
    {
LABEL_22:
      *(float *)(a1 + 88) = v35;
      goto LABEL_11;
    }
    v11 = v7 >= v10;
    v36 = v7 - v10;
    if (!v11)
      v36 = 0;
    if (v36 > v6 - v10)
    {
      v37 = v4 - v10;
      v38 = (float *)(v9 + 40 * v10 + 4);
      do
      {
        v39 = *v38;
        v38 += 10;
        v35 = v35 + v39;
        --v37;
      }
      while (v37);
      goto LABEL_22;
    }
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x196542658);
  }
  if (v10 >= v4)
  {
    v15 = 0.0;
  }
  else
  {
    v11 = v7 >= v10;
    v12 = v7 - v10;
    if (!v11)
      v12 = 0;
    if (v12 <= v6 - v10)
    {
      __break(0xC471u);
      JUMPOUT(0x196542660);
    }
    v13 = v4 - v10;
    v14 = (float *)(v9 + 40 * v10);
    v15 = 0.0;
    do
    {
      v16 = *v14;
      v14 += 10;
      v15 = v15 + v16;
      --v13;
    }
    while (v13);
  }
  *(float *)(a1 + 84) = v15;
LABEL_11:
  v17 = (_QWORD *)(a2 + 112);
  v18 = *(unsigned int *)(a2 + 124);
  if ((_DWORD)v18 == *(_DWORD *)(a2 + 120))
  {
    v19 = (__int128 *)WTF::Vector<WebCore::SVGTextFragment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v18 + 1, (unint64_t)v3);
    v20 = (_OWORD *)(*(_QWORD *)(a2 + 112) + ((unint64_t)*(unsigned int *)(a2 + 124) << 7));
    v21 = v19[7];
    v23 = v19[4];
    v22 = v19[5];
    v20[6] = v19[6];
    v20[7] = v21;
    v20[4] = v23;
    v20[5] = v22;
    v24 = *v19;
    v25 = v19[1];
    v26 = v19[3];
    v20[2] = v19[2];
    v20[3] = v26;
    *v20 = v24;
    v20[1] = v25;
  }
  else
  {
    v28 = (_OWORD *)(*v17 + (v18 << 7));
    v29 = *v3;
    v30 = v3[1];
    v31 = v3[3];
    v28[2] = v3[2];
    v28[3] = v31;
    *v28 = v29;
    v28[1] = v30;
    v32 = v3[4];
    v33 = v3[5];
    v34 = v3[7];
    v28[6] = v3[6];
    v28[7] = v34;
    v28[4] = v32;
    v28[5] = v33;
  }
  ++*(_DWORD *)(a2 + 124);
  v40.n128_u32[2] = 0;
  v40.n128_u64[0] = 0;
  v3[2] = constinit_11;
  v3[3] = xmmword_1969FE180;
  v3[6] = xmmword_1969FE180;
  v3[7] = xmmword_1969FE190;
  v3[4] = xmmword_1969FE190;
  v3[5] = constinit_11;
  result = v40;
  *v3 = 0uLL;
  v3[1] = (__int128)v40;
  return result;
}

WTF *WebCore::SVGTextLayoutEngine::finalizeTransformMatrices(WTF *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  float64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  float64_t v9;
  double v10;
  float64_t v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  float64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _DWORD *v25;
  WTF *v26;

  v2 = a2[3];
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)a2;
    v4 = *(_QWORD *)a2 + 8 * v2;
    v5 = (float64x2_t)xmmword_1968A14B0;
    do
    {
      v6 = *v3;
      v7 = *((_QWORD *)result + 7);
      v8 = &constinit_11;
      if (v7)
      {
        v25 = a2;
        v26 = result;
        v23 = *v3;
        v24 = v3;
        v18 = *((_QWORD *)result + 7);
        v22 = v4;
        v21 = v5;
        v19 = WTF::HashTable<WebCore::SVGInlineTextBox *,WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>>,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashMap<WebCore::SVGInlineTextBox *,WebCore::AffineTransform,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SVGInlineTextBox *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SVGInlineTextBox *,WebCore::AffineTransform,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SVGInlineTextBox *>>,WebCore::SVGInlineTextBox *>(v7, v6);
        v5 = v21;
        v4 = v22;
        v6 = v23;
        v3 = v24;
        v20 = v19;
        a2 = v25;
        result = v26;
        if (!v20)
          v20 = (uint64_t *)(v18 + 56 * *(unsigned int *)(v18 - 4));
        if (v20 == (uint64_t *)(v18 + 56 * *(unsigned int *)(v18 - 4)))
          v8 = &constinit_11;
        else
          v8 = (__int128 *)(v20 + 1);
      }
      v9 = *(double *)v8;
      v10 = *((double *)v8 + 1);
      v11 = *((double *)v8 + 2);
      v12 = *(float64x2_t *)((char *)v8 + 24);
      v13 = *((double *)v8 + 5);
      v14.f64[0] = *(float64_t *)v8;
      v14.f64[1] = v11;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v14, v5), (int32x4_t)vceqq_f64(v12, v5))))) & 1) != 0|| v10 != 0.0|| v13 != 0.0)
      {
        v15 = *(unsigned int *)(v6 + 124);
        if ((_DWORD)v15)
        {
          v16 = (double *)(*(_QWORD *)(v6 + 112) + 120);
          v17 = v15 << 7;
          do
          {
            *(v16 - 5) = v9;
            *(v16 - 4) = v10;
            *(v16 - 3) = v11;
            *((float64x2_t *)v16 - 1) = v12;
            *v16 = v13;
            v16 += 16;
            v17 -= 128;
          }
          while (v17);
        }
      }
      ++v3;
    }
    while (v3 != (uint64_t *)v4);
    if (a2[2])
    {
      if (a2[3])
        a2[3] = 0;
      result = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)a2 = 0;
        a2[2] = 0;
        return (WTF *)WTF::fastFree(result, a2);
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGTextLayoutEngine::currentLogicalCharacterAttributes(WebCore::SVGTextLayoutEngine *this, WebCore::SVGTextLayoutAttributes **a2)
{
  uint64_t v2;
  unsigned int v3;
  WebCore::SVGTextLayoutAttributes *v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;

  v2 = *((unsigned int *)this + 48);
  v3 = *(_DWORD *)(*(_QWORD *)this + 12);
  if (v3 != (_DWORD)v2)
  {
    if (v3 <= v2)
      goto LABEL_11;
    v4 = *(WebCore::SVGTextLayoutAttributes **)(**(_QWORD **)this + 8 * v2);
    *a2 = v4;
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 104);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 4);
    if (*((_DWORD *)this + 49) != (_DWORD)v5)
      return 1;
    v7 = (v2 + 1);
    *((_DWORD *)this + 48) = v7;
    v8 = *(_DWORD *)(*(_QWORD *)this + 12);
    if (v8 != (_DWORD)v7)
    {
      if (v8 > v7)
      {
        *a2 = *(WebCore::SVGTextLayoutAttributes **)(**(_QWORD **)this + 8 * v7);
        *((_DWORD *)this + 49) = 0;
        *((_DWORD *)this + 50) = 0;
        return 1;
      }
LABEL_11:
      __break(0xC471u);
      JUMPOUT(0x196542864);
    }
  }
  return 0;
}

void WebCore::SVGRootInlineBox::~SVGRootInlineBox(WebCore::SVGRootInlineBox *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  *(_QWORD *)this = off_1E341E6E0;
  v7 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  *(_QWORD *)this = off_1E341E8B8;
  v8 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  *(_QWORD *)this = off_1E341E6E0;
  v7 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  *(_QWORD *)this = off_1E341E8B8;
  v8 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
  if (*((_DWORD *)this + 28))
  {
    *((_QWORD *)this + 16) = 0;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, a2);
  }
}

uint64_t WebCore::SVGRootInlineBox::isSVGRootInlineBox(WebCore::SVGRootInlineBox *this)
{
  return 1;
}

float WebCore::SVGRootInlineBox::virtualLogicalHeight(WebCore::SVGRootInlineBox *this)
{
  return *((float *)this + 33);
}

void WebCore::SVGTextLayoutEngine::~SVGTextLayoutEngine(WebCore::SVGTextLayoutEngine *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  char v13;

  v3 = *((unsigned int *)this + 76);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E344A148[v3])(&v13, (char *)this + 248);
  *((_DWORD *)this + 76) = -1;
  v4 = *((_QWORD *)this + 7);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((unsigned int *)this + 13);
  v6 = (WTF *)*((_QWORD *)this + 5);
  if (!(_DWORD)v5)
  {
    if (!v6)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = 24 * v5;
  do
  {
    v10 = *(WTF **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v6 + 2) = 0;
      v11 = v9;
      v12 = v6;
      WTF::fastFree(v10, a2);
      v9 = v11;
      v6 = v12;
    }
    v6 = (WTF *)((char *)v6 + 24);
    v9 -= 24;
  }
  while (v9);
  v6 = (WTF *)*((_QWORD *)this + 5);
  if (v6)
  {
LABEL_17:
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v6, a2);
  }
LABEL_7:
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v8, a2);
  }
}

uint64_t WebCore::SVGRootInlineBox::reorderValueListsToLogicalOrder(WTF::Vector<WebCore::SVGTextLayoutAttributes *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WebCore::InlineIterator::LeafBoxIterator *,WebCore::InlineIterator::LeafBoxIterator *>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int *v29;
  int v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  unsigned int v50;
  uint64_t *v51;

  if (a2 != a3)
  {
    v3 = a3;
    v4 = a2;
    v5 = result;
    while (1)
    {
      v6 = v3 - 3;
      if (v4 == v3 - 3)
        return result;
      if (*((_DWORD *)v4 + 4) == 1)
        v7 = *v4;
      else
        v7 = 0;
      if (*((_DWORD *)v3 - 2) == 1)
      {
        v8 = *v6;
        if (!v7)
          goto LABEL_63;
      }
      else
      {
        v8 = 0;
        if (!v7)
          goto LABEL_63;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
      if ((_DWORD)result)
        v9 = v8 == 0;
      else
        v9 = 1;
      if (!v9)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
        if ((result & 1) != 0)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) & 1) == 0)
            goto LABEL_91;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
          if ((result & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196542FD0);
          }
          if (*(_DWORD *)(v7 + 76) != 1 || *(_DWORD *)(v8 + 76) != 1)
            goto LABEL_63;
          v10 = *(_QWORD *)(v7 + 32);
          if (v10)
            v11 = *(_QWORD *)(v10 + 8);
          else
            v11 = 0;
          if ((*(_BYTE *)(v11 + 45) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196542FF0);
          }
          if (*(_BYTE *)(v11 + 46) != 72)
          {
            __break(0xC471u);
            JUMPOUT(0x196543010);
          }
          v12 = *(_QWORD *)(v8 + 32);
          if (v12)
            v13 = *(_QWORD *)(v12 + 8);
          else
            v13 = 0;
          if ((*(_BYTE *)(v13 + 45) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196543030);
          }
          if (*(_BYTE *)(v13 + 46) != 72)
          {
LABEL_91:
            __break(0xC471u);
            JUMPOUT(0x196542FB0);
          }
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = *(uint64_t **)v5;
          v19 = *(unsigned int *)(v5 + 12);
          while (2)
          {
            v20 = *v18;
            if (v17)
            {
LABEL_31:
              if (!v16)
                goto LABEL_36;
            }
            else
            {
              if (*(_QWORD *)(*(_QWORD *)v20 + 8) != v11)
              {
                v17 = 0;
                goto LABEL_31;
              }
              v14 = *v18;
              v16 = v15;
              v17 = *v18;
              if (!v15)
              {
LABEL_36:
                result = *(_QWORD *)(*(_QWORD *)v20 + 8);
                v16 = *v18;
                v21 = v14;
                if (result != v13)
                {
                  v16 = 0;
LABEL_38:
                  ++v18;
                  if (!--v19)
                    goto LABEL_41;
                  continue;
                }
LABEL_33:
                if (v21)
                {
                  v15 = v20;
LABEL_41:
                  v22 = *(int **)(v14 + 8);
                  if (v22)
                  {
                    v23 = *(_DWORD *)(v7 + 72);
                    v24 = v23 + 1;
                    v25 = *(v22 - 2);
                    v26 = 9 * ((v23 - (v24 << 15)) ^ ((v23 - (v24 << 15)) >> 10));
                    v27 = (v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11);
                    v28 = v25 & (v27 ^ HIWORD(v27));
                    v29 = &v22[6 * v28];
                    v30 = *v29;
                    if (*v29 != v24)
                    {
                      v31 = 1;
                      while (v30)
                      {
                        v28 = (v28 + v31) & v25;
                        v29 = &v22[6 * v28];
                        v30 = *v29;
                        ++v31;
                        if (*v29 == v24)
                          goto LABEL_49;
                      }
                      v29 = &v22[6 * *(v22 - 1)];
                    }
                  }
                  else
                  {
                    v29 = 0;
                  }
LABEL_49:
                  v32 = *(int **)(v15 + 8);
                  if (v32)
                  {
                    v33 = *(_DWORD *)(v8 + 72);
                    v34 = v33 + 1;
                    v35 = *(v32 - 2);
                    v36 = 9 * ((v33 - (v34 << 15)) ^ ((v33 - (v34 << 15)) >> 10));
                    v37 = (v36 ^ (v36 >> 6)) + ~((v36 ^ (v36 >> 6)) << 11);
                    v38 = v35 & (v37 ^ HIWORD(v37));
                    v39 = &v32[6 * v38];
                    v40 = *v39;
                    if (*v39 != v34)
                    {
                      v41 = 1;
                      while (v40)
                      {
                        v38 = (v38 + v41) & v35;
                        v39 = &v32[6 * v38];
                        v40 = *v39;
                        ++v41;
                        if (*v39 == v34)
                          goto LABEL_56;
                      }
                      v39 = &v32[6 * *(v32 - 1)];
                    }
LABEL_56:
                    if (v22)
LABEL_57:
                      v22 += 6 * *(v22 - 1);
                  }
                  else
                  {
                    v39 = 0;
                    if (v22)
                      goto LABEL_57;
                  }
                  if (v32)
                    v32 += 6 * *(v32 - 1);
                  if (v29 != v22 && v39 != v32)
                  {
                    v42 = v29[5];
                    v43 = *(_OWORD *)(v29 + 1);
                    v44 = v39[5];
                    *(_OWORD *)(v29 + 1) = *(_OWORD *)(v39 + 1);
                    v29[5] = v44;
                    *(_OWORD *)(v39 + 1) = v43;
                    v39[5] = v42;
                  }
                  goto LABEL_63;
                }
                v17 = 0;
                v15 = v20;
                goto LABEL_38;
              }
            }
            break;
          }
          v20 = v15;
          v21 = v17;
          goto LABEL_33;
        }
      }
LABEL_63:
      v49[0] = 0;
      v50 = -1;
      v45 = *((unsigned int *)v4 + 4);
      if ((_DWORD)v45 == -1)
        break;
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E344A1A8[v45])(&v51, v49, v4);
      v50 = v45;
      v47 = *((unsigned int *)v4 + 4);
      v46 = *((unsigned int *)v3 - 2);
      if ((_DWORD)v47 == -1)
      {
        if (v46 == 0xFFFFFFFFLL)
          goto LABEL_75;
LABEL_70:
        v51 = v4;
        result = ((uint64_t (*)(uint64_t **, uint64_t *, uint64_t *))off_1E344A1B8[v46])(&v51, v4, v3 - 3);
        goto LABEL_71;
      }
      if (v46 != 0xFFFFFFFFLL)
        goto LABEL_70;
      result = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E344A198[v47])(&v51, v4);
      *((_DWORD *)v4 + 4) = -1;
LABEL_71:
      v48 = *((unsigned int *)v3 - 2);
      v45 = v50;
      if ((_DWORD)v48 != -1)
      {
        if (v50 == 0xFFFFFFFFLL)
        {
          result = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E344A198[v48])(&v51, v3 - 3);
          *((_DWORD *)v3 - 2) = -1;
        }
        else
        {
LABEL_75:
          v51 = v3 - 3;
          result = ((uint64_t (*)(uint64_t **, uint64_t *, _BYTE *))off_1E344A1B8[v45])(&v51, v3 - 3, v49);
        }
        if (v50 != -1)
          result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E344A198[v50])(&v51, v49);
        goto LABEL_78;
      }
      if (v50 != 0xFFFFFFFFLL)
        goto LABEL_75;
LABEL_78:
      v4 += 3;
      v3 -= 3;
      if (v4 == v6)
        return result;
    }
    v46 = *((unsigned int *)v3 - 2);
    if ((_DWORD)v46 == -1)
      goto LABEL_78;
    goto LABEL_70;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SVGInlineTextBox *,WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>>,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashMap<WebCore::SVGInlineTextBox *,WebCore::AffineTransform,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SVGInlineTextBox *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t i;
  __int128 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_OWORD *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = 0;
      *v10 = constinit_11;
      v10[1] = xmmword_1969FE180;
      v10[2] = xmmword_1969FE190;
      v10 = (_OWORD *)((char *)v10 + 56);
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (__int128 *)(v4 + 56 * i);
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (~(*(_QWORD *)v12 << 32) + *(_QWORD *)v12) ^ ((~(*(_QWORD *)v12 << 32) + *(_QWORD *)v12) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v13 + 56 * v18;
          v8 = *(void **)v20;
          v18 = (v18 + v19++) & v14;
        }
        while (*(_QWORD *)v20);
        v21 = *v12;
        v22 = v12[1];
        v23 = v12[2];
        *(_QWORD *)(v20 + 48) = *((_QWORD *)v12 + 6);
        *(_OWORD *)(v20 + 16) = v22;
        *(_OWORD *)(v20 + 32) = v23;
        *(_OWORD *)v20 = v21;
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t *WTF::HashTable<WebCore::SVGInlineTextBox *,WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SVGInlineTextBox *,WebCore::AffineTransform>>,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashMap<WebCore::SVGInlineTextBox *,WebCore::AffineTransform,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SVGInlineTextBox *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SVGInlineTextBox *,WebCore::AffineTransform,WTF::DefaultHash<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::SVGInlineTextBox *>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SVGInlineTextBox *>>,WebCore::SVGInlineTextBox *>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 56 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v2;
      v7 = (uint64_t *)(a1 + 56 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        return v7;
    }
    return 0;
  }
  return v7;
}

unint64_t WTF::Vector<WebCore::SVGTextChunk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGTextChunk>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WebCore::SVGTextChunk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(result + 16);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::SVGTextChunk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SVGTextChunk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::SVGTextChunk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SVGTextChunk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  WTF *v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = 24 * v4;
        v8 = (char *)v3 + 8;
        do
        {
          *(_QWORD *)result = 0;
          *(_QWORD *)(result + 8) = 0;
          v9 = *((_QWORD *)v8 - 1);
          *((_QWORD *)v8 - 1) = 0;
          *(_QWORD *)result = v9;
          LODWORD(v9) = *(_DWORD *)v8;
          *(_DWORD *)v8 = 0;
          *(_DWORD *)(result + 8) = v9;
          LODWORD(v9) = *((_DWORD *)v8 + 1);
          *((_DWORD *)v8 + 1) = 0;
          *(_DWORD *)(result + 12) = v9;
          v12 = result;
          *(_QWORD *)(result + 16) = *((_QWORD *)v8 + 1);
          v10 = v8;
          v11 = (WTF *)*((_QWORD *)v8 - 1);
          if (v11)
          {
            *((_QWORD *)v8 - 1) = 0;
            *(_DWORD *)v8 = 0;
            WTF::fastFree(v11, v6);
          }
          v8 = v10 + 24;
          result = v12 + 24;
          v7 -= 24;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

__n128 WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::inlineSet<unsigned int,WebCore::SVGCharacterData&>@<Q0>(uint64_t *a1@<X0>, int *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  __n128 result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = v8 + 24 * v14;
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v8 + 24 * v26;
        *(_BYTE *)(a4 + 16) = 0;
        result = *a3;
        *(_DWORD *)(v15 + 20) = a3[1].n128_u32[0];
        *(__n128 *)(v15 + 4) = result;
        return result;
      }
      if (v16 == -1)
        v24 = v15;
      v14 = (v14 + v25) & v10;
      v15 = v8 + 24 * v14;
      v16 = *(_DWORD *)v15;
      ++v25;
    }
    while (*(_DWORD *)v15);
    if (v24)
    {
      *(_DWORD *)v24 = 0;
      *(int32x4_t *)(v24 + 4) = vdupq_n_s32(0x7F7FFFFFu);
      *(_DWORD *)(v24 + 20) = 2139095039;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v15 = v24;
    }
  }
  *(_DWORD *)v15 = v11;
  result = *a3;
  *(_DWORD *)(v15 + 20) = a3[1].n128_u32[0];
  *(__n128 *)(v15 + 4) = result;
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_11;
LABEL_15:
    v15 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a1, (_DWORD *)v15);
    v20 = *a1;
    if (*a1)
      LODWORD(v23) = *(_DWORD *)(v20 - 4);
    else
      LODWORD(v23) = 0;
    goto LABEL_11;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_15;
LABEL_11:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v20 + 24 * v23;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int32x4_t *v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t result;
  _DWORD *v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (int32x4_t *)(v9 + 20);
    v13 = vdupq_n_s32(0x7F7FFFFFu);
    do
    {
      v12[-1].i32[3] = 0;
      *v12 = v13;
      v12[1].i32[0] = 2139095039;
      v12 = (int32x4_t *)((char *)v12 + 24);
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v14 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v16 = (_DWORD *)v6;
    do
    {
      if ((*v16 + 1) >= 2)
      {
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(a1, (uint64_t)v16);
        if (v16 == a3)
          v14 = v17;
      }
      v16 += 6;
      --v7;
    }
    while (v7);
    goto LABEL_15;
  }
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

__n128 WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::SVGCharacterData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  __n128 result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) ^ ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v6 ^ HIWORD(v6);
  do
  {
    v8 = v7 & v3;
    v9 = v2 + 24 * v8;
    v7 = ++v4 + v8;
  }
  while (*(_DWORD *)v9);
  result = *(__n128 *)a2;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(__n128 *)v9 = result;
  return result;
}

uint64_t WTF::Vector<WebCore::SVGTextFragment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 128 * (unint64_t)*(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::SVGTextFragment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 25))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(v9 << 7));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = v10 << 7;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        v16 = *((_OWORD *)v14 + 1);
        v17 = *((_OWORD *)v14 + 3);
        v11[2] = *((_OWORD *)v14 + 2);
        v11[3] = v17;
        *v11 = v15;
        v11[1] = v16;
        v18 = *((_OWORD *)v14 + 4);
        v19 = *((_OWORD *)v14 + 5);
        v20 = *((_OWORD *)v14 + 7);
        v11[6] = *((_OWORD *)v14 + 6);
        v11[7] = v20;
        v11[4] = v18;
        v11[5] = v19;
        v11 += 8;
        v14 = (WTF *)((char *)v14 + 128);
        v13 -= 128;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::SVGTextFragment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 25)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(v5 << 7));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = v8 << 7;
        v11 = v7;
        do
        {
          v12 = *(_OWORD *)v11;
          v13 = *((_OWORD *)v11 + 1);
          v14 = *((_OWORD *)v11 + 3);
          *(_OWORD *)(result + 32) = *((_OWORD *)v11 + 2);
          *(_OWORD *)(result + 48) = v14;
          *(_OWORD *)result = v12;
          *(_OWORD *)(result + 16) = v13;
          v15 = *((_OWORD *)v11 + 4);
          v16 = *((_OWORD *)v11 + 5);
          v17 = *((_OWORD *)v11 + 7);
          *(_OWORD *)(result + 96) = *((_OWORD *)v11 + 6);
          *(_OWORD *)(result + 112) = v17;
          *(_OWORD *)(result + 64) = v15;
          *(_OWORD *)(result + 80) = v16;
          result += 128;
          v11 = (WTF *)((char *)v11 + 128);
          v10 -= 128;
        }
        while (v10);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

WebCore::SVGTextMetrics *WebCore::SVGTextMetrics::SVGTextMetrics(WebCore::SVGTextMetrics *this, WebCore::RenderSVGInlineText *a2, const WebCore::TextRun *a3)
{
  WTF::StringImpl **v5;
  float v6;
  WebCore::FontCascade *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v17;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  v5 = (WTF::StringImpl **)((char *)this + 24);
  *((_QWORD *)this + 4) = 0;
  v6 = *((float *)a2 + 30);
  v7 = (WebCore::RenderSVGInlineText *)((char *)a2 + 128);
  *(float *)this = WebCore::FontCascade::width((uint64_t)a2 + 128, (uint64_t)a3) / v6;
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v9 += 2;
  v10 = *v5;
  *v5 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = WebCore::FontCascade::metricsOfPrimaryFont(v7, v8);
  *((float *)this + 1) = (float)(*(float *)(v11 + 4) + *(float *)(v11 + 12)) / v6;
  v12 = *((_QWORD *)a3 + 1);
  if (v12 && (*(_BYTE *)(v12 + 16) & 4) == 0)
    WTF::String::String();
  else
    WTF::String::String();
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v17;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  *((_BYTE *)this + 16) = 1;
  v15 = *((_QWORD *)a3 + 1);
  if (v15)
    LODWORD(v15) = *(_DWORD *)(v15 + 4);
  *((_DWORD *)this + 2) = v15;
  return this;
}

WTF::StringImpl *WebCore::SVGTextMetrics::constructTextRun(WebCore::SVGTextMetrics *this, unint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5;
  _BOOL4 v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl *result;
  char v15;
  WTF::StringImpl *v16;

  if (a2)
    v8 = *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  if (a3)
    v9 = *(unsigned int *)(a3 + 4) | ((unint64_t)((*(_DWORD *)(a3 + 16) >> 2) & 1) << 32);
  else
    v9 = 0x100000000;
  if (v9 <= a4)
  {
    v10 = 0x100000000;
  }
  else
  {
    if (v9 - a4 <= a5)
    {
      if (!a4)
      {
        v10 = v9;
        goto LABEL_10;
      }
      a5 = v9 - a4;
    }
    v10 = a5;
    v11 = v9 - (unint64_t)a4;
    if ((v9 & 0x100000000) != 0)
    {
      if (v11 >= a5)
      {
        v10 = a5 | 0x100000000;
        goto LABEL_10;
      }
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v11 < a5)
      goto LABEL_40;
  }
LABEL_10:
  v5 = *(_DWORD *)(v8 + 120);
  v12 = (*(_DWORD *)(v8 + 96) >> 22) & 7;
  v6 = v12 == 2 || v12 == 5;
  a2 = v10;
  if ((v10 & 0x100000000) != 0)
  {
    if ((_DWORD)v10)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_19:
      result = v16;
      goto LABEL_20;
    }
  }
  else if ((_DWORD)v10)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_19;
  }
LABEL_41:
  result = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_20:
  *(_DWORD *)this = 0;
  if (result)
    *(_DWORD *)result += 2;
  *((_QWORD *)this + 1) = result;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 3) = 0x3F80000000000000;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = 4;
  if (v6)
    v15 = 4;
  else
    v15 = 0;
  *((_BYTE *)this + 37) = (v5 >> 25) & 2 | *((_BYTE *)this + 37) & 0xE0 | v15 | 8;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_BYTE *)this + 37) |= 0x10u;
  return result;
}

WebCore::SVGTextMetricsBuilder *WebCore::SVGTextMetricsBuilder::SVGTextMetricsBuilder(WebCore::SVGTextMetricsBuilder *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  int v4;
  int v5;

  *(_QWORD *)this = 0;
  v3 = (_DWORD *)MEMORY[0x1E0CBEF70];
  v4 = *MEMORY[0x1E0CBEF70];
  *((_DWORD *)this + 2) = 0;
  *v3 = v4 + 4;
  *((_QWORD *)this + 2) = v3;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 1;
  *((_QWORD *)this + 4) = 0x3F80000000000000;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 4;
  *((_BYTE *)this + 45) = *((_BYTE *)this + 45) & 0xE0 | 8;
  v5 = v4 + 2;
  if (v5)
    *v3 = v5;
  else
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEF70], a2);
  *((_DWORD *)this + 12) = 0;
  *((_WORD *)this + 26) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  return this;
}

void WebCore::SVGTextMetrics::~SVGTextMetrics(WebCore::SVGTextMetrics *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

unint64_t WebCore::SVGTextMetricsBuilder::measureTextRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t **v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  float *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  BOOL v35;
  _BOOL4 v37;
  __int16 canUseSimplifiedTextMeasuring;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int32x4_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  float v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  float v54;
  BOOL v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  int v74;
  _BOOL4 v78;
  int v79;
  uint64_t *v80;
  uint64_t **v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t *v87;
  int v88;
  uint64_t *v89;
  int v90;
  int v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl **v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *p_dst;
  WTF::StringImpl *v106;
  __int16 v107;
  int v108;
  uint64_t *v109;
  int v110;
  uint64_t *v111;
  int v112;
  WTF *v113;
  void *v114;
  __int128 v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  float v145;
  float v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  int *v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  float v171;
  float v172;
  WTF *v173;
  float v174;
  float v175;
  uint64_t v176;
  float v177;
  float v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF *v181;
  WTF *v182;
  WTF *v183;
  WTF *v184;
  WTF *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD *v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  unsigned int v204;
  uint64_t v206;
  WTF *v207;
  _DWORD *v208;
  uint64_t v209;
  int v210;
  WTF *v211;
  uint64_t *v212;
  int v213;
  uint64_t *v214;
  int v215;
  uint64_t v216;
  unint64_t v217;
  WTF *v218;
  _DWORD *v219;
  uint64_t v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  int v228;
  int v229;
  unint64_t v230;
  WTF::StringImpl *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int *v235;
  uint64_t v236;
  uint64_t **v237;
  int v238;
  int v239;
  int32x4_t v240;
  int v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  __int128 __dst;
  WTF::StringImpl *v245[1024];
  WTF *v246;
  uint64_t v247;
  _BYTE v248[2048];
  WTF *v249;
  uint64_t v250;
  _BYTE v251[16384];
  WTF *v252;
  uint64_t v253;
  _BYTE v254[16384];
  WTF *v255;
  uint64_t v256;
  _QWORD v257[1028];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = (uint64_t **)v4;
  v6 = v3;
  v7 = v2;
  v235 = v3 + 110;
  v236 = v8;
  if (*(_BYTE *)(v4 + 8))
  {
    if (*(_QWORD *)v4)
    {
      v9 = *((_QWORD *)v3 + 54);
      if (v9)
      {
        *((_QWORD *)v3 + 54) = 0;
        WTF::fastFree((WTF *)(v9 - 16), v3);
      }
      v10 = v6[113];
      if ((_DWORD)v10)
      {
        v11 = 40 * v10;
        v12 = (WTF::StringImpl **)(*((_QWORD *)v6 + 55) + 32);
        do
        {
          v13 = *v12;
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = *(v12 - 1);
          *(v12 - 1) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v14 -= 2;
          }
          v12 += 5;
          v11 -= 40;
        }
        while (v11);
      }
      v6[113] = 0;
    }
    else
    {
      WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v235, (WTF::StringImpl *)v3);
    }
  }
  v15 = *((_QWORD *)v6 + 1);
  if (v15)
    goto LABEL_19;
  v15 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v6;
  v211 = (WTF *)*((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v15;
  if (!v211)
    goto LABEL_19;
  if (*(_DWORD *)v211 != 1)
  {
    --*(_DWORD *)v211;
LABEL_19:
    ++*(_DWORD *)v15;
    goto LABEL_20;
  }
  WTF::fastFree(v211, v3);
  v15 = *((_QWORD *)v6 + 1);
  if (v15)
    goto LABEL_19;
LABEL_20:
  v16 = *(WTF **)v7;
  *(_QWORD *)v7 = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, v3);
    else
      --*(_DWORD *)v16;
  }
  *(_DWORD *)(v7 + 56) = 0;
  v17 = (float *)(v7 + 56);
  *(_DWORD *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 60) = 0;
  *(_DWORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 72) = 0;
  v18 = *(WTF::StringImpl **)(v7 + 80);
  *(_QWORD *)(v7 + 80) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)(v7 + 88);
  *(_QWORD *)(v7 + 88) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v19 -= 2;
  }
  *(_DWORD *)(v7 + 112) = 0;
  *(_DWORD *)(v7 + 116) = 0;
  v20 = (uint64_t *)(v7 + 112);
  *(_DWORD *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 128) = 0;
  v21 = *(WTF::StringImpl **)(v7 + 136);
  *(_QWORD *)(v7 + 136) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(WTF::StringImpl **)(v7 + 144);
  *(_QWORD *)(v7 + 144) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v22 -= 2;
  }
  *(_DWORD *)(v7 + 96) = 0;
  WebCore::SVGTextMetrics::constructTextRun((WebCore::SVGTextMetrics *)&__dst, *((_QWORD *)v6 + 4), *((_QWORD *)v6 + 13), 0, 0xFFFFFFFF);
  v24 = (WTF::StringImpl *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
    **((_DWORD **)&__dst + 1) += 2;
  v25 = *(WTF::StringImpl **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  *(_OWORD *)(v7 + 24) = *(_OWORD *)v245;
  *(WTF::StringImpl **)(v7 + 38) = *(WTF::StringImpl **)((char *)&v245[1] + 6);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v26 = WORD2(v236);
  v27 = WebCore::FontCascade::s_codePath;
  if (!WebCore::FontCascade::s_codePath)
  {
    if ((*(_BYTE *)(v7 + 45) & 8) == 0 || (v123 = *(_QWORD *)(v7 + 16)) == 0 || (*(_BYTE *)(v123 + 16) & 4) != 0)
    {
      *(_WORD *)(v7 + 52) = 0;
      v28 = (_BYTE *)(v7 + 53);
      goto LABEL_46;
    }
    v27 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v123 + 8), *(unsigned int *)(v123 + 4));
  }
  *(_BYTE *)(v7 + 53) = 0;
  v28 = (_BYTE *)(v7 + 53);
  *(_BYTE *)(v7 + 52) = v27 == 2;
  if (v27 == 2)
  {
    LOBYTE(v29) = 0;
    goto LABEL_63;
  }
LABEL_46:
  v29 = *((unsigned __int16 *)v6 + 56);
  if (v29 >= 0x100)
  {
    *v28 = v29;
  }
  else
  {
    v30 = *(_QWORD *)(v7 + 16);
    if (v30)
    {
      v31 = *(unsigned __int16 **)(v30 + 8);
      v32 = *(unsigned int *)(v30 + 4) | ((unint64_t)((*(_DWORD *)(v30 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v31 = 0;
      v32 = 0x100000000;
    }
    v33 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 4) + 8) + 120);
    v34 = (v33 >> 27) & 7;
    if ((v33 & 0x40000000) == 0 && v34 == 3)
    {
      v34 = 5;
    }
    else
    {
      if (v34)
        v35 = 0;
      else
        v35 = (v33 & 0x40000000) == 0;
      if (v35)
      {
        v34 = 0;
      }
      else if ((v33 & 0x40000000) == 0 || v34)
      {
        if ((v33 & 0x40000000) == 0 || v34 != 1)
        {
          if ((v33 & 0x40000000) == 0 && v34 == 2)
          {
            v34 = 3;
          }
          else if (v34 == 1 && (v33 & 0x40000000) == 0)
          {
            v34 = 2;
          }
          else
          {
            v34 = 0;
          }
        }
      }
      else
      {
        v34 = 4;
      }
    }
    v37 = v34 != 5 && (v34 - 3) < 0xFFFFFFFE;
    canUseSimplifiedTextMeasuring = WebCore::Layout::TextUtil::canUseSimplifiedTextMeasuring(v31, (WTF::StringImpl *)v32, (uint64_t)(v6 + 32), v37, 0);
    *(_BYTE *)(v7 + 53) = canUseSimplifiedTextMeasuring;
    *((_WORD *)v6 + 56) = canUseSimplifiedTextMeasuring | 0x100;
    LOBYTE(v29) = *(_BYTE *)(v7 + 53);
  }
LABEL_63:
  v238 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 4) + 8) + 120) & 0x38000000;
  v237 = v5;
  if (!(_BYTE)v29
    || !*((_BYTE *)v5 + 8)
    || !*v5
    || (*(_BYTE *)(v7 + 45) & 2) != 0
    || (v39 = **v5) == 0
    || *(_DWORD *)(v39 - 12) != 1)
  {
    if (!*(_BYTE *)(v7 + 52))
    {
      v206 = WTF::fastMalloc((WTF *)0x60);
      WebCore::WidthIterator::WidthIterator(v206, (uint64_t)(v6 + 32), v7 + 8, 0, 0, 0);
      v207 = *(WTF **)(v7 + 104);
      *(_QWORD *)(v7 + 104) = v206;
      v5 = v237;
      if (v207)
      {
        v208 = (_DWORD *)*((_QWORD *)v207 + 1);
        *((_QWORD *)v207 + 1) = 0;
        if (v208)
        {
          if (!*v208)
          {
            __break(0xC471u);
            JUMPOUT(0x1965454B8);
          }
          --*v208;
        }
        v209 = *(_QWORD *)v207;
        *(_QWORD *)v207 = 0;
        if (v209)
        {
          v210 = *(_DWORD *)(v209 + 8);
          if (!v210)
          {
            __break(0xC471u);
            JUMPOUT(0x1965454D8);
          }
          *(_DWORD *)(v209 + 8) = v210 - 1;
        }
        WTF::fastFree(v207, v23);
      }
    }
    v124 = *(_DWORD *)(v7 + 48) + *(_DWORD *)(v7 + 64);
    *(_DWORD *)(v7 + 48) = v124;
    v125 = *(_QWORD *)(v7 + 16);
    if (!v125)
    {
      v126 = 0;
LABEL_380:
      v218 = *(WTF **)(v7 + 104);
      *(_QWORD *)(v7 + 104) = 0;
      if (v218)
      {
        v219 = (_DWORD *)*((_QWORD *)v218 + 1);
        *((_QWORD *)v218 + 1) = 0;
        if (v219)
        {
          if (!*v219)
          {
            __break(0xC471u);
            JUMPOUT(0x1965453D0);
          }
          --*v219;
        }
        v220 = *(_QWORD *)v218;
        *(_QWORD *)v218 = 0;
        if (v220)
        {
          v221 = *(_DWORD *)(v220 + 8);
          if (!v221)
          {
            __break(0xC471u);
            JUMPOUT(0x1965453F0);
          }
          *(_DWORD *)(v220 + 8) = v221 - 1;
        }
        WTF::fastFree(v218, v23);
      }
      v204 = v126 + v236 + *(_DWORD *)(v7 + 48);
      return v204 | (unint64_t)(v26 << 32);
    }
    v126 = 0;
    v127 = 0;
    v229 = 0;
    while (1)
    {
      v128 = *(_DWORD *)(v125 + 4);
      if (v124 >= v128)
        goto LABEL_380;
      if (*(_BYTE *)(v7 + 52))
      {
        if ((*(_BYTE *)(v125 + 16) & 4) != 0
          || (v197 = *(_QWORD *)(v125 + 8), (*(_WORD *)(v197 + 2 * v124) & 0xFC00) != 0xD800)
          || v124 + 1 >= v128)
        {
          v129 = 1;
        }
        else if (*(_WORD *)(v197 + 2 * (v124 + 1)) >> 10 == 55)
        {
          v129 = 2;
        }
        else
        {
          v129 = 1;
        }
        v130 = *(_QWORD *)(*(_QWORD *)v7 + 8);
        WebCore::SVGTextMetrics::constructTextRun((WebCore::SVGTextMetrics *)&__dst, *(_QWORD *)(v130 + 32), *(_QWORD *)(v130 + 104), v124, v129);
        WebCore::SVGTextMetrics::SVGTextMetrics((WebCore::SVGTextMetrics *)&v240, (WebCore::RenderSVGInlineText *)v130, (const WebCore::TextRun *)&__dst);
        v132 = (WTF::StringImpl *)*((_QWORD *)&__dst + 1);
        *((_QWORD *)&__dst + 1) = 0;
        if (v132)
        {
          if (*(_DWORD *)v132 == 2)
            WTF::StringImpl::destroy(v132, v131);
          else
            *(_DWORD *)v132 -= 2;
        }
        *(_QWORD *)v17 = v240.i64[0];
        *(_DWORD *)(v7 + 64) = v240.i32[2];
        *(_BYTE *)(v7 + 72) = v241;
        v133 = v242;
        v242 = 0;
        v134 = *(WTF::StringImpl **)(v7 + 80);
        *(_QWORD *)(v7 + 80) = v133;
        if (v134)
        {
          if (*(_DWORD *)v134 == 2)
            WTF::StringImpl::destroy(v134, v131);
          else
            *(_DWORD *)v134 -= 2;
        }
        v135 = v243;
        v243 = 0;
        v136 = *(WTF::StringImpl **)(v7 + 88);
        *(_QWORD *)(v7 + 88) = v135;
        if (v136)
        {
          if (*(_DWORD *)v136 == 2)
          {
            WTF::StringImpl::destroy(v136, v131);
            v202 = v243;
            v243 = 0;
            if (v202)
            {
              if (*(_DWORD *)v202 == 2)
                WTF::StringImpl::destroy(v202, v131);
              else
                *(_DWORD *)v202 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v136 -= 2;
            v243 = 0;
          }
        }
        v137 = v242;
        v242 = 0;
        if (v137)
        {
          if (*(_DWORD *)v137 == 2)
            WTF::StringImpl::destroy(v137, v131);
          else
            *(_DWORD *)v137 -= 2;
        }
        v138 = *(_QWORD *)(*(_QWORD *)v7 + 8);
        WebCore::SVGTextMetrics::constructTextRun((WebCore::SVGTextMetrics *)&__dst, *(_QWORD *)(v138 + 32), *(_QWORD *)(v138 + 104), 0, *(_DWORD *)(v7 + 48) + v129);
        WebCore::SVGTextMetrics::SVGTextMetrics((WebCore::SVGTextMetrics *)&v240, (WebCore::RenderSVGInlineText *)v138, (const WebCore::TextRun *)&__dst);
        v139 = (WTF::StringImpl *)*((_QWORD *)&__dst + 1);
        *((_QWORD *)&__dst + 1) = 0;
        v5 = v237;
        if (v139)
        {
          if (*(_DWORD *)v139 == 2)
            WTF::StringImpl::destroy(v139, v23);
          else
            *(_DWORD *)v139 -= 2;
        }
        *v20 = v240.i64[0];
        *(_DWORD *)(v7 + 120) = v240.i32[2];
        *(_BYTE *)(v7 + 128) = v241;
        v140 = v242;
        v242 = 0;
        v141 = *(WTF::StringImpl **)(v7 + 136);
        *(_QWORD *)(v7 + 136) = v140;
        if (v141)
        {
          if (*(_DWORD *)v141 == 2)
            WTF::StringImpl::destroy(v141, v23);
          else
            *(_DWORD *)v141 -= 2;
        }
        v142 = v243;
        v243 = 0;
        v143 = *(WTF::StringImpl **)(v7 + 144);
        *(_QWORD *)(v7 + 144) = v142;
        if (v143)
        {
          if (*(_DWORD *)v143 == 2)
          {
            WTF::StringImpl::destroy(v143, v23);
            v203 = v243;
            v243 = 0;
            if (v203)
            {
              if (*(_DWORD *)v203 == 2)
                WTF::StringImpl::destroy(v203, v23);
              else
                *(_DWORD *)v203 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v143 -= 2;
            v243 = 0;
          }
        }
        v144 = v242;
        v242 = 0;
        if (v144)
        {
          if (*(_DWORD *)v144 == 2)
            WTF::StringImpl::destroy(v144, v23);
          else
            *(_DWORD *)v144 -= 2;
        }
        v145 = *(float *)(v7 + 112);
        v146 = v145 - *(float *)(v7 + 96);
        if (v146 != *(float *)(v7 + 56))
          *v17 = v146;
        *(float *)(v7 + 96) = v145;
      }
      else
      {
        *(_QWORD *)&__dst = v245;
        *((_QWORD *)&__dst + 1) = 1024;
        v246 = (WTF *)v248;
        v247 = 1024;
        v249 = (WTF *)v251;
        v250 = 1024;
        v252 = (WTF *)v254;
        v253 = 1024;
        v255 = (WTF *)v257;
        v256 = 1024;
        v257[1024] = 0;
        v257[1025] = 0;
        v167 = *(_QWORD *)(v7 + 104);
        v168 = *(_DWORD *)(v167 + 48);
        WebCore::WidthIterator::advance(v167, v124 + 1, (WebCore::GlyphBuffer *)&__dst);
        v169 = *(_QWORD *)(v7 + 104);
        v170 = *(_DWORD *)(v169 + 48) - v168;
        if (v170)
        {
          v171 = *(float *)(v169 + 56);
          v172 = *(float *)(v7 + 96);
          *(float *)(v7 + 96) = v171;
          v173 = *(WTF **)v7;
          if (*(_QWORD *)v7)
            v173 = (WTF *)*((_QWORD *)v173 + 1);
          v174 = *((float *)v173 + 30);
          v175 = (float)(v171 - v172) / v174;
          v176 = WebCore::FontCascade::metricsOfPrimaryFont((WTF *)((char *)v173 + 128), v23);
          v177 = *(float *)(v176 + 4);
          v178 = *(float *)(v176 + 12);
          *(float *)(v7 + 56) = v175;
          *(float *)(v7 + 60) = (float)(v177 + v178) / v174;
          *(_DWORD *)(v7 + 64) = v170;
        }
        else
        {
          *(_QWORD *)(v7 + 56) = 0;
          *(_DWORD *)(v7 + 64) = 0;
        }
        *(_BYTE *)(v7 + 72) = 0;
        v179 = *(WTF::StringImpl **)(v7 + 80);
        *(_QWORD *)(v7 + 80) = 0;
        if (v179)
        {
          if (*(_DWORD *)v179 == 2)
            WTF::StringImpl::destroy(v179, v23);
          else
            *(_DWORD *)v179 -= 2;
        }
        v180 = *(WTF::StringImpl **)(v7 + 88);
        *(_QWORD *)(v7 + 88) = 0;
        if (v180)
        {
          if (*(_DWORD *)v180 == 2)
            WTF::StringImpl::destroy(v180, v23);
          else
            *(_DWORD *)v180 -= 2;
        }
        v181 = v255;
        if (v257 != (_QWORD *)v255 && v255)
        {
          v255 = 0;
          LODWORD(v256) = 0;
          WTF::fastFree(v181, v23);
        }
        v182 = v252;
        if (v254 != (_BYTE *)v252 && v252)
        {
          v252 = 0;
          LODWORD(v253) = 0;
          WTF::fastFree(v182, v23);
        }
        v183 = v249;
        if (v251 != (_BYTE *)v249 && v249)
        {
          v249 = 0;
          LODWORD(v250) = 0;
          WTF::fastFree(v183, v23);
        }
        v184 = v246;
        if (v248 != (_BYTE *)v246 && v246)
        {
          v246 = 0;
          LODWORD(v247) = 0;
          WTF::fastFree(v184, v23);
        }
        v185 = (WTF *)__dst;
        if (v245 != (WTF::StringImpl **)__dst && (_QWORD)__dst)
        {
          *(_QWORD *)&__dst = 0;
          DWORD2(__dst) = 0;
          WTF::fastFree(v185, v23);
        }
      }
      v147 = *(_DWORD *)(v7 + 64);
      if (!v147)
        goto LABEL_380;
      v125 = *(_QWORD *)(v7 + 16);
      if (!v125 || (v148 = *(unsigned int *)(v7 + 48), *(_DWORD *)(v125 + 4) <= v148))
      {
        __break(0xC471u);
        JUMPOUT(0x196545240);
      }
      v149 = *(_QWORD *)(v125 + 8);
      v150 = (*(_BYTE *)(v125 + 16) & 4) != 0
           ? *(unsigned __int8 *)(v149 + v148)
           : *(unsigned __int16 *)(v149 + 2 * v148);
      if ((_DWORD)v150 != 32 || v238 == 0x8000000 || (v26 | 0x20) != 0x20)
        break;
      if (*((_BYTE *)v5 + 8))
      {
        *(_QWORD *)&__dst = 0;
        DWORD2(__dst) = 1;
        LOBYTE(v245[0]) = 0;
        v245[1] = 0;
        v245[2] = 0;
        v151 = v6[113];
        if (v151 == v6[112])
        {
          WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGTextMetrics>(v235, (unint64_t)&__dst);
        }
        else
        {
          v152 = *((_QWORD *)v6 + 55) + 40 * v151;
          v153 = __dst;
          *(_DWORD *)(v152 + 8) = DWORD2(__dst);
          *(_QWORD *)v152 = v153;
          *(_BYTE *)(v152 + 16) = v245[0];
          v154 = v245[1];
          v245[1] = 0;
          *(_QWORD *)(v152 + 24) = v154;
          v155 = v245[2];
          v245[2] = 0;
          *(_QWORD *)(v152 + 32) = v155;
          ++v6[113];
        }
        v156 = v245[2];
        v245[2] = 0;
        if (v156)
        {
          if (*(_DWORD *)v156 == 2)
            WTF::StringImpl::destroy(v156, v23);
          else
            *(_DWORD *)v156 -= 2;
        }
        v157 = v245[1];
        v245[1] = 0;
        if (v157)
        {
          if (*(_DWORD *)v157 == 2)
            WTF::StringImpl::destroy(v157, v23);
          else
            *(_DWORD *)v157 -= 2;
        }
        v147 = *(_DWORD *)(v7 + 64);
        LODWORD(v148) = *(_DWORD *)(v7 + 48);
        v125 = *(_QWORD *)(v7 + 16);
      }
      v127 += v147;
LABEL_282:
      v126 = -v127;
      v124 = *(_DWORD *)(v7 + 64) + v148;
      *(_DWORD *)(v7 + 48) = v124;
      if (!v125)
        goto LABEL_380;
    }
    if (!*((_BYTE *)v5 + 8))
    {
LABEL_277:
      v148 = *(unsigned int *)(v7 + 48);
      v125 = *(_QWORD *)(v7 + 16);
      if (*v5)
      {
        if (!v125 || (v193 = *(_DWORD *)(v125 + 4), v193 <= v148))
        {
          __break(0xC471u);
          JUMPOUT(0x196545280);
        }
        if ((*(_BYTE *)(v125 + 16) & 4) == 0)
        {
          v198 = *(_QWORD *)(v125 + 8);
          v199 = v148 + 1;
          if ((*(_WORD *)(v198 + 2 * v148) & 0xFC00) == 0xD800 && v199 < v193)
          {
            v201 = v229;
            if (*(_WORD *)(v198 + 2 * v199) >> 10 == 55)
              v201 = v229 + 1;
            v229 = v201;
          }
        }
      }
      v26 = v150;
      goto LABEL_282;
    }
    if (*v5)
    {
      v158 = **v5;
      if (v158)
      {
        v159 = v236 + 1 + v126 - v229 + v148;
        v160 = *(_DWORD *)(v158 - 8);
        v161 = 9 * ((v159 + ~(v159 << 15)) ^ ((v159 + ~(v159 << 15)) >> 10));
        v162 = (v161 ^ (v161 >> 6)) + ~((v161 ^ (v161 >> 6)) << 11);
        v163 = v160 & (v162 ^ HIWORD(v162));
        v164 = (int *)(v158 + 24 * v163);
        v165 = *v164;
        if (*v164 != v159)
        {
          v166 = 1;
          while (v165)
          {
            v163 = (v163 + v166) & v160;
            v164 = (int *)(v158 + 24 * v163);
            v165 = *v164;
            ++v166;
            if (*v164 == v159)
              goto LABEL_269;
          }
          v164 = (int *)(v158 + 24 * *(unsigned int *)(v158 - 4));
        }
LABEL_269:
        if ((int *)(v158 + 24 * *(unsigned int *)(v158 - 4)) != v164)
        {
          v240.i32[0] = v148 + 1;
          WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::inlineSet<unsigned int,WebCore::SVGCharacterData&>((uint64_t *)v6 + 54, v240.i32, (__n128 *)(v164 + 1), (uint64_t)&__dst);
        }
      }
    }
    v186 = v6[113];
    if ((_DWORD)v186 == v6[112])
    {
      v187 = WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v235, v186 + 1, v7 + 56);
      LODWORD(v186) = v6[113];
      v188 = *((_QWORD *)v6 + 55);
      v189 = v188 + 40 * v186;
      v190 = *(_QWORD *)v187;
      *(_DWORD *)(v189 + 8) = *(_DWORD *)(v187 + 8);
      *(_QWORD *)v189 = v190;
      *(_BYTE *)(v189 + 16) = *(_BYTE *)(v187 + 16);
      v191 = *(_DWORD **)(v187 + 24);
      if (v191)
        *v191 += 2;
      *(_QWORD *)(v189 + 24) = v191;
      v192 = *(_DWORD **)(v187 + 32);
      if (!v192)
        goto LABEL_276;
    }
    else
    {
      v188 = *(_QWORD *)v235;
      v194 = *(_QWORD *)v235 + 40 * v186;
      v195 = *(_QWORD *)v17;
      *(_DWORD *)(v194 + 8) = *(_DWORD *)(v7 + 64);
      *(_QWORD *)v194 = v195;
      *(_BYTE *)(v194 + 16) = *(_BYTE *)(v7 + 72);
      v196 = *(_DWORD **)(v7 + 80);
      if (v196)
        *v196 += 2;
      *(_QWORD *)(v194 + 24) = v196;
      v192 = *(_DWORD **)(v7 + 88);
      if (!v192)
        goto LABEL_276;
    }
    *v192 += 2;
LABEL_276:
    *(_QWORD *)(v188 + 40 * v186 + 32) = v192;
    ++v6[113];
    goto LABEL_277;
  }
  v40 = *(_DWORD *)(v39 - 8);
  v41 = v40 & 0x62BAF5A0;
  v42 = *(_DWORD *)(v39 + 24 * (v40 & 0x62BAF5A0));
  if (v42 == 1)
  {
LABEL_70:
    v43 = v39 + 24 * v41;
    v44 = *(int32x4_t *)(v43 + 4);
    v241 = *(_DWORD *)(v43 + 20);
    v240 = v44;
  }
  else
  {
    v228 = 1;
    while (v42)
    {
      v41 = (v41 + v228) & v40;
      v42 = *(_DWORD *)(v39 + 24 * v41);
      ++v228;
      if (v42 == 1)
        goto LABEL_70;
    }
    v240 = vdupq_n_s32(0x7F7FFFFFu);
    v241 = 2139095039;
  }
  v45 = *(_QWORD *)(v7 + 16);
  if (v45)
  {
    v46 = *(WTF::StringImpl **)(v45 + 8);
    v47 = *(unsigned int *)(v45 + 4) | ((unint64_t)((*(_DWORD *)(v45 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v46 = 0;
    v47 = 0x100000000;
  }
  v48 = *((float *)v6 + 30);
  v49 = (float *)WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v6 + 32), v23);
  if ((_DWORD)v47)
  {
    v51 = 0;
    v52 = 0;
    v232 = 0;
    v230 = v47;
    v233 = v47;
    v234 = v47 & 0x100000000;
    v53 = WORD2(v236);
    v54 = (float)(v49[1] + v49[3]) / v48;
    v231 = v46;
    while (1)
    {
      v26 = v234 ? *((unsigned __int8 *)v46 + v51) : *((unsigned __int16 *)v46 + v51);
      v55 = (_DWORD)v26 != 32 || v238 == 0x8000000;
      if (v55 || (v53 | 0x20) != 0x20)
        break;
      if (*((_BYTE *)v5 + 8))
      {
        *(_QWORD *)&__dst = 0;
        DWORD2(__dst) = 1;
        LOBYTE(v245[0]) = 0;
        v245[1] = 0;
        v245[2] = 0;
        v223 = v6[113];
        if (v223 == v6[112])
        {
          WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGTextMetrics>(v235, (unint64_t)&__dst);
        }
        else
        {
          v224 = *((_QWORD *)v6 + 55) + 40 * v223;
          v225 = __dst;
          *(_DWORD *)(v224 + 8) = DWORD2(__dst);
          *(_QWORD *)v224 = v225;
          *(_BYTE *)(v224 + 16) = v245[0];
          v226 = v245[1];
          v245[1] = 0;
          *(_QWORD *)(v224 + 24) = v226;
          v227 = v245[2];
          v245[2] = 0;
          *(_QWORD *)(v224 + 32) = v227;
          ++v6[113];
        }
        WebCore::SVGTextMetrics::~SVGTextMetrics((WebCore::SVGTextMetrics *)&__dst, (WTF::StringImpl *)v50);
        v5 = v237;
        v47 = v230;
        v46 = v231;
      }
      ++v232;
      v26 = v53;
LABEL_148:
      ++v51;
      ++v52;
      if (v51 == v233)
        goto LABEL_320;
    }
    if (v52 + (_DWORD)v236 == v232)
    {
      v239 = v51 + 1;
      WTF::HashMap<unsigned int,WebCore::SVGCharacterData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::SVGCharacterData>,WTF::HashTableTraits>::inlineSet<unsigned int,WebCore::SVGCharacterData&>((uint64_t *)v6 + 54, &v239, (__n128 *)&v240, (uint64_t)&__dst);
    }
    v56 = v47 - v51;
    if ((v47 - v51) <= 1)
    {
      v24 = v46;
      v57 = v47;
      if (!v51)
        goto LABEL_89;
    }
    else
    {
      v56 = 1;
    }
    v57 = v56;
    v58 = v233 - v51;
    if (v234)
    {
      if (v58 >= v57)
      {
        v24 = (WTF::StringImpl *)((char *)v46 + v51);
        v57 |= 0x100000000uLL;
        goto LABEL_89;
      }
LABEL_392:
      __break(1u);
LABEL_393:
      WTF::HashTable<WebCore::WidthCache::SmallStringKey,WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>>,WebCore::WidthCache::SmallStringKeyHash,WTF::HashMap<WebCore::WidthCache::SmallStringKey,float,WebCore::WidthCache::SmallStringKeyHash,WebCore::WidthCache::SmallStringKeyHashTraits,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::WidthCache::SmallStringKeyHashTraits>::expand(v20, 0);
      v69 = *v20;
      if (!*v20)
      {
        v70 = 0;
LABEL_104:
        v71 = v70 & v47;
        v50 = v69 + 40 * (v70 & v47);
        v72 = *(_DWORD *)(v50 + 32);
        if (v72)
        {
          v73 = 0;
          v74 = 1;
          v47 = v230;
          do
          {
            v78 = *(_QWORD *)v50 != (_QWORD)__dst
               || *(_QWORD *)(v50 + 8) != *((_QWORD *)&__dst + 1)
               || *(WTF::StringImpl **)(v50 + 16) != v245[0]
               || *(WTF::StringImpl **)(v50 + 24) != v245[1];
            if (v72 == (_DWORD)v46 && !v78)
            {
              v91 = 0;
              goto LABEL_151;
            }
            if (v72 == 17)
              v73 = v50;
            v71 = (v71 + v74) & v70;
            v50 = v69 + 40 * v71;
            v72 = *(_DWORD *)(v50 + 32);
            ++v74;
          }
          while (v72);
          if (v73)
          {
            *(_QWORD *)(v73 + 32) = 0;
            *(_OWORD *)v73 = 0u;
            *(_OWORD *)(v73 + 16) = 0u;
            --*(_DWORD *)(*v20 - 16);
            v50 = v73;
          }
        }
        else
        {
          v47 = v230;
        }
        v115 = *(_OWORD *)v245;
        v116 = (int)v245[2];
        *(_OWORD *)v50 = __dst;
        *(_OWORD *)(v50 + 16) = v115;
        *(_DWORD *)(v50 + 32) = v116;
        *(_DWORD *)(v50 + 36) = 2143289344;
        v117 = *v20;
        if (*v20)
          v118 = *(_DWORD *)(v117 - 12) + 1;
        else
          v118 = 1;
        *(_DWORD *)(v117 - 12) = v118;
        v119 = *v20;
        if (*v20)
          v120 = *(_DWORD *)(v119 - 12);
        else
          v120 = 0;
        v121 = (*(_DWORD *)(v119 - 16) + v120);
        v122 = *(unsigned int *)(v119 - 4);
        if (v122 > 0x400)
        {
          if (v122 > 2 * v121)
            goto LABEL_179;
        }
        else if (3 * v122 > 4 * v121)
        {
          goto LABEL_179;
        }
        v50 = WTF::HashTable<WebCore::WidthCache::SmallStringKey,WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>>,WebCore::WidthCache::SmallStringKeyHash,WTF::HashMap<WebCore::WidthCache::SmallStringKey,float,WebCore::WidthCache::SmallStringKeyHash,WebCore::WidthCache::SmallStringKeyHashTraits,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::WidthCache::SmallStringKeyHashTraits>::expand(v20, (__int128 *)v50);
LABEL_179:
        v91 = 1;
LABEL_151:
        v20 = (uint64_t *)(v50 + 36);
LABEL_133:
        if (v91)
        {
          v108 = *((_DWORD *)v5 + 30);
          if (v108 <= 19)
            *((_DWORD *)v5 + 30) = ++v108;
          *((_DWORD *)v5 + 31) = v108;
          v109 = v5[16];
          if (v109)
            v110 = *((_DWORD *)v109 - 3);
          else
            v110 = 0;
          v111 = v5[17];
          if (v111)
            v112 = *((_DWORD *)v111 - 3);
          else
            v112 = 0;
          if ((v112 + v110) >= 0x7A120)
          {
            if (v109)
            {
              v5[16] = 0;
              WTF::fastFree((WTF *)(v109 - 2), (void *)v50);
              v111 = v5[17];
            }
            if (v111)
            {
              v5[17] = 0;
              WTF::fastFree((WTF *)(v111 - 2), (void *)v50);
            }
            v20 = 0;
            v47 = v230;
          }
        }
        else
        {
          *((_DWORD *)v5 + 30) = -3;
        }
LABEL_135:
        if (*(_DWORD *)v5 == 1)
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v5, (void *)v50);
          WTF::fastFree(v113, v114);
        }
        else
        {
          --*(_DWORD *)v5;
        }
        v5 = v237;
        if (v20)
        {
          v92 = *(float *)v20;
LABEL_139:
          *(float *)&__dst = v92 / v48;
          *(_QWORD *)((char *)&__dst + 4) = LODWORD(v54) | 0x100000000;
          LOBYTE(v245[0]) = 0;
          v245[1] = 0;
          v245[2] = 0;
          v93 = v6[113];
          if ((_DWORD)v93 == v6[112])
          {
            v101 = WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v235, v93 + 1, (unint64_t)&__dst);
            v102 = *((_QWORD *)v6 + 55) + 40 * v6[113];
            v103 = *(_QWORD *)v101;
            *(_DWORD *)(v102 + 8) = *(_DWORD *)(v101 + 8);
            *(_QWORD *)v102 = v103;
            *(_BYTE *)(v102 + 16) = *(_BYTE *)(v101 + 16);
            v104 = *(_QWORD *)(v101 + 24);
            *(_QWORD *)(v101 + 24) = 0;
            *(_QWORD *)(v102 + 24) = v104;
            v97 = (WTF::StringImpl **)(v102 + 32);
            v98 = (WTF::StringImpl **)(v101 + 32);
          }
          else
          {
            v94 = *(_QWORD *)v235 + 40 * v93;
            v95 = __dst;
            *(_DWORD *)(v94 + 8) = DWORD2(__dst);
            *(_QWORD *)v94 = v95;
            *(_BYTE *)(v94 + 16) = v245[0];
            v96 = v245[1];
            v245[1] = 0;
            *(_QWORD *)(v94 + 24) = v96;
            v97 = (WTF::StringImpl **)(v94 + 32);
            v98 = &v245[2];
          }
          v46 = v231;
          v99 = *v98;
          *v98 = 0;
          *v97 = v99;
          ++v6[113];
          v100 = v245[2];
          v245[2] = 0;
          if (v100)
          {
            if (*(_DWORD *)v100 == 2)
              WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v50);
            else
              *(_DWORD *)v100 -= 2;
          }
          v49 = (float *)v245[1];
          v245[1] = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              v49 = (float *)WTF::StringImpl::destroy((WTF::StringImpl *)v49, (WTF::StringImpl *)v50);
            else
              *(_DWORD *)v49 -= 2;
          }
          v53 = v26;
          goto LABEL_148;
        }
LABEL_159:
        v92 = WebCore::FontCascade::widthForSimpleTextSlow((uint64_t)(v6 + 32), (uint64_t)v24);
        goto LABEL_139;
      }
LABEL_103:
      v70 = *(_DWORD *)(v69 - 8);
      goto LABEL_104;
    }
    if (v58 < v57)
      goto LABEL_392;
    v24 = (WTF::StringImpl *)((char *)v46 + 2 * v51);
LABEL_89:
    v59 = v57;
    if (!(_DWORD)v57)
    {
      v92 = 0.0;
      v5 = v237;
      goto LABEL_139;
    }
    v5 = (uint64_t **)*((_QWORD *)v6 + 43);
    if (v5)
    {
      ++*(_DWORD *)v5;
      if ((v57 - 17) < 0xFFFFFFF0)
      {
        v20 = 0;
        goto LABEL_135;
      }
    }
    else if ((v57 - 17) < 0xFFFFFFF0)
    {
      v20 = 0;
      v5 = v237;
      goto LABEL_159;
    }
    v60 = *((_DWORD *)v5 + 31);
    v61 = __OFSUB__(v60, 1);
    v62 = v60 - 1;
    if (v62 < 0 == v61)
    {
      v20 = 0;
      *((_DWORD *)v5 + 31) = v62;
      goto LABEL_135;
    }
    v63 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v49);
    v20 = 0;
    v64 = atomic_load((unsigned __int8 *)(v63 + 4));
    if (v64 == 2 || *(_BYTE *)(v63 + 7))
      goto LABEL_135;
    if (v57 != 1)
    {
      __dst = 0u;
      memset(v245, 0, 20);
      if ((v57 & 0x100000000) != 0)
      {
        p_dst = &__dst;
        v106 = v24;
        do
        {
          v107 = *(unsigned __int8 *)v106;
          v106 = (WTF::StringImpl *)((char *)v106 + 1);
          *(_WORD *)p_dst = v107;
          p_dst = (__int128 *)((char *)p_dst + 2);
          --v59;
        }
        while (v59);
      }
      else
      {
        memcpy(&__dst, v24, 2 * v57);
      }
      v20 = (uint64_t *)(v5 + 17);
      v65 = (unint64_t)v245[1] ^ (((*((_QWORD *)&__dst + 1) ^ 0x1FF5C2923A788D2CuLL)
                                        * (unsigned __int128)((unint64_t)__dst ^ 0xE7037ED1A0B428DBLL)) >> 64) ^ ((*((_QWORD *)&__dst + 1) ^ 0x1FF5C2923A788D2CLL) * (__dst ^ 0xE7037ED1A0B428DBLL));
      v66 = v65 * ((unint64_t)v245[0] ^ 0xE7037ED1A0B428DBLL);
      v67 = ((v65 * (unsigned __int128)((unint64_t)v245[0] ^ 0xE7037ED1A0B428DBLL)) >> 64) ^ 0xE7037ED1A0B428DBLL;
      v68 = (((v67 * (unsigned __int128)(v66 ^ 0xA0761D6478BD640FLL)) >> 64) ^ (v67 * (v66 ^ 0x78BD640F))) & 0xFFFFFF;
      if (v68)
        LODWORD(v47) = v68;
      else
        LODWORD(v47) = 0x800000;
      LODWORD(v46) = v47 | ((_DWORD)v57 << 24);
      LODWORD(v245[2]) = (_DWORD)v46;
      v69 = *v20;
      if (*v20)
        goto LABEL_103;
      goto LABEL_393;
    }
    if ((v57 & 0x100000000) != 0)
      v79 = *(unsigned __int8 *)v24;
    else
      v79 = *(unsigned __int16 *)v24;
    v81 = v5 + 16;
    v80 = v5[16];
    if (v80
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,float>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,float,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)v5 + 16, 8u, 0), (v80 = *v81) != 0))
    {
      v82 = *((_DWORD *)v80 - 2);
    }
    else
    {
      v82 = 0;
    }
    v83 = v79 + 1;
    v84 = 9 * ((v79 - (v83 << 15)) ^ ((v79 - (v83 << 15)) >> 10));
    v85 = (v84 ^ (v84 >> 6)) + ~((v84 ^ (v84 >> 6)) << 11);
    v86 = v82 & (v85 ^ HIWORD(v85));
    v87 = &v80[v86];
    v88 = *(_DWORD *)v87;
    if (*(_DWORD *)v87)
    {
      v89 = 0;
      v90 = 1;
      do
      {
        if (v88 == v83)
        {
          v91 = 0;
          goto LABEL_132;
        }
        if (v88 == -1)
          v89 = v87;
        v86 = (v86 + v90) & v82;
        v87 = &v80[v86];
        v88 = *(_DWORD *)v87;
        ++v90;
      }
      while (*(_DWORD *)v87);
      if (v89)
      {
        *v89 = 0;
        --*((_DWORD *)*v81 - 4);
        v87 = v89;
      }
    }
    *(_DWORD *)v87 = v83;
    *((_DWORD *)v87 + 1) = 2143289344;
    v212 = *v81;
    if (*v81)
      v213 = *((_DWORD *)v212 - 3) + 1;
    else
      v213 = 1;
    *((_DWORD *)v212 - 3) = v213;
    v214 = *v81;
    if (*v81)
      v215 = *((_DWORD *)v214 - 3);
    else
      v215 = 0;
    v216 = (*((_DWORD *)v214 - 4) + v215);
    v217 = *((unsigned int *)v214 - 1);
    if (v217 > 0x400)
    {
      if (v217 > 2 * v216)
        goto LABEL_357;
    }
    else
    {
      if (3 * v217 > 4 * v216)
        goto LABEL_357;
      if (!(_DWORD)v217)
      {
        v222 = 8;
        goto LABEL_401;
      }
    }
    v222 = (_DWORD)v217 << (6 * *((_DWORD *)v214 - 3) >= (2 * v217));
LABEL_401:
    v87 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,float>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,float,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)v5 + 16, v222, v87);
LABEL_357:
    v91 = 1;
LABEL_132:
    v20 = (uint64_t *)((char *)v87 + 4);
    goto LABEL_133;
  }
  v232 = 0;
LABEL_320:
  v204 = v47 + v236 - v232;
  return v204 | (unint64_t)(v26 << 32);
}

unsigned int *WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;

  v2 = result;
  v3 = result[3];
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)result + 32);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = (unsigned int *)*(v5 - 1);
      *(v5 - 1) = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  v2[3] = 0;
  return result;
}

unint64_t WebCore::SVGTextMetricsBuilder::walkTree(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v31;
  int v32;
  int v33;

  if (!(*(unsigned int *)(a2 + 64) | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)))
    return result;
  v4 = *(_QWORD *)((*(unsigned int *)(a2 + 64) | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
  if (!v4)
    return result;
  v8 = result;
  ++*(_DWORD *)(v4 + 16);
  if (!a3)
  {
    while (1)
    {
      v9 = *(unsigned __int8 *)(v4 + 46);
      if (v9 == 72)
      {
        *(_BYTE *)(a4 + 8) = 1;
        result = WebCore::SVGTextMetricsBuilder::measureTextRenderer(v8, v4);
      }
      else
      {
        v18 = v9 - 71;
        v19 = v18 > 0xF;
        v20 = (1 << v18) & 0xA001;
        if (!v19 && v20 != 0)
        {
          v22 = *(unsigned int *)(v4 + 64);
          if (v22 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32))
          {
            v12 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32)) + 8);
            if (v12)
            {
              ++*(_DWORD *)(v12 + 16);
              v23 = *(_DWORD *)(v4 + 16);
              v16 = (_DWORD *)(v4 + 16);
              v15 = v23;
              if (!v23)
                goto LABEL_48;
              goto LABEL_17;
            }
          }
        }
      }
      if (v4 == a2)
      {
LABEL_28:
        v12 = 0;
      }
      else
      {
        v10 = v4;
        while (1)
        {
          v11 = *(unsigned int *)(v10 + 47);
          if (v11 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32))
          {
            v12 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
            if (v12)
              break;
          }
          v13 = *(_QWORD *)(v10 + 32);
          if (!v13)
            goto LABEL_28;
          v12 = 0;
          v10 = *(_QWORD *)(v13 + 8);
          if (v10)
            v14 = v10 == a2;
          else
            v14 = 1;
          if (v14)
            goto LABEL_16;
        }
        ++*(_DWORD *)(v12 + 16);
      }
LABEL_16:
      v17 = *(_DWORD *)(v4 + 16);
      v16 = (_DWORD *)(v4 + 16);
      v15 = v17;
      if (!v17)
        goto LABEL_44;
LABEL_17:
      *v16 = v15 - 1;
      v4 = v12;
      if (!v12)
        return result;
    }
  }
  while (1)
  {
    v24 = *(unsigned __int8 *)(v4 + 46);
    if (v24 == 72)
      break;
    v28 = v24 - 71;
    v19 = v28 > 0xF;
    v29 = (1 << v28) & 0xA001;
    if (v19 || v29 == 0)
      goto LABEL_31;
    v31 = *(unsigned int *)(v4 + 64);
    if (!(v31 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32)))
      goto LABEL_31;
    result = *(_QWORD *)((v31 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32)) + 8);
    if (!result)
      goto LABEL_31;
    ++*(_DWORD *)(result + 16);
    v32 = *(_DWORD *)(v4 + 16);
    v26 = (_DWORD *)(v4 + 16);
    v25 = v32;
    if (!v32)
      goto LABEL_48;
LABEL_34:
    *v26 = v25 - 1;
    v4 = result;
    if (!result)
      return result;
  }
  *(_BYTE *)(a4 + 8) = v4 == a3;
  result = WebCore::SVGTextMetricsBuilder::measureTextRenderer(v8, v4);
  if (v4 != a3)
  {
LABEL_31:
    result = WebCore::RenderObject::nextInPreOrderAfterChildren((WebCore::RenderObject *)v4, (const WebCore::RenderObject *)a2);
    if (result)
      ++*(_DWORD *)(result + 16);
    v27 = *(_DWORD *)(v4 + 16);
    v26 = (_DWORD *)(v4 + 16);
    v25 = v27;
    if (!v27)
    {
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x1965458ECLL);
    }
    goto LABEL_34;
  }
  v33 = *(_DWORD *)(a3 + 16);
  if (!v33)
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x1965457F8);
  }
  *(_DWORD *)(a3 + 16) = v33 - 1;
  return result;
}

WebCore::SVGTextQuery *WebCore::SVGTextQuery::SVGTextQuery(WebCore::SVGTextQuery *this, WebCore::RenderObject *a2)
{
  int v3;
  WebCore::LegacyInlineFlowBox *v4;
  int v5;
  WebCore::RenderObject *v7;
  WebCore::LegacyInlineFlowBox *v8;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!a2)
    goto LABEL_15;
  if ((*((_BYTE *)a2 + 52) & 7) != 1)
  {
    if ((*((_BYTE *)a2 + 45) & 0x20) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = v5 + 1;
      if (v5 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x196545A50);
      }
      v4 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)a2 + 19);
      goto LABEL_7;
    }
LABEL_15:
    v4 = 0;
    goto LABEL_16;
  }
  v3 = *((_DWORD *)a2 + 4) + 1;
  *((_DWORD *)a2 + 4) = v3;
  if (*((_DWORD *)a2 + 60) == 2)
  {
    v4 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)a2 + 29);
    if (v4)
    {
      v4 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v4 + 1);
      v7 = a2;
      v8 = v4;
      if (v4)
      {
        if (!(*(unsigned int (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v4 + 88))(v4))
        {
LABEL_20:
          __break(0xC471u);
          JUMPOUT(0x196545A28);
        }
        a2 = v7;
        v4 = v8;
        v3 = *((_DWORD *)v7 + 4);
      }
    }
  }
  else
  {
    v4 = 0;
  }
  if (!v3)
    goto LABEL_20;
  v5 = v3 - 1;
LABEL_7:
  *((_DWORD *)a2 + 4) = v5;
LABEL_16:
  WebCore::SVGTextQuery::collectTextBoxesInFlowBox(this, v4);
  return this;
}

WebCore::SVGTextQuery *WebCore::SVGTextQuery::collectTextBoxesInFlowBox(WebCore::SVGTextQuery *this, WebCore::LegacyInlineFlowBox *a2)
{
  WebCore::LegacyInlineFlowBox *v2;
  WebCore::SVGTextQuery *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::LegacyInlineFlowBox *v6;
  uint64_t v7;
  WebCore::LegacyInlineFlowBox *v8;

  if (a2)
  {
    v2 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)a2 + 9);
    if (v2)
    {
      v3 = this;
      do
      {
        this = (WebCore::SVGTextQuery *)(*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v2 + 72))(v2);
        if ((_DWORD)this)
        {
          v4 = *((_QWORD *)v2 + 4);
          if (v4)
            v4 = *(_QWORD *)(v4 + 8);
          if ((*(_BYTE *)(v4 + 45) & 8) == 0)
          {
LABEL_22:
            __break(0xC471u);
            JUMPOUT(0x196545B7CLL);
          }
          if ((*(_BYTE *)(v4 + 45) & 1) == 0)
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
            if (v5)
            {
              if ((*(_WORD *)(v5 + 28) & 8) == 0)
                goto LABEL_22;
              this = (WebCore::SVGTextQuery *)WebCore::SVGTextQuery::collectTextBoxesInFlowBox(v3, v2);
            }
          }
        }
        else
        {
          v8 = 0;
          this = (WebCore::SVGTextQuery *)(*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v2 + 96))(v2);
          if ((_DWORD)this)
            v6 = v2;
          else
            v6 = 0;
          v8 = v6;
          if (v6)
          {
            v7 = *((unsigned int *)v3 + 3);
            if ((_DWORD)v7 == *((_DWORD *)v3 + 2))
            {
              this = (WebCore::SVGTextQuery *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v7 + 1, (unint64_t)&v8);
              v7 = *((unsigned int *)v3 + 3);
              *(_QWORD *)(*(_QWORD *)v3 + 8 * v7) = *(_QWORD *)this;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v3 + 8 * v7) = v6;
            }
            *((_DWORD *)v3 + 3) = v7 + 1;
          }
        }
        v2 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v2 + 1);
      }
      while (v2);
    }
  }
  return this;
}

unint64_t WebCore::SVGTextQuery::executeQuery(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;

  v4 = *(unsigned int *)(a1 + 12);
  v32 = v4;
  if ((_DWORD)v4)
  {
    v7 = (_QWORD *)(a1 + (a4 >> 1));
    v31 = a1;
    v8 = 0;
    v9 = 0;
    if ((a4 & 1) == 0)
    {
      v10 = 1;
      while (v8 < *(unsigned int *)(a1 + 12))
      {
        v11 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v8);
        *(_QWORD *)(a2 + 16) = v11;
        v12 = *(_QWORD *)(v11 + 32);
        if (v12)
          v12 = *(_QWORD *)(v12 + 8);
        if ((*(_BYTE *)(v12 + 45) & 2) == 0)
          goto LABEL_41;
        if (*(_BYTE *)(v12 + 46) != 72)
          goto LABEL_42;
        *(_QWORD *)(a2 + 8) = v12;
        v13 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 8) + 124) >> 13;
        v18 = 2;
        switch(v13)
        {
          case 1:
          case 2:
            goto LABEL_11;
          case 3:
          case 5:
            LOBYTE(v13) = 3;
            goto LABEL_11;
          case 4:
            goto LABEL_12;
          default:
            LOBYTE(v13) = 0;
LABEL_11:
            v18 = v13;
LABEL_12:
            *(_BYTE *)a2 = (v18 & 6) == 2;
            v14 = *(unsigned int *)(v11 + 124);
            if (!(_DWORD)v14)
              goto LABEL_17;
            v30 = v10;
            v15 = 0;
            v16 = 8;
            break;
        }
        do
        {
          if (v15 >= *(unsigned int *)(v11 + 124))
            goto LABEL_43;
          v17 = *(_QWORD *)(v11 + 112);
          if ((a3(v7, a2, v17 + v16 - 8) & 1) != 0)
            goto LABEL_39;
          v9 += *(_DWORD *)(v17 + v16) & 0x7FFFFFFF;
          ++v15;
          v16 += 128;
        }
        while (v14 != v15);
LABEL_17:
        LOBYTE(v4) = 0;
        *(_DWORD *)(a2 + 4) = v9;
        ++v8;
        a1 = v31;
        v10 = v8 < v32;
        if (v8 == v32)
          return v4 & 1;
      }
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x196545E88);
    }
    v19 = a3;
    v20 = 1;
LABEL_22:
    if (v8 >= *(unsigned int *)(a1 + 12))
      goto LABEL_44;
    v21 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v8);
    *(_QWORD *)(a2 + 16) = v21;
    v22 = *(_QWORD *)(v21 + 32);
    if (v22)
      v22 = *(_QWORD *)(v22 + 8);
    if ((*(_BYTE *)(v22 + 45) & 2) == 0)
    {
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x196545E58);
    }
    if (*(_BYTE *)(v22 + 46) != 72)
    {
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x196545E78);
    }
    *(_QWORD *)(a2 + 8) = v22;
    v23 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 32) + 8) + 124) >> 13;
    v28 = 2;
    switch(v23)
    {
      case 1:
      case 2:
        goto LABEL_29;
      case 3:
      case 5:
        LOBYTE(v23) = 3;
        goto LABEL_29;
      case 4:
        goto LABEL_30;
      default:
        LOBYTE(v23) = 0;
LABEL_29:
        v28 = v23;
LABEL_30:
        *(_BYTE *)a2 = (v28 & 6) == 2;
        v24 = *(unsigned int *)(v21 + 124);
        if (!(_DWORD)v24)
          goto LABEL_35;
        v30 = v20;
        v25 = 0;
        v26 = 8;
        break;
    }
    while (1)
    {
      if (v25 >= *(unsigned int *)(v21 + 124))
      {
LABEL_43:
        __break(0xC471u);
        JUMPOUT(0x196545E80);
      }
      v27 = *(_QWORD *)(v21 + 112);
      if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v7 + v19))(v7, a2, v27 + v26 - 8) & 1) != 0)
        break;
      v9 += *(_DWORD *)(v27 + v26) & 0x7FFFFFFF;
      ++v25;
      v26 += 128;
      if (v24 == v25)
      {
LABEL_35:
        LOBYTE(v4) = 0;
        *(_DWORD *)(a2 + 4) = v9;
        ++v8;
        a1 = v31;
        v20 = v8 < v32;
        if (v8 == v32)
          return v4 & 1;
        goto LABEL_22;
      }
    }
LABEL_39:
    LOBYTE(v4) = v30;
  }
  return v4 & 1;
}

uint64_t WebCore::SVGTextQuery::mapStartEndPositionsIntoFragmentCoordinates(uint64_t a1, _DWORD *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  *a3 -= *(_DWORD *)(a1 + 4);
  *a4 -= *(_DWORD *)(a1 + 4);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2 - *(_DWORD *)(v4 + 72);
  v6 = (a2[2] & 0x7FFFFFFF) + v5;
  if (*a3 > v5)
    v5 = *a3;
  *a3 = v5;
  v7 = *a4;
  if (v6 < *a4)
    v7 = v6;
  *a4 = v7;
  if (*a3 >= v7)
    return 0;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = a2[1];
  v10 = *a2 - *(_DWORD *)(v4 + 72);
  v11 = (a2[2] & 0x7FFFFFFF) + v10;
  v12 = 40 * v9 + 8;
  do
  {
    v13 = v10;
    v14 = v9;
    v15 = v12;
    if (v10 >= v11)
      break;
    if (v9 >= *(unsigned int *)(v8 + 452))
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x19654602CLL);
    }
    v10 += *(_DWORD *)(*(_QWORD *)(v8 + 440) + v12);
    ++v9;
    v12 += 40;
  }
  while (*a3 >= v10);
  *a3 = v13;
  v16 = v14 - 1;
  do
  {
    if (v13 >= v11)
      break;
    if (++v16 >= *(unsigned int *)(v8 + 452))
      goto LABEL_21;
    v17 = *(_DWORD *)(*(_QWORD *)(v8 + 440) + v15);
    v15 += 40;
    v13 += v17;
  }
  while (v13 < *a4);
  *a4 = v13;
  v18 = *a2 - *(_DWORD *)(v4 + 72);
  v19 = (a2[2] & 0x7FFFFFFF) + v18;
  v20 = *a3;
  if (v18 > *a3)
    v20 = v18;
  *a3 = v20;
  v21 = *a4;
  if (*a4 >= v19)
    v21 = v19;
  *a4 = v21;
  if (*a3 >= v21)
    return 0;
  *a3 -= v18;
  *a4 -= v18;
  return 1;
}

uint64_t WebCore::SVGTextQuery::numberOfCharactersCallback()
{
  return 0;
}

uint64_t WebCore::SVGTextQuery::textLengthCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;

  if (*(_BYTE *)a2)
    v3 = (float *)(a3 + 24);
  else
    v3 = (float *)(a3 + 20);
  *(float *)(a2 + 24) = *(float *)(a2 + 24) + *v3;
  return 0;
}

uint64_t WebCore::SVGTextQuery::subStringLengthCallback(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  float *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _BYTE v13[4];
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE v19[8];
  WTF::StringImpl *v20;

  v5 = *(_DWORD *)(a2 + 28);
  v18 = *(_DWORD *)(a2 + 24);
  v17 = v5 + v18;
  if (WebCore::SVGTextQuery::mapStartEndPositionsIntoFragmentCoordinates(a2, a3, &v18, &v17))
  {
    v6 = *(_QWORD *)(a2 + 8);
    WebCore::SVGTextMetrics::constructTextRun((WebCore::SVGTextMetrics *)v19, *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 104), v18 + *a3, v17 - v18);
    WebCore::SVGTextMetrics::SVGTextMetrics((WebCore::SVGTextMetrics *)v13, (WebCore::RenderSVGInlineText *)v6, (const WebCore::TextRun *)v19);
    v8 = v20;
    v20 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (*(_BYTE *)a2)
      v9 = (float *)&v14;
    else
      v9 = (float *)v13;
    *(float *)(a2 + 32) = *(float *)(a2 + 32) + *v9;
    v10 = v16;
    v16 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return 0;
}

uint64_t WebCore::SVGTextQuery::startPositionOfCharacterCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  float v9;
  float v10;
  float v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  float64x2_t v14;
  float64x2_t v15;
  float32x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint16x4_t v19;
  int32x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  float v24[6];
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE v29[8];
  WTF::StringImpl *v30;

  v28 = *(_DWORD *)(a2 + 24);
  v27 = v28 + 1;
  started = WebCore::SVGTextQuery::mapStartEndPositionsIntoFragmentCoordinates(a2, (_DWORD *)a3, &v28, &v27);
  if ((_DWORD)started)
  {
    *(_QWORD *)(a2 + 28) = *(_QWORD *)(a3 + 12);
    if (v28)
    {
      v6 = *(_QWORD *)(a2 + 8);
      WebCore::SVGTextMetrics::constructTextRun((WebCore::SVGTextMetrics *)v29, *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 104), *(_DWORD *)a3, v28);
      WebCore::SVGTextMetrics::SVGTextMetrics((WebCore::SVGTextMetrics *)v24, (WebCore::RenderSVGInlineText *)v6, (const WebCore::TextRun *)v29);
      v8 = v30;
      v30 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      if (*(_BYTE *)a2)
      {
        v9 = v24[1];
        v10 = *(float *)(a2 + 32);
        v11 = *(float *)(a2 + 28) + 0.0;
      }
      else
      {
        v9 = *(float *)(a2 + 32);
        v11 = v24[0] + *(float *)(a2 + 28);
        v10 = 0.0;
      }
      *(float *)(a2 + 28) = v11;
      *(float *)(a2 + 32) = v10 + v9;
      v12 = v26;
      v26 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v25;
      v25 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v7);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = *(float64x2_t *)(a3 + 32);
    v15 = *(float64x2_t *)(a3 + 48);
    v16 = *(float32x2_t *)(a3 + 12);
    v17 = vaddq_f64(*(float64x2_t *)(a3 + 64), vcvtq_f64_f32(v16));
    v18 = vcvtq_f64_f32(vneg_f32(v16));
    v19 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v15, (float64x2_t)xmmword_1968A14C0))));
    v19.i16[0] = vmaxv_u16(v19);
    v20 = vdup_n_s32(v19.i32[0] ^ 1u);
    v21.i64[0] = v20.u32[0];
    v21.i64[1] = v20.u32[1];
    v22 = vaddq_f64(v17, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v21, 0x3FuLL)), (int8x16_t)v18, (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v15, v18, 1), v14, v18.f64[0])));
    if ((v19.i8[0] & 1) != 0 || v22.f64[0] != 0.0 || v22.f64[1] != 0.0)
      *(float32x2_t *)(a2 + 28) = vcvt_f32_f64(vaddq_f64(v22, vmlaq_n_f64(vmulq_n_f64(v15, *(float *)(a2 + 32)), v14, *(float *)(a2 + 28))));
  }
  return started;
}

uint64_t WebCore::SVGTextQuery::endPositionOfCharacterCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float64x2_t v13;
  float64x2_t v14;
  float32x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint16x4_t v18;
  int32x2_t v19;
  int64x2_t v20;
  float64x2_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  float v25[6];
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  unsigned int v29;
  _BYTE v30[8];
  WTF::StringImpl *v31;

  v29 = *(_DWORD *)(a2 + 24);
  v28 = v29 + 1;
  started = WebCore::SVGTextQuery::mapStartEndPositionsIntoFragmentCoordinates(a2, (_DWORD *)a3, &v29, &v28);
  if ((_DWORD)started)
  {
    *(_QWORD *)(a2 + 28) = *(_QWORD *)(a3 + 12);
    v6 = *(_QWORD *)(a2 + 8);
    WebCore::SVGTextMetrics::constructTextRun((WebCore::SVGTextMetrics *)v30, *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 104), *(_DWORD *)a3, v29 + 1);
    WebCore::SVGTextMetrics::SVGTextMetrics((WebCore::SVGTextMetrics *)v25, (WebCore::RenderSVGInlineText *)v6, (const WebCore::TextRun *)v30);
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (*(_BYTE *)a2)
    {
      v9 = v25[1];
      v10 = *(float *)(a2 + 32);
      v11 = *(float *)(a2 + 28) + 0.0;
    }
    else
    {
      v9 = *(float *)(a2 + 32);
      v11 = v25[0] + *(float *)(a2 + 28);
      v10 = 0.0;
    }
    v12 = v10 + v9;
    *(float *)(a2 + 28) = v11;
    *(float *)(a2 + 32) = v12;
    v13 = *(float64x2_t *)(a3 + 32);
    v14 = *(float64x2_t *)(a3 + 48);
    v15 = *(float32x2_t *)(a3 + 12);
    v16 = vaddq_f64(*(float64x2_t *)(a3 + 64), vcvtq_f64_f32(v15));
    v17 = vcvtq_f64_f32(vneg_f32(v15));
    v18 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v14, (float64x2_t)xmmword_1968A14C0))));
    v18.i16[0] = vmaxv_u16(v18);
    v19 = vdup_n_s32(v18.i32[0] ^ 1u);
    v20.i64[0] = v19.u32[0];
    v20.i64[1] = v19.u32[1];
    v21 = vaddq_f64(v16, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v20, 0x3FuLL)), (int8x16_t)v17, (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v14, v17, 1), v13, v17.f64[0])));
    if ((v18.i8[0] & 1) != 0 || v21.f64[0] != 0.0 || v21.f64[1] != 0.0)
      *(float32x2_t *)(a2 + 28) = vcvt_f32_f64(vaddq_f64(v21, vmlaq_n_f64(vmulq_n_f64(v14, v12), v13, v11)));
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v7);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v7);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  return started;
}

uint64_t WebCore::SVGTextQuery::rotationOfCharacterCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  float v11;
  double v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  long double v20;
  float v21;
  unsigned int v23;
  unsigned int v24;

  v24 = *(_DWORD *)(a2 + 24);
  v23 = v24 + 1;
  started = WebCore::SVGTextQuery::mapStartEndPositionsIntoFragmentCoordinates(a2, (_DWORD *)a3, &v24, &v23);
  if ((_DWORD)started)
  {
    v6 = *(double *)(a3 + 32);
    v7 = *(double *)(a3 + 40);
    v8 = *(double *)(a3 + 48);
    v9 = *(double *)(a3 + 56);
    v11 = *(float *)(a3 + 12);
    v10 = *(float *)(a3 + 16);
    v12 = (float)-v11;
    v13 = (float)-v10;
    v14 = v6 == 1.0;
    if (v7 != 0.0)
      v14 = 0;
    if (v8 != 0.0)
      v14 = 0;
    v15 = v8 * v13 + v12 * v6;
    v16 = v9 * v13 + v12 * v7;
    v17 = v14 && v9 == 1.0;
    if (v17)
      v18 = (float)-v11;
    else
      v18 = v15;
    if (v17)
      v19 = (float)-v10;
    else
      v19 = v16;
    if (v17 == 1 && *(double *)(a3 + 64) + v11 + v18 == 0.0 && *(double *)(a3 + 72) + v10 + v19 == 0.0)
    {
      v21 = 0.0;
    }
    else
    {
      v20 = hypot(*(long double *)(a3 + 32), *(long double *)(a3 + 40));
      v21 = atan2(v7 * (1.0 / v20), v6 * (1.0 / v20)) * 57.2957795;
    }
    *(float *)(a2 + 28) = v21;
  }
  return started;
}

uint64_t WebCore::SVGTextQuery::extentOfCharacterCallback(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t started;
  unsigned int v7;
  unsigned int v8;

  v8 = *(_DWORD *)(a2 + 24);
  v7 = v8 + 1;
  started = WebCore::SVGTextQuery::mapStartEndPositionsIntoFragmentCoordinates(a2, a3, &v8, &v7);
  if ((_DWORD)started)
    WebCore::calculateGlyphBoundaries(a2, a3, v8, a2 + 28);
  return started;
}

WTF::StringImpl *WebCore::calculateGlyphBoundaries(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  float v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  float64_t v15;
  float v16;
  float v17;
  float v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  float64_t v23;
  float64x2_t v24;
  float32x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint16x4_t v28;
  int32x2_t v29;
  int64x2_t v30;
  float64x2_t v31;
  int v32;
  int v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  int8x16_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float v40[6];
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(float *)(v8 + 120);
  v10 = a2[3];
  v11 = *((float *)a2 + 4);
  v12 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v8 + 128), a2) + 4);
  *(_DWORD *)a4 = v10;
  *(float *)(a4 + 4) = v11 - (float)(v12 / v9);
  if (a3)
  {
    v13 = *(_QWORD *)(a1 + 8);
    WebCore::SVGTextMetrics::constructTextRun((WebCore::SVGTextMetrics *)&v37, *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 104), *a2, a3);
    WebCore::SVGTextMetrics::SVGTextMetrics((WebCore::SVGTextMetrics *)v40, (WebCore::RenderSVGInlineText *)v13, (const WebCore::TextRun *)&v37);
    v15 = *(double *)&v37.i64[1];
    v37.i64[1] = 0;
    if (v15 != 0.0)
    {
      if (**(_DWORD **)&v15 == 2)
        WTF::StringImpl::destroy(*(WTF::StringImpl **)&v15, v14);
      else
        **(_DWORD **)&v15 -= 2;
    }
    if (*(_BYTE *)a1)
    {
      v16 = v40[1];
      v17 = *(float *)(a4 + 4);
      v18 = *(float *)a4 + 0.0;
    }
    else
    {
      v16 = *(float *)(a4 + 4);
      v18 = v40[0] + *(float *)a4;
      v17 = 0.0;
    }
    *(float *)a4 = v18;
    *(float *)(a4 + 4) = v17 + v16;
    v19 = v42;
    v42 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v41;
    v41 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v21 = *(_QWORD *)(a1 + 8);
  WebCore::SVGTextMetrics::constructTextRun((WebCore::SVGTextMetrics *)&v37, *(_QWORD *)(v21 + 32), *(_QWORD *)(v21 + 104), *a2 + a3, 1u);
  WebCore::SVGTextMetrics::SVGTextMetrics((WebCore::SVGTextMetrics *)v40, (WebCore::RenderSVGInlineText *)v21, (const WebCore::TextRun *)&v37);
  v23 = *(double *)&v37.i64[1];
  v37.i64[1] = 0;
  if (v23 != 0.0)
  {
    if (**(_DWORD **)&v23 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)&v23, v22);
    else
      **(_DWORD **)&v23 -= 2;
  }
  *(_QWORD *)(a4 + 8) = *(_QWORD *)v40;
  v24 = *((float64x2_t *)a2 + 4);
  v38 = *((float64x2_t *)a2 + 3);
  v39 = v24;
  v37 = *((int8x16_t *)a2 + 2);
  v25 = *(float32x2_t *)(a2 + 3);
  v26 = vaddq_f64(v24, vcvtq_f64_f32(v25));
  v27 = vcvtq_f64_f32(vneg_f32(v25));
  v28 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(v37, v37, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v38, (float64x2_t)xmmword_1968A14C0))));
  v28.i16[0] = vmaxv_u16(v28);
  v29 = vdup_n_s32(v28.i32[0] ^ 1u);
  v30.i64[0] = v29.u32[0];
  v30.i64[1] = v29.u32[1];
  v31 = vaddq_f64(v26, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v30, 0x3FuLL)), (int8x16_t)v27, (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v38, v27, 1), (float64x2_t)v37, v27.f64[0])));
  v39 = v31;
  if ((v28.i8[0] & 1) != 0 || v31.f64[0] != 0.0 || v31.f64[1] != 0.0)
  {
    *(float *)a4 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v37, (const WebCore::FloatRect *)a4);
    *(_DWORD *)(a4 + 4) = v32;
    *(_DWORD *)(a4 + 8) = v33;
    *(_DWORD *)(a4 + 12) = v34;
  }
  v35 = v42;
  v42 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v22);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGTextQuery::characterNumberAtPositionCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  float v6;
  float v7;
  float32x2_t v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  float64_t v23;
  float64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  WTF::StringImpl *result;
  float v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  int v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  unsigned int v52;
  float64x2_t v53;
  float64x2_t v54;
  int8x16_t v55;
  int32x2_t v56;
  int64x2_t v57;
  _DWORD v58[2];
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(float *)(v5 + 120);
  v7 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v5 + 128), (void *)a2) + 4) / v6;
  v8 = *(float32x2_t *)(a3 + 12);
  v58[0] = v8.i32[0];
  *(float *)&v58[1] = v8.f32[1] - v7;
  v59 = *(_QWORD *)(a3 + 20);
  if ((*(_DWORD *)(a3 + 8) & 0x80000000) != 0)
  {
    v42 = *(double *)(a3 + 88);
    v43 = *(float64x2_t *)(a3 + 104);
    v44.f64[0] = *(float64_t *)(a3 + 80);
    v44.f64[1] = *(float64_t *)(a3 + 96);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v44, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v43, (float64x2_t)xmmword_1968A14B0))))) & 1) == 0&& v42 == 0.0)
    {
      v48 = *(double *)(a3 + 120);
      v45 = *(float64x2_t *)(a3 + 32);
      v46 = *(float64x2_t *)(a3 + 48);
      v47 = *(float64x2_t *)(a3 + 64);
      if (v48 == 0.0)
      {
LABEL_36:
        v60 = v45;
        v61 = v46;
        v62 = v47;
        v51 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqq_f64(v46, (float64x2_t)xmmword_1968A14C0));
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v51))) & 1) == 0
          && v47.f64[0] == 0.0
          && v47.f64[1] == 0.0)
        {
          goto LABEL_17;
        }
        v52 = (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, v51)) & 0xF) == 0;
        v53 = vcvtq_f64_f32(v8);
        v54 = vcvtq_f64_f32(vneg_f32(v8));
        v55 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v46, v54, 1), v45, v54.f64[0]);
        v56 = vdup_n_s32(v52);
        v57.i64[0] = v56.u32[0];
        v57.i64[1] = v56.u32[1];
        v26 = vaddq_f64(vaddq_f64(v47, v53), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v57, 0x3FuLL)), (int8x16_t)v54, v55));
LABEL_16:
        v62 = v26;
        goto LABEL_17;
      }
    }
    else
    {
      v45 = *(float64x2_t *)(a3 + 32);
      v46 = *(float64x2_t *)(a3 + 48);
      v47 = *(float64x2_t *)(a3 + 64);
      v48 = *(double *)(a3 + 120);
    }
    v49 = vmlaq_n_f64(vmulq_n_f64(v46, v42), v45, *(double *)(a3 + 80));
    v50 = vmulq_n_f64(v46, v48);
    v46 = vmlaq_n_f64(vmulq_n_f64(v46, v43.f64[0]), v45, *(double *)(a3 + 96));
    v47 = vaddq_f64(v47, vmlaq_laneq_f64(v50, v45, v43, 1));
    v45 = v49;
    goto LABEL_36;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a3 + 32), (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(*(float64x2_t *)(a3 + 48), (float64x2_t)xmmword_1968A14C0))))) & 1) == 0&& *(double *)(a3 + 64) == 0.0&& *(double *)(a3 + 72) == 0.0)
  {
    v25 = *(float64x2_t *)(a3 + 96);
    v60 = *(float64x2_t *)(a3 + 80);
    v61 = v25;
    v26 = *(float64x2_t *)(a3 + 112);
    goto LABEL_16;
  }
  v9 = *(float64x2_t *)(a3 + 64);
  v61 = *(float64x2_t *)(a3 + 48);
  v62 = v9;
  v60 = *(float64x2_t *)(a3 + 32);
  v10 = v9.f64[1] + v8.f32[1];
  v11 = (float)-v8.f32[0];
  v12 = (float)-v8.f32[1];
  v13 = v60.f64[0] == 1.0;
  if (v60.f64[1] != 0.0)
    v13 = 0;
  if (v61.f64[0] != 0.0)
    v13 = 0;
  v14 = v61.f64[1] * v12 + v11 * v60.f64[1];
  if (!v13 || v61.f64[1] != 1.0)
  {
    v11 = v61.f64[0] * v12 + v11 * v60.f64[0];
    v12 = v14;
  }
  v15 = v9.f64[0] + v8.f32[0] + v11;
  v16 = v10 + v12;
  v62.f64[0] = v15;
  v62.f64[1] = v10 + v12;
  v18 = *(double *)(a3 + 80);
  v17 = *(double *)(a3 + 88);
  v19 = *(double *)(a3 + 96);
  v20 = *(float64x2_t *)(a3 + 104);
  v21.f64[0] = v18;
  v21.f64[1] = v19;
  v22 = *(double *)(a3 + 120);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v21, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v20, (float64x2_t)xmmword_1968A14B0))))) & 1) != 0|| v17 != 0.0|| v22 != 0.0)
  {
    v23 = v60.f64[1] * v20.f64[0] + v60.f64[0] * v17;
    v24 = v61.f64[1] * v20.f64[0] + v61.f64[0] * v17;
    v60.f64[0] = v60.f64[1] * v19 + v60.f64[0] * v18;
    v60.f64[1] = v23;
    v61.f64[0] = v19 * v61.f64[1] + v61.f64[0] * v18;
    v61.f64[1] = v24;
    v62.f64[0] = v20.f64[1] + v16 * v19 + v15 * v18;
    v62.f64[1] = v22 + v16 * v20.f64[0] + v15 * v17;
  }
LABEL_17:
  v27 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v60, (const WebCore::FloatRect *)v58);
  result = 0;
  v32 = *(float *)(a2 + 24);
  if (v27 <= v32 && (float)(v27 + v29) >= v32)
  {
    v33 = *(float *)(a2 + 28);
    if (v28 <= v33 && (float)(v28 + v30) >= v33)
    {
      v60 = 0uLL;
      if ((*(_DWORD *)(a3 + 8) & 0x7FFFFFFF) != 0)
      {
        v34 = 0;
        v35 = *(_QWORD *)(a2 + 8);
        v36 = *(unsigned int *)(a3 + 4);
        v37 = 40 * v36 + 8;
        v38 = v36 - 1;
        while (1)
        {
          result = WebCore::calculateGlyphBoundaries(a2, (_DWORD *)a3, v34, (uint64_t)&v60);
          v39 = *(float *)(a2 + 24);
          if (*(float *)v60.f64 <= v39 && (float)(*(float *)v60.f64 + *(float *)&v60.f64[1]) >= v39)
          {
            v40 = *(float *)(a2 + 28);
            if (*((float *)v60.f64 + 1) <= v40 && (float)(*((float *)v60.f64 + 1) + *((float *)&v60.f64[1] + 1)) >= v40)
            {
              *(_DWORD *)(a2 + 4) += *(_DWORD *)a3 + v34 - *(_DWORD *)(*(_QWORD *)(a2 + 16) + 72);
              return (WTF::StringImpl *)1;
            }
          }
          if (++v38 >= (unint64_t)*(unsigned int *)(v35 + 452))
            break;
          v41 = *(_DWORD *)(*(_QWORD *)(v35 + 440) + v37);
          v37 += 40;
          v34 += v41;
          if (v34 >= (*(_DWORD *)(a3 + 8) & 0x7FFFFFFFu))
            return 0;
        }
        __break(0xC471u);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

int32x4_t WebCore::LegacyRenderSVGContainer::LegacyRenderSVGContainer(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, unint64_t a5)
{
  int32x4_t *v5;
  int32x4_t result;

  v5 = (int32x4_t *)WebCore::RenderElement::RenderElement(a1, a2, a3, a4, 0, (((a5 >> 2) & 7) << 10) | 0x2304);
  v5->i64[0] = (uint64_t)off_1E344A1E8;
  v5[9].i64[0] = 0;
  v5[9].i64[1] = 0;
  result = vdupq_n_s32(0x7FC00000u);
  v5[10] = result;
  v5[11].i64[0] = 0;
  v5[11].i64[1] = 0;
  v5[12] = result;
  v5[13].i16[0] = 256;
  v5[13].i8[2] = 0;
  return result;
}

void WebCore::LegacyRenderSVGContainer::~LegacyRenderSVGContainer(WebCore::LegacyRenderSVGContainer *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderElement::~RenderElement(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 208) = 0;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::LegacyRenderSVGContainer::layout(WebCore::LegacyRenderSVGContainer *this, const WebCore::RenderElement *a2)
{
  unint64_t i;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  const WebCore::RenderElement *v12;
  __int16 v13;
  int v14;
  const WebCore::RenderElement *v15;
  int v16;
  uint64_t v17;
  _BOOL8 v18;
  WebCore::RenderElement *v19;
  int v20;
  int v21;
  int32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[56];
  __int128 v31;

  for (i = *((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
        i;
        i = *(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32))
  {
    v4 = *(_QWORD *)(i + 8);
    if (!v4)
      break;
    if ((*(_BYTE *)(v4 + 45) & 2) == 0)
    {
      if ((*(_BYTE *)(v4 + 20) & 0xF8) == 0)
        break;
      v5 = 0;
      v6 = 1;
LABEL_6:
      v7 = v6;
      v8 = *(unsigned int *)(v4 + 64);
      if (v8 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32))
      {
        if (*(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32)) + 8))
          break;
      }
      if (v6 == 200)
      {
        v10 = *((_BYTE *)this + 210);
        *((_BYTE *)this + 210) = 1;
      }
      else
      {
        while (1)
        {
          v9 = *(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32);
          if (!v9)
            break;
          v4 = *(_QWORD *)(v9 + 8);
          if (!v4)
            break;
          if ((*(_BYTE *)(v4 + 45) & 2) == 0)
          {
            ++v6;
            v5 = v7;
            if ((*(_BYTE *)(v4 + 20) & 0xF8) != 0)
              goto LABEL_6;
            goto LABEL_13;
          }
        }
        v10 = *((_BYTE *)this + 210);
        *((_BYTE *)this + 210) = v5 > 0x30;
        if (v5 <= 0x30)
          goto LABEL_14;
      }
      goto LABEL_45;
    }
  }
LABEL_13:
  v10 = *((_BYTE *)this + 210);
  *((_BYTE *)this + 210) = 0;
LABEL_14:
  v11 = WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
  if (v11 && *(_QWORD *)v11 && (v28 = *(_QWORD *)(*(_QWORD *)v11 + 8)) != 0 && *(_QWORD *)(v28 + 8))
LABEL_45:
    v13 = 257;
  else
    v13 = WebCore::SVGRenderSupport::checkForSVGRepaintDuringLayout(this, v12) | 0x100;
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v30, this, v13, *((unsigned __int8 *)this + 210) | 0x100, 0);
  (*(void (**)(WebCore::LegacyRenderSVGContainer *))(*(_QWORD *)this + 816))(this);
  v14 = (*(uint64_t (**)(WebCore::LegacyRenderSVGContainer *))(*(_QWORD *)this + 808))(this);
  (*(void (**)(WebCore::LegacyRenderSVGContainer *))(*(_QWORD *)this + 840))(this);
  v16 = *((_DWORD *)this + 5);
  if ((v16 & 8) != 0)
    v18 = 1;
  else
    v18 = (v16 & 0x20) != 0
       && (v17 = WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, v15)) != 0
       && *(_QWORD *)v17
       && (v29 = *(_QWORD *)(*(_QWORD *)v17 + 8)) != 0
       && *(_QWORD *)(v29 + 8) != 0;
  WebCore::SVGRenderSupport::layoutChildren((uint64_t)this, (WebCore::RenderElement *)v18);
  v20 = *((_DWORD *)this + 5);
  if ((v20 & 0x200) != 0 && (v20 & 0xF8) != 0)
    WebCore::SVGResourcesCache::clientLayoutChanged(this, v19);
  if (*((_BYTE *)this + 209))
    v21 = 1;
  else
    v21 = v14;
  if (v21 == 1)
  {
    v22 = vdupq_n_s32(0x7FC00000u);
    *((int32x4_t *)this + 10) = v22;
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
    *((int32x4_t *)this + 12) = v22;
    v31 = 0uLL;
    WebCore::SVGRenderSupport::computeContainerBoundingBoxes((uint64_t)this, (float32x2_t *)this + 18, (_BYTE *)this + 208, (float *)&v31, 0);
    WebCore::SVGRenderSupport::intersectRepaintRectWithResources((uint64_t)this, (float32x2_t *)&v31, 0);
    *((_OWORD *)this + 11) = v31;
    *((_BYTE *)this + 209) = 0;
    (*(void (**)(WebCore::LegacyRenderSVGContainer *))(*(_QWORD *)this + 808))(this);
    v23 = *((_QWORD *)this + 4);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
      {
        ++*(_DWORD *)(v24 + 16);
        WebCore::RenderObject::invalidateCachedBoundaries(v24);
        v25 = *(_DWORD *)(v24 + 16);
        if (!v25)
        {
          __break(0xC471u);
          JUMPOUT(0x196547170);
        }
        *(_DWORD *)(v24 + 16) = v25 - 1;
      }
    }
  }
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v30);
  v27 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v27;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v27 & 0xFFDFFE07;
  *((_BYTE *)this + 210) = v10;
  return result;
}

uint64_t WebCore::LegacyRenderSVGContainer::selfWillPaint(WebCore::LegacyRenderSVGContainer *this, const WebCore::RenderElement *a2)
{
  uint64_t result;
  uint64_t v3;

  result = WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
  if (result)
    return *(_QWORD *)result && (v3 = *(_QWORD *)(*(_QWORD *)result + 8)) != 0 && *(_QWORD *)(v3 + 8) != 0;
  return result;
}

uint64_t WebCore::LegacyRenderSVGContainer::paint(WebCore::LegacyRenderSVGContainer *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t result;
  uint64_t v6;
  const WebCore::FloatRect *v7;
  const WebCore::PaintInfo *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  WebCore::AffineTransform *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  const WebCore::FloatRect *v28;
  uint64_t v29;
  _OWORD *v30;
  WebCore::RegionContext *v31;
  WebCore::RegionContext *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  _OWORD v38[3];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  if (*((_WORD *)a2 + 8) == 4096
    || (result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10)),
        (result & 1) == 0))
  {
    if ((v6 = *((unsigned int *)this + 16), v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
      && *(_QWORD *)((v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)
      || (result = WebCore::LegacyRenderSVGContainer::selfWillPaint(this, a2), (_DWORD)result))
    {
      v45 = *((_OWORD *)this + 11);
      v7 = (const WebCore::FloatRect *)(*(uint64_t (**)(WebCore::LegacyRenderSVGContainer *))(*(_QWORD *)this + 272))(this);
      result = WebCore::SVGRenderSupport::paintInfoIntersectsRepaintRect((WebCore::SVGRenderSupport *)&v45, v7, a2, v8);
      if ((_DWORD)result)
      {
        v9 = *((_OWORD *)a2 + 3);
        v41 = *((_OWORD *)a2 + 2);
        v42 = v9;
        v43 = *((_OWORD *)a2 + 4);
        v10 = *((_QWORD *)a2 + 10);
        v44 = v10;
        v11 = *((_OWORD *)a2 + 1);
        v39 = *(_OWORD *)a2;
        v40 = v11;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 96))(v10, 1);
        (*(void (**)(WebCore::LegacyRenderSVGContainer *, __int128 *))(*(_QWORD *)this + 824))(this, &v39);
        v12 = (_OWORD *)(*(uint64_t (**)(WebCore::LegacyRenderSVGContainer *))(*(_QWORD *)this + 272))(this);
        v14 = v12[1];
        v13 = v12[2];
        v38[0] = *v12;
        v38[1] = v14;
        v38[2] = v13;
        WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)&v39, (const WebCore::AffineTransform *)v38);
        if (*((_WORD *)a2 + 8) == 4096
          && *((_QWORD *)&v43 + 1)
          && (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 16))(*((_QWORD *)&v43 + 1)))
        {
          v31 = (WebCore::RegionContext *)*((_QWORD *)&v43 + 1);
          if (*((_QWORD *)&v43 + 1))
          {
            if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 16))(*((_QWORD *)&v43 + 1)))
              v32 = v31;
            else
              v32 = 0;
          }
          else
          {
            v32 = 0;
          }
          WebCore::RegionContext::pushTransform(v32, (const WebCore::AffineTransform *)v38);
        }
        v36 = 0u;
        memset(v37, 0, 21);
        v35 = 0u;
        if ((unsigned __int16)v40 != 8
          || (WebCore::SVGRenderingContext::prepareToRenderSVGContent(&v35, this, (const WebCore::RenderElement *)&v39, 1), (v37[1] & 1) != 0))
        {
          if (*((_QWORD *)&v40 + 1) && *((WebCore::LegacyRenderSVGContainer **)&v40 + 1) == this)
            *((_QWORD *)&v40 + 1) = 0;
          v15 = *((unsigned __int8 *)this + 68);
          for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v18 + 47))
          {
            v17 = i | (v15 << 32);
            if (!v17)
              break;
            v18 = *(_QWORD *)(v17 + 8);
            if (!v18)
              break;
            if ((*(_BYTE *)(v18 + 45) & 2) == 0)
            {
LABEL_14:
              v46 = 0;
              (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v18 + 680))(v18, &v39, &v46);
              while (1)
              {
                v19 = *(unsigned int *)(v18 + 47);
                if (!(v19 | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32)))
                  goto LABEL_19;
                v18 = *(_QWORD *)((v19 | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32)) + 8);
                if (!v18)
                  goto LABEL_19;
                if ((*(_BYTE *)(v18 + 45) & 2) == 0)
                  goto LABEL_14;
              }
            }
            v15 = *(unsigned __int8 *)(v18 + 51);
          }
        }
LABEL_19:
        if (*((_WORD *)a2 + 8) == 4096
          && *((_QWORD *)&v43 + 1)
          && (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 16))(*((_QWORD *)&v43 + 1)))
        {
          v33 = *((_QWORD *)&v43 + 1);
          if (*((_QWORD *)&v43 + 1))
          {
            if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 16))(*((_QWORD *)&v43 + 1)))
              v34 = v33;
            else
              v34 = 0;
          }
          else
          {
            v34 = 0;
          }
          WebCore::RegionContext::popTransform(v34);
        }
        v20 = v37[1];
        if ((v37[1] & 0xE) != 0)
        {
          if ((v37[1] & 8) != 0)
          {
            v46 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 80);
            WebCore::LegacyRenderSVGResourceFilter::postApplyResource(*((uint64_t **)&v36 + 1), (WebCore::RenderElement *)v35, &v46);
            v30 = (_OWORD *)*((_QWORD *)&v35 + 1);
            *(_QWORD *)(*((_QWORD *)&v35 + 1) + 80) = v36;
            *v30 = v37[0];
            v20 = v37[1];
          }
          if ((v20 & 4) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)&v35 + 1) + 80) + 608))(*(_QWORD *)(*((_QWORD *)&v35 + 1) + 80));
            v20 = v37[1];
          }
          if ((v20 & 2) != 0)
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)&v35 + 1) + 80) + 104))(*(_QWORD *)(*((_QWORD *)&v35 + 1) + 80), 1);
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
        if (*((_WORD *)a2 + 8) == 64)
        {
          v21 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
          v22 = *(unsigned __int8 *)(v21 + 52);
          if ((v22 & 0xF) != 0)
          {
            v23 = *(float *)(v21 + 48);
            if ((((v23 < 3.0) & (v22 >> 4)) != 0 || v23 != 0.0)
              && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
              && (*((_BYTE *)this + 120) & 0x30) == 0)
            {
              v24 = (WebCore::AffineTransform *)(*(uint64_t (**)(WebCore::LegacyRenderSVGContainer *))(*(_QWORD *)this + 272))(this);
              LODWORD(v38[0]) = WebCore::AffineTransform::mapRect(v24, (const WebCore::FloatRect *)&v45);
              *(_QWORD *)((char *)v38 + 4) = __PAIR64__(v26, v25);
              HIDWORD(v38[0]) = v27;
              *(_QWORD *)&v35 = WebCore::enclosingIntRect((WebCore *)v38, v28);
              *((_QWORD *)&v35 + 1) = v29;
              WebCore::LayoutRect::LayoutRect((int8x8_t *)v38, (int32x2_t *)&v35);
              return WebCore::RenderElement::paintOutline(this, a2, (const WebCore::LayoutRect *)v38);
            }
          }
        }
      }
    }
  }
  return result;
}

float WebCore::LegacyRenderSVGContainer::repaintRectInLocalCoordinates(uint64_t a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
    v2 = a1 + 192;
  else
    v2 = a1 + 176;
  return *(float *)v2;
}

void WebCore::LegacyRenderSVGContainer::addFocusRingRects(_OWORD *a1, uint64_t a2)
{
  WebCore::AffineTransform *v4;
  double v5;
  float v6;
  float v7;
  float v8;
  int v9;
  int v10;
  double v11;
  int v12;
  double v13;
  int v14;
  int v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;

  v4 = (WebCore::AffineTransform *)(*(uint64_t (**)(_OWORD *))(*(_QWORD *)a1 + 272))(a1);
  v22 = a1[11];
  v5 = WebCore::AffineTransform::mapRect(v4, (const WebCore::FloatRect *)&v22) * 64.0;
  if (v5 > -2147483650.0)
    v9 = (int)v5;
  else
    v9 = 0x80000000;
  if (v5 < 2147483650.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = v6 * 64.0;
  if (v11 > -2147483650.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 >= 2147483650.0)
    v12 = 0x7FFFFFFF;
  *(_QWORD *)&v23 = __PAIR64__(v12, v10);
  v13 = v7 * 64.0;
  if (v13 > -2147483650.0)
    v14 = (int)v13;
  else
    v14 = 0x80000000;
  if (v13 < 2147483650.0)
    v15 = v14;
  else
    v15 = 0x7FFFFFFF;
  DWORD2(v23) = v15;
  v16 = v8 * 64.0;
  if (v16 >= 2147483650.0)
  {
    v17 = 0x7FFFFFFF;
  }
  else
  {
    if (v16 <= -2147483650.0)
      return;
    v17 = (int)v16;
  }
  HIDWORD(v23) = v17;
  if (v15 >= 1 && v17 >= 1)
  {
    v18 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(a2 + 8))
    {
      v21 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v18 + 1, (unint64_t)&v23);
      v18 = *(unsigned int *)(a2 + 12);
      v19 = *(_QWORD *)a2;
      v20 = *v21;
    }
    else
    {
      v19 = *(_QWORD *)a2;
      v20 = v23;
    }
    *(_OWORD *)(v19 + 16 * v18) = v20;
    ++*(_DWORD *)(a2 + 12);
  }
}

float WebCore::LegacyRenderSVGContainer::strokeBoundingBox(WebCore::LegacyRenderSVGContainer *this)
{
  return *((float *)this + 40);
}

uint64_t WebCore::LegacyRenderSVGContainer::nodeAtFloatPoint(_QWORD *a1, uint64_t a2, WebCore::HitTestResult *a3, float *a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  WTF *v22;
  double *v23;
  const WebCore::FloatPoint *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  BOOL v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t *v40;
  char v41;
  double v42;
  double v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t v48;
  double v49;
  int v50;
  double v51;
  int v52;
  uint64_t v53;
  float v54;
  unsigned int v55;
  float v56;
  uint64_t v57;
  void *v58;
  _BOOL4 v59;
  uint64_t v60;
  float v61;
  float v62;
  double v63;
  int v64;
  int v65;
  double v66;
  int v67;
  WebCore::ImageOverlay *v68;
  WebCore::Node *v69;
  float v70;
  unsigned int v71;
  float v72;
  uint64_t v73;
  void *v74;
  _BOOL4 v75;
  _QWORD *v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  uint64_t v82;
  float32x2_t v83;
  double v84;
  double v85;
  float v86;
  float v87;
  float v88;
  float v89;
  __int16 v90;
  float v91;
  float v92;

  if (!(*(unsigned int (**)(_QWORD *, float *))(*a1 + 832))(a1, a4))
    return 0;
  if (_MergedGlobals_260 == 1)
  {
    v10 = dword_1ECE84AF0;
  }
  else
  {
    v10 = 0;
    qword_1ECE84AE8 = 0;
    *(_QWORD *)&dword_1ECE84AF0 = 0;
    _MergedGlobals_260 = 1;
  }
  dword_1ECE84AF0 = v10 + 1;
  v11 = a1[1];
  if (v11)
  {
    if (*(_QWORD *)(v11 + 8) && qword_1ECE84AE8)
    {
      v12 = *(_DWORD *)(qword_1ECE84AE8 - 8);
      v13 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      for (i = 1; ; ++i)
      {
        v18 = *(_QWORD *)(qword_1ECE84AE8 + 8 * v16);
        if (!v18)
          break;
        if (v18 != -1 && v18 == v11)
          return 0;
        v16 = (v16 + i) & v12;
      }
    }
    goto LABEL_18;
  }
  v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = a1;
  v22 = (WTF *)a1[1];
  a1[1] = v11;
  if (!v22)
  {
LABEL_18:
    ++*(_DWORD *)v11;
    goto LABEL_19;
  }
  if (*(_DWORD *)v22 != 1)
  {
    --*(_DWORD *)v22;
    goto LABEL_18;
  }
  WTF::fastFree(v22, v21);
  v11 = a1[1];
  if (v11)
    goto LABEL_18;
LABEL_19:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84AE8, a1, (uint64_t)&v80);
  v23 = (double *)(*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v25 = *v23;
  v26 = v23[1];
  v27 = v23[2];
  v28 = v23[3];
  v29 = *v23 * v28 - v26 * v27;
  v30 = fabs(v29);
  if ((unint64_t)(*(_QWORD *)&v30 - 0x10000000000000) >> 53 > 0x3FE
    && (unint64_t)(*(_QWORD *)&v30 - 1) > 0xFFFFFFFFFFFFELL)
  {
    v41 = 0;
    LOBYTE(v80) = 0;
    v40 = (unint64_t *)&constinit_12;
    v35 = 1.0;
    v39 = 0.0;
    v38 = 0.0;
    v32 = 1.0;
  }
  else
  {
    v32 = 1.0;
    if (v25 == 1.0 && v26 == 0.0 && (v27 == 0.0 ? (v33 = v28 == 1.0) : (v33 = 0), v33))
    {
      v38 = -v23[4];
      v39 = -v23[5];
      v81 = 0.0;
      v82 = 0;
      v35 = 1.0;
    }
    else
    {
      v32 = v28 / v29;
      *(double *)&v34 = -v27 / v29;
      v35 = v25 / v29;
      v37 = v23[4];
      v36 = v23[5];
      v38 = (v27 * v36 - v28 * v37) / v29;
      v81 = -v26 / v29;
      v82 = v34;
      v39 = (v26 * v37 - v25 * v36) / v29;
    }
    v80 = *(_QWORD *)&v32;
    v83 = *(float32x2_t *)&v35;
    v84 = v38;
    v40 = &v80;
    v41 = 1;
    v85 = v39;
  }
  LOBYTE(v86) = v41;
  v42 = *a4;
  v43 = a4[1];
  v44 = v38 + *((double *)v40 + 2) * v43 + v32 * v42;
  v45 = v39 + v35 * v43 + *((double *)v40 + 1) * v42;
  v91 = v44;
  v92 = v45;
  if (!WebCore::SVGRenderSupport::pointInClippingArea((WebCore::SVGRenderSupport *)a1, (const WebCore::RenderElement *)&v91, v24))goto LABEL_95;
  v46 = *(unsigned int *)((char *)a1 + 71);
  if (!(v46 | ((unint64_t)*((unsigned __int8 *)a1 + 75) << 32))
    || (v47 = *(_QWORD *)((v46 | ((unint64_t)*((unsigned __int8 *)a1 + 75) << 32)) + 8)) == 0)
  {
LABEL_67:
    if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
    {
      v61 = *((float *)a1 + 36);
      if (v61 <= v91 && (float)(v61 + *((float *)a1 + 38)) >= v91)
      {
        v62 = *((float *)a1 + 37);
        if (v62 <= v92 && (float)(v62 + *((float *)a1 + 39)) >= v92)
        {
          v63 = v91 * 64.0;
          if (v63 > -2147483650.0)
            v64 = (int)v63;
          else
            v64 = 0x80000000;
          if (v63 < 2147483650.0)
            v65 = v64;
          else
            v65 = 0x7FFFFFFF;
          v66 = v92 * 64.0;
          if (v66 > -2147483650.0)
            v67 = (int)v66;
          else
            v67 = 0x80000000;
          if (v66 >= 2147483650.0)
            v67 = 0x7FFFFFFF;
          v80 = __PAIR64__(v67, v65);
          (*(void (**)(_QWORD *, WebCore::HitTestResult *, unint64_t *))(*a1 + 328))(a1, a3, &v80);
          v68 = (WebCore::ImageOverlay *)(*(uint64_t (**)(_QWORD *))(*a1 + 320))(a1);
          v69 = v68;
          if (v68)
            *((_DWORD *)v68 + 6) += 2;
          v70 = floorf(v91 * 64.0);
          if (v70 >= 2147500000.0)
          {
            v71 = 0x7FFFFFFF;
          }
          else if (v70 <= -2147500000.0)
          {
            v71 = 0x80000000;
          }
          else
          {
            v71 = (int)v70;
          }
          v72 = floorf(v92 * 64.0);
          if (v72 >= 2147500000.0)
          {
            v73 = 0x7FFFFFFFLL;
          }
          else if (v72 <= -2147500000.0)
          {
            v73 = 0x80000000;
          }
          else
          {
            v73 = (int)v72;
          }
          v80 = v71 | (unint64_t)(v73 << 32);
          *(_QWORD *)&v81 = v71 & 0xFFFFFFC0 | ((unint64_t)((v73 & 0xFFFFFFC0) >> 6) << 38);
          v82 = 0x4000000040;
          v83 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v73, v71)), (float32x2_t)vdup_n_s32(0x3C800000u));
          *(float *)&v84 = (float)(int)(v71 & 0xFFFFFFC0) * 0.015625;
          *((float *)&v84 + 1) = (float)(v73 & 0xFFFFFFC0) * 0.015625;
          *(float *)&v85 = *(float *)&v84 + 1.0;
          *((float *)&v85 + 1) = *((float *)&v84 + 1);
          v86 = *(float *)&v84 + 1.0;
          v87 = *((float *)&v84 + 1) + 1.0;
          v88 = *(float *)&v84;
          v89 = *((float *)&v84 + 1) + 1.0;
          v90 = 256;
          v78 = 0;
          v79 = 0;
          v75 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v68, (int *)a2, (uint64_t)&v80, (WebCore::LayoutRect *)&v78);
          if (v69)
          {
            if (*((_DWORD *)v69 + 6) == 2)
            {
              if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v69, v74);
            }
            else
            {
              *((_DWORD *)v69 + 6) -= 2;
            }
          }
          if (!v75)
            goto LABEL_105;
        }
      }
    }
LABEL_95:
    v20 = 0;
    if (!v11)
      return v20;
    goto LABEL_96;
  }
  v48 = (float32x2_t)vdup_n_s32(0x3C800000u);
  while (1)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, WebCore::HitTestResult *, float *, uint64_t))(*(_QWORD *)v47 + 280))(v47, a2, a3, &v91, a5))
    {
      v49 = v91 * 64.0;
      v50 = (int)v49;
      if (v49 <= -2147483650.0)
        v50 = 0x80000000;
      if (v49 >= 2147483650.0)
        v50 = 0x7FFFFFFF;
      v51 = v92 * 64.0;
      v52 = (int)v51;
      if (v51 <= -2147483650.0)
        v52 = 0x80000000;
      if (v51 >= 2147483650.0)
        v52 = 0x7FFFFFFF;
      v80 = __PAIR64__(v52, v50);
      (*(void (**)(_QWORD *, WebCore::HitTestResult *, unint64_t *))(*a1 + 328))(a1, a3, &v80);
      if ((*(_BYTE *)(v47 + 45) & 1) != 0)
      {
        v53 = 0;
      }
      else
      {
        v53 = *(_QWORD *)(*(_QWORD *)(v47 + 24) + 8);
        if (v53)
          *(_DWORD *)(v53 + 24) += 2;
      }
      v54 = floorf(v91 * 64.0);
      if (v54 >= 2147500000.0)
      {
        v55 = 0x7FFFFFFF;
      }
      else if (v54 <= -2147500000.0)
      {
        v55 = 0x80000000;
      }
      else
      {
        v55 = (int)v54;
      }
      v56 = floorf(v92 * 64.0);
      if (v56 >= 2147500000.0)
      {
        v57 = 0x7FFFFFFFLL;
      }
      else if (v56 <= -2147500000.0)
      {
        v57 = 0x80000000;
      }
      else
      {
        v57 = (int)v56;
      }
      v80 = v55 | (unint64_t)(v57 << 32);
      *(_QWORD *)&v81 = v55 & 0xFFFFFFC0 | ((unint64_t)((v57 & 0xFFFFFFC0) >> 6) << 38);
      v82 = 0x4000000040;
      v83 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v57, v55)), v48);
      *(float *)&v84 = (float)(int)(v55 & 0xFFFFFFC0) * 0.015625;
      *((float *)&v84 + 1) = (float)(v57 & 0xFFFFFFC0) * 0.015625;
      *(float *)&v85 = *(float *)&v84 + 1.0;
      *((float *)&v85 + 1) = *((float *)&v84 + 1);
      v86 = *(float *)&v84 + 1.0;
      v87 = *((float *)&v84 + 1) + 1.0;
      v88 = *(float *)&v84;
      v89 = *((float *)&v84 + 1) + 1.0;
      v90 = 256;
      v78 = 0;
      v79 = 0;
      v59 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, (WebCore::ImageOverlay *)v53, (int *)a2, (uint64_t)&v80, (WebCore::LayoutRect *)&v78);
      if (v53)
      {
        if (*(_DWORD *)(v53 + 24) == 2)
        {
          if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v53, v58);
        }
        else
        {
          *(_DWORD *)(v53 + 24) -= 2;
        }
      }
      if (!v59)
        break;
    }
    v60 = *(unsigned int *)(v47 + 40);
    if (v60 | ((unint64_t)*(unsigned __int8 *)(v47 + 44) << 32))
    {
      v47 = *(_QWORD *)((v60 | ((unint64_t)*(unsigned __int8 *)(v47 + 44) << 32)) + 8);
      if (v47)
        continue;
    }
    goto LABEL_67;
  }
LABEL_105:
  v20 = 1;
  if (!v11)
    return v20;
LABEL_96:
  v76 = *(_QWORD **)(v11 + 8);
  if (v76)
    WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84AE8, v76);
  if (*(_DWORD *)v11 == 1)
    WTF::fastFree((WTF *)v11, v76);
  else
    --*(_DWORD *)v11;
  return v20;
}

uint64_t WebCore::LegacyRenderSVGEllipse::operator new(uint64_t this)
{
  if (this == 288)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::LegacyRenderSVGEllipse::LegacyRenderSVGEllipse(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int32x4_t v4;
  double result;

  v3 = WebCore::RenderElement::RenderElement(a1, 89, a2, a3, 0, 12548);
  v4 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v3 + 160) = v4;
  *(int32x4_t *)(v3 + 176) = v4;
  *(_OWORD *)(v3 + 216) = constinit_14;
  *(_BYTE *)(v3 + 208) = *(_BYTE *)(v3 + 208) & 0x80 | 0xE;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 232) = unk_1969FE260;
  result = 0.0;
  *(_OWORD *)(v3 + 248) = xmmword_1969FE270;
  *(_QWORD *)v3 = off_1E344A548;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  return result;
}

void WebCore::LegacyRenderSVGEllipse::~LegacyRenderSVGEllipse(WebCore::LegacyRenderSVGEllipse *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)this = off_1E344ED58;
  v3 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v4])(&v5, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::RenderElement::~RenderElement(this, a2);
}

{
  unsigned int *v3;
  uint64_t v4;
  void *v5;
  char v6;

  *(_QWORD *)this = off_1E344ED58;
  v3 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v4])(&v6, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::RenderElement::~RenderElement(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void WebCore::LegacyRenderSVGEllipse::updateShapeFromElement(float32x2_t *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int32x4_t v5;
  float32x2_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  float *v10;
  int v11;
  float v12;
  uint64_t v13;
  float *v14;
  int v15;
  float v16;
  uint64_t v17;
  float *v18;
  int v19;
  float v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  float v25;
  char v26;
  float32x2_t v27;
  float32_t v28;
  int32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  unsigned int v34;
  float v35;
  unsigned int v36;
  float v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;
  unsigned __int8 *v41;
  __int32 v42;
  __int32 v43;
  unsigned __int8 *v44;
  __int32 v45;
  unsigned int *v46;
  __int32 v47;
  __int32 v48;
  __int32 v49;
  __int32 v50;
  WebCore::Length *v51;
  float v52;
  char v53;
  WebCore::Length *v54;
  WebCore::Length *v55;
  float v56;
  float v57;
  char v58;
  WebCore::Length *v59;
  float v60;
  WebCore::Length *v61;
  float v62;
  float v63;
  unint64_t v64;
  char v65;
  float v66;
  WebCore::Length *v67;
  float v68;
  WTF *v69;
  float32x2_t *v70;
  float32x2_t *v71;
  WTF *v72;
  unsigned int v73;
  char v74;
  WTF *v75[5];
  unsigned int v76;
  char v77;
  int v78;

  v3 = (unsigned int *)this[33];
  this[33] = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(WTF **, unsigned int *))off_1E344B6E8[v4])(v75, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)this[20].f32 = v5;
  v6 = this + 20;
  this[26].i8[0] &= 0x8Fu;
  this[18] = 0;
  this[19] = 0;
  *(int32x4_t *)this[22].f32 = v5;
  this[34] = 0;
  this[35] = 0;
  v7 = *(_QWORD *)(*(_QWORD *)&this[3] + 8);
  if ((*(_BYTE *)(v7 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196548588);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 1184))(*(_QWORD *)(*(_QWORD *)&this[3] + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965485A8);
  }
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v75, (const WebCore::SVGElement *)v7);
  v9 = *(_QWORD *)(*(_QWORD *)&this[17] + 64);
  v10 = (float *)(v9 + 4);
  v11 = *(unsigned __int8 *)(v9 + 8);
  if (v11 == 4)
  {
    if (*(_BYTE *)(v9 + 10))
      v12 = *v10;
    else
      v12 = (float)*(int *)v10;
  }
  else if (v11 == 11)
  {
    v51 = (WebCore::Length *)(v9 + 4);
    LODWORD(v52) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v75);
    if (!v53)
      v52 = 0.0;
    v54 = v51;
    v6 = this + 20;
    WebCore::Length::nonNanCalculatedValue(v54, v52);
  }
  else
  {
    v12 = 0.0;
    if (v11 == 3)
    {
      v33 = *(float *)(v9 + 4);
      if (!*(_BYTE *)(v9 + 10))
        v33 = (float)SLODWORD(v33);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v75, 0, (uint64_t)&v76, v33 / 100.0);
      *(float *)&v34 = 0.0;
      if (v78 != -1)
      {
        if (!v78)
          v34 = v76;
        ((void (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v78])(&v73, &v76);
      }
      v12 = *(float *)&v34;
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)&this[17] + 64);
  v14 = (float *)(v13 + 12);
  v15 = *(unsigned __int8 *)(v13 + 16);
  if (v15 == 4)
  {
    if (*(_BYTE *)(v13 + 18))
      v16 = *v14;
    else
      v16 = (float)*(int *)v14;
  }
  else if (v15 == 11)
  {
    v70 = v6;
    v55 = (WebCore::Length *)(v13 + 12);
    v56 = v12;
    LODWORD(v57) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v75) >> 32;
    if (!v58)
      v57 = 0.0;
    v59 = v55;
    v6 = v70;
    WebCore::Length::nonNanCalculatedValue(v59, v57);
    v16 = v60;
    v12 = v56;
  }
  else
  {
    v16 = 0.0;
    if (v15 == 3)
    {
      v68 = v12;
      v35 = *(float *)(v13 + 12);
      if (!*(_BYTE *)(v13 + 18))
        v35 = (float)SLODWORD(v35);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v75, 1, (uint64_t)&v76, v35 / 100.0);
      *(float *)&v36 = 0.0;
      if (v78 != -1)
      {
        if (!v78)
          v36 = v76;
        ((void (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v78])(&v73, &v76);
      }
      v12 = v68;
      v16 = *(float *)&v36;
    }
  }
  this[34].f32[0] = v12;
  this[34].f32[1] = v16;
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::circleTag + 24))
  {
    v17 = *(_QWORD *)(*(_QWORD *)&this[17] + 64);
    v18 = (float *)(v17 + 20);
    v19 = *(unsigned __int8 *)(v17 + 24);
    if (v19 == 4)
    {
      if (*(_BYTE *)(v17 + 26))
        v20 = *v18;
      else
        v20 = (float)*(int *)v18;
    }
    else if (v19 == 11)
    {
      v71 = v6;
      v61 = (WebCore::Length *)(v17 + 20);
      v64 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v75);
      v63 = *((float *)&v64 + 1);
      v62 = *(float *)&v64;
      if (!v65)
      {
        v63 = 0.0;
        v62 = 0.0;
      }
      v66 = hypotf(v62, v63);
      v67 = v61;
      v6 = v71;
      WebCore::Length::nonNanCalculatedValue(v67, v66 / 1.4142);
    }
    else
    {
      v20 = 0.0;
      if (v19 == 3)
      {
        v37 = *(float *)(v17 + 20);
        if (!*(_BYTE *)(v17 + 26))
          v37 = (float)SLODWORD(v37);
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v75, 2, (uint64_t)&v76, v37 / 100.0);
        *(float *)&v38 = 0.0;
        if (v78 != -1)
        {
          if (!v78)
            v38 = v76;
          ((void (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v78])(&v73, &v76);
        }
        v20 = *(float *)&v38;
      }
    }
    this[35].f32[0] = v20;
    this[35].f32[1] = v20;
  }
  else
  {
    WebCore::Length::Length((WebCore::Length *)&v76, (const WebCore::Length *)(*(_QWORD *)(*(_QWORD *)&this[17] + 64) + 28));
    WebCore::Length::Length((WebCore::Length *)&v73, (const WebCore::Length *)(*(_QWORD *)(*(_QWORD *)&this[17] + 64) + 36));
    if (v77)
      v41 = (unsigned __int8 *)&v76;
    else
      v41 = (unsigned __int8 *)&v73;
    WebCore::SVGLengthContext::valueForLength((WebCore::SVGLengthContext *)v75, v41, 0);
    v43 = v42;
    if (v74)
      v44 = (unsigned __int8 *)&v73;
    else
      v44 = (unsigned __int8 *)&v76;
    WebCore::SVGLengthContext::valueForLength((WebCore::SVGLengthContext *)v75, v44, 1);
    this[35].i32[0] = v43;
    this[35].i32[1] = v45;
    if (v74 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v73);
    }
    if (v77 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v76);
    }
  }
  v21 = v75[0];
  v75[0] = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v39 = *((unsigned int *)v21 + 7);
      if ((_DWORD)v39)
      {
        v72 = v21;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v21 + 2), (WTF::StringImpl *)(*((_QWORD *)v21 + 2) + 32 * v39));
        v21 = v72;
      }
      v40 = (WTF *)*((_QWORD *)v21 + 2);
      if (v40)
      {
        *((_QWORD *)v21 + 2) = 0;
        *((_DWORD *)v21 + 6) = 0;
        v69 = v21;
        WTF::fastFree(v40, v8);
        v21 = v69;
      }
      WTF::fastFree(v21, v8);
    }
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v24 = this[35].f32[0];
  if (v24 > 0.0)
  {
    v25 = this[35].f32[1];
    if (v25 > 0.0)
    {
      if (v24 == v25)
        v26 = 96;
      else
        v26 = 80;
      this[26].i8[0] = this[26].i8[0] & 0x8F | v26;
      v27 = this[17];
      if ((*(_WORD *)(*(_QWORD *)&v27 + 8) & 0x400) != 0)
      {
        v46 = WebCore::LegacyRenderSVGShape::ensurePath((WebCore::LegacyRenderSVGShape *)this);
        WebCore::Path::boundingRect((WebCore::Path *)v46);
        this[18].i32[0] = v47;
        this[18].i32[1] = v48;
        this[19].i32[0] = v49;
        this[19].i32[1] = v50;
      }
      else
      {
        v28 = this[34].f32[1] - v25;
        this[18].f32[0] = this[34].f32[0] - v24;
        this[18].f32[1] = v28;
        this[19].f32[0] = v24 + v24;
        this[19].f32[1] = v25 + v25;
        *(_OWORD *)v6->f32 = *(_OWORD *)this[18].f32;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v27 + 24) + 80) != 1)
        {
          *(float *)v29.i32 = WebCore::LegacyRenderSVGShape::strokeWidth((WebCore::LegacyRenderSVGShape *)this) * 0.5;
          v30 = (float32x2_t)vdup_lane_s32(v29, 0);
          v31 = vsub_f32(this[20], v30);
          v32 = vadd_f32(v30, vadd_f32(v30, this[21]));
          this[20] = v31;
          this[21] = v32;
        }
      }
    }
  }
}

uint64_t WebCore::LegacyRenderSVGEllipse::fillShape(WebCore::LegacyRenderSVGEllipse *this, WebCore::GraphicsContext *a2)
{
  if (*((_QWORD *)this + 33))
    return WebCore::LegacyRenderSVGShape::fillShape(this, a2);
  else
    return (*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 200))(a2, (char *)this + 144);
}

WebCore::LegacyRenderSVGShape *WebCore::LegacyRenderSVGEllipse::strokeShape(WebCore::LegacyRenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  uint64_t v2;
  BOOL v3;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24) + 80) != 1)
  {
    v2 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v2 + 248))
      v3 = *(_BYTE *)(v2 + 248) == 11;
    else
      v3 = 1;
    if (!v3)
    {
      if (*(_BYTE *)(v2 + 250))
      {
        if (*(float *)(v2 + 244) == 0.0)
          return this;
      }
      else if (!*(_DWORD *)(v2 + 244))
      {
        return this;
      }
    }
    if (*((_QWORD *)this + 33))
      return (WebCore::LegacyRenderSVGShape *)WebCore::LegacyRenderSVGShape::strokeShape(this, a2);
    else
      return (WebCore::LegacyRenderSVGShape *)(*(uint64_t (**)(WebCore::GraphicsContext *, _QWORD *))(*(_QWORD *)a2 + 208))(a2, (_QWORD *)this + 18);
  }
  return this;
}

BOOL WebCore::LegacyRenderSVGEllipse::shapeDependentStrokeContains(_BOOL8 result, float *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  char v21;

  if (*(float *)(result + 280) <= 0.0)
    return 0;
  v3 = result;
  if (*(float *)(result + 284) <= 0.0)
    return 0;
  v6 = *(_QWORD *)(result + 136);
  if ((*(_WORD *)(v6 + 8) & 0x400) == 0 && (*(_BYTE *)(result + 208) & 0x70) == 0x60)
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(unsigned int *)(v7 + 76);
    if (!(_DWORD)v8)
    {
      v9 = WebCore::LegacyRenderSVGShape::strokeWidth((WebCore::LegacyRenderSVGShape *)result) * 0.5;
      return vabds_f32(hypotf(*(float *)(v3 + 272) - *a2, *(float *)(v3 + 276) - a2[1]), *(float *)(v3 + 280)) <= v9;
    }
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    v12 = *(unsigned int *)(v7 + 76);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(v7 + 64);
      v14 = 8 * v12;
      v15 = v10;
      do
      {
        v16 = *v13++;
        *(_QWORD *)v15 = v16;
        v15 = (WTF *)((char *)v15 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    WTF::fastFree(v10, v11);
  }
  if (!*(_QWORD *)(v3 + 264))
  {
    WebCore::LegacyRenderSVGShape::createPath((WebCore::LegacyRenderSVGShape *)v3, &v20);
    v18 = *(unsigned int **)(v3 + 264);
    *(_QWORD *)(v3 + 264) = v20;
    if (v18)
    {
      v19 = v18[16];
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v19])(&v21, v18 + 2);
      v18[16] = -1;
      WTF::fastFree((WTF *)v18, v17);
    }
  }
  return WebCore::LegacyRenderSVGShape::shapeDependentStrokeContains((_QWORD *)v3, a2, a3);
}

BOOL WebCore::LegacyRenderSVGEllipse::shapeDependentFillContains(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;

  v2 = a1[70];
  if (v2 <= 0.0)
    return 0;
  v3 = a1[71];
  if (v3 <= 0.0)
    return 0;
  v4 = a1[69] - a2[1];
  return (float)((float)((float)(v4 / v3) * (float)(v4 / v3))
               + (float)((float)((float)(a1[68] - *a2) / v2) * (float)((float)(a1[68] - *a2) / v2))) <= 1.0;
}

BOOL WebCore::LegacyRenderSVGEllipse::isRenderingDisabled(WebCore::LegacyRenderSVGEllipse *this)
{
  return *((float *)this + 38) <= 0.0 || *((float *)this + 39) <= 0.0;
}

void WebCore::LegacyRenderSVGForeignObject::~LegacyRenderSVGForeignObject(WebCore::LegacyRenderSVGForeignObject *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 21) = 0u;
    *((_OWORD *)v2 + 22) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

uint64_t WebCore::LegacyRenderSVGForeignObject::paint(WebCore::LegacyRenderSVGForeignObject *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t result;
  int v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  char v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
  if ((result & 1) == 0)
  {
    v6 = *((unsigned __int16 *)a2 + 8);
    if (v6 == 128 || v6 == 8)
    {
      v8 = *((_OWORD *)a2 + 3);
      v21 = *((_OWORD *)a2 + 2);
      v22 = v8;
      v23 = *((_OWORD *)a2 + 4);
      v9 = *((_QWORD *)a2 + 10);
      v24 = v9;
      v10 = *((_OWORD *)a2 + 1);
      v19 = *(_OWORD *)a2;
      v20 = v10;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
      v11 = *(_OWORD *)((char *)this + 264);
      v12 = *(_OWORD *)((char *)this + 280);
      v16 = *(_OWORD *)((char *)this + 248);
      v17 = v11;
      v18[0] = v12;
      WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)&v19, (const WebCore::AffineTransform *)&v16);
      if (((*((_DWORD *)this + 24) >> 10) & 7u) - 1 <= 2)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v24 + 456))(v24, (char *)this + 344);
      v17 = 0u;
      memset(v18, 0, 21);
      v16 = 0u;
      v13 = *((unsigned __int16 *)a2 + 8);
      if (v13 == 8)
      {
        WebCore::SVGRenderingContext::prepareToRenderSVGContent(&v16, this, (const WebCore::RenderElement *)&v19, 1);
        v14 = v18[1];
        if ((v18[1] & 1) == 0)
          goto LABEL_15;
        v13 = *((unsigned __int16 *)a2 + 8);
      }
      v25 = 0;
      if (v13 != 128)
      {
        LOWORD(v20) = 0;
        WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v19, (const WebCore::LayoutPoint *)&v25);
        LOWORD(v20) = 2;
        WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v19, (const WebCore::LayoutPoint *)&v25);
        LOWORD(v20) = 4;
        WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v19, (const WebCore::LayoutPoint *)&v25);
        LOWORD(v20) = 8;
        WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v19, (const WebCore::LayoutPoint *)&v25);
        LOWORD(v20) = 16;
      }
      WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v19, (const WebCore::LayoutPoint *)&v25);
      v14 = v18[1];
LABEL_15:
      if ((v14 & 0xE) == 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
      if ((v14 & 8) != 0)
      {
        v25 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 80);
        WebCore::LegacyRenderSVGResourceFilter::postApplyResource(*((uint64_t **)&v17 + 1), (WebCore::RenderElement *)v16, &v25);
        v15 = (_OWORD *)*((_QWORD *)&v16 + 1);
        *(_QWORD *)(*((_QWORD *)&v16 + 1) + 80) = v17;
        *v15 = v18[0];
        v14 = v18[1];
        if ((v18[1] & 4) == 0)
        {
LABEL_20:
          if ((v14 & 2) == 0)
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
LABEL_21:
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)&v16 + 1) + 80) + 104))(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 80), 1);
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
        }
      }
      else if ((v14 & 4) == 0)
      {
        goto LABEL_20;
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)&v16 + 1) + 80) + 608))(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 80));
      if ((v18[1] & 2) == 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
      goto LABEL_21;
    }
  }
  return result;
}

__n128 WebCore::LegacyRenderSVGForeignObject::localTransform@<Q0>(WebCore::LegacyRenderSVGForeignObject *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)((char *)this + 248);
  v3 = *(_OWORD *)((char *)this + 264);
  v4 = *(_OWORD *)((char *)this + 280);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t WebCore::LegacyRenderSVGForeignObject::localToParentTransform(WebCore::LegacyRenderSVGForeignObject *this)
{
  __int128 v1;
  __int128 v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;

  v1 = *(_OWORD *)((char *)this + 264);
  v2 = *(_OWORD *)((char *)this + 280);
  *(_OWORD *)((char *)this + 296) = *(_OWORD *)((char *)this + 248);
  *(_OWORD *)((char *)this + 312) = v1;
  *(_OWORD *)((char *)this + 328) = v2;
  v3 = *((float *)this + 86);
  v4 = *((float *)this + 87);
  v6 = *((double *)this + 37);
  v5 = *((double *)this + 38);
  v7 = *((double *)this + 39);
  v8 = *((double *)this + 40);
  if (v6 == 1.0 && v5 == 0.0 && (v7 == 0.0 ? (v9 = v8 == 1.0) : (v9 = 0), v9))
  {
    *((double *)this + 41) = *((double *)this + 41) + v3;
  }
  else
  {
    *((double *)this + 41) = v7 * v4 + v3 * v6 + *((double *)this + 41);
    v4 = v8 * v4 + v3 * v5;
  }
  *((double *)this + 42) = v4 + *((double *)this + 42);
  return (uint64_t)this + 296;
}

uint64_t WebCore::LegacyRenderSVGForeignObject::updateLogicalWidth(uint64_t this)
{
  int v1;
  unsigned int v2;
  int v3;

  v1 = llroundf(*(float *)(this + 352));
  v2 = v1 << 6;
  if (v1 <= -33554432)
    v2 = 0x80000000;
  if (v1 >= 0x2000000)
    v3 = 0x7FFFFFFF;
  else
    v3 = v2;
  *(_DWORD *)(this + 160) = v3;
  return this;
}

uint64_t WebCore::LegacyRenderSVGForeignObject::computeLogicalHeight@<X0>(uint64_t result@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v3;
  unsigned int v4;
  int v5;

  v3 = llroundf(*(float *)(result + 356));
  v4 = v3 << 6;
  if (v3 < -33554432)
    v4 = 0x80000000;
  if (v3 <= 0x1FFFFFF)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

unsigned int *WebCore::LegacyRenderSVGForeignObject::layout(WebCore::LegacyRenderSVGForeignObject *this, const WebCore::RenderElement *a2)
{
  __int16 v3;
  int v4;
  WebCore::SVGPolyElement **v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  _BOOL4 v29;
  float v30;
  int v31;
  float v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  WebCore::RenderElement *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int *result;
  void *v44;
  WTF *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  WTF *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  WTF *v70[2];
  __int128 v71;
  __int128 v72;
  _BYTE v73[56];

  v3 = WebCore::SVGRenderSupport::checkForSVGRepaintDuringLayout(this, a2);
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v73, this, v3 | 0x100, 0, 1);
  v4 = *((unsigned __int8 *)this + 360);
  if (*((_BYTE *)this + 360))
  {
    v5 = *(WebCore::SVGPolyElement ***)(*((_QWORD *)this + 3) + 8);
    if ((*((_WORD *)v5 + 14) & 0x20) == 0
      || ((*((uint64_t (**)(_QWORD))*v5 + 148))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196548E78);
    }
    if (*((_QWORD *)v5[12] + 3) != *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196549280);
    }
    WebCore::SVGGraphicsElement::animatedLocalTransform(v5, (__int128 *)v70);
    v6 = v71;
    *(_OWORD *)((char *)this + 248) = *(_OWORD *)v70;
    v7 = v72;
    *(_OWORD *)((char *)this + 264) = v6;
    *(_OWORD *)((char *)this + 280) = v7;
    *((_BYTE *)this + 360) = 0;
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v8 + 28) & 0x20) == 0
    || (v9 = *((float *)this + 86),
        v10 = *((float *)this + 87),
        v11 = *((float *)this + 88),
        v12 = *((float *)this + 89),
        ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x196548F04);
  }
  if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965492A0);
  }
  *(_DWORD *)(v8 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v70, (const WebCore::SVGElement *)v8);
  v13 = *(_QWORD *)(v8 + 216);
  v14 = *(_QWORD *)(v13 + 24);
  if (!v14 || !*(_DWORD *)(v14 - 12))
    goto LABEL_12;
  v48 = *(unsigned int *)(v14 - 4);
  if ((_DWORD)v48)
  {
    v49 = 8 * v48;
    v50 = *(uint64_t **)(v13 + 24);
    while ((unint64_t)(*v50 + 1) <= 1)
    {
      ++v50;
      v49 -= 8;
      if (!v49)
        goto LABEL_12;
    }
  }
  else
  {
    v50 = *(uint64_t **)(v13 + 24);
  }
  v62 = (uint64_t *)(v14 + 8 * v48);
  if (v50 == v62)
    goto LABEL_12;
  v63 = *v50;
LABEL_96:
  if (!*(_QWORD *)(v63 + 8))
  {
    while (++v50 != v62)
    {
      v63 = *v50;
      if ((unint64_t)(*v50 + 1) > 1)
      {
        if (v50 != v62)
          goto LABEL_96;
        break;
      }
    }
LABEL_12:
    v15 = v13 + 40;
    goto LABEL_13;
  }
  v15 = v13 + 48;
LABEL_13:
  v16 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v15 + 28), (const WebCore::SVGLengthContext *)v70);
  v17 = *(_QWORD *)(v8 + 224);
  v18 = *(_QWORD *)(v17 + 24);
  if (!v18 || !*(_DWORD *)(v18 - 12))
    goto LABEL_14;
  v51 = *(unsigned int *)(v18 - 4);
  if ((_DWORD)v51)
  {
    v52 = 8 * v51;
    v53 = *(uint64_t **)(v17 + 24);
    while ((unint64_t)(*v53 + 1) <= 1)
    {
      ++v53;
      v52 -= 8;
      if (!v52)
        goto LABEL_14;
    }
  }
  else
  {
    v53 = *(uint64_t **)(v17 + 24);
  }
  v64 = (uint64_t *)(v18 + 8 * v51);
  if (v53 == v64)
    goto LABEL_14;
  v65 = *v53;
LABEL_105:
  if (!*(_QWORD *)(v65 + 8))
  {
    while (++v53 != v64)
    {
      v65 = *v53;
      if ((unint64_t)(*v53 + 1) > 1)
      {
        if (v53 != v64)
          goto LABEL_105;
        break;
      }
    }
LABEL_14:
    v19 = v17 + 40;
    goto LABEL_15;
  }
  v19 = v17 + 48;
LABEL_15:
  v20 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v19 + 28), (const WebCore::SVGLengthContext *)v70);
  v21 = *(_QWORD *)(v8 + 232);
  v22 = *(_QWORD *)(v21 + 24);
  if (!v22 || !*(_DWORD *)(v22 - 12))
    goto LABEL_16;
  v54 = *(unsigned int *)(v22 - 4);
  if ((_DWORD)v54)
  {
    v55 = 8 * v54;
    v56 = *(uint64_t **)(v21 + 24);
    while ((unint64_t)(*v56 + 1) <= 1)
    {
      ++v56;
      v55 -= 8;
      if (!v55)
        goto LABEL_16;
    }
  }
  else
  {
    v56 = *(uint64_t **)(v21 + 24);
  }
  v66 = (uint64_t *)(v22 + 8 * v54);
  if (v56 == v66)
    goto LABEL_16;
  v67 = *v56;
LABEL_114:
  if (!*(_QWORD *)(v67 + 8))
  {
    while (++v56 != v66)
    {
      v67 = *v56;
      if ((unint64_t)(*v56 + 1) > 1)
      {
        if (v56 != v66)
          goto LABEL_114;
        break;
      }
    }
LABEL_16:
    v23 = v21 + 40;
    goto LABEL_17;
  }
  v23 = v21 + 48;
LABEL_17:
  v24 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v23 + 28), (const WebCore::SVGLengthContext *)v70);
  v25 = *(_QWORD *)(v8 + 240);
  v26 = *(_QWORD *)(v25 + 24);
  if (!v26 || !*(_DWORD *)(v26 - 12))
    goto LABEL_18;
  v57 = *(unsigned int *)(v26 - 4);
  if ((_DWORD)v57)
  {
    v58 = 8 * v57;
    v59 = *(uint64_t **)(v25 + 24);
    while ((unint64_t)(*v59 + 1) <= 1)
    {
      ++v59;
      v58 -= 8;
      if (!v58)
        goto LABEL_18;
    }
  }
  else
  {
    v59 = *(uint64_t **)(v25 + 24);
  }
  v68 = (uint64_t *)(v26 + 8 * v57);
  if (v59 == v68)
    goto LABEL_18;
  v69 = *v59;
LABEL_123:
  if (!*(_QWORD *)(v69 + 8))
  {
    while (++v59 != v68)
    {
      v69 = *v59;
      if ((unint64_t)(*v59 + 1) > 1)
      {
        if (v59 != v68)
          goto LABEL_123;
        break;
      }
    }
LABEL_18:
    v27 = v25 + 40;
    goto LABEL_19;
  }
  v27 = v25 + 48;
LABEL_19:
  v28 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v27 + 28), (const WebCore::SVGLengthContext *)v70);
  *((_QWORD *)this + 43) = LODWORD(v16) | ((unint64_t)LODWORD(v20) << 32);
  *((float *)this + 88) = v24;
  *((float *)this + 89) = v28;
  if (v4)
  {
    v29 = 1;
  }
  else
  {
    v29 = 1;
    if (v9 == v16 && v10 == v20)
      v29 = v12 != v28 || v11 != v24;
  }
  v30 = roundf(v16);
  if (v30 >= 2147500000.0)
  {
    v31 = 0x7FFFFFFF;
  }
  else if (v30 <= -2147500000.0)
  {
    v31 = 0x80000000;
  }
  else
  {
    v31 = (int)v30;
  }
  v32 = roundf(v20);
  if (v32 >= 2147500000.0)
  {
    v33 = 0x7FFFFFFF;
  }
  else if (v32 <= -2147500000.0)
  {
    v33 = 0x80000000;
  }
  else
  {
    v33 = (int)v32;
  }
  v34 = v31 << 6;
  if (v31 < -33554432)
    v34 = 0x80000000;
  if (v31 <= 0x1FFFFFF)
    v35 = v34;
  else
    v35 = 0x7FFFFFFFLL;
  v36 = v33 << 6;
  if (v33 < -33554432)
    v36 = 0x80000000;
  if (v33 <= 0x1FFFFFF)
    v37 = v36;
  else
    v37 = 0x7FFFFFFFLL;
  *((_QWORD *)this + 19) = v35 | (v37 << 32);
  v38 = *((_DWORD *)this + 5);
  WebCore::RenderBlock::layout(this);
  if (v29)
  {
    v40 = *((_QWORD *)this + 4);
    if (v40)
    {
      v41 = *(_QWORD *)(v40 + 8);
      if (v41)
      {
        ++*(_DWORD *)(v41 + 16);
        WebCore::RenderObject::invalidateCachedBoundaries(v41);
        v42 = *(_DWORD *)(v41 + 16);
        if (!v42)
        {
          __break(0xC471u);
          JUMPOUT(0x1965492E4);
        }
        *(_DWORD *)(v41 + 16) = v42 - 1;
      }
    }
  }
  if ((v38 & 0x208) == 0x208)
    WebCore::SVGResourcesCache::clientLayoutChanged(this, v39);
  result = (unsigned int *)WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v73);
  v45 = v70[0];
  v70[0] = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr((unsigned int *)v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, (unsigned int *)v45));
    if (!v47)
    {
      atomic_store(1u, (unsigned int *)v45);
      v60 = *((unsigned int *)v45 + 7);
      if ((_DWORD)v60)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v45 + 2), (WTF::StringImpl *)(*((_QWORD *)v45 + 2) + 32 * v60));
      v61 = (WTF *)*((_QWORD *)v45 + 2);
      if (v61)
      {
        *((_QWORD *)v45 + 2) = 0;
        *((_DWORD *)v45 + 6) = 0;
        WTF::fastFree(v61, v44);
      }
      result = (unsigned int *)WTF::fastFree(v45, v44);
    }
  }
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v8, v44);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGForeignObject::nodeAtFloatPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, float *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  float32x4_t *v25;
  char v26;
  double v27;
  double v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v35;
  int v36;
  float v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x2_t v44;
  double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  float v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;

  if (a5 != 4)
    return 0;
  v52 = v5;
  v53 = v6;
  v10 = *(double *)(a1 + 248);
  v11 = *(double *)(a1 + 256);
  v12 = *(double *)(a1 + 264);
  v13 = *(double *)(a1 + 272);
  v14 = v10 * v13 - v11 * v12;
  v15 = fabs(v14);
  if ((unint64_t)(*(_QWORD *)&v15 - 0x10000000000000) >> 53 > 0x3FE
    && (unint64_t)(*(_QWORD *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
  {
    v26 = 0;
    v25 = (float32x4_t *)&constinit_12;
    v22 = 1.0;
    v24 = 0.0;
    v23 = 0.0;
    v19 = 1.0;
  }
  else
  {
    v17 = *(double *)(a1 + 280);
    v18 = *(double *)(a1 + 288);
    v19 = 1.0;
    if (v10 == 1.0 && v11 == 0.0 && (v12 == 0.0 ? (v20 = v13 == 1.0) : (v20 = 0), v20))
    {
      v23 = -v17;
      v24 = -v18;
      v42.i64[1] = 0;
      v43 = 0;
      v22 = 1.0;
    }
    else
    {
      v19 = v13 / v14;
      *(double *)&v21 = -v12 / v14;
      v22 = v10 / v14;
      v23 = (v12 * v18 - v13 * v17) / v14;
      *(double *)&v42.i64[1] = -v11 / v14;
      v43 = v21;
      v24 = (v11 * v17 - v10 * v18) / v14;
    }
    v44 = *(float32x2_t *)&v22;
    v45 = v23;
    v25 = &v42;
    v26 = 1;
    v46 = v24;
  }
  LOBYTE(v47) = v26;
  v27 = *a4;
  v28 = a4[1];
  v29 = v24 + v22 * v28 + *(double *)&v25->i64[1] * v27;
  v30 = v23 + *(double *)v25[1].i64 * v28 + v19 * v27;
  v31 = v29;
  if (((*(_DWORD *)(a1 + 96) >> 10) & 7u) - 1 <= 2)
  {
    v32 = *(float *)(a1 + 344);
    if (v32 > v30)
      return 0;
    if ((float)(v32 + *(float *)(a1 + 352)) < v30)
      return 0;
    v33 = *(float *)(a1 + 348);
    if (v33 > v31 || (float)(v33 + *(float *)(a1 + 356)) < v31)
      return 0;
  }
  v35 = floorf(v30 * 64.0);
  if (v35 >= 2147500000.0)
  {
    v36 = 0x7FFFFFFF;
  }
  else if (v35 <= -2147500000.0)
  {
    v36 = 0x80000000;
  }
  else
  {
    v36 = (int)v35;
  }
  v37 = floorf(v31 * 64.0);
  if (v37 >= 2147500000.0)
  {
    v38 = 0x7FFFFFFF;
  }
  else if (v37 <= -2147500000.0)
  {
    v38 = 0x80000000;
  }
  else
  {
    v38 = (int)v37;
  }
  v42.i32[0] = v36;
  v42.i32[1] = v38;
  v42.i64[1] = v36 & 0xFFFFFFC0 | ((unint64_t)((v38 & 0xFFFFFFC0) >> 6) << 38);
  v43 = 0x4000000040;
  v44 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v38, v36)), (float32x2_t)vdup_n_s32(0x3C800000u));
  *(float *)&v45 = (float)(int)(v36 & 0xFFFFFFC0) * 0.015625;
  *((float *)&v45 + 1) = (float)(int)(v38 & 0xFFFFFFC0) * 0.015625;
  *(float *)&v46 = *(float *)&v45 + 1.0;
  *((float *)&v46 + 1) = *((float *)&v45 + 1);
  v47 = *(float *)&v45 + 1.0;
  v48 = *((float *)&v45 + 1) + 1.0;
  v49 = *(float *)&v45;
  v50 = *((float *)&v45 + 1) + 1.0;
  v51 = 256;
  v41 = 0;
  if ((WebCore::RenderBlock::nodeAtPoint(a1, a2, a3, &v42, (const WebCore::LayoutPoint *)&v41, 4) & 1) != 0)
    return 1;
  v40 = 0;
  if ((WebCore::RenderBlock::nodeAtPoint(a1, a2, a3, &v42, (const WebCore::LayoutPoint *)&v40, 3) & 1) != 0)
    return 1;
  v39 = 0;
  return WebCore::RenderBlock::nodeAtPoint(a1, a2, a3, &v42, (const WebCore::LayoutPoint *)&v39, 2);
}

uint64_t WebCore::LegacyRenderSVGForeignObject::offsetFromContainer(WebCore::LegacyRenderSVGForeignObject *this, WebCore::RenderElement *a2, const WebCore::LayoutPoint *a3, BOOL *a4)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::LegacyRenderSVGHiddenContainer::operator new(uint64_t this)
{
  if (this == 216)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

int32x4_t WebCore::LegacyRenderSVGHiddenContainer::LegacyRenderSVGHiddenContainer(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, unint64_t a5)
{
  int32x4_t *v5;
  int32x4_t result;

  v5 = (int32x4_t *)WebCore::RenderElement::RenderElement(a1, a2, a3, a4, 0, (((a5 >> 3) & 3) << 11) | 0x2704);
  result = vdupq_n_s32(0x7FC00000u);
  v5[9].i64[0] = 0;
  v5[9].i64[1] = 0;
  v5[10] = result;
  v5[11].i64[0] = 0;
  v5[11].i64[1] = 0;
  v5[12] = result;
  v5[13].i16[0] = 256;
  v5[13].i8[2] = 0;
  v5->i64[0] = (uint64_t)off_1E344B068;
  return result;
}

uint64_t WebCore::LegacyRenderSVGHiddenContainer::layout(WebCore::LegacyRenderSVGHiddenContainer *this)
{
  uint64_t result;
  unsigned int v3;

  result = WebCore::SVGRenderSupport::layoutChildren((uint64_t)this, (WebCore::RenderElement *)((*((_DWORD *)this + 5) >> 3) & 1));
  v3 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v3;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v3 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::LegacyRenderSVGHiddenContainer::nodeAtFloatPoint()
{
  return 0;
}

void WebCore::LegacyRenderSVGImage::~LegacyRenderSVGImage(WebCore::LegacyRenderSVGImage *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::RenderElement::~RenderElement(this, a2);
}

{
  uint64_t v2;
  void *v3;

  WebCore::LegacyRenderSVGImage::~LegacyRenderSVGImage(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 240) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

void WebCore::LegacyRenderSVGImage::willBeDestroyed(WebCore::LegacyRenderSVGImage *this)
{
  const WebCore::RenderElement *v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 29) + 24))(*((_QWORD *)this + 29));
  WebCore::LegacyRenderSVGModelObject::willBeDestroyed(this, v2);
}

uint64_t WebCore::LegacyRenderSVGImage::updateImageViewport(WebCore::LegacyRenderSVGImage *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  float v15;
  int v16;
  int v17;
  void *v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  WTF::String *v35;
  __n128 v36;
  unsigned __int32 v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  WebCore::Document *v42;
  _QWORD *Attribute;
  uint64_t v44;
  WTF::String *v45;
  __n128 v46;
  WTF::StringImpl *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  float v64;
  float v65;
  BOOL v66;
  BOOL v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  WTF *v96;
  float v97;
  char v98;
  float v99;
  float v100;
  char v101;
  float v102;
  float v103;
  char v104;
  float v105;
  float v106;
  float v107;
  char v108;
  float v109;
  float v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  float v117;
  unsigned __int8 v118;
  char v119;
  char v120;
  float v121;
  unsigned __int8 v122;
  char v123;
  char v124;
  WTF::StringImpl *v125[5];
  float v126[4];
  int v127;
  _BYTE v128[9];

  v2 = *((float *)this + 50);
  v3 = *((float *)this + 51);
  v4 = *((float *)this + 52);
  v5 = *((float *)this + 53);
  v6 = *(_QWORD *)(*((_QWORD *)this + 29) + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = WebCore::CachedImage::imageSizeForRenderer(v7, 0, 0, *(float *)(*((_QWORD *)this + 13) + 184));
    v9 = v8;
    v10 = HIDWORD(v8);
  }
  else
  {
    v9 = 0;
    LODWORD(v10) = 0;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v11 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654A290);
  }
  if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19654A2B0);
  }
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v125, (const WebCore::SVGElement *)v11);
  v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v121 = 0.0;
  v124 = 0;
  v122 = *(_BYTE *)(v12 + 8);
  v13 = v122;
  v123 = *(_BYTE *)(v12 + 9);
  if (v122 - 2 >= 9)
  {
    if (v122 == 11)
    {
      v14 = (void *)*(unsigned int *)(v12 + 4);
      v121 = *(float *)(v12 + 4);
      WebCore::Length::ref((int *)&v121);
      v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      goto LABEL_10;
    }
    v14 = 0;
    v16 = 1;
    v15 = 0.0;
  }
  else
  {
    v124 = *(_BYTE *)(v12 + 10);
    if (!v124)
    {
      v14 = (void *)*(unsigned int *)(v12 + 4);
      v121 = *(float *)(v12 + 4);
LABEL_10:
      v15 = *(float *)&v14;
      v16 = 1;
      goto LABEL_14;
    }
    v16 = 0;
    v15 = *(float *)(v12 + 4);
    v121 = v15;
    v14 = (void *)LODWORD(v15);
  }
LABEL_14:
  v117 = 0.0;
  v120 = 0;
  v118 = *(_BYTE *)(v12 + 16);
  v17 = v118;
  v119 = *(_BYTE *)(v12 + 17);
  if (v118 - 2 >= 9)
  {
    if (v118 == 11)
    {
      v18 = (void *)*(unsigned int *)(v12 + 12);
      v117 = *(float *)(v12 + 12);
      WebCore::Length::ref((int *)&v117);
LABEL_17:
      v19 = *(float *)&v18;
      v20 = 1;
      if (!v13)
        goto LABEL_26;
LABEL_21:
      if (v13 == 4)
      {
        if (v16)
          v21 = (float)(int)v14;
        else
          v21 = v15;
      }
      else if (v13 == 11)
      {
        LODWORD(v97) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v125);
        if (!v98)
          v97 = 0.0;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v121, v97);
        v21 = v99;
      }
      else
      {
        v21 = 0.0;
        if (v13 == 3)
        {
          v22 = (float)SLODWORD(v15);
          if (!v16)
            v22 = v15;
          WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v125, 0, (uint64_t)v126, v22 / 100.0);
          if (v127 != -1)
          {
            if (!v127)
              v21 = v126[0];
            ((void (*)(_BYTE *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v127])(v128, v126);
          }
        }
      }
      goto LABEL_45;
    }
    v18 = 0;
    v20 = 1;
    v19 = 0.0;
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v120 = *(_BYTE *)(v12 + 18);
    if (!v120)
    {
      v18 = (void *)*(unsigned int *)(v12 + 12);
      v117 = *(float *)(v12 + 12);
      goto LABEL_17;
    }
    v20 = 0;
    v19 = *(float *)(v12 + 12);
    v117 = v19;
    v18 = (void *)LODWORD(v19);
    if (v13)
      goto LABEL_21;
  }
LABEL_26:
  if (v17 && v9 >= 1 && (int)v10 >= 1)
  {
    if (v17 == 4)
    {
      if (v20)
        v23 = (float)(int)v18;
      else
        v23 = v19;
    }
    else if (v17 == 11)
    {
      LODWORD(v107) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v125) >> 32;
      if (!v108)
        v107 = 0.0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v117, v107);
      v23 = v109;
    }
    else
    {
      v23 = 0.0;
      if (v17 == 3)
      {
        v110 = (float)SLODWORD(v19);
        if (!v20)
          v110 = v19;
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v125, 1, (uint64_t)v126, v110 / 100.0);
        if (v127 != -1)
        {
          if (!v127)
            v23 = v126[0];
          ((void (*)(_BYTE *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v127])(v128, v126);
        }
      }
    }
    v21 = (float)((float)((float)v9 * 0.015625) * v23) / (float)((float)(int)v10 * 0.015625);
  }
  else
  {
    v21 = (float)v9 * 0.015625;
  }
LABEL_45:
  v24 = 0.0;
  if (v17 > 2)
  {
    switch(v17)
    {
      case 4:
        if (v20)
          v24 = (float)(int)v18;
        else
          v24 = v19;
        break;
      case 11:
        LODWORD(v100) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v125) >> 32;
        if (!v101)
          v100 = 0.0;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v117, v100);
        v24 = v102;
        break;
      case 3:
        v25 = (float)SLODWORD(v19);
        if (!v20)
          v25 = v19;
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v125, 1, (uint64_t)v126, v25 / 100.0);
        if (v127 != -1)
        {
          if (!v127)
            v24 = v126[0];
          ((void (*)(_BYTE *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v127])(v128, v126);
        }
        break;
    }
  }
  else if (!v17)
  {
    if (v13 && v9 >= 1 && (int)v10 >= 1)
    {
      switch(v13)
      {
        case 4:
          if (v16)
            v24 = (float)(int)v14;
          else
            v24 = v15;
          break;
        case 11:
          LODWORD(v103) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v125);
          if (!v104)
            v103 = 0.0;
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v121, v103);
          v24 = v105;
          break;
        case 3:
          v106 = (float)SLODWORD(v15);
          if (!v16)
            v106 = v15;
          WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v125, 0, (uint64_t)v126, v106 / 100.0);
          if (v127 != -1)
          {
            if (!v127)
              v24 = v126[0];
            ((void (*)(_BYTE *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v127])(v128, v126);
          }
          break;
      }
      v24 = (float)((float)((float)(int)v10 * 0.015625) * v24) / (float)((float)v9 * 0.015625);
    }
    else
    {
      v24 = (float)(int)v10 * 0.015625;
    }
  }
  v26 = *(_QWORD *)(v11 + 232);
  v27 = *(_QWORD *)(v26 + 24);
  if (!v27 || !*(_DWORD *)(v27 - 12))
    goto LABEL_71;
  v86 = *(unsigned int *)(v27 - 4);
  if ((_DWORD)v86)
  {
    v87 = 8 * v86;
    v88 = *(uint64_t **)(v26 + 24);
    while ((unint64_t)(*v88 + 1) <= 1)
    {
      ++v88;
      v87 -= 8;
      if (!v87)
        goto LABEL_71;
    }
  }
  else
  {
    v88 = *(uint64_t **)(v26 + 24);
  }
  v111 = (uint64_t *)(v27 + 8 * v86);
  if (v88 == v111)
    goto LABEL_71;
  v112 = *v88;
LABEL_203:
  if (!*(_QWORD *)(v112 + 8))
  {
    while (++v88 != v111)
    {
      v112 = *v88;
      if ((unint64_t)(*v88 + 1) > 1)
      {
        if (v88 != v111)
          goto LABEL_203;
        break;
      }
    }
LABEL_71:
    v28 = v26 + 40;
    goto LABEL_72;
  }
  v28 = v26 + 48;
LABEL_72:
  v29 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v28 + 28), (const WebCore::SVGLengthContext *)v125);
  v30 = *(_QWORD *)(v11 + 240);
  v31 = *(_QWORD *)(v30 + 24);
  if (!v31 || !*(_DWORD *)(v31 - 12))
    goto LABEL_73;
  v89 = *(unsigned int *)(v31 - 4);
  if ((_DWORD)v89)
  {
    v90 = 8 * v89;
    v91 = *(uint64_t **)(v30 + 24);
    while ((unint64_t)(*v91 + 1) <= 1)
    {
      ++v91;
      v90 -= 8;
      if (!v90)
        goto LABEL_73;
    }
  }
  else
  {
    v91 = *(uint64_t **)(v30 + 24);
  }
  v113 = (uint64_t *)(v31 + 8 * v89);
  if (v91 == v113)
    goto LABEL_73;
  v114 = *v91;
LABEL_212:
  if (!*(_QWORD *)(v114 + 8))
  {
    while (++v91 != v113)
    {
      v114 = *v91;
      if ((unint64_t)(*v91 + 1) > 1)
      {
        if (v91 != v113)
          goto LABEL_212;
        break;
      }
    }
LABEL_73:
    v32 = v30 + 40;
    goto LABEL_74;
  }
  v32 = v30 + 48;
LABEL_74:
  v36.n128_f32[0] = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v32 + 28), (const WebCore::SVGLengthContext *)v125);
  v37 = v36.n128_u32[0];
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v18);
  }
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v14);
  }
  v38 = v125[0];
  v125[0] = 0;
  if (v38)
  {
    do
    {
      v39 = __ldaxr((unsigned int *)v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)v38));
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)v38);
      v95 = *((unsigned int *)v38 + 7);
      if ((_DWORD)v95)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v38 + 2), (WTF::StringImpl *)(*((_QWORD *)v38 + 2) + 32 * v95));
      v96 = (WTF *)*((_QWORD *)v38 + 2);
      if (v96)
      {
        *((_QWORD *)v38 + 2) = 0;
        *((_DWORD *)v38 + 6) = 0;
        WTF::fastFree(v96, v33);
      }
      WTF::fastFree(v38, v33);
      if (!v11)
        goto LABEL_82;
      goto LABEL_80;
    }
  }
  if (v11)
  {
LABEL_80:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v33);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
LABEL_82:
  *((float *)this + 50) = v29;
  *((_DWORD *)this + 51) = v37;
  *((float *)this + 52) = v21;
  *((float *)this + 53) = v24;
  v41 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v41 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654A2D0);
  }
  if (*(_QWORD *)(*(_QWORD *)(v41 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19654A318);
  }
  v42 = *(WebCore::Document **)(*(_QWORD *)(v41 + 40) + 8);
  Attribute = (_QWORD *)WebCore::Element::getAttribute(*(WebCore::Element **)(*((_QWORD *)this + 3) + 8), (const WebCore::QualifiedName *)&WebCore::SVGNames::hrefAttr, v34, v35, v36);
  if (!*Attribute)
    Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v41, (const WebCore::QualifiedName *)&WebCore::XLinkNames::hrefAttr, v44, v45, v46);
  WebCore::Document::completeURL(v42, Attribute, (uint64_t)v42 + 848, 0, (WTF::URL *)v125);
  v49 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v49 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654A338);
  }
  if (*(_QWORD *)(*(_QWORD *)(v49 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19654A358);
  }
  v50 = *(_QWORD *)(v49 + 264);
  v51 = *(_QWORD *)(v50 + 24);
  if (v51 && *(_DWORD *)(v51 - 12))
  {
    v92 = *(unsigned int *)(v51 - 4);
    if ((_DWORD)v92)
    {
      v93 = 8 * v92;
      v94 = *(uint64_t **)(v50 + 24);
      while ((unint64_t)(*v94 + 1) <= 1)
      {
        ++v94;
        v93 -= 8;
        if (!v93)
          goto LABEL_89;
      }
    }
    else
    {
      v94 = *(uint64_t **)(v50 + 24);
    }
    v115 = (uint64_t *)(v51 + 8 * v92);
    if (v94 != v115)
    {
      v116 = *v94;
LABEL_221:
      if (*(_QWORD *)(v116 + 8))
      {
        v52 = v50 + 48;
        goto LABEL_90;
      }
      while (++v94 != v115)
      {
        v116 = *v94;
        if ((unint64_t)(*v94 + 1) > 1)
        {
          if (v94 != v115)
            goto LABEL_221;
          break;
        }
      }
    }
  }
LABEL_89:
  v52 = v50 + 40;
LABEL_90:
  if (*(_BYTE *)(*(_QWORD *)v52 + 26) == 1
    && (v53 = *(_QWORD *)(*((_QWORD *)this + 29) + 24)) != 0
    && (v54 = *(_QWORD *)(v53 + 8)) != 0)
  {
    v55 = WebCore::CachedImage::imageSizeForRenderer(v54, 0, 0, *(float *)(*((_QWORD *)this + 13) + 184));
    v56 = v55;
    v57 = HIDWORD(v55);
    v58 = (*(uint64_t (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 29) + 80))(*((_QWORD *)this + 29), 0, *(float *)(*((_QWORD *)this + 13) + 184));
    v60 = 0;
    v61 = HIDWORD(v58);
    if (v56 != (_DWORD)v58 || (_DWORD)v57 != HIDWORD(v58))
    {
      v63 = *((_QWORD *)this + 29);
      *(_QWORD *)v126 = (((int)(v56 - (v61 & 0xFFFFFFC0) + 32) >> 6) + v56 / 64) | ((unint64_t)(((int)(v57 - (v59 & 0xFFFFFFC0) + 32) >> 6) + (int)v57 / 64) << 32);
      (*(void (**)(uint64_t, float *, WTF::StringImpl **))(*(_QWORD *)v63 + 48))(v63, v126, v125);
      v60 = 1;
    }
  }
  else
  {
    v60 = 0;
  }
  v64 = *((float *)this + 50);
  v65 = *((float *)this + 51);
  v66 = v2 == v64 && v3 == v65;
  if (!v66 || (v4 == *((float *)this + 52) ? (v67 = v5 == *((float *)this + 53)) : (v67 = 0), !v67))
  {
    if ((v60 & 1) == 0)
    {
      v68 = floorf(v64);
      v69 = 2147500000.0;
      if (v68 < 2147500000.0)
      {
        v69 = -2147500000.0;
        if (v68 > -2147500000.0)
          v69 = (float)(int)v68;
      }
      v70 = floorf(v65);
      v71 = 2147500000.0;
      if (v70 < 2147500000.0)
      {
        v71 = -2147500000.0;
        if (v70 > -2147500000.0)
          v71 = (float)(int)v70;
      }
      v72 = *((_QWORD *)this + 29);
      v73 = v65 + *((float *)this + 53);
      v74 = ceilf(v64 + *((float *)this + 52));
      v75 = 2147500000.0;
      if (v74 < 2147500000.0)
      {
        v75 = -2147500000.0;
        if (v74 > -2147500000.0)
          v75 = (float)(int)v74;
      }
      v76 = ceilf(v73);
      v77 = 2147500000.0;
      if (v76 < 2147500000.0)
      {
        v77 = -2147500000.0;
        if (v76 > -2147500000.0)
          v77 = (float)(int)v76;
      }
      v78 = v75 - v69;
      v79 = v77 - v71;
      v80 = 0x7FFFFFFFLL;
      v81 = 0x80000000;
      if (v78 > -2147500000.0)
        v81 = (int)v78;
      if (v78 < 2147500000.0)
        v80 = v81;
      v82 = 0x7FFFFFFF00000000;
      v48.n128_u64[0] = 0x4F0000004F000000;
      v83 = 0x8000000000000000;
      if (v79 > -2147500000.0)
        v83 = (unint64_t)(int)v79 << 32;
      if (v79 < 2147500000.0)
        v82 = v83;
      *(_QWORD *)v126 = v82 | v80;
      (*(void (**)(uint64_t, float *, WTF::StringImpl **, __n128))(*(_QWORD *)v72 + 48))(v72, v126, v125, v48);
    }
    *((_BYTE *)this + 144) |= 1u;
    v60 = 1;
  }
  v84 = v125[0];
  v125[0] = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, v47);
    else
      *(_DWORD *)v84 -= 2;
  }
  return v60;
}

uint64_t WebCore::LegacyRenderSVGImage::layout(WebCore::LegacyRenderSVGImage *this, const WebCore::RenderElement *a2)
{
  __int16 v3;
  WebCore::RenderElement *v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  unsigned int v14;
  __int128 v15[3];
  _BYTE v16[56];

  if ((*((_BYTE *)this + 20) & 8) != 0)
    v3 = WebCore::SVGRenderSupport::checkForSVGRepaintDuringLayout(this, a2) | 0x100;
  else
    v3 = 256;
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v16, this, v3, 0, 0);
  WebCore::LegacyRenderSVGImage::updateImageViewport(this);
  v5 = *((_BYTE *)this + 144);
  v6 = v5;
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v7 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19654A7E0);
    }
    if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
    {
      __break(0xC471u);
      goto LABEL_23;
    }
    WebCore::SVGGraphicsElement::animatedLocalTransform((WebCore::SVGPolyElement **)v7, v15);
    v8 = v15[1];
    *(_OWORD *)((char *)this + 152) = v15[0];
    *(_OWORD *)((char *)this + 168) = v8;
    *(_OWORD *)((char *)this + 184) = v15[2];
    v6 = *((_BYTE *)this + 144) & 0xFD;
    *((_BYTE *)this + 144) = v6;
  }
  v9 = v5 & 3;
  if ((v6 & 1) != 0)
  {
    *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)this + 200);
    WebCore::SVGRenderSupport::intersectRepaintRectWithResources((uint64_t)this, (float32x2_t *)this + 27, 0);
    *((_BYTE *)this + 144) &= ~1u;
  }
  if ((~*((_DWORD *)this + 5) & 0x208) == 0)
    WebCore::SVGResourcesCache::clientLayoutChanged(this, v4);
  if (v9)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        ++*(_DWORD *)(v11 + 16);
        WebCore::RenderObject::invalidateCachedBoundaries(v11);
        v12 = *(_DWORD *)(v11 + 16);
        if (v12)
        {
          *(_DWORD *)(v11 + 16) = v12 - 1;
          goto LABEL_17;
        }
        __break(0xC471u);
LABEL_23:
        JUMPOUT(0x19654A7C0);
      }
    }
  }
LABEL_17:
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v16);
  v14 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v14;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v14 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::LegacyRenderSVGImage::paint(WebCore::LegacyRenderSVGImage *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t result;
  const WebCore::PaintInfo *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  _OWORD *v27;
  _OWORD *v28;
  int8x16_t v29;
  __int128 v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  float v38[6];
  uint64_t v39;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
  if ((result & 1) == 0
    && *((_WORD *)a2 + 8) == 8
    && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
    && (*((_DWORD *)this + 30) & 0x30) != 0x10)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 29) + 24);
    if (v7)
    {
      if (*(_QWORD *)(v7 + 8))
      {
        *(_OWORD *)v38 = *(_OWORD *)((char *)this + 216);
        result = WebCore::SVGRenderSupport::paintInfoIntersectsRepaintRect((WebCore::SVGRenderSupport *)v38, (WebCore::LegacyRenderSVGImage *)((char *)this + 152), a2, v6);
        if ((_DWORD)result)
        {
          v8 = *((_OWORD *)a2 + 3);
          v34 = *((_OWORD *)a2 + 2);
          v35 = v8;
          v36 = *((_OWORD *)a2 + 4);
          v9 = *((_QWORD *)a2 + 10);
          v37 = v9;
          v10 = *((_OWORD *)a2 + 1);
          v32 = *(_OWORD *)a2;
          v33 = v10;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
          WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)&v32, (WebCore::LegacyRenderSVGImage *)((char *)this + 152));
          if ((unsigned __int16)v33 != 8)
            goto LABEL_19;
          v30 = 0u;
          memset(v31, 0, 21);
          v29 = 0u;
          WebCore::SVGRenderingContext::prepareToRenderSVGContent(&v29, this, (const WebCore::RenderElement *)&v32, 1);
          v11 = v31[1];
          if ((v31[1] & 1) != 0)
          {
            if ((*(_WORD *)(*((_QWORD *)this + 17) + 8) & 0x1800) == 0x1000
              && (WebCore::SVGRenderingContext::bufferForeground((WebCore::LegacyRenderSVGImage **)&v29, (uint64_t *)this + 30) & 1) != 0)
            {
              v12 = v31[1];
              if ((v31[1] & 0xE) == 0)
                return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
              if ((v31[1] & 8) != 0)
              {
                v39 = *(_QWORD *)(v29.i64[1] + 80);
                WebCore::LegacyRenderSVGResourceFilter::postApplyResource(*((uint64_t **)&v30 + 1), (WebCore::RenderElement *)v29.i64[0], &v39);
                v28 = (_OWORD *)v29.i64[1];
                *(_QWORD *)(v29.i64[1] + 80) = v30;
                *v28 = v31[0];
                v12 = v31[1];
                if ((v31[1] & 4) == 0)
                {
LABEL_15:
                  if ((v12 & 2) != 0)
LABEL_16:
                    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v29.i64[1] + 80) + 104))(*(_QWORD *)(v29.i64[1] + 80), 1);
                  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
                }
              }
              else if ((v31[1] & 4) == 0)
              {
                goto LABEL_15;
              }
              (*(void (**)(_QWORD))(**(_QWORD **)(v29.i64[1] + 80) + 608))(*(_QWORD *)(v29.i64[1] + 80));
              if ((v31[1] & 2) == 0)
                return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
              goto LABEL_16;
            }
            WebCore::LegacyRenderSVGImage::paintForeground(this, (WebCore::PaintInfo *)&v32);
            v11 = v31[1];
          }
          if ((v11 & 0xE) == 0)
          {
LABEL_19:
            v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
            v14 = *(unsigned __int8 *)(v13 + 52);
            if ((v14 & 0xF) != 0)
            {
              v15 = *(float *)(v13 + 48);
              if (((v15 < 3.0) & (v14 >> 4)) != 0 || v15 != 0.0)
              {
                if (v38[0] >= 2147500000.0)
                {
                  v16 = 0x7FFFFFFF;
                }
                else if (v38[0] <= -2147500000.0)
                {
                  v16 = 0x80000000;
                }
                else
                {
                  v16 = (int)v38[0];
                }
                if (v38[1] >= 2147500000.0)
                {
                  v17 = 0x7FFFFFFF;
                }
                else if (v38[1] <= -2147500000.0)
                {
                  v17 = 0x80000000;
                }
                else
                {
                  v17 = (int)v38[1];
                }
                if (v38[2] > -2147500000.0)
                  v18 = (int)v38[2];
                else
                  v18 = 0x80000000;
                if (v38[2] < 2147500000.0)
                  v19 = v18;
                else
                  v19 = 0x7FFFFFFF;
                if (v38[3] > -2147500000.0)
                  v20 = (int)v38[3];
                else
                  v20 = 0x80000000;
                if (v38[3] < 2147500000.0)
                  v21 = v20;
                else
                  v21 = 0x7FFFFFFF;
                v22.i64[0] = __PAIR64__(v17, v16);
                v22.i64[1] = __PAIR64__(v21, v19);
                v23.i64[0] = 0xFE000000FE000000;
                v23.i64[1] = 0xFE000000FE000000;
                v24 = (int8x16_t)vcgtq_s32(v22, v23);
                v25.i64[0] = 0xFE000000FE000000;
                v25.i64[1] = 0xFE000000FE000000;
                v26.i64[0] = 0x8000000080000000;
                v26.i64[1] = 0x8000000080000000;
                v29 = vorrq_s8((int8x16_t)(*(_OWORD *)&v24 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v25, v22), v26, (int8x16_t)vshlq_n_s32(v22, 6uLL)), v24));
                WebCore::RenderElement::paintOutline(this, (WebCore::PaintInfo *)&v32, (const WebCore::LayoutRect *)&v29);
              }
            }
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
          }
          if ((v11 & 8) != 0)
          {
            v39 = *(_QWORD *)(v29.i64[1] + 80);
            WebCore::LegacyRenderSVGResourceFilter::postApplyResource(*((uint64_t **)&v30 + 1), (WebCore::RenderElement *)v29.i64[0], &v39);
            v27 = (_OWORD *)v29.i64[1];
            *(_QWORD *)(v29.i64[1] + 80) = v30;
            *v27 = v31[0];
            v11 = v31[1];
            if ((v31[1] & 4) == 0)
            {
LABEL_24:
              if ((v11 & 2) == 0)
                goto LABEL_19;
LABEL_25:
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v29.i64[1] + 80) + 104))(*(_QWORD *)(v29.i64[1] + 80), 1);
              goto LABEL_19;
            }
          }
          else if ((v11 & 4) == 0)
          {
            goto LABEL_24;
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(v29.i64[1] + 80) + 608))(*(_QWORD *)(v29.i64[1] + 80));
          if ((v31[1] & 2) == 0)
            goto LABEL_19;
          goto LABEL_25;
        }
      }
    }
  }
  return result;
}

float WebCore::LegacyRenderSVGImage::repaintRectInLocalCoordinates(uint64_t a1)
{
  return *(float *)(a1 + 216);
}

_DWORD *WebCore::LegacyRenderSVGImage::paintForeground(WebCore::LegacyRenderSVGImage *this, WebCore::PaintInfo *a2)
{
  uint64_t v4;
  _DWORD *result;
  float v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v21;
  __int128 v22;
  _DWORD *v23;

  v4 = *((_QWORD *)this + 29);
  *(_QWORD *)&v22 = 0;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v4 + 32))(&v23, v4, &v22);
  result = v23;
  if (!v23)
    return result;
  v22 = *(_OWORD *)((char *)this + 200);
  v6 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v23 + 168))(v23, 0);
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v23 + 168))(v23, 0);
  v19 = 0;
  v20 = v6;
  v21 = v8;
  v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v9 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654AD34);
  }
  if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19654AD54);
  }
  v10 = *(_QWORD *)(v9 + 264);
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11 || !*(_DWORD *)(v11 - 12))
    goto LABEL_5;
  v14 = *(unsigned int *)(v11 - 4);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = *(uint64_t **)(v10 + 24);
    while ((unint64_t)(*v16 + 1) <= 1)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
        goto LABEL_5;
    }
  }
  else
  {
    v16 = *(uint64_t **)(v10 + 24);
  }
  v17 = (uint64_t *)(v11 + 8 * v14);
  if (v16 == v17)
    goto LABEL_5;
  v18 = *v16;
LABEL_22:
  if (!*(_QWORD *)(v18 + 8))
  {
    while (++v16 != v17)
    {
      v18 = *v16;
      if ((unint64_t)(*v16 + 1) > 1)
      {
        if (v16 != v17)
          goto LABEL_22;
        break;
      }
    }
LABEL_5:
    v12 = v10 + 40;
    goto LABEL_6;
  }
  v12 = v10 + 48;
LABEL_6:
  v13 = WebCore::SVGPreserveAspectRatioValue::transformRect((WebCore::SVGPreserveAspectRatioValue *)(*(_QWORD *)v12 + 26), (WebCore::FloatRect *)&v22, (WebCore::FloatRect *)&v19, v7);
  (*(void (**)(_QWORD, _DWORD *, __int128 *, uint64_t *, uint64_t, float))(**((_QWORD **)a2 + 10) + 360))(*((_QWORD *)a2 + 10), v23, &v22, &v19, 545, v13);
  result = v23;
  v23 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGImage::nodeAtFloatPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, float *a4, int a5)
{
  int *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int i;
  uint64_t v24;
  void *v26;
  WTF *v27;
  const WebCore::FloatPoint *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v36;
  BOOL v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v44;
  char v45;
  double v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  double v52;
  int v53;
  double v54;
  int v55;
  WebCore::ImageOverlay *v56;
  WebCore::Node *v57;
  float v58;
  unsigned int v59;
  float v60;
  uint64_t v61;
  void *v62;
  int v63;
  _QWORD *v64;
  _QWORD v66[2];
  double v67;
  double v68;
  uint64_t v69;
  float32x2_t v70;
  double v71;
  double v72;
  float v73;
  float v74;
  float v75;
  float v76;
  __int16 v77;
  float v78;
  float v79;

  if (a5 != 4)
    goto LABEL_78;
  v7 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
  if (*(_BYTE *)(v10 + 3441))
  {
    if (*(_QWORD *)(v10 + 1272) != v9)
      goto LABEL_95;
  }
  v11 = a1;
  if ((*(_BYTE *)(a1 + 45) & 2) != 0)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v11 + 104) + 239) & 1) != 0)
LABEL_95:
    v12 = 0;
  else
    v12 = (*(_DWORD *)(v11 + 124) >> 6) & 0xF;
  if ((*(_BYTE *)a2 & 0x40) != 0)
    v12 = 3;
  v13 = v12 > 0xA || v12 == 0;
  v14 = v12 > 0xA || (0x61Du >> v12) & 1;
  v15 = *((_BYTE *)a2 + 4) && (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0
      ? 1
      : (*(_DWORD *)(a1 + 120) >> 4) & 3;
  if (((v15 != 0) & ~v14) != 0)
    goto LABEL_78;
  if (byte_1ECE84AE1 == 1)
  {
    v16 = dword_1ECE84B00;
  }
  else
  {
    v16 = 0;
    *(_QWORD *)&dword_1ECE84B00 = 0;
    qword_1ECE84AF8 = 0;
    byte_1ECE84AE1 = 1;
  }
  dword_1ECE84B00 = v16 + 1;
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
  {
    if (*(_QWORD *)(v17 + 8) && qword_1ECE84AF8)
    {
      v18 = *(_DWORD *)(qword_1ECE84AF8 - 8);
      v19 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      for (i = 1; ; ++i)
      {
        v24 = *(_QWORD *)(qword_1ECE84AF8 + 8 * v22);
        if (!v24)
          break;
        if (v24 != -1 && v24 == v17)
          goto LABEL_78;
        v22 = (v22 + i) & v18;
      }
    }
    goto LABEL_33;
  }
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a1;
  v27 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v17;
  if (!v27)
  {
LABEL_33:
    ++*(_DWORD *)v17;
    goto LABEL_34;
  }
  if (*(_DWORD *)v27 != 1)
  {
    --*(_DWORD *)v27;
    goto LABEL_33;
  }
  WTF::fastFree(v27, v26);
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
    goto LABEL_33;
LABEL_34:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84AF8, (_QWORD *)a1, (uint64_t)&v67);
  v29 = *(double *)(a1 + 152);
  v30 = *(double *)(a1 + 160);
  v31 = *(double *)(a1 + 168);
  v32 = *(double *)(a1 + 176);
  v33 = v29 * v32 - v30 * v31;
  v34 = fabs(v33);
  if ((unint64_t)(*(_QWORD *)&v34 - 0x10000000000000) >> 53 > 0x3FE
    && (unint64_t)(*(_QWORD *)&v34 - 1) > 0xFFFFFFFFFFFFELL)
  {
    v45 = 0;
    LOBYTE(v67) = 0;
    v44 = (double *)&constinit_12;
    v39 = 1.0;
    v43 = 0.0;
    v42 = 0.0;
    v36 = 1.0;
  }
  else
  {
    v36 = 1.0;
    if (v29 == 1.0 && v30 == 0.0 && (v31 == 0.0 ? (v37 = v32 == 1.0) : (v37 = 0), v37))
    {
      v42 = -*(double *)(a1 + 184);
      v43 = -*(double *)(a1 + 192);
      v68 = 0.0;
      v69 = 0;
      v39 = 1.0;
    }
    else
    {
      v36 = v32 / v33;
      *(double *)&v38 = -v31 / v33;
      v39 = v29 / v33;
      v41 = *(double *)(a1 + 184);
      v40 = *(double *)(a1 + 192);
      v42 = (v31 * v40 - v32 * v41) / v33;
      v68 = -v30 / v33;
      v69 = v38;
      v43 = (v30 * v41 - v29 * v40) / v33;
    }
    v67 = v36;
    v70 = *(float32x2_t *)&v39;
    v71 = v42;
    v44 = &v67;
    v45 = 1;
    v72 = v43;
  }
  LOBYTE(v73) = v45;
  v46 = *a4;
  v47 = a4[1];
  v48 = v42 + v44[2] * v47 + v36 * v46;
  v49 = v43 + v39 * v47 + v44[1] * v46;
  v78 = v48;
  v79 = v49;
  if (WebCore::SVGRenderSupport::pointInClippingArea((WebCore::SVGRenderSupport *)a1, (const WebCore::RenderElement *)&v78, v28))
  {
    if (v13)
      goto LABEL_70;
    v50 = *(float *)(a1 + 200);
    if (v50 > v78)
      goto LABEL_70;
    if ((float)(v50 + *(float *)(a1 + 208)) < v78)
      goto LABEL_70;
    v51 = *(float *)(a1 + 204);
    if (v51 > v79 || (float)(v51 + *(float *)(a1 + 212)) < v79)
      goto LABEL_70;
    v52 = v78 * 64.0;
    if (v52 >= 2147483650.0)
    {
      v53 = 0x7FFFFFFF;
    }
    else if (v52 <= -2147483650.0)
    {
      v53 = 0x80000000;
    }
    else
    {
      v53 = (int)v52;
    }
    LODWORD(v67) = v53;
    v54 = v79 * 64.0;
    if (v54 >= 2147483650.0)
    {
      v55 = 0x7FFFFFFF;
    }
    else if (v54 <= -2147483650.0)
    {
      v55 = 0x80000000;
    }
    else
    {
      v55 = (int)v54;
    }
    HIDWORD(v67) = v55;
    WebCore::RenderObject::updateHitTestResult((unsigned int *)a1, a3, (const WebCore::LayoutPoint *)&v67);
    v56 = (WebCore::ImageOverlay *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
    v57 = v56;
    if (v56)
      *((_DWORD *)v56 + 6) += 2;
    v58 = floorf(v78 * 64.0);
    if (v58 >= 2147500000.0)
    {
      v59 = 0x7FFFFFFF;
    }
    else if (v58 <= -2147500000.0)
    {
      v59 = 0x80000000;
    }
    else
    {
      v59 = (int)v58;
    }
    v60 = floorf(v79 * 64.0);
    if (v60 >= 2147500000.0)
    {
      v61 = 0x7FFFFFFFLL;
    }
    else if (v60 <= -2147500000.0)
    {
      v61 = 0x80000000;
    }
    else
    {
      v61 = (int)v60;
    }
    *(_QWORD *)&v67 = v59 | (unint64_t)(v61 << 32);
    *(_QWORD *)&v68 = v59 & 0xFFFFFFC0 | ((unint64_t)((v61 & 0xFFFFFFC0) >> 6) << 38);
    v69 = 0x4000000040;
    v70 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v61, v59)), (float32x2_t)vdup_n_s32(0x3C800000u));
    *(float *)&v71 = (float)(int)(v59 & 0xFFFFFFC0) * 0.015625;
    *((float *)&v71 + 1) = (float)(v61 & 0xFFFFFFC0) * 0.015625;
    *(float *)&v72 = *(float *)&v71 + 1.0;
    *((float *)&v72 + 1) = *((float *)&v71 + 1);
    v73 = *(float *)&v71 + 1.0;
    v74 = *((float *)&v71 + 1) + 1.0;
    v75 = *(float *)&v71;
    v76 = *((float *)&v71 + 1) + 1.0;
    v77 = 256;
    v66[0] = 0;
    v66[1] = 0;
    LODWORD(v7) = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v56, v7, (uint64_t)&v67, (WebCore::LayoutRect *)v66);
    if (v57)
    {
      if (*((_DWORD *)v57 + 6) == 2)
      {
        if ((*((_WORD *)v57 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v57, v62);
      }
      else
      {
        *((_DWORD *)v57 + 6) -= 2;
      }
    }
    if ((_DWORD)v7)
    {
LABEL_70:
      v63 = 1;
      if (!v17)
        goto LABEL_77;
    }
    else
    {
      v63 = 0;
      LOBYTE(v7) = 1;
      if (!v17)
        goto LABEL_77;
    }
  }
  else
  {
    LOBYTE(v7) = 0;
    v63 = 0;
    if (!v17)
      goto LABEL_77;
  }
  v64 = *(_QWORD **)(v17 + 8);
  if (v64)
    WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84AF8, v64);
  if (*(_DWORD *)v17 == 1)
    WTF::fastFree((WTF *)v17, v64);
  else
    --*(_DWORD *)v17;
LABEL_77:
  if (v63)
LABEL_78:
    LOBYTE(v7) = 0;
  return v7 & 1;
}

uint64_t WebCore::LegacyRenderSVGImage::localToParentTransform(WebCore::LegacyRenderSVGImage *this)
{
  return (uint64_t)this + 152;
}

void WebCore::LegacyRenderSVGImage::imageChanged(WebCore::LegacyRenderSVGImage *this, const WebCore::RenderElement *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;
  void *v11;
  int v12;
  WebCore::RenderElement *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  _BYTE v25[20];
  __int128 v26;
  char v27;

  v3 = *((_QWORD *)this + 4);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v5 = (_QWORD *)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
    if (v5)
      WebCore::SVGResources::removeClientFromCache(v5, this, 1);
    v26 = 0uLL;
    WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded((uint64_t)this, 0, (uint64_t)&v26);
    v7 = v26;
    if ((_QWORD)v26)
    {
      v8 = *(unsigned int *)(v26 - 4);
      if ((_DWORD)v8)
      {
        v9 = (WTF **)v26;
        do
        {
          v10 = *v9;
          if (*v9 != (WTF *)-1)
          {
            *v9 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 1)
                WTF::fastFree(v10, v6);
              else
                --*(_DWORD *)v10;
            }
          }
          ++v9;
          --v8;
        }
        while (v8);
      }
      WTF::fastFree((WTF *)(v7 - 16), v6);
    }
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 26) = 0;
    if (WebCore::LegacyRenderSVGImage::updateImageViewport(this))
    {
      v12 = *((_DWORD *)this + 5);
      if ((v12 & 8) == 0)
      {
        *((_DWORD *)this + 5) = v12 | 8;
        v13 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
        WebCore::RenderObject::scheduleLayout(this, v13);
        if ((*((_BYTE *)this + 21) & 0x80) != 0)
        {
          if ((*((_BYTE *)this + 45) & 0x10) == 0
            || ((v14 = *((_QWORD *)this + 18)) == 0
              ? (v15 = MEMORY[8])
              : (v15 = *(_DWORD *)(v14 + 8) + 1, *(_DWORD *)(v14 + 8) = v15),
                *(_QWORD *)(v14 + 24) = *(_QWORD *)(v14 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
                !v15))
          {
            __break(0xC471u);
            JUMPOUT(0x19654B60CLL);
          }
          *(_DWORD *)(v14 + 8) = v15 - 1;
        }
      }
    }
    v16 = *((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = 0;
    if (!v16)
      goto LABEL_41;
    v17 = *(_QWORD *)(v16 + 8);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_29;
    }
    MEMORY[0x19AEA534C](v17);
LABEL_29:
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v17 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v24 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v22 = v24 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (!v20)
          goto LABEL_37;
        goto LABEL_41;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (!v20)
    {
LABEL_37:
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (!v22)
        WTF::fastFree((WTF *)v17, v11);
    }
LABEL_41:
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v26) = 0;
      v27 = 0;
      v25[0] = 0;
      v25[16] = 0;
      WebCore::RenderObject::issueRepaint((uint64_t)this, &v26, 0, 0, (uint64_t)v25);
    }
  }
}

uint64_t WebCore::LegacyRenderSVGImage::addFocusRingRects(uint64_t result, uint64_t a2)
{
  float v3;
  float v4;
  double v5;
  int v6;
  int v7;
  double v8;
  int v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = *(float *)(result + 224);
  v4 = *(float *)(result + 228);
  v5 = *(float *)(result + 216) * 64.0;
  if (v5 > -2147483650.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 < 2147483650.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  v8 = *(float *)(result + 220) * 64.0;
  if (v8 > -2147483650.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 >= 2147483650.0)
    v9 = 0x7FFFFFFF;
  *(_QWORD *)&v18 = __PAIR64__(v9, v7);
  v10 = v3 * 64.0;
  if (v10 > -2147483650.0)
    v11 = (int)v10;
  else
    v11 = 0x80000000;
  if (v10 < 2147483650.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF;
  DWORD2(v18) = v12;
  v13 = v4 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 0x7FFFFFFF;
  }
  else
  {
    if (v13 <= -2147483650.0)
      return result;
    v14 = (int)v13;
  }
  HIDWORD(v18) = v14;
  if (v12 >= 1 && v14 >= 1)
  {
    v15 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v15 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v15 + 1, (unint64_t)&v18);
      v15 = *(unsigned int *)(a2 + 12);
      v16 = *(_QWORD *)a2;
      v17 = *(_OWORD *)result;
    }
    else
    {
      v16 = *(_QWORD *)a2;
      v17 = v18;
    }
    *(_OWORD *)(v16 + 16 * v15) = v17;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

void WebCore::LegacyRenderSVGHiddenContainer::~LegacyRenderSVGHiddenContainer(WebCore::LegacyRenderSVGHiddenContainer *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderElement::~RenderElement(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 208) = 0;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

const char *WebCore::LegacyRenderSVGHiddenContainer::renderName(WebCore::LegacyRenderSVGHiddenContainer *this)
{
  return "RenderSVGHiddenContainer";
}

uint64_t WebCore::LegacyRenderSVGContainer::canHaveChildren(WebCore::LegacyRenderSVGContainer *this)
{
  return 1;
}

uint64_t WebCore::LegacyRenderSVGContainer::setNeedsBoundariesUpdate(uint64_t this)
{
  *(_BYTE *)(this + 209) = 1;
  return this;
}

float WebCore::LegacyRenderSVGContainer::objectBoundingBox(WebCore::LegacyRenderSVGContainer *this)
{
  return *((float *)this + 36);
}

uint64_t WebCore::LegacyRenderSVGHiddenContainer::clippedOverflowRect()
{
  return 0;
}

uint64_t WebCore::LegacyRenderSVGContainer::didTransformToRootUpdate(WebCore::LegacyRenderSVGContainer *this)
{
  return 0;
}

uint64_t WebCore::LegacyRenderSVGContainer::calculateLocalTransform(WebCore::LegacyRenderSVGContainer *this)
{
  return 0;
}

uint64_t WebCore::LegacyRenderSVGContainer::pointIsInsideViewportClip(WebCore::LegacyRenderSVGContainer *this, const WebCore::FloatPoint *a2)
{
  return 1;
}

const char *WebCore::LegacyRenderSVGContainer::renderName(WebCore::LegacyRenderSVGContainer *this)
{
  return "RenderSVGContainer";
}

const char *WebCore::LegacyRenderSVGEllipse::renderName(WebCore::LegacyRenderSVGEllipse *this)
{
  return "RenderSVGEllipse";
}

uint64_t WebCore::LegacyRenderSVGShape::canHaveChildren(WebCore::LegacyRenderSVGShape *this)
{
  return 0;
}

uint64_t WebCore::LegacyRenderSVGShape::setNeedsBoundariesUpdate(uint64_t this)
{
  *(_BYTE *)(this + 208) |= 1u;
  return this;
}

uint64_t WebCore::LegacyRenderSVGShape::setNeedsTransformUpdate(uint64_t this)
{
  *(_BYTE *)(this + 208) |= 4u;
  return this;
}

float WebCore::LegacyRenderSVGShape::objectBoundingBox(WebCore::LegacyRenderSVGShape *this)
{
  return *((float *)this + 36);
}

__n128 WebCore::LegacyRenderSVGShape::localTransform@<Q0>(WebCore::LegacyRenderSVGShape *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)((char *)this + 248);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t WebCore::LegacyRenderSVGShape::localToParentTransform(WebCore::LegacyRenderSVGShape *this)
{
  return (uint64_t)this + 216;
}

uint64_t WebCore::LegacyRenderSVGEllipse::isEmpty(WebCore::LegacyRenderSVGEllipse *this)
{
  if (*((_QWORD *)this + 33))
    return WebCore::LegacyRenderSVGShape::isEmpty(this);
  if (*((float *)this + 38) <= 0.0)
    return 1;
  return *((float *)this + 39) <= 0.0;
}

const char *WebCore::LegacyRenderSVGForeignObject::renderName(WebCore::LegacyRenderSVGForeignObject *this)
{
  return "RenderSVGForeignObject";
}

uint64_t WebCore::LegacyRenderSVGForeignObject::setNeedsTransformUpdate(uint64_t this)
{
  *(_BYTE *)(this + 360) = 1;
  return this;
}

float WebCore::LegacyRenderSVGForeignObject::objectBoundingBox(WebCore::LegacyRenderSVGForeignObject *this)
{
  return 0.0;
}

float WebCore::LegacyRenderSVGForeignObject::strokeBoundingBox(WebCore::LegacyRenderSVGForeignObject *this)
{
  return 0.0;
}

float WebCore::LegacyRenderSVGForeignObject::repaintRectInLocalCoordinates()
{
  return 0.0;
}

uint64_t WebCore::LegacyRenderSVGForeignObject::requiresLayer(WebCore::LegacyRenderSVGForeignObject *this)
{
  return 0;
}

const char *WebCore::LegacyRenderSVGImage::renderName(WebCore::LegacyRenderSVGImage *this)
{
  return "RenderSVGImage";
}

uint64_t WebCore::LegacyRenderSVGImage::canHaveChildren(WebCore::LegacyRenderSVGImage *this)
{
  return 0;
}

uint64_t WebCore::LegacyRenderSVGImage::setNeedsBoundariesUpdate(uint64_t this)
{
  *(_BYTE *)(this + 144) |= 1u;
  return this;
}

uint64_t WebCore::LegacyRenderSVGImage::setNeedsTransformUpdate(uint64_t this)
{
  *(_BYTE *)(this + 144) |= 2u;
  return this;
}

float WebCore::LegacyRenderSVGImage::objectBoundingBox(WebCore::LegacyRenderSVGImage *this)
{
  return *((float *)this + 50);
}

float WebCore::LegacyRenderSVGImage::strokeBoundingBox(WebCore::LegacyRenderSVGImage *this)
{
  return *((float *)this + 50);
}

__n128 WebCore::LegacyRenderSVGImage::localTransform@<Q0>(WebCore::LegacyRenderSVGImage *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)((char *)this + 184);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

unsigned int *WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 40 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          v7[2] = *((_DWORD *)v9 + 2);
          *(_QWORD *)v7 = v10;
          *((_BYTE *)v7 + 16) = *((_BYTE *)v9 + 16);
          v11 = *((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          *((_QWORD *)v7 + 3) = v11;
          v12 = *((_QWORD *)v9 + 4);
          *((_QWORD *)v9 + 4) = 0;
          *((_QWORD *)v7 + 4) = v12;
          v13 = (WTF::StringImpl *)*((_QWORD *)v9 + 4);
          *((_QWORD *)v9 + 4) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v6);
            else
              *(_DWORD *)v13 -= 2;
          }
          result = (unsigned int *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 40);
          v7 += 10;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGTextMetrics>(unsigned int *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * a1[3];
  v5 = *(_QWORD *)result;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 8);
  *(_QWORD *)v4 = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(result + 16);
  v6 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(v4 + 24) = v6;
  v7 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(v4 + 32) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 40 * (unint64_t)a1[3] > a3)
  {
    v8 = a3 - v4;
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::SVGTextMetrics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WebCore::LegacyRenderSVGModelObject::clippedOverflowRect(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  float v15;
  int v16;
  uint64_t v17;
  float v19;
  int v20;
  uint64_t v21;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD v29[4];
  uint64_t v30;
  char v31;

  v5 = *(unsigned __int8 *)(a1 + 46);
  if (v5 != 83)
  {
    if ((*(_BYTE *)(a1 + 52) & 7) != 4)
    {
      v6 = v5 - 67;
      v7 = v6 > 0x13;
      v8 = 1 << v6;
      v9 = 917521;
      goto LABEL_4;
    }
    if (v5 != 85 && (*(_BYTE *)(a1 + 53) & 1) != 0)
    {
      v25 = v5 - 67;
      v7 = v25 > 0x13;
      v8 = 1 << v25;
      v9 = 655377;
LABEL_4:
      v10 = v8 & v9;
      if (v7 || v10 == 0)
        goto LABEL_9;
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v27 = a1;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v27 = a1;
      do
        v27 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8);
      while ((*(_BYTE *)(v27 + 45) & 0x10) == 0);
    }
    while ((*(_BYTE *)(v27 + 21) & 0x80) == 0)
    {
      do
        v27 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8);
      while ((*(_BYTE *)(v27 + 45) & 0x10) == 0);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v27 + 144) + 224);
    if (v28)
    {
      if (*(_QWORD *)(v28 + 8))
        return 0;
    }
  }
LABEL_9:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0 || (*(_BYTE *)(a1 + 120) & 0x30) != 0)
  {
    v26 = a1;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v26 = a1;
      do
        v26 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8);
      while ((*(_BYTE *)(v26 + 45) & 0x10) == 0);
    }
    while ((*(_BYTE *)(v26 + 21) & 0x80) == 0)
    {
      do
        v26 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8);
      while ((*(_BYTE *)(v26 + 45) & 0x10) == 0);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v26 + 144) + 26) & 8) == 0)
      return 0;
  }
  v29[0] = (*(float (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 256))(a1, (a3 >> 36) & 1);
  v29[1] = v12;
  v29[2] = v13;
  v29[3] = v14;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(&v30, a1, v29, a2, 0xC00000000);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x19654BEC4);
  }
  v15 = floorf(*(float *)&v30 * 64.0);
  if (v15 > -2147500000.0)
    v16 = (int)v15;
  else
    v16 = 0x80000000;
  if (v15 < 2147500000.0)
    LODWORD(v17) = v16;
  else
    LODWORD(v17) = 0x7FFFFFFF;
  if (v15 >= 2147500000.0 || v15 <= -2147500000.0)
    v17 = v17;
  else
    v17 = (int)v15;
  v19 = floorf(*((float *)&v30 + 1) * 64.0);
  if (v19 > -2147500000.0)
    v20 = (int)v19;
  else
    v20 = 0x80000000;
  if (v19 < 2147500000.0)
    LODWORD(v21) = v20;
  else
    LODWORD(v21) = 0x7FFFFFFF;
  if (v19 >= 2147500000.0 || v19 <= -2147500000.0)
    v21 = v21;
  else
    v21 = (int)v19;
  return v17 | (v21 << 32);
}

unint64_t WebCore::LegacyRenderSVGModelObject::rectsForRepaintingAfterLayout@<X0>(WebCore::LegacyRenderSVGModelObject *a1@<X0>, const WebCore::RenderLayerModelObject *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t result;
  const WebCore::RenderGeometryMap *v9;
  uint64_t v10;
  uint64_t v11;

  result = (*(uint64_t (**)(WebCore::LegacyRenderSVGModelObject *, const WebCore::RenderLayerModelObject *, uint64_t))(*(_QWORD *)a1 + 440))(a1, a2, 0xC00000000);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  if (a3)
  {
    result = WebCore::LegacyRenderSVGModelObject::outlineBoundsForRepaint(a1, a2, v9);
    *(_QWORD *)(a4 + 16) = result;
    *(_QWORD *)(a4 + 24) = v11;
    *(_BYTE *)(a4 + 32) = 1;
  }
  return result;
}

unint64_t WebCore::LegacyRenderSVGModelObject::outlineBoundsForRepaint(WebCore::LegacyRenderSVGModelObject *this, const WebCore::RenderLayerModelObject *a2, const WebCore::RenderGeometryMap *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  unsigned int v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::LegacyRenderSVGModelObject *v22;
  WebCore::ShadowData *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  double v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  signed int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double v66;
  int v67;
  float v68;
  double v69;
  int v70;
  float v71;
  double v72;
  int v73;
  double v74;
  int v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  int v81;
  double v82;
  float v83;
  uint64_t v84;
  double v85;
  unint64_t v86;
  WTF *v88;
  void *v89;
  BOOL v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  int v96;
  float v97;
  float v98;
  float v99;
  float v100;
  __int128 v101;
  float v102;
  float v103;
  float v104;
  float v105;

  v5 = (*(float (**)(WebCore::LegacyRenderSVGModelObject *, _QWORD, const WebCore::RenderGeometryMap *))(*(_QWORD *)this + 256))(this, 0, a3);
  v9 = floorf(v5 * 64.0);
  if (v9 >= 2147500000.0)
  {
    v10 = 0x7FFFFFFF;
  }
  else if (v9 > -2147500000.0)
  {
    v10 = (int)v9;
  }
  else
  {
    v10 = 0x80000000;
  }
  v11 = floorf(v6 * 64.0);
  if (v11 >= 2147500000.0)
  {
    v12 = 0x7FFFFFFFLL;
  }
  else if (v11 <= -2147500000.0)
  {
    v12 = 0x80000000;
  }
  else
  {
    v12 = (int)v11;
  }
  v13 = v5 + v7;
  v14 = v6 + v8;
  v15 = ceilf(v13 * 64.0);
  if (v15 >= 2147500000.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v15 <= -2147500000.0)
  {
    v16 = 0x80000000;
  }
  else
  {
    v16 = (int)v15;
  }
  v17 = ceilf(v14 * 64.0);
  if (v17 >= 2147500000.0)
  {
    v18 = 0x7FFFFFFF;
  }
  else if (v17 <= -2147500000.0)
  {
    v18 = 0x80000000;
  }
  else
  {
    v18 = (int)v17;
  }
  v19 = v16 - v10;
  if (__OFSUB__(v16, v10))
    v19 = (v16 >> 31) + 0x7FFFFFFF;
  v20 = v18 - v12;
  if (__OFSUB__(v18, (_DWORD)v12))
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  v21 = v19 | (unint64_t)(v20 << 32);
  v22 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v22 = *(WebCore::LegacyRenderSVGModelObject **)(*((_QWORD *)this + 4) + 8);
  v23 = *(WebCore::ShadowData **)(*(_QWORD *)(*((_QWORD *)v22 + 11) + 32) + 88);
  v24 = v19 | (unint64_t)(v20 << 32);
  v25 = v10;
  v26 = v12;
  if (v23)
  {
    v27 = WebCore::ShadowData::shadowOutsetExtent(v23);
    v25 = v10 + v29;
    if (__OFADD__(v10, v29))
      v25 = (v10 >> 31) + 0x7FFFFFFF;
    v26 = (v12 + v27);
    if (__OFADD__((_DWORD)v12, (_DWORD)v27))
      v26 = (v12 >> 31) + 0x7FFFFFFF;
    v30 = v19 - v29;
    if (__OFSUB__(v19, v29))
      v30 = (v19 >> 31) + 0x7FFFFFFF;
    v31 = v30 + HIDWORD(v27);
    if (__OFADD__(v30, HIDWORD(v27)))
      v31 = (v30 >> 31) + 0x7FFFFFFF;
    v32 = v31;
    v33 = v20 - v27;
    if (__OFSUB__((_DWORD)v20, (_DWORD)v27))
      v33 = (v20 >> 31) + 0x7FFFFFFF;
    v34 = v33 + v28;
    if (__OFADD__(v33, v28))
      v34 = (v33 >> 31) + 0x7FFFFFFF;
    v24 = v32 | (v34 << 32);
  }
  v35 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::LegacyRenderSVGModelObject *))(*(_QWORD *)this
                                                                                                 + 424))(this)
                              + 8)
                  + 16);
  if ((*(_BYTE *)(v35 + 52) & 0xF) != 0)
  {
    v37 = *(float *)(v35 + 48);
    v36 = *(float *)(v35 + 56);
    if ((*(_BYTE *)(v35 + 52) & 0x10) == 0)
      goto LABEL_36;
    v90 = v37 < 3.0;
    v91 = v37 + -3.0;
    if (v37 < 3.0)
      v37 = 3.0;
    v92 = 0.0;
    if (!v90)
      v92 = v91;
  }
  else
  {
    v36 = *(float *)(v35 + 56);
    v37 = 0.0;
    if ((*(_BYTE *)(v35 + 52) & 0x10) == 0)
      goto LABEL_36;
    v92 = -3.0;
  }
  if (v92 < 0.0)
    v92 = 0.0;
  v36 = v36 + v92;
LABEL_36:
  v38 = fmaxf(v37 + v36, 0.0) * 64.0;
  if (v38 >= 2147483650.0)
  {
    v39 = 0x7FFFFFFF;
  }
  else if (v38 <= -2147483650.0)
  {
    v39 = 0x80000000;
  }
  else
  {
    v39 = (int)v38;
    if (!(int)v38)
      goto LABEL_52;
  }
  if (__OFSUB__(v10, v39))
    v10 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v10 -= v39;
  v40 = v19 + v39;
  if (__OFADD__(v19, v39))
    v40 = (v19 >> 31) + 0x7FFFFFFF;
  v41 = v40 + v39;
  if (__OFADD__(v40, v39))
    v41 = (v40 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__((_DWORD)v12, v39))
    v12 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v12 = (v12 - v39);
  v42 = v20 + v39;
  if (__OFADD__((_DWORD)v20, v39))
    v42 = (v20 >> 31) + 0x7FFFFFFF;
  v43 = __OFADD__(v42, v39);
  v44 = v42 + v39;
  if (v43)
    v44 = (v42 >> 31) + 0x7FFFFFFF;
  v21 = v41 | (unint64_t)(v44 << 32);
LABEL_52:
  v45 = v25 | (unint64_t)(v26 << 32);
  if ((int)v21 < 1 || SHIDWORD(v21) < 1)
  {
    v21 = v24;
  }
  else if ((int)v24 < 1 || v24 <= 0)
  {
    v45 = v10 | (unint64_t)(v12 << 32);
  }
  else
  {
    if ((int)v10 >= (int)v25)
      v46 = v25;
    else
      v46 = v10;
    if ((int)v12 >= (int)v26)
      v47 = v26;
    else
      v47 = v12;
    v48 = v25 + v24;
    if (__OFADD__(v25, (_DWORD)v24))
      v48 = (v25 >> 31) + 0x7FFFFFFF;
    v49 = v10 + v21;
    if (__OFADD__(v10, (_DWORD)v21))
      v49 = (v10 >> 31) + 0x7FFFFFFF;
    if (v48 <= v49)
      v48 = v49;
    v50 = v26 + HIDWORD(v24);
    if (__OFADD__((_DWORD)v26, HIDWORD(v24)))
      v50 = (v26 >> 31) + 0x7FFFFFFF;
    v51 = v12 + HIDWORD(v21);
    if (__OFADD__((_DWORD)v12, HIDWORD(v21)))
      v51 = (v12 >> 31) + 0x7FFFFFFF;
    if (v50 > (int)v51)
      v51 = v50;
    v52 = v48 - v46;
    if (__OFSUB__(v48, (_DWORD)v46))
      v52 = (v48 >> 31) + 0x7FFFFFFF;
    v45 = v46 | (v47 << 32);
    v43 = __OFSUB__(v51, (_DWORD)v47);
    v53 = v51 - v47;
    if (v43)
      v53 = (v51 >> 31) + 0x7FFFFFFF;
    v21 = v52 | (unint64_t)(v53 << 32);
  }
  v93 = (float)(int)v45 * 0.015625;
  v94 = (float)SHIDWORD(v45) * 0.015625;
  v95 = v93 + (float)((float)(int)v21 * 0.015625);
  *(float *)&v96 = v94;
  v97 = v95;
  v98 = v94 + (float)((float)SHIDWORD(v21) * 0.015625);
  v99 = v93;
  v100 = v98;
  WebCore::RenderObject::localToContainerQuad((uint64_t)this, &v93, (uint64_t)a2, 2u, &v101);
  v54 = *(float *)&v101;
  v55 = v102;
  if (v104 >= v102)
    v56 = v102;
  else
    v56 = v104;
  if (*((float *)&v101 + 2) >= *(float *)&v101)
    v57 = *(float *)&v101;
  else
    v57 = *((float *)&v101 + 2);
  if (v56 >= v57)
    v56 = v57;
  v58 = fabsf(v56);
  if (v58 == INFINITY || v58 > 2147500000.0)
    v56 = (float)((SLODWORD(v56) >> 31) ^ 0x7FFFFFFF);
  if (v105 >= v103)
    v59 = v103;
  else
    v59 = v105;
  if (*((float *)&v101 + 3) >= *((float *)&v101 + 1))
    v60 = *((float *)&v101 + 1);
  else
    v60 = *((float *)&v101 + 3);
  if (v59 >= v60)
    v59 = v60;
  v61 = fabsf(v59);
  if (v61 == INFINITY || v61 > 2147500000.0)
    v59 = (float)((SLODWORD(v59) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v101 < *((float *)&v101 + 2))
    v54 = *((float *)&v101 + 2);
  if (v102 < v104)
    v55 = v104;
  if (v54 >= v55)
    v55 = v54;
  v62 = fabsf(v55);
  if (v62 == INFINITY || v62 > 2147500000.0)
    v55 = (float)((SLODWORD(v55) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v101 + 1) >= *((float *)&v101 + 3))
    v63 = *((float *)&v101 + 1);
  else
    v63 = *((float *)&v101 + 3);
  if (v103 >= v105)
    v64 = v103;
  else
    v64 = v105;
  if (v63 < v64)
    v63 = v64;
  v65 = fabsf(v63);
  if (v65 == INFINITY || v65 > 2147500000.0)
    v63 = (float)((SLODWORD(v63) >> 31) ^ 0x7FFFFFFF);
  v66 = v56 * 64.0;
  if (v66 >= 2147483650.0)
  {
    *(float *)&v67 = NAN;
  }
  else if (v66 <= -2147483650.0)
  {
    *(float *)&v67 = -0.0;
  }
  else
  {
    v67 = (int)v66;
  }
  v68 = v55 - v56;
  v93 = *(float *)&v67;
  v69 = v59 * 64.0;
  if (v69 >= 2147483650.0)
  {
    *(float *)&v70 = NAN;
  }
  else if (v69 <= -2147483650.0)
  {
    *(float *)&v70 = -0.0;
  }
  else
  {
    v70 = (int)v69;
  }
  v71 = v63 - v59;
  v94 = *(float *)&v70;
  v72 = v68 * 64.0;
  if (v72 >= 2147483650.0)
  {
    *(float *)&v73 = NAN;
  }
  else if (v72 <= -2147483650.0)
  {
    *(float *)&v73 = -0.0;
  }
  else
  {
    v73 = (int)v72;
  }
  v95 = *(float *)&v73;
  v74 = v71 * 64.0;
  if (v74 >= 2147483650.0)
  {
    *(float *)&v75 = NAN;
  }
  else if (v74 <= -2147483650.0)
  {
    *(float *)&v75 = -0.0;
  }
  else
  {
    v75 = (int)v74;
  }
  v96 = v75;
  v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v77 = 1.0;
  if (v76)
  {
    v78 = *(_QWORD *)(v76 + 8);
    if (v78)
    {
      v79 = *(_QWORD *)(v78 + 24);
      if (v79)
      {
        v80 = *(float **)(v79 + 8);
        if (v80)
        {
          v81 = (*(_DWORD *)v80)++;
          v77 = v80[91];
          if (v81)
          {
            *(_DWORD *)v80 = v81;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v80);
            WTF::fastFree(v88, v89);
          }
        }
      }
    }
  }
  v82 = WebCore::snapRectToDevicePixels((int *)&v93, v77) * 64.0;
  if (v82 >= 2147483650.0)
  {
    v84 = 0x7FFFFFFFLL;
  }
  else if (v82 <= -2147483650.0)
  {
    v84 = 0x80000000;
  }
  else
  {
    v84 = (int)v82;
  }
  v85 = v83 * 64.0;
  if (v85 >= 2147483650.0)
  {
    v86 = 0x7FFFFFFF00000000;
  }
  else if (v85 <= -2147483650.0)
  {
    v86 = 0x8000000000000000;
  }
  else
  {
    v86 = (unint64_t)(int)v85 << 32;
  }
  return v86 | v84;
}

_QWORD *WebCore::LegacyRenderSVGModelObject::computeFloatVisibleRectInContainer@<X0>(_QWORD *result@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __n128 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float v32;
  float v33;
  double v34;
  double v35;
  float v36;
  float v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float v43;
  float v44;
  double v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v51;
  float v52;
  float v54;
  float v55;
  float v57;
  float v58;
  float v60;
  __n128 v61;

  v8 = result[4];
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  if ((*(_BYTE *)(v9 + 45) & 1) != 0)
    goto LABEL_69;
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8);
  if (!v10)
    goto LABEL_69;
  v11 = *(_WORD *)(v10 + 28);
  if ((v11 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654CB4CLL);
  }
  if ((v11 & 0x20) != 0)
  {
    v13 = *a2;
    v61 = *a2;
    v12 = *(_QWORD *)(result[11] + 16);
    v13.n128_u32[0] = 0;
    if ((*(_BYTE *)(v12 + 52) & 0x1F) == 0x10)
    {
      v14 = v61.n128_f32[2] + 0.0;
      v15 = v61.n128_f32[1];
      v16 = v61.n128_f32[0];
      v17 = v61.n128_f32[3] + 0.0;
    }
    else
    {
      if ((*(_BYTE *)(v12 + 52) & 0xF) != 0)
      {
        v13.n128_u32[0] = *(_DWORD *)(v12 + 48);
        v60 = 3.0;
        if (v13.n128_f32[0] >= 3.0)
          v60 = *(float *)(v12 + 48);
        if ((*(_BYTE *)(v12 + 52) & 0x10) != 0)
          v13.n128_f32[0] = v60;
      }
      v16 = v61.n128_f32[0] - v13.n128_f32[0];
      v14 = v13.n128_f32[0] + (float)(v13.n128_f32[0] + v61.n128_f32[2]);
      v15 = v61.n128_f32[1] - v13.n128_f32[0];
      v17 = v13.n128_f32[0] + (float)(v13.n128_f32[0] + v61.n128_f32[3]);
    }
    v18 = (double *)(*(uint64_t (**)(_QWORD *, __n128))(*result + 272))(result, v13);
    v20 = *v18;
    v19 = v18[1];
    v22 = v18[2];
    v21 = v18[3];
    if (*v18 == 1.0 && v19 == 0.0 && (v22 == 0.0 ? (v23 = v21 == 1.0) : (v23 = 0), v23))
    {
      v24 = v18[4];
      v25 = v18[5];
      v26 = v16 + v24;
      v27 = v15 + v25;
    }
    else
    {
      v28 = v22 * v15;
      v29 = v18[4];
      v30 = v18[5];
      v31 = v21 * v15;
      v32 = v28 + v20 * v16 + v29;
      v33 = v31 + v19 * v16 + v30;
      v34 = (float)(v16 + v14);
      v35 = v31 + v19 * v34 + v30;
      v36 = v28 + v20 * v34 + v29;
      v37 = v35;
      v38 = (float)(v15 + v17);
      v39 = v22 * v38;
      v40 = v39 + v20 * v34 + v29;
      v41 = v21 * v38;
      v42 = v41 + v19 * v34 + v30;
      v43 = v40;
      v44 = v42;
      v45 = v39 + v20 * v16 + v29;
      v46 = v45;
      v47 = v41 + v19 * v16 + v30;
      if (v46 >= v43)
        v26 = v40;
      else
        v26 = v45;
      if (v36 >= v32)
        v48 = v32;
      else
        v48 = v36;
      if (v26 >= v48)
        v26 = v48;
      v49 = fabsf(v26);
      if (v49 == INFINITY || v49 > 2147500000.0)
        v26 = (float)((SLODWORD(v26) >> 31) ^ 0x7FFFFFFF);
      if (v47 >= v44)
        v27 = v44;
      else
        v27 = v47;
      if (v37 >= v33)
        v51 = v33;
      else
        v51 = v37;
      if (v27 >= v51)
        v27 = v51;
      v52 = fabsf(v27);
      if (v52 == INFINITY || v52 > 2147500000.0)
        v27 = (float)((SLODWORD(v27) >> 31) ^ 0x7FFFFFFF);
      if (v32 < v36)
        v32 = v36;
      if (v43 >= v46)
        v54 = v40;
      else
        v54 = v46;
      if (v32 < v54)
        v32 = v54;
      v55 = fabsf(v32);
      if (v55 == INFINITY || v55 > 2147500000.0)
        v32 = (float)((SLODWORD(v32) >> 31) ^ 0x7FFFFFFF);
      if (v33 < v37)
        v33 = v37;
      if (v44 >= v47)
        v57 = v44;
      else
        v57 = v47;
      if (v33 < v57)
        v33 = v57;
      v58 = fabsf(v33);
      if (v58 == INFINITY || v58 > 2147500000.0)
        v33 = (float)((SLODWORD(v33) >> 31) ^ 0x7FFFFFFF);
      v14 = v32 - v26;
      v17 = v33 - v27;
    }
    v61.n128_u64[0] = __PAIR64__(LODWORD(v27), LODWORD(v26));
    v61.n128_u64[1] = __PAIR64__(LODWORD(v17), LODWORD(v14));
    return (_QWORD *)(*(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v9 + 480))(v9, &v61, a3, a4);
  }
  else
  {
LABEL_69:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGModelObject::mapLocalToContainer(WebCore::SVGRenderSupport *a1, const WebCore::RenderElement *a2, float64x2_t **a3, int a4, WebCore::TransformState *a5)
{
  return WebCore::SVGRenderSupport::mapLocalToContainer(a1, a2, a3, a5, (BOOL *)a5);
}

uint64_t WebCore::LegacyRenderSVGModelObject::pushMappingToContainer(WebCore::LegacyRenderSVGModelObject *this, const WebCore::RenderLayerModelObject *a2, WebCore::RenderGeometryMap *a3)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v16 = constinit_10;
  v17 = unk_1969FE138;
  v18 = xmmword_1969FE148;
  v5 = WebCore::SVGRenderSupport::localToParentTransform(this, (const WebCore::RenderElement *)&v16, a3);
  v7 = v16;
  v8 = 0;
  v9 = 0;
  v10 = v17;
  v11 = 0u;
  v12 = 0u;
  v13 = xmmword_1968A14B0;
  v14 = v18;
  v15 = xmmword_1968A14C0;
  WebCore::RenderGeometryMap::push(a3, this, (const WebCore::TransformationMatrix *)&v7, 0, 0, 0, 0);
  return v5;
}

void WebCore::LegacyRenderSVGModelObject::boundingRects(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  double v5;
  float v6;
  float v7;
  float v8;
  int v9;
  unsigned int v10;
  double v11;
  int v12;
  unsigned int v13;
  double v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;

  v5 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) * 64.0;
  if (v5 > -2147483650.0)
    v9 = (int)v5;
  else
    v9 = 0x80000000;
  if (v5 < 2147483650.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = v6 * 64.0;
  if (v11 > -2147483650.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147483650.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v14 = v7 * 64.0;
  if (v14 > -2147483650.0)
    v15 = (int)v14;
  else
    v15 = 0x80000000;
  if (v14 < 2147483650.0)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  DWORD2(v29) = v16;
  v17 = v8 * 64.0;
  if (v17 >= 2147483650.0)
  {
    v18 = 0x7FFFFFFF;
  }
  else if (v17 <= -2147483650.0)
  {
    v18 = 0x80000000;
  }
  else
  {
    v18 = (int)v17;
  }
  HIDWORD(v29) = v18;
  v19 = a3[1];
  v20 = __OFADD__(v10, *a3);
  v21 = v10 + *a3;
  v22 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v22 = v21;
  v20 = __OFADD__(v13, v19);
  v23 = v13 + v19;
  v24 = (v13 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v24 = v23;
  *(_QWORD *)&v29 = __PAIR64__(v24, v22);
  v25 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v25 == *(_DWORD *)(a2 + 8))
  {
    v28 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v25 + 1, (unint64_t)&v29);
    v25 = *(unsigned int *)(a2 + 12);
    v26 = *(_QWORD *)a2;
    v27 = *v28;
  }
  else
  {
    v26 = *(_QWORD *)a2;
    v27 = v29;
  }
  *(_OWORD *)(v26 + 16 * v25) = v27;
  ++*(_DWORD *)(a2 + 12);
}

__int128 *WebCore::LegacyRenderSVGModelObject::absoluteQuads(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  __int128 *result;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  float v12[8];
  _OWORD v13[2];

  v12[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  v12[1] = v4;
  v12[2] = v12[0] + v5;
  v12[3] = v4;
  v12[4] = v12[0] + v5;
  v12[5] = v4 + v6;
  v12[6] = v12[0];
  v12[7] = v4 + v6;
  result = (__int128 *)WebCore::RenderObject::localToContainerQuad(a1, v12, 0, 2u, v13);
  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8 == *(_DWORD *)(a2 + 8))
  {
    result = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v8 + 1, (unint64_t)v13);
    v9 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12));
    v10 = *result;
    v11 = result[1];
  }
  else
  {
    v9 = (_OWORD *)(*(_QWORD *)a2 + 32 * v8);
    v10 = v13[0];
    v11 = v13[1];
  }
  *v9 = v10;
  v9[1] = v11;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

void WebCore::LegacyRenderSVGModelObject::willBeDestroyed(WebCore::LegacyRenderSVGModelObject *this, const WebCore::RenderElement *a2)
{
  WebCore::RenderElement *v2;
  _QWORD *v3;
  const WebCore::RenderElement *v4;
  WebCore::RenderElement **v5;

  v2 = this;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x1000) != 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
  {
    v3 = (_QWORD *)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
    v2 = this;
    if (v3)
    {
      WebCore::SVGResources::removeClientFromCache(v3, this, 1);
      v5 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), v4);
      WebCore::SVGResourcesCache::removeResourcesFromRenderer(v5, this);
      v2 = this;
    }
  }
  WebCore::RenderElement::willBeDestroyed(v2, a2);
}

void WebCore::LegacyRenderSVGModelObject::styleDidChange(WebCore::RenderElement *this, void *a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if ((_DWORD)a2 == 8)
  {
    WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)this);
    v6 = *((_QWORD *)this + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40) + 20)
      || (v7 = *(_QWORD **)(v6 + 40), v7[41])
      || v7[38]
      || v7[39]
      || v7[40]
      || a3
      && ((v8 = *((_QWORD *)a3 + 1), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 40) + 20))
       || (v9 = *(_QWORD **)(v8 + 40), v9[41])
       || v9[38]
       || v9[39]
       || v9[40]))
    {
      (*(void (**)(WebCore::RenderElement *))(*(_QWORD *)this + 224))(this);
    }
  }
  WebCore::RenderElement::styleDidChange(this, a2, (uint64_t)a3);
  WebCore::SVGResourcesCache::clientStyleChanged((uint64_t)this, a2, a3, (WebCore::RenderElement *)((char *)this + 80));
}

uint64_t WebCore::LegacyRenderSVGModelObject::nodeAtPoint()
{
  return 0;
}

__int128 *WebCore::LegacyRenderSVGModelObject::absoluteFocusRingQuads(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  __int128 *result;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  float v12[8];
  _OWORD v13[2];

  v12[0] = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 256))(a1, 0);
  v12[1] = v4;
  v12[2] = v12[0] + v5;
  v12[3] = v4;
  v12[4] = v12[0] + v5;
  v12[5] = v4 + v6;
  v12[6] = v12[0];
  v12[7] = v4 + v6;
  result = (__int128 *)WebCore::RenderObject::localToContainerQuad(a1, v12, 0, 2u, v13);
  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8 == *(_DWORD *)(a2 + 8))
  {
    result = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v8 + 1, (unint64_t)v13);
    v9 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12));
    v10 = *result;
    v11 = result[1];
  }
  else
  {
    v9 = (_OWORD *)(*(_QWORD *)a2 + 32 * v8);
    v10 = v13[0];
    v11 = v13[1];
  }
  *v9 = v10;
  v9[1] = v11;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

uint64_t WebCore::LegacyRenderSVGModelObject::checkIntersection(WebCore::LegacyRenderSVGModelObject *this, WebCore::RenderElement *a2, const WebCore::FloatRect *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  WebCore::LegacyRenderSVGModelObject *v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  float v18;
  int v19;
  float *v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  float v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  BOOL v37;
  float v38;
  float v39;
  BOOL v40;
  float v41;
  BOOL v42;
  float v43;
  float v44;
  float v45;
  _BOOL4 v46;
  int v47;
  _DWORD v49[4];
  _DWORD v50[4];
  _OWORD v51[3];

  if (!this)
    return 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  if (*(_BYTE *)(v5 + 3441))
  {
    if (*(_QWORD *)(v5 + 1272) != v4)
      return 0;
  }
  v6 = *((_BYTE *)this + 45);
  v7 = this;
  if ((v6 & 2) != 0)
  {
    v7 = (WebCore::LegacyRenderSVGModelObject *)*((_QWORD *)this + 4);
    if (v7)
      v7 = (WebCore::LegacyRenderSVGModelObject *)*((_QWORD *)v7 + 1);
  }
  if ((*(_BYTE *)(*((_QWORD *)v7 + 13) + 239) & 1) != 0 || (*((_WORD *)v7 + 62) & 0x3C0) == 0)
    return 0;
  if ((*((_BYTE *)this + 52) & 7) != 4 || (~*((unsigned __int8 *)this + 53) & 0x11) != 0)
  {
    v8 = *((unsigned __int8 *)this + 46);
    if (v8 != 85 && v8 != 92)
    {
      if ((*((_BYTE *)this + 45) & 1) != 0)
        return 0;
      v9 = *(_WORD *)(v4 + 28);
      if ((v9 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19654D488);
      }
      if ((v9 & 0x20) == 0 || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
        return 0;
    }
  }
  v51[0] = xmmword_1969FE1F0;
  v51[1] = unk_1969FE200;
  v51[2] = xmmword_1969FE210;
  if ((v6 & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v11 = *(_WORD *)(v4 + 28);
    if ((v11 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19654D428);
    }
    if ((v11 & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19654D448);
    }
    *(_DWORD *)(v4 + 24) += 2;
  }
  WebCore::getElementCTM(v4, (WebCore::SVGElement *)v51, a3);
  v12 = (_DWORD *)(*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL);
  if (v12)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19654D468);
    }
    ++*(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  v49[0] = (*(float (**)(_DWORD *, uint64_t))(*(_QWORD *)v12 + 256))(v12, 1);
  v49[1] = v13;
  v49[2] = v14;
  v49[3] = v15;
  v50[0] = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v51, (const WebCore::FloatRect *)v49);
  v50[1] = v16;
  v50[2] = v19;
  *(float *)&v50[3] = v18;
  v20 = (float *)v50;
  v22 = *((float *)a2 + 2);
  v21 = *((float *)a2 + 3);
  while (1)
  {
    v23 = v20;
    v20 = (float *)a2;
    v24 = v18;
    v25 = v23[2];
    if (v22 <= 0.0 || v21 <= 0.0)
      break;
    v26 = v18 > 0.0 && v25 > 0.0;
    v18 = *((float *)a2 + 3);
    if (!v26)
    {
      v21 = v24;
      v22 = v23[2];
      a2 = (WebCore::RenderElement *)v23;
      if (v18 > 0.0)
        continue;
    }
    v10 = 0;
    v27 = v20[2];
    if (v27 > 0.0 && v18 > 0.0)
    {
      v10 = 0;
      if (v25 > 0.0)
      {
        v28 = v23[3];
        if (v28 > 0.0)
        {
          v29 = v25 + *v23;
          if (*v23 < (float)(v27 + *v20) && *v20 < v29)
          {
            v31 = v20[1];
            v32 = v23[1];
            if (v31 < (float)(v28 + v32))
            {
              v10 = v32 < (float)(v18 + v31);
              goto LABEL_68;
            }
          }
          goto LABEL_57;
        }
      }
    }
    goto LABEL_68;
  }
  v10 = 0;
  if (v25 > 0.0 && v18 > 0.0)
  {
    v34 = *v20;
    v33 = v20[1];
    v35 = *v23;
    v36 = v25 + *v23;
    v37 = *v23 > *v20 || v36 < v34;
    if (v37 || ((v38 = v23[1], v39 = v24 + v38, v38 <= v33) ? (v40 = v39 < v33) : (v40 = 1), v40))
    {
      v41 = v22 + v34;
      v42 = v35 > v41 || v36 < v41;
      if (v42 || (v43 = v21 + v33, v44 = v23[1], v44 > v43))
      {
LABEL_57:
        v10 = 0;
        goto LABEL_68;
      }
      v10 = (float)(v24 + v44) >= v43;
    }
    else
    {
      v45 = v21 + v33;
      v46 = v35 > (float)(v22 + v34);
      if (v36 < (float)(v22 + v34))
        v46 = 1;
      if (v38 > v45)
        v46 = 1;
      v10 = v39 < v45 || v46;
    }
  }
LABEL_68:
  v47 = v12[4];
  if (!v47)
  {
    __break(0xC471u);
    JUMPOUT(0x19654D408);
  }
  v12[4] = v47 - 1;
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v17);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return v10;
}

uint64_t WebCore::getElementCTM(uint64_t this, WebCore::SVGElement *a2, WebCore::AffineTransform *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v4 = this;
  if (this && (*(_WORD *)(this + 28) & 0x80) != 0)
  {
    v15 = *(_QWORD *)(this + 200);
    if (!v15)
      goto LABEL_28;
    v5 = (uint64_t *)(v15 + 8);
  }
  else
  {
    v5 = (uint64_t *)(this + 32);
  }
  v6 = *v5;
  if (!*v5)
    goto LABEL_28;
  v7 = *(_WORD *)(v6 + 28);
  if ((v7 & 0x80) != 0)
  {
    v16 = *(_QWORD *)(v6 + 200);
    if (v16)
    {
      v6 = *(_QWORD *)(v16 + 8);
      if (v6)
        goto LABEL_7;
    }
    goto LABEL_28;
  }
  if ((v7 & 8) == 0)
  {
LABEL_28:
    v9 = 0;
    goto LABEL_29;
  }
  do
  {
LABEL_7:
    v8 = *(_WORD *)(v6 + 28);
    if ((v8 & 0x20) != 0)
      v9 = v6;
    else
      v9 = 0;
    this = WebCore::isViewportElement(v9, a2);
    if ((this & 1) != 0)
    {
      if (v9)
      {
        v12 = 0;
        *(_DWORD *)(v9 + 24) += 2;
        v9 = v6;
        break;
      }
LABEL_29:
      v12 = 1;
      break;
    }
    if ((v8 & 0x80) != 0)
    {
      v13 = *(_QWORD *)(v6 + 200);
      if (!v13)
        goto LABEL_28;
      v10 = (uint64_t *)(v13 + 8);
    }
    else
    {
      v10 = (uint64_t *)(v6 + 32);
    }
    v6 = *v10;
    if (!*v10)
      goto LABEL_28;
    v11 = *(_WORD *)(v6 + 28);
    if ((v11 & 0x80) != 0)
    {
      v14 = *(_QWORD *)(v6 + 200);
      if (!v14)
        goto LABEL_28;
      v6 = *(_QWORD *)(v14 + 8);
    }
    else if ((v11 & 8) == 0)
    {
      goto LABEL_28;
    }
    v9 = 0;
    v12 = 1;
  }
  while (v6);
  do
  {
    if (!v4)
      break;
    v19 = v4;
    if ((*(_WORD *)(v4 + 28) & 0x20) == 0)
      break;
    *(_DWORD *)(v4 + 24) += 2;
    v20 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
    if (v20 && (*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
      return this;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 272))(v20);
    v21 = *(double *)(this + 8);
    v22 = *(double *)(this + 16);
    v23 = *(double *)(this + 24);
    v24 = *((double *)a2 + 1);
    v25 = v22 * v24 + *(double *)a2 * *(double *)this;
    v26 = v23 * v24 + *(double *)a2 * v21;
    v27 = *((double *)a2 + 2);
    v28 = *((double *)a2 + 3);
    v29 = v22 * v28 + v27 * *(double *)this;
    v30 = v23 * v28 + v27 * v21;
    v31 = *((double *)a2 + 4);
    v32 = *((double *)a2 + 5);
    v33 = *(double *)(this + 32) + v22 * v32 + v31 * *(double *)this;
    v34 = *(double *)(this + 40) + v23 * v32 + v31 * v21;
    *(double *)a2 = v25;
    *((double *)a2 + 1) = v26;
    *((double *)a2 + 2) = v29;
    *((double *)a2 + 3) = v30;
    *((double *)a2 + 4) = v33;
    *((double *)a2 + 5) = v34;
    v4 = v9;
    if (v19 == v9)
      goto LABEL_43;
    if ((*(_WORD *)(v19 + 28) & 0x80) == 0)
    {
      v18 = (uint64_t *)(v19 + 32);
      goto LABEL_42;
    }
    v17 = *(_QWORD *)(v19 + 200);
    if (v17)
    {
      v18 = (uint64_t *)(v17 + 8);
LABEL_42:
      v4 = *v18;
      goto LABEL_43;
    }
    v4 = 0;
LABEL_43:
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  while (v19 != v9);
  if ((v12 & 1) == 0)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return this;
}

BOOL WebCore::LegacyRenderSVGModelObject::checkEnclosure(WebCore::LegacyRenderSVGModelObject *this, WebCore::RenderElement *a2, const WebCore::FloatRect *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  WebCore::LegacyRenderSVGModelObject *v7;
  int v8;
  __int16 v9;
  _BOOL8 v10;
  __int16 v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  _DWORD v24[4];
  _OWORD v25[3];

  if (!this)
    return 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  if (*(_BYTE *)(v5 + 3441))
  {
    if (*(_QWORD *)(v5 + 1272) != v4)
      return 0;
  }
  v6 = *((_BYTE *)this + 45);
  v7 = this;
  if ((v6 & 2) != 0)
  {
    v7 = (WebCore::LegacyRenderSVGModelObject *)*((_QWORD *)this + 4);
    if (v7)
      v7 = (WebCore::LegacyRenderSVGModelObject *)*((_QWORD *)v7 + 1);
  }
  if ((*(_BYTE *)(*((_QWORD *)v7 + 13) + 239) & 1) != 0 || (*((_WORD *)v7 + 62) & 0x3C0) == 0)
    return 0;
  if ((*((_BYTE *)this + 52) & 7) != 4 || (~*((unsigned __int8 *)this + 53) & 0x11) != 0)
  {
    v8 = *((unsigned __int8 *)this + 46);
    if (v8 != 85 && v8 != 92)
    {
      if ((*((_BYTE *)this + 45) & 1) != 0)
        return 0;
      v9 = *(_WORD *)(v4 + 28);
      if ((v9 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19654D980);
      }
      if ((v9 & 0x20) == 0 || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
        return 0;
    }
  }
  v25[0] = xmmword_1969FE1F0;
  v25[1] = unk_1969FE200;
  v25[2] = xmmword_1969FE210;
  if ((v6 & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v11 = *(_WORD *)(v4 + 28);
    if ((v11 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19654D920);
    }
    if ((v11 & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19654D940);
    }
    *(_DWORD *)(v4 + 24) += 2;
  }
  WebCore::getElementCTM(v4, (WebCore::SVGElement *)v25, a3);
  v12 = (_DWORD *)(*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL);
  if (v12)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19654D960);
    }
    ++*(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  v24[0] = (*(float (**)(_DWORD *, uint64_t))(*(_QWORD *)v12 + 256))(v12, 1);
  v24[1] = v13;
  v24[2] = v14;
  v24[3] = v15;
  v17 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v25, (const WebCore::FloatRect *)v24);
  v10 = *(float *)a2 <= v17
     && (float)(*(float *)a2 + *((float *)a2 + 2)) >= (float)(v17 + v19)
     && (v21 = *((float *)a2 + 1), v21 <= v18)
     && (float)(v21 + *((float *)a2 + 3)) >= (float)(v18 + v20);
  v22 = v12[4];
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x19654D900);
  }
  v12[4] = v22 - 1;
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v16);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return v10;
}

uint64_t WebCore::LegacyRenderSVGModelObject::protectedElement@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) != 0)
  {
    *(_DWORD *)(v2 + 24) += 2;
    *a2 = v2;
  }
  else
  {
    this = 96;
    __break(0xC471u);
  }
  return this;
}

void WebCore::LegacyRenderSVGPath::~LegacyRenderSVGPath(WebCore::LegacyRenderSVGPath *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  uint64_t v6;
  char v7;

  v3 = (WTF *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E344ED58;
  v5 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v5)
  {
    v6 = v5[16];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v6])(&v7, v5 + 2);
    v5[16] = -1;
    WTF::fastFree((WTF *)v5, a2);
  }
  WebCore::RenderElement::~RenderElement(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = (WTF *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E344ED58;
  v5 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v5)
  {
    v6 = v5[16];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v6])(&v8, v5 + 2);
    v5[16] = -1;
    WTF::fastFree((WTF *)v5, a2);
  }
  WebCore::RenderElement::~RenderElement(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v7);
  }
}

float WebCore::LegacyRenderSVGPath::updateShapeFromElement(WebCore::LegacyRenderSVGPath *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  void *v5;
  _BYTE *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  float v12;
  int v13;
  int v14;
  int32x4_t v15;
  WTF **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF **v21;
  float result;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  WebCore::LegacyRenderSVGShape *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::SVGResources *v32;
  BOOL v33;
  WebCore::Path *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  WebCore::Path *v40;
  _QWORD *v41;
  _QWORD *v42;
  unsigned int *v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  unsigned int *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  BOOL v52;
  char v53;
  _QWORD *v54;

  v3 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(unsigned int **, unsigned int *))off_1E344CD10[v4])(&v47, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
    v6 = (char *)this + 208;
    v7 = (unsigned int *)*((_QWORD *)this + 33);
    *((_BYTE *)this + 208) &= 0x8Fu;
    if (v7)
      goto LABEL_10;
  }
  else
  {
    v6 = (char *)this + 208;
    *((_BYTE *)this + 208) &= 0x8Fu;
  }
  WebCore::LegacyRenderSVGShape::createPath(this, &v47);
  v7 = v47;
  v8 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = v47;
  if (v8)
  {
    v9 = v8[16];
    if ((_DWORD)v9 != -1)
      ((void (*)(_QWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v9])(&v54, v8 + 2);
    v8[16] = -1;
    WTF::fastFree((WTF *)v8, v5);
    v7 = (unsigned int *)*((_QWORD *)this + 33);
  }
  if (!v7)
  {
    v11 = 0;
    goto LABEL_15;
  }
LABEL_10:
  v10 = v7[16];
  v11 = 0;
  if (v10 != 2)
  {
    if (v10 == 1)
    {
      v12 = WebCore::PathStream::computeBoundingRect((uint64_t)(v7 + 2), 1);
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v39 = *((_QWORD *)v7 + 1);
  if (!v39)
  {
LABEL_15:
    v14 = 0;
    v13 = 0;
    v12 = 0.0;
    goto LABEL_16;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 240))(v39);
LABEL_16:
  *((float *)this + 36) = v12;
  *((_DWORD *)this + 37) = v13;
  *((_DWORD *)this + 38) = v11;
  *((_DWORD *)this + 39) = v14;
  v15 = vdupq_n_s32(0x7FC00000u);
  *((int32x4_t *)this + 10) = v15;
  *((int32x4_t *)this + 11) = v15;
  v16 = (WTF **)((char *)this + 288);
  if (*((_DWORD *)this + 74))
  {
    if (*((_DWORD *)this + 75))
      *((_DWORD *)this + 75) = 0;
    v45 = *v16;
    if (*v16)
    {
      *((_QWORD *)this + 36) = 0;
      *((_DWORD *)this + 74) = 0;
      WTF::fastFree(v45, v5);
    }
  }
  v17 = *(_QWORD **)(*((_QWORD *)this + 17) + 40);
  v18 = v17[1];
  if (v18 && *(_DWORD *)(v18 + 4)
    || (v19 = v17[2]) != 0 && *(_DWORD *)(v19 + 4)
    || (v20 = v17[3]) != 0 && *(_DWORD *)(v20 + 4))
  {
    v27 = WebCore::LegacyRenderSVGShape::graphicsElement(*(WebCore::LegacyRenderSVGShape **)(*((_QWORD *)this + 3) + 8));
    if ((*(unsigned int (**)(WebCore::LegacyRenderSVGShape *))(*(_QWORD *)v27 + 1152))(v27))
    {
      v28 = WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, (const WebCore::RenderElement *)v5);
      if (v28)
      {
        v29 = *(_QWORD **)(v28 + 8);
        if (v29)
        {
          if (*v29 && *(_QWORD *)(*v29 + 8)
            || (v30 = v29[1]) != 0 && *(_QWORD *)(v30 + 8)
            || (v31 = v29[2]) != 0 && *(_QWORD *)(v31 + 8))
          {
            v32 = (WebCore::SVGResources *)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, (const WebCore::RenderElement *)v5);
            v33 = WebCore::SVGResources::markerReverseStart(v32);
            v47 = (unsigned int *)((char *)this + 288);
            v48 = 0u;
            v49 = 0u;
            v50 = 0u;
            v51 = 0;
            v52 = v33;
            v53 = 0;
            v34 = (WebCore::Path *)*((_QWORD *)this + 33);
            v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v35 = off_1E344CD88;
            v35[1] = &v47;
            v54 = v35;
            WebCore::Path::applyElements(v34, &v54);
            v36 = v54;
            v54 = 0;
            if (v36)
              (*(void (**)(_QWORD *))(*v36 + 8))(v36);
            WebCore::SVGMarkerData::pathIsDone((WebCore::SVGMarkerData *)&v47);
          }
        }
      }
    }
  }
  v21 = (WTF **)((char *)this + 272);
  if (*((_DWORD *)this + 70))
  {
    if (*((_DWORD *)this + 71))
      *((_DWORD *)this + 71) = 0;
    v46 = *v21;
    if (*v21)
    {
      *((_QWORD *)this + 34) = 0;
      *((_DWORD *)this + 70) = 0;
      WTF::fastFree(v46, v5);
    }
  }
  result = WebCore::LegacyRenderSVGShape::strokeWidth(this);
  if (result != 0.0
    && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24) + 80) != 1
    && (*(_BYTE *)(*((_QWORD *)this + 13) + 237) & 0xC0) != 0)
  {
    v48 = 0uLL;
    v47 = (unsigned int *)((char *)this + 272);
    LOWORD(v49) = 0;
    v40 = (WebCore::Path *)*((_QWORD *)this + 33);
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v41 = off_1E344CD60;
    v41[1] = &v47;
    v54 = v41;
    WebCore::Path::applyElements(v40, &v54);
    v42 = v54;
    v54 = 0;
    if (v42)
      (*(void (**)(_QWORD *))(*v42 + 8))(v42);
    if (BYTE1(v49) && !(_BYTE)v49)
    {
      v43 = v47;
      v44 = v47[3];
      if ((_DWORD)v44 == v47[2])
      {
        WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatPoint&>((uint64_t)v47, (unint64_t)&v48);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v47 + 8 * v44) = v48;
        ++v43[3];
      }
    }
  }
  v23 = *((_QWORD *)this + 33);
  v24 = *(_DWORD *)(v23 + 64);
  if (v24 == 2)
  {
    v26 = *(_QWORD *)(v23 + 8);
    if (v26)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 200))(v26) & 1) != 0)
        return result;
      v23 = *((_QWORD *)this + 33);
      if (!v23)
        goto LABEL_56;
    }
    v24 = *(_DWORD *)(v23 + 64);
  }
  else if (!v24)
  {
    return result;
  }
  if (v24 != 2)
  {
    if (v24 == 1 && *(_DWORD *)(v23 + 60) == 11)
    {
      v25 = *v6 & 0x8F;
LABEL_51:
      v38 = 32;
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  v37 = *(_QWORD *)(v23 + 8);
  if (!v37)
  {
LABEL_56:
    v25 = *v6 & 0x8F;
    goto LABEL_57;
  }
  (*(void (**)(unsigned int **__return_ptr))(*(_QWORD *)v37 + 160))(&v47);
  v25 = *v6 & 0x8F;
  if (BYTE8(v48))
    goto LABEL_51;
LABEL_57:
  v38 = 16;
LABEL_58:
  *((_BYTE *)this + 208) = v38 | v25;
  if (*((_DWORD *)this + 75))
    return WebCore::LegacyRenderSVGShape::strokeBoundingBox(this);
  return result;
}

float32_t WebCore::LegacyRenderSVGPath::adjustStrokeBoundingBoxForMarkersAndZeroLengthLinecaps(uint64_t a1, const WebCore::RenderElement *a2, float a3, float a4, float a5, float a6)
{
  float v8;
  int32x2_t v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  float v14;
  float v15;
  float32x2_t *v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;

  v24 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  v25 = a5;
  v26 = a6;
  v8 = WebCore::LegacyRenderSVGShape::strokeWidth((WebCore::LegacyRenderSVGShape *)a1);
  if (*(_DWORD *)(a1 + 300))
  {
    v20 = v8;
    WebCore::LegacyRenderSVGPath::markerRect(a1, a2, v8);
    v21 = __PAIR64__(v13, v12);
    v22 = v14;
    v23 = v15;
    WebCore::FloatRect::unite((float32x2_t *)&v24, (float32x2_t *)&v21);
    v8 = v20;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 24) + 80) != 1)
  {
    v10 = *(unsigned int *)(a1 + 284);
    if ((_DWORD)v10)
    {
      v16 = *(float32x2_t **)(a1 + 272);
      *(float *)v9.i32 = v8 * 0.5;
      v17 = (float32x2_t)vdup_lane_s32(v9, 0);
      do
      {
        v18 = *v16++;
        v21 = (unint64_t)vsub_f32(v18, v17);
        v22 = v8;
        v23 = v8;
        v19 = v8;
        WebCore::FloatRect::unite((float32x2_t *)&v24, (float32x2_t *)&v21);
        v8 = v19;
        --v10;
      }
      while (v10);
    }
  }
  return *(float *)&v24;
}

void WebCore::LegacyRenderSVGPath::markerRect(uint64_t a1, const WebCore::RenderElement *a2, float a3)
{
  char v4;
  _QWORD *v6;
  WebCore::LegacyRenderSVGResourceMarker *v7;
  WebCore::LegacyRenderSVGResourceMarker *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::LegacyRenderSVGResourceMarker *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  WebCore::LegacyRenderSVGResourceMarker *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  double v29[6];

  v4 = (char)a2;
  v6 = *(_QWORD **)(WebCore::SVGResourcesCache::cachedResourcesForRenderer((WebCore::SVGResourcesCache *)a1, a2) + 8);
  if (v6)
  {
    if (*v6)
      v7 = *(WebCore::LegacyRenderSVGResourceMarker **)(*v6 + 8);
    else
      v7 = 0;
    v9 = v6[1];
    if (v9)
      v8 = *(WebCore::LegacyRenderSVGResourceMarker **)(v9 + 8);
    else
      v8 = 0;
    v10 = v6[2];
    if (v10)
    {
      v11 = *(WebCore::LegacyRenderSVGResourceMarker **)(v10 + 8);
      goto LABEL_12;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v11 = 0;
LABEL_12:
  v12 = *(unsigned int *)(a1 + 300);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 16 * v12;
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    while (1)
    {
      if (v14 >= *(unsigned int *)(a1 + 300))
      {
        __break(0xC471u);
        return;
      }
      v20 = *(_QWORD *)(a1 + 288);
      v21 = *(_DWORD *)(v20 + v13);
      v22 = v7;
      if (!v21)
        goto LABEL_18;
      if (v21 != 2)
        break;
      v22 = v11;
      if (v11)
      {
LABEL_21:
        WebCore::LegacyRenderSVGResourceMarker::markerTransformation(v22, (const WebCore::FloatPoint *)(v20 + v13 + 4), *(float *)(v20 + v13 + 12), a3, v29);
        v23 = WebCore::LegacyRenderSVGResourceMarker::markerBoundaries(v22, v4, (WebCore::AffineTransform *)v29);
        if (v25 <= 0.0 || v26 <= 0.0)
        {
          v26 = v16;
          v25 = v17;
          v24 = v18;
          v23 = v19;
        }
        else if (v17 > 0.0 && v16 > 0.0)
        {
          v27 = v25 + v23;
          if (v23 >= v19)
            v23 = v19;
          v28 = v26 + v24;
          if (v24 >= v18)
            v24 = v18;
          if ((float)(v17 + v19) >= v27)
            v27 = v17 + v19;
          if ((float)(v16 + v18) >= v28)
            v28 = v16 + v18;
          v25 = v27 - v23;
          v26 = v28 - v24;
        }
        v16 = v26;
        v17 = v25;
        v18 = v24;
        v19 = v23;
      }
LABEL_35:
      ++v14;
      v13 += 16;
      if (v15 == v13)
        return;
    }
    v22 = v8;
    if (v21 != 1)
      goto LABEL_35;
LABEL_18:
    if (v22)
      goto LABEL_21;
    goto LABEL_35;
  }
}

float WebCore::LegacyRenderSVGPath::strokeShape(WebCore::LegacyRenderSVGPath *this, WebCore::GraphicsContext *a2, float result)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  __int128 *v8;
  WebCore::GraphicsContext *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  __int128 *v14;
  unsigned int *v15;
  float64x2_t v16[3];

  v3 = *((_QWORD *)this + 17);
  if (*(_BYTE *)(*(_QWORD *)(v3 + 24) + 80) != 1)
  {
    v6 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v6 + 248))
      v7 = *(_BYTE *)(v6 + 248) == 11;
    else
      v7 = 1;
    if (!v7)
    {
      if (*(_BYTE *)(v6 + 250))
      {
        result = *(float *)(v6 + 244);
        if (result == 0.0)
          return result;
      }
      else if (!*(_DWORD *)(v6 + 244))
      {
        return result;
      }
    }
    v8 = (__int128 *)*((_QWORD *)this + 33);
    if (v8)
    {
      if ((*(_WORD *)(v3 + 8) & 0x400) != 0)
      {
        v15 = WebCore::LegacyRenderSVGShape::nonScalingStrokeTransform(this);
        v8 = WebCore::LegacyRenderSVGShape::nonScalingStrokePath((WebCore::LegacyRenderSVGShape *)v15, (const WebCore::Path *)v8, v16);
      }
      (*(void (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)a2 + 184))(a2, v8);
      if (*((_DWORD *)this + 71))
      {
        v16[0] = (float64x2_t)xmmword_1969FE1F0;
        v16[1] = (float64x2_t)unk_1969FE200;
        v16[2] = (float64x2_t)xmmword_1969FE210;
        if ((*(_BYTE *)(*((_QWORD *)this + 17) + 9) & 4) != 0)
          WebCore::LegacyRenderSVGShape::nonScalingStrokeTransform(this);
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
        WebCore::useStrokeStyleToFill(a2, v9);
        if (*((_DWORD *)this + 71))
        {
          v10 = 0;
          v11 = 0;
          do
          {
            v12 = v10;
            v13.n128_f64[0] = WebCore::LegacyRenderSVGPath::zeroLengthLinecapPath(this, (float32x2_t *)(*((_QWORD *)this + 34) + v10));
            v14 = (__int128 *)&unk_1ECE84B30;
            if ((*(_WORD *)(*((_QWORD *)this + 17) + 8) & 0x400) != 0)
              v14 = WebCore::LegacyRenderSVGShape::nonScalingStrokePath(this, (const WebCore::Path *)&unk_1ECE84B30, v16);
            (*(void (**)(WebCore::GraphicsContext *, __int128 *, __n128))(*(_QWORD *)a2 + 176))(a2, v14, v13);
            ++v11;
            v10 = v12 + 8;
          }
          while (v11 < *((unsigned int *)this + 71));
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      }
    }
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGPath::shapeDependentStrokeContains(uint64_t a1, float *a2, int a3)
{
  uint64_t v6;
  unint64_t i;
  float v8;
  unint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  if (WebCore::LegacyRenderSVGShape::shapeDependentStrokeContains((_QWORD *)a1, a2, a3))
    return 1;
  if (*(_DWORD *)(a1 + 284))
  {
    v6 = 0;
    for (i = 0; i < v9; ++i)
    {
      v8 = WebCore::LegacyRenderSVGShape::strokeWidth((WebCore::LegacyRenderSVGShape *)a1);
      v9 = *(unsigned int *)(a1 + 284);
      if ((*(_DWORD *)(*(_QWORD *)(a1 + 104) + 236) & 0xC000) == 0x8000)
      {
        if (i >= v9)
          goto LABEL_22;
        v10 = (float *)(*(_QWORD *)(a1 + 272) + v6);
        v11 = *v10 - (float)(v8 * 0.5);
        v12 = v10[1] - (float)(v8 * 0.5);
        v13 = a2[1];
        v14 = v8 + v11;
        v15 = v8 + v12;
        if (v11 <= *a2 && v14 >= *a2 && v12 <= v13 && v15 >= v13)
          return 1;
      }
      else
      {
        if (i >= v9)
        {
LABEL_22:
          __break(0xC471u);
          JUMPOUT(0x19654E550);
        }
        if ((float)((float)((float)(a2[1] - *(float *)(*(_QWORD *)(a1 + 272) + v6 + 4))
                           * (float)(a2[1] - *(float *)(*(_QWORD *)(a1 + 272) + v6 + 4)))
                   + (float)((float)(*a2 - *(float *)(*(_QWORD *)(a1 + 272) + v6))
                           * (float)(*a2 - *(float *)(*(_QWORD *)(a1 + 272) + v6)))) < (float)((float)(v8 * v8) * 0.25))
          return 1;
      }
      v6 += 8;
    }
  }
  return 0;
}

double WebCore::LegacyRenderSVGPath::zeroLengthLinecapPath(WebCore::LegacyRenderSVGPath *this, float32x2_t *a2)
{
  float v4;
  int32x2_t v5;
  double result;
  float v7;
  int32x2_t v8;
  __n128 v9;

  if ((_MergedGlobals_261 & 1) != 0)
  {
    if ((_DWORD)qword_1ECE84B70 != -1)
    {
      if (!(_DWORD)qword_1ECE84B70)
        goto LABEL_6;
      ((void (*)(__n128 *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[qword_1ECE84B70])(&v9, &unk_1ECE84B38);
    }
    LODWORD(qword_1ECE84B70) = 0;
  }
  else
  {
    qword_1ECE84B70 = 0;
    unk_1ECE84B60 = 0u;
    unk_1ECE84B50 = 0u;
    unk_1ECE84B40 = 0u;
    unk_1ECE84B30 = 0u;
    _MergedGlobals_261 = 1;
  }
LABEL_6:
  if ((*(_DWORD *)(*((_QWORD *)this + 13) + 236) & 0xC000) == 0x8000)
  {
    v4 = WebCore::LegacyRenderSVGShape::strokeWidth(this);
    *(float *)v5.i32 = v4 * 0.5;
    v9.n128_u64[0] = (unint64_t)vsub_f32(*a2, (float32x2_t)vdup_lane_s32(v5, 0));
    v9.n128_f32[2] = v4;
    v9.n128_f32[3] = v4;
    return WebCore::Path::addRect((WebCore::Path *)&unk_1ECE84B30, (const WebCore::FloatRect *)&v9);
  }
  else
  {
    v7 = WebCore::LegacyRenderSVGShape::strokeWidth(this);
    *(float *)v8.i32 = v7 * 0.5;
    v9.n128_u64[0] = (unint64_t)vsub_f32(*a2, (float32x2_t)vdup_lane_s32(v8, 0));
    v9.n128_f32[2] = v7;
    v9.n128_f32[3] = v7;
    *(_QWORD *)&result = WebCore::Path::addEllipseInRect((WebCore::Path *)&unk_1ECE84B30, &v9).n128_u64[0];
  }
  return result;
}

uint64_t WebCore::useStrokeStyleToFill(WebCore *this, WebCore::GraphicsContext *a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  BOOL v10;
  char *v11;
  __int128 *v12;
  __int128 *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = *((_DWORD *)this + 44);
  if (v3 != 1)
  {
    if (v3 == 2)
    {
      v24 = (_DWORD *)*((_QWORD *)this + 14);
      if (v24)
      {
        ++*v24;
        v25 = *((unsigned int *)this + 22);
        if ((_DWORD)v25 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v25])(&v27, (char *)this + 24);
        *((_QWORD *)this + 3) = v24;
        *((_DWORD *)this + 22) = 2;
        *((_DWORD *)this + 46) |= 1u;
        return (*(uint64_t (**)(WebCore *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
      }
    }
    return WebCore::GraphicsContext::setFillColor(this, (WebCore *)((char *)this + 96));
  }
  if (*((_DWORD *)this + 30))
    return WebCore::GraphicsContext::setFillColor(this, (WebCore *)((char *)this + 96));
  v5 = *((_QWORD *)this + 14);
  if (!v5)
    return WebCore::GraphicsContext::setFillColor(this, (WebCore *)((char *)this + 96));
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v6, a2);
LABEL_10:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v26 = v5;
  v9 = *((_DWORD *)this + 44);
  v10 = v9 == 1;
  if (v9 == 1)
    v11 = (char *)this + 112;
  else
    v11 = 0;
  v12 = (__int128 *)(v11 + 16);
  if (v10)
    v13 = v12;
  else
    v13 = (__int128 *)&WebCore::identity;
  WebCore::SourceBrush::setGradient((uint64_t)this + 8, &v26, v13);
  *((_DWORD *)this + 46) |= 1u;
  result = (*(uint64_t (**)(WebCore *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  v15 = v26;
  v26 = 0;
  if (!v15)
    return result;
  v16 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_26;
  }
  result = MEMORY[0x19AEA534C](v16);
LABEL_26:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v23 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v23 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
LABEL_32:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v16);
  if (!v19)
  {
    if (v20)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (!v21)
      return WTF::fastFree((WTF *)v16, v14);
  }
  return result;
}

WebCore::LegacyRenderSVGShape *WebCore::LegacyRenderSVGShape::graphicsElement(WebCore::LegacyRenderSVGShape *this)
{
  if ((*((_WORD *)this + 14) & 0x20) == 0
    || ((*(uint64_t (**)(WebCore::LegacyRenderSVGShape *))(*(_QWORD *)this + 1184))(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654E8F4);
  }
  return this;
}

void WebCore::LegacyRenderSVGPath::drawMarkers(WebCore::LegacyRenderSVGPath *this, WebCore::PaintInfo *a2)
{
  uint64_t v2;
  _QWORD *v3;
  WebCore::LegacyRenderSVGResourceMarker *v4;
  uint64_t v5;
  WebCore::LegacyRenderSVGResourceMarker *v6;
  uint64_t v7;
  WebCore::LegacyRenderSVGResourceMarker *v8;
  float v9;
  WebCore::LegacyRenderSVGPath *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::LegacyRenderSVGResourceMarker *v18;
  __n128 v19;
  WTF::String *v20;
  double v23[6];

  if (!*((_DWORD *)this + 75))
    return;
  v2 = WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
  if (!v2)
    return;
  v3 = *(_QWORD **)(v2 + 8);
  if (v3)
  {
    if (*v3)
      v4 = *(WebCore::LegacyRenderSVGResourceMarker **)(*v3 + 8);
    else
      v4 = 0;
    v5 = v3[1];
    if (v5)
      v6 = *(WebCore::LegacyRenderSVGResourceMarker **)(v5 + 8);
    else
      v6 = 0;
    v7 = v3[2];
    if (v7)
    {
      v8 = *(WebCore::LegacyRenderSVGResourceMarker **)(v7 + 8);
      goto LABEL_13;
    }
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v8 = 0;
LABEL_13:
  if (v4 || v6 || v8)
  {
    v9 = WebCore::LegacyRenderSVGShape::strokeWidth(this);
    v10 = this;
    v11 = *((unsigned int *)this + 75);
    if ((_DWORD)v11)
    {
      v12 = v9;
      v13 = 0;
      v14 = 0;
      v15 = 16 * v11;
      while (1)
      {
        if (v14 >= *((unsigned int *)v10 + 75))
        {
          __break(0xC471u);
          return;
        }
        v16 = *((_QWORD *)this + 36);
        v17 = *(_DWORD *)(v16 + v13);
        v18 = v4;
        if (!v17)
          goto LABEL_24;
        if (v17 == 2)
          break;
        v18 = v6;
        if (v17 == 1)
          goto LABEL_24;
LABEL_26:
        ++v14;
        v13 += 16;
        v10 = this;
        if (v15 == v13)
          return;
      }
      v18 = v8;
LABEL_24:
      if (v18)
      {
        v19.n128_f64[0] = WebCore::LegacyRenderSVGResourceMarker::markerTransformation(v18, (const WebCore::FloatPoint *)(v16 + v13 + 4), *(float *)(v16 + v13 + 12), v12, v23);
        WebCore::LegacyRenderSVGResourceMarker::draw(v18, a2, (const WebCore::AffineTransform *)v23, v20, v19);
      }
      goto LABEL_26;
    }
  }
}

void WebCore::SVGMarkerData::pathIsDone(WebCore::SVGMarkerData *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_QWORD *)this;
  v3 = atan2f(*((float *)this + 10) - *((float *)this + 8), *((float *)this + 9) - *((float *)this + 7));
  LODWORD(v8) = 2;
  *(_QWORD *)((char *)&v8 + 4) = *(_QWORD *)((char *)this + 12);
  *((float *)&v8 + 3) = v3 * 57.296;
  v4 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(v2 + 8))
  {
    v5 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2, v4 + 1, (unint64_t)&v8);
    v4 = *(unsigned int *)(v2 + 12);
    v6 = *(_QWORD *)v2;
    v7 = *(_OWORD *)v5;
  }
  else
  {
    v6 = *(_QWORD *)v2;
    v7 = v8;
  }
  *(_OWORD *)(v6 + 16 * v4) = v7;
  ++*(_DWORD *)(v2 + 12);
}

uint64_t WebCore::LegacyRenderSVGPath::isRenderingDisabled(WebCore::LegacyRenderSVGPath *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 33);
  if (!v1)
    return 1;
  v2 = *(_DWORD *)(v1 + 64);
  if (v2 != 2)
    return !v2;
  result = *(_QWORD *)(v1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

void WebCore::LegacyRenderSVGPath::styleDidChange(_QWORD *a1, void *a2, const WTF::StringImpl *a3)
{
  WebCore::SVGPathElement *v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SVGPathElement *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = *(WebCore::SVGPathElement **)(a1[3] + 8);
  if ((*((_WORD *)v3 + 14) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 1184))(*(_QWORD *)(a1[3] + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654ED10);
  }
  v8 = *(_QWORD *)(*((_QWORD *)v3 + 12) + 24);
  v9 = *(_QWORD *)(WebCore::SVGNames::pathTag + 24);
  if (v8 == v9)
    v10 = v3;
  else
    v10 = 0;
  if (v10)
    *((_DWORD *)v10 + 6) += 2;
  if (v8 == v9
    && (!a3
     || *(_QWORD *)(*(_QWORD *)(a1[17] + 64) + 64) != *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 64) + 64)))
  {
    WebCore::SVGPathElement::invalidateMPathDependencies(v3, v7);
  }
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v7);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  if ((_DWORD)a2 == 8)
  {
    WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)a1);
    v11 = a1[11];
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 40) + 20)
      || (v12 = *(_QWORD **)(v11 + 40), v12[41])
      || v12[38]
      || v12[39]
      || v12[40]
      || a3
      && ((v13 = *((_QWORD *)a3 + 1), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 40) + 20))
       || (v14 = *(_QWORD **)(v13 + 40), v14[41])
       || v14[38]
       || v14[39]
       || v14[40]))
    {
      (*(void (**)(_QWORD *))(*a1 + 224))(a1);
    }
  }
  WebCore::RenderElement::styleDidChange((WebCore::RenderElement *)a1, a2, (uint64_t)a3);
  WebCore::SVGResourcesCache::clientStyleChanged((uint64_t)a1, a2, a3, (const WebCore::RenderStyle *)(a1 + 10));
}

void WebCore::LegacyRenderSVGRect::~LegacyRenderSVGRect(WebCore::LegacyRenderSVGRect *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)this = off_1E344ED58;
  v3 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v4])(&v5, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::RenderElement::~RenderElement(this, a2);
}

{
  unsigned int *v3;
  uint64_t v4;
  void *v5;
  char v6;

  *(_QWORD *)this = off_1E344ED58;
  v3 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v4])(&v6, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::RenderElement::~RenderElement(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void WebCore::LegacyRenderSVGRect::updateShapeFromElement(WebCore::LegacyRenderSVGRect *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int32x4_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  WebCore::Length *v11;
  int v12;
  float32x2_t v13;
  unsigned __int8 *v14;
  WebCore::Length *v15;
  int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  int v21;
  float v22;
  float *v23;
  int v24;
  float v25;
  uint64_t v26;
  float *v27;
  int v28;
  float v29;
  uint64_t v30;
  float *v31;
  int v32;
  float v33;
  WTF *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  WTF *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  float v57;
  int32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  float v69;
  char v70;
  __int32 v71;
  float v72;
  char v73;
  float v74;
  WebCore::Length *v75;
  float v76;
  char v77;
  WebCore::Length *v78;
  float v79;
  WebCore::Length *v80;
  float v81;
  char v82;
  WebCore::Length *v83;
  float v84;
  WebCore::Length *v85;
  float v86;
  char v87;
  WebCore::Length *v88;
  float v89;
  WebCore::Length *v90;
  float v91;
  char v92;
  WebCore::Length *v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  __int32 v109;
  __int32 v110;
  __int32 v111;
  __int32 v112;
  __int32 v113;
  __int32 v114;
  float32x2_t v115;
  __int32 v116;
  __int32 v117;
  __int32 v118;
  __int32 v119;
  __int32 v120;
  WTF *v121[3];
  char v122;
  char v123;
  unsigned int *v124[2];
  int v125;
  char v126;

  v3 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(WTF **, unsigned int *))off_1E344CD10[v4])(v121, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  *((_BYTE *)this + 208) &= 0x8Fu;
  v5 = vdupq_n_s32(0x7FC00000u);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((int32x4_t *)this + 10) = v5;
  *((int32x4_t *)this + 11) = v5;
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v6 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654F5FCLL);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19654F61CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::rectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19654F63CLL);
  }
  *(_DWORD *)(v6 + 24) += 2;
  if ((*(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v37 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = 0;
    *(_QWORD *)(v37 + 8) = v6;
    *(_BYTE *)(v37 + 32) = 0;
    v38 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v38 & 0xFFFF000000000000 | v37;
    v39 = v38 & 0xFFFFFFFFFFFFLL;
    if ((v38 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v40 = __ldaxr((unsigned int *)v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, (unsigned int *)v39));
      if (!v41)
      {
        atomic_store(1u, (unsigned int *)v39);
        v42 = *(unsigned int *)(v39 + 28);
        if ((_DWORD)v42)
        {
          v95 = v39;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v39 + 16), (WTF::StringImpl *)(*(_QWORD *)(v39 + 16) + 32 * v42));
          v39 = v95;
        }
        v43 = *(WTF **)(v39 + 16);
        if (v43)
        {
          *(_QWORD *)(v39 + 16) = 0;
          *(_DWORD *)(v39 + 24) = 0;
          v63 = v39;
          WTF::fastFree(v43, v7);
          v39 = v63;
        }
        WTF::fastFree((WTF *)v39, v7);
      }
    }
  }
  v8 = (unsigned int *)(*(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFFLL);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v123 = 0;
  v121[1] = 0;
  v121[2] = 0;
  v121[0] = (WTF *)v8;
  v122 = 0;
  v10 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 8);
  v11 = (WebCore::Length *)(v10 + 4);
  v12 = v10[8];
  if (v12 == 4)
  {
    if (v10[10])
      v13.i32[0] = *(_DWORD *)v11;
    else
      v13.f32[0] = (float)*(int *)v11;
  }
  else if (v12 == 11)
  {
    LODWORD(v69) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v121);
    if (!v70)
      v69 = 0.0;
    WebCore::Length::nonNanCalculatedValue(v11, v69);
    v13.i32[0] = v71;
  }
  else
  {
    v13.i32[0] = 0;
    if (v12 == 3)
    {
      v44 = *((float *)v10 + 1);
      if (!v10[10])
        v44 = (float)SLODWORD(v44);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v121, 0, (uint64_t)v124, v44 / 100.0);
      v109 = 0;
      if (v125 != -1)
      {
        if (!v125)
          v109 = (__int32)v124[0];
        ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v126, v124);
      }
      v13.i32[0] = v109;
    }
  }
  v14 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 8);
  v15 = (WebCore::Length *)(v14 + 12);
  v16 = v14[16];
  switch(v16)
  {
    case 4:
      if (v14[18])
        v17 = *(float *)v15;
      else
        v17 = (float)*(int *)v15;
      break;
    case 11:
      v116 = v13.i32[0];
      LODWORD(v72) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v121) >> 32;
      if (!v73)
        v72 = 0.0;
      WebCore::Length::nonNanCalculatedValue(v15, v72);
      v13.i32[0] = v116;
      v17 = v74;
      break;
    case 3:
      v110 = v13.i32[0];
      v45 = *((float *)v14 + 3);
      if (!v14[18])
        v45 = (float)SLODWORD(v45);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v121, 1, (uint64_t)v124, v45 / 100.0);
      v100 = 0.0;
      if (v125 != -1)
      {
        if (!v125)
          v100 = *(float *)v124;
        ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v126, v124);
      }
      v17 = v100;
      v13.i32[0] = v110;
      break;
    default:
      goto LABEL_40;
  }
  if (v13.f32[0] <= 0.0 || v17 <= 0.0)
    goto LABEL_40;
  v18 = *((_QWORD *)this + 17);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = (float *)(v19 + 28);
  v21 = *(unsigned __int8 *)(v19 + 32);
  switch(v21)
  {
    case 4:
      if (*(_BYTE *)(v19 + 34))
        v22 = *v20;
      else
        v22 = (float)*(int *)v20;
      break;
    case 11:
      v96 = *((_QWORD *)this + 17);
      v75 = (WebCore::Length *)(v19 + 28);
      v105 = v17;
      v117 = v13.i32[0];
      LODWORD(v76) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v121);
      if (!v77)
        v76 = 0.0;
      v78 = v75;
      v18 = v96;
      WebCore::Length::nonNanCalculatedValue(v78, v76);
      v17 = v105;
      v13.i32[0] = v117;
      v22 = v79;
      break;
    case 3:
      v101 = v17;
      v111 = v13.i32[0];
      v46 = *(float *)(v19 + 28);
      if (!*(_BYTE *)(v19 + 34))
        v46 = (float)SLODWORD(v46);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v121, 0, (uint64_t)v124, v46 / 100.0);
      v22 = 0.0;
      if (v125 != -1)
      {
        if (!v125)
          v22 = *(float *)v124;
        ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v126, v124);
      }
      v17 = v101;
      v13.i32[0] = v111;
      break;
    default:
      goto LABEL_24;
  }
  if (v22 > 0.0)
    goto LABEL_114;
  v19 = *(_QWORD *)(v18 + 64);
LABEL_24:
  v23 = (float *)(v19 + 36);
  v24 = *(unsigned __int8 *)(v19 + 40);
  switch(v24)
  {
    case 4:
      if (*(_BYTE *)(v19 + 42))
        v25 = *v23;
      else
        v25 = (float)*(int *)v23;
      goto LABEL_27;
    case 11:
      v97 = v18;
      v80 = (WebCore::Length *)(v19 + 36);
      v106 = v17;
      v118 = v13.i32[0];
      LODWORD(v81) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v121) >> 32;
      if (!v82)
        v81 = 0.0;
      v83 = v80;
      v18 = v97;
      WebCore::Length::nonNanCalculatedValue(v83, v81);
      v17 = v106;
      v13.i32[0] = v118;
      v25 = v84;
LABEL_27:
      if (v25 <= 0.0)
        break;
LABEL_114:
      *((_BYTE *)this + 208) = *((_BYTE *)this + 208) & 0x8F | 0x40;
      goto LABEL_115;
    case 3:
      v102 = v17;
      v112 = v13.i32[0];
      v47 = *(float *)(v19 + 36);
      if (!*(_BYTE *)(v19 + 42))
        v47 = (float)SLODWORD(v47);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v121, 1, (uint64_t)v124, v47 / 100.0);
      v25 = 0.0;
      if (v125 != -1)
      {
        if (!v125)
          v25 = *(float *)v124;
        ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v126, v124);
      }
      v17 = v102;
      v13.i32[0] = v112;
      goto LABEL_27;
  }
  *((_BYTE *)this + 208) = *((_BYTE *)this + 208) & 0x8F | 0x30;
  if ((*(_WORD *)(*((_QWORD *)this + 17) + 8) & 0x400) == 0)
  {
    v26 = *(_QWORD *)(v18 + 64);
    v27 = (float *)(v26 + 44);
    v28 = *(unsigned __int8 *)(v26 + 48);
    if (v28 == 4)
    {
      if (*(_BYTE *)(v26 + 50))
        v29 = *v27;
      else
        v29 = (float)*(int *)v27;
    }
    else if (v28 == 11)
    {
      v98 = v18;
      v85 = (WebCore::Length *)(v26 + 44);
      v107 = v17;
      v119 = v13.i32[0];
      LODWORD(v86) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v121);
      if (!v87)
        v86 = 0.0;
      v88 = v85;
      v18 = v98;
      WebCore::Length::nonNanCalculatedValue(v88, v86);
      v17 = v107;
      v13.i32[0] = v119;
      v29 = v89;
    }
    else
    {
      v29 = 0.0;
      if (v28 == 3)
      {
        v103 = v17;
        v113 = v13.i32[0];
        v48 = *(float *)(v26 + 44);
        if (!*(_BYTE *)(v26 + 50))
          v48 = (float)SLODWORD(v48);
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v121, 0, (uint64_t)v124, v48 / 100.0);
        if (v125 != -1)
        {
          if (!v125)
            v29 = *(float *)v124;
          ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v126, v124);
        }
        v17 = v103;
        v13.i32[0] = v113;
      }
    }
    v30 = *(_QWORD *)(v18 + 64);
    v31 = (float *)(v30 + 52);
    v32 = *(unsigned __int8 *)(v30 + 56);
    if (v32 == 4)
    {
      if (*(_BYTE *)(v30 + 58))
        v33 = *v31;
      else
        v33 = (float)*(int *)v31;
    }
    else if (v32 == 11)
    {
      v99 = v18;
      v90 = (WebCore::Length *)(v30 + 52);
      v108 = v17;
      v120 = v13.i32[0];
      LODWORD(v91) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v121) >> 32;
      if (!v92)
        v91 = 0.0;
      v93 = v90;
      v18 = v99;
      WebCore::Length::nonNanCalculatedValue(v93, v91);
      v17 = v108;
      v13.i32[0] = v120;
      v33 = v94;
    }
    else
    {
      v33 = 0.0;
      if (v32 == 3)
      {
        v104 = v17;
        v114 = v13.i32[0];
        v49 = *(float *)(v30 + 52);
        if (!*(_BYTE *)(v30 + 58))
          v49 = (float)SLODWORD(v49);
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v121, 1, (uint64_t)v124, v49 / 100.0);
        if (v125 != -1)
        {
          if (!v125)
            v33 = *(float *)v124;
          ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v126, v124);
        }
        v17 = v104;
        v13.i32[0] = v114;
      }
    }
    *((float *)this + 36) = v29;
    *((float *)this + 37) = v33;
    *((_QWORD *)this + 19) = v13.u32[0] | ((unint64_t)LODWORD(v17) << 32);
    v13.f32[1] = v17;
    if (*(_BYTE *)(*(_QWORD *)(v18 + 24) + 80) != 1)
    {
      v115 = v13;
      *(float *)v58.i32 = WebCore::LegacyRenderSVGShape::strokeWidth(this) * 0.5;
      v29 = v29 - *(float *)v58.i32;
      v33 = v33 - *(float *)v58.i32;
      v59 = (float32x2_t)vdup_lane_s32(v58, 0);
      v13 = vadd_f32(v59, vadd_f32(v115, v59));
    }
    if ((*(_WORD *)(v18 + 4) & 3) == 2)
    {
      v29 = v29 + -1.0;
      __asm { FMOV            V1.2S, #1.0 }
      v33 = v33 + -1.0;
      v13 = vadd_f32(vadd_f32(v13, _D1), _D1);
    }
    *((float *)this + 40) = v29;
    *((float *)this + 41) = v33;
    *((float32x2_t *)this + 21) = v13;
    goto LABEL_40;
  }
LABEL_115:
  v50 = (unsigned int *)*((_QWORD *)this + 33);
  if (v50)
    goto LABEL_121;
  WebCore::LegacyRenderSVGShape::createPath(this, v124);
  v50 = v124[0];
  v51 = (unsigned int *)*((_QWORD *)this + 33);
  *((unsigned int **)this + 33) = v124[0];
  if (v51)
  {
    v52 = v51[16];
    if ((_DWORD)v52 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v52])(&v126, v51 + 2);
    v51[16] = -1;
    WTF::fastFree((WTF *)v51, v7);
    v50 = (unsigned int *)*((_QWORD *)this + 33);
  }
  if (v50)
  {
LABEL_121:
    v53 = v50[16];
    v54 = 0;
    if (v53 == 2)
    {
      v60 = *((_QWORD *)v50 + 1);
      v55 = 0;
      v56 = 0;
      v57 = 0.0;
      if (v60)
        (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v60 + 240))(v60, 0.0, 0.0, 0.0, 0.0);
    }
    else
    {
      v55 = 0;
      v56 = 0;
      v57 = 0.0;
      if (v53 == 1)
        v57 = WebCore::PathStream::computeBoundingRect((uint64_t)(v50 + 2), 1);
    }
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0.0;
  }
  *((float *)this + 36) = v57;
  *((_DWORD *)this + 37) = v56;
  *((_DWORD *)this + 38) = v54;
  *((_DWORD *)this + 39) = v55;
LABEL_40:
  v34 = v121[0];
  v121[0] = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v34));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v34);
      v61 = *((unsigned int *)v34 + 7);
      if ((_DWORD)v61)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v34 + 2), (WTF::StringImpl *)(*((_QWORD *)v34 + 2) + 32 * v61));
      v62 = (WTF *)*((_QWORD *)v34 + 2);
      if (v62)
      {
        *((_QWORD *)v34 + 2) = 0;
        *((_DWORD *)v34 + 6) = 0;
        WTF::fastFree(v62, v7);
      }
      WTF::fastFree(v34, v7);
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

uint64_t WebCore::LegacyRenderSVGRect::fillShape(WebCore::LegacyRenderSVGRect *this, WebCore::GraphicsContext *a2, float a3, float a4, float a5)
{
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE v12[16];
  uint64_t v13;
  char v14;

  if (*((_QWORD *)this + 33))
    return (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 176))(a2);
  if (!WebCore::GraphicsContext::hasDropShadow(a2, 0, a3, a4, a5))
    return (*(uint64_t (**)(WebCore::GraphicsContext *, char *, _QWORD))(*(_QWORD *)a2 + 216))(a2, (char *)this + 144, (*((unsigned __int8 *)this + 208) >> 3) & 1);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v12[0] = 0;
  v14 = 0;
  WebCore::GraphicsContextState::setDropShadow((uint64_t)a2 + 8, (uint64_t)v12);
  if (v14 && (v13 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
  (*(void (**)(WebCore::GraphicsContext *, char *, uint64_t))(*(_QWORD *)a2 + 216))(a2, (char *)this + 144, 1);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
}

WebCore::LegacyRenderSVGShape *WebCore::LegacyRenderSVGRect::strokeShape(WebCore::LegacyRenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  float v6;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24) + 80) != 1)
  {
    v3 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v3 + 248))
      v4 = *(_BYTE *)(v3 + 248) == 11;
    else
      v4 = 1;
    if (!v4)
    {
      if (*(_BYTE *)(v3 + 250))
      {
        if (*(float *)(v3 + 244) == 0.0)
          return this;
      }
      else if (!*(_DWORD *)(v3 + 244))
      {
        return this;
      }
    }
    if (*((_QWORD *)this + 33))
    {
      return (WebCore::LegacyRenderSVGShape *)WebCore::LegacyRenderSVGShape::strokeShape(this, a2);
    }
    else
    {
      v5 = (_QWORD *)((char *)this + 144);
      v6 = WebCore::LegacyRenderSVGShape::strokeWidth(this);
      return (WebCore::LegacyRenderSVGShape *)(*(uint64_t (**)(WebCore::GraphicsContext *, _QWORD *, float))(*(_QWORD *)a2 + 288))(a2, v5, v6);
    }
  }
  return this;
}

uint64_t WebCore::LegacyRenderSVGRect::shapeDependentStrokeContains(uint64_t result, float *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int *v26;
  char v27;

  v5 = result;
  v6 = *(_QWORD *)(result + 136);
  if ((*(_WORD *)(v6 + 8) & 0x400) == 0 && (*(_BYTE *)(result + 208) & 0x70) == 0x30)
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(unsigned int *)(v7 + 76);
    if ((_DWORD)v8)
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v19 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
      v21 = *(unsigned int *)(v7 + 76);
      if ((_DWORD)v21)
      {
        v22 = *(uint64_t **)(v7 + 64);
        v23 = 8 * v21;
        v24 = v19;
        do
        {
          v25 = *v22++;
          *(_QWORD *)v24 = v25;
          v24 = (WTF *)((char *)v24 + 8);
          v23 -= 8;
        }
        while (v23);
      }
      WTF::fastFree(v19, v20);
    }
    else
    {
      v9 = *(_QWORD *)(result + 104);
      if ((*(_BYTE *)(v9 + 238) & 3) == 0 && *(float *)(v9 + 208) >= 1.5)
      {
        v13 = WebCore::LegacyRenderSVGShape::strokeWidth((WebCore::LegacyRenderSVGShape *)result) * 0.5;
        v14 = *(float *)(v5 + 152) * 0.5;
        v15 = *(float *)(v5 + 156) * 0.5;
        v16 = vabds_f32(*a2, v14 + *(float *)(v5 + 144));
        v17 = vabds_f32(a2[1], v15 + *(float *)(v5 + 148));
        if (v16 > (float)(v13 + v14) || v17 > (float)(v13 + v15))
          return 0;
        if ((float)(v15 - v13) <= v17)
          return 1;
        return (float)(v14 - v13) <= v16;
      }
    }
  }
  if (!*(_QWORD *)(v5 + 264))
  {
    WebCore::LegacyRenderSVGShape::createPath((WebCore::LegacyRenderSVGShape *)v5, &v26);
    v11 = *(unsigned int **)(v5 + 264);
    *(_QWORD *)(v5 + 264) = v26;
    if (v11)
    {
      v12 = v11[16];
      if ((_DWORD)v12 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v12])(&v27, v11 + 2);
      v11[16] = -1;
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  return WebCore::LegacyRenderSVGShape::shapeDependentStrokeContains((_QWORD *)v5, a2, a3);
}

BOOL WebCore::LegacyRenderSVGRect::shapeDependentFillContains(uint64_t a1, float *a2, BOOL a3)
{
  int v3;
  float v5;
  float v6;
  float v7;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (*(unsigned __int8 *)(a1 + 208) >> 4) & 7;
  if (!v3)
    return 0;
  if (v3 == 3)
  {
    v5 = *(float *)(a1 + 144);
    if (v5 <= *a2 && (float)(v5 + *(float *)(a1 + 152)) >= *a2)
    {
      v6 = a2[1];
      v7 = *(float *)(a1 + 148);
      if (v7 <= v6)
        return (float)(v7 + *(float *)(a1 + 156)) >= v6;
    }
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 264);
  v11 = *(_DWORD *)(v10 + 64);
  if (v11 == 2)
  {
    v12 = *(_QWORD *)(v10 + 8);
    if (v12 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 200))(v12) & 1) != 0)
      return 0;
LABEL_11:
    v13 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v10);
    return WebCore::PathCG::contains(v13, a2, a3);
  }
  if (v11)
    goto LABEL_11;
  return 0;
}

BOOL WebCore::LegacyRenderSVGRect::isRenderingDisabled(WebCore::LegacyRenderSVGRect *this)
{
  return *((float *)this + 38) <= 0.0 || *((float *)this + 39) <= 0.0;
}

uint64_t WebCore::LegacyRenderSVGResource::removeAllClientsFromCache(WebCore::LegacyRenderSVGResource *this, uint64_t a2)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  result = (*(uint64_t (**)(WebCore::LegacyRenderSVGResource *, uint64_t, _QWORD *))(*(_QWORD *)this + 16))(this, a2, v8);
  v4 = v8[0];
  if (v8[0])
  {
    v5 = *(unsigned int *)(v8[0] - 4);
    if ((_DWORD)v5)
    {
      v6 = (WTF **)v8[0];
      do
      {
        v7 = *v6;
        if (*v6 != (WTF *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
              WTF::fastFree(v7, v3);
            else
              --*(_DWORD *)v7;
          }
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    return WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return result;
}

WebCore::RenderElement *WebCore::LegacyRenderSVGResource::fillPaintingResource(WebCore::LegacyRenderSVGResource *this, WebCore::RenderElement *a2, const WebCore::RenderStyle *a3, WebCore::Color *a4)
{
  WebCore::RenderElement *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  const WebCore::RenderStyle *v8;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  WebCore::SVGDocumentExtensions *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  _BOOL4 v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  _BOOL4 v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t *v84;
  uint64_t *v85;
  __int128 v86;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 1944)
                             + 248)
                 + 1148) & 0x10) != 0)
  {
    v4 = (WebCore::RenderElement *)WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(this);
    WebCore::StyleColor::StyleColor((uint64_t)&v83, 0xFF000000);
    v57 = (_QWORD *)WebCore::StyleColor::absoluteColor((uint64_t)&v83);
    WebCore::Color::operator=((unint64_t *)v4 + 1, v57);
    WebCore::StyleColor::~StyleColor((WebCore::StyleColor *)&v83);
    return v4;
  }
  v4 = a2;
  v5 = *((_QWORD *)a2 + 7);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(unsigned __int8 *)(v6 + 56);
  if (v7 == 1)
    return 0;
  v8 = a3;
  v81 = 0;
  if (v7 <= 5 && ((1 << v7) & 0x35) != 0)
  {
    v82 = *((_QWORD *)a2 + 4) + 328;
    *(_QWORD *)&v83 = &v82;
    *((_QWORD *)&v83 + 1) = &v82;
    v84 = &v82;
    v85 = &v82;
    v13 = *(unsigned int *)(v6 + 16);
    if ((_DWORD)v13 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_87;
    }
    *(_QWORD *)&v86 = &v83;
    ((void (*)(unint64_t *__return_ptr, __int128 *, uint64_t, const WebCore::RenderStyle *, WebCore::Color *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v13])(&v80, &v86, v6 + 8, a3, a4);
    v14 = v81;
    if ((v81 & 0x8000000000000) != 0)
    {
      if ((v80 & 0x8000000000000) == 0)
        goto LABEL_23;
      v83 = *(_OWORD *)((v81 & 0xFFFFFFFFFFFFLL) + 4);
      v86 = *(_OWORD *)((v80 & 0xFFFFFFFFFFFFLL) + 4);
      v71 = WebCore::operator==<float,4ul>((float *)&v83, (float *)&v86);
      v14 = v81;
      if (!v71 || HIBYTE(v81) != HIBYTE(v80) || BYTE6(v81) != BYTE6(v80))
        goto LABEL_23;
      v14 = v80;
    }
    else if (v81 != v80 || (v80 & 0x8000000000000) != 0)
    {
LABEL_23:
      if ((v14 & 0x8000000000000) != 0)
      {
        v68 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        do
        {
          v69 = __ldaxr(v68);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v68));
        if (!v70)
        {
          atomic_store(1u, v68);
          WTF::fastFree((WTF *)v68, a2);
        }
      }
      v81 = v80;
      goto LABEL_8;
    }
    if ((v14 & 0x8000000000000) != 0)
    {
      v72 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, a2);
      }
    }
  }
LABEL_8:
  if ((*((_DWORD *)v4 + 11) & 0xC00) == 0x800)
  {
    v51 = *(_QWORD *)(v5 + 16);
    if (*(unsigned __int8 *)(v51 + 57) <= 1u)
    {
      WebCore::RenderStyle::colorResolvingCurrentColor(v4, (const WebCore::StyleColor *)(v51 + 24), 0);
      v52 = v83;
      if ((v83 & 0x4000000000000) != 0)
      {
        if ((v81 & 0x8000000000000) != 0)
          v53 = *(float *)((v81 & 0xFFFFFFFFFFFFLL) + 0x10);
        else
          v53 = (float)v81 / 255.0;
        WebCore::Color::colorWithAlpha((uint64_t)&v83, v53, (uint64_t *)&v86);
        WebCore::Color::operator=(&v81, &v86);
        if ((v86 & 0x8000000000000) != 0)
        {
          v76 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            atomic_store(1u, v76);
            WTF::fastFree((WTF *)v76, a2);
          }
        }
        v52 = v83;
      }
      if ((v52 & 0x8000000000000) != 0)
      {
        v54 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          atomic_store(1u, v54);
          WTF::fastFree((WTF *)v54, a2);
        }
      }
    }
  }
  v4 = (WebCore::RenderElement *)WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource;
  if (!WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource)
  {
    v4 = (WebCore::RenderElement *)WTF::fastMalloc((WTF *)0x10);
    WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource = (uint64_t)WebCore::LegacyRenderSVGResourceSolidColor::LegacyRenderSVGResourceSolidColor(v4);
  }
  if (v7 <= 2)
  {
    if ((v81 & 0x4000000000000) == 0)
    {
      v58 = *((_QWORD *)this + 4);
      if (v58)
      {
        v59 = *(_QWORD *)(v58 + 8);
        if (v59)
        {
          v60 = *(_QWORD *)(v59 + 136);
          ++*(_DWORD *)v60;
          *(_QWORD *)&v83 = v60;
          WebCore::RenderStyle::colorResolvingCurrentColor((WebCore::LegacyRenderSVGResource *)((char *)this + 80), (const WebCore::StyleColor *)(*(_QWORD *)(v60 + 16) + 8), 0);
          WebCore::Color::operator=(&v81, &v86);
          if ((v86 & 0x8000000000000) != 0)
          {
            v36 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
            do
            {
              v75 = __ldaxr(v36);
              v38 = --v75 == 0;
            }
            while (__stlxr(v75, v36));
LABEL_118:
            if (v38)
            {
              atomic_store(1u, v36);
              WTF::fastFree((WTF *)v36, v35);
            }
          }
LABEL_85:
          WTF::Ref<WebCore::SVGRenderStyle,WTF::RawPtrTraits<WebCore::SVGRenderStyle>,WTF::DefaultRefDerefTraits<WebCore::SVGRenderStyle>>::~Ref((WebCore::SVGRenderStyle **)&v83, v35);
          goto LABEL_26;
        }
      }
LABEL_16:
      v4 = 0;
      goto LABEL_17;
    }
LABEL_26:
    v8 = (WebCore::RenderElement *)((char *)v4 + 8);
    goto LABEL_27;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if ((*(_QWORD *)(v11[85] + 680) & 0x800000000000) != 0 || (*(_WORD *)((_BYTE *)this + 69) & 0x1000) == 0)
    goto LABEL_14;
  if (!v11[226])
  {
    v79 = v7;
    v40 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v40 = 0;
    v41 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v11);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
    *(_QWORD *)(v40 + 8) = v41;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v43 = 0;
    *(_QWORD *)(v40 + 48) = v43;
    *(_QWORD *)(v40 + 56) = 0;
    *(_QWORD *)(v40 + 64) = 0;
    v44 = v11[66];
    if (!v44)
      goto LABEL_69;
    v45 = *(_QWORD *)(v44 + 8);
    if (v45
      && (v46 = *(_QWORD *)(v45 + 24)) != 0
      && (v47 = *(_QWORD *)(v46 + 8)) != 0
      && (*(_WORD *)(v47 + 658) & 4) != 0)
    {
      v48 = *(_BYTE *)(v47 + 545) == 0;
    }
    else
    {
LABEL_69:
      v48 = 1;
    }
    *(_BYTE *)(v40 + 72) = v48;
    v49 = (WebCore::SVGDocumentExtensions *)v11[226];
    v11[226] = v40;
    v7 = v79;
    if (v49)
    {
      WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v49, a2);
      if (*(_DWORD *)v50)
      {
        *((_OWORD *)v50 + 3) = 0u;
        *((_OWORD *)v50 + 4) = 0u;
        *((_OWORD *)v50 + 1) = 0u;
        *((_OWORD *)v50 + 2) = 0u;
        *(_OWORD *)v50 = 0u;
      }
      else
      {
        WTF::fastFree(v50, a2);
      }
      v7 = v79;
    }
  }
  v20 = **(_QWORD **)(v11[226] + 48);
  if (!v20)
    goto LABEL_14;
  v21 = *(_DWORD *)(v20 - 8);
  v22 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = v21 & ((v24 >> 31) ^ v24);
  for (i = 1; ; ++i)
  {
    v27 = v25;
    v28 = *(_QWORD *)(v20 + 16 * v25);
    if (v28 != -1)
    {
      if (!v28)
        goto LABEL_14;
      if (*(WebCore::LegacyRenderSVGResource **)(v28 + 8) == this)
        break;
    }
    v25 = (v27 + i) & v21;
  }
  v29 = *(_QWORD *)(v20 + 16 * v27 + 8);
  if (!v29)
  {
LABEL_14:
    if (v7 != 3
      && WebCore::inheritColorFromParentStyleIfNeeded(this, (WebCore::RenderElement *)1, (uint64_t)&v81, a4))
    {
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  v30 = *(uint64_t **)(v29 + 16);
  if (!v30 || (v31 = *v30) == 0 || (v39 = *(_QWORD *)(v31 + 8)) == 0)
  {
    if ((v81 & 0x4000000000000) == 0)
    {
      v32 = *((_QWORD *)this + 4);
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 8);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 136);
          ++*(_DWORD *)v34;
          *(_QWORD *)&v83 = v34;
          WebCore::RenderStyle::colorResolvingCurrentColor((WebCore::LegacyRenderSVGResource *)((char *)this + 80), (const WebCore::StyleColor *)(*(_QWORD *)(v34 + 16) + 8), 0);
          WebCore::Color::operator=(&v81, &v86);
          if ((v86 & 0x8000000000000) != 0)
          {
            v36 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
            do
            {
              v37 = __ldaxr(v36);
              v38 = --v37 == 0;
            }
            while (__stlxr(v37, v36));
            goto LABEL_118;
          }
          goto LABEL_85;
        }
      }
      goto LABEL_16;
    }
    goto LABEL_26;
  }
  v4 = (WebCore::RenderElement *)(v39 + 216);
LABEL_27:
  v15 = *(_QWORD *)v8;
  if ((*(_QWORD *)v8 & 0x8000000000000) != 0)
  {
    if ((v81 & 0x8000000000000) == 0)
      goto LABEL_32;
    v83 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
    v86 = *(_OWORD *)((v81 & 0xFFFFFFFFFFFFLL) + 4);
    v67 = WebCore::operator==<float,4ul>((float *)&v83, (float *)&v86);
    v15 = *(_QWORD *)v8;
    if (!v67 || HIBYTE(v15) != HIBYTE(v81) || BYTE6(v15) != BYTE6(v81))
      goto LABEL_32;
  }
  else if (v15 != v81 || (v81 & 0x8000000000000) != 0)
  {
LABEL_32:
    if ((v15 & 0x8000000000000) == 0)
    {
LABEL_33:
      v17 = v81;
      *(_QWORD *)v8 = v81;
      if ((v17 & 0x8000000000000) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      goto LABEL_17;
    }
LABEL_87:
    v61 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, v61);
      WTF::fastFree((WTF *)v61, a2);
    }
    goto LABEL_33;
  }
LABEL_17:
  if ((v81 & 0x8000000000000) != 0)
  {
    v64 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFLL);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      WTF::fastFree((WTF *)v64, a2);
    }
  }
  return v4;
}

WebCore::RenderElement *WebCore::LegacyRenderSVGResource::strokePaintingResource(WebCore::LegacyRenderSVGResource *this, WebCore::RenderElement *a2, const WebCore::RenderStyle *a3, WebCore::Color *a4)
{
  WebCore::RenderElement *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  const WebCore::RenderStyle *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _BOOL4 v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t *v63;
  __int128 v64;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 1944)
                             + 248)
                 + 1148) & 0x10) != 0)
    return 0;
  v4 = a2;
  v5 = *((_QWORD *)a2 + 7);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(unsigned __int8 *)(v6 + 80);
  if (v7 == 1)
    return 0;
  v8 = a3;
  v59 = 0;
  if (v7 > 5 || ((1 << v7) & 0x35) == 0)
    goto LABEL_8;
  v60 = *((_QWORD *)a2 + 4) + 328;
  *(_QWORD *)&v61 = &v60;
  *((_QWORD *)&v61 + 1) = &v60;
  v62 = &v60;
  v63 = &v60;
  v19 = *(unsigned int *)(v6 + 16);
  if ((_DWORD)v19 != -1)
  {
    *(_QWORD *)&v64 = &v61;
    ((void (*)(unint64_t *__return_ptr, __int128 *, uint64_t, const WebCore::RenderStyle *, WebCore::Color *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v19])(&v58, &v64, v6 + 8, a3, a4);
    v20 = v59;
    if ((v59 & 0x8000000000000) != 0)
    {
      if ((v58 & 0x8000000000000) == 0)
        goto LABEL_32;
      v61 = *(_OWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 4);
      v64 = *(_OWORD *)((v58 & 0xFFFFFFFFFFFFLL) + 4);
      v50 = WebCore::operator==<float,4ul>((float *)&v61, (float *)&v64);
      v20 = v59;
      if (!v50 || HIBYTE(v59) != HIBYTE(v58) || BYTE6(v59) != BYTE6(v58))
        goto LABEL_32;
      v20 = v58;
    }
    else if (v59 != v58 || (v58 & 0x8000000000000) != 0)
    {
LABEL_32:
      if ((v20 & 0x8000000000000) != 0)
      {
        v47 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, v47);
          WTF::fastFree((WTF *)v47, a2);
        }
      }
      v59 = v58;
      goto LABEL_8;
    }
    if ((v20 & 0x8000000000000) != 0)
    {
      v51 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, a2);
      }
    }
LABEL_8:
    if ((*((_DWORD *)v4 + 11) & 0xC00) == 0x800)
    {
      v31 = *(_QWORD *)(v5 + 24);
      if (*(unsigned __int8 *)(v31 + 81) <= 1u)
      {
        WebCore::RenderStyle::colorResolvingCurrentColor(v4, (const WebCore::StyleColor *)(v31 + 24), 0);
        v32 = v61;
        if ((v61 & 0x4000000000000) != 0)
        {
          if ((v59 & 0x8000000000000) != 0)
            v33 = *(float *)((v59 & 0xFFFFFFFFFFFFLL) + 0x10);
          else
            v33 = (float)v59 / 255.0;
          WebCore::Color::colorWithAlpha((uint64_t)&v61, v33, (uint64_t *)&v64);
          WebCore::Color::operator=(&v59, &v64);
          if ((v64 & 0x8000000000000) != 0)
          {
            v55 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              atomic_store(1u, v55);
              WTF::fastFree((WTF *)v55, a2);
            }
          }
          v32 = v61;
        }
        if ((v32 & 0x8000000000000) != 0)
        {
          v34 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, a2);
          }
        }
      }
    }
    v4 = (WebCore::RenderElement *)WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource;
    if (!WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource)
    {
      v4 = (WebCore::RenderElement *)WTF::fastMalloc((WTF *)0x10);
      WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource = (uint64_t)WebCore::LegacyRenderSVGResourceSolidColor::LegacyRenderSVGResourceSolidColor(v4);
    }
    if (v7 <= 2)
    {
      if ((v59 & 0x4000000000000) != 0)
        goto LABEL_17;
      v21 = *((_QWORD *)this + 4);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 136);
          ++*(_DWORD *)v23;
          *(_QWORD *)&v61 = v23;
          WebCore::RenderStyle::colorResolvingCurrentColor((WebCore::LegacyRenderSVGResource *)((char *)this + 80), (const WebCore::StyleColor *)(*(_QWORD *)(v23 + 24) + 8), 0);
          WebCore::Color::operator=(&v59, &v64);
          if ((v64 & 0x8000000000000) == 0)
          {
LABEL_45:
            WTF::Ref<WebCore::SVGRenderStyle,WTF::RawPtrTraits<WebCore::SVGRenderStyle>,WTF::DefaultRefDerefTraits<WebCore::SVGRenderStyle>>::~Ref((WebCore::SVGRenderStyle **)&v61, v24);
            goto LABEL_17;
          }
          v25 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
          do
          {
            v26 = __ldaxr(v25);
            v27 = --v26 == 0;
          }
          while (__stlxr(v26, v25));
LABEL_95:
          if (v27)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v24);
          }
          goto LABEL_45;
        }
      }
    }
    else if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                     + 680)
                         + 680) & 0x800000000000) != 0
           || (v11 = WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2)) == 0)
    {
      if (v7 != 3 && WebCore::inheritColorFromParentStyleIfNeeded(this, 0, (uint64_t)&v59, a4))
        goto LABEL_17;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v18 = *(_QWORD *)(v13 + 8);
          if (v18)
          {
            v4 = (WebCore::RenderElement *)(v18 + 216);
LABEL_18:
            v14 = *(_QWORD *)v8;
            if ((*(_QWORD *)v8 & 0x8000000000000) != 0)
            {
              if ((v59 & 0x8000000000000) != 0)
              {
                v61 = *(_OWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 4);
                v64 = *(_OWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 4);
                v40 = WebCore::operator==<float,4ul>((float *)&v61, (float *)&v64);
                v14 = *(_QWORD *)v8;
                if (v40 && HIBYTE(v14) == HIBYTE(v59) && BYTE6(v14) == BYTE6(v59))
                  goto LABEL_24;
              }
            }
            else if (v14 == v59 && (v59 & 0x8000000000000) == 0)
            {
              goto LABEL_24;
            }
            if ((v14 & 0x8000000000000) != 0)
            {
              v44 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                atomic_store(1u, v44);
                WTF::fastFree((WTF *)v44, a2);
              }
            }
            v41 = v59;
            *(_QWORD *)v8 = v59;
            if ((v41 & 0x8000000000000) != 0)
            {
              v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 + 1, v42));
            }
LABEL_24:
            v16 = v59;
            if ((v59 & 0x8000000000000) == 0)
              return v4;
            goto LABEL_61;
          }
        }
      }
      if ((v59 & 0x4000000000000) != 0)
      {
LABEL_17:
        v8 = (WebCore::RenderElement *)((char *)v4 + 8);
        goto LABEL_18;
      }
      v28 = *((_QWORD *)this + 4);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 136);
          ++*(_DWORD *)v30;
          *(_QWORD *)&v61 = v30;
          WebCore::RenderStyle::colorResolvingCurrentColor((WebCore::LegacyRenderSVGResource *)((char *)this + 80), (const WebCore::StyleColor *)(*(_QWORD *)(v30 + 24) + 8), 0);
          WebCore::Color::operator=(&v59, &v64);
          if ((v64 & 0x8000000000000) == 0)
            goto LABEL_45;
          v25 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
          do
          {
            v54 = __ldaxr(v25);
            v27 = --v54 == 0;
          }
          while (__stlxr(v54, v25));
          goto LABEL_95;
        }
      }
    }
    v4 = 0;
    goto LABEL_24;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
  v37 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
  do
  {
    v38 = __ldaxr(v37);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v37));
  if (!v39)
  {
    atomic_store(1u, v37);
    WTF::fastFree((WTF *)v37, a2);
  }
  return v4;
}

_QWORD *WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(WebCore::LegacyRenderSVGResource *this)
{
  _QWORD *result;
  _QWORD *v2;

  result = (_QWORD *)WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource;
  if (!WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource)
  {
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    result = WebCore::LegacyRenderSVGResourceSolidColor::LegacyRenderSVGResourceSolidColor(v2);
    WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(void)::s_sharedSolidPaintingResource = (uint64_t)result;
  }
  return result;
}

void WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidation(WebCore::LegacyRenderSVGResource *this, WebCore::RenderObject *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded((uint64_t)this, (uint64_t *)a2, (uint64_t)v7);
  v3 = v7[0];
  if (v7[0])
  {
    v4 = *(unsigned int *)(v7[0] - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)v7[0];
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, v2);
            else
              --*(_DWORD *)v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
}

void WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int i;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  _BYTE *v31;
  _DWORD *v32;
  uint64_t j;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  WebCore::RenderElement *v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  int n;
  uint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  int m;
  uint64_t v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  WTF *v89;
  uint64_t v90;
  int v91;
  int v92;
  WTF *v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  WebCore::SVGDocumentExtensions *v105;
  WTF *v106;
  WebCore::LegacyRenderSVGResourceFilter *v107;
  int v108;
  unsigned int v109;
  WTF **v110;
  unsigned int v112;
  WTF *v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  WebCore::SVGDocumentExtensions *v126;
  WTF *v127;
  WebCore::LegacyRenderSVGResourceFilter *v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t k;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  WTF *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  WTF **v147;
  WTF **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  WTF *v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  WTF **v160;
  WTF **v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  uint64_t v168;
  char v169;
  WTF *v170;
  int v171;
  unsigned int v172;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655159CLL);
  }
  v4 = a2;
  if (!a3)
    goto LABEL_26;
  v6 = *(_DWORD *)(a3 + 12);
  v7 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_8;
  v8 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_5;
  v36 = *(_DWORD *)(v8 - 4);
  if (!v36)
    goto LABEL_38;
  v108 = 0;
  v109 = v36 - 1;
  do
  {
    v110 = (WTF **)(v8 + 8 * v109);
    if ((unint64_t)*v110 + 1 >= 2 && !*((_QWORD *)*v110 + 1))
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v110, a2);
      ++v108;
    }
  }
  while ((unint64_t)v109--);
  v8 = *(_QWORD *)a3;
  if (v108)
  {
    *(_DWORD *)(v8 - 16) += v108;
    v134 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
      v135 = *(_DWORD *)(v134 - 12);
    else
      v135 = 0;
    *(_DWORD *)(v134 - 12) = v135 - v108;
    v8 = *(_QWORD *)a3;
  }
  if (v8)
  {
    v112 = *(_DWORD *)(v8 - 4);
    if (v112 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v112)
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a3);
      v8 = *(_QWORD *)a3;
      *(_DWORD *)(a3 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_6;
      }
LABEL_39:
      v9 = *(_DWORD *)(v8 - 12);
      v10 = 0x7FFFFFFF;
      if (v9 >= 0x7FFFFFFF)
        goto LABEL_7;
      goto LABEL_6;
    }
LABEL_38:
    *(_DWORD *)(a3 + 8) = 0;
    goto LABEL_39;
  }
LABEL_5:
  v9 = 0;
  *(_DWORD *)(a3 + 8) = 0;
LABEL_6:
  v10 = v9;
LABEL_7:
  *(_DWORD *)(a3 + 12) = 2 * v10;
LABEL_8:
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a1;
    v89 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
      {
        WTF::fastFree(v89, v88);
        v11 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v89;
      }
    }
  }
  *(_DWORD *)v11 += 2;
  v12 = *(_QWORD *)a3;
  if (*(_QWORD *)a3
    || (v13 = WTF::fastZeroedMalloc((WTF *)0x50),
        *(_QWORD *)a3 = v13 + 16,
        *(_DWORD *)(v13 + 12) = 8,
        *(_DWORD *)(*(_QWORD *)a3 - 8) = 7,
        *(_DWORD *)(*(_QWORD *)a3 - 16) = 0,
        *(_DWORD *)(*(_QWORD *)a3 - 12) = 0,
        (v12 = *(_QWORD *)a3) != 0))
  {
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
  }
  a2 = 0;
  v15 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = (v17 >> 31) ^ v17;
  for (i = 1; ; ++i)
  {
    v20 = v18 & v14;
    v21 = (uint64_t *)(v12 + 8 * v20);
    v22 = *v21;
    if (!*v21)
    {
      if (a2)
      {
        *a2 = 0;
        --*(_DWORD *)(*(_QWORD *)a3 - 16);
        *a2 = v11;
      }
      else
      {
        *v21 = v11;
        a2 = (uint64_t *)(v12 + 8 * v20);
      }
      v23 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        v24 = *(_DWORD *)(v23 - 12) + 1;
      else
        v24 = 1;
      *(_DWORD *)(v23 - 12) = v24;
      v25 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27)
          goto LABEL_22;
      }
      else if (3 * v28 > 4 * v27)
      {
LABEL_22:
        v29 = 1;
        goto LABEL_23;
      }
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand((uint64_t *)a3, (WTF **)a2);
      goto LABEL_22;
    }
    if (v22 != -1)
    {
      v21 = a2;
      if (v22 == v11)
        break;
    }
    v18 = i + v20;
    a2 = v21;
  }
  if (*(_DWORD *)v11 == 1)
  {
    WTF::fastFree((WTF *)v11, a2);
    v29 = 0;
  }
  else
  {
    v29 = 0;
    --*(_DWORD *)v11;
  }
LABEL_23:
  if (*(_DWORD *)v11 == 1)
    WTF::fastFree((WTF *)v11, a2);
  else
    --*(_DWORD *)v11;
  if (!v29)
    return;
LABEL_26:
  if ((_DWORD)v4
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 3405))
  {
    v30 = *(unsigned __int8 *)(a1 + 46);
    if (v30 != 103)
    {
      v31 = (_BYTE *)(a1 + 45);
      if ((*(_BYTE *)(a1 + 45) & 2) == 0)
      {
        v32 = (_DWORD *)(a1 + 16);
        ++*(_DWORD *)(a1 + 16);
        for (j = *(_QWORD *)(a1 + 32); j; j = *(_QWORD *)(v34 + 32))
        {
          v34 = *(_QWORD *)(j + 8);
          if (!v34)
            break;
          if (*(_BYTE *)(v34 + 46) == 103)
          {
            v35 = 0;
            goto LABEL_42;
          }
        }
        v35 = 0;
LABEL_43:
        v37 = *(_DWORD *)(a1 + 20);
        if ((v37 & 8) == 0)
        {
          *(_DWORD *)(a1 + 20) = v37 | 8;
          v38 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a1, 0);
          WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)a1, v38);
          if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
          {
            if ((*v31 & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1965512F4);
            }
            v90 = *(_QWORD *)(a1 + 144);
            if (v90)
            {
              v91 = *(_DWORD *)(v90 + 8) + 1;
              *(_DWORD *)(v90 + 8) = v91;
            }
            else
            {
              v91 = MEMORY[8];
            }
            *(_QWORD *)(v90 + 24) = *(_QWORD *)(v90 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v91)
            {
              __break(0xC471u);
              JUMPOUT(0x196551320);
            }
            *(_DWORD *)(v90 + 8) = v91 - 1;
          }
        }
        goto LABEL_45;
      }
      v35 = 0;
LABEL_140:
      v92 = *(_DWORD *)(a1 + 20);
      if ((v92 & 8) == 0)
      {
        *(_DWORD *)(a1 + 20) = v92 | 8;
        if ((v92 & 0x8000) != 0)
          WebCore::RenderObject::setLayerNeedsFullRepaint(a1);
      }
      goto LABEL_47;
    }
    v32 = (_DWORD *)(a1 + 16);
    v129 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v129 + 1;
    if (*(_BYTE *)(a1 + 241))
    {
      v146 = *(_DWORD *)(a1 + 20);
      v35 = a1;
      if ((v146 & 8) == 0)
      {
        *(_DWORD *)(a1 + 20) = v146 | 8;
        v35 = a1;
        if ((v146 & 0x8000) != 0)
        {
          WebCore::RenderObject::setLayerNeedsFullRepaint(a1);
          v35 = a1;
        }
      }
      goto LABEL_48;
    }
    v31 = (_BYTE *)(a1 + 45);
    v35 = a1;
    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
      goto LABEL_140;
    *v32 = v129 + 2;
    v35 = a1;
    v34 = a1;
LABEL_42:
    if (!*(_BYTE *)(v34 + 241))
      goto LABEL_43;
    v130 = v35;
    v131 = *(_DWORD *)(a1 + 20);
    if ((v131 & 8) == 0)
    {
      *(_DWORD *)(a1 + 20) = v131 | 8;
      if ((v131 & 0x8000) != 0)
        WebCore::RenderObject::setLayerNeedsFullRepaint(a1);
    }
    v132 = *(_QWORD *)(a1 + 32);
    if (v132)
      goto LABEL_306;
LABEL_214:
    for (k = 0; k != v34; k = *(_QWORD *)(v132 + 8))
    {
      v164 = *(_DWORD *)(k + 20);
      if ((v164 & 8) == 0)
      {
        *(_DWORD *)(k + 20) = v164 | 8;
        if ((v164 & 0x8000) != 0)
          WebCore::RenderObject::setLayerNeedsFullRepaint(k);
      }
      v132 = *(_QWORD *)(k + 32);
      if (!v132)
        goto LABEL_214;
LABEL_306:
      ;
    }
    v163 = *(_DWORD *)(v34 + 20);
    if ((v163 & 8) == 0)
    {
      *(_DWORD *)(v34 + 20) = v163 | 8;
      if ((v163 & 0x8000) != 0)
        WebCore::RenderObject::setLayerNeedsFullRepaint(v34);
    }
    v35 = v130;
LABEL_45:
    if (!*v32)
    {
      __break(0xC471u);
      JUMPOUT(0x1965511A0);
    }
    --*v32;
LABEL_47:
    if (v30 == 103)
    {
LABEL_48:
      v39 = *(_DWORD *)(v35 + 16);
      if (!v39)
      {
        __break(0xC471u);
        JUMPOUT(0x1965511C0);
      }
      *(_DWORD *)(v35 + 16) = v39 - 1;
    }
  }
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    ++*(_DWORD *)(a1 + 16);
    if ((*(_WORD *)(a1 + 69) & 0x1000) != 0)
    {
      v71 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8);
      if ((*(_QWORD *)(v71[85] + 680) & 0x800000000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196551914);
      }
      if (!v71[226])
      {
        v117 = WTF::fastMalloc((WTF *)0x50);
        *(_DWORD *)v117 = 0;
        v118 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v71);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 + 1, v118));
        *(_QWORD *)(v117 + 8) = v118;
        *(_OWORD *)(v117 + 16) = 0u;
        *(_OWORD *)(v117 + 32) = 0u;
        v120 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v120 = 0;
        *(_QWORD *)(v117 + 48) = v120;
        *(_QWORD *)(v117 + 56) = 0;
        *(_QWORD *)(v117 + 64) = 0;
        v121 = v71[66];
        if (!v121)
          goto LABEL_203;
        v122 = *(_QWORD *)(v121 + 8);
        if (v122
          && (v123 = *(_QWORD *)(v122 + 24)) != 0
          && (v124 = *(_QWORD *)(v123 + 8)) != 0
          && (*(_WORD *)(v124 + 658) & 4) != 0)
        {
          v125 = *(_BYTE *)(v124 + 545) == 0;
        }
        else
        {
LABEL_203:
          v125 = 1;
        }
        *(_BYTE *)(v117 + 72) = v125;
        v126 = (WebCore::SVGDocumentExtensions *)v71[226];
        v71[226] = v117;
        if (v126)
        {
          WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v126, a2);
          if (*(_DWORD *)v127)
          {
            *((_OWORD *)v127 + 3) = 0u;
            *((_OWORD *)v127 + 4) = 0u;
            *((_OWORD *)v127 + 1) = 0u;
            *((_OWORD *)v127 + 2) = 0u;
            *(_OWORD *)v127 = 0u;
          }
          else
          {
            WTF::fastFree(v127, a2);
          }
        }
      }
      v72 = **(_QWORD **)(v71[226] + 48);
      if (v72)
      {
        v73 = *(_DWORD *)(v72 - 8);
        v74 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
        v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
        v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
        v77 = v73 & ((v76 >> 31) ^ v76);
        for (m = 1; ; ++m)
        {
          v79 = v77;
          v80 = *(_QWORD *)(v72 + 16 * v77);
          if (v80 != -1)
          {
            if (!v80)
              goto LABEL_52;
            if (*(_QWORD *)(v80 + 8) == a1)
              break;
          }
          v77 = (v79 + m) & v73;
        }
        v81 = *(uint64_t ***)(v72 + 16 * v79 + 8);
        if (v81)
        {
          v82 = *v81;
          if (*v81)
          {
            v83 = v82[1];
            if (!v83
              || (v128 = *(WebCore::LegacyRenderSVGResourceFilter **)(v83 + 8)) == 0
              || (WebCore::LegacyRenderSVGResourceFilter::removeClientFromCache(v128, (WebCore::RenderElement *)a1, 1),
                  (v82 = *v81) != 0))
            {
              v84 = v82[2];
              if (!v84
                || (v162 = *(WTF ***)(v84 + 8)) == 0
                || (WebCore::LegacyRenderSVGResourceMasker::removeClientFromCache(v162, (WebCore::RenderElement *)a1, 1),
                    (v82 = *v81) != 0))
              {
                v85 = *v82;
                if (v85)
                {
                  v86 = *(_QWORD *)(v85 + 8);
                  if (v86)
                  {
                    v87 = *(_QWORD *)(v86 + 304);
                    if (v87)
                    {
                      v160 = (WTF **)WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>,WebCore::RenderObject const*>(*(_QWORD *)(v86 + 304), a1);
                      if (v160 && v160 != (WTF **)(v87 + 16 * *(unsigned int *)(v87 - 4)))
                        WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::removeWithoutEntryConsistencyCheck((WTF **)(v86 + 304), v160);
                    }
                    WebCore::RenderObject::invalidateCachedBoundaries(a1);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_52:
    if ((*(_BYTE *)(a1 + 45) & 1) == 0)
    {
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      if (v40)
      {
        v41 = *(_WORD *)(v40 + 28);
        if ((v41 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19655115CLL);
        }
        v42 = *(_DWORD *)(v40 + 24);
        *(_DWORD *)(v40 + 24) = v42 + 2;
        if ((v41 & 0x20) != 0)
        {
          v70 = *(_QWORD *)(v40 + 120);
          if (v70)
          {
            v166 = v40;
            WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(v70, a2, (uint64_t)&v170);
            v114 = v170;
            if (v172)
            {
              v150 = 8 * v172;
              do
              {
                a2 = *(uint64_t **)v114;
                v151 = *(_QWORD *)(*(_QWORD *)v114 + 64) & 0xFFFFFFFFFFFFLL;
                if (v151)
                {
                  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v114 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196551A0CLL);
                  }
                  if ((byte_1ECE84B0A & 1) == 0)
                  {
                    qword_1ECE84B20[1] = 0;
                    qword_1ECE84B20[0] = 0;
                    byte_1ECE84B0A = 1;
                    a2 = *(uint64_t **)v114;
                  }
                  WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGElement>((uint64_t)qword_1ECE84B20, a2, (uint64_t)&v167);
                  if (v169)
                  {
                    WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(v151, v4, a3);
                    WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>((uint64_t)qword_1ECE84B20, *(_QWORD **)v114);
                  }
                }
                v114 = (WTF *)((char *)v114 + 8);
                v150 -= 8;
              }
              while (v150);
              v114 = v170;
              if (v172)
              {
                v152 = 8 * v172;
                do
                {
                  v153 = *(uint64_t **)v114;
                  *(_QWORD *)v114 = 0;
                  if (v153)
                  {
                    if (*((_DWORD *)v153 + 6) == 2)
                    {
                      if ((*((_WORD *)v153 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v153);
                    }
                    else
                    {
                      *((_DWORD *)v153 + 6) -= 2;
                    }
                  }
                  v114 = (WTF *)((char *)v114 + 8);
                  v152 -= 8;
                }
                while (v152);
                v114 = v170;
              }
            }
            if (v114)
            {
              v170 = 0;
              v171 = 0;
              WTF::fastFree(v114, a2);
            }
            v40 = v166;
            v115 = *(_QWORD *)(v166 + 120);
            if (v115)
            {
              v167 = 0;
              v168 = 0;
              WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::SVGResourceElementClient&)#1},WTF::Vector<WTF::WeakPtr<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((unsigned int **)&v167, (_DWORD *)(v115 + 24));
              v116 = v167;
              if (HIDWORD(v168))
              {
                v154 = 8 * HIDWORD(v168);
                do
                {
                  if (*(_QWORD *)v116)
                  {
                    v155 = *(_QWORD *)(*(_QWORD *)v116 + 8);
                    if (v155)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v155 + 16))(v155, v166);
                  }
                  v116 = (WTF *)((char *)v116 + 8);
                  v154 -= 8;
                }
                while (v154);
                v116 = v167;
                if (HIDWORD(v168))
                {
                  v156 = (WTF *)((char *)v167 + 8 * HIDWORD(v168));
                  do
                  {
                    v157 = *(unsigned int **)v116;
                    *(_QWORD *)v116 = 0;
                    if (v157)
                    {
                      do
                      {
                        v158 = __ldaxr(v157);
                        v159 = v158 - 1;
                      }
                      while (__stlxr(v159, v157));
                      if (!v159)
                      {
                        atomic_store(1u, v157);
                        WTF::fastFree((WTF *)v157, a2);
                      }
                    }
                    v116 = (WTF *)((char *)v116 + 8);
                  }
                  while (v116 != v156);
                  v116 = v167;
                }
              }
              v40 = v166;
              if (v116)
              {
                v167 = 0;
                LODWORD(v168) = 0;
                WTF::fastFree(v116, a2);
                v40 = v166;
              }
            }
          }
          v42 = *(_DWORD *)(v40 + 24) - 2;
          if (*(_DWORD *)(v40 + 24) == 2)
            goto LABEL_99;
LABEL_57:
          *(_DWORD *)(v40 + 24) = v42;
        }
        else
        {
          if (v42)
            goto LABEL_57;
LABEL_99:
          if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v40);
        }
      }
    }
    v43 = *(_DWORD *)(a1 + 16);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x19655113CLL);
    }
    *(_DWORD *)(a1 + 16) = v43 - 1;
  }
  v44 = *(_QWORD *)(a1 + 32);
  if (!v44)
    return;
  v45 = *(_QWORD *)(v44 + 8);
  if (!v45)
    return;
  while (2)
  {
    if ((*(_WORD *)(v45 + 69) & 0x1000) != 0)
    {
      v51 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 24) + 8) + 40) + 8);
      if ((*(_QWORD *)(v51[85] + 680) & 0x800000000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196551748);
      }
      if (!v51[226])
      {
        v96 = WTF::fastMalloc((WTF *)0x50);
        *(_DWORD *)v96 = 0;
        v97 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v51);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 + 1, v97));
        *(_QWORD *)(v96 + 8) = v97;
        *(_OWORD *)(v96 + 16) = 0u;
        *(_OWORD *)(v96 + 32) = 0u;
        v99 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v99 = 0;
        *(_QWORD *)(v96 + 48) = v99;
        *(_QWORD *)(v96 + 56) = 0;
        *(_QWORD *)(v96 + 64) = 0;
        v100 = v51[66];
        if (!v100)
          goto LABEL_163;
        v101 = *(_QWORD *)(v100 + 8);
        if (v101
          && (v102 = *(_QWORD *)(v101 + 24)) != 0
          && (v103 = *(_QWORD *)(v102 + 8)) != 0
          && (*(_WORD *)(v103 + 658) & 4) != 0)
        {
          v104 = *(_BYTE *)(v103 + 545) == 0;
        }
        else
        {
LABEL_163:
          v104 = 1;
        }
        *(_BYTE *)(v96 + 72) = v104;
        v105 = (WebCore::SVGDocumentExtensions *)v51[226];
        v51[226] = v96;
        if (v105)
        {
          WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v105, a2);
          if (*(_DWORD *)v106)
          {
            *((_OWORD *)v106 + 3) = 0u;
            *((_OWORD *)v106 + 4) = 0u;
            *((_OWORD *)v106 + 1) = 0u;
            *((_OWORD *)v106 + 2) = 0u;
            *(_OWORD *)v106 = 0u;
          }
          else
          {
            WTF::fastFree(v106, a2);
          }
        }
      }
      v52 = **(_QWORD **)(v51[226] + 48);
      if (v52)
      {
        v53 = *(_DWORD *)(v52 - 8);
        v54 = (~(v45 << 32) + v45) ^ ((unint64_t)(~(v45 << 32) + v45) >> 22);
        v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
        v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
        v57 = v53 & ((v56 >> 31) ^ v56);
        for (n = 1; ; ++n)
        {
          v59 = v57;
          v60 = *(_QWORD *)(v52 + 16 * v57);
          if (v60 != -1)
          {
            if (!v60)
              goto LABEL_63;
            if (*(_QWORD *)(v60 + 8) == v45)
              break;
          }
          v57 = (v59 + n) & v53;
        }
        v61 = *(uint64_t ***)(v52 + 16 * v59 + 8);
        if (v61)
        {
          v62 = *v61;
          if (*v61)
          {
            v63 = v62[1];
            if (!v63
              || (v107 = *(WebCore::LegacyRenderSVGResourceFilter **)(v63 + 8)) == 0
              || (WebCore::LegacyRenderSVGResourceFilter::removeClientFromCache(v107, (WebCore::RenderElement *)v45, 1),
                  (v62 = *v61) != 0))
            {
              v64 = v62[2];
              if (!v64
                || (v149 = *(WTF ***)(v64 + 8)) == 0
                || (WebCore::LegacyRenderSVGResourceMasker::removeClientFromCache(v149, (WebCore::RenderElement *)v45, 1), (v62 = *v61) != 0))
              {
                v65 = *v62;
                if (v65)
                {
                  v66 = *(_QWORD *)(v65 + 8);
                  if (v66)
                  {
                    v67 = *(_QWORD *)(v66 + 304);
                    if (v67)
                    {
                      v147 = (WTF **)WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>,WebCore::RenderObject const*>(*(_QWORD *)(v66 + 304), v45);
                      if (v147 && v147 != (WTF **)(v67 + 16 * *(unsigned int *)(v67 - 4)))
                        WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::removeWithoutEntryConsistencyCheck((WTF **)(v66 + 304), v147);
                    }
                    WebCore::RenderObject::invalidateCachedBoundaries(v45);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_63:
    if ((*(_BYTE *)(v45 + 45) & 1) == 0)
    {
      v46 = *(_QWORD *)(*(_QWORD *)(v45 + 24) + 8);
      if (v46)
      {
        v47 = *(_WORD *)(v46 + 28);
        if ((v47 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1965510F0);
        }
        v48 = *(_DWORD *)(v46 + 24);
        *(_DWORD *)(v46 + 24) = v48 + 2;
        if ((v47 & 0x20) != 0)
        {
          v50 = *(_QWORD *)(v46 + 120);
          if (v50)
          {
            v165 = v46;
            WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(v50, a2, (uint64_t)&v170);
            v93 = v170;
            if (v172)
            {
              v136 = 8 * v172;
              do
              {
                a2 = *(uint64_t **)v93;
                v137 = *(_QWORD *)(*(_QWORD *)v93 + 64) & 0xFFFFFFFFFFFFLL;
                if (v137)
                {
                  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v93 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965519ECLL);
                  }
                  if ((byte_1ECE84B0A & 1) == 0)
                  {
                    qword_1ECE84B20[1] = 0;
                    qword_1ECE84B20[0] = 0;
                    byte_1ECE84B0A = 1;
                    a2 = *(uint64_t **)v93;
                  }
                  WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGElement>((uint64_t)qword_1ECE84B20, a2, (uint64_t)&v167);
                  if (v169)
                  {
                    WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(v137, v4, a3);
                    WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>((uint64_t)qword_1ECE84B20, *(_QWORD **)v93);
                  }
                }
                v93 = (WTF *)((char *)v93 + 8);
                v136 -= 8;
              }
              while (v136);
              v93 = v170;
              if (v172)
              {
                v138 = 8 * v172;
                do
                {
                  v139 = *(uint64_t **)v93;
                  *(_QWORD *)v93 = 0;
                  if (v139)
                  {
                    if (*((_DWORD *)v139 + 6) == 2)
                    {
                      if ((*((_WORD *)v139 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v139);
                    }
                    else
                    {
                      *((_DWORD *)v139 + 6) -= 2;
                    }
                  }
                  v93 = (WTF *)((char *)v93 + 8);
                  v138 -= 8;
                }
                while (v138);
                v93 = v170;
              }
            }
            if (v93)
            {
              v170 = 0;
              v171 = 0;
              WTF::fastFree(v93, a2);
            }
            v46 = v165;
            v94 = *(_QWORD *)(v165 + 120);
            if (v94)
            {
              v167 = 0;
              v168 = 0;
              WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::SVGResourceElementClient&)#1},WTF::Vector<WTF::WeakPtr<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((unsigned int **)&v167, (_DWORD *)(v94 + 24));
              v95 = v167;
              if (HIDWORD(v168))
              {
                v140 = 8 * HIDWORD(v168);
                do
                {
                  if (*(_QWORD *)v95)
                  {
                    v141 = *(_QWORD *)(*(_QWORD *)v95 + 8);
                    if (v141)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 16))(v141, v165);
                  }
                  v95 = (WTF *)((char *)v95 + 8);
                  v140 -= 8;
                }
                while (v140);
                v95 = v167;
                if (HIDWORD(v168))
                {
                  v142 = (WTF *)((char *)v167 + 8 * HIDWORD(v168));
                  do
                  {
                    v143 = *(unsigned int **)v95;
                    *(_QWORD *)v95 = 0;
                    if (v143)
                    {
                      do
                      {
                        v144 = __ldaxr(v143);
                        v145 = v144 - 1;
                      }
                      while (__stlxr(v145, v143));
                      if (!v145)
                      {
                        atomic_store(1u, v143);
                        WTF::fastFree((WTF *)v143, a2);
                      }
                    }
                    v95 = (WTF *)((char *)v95 + 8);
                  }
                  while (v95 != v142);
                  v95 = v167;
                }
              }
              v46 = v165;
              if (v95)
              {
                v167 = 0;
                LODWORD(v168) = 0;
                WTF::fastFree(v95, a2);
                v46 = v165;
              }
            }
          }
          v48 = *(_DWORD *)(v46 + 24) - 2;
          if (*(_DWORD *)(v46 + 24) == 2)
            goto LABEL_75;
LABEL_68:
          *(_DWORD *)(v46 + 24) = v48;
        }
        else
        {
          if (v48)
            goto LABEL_68;
LABEL_75:
          if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v46);
        }
      }
    }
    if ((*(_BYTE *)(v45 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v45 + 53) & 9) != 0)
    {
      v49 = *(_QWORD *)(v45 + 32);
      if (!v49)
        return;
      v45 = *(_QWORD *)(v49 + 8);
      if (!v45)
        return;
      continue;
    }
    break;
  }
  v68 = *(_QWORD *)(v45 + 216);
  ++*(_DWORD *)(v45 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v45 + 216, 1, a3);
  v69 = *(_DWORD *)(v45 + 16);
  if (!v69)
  {
    __break(0xC471u);
    JUMPOUT(0x1965514F0);
  }
  *(_DWORD *)(v45 + 16) = v69 - 1;
}

uint64_t WebCore::LegacyRenderSVGResource::fillAndStrokePathOrShape(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  int v8;
  int *v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;

  if (!a5)
  {
    if (a4)
    {
      if ((a3 & 1) != 0)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a4);
      if ((a3 & 2) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, a4);
    }
    return result;
  }
  if ((a3 & 1) != 0 && (*(_BYTE *)(a5 + 52) & 7) == 4)
  {
    v8 = *(unsigned __int8 *)(a5 + 53);
    if ((~v8 & 0x11) != 0)
    {
      if ((v8 & 1) != 0 || (v8 & 0x10) == 0)
        goto LABEL_4;
      v9 = (int *)(a5 + 16);
      ++*(_DWORD *)(a5 + 16);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 896))(a5, a2);
      v11 = *v9;
      if (!*v9)
        goto LABEL_27;
    }
    else
    {
      v9 = (int *)(a5 + 16);
      ++*(_DWORD *)(a5 + 16);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 800))(a5, a2);
      v11 = *v9;
      if (!*v9)
      {
        __break(0xC471u);
        JUMPOUT(0x196551C98);
      }
    }
    *v9 = v11 - 1;
  }
LABEL_4:
  if ((a3 & 2) != 0 && (*(_BYTE *)(a5 + 52) & 7) == 4)
  {
    v12 = *(unsigned __int8 *)(a5 + 53);
    if ((~v12 & 0x11) == 0)
    {
      ++*(_DWORD *)(a5 + 16);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 808))(a5, a2);
      v13 = *(_DWORD *)(a5 + 16);
      if (v13)
      {
LABEL_16:
        *(_DWORD *)(a5 + 16) = v13 - 1;
        return result;
      }
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x196551B90);
    }
    if ((v12 & 1) == 0 && (v12 & 0x10) != 0)
    {
      ++*(_DWORD *)(a5 + 16);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 904))(a5, a2);
      v13 = *(_DWORD *)(a5 + 16);
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x196551C78);
      }
      goto LABEL_16;
    }
  }
  return result;
}

double WebCore::LegacyRenderSVGResourceContainer::LegacyRenderSVGResourceContainer(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  int32x4_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  double result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = WebCore::RenderElement::RenderElement(a1, a2, a3, a4, 0, 12036);
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 160) = v6;
  *(_QWORD *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  *(int32x4_t *)(v5 + 192) = v6;
  *(_WORD *)(v5 + 208) = 256;
  *(_BYTE *)(v5 + 210) = 0;
  *(_QWORD *)v5 = off_1E344C220;
  *(_QWORD *)(v5 + 216) = &unk_1E344C588;
  v7 = *(_QWORD *)(a3 + 104);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v11 = *(_DWORD *)(v7 + 4);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD **)(v7 + 40);
      LODWORD(v13) = *(_DWORD *)(v7 + 52);
    }
    else
    {
      v12 = (_QWORD *)(v7 + 32);
      LODWORD(v13) = v11 >> 5;
    }
    if ((_DWORD)v13)
    {
      v13 = v13;
      while (1)
      {
        v14 = *v12;
        if (*v12 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v12 += 2;
        if (!--v13)
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      v12 = 0;
    }
    v8 = (_DWORD **)(v12 + 1);
  }
  else
  {
    v8 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v9 = *v8;
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 224) = v9;
  result = 0.0;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_WORD *)(v5 + 264) = 0;
  return result;
}

double WebCore::LegacyRenderSVGResourceClipper::LegacyRenderSVGResourceClipper(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int32x4_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  double result;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = WebCore::RenderElement::RenderElement(a1, 95, a2, a3, 0, 12036);
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v4 + 160) = v5;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(int32x4_t *)(v4 + 192) = v5;
  *(_WORD *)(v4 + 208) = 256;
  *(_BYTE *)(v4 + 210) = 0;
  v6 = *(_QWORD *)(a2 + 104);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v10 = *(_DWORD *)(v6 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD **)(v6 + 40);
      LODWORD(v12) = *(_DWORD *)(v6 + 52);
    }
    else
    {
      v11 = (_QWORD *)(v6 + 32);
      LODWORD(v12) = v10 >> 5;
    }
    if ((_DWORD)v12)
    {
      v12 = v12;
      while (1)
      {
        v13 = *v11;
        if (*v11 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v12)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v11 = 0;
    }
    v7 = (_DWORD **)(v11 + 1);
  }
  else
  {
    v7 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v7;
  if (v8)
    *v8 += 2;
  result = 0.0;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_WORD *)(v4 + 264) = 0;
  *(_QWORD *)v4 = off_1E344BE40;
  *(_QWORD *)(v4 + 216) = &unk_1E344C1D0;
  *(_QWORD *)(v4 + 224) = v8;
  *(_OWORD *)(v4 + 268) = 0u;
  *(_OWORD *)(v4 + 284) = 0u;
  *(_QWORD *)(v4 + 304) = 0;
  return result;
}

void WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(WebCore::LegacyRenderSVGResourceContainer *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;

  *(_QWORD *)this = off_1E344C220;
  *((_QWORD *)this + 27) = &unk_1E344C588;
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    v6 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF **)*((_QWORD *)this + 31);
      do
      {
        v8 = *v7;
        if (*v7 != (WTF *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, a2);
            else
              --*(_DWORD *)v8;
          }
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 29);
  if (v4)
  {
    v9 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF **)*((_QWORD *)this + 29);
      do
      {
        v11 = *v10;
        if (*v10 != (WTF *)-1)
        {
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 1)
              WTF::fastFree(v11, a2);
            else
              --*(_DWORD *)v11;
          }
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::RenderElement::~RenderElement(this, a2);
}

void WebCore::LegacyRenderSVGResourceClipper::~LegacyRenderSVGResourceClipper(WebCore::LegacyRenderSVGResourceClipper *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;

  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF *)-1)
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v5, 0);
          v6 = *(v5 - 1);
          *(v5 - 1) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
}

void `non-virtual thunk to'WebCore::LegacyRenderSVGResourceClipper::~LegacyRenderSVGResourceClipper(WebCore::LegacyRenderSVGResourceClipper *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;

  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF *)-1)
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v5, 0);
          v6 = *(v5 - 1);
          *(v5 - 1) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer((WebCore::LegacyRenderSVGResourceClipper *)((char *)this - 216), a2);
}

{
  WebCore::LegacyRenderSVGResourceClipper::operator delete((WebCore::LegacyRenderSVGResourceClipper *)((char *)this - 216), a2);
}

double WebCore::LegacyRenderSVGResourceClipper::operator delete(WebCore::LegacyRenderSVGResourceContainer *this, void *a2)
{
  uint64_t v3;
  void *v4;
  double result;
  uint64_t v6;
  WTF **v7;
  WTF *v8;

  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    v6 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF **)(v3 + 8);
      do
      {
        if (*(v7 - 1) != (WTF *)-1)
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v7, 0);
          v8 = *(v7 - 1);
          *(v7 - 1) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, a2);
            else
              --*(_DWORD *)v8;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 38) = 0;
    result = 0.0;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;

  v4 = (int)a2;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  v6 = *(_QWORD *)(a1 + 304);
  if (v6)
  {
    *(_QWORD *)(a1 + 304) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v6, a2);
  }
  if (v4)
    v7 = 0;
  else
    v7 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1, v7, a3);
}

uint64_t WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::RenderObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *v37[5];
  uint64_t *v38[5];

  v3 = result;
  v4 = *(_QWORD *)(result + 232);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  v6 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = *(uint64_t **)(result + 232);
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_3;
    }
  }
  else
  {
    v8 = *(uint64_t **)(result + 232);
  }
  v9 = (uint64_t *)(v4 + 8 * v6);
  if (v8 != v9)
  {
    v10 = *v8;
    while (!*(_QWORD *)(v10 + 8))
    {
      do
      {
        if (++v8 == v9)
          goto LABEL_3;
        v10 = *v8;
      }
      while ((unint64_t)(*v8 + 1) <= 1);
      if (v8 == v9)
        goto LABEL_3;
    }
  }
  else
  {
LABEL_3:
    v5 = *(_QWORD *)(result + 248);
    if (!v5)
      return result;
    if (!*(_DWORD *)(v5 - 12))
      return result;
    v33 = a3;
    v36 = a2;
    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(result + 248), v38);
    result = (uint64_t)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t *)(v3 + 248), v37);
    a2 = v36;
    a3 = v33;
    if (v38[1] == v37[1])
      return result;
  }
  if (!*(_BYTE *)(v3 + 265))
  {
    *(_BYTE *)(v3 + 265) = 1;
    i = v3;
    if (*(_BYTE *)(v3 + 46) != 103)
    {
      for (i = *(_QWORD *)(v3 + 32); i; i = *(_QWORD *)(i + 32))
      {
        i = *(_QWORD *)(i + 8);
        if (!i)
          break;
        if (*(_BYTE *)(i + 46) == 103)
          break;
      }
    }
    v12 = *(_QWORD *)(v3 + 232);
    if (v12)
    {
      v14 = *(unsigned int *)(v12 - 4);
      v13 = v12 + 8 * v14;
      if (*(_DWORD *)(v12 - 12))
      {
        if (!(_DWORD)v14)
        {
          v23 = 0;
          v15 = *(_QWORD *)(v3 + 232);
          goto LABEL_59;
        }
        v22 = 8 * v14;
        v15 = *(_QWORD *)(v3 + 232);
        do
        {
          if ((unint64_t)(*(_QWORD *)v15 + 1) > 1)
            goto LABEL_24;
          v15 += 8;
          v22 -= 8;
        }
        while (v22);
        v15 = v13;
LABEL_24:
        if (!v12)
        {
          v16 = 0;
LABEL_26:
          if (v16 != v15 && !*(_QWORD *)(*(_QWORD *)v15 + 8))
          {
            while (1)
            {
              v24 = v15 + 8;
              v15 = v13;
              if (v24 != v13)
              {
                v15 = v24;
                do
                {
                  if ((unint64_t)(*(_QWORD *)v15 + 1) > 1)
                    goto LABEL_66;
                  v15 += 8;
                }
                while (v15 != v13);
                v15 = v13;
              }
LABEL_66:
              if (v15 == v16)
                break;
              if (*(_QWORD *)(*(_QWORD *)v15 + 8))
                goto LABEL_27;
            }
            v15 = v16;
          }
LABEL_27:
          if (v12)
            v12 += 8 * *(unsigned int *)(v12 - 4);
          while (1)
          {
            if (v15 == v12)
            {
              result = (uint64_t)WebCore::LegacyRenderSVGResourceContainer::markAllClientLayersForInvalidation((WebCore::LegacyRenderSVGResourceContainer *)v3);
              *(_BYTE *)(v3 + 265) = 0;
              return result;
            }
            v17 = *(_QWORD *)(*(_QWORD *)v15 + 8);
            j = v17;
            if (*(_BYTE *)(v17 + 46) != 103)
            {
              for (j = *(_QWORD *)(v17 + 32); j; j = *(_QWORD *)(j + 32))
              {
                j = *(_QWORD *)(j + 8);
                if (!j)
                  break;
                if (*(_BYTE *)(j + 46) == 103)
                  break;
              }
            }
            if (i == j)
            {
              v30 = v12;
              v31 = v16;
              v28 = v15;
              v29 = v13;
              v27 = i;
              v35 = a2;
              v32 = a3;
              v34 = *(WebCore::RenderObject **)(*(_QWORD *)v15 + 8);
              if ((*(_BYTE *)(v17 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v17 + 53) & 9) != 0)
              {
                if (a2 != 3)
                  WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(result, (WebCore::RenderObject *)v17, a2);
                WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded((uint64_t)v34, (uint64_t *)(v35 == 0), v32);
                a2 = v35;
                a3 = v32;
              }
              else
              {
                v25 = *(_QWORD *)(v17 + 216);
                ++*(_DWORD *)(v17 + 16);
                LODWORD(result) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(v25 + 16))(v17 + 216, a2 != 3, a3);
                v26 = *((_DWORD *)v34 + 4);
                if (!v26)
                {
                  result = 286;
                  __break(0xC471u);
                  return result;
                }
                a3 = v32;
                *((_DWORD *)v34 + 4) = v26 - 1;
                a2 = v35;
              }
              i = v27;
              v15 = v28;
              v13 = v29;
              v12 = v30;
              v16 = v31;
            }
            v19 = v15 + 8;
            v20 = v13;
            if (v19 != v13)
            {
              v20 = v19;
              while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
              {
                v20 += 8;
                if (v20 == v13)
                {
                  v20 = v13;
                  break;
                }
              }
            }
            v15 = v16;
            if (v20 != v16)
            {
              v15 = v20;
              if (!*(_QWORD *)(*(_QWORD *)v20 + 8))
              {
                while (1)
                {
                  v21 = v15 + 8;
                  v15 = v13;
                  if (v21 != v13)
                  {
                    v15 = v21;
                    while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
                    {
                      v15 += 8;
                      if (v15 == v13)
                      {
                        v15 = v13;
                        break;
                      }
                    }
                  }
                  if (v15 == v16)
                    break;
                  if (*(_QWORD *)(*(_QWORD *)v15 + 8))
                    goto LABEL_42;
                }
                v15 = v16;
              }
            }
LABEL_42:
            ++*(_DWORD *)(v3 + 240);
          }
        }
        v23 = *(unsigned int *)(v12 - 4);
LABEL_59:
        v16 = v12 + 8 * v23;
        goto LABEL_26;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v15 = v13;
    v13 = v12 + 8 * v14;
    goto LABEL_24;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceClipper::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  WTF **v10;
  WTF *v11;

  v4 = (int)a2;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  v6 = *(_QWORD *)(a1 + 88);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = 0;
    v9 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF **)(v6 + 8);
      do
      {
        if (*(v10 - 1) != (WTF *)-1)
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v10, 0);
          v11 = *(v10 - 1);
          *(v10 - 1) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 1)
              WTF::fastFree(v11, a2);
            else
              --*(_DWORD *)v11;
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  if (v4)
    v7 = 0;
  else
    v7 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1 - 216, v7, a3);
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::removeClientFromCache(uint64_t this, WebCore::RenderElement *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  WebCore::RenderElement *v7;

  v3 = *(_QWORD *)(this + 304);
  if (v3)
  {
    v5 = this;
    v7 = a2;
    v6 = a3;
    this = WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>,WebCore::RenderObject const*>(v3, (uint64_t)a2);
    a3 = v6;
    a2 = v7;
    if (this && this != v3 + 16 * *(unsigned int *)(v3 - 4))
    {
      this = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::removeWithoutEntryConsistencyCheck((WTF **)(v5 + 304), (WTF **)this);
      a3 = v6;
      a2 = v7;
    }
  }
  if (a3)
    return WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)a2);
  return this;
}

uint64_t WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(int a1, WebCore::RenderObject *this, unsigned int a3)
{
  uint64_t result;

  if (a3 < 2)
    return WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)this);
  if (a3 == 2 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
    return WebCore::RenderObject::repaint((uint64_t)this, 0);
  return result;
}

WTF **`non-virtual thunk to'WebCore::LegacyRenderSVGResourceClipper::removeClientFromCache(WebCore::LegacyRenderSVGResourceClipper *this, uint64_t a2, int a3)
{
  WTF **result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v20;
  WebCore::RenderElement *v21;
  int v22;
  uint64_t v23;

  v5 = *((_QWORD *)this + 11);
  result = (WTF **)((char *)this + 88);
  v4 = v5;
  if (v5)
  {
    v20 = (uint64_t *)result;
    v21 = (WebCore::RenderElement *)a2;
    v22 = a3;
    v23 = v4;
    v6 = *(_DWORD *)(v4 - 8);
    v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    for (i = 1; ; ++i)
    {
      v12 = v10;
      result = *(WTF ***)(v23 + 16 * v10);
      if (result != (WTF **)-1)
      {
        if (!result)
          goto LABEL_2;
        if (result[1] == (WTF *)a2)
          break;
      }
      v10 = (v10 + i) & v6;
    }
    if (v10 != *(_DWORD *)(v23 - 4))
    {
      v13 = (_QWORD *)(v23 + 16 * v10);
      *v13 = 0;
      if (*(_DWORD *)result == 1)
        WTF::fastFree((WTF *)result, (void *)a2);
      else
        --*(_DWORD *)result;
      *v13 = -1;
      std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100]((WTF **)(v23 + 16 * v12 + 8), 0);
      ++*(_DWORD *)(*v20 - 16);
      v14 = *v20;
      v15 = *v20 ? *(_DWORD *)(v14 - 12) - 1 : -1;
      *(_DWORD *)(v14 - 12) = v15;
      result = (WTF **)v20;
      a2 = (uint64_t)v21;
      v16 = *v20;
      a3 = v22;
      if (*v20)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
        {
          result = WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v20, v18 >> 1, 0);
          a3 = v22;
          a2 = (uint64_t)v21;
        }
      }
    }
  }
LABEL_2:
  if (a3)
    return (WTF **)WebCore::RenderObject::invalidateCachedBoundaries(a2);
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::applyResource(WebCore::LegacyRenderSVGResourceClipper *a1, WebCore::RenderElement *a2, uint64_t a3, WebCore::GraphicsContext **a4)
{
  float v7;
  uint64_t result;
  float v9;
  __int32 v10;
  int v11;
  int v12;
  float32x2_t v13;
  int v14;
  int v15;

  (*(void (**)(WebCore::RenderElement *, _QWORD))(*(_QWORD *)a2 + 256))(a2, 0);
  result = 1;
  if (v9 > 0.0 && v7 > 0.0)
  {
    v13.i32[0] = (*(float (**)(WebCore::RenderElement *))(*(_QWORD *)a2 + 232))(a2);
    v13.i32[1] = v10;
    v14 = v11;
    v15 = v12;
    return WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(a1, *a4, a2, &v13, (const WebCore::FloatRect *)&v13, 1.0);
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(WebCore::LegacyRenderSVGResourceClipper *this, WebCore::GraphicsContext *a2, WebCore::RenderElement *a3, float32x2_t *a4, const WebCore::FloatRect *a5, float a6)
{
  uint64_t v7;
  void *v13;
  _QWORD *v14;
  WTF *v15;
  _BOOL8 v16;
  uint64_t *v17;
  double v18;
  void *v19;
  uint64_t v20;
  WebCore::GraphicsContext *v21;
  const WebCore::RenderElement *v22;
  uint64_t **v23;
  uint64_t v24;
  WebCore::LegacyRenderSVGResourceClipper *v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  void *v32;
  void *v33;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  float32x2_t v44;
  float64x2_t v45;
  __n128 v46;
  uint64_t v47;
  float v49;
  float v50;
  float v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  float64x2_t v61[3];
  char *v62;
  double v63;
  WTF *v64[2];
  float64_t v65;
  float64x2_t v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  char v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v7 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196552DC0);
  }
  WebCore::SVGGraphicsElement::animatedLocalTransform((WebCore::SVGPolyElement **)v7, (__int128 *)v61);
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 264))
    goto LABEL_4;
  v73 = 0;
  v28 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v28 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196552DE0);
  }
  v29 = *(_QWORD *)(v28 + 80);
  if (!v29)
    goto LABEL_64;
  LOBYTE(v30) = 0;
  do
  {
    if ((*(_WORD *)(v29 + 28) & 0x20) == 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 1184))(v29))
      goto LABEL_35;
    v38 = *(_DWORD *)(v29 + 24) + 2;
    *(_DWORD *)(v29 + 24) = v38;
    v39 = *(_QWORD *)(v29 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v39)
    {
      v35 = 4;
      goto LABEL_32;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v29 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965532A4);
    }
    v40 = *(_DWORD *)((*(_QWORD *)(v29 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*(_QWORD *)(v29 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v40;
    if (*(_BYTE *)(v39 + 46) != 85)
    {
      if ((*(_QWORD *)(v39 + 96) & 0x1FLL) != 0x1A
        && (*(_BYTE *)(*(_QWORD *)(v39 + 104) + 239) & 4) == 0
        && (*(_BYTE *)(v39 + 120) & 0x30) == 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 88) + 40) + 264))
          goto LABEL_59;
        if (v73 == 2)
        {
          if (!*((_QWORD *)&v68 + 1)
            || !(*(unsigned int (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 200))(*((_QWORD *)&v68 + 1)))
          {
            goto LABEL_59;
          }
        }
        else if (v73)
        {
          goto LABEL_59;
        }
      }
      if (*(_QWORD *)(*(_QWORD *)(v29 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
      {
        v56 = WebCore::SVGUseElement::rendererClipChild((WebCore::SVGUseElement *)v29);
        if (v56)
        {
          if (*(_BYTE *)(v56 + 46) == 85)
            goto LABEL_59;
          if ((*(_BYTE *)(v56 + 45) & 2) != 0)
          {
            v58 = *(_QWORD *)(v56 + 32);
            if (v58)
              v56 = *(_QWORD *)(v58 + 8);
            else
              v56 = 0;
          }
          if ((*(_QWORD *)(v56 + 96) & 0x1FLL) != 0x1A
            && (*(_BYTE *)(*(_QWORD *)(v56 + 104) + 239) & 4) == 0
            && (*(_BYTE *)(v56 + 120) & 0x30) == 0)
          {
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 88) + 40) + 264))
              goto LABEL_59;
            if (v73 != 2)
            {
              if (!v73)
                goto LABEL_46;
LABEL_59:
              v35 = 1;
              goto LABEL_52;
            }
            if (!*((_QWORD *)&v68 + 1)
              || !(*(unsigned int (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 200))(*((_QWORD *)&v68 + 1)))
            {
              goto LABEL_59;
            }
          }
        }
      }
LABEL_46:
      (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)v29 + 1368))(&v63, v29);
      if (v73 == -1)
      {
        if (v67 == -1)
        {
LABEL_51:
          v35 = 0;
          v30 = (*(unsigned __int16 *)(*(_QWORD *)(v39 + 136) + 4) >> 2) & 1;
LABEL_52:
          v40 = *(_DWORD *)(v39 + 16);
          goto LABEL_53;
        }
      }
      else if (v67 == -1)
      {
        ((void (*)(char **, char *))off_1E344CD10[v73])(&v62, (char *)&v68 + 8);
        v73 = -1;
LABEL_49:
        if (v67 != -1)
          ((void (*)(char **, WTF **))off_1E344CD10[v67])(&v62, v64);
        goto LABEL_51;
      }
      v62 = (char *)&v68 + 8;
      ((void (*)(char **))off_1E344CD28[v67])(&v62);
      goto LABEL_49;
    }
    v35 = 1;
LABEL_53:
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x1965532C4);
    }
    *(_DWORD *)(v39 + 16) = v40 - 1;
    v38 = *(_DWORD *)(v29 + 24);
LABEL_32:
    v36 = v38 - 2;
    if (v36)
    {
      *(_DWORD *)(v29 + 24) = v36;
    }
    else if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v29, v37);
    }
    if ((v35 | 4) != 4)
    {
      v34 = 0;
      goto LABEL_75;
    }
LABEL_35:
    v29 = *(_QWORD *)(v29 + 56);
  }
  while (v29);
  v28 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v28 + 28) & 0x20) == 0
    || (LOBYTE(v29) = v30, *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24)))
  {
    __break(0xC471u);
    JUMPOUT(0x196553268);
  }
LABEL_64:
  v41 = *(_QWORD **)(v28 + 216);
  v42 = v41[3];
  if (!v42 || !*(_DWORD *)(v42 - 12))
    goto LABEL_65;
  v52 = v29;
  v53 = *(unsigned int *)(v42 - 4);
  if ((_DWORD)v53)
  {
    v54 = 8 * v53;
    v55 = (uint64_t *)v41[3];
    while ((unint64_t)(*v55 + 1) <= 1)
    {
      ++v55;
      v54 -= 8;
      LOBYTE(v29) = v52;
      if (!v54)
        goto LABEL_65;
    }
  }
  else
  {
    v55 = (uint64_t *)v41[3];
  }
  v59 = (uint64_t *)(v42 + 8 * v53);
  LOBYTE(v29) = v52;
  if (v55 != v59)
  {
    v60 = *v55;
LABEL_130:
    if (!*(_QWORD *)(v60 + 8))
    {
      while (1)
      {
        ++v55;
        LOBYTE(v29) = v52;
        if (v55 == v59)
          goto LABEL_65;
        v60 = *v55;
        if ((unint64_t)(*v55 + 1) > 1)
        {
          LOBYTE(v29) = v52;
          if (v55 != v59)
            goto LABEL_130;
          goto LABEL_65;
        }
      }
    }
    v43 = v41 + 6;
    LOBYTE(v29) = v52;
  }
  else
  {
LABEL_65:
    v43 = v41 + 5;
  }
  if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v43 + 32))(*v43) == 2)
  {
    v44 = a4[1];
    v66 = vaddq_f64(vcvtq_f64_f32(*a4), (float64x2_t)0);
    v45 = vcvtq_f64_f32(v44);
    v63 = v45.f64[0];
    *(float64x2_t *)v64 = vmulq_f64(v45, (float64x2_t)0);
    v65 = v45.f64[1];
    goto LABEL_68;
  }
  if (a6 != 1.0)
  {
    v66 = (float64x2_t)xmmword_1969FE210;
    v63 = a6;
    *(double *)v64 = a6 * 0.0;
    v64[1] = v64[0];
    v65 = a6;
LABEL_68:
    WebCore::Path::transform((WebCore::Path *)&v68, (float64x2_t *)&v63);
  }
  WebCore::Path::transform((WebCore::Path *)&v68, v61);
  if (v73 == 2)
  {
    if (*((_QWORD *)&v68 + 1)
      && (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 200))(*((_QWORD *)&v68 + 1)))
    {
LABEL_71:
      v63 = 0.0;
      v64[0] = 0;
      v46.n128_f64[0] = WebCore::Path::addRect((WebCore::Path *)&v68, (const WebCore::FloatRect *)&v63);
    }
  }
  else if (!v73)
  {
    goto LABEL_71;
  }
  if ((*((_BYTE *)a3 + 52) & 7) == 4
    && (~*((unsigned __int8 *)a3 + 53) & 0x11) == 0
    && (*((_BYTE *)a3 + 208) & 0x70) == 0x30
    && (WebCore::Path::fastBoundingRect((WebCore::Path *)&v68), a4->f32[0] <= v46.n128_f32[0])
    && (v46.n128_f32[0] = v46.n128_f32[0] + v50, (float)(a4->f32[0] + a4[1].f32[0]) >= v46.n128_f32[0])
    && (v46.n128_u32[0] = a4->u32[1], v46.n128_f32[0] <= v49))
  {
    v46.n128_f32[0] = v46.n128_f32[0] + a4[1].f32[1];
    if (v46.n128_f32[0] < (float)(v49 + v51))
      v34 = 1;
    else
      v34 = 3;
  }
  else
  {
    v34 = 1;
  }
  (*(void (**)(WebCore::GraphicsContext *, __int128 *, uint64_t, __n128))(*(_QWORD *)a2 + 496))(a2, &v68, v29 & 1, v46);
LABEL_75:
  if (v73 != -1)
    ((void (*)(double *, char *))off_1E344CD10[v73])(&v63, (char *)&v68 + 8);
  if ((v34 & 1) == 0)
  {
LABEL_4:
    WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>::WeakRef<void>((uint64_t *)&v63, (uint64_t)a3);
    WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::ensure<WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(WebCore::GraphicsContext &,WebCore::RenderElement &,WebCore::FloatRect const&,WebCore::FloatRect const&,float)::$_0>((WTF **)&v68, (uint64_t *)this + 38, (WTF **)&v63);
    v14 = *(_QWORD **)(v68 + 8);
    v15 = *(WTF **)&v63;
    v63 = 0.0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::fastFree(v15, v13);
      else
        --*(_DWORD *)v15;
    }
    WebCore::LegacyRenderSVGResourceClipper::computeInputs((WebCore::LegacyRenderSVGResourceClipper *)&v68, a2, a3, (const WebCore::FloatRect *)a4, a5, a6);
    v16 = WebCore::ClipperData::invalidate(v14, (float *)&v68);
    if (!v16)
      goto LABEL_22;
    v17 = WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v16);
    WebCore::GraphicsContext::createScaledImageBuffer((float32x4_t *)a5, (uint64_t)a2, (float *)v14 + 10, (uint64_t)v17, 0x100u, 0, (uint64_t *)&v68, v18);
    WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=(v14, (uint64_t *)&v68);
    v20 = v68;
    *(_QWORD *)&v68 = 0;
    if (v20)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v20 + 8), v19);
    if (!*v14)
      return 0;
    v21 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 16))(*v14);
    (*(void (**)(WebCore::GraphicsContext *, float64x2_t *))(*(_QWORD *)v21 + 656))(v21, v61);
    v23 = (uint64_t **)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, v22);
    if (v23 && *v23 && (v24 = **v23) != 0 && (v25 = *(WebCore::LegacyRenderSVGResourceClipper **)(v24 + 8)) != 0)
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v21 + 96))(v21, 1);
      if (!WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(v25, v21, this, (const WebCore::FloatRect *)a4, a5, 1.0))
      {
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v21 + 104))(v21, 1);
        return 0;
      }
      WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v68, *v14);
      v26 = WebCore::LegacyRenderSVGResourceClipper::drawContentIntoMaskImage(this, (WebCore::ImageBuffer *)v68, a4, a6);
      WTF::Ref<WebCore::ScrollingStateStickyNode,WTF::RawPtrTraits<WebCore::ScrollingStateStickyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateStickyNode>>::~Ref((uint64_t *)&v68, v27);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v21 + 104))(v21, 1);
      if ((v26 & 1) != 0)
      {
LABEL_22:
        if (*v14)
        {
          v34 = 1;
          WebCore::SVGRenderingContext::clipToImageBuffer((uint64_t)a2, a5, (float *)v14 + 10, v14, 1);
          return v34;
        }
        return 0;
      }
    }
    else
    {
      WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v68, *v14);
      v31 = WebCore::LegacyRenderSVGResourceClipper::drawContentIntoMaskImage(this, (WebCore::ImageBuffer *)v68, a4, a6);
      WTF::Ref<WebCore::ScrollingStateStickyNode,WTF::RawPtrTraits<WebCore::ScrollingStateStickyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateStickyNode>>::~Ref((uint64_t *)&v68, v32);
      if ((v31 & 1) != 0)
        goto LABEL_22;
    }
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    v71 = 1065353216;
    v72 = 0;
    WebCore::ClipperData::operator=(v14, (uint64_t *)&v68);
    WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=((uint64_t *)&v68, v33);
    goto LABEL_22;
  }
  v47 = *((_QWORD *)this + 38);
  if (v47)
  {
    v57 = WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>,WebCore::RenderObject const*>(*((_QWORD *)this + 38), (uint64_t)a3);
    if (v57)
    {
      if (v57 != v47 + 16 * *(unsigned int *)(v47 - 4))
        WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=(*(uint64_t **)(v57 + 8), 0);
    }
  }
  return v34;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceClipper::applyResource(uint64_t a1, WebCore::RenderElement *a2, uint64_t a3, WebCore::GraphicsContext **a4)
{
  float v7;
  uint64_t result;
  float v9;
  __int32 v10;
  int v11;
  int v12;
  float32x2_t v13;
  int v14;
  int v15;

  (*(void (**)(WebCore::RenderElement *, _QWORD))(*(_QWORD *)a2 + 256))(a2, 0);
  result = 1;
  if (v9 > 0.0 && v7 > 0.0)
  {
    v13.i32[0] = (*(float (**)(WebCore::RenderElement *))(*(_QWORD *)a2 + 232))(a2);
    v13.i32[1] = v10;
    v14 = v11;
    v15 = v12;
    return WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext((WebCore::LegacyRenderSVGResourceClipper *)(a1 - 216), *a4, a2, &v13, (const WebCore::FloatRect *)&v13, 1.0);
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::computeInputs(WebCore::LegacyRenderSVGResourceClipper *this, const WebCore::GraphicsContext *a2, const WebCore::RenderElement *a3, const WebCore::FloatRect *a4, const WebCore::FloatRect *a5, float a6)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  __int128 v17;
  uint64_t result;
  float v19;
  double v20[6];

  WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem(a3, a2, v20);
  v11 = hypot(v20[0], v20[1]);
  v12 = hypot(v20[2], v20[3]);
  v13 = *((float *)a4 + 2) * v11;
  if (v13 > 0.0)
  {
    v14 = *((float *)a4 + 3) * v12;
    v15 = floorf(v13) * floorf(v14);
    if (v14 > 0.0 && v15 > 16777000.0)
    {
      v19 = sqrtf(16777000.0 / (float)(v13 * v14));
      v11 = v19 * v11;
      v12 = v19 * v12;
    }
  }
  v17 = *(_OWORD *)a5;
  *(_OWORD *)this = *(_OWORD *)a4;
  *((_OWORD *)this + 1) = v17;
  *((float *)this + 8) = v11;
  *((float *)this + 9) = v12;
  *((float *)this + 10) = a6;
  result = (*(uint64_t (**)(const WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
  *((_BYTE *)this + 44) = result;
  return result;
}

uint64_t *WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

WTF **WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::ensure<WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(WebCore::GraphicsContext &,WebCore::RenderElement &,WebCore::FloatRect const&,WebCore::FloatRect const&,float)::$_0>(WTF **result, uint64_t *a2, WTF **a3)
{
  WTF **v5;
  uint64_t v6;
  char v7;
  int v8;
  WTF **v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  WTF **v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a3;
  v11 = *((_QWORD *)*a3 + 1);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v8;
    v18 = (WTF **)(v6 + 16 * v17);
    v19 = *v18;
    if (*v18 != (WTF *)-1)
      break;
    v9 = (WTF **)(v6 + 16 * v17);
LABEL_10:
    v15 = i + v17;
  }
  if (!v19)
  {
    if (v9)
    {
      *v9 = 0;
      v9[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v10 = *a3;
      v18 = v9;
    }
    *a3 = 0;
    v20 = *v18;
    *v18 = v10;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, a2);
      else
        --*(_DWORD *)v20;
    }
    v21 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)(v21 + 48) = 0;
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    *(_DWORD *)(v21 + 48) = 1065353216;
    result = std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v18 + 1, (WTF *)v21);
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_21;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_29:
        result = WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, v28, v18);
        v18 = result;
        v24 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_31;
      }
LABEL_21:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_29;
    }
LABEL_31:
    v31 = v24 + 16 * v27;
    v30 = 1;
    goto LABEL_32;
  }
  if (*((_QWORD *)v19 + 1) != v11)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v29 = 0;
  else
    v29 = *(unsigned int *)(v6 - 4);
  v30 = 0;
  v31 = v6 + 16 * v29;
LABEL_32:
  *v5 = (WTF *)v18;
  v5[1] = (WTF *)v31;
  *((_BYTE *)v5 + 16) = v30;
  return result;
}

BOOL WebCore::ClipperData::invalidate(uint64_t *a1, float *a2)
{
  _OWORD *v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;

  v4 = a1 + 1;
  v5 = *((float *)a1 + 2) == *a2 && *((float *)a1 + 3) == a2[1];
  if (!v5
    || (*((float *)a1 + 4) == a2[2] ? (v6 = *((float *)a1 + 5) == a2[3]) : (v6 = 0),
        !v6
     || (*((float *)a1 + 6) == a2[4] ? (v7 = *((float *)a1 + 7) == a2[5]) : (v7 = 0),
         !v7
      || (*((float *)a1 + 8) == a2[6] ? (v8 = *((float *)a1 + 9) == a2[7]) : (v8 = 0),
          !v8
       || *((float *)a1 + 10) != a2[8]
       || *((float *)a1 + 11) != a2[9]
       || *((float *)a1 + 12) != a2[10]
       || *((unsigned __int8 *)a1 + 52) != *((unsigned __int8 *)a2 + 44)))))
  {
    v9 = *a1;
    *a1 = 0;
    if (!v9)
      goto LABEL_37;
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_25;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_25:
    v12 = *(_QWORD *)(v10 + 8);
    v13 = v12 - 1;
    *(_QWORD *)(v10 + 8) = v12 - 1;
    if (v12 == 1)
    {
      v20 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      v15 = v20 != 0;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v16 = __ldxr((unsigned __int8 *)v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
        if (!v13)
          goto LABEL_33;
        goto LABEL_37;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (!v13)
    {
LABEL_33:
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (!v15)
        WTF::fastFree((WTF *)v10, a2);
    }
LABEL_37:
    v17 = *(_OWORD *)a2;
    v18 = *((_OWORD *)a2 + 1);
    *(_OWORD *)((char *)v4 + 29) = *(_OWORD *)((char *)a2 + 29);
    *v4 = v17;
    v4[1] = v18;
  }
  return *a1 == 0;
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::drawContentIntoMaskImage(WebCore::LegacyRenderSVGResourceClipper *this, WebCore::ImageBuffer *a2, float32x2_t *a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  float32x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  __int128 v30;
  _BYTE *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  WebCore::Node *v51;
  void *v52;
  uint64_t *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  void *v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[32];
  float64x2_t v66;
  uint64_t v67;
  __int128 v68;
  __int16 v69;
  int v70;
  uint64_t v71;
  _QWORD v72[4];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v7 = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)a2 + 16))(a2);
  *(_OWORD *)&v65[16] = unk_1969FE200;
  v66 = (float64x2_t)xmmword_1969FE210;
  *(_OWORD *)v65 = xmmword_1969FE1F0;
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v8 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196553C6CLL);
  }
  v9 = v7;
  v10 = *(_QWORD **)(v8 + 216);
  v11 = v10[3];
  if (!v11 || !*(_DWORD *)(v11 - 12))
    goto LABEL_4;
  v22 = *(unsigned int *)(v11 - 4);
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    v24 = (uint64_t *)v10[3];
    while ((unint64_t)(*v24 + 1) <= 1)
    {
      ++v24;
      v23 -= 8;
      if (!v23)
        goto LABEL_4;
    }
  }
  else
  {
    v24 = (uint64_t *)v10[3];
  }
  v57 = (uint64_t *)(v11 + 8 * v22);
  if (v24 == v57)
    goto LABEL_4;
  v58 = *v24;
LABEL_86:
  if (!*(_QWORD *)(v58 + 8))
  {
    while (++v24 != v57)
    {
      v58 = *v24;
      if ((unint64_t)(*v24 + 1) > 1)
      {
        if (v24 != v57)
          goto LABEL_86;
        break;
      }
    }
LABEL_4:
    v12 = v10 + 5;
    goto LABEL_5;
  }
  v12 = v10 + 6;
LABEL_5:
  if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v12 + 32))(*v12) == 2)
  {
    v14 = a3[1];
    v66 = vaddq_f64(vcvtq_f64_f32(*a3), (float64x2_t)0);
    v15 = vcvtq_f64_f32(v14);
    *(float64_t *)v65 = v15.f64[0];
    *(float64x2_t *)&v65[8] = vmulq_f64(v15, (float64x2_t)0);
    *(float64_t *)&v65[24] = v15.f64[1];
LABEL_9:
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 656))(v9, v65);
    goto LABEL_10;
  }
  if (a4 != 1.0)
  {
    *(double *)v65 = a4;
    *(double *)&v65[8] = a4 * 0.0;
    *(double *)&v65[16] = *(double *)&v65[8];
    *(double *)&v65[24] = a4;
    goto LABEL_9;
  }
LABEL_10:
  v16 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8) + 1944) + 248);
  v18 = *(_DWORD *)(v17 + 1148);
  *(_DWORD *)(v17 + 1148) = v18 | 0x10;
  if ((*(_BYTE *)(v16 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196553C8CLL);
  }
  v19 = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v16 + 24) = v19 + 2;
  if (v19)
  {
    *(_DWORD *)(v16 + 24) = v19;
  }
  else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v16, v13);
  }
  v20 = *(_QWORD *)(v16 + 80);
  if (v20)
  {
    result = 1;
    while ((*(_WORD *)(v20 + 28) & 0x20) == 0)
    {
      v20 = *(_QWORD *)(v20 + 56);
      if (!v20)
        goto LABEL_19;
    }
    v25 = (void *)(v9 + 8);
    v26 = &v71;
    v27 = &WebCore::SVGNames::useTag;
    v28 = &WebCore::SVGNames::clip_ruleAttr;
    v29 = v72;
    v30 = xmmword_1969FCA90;
LABEL_31:
    v31 = (_BYTE *)(*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL);
    if (!v31)
      goto LABEL_74;
    if ((*(_BYTE *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196554098);
    }
    if ((*(_BYTE *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 0xF8) != 0)
    {
      result = 0;
      goto LABEL_19;
    }
    if ((*(_QWORD *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1FLL) == 0x1A
      || (*(_BYTE *)(*(_QWORD *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 239) & 4) != 0
      || (*(_BYTE *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x78) & 0x30) != 0)
    {
      goto LABEL_74;
    }
    v32 = *(_WORD *)(*(_QWORD *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x88) + 4);
    v33 = *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24);
    v34 = *(_QWORD *)(*v27 + 24);
    if (v33 == v34)
      v35 = v20;
    else
      v35 = 0;
    if (v35)
      *(_DWORD *)(v35 + 24) += 2;
    if (v33 == v34)
    {
      v59 = v32;
      v63 = v30;
      v60 = v26;
      v61 = v25;
      v36 = v29;
      v37 = v28;
      v38 = WebCore::SVGUseElement::rendererClipChild((WebCore::SVGUseElement *)v20);
      if (!v38)
      {
        v27 = &WebCore::SVGNames::useTag;
        v28 = v37;
        v29 = v36;
        v26 = v60;
        v25 = v61;
        goto LABEL_70;
      }
      v31 = (_BYTE *)v38;
      v39 = *(_QWORD *)(v20 + 104);
      v28 = v37;
      v29 = v36;
      v26 = v60;
      v30 = v63;
      if (v39
        && ((v40 = *(unsigned int *)(v39 + 4), (v40 & 1) != 0)
          ? (v41 = *(uint64_t **)(v39 + 40), v42 = *(unsigned int *)(v39 + 52))
          : (v41 = (uint64_t *)(v39 + 32), v42 = v40 >> 5),
            v42))
      {
        v43 = *v28;
        while (1)
        {
          v44 = *v41;
          if (*v41 == v43
            || *(_QWORD *)(v44 + 24) == *(_QWORD *)(v43 + 24) && *(_QWORD *)(v44 + 32) == *(_QWORD *)(v43 + 32))
          {
            break;
          }
          v41 += 2;
          if (!--v42)
            goto LABEL_57;
        }
        v25 = v61;
        v27 = &WebCore::SVGNames::useTag;
        LOBYTE(v32) = v59;
      }
      else
      {
LABEL_57:
        v32 = *(_WORD *)(*(_QWORD *)(v38 + 136) + 4);
        v25 = v61;
        v27 = &WebCore::SVGNames::useTag;
      }
    }
    if (((v31[52] & 7) != 4 || (v31[53] & 0x10) == 0) && v31[46] != 85)
      goto LABEL_71;
    v63 = v30;
    if (((v32 & 4) != 0) == (*(_BYTE *)(v9 + 192) == 0))
    {
      *(_BYTE *)(v9 + 192) = (v32 & 4) >> 2;
      *(_DWORD *)(v9 + 184) |= 2u;
    }
    v62 = v25;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
    if (v33 == v34)
    {
      v31 = (_BYTE *)(*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL);
      if (v31)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1965540BCLL);
        }
      }
    }
    v68 = v63;
    v69 = 8;
    v70 = 2;
    *(_OWORD *)v26 = 0uLL;
    *((_OWORD *)v26 + 1) = 0uLL;
    *((_BYTE *)v26 + 32) = 0;
    *v29 = 0;
    v29[1] = 0;
    v72[2] = v9;
    {
      v46 = *((double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation + 1);
      v45 = *(double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation;
      v48 = *(double *)&qword_1EE2F9610;
      v47 = unk_1EE2F9618;
      v49 = *((double *)&xmmword_1EE2F9620 + 1);
      v50 = *(double *)&xmmword_1EE2F9620;
    }
    else
    {
      WebCore::currentContentTransformation(void)::s_currentContentTransformation = constinit_10;
      *(_OWORD *)&qword_1EE2F9610 = unk_1969FE138;
      xmmword_1EE2F9620 = xmmword_1969FE148;
      v47 = 1.0;
      v49 = 0.0;
      v50 = 0.0;
      v48 = 0.0;
      v46 = 0.0;
      v45 = 1.0;
    }
    v73 = WebCore::currentContentTransformation(void)::s_currentContentTransformation;
    v74 = *(_OWORD *)&qword_1EE2F9610;
    v75 = xmmword_1EE2F9620;
    *(double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation = v46 * *(double *)&v65[16]
                                                                                            + v45 * *(double *)v65;
    *((double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation + 1) = v46 * *(double *)&v65[24] + v45 * *(double *)&v65[8];
    *(double *)&qword_1EE2F9610 = v47 * *(double *)&v65[16] + v48 * *(double *)v65;
    unk_1EE2F9618 = v47 * *(double *)&v65[24] + v48 * *(double *)&v65[8];
    *(double *)&xmmword_1EE2F9620 = v66.f64[0] + v49 * *(double *)&v65[16] + v50 * *(double *)v65;
    *((double *)&xmmword_1EE2F9620 + 1) = v66.f64[1] + v49 * *(double *)&v65[24] + v50 * *(double *)&v65[8];
    v67 = 0;
    (*(void (**)(_BYTE *, __int128 *, uint64_t *))(*(_QWORD *)v31 + 680))(v31, &v68, &v67);
    WebCore::currentContentTransformation(void)::s_currentContentTransformation = v73;
    *(_OWORD *)&qword_1EE2F9610 = v74;
    xmmword_1EE2F9620 = v75;
    v25 = v62;
    v27 = &WebCore::SVGNames::useTag;
    v28 = &WebCore::SVGNames::clip_ruleAttr;
LABEL_70:
    v30 = v63;
LABEL_71:
    if (v35)
    {
      if (*(_DWORD *)(v35 + 24) == 2)
      {
        if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        {
          v51 = (WebCore::Node *)v35;
          v52 = v25;
          v53 = v27;
          v54 = v26;
          v55 = v29;
          v56 = v28;
          v64 = v30;
          WebCore::Node::removedLastRef(v51, v25);
          v30 = v64;
          v28 = v56;
          v29 = v55;
          v26 = v54;
          v27 = v53;
          v25 = v52;
        }
      }
      else
      {
        *(_DWORD *)(v35 + 24) -= 2;
      }
    }
LABEL_74:
    while (1)
    {
      v20 = *(_QWORD *)(v20 + 56);
      if (!v20)
        break;
      if ((*(_WORD *)(v20 + 28) & 0x20) != 0)
        goto LABEL_31;
    }
  }
  result = 1;
LABEL_19:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248)
            + 1148) = v18;
  return result;
}

uint64_t *WebCore::ClipperData::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (!v5)
    goto LABEL_18;
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 - 1;
  *(_QWORD *)(v6 + 8) = v8 - 1;
  if (v8 == 1)
  {
    v16 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    v11 = v16 != 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = __ldxr((unsigned __int8 *)v6);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (v9)
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (v9)
    goto LABEL_18;
LABEL_14:
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (!v11)
    WTF::fastFree((WTF *)v6, a2);
LABEL_18:
  v13 = *(_OWORD *)(a2 + 1);
  v14 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)((char *)a1 + 37) = *(_OWORD *)((char *)a2 + 37);
  *(_OWORD *)(a1 + 3) = v14;
  *(_OWORD *)(a1 + 1) = v13;
  return a1;
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::hitTestClipContent(WebCore::LegacyRenderSVGResourceClipper *this, const WebCore::FloatRect *a2, const WebCore::FloatPoint *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  void *v16;
  WTF *v17;
  const WebCore::FloatPoint *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  float v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v33;
  double v34;
  BOOL v35;
  double v36;
  double v37;
  double v38;
  __int128 *v39;
  char v40;
  double v41;
  unsigned int v42;
  uint64_t v43;
  double v44;
  double v45;
  double v47;
  double v48;
  double v49;
  double v50;
  __int128 *v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  _QWORD *v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  __int128 v73;
  uint64_t v74;
  __int16 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  uint64_t v80;
  __int128 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  float v86[4];

  if (byte_1ECE84B09 == 1)
  {
    v6 = dword_1ECE84B18;
  }
  else
  {
    v6 = 0;
    *(_QWORD *)&dword_1ECE84B18 = 0;
    qword_1ECE84B10 = 0;
    byte_1ECE84B09 = 1;
  }
  dword_1ECE84B18 = v6 + 1;
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8) && qword_1ECE84B10)
    {
      v8 = *(_DWORD *)(qword_1ECE84B10 - 8);
      v9 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      for (i = 1; ; ++i)
      {
        v14 = *(_QWORD *)(qword_1ECE84B10 + 8 * v12);
        if (!v14)
          break;
        if (v14 != -1 && v14 == v7)
          return 0;
        v12 = (v12 + i) & v8;
      }
    }
    goto LABEL_16;
  }
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = this;
  v17 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v7;
  if (!v17)
  {
LABEL_16:
    ++*(_DWORD *)v7;
    goto LABEL_17;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_16;
  }
  WTF::fastFree(v17, v16);
  v7 = *((_QWORD *)this + 1);
  if (v7)
    goto LABEL_16;
LABEL_17:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84B10, this, (uint64_t)&v68);
  *(_QWORD *)v86 = *(_QWORD *)a3;
  if (!WebCore::SVGRenderSupport::pointInClippingArea(this, (const WebCore::RenderElement *)v86, v18))
    goto LABEL_61;
  v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v19 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965547CCLL);
  }
  v20 = *(_QWORD **)(v19 + 216);
  v21 = v20[3];
  if (!v21 || !*(_DWORD *)(v21 - 12))
    goto LABEL_21;
  v63 = *(unsigned int *)(v21 - 4);
  if ((_DWORD)v63)
  {
    v64 = 8 * v63;
    v65 = (uint64_t *)v20[3];
    while ((unint64_t)(*v65 + 1) <= 1)
    {
      ++v65;
      v64 -= 8;
      if (!v64)
        goto LABEL_21;
    }
  }
  else
  {
    v65 = (uint64_t *)v20[3];
  }
  v66 = (uint64_t *)(v21 + 8 * v63);
  if (v65 == v66)
    goto LABEL_21;
  v67 = *v65;
LABEL_89:
  if (!*(_QWORD *)(v67 + 8))
  {
    while (++v65 != v66)
    {
      v67 = *v65;
      if ((unint64_t)(*v65 + 1) > 1)
      {
        if (v65 != v66)
          goto LABEL_89;
        break;
      }
    }
LABEL_21:
    v22 = v20 + 5;
    goto LABEL_22;
  }
  v22 = v20 + 6;
LABEL_22:
  if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v22 + 32))(*v22) == 2)
  {
    v23 = 0.0;
    v25 = *((float *)a2 + 2);
    v24 = *((float *)a2 + 3);
    v26 = v25;
    v27 = v24;
    v28 = v25 * 0.0;
    v29 = v24 * 0.0;
    v30 = v25 * v24 - v28 * v29;
    v31 = fabs(v30);
    if ((unint64_t)(*(_QWORD *)&v31 - 0x10000000000000) >> 53 > 0x3FE
      && (unint64_t)(*(_QWORD *)&v31 - 1) > 0xFFFFFFFFFFFFELL)
    {
      v40 = 0;
      LOBYTE(v68) = 0;
      v39 = &xmmword_1969FE1F0;
      v37 = 1.0;
      v38 = 0.0;
      v36 = 1.0;
    }
    else
    {
      v33 = *(float *)a2 + 0.0;
      v34 = *((float *)a2 + 1) + 0.0;
      if (v25 == 1.0 && v28 == 0.0 && (v29 == 0.0 ? (v35 = v24 == 1.0) : (v35 = 0), v35))
      {
        v38 = -v33;
        v23 = -v34;
        v69 = 0.0;
        v70 = 0.0;
        v36 = 1.0;
        v37 = 1.0;
      }
      else
      {
        v36 = v27 / v30;
        v37 = v26 / v30;
        v38 = (v29 * v34 - v27 * v33) / v30;
        v69 = -(v26 * 0.0) / v30;
        v70 = -v29 / v30;
        v23 = (v28 * v33 - v26 * v34) / v30;
      }
      v68 = v36;
      v71 = v37;
      v72 = v38;
      v39 = (__int128 *)&v68;
      v40 = 1;
      *(double *)&v73 = v23;
    }
    BYTE8(v73) = v40;
    v41 = v23 + v37 * v86[1] + *((double *)v39 + 1) * v86[0];
    *(float *)&v42 = v38 + *((double *)v39 + 2) * v86[1] + v36 * v86[0];
    *(float *)&v41 = v41;
    *(_QWORD *)v86 = __PAIR64__(LODWORD(v41), v42);
  }
  v43 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v43 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v43 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965547ECLL);
  }
  WebCore::SVGGraphicsElement::animatedLocalTransform((WebCore::SVGPolyElement **)v43, &v81);
  v44 = *(double *)&v81 * v83 - *((double *)&v81 + 1) * v82;
  v45 = fabs(v44);
  if ((unint64_t)(*(_QWORD *)&v45 - 0x10000000000000) >> 53 > 0x3FE
    && (unint64_t)(*(_QWORD *)&v45 - 1) > 0xFFFFFFFFFFFFELL)
  {
    v52 = 0;
    LOBYTE(v68) = 0;
    v51 = &xmmword_1969FE1F0;
    v48 = 1.0;
    v50 = 0.0;
    v49 = 0.0;
    v47 = 1.0;
  }
  else
  {
    v47 = 1.0;
    if (*(double *)&v81 == 1.0 && *((double *)&v81 + 1) == 0.0 && v82 == 0.0 && v83 == 1.0)
    {
      v49 = -v84;
      v50 = -v85;
      v69 = 0.0;
      v70 = 0.0;
      v48 = 1.0;
    }
    else
    {
      v47 = v83 / v44;
      v48 = *(double *)&v81 / v44;
      v49 = (v82 * v85 - v83 * v84) / v44;
      v69 = -*((double *)&v81 + 1) / v44;
      v70 = -v82 / v44;
      v50 = (*((double *)&v81 + 1) * v84 - *(double *)&v81 * v85) / v44;
    }
    v68 = v47;
    v71 = v48;
    v72 = v49;
    v51 = (__int128 *)&v68;
    v52 = 1;
    *(double *)&v73 = v50;
  }
  BYTE8(v73) = v52;
  *(float *)&v53 = v49 + *((double *)v51 + 2) * v86[1] + v47 * v86[0];
  *(float *)&v54 = v50 + v48 * v86[1] + *((double *)v51 + 1) * v86[0];
  *(_QWORD *)v86 = __PAIR64__(v54, v53);
  v55 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v55 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v55 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655480CLL);
  }
  v56 = *(_QWORD *)(v55 + 80);
  if (v56)
  {
    v57 = 1;
    do
    {
      if ((*(_WORD *)(v56 + 28) & 0x20) != 0)
      {
        v58 = *(_QWORD *)(v56 + 64);
        if ((v58 & 0xFFFFFFFFFFFFLL) != 0
          && ((*(_BYTE *)((v58 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 4
           && (*(_BYTE *)((v58 & 0xFFFFFFFFFFFFLL) + 0x35) & 0x10) != 0
           || *(_BYTE *)((v58 & 0xFFFFFFFFFFFFLL) + 0x2E) == 85
           || *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24)))
        {
          v68 = 0.0;
          v69 = 0.0;
          *(_QWORD *)&v70 = 0x4000000040;
          v71 = 0.0;
          v72 = 0.0;
          v73 = xmmword_1969F03F0;
          v74 = 0x3F80000000000000;
          v75 = 256;
          v80 = 0;
          v76 = 0u;
          v77 = 0u;
          v78 = 0u;
          v79 = 0;
          LODWORD(v81) = 320;
          BYTE4(v81) = 1;
          v59 = (*(uint64_t (**)(uint64_t, __int128 *, double *, float *, uint64_t))(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFLL)
                                                                                           + 280))(v58 & 0xFFFFFFFFFFFFLL, &v81, &v68, v86, 4);
          WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v68, v60);
          if ((v59 & 1) != 0)
            goto LABEL_62;
        }
      }
      v56 = *(_QWORD *)(v56 + 56);
    }
    while (v56);
  }
LABEL_61:
  v57 = 0;
LABEL_62:
  if (v7)
  {
    v61 = *(_QWORD **)(v7 + 8);
    if (v61)
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84B10, v61);
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree((WTF *)v7, v61);
    else
      --*(_DWORD *)v7;
  }
  return v57;
}

void WebCore::LegacyRenderSVGResourceClipper::resourceBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::AffineTransform *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  int v38;
  int v39;
  void *v40;
  WTF *v41;
  WTF *v42[5];
  __int128 v43;
  double v44;
  double v45;
  double v46;
  double v47;

  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
  {
    WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>::WeakRef<void>((uint64_t *)v42, a2);
    WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::ensure<WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(WebCore::GraphicsContext &,WebCore::RenderElement &,WebCore::FloatRect const&,WebCore::FloatRect const&,float)::$_0>((WTF **)&v43, (uint64_t *)(a1 + 304), v42);
    v41 = v42[0];
    v42[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v40);
      else
        --*(_DWORD *)v41;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  }
  else
  {
    v6 = a1 + 268;
    v7 = (float *)(a1 + 268 + 16 * a3);
    v8 = v7 + 2;
    if (v7[2] <= 0.0 || *(float *)(v6 + 16 * a3 + 12) <= 0.0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      if ((*(_WORD *)(v17 + 28) & 0x20) == 0
        || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x196554C58);
      }
      v18 = *(_QWORD *)(v17 + 80);
      if (v18)
      {
        v19 = (float *)(v6 + 16 * a3 + 12);
        do
        {
          if ((*(_WORD *)(v18 + 28) & 0x20) != 0)
          {
            v20 = *(_QWORD *)(v18 + 64);
            v21 = v20 & 0xFFFFFFFFFFFFLL;
            if ((v20 & 0xFFFFFFFFFFFFLL) != 0
              && ((*(_BYTE *)((v20 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 4
               && (*(_BYTE *)((v20 & 0xFFFFFFFFFFFFLL) + 0x35) & 0x10) != 0
               || *(_BYTE *)((v20 & 0xFFFFFFFFFFFFLL) + 0x2E) == 85
               || *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24)))
            {
              v22 = v20 & 0xFFFFFFFFFFFFLL;
              if ((*(_BYTE *)(v21 + 45) & 2) != 0)
              {
                v22 = *(_QWORD *)(v21 + 32);
                if (v22)
                  v22 = *(_QWORD *)(v22 + 8);
              }
              if ((*(_QWORD *)(v22 + 96) & 0x1FLL) != 0x1A
                && (*(_BYTE *)(*(_QWORD *)(v22 + 104) + 239) & 4) == 0
                && (*(_BYTE *)(v22 + 120) & 0x30) == 0)
              {
                v23 = (WebCore::AffineTransform *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 272))(v21);
                LODWORD(v43) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 256))(v21, a3);
                *(_QWORD *)((char *)&v43 + 4) = __PAIR64__(v25, v24);
                HIDWORD(v43) = v26;
                v27 = WebCore::AffineTransform::mapRect(v23, (const WebCore::FloatRect *)&v43);
                if (v29 > 0.0 && v30 > 0.0)
                {
                  if (*v8 <= 0.0 || (v31 = *v19, *v19 <= 0.0))
                  {
                    *v7 = v27;
                    v7[1] = v28;
                    v7[2] = v29;
                    v7[3] = v30;
                  }
                  else
                  {
                    v32 = v7[1];
                    if (v27 >= *v7)
                      v33 = *v7;
                    else
                      v33 = v27;
                    if (v28 >= v32)
                      v34 = v7[1];
                    else
                      v34 = v28;
                    v35 = v29 + v27;
                    if ((float)(*v8 + *v7) >= v35)
                      v35 = *v8 + *v7;
                    v36 = v30 + v28;
                    if ((float)(v31 + v32) >= v36)
                      v36 = v31 + v32;
                    *v7 = v33;
                    v7[1] = v34;
                    *v8 = v35 - v33;
                    *v19 = v36 - v34;
                  }
                }
              }
            }
          }
          v18 = *(_QWORD *)(v18 + 56);
        }
        while (v18);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if ((*(_WORD *)(v17 + 28) & 0x20) == 0
          || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x196554C78);
        }
      }
      WebCore::SVGGraphicsElement::animatedLocalTransform((WebCore::SVGPolyElement **)v17, &v43);
      *v7 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v43, (const WebCore::FloatRect *)v7);
      *((_DWORD *)v7 + 1) = v37;
      *((_DWORD *)v7 + 2) = v38;
      *((_DWORD *)v7 + 3) = v39;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v9 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196554BE4);
    }
    v10 = *(uint64_t **)(v9 + 216);
    v12 = v10 + 3;
    v11 = v10[3];
    if (v11
      && *(_DWORD *)(v11 - 12)
      && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v12, (uint64_t **)&v43), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v12, (uint64_t **)v42), *((WTF **)&v43 + 1) != v42[1]))
    {
      v13 = v10 + 6;
    }
    else
    {
      v13 = v10 + 5;
    }
    if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13) == 2)
    {
      v46 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2) + 0.0;
      v47 = v14 + 0.0;
      *(double *)&v43 = v16;
      *((double *)&v43 + 1) = v16 * 0.0;
      v44 = v15 * 0.0;
      v45 = v15;
      WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v43, (const WebCore::FloatRect *)v7);
    }
  }
}

void `non-virtual thunk to'WebCore::LegacyRenderSVGResourceClipper::resourceBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::LegacyRenderSVGResourceClipper::resourceBoundingBox(a1 - 216, a2, a3);
}

uint64_t WebCore::LegacyRenderSVGResourceContainer::layout(WebCore::LegacyRenderSVGResourceContainer *this)
{
  WebCore::LegacyRenderSVGResourceContainer *v2;
  uint64_t result;
  unsigned int v4;

  if ((*(unsigned int (**)(WebCore::LegacyRenderSVGResourceContainer *))(*(_QWORD *)this + 848))(this))
    WebCore::LegacyRenderSVGRoot::addResourceForClientInvalidation(this, v2);
  result = WebCore::SVGRenderSupport::layoutChildren((uint64_t)this, (WebCore::RenderElement *)((*((_DWORD *)this + 5) >> 3) & 1));
  v4 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v4;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v4 & 0xFFDFFE07;
  return result;
}

void WebCore::LegacyRenderSVGResourceContainer::willBeDestroyed(WebCore::LegacyRenderSVGResourceContainer *this, WebCore::LegacyRenderSVGResourceContainer *a2)
{
  const WebCore::RenderElement *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const WebCore::RenderElement *v10;
  WebCore::RenderElement **v11;

  WebCore::SVGResourcesCache::resourceDestroyed(this, a2);
  if (*((_BYTE *)this + 264))
  {
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      v6 = (*(_WORD *)(*(_QWORD *)v4 + 28) & 0x80) == 0;
    else
      v6 = 1;
    if (!v6 && !*(_BYTE *)(v5 + 193))
    {
      v7 = *(_QWORD *)(v5 + 200);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          if (*(_WORD *)(*(_QWORD *)(v8 + 96) + 10) == 242)
            v4 = (WTF::StringImpl *)*((_QWORD *)v4 + 2);
        }
      }
    }
    WebCore::TreeScope::removeSVGResource(v4, (WebCore::LegacyRenderSVGResourceContainer *)((char *)this + 224));
    *((_BYTE *)this + 264) = 0;
  }
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x1000) != 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
  {
    v9 = (_QWORD *)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, v3);
    if (v9)
    {
      WebCore::SVGResources::removeClientFromCache(v9, this, 1);
      v11 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), v10);
      WebCore::SVGResourcesCache::removeResourcesFromRenderer(v11, this);
    }
  }
  WebCore::RenderElement::willBeDestroyed(this, v3);
}

void WebCore::LegacyRenderSVGResourceContainer::styleDidChange(WebCore::RenderElement *a1, void *a2, const WTF::StringImpl *a3)
{
  void *v4;

  WebCore::LegacyRenderSVGModelObject::styleDidChange(a1, a2, a3);
  if (!*((_BYTE *)a1 + 264))
  {
    *((_BYTE *)a1 + 264) = 1;
    WebCore::LegacyRenderSVGResourceContainer::registerResource(a1, v4);
  }
}

unsigned int *WebCore::LegacyRenderSVGResourceContainer::registerResource(WebCore::LegacyRenderSVGResourceContainer *this, void *a2)
{
  WebCore::TreeScope *v3;
  uint64_t v4;
  __int16 v5;
  BOOL v6;
  uint64_t v7;
  char *v8;
  unsigned int *result;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  void *v15;
  WebCore::SVGElement **v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  WebCore::SVGElement **v23;
  unsigned int v24;

  v3 = *(WebCore::TreeScope **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
  v4 = *(_QWORD *)v3;
  v5 = *(_WORD *)(*(_QWORD *)v3 + 28);
  if (*(_QWORD *)v3)
    v6 = (v5 & 0x80) == 0;
  else
    v6 = 1;
  if (!v6 && !*(_BYTE *)(v4 + 193))
  {
    v20 = *(_QWORD *)(v4 + 200);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        if (*(_WORD *)(*(_QWORD *)(v21 + 96) + 10) == 242)
        {
          v3 = (WebCore::TreeScope *)*((_QWORD *)v3 + 2);
          v4 = *(_QWORD *)v3;
          v5 = *(_WORD *)(*(_QWORD *)v3 + 28);
        }
      }
    }
  }
  if ((v5 & 0xF000) != 0x9000 && (v5 & 0x80) == 0)
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v8 = (char *)this + 224;
  v7 = *((_QWORD *)this + 28);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 4)
      && (v12 = (uint64_t *)WebCore::TreeScope::svgResourcesMap(v3), *v12)
      && WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>(v12, (uint64_t *)this + 28))
    {
      WebCore::TreeScope::removePendingSVGResource(v3, (WebCore::LegacyRenderSVGResourceContainer *)((char *)this + 224), v22);
      WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v22, v13, (uint64_t)&v23);
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v22, v14);
      WebCore::TreeScope::addSVGResource(v3, (unsigned int **)this + 28, this);
      if (v24)
      {
        v16 = v23;
        for (i = 8 * v24; i; i -= 8)
        {
          WebCore::TreeScope::clearHasPendingSVGResourcesIfPossible(v3, *v16);
          v18 = *((_QWORD *)*v16 + 8);
          v19 = v18 & 0xFFFFFFFFFFFFLL;
          if ((v18 & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((v18 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
LABEL_38:
              JUMPOUT(0x196555094);
            }
            WebCore::SVGResourcesCache::clientStyleChanged(v19, (void *)8, 0, (const WebCore::RenderStyle *)(v19 + 80));
            WebCore::RenderObject::setNeedsLayout((WebCore::RenderObject *)v19, 1);
          }
          ++v16;
        }
      }
      WTF::Vector<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v15);
    }
    else if (*(_QWORD *)v8 && *(_DWORD *)(*(_QWORD *)v8 + 4))
    {
      v11 = WebCore::TreeScope::svgResourcesMap(v3);
      v22[0] = (uint64_t)this;
      WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::LegacyRenderSVGResourceContainer *>(v11 + 48, (unsigned int **)this + 28, v22, (uint64_t)&v23);
    }
  }
  result = *(unsigned int **)v3;
  v10 = *(_WORD *)(*(_QWORD *)v3 + 28);
  if ((!*(_QWORD *)v3 || (v10 & 0xF000) != 0x9000) && (v10 & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965550B8);
  }
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  else
  {
    result[6] -= 2;
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceContainer::idChanged(WebCore::LegacyRenderSVGResourceContainer *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  BOOL v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t result;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = 0;
  (*(void (**)(char *, uint64_t, _QWORD *))(*((_QWORD *)this + 27) + 16))((char *)this + 216, 1, v24);
  v3 = v24[0];
  if (v24[0])
  {
    v4 = *(unsigned int *)(v24[0] - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)v24[0];
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, v2);
            else
              --*(_DWORD *)v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  v7 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
  v8 = *(_QWORD *)v7;
  if (*(_QWORD *)v7)
    v9 = (*(_WORD *)(*(_QWORD *)v7 + 28) & 0x80) == 0;
  else
    v9 = 1;
  if (!v9 && !*(_BYTE *)(v8 + 193))
  {
    v22 = *(_QWORD *)(v8 + 200);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        if (*(_WORD *)(*(_QWORD *)(v23 + 96) + 10) == 242)
          v7 = (WTF::StringImpl *)*((_QWORD *)v7 + 2);
      }
    }
  }
  v10 = (WTF::StringImpl **)((char *)this + 224);
  WebCore::TreeScope::removeSVGResource(v7, (WebCore::LegacyRenderSVGResourceContainer *)((char *)this + 224));
  v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v12 + 28) & 0x20) != 0)
  {
    v13 = *(_QWORD *)(v12 + 104);
    if (v13 && *(_QWORD *)(v13 + 24))
    {
      v18 = *(_DWORD *)(v13 + 4);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD **)(v13 + 40);
        LODWORD(v20) = *(_DWORD *)(v13 + 52);
      }
      else
      {
        v19 = (_QWORD *)(v13 + 32);
        LODWORD(v20) = v18 >> 5;
      }
      if ((_DWORD)v20)
      {
        v20 = v20;
        while (1)
        {
          v21 = *v19;
          if (*v19 == WebCore::HTMLNames::idAttr
            || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
            && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
          {
            break;
          }
          v19 += 2;
          if (!--v20)
            goto LABEL_39;
        }
      }
      else
      {
LABEL_39:
        v19 = 0;
      }
      v14 = (WTF::StringImpl **)(v19 + 1);
    }
    else
    {
      v14 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    v15 = *v14;
    if (v15)
      *(_DWORD *)v15 += 2;
    v16 = *v10;
    *v10 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    return (uint64_t)WebCore::LegacyRenderSVGResourceContainer::registerResource(this, v11);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceContainer::markAllClientsForRepaint(WebCore::LegacyRenderSVGResourceContainer *this)
{
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  result = WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded((uint64_t)this, 2u, (uint64_t)v7);
  v3 = v7[0];
  if (v7[0])
  {
    v4 = *(unsigned int *)(v7[0] - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)v7[0];
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, v2);
            else
              --*(_DWORD *)v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    return WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  return result;
}

uint64_t *WebCore::LegacyRenderSVGResourceContainer::markAllClientLayersForInvalidation(WebCore::LegacyRenderSVGResourceContainer *this)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::Element *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 31);
  result = (uint64_t *)((char *)this + 248);
  v2 = v3;
  if (v3)
  {
    if (*(_DWORD *)(v2 - 12))
    {
      v11 = result;
      WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(result, &v15);
      WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v11, &v13);
      result = v11;
      if (v16 != v14)
      {
        WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v11, &v15);
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) + 32) + 24)
                                               + 8)
                                   + 40)
                       + 8);
        *(_DWORD *)(v4 + 24) += 2;
        v12 = v4;
        v5 = *(_QWORD *)(v4 + 528);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 288);
            if (v7)
            {
              if (!*(_BYTE *)(v4 + 3405))
              {
                v8 = *(unsigned __int8 *)(v7 + 480);
                WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v11, &v15);
                WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v11, &v13);
                while (v16 != v14)
                {
                  v9 = *(_QWORD *)(*(_QWORD *)v16 + 8);
                  if (!v8)
                  {
                    v10 = (WebCore::Element *)WebCore::RenderLayer::enclosingElement(*(WebCore::RenderLayer **)(*(_QWORD *)v16 + 8));
                    if (v10)
                      WebCore::Element::invalidateStyleAndLayerComposition(v10);
                  }
                  WebCore::RenderObject::repaint(*(_QWORD *)(v9 + 32), 0);
                  WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v15);
                }
              }
            }
          }
        }
        return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v12);
      }
    }
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceContainer::removeClientRenderLayer(WebCore::LegacyRenderSVGResourceContainer *this, WebCore::RenderLayer *a2)
{
  return WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>((uint64_t)this + 248, a2);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(WTF **)result;
    v5 = 8 * v2;
    v8 = result;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
      result = v8;
    }
    while (v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v7 = result;
    WTF::fastFree(v3, a2);
    return v7;
  }
  return result;
}

unsigned int *WebCore::LegacyRenderSVGResourceContainer::transformOnNonScalingStroke@<X0>(unsigned int *this@<X0>, WebCore::RenderObject *a2@<X1>, const WebCore::AffineTransform *a3@<X2>, double *a4@<X8>)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  if ((this[13] & 7) == 4 && (*((_BYTE *)this + 53) & 0x10) != 0)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v7 + 28) & 0x20) == 0
      || ((*(uint64_t (**)(_QWORD, WebCore::RenderObject *, const WebCore::AffineTransform *))(*(_QWORD *)v7 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8), a2, a3) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965555F0);
    }
    *(_DWORD *)(v7 + 24) += 2;
    this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 1320))(v7, 1);
    v9 = *((double *)a2 + 1);
    v10 = a4[2];
    v11 = a4[3];
    v12 = a4[1];
    v13 = v9 * v10 + *(double *)a2 * *a4;
    v14 = v9 * v11 + *(double *)a2 * v12;
    v15 = *((double *)a2 + 2);
    v16 = *((double *)a2 + 3);
    v17 = v10 * v16 + v15 * *a4;
    v18 = v11 * v16 + v15 * v12;
    v19 = *((double *)a2 + 4);
    v20 = *((double *)a2 + 5);
    v21 = a4[4] + v10 * v20 + v19 * *a4;
    v22 = v11 * v20 + v19 * v12 + a4[5];
    *a4 = v13;
    a4[1] = v14;
    a4[2] = v17;
    a4[3] = v18;
    a4[4] = v21;
    a4[5] = v22;
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *((_OWORD *)a4 + 1) = v6;
    *((_OWORD *)a4 + 2) = *((_OWORD *)a2 + 2);
  }
  return this;
}

uint64_t WebCore::LegacyRenderSVGResourceFilter::operator new(uint64_t this)
{
  if (this == 280)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::LegacyRenderSVGResourceFilter::LegacyRenderSVGResourceFilter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int32x4_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  double result;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = WebCore::RenderElement::RenderElement(a1, 96, a2, a3, 0, 12036);
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v4 + 160) = v5;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(int32x4_t *)(v4 + 192) = v5;
  *(_WORD *)(v4 + 208) = 256;
  *(_BYTE *)(v4 + 210) = 0;
  v6 = *(_QWORD *)(a2 + 104);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v10 = *(_DWORD *)(v6 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD **)(v6 + 40);
      LODWORD(v12) = *(_DWORD *)(v6 + 52);
    }
    else
    {
      v11 = (_QWORD *)(v6 + 32);
      LODWORD(v12) = v10 >> 5;
    }
    if ((_DWORD)v12)
    {
      v12 = v12;
      while (1)
      {
        v13 = *v11;
        if (*v11 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v12)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v11 = 0;
    }
    v7 = (_DWORD **)(v11 + 1);
  }
  else
  {
    v7 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v7;
  if (v8)
    *v8 += 2;
  result = 0.0;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_WORD *)(v4 + 264) = 0;
  *(_QWORD *)v4 = off_1E344C5D8;
  *(_QWORD *)(v4 + 216) = &unk_1E344C970;
  *(_QWORD *)(v4 + 224) = v8;
  *(_QWORD *)(v4 + 272) = 0;
  return result;
}

void WebCore::LegacyRenderSVGResourceFilter::~LegacyRenderSVGResourceFilter(WebCore::LegacyRenderSVGResourceFilter *this, void *a2)
{
  WTF **v3;

  v3 = (WTF **)*((_QWORD *)this + 34);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
}

{
  WTF **v3;
  void *v4;

  v3 = (WTF **)*((_QWORD *)this + 34);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 34) = 0;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

void `non-virtual thunk to'WebCore::LegacyRenderSVGResourceFilter::~LegacyRenderSVGResourceFilter(WebCore::LegacyRenderSVGResourceFilter *this, void *a2)
{
  WTF **v3;

  v3 = (WTF **)*((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer((WebCore::LegacyRenderSVGResourceFilter *)((char *)this - 216), a2);
}

{
  WebCore::LegacyRenderSVGResourceContainer *v3;
  WTF **v4;
  void *v5;

  v3 = (WebCore::LegacyRenderSVGResourceFilter *)((char *)this - 216);
  v4 = (WTF **)*((_QWORD *)this + 7);
  if (v4)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v4, a2);
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(v3, a2);
  if (*((_DWORD *)this - 50))
  {
    *((_QWORD *)v3 + 34) = 0;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v3, v5);
  }
}

BOOL WebCore::LegacyRenderSVGResourceFilter::isIdentity(WebCore::LegacyRenderSVGResourceFilter *this, WebCore::SVGFilterElement *a2)
{
  uint64_t v2;
  void *v3;
  _BOOL8 isIdentity;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965559E4);
  }
  *(_DWORD *)(v2 + 24) += 2;
  isIdentity = WebCore::SVGFilter::isIdentity((WebCore::SVGFilter *)v2, a2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return isIdentity;
}

uint64_t WebCore::LegacyRenderSVGResourceFilter::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  int v4;
  WTF **v6;
  unsigned int v7;

  v4 = (int)a2;
  v6 = *(WTF ***)(a1 + 272);
  if (v6)
  {
    *(_QWORD *)(a1 + 272) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v6, a2);
  }
  if (v4)
    v7 = 0;
  else
    v7 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1, v7, a3);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceFilter::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  return WebCore::LegacyRenderSVGResourceFilter::removeAllClientsFromCacheIfNeeded(a1 - 216, a2, a3);
}

uint64_t WebCore::LegacyRenderSVGResourceFilter::removeClientFromCache(WebCore::LegacyRenderSVGResourceFilter *this, WebCore::RenderElement *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;

  v6 = *((_QWORD *)this + 34);
  v7 = WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::find<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(v6, (uint64_t)a2);
  if (v6)
    v8 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v8 = 0;
  if (v8 != v7)
  {
    v11 = *(_QWORD *)(v7 + 8);
    if (*(_QWORD *)(v11 + 32))
      *(_DWORD *)(v11 + 40) = 4;
    else
      LODWORD(v7) = WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::remove((uint64_t *)this + 34, (WTF **)v7);
  }
  if (a3)
    v9 = 1;
  else
    v9 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(v7, a2, v9);
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::find<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  for (i = 1; ; ++i)
  {
    v8 = *(_QWORD *)(a1 + 16 * v6);
    if (!v8)
      break;
    if (v8 != -1 && *(_QWORD *)(v8 + 8) == a2)
      return a1 + 16 * v6;
    v6 = (v6 + i) & v2;
  }
  return a1 + 16 * *(unsigned int *)(a1 - 4);
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF **a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((WTF **)v2 == a2)
    return 0;
LABEL_3:
  if ((WTF **)v2 != a2)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::remove(a1, a2);
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceFilter::removeClientFromCache(WebCore::LegacyRenderSVGResourceFilter *this, WebCore::RenderElement *a2, int a3)
{
  return WebCore::LegacyRenderSVGResourceFilter::removeClientFromCache((WebCore::LegacyRenderSVGResourceFilter *)((char *)this - 216), a2, a3);
}

uint64_t WebCore::LegacyRenderSVGResourceFilter::applyResource(uint64_t *a1, uint64_t a2, uint64_t a3, const WebCore::SVGFilter **a4)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int i;
  uint64_t v15;
  int j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  _OWORD *v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  float v32;
  const WebCore::RenderObject *v33;
  float v34;
  float v35;
  float v36;
  int v37;
  int v38;
  int v39;
  float v40;
  float v41;
  float v42;
  char v44;
  const WebCore::SVGFilter *v45;
  uint64_t v46;
  void *v47;
  CFTypeRef v48;
  WebCore::Filter *v49;
  void *v50;
  unsigned __int8 **v51;
  WebCore::DestinationColorSpace *v52;
  const void *v53;
  WebCore::Filter *v54;
  WTF **v55;
  uint64_t v56;
  WTF **v57;
  uint64_t v58;
  void *v59;
  WTF **v60;
  uint64_t v61;
  WTF **v62;
  WebCore::Filter *v63;
  uint64_t v64;
  CFTypeRef v65;
  float v66;
  WebCore::Filter *v67;
  WTF **v68;
  CFTypeRef cf;
  unint64_t v70;
  WTF *v71[6];
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75[3];

  v7 = a1[34];
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = 1;
    for (i = v12; ; i = (i + v13++) & v8)
    {
      v15 = *(_QWORD *)(v7 + 16 * i);
      if (!v15)
        break;
      if (v15 != -1 && *(_QWORD *)(v15 + 8) == a2)
      {
        for (j = 1; ; ++j)
        {
          v17 = *(_QWORD *)(v7 + 16 * v12);
          if (!v17)
            break;
          if (v17 != -1 && *(_QWORD *)(v17 + 8) == a2)
          {
            v18 = *(_QWORD *)(v7 + 16 * v12 + 8);
            goto LABEL_11;
          }
          v12 = (v12 + j) & v8;
        }
        v18 = 0;
LABEL_11:
        if (*(_DWORD *)(v18 + 40) <= 1u)
        {
          v19 = 0;
          *(_DWORD *)(v18 + 40) = 3;
        }
        else if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 8) + 24))(*(_QWORD *)(v18 + 8)) & 1) != 0)
        {
          return 0;
        }
        else
        {
          (*(void (**)(_QWORD, const WebCore::SVGFilter *, float))(**(_QWORD **)(v18 + 8) + 48))(*(_QWORD *)(v18 + 8), *a4, 1.0);
          return 1;
        }
        return v19;
      }
    }
  }
  v21 = a1 + 34;
  WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>::WeakRef<void>((uint64_t *)v71, a2);
  v22 = (_OWORD *)bmalloc::api::isoAllocate();
  *v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  *(_QWORD *)&v74 = v22;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>((uint64_t)v75, a1 + 34, v71, (uint64_t *)&v74);
  if ((_QWORD)v74)
    std::default_delete<WebCore::FilterData>::operator()[abi:sn180100]((bmalloc::api *)v74, v23);
  v24 = v71[0];
  v71[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::fastFree(v24, v23);
    else
      --*(_DWORD *)v24;
  }
  v25 = *(_QWORD *)(v75[0] + 8);
  LODWORD(v74) = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  *(_QWORD *)((char *)&v74 + 4) = __PAIR64__(v27, v26);
  HIDWORD(v74) = v28;
  v29 = WebCore::LegacyRenderSVGResourceFilter::filterElement((WebCore::LegacyRenderSVGResourceFilter *)a1);
  *(_DWORD *)(v29 + 24) += 2;
  v73 = v29;
  v30 = WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::currentValue<WebCore::SVGUnitTypes::SVGUnitType>(*(_QWORD *)(v29 + 192));
  LODWORD(v72) = WebCore::SVGLengthContext::resolveRectangle<WebCore::SVGFilterElement>((uint64_t *)v29, v30, (float *)&v74);
  *(_QWORD *)((char *)&v72 + 4) = __PAIR64__(LODWORD(v32), v31);
  *((float *)&v72 + 3) = v34;
  if (v32 <= 0.0)
    goto LABEL_47;
  if (v34 <= 0.0)
    goto LABEL_47;
  WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem((WebCore::SVGRenderingContext *)a2, v33, (double *)v71);
  if (!WebCore::AffineTransform::isInvertible((WebCore::AffineTransform *)v71))
    goto LABEL_47;
  v35 = hypot(*(long double *)v71, *(long double *)&v71[1]);
  v36 = hypot(*(long double *)&v71[2], *(long double *)&v71[3]);
  v70 = __PAIR64__(LODWORD(v36), LODWORD(v35));
  *(float *)(v25 + 16) = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
  *(_DWORD *)(v25 + 20) = v37;
  *(_DWORD *)(v25 + 24) = v38;
  *(_DWORD *)(v25 + 28) = v39;
  WebCore::FloatRect::intersect((float32x2_t *)(v25 + 16), (float32x2_t *)&v72);
  v40 = *(float *)(v25 + 24) * v35;
  if (v40 > 0.0)
  {
    v41 = *(float *)(v25 + 28) * v36;
    v42 = floorf(v40) * floorf(v41);
    if (v41 > 0.0 && v42 > 16777000.0)
    {
      v66 = sqrtf(16777000.0 / (float)(v40 * v41));
      *(float *)&v70 = v66 * v35;
      *((float *)&v70 + 1) = v66 * v36;
    }
  }
  v44 = WebCore::Page::preferredFilterRenderingModes(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 528)
                                                                                               + 8)
                                                                                   + 24)
                                                                       + 8));
  v45 = *a4;
  v46 = WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebCore::SVGFilter::create((uint64_t *)v29, v44, &v70, &v72, &v74, v45, v46, 1, (uint64_t *)&cf);
  v48 = cf;
  cf = 0;
  v49 = *(WebCore::Filter **)v25;
  *(_QWORD *)v25 = v48;
  if (v49)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v49 + 1, v47);
    v51 = (unsigned __int8 **)cf;
    cf = 0;
    if (v51)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v51 + 1, v50);
  }
  if (*(_QWORD *)v25)
  {
    WebCore::Filter::clampFilterRegionIfNeeded(*(WebCore::Filter **)v25);
    v53 = (const void *)*WebCore::DestinationColorSpace::LinearSRGB(v52);
    cf = v53;
    if (v53)
      CFRetain(v53);
    v54 = *(WebCore::Filter **)v25;
    v55 = (WTF **)WTF::fastMalloc((WTF *)0x10);
    *v55 = (WTF *)off_1E344CDF0;
    v68 = v55;
    v56 = WebCore::SVGFilter::ensureResults((uint64_t)v54, (uint64_t)&v68);
    v57 = v68;
    v68 = 0;
    if (v57)
      (*((void (**)(WTF **))*v57 + 1))(v57);
    v58 = (uint64_t)*a4;
    WTF::RefPtr<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::RefPtr<WebCore::SVGFilter,WTF::RawPtrTraits<WebCore::SVGFilter>,WTF::DefaultRefDerefTraits<WebCore::SVGFilter>>(&v67, *(_QWORD *)v25);
    WebCore::GraphicsContextSwitcher::create(v58, (const WebCore::FloatRect *)(v25 + 16), (uint64_t)&cf, &v67, v56, &v68);
    v60 = v68;
    v68 = 0;
    v61 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)(v25 + 8) = v60;
    if (v61)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
      v62 = v68;
      v68 = 0;
      if (v62)
        (*((void (**)(WTF **))*v62 + 1))(v62);
    }
    v63 = v67;
    v67 = 0;
    if (v63)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v63 + 1, v59);
    v64 = *(_QWORD *)(v25 + 8);
    if (v64)
    {
      if (*(float *)(v25 + 24) <= 0.0 || *(float *)(v25 + 28) <= 0.0)
      {
        v19 = 0;
        *(_QWORD *)(v25 + 32) = *a4;
      }
      else
      {
        (*(void (**)(uint64_t, const WebCore::SVGFilter *, float))(*(_QWORD *)v64 + 48))(v64, *a4, 1.0);
        *(_QWORD *)(v25 + 32) = *a4;
        *a4 = (const WebCore::SVGFilter *)(*(uint64_t (**)(_QWORD, const WebCore::SVGFilter *))(**(_QWORD **)(v25 + 8) + 16))(*(_QWORD *)(v25 + 8), *a4);
        v19 = 1;
      }
    }
    else
    {
      WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(v21, a2);
      v19 = 0;
    }
    v65 = cf;
    cf = 0;
    if (v65)
      CFRelease(v65);
  }
  else
  {
LABEL_47:
    WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(v21, a2);
    v19 = 0;
  }
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v73);
  return v19;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = *(_QWORD *)(result + 16 * v6);
      if (!v8)
        break;
      if (v8 != -1 && *(_QWORD *)(v8 + 8) == a2)
        return *(_QWORD *)(result + 16 * v6 + 8);
      v6 = (v6 + i) & v2;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceFilter::filterElement(WebCore::LegacyRenderSVGResourceFilter *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(result + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965561DCLL);
  }
  return result;
}

WTF **WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  WTF **result;
  WTF **v5;

  v3 = *a1;
  result = (WTF **)WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::find<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(*a1, a2);
  if (v3)
  {
    v5 = (WTF **)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v5 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v5 = 0;
  }
  if (v5 != result)
    return WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::remove(a1, result);
  return result;
}

_QWORD *WTF::RefPtr<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::RefPtr<WebCore::SVGFilter,WTF::RawPtrTraits<WebCore::SVGFilter>,WTF::DefaultRefDerefTraits<WebCore::SVGFilter>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;

  if (!a2)
    goto LABEL_11;
  v4 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a1 = a2;
  return a1;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceFilter::applyResource(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::SVGFilter **a4)
{
  return WebCore::LegacyRenderSVGResourceFilter::applyResource((uint64_t *)(a1 - 216), a2, a3, a4);
}

uint64_t *WebCore::LegacyRenderSVGResourceFilter::postApplyResource(uint64_t *result, WebCore::RenderElement *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char **v19;
  char *v20;

  v3 = result[34];
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = *(_QWORD *)(v3 + 16 * v8);
      if (!v10)
        break;
      if (v10 != -1 && *(WebCore::RenderElement **)(v10 + 8) == a2)
      {
        v11 = v3 + 16 * v8;
        v12 = *(unsigned int *)(v3 - 4);
        goto LABEL_7;
      }
      v8 = (v8 + i) & v4;
    }
    v12 = *(unsigned int *)(v3 - 4);
    v11 = v3 + 16 * v12;
LABEL_7:
    if (v11 != v3 + 16 * v12)
    {
      v13 = *(_QWORD *)(v11 + 8);
      switch(*(_DWORD *)(v13 + 40))
      {
        case 0:
          v17 = *(_QWORD *)(v13 + 32);
          if (v17)
          {
            *a3 = v17;
            *(_QWORD *)(v13 + 32) = 0;
            goto LABEL_9;
          }
          result = (uint64_t *)WebCore::LegacyRenderSVGResourceFilter::removeClientFromCache((WebCore::LegacyRenderSVGResourceFilter *)result, a2, 1);
          break;
        case 1:
        case 3:
          *(_DWORD *)(v13 + 40) = 0;
          break;
        case 4:
          result = (uint64_t *)WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::remove(result + 34, (WTF **)v11);
          break;
        default:
LABEL_9:
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            *(_DWORD *)(v13 + 40) = 2;
            v15 = *a3;
            v16 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
            if (v16 != -1)
            {
              v20 = &v18;
              v19 = &v20;
              std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
            }
            result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 56))(v14, v15, &WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::colorSpace);
          }
          break;
      }
    }
  }
  return result;
}

uint64_t *`non-virtual thunk to'WebCore::LegacyRenderSVGResourceFilter::postApplyResource(uint64_t a1, WebCore::RenderElement *a2, uint64_t *a3)
{
  return WebCore::LegacyRenderSVGResourceFilter::postApplyResource((uint64_t *)(a1 - 216), a2, a3);
}

float WebCore::LegacyRenderSVGResourceFilter::resourceBoundingBox(WebCore::LegacyRenderSVGResourceFilter *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v10[4];
  uint64_t v11;

  v3 = WebCore::LegacyRenderSVGResourceFilter::filterElement(a1);
  *(_DWORD *)(v3 + 24) += 2;
  v11 = v3;
  v4 = WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::currentValue<WebCore::SVGUnitTypes::SVGUnitType>(*(_QWORD *)(v3 + 192));
  v10[0] = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  v8 = WebCore::SVGLengthContext::resolveRectangle<WebCore::SVGFilterElement>((uint64_t *)v3, v4, v10);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v11);
  return v8;
}

float `non-virtual thunk to'WebCore::LegacyRenderSVGResourceFilter::resourceBoundingBox(uint64_t a1, uint64_t a2)
{
  return WebCore::LegacyRenderSVGResourceFilter::resourceBoundingBox((WebCore::LegacyRenderSVGResourceFilter *)(a1 - 216), a2);
}

float WebCore::LegacyRenderSVGResourceFilter::drawingRegion(WebCore::LegacyRenderSVGResourceFilter *this, WebCore::RenderObject *a2)
{
  uint64_t v2;
  float result;

  v2 = WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(*((_QWORD *)this + 34), (uint64_t)a2);
  result = 0.0;
  if (v2)
    return *(float *)(v2 + 16);
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceFilterPrimitive::operator new(uint64_t this)
{
  if (this == 216)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

int32x4_t WebCore::LegacyRenderSVGResourceFilterPrimitive::LegacyRenderSVGResourceFilterPrimitive(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int32x4_t *v3;
  int32x4_t result;

  v3 = (int32x4_t *)WebCore::RenderElement::RenderElement(a1, 97, a2, a3, 0, 9988);
  result = vdupq_n_s32(0x7FC00000u);
  v3[9].i64[0] = 0;
  v3[9].i64[1] = 0;
  v3[10] = result;
  v3[11].i64[0] = 0;
  v3[11].i64[1] = 0;
  v3[12] = result;
  v3[13].i16[0] = 256;
  v3[13].i8[2] = 0;
  v3->i64[0] = (uint64_t)off_1E344C9C0;
  return result;
}

void WebCore::LegacyRenderSVGResourceFilterPrimitive::styleDidChange(WebCore::RenderElement *a1, void *a2, const WTF::StringImpl *a3)
{
  int v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SVGFilterPrimitiveStandardAttributes *v10;
  uint64_t *v11;
  WebCore::SVGFilterPrimitiveStandardAttributes *v12;
  WebCore::SVGRenderStyle *v13;

  v4 = (int)a2;
  WebCore::LegacyRenderSVGModelObject::styleDidChange(a1, a2, a3);
  if (v4 && a3)
  {
    v7 = (WebCore::SVGRenderStyle *)*((_QWORD *)a1 + 17);
    ++*(_DWORD *)v7;
    v13 = v7;
    v8 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
    if ((*(_BYTE *)(v8 + 28) & 0x20) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
      if (v9 == *(_QWORD *)(WebCore::SVGNames::feFloodTag + 24)
        || v9 == *(_QWORD *)(WebCore::SVGNames::feDropShadowTag + 24))
      {
        if ((WebCore::StyleColor::operator==(*((_QWORD *)v7 + 7) + 8, *(_QWORD *)(*((_QWORD *)a3 + 7) + 56) + 8) & 1) == 0)
        {
          v12 = *(WebCore::SVGFilterPrimitiveStandardAttributes **)(*((_QWORD *)a1 + 3) + 8);
          if ((*((_WORD *)v12 + 14) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1965567F0);
          }
          WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(v12, (const WebCore::QualifiedName *)&WebCore::SVGNames::flood_colorAttr);
        }
        if (*(float *)(*((_QWORD *)v7 + 7) + 4) == *(float *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 56) + 4))
          goto LABEL_18;
        v10 = *(WebCore::SVGFilterPrimitiveStandardAttributes **)(*((_QWORD *)a1 + 3) + 8);
        if ((*((_WORD *)v10 + 14) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1965567D0);
        }
        v11 = &WebCore::SVGNames::flood_opacityAttr;
        goto LABEL_17;
      }
      if (v9 != *(_QWORD *)(WebCore::SVGNames::feDiffuseLightingTag + 24)
        && v9 != *(_QWORD *)(WebCore::SVGNames::feSpecularLightingTag + 24)
        || (WebCore::StyleColor::operator==(*((_QWORD *)v7 + 7) + 24, *(_QWORD *)(*((_QWORD *)a3 + 7) + 56) + 24) & 1) != 0)
      {
        goto LABEL_18;
      }
      v10 = *(WebCore::SVGFilterPrimitiveStandardAttributes **)(*((_QWORD *)a1 + 3) + 8);
      if ((*((_WORD *)v10 + 14) & 0x20) != 0)
      {
        v11 = &WebCore::SVGNames::lighting_colorAttr;
LABEL_17:
        WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(v10, (const WebCore::QualifiedName *)v11);
LABEL_18:
        WTF::Ref<WebCore::SVGRenderStyle,WTF::RawPtrTraits<WebCore::SVGRenderStyle>,WTF::DefaultRefDerefTraits<WebCore::SVGRenderStyle>>::~Ref(&v13, v6);
        return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1965567B0);
  }
}

uint64_t WebCore::LegacyRenderSVGResourceFilterPrimitive::markFilterEffectForRepaint(uint64_t this, WebCore::FilterEffect *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  _BYTE v17[20];
  __int128 v18;
  char v19;

  v2 = *(_QWORD *)(this + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 46) == 96)
      {
        ++*(_DWORD *)(v3 + 16);
        if (!a2)
        {
LABEL_31:
          this = (uint64_t)WebCore::LegacyRenderSVGResourceContainer::markAllClientLayersForInvalidation((WebCore::LegacyRenderSVGResourceContainer *)v3);
          v16 = *(_DWORD *)(v3 + 16);
          if (v16)
          {
            *(_DWORD *)(v3 + 16) = v16 - 1;
          }
          else
          {
            this = 286;
            __break(0xC471u);
          }
          return this;
        }
        v5 = *(_QWORD *)(v3 + 272);
        if (v5)
        {
          v6 = *(unsigned int *)(v5 - 4);
          v7 = (_QWORD *)(v5 + 16 * v6);
          if (*(_DWORD *)(v5 - 12))
          {
            v8 = *(_QWORD **)(v3 + 272);
            if ((_DWORD)v6)
            {
              v9 = 16 * v6;
              v8 = *(_QWORD **)(v3 + 272);
              while ((unint64_t)(*v8 + 1) <= 1)
              {
                v8 += 2;
                v9 -= 16;
                if (!v9)
                {
                  v8 = v7;
                  goto LABEL_15;
                }
              }
            }
            goto LABEL_15;
          }
          v8 = (_QWORD *)(v5 + 16 * v6);
        }
        else
        {
          v8 = 0;
          v6 = 0;
        }
        v7 = (_QWORD *)(v5 + 16 * v6);
LABEL_15:
        if (v5)
          v10 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
        else
          v10 = 0;
        while (v8 != v10)
        {
          v11 = (_DWORD *)v8[1];
          if (v11[10] == 2)
          {
            v12 = *(_QWORD *)(*v8 + 8);
            v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8);
            if (!*(_BYTE *)(v13 + 3405))
            {
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 1944) + 24) + 8)
                                                     + 40)
                                         + 8)
                             + 3382))
              {
                LOBYTE(v18) = 0;
                v19 = 0;
                v17[0] = 0;
                v17[16] = 0;
                WebCore::RenderObject::issueRepaint(v12, &v18, 0, 0, (uint64_t)v17);
              }
              v11 = (_DWORD *)v8[1];
            }
            v14 = *(_QWORD *)(*(_QWORD *)v11 + 128);
            if (v14)
              WebCore::FilterResults::clearEffectResult(v14, a2);
          }
          v15 = v8 + 2;
          v8 = v7;
          if (v15 != v7)
          {
            v8 = v15;
            while ((unint64_t)(*v8 + 1) <= 1)
            {
              v8 += 2;
              if (v8 == v7)
              {
                v8 = v7;
                break;
              }
            }
          }
        }
        goto LABEL_31;
      }
    }
  }
  return this;
}

uint64_t WebCore::LegacyRenderSVGResourceFilterPrimitive::markFilterEffectForRebuild(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;
  int v8;
  _QWORD v9[2];

  v1 = *(_QWORD *)(this + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) == 96)
      {
        ++*(_DWORD *)(v2 + 16);
        v9[0] = 0;
        v9[1] = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(v2 + 216) + 16))(v2 + 216, 1, v9);
        v4 = v9[0];
        if (v9[0])
        {
          v5 = *(unsigned int *)(v9[0] - 4);
          if ((_DWORD)v5)
          {
            v6 = (WTF **)v9[0];
            do
            {
              v7 = *v6;
              if (*v6 != (WTF *)-1)
              {
                *v6 = 0;
                if (v7)
                {
                  if (*(_DWORD *)v7 == 1)
                    WTF::fastFree(v7, v3);
                  else
                    --*(_DWORD *)v7;
                }
              }
              ++v6;
              --v5;
            }
            while (v5);
          }
          WTF::fastFree((WTF *)(v4 - 16), v3);
        }
        this = (uint64_t)WebCore::LegacyRenderSVGResourceContainer::markAllClientLayersForInvalidation((WebCore::LegacyRenderSVGResourceContainer *)v2);
        v8 = *(_DWORD *)(v2 + 16);
        if (v8)
        {
          *(_DWORD *)(v2 + 16) = v8 - 1;
        }
        else
        {
          this = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return this;
}

const char *WebCore::LegacyRenderSVGPath::renderName(WebCore::LegacyRenderSVGPath *this)
{
  return "RenderSVGPath";
}

const char *WebCore::LegacyRenderSVGRect::renderName(WebCore::LegacyRenderSVGRect *this)
{
  return "RenderSVGRect";
}

uint64_t WebCore::LegacyRenderSVGRect::isEmpty(WebCore::LegacyRenderSVGRect *this)
{
  uint64_t v1;
  uint64_t result;
  int v3;

  v1 = *((_QWORD *)this + 33);
  if (!v1)
  {
    if (*((float *)this + 38) > 0.0)
      return *((float *)this + 39) <= 0.0;
    return 1;
  }
  v3 = *(_DWORD *)(v1 + 64);
  if (v3 != 2)
    return !v3;
  result = *(_QWORD *)(v1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

const char *WebCore::LegacyRenderSVGResourceClipper::renderName(WebCore::LegacyRenderSVGResourceClipper *this)
{
  return "RenderSVGResourceClipper";
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::selfNeedsClientInvalidation(WebCore::LegacyRenderSVGResourceClipper *this)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x200) != 0)
    return (v1 >> 3) & 1;
  v2 = *((_QWORD *)this + 38);
  if (v2 && *(_DWORD *)(v2 - 12))
    return (v1 >> 3) & 1;
  else
    return 0;
}

uint64_t WebCore::LegacyRenderSVGResourceClipper::resourceType(WebCore::LegacyRenderSVGResourceClipper *this)
{
  return 7;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceClipper::resourceType(WebCore::LegacyRenderSVGResourceClipper *this)
{
  return 7;
}

uint64_t WebCore::LegacyRenderSVGResourceContainer::selfNeedsClientInvalidation(WebCore::LegacyRenderSVGResourceContainer *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x200) != 0)
    return (v1 >> 3) & 1;
  else
    return 0;
}

const char *WebCore::LegacyRenderSVGResourceFilter::renderName(WebCore::LegacyRenderSVGResourceFilter *this)
{
  return "RenderSVGResourceFilter";
}

uint64_t WebCore::LegacyRenderSVGResourceFilter::resourceType(WebCore::LegacyRenderSVGResourceFilter *this)
{
  return 6;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceFilter::resourceType(WebCore::LegacyRenderSVGResourceFilter *this)
{
  return 6;
}

void WebCore::LegacyRenderSVGResourceFilterPrimitive::~LegacyRenderSVGResourceFilterPrimitive(WebCore::LegacyRenderSVGResourceFilterPrimitive *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderElement::~RenderElement(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 208) = 0;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

const char *WebCore::LegacyRenderSVGResourceFilterPrimitive::renderName(WebCore::LegacyRenderSVGResourceFilterPrimitive *this)
{
  return "RenderSVGResourceFilterPrimitive";
}

uint64_t WebCore::inheritColorFromParentStyleIfNeeded(WebCore *this, WebCore::RenderElement *a2, uint64_t a3, WebCore::Color *a4)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::SVGRenderStyle *v7;
  WebCore::RenderStyle *v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  WebCore::SVGRenderStyle *v16;

  if ((*(_BYTE *)(a3 + 6) & 4) != 0)
    return 1;
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(WebCore::SVGRenderStyle **)(v6 + 136);
      ++*(_DWORD *)v7;
      v16 = v7;
      v8 = (WebCore *)((char *)this + 80);
      if ((_DWORD)a2)
        v9 = *((_QWORD *)v7 + 2);
      else
        v9 = *((_QWORD *)v7 + 3);
      WebCore::RenderStyle::colorResolvingCurrentColor(v8, (const WebCore::StyleColor *)(v9 + 8), 0);
      WebCore::Color::operator=((unint64_t *)a3, &v15);
      if ((v15 & 0x8000000000000) != 0)
      {
        v11 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v10);
        }
      }
      WTF::Ref<WebCore::SVGRenderStyle,WTF::RawPtrTraits<WebCore::SVGRenderStyle>,WTF::DefaultRefDerefTraits<WebCore::SVGRenderStyle>>::~Ref(&v16, v10);
      return 1;
    }
  }
  return 0;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1)
      {
        std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v4, 0);
        v5 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF **std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (!v3)
      return (WTF **)WTF::fastFree(v2, a2);
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_8:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
        if (!v7)
          goto LABEL_16;
        return (WTF **)WTF::fastFree(v2, a2);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (!v7)
    {
LABEL_16:
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (!v9)
        WTF::fastFree((WTF *)v4, a2);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::currentValue<WebCore::SVGUnitTypes::SVGUnitType>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t *v6[5];
  uint64_t *v7[5];

  v2 = (uint64_t *)(a1 + 24);
  v1 = *(_QWORD *)(a1 + 24);
  if (v1
    && *(_DWORD *)(v1 - 12)
    && (v5 = a1,
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(a1 + 24), v7), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v2, v6), a1 = v5, v7[1] != v6[1]))
  {
    v3 = (_QWORD *)(v5 + 48);
  }
  else
  {
    v3 = (_QWORD *)(a1 + 40);
  }
  return (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  WTF **v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != (WTF *)-1)
        a1 = WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>::~KeyValuePair(a1, a2);
      a1 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

WTF **WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>::~KeyValuePair(WTF **a1, void *a2)
{
  bmalloc::api *v3;
  WTF *v4;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    std::default_delete<WebCore::FilterData>::operator()[abi:sn180100](v3, a2);
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return a1;
}

uint64_t std::default_delete<WebCore::FilterData>::operator()[abi:sn180100](bmalloc::api *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v13;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_8:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v13 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v13 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          return bmalloc::api::isoDeallocate(this, a2);
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      return bmalloc::api::isoDeallocate(this, a2);
LABEL_16:
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LegacyRenderSVGPath::updateZeroLengthSubpaths(void)::$_0,void,WebCore::PathElement const&>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::SVGSubpathData::updateFromPathElement(*(_QWORD *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapper<WebCore::LegacyRenderSVGPath::processMarkerPositions(void)::$_0,void,WebCore::PathElement const&>::call(uint64_t a1, unsigned __int8 *a2)
{
  WebCore::SVGMarkerData::updateFromPathElement(*(_QWORD *)(a1 + 8), a2);
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::removeWithoutEntryConsistencyCheck(WTF **result, WTF **a2)
{
  uint64_t *v3;
  WTF **v4;
  WTF *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (uint64_t *)result;
  v4 = (WTF **)*result;
  if (*result)
    v4 += 2 * *((unsigned int *)v4 - 1);
  if (v4 != a2)
  {
    v5 = *a2;
    *a2 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    *a2 = (WTF *)-1;
    result = std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](a2 + 1, 0);
    ++*(_DWORD *)(*v3 - 16);
    v6 = *v3;
    if (*v3)
      v7 = *(_DWORD *)(v6 - 12) - 1;
    else
      v7 = -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *v3;
    if (*v3)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        return WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v3, v10 >> 1, 0);
    }
  }
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF **v12;
  WTF **v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  WTF **v25;
  void *v26;
  WTF *v27;
  WTF *v28;
  WTF **v29;
  WTF *v30;
  WTF *v31;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
          v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
          v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (WTF **)(v16 + 16 * v23);
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v25 + 1, 0);
          v27 = *v25;
          *v25 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
              WTF::fastFree(v27, v26);
            else
              --*(_DWORD *)v27;
          }
          v28 = *v13;
          *v13 = 0;
          *v25 = v28;
          v29 = (WTF **)(v6 + 16 * v11);
          v30 = v29[1];
          *++v29 = 0;
          v25[1] = v30;
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v29, 0);
          v31 = *v13;
          *v13 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 1)
              WTF::fastFree(v31, v10);
            else
              --*(_DWORD *)v31;
          }
          if (v13 == a3)
            v12 = v25;
        }
        else
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100]((WTF **)(v6 + 16 * v11 + 8), 0);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
              WTF::fastFree(v15, v10);
            else
              --*(_DWORD *)v15;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>,WebCore::RenderObject const*>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = v6;
      v9 = *(_QWORD *)(result + 16 * v6);
      if (v9 != -1)
      {
        if (!v9)
          return 0;
        if (*(_QWORD *)(v9 + 8) == a2)
          break;
      }
      v6 = (v8 + i) & v2;
    }
    result += 16 * v8;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::find<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = *(_QWORD *)(result + 16 * v6);
      if (!v8)
        break;
      if (v8 != -1 && *(_QWORD *)(v8 + 8) == a2)
      {
        result += 16 * v6;
        return result;
      }
      v6 = (v6 + i) & v2;
    }
    result += 16 * *(unsigned int *)(result - 4);
  }
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::remove(uint64_t *a1, WTF **a2)
{
  WTF *v4;
  WTF **result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *a2;
  *a2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  result = (WTF **)a2[1];
  *a2 = (WTF *)-1;
  a2[1] = 0;
  if (result)
    result = (WTF **)std::default_delete<WebCore::FilterData>::operator()[abi:sn180100]((bmalloc::api *)result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  WTF **v11;
  WTF **result;
  uint64_t v13;
  WTF **v14;
  WTF **v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF **)v6;
    do
    {
      if (*v14 != (WTF *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>::~KeyValuePair(v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>::~KeyValuePair(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::reinsert(uint64_t a1, WTF **a2)
{
  unsigned int v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  WTF **v9;
  bmalloc::api *v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*((_QWORD *)*a2 + 1));
  v7 = 0;
  do
  {
    v8 = v5 & v4;
    v5 = ++v7 + v8;
  }
  while (*(_QWORD *)(a1 + 16 * v8));
  v9 = (WTF **)(a1 + 16 * v8);
  v10 = v9[1];
  v9[1] = 0;
  if (v10)
  {
    std::default_delete<WebCore::FilterData>::operator()[abi:sn180100](v10, v6);
    v12 = *v9;
    *v9 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v11);
      else
        --*(_DWORD *)v12;
    }
  }
  else
  {
    *v9 = 0;
  }
  v13 = *a2;
  *a2 = 0;
  *v9 = v13;
  v14 = a2[1];
  a2[1] = 0;
  v9[1] = v14;
  return v9;
}

bmalloc::api *WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>(uint64_t a1, uint64_t *a2, WTF **a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  void *v12;
  WTF **v13;
  int i;
  uint64_t v15;
  WTF **v16;
  WTF *v17;
  bmalloc::api *result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_QWORD *)*a3 + 1);
  v11 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v10);
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v11 & v9;
    v16 = (WTF **)(v8 + 16 * v15);
    v17 = *v16;
    if (!*v16)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v16 = v13;
      }
      result = WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::translate<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>((uint64_t)v16, a3, a4);
      v19 = *a2;
      if (*a2)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *a2;
      if (*a2)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_17;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_17:
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v21 + 16 * v24;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      result = (bmalloc::api *)WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::expand(a2, v16);
      v16 = (WTF **)result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_17;
    }
    if (v17 == (WTF *)-1)
    {
      v13 = (WTF **)(v8 + 16 * v15);
      goto LABEL_8;
    }
    if (*((_QWORD *)v17 + 1) == v10)
      break;
LABEL_8:
    v11 = i + v15;
  }
  v25 = v8 + 16 * *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = 0;
  v26 = v8 + 16 * v15;
  v27 = *a4;
  *a4 = 0;
  result = *(bmalloc::api **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v27;
  if (result)
    return (bmalloc::api *)std::default_delete<WebCore::FilterData>::operator()[abi:sn180100](result, v12);
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v5, a2);
}

bmalloc::api *WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::FilterData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::translate<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>,WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::FilterData>>(uint64_t a1, WTF **a2, uint64_t *a3)
{
  WTF **v5;
  void *v6;
  uint64_t v7;
  bmalloc::api *result;

  v5 = WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::operator=((WTF **)a1, a2);
  v7 = *a3;
  *a3 = 0;
  result = v5[1];
  *(_QWORD *)(a1 + 8) = v7;
  if (result)
    return (bmalloc::api *)std::default_delete<WebCore::FilterData>::operator()[abi:sn180100](result, v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LegacyRenderSVGResourceFilter::applyResource(WebCore::RenderElement &,WebCore::RenderStyle const&,WebCore::GraphicsContext *&,WTF::OptionSet<WebCore::RenderSVGResourceMode>)::$_0,std::unique_ptr<WebCore::FilterResults>>::call@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = 0;
  v2[1] = 0;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *result = off_1E340D360;
  v2[2] = result;
  *a1 = v2;
  return result;
}

void WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient(WebCore::LegacyRenderSVGResourceGradient *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E344CE28;
  *((_QWORD *)this + 27) = &unk_1E344D1D8;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (!v3)
    goto LABEL_10;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v14 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v14 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      WTF::fastFree((WTF *)v4, a2);
  }
LABEL_10:
  v11 = *((_QWORD *)this + 34);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF **)(v11 + 8);
      do
      {
        if (*(v13 - 1) != (WTF *)-1)
          std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100](v13, 0);
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
}

uint64_t WebCore::LegacyRenderSVGResourceGradient::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  WTF **v10;

  v4 = (int)a2;
  v6 = *(_QWORD *)(a1 + 272);
  if (v6)
  {
    *(_QWORD *)(a1 + 272) = 0;
    v9 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF **)(v6 + 8);
      do
      {
        if (*(v10 - 1) != (WTF *)-1)
          std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100](v10, 0);
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  *(_BYTE *)(a1 + 296) = 1;
  if (v4)
    v7 = 2;
  else
    v7 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1, v7, a3);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceGradient::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  WTF **v10;

  v4 = (int)a2;
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = 0;
    v9 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF **)(v6 + 8);
      do
      {
        if (*(v10 - 1) != (WTF *)-1)
          std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100](v10, 0);
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  *(_BYTE *)(a1 + 80) = 1;
  if (v4)
    v7 = 2;
  else
    v7 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1 - 216, v7, a3);
}

WTF **WebCore::LegacyRenderSVGResourceGradient::removeClientFromCache(WTF **this, WebCore::RenderElement *a2, int a3)
{
  WTF **result;

  result = WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::remove(this + 34, (uint64_t)a2);
  if (a3)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 3405))
      return (WTF **)WebCore::RenderObject::repaint((uint64_t)a2, 0);
  }
  return result;
}

WTF **WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::remove(WTF **result, uint64_t a2)
{
  WTF *v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v17;

  v2 = *result;
  if (*result)
  {
    v3 = (uint64_t *)result;
    v4 = *((_DWORD *)v2 - 2);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *((_QWORD *)v2 + 2 * v8);
    if (v9 != a2)
    {
      v17 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v17) & v4;
        v9 = *((_QWORD *)v2 + 2 * v8);
        ++v17;
        if (v9 == a2)
          goto LABEL_3;
      }
      v8 = *((unsigned int *)v2 - 1);
    }
LABEL_3:
    if (v8 != *((_DWORD *)v2 - 1))
    {
      v10 = (WTF **)((char *)v2 + 16 * v8);
      *v10 = (WTF *)-1;
      result = std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100](v10 + 1, 0);
      ++*(_DWORD *)(*v3 - 16);
      v11 = *v3;
      v12 = *v3 ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *v3;
      if (*v3)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return (WTF **)WTF::HashTable<WebCore::RenderObject *,WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RenderObject *>>::rehash(v3, v15 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceGradient::removeClientFromCache(WTF **this, WebCore::RenderElement *a2, int a3)
{
  int v5;
  unsigned int v6;

  v5 = (_DWORD)this - 216;
  WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::remove(this + 7, (uint64_t)a2);
  if (a3)
    v6 = 2;
  else
    v6 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(v5, a2, v6);
}

uint64_t WebCore::LegacyRenderSVGResourceGradient::applyResource(uint64_t *a1, WebCore::SVGRenderingContext *a2, WebCore::GraphicsContext *a3, uint64_t *a4, char a5)
{
  float v5;
  float v6;
  float v7;
  void *v13;
  int v14;
  __n128 v15;
  float v16;
  float v17;
  float v18;
  uint64_t result;
  float v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  WebCore::SVGRenderingContext *v30;
  _QWORD *v31;
  int v32;
  uint64_t *v33;
  _BOOL4 v34;
  const WebCore::AffineTransform *v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  float v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v49;
  double *v50;
  uint64_t v51;
  int v52;
  _DWORD *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  __int128 v66;
  __int128 v67;
  WebCore::SVGElement *v68;
  void *v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL MaskAndSwapContextForTextGradient;
  uint64_t v118;
  int v119;
  uint64_t v120;
  float v121;
  _DWORD *v122;
  void *v123;
  const WebCore::RenderElement *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  BOOL v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int16 v136;
  char v137;
  double v138;
  double v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _BYTE v143[9];

  if (*((_BYTE *)a1 + 296))
  {
    v68 = *(WebCore::SVGElement **)(a1[3] + 8);
    if ((*((_WORD *)v68 + 14) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19655869CLL);
    }
    WebCore::SVGElement::synchronizeAllAttributes(v68);
    result = (*(uint64_t (**)(uint64_t *))(*a1 + 912))(a1);
    if (!(_DWORD)result)
      return result;
    *((_BYTE *)a1 + 296) = 0;
  }
  v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 896))(a1);
  if (v14 != 2)
  {
    v21 = 0;
    v20 = 0.0;
    goto LABEL_6;
  }
  (*(void (**)(WebCore::SVGRenderingContext *))(*(_QWORD *)a2 + 232))(a2);
  result = 0;
  if (v17 > 0.0)
  {
    v5 = v18;
    if (v18 > 0.0)
    {
      v20 = v15.n128_f32[0];
      v7 = v16;
      v6 = v17;
      v21 = 1;
LABEL_6:
      v22 = a1 + 34;
      v23 = a1[34];
      if (v23
        || (WTF::HashTable<WebCore::RenderObject *,WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RenderObject *>>::rehash(a1 + 34, 8u, 0), (v23 = *v22) != 0))
      {
        v24 = *(_DWORD *)(v23 - 8);
      }
      else
      {
        v24 = 0;
      }
      v25 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      v29 = v23 + 16 * v28;
      v30 = *(WebCore::SVGRenderingContext **)v29;
      if (*(_QWORD *)v29)
      {
        v31 = 0;
        v32 = 1;
        while (v30 != a2)
        {
          if (v30 == (WebCore::SVGRenderingContext *)-1)
            v31 = (_QWORD *)v29;
          v28 = (v28 + v32) & v24;
          v29 = v23 + 16 * v28;
          v30 = *(WebCore::SVGRenderingContext **)v29;
          ++v32;
          if (!*(_QWORD *)v29)
          {
            if (v31)
            {
              *v31 = 0;
              v31[1] = 0;
              --*(_DWORD *)(*v22 - 16);
              v29 = (uint64_t)v31;
            }
            goto LABEL_173;
          }
        }
LABEL_11:
        v33 = *(uint64_t **)(v29 + 8);
        v34 = (v14 == 2) == (*((_BYTE *)v33 + 72) != 0);
        if (v14 == 2 && *((_BYTE *)v33 + 72))
        {
          if (*((float *)v33 + 14) != v20 || *((float *)v33 + 15) != v7)
            goto LABEL_92;
          v34 = *((float *)v33 + 16) == v6;
          if (*((float *)v33 + 17) != v5)
            v34 = 0;
        }
        v15.n128_u32[0] = *((_DWORD *)v33 + 19);
        if (v34 && v15.n128_f32[0] == 1.0)
        {
LABEL_25:
          if (*v33)
            goto LABEL_26;
          (*(void (**)(double *__return_ptr, uint64_t *, WebCore::GraphicsContext *, __n128))(*a1 + 920))(&v138, a1, a3, v15);
          v70 = v138;
          v138 = 0.0;
          v71 = *v33;
          *(double *)v33 = v70;
          if (!v71)
          {
LABEL_104:
            v87 = *(_QWORD *)&v138;
            v138 = 0.0;
            if (!v87)
            {
LABEL_120:
              if (*((_BYTE *)v33 + 72) && (a5 & 4) == 0)
              {
                v95 = *((float *)v33 + 14);
                v96 = *((float *)v33 + 15);
                v98 = *((double *)v33 + 1);
                v97 = *((double *)v33 + 2);
                v100 = *((double *)v33 + 3);
                v99 = *((double *)v33 + 4);
                if (v98 == 1.0 && v97 == 0.0 && v100 == 0.0 && v99 == 1.0)
                {
                  *((double *)v33 + 5) = *((double *)v33 + 5) + v95;
                }
                else
                {
                  *((double *)v33 + 5) = v100 * v96 + v95 * v98 + *((double *)v33 + 5);
                  v96 = v99 * v96 + v95 * v97;
                }
                *((double *)v33 + 6) = v96 + *((double *)v33 + 6);
                v101 = *((float *)v33 + 16);
                v102 = *((float *)v33 + 17);
                *((double *)v33 + 1) = v98 * v101;
                *((double *)v33 + 2) = v97 * v101;
                *((double *)v33 + 3) = v100 * v102;
                *((double *)v33 + 4) = v99 * v102;
              }
              (*(void (**)(double *__return_ptr, uint64_t *))(*a1 + 904))(&v138, a1);
              v103 = *((double *)v33 + 3);
              v104 = *((double *)v33 + 4);
              v105 = *((double *)v33 + 1);
              v106 = *((double *)v33 + 2);
              v107 = v139 * v103 + v138 * v105;
              v15.n128_f64[0] = v139 * v104 + v138 * v106;
              v108 = v103 * *((double *)&v140 + 1) + *(double *)&v140 * v105;
              v109 = v104 * *((double *)&v140 + 1) + *(double *)&v140 * v106;
              v110 = *((double *)v33 + 5) + v103 * *((double *)&v141 + 1) + *(double *)&v141 * v105;
              v111 = v104 * *((double *)&v141 + 1) + *(double *)&v141 * v106 + *((double *)v33 + 6);
              *((double *)v33 + 1) = v107;
              v33[2] = v15.n128_u64[0];
              *((double *)v33 + 3) = v108;
              *((double *)v33 + 4) = v109;
              *((double *)v33 + 5) = v110;
              *((double *)v33 + 6) = v111;
              v15.n128_u32[0] = *((_DWORD *)v33 + 19);
              if (v15.n128_f32[0] != 1.0)
              {
                v112 = v15.n128_f32[0];
                *(float64x2_t *)(v33 + 1) = vmulq_n_f64(*(float64x2_t *)(v33 + 1), v112);
                v15 = (__n128)vmulq_n_f64(*(float64x2_t *)(v33 + 3), v112);
                *(__n128 *)(v33 + 3) = v15;
              }
LABEL_26:
              (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)*a4 + 96))(*a4, 1, v15);
              if ((a5 & 4) != 0)
              {
                MaskAndSwapContextForTextGradient = WebCore::createMaskAndSwapContextForTextGradient(a4, (const WebCore::RenderObject *)(a1 + 35), a1 + 36, a2);
                v118 = *a4;
                if (!MaskAndSwapContextForTextGradient)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v118 + 104))(v118, 1);
                  return 0;
                }
                v38 = a5 & 1;
                if ((a5 & 1) != 0)
                  v119 = 1;
                else
                  v119 = 2;
                if (*(unsigned __int8 *)(v118 + 341) != v119)
                {
                  *(_BYTE *)(v118 + 341) = v119;
                  *(_DWORD *)(v118 + 184) |= 0x200u;
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v118 + 88))(v118, v118 + 8);
              }
              else
              {
                v38 = a5 & 1;
              }
              v39 = *((_QWORD *)a3 + 7);
              v40 = *(_OWORD *)(v33 + 1);
              v41 = *(_OWORD *)(v33 + 5);
              v134 = *(_OWORD *)(v33 + 3);
              v135 = v41;
              v133 = v40;
              if (!v38)
              {
                if ((a5 & 2) != 0)
                {
                  if ((*(_WORD *)(v39 + 8) & 0x400) != 0)
                    WebCore::LegacyRenderSVGResourceContainer::transformOnNonScalingStroke((unsigned int *)a2, (WebCore::RenderObject *)(v33 + 1), v37, (double *)&v133);
                  v120 = *a4;
                  v121 = *(float *)(*(_QWORD *)(v39 + 24) + 4);
                  if (*(float *)(*a4 + 336) != v121)
                  {
                    *(float *)(v120 + 336) = v121;
                    *(_DWORD *)(v120 + 184) |= 0x100u;
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v120 + 88))(v120, v120 + 8);
                  v122 = (_DWORD *)*a4;
                  WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v138, *v33);
                  WebCore::SourceBrush::setGradient((uint64_t)(v122 + 24), (uint64_t *)&v138, &v133);
                  v122[46] |= 4u;
                  (*(void (**)(_DWORD *, _DWORD *))(*(_QWORD *)v122 + 88))(v122, v122 + 2);
                  WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref((uint64_t *)&v138, v123);
                  WebCore::SVGRenderSupport::applyStrokeStyleToContext((unsigned int *)*a4, a3, a2, v124);
                }
                return 1;
              }
              v42 = *a4;
              v43 = *(float *)(*(_QWORD *)(v39 + 16) + 4);
              if (*(float *)(*a4 + 336) != v43)
              {
                *(float *)(v42 + 336) = v43;
                *(_DWORD *)(v42 + 184) |= 0x100u;
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 88))(v42, v42 + 8);
              v45 = *a4;
              v46 = *v33;
              v47 = *(_QWORD *)(*v33 + 8);
              if (__ldaxr((unsigned __int8 *)v47))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v47))
              {
LABEL_34:
                ++*(_QWORD *)(v47 + 8);
                v49 = __ldxr((unsigned __int8 *)v47);
                if (v49 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v47))
                  {
LABEL_39:
                    v138 = *(double *)&v46;
                    LODWORD(v139) = 0;
                    v140 = v133;
                    v141 = v134;
                    v142 = v135;
                    v50 = (double *)(v45 + 24);
                    v51 = *(unsigned int *)(v45 + 88);
                    if ((_DWORD)v51 != 1)
                    {
                      if ((_DWORD)v51 == -1)
                      {
                        v52 = 0;
                        *(_DWORD *)(v45 + 32) = -1;
                        v53 = (_DWORD *)(v45 + 32);
                        *(_DWORD *)(v45 + 88) = -1;
                        *(_BYTE *)(v45 + 24) = 0;
                      }
                      else
                      {
                        ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v51])(v143, v45 + 24);
                        v52 = LODWORD(v139);
                        *(_DWORD *)(v45 + 32) = -1;
                        v53 = (_DWORD *)(v45 + 32);
                        *(_DWORD *)(v45 + 88) = -1;
                        *(_BYTE *)(v45 + 24) = 0;
                        if (v52 == -1)
                          goto LABEL_43;
                      }
                      ((void (*)(_BYTE *, uint64_t, double *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JSQ_SP_EEEDcmSS_DpOT0____fdiagonal[v52])(v143, v45 + 24, &v138);
                      *v53 = v52;
LABEL_43:
                      v55 = v141;
                      v54 = v142;
                      *(_OWORD *)(v45 + 40) = v140;
                      *(_OWORD *)(v45 + 56) = v55;
                      *(_OWORD *)(v45 + 72) = v54;
                      *(_DWORD *)(v45 + 88) = 1;
LABEL_44:
                      if (LODWORD(v139) != -1)
                        ((void (*)(_BYTE *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[LODWORD(v139)])(v143, &v138);
                      *(_DWORD *)(v45 + 184) |= 1u;
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 88))(v45, v45 + 8);
                      v56 = *a4;
                      if ((((*(_BYTE *)(*a4 + 192) == 0) ^ ((*(_WORD *)(v39 + 4) & 8) >> 3)) & 1) == 0)
                      {
                        *(_BYTE *)(v56 + 192) = (*(_WORD *)(v39 + 4) & 8) >> 3;
                        *(_DWORD *)(v56 + 184) |= 2u;
                      }
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 88))(v56, v56 + 8);
                      return 1;
                    }
                    v57 = *(unsigned int *)(v45 + 32);
                    if ((_DWORD)v57 != -1)
                    {
                      if (!(_DWORD)v57)
                      {
                        v138 = 0.0;
                        v58 = *v50;
                        *v50 = *(double *)&v46;
                        if (v58 != 0.0)
                        {
                          v59 = *(_QWORD *)(*(_QWORD *)&v58 + 8);
                          if (__ldaxr((unsigned __int8 *)v59))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, (unsigned __int8 *)v59))
                          {
LABEL_59:
                            v61 = *(_QWORD *)(v59 + 8);
                            v62 = v61 - 1;
                            *(_QWORD *)(v59 + 8) = v61 - 1;
                            if (v61 == 1)
                            {
                              v113 = *(_QWORD *)(v59 + 16);
                              v63 = *(_QWORD *)(v59 + 24);
                              *(_QWORD *)(v59 + 24) = 0;
                              v64 = v113 != 0;
                            }
                            else
                            {
                              v63 = 0;
                              v64 = 1;
                            }
                            v65 = __ldxr((unsigned __int8 *)v59);
                            if (v65 == 1)
                            {
                              if (!__stlxr(0, (unsigned __int8 *)v59))
                              {
LABEL_71:
                                if (!v62)
                                {
                                  if (v63)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
                                  if (!v64)
                                    WTF::fastFree((WTF *)v59, v44);
                                }
                                goto LABEL_68;
                              }
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow((WTF::Lock *)v59);
                            goto LABEL_71;
                          }
                          MEMORY[0x19AEA534C](v59);
                          goto LABEL_59;
                        }
LABEL_68:
                        v67 = v141;
                        v66 = v142;
                        *(_OWORD *)(v45 + 40) = v140;
                        *(_OWORD *)(v45 + 56) = v67;
                        *(_OWORD *)(v45 + 72) = v66;
                        goto LABEL_44;
                      }
                      ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[v57])(v143, v45 + 24);
                      *(double *)&v46 = v138;
                    }
                    v138 = 0.0;
                    *(double *)(v45 + 24) = *(double *)&v46;
                    *(_DWORD *)(v45 + 32) = 0;
                    goto LABEL_68;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v47);
                goto LABEL_39;
              }
              MEMORY[0x19AEA534C](v47);
              goto LABEL_34;
            }
            v88 = *(_QWORD *)(v87 + 8);
            if (__ldaxr((unsigned __int8 *)v88))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v88))
            {
LABEL_108:
              v90 = *(_QWORD *)(v88 + 8);
              v91 = v90 - 1;
              *(_QWORD *)(v88 + 8) = v90 - 1;
              if (v90 == 1)
              {
                v116 = *(_QWORD *)(v88 + 16);
                v92 = *(_QWORD *)(v88 + 24);
                *(_QWORD *)(v88 + 24) = 0;
                v93 = v116 != 0;
              }
              else
              {
                v92 = 0;
                v93 = 1;
              }
              v94 = __ldxr((unsigned __int8 *)v88);
              if (v94 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v88))
                {
LABEL_119:
                  if (!v91)
                  {
                    if (v92)
                      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
                    if (!v93)
                      WTF::fastFree((WTF *)v88, v69);
                  }
                  goto LABEL_120;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v88);
              goto LABEL_119;
            }
            MEMORY[0x19AEA534C](v88);
            goto LABEL_108;
          }
          v72 = *(_QWORD *)(v71 + 8);
          if (__ldaxr((unsigned __int8 *)v72))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v72))
          {
LABEL_87:
            v74 = *(_QWORD *)(v72 + 8);
            v75 = v74 - 1;
            *(_QWORD *)(v72 + 8) = v74 - 1;
            if (v74 == 1)
            {
              v114 = *(_QWORD *)(v72 + 16);
              v76 = *(_QWORD *)(v72 + 24);
              *(_QWORD *)(v72 + 24) = 0;
              v77 = v114 != 0;
            }
            else
            {
              v76 = 0;
              v77 = 1;
            }
            v78 = __ldxr((unsigned __int8 *)v72);
            if (v78 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v72))
              {
LABEL_103:
                if (!v75)
                {
                  if (v76)
                    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
                  if (!v77)
                    WTF::fastFree((WTF *)v72, v69);
                }
                goto LABEL_104;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v72);
            goto LABEL_103;
          }
          MEMORY[0x19AEA534C](v72);
          goto LABEL_87;
        }
LABEL_92:
        v79 = *v33;
        *v33 = 0;
        if (!v79)
        {
LABEL_116:
          *(_OWORD *)(v33 + 1) = constinit_13;
          *(_OWORD *)(v33 + 3) = xmmword_1969FE230;
          v15 = (__n128)xmmword_1969FE240;
          *(_OWORD *)(v33 + 5) = xmmword_1969FE240;
          *((float *)v33 + 14) = v20;
          *((float *)v33 + 15) = v7;
          *((float *)v33 + 16) = v6;
          *((float *)v33 + 17) = v5;
          *((_BYTE *)v33 + 72) = v21;
          *(_WORD *)((char *)v33 + 73) = v136;
          *((_BYTE *)v33 + 75) = v137;
          *((_DWORD *)v33 + 19) = 1065353216;
          goto LABEL_25;
        }
        v80 = *(_QWORD *)(v79 + 8);
        if (__ldaxr((unsigned __int8 *)v80))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v80))
        {
LABEL_96:
          v82 = *(_QWORD *)(v80 + 8);
          v83 = v82 - 1;
          *(_QWORD *)(v80 + 8) = v82 - 1;
          if (v82 == 1)
          {
            v115 = *(_QWORD *)(v80 + 16);
            v84 = *(_QWORD *)(v80 + 24);
            *(_QWORD *)(v80 + 24) = 0;
            v85 = v115 != 0;
          }
          else
          {
            v84 = 0;
            v85 = 1;
          }
          v132 = v85;
          v86 = __ldxr((unsigned __int8 *)v80);
          if (v86 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v80))
            {
LABEL_115:
              if (!v83)
              {
                if (v84)
                  (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
                if (!v132)
                  WTF::fastFree((WTF *)v80, v13);
              }
              goto LABEL_116;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v80);
          goto LABEL_115;
        }
        MEMORY[0x19AEA534C](v80);
        goto LABEL_96;
      }
LABEL_173:
      *(_QWORD *)v29 = a2;
      v125 = WTF::fastMalloc((WTF *)0x50);
      *(_OWORD *)(v125 + 32) = 0u;
      *(_OWORD *)(v125 + 48) = 0u;
      *(_OWORD *)v125 = 0u;
      *(_OWORD *)(v125 + 16) = 0u;
      *(_OWORD *)(v125 + 64) = 0u;
      *(_OWORD *)(v125 + 24) = xmmword_1969FE230;
      *(_OWORD *)(v125 + 40) = xmmword_1969FE240;
      *(_OWORD *)(v125 + 8) = constinit_13;
      *(_DWORD *)(v125 + 76) = 1065353216;
      std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100]((WTF **)(v29 + 8), (WTF *)v125);
      v126 = *v22;
      if (*v22)
        v127 = *(_DWORD *)(v126 - 12) + 1;
      else
        v127 = 1;
      *(_DWORD *)(v126 - 12) = v127;
      v128 = *v22;
      if (*v22)
        v129 = *(_DWORD *)(v128 - 12);
      else
        v129 = 0;
      v130 = (*(_DWORD *)(v128 - 16) + v129);
      v131 = *(unsigned int *)(v128 - 4);
      if (v131 > 0x400)
      {
        if (v131 > 2 * v130)
          goto LABEL_11;
      }
      else if (3 * v131 > 4 * v130)
      {
        goto LABEL_11;
      }
      v29 = WTF::HashTable<WebCore::RenderObject *,WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RenderObject *>>::expand(a1 + 34, v29);
      goto LABEL_11;
    }
  }
  return result;
}

BOOL WebCore::createMaskAndSwapContextForTextGradient(uint64_t *a1, const WebCore::RenderObject *a2, uint64_t *a3, WebCore::SVGRenderingContext *this)
{
  WebCore::SVGRenderingContext *v4;
  int i;
  double v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unsigned int v15;
  float v16;
  long double v17;
  float v18;
  float v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  int v48;
  float32x4_t v49;
  double v50[6];
  char v51;
  uint64_t *v52;
  char *v53;

  v4 = this;
  for (i = *((unsigned __int8 *)this + 46); i != 85; i = *((unsigned __int8 *)v4 + 46))
    v4 = *(WebCore::SVGRenderingContext **)(*((_QWORD *)v4 + 4) + 8);
  v9 = WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem(v4, a2, v50);
  *(float *)&v10 = WebCore::RenderSVGText::repaintRectInLocalCoordinates(v4, 0, v9);
  v12 = v11;
  v14 = v13;
  v49.i64[0] = __PAIR64__(v15, v10);
  v49.i64[1] = __PAIR64__(LODWORD(v13), LODWORD(v11));
  v16 = hypot(v50[0], v50[1]);
  v17 = hypot(v50[2], v50[3]);
  *(float *)&v17 = v17;
  v47 = v16;
  v48 = LODWORD(v17);
  v18 = v12 * v16;
  if ((float)(v12 * v16) > 0.0)
  {
    v19 = floorf(v18) * floorf(v14 * *(float *)&v17);
    if ((float)(v14 * *(float *)&v17) > 0.0 && v19 > 16777000.0)
    {
      v44 = sqrtf(16777000.0 / (float)(v18 * (float)(v14 * *(float *)&v17)));
      *(float *)&v17 = v44 * *(float *)&v17;
      v47 = v44 * v16;
      v48 = LODWORD(v17);
    }
  }
  v21 = *a1;
  v22 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v22 != -1)
  {
    v53 = &v51;
    v52 = (uint64_t *)&v53;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  WebCore::GraphicsContext::createScaledImageBuffer(&v49, v21, &v47, (uint64_t)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0, 0, (uint64_t *)&v53, v17);
  v23 = (uint64_t)v53;
  if (v53)
  {
    v24 = (*(uint64_t (**)(char *))(*(_QWORD *)v53 + 16))(v53);
    *(_QWORD *)a2 = *a1;
    *a1 = v24;
    v26 = (uint64_t)v53;
    v53 = 0;
    v27 = *a3;
    *a3 = v26;
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (__ldaxr((unsigned __int8 *)v28))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v28))
      {
        goto LABEL_18;
      }
      MEMORY[0x19AEA534C](v28);
LABEL_18:
      v30 = *(_QWORD *)(v28 + 8);
      v31 = v30 - 1;
      *(_QWORD *)(v28 + 8) = v30 - 1;
      if (v30 == 1)
      {
        v45 = *(_QWORD *)(v28 + 16);
        v32 = *(_QWORD *)(v28 + 24);
        *(_QWORD *)(v28 + 24) = 0;
        v33 = v45 != 0;
      }
      else
      {
        v32 = 0;
        v33 = 1;
      }
      v34 = __ldxr((unsigned __int8 *)v28);
      if (v34 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v28))
        {
          if (v31)
            goto LABEL_30;
LABEL_26:
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          if (!v33)
            WTF::fastFree((WTF *)v28, v25);
LABEL_30:
          v35 = (uint64_t)v53;
          v53 = 0;
          if (!v35)
            return v23 != 0;
          v36 = *(_QWORD *)(v35 + 8);
          if (__ldaxr((unsigned __int8 *)v36))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v36))
          {
            goto LABEL_35;
          }
          MEMORY[0x19AEA534C](v36);
LABEL_35:
          v38 = *(_QWORD *)(v36 + 8);
          v39 = v38 - 1;
          *(_QWORD *)(v36 + 8) = v38 - 1;
          if (v38 == 1)
          {
            v46 = *(_QWORD *)(v36 + 16);
            v40 = *(_QWORD *)(v36 + 24);
            *(_QWORD *)(v36 + 24) = 0;
            v41 = v46 != 0;
          }
          else
          {
            v40 = 0;
            v41 = 1;
          }
          v42 = __ldxr((unsigned __int8 *)v36);
          if (v42 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v36))
            {
              if (v39)
                return v23 != 0;
              goto LABEL_43;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v36);
          if (v39)
            return v23 != 0;
LABEL_43:
          if (v40)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          if (!v41)
            WTF::fastFree((WTF *)v36, v25);
          return v23 != 0;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v28);
      if (v31)
        goto LABEL_30;
      goto LABEL_26;
    }
  }
  return v23 != 0;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceGradient::applyResource(uint64_t a1, WebCore::SVGRenderingContext *a2, WebCore::GraphicsContext *a3, uint64_t *a4, char a5)
{
  return WebCore::LegacyRenderSVGResourceGradient::applyResource((uint64_t *)(a1 - 216), a2, a3, a4, a5);
}

uint64_t WebCore::LegacyRenderSVGResourceGradient::postApplyResource(uint64_t *a1, WebCore::SVGRenderingContext *a2, const WebCore::RenderObject **a3, char a4, uint64_t a5, uint64_t a6)
{
  const WebCore::RenderObject *v9;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WebCore::RenderObject *v22;
  uint64_t *v23;
  _BOOL4 v24;
  const WebCore::RenderObject *v25;
  uint64_t v26;
  void *v27;
  double v28[6];
  __int128 v29[3];
  _QWORD v30[2];
  uint64_t v31;

  if ((a4 & 4) != 0)
  {
    if (a1[35])
    {
      v19 = a1[34];
      v20 = WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::find(v19, (uint64_t)a2);
      v21 = v19 ? v19 + 16 * *(unsigned int *)(v19 - 4) : 0;
      if (v21 != v20)
      {
        WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v31, **(_QWORD **)(v20 + 8));
        v22 = (const WebCore::RenderObject *)a1[35];
        a1[35] = 0;
        *a3 = v22;
        v30[0] = 0;
        v30[1] = 0;
        v23 = a1 + 36;
        v24 = (*(uint64_t (**)(uint64_t *))(*a1 + 896))(a1) == 2;
        (*(void (**)(double *__return_ptr, uint64_t *))(*a1 + 904))(v28, a1);
        WebCore::clipToTextMask((double *)v29, v22, a1 + 36, (const WebCore::FloatRect *)v30, a2, v24, v28);
        v25 = *a3;
        v26 = (uint64_t)*a3 + 8;
        WebCore::SourceBrush::setGradient(v26, &v31, v29);
        *((_DWORD *)v25 + 46) |= 1u;
        (*(void (**)(const WebCore::RenderObject *, uint64_t))(*(_QWORD *)v25 + 88))(v25, v26);
        (*(void (**)(const WebCore::RenderObject *, _QWORD *, uint64_t))(*(_QWORD *)*a3 + 216))(*a3, v30, 1);
        WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=(v23, 0);
        WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v31, v27);
      }
    }
    return (*(uint64_t (**)(const WebCore::RenderObject *, uint64_t))(*(_QWORD *)*a3 + 104))(*a3, 1);
  }
  v9 = *a3;
  if (!a6)
  {
    if (a5)
    {
      if ((a4 & 1) != 0)
        (*(void (**)(const WebCore::RenderObject *, uint64_t))(*(_QWORD *)v9 + 176))(*a3, a5);
      if ((a4 & 2) != 0)
        (*(void (**)(const WebCore::RenderObject *, uint64_t))(*(_QWORD *)v9 + 184))(v9, a5);
    }
    return (*(uint64_t (**)(const WebCore::RenderObject *, uint64_t))(*(_QWORD *)*a3 + 104))(*a3, 1);
  }
  if ((a4 & 1) != 0 && (*(_BYTE *)(a6 + 52) & 7) == 4)
  {
    v11 = *(unsigned __int8 *)(a6 + 53);
    if ((~v11 & 0x11) != 0)
    {
      if ((v11 & 1) != 0 || (v11 & 0x10) == 0)
        goto LABEL_5;
      v12 = (int *)(a6 + 16);
      ++*(_DWORD *)(a6 + 16);
      (*(void (**)(uint64_t, const WebCore::RenderObject *))(*(_QWORD *)a6 + 896))(a6, v9);
      v13 = *v12;
      if (!*v12)
      {
        __break(0xC471u);
        JUMPOUT(0x196558D20);
      }
    }
    else
    {
      v12 = (int *)(a6 + 16);
      ++*(_DWORD *)(a6 + 16);
      (*(void (**)(uint64_t, const WebCore::RenderObject *))(*(_QWORD *)a6 + 800))(a6, v9);
      v13 = *v12;
      if (!*v12)
      {
        __break(0xC471u);
        JUMPOUT(0x196558E20);
      }
    }
    *v12 = v13 - 1;
  }
LABEL_5:
  if ((a4 & 2) != 0 && (*(_BYTE *)(a6 + 52) & 7) == 4)
  {
    v14 = *(unsigned __int8 *)(a6 + 53);
    if ((~v14 & 0x11) == 0)
    {
      ++*(_DWORD *)(a6 + 16);
      (*(void (**)(uint64_t, const WebCore::RenderObject *))(*(_QWORD *)a6 + 808))(a6, v9);
      v15 = *(_DWORD *)(a6 + 16);
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x196558E40);
      }
LABEL_17:
      *(_DWORD *)(a6 + 16) = v15 - 1;
      return (*(uint64_t (**)(const WebCore::RenderObject *, uint64_t))(*(_QWORD *)*a3 + 104))(*a3, 1);
    }
    if ((v14 & 1) == 0 && (v14 & 0x10) != 0)
    {
      ++*(_DWORD *)(a6 + 16);
      (*(void (**)(uint64_t, const WebCore::RenderObject *))(*(_QWORD *)a6 + 904))(a6, v9);
      v15 = *(_DWORD *)(a6 + 16);
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x196558E00);
      }
      goto LABEL_17;
    }
  }
  return (*(uint64_t (**)(const WebCore::RenderObject *, uint64_t))(*(_QWORD *)*a3 + 104))(*a3, 1);
}

uint64_t WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::find(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 == a2)
    {
LABEL_3:
      result += 16 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_3;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

double WebCore::clipToTextMask(double *a1, const WebCore::RenderObject *a2, uint64_t *a3, const WebCore::FloatRect *a4, WebCore::SVGRenderingContext *this, int a6, double *a7)
{
  WebCore::SVGRenderingContext *v9;
  int i;
  double v15;
  float32_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double result;
  float v43;
  float v44;
  float v45;
  double v46[6];

  v9 = this;
  for (i = *((unsigned __int8 *)this + 46); i != 85; i = *((unsigned __int8 *)v9 + 46))
    v9 = *(WebCore::SVGRenderingContext **)(*((_QWORD *)v9 + 4) + 8);
  v15 = WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem(v9, a2, v46);
  v16 = WebCore::RenderSVGText::repaintRectInLocalCoordinates(v9, 0, v15);
  v18 = v17;
  v20 = v19;
  *(float32_t *)a4 = v16;
  *((_DWORD *)a4 + 1) = v21;
  *((float *)a4 + 2) = v17;
  *((float *)a4 + 3) = v19;
  v22 = hypot(v46[0], v46[1]);
  v23 = hypot(v46[2], v46[3]);
  v44 = v22;
  v45 = v23;
  v24 = v18 * v22;
  if ((float)(v18 * v22) > 0.0)
  {
    v25 = floorf(v24) * floorf(v20 * v23);
    if ((float)(v20 * v23) > 0.0 && v25 > 16777000.0)
    {
      v43 = sqrtf(16777000.0 / (float)(v24 * (float)(v20 * v23)));
      v44 = v43 * v22;
      v45 = v43 * v23;
    }
  }
  WebCore::SVGRenderingContext::clipToImageBuffer((uint64_t)a2, a4, &v44, a3, 0);
  if (a6)
  {
    v27 = *((float *)v9 + 126) + 0.0;
    v28 = *((float *)v9 + 127) + 0.0;
    v29 = *((float *)v9 + 128);
    v30 = *((float *)v9 + 129);
    v31 = v29 * 0.0;
    v32 = v30 * 0.0;
  }
  else
  {
    v30 = 1.0;
    v28 = 0.0;
    v27 = 0.0;
    v31 = 0.0;
    v32 = 0.0;
    v29 = 1.0;
  }
  v33 = a7[1];
  v34 = v33 * v32 + *a7 * v29;
  v35 = v33 * v30 + *a7 * v31;
  v36 = a7[2];
  v37 = a7[3];
  v38 = v32 * v37 + v36 * v29;
  v39 = v30 * v37 + v36 * v31;
  v40 = a7[4];
  v41 = a7[5];
  *a1 = v34;
  a1[1] = v35;
  a1[2] = v38;
  a1[3] = v39;
  result = v30 * v41 + v40 * v31 + v28;
  a1[4] = v27 + v32 * v41 + v40 * v29;
  a1[5] = result;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceGradient::postApplyResource(uint64_t a1, WebCore::SVGRenderingContext *a2, const WebCore::RenderObject **a3, char a4, uint64_t a5, uint64_t a6)
{
  return WebCore::LegacyRenderSVGResourceGradient::postApplyResource((uint64_t *)(a1 - 216), a2, a3, a4, a5, a6);
}

uint64_t *WebCore::LegacyRenderSVGResourceGradient::stopsByApplyingColorFilter(WebCore::LegacyRenderSVGResourceGradient *this, const WebCore::GradientColorStops *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  const WebCore::RenderStyle *v13;

  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 3) + 320) + 20))
  {
    v13 = a3;
    return WebCore::GradientColorStops::mapColors<WebCore::LegacyRenderSVGResourceGradient::stopsByApplyingColorFilter(WebCore::GradientColorStops const&,WebCore::RenderStyle const&)::$_0>((uint64_t *)this, (uint64_t)a2, (uint64_t *)&v13);
  }
  v5 = *((unsigned int *)a2 + 3);
  result = (uint64_t *)((char *)this + 16);
  *(_QWORD *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 2;
  *((_DWORD *)this + 3) = v5;
  if (v5 >= 3)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v10 = v5;
    result = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v5));
    *((_DWORD *)this + 2) = v10;
    *(_QWORD *)this = result;
    v5 = *((unsigned int *)a2 + 3);
  }
  if ((_DWORD)v5)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)a2 + 16 * v5;
    do
    {
      *(_DWORD *)result = *(_DWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      result[1] = v9;
      if ((v9 & 0x8000000000000) != 0)
      {
        v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      result += 2;
      v7 += 16;
    }
    while (v7 != v8);
  }
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  return result;
}

uint64_t *WebCore::GradientColorStops::mapColors<WebCore::LegacyRenderSVGResourceGradient::stopsByApplyingColorFilter(WebCore::GradientColorStops const&,WebCore::RenderStyle const&)::$_0>(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v5 = result;
  v16 = &v18;
  v17 = 2;
  v6 = *(unsigned int *)(a2 + 12);
  if (v6 >= 3)
  {
    if (v6 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    result = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v6));
    LODWORD(v17) = v6;
    v16 = result;
    if (*(_DWORD *)(a2 + 12))
      goto LABEL_3;
  }
  else
  {
    result = &v18;
    if ((_DWORD)v6)
    {
LABEL_3:
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = (int *)(*(_QWORD *)a2 + v7);
        v10 = *a3;
        v20 = *v9;
        WebCore::RenderStyle::colorByApplyingColorFilter(v10, (const WebCore::Color *)(v9 + 2), (unint64_t *)&v21);
        v11 = &v16[2 * HIDWORD(v17)];
        *(_DWORD *)v11 = v20;
        v11[1] = 0;
        v11[1] = v21;
        ++HIDWORD(v17);
        ++v8;
        v7 += 16;
      }
      while (v8 < *(unsigned int *)(a2 + 12));
      result = v16;
    }
  }
  v12 = *(_BYTE *)(a2 + 48);
  *v5 = v5 + 2;
  *((_DWORD *)v5 + 2) = 2;
  if (result == &v18)
  {
    if (HIDWORD(v17))
    {
      v13 = v5 + 3;
      v14 = 16 * HIDWORD(v17);
      v15 = &v19;
      do
      {
        *((_DWORD *)v13 - 2) = *((_DWORD *)v15 - 2);
        *v13 = 0;
        if (*v15)
        {
          *v13 = *v15;
          *v15 = 0;
        }
        v13 += 2;
        v15 += 2;
        v14 -= 16;
      }
      while (v14);
    }
  }
  else
  {
    *v5 = result;
    *((_DWORD *)v5 + 2) = v17;
  }
  *((_DWORD *)v5 + 3) = HIDWORD(v17);
  *((_BYTE *)v5 + 48) = v12;
  return result;
}

void WebCore::LegacyRenderSVGResourceLinearGradient::~LegacyRenderSVGResourceLinearGradient(WebCore::LegacyRenderSVGResourceLinearGradient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  WTF *v11;
  WTF *v12;

  v3 = *((unsigned int *)this + 91);
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v11 = v5;
        v12 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v11;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v11;
          v4 = v12;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = (WTF *)*((_QWORD *)this + 44);
  }
  if ((WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  void *v11;
  WTF *v12;
  WTF *v13;

  v3 = *((unsigned int *)this + 91);
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v12 = v5;
        v13 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v12;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v12;
          v4 = v13;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = (WTF *)*((_QWORD *)this + 44);
  }
  if ((WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 26) = 0u;
    *((_OWORD *)this + 27) = 0u;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v11);
  }
}

void `non-virtual thunk to'WebCore::LegacyRenderSVGResourceLinearGradient::~LegacyRenderSVGResourceLinearGradient(WebCore::LegacyRenderSVGResourceLinearGradient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  WTF *v11;
  WTF *v12;

  v3 = *((unsigned int *)this + 37);
  v4 = (WTF *)*((_QWORD *)this + 17);
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v11 = v5;
        v12 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v11;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v11;
          v4 = v12;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = (WTF *)*((_QWORD *)this + 17);
  }
  if ((WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this + 152) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient((WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this - 216), a2);
}

{
  WebCore::LegacyRenderSVGResourceGradient *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  void *v12;
  WTF *v13;
  WTF *v14;

  v3 = (WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this - 216);
  v4 = *((unsigned int *)this + 37);
  v5 = (WTF *)*((_QWORD *)this + 17);
  if ((_DWORD)v4)
  {
    v6 = (WTF *)((char *)v5 + 16 * v4);
    do
    {
      v7 = *((_QWORD *)v5 + 1);
      if ((v7 & 0x8000000000000) != 0)
      {
        v13 = v6;
        v14 = v5;
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(v8);
          v10 = --v9 == 0;
        }
        while (__stlxr(v9, v8));
        v6 = v13;
        if (v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
          v6 = v13;
          v5 = v14;
        }
      }
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != v6);
    v5 = (WTF *)*((_QWORD *)this + 17);
  }
  if ((WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this + 152) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v5, a2);
  }
  WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient(v3, a2);
  if (*((_DWORD *)this - 50))
  {
    *((_OWORD *)v3 + 26) = 0u;
    *((_OWORD *)v3 + 27) = 0u;
    *((_OWORD *)v3 + 24) = 0u;
    *((_OWORD *)v3 + 25) = 0u;
    *((_OWORD *)v3 + 22) = 0u;
    *((_OWORD *)v3 + 23) = 0u;
    *((_OWORD *)v3 + 20) = 0u;
    *((_OWORD *)v3 + 21) = 0u;
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v3, v12);
  }
}

uint64_t WebCore::LegacyRenderSVGResourceLinearGradient::collectGradientAttributes(WebCore::LegacyRenderSVGResourceLinearGradient *this)
{
  void *v2;
  uint64_t v3;
  WTF::String *v4;
  __int128 v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _OWORD v18[3];
  WTF *v19;
  int v20;
  unsigned int v21;
  _BYTE v22[44];
  __int128 v23;
  __n128 v24;
  char v25;

  WebCore::LinearGradientAttributes::LinearGradientAttributes((WebCore::LinearGradientAttributes *)v18);
  v5 = v18[1];
  *((_OWORD *)this + 19) = v18[0];
  *((_OWORD *)this + 20) = v5;
  *((_OWORD *)this + 21) = v18[2];
  v6 = *((unsigned int *)this + 91);
  if ((_DWORD)v6)
    WTF::VectorTypeOperations<WebCore::GradientColorStop>::destruct(*((_QWORD **)this + 44), (_QWORD *)(*((_QWORD *)this + 44) + 16 * v6));
  v7 = (WTF *)*((_QWORD *)this + 44);
  if (v7 != (WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this + 368))
  {
    if (v7)
    {
      *((_QWORD *)this + 44) = 0;
      *((_DWORD *)this + 90) = 0;
      WTF::fastFree(v7, v2);
    }
    *((_QWORD *)this + 44) = (char *)this + 368;
  }
  v8 = v19;
  if (v19 == (WTF *)v22)
  {
    v9 = v21;
    if (v21)
    {
      v10 = (_QWORD *)((char *)this + 376);
      v11 = 16 * v21;
      v12 = (_QWORD *)((char *)v19 + 8);
      do
      {
        *((_DWORD *)v10 - 2) = *((_DWORD *)v12 - 2);
        *v10 = 0;
        if (*v12)
        {
          *v10 = *v12;
          *v12 = 0;
        }
        v10 += 2;
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
      v8 = v19;
    }
  }
  else
  {
    *((_QWORD *)this + 44) = v19;
    v9 = v21;
    v8 = (WTF *)v22;
  }
  *((_DWORD *)this + 90) = v20;
  v21 = 0;
  *((_DWORD *)this + 91) = v9;
  *((_BYTE *)this + 400) = v22[32];
  *((_BYTE *)this + 408) = v22[40];
  *((_BYTE *)this + 444) = v25;
  *(_OWORD *)((char *)this + 412) = v23;
  v13 = v24;
  *(__n128 *)((char *)this + 428) = v24;
  if (v22 != (_BYTE *)v8 && v8)
  {
    v19 = 0;
    v20 = 0;
    WTF::fastFree(v8, v2);
  }
  v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v14 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196559930);
  }
  if (*(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::linearGradientTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196559950);
  }
  *(_DWORD *)(v14 + 24) += 2;
  v16 = WebCore::SVGLinearGradientElement::collectGradientAttributes((WebCore::SVGLinearGradientElement *)v14, (WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this + 304), v13, v3, v4);
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  return v16;
}

float WebCore::LegacyRenderSVGResourceLinearGradient::startPoint(WebCore::LegacyRenderSVGResourceLinearGradient *this, const WebCore::LinearGradientAttributes *a2)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  float v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[5];

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196559A7CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::linearGradientTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196559A9CLL);
  }
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *((_BYTE *)a2 + 104);
  v5 = *(_QWORD *)((char *)a2 + 108);
  v10 = *(_QWORD *)((char *)a2 + 116);
  v11 = v5;
  if ((v4 & 0xC) == 4)
  {
    v9 = v2;
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v12, (const WebCore::SVGElement *)v2);
    v6 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v11, (const WebCore::SVGLengthContext *)v12);
    WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v10, (const WebCore::SVGLengthContext *)v12);
    WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v12, v8);
    v2 = v9;
    v3 = *(_DWORD *)(v9 + 24) - 2;
  }
  else if ((v5 & 0xFF00000000) == 0x200000000)
  {
    v6 = *(float *)&v5 / 100.0;
  }
  else
  {
    v6 = *(float *)&v5;
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  return v6;
}

float WebCore::LegacyRenderSVGResourceLinearGradient::endPoint(WebCore::LegacyRenderSVGResourceLinearGradient *this, const WebCore::LinearGradientAttributes *a2)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  float v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[5];

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196559BD4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::linearGradientTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196559BF4);
  }
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *((_BYTE *)a2 + 104);
  v5 = *(_QWORD *)((char *)a2 + 124);
  v10 = *(_QWORD *)((char *)a2 + 132);
  v11 = v5;
  if ((v4 & 0xC) == 4)
  {
    v9 = v2;
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v12, (const WebCore::SVGElement *)v2);
    v6 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v11, (const WebCore::SVGLengthContext *)v12);
    WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v10, (const WebCore::SVGLengthContext *)v12);
    WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v12, v8);
    v2 = v9;
    v3 = *(_DWORD *)(v9 + 24) - 2;
  }
  else if ((v5 & 0xFF00000000) == 0x200000000)
  {
    v6 = *(float *)&v5 / 100.0;
  }
  else
  {
    v6 = *(float *)&v5;
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  return v6;
}

unsigned int *WebCore::LegacyRenderSVGResourceLinearGradient::buildGradient@<X0>(WebCore::LegacyRenderSVGResourceLinearGradient *this@<X0>, const WebCore::RenderStyle *a2@<X1>, unsigned int **a3@<X8>)
{
  const WebCore::LinearGradientAttributes *v6;
  int v7;
  int v8;
  int v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t IdentifierInternal;
  uint64_t v18;
  unsigned int *result;
  void *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  int v30;
  unsigned int v31;
  _BYTE v32[40];
  __int128 v33;
  int v34;
  const WebCore::RenderStyle *v35;

  v6 = (WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this + 304);
  LODWORD(v33) = WebCore::LegacyRenderSVGResourceLinearGradient::startPoint(this, (WebCore::LegacyRenderSVGResourceLinearGradient *)((char *)this + 304));
  DWORD1(v33) = v7;
  DWORD2(v33) = WebCore::LegacyRenderSVGResourceLinearGradient::endPoint(this, v6);
  HIDWORD(v33) = v8;
  v34 = 0;
  v9 = *((_BYTE *)this + 408) & 3;
  if (v9 == 3)
    v10 = 2;
  else
    v10 = v9 == 2;
  v11 = (uint64_t *)((char *)this + 352);
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 320) + 20))
  {
    v35 = a2;
    WebCore::GradientColorStops::mapColors<WebCore::LegacyRenderSVGResourceGradient::stopsByApplyingColorFilter(WebCore::GradientColorStops const&,WebCore::RenderStyle const&)::$_0>((uint64_t *)&v29, (uint64_t)this + 352, (uint64_t *)&v35);
  }
  else
  {
    v12 = *((unsigned int *)this + 91);
    v13 = (WTF *)v32;
    v29 = (WTF *)v32;
    v30 = 2;
    v31 = v12;
    if (v12 >= 3)
    {
      if (v12 >> 28)
      {
        __break(0xC471u);
LABEL_35:
        JUMPOUT(0x196559DE0);
      }
      v13 = (WTF *)WTF::fastMalloc((WTF *)(16 * v12));
      v30 = v12;
      v29 = v13;
      v12 = *((unsigned int *)this + 91);
    }
    if ((_DWORD)v12)
    {
      v14 = *v11;
      v15 = *v11 + 16 * v12;
      do
      {
        *(_DWORD *)v13 = *(_DWORD *)v14;
        v16 = *(_QWORD *)(v14 + 8);
        *((_QWORD *)v13 + 1) = v16;
        if ((v16 & 0x8000000000000) != 0)
        {
          v25 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 + 1, v25));
        }
        v13 = (WTF *)((char *)v13 + 16);
        v14 += 16;
      }
      while (v14 != v15);
    }
    v32[32] = *((_BYTE *)this + 400);
  }
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    goto LABEL_35;
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v18 = WTF::fastMalloc((WTF *)0xC8);
  result = (unsigned int *)WebCore::Gradient::Gradient(v18, &v33, 0x600000000, 1, v10, (uint64_t *)&v29, IdentifierInternal, 1);
  *a3 = result;
  v21 = v29;
  if (v31)
  {
    v22 = (WTF *)((char *)v29 + 16 * v31);
    do
    {
      v23 = *((_QWORD *)v21 + 1);
      if ((v23 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
        do
        {
          v27 = __ldaxr(result);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, result));
        if (!v28)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v20);
        }
      }
      v21 = (WTF *)((char *)v21 + 16);
    }
    while (v21 != v22);
    v21 = v29;
  }
  if (v32 != (_BYTE *)v21 && v21 != 0)
  {
    v29 = 0;
    v30 = 0;
    return (unsigned int *)WTF::fastFree(v21, v20);
  }
  return result;
}

void WebCore::GradientColorStops::~GradientColorStops(WTF **this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  WTF *v11;
  WTF *v12;

  v3 = *((unsigned int *)this + 3);
  v4 = *this;
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v11 = v5;
        v12 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v11;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v11;
          v4 = v12;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = *this;
  }
  if (this + 2 != (WTF **)v4 && v4 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

void `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMarker::~LegacyRenderSVGResourceMarker(WebCore::LegacyRenderSVGResourceMarker *this, void *a2)
{
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer((WebCore::LegacyRenderSVGResourceMarker *)((char *)this - 216), a2);
}

{
  bmalloc::api *v3;
  void *v4;

  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer((WebCore::LegacyRenderSVGResourceMarker *)((char *)this - 216), a2);
  if (*((_DWORD *)this - 50))
  {
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 20) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v3, v4);
  }
}

void WebCore::LegacyRenderSVGResourceMarker::~LegacyRenderSVGResourceMarker(WebCore::LegacyRenderSVGResourceMarker *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::layout(WebCore::LegacyRenderSVGResourceMarker *this, WebCore::LegacyRenderSVGResourceContainer *a2)
{
  if ((~*((_DWORD *)this + 5) & 0x208) == 0)
    WebCore::LegacyRenderSVGRoot::addResourceForClientInvalidation(this, a2);
  return WebCore::LegacyRenderSVGContainer::layout(this, a2);
}

WTF *WebCore::LegacyRenderSVGRoot::addResourceForClientInvalidation(WebCore::LegacyRenderSVGRoot *this, WebCore::LegacyRenderSVGResourceContainer *a2)
{
  WTF *result;
  _BYTE v4[24];

  result = (WTF *)WebCore::lineageOfType<WebCore::LegacyRenderSVGRoot>((uint64_t)this);
  if (result)
    return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)result + 392, this, (uint64_t)v4);
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::removeAllClientsFromCacheIfNeeded(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v3;

  if (a2)
    v3 = 0;
  else
    v3 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1, v3, a3);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMarker::removeAllClientsFromCacheIfNeeded(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = a1 - 216;
  if (a2)
    v4 = 0;
  else
    v4 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(v3, v4, a3);
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::removeClientFromCache(WebCore::LegacyRenderSVGResourceMarker *this, WebCore::RenderElement *a2, int a3)
{
  unsigned int v3;

  if (a3)
    v3 = 1;
  else
    v3 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation((int)this, a2, v3);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMarker::removeClientFromCache(WebCore::LegacyRenderSVGResourceMarker *this, WebCore::RenderElement *a2, int a3)
{
  int v3;
  unsigned int v4;

  v3 = (_DWORD)this - 216;
  if (a3)
    v4 = 1;
  else
    v4 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(v3, a2, v4);
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::applyViewportClip(uint64_t this, WebCore::PaintInfo *a2)
{
  if (((*(_DWORD *)(this + 96) >> 10) & 7u) - 1 <= 2)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 456))(*((_QWORD *)a2 + 10), this + 320);
  return this;
}

float WebCore::LegacyRenderSVGResourceMarker::markerBoundaries(WebCore::LegacyRenderSVGResourceMarker *a1, char a2, WebCore::AffineTransform *a3)
{
  __int128 *v4;
  WebCore::AffineTransform *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  __int128 v10;

  if ((a2 & 1) != 0)
    v4 = (__int128 *)((char *)a1 + 192);
  else
    v4 = (__int128 *)((char *)a1 + 176);
  v10 = *v4;
  v5 = (WebCore::AffineTransform *)WebCore::LegacyRenderSVGResourceMarker::localToParentTransform(a1, *(double *)&v10);
  LODWORD(v10) = WebCore::AffineTransform::mapRect(v5, (const WebCore::FloatRect *)&v10);
  *(_QWORD *)((char *)&v10 + 4) = __PAIR64__(v7, v6);
  HIDWORD(v10) = v8;
  return WebCore::AffineTransform::mapRect(a3, (const WebCore::FloatRect *)&v10);
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::localToParentTransform(WebCore::LegacyRenderSVGResourceMarker *this, double a2)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t result;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655A274);
  }
  v4 = *((float *)this + 81);
  v5 = *((float *)this + 80);
  LODWORD(a2) = *((_DWORD *)this + 82);
  WebCore::SVGMarkerElement::viewBoxToViewTransform((WebCore::SVGMarkerElement *)v3, a2, *((float *)this + 83), &v12);
  v6 = *((double *)&v12 + 1) + *(double *)&v12 * 0.0;
  v7 = v13 + v14 * 0.0;
  v8 = v14 + v13 * 0.0;
  v9 = v15 + v16 * 0.0 + v5;
  v10 = v16 + v15 * 0.0 + v4;
  result = (uint64_t)this + 272;
  *((double *)this + 34) = *(double *)&v12 + *((double *)&v12 + 1) * 0.0;
  *((double *)this + 35) = v6;
  *((double *)this + 36) = v7;
  *((double *)this + 37) = v8;
  *((double *)this + 38) = v9;
  *((double *)this + 39) = v10;
  return result;
}

float WebCore::LegacyRenderSVGResourceMarker::referencePoint(WebCore::LegacyRenderSVGResourceMarker *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  WTF *v28[5];

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655A42CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655A44CLL);
  }
  *(_DWORD *)(v1 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v28, (const WebCore::SVGElement *)v1);
  v2 = *(_QWORD *)(v1 + 200);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  v14 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = *(uint64_t **)(v2 + 24);
    while ((unint64_t)(*v16 + 1) <= 1)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
        goto LABEL_4;
    }
  }
  else
  {
    v16 = *(uint64_t **)(v2 + 24);
  }
  v22 = (uint64_t *)(v3 + 8 * v14);
  if (v16 == v22)
    goto LABEL_4;
  v23 = *v16;
LABEL_39:
  if (!*(_QWORD *)(v23 + 8))
  {
    while (++v16 != v22)
    {
      v23 = *v16;
      if ((unint64_t)(*v16 + 1) > 1)
      {
        if (v16 != v22)
          goto LABEL_39;
        break;
      }
    }
LABEL_4:
    v4 = v2 + 40;
    goto LABEL_5;
  }
  v4 = v2 + 48;
LABEL_5:
  v5 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v4 + 28), (const WebCore::SVGLengthContext *)v28);
  v6 = *(_QWORD *)(v1 + 208);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 && *(_DWORD *)(v7 - 12))
  {
    v17 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v17)
    {
      v18 = 8 * v17;
      v19 = *(uint64_t **)(v6 + 24);
      while ((unint64_t)(*v19 + 1) <= 1)
      {
        ++v19;
        v18 -= 8;
        if (!v18)
          goto LABEL_6;
      }
    }
    else
    {
      v19 = *(uint64_t **)(v6 + 24);
    }
    v24 = (uint64_t *)(v7 + 8 * v17);
    if (v19 != v24)
    {
      v25 = *v19;
LABEL_48:
      if (*(_QWORD *)(v25 + 8))
      {
        v8 = v6 + 48;
        goto LABEL_7;
      }
      while (++v19 != v24)
      {
        v25 = *v19;
        if ((unint64_t)(*v19 + 1) > 1)
        {
          if (v19 != v24)
            goto LABEL_48;
          break;
        }
      }
    }
  }
LABEL_6:
  v8 = v6 + 40;
LABEL_7:
  WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v8 + 28), (const WebCore::SVGLengthContext *)v28);
  v10 = v28[0];
  v28[0] = 0;
  if (!v10)
    goto LABEL_10;
  do
  {
    v11 = __ldaxr((unsigned int *)v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)v10));
  if (v12)
  {
LABEL_10:
    if (!v1)
      return v5;
    goto LABEL_11;
  }
  atomic_store(1u, (unsigned int *)v10);
  v20 = *((unsigned int *)v10 + 7);
  if ((_DWORD)v20)
  {
    v27 = v10;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v20));
    v10 = v27;
  }
  v21 = (WTF *)*((_QWORD *)v10 + 2);
  if (v21)
  {
    *((_QWORD *)v10 + 2) = 0;
    *((_DWORD *)v10 + 6) = 0;
    v26 = v10;
    WTF::fastFree(v21, v9);
    v10 = v26;
  }
  WTF::fastFree(v10, v9);
  if (v1)
  {
LABEL_11:
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1, v9);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return v5;
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::angle(WebCore::LegacyRenderSVGResourceMarker *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  float v19;
  float v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655A6F4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655A714);
  }
  v3 = *(_QWORD **)(v1 + 248);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_4;
  v13 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = (uint64_t *)v3[3];
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_4;
    }
  }
  else
  {
    v15 = (uint64_t *)v3[3];
  }
  v21 = (uint64_t *)(v4 + 8 * v13);
  if (v15 == v21)
    goto LABEL_4;
  v22 = *v15;
LABEL_38:
  if (!*(_QWORD *)(v22 + 8))
  {
    while (++v15 != v21)
    {
      v22 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v21)
          goto LABEL_38;
        break;
      }
    }
LABEL_4:
    v5 = v3 + 5;
    goto LABEL_5;
  }
  v5 = v3 + 6;
LABEL_5:
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5) != 2)
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655A734);
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655A754);
  }
  v7 = *(_QWORD **)(v6 + 240);
  v8 = v7[3];
  if (v8 && *(_DWORD *)(v8 - 12))
  {
    v16 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v16)
    {
      v17 = 8 * v16;
      v18 = (uint64_t *)v7[3];
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        ++v18;
        v17 -= 8;
        if (!v17)
          goto LABEL_9;
      }
    }
    else
    {
      v18 = (uint64_t *)v7[3];
    }
    v23 = (uint64_t *)(v8 + 8 * v16);
    if (v18 != v23)
    {
      v24 = *v18;
LABEL_47:
      if (*(_QWORD *)(v24 + 8))
      {
        v9 = v7 + 6;
        goto LABEL_10;
      }
      while (++v18 != v23)
      {
        v24 = *v18;
        if ((unint64_t)(*v18 + 1) > 1)
        {
          if (v18 != v23)
            goto LABEL_47;
          break;
        }
      }
    }
  }
LABEL_9:
  v9 = v7 + 5;
LABEL_10:
  v10 = *v9;
  switch(*(_DWORD *)(v10 + 28))
  {
    case 0:
    case 1:
    case 2:
      v11 = *(float *)(v10 + 32);
      return LODWORD(v11) | 0x100000000;
    case 3:
      v19 = *(float *)(v10 + 32);
      v20 = 57.296;
      goto LABEL_29;
    case 4:
      v19 = *(float *)(v10 + 32);
      v20 = 0.9;
      goto LABEL_29;
    case 5:
      v19 = *(float *)(v10 + 32);
      v20 = 360.0;
LABEL_29:
      v11 = v19 * v20;
      break;
    default:
      v11 = 0.0;
      break;
  }
  return LODWORD(v11) | 0x100000000;
}

double WebCore::LegacyRenderSVGResourceMarker::markerTransformation@<D0>(WebCore::LegacyRenderSVGResourceMarker *this@<X0>, const WebCore::FloatPoint *a2@<X1>, float a3@<S0>, float a4@<S1>, double *a5@<X8>)
{
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  float v15;
  float v16;
  unint64_t v17;
  float v18;
  __double2 v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float v29;
  float v30;
  double v31;
  double v32;
  BOOL v33;
  double v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  double v43;
  double v44;
  double v45;

  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655AAA0);
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655AAC0);
  }
  v11 = *(_QWORD **)(v6 + 232);
  v12 = v11[3];
  if (!v12 || !*(_DWORD *)(v12 - 12))
    goto LABEL_4;
  v36 = *(unsigned int *)(v12 - 4);
  if ((_DWORD)v36)
  {
    v37 = 8 * v36;
    v38 = (uint64_t *)v11[3];
    while ((unint64_t)(*v38 + 1) <= 1)
    {
      ++v38;
      v37 -= 8;
      if (!v37)
        goto LABEL_4;
    }
  }
  else
  {
    v38 = (uint64_t *)v11[3];
  }
  v39 = (uint64_t *)(v12 + 8 * v36);
  if (v38 == v39)
    goto LABEL_4;
  v40 = *v38;
LABEL_33:
  if (!*(_QWORD *)(v40 + 8))
  {
    while (++v38 != v39)
    {
      v40 = *v38;
      if ((unint64_t)(*v38 + 1) > 1)
      {
        if (v38 != v39)
          goto LABEL_33;
        break;
      }
    }
LABEL_4:
    v13 = v11 + 5;
    goto LABEL_5;
  }
  v13 = v11 + 6;
LABEL_5:
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13);
  v16 = *(float *)a2;
  v15 = *((float *)a2 + 1);
  v17 = WebCore::LegacyRenderSVGResourceMarker::angle(this);
  v18 = *(float *)&v17;
  if (!HIDWORD(v17))
    v18 = a3;
  v19 = __sincos_stret(v18 * 0.0174532925);
  v21 = WebCore::LegacyRenderSVGResourceMarker::referencePoint(this);
  if (v14 != 2)
    a4 = -1.0;
  v22 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v22 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655AAE0);
  }
  if (*(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655AB00);
  }
  v23 = v20;
  v24 = v21;
  WebCore::SVGMarkerElement::viewBoxToViewTransform((WebCore::SVGMarkerElement *)v22, COERCE_DOUBLE((unint64_t)*((_DWORD *)this + 82)), *((float *)this + 83), &v41);
  v25 = (v19.__cosval + v19.__sinval * 0.0) * a4;
  v26 = (v19.__sinval + v19.__cosval * 0.0) * a4;
  v27 = (v19.__cosval * 0.0 - v19.__sinval) * a4;
  v28 = (v19.__cosval - v19.__sinval * 0.0) * a4;
  if (a4 == -1.0)
  {
    v28 = v19.__cosval - v19.__sinval * 0.0;
    v27 = v19.__cosval * 0.0 - v19.__sinval;
    v26 = v19.__sinval + v19.__cosval * 0.0;
    v25 = v19.__cosval + v19.__sinval * 0.0;
  }
  v29 = v45 + v43 * v23 + *((double *)&v41 + 1) * v24;
  v30 = v44 + v42 * v23 + *(double *)&v41 * v24;
  v31 = (float)-v30;
  v32 = (float)-v29;
  v33 = v25 == 1.0;
  if (v26 != 0.0)
    v33 = 0;
  if (v27 != 0.0)
    v33 = 0;
  v34 = v28 * v32 + v31 * v26;
  if (!v33 || v28 != 1.0)
  {
    v31 = v27 * v32 + v31 * v25;
    v32 = v34;
  }
  result = v16 + 0.0 + v31;
  *a5 = v25;
  a5[1] = v26;
  a5[2] = v27;
  a5[3] = v28;
  a5[4] = result;
  a5[5] = v15 + 0.0 + v32;
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::draw(WebCore::LegacyRenderSVGResourceMarker *this, WebCore::PaintInfo *a2, const WebCore::AffineTransform *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[5];
  uint64_t v25;

  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655ACDCLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655ACFCLL);
  }
  result = WebCore::Element::hasAttribute((WebCore::Element *)v6, (const WebCore::QualifiedName *)&WebCore::SVGNames::viewBoxAttr, (uint64_t)a3, a4, a5);
  if (!(_DWORD)result)
    goto LABEL_11;
  v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v10 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655AD1CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655AD3CLL);
  }
  if (!*(_BYTE *)(v10 + 192))
    goto LABEL_11;
  v11 = *(_QWORD **)(v10 + 176);
  v12 = v11[3];
  if (v12 && *(_DWORD *)(v12 - 12))
  {
    v18 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v18)
    {
      v19 = 8 * v18;
      v20 = (uint64_t *)v11[3];
      while ((unint64_t)(*v20 + 1) <= 1)
      {
        ++v20;
        v19 -= 8;
        if (!v19)
          goto LABEL_8;
      }
    }
    else
    {
      v20 = (uint64_t *)v11[3];
    }
    v21 = (uint64_t *)(v12 + 8 * v18);
    if (v20 != v21)
    {
      v22 = *v20;
LABEL_26:
      if (*(_QWORD *)(v22 + 8))
      {
        v13 = v11 + 6;
        goto LABEL_9;
      }
      while (++v20 != v21)
      {
        v22 = *v20;
        if ((unint64_t)(*v20 + 1) > 1)
        {
          if (v20 != v21)
            goto LABEL_26;
          break;
        }
      }
    }
  }
LABEL_8:
  v13 = v11 + 5;
LABEL_9:
  v14 = *v13;
  if (*(float *)(v14 + 36) > 0.0 && *(float *)(v14 + 40) > 0.0)
  {
LABEL_11:
    v15 = *((_OWORD *)a2 + 3);
    v24[2] = *((_OWORD *)a2 + 2);
    v24[3] = v15;
    v24[4] = *((_OWORD *)a2 + 4);
    v16 = *((_QWORD *)a2 + 10);
    v25 = v16;
    v17 = *((_OWORD *)a2 + 1);
    v24[0] = *(_OWORD *)a2;
    v24[1] = v17;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 96))(v16, 1);
    WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)v24, a3);
    v23 = 0;
    WebCore::LegacyRenderSVGContainer::paint(this, (WebCore::PaintInfo *)v24, (const WebCore::LayoutPoint *)&v23);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, 1);
  }
  return result;
}

void WebCore::LegacyRenderSVGResourceMarker::calcViewport(WebCore::LegacyRenderSVGResourceMarker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  float v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF *v27[5];

  if ((*((_BYTE *)this + 20) & 8) == 0)
    return;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655AF2CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655AF4CLL);
  }
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v27, (const WebCore::SVGElement *)v2);
  v3 = *(_QWORD *)(v2 + 216);
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_5;
  v15 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    v17 = *(uint64_t **)(v3 + 24);
    while ((unint64_t)(*v17 + 1) <= 1)
    {
      ++v17;
      v16 -= 8;
      if (!v16)
        goto LABEL_5;
    }
  }
  else
  {
    v17 = *(uint64_t **)(v3 + 24);
  }
  v23 = (uint64_t *)(v4 + 8 * v15);
  if (v17 == v23)
    goto LABEL_5;
  v24 = *v17;
LABEL_40:
  if (!*(_QWORD *)(v24 + 8))
  {
    while (++v17 != v23)
    {
      v24 = *v17;
      if ((unint64_t)(*v17 + 1) > 1)
      {
        if (v17 != v23)
          goto LABEL_40;
        break;
      }
    }
LABEL_5:
    v5 = v3 + 40;
    goto LABEL_6;
  }
  v5 = v3 + 48;
LABEL_6:
  v6 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v5 + 28), (const WebCore::SVGLengthContext *)v27);
  v7 = *(_QWORD *)(v2 + 224);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_7;
  v18 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    v20 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v20 + 1) <= 1)
    {
      ++v20;
      v19 -= 8;
      if (!v19)
        goto LABEL_7;
    }
  }
  else
  {
    v20 = *(uint64_t **)(v7 + 24);
  }
  v25 = (uint64_t *)(v8 + 8 * v18);
  if (v20 == v25)
    goto LABEL_7;
  v26 = *v20;
LABEL_49:
  if (!*(_QWORD *)(v26 + 8))
  {
    while (++v20 != v25)
    {
      v26 = *v20;
      if ((unint64_t)(*v20 + 1) > 1)
      {
        if (v20 != v25)
          goto LABEL_49;
        break;
      }
    }
LABEL_7:
    v9 = v7 + 40;
    goto LABEL_8;
  }
  v9 = v7 + 48;
LABEL_8:
  v11 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v9 + 28), (const WebCore::SVGLengthContext *)v27);
  *((_QWORD *)this + 40) = 0;
  *((float *)this + 82) = v6;
  *((float *)this + 83) = v11;
  v12 = v27[0];
  v27[0] = 0;
  if (!v12)
    goto LABEL_11;
  do
  {
    v13 = __ldaxr((unsigned int *)v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v12));
  if (v14)
  {
LABEL_11:
    if (!v2)
      return;
    goto LABEL_12;
  }
  atomic_store(1u, (unsigned int *)v12);
  v21 = *((unsigned int *)v12 + 7);
  if ((_DWORD)v21)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v12 + 2), (WTF::StringImpl *)(*((_QWORD *)v12 + 2) + 32 * v21));
  v22 = (WTF *)*((_QWORD *)v12 + 2);
  if (v22)
  {
    *((_QWORD *)v12 + 2) = 0;
    *((_DWORD *)v12 + 6) = 0;
    WTF::fastFree(v22, v10);
  }
  WTF::fastFree(v12, v10);
  if (v2)
  {
LABEL_12:
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v10);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
}

uint64_t WebCore::LegacyRenderSVGResourceMasker::operator new(uint64_t this)
{
  if (this == 312)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::LegacyRenderSVGResourceMasker::LegacyRenderSVGResourceMasker(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  double result;

  WebCore::LegacyRenderSVGResourceContainer::LegacyRenderSVGResourceContainer(a1, 100, a2, a3);
  *(_QWORD *)v3 = off_1E344DA10;
  *(_QWORD *)(v3 + 216) = &unk_1E344DDA0;
  result = 0.0;
  *(_OWORD *)(v3 + 268) = 0u;
  *(_OWORD *)(v3 + 284) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  return result;
}

void WebCore::LegacyRenderSVGResourceMasker::~LegacyRenderSVGResourceMasker(WebCore::LegacyRenderSVGResourceMasker *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;

  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF *)-1)
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v5, 0);
          v6 = *(v5 - 1);
          *(v5 - 1) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
}

void `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMasker::~LegacyRenderSVGResourceMasker(WebCore::LegacyRenderSVGResourceMasker *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;

  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF *)-1)
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v5, 0);
          v6 = *(v5 - 1);
          *(v5 - 1) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer((WebCore::LegacyRenderSVGResourceMasker *)((char *)this - 216), a2);
}

{
  WebCore::LegacyRenderSVGResourceMasker::operator delete((WebCore::LegacyRenderSVGResourceMasker *)((char *)this - 216), a2);
}

double WebCore::LegacyRenderSVGResourceMasker::operator delete(WebCore::LegacyRenderSVGResourceContainer *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  void *v7;
  double result;

  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF *)-1)
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v5, 0);
          v6 = *(v5 - 1);
          *(v5 - 1) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 38) = 0;
    result = 0.0;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v7);
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceMasker::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;

  v4 = (int)a2;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  v6 = *(_QWORD *)(a1 + 304);
  if (v6)
  {
    *(_QWORD *)(a1 + 304) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::ClipperData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::ClipperData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v6, a2);
  }
  if (v4)
    v7 = 0;
  else
    v7 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1, v7, a3);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMasker::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  return WebCore::LegacyRenderSVGResourceMasker::removeAllClientsFromCacheIfNeeded(a1 - 216, a2, a3);
}

uint64_t WebCore::LegacyRenderSVGResourceMasker::removeClientFromCache(WTF **this, WebCore::RenderElement *a2, int a3)
{
  int v5;
  unsigned int v6;

  v5 = (int)this;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::MaskerData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(this + 38, a2);
  if (a3)
    v6 = 1;
  else
    v6 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(v5, a2, v6);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMasker::removeClientFromCache(WTF **this, WebCore::RenderElement *a2, int a3)
{
  int v5;
  unsigned int v6;

  v5 = (_DWORD)this - 216;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::MaskerData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(this + 11, a2);
  if (a3)
    v6 = 1;
  else
    v6 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(v5, a2, v6);
}

uint64_t WebCore::LegacyRenderSVGResourceMasker::applyResource(uint64_t *a1, WebCore::SVGRenderingContext *this, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int i;
  uint64_t v15;
  uint64_t *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int k;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int j;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  double v46;
  unsigned int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  unsigned int v52;
  float v53;
  long double v54;
  float v55;
  float v56;
  uint64_t result;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  float32x2_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  float32x2_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  WebCore::GraphicsContext *v82;
  __int32 v83;
  int v84;
  int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  int v96;
  CFTypeRef v97;
  CFTypeRef v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  CFTypeRef cf;
  CFTypeRef v104;
  float v105;
  int v106;
  float32x4_t v107;
  double v108[6];
  CFTypeRef *p_cf;
  int v110;
  int v111;
  char v112;
  float32x2_t *p_p_cf;

  v7 = a1[38];
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = 1;
    for (i = v12; ; i = (i + v13++) & v8)
    {
      v15 = *(_QWORD *)(v7 + 16 * i);
      if (v15 != -1)
      {
        if (!v15)
          break;
        if (*(WebCore::SVGRenderingContext **)(v15 + 8) == this)
        {
          v31 = 0;
LABEL_39:
          for (j = 1; ; ++j)
          {
            v43 = v12;
            v44 = *(_QWORD *)(v7 + 16 * v12);
            if (v44 != -1)
            {
              if (!v44)
              {
                v45 = 0;
                goto LABEL_47;
              }
              if (*(WebCore::SVGRenderingContext **)(v44 + 8) == this)
                break;
            }
            v12 = (v43 + j) & v8;
          }
          v45 = *(uint64_t **)(v7 + 16 * v43 + 8);
          goto LABEL_47;
        }
      }
    }
  }
  v16 = a1 + 38;
  v17 = (WTF *)*((_QWORD *)this + 1);
  if (!v17)
  {
    v17 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *((_QWORD *)v17 + 1) = this;
    v91 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v17;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
      {
        WTF::fastFree(v91, v90);
        v17 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v91;
      }
    }
  }
  ++*(_DWORD *)v17;
  v18 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v18 = 0;
  v19 = *v16;
  if (*v16
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::MaskerData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1 + 38, 8u), (v19 = *v16) != 0))
  {
    v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = 0;
  v22 = *((_QWORD *)v17 + 1);
  v23 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = (v25 >> 31) ^ v25;
  for (k = 1; ; ++k)
  {
    v28 = v26 & v20;
    v29 = (WTF **)(v19 + 16 * v28);
    v30 = *v29;
    if (*v29 != (WTF *)-1)
      break;
    v21 = v19 + 16 * v28;
LABEL_17:
    v26 = k + v28;
  }
  if (!v30)
  {
    if (v21)
    {
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      --*(_DWORD *)(*v16 - 16);
      *(_QWORD *)v21 = v17;
    }
    else
    {
      *v29 = v17;
      v21 = v19 + 16 * v28;
    }
    std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100]((WTF **)(v21 + 8), v18);
    v32 = *v16;
    if (*v16)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *v16;
    if (*v16)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36)
        goto LABEL_37;
    }
    else
    {
      if (3 * v37 > 4 * v36)
        goto LABEL_37;
      if (!(_DWORD)v37)
      {
        v38 = 8;
        goto LABEL_36;
      }
    }
    v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
LABEL_36:
    WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::MaskerData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1 + 38, v38);
    goto LABEL_37;
  }
  if (*((_QWORD *)v30 + 1) != v22)
    goto LABEL_17;
  std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100]((WTF **)(v19 + 16 * v28 + 8), v18);
  if (*(_DWORD *)v17 == 1)
    WTF::fastFree(v17, this);
  else
    --*(_DWORD *)v17;
LABEL_37:
  v7 = *v16;
  if (*v16)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v39 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
    v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
    v12 = v8 & ((v41 >> 31) ^ v41);
    v31 = 1;
    goto LABEL_39;
  }
  v45 = 0;
  v31 = 1;
LABEL_47:
  v46 = WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem(this, this, v108);
  *(float *)&v47 = (*(float (**)(WebCore::SVGRenderingContext *, _QWORD, double))(*(_QWORD *)this + 256))(this, 0, v46);
  v49 = v48;
  v51 = v50;
  v107.i64[0] = __PAIR64__(v52, v47);
  v107.i64[1] = __PAIR64__(LODWORD(v50), LODWORD(v48));
  v53 = hypot(v108[0], v108[1]);
  v54 = hypot(v108[2], v108[3]);
  *(float *)&v54 = v54;
  v105 = v53;
  v106 = LODWORD(v54);
  v55 = v49 * v53;
  if ((float)(v49 * v53) > 0.0)
  {
    v56 = floorf(v55) * floorf(v51 * *(float *)&v54);
    if ((float)(v51 * *(float *)&v54) > 0.0 && v56 > 16777000.0)
    {
      v99 = sqrtf(16777000.0 / (float)(v55 * (float)(v51 * *(float *)&v54)));
      *(float *)&v54 = v99 * *(float *)&v54;
      v105 = v99 * v53;
      v106 = LODWORD(v54);
    }
  }
  if (*v45)
  {
LABEL_54:
    WebCore::SVGRenderingContext::clipToImageBuffer(*a4, (const WebCore::FloatRect *)&v107, &v105, v45, v31);
    return 1;
  }
  result = 0;
  if (v49 > 0.0 && v51 > 0.0)
  {
    v59 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v59 != -1)
    {
      p_cf = &v104;
      p_p_cf = (float32x2_t *)&p_cf;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &p_p_cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v104 = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v60 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v60 != -1)
    {
      p_cf = &cf;
      p_p_cf = (float32x2_t *)&p_cf;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &p_p_cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    if ((*(_WORD *)(a1[17] + 4) & 0xC0) == 0x80)
    {
      v61 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
      if (v61 != -1)
      {
        p_cf = (CFTypeRef *)&v112;
        p_p_cf = (float32x2_t *)&p_cf;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, &p_p_cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      WTF::RetainPtr<CGColorSpace *>::operator=(&v104, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::colorSpace);
      v62 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
      if (v62 != -1)
      {
        p_cf = (CFTypeRef *)&v112;
        p_p_cf = (float32x2_t *)&p_cf;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, &p_p_cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      WTF::RetainPtr<CGColorSpace *>::operator=(&cf, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::colorSpace);
    }
    WebCore::GraphicsContext::createScaledImageBuffer(&v107, *a4, &v105, (uint64_t)&v104, 0x100u, 0, (uint64_t *)&p_cf, v54);
    v64 = (float32x2_t)p_cf;
    p_cf = 0;
    v65 = *v45;
    *v45 = (uint64_t)v64;
    if (v65)
    {
      v66 = *(_QWORD *)(v65 + 8);
      if (__ldaxr((unsigned __int8 *)v66))
      {
        __clrex();
        goto LABEL_76;
      }
      if (__stxr(1u, (unsigned __int8 *)v66))
LABEL_76:
        MEMORY[0x19AEA534C](v66);
      v68 = *(_QWORD *)(v66 + 8);
      v69 = v68 - 1;
      *(_QWORD *)(v66 + 8) = v68 - 1;
      if (v68 == 1)
      {
        v100 = *(_QWORD *)(v66 + 16);
        v70 = *(_QWORD *)(v66 + 24);
        *(_QWORD *)(v66 + 24) = 0;
        v71 = v100 != 0;
      }
      else
      {
        v70 = 0;
        v71 = 1;
      }
      v72 = __ldxr((unsigned __int8 *)v66);
      if (v72 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v66))
          goto LABEL_84;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v66);
LABEL_84:
      if (!v69)
      {
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
        if (!v71)
          WTF::fastFree((WTF *)v66, v63);
      }
    }
    v73 = (float32x2_t)p_cf;
    p_cf = 0;
    if (v73)
    {
      v74 = *(_QWORD *)(*(_QWORD *)&v73 + 8);
      if (__ldaxr((unsigned __int8 *)v74))
      {
        __clrex();
        goto LABEL_93;
      }
      if (__stxr(1u, (unsigned __int8 *)v74))
LABEL_93:
        MEMORY[0x19AEA534C](v74);
      v76 = *(_QWORD *)(v74 + 8);
      v77 = v76 - 1;
      *(_QWORD *)(v74 + 8) = v76 - 1;
      if (v76 == 1)
      {
        v101 = *(_QWORD *)(v74 + 16);
        v78 = *(_QWORD *)(v74 + 24);
        *(_QWORD *)(v74 + 24) = 0;
        v79 = v101 != 0;
      }
      else
      {
        v78 = 0;
        v79 = 1;
      }
      v80 = __ldxr((unsigned __int8 *)v74);
      if (v80 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v74))
          goto LABEL_101;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v74);
LABEL_101:
      if (!v77)
      {
        if (v78)
          (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
        if (!v79)
          WTF::fastFree((WTF *)v74, v63);
      }
    }
    v81 = *v45;
    if (*v45)
    {
      v82 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 16))(*v45);
      LODWORD(p_cf) = (*(float (**)(WebCore::SVGRenderingContext *))(*(_QWORD *)this + 232))(this);
      HIDWORD(p_cf) = v83;
      v110 = v84;
      v111 = v85;
      if (WebCore::LegacyRenderSVGResourceMasker::drawContentIntoContext((WebCore::LegacyRenderSVGResourceMasker *)a1, v82, (float32x2_t *)&p_cf))
      {
        if ((*(_WORD *)(a1[17] + 8) & 0x2000) == 0)
          (*(void (**)(uint64_t))(*(_QWORD *)*v45 + 72))(*v45);
        goto LABEL_132;
      }
      v87 = *v45;
      *v45 = 0;
      if (!v87)
        goto LABEL_132;
      v88 = *(_QWORD *)(v87 + 8);
      if (__ldaxr((unsigned __int8 *)v88))
      {
        __clrex();
        goto LABEL_119;
      }
      if (__stxr(1u, (unsigned __int8 *)v88))
LABEL_119:
        MEMORY[0x19AEA534C](v88);
      v92 = *(_QWORD *)(v88 + 8);
      v93 = v92 - 1;
      *(_QWORD *)(v88 + 8) = v92 - 1;
      if (v92 == 1)
      {
        v102 = *(_QWORD *)(v88 + 16);
        v94 = *(_QWORD *)(v88 + 24);
        *(_QWORD *)(v88 + 24) = 0;
        v95 = v102 != 0;
      }
      else
      {
        v94 = 0;
        v95 = 1;
      }
      v96 = __ldxr((unsigned __int8 *)v88);
      if (v96 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v88))
          goto LABEL_127;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v88);
LABEL_127:
      if (!v93)
      {
        if (v94)
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
        if (!v95)
          WTF::fastFree((WTF *)v88, v86);
      }
    }
LABEL_132:
    v97 = cf;
    cf = 0;
    if (v97)
      CFRelease(v97);
    v98 = v104;
    v104 = 0;
    if (v98)
      CFRelease(v98);
    if (v81 && *v45)
      goto LABEL_54;
    return 0;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMasker::applyResource(uint64_t a1, WebCore::SVGRenderingContext *a2, uint64_t a3, uint64_t *a4)
{
  return WebCore::LegacyRenderSVGResourceMasker::applyResource((uint64_t *)(a1 - 216), a2, a3, a4);
}

uint64_t WebCore::LegacyRenderSVGResourceMasker::drawContentIntoContext(WebCore::LegacyRenderSVGResourceMasker *this, WebCore::GraphicsContext *a2, float32x2_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  float32x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[32];
  float64x2_t v31;
  uint64_t v32;
  __int128 v33;
  __int16 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::GraphicsContext *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v30[16] = xmmword_1969FE230;
  v31 = (float64x2_t)xmmword_1969FE240;
  *(_OWORD *)v30 = constinit_13;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v3 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655BF8CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655BFACLL);
  }
  v7 = *(_QWORD **)(v3 + 224);
  v8 = v7[3];
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v15 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    v17 = (uint64_t *)v7[3];
    while ((unint64_t)(*v17 + 1) <= 1)
    {
      ++v17;
      v16 -= 8;
      if (!v16)
        goto LABEL_4;
    }
  }
  else
  {
    v17 = (uint64_t *)v7[3];
  }
  v27 = (uint64_t *)(v8 + 8 * v15);
  if (v17 == v27)
    goto LABEL_4;
  v28 = *v17;
LABEL_44:
  if (!*(_QWORD *)(v28 + 8))
  {
    while (++v17 != v27)
    {
      v28 = *v17;
      if ((unint64_t)(*v17 + 1) > 1)
      {
        if (v17 != v27)
          goto LABEL_44;
        break;
      }
    }
LABEL_4:
    v9 = v7 + 5;
    goto LABEL_5;
  }
  v9 = v7 + 6;
LABEL_5:
  if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9) == 2)
  {
    v10 = a3[1];
    v31 = vaddq_f64(vcvtq_f64_f32(*a3), (float64x2_t)0);
    v11 = vcvtq_f64_f32(v10);
    *(float64_t *)v30 = v11.f64[0];
    *(float64x2_t *)&v30[8] = vmulq_f64(v11, (float64x2_t)0);
    *(float64_t *)&v30[24] = v11.f64[1];
    (*(void (**)(WebCore::GraphicsContext *, _BYTE *))(*(_QWORD *)a2 + 656))(a2, v30);
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v12 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655BFCCLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655BFECLL);
  }
  *(_DWORD *)(v12 + 24) += 2;
  *(_QWORD *)&v33 = v12;
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v33);
  v13 = *(_QWORD *)(v12 + 80);
  if (!v13)
    return 1;
  result = 1;
  while ((*(_WORD *)(v13 + 28) & 0x20) == 0)
  {
    v13 = *(_QWORD *)(v13 + 56);
    if (!v13)
      return result;
  }
  v18 = xmmword_1969FCA90;
  v19 = 0uLL;
LABEL_22:
  v20 = *(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v20)
    goto LABEL_31;
  if ((*(_BYTE *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655C00CLL);
  }
  if ((*(_BYTE *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 0xF8) == 0)
  {
    if ((*(_QWORD *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1FLL) != 0x1A
      && (*(_BYTE *)(*(_QWORD *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 239) & 4) == 0
      && (*(_BYTE *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x78) & 0x30) == 0)
    {
      v29 = v18;
      v33 = v18;
      v34 = 8;
      v35 = 2;
      v36 = v19;
      v37 = v19;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = a2;
      {
        v22 = *((double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation + 1);
        v21 = *(double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation;
        v24 = *(double *)&qword_1EE2F9610;
        v23 = unk_1EE2F9618;
        v25 = *((double *)&xmmword_1EE2F9620 + 1);
        v26 = *(double *)&xmmword_1EE2F9620;
      }
      else
      {
        WebCore::currentContentTransformation(void)::s_currentContentTransformation = constinit_10;
        *(_OWORD *)&qword_1EE2F9610 = unk_1969FE138;
        xmmword_1EE2F9620 = xmmword_1969FE148;
        v23 = 1.0;
        v25 = 0.0;
        v26 = 0.0;
        v24 = 0.0;
        v22 = 0.0;
        v21 = 1.0;
      }
      v42 = WebCore::currentContentTransformation(void)::s_currentContentTransformation;
      v43 = *(_OWORD *)&qword_1EE2F9610;
      v44 = xmmword_1EE2F9620;
      *(double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation = v22
                                                                                              * *(double *)&v30[16]
                                                                                              + v21 * *(double *)v30;
      *((double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation + 1) = v22 * *(double *)&v30[24] + v21 * *(double *)&v30[8];
      *(double *)&qword_1EE2F9610 = v23 * *(double *)&v30[16] + v24 * *(double *)v30;
      unk_1EE2F9618 = v23 * *(double *)&v30[24] + v24 * *(double *)&v30[8];
      *(double *)&xmmword_1EE2F9620 = v31.f64[0] + v25 * *(double *)&v30[16] + v26 * *(double *)v30;
      *((double *)&xmmword_1EE2F9620 + 1) = v31.f64[1] + v25 * *(double *)&v30[24] + v26 * *(double *)&v30[8];
      v32 = 0;
      (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v20 + 680))(v20, &v33, &v32);
      WebCore::currentContentTransformation(void)::s_currentContentTransformation = v42;
      *(_OWORD *)&qword_1EE2F9610 = v43;
      xmmword_1EE2F9620 = v44;
      v18 = v29;
      v19 = 0uLL;
    }
LABEL_31:
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 56);
      if (!v13)
        return 1;
      if ((*(_WORD *)(v13 + 28) & 0x20) != 0)
        goto LABEL_22;
    }
  }
  return 0;
}

uint64_t WebCore::LegacyRenderSVGResourceMasker::drawContentIntoContext(WebCore::LegacyRenderSVGResourceMasker *a1, WebCore::GraphicsContext *a2, float *a3, float *a4, unsigned int a5)
{
  int v10;
  int v11;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v18;
  float32x2_t v20[2];

  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v10 = (a5 >> 8) & 0xF;
  v11 = a5 & 0x1F;
  if (*((unsigned __int8 *)a2 + 194) != v10 || *((unsigned __int8 *)a2 + 195) != v11)
  {
    *((_WORD *)a2 + 97) = v10 | ((_WORD)v11 << 8);
    *((_DWORD *)a2 + 46) |= 0x20u;
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 88))(a2, (uint64_t)a2 + 8);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, *a3, a3[1]);
  v13 = a3[2];
  v14 = a3[3];
  v15 = a4[2];
  v16 = a4[3];
  if (v13 != v15 || v14 != v16)
  {
    v20[0].f32[0] = v13 / v15;
    v20[0].f32[1] = v14 / v16;
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)a2 + 632))(a2, v20);
  }
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, -*a4, -a4[1]);
  v20[0] = 0;
  v20[1] = *(float32x2_t *)(a3 + 2);
  v18 = WebCore::LegacyRenderSVGResourceMasker::drawContentIntoContext(a1, a2, v20);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  return v18;
}

float WebCore::LegacyRenderSVGResourceMasker::resourceBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  __n128 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  WebCore::AffineTransform *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  float64x2_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  float64_t v68;
  float64x2_t v69;
  float64_t v70;
  float64x2_t v71;
  uint64_t v72;
  float32x2_t v73;
  float32x2_t v74;
  __int128 v75;

  v73.i32[0] = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  v73.i32[1] = v5;
  v74 = (float32x2_t)__PAIR64__(v7, v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v8 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655C598);
  }
  if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655C5B8);
  }
  *(_DWORD *)(v8 + 24) += 2;
  v72 = v8;
  v9 = *(_QWORD **)(v8 + 216);
  v10 = v9[3];
  if (!v10 || !*(_DWORD *)(v10 - 12))
    goto LABEL_4;
  v58 = *(unsigned int *)(v10 - 4);
  if ((_DWORD)v58)
  {
    v59 = 8 * v58;
    v60 = (uint64_t *)v9[3];
    while ((unint64_t)(*v60 + 1) <= 1)
    {
      ++v60;
      v59 -= 8;
      if (!v59)
        goto LABEL_4;
    }
  }
  else
  {
    v60 = (uint64_t *)v9[3];
  }
  v64 = (uint64_t *)(v10 + 8 * v58);
  if (v60 == v64)
    goto LABEL_4;
  v65 = *v60;
LABEL_79:
  if (!*(_QWORD *)(v65 + 8))
  {
    while (++v60 != v64)
    {
      v65 = *v60;
      if ((unint64_t)(*v60 + 1) > 1)
      {
        if (v60 != v64)
          goto LABEL_79;
        break;
      }
    }
LABEL_4:
    v11 = v9 + 5;
    goto LABEL_5;
  }
  v11 = v9 + 6;
LABEL_5:
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11);
  v13.n128_f32[0] = WebCore::SVGLengthContext::resolveRectangle<WebCore::SVGMaskElement>((WebCore::SVGElement *)v8, v12, (float *)&v73);
  v14 = v13.n128_f32[0];
  v16 = v15;
  v18 = v17;
  v20 = v19;
  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
  {
    v44 = v13.n128_f32[0];
    goto LABEL_59;
  }
  v21 = a1 + 268;
  v22 = a1 + 268 + 16 * a3;
  v23 = (float *)(v22 + 8);
  v13.n128_u32[0] = *(_DWORD *)(v22 + 8);
  if (v13.n128_f32[0] <= 0.0
    || (v13.n128_u32[0] = *(_DWORD *)(v21 + 16 * a3 + 12), v13.n128_f32[0] <= 0.0))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v24 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19655C5D8);
    }
    if (*(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19655C5F8);
    }
    v25 = *(_QWORD *)(v24 + 80);
    if (v25)
    {
      v26 = (float *)(v21 + 16 * a3 + 12);
      do
      {
        if ((*(_WORD *)(v25 + 28) & 0x20) != 0)
        {
          v27 = *(_QWORD *)(v25 + 64);
          v28 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFLL);
          if ((v27 & 0xFFFFFFFFFFFFLL) != 0)
          {
            v29 = *(_BYTE *)((v27 & 0xFFFFFFFFFFFFLL) + 0x2D);
            v30 = v27 & 0xFFFFFFFFFFFFLL;
            if ((v29 & 2) != 0)
            {
              v30 = v28[4];
              if (v30)
                v30 = *(_QWORD *)(v30 + 8);
            }
            if ((*(_QWORD *)(v30 + 96) & 0x1FLL) != 0x1A
              && (*(_BYTE *)(*(_QWORD *)(v30 + 104) + 239) & 4) == 0
              && (*(_BYTE *)(v30 + 120) & 0x30) == 0)
            {
              v31 = (WebCore::AffineTransform *)(*(uint64_t (**)(_QWORD *, __n128))(*v28 + 272))(v28, v13);
              LODWORD(v68) = (*(float (**)(_QWORD *, uint64_t))(*v28 + 256))(v28, a3);
              HIDWORD(v68) = v32;
              *(_QWORD *)&v69.f64[0] = __PAIR64__(v34, v33);
              v13.n128_f32[0] = WebCore::AffineTransform::mapRect(v31, (const WebCore::FloatRect *)&v68);
              if (v36 > 0.0 && v37 > 0.0)
              {
                if (*v23 <= 0.0 || (v38 = *v26, *v26 <= 0.0))
                {
                  *(_DWORD *)v22 = v13.n128_u32[0];
                  *(float *)(v22 + 4) = v35;
                  *(float *)(v22 + 8) = v36;
                  *(float *)(v22 + 12) = v37;
                }
                else
                {
                  v39 = *(float *)(v22 + 4);
                  if (v13.n128_f32[0] >= *(float *)v22)
                    v40 = *(float *)v22;
                  else
                    v40 = v13.n128_f32[0];
                  if (v35 >= v39)
                    v41 = *(float *)(v22 + 4);
                  else
                    v41 = v35;
                  v42 = v36 + v13.n128_f32[0];
                  if ((float)(*v23 + *(float *)v22) >= v42)
                    v42 = *v23 + *(float *)v22;
                  v43 = v37 + v35;
                  if ((float)(v38 + v39) >= v43)
                    v43 = v38 + v39;
                  *(float *)v22 = v40;
                  *(float *)(v22 + 4) = v41;
                  *v23 = v42 - v40;
                  v13.n128_f32[0] = v43 - v41;
                  *v26 = v43 - v41;
                }
              }
            }
          }
        }
        v25 = *(_QWORD *)(v25 + 56);
      }
      while (v25);
    }
  }
  v75 = *(_OWORD *)v22;
  v45 = *(_QWORD **)(v8 + 224);
  v46 = v45[3];
  if (v46 && *(_DWORD *)(v46 - 12))
  {
    v61 = *(unsigned int *)(v46 - 4);
    if ((_DWORD)v61)
    {
      v62 = 8 * v61;
      v63 = (uint64_t *)v45[3];
      while ((unint64_t)(*v63 + 1) <= 1)
      {
        ++v63;
        v62 -= 8;
        if (!v62)
          goto LABEL_40;
      }
    }
    else
    {
      v63 = (uint64_t *)v45[3];
    }
    v66 = (uint64_t *)(v46 + 8 * v61);
    if (v63 != v66)
    {
      v67 = *v63;
LABEL_88:
      if (*(_QWORD *)(v67 + 8))
      {
        v47 = v45 + 6;
        goto LABEL_41;
      }
      while (++v63 != v66)
      {
        v67 = *v63;
        if ((unint64_t)(*v63 + 1) > 1)
        {
          if (v63 != v66)
            goto LABEL_88;
          break;
        }
      }
    }
  }
LABEL_40:
  v47 = v45 + 5;
LABEL_41:
  if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v47 + 32))(*v47) == 2)
  {
    v71 = vaddq_f64(vcvtq_f64_f32(v73), (float64x2_t)0);
    v48 = vcvtq_f64_f32(v74);
    v68 = v48.f64[0];
    v69 = vmulq_f64(v48, (float64x2_t)0);
    v70 = v48.f64[1];
    v49 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v68, (const WebCore::FloatRect *)&v75);
  }
  else
  {
    v50 = *((float *)&v75 + 1);
    v49 = *(float *)&v75;
    v52 = *((float *)&v75 + 3);
    v51 = *((float *)&v75 + 2);
  }
  if (v49 >= v14)
    v44 = v49;
  else
    v44 = v14;
  if (v50 >= v16)
    v53 = v50;
  else
    v53 = v16;
  v54 = v49 + v51;
  if ((float)(v14 + v18) < v54)
    v54 = v14 + v18;
  v55 = v50 + v52;
  if ((float)(v16 + v20) < v55)
    v55 = v16 + v20;
  if (v44 >= v54 || v53 >= v55)
    v44 = 0.0;
LABEL_59:
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v72);
  return v44;
}

float `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMasker::resourceBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::LegacyRenderSVGResourceMasker::resourceBoundingBox(a1 - 216, a2, a3);
}

void WebCore::LegacyRenderSVGResourcePattern::~LegacyRenderSVGResourcePattern(WebCore::LegacyRenderSVGResourcePattern *this, void *a2)
{
  WTF **v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (WTF **)*((_QWORD *)this + 49);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
}

void `non-virtual thunk to'WebCore::LegacyRenderSVGResourcePattern::~LegacyRenderSVGResourcePattern(WebCore::LegacyRenderSVGResourcePattern *this, void *a2)
{
  WTF **v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (WTF **)*((_QWORD *)this + 22);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer((WebCore::LegacyRenderSVGResourcePattern *)((char *)this - 216), a2);
}

{
  WebCore::LegacyRenderSVGResourcePattern::operator delete((WebCore::LegacyRenderSVGResourcePattern *)((char *)this - 216), a2);
}

double WebCore::LegacyRenderSVGResourcePattern::operator delete(WebCore::LegacyRenderSVGResourceContainer *this, void *a2)
{
  WTF **v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  double result;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (WTF **)*((_QWORD *)this + 49);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::LegacyRenderSVGResourceContainer::~LegacyRenderSVGResourceContainer(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 50) = 0;
    result = 0.0;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v7);
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourcePattern::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  int v4;
  WTF **v6;
  unsigned int v7;

  v4 = (int)a2;
  v6 = *(WTF ***)(a1 + 392);
  if (v6)
  {
    *(_QWORD *)(a1 + 392) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v6, a2);
  }
  *(_BYTE *)(a1 + 400) = 1;
  if (v4)
    v7 = 2;
  else
    v7 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1, v7, a3);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourcePattern::removeAllClientsFromCacheIfNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  int v4;
  WTF **v6;
  unsigned int v7;

  v4 = (int)a2;
  v6 = *(WTF ***)(a1 + 176);
  if (v6)
  {
    *(_QWORD *)(a1 + 176) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v6, a2);
  }
  *(_BYTE *)(a1 + 184) = 1;
  if (v4)
    v7 = 2;
  else
    v7 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(a1 - 216, v7, a3);
}

uint64_t WebCore::LegacyRenderSVGResourcePattern::removeClientFromCache(WebCore::LegacyRenderSVGResourcePattern *this, WebCore::RenderElement *a2, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v5 = (int)this;
  v6 = *((_QWORD *)this + 49);
  if (v6)
  {
    v7 = (uint64_t *)((char *)this + 392);
    v8 = *(_DWORD *)(v6 - 8);
    v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    for (i = 1; ; ++i)
    {
      v14 = v12;
      v15 = *(_QWORD *)(v6 + 16 * v12);
      if (v15 != -1)
      {
        if (!v15)
          goto LABEL_9;
        if (*(WebCore::RenderElement **)(v15 + 8) == a2)
          break;
      }
      v12 = (v14 + i) & v8;
    }
    if ((_DWORD)v14 != *(_DWORD *)(v6 - 4))
      WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::remove(v7, (WTF ***)(v6 + 16 * v14));
  }
LABEL_9:
  if (a3)
    v16 = 2;
  else
    v16 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(v5, a2, v16);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourcePattern::removeClientFromCache(WebCore::LegacyRenderSVGResourcePattern *this, WebCore::RenderElement *a2, int a3)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v5 = (int)this;
  v8 = *((_QWORD *)this + 22);
  v6 = (uint64_t *)((char *)this + 176);
  v7 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)(v7 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    for (i = 1; ; ++i)
    {
      v15 = v13;
      v16 = *(_QWORD *)(v7 + 16 * v13);
      if (v16 != -1)
      {
        if (!v16)
          goto LABEL_9;
        if (*(WebCore::RenderElement **)(v16 + 8) == a2)
          break;
      }
      v13 = (v15 + i) & v9;
    }
    if ((_DWORD)v15 != *(_DWORD *)(v7 - 4))
      WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::remove(v6, (WTF ***)(v7 + 16 * v15));
  }
LABEL_9:
  if (a3)
    v17 = 2;
  else
    v17 = 3;
  return WebCore::LegacyRenderSVGResourceContainer::markClientForInvalidation(v5 - 216, a2, v17);
}

unsigned int *WebCore::LegacyRenderSVGResourcePattern::collectPatternAttributes(unsigned int *this, __n128 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  unsigned int *v6;
  uint64_t v7;
  const WebCore::RenderElement *v8;
  void *v9;
  uint64_t v10;

  if (this)
  {
    v6 = this;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)v6 + 3) + 8);
      if ((*(_WORD *)(v7 + 28) & 0x20) == 0)
      {
LABEL_14:
        __break(0xC471u);
        JUMPOUT(0x19655CC54);
      }
      if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::patternTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x19655CC74);
      }
      *(_DWORD *)(v7 + 24) += 2;
      WebCore::SVGPatternElement::collectPatternAttributes(v7, a2, a3, a4, a5);
      this = (unsigned int *)WebCore::SVGResourcesCache::cachedResourcesForRenderer((WebCore::SVGResourcesCache *)v6, v8);
      if (this && (v10 = *((_QWORD *)this + 3)) != 0)
      {
        v6 = *(unsigned int **)(v10 + 8);
        if (v6)
        {
          this = (unsigned int *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 27) + 56))((_QWORD *)v6 + 27);
          if ((_DWORD)this != 2)
            goto LABEL_14;
        }
      }
      else
      {
        v6 = 0;
      }
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    while (v6);
  }
  return this;
}

uint64_t WebCore::LegacyRenderSVGResourcePattern::applyResource(uint64_t a1, uint64_t a2, WebCore::GraphicsContext *a3, unsigned int **a4, int a5)
{
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  WTF::String *v14;
  __int16 v15;
  float64x2_t v16;
  float64x2_t v17;
  __n128 v18;
  float64x2_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  float64_t v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  float v27;
  uint64_t result;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int i;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  const WebCore::AffineTransform *v41;
  uint64_t v42;
  _DWORD *v43;
  float64x2_t v44;
  unsigned int *v45;
  float v46;
  unsigned int *v47;
  _DWORD *v48;
  uint64_t v49;
  const WebCore::RenderElement *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unsigned int v60;
  float64_t v61;
  uint64_t v62;
  int v63;
  void *v64;
  double v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  _BOOL4 v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  int v85;
  float v86;
  int v87;
  float v88;
  int v89;
  float v90;
  int v91;
  float v92;
  float v93;
  float v94;
  float v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  float64_t v99;
  __n128 v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  unsigned int *v107;
  float v108;
  unsigned int *v109;
  _DWORD *v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  float *v117;
  float v118;
  float v119;
  uint64_t v120;
  double v121;
  float64x2_t *v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  float64x2_t v131;
  double v132;
  float64x2_t v133;
  uint64_t v134;
  int v135;
  void *v136;
  int v137;
  float64x2_t v138;
  _DWORD *v139;
  uint64_t *v140;
  WTF *v141;
  uint64_t v142;
  unsigned int v143;
  WTF **v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  int j;
  uint64_t v151;
  WTF **v152;
  WTF *v153;
  uint64_t v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  uint64_t v161;
  WTF *v162;
  WTF **v163;
  WTF *v164;
  uint64_t v165;
  WTF *v166;
  void *v167;
  WTF *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  WTF *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  float *v184;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  BOOL v190;
  int v191;
  uint64_t v192;
  WTF *v193;
  uint64_t v194;
  WTF *v195;
  uint64_t v196;
  float v197;
  float v198;
  WebCore::GraphicsContext *v199;
  float *v200;
  int v201;
  float v202[2];
  double v203[6];
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float *v207;
  uint64_t v208;
  float64x2_t v209[7];
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 400))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v10 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19655DED4);
    }
    if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::patternTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19655DEF4);
    }
    *(_DWORD *)(v10 + 24) += 2;
    WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v10);
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    v210 = 0;
    memset(v209, 0, sizeof(v209));
    *(_QWORD *)&v211 = 0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v209, 2, (uint64_t *)&v211);
    *(_QWORD *)&v211 = 0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v209[0].f64[1], 2, (uint64_t *)&v211);
    *(_QWORD *)&v211 = 0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v209[1], 2, (uint64_t *)&v211);
    *(_QWORD *)&v211 = 0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v209[1].f64[1], 2, (uint64_t *)&v211);
    v209[2] = 0uLL;
    LODWORD(v209[3].f64[0]) = 16908550;
    *(float64x2_t *)((char *)&v209[3] + 8) = (float64x2_t)constinit_13;
    *(float64x2_t *)((char *)&v209[4] + 8) = (float64x2_t)xmmword_1969FE230;
    *(float64x2_t *)((char *)&v209[5] + 8) = (float64x2_t)xmmword_1969FE240;
    v15 = v210 & 0xFC00;
    LOWORD(v210) = v210 & 0xFC00;
    v16 = v209[1];
    *(float64x2_t *)(a1 + 272) = v209[0];
    *(float64x2_t *)(a1 + 288) = v16;
    v17 = v209[3];
    *(float64x2_t *)(a1 + 304) = v209[2];
    *(float64x2_t *)(a1 + 320) = v17;
    v18 = (__n128)v209[4];
    v19 = v209[5];
    *(float64x2_t *)(a1 + 336) = v209[4];
    *(float64x2_t *)(a1 + 352) = v19;
    v209[6].f64[1] = 0.0;
    v20 = *(_QWORD *)(a1 + 376);
    *(float64_t *)(a1 + 368) = v209[6].f64[0];
    *(_QWORD *)(a1 + 376) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr((unsigned int *)v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)v20));
      if (!v22)
      {
        atomic_store(1u, (unsigned int *)v20);
        v192 = *(unsigned int *)(v20 + 28);
        if ((_DWORD)v192)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v192));
        v193 = *(WTF **)(v20 + 16);
        if (v193)
        {
          *(_QWORD *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 24) = 0;
          WTF::fastFree(v193, v12);
        }
        WTF::fastFree((WTF *)v20, v12);
      }
      v23 = v209[6].f64[1];
      *(_WORD *)(a1 + 384) = v210;
      v209[6].f64[1] = 0.0;
      if (v23 != 0.0)
      {
        do
        {
          v24 = __ldaxr(*(unsigned int **)&v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, *(unsigned int **)&v23));
        if (!v25)
        {
          atomic_store(1u, *(unsigned int **)&v23);
          v194 = *(unsigned int *)(*(_QWORD *)&v23 + 28);
          if ((_DWORD)v194)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(*(_QWORD *)&v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(*(_QWORD *)&v23 + 16) + 32 * v194));
          v195 = *(WTF **)(*(_QWORD *)&v23 + 16);
          if (v195)
          {
            *(_QWORD *)(*(_QWORD *)&v23 + 16) = 0;
            *(_DWORD *)(*(_QWORD *)&v23 + 24) = 0;
            WTF::fastFree(v195, v12);
          }
          WTF::fastFree(*(WTF **)&v23, v12);
        }
      }
    }
    else
    {
      *(_WORD *)(a1 + 384) = v15;
    }
    WebCore::LegacyRenderSVGResourcePattern::collectPatternAttributes((unsigned int *)a1, (__n128 *)(a1 + 272), v13, v14, v18);
    *(_BYTE *)(a1 + 400) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  if (*(_BYTE *)(a1 + 322) == 2)
  {
    result = 0;
    if (v26 <= 0.0 || v27 <= 0.0)
      return result;
  }
  v29 = *a4;
  v30 = *(_QWORD *)(a1 + 392);
  if (v30)
  {
    v31 = *(_DWORD *)(v30 - 8);
    v32 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    for (i = 1; ; ++i)
    {
      v37 = v35;
      v38 = *(_QWORD *)(v30 + 16 * v35);
      if (v38 != -1)
      {
        if (!v38)
          goto LABEL_36;
        if (*(_QWORD *)(v38 + 8) == a2)
          break;
      }
      v35 = (v37 + i) & v31;
    }
    v39 = *(WTF **)(v30 + 16 * v37 + 8);
    if (v39)
    {
      if (*(_QWORD *)v39)
      {
LABEL_24:
        (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v29 + 96))(v29, 1);
        v42 = *((_QWORD *)a3 + 7);
        ++*(_DWORD *)v42;
        if ((a5 & 1) != 0)
        {
          v107 = *a4;
          v108 = *(float *)(*(_QWORD *)(v42 + 16) + 4);
          if (*((float *)*a4 + 84) != v108)
          {
            *((float *)v107 + 84) = v108;
            v107[46] |= 0x100u;
          }
          (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v107 + 88))(v107, v107 + 2);
          v109 = *a4;
          v110 = *(_DWORD **)v39;
          ++*v110;
          v111 = v109[22];
          if ((_DWORD)v111 != -1)
            ((void (*)(float64x2_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v111])(v209, v109 + 6);
          *((_QWORD *)v109 + 3) = v110;
          v109[22] = 2;
          v109[46] |= 1u;
          (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v109 + 88))(v109, v109 + 2);
          v112 = *a4;
          if ((((*((_BYTE *)*a4 + 192) == 0) ^ ((*(_WORD *)(v42 + 4) & 8) >> 3)) & 1) == 0)
          {
            *((_BYTE *)v112 + 192) = (*(_WORD *)(v42 + 4) & 8) >> 3;
            v112[46] |= 2u;
          }
          (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v112 + 88))(v112, v112 + 2);
          if ((a5 & 4) == 0)
            goto LABEL_90;
          v51 = *a4;
          if (*((_BYTE *)*a4 + 341) == 1)
          {
            v52 = 15;
            goto LABEL_89;
          }
          *((_BYTE *)v51 + 341) = 1;
          v52 = 15;
        }
        else
        {
          if ((a5 & 2) != 0)
          {
            if ((*(_WORD *)(v42 + 8) & 0x400) != 0)
            {
              v43 = *(_DWORD **)v39;
              WebCore::LegacyRenderSVGResourceContainer::transformOnNonScalingStroke((unsigned int *)a2, (WTF *)((char *)v39 + 8), v41, v209[0].f64);
              v44 = v209[1];
              *(float64x2_t *)(v43 + 14) = v209[0];
              *(float64x2_t *)(v43 + 18) = v44;
              *(float64x2_t *)(v43 + 22) = v209[2];
            }
            v45 = *a4;
            v46 = *(float *)(*(_QWORD *)(v42 + 24) + 4);
            if (*((float *)*a4 + 84) != v46)
            {
              *((float *)v45 + 84) = v46;
              v45[46] |= 0x100u;
            }
            (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v45 + 88))(v45, v45 + 2);
            v47 = *a4;
            v48 = *(_DWORD **)v39;
            ++**(_DWORD **)v39;
            v49 = v47[44];
            if ((_DWORD)v49 != -1)
              ((void (*)(float64x2_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v49])(v209, v47 + 28);
            *((_QWORD *)v47 + 14) = v48;
            v47[44] = 2;
            v47[46] |= 4u;
            (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v47 + 88))(v47, v47 + 2);
            WebCore::SVGRenderSupport::applyStrokeStyleToContext(*a4, a3, (const WebCore::RenderStyle *)a2, v50);
          }
          if ((~a5 & 6) != 0)
            goto LABEL_90;
          v51 = *a4;
          if (*((_BYTE *)*a4 + 341) == 2)
          {
            v52 = 14;
LABEL_89:
            (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v51 + 88))(v51, v51 + 2);
            (*(void (**)(void))(*(_QWORD *)*a4 + 8 * v52))();
LABEL_90:
            if (*(_DWORD *)v42 == 1)
            {
              WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)v42, v40);
              WTF::fastFree(v166, v167);
            }
            else
            {
              --*(_DWORD *)v42;
            }
            return 1;
          }
          *((_BYTE *)v51 + 341) = 2;
          v52 = 14;
        }
        v51[46] |= 0x200u;
        goto LABEL_89;
      }
    }
  }
LABEL_36:
  v53 = *(_QWORD *)(a1 + 376);
  if (!v53 || !*(_QWORD *)(v53 + 8))
    return 0;
  if ((*(_WORD *)(a1 + 384) & 0x10) != 0)
  {
    result = 0;
    if (*(float *)(a1 + 312) <= 0.0 || *(float *)(a1 + 316) <= 0.0)
      return result;
  }
  v205 = (float64x2_t)xmmword_1969FE230;
  v206 = (float64x2_t)xmmword_1969FE240;
  v204 = (float64x2_t)constinit_13;
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_BYTE *)(v54 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655DF78);
  }
  if (*(_QWORD *)(*(_QWORD *)(v54 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::patternTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655DF98);
  }
  *(_DWORD *)(v54 + 24) += 2;
  *(float *)&v55 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  v57 = v56;
  v59 = v58;
  *(_QWORD *)&v211 = __PAIR64__(v60, v55);
  *((_QWORD *)&v211 + 1) = __PAIR64__(LODWORD(v58), LODWORD(v56));
  v61 = *(double *)(a1 + 272);
  v203[0] = *(double *)(a1 + 280);
  v62 = *(_QWORD *)(a1 + 296);
  v200 = *(float **)(a1 + 288);
  v63 = *(unsigned __int8 *)(a1 + 322);
  v208 = v62;
  v209[0].f64[0] = v61;
  v67 = WebCore::SVGLengthContext::resolveRectangle((WebCore::SVGElement *)v54, v63, (float *)&v211, (WebCore::SVGLengthValue *)v209, (WebCore::SVGLengthValue *)v203, (WebCore::SVGLengthValue *)&v200, (WebCore::SVGLengthValue *)&v208);
  v69 = v68;
  v70 = v66;
  v72 = v71;
  v73 = v71 > 0.0 && v66 > 0.0;
  if (v73)
  {
    LODWORD(v65) = *(_DWORD *)(a1 + 304);
    v74 = *(float *)(a1 + 308);
    v75 = *(float *)(a1 + 312);
    v76 = *(float *)(a1 + 316);
    LOWORD(v203[0]) = *(_WORD *)(a1 + 320);
    if (v75 == 0.0
      || v72 == 0.0
      || v70 == 0.0
      || v76 == 0.0
      || (WebCore::SVGPreserveAspectRatioValue::getCTM((WebCore::SVGPreserveAspectRatioValue *)v203, v65, v74, v75, v76, v70, v72, (uint64_t)v209), (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v209[0], (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v209[1], (float64x2_t)xmmword_1968A14C0))))) & 1) == 0)&& v209[2].f64[0] == 0.0&& v209[2].f64[1] == 0.0)
    {
      if (*(_BYTE *)(a1 + 323) == 2)
      {
        v204 = vmulq_n_f64(v204, v57);
        v205 = vmulq_n_f64(v205, v59);
      }
    }
    else
    {
      v204 = v209[0];
      v205 = v209[1];
      v206 = v209[2];
    }
  }
  if (*(_DWORD *)(v54 + 24) == 2)
  {
    if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v54, v64);
  }
  else
  {
    *(_DWORD *)(v54 + 24) -= 2;
  }
  if (!v73)
    return 0;
  WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem((WebCore::SVGRenderingContext *)a2, (const WebCore::RenderObject *)v64, v203);
  v77 = hypot(v203[0], v203[1]);
  v78 = hypot(v203[2], v203[3]);
  v79 = hypot(*(long double *)(a1 + 328), *(long double *)(a1 + 336));
  v80 = hypot(*(long double *)(a1 + 344), *(long double *)(a1 + 352));
  v81 = v78 * v80;
  v202[0] = v77 * v79;
  v202[1] = v81;
  v82 = v70 * (float)(v77 * v79);
  v83 = v72 * v81;
  v84 = ceilf(v82);
  if (v84 >= 2147500000.0)
  {
    v85 = 0x7FFFFFFF;
  }
  else if (v84 <= -2147500000.0)
  {
    v85 = 0x80000000;
  }
  else
  {
    v85 = (int)v84;
  }
  v86 = ceilf(v83);
  if (v86 >= 2147500000.0)
  {
    v87 = 0x7FFFFFFF;
  }
  else if (v86 <= -2147500000.0)
  {
    v87 = 0x80000000;
  }
  else
  {
    v87 = (int)v86;
  }
  v88 = roundf(v82);
  if (v88 >= 2147500000.0)
  {
    v89 = 0x7FFFFFFF;
  }
  else if (v88 <= -2147500000.0)
  {
    v89 = 0x80000000;
  }
  else
  {
    v89 = (int)v88;
  }
  v90 = roundf(v83);
  if (v90 >= 2147500000.0)
  {
    v91 = 0x7FFFFFFF;
  }
  else if (v90 <= -2147500000.0)
  {
    v91 = 0x80000000;
  }
  else
  {
    v91 = (int)v90;
  }
  v92 = floorf(v82);
  v93 = 2147500000.0;
  if (v92 < 2147500000.0)
  {
    v93 = -2147500000.0;
    if (v92 > -2147500000.0)
      v93 = (float)(int)v92;
  }
  v94 = floorf(v83);
  v95 = 2147500000.0;
  if (v94 < 2147500000.0)
  {
    v95 = -2147500000.0;
    if (v94 > -2147500000.0)
      v95 = (float)(int)v94;
  }
  *(float *)&v208 = v70 - (float)((float)((float)(v82 - v93) * (float)(v85 - v89)) / (float)(v77 * v79));
  *((float *)&v208 + 1) = v72 - (float)((float)((float)(v83 - v95) * (float)(v87 - v91)) / v81);
  v96 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v96 != -1)
  {
    *(_QWORD *)&v209[0].f64[0] = &v200;
    *(_QWORD *)&v211 = v209;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v211, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  WebCore::GraphicsContext::createScaledImageBuffer((uint64_t)v29, (float *)&v208, v202, (uint64_t)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0, 0, (uint64_t *)&v207);
  if (!v207)
    return 0;
  *(double *)&v97 = COERCE_DOUBLE((*(uint64_t (**)(float *))(*(_QWORD *)v207 + 16))(v207));
  v99 = *(double *)&v97;
  v100 = (__n128)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v204, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v205, (float64x2_t)xmmword_1968A14C0)));
  v100.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v100);
  v100.n128_u16[0] = vmaxv_u16((uint16x4_t)v100.n128_u64[0]);
  if ((v100.n128_u8[0] & 1) != 0
    || (v100.n128_u64[0] = *(_QWORD *)&v206.f64[0], v206.f64[0] != 0.0)
    || (v100.n128_u64[0] = *(_QWORD *)&v206.f64[1], v206.f64[1] != 0.0))
  {
    (*(void (**)(uint64_t, float64x2_t *, __n128))(*(_QWORD *)v97 + 656))(v97, &v204, v100);
  }
  v197 = v69;
  v198 = v67;
  if (*(_BYTE *)(a1 + 323) == 2)
  {
    v101 = v204.f64[1];
    v102 = v204.f64[0];
    v103 = v205.f64[1];
    v104 = v205.f64[0];
    v105 = v206.f64[1];
    v106 = v206.f64[0];
  }
  else
  {
    v103 = 1.0;
    v105 = 0.0;
    v106 = 0.0;
    v104 = 0.0;
    v101 = 0.0;
    v102 = 1.0;
  }
  v113 = *(_QWORD *)(a1 + 376);
  if (v113)
    v114 = *(_QWORD *)(v113 + 8);
  else
    v114 = 0;
  v115 = *(_DWORD *)(v114 + 24);
  *(_DWORD *)(v114 + 24) = v115 + 2;
  v199 = a3;
  if (v115)
  {
    *(_DWORD *)(v114 + 24) = v115;
  }
  else if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v114, v98);
  }
  v116 = *(_QWORD *)(v114 + 80);
  if (!v116)
    goto LABEL_104;
  while ((*(_WORD *)(v116 + 28) & 0x20) == 0)
  {
    v116 = *(_QWORD *)(v116 + 56);
    if (!v116)
      goto LABEL_104;
  }
LABEL_137:
  v154 = *(_QWORD *)(v116 + 64);
  if ((v154 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_143;
  if ((*(_BYTE *)((v154 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19655DFD0);
  }
  if ((*(_BYTE *)((v154 & 0xFFFFFFFFFFFFLL) + 0x14) & 0xF8) != 0)
  {
    v184 = v207;
    v207 = 0;
    if (!v184)
      return 0;
    v185 = *((_QWORD *)v184 + 1);
    if (__ldaxr((unsigned __int8 *)v185))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v185))
    {
      goto LABEL_223;
    }
    MEMORY[0x19AEA534C](v185);
LABEL_223:
    v187 = *(_QWORD *)(v185 + 8);
    v188 = v187 - 1;
    *(_QWORD *)(v185 + 8) = v187 - 1;
    if (v187 == 1)
    {
      v196 = *(_QWORD *)(v185 + 16);
      v189 = *(_QWORD *)(v185 + 24);
      *(_QWORD *)(v185 + 24) = 0;
      v190 = v196 != 0;
    }
    else
    {
      v189 = 0;
      v190 = 1;
    }
    v191 = __ldxr((unsigned __int8 *)v185);
    if (v191 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v185))
      {
LABEL_230:
        if (!v188)
        {
          if (v189)
            (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
          if (!v190)
            WTF::fastFree((WTF *)v185, v98);
        }
        return 0;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v185);
    goto LABEL_230;
  }
  v209[0] = (float64x2_t)xmmword_1969FCA90;
  LOWORD(v209[1].f64[0]) = 8;
  HIDWORD(v209[1].f64[0]) = 2;
  memset(&v209[1].f64[1], 0, 33);
  v209[4] = 0uLL;
  v209[5].f64[0] = v99;
  {
    v156 = *((double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation + 1);
    v155 = *(double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation;
    v158 = *(double *)&qword_1EE2F9610;
    v157 = unk_1EE2F9618;
    v159 = *((double *)&xmmword_1EE2F9620 + 1);
    v160 = *(double *)&xmmword_1EE2F9620;
  }
  else
  {
    WebCore::currentContentTransformation(void)::s_currentContentTransformation = constinit_10;
    *(_OWORD *)&qword_1EE2F9610 = unk_1969FE138;
    xmmword_1EE2F9620 = xmmword_1969FE148;
    v157 = 1.0;
    v159 = 0.0;
    v160 = 0.0;
    v158 = 0.0;
    v156 = 0.0;
    v155 = 1.0;
  }
  v211 = WebCore::currentContentTransformation(void)::s_currentContentTransformation;
  v212 = *(_OWORD *)&qword_1EE2F9610;
  v213 = xmmword_1EE2F9620;
  *(double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation = v104 * v156 + v155 * v102;
  *((double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation + 1) = v103 * v156
                                                                                                + v155 * v101;
  *(double *)&qword_1EE2F9610 = v104 * v157 + v158 * v102;
  unk_1EE2F9618 = v103 * v157 + v158 * v101;
  *(double *)&xmmword_1EE2F9620 = v106 + v104 * v159 + v160 * v102;
  *((double *)&xmmword_1EE2F9620 + 1) = v105 + v103 * v159 + v160 * v101;
  v200 = 0;
  (*(void (**)(uint64_t, float64x2_t *, float **))(*(_QWORD *)(v154 & 0xFFFFFFFFFFFFLL) + 680))(v154 & 0xFFFFFFFFFFFFLL, v209, &v200);
  WebCore::currentContentTransformation(void)::s_currentContentTransformation = v211;
  *(_OWORD *)&qword_1EE2F9610 = v212;
  xmmword_1EE2F9620 = v213;
LABEL_143:
  while (1)
  {
    v116 = *(_QWORD *)(v116 + 56);
    if (!v116)
      break;
    if ((*(_WORD *)(v116 + 28) & 0x20) != 0)
      goto LABEL_137;
  }
LABEL_104:
  v117 = v207;
  if (!v207)
    return 0;
  v118 = v207[4];
  v119 = v207[5];
  v120 = WTF::fastMalloc((WTF *)0x38);
  v39 = (WTF *)v120;
  v121 = (float)(v70 / v118);
  *(double *)(v120 + 8) = v121;
  v122 = (float64x2_t *)(v120 + 8);
  *(_QWORD *)v120 = 0;
  v123 = v198 + 0.0;
  v124 = v197 + 0.0;
  *(double *)(v120 + 40) = v123;
  *(double *)(v120 + 48) = v124;
  v125 = (float)(v72 / v119);
  v126 = v121 * 0.0;
  v127 = v125 * 0.0;
  *(double *)(v120 + 16) = v121 * 0.0;
  *(double *)(v120 + 24) = v125 * 0.0;
  *(double *)(v120 + 32) = v125;
  v129 = *(double *)(a1 + 328);
  v128 = *(double *)(a1 + 336);
  v130 = *(double *)(a1 + 344);
  v131 = *(float64x2_t *)(a1 + 352);
  v132 = *(double *)(a1 + 368);
  v133.f64[0] = v129;
  v133.f64[1] = v130;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v133, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v131, (float64x2_t)xmmword_1968A14B0))))) & 1) != 0|| v128 != 0.0|| v132 != 0.0)
  {
    *(double *)(v120 + 8) = v126 * v130 + v121 * v129;
    *(double *)(v120 + 16) = v126 * v131.f64[0] + v121 * v128;
    *(double *)(v120 + 24) = v130 * v125 + v127 * v129;
    *(double *)(v120 + 32) = v125 * v131.f64[0] + v127 * v128;
    *(double *)(v120 + 40) = v131.f64[1] + v124 * v130 + v123 * v129;
    *(double *)(v120 + 48) = v132 + v124 * v131.f64[0] + v123 * v128;
  }
  v200 = v117;
  v201 = 1;
  LOBYTE(v211) = 0;
  DWORD2(v211) = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)v209, &v211, (uint64_t *)&v200);
  DWORD2(v211) = 1;
  LOBYTE(v212) = 0;
  LOBYTE(v213) = 0;
  *(float64x2_t *)((char *)v209 + 6) = *v122;
  *(float64x2_t *)((char *)&v209[1] + 6) = v122[1];
  *(float64x2_t *)((char *)&v209[2] + 6) = v122[2];
  v134 = WTF::fastMalloc((WTF *)0x68);
  *(_BYTE *)(v134 + 8) = 0;
  *(_DWORD *)v134 = 1;
  *(_DWORD *)(v134 + 16) = -1;
  v135 = DWORD2(v211);
  if (DWORD2(v211) != -1)
  {
    ((void (*)(uint64_t *, uint64_t, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[DWORD2(v211)])(&v208, v134 + 8, &v211);
    *(_DWORD *)(v134 + 16) = v135;
  }
  *(_BYTE *)(v134 + 24) = 0;
  v136 = (void *)(v134 + 24);
  *(_BYTE *)(v134 + 40) = 0;
  if ((_BYTE)v213)
  {
    *(_DWORD *)(v134 + 32) = -1;
    v137 = DWORD2(v212);
    if (DWORD2(v212) != -1)
    {
      ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[DWORD2(v212)])(&v208);
      *(_DWORD *)(v134 + 32) = v137;
    }
    *(_BYTE *)(v134 + 40) = 1;
  }
  *(_WORD *)(v134 + 48) = 257;
  v138 = v209[1];
  *(float64x2_t *)(v134 + 50) = v209[0];
  *(float64x2_t *)(v134 + 66) = v138;
  *(float64x2_t *)(v134 + 82) = v209[2];
  *(float64_t *)(v134 + 96) = *(float64_t *)((char *)&v209[2].f64[1] + 6);
  v139 = *(_DWORD **)v39;
  *(_QWORD *)v39 = v134;
  if (v139)
  {
    if (*v139 == 1)
    {
      if (*((_BYTE *)v139 + 40))
      {
        v177 = v139[8];
        if ((_DWORD)v177 != -1)
          ((void (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v177])(&v208, v139 + 6);
        v139[8] = -1;
      }
      v178 = v139[4];
      if ((_DWORD)v178 != -1)
        ((void (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v178])(&v208, v139 + 2);
      v139[4] = -1;
      WTF::fastFree((WTF *)v139, v136);
    }
    else
    {
      --*v139;
    }
  }
  if ((_BYTE)v213)
  {
    if (DWORD2(v212) != -1)
      ((void (*)(float64x2_t *, __int128 *))off_1E344ECD0[DWORD2(v212)])(v209, &v212);
    DWORD2(v212) = -1;
  }
  if (DWORD2(v211) != -1)
    ((void (*)(float64x2_t *, __int128 *))off_1E344ECD0[DWORD2(v211)])(v209, &v211);
  DWORD2(v211) = -1;
  if (v201 != -1)
    ((void (*)(float64x2_t *, float **))off_1E344ECD0[v201])(v209, &v200);
  v140 = (uint64_t *)(a1 + 392);
  v141 = *(WTF **)(a2 + 8);
  if (!v141)
  {
    v141 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v141 = 1;
    *((_QWORD *)v141 + 1) = a2;
    v179 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v141;
    if (v179)
    {
      if (*(_DWORD *)v179 == 1)
      {
        WTF::fastFree(v179, v136);
        v141 = *(WTF **)(a2 + 8);
      }
      else
      {
        --*(_DWORD *)v179;
      }
    }
  }
  ++*(_DWORD *)v141;
  v142 = *v140;
  if (*v140
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::rehash(v140, 8u, 0), (v142 = *v140) != 0))
  {
    v143 = *(_DWORD *)(v142 - 8);
  }
  else
  {
    v143 = 0;
  }
  v144 = 0;
  v145 = *((_QWORD *)v141 + 1);
  v146 = (~(v145 << 32) + v145) ^ ((unint64_t)(~(v145 << 32) + v145) >> 22);
  v147 = 9 * ((v146 + ~(v146 << 13)) ^ ((v146 + ~(v146 << 13)) >> 8));
  v148 = (v147 ^ (v147 >> 15)) + ~((v147 ^ (v147 >> 15)) << 27);
  v149 = (v148 >> 31) ^ v148;
  for (j = 1; ; ++j)
  {
    v151 = v149 & v143;
    v152 = (WTF **)(v142 + 16 * v151);
    v153 = *v152;
    if (*v152 != (WTF *)-1)
      break;
    v144 = (WTF **)(v142 + 16 * v151);
LABEL_136:
    v149 = j + v151;
  }
  if (!v153)
  {
    if (v144)
    {
      *v144 = 0;
      v144[1] = 0;
      --*(_DWORD *)(*v140 - 16);
      *v144 = v141;
    }
    else
    {
      *v152 = v141;
      v144 = (WTF **)(v142 + 16 * v151);
    }
    v168 = v144[1];
    v144[1] = v39;
    a3 = v199;
    if (v168)
    {
      v169 = *(_QWORD *)v168;
      *(_QWORD *)v168 = 0;
      if (v169)
      {
        if (*(_DWORD *)v169 == 1)
        {
          if (*(_BYTE *)(v169 + 40))
          {
            v180 = *(unsigned int *)(v169 + 32);
            if ((_DWORD)v180 != -1)
              ((void (*)(float64x2_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v180])(v209, v169 + 24);
            *(_DWORD *)(v169 + 32) = -1;
          }
          v181 = *(unsigned int *)(v169 + 16);
          if ((_DWORD)v181 != -1)
            ((void (*)(float64x2_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v181])(v209, v169 + 8);
          *(_DWORD *)(v169 + 16) = -1;
          WTF::fastFree((WTF *)v169, v136);
        }
        else
        {
          --*(_DWORD *)v169;
        }
      }
      WTF::fastFree(v168, v136);
    }
    v170 = *v140;
    if (*v140)
      v171 = *(_DWORD *)(v170 - 12) + 1;
    else
      v171 = 1;
    *(_DWORD *)(v170 - 12) = v171;
    v172 = *v140;
    if (*v140)
      v173 = *(_DWORD *)(v172 - 12);
    else
      v173 = 0;
    v174 = (*(_DWORD *)(v172 - 16) + v173);
    v175 = *(unsigned int *)(v172 - 4);
    if (v175 > 0x400)
    {
      if (v175 > 2 * v174)
      {
LABEL_193:
        v39 = v144[1];
        if (!v39)
          return 0;
        goto LABEL_194;
      }
    }
    else
    {
      if (3 * v175 > 4 * v174)
        goto LABEL_193;
      if (!(_DWORD)v175)
      {
        v176 = 8;
        goto LABEL_192;
      }
    }
    v176 = (_DWORD)v175 << (6 * *(_DWORD *)(v172 - 12) >= (2 * v175));
LABEL_192:
    v144 = WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::rehash(v140, v176, v144);
    goto LABEL_193;
  }
  if (*((_QWORD *)v153 + 1) != v145)
    goto LABEL_136;
  v161 = v142 + 16 * v151;
  v164 = *(WTF **)(v161 + 8);
  v163 = (WTF **)(v161 + 8);
  v162 = v164;
  *v163 = v39;
  a3 = v199;
  if (v164)
  {
    v165 = *(_QWORD *)v162;
    *(_QWORD *)v162 = 0;
    if (v165)
    {
      if (*(_DWORD *)v165 == 1)
      {
        if (*(_BYTE *)(v165 + 40))
        {
          v182 = *(unsigned int *)(v165 + 32);
          if ((_DWORD)v182 != -1)
            ((void (*)(float64x2_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v182])(v209, v165 + 24);
          *(_DWORD *)(v165 + 32) = -1;
        }
        v183 = *(unsigned int *)(v165 + 16);
        if ((_DWORD)v183 != -1)
          ((void (*)(float64x2_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v183])(v209, v165 + 8);
        *(_DWORD *)(v165 + 16) = -1;
        WTF::fastFree((WTF *)v165, v136);
      }
      else
      {
        --*(_DWORD *)v165;
      }
    }
    WTF::fastFree(v162, v136);
    v39 = *v163;
  }
  if (*(_DWORD *)v141 != 1)
  {
    --*(_DWORD *)v141;
    if (!v39)
      return 0;
    goto LABEL_194;
  }
  WTF::fastFree(v141, v136);
  if (v39)
  {
LABEL_194:
    v29 = *a4;
    goto LABEL_24;
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourcePattern::applyResource(uint64_t a1, uint64_t a2, WebCore::GraphicsContext *a3, unsigned int **a4, int a5)
{
  return WebCore::LegacyRenderSVGResourcePattern::applyResource(a1 - 216, a2, a3, a4, a5);
}

uint64_t WebCore::LegacyRenderSVGResourcePattern::postApplyResource(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5, uint64_t a6)
{
  WebCore::LegacyRenderSVGResource::fillAndStrokePathOrShape(a1 + 216, *a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 104))(*a3, 1);
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourcePattern::postApplyResource(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5, uint64_t a6)
{
  WebCore::LegacyRenderSVGResource::fillAndStrokePathOrShape(a1, *a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 104))(*a3, 1);
}

uint64_t WebCore::LegacyRenderSVGResourceRadialGradient::operator new(uint64_t this)
{
  if (this == 464)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::LegacyRenderSVGResourceRadialGradient::LegacyRenderSVGResourceRadialGradient(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  WebCore::LegacyRenderSVGResourceContainer::LegacyRenderSVGResourceContainer(a1, 102, a2, a3);
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_BYTE *)(v4 + 296) = 1;
  *(_QWORD *)v4 = off_1E344E1D8;
  *(_QWORD *)(v4 + 216) = &unk_1E344E590;
  WebCore::RadialGradientAttributes::RadialGradientAttributes((WebCore::RadialGradientAttributes *)(v4 + 304));
  return a1;
}

void WebCore::RadialGradientAttributes::~RadialGradientAttributes(WebCore::RadialGradientAttributes *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  WTF *v11;
  WTF *v12;

  v3 = *((unsigned int *)this + 15);
  v4 = (WTF *)*((_QWORD *)this + 6);
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v11 = v5;
        v12 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v11;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v11;
          v4 = v12;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = (WTF *)*((_QWORD *)this + 6);
  }
  if ((WebCore::RadialGradientAttributes *)((char *)this + 64) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
}

void WebCore::LegacyRenderSVGResourceRadialGradient::~LegacyRenderSVGResourceRadialGradient(WebCore::LegacyRenderSVGResourceRadialGradient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  WTF *v11;
  WTF *v12;

  v3 = *((unsigned int *)this + 91);
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v11 = v5;
        v12 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v11;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v11;
          v4 = v12;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = (WTF *)*((_QWORD *)this + 44);
  }
  if ((WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  void *v11;
  WTF *v12;
  WTF *v13;

  v3 = *((unsigned int *)this + 91);
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v12 = v5;
        v13 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v12;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v12;
          v4 = v13;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = (WTF *)*((_QWORD *)this + 44);
  }
  if ((WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 27) = 0u;
    *((_OWORD *)this + 28) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 26) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v11);
  }
}

void `non-virtual thunk to'WebCore::LegacyRenderSVGResourceRadialGradient::~LegacyRenderSVGResourceRadialGradient(WebCore::LegacyRenderSVGResourceRadialGradient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  WTF *v11;
  WTF *v12;

  v3 = *((unsigned int *)this + 37);
  v4 = (WTF *)*((_QWORD *)this + 17);
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v11 = v5;
        v12 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v11;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v11;
          v4 = v12;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = (WTF *)*((_QWORD *)this + 17);
  }
  if ((WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this + 152) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient((WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this - 216), a2);
}

{
  WebCore::LegacyRenderSVGResourceGradient *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  void *v12;
  WTF *v13;
  WTF *v14;

  v3 = (WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this - 216);
  v4 = *((unsigned int *)this + 37);
  v5 = (WTF *)*((_QWORD *)this + 17);
  if ((_DWORD)v4)
  {
    v6 = (WTF *)((char *)v5 + 16 * v4);
    do
    {
      v7 = *((_QWORD *)v5 + 1);
      if ((v7 & 0x8000000000000) != 0)
      {
        v13 = v6;
        v14 = v5;
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(v8);
          v10 = --v9 == 0;
        }
        while (__stlxr(v9, v8));
        v6 = v13;
        if (v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
          v6 = v13;
          v5 = v14;
        }
      }
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != v6);
    v5 = (WTF *)*((_QWORD *)this + 17);
  }
  if ((WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this + 152) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v5, a2);
  }
  WebCore::LegacyRenderSVGResourceGradient::~LegacyRenderSVGResourceGradient(v3, a2);
  if (*((_DWORD *)this - 50))
  {
    *((_OWORD *)v3 + 27) = 0u;
    *((_OWORD *)v3 + 28) = 0u;
    *((_OWORD *)v3 + 25) = 0u;
    *((_OWORD *)v3 + 26) = 0u;
    *((_OWORD *)v3 + 23) = 0u;
    *((_OWORD *)v3 + 24) = 0u;
    *((_OWORD *)v3 + 21) = 0u;
    *((_OWORD *)v3 + 22) = 0u;
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 20) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v3, v12);
  }
}

uint64_t WebCore::LegacyRenderSVGResourceRadialGradient::collectGradientAttributes(WebCore::LegacyRenderSVGResourceRadialGradient *this)
{
  void *v2;
  WebCore::SVGRadialGradientElement *v3;
  uint64_t v4;
  WTF::String *v5;
  __n128 v6;
  uint64_t v7;
  _OWORD v9[10];

  WebCore::RadialGradientAttributes::RadialGradientAttributes((WebCore::RadialGradientAttributes *)v9);
  WebCore::RadialGradientAttributes::operator=((uint64_t)this + 304, v9);
  WebCore::RadialGradientAttributes::~RadialGradientAttributes((WebCore::RadialGradientAttributes *)v9, v2);
  v3 = (WebCore::SVGRadialGradientElement *)WebCore::LegacyRenderSVGResourceRadialGradient::radialGradientElement(this);
  *((_DWORD *)v3 + 6) += 2;
  *(_QWORD *)&v9[0] = v3;
  v7 = WebCore::SVGRadialGradientElement::collectGradientAttributes(v3, (WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this + 304), v6, v4, v5);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v9);
  return v7;
}

__n128 WebCore::RadialGradientAttributes::operator=(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v4)
  {
    v20 = a1;
    v18 = a2;
    WTF::VectorTypeOperations<WebCore::GradientColorStop>::destruct(*(_QWORD **)(a1 + 48), (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v4));
    a2 = v18;
    a1 = v20;
  }
  v5 = *(WTF **)(a1 + 48);
  v6 = a1 + 64;
  if (v5 != (WTF *)(a1 + 64))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      v21 = a1;
      v17 = a1 + 64;
      v19 = a2;
      WTF::fastFree(v5, a2);
      v6 = v17;
      a2 = v19;
      a1 = v21;
    }
    *(_QWORD *)(a1 + 48) = v6;
  }
  v7 = *((_QWORD *)a2 + 6);
  if ((_OWORD *)v7 == a2 + 4)
  {
    v8 = *((unsigned int *)a2 + 15);
    if ((_DWORD)v8)
    {
      v9 = (_QWORD *)(a1 + 72);
      v10 = 16 * v8;
      v11 = (_QWORD *)(v7 + 8);
      do
      {
        *((_DWORD *)v9 - 2) = *((_DWORD *)v11 - 2);
        *v9 = 0;
        if (*v11)
        {
          *v9 = *v11;
          *v11 = 0;
        }
        v9 += 2;
        v11 += 2;
        v10 -= 16;
      }
      while (v10);
    }
    v12 = *((_DWORD *)a2 + 14);
  }
  else
  {
    *((_QWORD *)a2 + 6) = a2 + 4;
    *(_QWORD *)(a1 + 48) = v7;
    v12 = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = 2;
  }
  *(_DWORD *)(a1 + 56) = v12;
  v13 = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 60) = v13;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  result = *(__n128 *)((char *)a2 + 108);
  v15 = *(_OWORD *)((char *)a2 + 124);
  v16 = *(_OWORD *)((char *)a2 + 140);
  *(_BYTE *)(a1 + 156) = *((_BYTE *)a2 + 156);
  *(_OWORD *)(a1 + 140) = v16;
  *(_OWORD *)(a1 + 124) = v15;
  *(__n128 *)(a1 + 108) = result;
  return result;
}

float WebCore::LegacyRenderSVGResourceRadialGradient::centerPoint(WebCore::LegacyRenderSVGResourceRadialGradient *this, const WebCore::RadialGradientAttributes *a2)
{
  uint64_t v3;
  int v4;
  float v5;
  float v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = WebCore::LegacyRenderSVGResourceRadialGradient::radialGradientElement(this);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = (*((unsigned __int8 *)a2 + 104) >> 2) & 3;
  v9 = *(_QWORD *)((char *)a2 + 108);
  v10 = v3;
  v8 = *(_QWORD *)((char *)a2 + 116);
  WebCore::SVGLengthContext::resolvePoint((uint64_t *)v3, v4, (WebCore::SVGLengthValue *)&v9, (WebCore::SVGLengthValue *)&v8);
  v6 = v5;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v10);
  return v6;
}

float WebCore::LegacyRenderSVGResourceRadialGradient::focalPoint(WebCore::LegacyRenderSVGResourceRadialGradient *this, const WebCore::RadialGradientAttributes *a2)
{
  uint64_t v3;
  int v4;
  float v5;
  float v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = WebCore::LegacyRenderSVGResourceRadialGradient::radialGradientElement(this);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = (*((unsigned __int8 *)a2 + 104) >> 2) & 3;
  v9 = *(_QWORD *)((char *)a2 + 132);
  v10 = v3;
  v8 = *(_QWORD *)((char *)a2 + 140);
  WebCore::SVGLengthContext::resolvePoint((uint64_t *)v3, v4, (WebCore::SVGLengthValue *)&v9, (WebCore::SVGLengthValue *)&v8);
  v6 = v5;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v10);
  return v6;
}

float WebCore::LegacyRenderSVGResourceRadialGradient::radius(WebCore::LegacyRenderSVGResourceRadialGradient *this, const WebCore::RadialGradientAttributes *a2)
{
  WebCore::SVGElement *v3;
  int v4;
  float v5;
  uint64_t v7;
  WebCore::SVGElement *v8;

  v3 = (WebCore::SVGElement *)WebCore::LegacyRenderSVGResourceRadialGradient::radialGradientElement(this);
  *((_DWORD *)v3 + 6) += 2;
  v4 = (*((unsigned __int8 *)a2 + 104) >> 2) & 3;
  v7 = *(_QWORD *)((char *)a2 + 124);
  v8 = v3;
  v5 = WebCore::SVGLengthContext::resolveLength(v3, v4, (WebCore::SVGLengthValue *)&v7);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v8);
  return v5;
}

float WebCore::LegacyRenderSVGResourceRadialGradient::focalRadius(WebCore::LegacyRenderSVGResourceRadialGradient *this, const WebCore::RadialGradientAttributes *a2)
{
  WebCore::SVGElement *v3;
  int v4;
  float v5;
  uint64_t v7;
  WebCore::SVGElement *v8;

  v3 = (WebCore::SVGElement *)WebCore::LegacyRenderSVGResourceRadialGradient::radialGradientElement(this);
  *((_DWORD *)v3 + 6) += 2;
  v4 = (*((unsigned __int8 *)a2 + 104) >> 2) & 3;
  v7 = *(_QWORD *)((char *)a2 + 148);
  v8 = v3;
  v5 = WebCore::SVGLengthContext::resolveLength(v3, v4, (WebCore::SVGLengthValue *)&v7);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v8);
  return v5;
}

void WebCore::LegacyRenderSVGResourceRadialGradient::buildGradient(WebCore::LegacyRenderSVGResourceRadialGradient *this@<X0>, const WebCore::RenderStyle *a2@<X1>, uint64_t *a3@<X8>)
{
  const WebCore::RadialGradientAttributes *v6;
  int v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v14[7];
  __int128 v15;
  float v16;
  float v17;
  uint64_t v18;

  v6 = (WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this + 304);
  LODWORD(v15) = WebCore::LegacyRenderSVGResourceRadialGradient::focalPoint(this, (WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this + 304));
  DWORD1(v15) = v7;
  DWORD2(v15) = WebCore::LegacyRenderSVGResourceRadialGradient::centerPoint(this, v6);
  HIDWORD(v15) = v8;
  v16 = WebCore::LegacyRenderSVGResourceRadialGradient::focalRadius(this, v6);
  v17 = WebCore::LegacyRenderSVGResourceRadialGradient::radius(this, v6);
  v18 = 0x13F800000;
  v9 = *((_BYTE *)this + 408) & 3;
  if (v9 == 3)
    v10 = 2;
  else
    v10 = v9 == 2;
  WebCore::LegacyRenderSVGResourceGradient::stopsByApplyingColorFilter((WebCore::LegacyRenderSVGResourceGradient *)v14, (WebCore::LegacyRenderSVGResourceRadialGradient *)((char *)this + 352), a2);
  v11 = WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = WTF::fastMalloc((WTF *)0xC8);
  *a3 = WebCore::Gradient::Gradient(v12, &v15, 0x600000000, 1, v10, (uint64_t *)v14, v11, 1);
  WebCore::GradientColorStops::~GradientColorStops(v14, v13);
}

_QWORD *WebCore::LegacyRenderSVGResourceSolidColor::LegacyRenderSVGResourceSolidColor(_QWORD *this)
{
  *this = off_1E344E5E0;
  this[1] = 0;
  return this;
}

void WebCore::LegacyRenderSVGResourceSolidColor::~LegacyRenderSVGResourceSolidColor(WebCore::LegacyRenderSVGResourceSolidColor *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  WTF *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;

  v2 = this;
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = --v5 == 0;
    }
    while (__stlxr(v5, v4));
    v2 = this;
    if (v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      v2 = this;
    }
  }
  WTF::fastFree(v2, a2);
}

uint64_t WebCore::LegacyRenderSVGResourceSolidColor::applyResource(uint64_t a1, const WebCore::RenderStyle *a2, WebCore::GraphicsContext *a3, unsigned int **a4, char a5)
{
  uint64_t v10;
  int v11;
  unsigned int *v12;
  float v13;
  WebCore::GraphicsContext *v14;
  void *v15;
  unsigned int *v16;
  __int16 v17;
  _BOOL4 v18;
  unsigned int v19;
  unsigned int *v21;
  float v22;
  WebCore::GraphicsContext *v23;
  void *v24;
  const WebCore::RenderElement *v25;
  unsigned int *v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;

  v10 = *((_QWORD *)a3 + 7);
  if ((a5 & 1) != 0)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40)
                                                        + 8)
                                            + 1944)
                                + 248)
                    + 1148);
    v12 = *a4;
    if ((v11 & 0x10) != 0)
    {
      if (*((float *)v12 + 84) == 1.0)
        goto LABEL_6;
      v12[84] = 1065353216;
    }
    else
    {
      v13 = *(float *)(*(_QWORD *)(v10 + 16) + 4);
      if (*((float *)v12 + 84) == v13)
      {
LABEL_6:
        (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v12 + 88))(v12, v12 + 2);
        v14 = (WebCore::GraphicsContext *)*a4;
        WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)a3, (const WebCore::Color *)(a1 + 8), &v36);
        WebCore::GraphicsContext::setFillColor(v14, (const WebCore::Color *)&v36);
        if ((v36 & 0x8000000000000) != 0)
        {
          v30 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v15);
          }
        }
        v16 = *a4;
        v17 = *(_WORD *)(v10 + 4);
        v18 = *((_BYTE *)*a4 + 192) == 0;
        if ((v11 & 0x10) != 0)
        {
          v29 = v17 & 4;
          if (((v18 ^ (v29 >> 2)) & 1) != 0)
            goto LABEL_9;
          v28 = v29 >> 2;
        }
        else
        {
          v19 = v17 & 8;
          if (((v18 ^ (v19 >> 3)) & 1) != 0)
          {
LABEL_9:
            (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v16 + 88))(v16, v16 + 2);
            if ((a5 & 4) == 0)
              return 1;
            v26 = *a4;
            if (*((_BYTE *)*a4 + 341) == 1)
            {
LABEL_19:
              (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v26 + 88))(v26, v26 + 2);
              return 1;
            }
            v27 = 1;
LABEL_27:
            *((_BYTE *)v26 + 341) = v27;
            v26[46] |= 0x200u;
            goto LABEL_19;
          }
          v28 = v19 >> 3;
        }
        *((_BYTE *)v16 + 192) = v28;
        v16[46] |= 2u;
        goto LABEL_9;
      }
      *((float *)v12 + 84) = v13;
    }
    v12[46] |= 0x100u;
    goto LABEL_6;
  }
  if ((a5 & 2) != 0)
  {
    v21 = *a4;
    v22 = *(float *)(*(_QWORD *)(v10 + 24) + 4);
    if (*((float *)*a4 + 84) != v22)
    {
      *((float *)v21 + 84) = v22;
      v21[46] |= 0x100u;
    }
    (*(void (**)(unsigned int *, unsigned int *))(*(_QWORD *)v21 + 88))(v21, v21 + 2);
    v23 = (WebCore::GraphicsContext *)*a4;
    WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)a3, (const WebCore::Color *)(a1 + 8), &v36);
    WebCore::GraphicsContext::setStrokeColor(v23, (const WebCore::Color *)&v36);
    if ((v36 & 0x8000000000000) != 0)
    {
      v33 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v24);
      }
    }
    WebCore::SVGRenderSupport::applyStrokeStyleToContext(*a4, a3, a2, v25);
    if ((a5 & 4) != 0)
    {
      v26 = *a4;
      if (*((_BYTE *)*a4 + 341) == 2)
        goto LABEL_19;
      v27 = 2;
      goto LABEL_27;
    }
  }
  return 1;
}

uint64_t WebCore::LegacyRenderSVGResourceSolidColor::postApplyResource(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5, uint64_t a6)
{
  return WebCore::LegacyRenderSVGResource::fillAndStrokePathOrShape(a1, *a3, a4, a5, a6);
}

float WebCore::LegacyRenderSVGRoot::calculateIntrinsicSize(WebCore::LegacyRenderSVGRoot *this)
{
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  float v7;
  float v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned __int8 v12;
  char v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655EF20);
  }
  WebCore::SVGSVGElement::intrinsicWidth((uint64_t *)v2, (uint64_t)&v11);
  v3 = v12;
  switch(v12)
  {
    case 4u:
      if (v13)
        v4 = *(float *)&v11;
      else
        v4 = (float)(int)v11;
      break;
    case 3u:
      v7 = *(float *)&v11;
      if (!v13)
        v7 = (float)(int)v11;
      v4 = (float)(v7 * 0.0) / 100.0;
      break;
    case 0xBu:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v11, 0.0);
      v4 = v8;
      break;
    default:
      v4 = 0.0;
      break;
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19655EF40);
  }
  WebCore::SVGSVGElement::intrinsicHeight((uint64_t *)v5, (uint64_t)&v9);
  if (v10 != 4 && v10 == 11)
  {
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v9, 0.0);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  if (v3 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
  }
  return v4;
}

uint64_t WebCore::LegacyRenderSVGRoot::LegacyRenderSVGRoot(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int32x4_t v5;
  float v6;
  double v7;
  unsigned int v8;
  double v9;
  uint64_t v10;

  v4 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 103, a2, a3, 12, 8195);
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_QWORD *)(v4 + 200) = 0x258000004B00;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_DWORD *)(v4 + 20) |= 2u;
  *(_QWORD *)v4 = off_1E344E630;
  *(_QWORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v4 + 244) = v5;
  *(_QWORD *)(v4 + 268) = 0;
  *(_QWORD *)(v4 + 260) = 0;
  *(int32x4_t *)(v4 + 276) = v5;
  *(_OWORD *)(v4 + 312) = xmmword_1969FE230;
  *(_OWORD *)(v4 + 328) = xmmword_1969FE240;
  *(_OWORD *)(v4 + 296) = constinit_13;
  *(_OWORD *)(v4 + 344) = constinit_13;
  *(_OWORD *)(v4 + 360) = xmmword_1969FE230;
  *(_OWORD *)(v4 + 376) = xmmword_1969FE240;
  *(_QWORD *)(v4 + 392) = 0;
  *(_QWORD *)(v4 + 400) = 0;
  *(_BYTE *)(v4 + 408) = *(_BYTE *)(v4 + 408) & 0xF8 | 2;
  v7 = WebCore::LegacyRenderSVGRoot::calculateIntrinsicSize((WebCore::LegacyRenderSVGRoot *)v4) * 64.0;
  if (v7 >= 2147483650.0)
  {
    v8 = 0x7FFFFFFF;
  }
  else if (v7 > -2147483650.0)
  {
    v8 = (int)v7;
  }
  else
  {
    v8 = 0x80000000;
  }
  v9 = v6 * 64.0;
  if (v9 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFFLL;
  }
  else if (v9 <= -2147483650.0)
  {
    v10 = 0x80000000;
  }
  else
  {
    v10 = (int)v9;
  }
  if (!v8)
  {
    v8 = 19200;
    if ((_DWORD)v10)
      goto LABEL_10;
LABEL_12:
    v10 = 9600;
    goto LABEL_10;
  }
  if (!(_DWORD)v10)
    goto LABEL_12;
LABEL_10:
  *(_QWORD *)(a1 + 200) = v8 | (unint64_t)(v10 << 32);
  return a1;
}

void WebCore::LegacyRenderSVGRoot::~LegacyRenderSVGRoot(WebCore::LegacyRenderSVGRoot *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  WTF *v7;

  v3 = *((_QWORD *)this + 49);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)*((_QWORD *)this + 49);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *(_QWORD *)this = off_1E34201A0;
  v7 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  WTF *v7;
  void *v8;

  v3 = *((_QWORD *)this + 49);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)*((_QWORD *)this + 49);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *(_QWORD *)this = off_1E34201A0;
  v7 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v8);
  }
}

uint64_t WebCore::LegacyRenderSVGRoot::svgSVGElement(WebCore::LegacyRenderSVGRoot *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(result + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::LegacyRenderSVGRoot::hasIntrinsicAspectRatio(WebCore::LegacyRenderSVGRoot *this)
{
  WebCore::RenderBox *v2;
  float32x2_t v4;
  uint64_t v5;

  v5 = 0;
  v2 = (WebCore::RenderBox *)(*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1672))(this);
  WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox(this, v2, &v4, (WebCore::FloatSize *)&v5);
  return *(float *)&v5 / *((float *)&v5 + 1) != 0.0;
}

void WebCore::LegacyRenderSVGRoot::computeIntrinsicRatioInformation(WebCore::LegacyRenderSVGRoot *this, WebCore::FloatSize *a2, WebCore::FloatSize *a3)
{
  uint64_t *v6;
  float v7;
  float v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t *v23[5];
  uint64_t *v24[5];

  v7 = WebCore::LegacyRenderSVGRoot::calculateIntrinsicSize(this);
  *(float *)a2 = v7;
  *((float *)a2 + 1) = v8;
  v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
  if ((*(_DWORD *)(v9 + 148) & 0x60) != 0x20)
  {
    if (v7 <= 0.0 || v8 <= 0.0)
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if ((*(_WORD *)(v14 + 28) & 0x20) == 0
        || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
      {
        __break(0xC471u);
        return;
      }
      v15 = *(_QWORD *)(v14 + 216);
      v17 = (uint64_t *)(v15 + 24);
      v16 = *(_QWORD *)(v15 + 24);
      if (v16
        && *(_DWORD *)(v16 - 12)
        && (v22 = v15,
            WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v17, v24), v6 = WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v17, v23), v15 = v22, v24[1] != v23[1]))
      {
        v18 = (uint64_t *)(v22 + 48);
      }
      else
      {
        v18 = (uint64_t *)(v15 + 40);
      }
      v19 = *v18;
      v20 = *(float *)(v19 + 36);
      if (v20 > 0.0)
      {
        v21 = *(float *)(v19 + 40);
        if (v21 > 0.0)
        {
          *(_QWORD *)a3 = LODWORD(v20) | ((unint64_t)LODWORD(v21) << 32);
          return;
        }
      }
      v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
    }
    else
    {
      *(float *)a3 = v7;
      *((float *)a3 + 1) = v8;
    }
    if ((*(_DWORD *)(v9 + 148) & 0x60) != 0x40)
      return;
  }
  v10 = (double *)(v9 + 112);
  v11 = (double *)(v9 + 104);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v12 = v11;
  else
    v12 = v10;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v11 = v10;
  *(float *)a3 = WebCore::FloatSize::narrowPrecision((WebCore::FloatSize *)v6, *v12, *v11);
  *((_DWORD *)a3 + 1) = v13;
}

uint64_t WebCore::LegacyRenderSVGRoot::isEmbeddedThroughFrameContainingSVGDocument(WebCore::LegacyRenderSVGRoot *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = WebCore::Frame::ownerRenderer(*(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                                + 40)
                                                                                    + 8)
                                                                        + 528)
                                                            + 8));
  if (result)
  {
    if (*(_BYTE *)(WebCore::Frame::ownerRenderer(*(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                             + 8)
                                                                                 + 528)
                                                                     + 8))
                  + 46) == 7
      && (v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8),
          v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8),
          *(_QWORD *)(v4 + 1272) == v3))
    {
      return (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 528) + 8) + 296) + 3358) >> 5) & 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGRoot::computeReplacedLogicalWidth(WebCore::RenderObject *this, void *a2)
{
  int v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderBox *v17;

  v2 = (int)a2;
  v4 = *((_DWORD *)this + 54);
  if (v4 >= 1 && *((int *)this + 55) >= 1)
  {
    if (v4 >> 25)
      return 0x7FFFFFFFLL;
    else
      return (v4 << 6);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                       + 8)
                                           + 528)
                               + 8)
                   + 120);
    if (!v5)
      return WebCore::RenderReplaced::computeReplacedLogicalWidth(this, v2);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return WebCore::RenderReplaced::computeReplacedLogicalWidth(this, v2);
    v7 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v7 + 2;
    if ((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19655F7D0);
      }
      v8 = (*(unsigned __int8 *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
        LOBYTE(v8) = 0;
      v9 = (v8 & 1) != 0 ? *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL : 0;
    }
    else
    {
      v9 = 0;
    }
    if (v7)
    {
      *(_DWORD *)(v6 + 24) = v7;
    }
    else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    if (!v9)
      return WebCore::RenderReplaced::computeReplacedLogicalWidth(this, v2);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                + 40)
                                                                    + 8)
                                                        + 528)
                                            + 8)
                                + 120)
                    + 8);
    v11 = *(_DWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 24) = v11 + 2;
    if ((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19655F7F0);
      }
      v12 = (*(unsigned __int8 *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if ((*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
        LOBYTE(v12) = 0;
      v13 = (v12 & 1) != 0 ? *(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL : 0;
    }
    else
    {
      v13 = 0;
    }
    if (v11)
    {
      *(_DWORD *)(v10 + 24) = v11;
    }
    else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    if (*(_BYTE *)(v13 + 46) == 7
      && (v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8),
          v16 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8),
          *(_QWORD *)(v16 + 1272) == v15)
      && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 528) + 8) + 296) + 3358) & 0x20) != 0)
    {
      v17 = WebCore::RenderObject::containingBlock(this);
      return WebCore::RenderBox::contentLogicalWidth(v17);
    }
    else
    {
      return WebCore::RenderReplaced::computeReplacedLogicalWidth(this, v2);
    }
  }
}

uint64_t WebCore::LegacyRenderSVGRoot::computeReplacedLogicalHeight(WebCore::RenderObject *this, const WebCore::RenderBox *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderObject *v17;

  if (*((int *)this + 54) >= 1 && (v4 = *((_DWORD *)this + 55), v4 >= 1))
  {
    if (v4 >> 25)
      return 0x7FFFFFFFLL;
    else
      return (v4 << 6);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                       + 8)
                                           + 528)
                               + 8)
                   + 120);
    if (!v5)
      return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
    v7 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v7 + 2;
    if ((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19655F9DCLL);
      }
      v8 = (*(unsigned __int8 *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
        LOBYTE(v8) = 0;
      v9 = (v8 & 1) != 0 ? *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL : 0;
    }
    else
    {
      v9 = 0;
    }
    if (v7)
    {
      *(_DWORD *)(v6 + 24) = v7;
    }
    else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    if (!v9)
      return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                + 40)
                                                                    + 8)
                                                        + 528)
                                            + 8)
                                + 120)
                    + 8);
    v11 = *(_DWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 24) = v11 + 2;
    if ((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19655F9FCLL);
      }
      v12 = (*(unsigned __int8 *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if ((*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
        LOBYTE(v12) = 0;
      v13 = (v12 & 1) != 0 ? *(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL : 0;
    }
    else
    {
      v13 = 0;
    }
    if (v11)
    {
      *(_DWORD *)(v10 + 24) = v11;
    }
    else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    if (*(_BYTE *)(v13 + 46) == 7
      && (v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8),
          v16 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8),
          *(_QWORD *)(v16 + 1272) == v15)
      && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 528) + 8) + 296) + 3358) & 0x20) != 0)
    {
      v17 = WebCore::RenderObject::containingBlock(this);
      return (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)v17 + 1344))(v17, 1);
    }
    else
    {
      return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
    }
  }
}

uint64_t WebCore::LegacyRenderSVGRoot::layout(WebCore::LegacyRenderSVGRoot *this, void *a2)
{
  char v3;
  uint64_t *v4;
  WTF **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  double v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  int v26;
  float v27;
  float v28;
  double v29;
  int v30;
  int v31;
  uint64_t v32;
  float v33;
  double v34;
  unsigned int v35;
  int v36;
  float v37;
  float v38;
  double v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  float v59;
  int v60;
  void *v61;
  const WebCore::RenderElement *v62;
  __int128 v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  _BYTE *v74;
  _BOOL8 v75;
  void *v76;
  uint64_t v77;
  int32x4_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  int32x2_t v85;
  int v86;
  float32x2_t v87;
  WTF *v88;
  unsigned int v89;
  _BOOL4 hasVisibleBoxDecorationStyle;
  char v91;
  int v92;
  uint64_t result;
  unsigned int v94;
  uint64_t v95;
  WTF **v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  BOOL v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  const WebCore::FloatRect *v119;
  uint64_t v120;
  WebCore::RenderFragmentedFlow *v121;
  int v122;
  int v123;
  BOOL v124;
  uint64_t *v125;
  uint64_t v126;
  _BYTE v127[56];
  uint64_t *v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;

  v3 = *((_BYTE *)this + 241);
  *((_BYTE *)this + 241) = 1;
  v4 = (uint64_t *)((char *)this + 392);
  v5 = (WTF **)*((_QWORD *)this + 49);
  if (v5)
  {
    *v4 = 0;
    v95 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v95)
    {
      v96 = v5;
      do
      {
        v97 = *v96;
        if (*v96 != (WTF *)-1)
        {
          *v96 = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 1)
              WTF::fastFree(v97, a2);
            else
              --*(_DWORD *)v97;
          }
        }
        ++v96;
        --v95;
      }
      while (v95);
    }
    WTF::fastFree((WTF *)(v5 - 2), a2);
    v6 = *((_QWORD *)this + 49);
    *((_DWORD *)this + 100) = 0;
    if (v6)
    {
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
      if (v6 > 0x7FFFFFFE)
        LODWORD(v6) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v6) = 0;
    *((_DWORD *)this + 100) = 0;
  }
  *((_DWORD *)this + 101) = 2 * v6;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  ++*(_DWORD *)(v7 + 492);
  v8 = *((_DWORD *)this + 5) & 8;
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v127, this, (32 * v8) ^ 0x100, 0, 1);
  v9 = *((_QWORD *)this + 20);
  v130 = 0uLL;
  *(_QWORD *)&v131 = 0;
  WebCore::RenderBox::computeLogicalWidthInFragment(this, (int *)&v130, 0);
  v10 = *((_DWORD *)this + 31) >> 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    *((_DWORD *)this + 41) = v130;
    *((_DWORD *)this + 39) = DWORD1(v130);
  }
  else
  {
    *((_DWORD *)this + 40) = v130;
    *((_DWORD *)this + 38) = DWORD1(v130);
  }
  v11 = v10 & 7;
  v12 = *((_DWORD *)this + 30);
  v13 = (v12 >> 26) & 1;
  v14 = v13;
  if ((v11 - 2) >= 2)
  {
    if (v11 == 4)
    {
      v14 = (v12 & 0x4000000) == 0;
    }
    else
    {
      v14 = (v12 >> 26) & 1;
      if (v11 != 5)
      {
        if ((v12 & 0x4000000) != 0)
          v15 = 1;
        else
          v15 = 3;
        goto LABEL_11;
      }
    }
  }
  if (v14)
    v15 = 2;
  else
    v15 = 0;
LABEL_11:
  *((_DWORD *)this + v15 + 42) = v131;
  if ((v11 - 2) >= 2)
  {
    if (v11 == 4)
    {
      v13 = (v12 & 0x4000000) == 0;
    }
    else if (v11 != 5)
    {
      v16 = 3;
      if ((v12 & 0x4000000) == 0)
        v16 = 1;
      goto LABEL_16;
    }
  }
  v124 = v13 == 0;
  v16 = 2;
  if (!v124)
    v16 = 0;
LABEL_16:
  *((_DWORD *)this + v16 + 42) = DWORD1(v131);
  WebCore::RenderBox::updateLogicalHeight(this);
  v17 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v17 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196560360);
  }
  v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v19 = 0.0;
  if ((*(_BYTE *)(v18 + 124) & 0xE) != 0)
  {
    v98 = *(_QWORD *)(v18 + 200);
    if (*(_BYTE *)(v98 + 5) && *(_BYTE *)(v98 + 76) == 4)
    {
      if (*(_BYTE *)(v98 + 78))
        v19 = *(float *)(v98 + 72);
      else
        v19 = (float)*(int *)(v98 + 72);
    }
    else
    {
      v19 = *(float *)(v18 + 120);
    }
  }
  v20 = *(_QWORD *)(v17 + 280);
  v21 = v19 * 64.0;
  v126 = v9;
  if (v21 >= 2147483650.0)
  {
    v22 = 0x7FFFFFFF;
  }
  else if (v21 <= -2147483650.0)
  {
    v22 = 0x80000000;
  }
  else
  {
    v22 = (int)v21;
  }
  v23 = *(float *)(*((_QWORD *)this + 13) + 184);
  v25 = *(float *)(v20 + 28);
  v24 = *(float *)(v20 + 32);
  v26 = *(unsigned __int8 *)(v18 + 100);
  if ((v26 & 0xFFFFFFF7) == 3)
  {
    v122 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1144))(this);
    v26 = *(unsigned __int8 *)(v18 + 100);
    v27 = (float)v122 * 0.015625;
  }
  else
  {
    v27 = 0.0;
  }
  switch(v26)
  {
    case 4:
      v28 = *(float *)(v18 + 96);
      if (!*(_BYTE *)(v18 + 102))
        v28 = (float)SLODWORD(v28);
      break;
    case 3:
      v100 = *(float *)(v18 + 96);
      if (!*(_BYTE *)(v18 + 102))
        v100 = (float)*(int *)(v18 + 96);
      v28 = (float)(v27 * v100) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v18 + 96), v27);
      break;
    default:
      v30 = 0;
      goto LABEL_30;
  }
  v29 = v28 * 64.0;
  if (v29 >= 2147483650.0)
  {
    v30 = 0x7FFFFFFF;
  }
  else if (v29 <= -2147483650.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v29;
  }
LABEL_30:
  v31 = v22 + v30;
  if (__OFADD__(v22, v30))
    v31 = (v22 >> 31) + 0x7FFFFFFF;
  v32 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v33 = 0.0;
  if ((*(_BYTE *)(v32 + 172) & 0xE) != 0)
  {
    v99 = *(_QWORD *)(v32 + 200);
    if (*(_BYTE *)(v99 + 5) && *(_BYTE *)(v99 + 52) == 4)
    {
      if (*(_BYTE *)(v99 + 54))
        v33 = *(float *)(v99 + 48);
      else
        v33 = (float)*(int *)(v99 + 48);
    }
    else
    {
      v33 = *(float *)(v32 + 168);
    }
  }
  v34 = v33 * 64.0;
  if (v34 >= 2147483650.0)
  {
    v35 = 0x7FFFFFFF;
  }
  else if (v34 <= -2147483650.0)
  {
    v35 = 0x80000000;
  }
  else
  {
    v35 = (int)v34;
  }
  v36 = *(unsigned __int8 *)(v32 + 76);
  if ((v36 & 0xFFFFFFF7) == 3)
  {
    v123 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1144))(this);
    v36 = *(unsigned __int8 *)(v32 + 76);
    v37 = (float)v123 * 0.015625;
  }
  else
  {
    v37 = 0.0;
  }
  switch(v36)
  {
    case 4:
      v38 = *(float *)(v32 + 72);
      if (!*(_BYTE *)(v32 + 78))
        v38 = (float)SLODWORD(v38);
      break;
    case 3:
      v101 = *(float *)(v32 + 72);
      if (!*(_BYTE *)(v32 + 78))
        v101 = (float)*(int *)(v32 + 72);
      v38 = (float)(v37 * v101) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v32 + 72), v37);
      break;
    default:
      v40 = 0;
      goto LABEL_44;
  }
  v39 = v38 * 64.0;
  if (v39 >= 2147483650.0)
  {
    v40 = 0x7FFFFFFF;
  }
  else if (v39 <= -2147483650.0)
  {
    v40 = 0x80000000;
  }
  else
  {
    v40 = (int)v39;
  }
LABEL_44:
  v41 = v35 + v40;
  if (__OFADD__(v35, v40))
    v41 = (v35 >> 31) + 0x7FFFFFFF;
  v42 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v42 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v42 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196560380);
  }
  v125 = v4;
  v43 = *((_DWORD *)this + 40);
  v44 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v43, v44))
    v45 = (v43 >> 31) + 0x7FFFFFFF;
  else
    v45 = v43 - v44;
  v46 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v45, v46))
    v47 = (v45 >> 31) + 0x7FFFFFFF;
  else
    v47 = v45 - v46;
  v48 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1352))(this);
  v49 = v48 << 6;
  if (v48 < -33554432)
    v49 = 0x80000000;
  if (v48 > 0x1FFFFFF)
    v49 = 0x7FFFFFFF;
  v50 = __OFSUB__(v47, v49);
  v51 = v47 - v49;
  if (v50)
    v51 = (v47 >> 31) + 0x7FFFFFFF;
  v52 = v51 & ~(v51 >> 31);
  v53 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 944))(this);
  v50 = __OFSUB__(v52, v53);
  v54 = v52 - v53;
  if (v50)
    v54 = 0x7FFFFFFF;
  v55 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 952))(this);
  if (__OFSUB__(v54, v55))
    v56 = (v54 >> 31) + 0x7FFFFFFF;
  else
    v56 = v54 - v55;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v114 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1352))(this);
    v115 = v114 << 6;
    if (v114 > 0x1FFFFFF)
      v115 = 0x7FFFFFFF;
    if (v114 >= -33554432)
      v57 = v115;
    else
      v57 = 0x80000000;
  }
  else
  {
    v57 = 0;
  }
  v50 = __OFSUB__(v56, v57);
  v58 = v56 - v57;
  if (v50)
    v58 = (v56 >> 31) + 0x7FFFFFFF;
  v59 = (float)((float)(v58 & ~(v58 >> 31)) * 0.015625) / v23;
  v60 = WebCore::RenderBox::contentHeight(this);
  WebCore::SVGSVGElement::viewBoxToViewTransform((WebCore::SVGFitToViewBox ***)v42, v59, (float)((float)v60 * 0.015625) / v23, v61, (WebCore::AffineTransform *)&v130);
  v63 = v131;
  *(_OWORD *)((char *)this + 344) = v130;
  *(_OWORD *)((char *)this + 360) = v63;
  *(_OWORD *)((char *)this + 376) = v132;
  if (v31 || v41 || v23 != 1.0 || v25 != 0.0 || v24 != 0.0)
  {
    v64 = *((double *)this + 43);
    v65 = *((double *)this + 44);
    v66 = v65 * 0.0 + v64 * v23;
    v67 = v65 * v23 + v64 * 0.0;
    v68 = *((double *)this + 45);
    v69 = *((double *)this + 46);
    v70 = v69 * 0.0 + v68 * v23;
    v71 = v69 * v23 + v68 * 0.0;
    v72 = *((double *)this + 47);
    v73 = *((double *)this + 48);
    *((double *)this + 43) = v66;
    *((double *)this + 44) = v67;
    *((double *)this + 45) = v70;
    *((double *)this + 46) = v71;
    *((double *)this + 47) = v73 * 0.0 + v72 * v23 + (float)(v25 + (float)((float)v31 * 0.015625));
    *((double *)this + 48) = v73 * v23 + v72 * 0.0 + (float)(v24 + (float)((float)v41 * 0.015625));
  }
  if (v8)
  {
    v74 = (char *)this + 408;
    *((_BYTE *)this + 408) |= 1u;
    v75 = 1;
    goto LABEL_77;
  }
  v102 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v102 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v102 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196560420);
  }
  if (*(_BYTE *)(v102 + 145))
    goto LABEL_175;
  v103 = *(_QWORD *)(v102 + 128);
  if (v103 && *(_DWORD *)(v103 - 12))
  {
    v107 = *(unsigned int *)(v103 - 4);
    if ((_DWORD)v107)
    {
      v108 = 8 * v107;
      v109 = *(uint64_t **)(v102 + 128);
      while ((unint64_t)(*v109 + 1) <= 1)
      {
        ++v109;
        v108 -= 8;
        if (!v108)
          goto LABEL_172;
      }
    }
    else
    {
      v109 = *(uint64_t **)(v102 + 128);
    }
    v111 = (uint64_t *)(v103 + 8 * v107);
    if (v109 == v111)
    {
LABEL_172:
      v112 = 0;
LABEL_176:
      v74 = (char *)this + 408;
      v104 = *((_BYTE *)this + 408) & 0xFE | v112;
      goto LABEL_138;
    }
    v113 = *v109;
    while (!*(_QWORD *)(v113 + 8))
    {
      if (++v109 != v111)
      {
        while (1)
        {
          v113 = *v109;
          if ((unint64_t)(*v109 + 1) > 1)
            break;
          v112 = 0;
          if (++v109 == v111)
            goto LABEL_176;
        }
        if (v109 != v111)
          continue;
      }
      goto LABEL_172;
    }
LABEL_175:
    v112 = v126 != *((_QWORD *)this + 20);
    goto LABEL_176;
  }
  v74 = (char *)this + 408;
  v104 = *((_BYTE *)this + 408) & 0xFE;
LABEL_138:
  *((_BYTE *)this + 408) = v104;
  v75 = (*((_BYTE *)this + 20) & 0x20) != 0
     && (v105 = WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, v62)) != 0
     && *(_QWORD *)v105
     && (v106 = *(_QWORD *)(*(_QWORD *)v105 + 8)) != 0
     && *(_QWORD *)(v106 + 8) != 0;
LABEL_77:
  WebCore::SVGRenderSupport::layoutChildren((uint64_t)this, (WebCore::RenderElement *)v75);
  v77 = *((_QWORD *)this + 49);
  if (v77)
  {
    if (*(_DWORD *)(v77 - 12))
    {
      WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v125, (uint64_t **)&v130);
      WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v125, &v128);
      if (*((_QWORD *)&v130 + 1) != v129)
      {
        WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v125, (uint64_t **)&v130);
        WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v125, &v128);
        while (*((_QWORD *)&v130 + 1) != v129)
        {
          v110 = *(_QWORD *)(**((_QWORD **)&v130 + 1) + 8);
          WebCore::LegacyRenderSVGResource::removeAllClientsFromCache((WebCore::LegacyRenderSVGResource *)(v110 + 216), 1);
          WebCore::SVGResourcesCache::clientStyleChanged(v110, (void *)8, 0, (const WebCore::RenderStyle *)(v110 + 80));
          WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v130);
        }
        *((_BYTE *)this + 408) &= ~1u;
        WebCore::SVGRenderSupport::layoutChildren((uint64_t)this, 0);
      }
    }
  }
  if ((*v74 & 2) != 0)
  {
    v78 = vdupq_n_s32(0x7FC00000u);
    *(int32x4_t *)((char *)this + 244) = v78;
    *(_QWORD *)((char *)this + 268) = 0;
    *(_QWORD *)((char *)this + 260) = 0;
    *(int32x4_t *)((char *)this + 276) = v78;
    v130 = 0uLL;
    WebCore::SVGRenderSupport::computeContainerBoundingBoxes((uint64_t)this, (float32x2_t *)this + 28, (_BYTE *)this + 240, (float *)&v130, 0);
    WebCore::SVGRenderSupport::intersectRepaintRectWithResources((uint64_t)this, (float32x2_t *)&v130, 0);
    v79 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1016))(this);
    v80 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 1024))(this);
    if (__OFADD__(v79, v80))
      v81 = (v79 >> 31) + 0x7FFFFFFF;
    else
      v81 = v79 + v80;
    v82 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 944))(this);
    if (__OFADD__(v81, v82))
      v83 = (v81 >> 31) + 0x7FFFFFFF;
    else
      v83 = v81 + v82;
    v84 = (*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 952))(this);
    v86 = v83 + v84;
    if (__OFADD__(v83, v84))
      v86 = (v83 >> 31) + 0x7FFFFFFF;
    *(float *)v85.i32 = (float)v86 * 0.015625;
    v87 = (float32x2_t)vdup_lane_s32(v85, 0);
    *(float32x2_t *)&v130 = vsub_f32(*(float32x2_t *)&v130, v87);
    *((float32x2_t *)&v130 + 1) = vadd_f32(v87, vadd_f32(v87, *(float32x2_t *)((char *)&v130 + 8)));
    *(_OWORD *)((char *)this + 260) = v130;
    *v74 &= ~2u;
  }
  v88 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::fastFree(v88, v76);
    else
      --*(_DWORD *)v88;
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v121 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)this + 648))(this);
    if (v121)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v121, this);
  }
  v89 = (*((_QWORD *)this + 12) >> 10) & 7;
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    if (v89 < 4)
      goto LABEL_96;
  }
  else if (v89 - 1 < 3)
  {
    goto LABEL_96;
  }
  if ((*((_QWORD *)this + 12) & 0x1C00) != 0x1000
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*((_QWORD *)this + 3) + 8))
  {
    v130 = *(_OWORD *)((char *)this + 260);
    LODWORD(v130) = WebCore::AffineTransform::mapRect((WebCore::LegacyRenderSVGRoot *)((char *)this + 344), (const WebCore::FloatRect *)&v130);
    *(_QWORD *)((char *)&v130 + 4) = __PAIR64__(v117, v116);
    HIDWORD(v130) = v118;
    v128 = (uint64_t *)WebCore::enclosingLayoutRect((WebCore *)&v130, v119);
    v129 = v120;
    WebCore::RenderBox::addVisualOverflow((uint64_t)this, (const WebCore::LayoutRect *)&v128);
  }
LABEL_96:
  WebCore::RenderLayerModelObject::updateLayerTransform(this, v76);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8))
    hasVisibleBoxDecorationStyle = WebCore::RenderBoxModelObject::hasVisibleBoxDecorationStyle(this);
  else
    hasVisibleBoxDecorationStyle = (*((_BYTE *)this + 23) & 0x60) != 0;
  if (hasVisibleBoxDecorationStyle)
    v91 = 4;
  else
    v91 = 0;
  *((_BYTE *)this + 408) = *((_BYTE *)this + 408) & 0xFB | v91;
  v92 = *((_DWORD *)this + 5);
  if ((v92 & 0x60000000) != 0)
    *((_DWORD *)this + 5) = v92 & 0x9FFFFFFF | 0x20000000;
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v127);
  v94 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v94;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v94 & 0xFFDFFE07;
  --*(_DWORD *)(v7 + 492);
  *((_BYTE *)this + 241) = v3;
  return result;
}

float WebCore::LegacyRenderSVGRoot::repaintRectInLocalCoordinates(uint64_t a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
    v2 = a1 + 276;
  else
    v2 = a1 + 260;
  return *(float *)v2;
}

void WebCore::LegacyRenderSVGRoot::paintReplaced(WebCore::LegacyRenderSVGRoot *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  unsigned int v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  const WebCore::RenderElement *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Page *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::Page *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  unint64_t v75;
  WebCore::RegionContext *v76;
  WebCore::RegionContext *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WebCore::RegionContext *v82;
  WebCore::RegionContext *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[2];
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;

  v6 = (*((_QWORD *)this + 12) >> 10) & 7;
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    if (v6 < 4)
      goto LABEL_3;
  }
  else if (v6 - 1 < 3)
  {
    goto LABEL_3;
  }
  if ((*((_QWORD *)this + 12) & 0x1C00) != 0x1000
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*((_QWORD *)this + 3) + 8))
  {
    v8 = 0;
    goto LABEL_6;
  }
LABEL_3:
  v7 = WebCore::RenderBox::contentSize(this);
  if ((int)v7 < 1 || SHIDWORD(v7) < 1)
    return;
  v8 = 1;
LABEL_6:
  if (*((_WORD *)a2 + 8) == 4096
    || (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10))
     || (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 10) + 72))(*((_QWORD *)a2 + 10)))
    && (v9 = *((unsigned __int16 *)a2 + 8), v9 != 16)
    && v9 != 64)
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v10 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196560D64);
    }
    if (!*(_BYTE *)(v10 + 232))
      goto LABEL_13;
    v59 = *(_QWORD *)(v10 + 216);
    v61 = (uint64_t *)(v59 + 24);
    v60 = *(_QWORD *)(v59 + 24);
    if (v60
      && *(_DWORD *)(v60 - 12)
      && (v84 = v59,
          WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v61, (uint64_t **)&v94), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v61, (uint64_t **)&v85), v59 = v84, *((_QWORD *)&v94 + 1) != *((_QWORD *)&v85 + 1)))
    {
      v62 = (uint64_t *)(v84 + 48);
    }
    else
    {
      v62 = (uint64_t *)(v59 + 40);
    }
    v63 = *v62;
    if (*(float *)(v63 + 36) > 0.0 && *(float *)(v63 + 40) > 0.0)
    {
LABEL_13:
      v11 = (_BYTE *)*((_QWORD *)a2 + 10);
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v11 + 72))(v11))
      {
        v72 = *((unsigned int *)this + 16);
        if (v72 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
        {
          v73 = *(_QWORD *)((v72 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
          if (v73)
          {
            while (*(_BYTE *)(v73 + 46) == 91
                 || (*(_BYTE *)(v73 + 52) & 7) == 4 && (~*(unsigned __int8 *)(v73 + 53) & 9) == 0)
            {
              v75 = *(unsigned int *)(v73 + 47) | ((unint64_t)*(unsigned __int8 *)(v73 + 51) << 32);
              if (v75)
              {
                v73 = *(_QWORD *)(v75 + 8);
                if (v73)
                  continue;
              }
              return;
            }
            v11[716] |= 2u;
          }
        }
      }
      else
      {
        v13 = *((unsigned int *)this + 16);
        if (v13 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
          && *(_QWORD *)((v13 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)
          || (v64 = WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, v12)) != 0
          && *(_QWORD *)v64
          && (v65 = *(_QWORD *)(*(_QWORD *)v64 + 8)) != 0
          && *(_QWORD *)(v65 + 8))
        {
          if (*((_WORD *)a2 + 8) == 8)
          {
            v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 528)
                                        + 8)
                            + 24);
            if (v14)
              v15 = *(WebCore::Page **)(v14 + 8);
            else
              v15 = 0;
            v16 = *((_QWORD *)this + 24);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 20);
              v18 = (uint64_t *)(v16 + 28);
            }
            else
            {
              v17 = 0;
              v18 = (uint64_t *)((char *)this + 160);
            }
            v19 = *v18;
            *(_QWORD *)&v94 = v17;
            *((_QWORD *)&v94 + 1) = v19;
            WebCore::Page::addRelevantRepaintedObject(v15, this, (const WebCore::LayoutRect *)&v94);
          }
          v20 = *((_OWORD *)a2 + 3);
          v96 = *((_OWORD *)a2 + 2);
          v97 = v20;
          v98 = *((_OWORD *)a2 + 4);
          v99 = *((_QWORD *)a2 + 10);
          v21 = *((_OWORD *)a2 + 1);
          v94 = *(_OWORD *)a2;
          v95 = v21;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 96))(v99, 1);
          if (v8)
          {
            v22 = WebCore::RenderBox::overflowClipRect(this, (unsigned int *)a3, 0, 0);
            if ((int)v22 >= 0)
              v26 = v22;
            else
              v26 = v22 + 63;
            v27 = v22 - (v26 & 0xFFFFFFC0);
            if (v22 >= 0)
              v28 = HIDWORD(v22);
            else
              v28 = HIDWORD(v22) + 63;
            v29 = HIDWORD(v22) - (v28 & 0xFFFFFFC0);
            v30 = v27 + v23;
            if (__OFADD__(v27, v23))
              v30 = (v27 >> 31) + 0x7FFFFFFF;
            v31 = v26 >> 6;
            v32 = v28 >> 6;
            v33 = v29 + v24;
            if (__OFADD__(v29, v24))
              v33 = (v29 >> 31) + 0x7FFFFFFF;
            v34 = v29 + 32;
            v35 = (v32 + (v34 >> 6));
            v36 = v27 + 32;
            v37 = (v31 + (v36 >> 6));
            v38 = (v30 / 64 - (v36 >> 6) + ((int)(v30 - (v25 & 0xFFFFFFC0) + 32) >> 6));
            v39 = (v33 / 64 - (v34 >> 6) + ((int)(v33 - (v30 & 0xFFFFFFC0) + 32) >> 6));
            *(_QWORD *)&v85 = v37 | (v35 << 32);
            *((_QWORD *)&v85 + 1) = v38 | (v39 << 32);
            *(float *)&v88 = (float)(int)v37;
            *((float *)&v88 + 1) = (float)(int)v35;
            *(float *)&v89 = (float)(int)v38;
            *((float *)&v89 + 1) = (float)(int)v39;
            (*(void (**)(uint64_t, double *))(*(_QWORD *)v99 + 456))(v99, &v88);
            if (*((_WORD *)a2 + 8) == 4096
              && *((_QWORD *)&v98 + 1)
              && (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)))
            {
              v82 = (WebCore::RegionContext *)*((_QWORD *)&v98 + 1);
              if (*((_QWORD *)&v98 + 1))
              {
                if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)))
                  v83 = v82;
                else
                  v83 = 0;
              }
              else
              {
                v83 = 0;
              }
              WebCore::RegionContext::pushClip(v83, (const WebCore::IntRect *)&v85);
            }
          }
          v40 = *(_DWORD *)a3;
          v41 = *((_DWORD *)a3 + 1);
          v42 = *(_DWORD *)a3 + 63;
          if (*(int *)a3 >= 0)
            v42 = *(_DWORD *)a3;
          v43 = *((double *)this + 43);
          v44 = *((double *)this + 44);
          v45 = v43 + v44 * 0.0;
          v46 = v44 + v43 * 0.0;
          v47 = *((double *)this + 45);
          v48 = *((double *)this + 46);
          v49 = v47 + v48 * 0.0;
          v50 = v48 + v47 * 0.0;
          v51 = *((double *)this + 47);
          v52 = *((double *)this + 48);
          v88 = v45;
          v89 = v46;
          v90 = v49;
          v91 = v50;
          v92 = v51 + v52 * 0.0 + (float)(((int)(v40 - (v42 & 0xFFFFFFC0) + 32) >> 6) + (v42 >> 6));
          v93 = v52 + v51 * 0.0 + (float)(((int)(v41 - (v42 & 0xFFFFFFC0) + 32) >> 6) + v41 / 64);
          WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)&v94, (const WebCore::AffineTransform *)&v88);
          if (*((_WORD *)a2 + 8) == 4096
            && *((_QWORD *)&v98 + 1)
            && (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)))
          {
            v76 = (WebCore::RegionContext *)*((_QWORD *)&v98 + 1);
            if (*((_QWORD *)&v98 + 1))
            {
              if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)))
                v77 = v76;
              else
                v77 = 0;
            }
            else
            {
              v77 = 0;
            }
            WebCore::RegionContext::pushTransform(v77, (const WebCore::AffineTransform *)&v88);
          }
          v86 = 0u;
          memset(v87, 0, 21);
          v85 = 0u;
          if ((unsigned __int16)v95 != 8
            || (WebCore::SVGRenderingContext::prepareToRenderSVGContent(&v85, this, (const WebCore::RenderElement *)&v94, 1), (v87[1] & 1) != 0))
          {
            if (*((_QWORD *)&v95 + 1) && *((WebCore::LegacyRenderSVGRoot **)&v95 + 1) == this)
              *((_QWORD *)&v95 + 1) = 0;
            v53 = *((unsigned __int8 *)this + 68);
            for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v56 + 47))
            {
              v55 = i | (v53 << 32);
              if (!v55)
                break;
              v56 = *(_QWORD *)(v55 + 8);
              if (!v56)
                break;
              if ((*(_BYTE *)(v56 + 45) & 2) == 0)
              {
LABEL_44:
                v100 = *((_QWORD *)this + 19);
                (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v56 + 680))(v56, &v94, &v100);
                while (1)
                {
                  v57 = *(unsigned int *)(v56 + 47);
                  if (!(v57 | ((unint64_t)*(unsigned __int8 *)(v56 + 51) << 32)))
                    goto LABEL_49;
                  v56 = *(_QWORD *)((v57 | ((unint64_t)*(unsigned __int8 *)(v56 + 51) << 32)) + 8);
                  if (!v56)
                    goto LABEL_49;
                  if ((*(_BYTE *)(v56 + 45) & 2) == 0)
                    goto LABEL_44;
                }
              }
              v53 = *(unsigned __int8 *)(v56 + 51);
            }
          }
LABEL_49:
          v58 = v87[1];
          if ((v87[1] & 0xE) != 0)
          {
            if ((v87[1] & 8) != 0)
            {
              v100 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 80);
              WebCore::LegacyRenderSVGResourceFilter::postApplyResource(*((uint64_t **)&v86 + 1), (WebCore::RenderElement *)v85, &v100);
              v74 = (_OWORD *)*((_QWORD *)&v85 + 1);
              *(_QWORD *)(*((_QWORD *)&v85 + 1) + 80) = v86;
              *v74 = v87[0];
              v58 = v87[1];
            }
            if ((v58 & 4) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)&v85 + 1) + 80) + 608))(*(_QWORD *)(*((_QWORD *)&v85 + 1) + 80));
              v58 = v87[1];
            }
            if ((v58 & 2) != 0)
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)&v85 + 1) + 80) + 104))(*(_QWORD *)(*((_QWORD *)&v85 + 1) + 80), 1);
          }
          if (*((_WORD *)a2 + 8) == 4096
            && *((_QWORD *)&v98 + 1)
            && (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)))
          {
            v78 = *((_QWORD *)&v98 + 1);
            if (*((_QWORD *)&v98 + 1))
              v79 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1))
                  ? v78
                  : 0;
            else
              v79 = 0;
            WebCore::RegionContext::popTransform(v79);
            if (v8)
            {
              v80 = *((_QWORD *)&v98 + 1);
              if (*((_QWORD *)&v98 + 1))
              {
                if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)))
                  v81 = v80;
                else
                  v81 = 0;
              }
              else
              {
                v81 = 0;
              }
              WebCore::RegionContext::popClip(v81);
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 104))(v99, 1);
        }
        else if (*((_WORD *)a2 + 8) == 8)
        {
          v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                          + 40)
                                                              + 8)
                                                  + 528)
                                      + 8)
                          + 24);
          if (v66)
            v67 = *(WebCore::Page **)(v66 + 8);
          else
            v67 = 0;
          v68 = *((_QWORD *)this + 24);
          if (v68)
          {
            v69 = *(_QWORD *)(v68 + 20);
            v70 = (uint64_t *)(v68 + 28);
          }
          else
          {
            v69 = 0;
            v70 = (uint64_t *)((char *)this + 160);
          }
          v71 = *v70;
          *(_QWORD *)&v94 = v69;
          *((_QWORD *)&v94 + 1) = v71;
          WebCore::Page::addRelevantUnpaintedObject(v67, this, (const WebCore::LayoutRect *)&v94);
        }
      }
    }
  }
}

void WebCore::LegacyRenderSVGRoot::willBeDestroyed(WebCore::LegacyRenderSVGRoot *this, WebCore::RenderBox *a2)
{
  const WebCore::RenderElement *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  const WebCore::RenderElement *v7;
  WebCore::RenderElement **v8;

  WebCore::RenderBlock::removePercentHeightDescendant((WTF ***)this, a2);
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x1000) != 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
  {
    v6 = (_QWORD *)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, v3);
    if (v6)
    {
      WebCore::SVGResources::removeClientFromCache(v6, this, 1);
      v8 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), v7);
      WebCore::SVGResourcesCache::removeResourcesFromRenderer(v8, this);
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        (*(void (**)(uint64_t, WebCore::LegacyRenderSVGRoot *))(*(_QWORD *)v5 + 672))(v5, this);
    }
  }
  WebCore::RenderBox::willBeDestroyed(this, v3);
}

void WebCore::LegacyRenderSVGRoot::insertedIntoTree(WebCore::LegacyRenderSVGRoot *this, void *a2, uint64_t a3, WebCore::RenderLayer *a4, BOOL a5)
{
  WebCore::RenderObject *v6;

  WebCore::RenderElement::insertedIntoTree((uint64_t)this, a2, a3, a4, a5);
  WebCore::SVGResourcesCache::clientWasAddedToTree(this, v6);
}

_DWORD *WebCore::LegacyRenderSVGRoot::willBeRemovedFromTree(WebCore::LegacyRenderSVGRoot *this, WebCore::RenderObject *a2)
{
  void *v3;

  WebCore::SVGResourcesCache::clientWillBeRemovedFromTree((uint64_t)this, a2);
  return WebCore::RenderElement::willBeRemovedFromTree(this, v3);
}

void WebCore::LegacyRenderSVGRoot::styleDidChange(WebCore::RenderBoxModelObject *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  float v6;
  char v7;

  if ((_DWORD)a2 == 2)
  {
    if (WebCore::RenderBoxModelObject::hasVisibleBoxDecorationStyle(this))
      v7 = 4;
    else
      v7 = 0;
    *((_BYTE *)this + 408) = *((_BYTE *)this + 408) & 0xFB | v7;
  }
  else if ((_DWORD)a2 == 8)
  {
    WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)this);
  }
  WebCore::RenderBox::styleDidChange((uint64_t)this, a2, (uint64_t)a3);
  if (a3)
    v6 = *(float *)(*((_QWORD *)a3 + 3) + 184);
  else
    v6 = 1.0;
  if (v6 != *(float *)(*((_QWORD *)this + 13) + 184))
    (*(void (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1656))(this);
  WebCore::SVGResourcesCache::clientStyleChanged((uint64_t)this, a2, a3, (WebCore::RenderBoxModelObject *)((char *)this + 80));
}

double WebCore::LegacyRenderSVGRoot::localToParentTransform(WebCore::LegacyRenderSVGRoot *this)
{
  int v1;
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;

  v3 = (_OWORD *)((char *)this + 344);
  v4 = (_OWORD *)((char *)this + 296);
  v5 = v3[1];
  *v4 = *v3;
  v4[1] = v5;
  v6 = v3[2];
  v4[2] = v6;
  v7 = *((_DWORD *)this + 38);
  if (v7)
  {
    *(double *)&v6 = *((double *)this + 41) + (double)(((int)(v7 - (v1 & 0xFFFFFFC0) + 32) >> 6) + v7 / 64);
    *((_QWORD *)this + 41) = v6;
  }
  v8 = *((_DWORD *)this + 39);
  if (v8)
  {
    *(double *)&v6 = *((double *)this + 42) + (double)(((int)(v8 - (v1 & 0xFFFFFFC0) + 32) >> 6) + v8 / 64);
    *((_QWORD *)this + 42) = v6;
  }
  return *(double *)&v6;
}

unint64_t WebCore::LegacyRenderSVGRoot::localClippedOverflowRect(uint64_t a1, char a2)
{
  WebCore::AffineTransform *v3;
  int v4;
  int v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  float v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)();
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  signed int v47;
  uint64_t v48;
  uint64_t v49;
  signed int v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD v53[4];

  v3 = (WebCore::AffineTransform *)(a1 + 344);
  v53[0] = WebCore::LegacyRenderSVGRoot::repaintRectInLocalCoordinates(a1, a2);
  v53[1] = v4;
  v53[2] = v5;
  v53[3] = v6;
  v7 = WebCore::AffineTransform::mapRect(v3, (const WebCore::FloatRect *)v53);
  v11 = *(_QWORD *)(a1 + 160);
  v12 = HIDWORD(v11);
  v14 = ((int)(v11 - (v13 & 0xFFFFFFC0) + 32) >> 6) + (int)v11 / 64;
  v16 = ((int)(HIDWORD(v11) - (v15 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v11) / 64;
  v17 = 0.0;
  if (v7 >= 0.0)
    v18 = v7;
  else
    v18 = 0.0;
  if (v8 >= 0.0)
    v17 = v8;
  v19 = v7 + v9;
  if (v19 > (float)v14)
    v19 = (float)v14;
  v20 = v8 + v10;
  if (v20 > (float)v16)
    v20 = (float)v16;
  if (v18 >= v19 || v17 >= v20)
  {
    v18 = 0.0;
    v17 = 0.0;
    v19 = 0.0;
    v20 = 0.0;
  }
  v22 = v19 - v18;
  v23 = v20 - v17;
  v24 = floorf(v18 * 64.0);
  if (v24 > -2147500000.0)
    LODWORD(v25) = (int)v24;
  else
    LODWORD(v25) = 0x80000000;
  if (v24 < 2147500000.0)
    v25 = v25;
  else
    v25 = 0x7FFFFFFFLL;
  v26 = floorf(v17 * 64.0);
  if (v26 > -2147500000.0)
    v27 = (int)v26;
  else
    v27 = 0x80000000;
  if (v26 < 2147500000.0)
    v28 = v27;
  else
    v28 = 0x7FFFFFFFLL;
  v29 = v18 + v22;
  v30 = v17 + v23;
  v31 = ceilf(v29 * 64.0);
  if (v31 >= 2147500000.0)
  {
    v32 = 0x7FFFFFFF;
  }
  else if (v31 <= -2147500000.0)
  {
    v32 = 0x80000000;
  }
  else
  {
    v32 = (int)v31;
  }
  v33 = ceilf(v30 * 64.0);
  if (v33 >= 2147500000.0)
  {
    v34 = 0x7FFFFFFF;
  }
  else if (v33 <= -2147500000.0)
  {
    v34 = 0x80000000;
  }
  else
  {
    v34 = (int)v33;
  }
  v35 = v32 - v25;
  if (__OFSUB__(v32, (_DWORD)v25))
    v35 = (v32 >> 31) + 0x7FFFFFFF;
  v36 = v34 - v28;
  if (__OFSUB__(v34, (_DWORD)v28))
    v36 = (v34 >> 31) + 0x7FFFFFFF;
  v37 = v25 | (v28 << 32);
  v38 = *(_QWORD *)(a1 + 192);
  if ((*(_BYTE *)(a1 + 408) & 4) != 0)
    goto LABEL_42;
  v39 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
  if (!v38)
    v39 = 0;
  if (v39)
  {
LABEL_42:
    if (v38)
    {
      v41 = *(_QWORD *)(v38 + 20);
      v43 = *(_QWORD *)(v38 + 28);
      v42 = HIDWORD(v43);
    }
    else
    {
      v41 = 0;
      v42 = HIDWORD(v11);
      v43 = *(_QWORD *)(a1 + 160);
    }
    v44 = 0;
    if ((int)v43 >= 1 && (int)v42 >= 1)
    {
      if ((int)v11 < 1 || SHIDWORD(v11) < 1)
      {
        LODWORD(v12) = v42;
        LODWORD(v11) = v43;
        v44 = v41;
      }
      else
      {
        v45 = HIDWORD(v41);
        v46 = __OFADD__((_DWORD)v41, (_DWORD)v43);
        v47 = v41 + v43;
        if (v46)
          v47 = (v41 >> 31) + 0x7FFFFFFF;
        v48 = v41 & ((int)v41 >> 31);
        v49 = HIDWORD(v41) & (SHIDWORD(v41) >> 31);
        if ((int)v11 <= v47)
          LODWORD(v11) = v47;
        v50 = HIDWORD(v41) + v42;
        if (__OFADD__((_DWORD)v45, (_DWORD)v42))
          v50 = (v45 >> 31) + 0x7FFFFFFF;
        if ((int)v12 <= v50)
          LODWORD(v12) = v50;
        v46 = __OFSUB__((_DWORD)v11, (_DWORD)v48);
        LODWORD(v11) = v11 - v48;
        if (v46)
          LODWORD(v11) = 0x7FFFFFFF;
        v44 = v48 | (v49 << 32);
        v46 = __OFSUB__((_DWORD)v12, (_DWORD)v49);
        LODWORD(v12) = v12 - v49;
        if (v46)
          LODWORD(v12) = 0x7FFFFFFF;
      }
    }
    if ((int)v11 >= 1 && (int)v12 >= 1)
    {
      if (v35 < 1 || v36 < 1)
      {
        v37 = v44;
      }
      else
      {
        if ((int)v44 >= (int)v25)
          v51 = v25;
        else
          v51 = v44;
        if (SHIDWORD(v44) >= (int)v28)
          v52 = v28;
        else
          v52 = HIDWORD(v44);
        v37 = v51 | (v52 << 32);
      }
    }
  }
  return ((int)v37 >> 6 << 6) | (unint64_t)(v37 >> 38 << 38);
}

uint64_t WebCore::LegacyRenderSVGRoot::clippedOverflowRect(WebCore::RenderElement *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  char v10;
  uint64_t v11;
  char v12;

  if (WebCore::RenderElement::isInsideEntirelyHiddenLayer(a1))
    return 0;
  v8[0] = WebCore::LegacyRenderSVGRoot::localClippedOverflowRect((uint64_t)a1, (a3 & 0x1000000000) != 0);
  v8[1] = v7;
  v9 = 0;
  v10 = 0;
  (*(void (**)(uint64_t *__return_ptr, WebCore::RenderElement *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 472))(&v11, a1, v8, a2, a3);
  if (v12)
    return v11;
  result = 1158;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LegacyRenderSVGRoot::rectsForRepaintingAfterLayout@<X0>(WebCore::RenderElement *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  unint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD v16[2];
  int v17;
  char v18;

  result = WebCore::RenderElement::isInsideEntirelyHiddenLayer(a1);
  if ((_DWORD)result)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 32) = 0;
  }
  else
  {
    v12[0] = WebCore::LegacyRenderSVGRoot::localClippedOverflowRect((uint64_t)a1, 0);
    v12[1] = v9;
    LOBYTE(v13) = 0;
    v15 = 0;
    if (a3)
    {
      v13 = WebCore::RenderBox::localOutlineBoundsRepaintRect(a1);
      v14 = v10;
      v15 = 1;
    }
    result = (uint64_t)(*(_QWORD *(**)(_OWORD *__return_ptr, WebCore::RenderElement *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 472))(v16, a1, v12, a2, 0xC00000000);
    if (v18)
    {
      v11 = v16[1];
      *(_OWORD *)a4 = v16[0];
      *(_OWORD *)(a4 + 16) = v11;
      *(_DWORD *)(a4 + 32) = v17;
    }
    else
    {
      result = 1158;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::LegacyRenderSVGRoot::computeFloatVisibleRectInContainer(uint64_t a1@<X0>, float *a2@<X1>, WebCore::RenderObject *a3@<X2>, _BOOL8 a4@<X3>, float32x4_t *a5@<X8>)
{
  int v5;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  double v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  signed int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  signed int v43;
  unsigned int v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float v67;
  unsigned int v68;
  uint64_t v69;
  int32x2_t v70;
  int32x2_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int32x2_t v78;
  int8x16_t v79;
  int32x2_t v80;
  int8x16_t v81;
  char v82;
  double v83;
  double v84;
  double v85;
  float v86;
  double v87;
  double v88;
  float v89;
  float v90;
  double v91;
  float v92;
  float v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  float v99;
  float v100;
  double v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v107;
  float v108;
  float v110;
  float v111;
  float v113;
  float v114;
  uint64_t (*v116)();
  unint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  char v121;
  char v122;
  uint64_t v123;
  int32x2_t v124;
  int8x16_t v125;
  int32x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int32x2_t v129;
  int32x2_t v130;
  WebCore::RenderObject *v131;
  _BOOL8 v132;
  uint64_t v133;
  int32x4_t v134;
  char v135;
  int8x16_t v136;
  char v137;
  char v138;
  unint64_t v139;
  float v140;
  float v141;

  v8 = *(double *)(a1 + 344);
  v7 = *(double *)(a1 + 352);
  v10 = *(double *)(a1 + 360);
  v9 = *(double *)(a1 + 368);
  v12 = *a2;
  v11 = a2[1];
  v13 = *(double *)(a1 + 376);
  if (v8 == 1.0 && v7 == 0.0 && (v10 == 0.0 ? (v14 = v9 == 1.0) : (v14 = 0), v14))
  {
    v16 = a2[2];
    v15 = a2[3];
    v17 = v13;
    v18 = *(double *)(a1 + 384);
    v19 = v12 + v17;
    v20 = v11 + v18;
  }
  else
  {
    v83 = v12;
    v84 = v10 * v11;
    v85 = v9 * v11;
    v86 = v12 + a2[2];
    v87 = *(double *)(a1 + 384);
    v88 = v87 + v85 + v7 * v12;
    v89 = v13 + v84 + v8 * v12;
    v90 = v88;
    v91 = v86;
    v92 = v13 + v84 + v8 * v91;
    v93 = v87 + v85 + v7 * v91;
    v94 = (float)(v11 + a2[3]);
    v95 = v10 * v94;
    v96 = v13 + v95 + v8 * v91;
    v97 = v9 * v94;
    v98 = v87 + v9 * v94 + v7 * v91;
    v99 = v96;
    v100 = v98;
    v101 = v13 + v95 + v8 * v83;
    v102 = v101;
    v103 = v87 + v97 + v7 * v83;
    if (v102 >= v99)
      v19 = v96;
    else
      v19 = v101;
    if (v92 >= v89)
      v104 = v89;
    else
      v104 = v92;
    if (v19 >= v104)
      v19 = v104;
    v105 = fabsf(v19);
    if (v105 == INFINITY || v105 > 2147500000.0)
      v19 = (float)((SLODWORD(v19) >> 31) ^ 0x7FFFFFFF);
    if (v103 >= v100)
      v20 = v100;
    else
      v20 = v103;
    if (v93 >= v90)
      v107 = v90;
    else
      v107 = v93;
    if (v20 >= v107)
      v20 = v107;
    v108 = fabsf(v20);
    if (v108 == INFINITY || v108 > 2147500000.0)
      v20 = (float)((SLODWORD(v20) >> 31) ^ 0x7FFFFFFF);
    if (v89 < v92)
      v89 = v92;
    if (v99 >= v102)
      v110 = v96;
    else
      v110 = v102;
    if (v89 < v110)
      v89 = v110;
    v111 = fabsf(v89);
    if (v111 == INFINITY || v111 > 2147500000.0)
      v89 = (float)((SLODWORD(v89) >> 31) ^ 0x7FFFFFFF);
    if (v90 < v93)
      v90 = v93;
    if (v100 >= v103)
      v113 = v100;
    else
      v113 = v103;
    if (v90 < v113)
      v90 = v113;
    v114 = fabsf(v90);
    if (v114 == INFINITY || v114 > 2147500000.0)
      v90 = (float)((SLODWORD(v90) >> 31) ^ 0x7FFFFFFF);
    v16 = v89 - v19;
    v15 = v90 - v20;
  }
  v139 = __PAIR64__(LODWORD(v20), LODWORD(v19));
  v140 = v16;
  v141 = v15;
  v21 = (*(_QWORD *)(a1 + 96) >> 10) & 7;
  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
  {
    if (v21 - 1 < 3)
      goto LABEL_11;
LABEL_151:
    if ((*(_QWORD *)(a1 + 96) & 0x1C00) != 0x1000
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
    {
      goto LABEL_27;
    }
    goto LABEL_11;
  }
  if (v21 >= 4)
    goto LABEL_151;
LABEL_11:
  if ((a4 & 0x100000000) != 0)
  {
    v117 = *(_QWORD *)(a1 + 160);
    v136.i64[0] = 0;
    v136.i64[1] = v117;
    v132 = a4;
    v133 = a1;
    v131 = a3;
    v118 = WebCore::snappedIntRect((WebCore *)&v136, (const WebCore::LayoutRect *)a2);
    *(float *)v134.i32 = (float)(int)v118;
    *(float *)&v134.i32[1] = (float)SHIDWORD(v118);
    *(float *)&v134.i32[2] = (float)v119;
    *(float *)&v134.i32[3] = (float)v120;
    v121 = WebCore::FloatRect::edgeInclusiveIntersect((float32x2_t *)&v139, (float32x2_t *)&v134);
    a3 = v131;
    a4 = v132;
    v122 = v121;
    a1 = v133;
    if ((v122 & 1) == 0)
    {
      a5->i8[0] = 0;
      a5[1].i8[0] = 0;
      return;
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 160);
    v23 = HIDWORD(v22);
    v24 = ((int)(v22 - (v5 & 0xFFFFFFC0) + 32) >> 6) + (int)v22 / 64;
    v25 = ((int)(v23 - (v5 & 0xFFFFFFC0) + 32) >> 6) + (int)v23 / 64;
    v26 = 0.0;
    if (v19 >= 0.0)
      v27 = v19;
    else
      v27 = 0.0;
    if (v20 >= 0.0)
      v26 = v20;
    v28 = v19 + v16;
    if (v28 > (float)v24)
      v28 = (float)v24;
    v29 = v20 + v15;
    if (v29 > (float)v25)
      v29 = (float)v25;
    if (v27 >= v28 || v26 >= v29)
    {
      v27 = 0.0;
      v26 = 0.0;
      v28 = 0.0;
      v29 = 0.0;
    }
    v139 = __PAIR64__(LODWORD(v26), LODWORD(v27));
    v140 = v28 - v27;
    v141 = v29 - v26;
  }
LABEL_27:
  v31 = *(_QWORD *)(a1 + 192);
  if ((*(_BYTE *)(a1 + 408) & 4) != 0)
    goto LABEL_28;
  v116 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
  if (!v31)
    v116 = 0;
  if (v116)
  {
LABEL_28:
    v32 = *(_QWORD *)(a1 + 160);
    if (v31)
    {
      v33 = *(_QWORD *)(v31 + 20);
      v34 = *(_QWORD *)(v31 + 28);
    }
    else
    {
      v33 = 0;
      v34 = *(_QWORD *)(a1 + 160);
    }
    v35 = 0;
    if ((int)v34 >= 1)
    {
      v36 = HIDWORD(v34);
      if (SHIDWORD(v34) >= 1)
      {
        if ((int)v32 < 1 || (v37 = HIDWORD(v32), SHIDWORD(v32) < 1))
        {
          v35 = v33;
          v32 = v34;
        }
        else
        {
          v38 = HIDWORD(v33);
          v39 = v33 + v34;
          if (__OFADD__((_DWORD)v33, (_DWORD)v34))
            v39 = (v33 >> 31) + 0x7FFFFFFF;
          v40 = v33 & ((int)v33 >> 31);
          v41 = HIDWORD(v33) & (SHIDWORD(v33) >> 31);
          if ((int)v32 <= v39)
            LODWORD(v32) = v39;
          v42 = __OFADD__((_DWORD)v38, (_DWORD)v36);
          v43 = v38 + v36;
          if (v42)
            v43 = (v38 >> 31) + 0x7FFFFFFF;
          if ((int)v37 > v43)
            v43 = v37;
          v42 = __OFSUB__((_DWORD)v32, (_DWORD)v40);
          v44 = v32 - v40;
          if (v42)
            v44 = 0x7FFFFFFF;
          v35 = v40 | (v41 << 32);
          v42 = __OFSUB__(v43, (_DWORD)v41);
          v45 = (v43 - v41);
          if (v42)
            v45 = 0x7FFFFFFFLL;
          v32 = v44 | (unint64_t)(v45 << 32);
        }
      }
    }
    v46 = (float)(int)v32 * 0.015625;
    if (v46 > 0.0)
    {
      v47 = (float)SHIDWORD(v32) * 0.015625;
      if (v47 > 0.0)
      {
        v48 = (float)(int)v35 * 0.015625;
        v49 = (float)SHIDWORD(v35) * 0.015625;
        if (v140 <= 0.0 || v141 <= 0.0)
        {
          *(float *)&v139 = (float)(int)v35 * 0.015625;
          *((float *)&v139 + 1) = (float)SHIDWORD(v35) * 0.015625;
          v140 = (float)(int)v32 * 0.015625;
        }
        else
        {
          if (v48 >= *(float *)&v139)
            LODWORD(v50) = v139;
          else
            v50 = (float)(int)v35 * 0.015625;
          if (v49 >= *((float *)&v139 + 1))
            v51 = *((float *)&v139 + 1);
          else
            v51 = (float)SHIDWORD(v35) * 0.015625;
          v52 = v48 + v46;
          if ((float)(v140 + *(float *)&v139) >= v52)
            v52 = v140 + *(float *)&v139;
          v53 = v49 + v47;
          if ((float)(v141 + *((float *)&v139 + 1)) >= v53)
            v53 = v141 + *((float *)&v139 + 1);
          v139 = __PAIR64__(LODWORD(v51), LODWORD(v50));
          v140 = v52 - v50;
          v47 = v53 - v51;
        }
        v141 = v47;
      }
    }
  }
  v54 = floorf(*(float *)&v139);
  if (v54 < 2147500000.0 && v54 > -2147500000.0
    || (v55 = 2147500000.0, v54 < 2147500000.0) && (v55 = -2147500000.0, v54 > -2147500000.0))
  {
    v55 = (float)(int)v54;
  }
  v56 = floorf(*((float *)&v139 + 1));
  if (v56 < 2147500000.0 && v56 > -2147500000.0
    || (v57 = 2147500000.0, v56 < 2147500000.0) && (v57 = -2147500000.0, v56 > -2147500000.0))
  {
    v57 = (float)(int)v56;
  }
  v58 = ceilf(*(float *)&v139 + v140);
  if (v58 < 2147500000.0 && v58 > -2147500000.0
    || (v59 = 2147500000.0, v58 < 2147500000.0) && (v59 = -2147500000.0, v58 > -2147500000.0))
  {
    v59 = (float)(int)v58;
  }
  v60 = ceilf(*((float *)&v139 + 1) + v141);
  if (v60 < 2147500000.0 && v60 > -2147500000.0
    || (v61 = 2147500000.0, v60 < 2147500000.0) && (v61 = -2147500000.0, v60 > -2147500000.0))
  {
    v61 = (float)(int)v60;
  }
  if (v55 < 2147500000.0 && v55 > -2147500000.0)
    goto LABEL_77;
  if (v55 >= 2147500000.0)
  {
    v62 = 0x7FFFFFFF;
  }
  else
  {
    if (v55 > -2147500000.0)
    {
LABEL_77:
      v62 = (int)v55;
      goto LABEL_78;
    }
    v62 = 0x80000000;
  }
LABEL_78:
  if (v57 < 2147500000.0 && v57 > -2147500000.0)
    goto LABEL_80;
  if (v57 >= 2147500000.0)
  {
    v63 = 0x7FFFFFFF;
    goto LABEL_81;
  }
  if (v57 > -2147500000.0)
LABEL_80:
    v63 = (int)v57;
  else
    v63 = 0x80000000;
LABEL_81:
  v64 = v62;
  v65 = v63;
  v66 = v59 - v55;
  v67 = v61 - v57;
  if (v66 < 2147500000.0 && v66 > -2147500000.0)
    goto LABEL_83;
  if (v66 >= 2147500000.0)
  {
    v68 = 0x7FFFFFFF;
  }
  else
  {
    if (v66 > -2147500000.0)
    {
LABEL_83:
      v68 = (int)v66;
      goto LABEL_84;
    }
    v68 = 0x80000000;
  }
LABEL_84:
  if (v67 >= 2147500000.0 || v67 <= -2147500000.0)
  {
    if (v67 >= 2147500000.0)
    {
      v123 = 0x7FFFFFFFLL;
    }
    else if (v67 <= -2147500000.0)
    {
      v123 = 0x80000000;
    }
    else
    {
      v123 = (int)v67;
    }
    v124 = vcgt_s32((int32x2_t)__PAIR64__(v68, v64), (int32x2_t)0xFE000000FE000000);
    v125.i64[0] = v124.i32[0];
    v125.i64[1] = v124.i32[1];
    v76 = v125;
    v126 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v68, v64));
    v125.i64[0] = v126.i32[0];
    v125.i64[1] = v126.i32[1];
    v127.i64[0] = v64;
    v127.i64[1] = v68;
    v128.i64[0] = v65;
    v128.i64[1] = v123;
    v77 = vorrq_s8(vandq_s8(v125, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64(v127, 6uLL), v125), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
    v129 = vcgt_s32((int32x2_t)__PAIR64__(v123, v65), (int32x2_t)0xFE000000FE000000);
    v125.i64[0] = v129.i32[0];
    v125.i64[1] = v129.i32[1];
    v79 = v125;
    v130 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v123, v65));
    v125.i64[0] = v130.i32[0];
    v125.i64[1] = v130.i32[1];
    v81 = vbslq_s8(v125, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v128, 0x26uLL));
  }
  else
  {
    v69 = (int)v67;
    v70 = vcgt_s32((int32x2_t)__PAIR64__(v68, v64), (int32x2_t)0xFE000000FE000000);
    v71 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v68, v64));
    v72.i64[0] = v71.i32[0];
    v72.i64[1] = v71.i32[1];
    v73 = v72;
    v74.i64[0] = v64;
    v74.i64[1] = v68;
    v75 = (int64x2_t)vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64(v74, 6uLL), v72), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL));
    v72.i64[0] = v70.i32[0];
    v72.i64[1] = v70.i32[1];
    v76 = v72;
    v77 = vorrq_s8(vandq_s8(v73, (int8x16_t)vdupq_n_s64(0x80000000uLL)), (int8x16_t)v75);
    v78 = vcgt_s32((int32x2_t)__PAIR64__(v69, v65), (int32x2_t)0xFE000000FE000000);
    v72.i64[0] = v78.i32[0];
    v72.i64[1] = v78.i32[1];
    v79 = v72;
    v80 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v69, v65));
    v75.i64[0] = v65;
    v75.i64[1] = v69;
    v72.i64[0] = v80.i32[0];
    v72.i64[1] = v80.i32[1];
    v81 = vbslq_s8(v72, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v75, 0x26uLL));
  }
  v136 = vorrq_s8(vbslq_s8(v79, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), v81), vbslq_s8(v76, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v77));
  v137 = 0;
  v138 = 0;
  WebCore::RenderBox::computeVisibleRectsInContainer((WebCore::RenderBox *)a1, a3, (__n128 *)&v136, a4, (uint64_t)&v134);
  v82 = v135;
  if (v135)
  {
    *a5 = vmulq_f32(vcvtq_f32_s32(v134), (float32x4_t)vdupq_n_s32(0x3C800000u));
    v82 = 1;
  }
  else
  {
    a5->i8[0] = 0;
  }
  a5[1].i8[0] = v82;
}

void WebCore::LegacyRenderSVGRoot::mapLocalToContainer(WebCore::RenderElement *a1, WebCore::RenderElement *a2, WebCore::TransformState *a3, int a4, _BYTE *a5)
{
  WebCore::RenderBox::mapLocalToContainer(a1, a2, a3, a4 | 4, a5);
}

float WebCore::LegacyRenderSVGRoot::strokeBoundingBox(WebCore::LegacyRenderSVGRoot *this)
{
  return *((float *)this + 61);
}

uint64_t WebCore::LegacyRenderSVGRoot::nodeAtPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  signed int v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  signed int v42;
  int v43;
  signed int v44;
  signed int v45;
  int v46;
  signed int v47;
  WebCore::ImageOverlay *v48;
  WebCore::Node *v49;
  void *v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  signed int v59;
  unint64_t v60;
  unint64_t v61;
  signed int v62;
  signed int v63;
  float64x2_t *v64;
  int32x2_t v65;
  int64x2_t v66;
  int8x16_t v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  void *v74;
  _BOOL4 v75;
  unsigned int v76;
  unsigned int v77;
  __int32 v78;
  _QWORD v80[2];
  int8x16_t v81[3];
  char v82;
  uint64_t v83;

  v11 = a5[1];
  v12 = *(_DWORD *)(a4 + 4);
  if (__OFSUB__(*(_DWORD *)a4, *a5))
    v13 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
  else
    v13 = *(_DWORD *)a4 - *a5;
  v14 = __OFSUB__(v12, v11);
  v15 = v12 - v11;
  if (v14)
    v16 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v16 = v15;
  v18 = *(_DWORD *)(a1 + 152);
  v17 = *(_DWORD *)(a1 + 156);
  v14 = __OFSUB__(v13, v18);
  v19 = v13 - v18;
  if (v14)
    v20 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v20 = v19;
  v14 = __OFSUB__(v16, v17);
  v21 = v16 - v17;
  if (v14)
    v22 = (v16 >> 31) + 0x7FFFFFFF;
  else
    v22 = v21;
  v83 = v20 | (v22 << 32);
  v23 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)a1);
  if ((int)v20 >= (int)v23)
  {
    v26 = v23 + v24;
    if (__OFADD__((_DWORD)v23, v24))
      v26 = (v23 >> 31) + 0x7FFFFFFF;
    if (v26 > (int)v20 && (int)v22 >= SHIDWORD(v23))
    {
      v27 = HIDWORD(v23) + v25;
      if (__OFADD__(HIDWORD(v23), v25))
        v27 = (HIDWORD(v23) >> 31) + 0x7FFFFFFF;
      if (v27 > (int)v22)
        goto LABEL_89;
    }
  }
  v28 = (*(_QWORD *)(a1 + 96) >> 10) & 7;
  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    if (v28 < 4)
      goto LABEL_24;
  }
  else if (v28 - 1 < 3)
  {
    goto LABEL_24;
  }
  if ((*(_QWORD *)(a1 + 96) & 0x1C00) != 0x1000
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
  {
    v55 = *(_QWORD *)(a1 + 192);
    if (v55)
    {
      v56 = *(_QWORD *)(v55 + 20);
      v57 = (unint64_t *)(v55 + 28);
    }
    else
    {
      v56 = 0;
      v57 = (unint64_t *)(a1 + 160);
    }
    if (v13 >= (int)v56)
    {
      v58 = *v57;
      v59 = v56 + v58;
      if (__OFADD__((_DWORD)v56, (_DWORD)v58))
        v59 = (v56 >> 31) + 0x7FFFFFFF;
      if (v59 > v13)
      {
        v60 = HIDWORD(v56);
        if (v16 >= (int)v60)
        {
          v61 = HIDWORD(v58);
          v14 = __OFADD__((_DWORD)v60, (_DWORD)v61);
          v62 = v60 + v61;
          v63 = (v60 >> 31) + 0x7FFFFFFF;
          if (!v14)
            v63 = v62;
          if (v63 > v16)
          {
LABEL_89:
            WebCore::LegacyRenderSVGRoot::localToParentTransform((WebCore::LegacyRenderSVGRoot *)a1);
            WebCore::AffineTransform::inverse(v64, (uint64_t)v81);
            v65 = vdup_n_s32(v82 == 0);
            v66.i64[0] = v65.u32[0];
            v66.i64[1] = v65.u32[1];
            v67 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v66, 0x3FuLL));
            v80[0] = vcvt_f32_f64(vaddq_f64((float64x2_t)vbicq_s8(v81[2], v67), vmlaq_n_f64(vmulq_n_f64((float64x2_t)vbslq_s8(v67, (int8x16_t)xmmword_1968A14C0, v81[1]), (float)((float)v16 * 0.015625)), (float64x2_t)vbslq_s8(v67, (int8x16_t)xmmword_1968A14B0, v81[0]), (float)((float)v13 * 0.015625))));
            v68 = *(unsigned __int8 *)(a1 + 75);
            for (i = *(unsigned int *)(a1 + 71); ; i = *(unsigned int *)(v71 + 40))
            {
              v70 = i | (v68 << 32);
              if (!v70)
                break;
              v71 = *(_QWORD *)(v70 + 8);
              if (!v71)
                break;
              if ((*(unsigned int (**)(uint64_t, int *, WebCore::HitTestResult *, _QWORD *, uint64_t))(*(_QWORD *)v71 + 280))(v71, a2, a3, v80, a6))
              {
                WebCore::RenderObject::updateHitTestResult((unsigned int *)a1, a3, (const WebCore::LayoutPoint *)&v83);
                if ((*(_BYTE *)(v71 + 45) & 1) != 0)
                {
                  v72 = 0;
                }
                else
                {
                  v72 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 8);
                  if (v72)
                    *(_DWORD *)(v72 + 24) += 2;
                }
                v81[0] = 0uLL;
                v73 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, (WebCore::ImageOverlay *)v72, a2, a4, (WebCore::LayoutRect *)v81);
                if (v72)
                {
                  if (*(_DWORD *)(v72 + 24) == 2)
                  {
                    if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
                    {
                      v75 = v73;
                      WebCore::Node::removedLastRef((WebCore::Node *)v72, v74);
                      v73 = v75;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v72 + 24) -= 2;
                  }
                }
                if (!v73)
                  return 1;
              }
              v68 = *(unsigned __int8 *)(v71 + 44);
            }
          }
        }
      }
    }
  }
LABEL_24:
  if (a6 > 1
    || (*(_QWORD *)a2 & 0xFF00000000) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 120) & 0x30) != 0)
    return 0;
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 8);
    if (v31)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v31 + 104) + 239) & 0x18) != 0)
        return 0;
    }
  }
  if ((*(_QWORD *)a2 & 0x10) == 0)
  {
    v52 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v53 = *(_QWORD *)(*(_QWORD *)(v52 + 40) + 8);
    if (*(_BYTE *)(v53 + 3441))
    {
      if (*(_QWORD *)(v53 + 1272) != v52)
        return 0;
    }
    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
      v54 = 0;
    else
      v54 = a1;
    if (v30 && (*(_BYTE *)(a1 + 45) & 2) != 0)
      v54 = *(_QWORD *)(v30 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v54 + 104) + 239) & 1) != 0 || (*(_WORD *)(v54 + 124) & 0x3C0) == 0)
      return 0;
  }
  v33 = *(_DWORD *)(a1 + 152);
  v32 = *(_DWORD *)(a1 + 156);
  v34 = a5[1];
  v14 = __OFADD__(*a5, v33);
  v35 = *a5 + v33;
  LODWORD(v36) = (*a5 >> 31) + 0x7FFFFFFF;
  v36 = v14 ? v36 : v35;
  v14 = __OFADD__(v34, v32);
  LODWORD(v37) = v34 + v32;
  v37 = v14 ? (v34 >> 31) + 0x7FFFFFFF : v37;
  v38 = *(_QWORD *)(a1 + 160);
  v80[0] = v36 | (v37 << 32);
  v80[1] = v38;
  if ((int)v38 < 1)
    return 0;
  v39 = HIDWORD(v38);
  if (SHIDWORD(v38) < 1)
    return 0;
  v40 = *(_DWORD *)(a4 + 16);
  if (v40 < 1)
    return 0;
  v41 = *(_DWORD *)(a4 + 20);
  if (v41 < 1)
    return 0;
  v42 = *(_DWORD *)(a4 + 8);
  v14 = __OFADD__(v42, v40);
  v43 = v42 + v40;
  if (v14)
    v43 = (v42 >> 31) + 0x7FFFFFFF;
  if ((int)v36 >= v43)
    return 0;
  v14 = __OFADD__((_DWORD)v36, (_DWORD)v38);
  v44 = v36 + v38;
  if (v14)
    v44 = (v36 >> 31) + 0x7FFFFFFF;
  if (v42 >= v44)
    return 0;
  v45 = *(_DWORD *)(a4 + 12);
  v46 = v45 + v41;
  if (__OFADD__(v45, v41))
    v46 = (v45 >> 31) + 0x7FFFFFFF;
  if ((int)v37 >= v46)
    return 0;
  v14 = __OFADD__((_DWORD)v37, (_DWORD)v39);
  v47 = v37 + v39;
  if (v14)
    v47 = (v37 >> 31) + 0x7FFFFFFF;
  if (v45 >= v47)
    return 0;
  if (!*(_BYTE *)(a4 + 65)
    && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)v80, (const WebCore::LayoutRect *)(a4 + 8)))
  {
    v81[0].i32[0] = WebCore::LayoutRect::operator WebCore::FloatRect((int *)v80);
    *(uint64_t *)((char *)v81[0].i64 + 4) = __PAIR64__(v77, v76);
    v81[0].i32[3] = v78;
    if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 32), (const WebCore::FloatRect *)v81))
      return 0;
  }
  WebCore::RenderObject::updateHitTestResult((unsigned int *)a1, a3, (const WebCore::LayoutPoint *)&v83);
  v48 = (WebCore::ImageOverlay *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  if (v48)
  {
    v49 = v48;
    *((_DWORD *)v48 + 6) += 2;
    v51 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v48, a2, a4, (WebCore::LayoutRect *)v80);
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49, v50);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
    return !v51;
  }
  return !WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, a2, a4, (WebCore::LayoutRect *)v80);
}

BOOL WebCore::LegacyRenderSVGRoot::hasRelativeDimensions(WebCore::LegacyRenderSVGRoot *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL8 v5;
  unsigned int v7;
  char v8;
  unsigned int v9;
  unsigned __int8 v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196562810);
  }
  WebCore::SVGSVGElement::intrinsicHeight((uint64_t *)v2, (uint64_t)&v9);
  v3 = v10;
  if ((v10 & 0xF7) == 3)
  {
    v5 = 1;
  }
  else
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v4 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196562830);
    }
    WebCore::SVGSVGElement::intrinsicWidth((uint64_t *)v4, (uint64_t)&v7);
    v5 = (v8 & 0xF7) == 3;
    if (v8 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v7);
    }
  }
  if (v3 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  return v5;
}

float WebCore::LegacyRenderSVGResourceGradient::resourceBoundingBox()
{
  return 0.0;
}

float `non-virtual thunk to'WebCore::LegacyRenderSVGResourceGradient::resourceBoundingBox()
{
  return 0.0;
}

const char *WebCore::LegacyRenderSVGResourceLinearGradient::renderName(WebCore::LegacyRenderSVGResourceLinearGradient *this)
{
  return "RenderSVGResourceLinearGradient";
}

uint64_t WebCore::LegacyRenderSVGResourceLinearGradient::gradientUnits(WebCore::LegacyRenderSVGResourceLinearGradient *this)
{
  return (*((unsigned __int8 *)this + 408) >> 2) & 3;
}

__n128 WebCore::LegacyRenderSVGResourceLinearGradient::gradientTransform@<Q0>(WebCore::LegacyRenderSVGResourceLinearGradient *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *((_OWORD *)this + 20);
  *(_OWORD *)a2 = *((_OWORD *)this + 19);
  *(_OWORD *)(a2 + 16) = v2;
  result = *((__n128 *)this + 21);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceLinearGradient::resourceType(WebCore::LegacyRenderSVGResourceLinearGradient *this)
{
  return 3;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceLinearGradient::resourceType(WebCore::LegacyRenderSVGResourceLinearGradient *this)
{
  return 3;
}

const char *WebCore::LegacyRenderSVGResourceMarker::renderName(WebCore::LegacyRenderSVGResourceMarker *this)
{
  return "RenderSVGResourceMarker";
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::applyResource()
{
  return 0;
}

float WebCore::LegacyRenderSVGResourceMarker::resourceBoundingBox()
{
  return 0.0;
}

uint64_t WebCore::LegacyRenderSVGResourceMarker::resourceType(WebCore::LegacyRenderSVGResourceMarker *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMarker::applyResource()
{
  return 0;
}

float `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMarker::resourceBoundingBox()
{
  return 0.0;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMarker::resourceType(WebCore::LegacyRenderSVGResourceMarker *this)
{
  return 1;
}

const char *WebCore::LegacyRenderSVGResourceMasker::renderName(WebCore::LegacyRenderSVGResourceMasker *this)
{
  return "RenderSVGResourceMasker";
}

uint64_t WebCore::LegacyRenderSVGResourceMasker::resourceType(WebCore::LegacyRenderSVGResourceMasker *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceMasker::resourceType(WebCore::LegacyRenderSVGResourceMasker *this)
{
  return 0;
}

const char *WebCore::LegacyRenderSVGResourcePattern::renderName(WebCore::LegacyRenderSVGResourcePattern *this)
{
  return "RenderSVGResourcePattern";
}

float WebCore::LegacyRenderSVGResourcePattern::resourceBoundingBox()
{
  return 0.0;
}

uint64_t WebCore::LegacyRenderSVGResourcePattern::resourceType(WebCore::LegacyRenderSVGResourcePattern *this)
{
  return 2;
}

float `non-virtual thunk to'WebCore::LegacyRenderSVGResourcePattern::resourceBoundingBox()
{
  return 0.0;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourcePattern::resourceType(WebCore::LegacyRenderSVGResourcePattern *this)
{
  return 2;
}

const char *WebCore::LegacyRenderSVGResourceRadialGradient::renderName(WebCore::LegacyRenderSVGResourceRadialGradient *this)
{
  return "RenderSVGResourceRadialGradient";
}

uint64_t WebCore::LegacyRenderSVGResourceRadialGradient::gradientUnits(WebCore::LegacyRenderSVGResourceRadialGradient *this)
{
  return (*((unsigned __int8 *)this + 408) >> 2) & 3;
}

__n128 WebCore::LegacyRenderSVGResourceRadialGradient::gradientTransform@<Q0>(WebCore::LegacyRenderSVGResourceRadialGradient *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *((_OWORD *)this + 20);
  *(_OWORD *)a2 = *((_OWORD *)this + 19);
  *(_OWORD *)(a2 + 16) = v2;
  result = *((__n128 *)this + 21);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t WebCore::LegacyRenderSVGResourceRadialGradient::resourceType(WebCore::LegacyRenderSVGResourceRadialGradient *this)
{
  return 4;
}

uint64_t `non-virtual thunk to'WebCore::LegacyRenderSVGResourceRadialGradient::resourceType(WebCore::LegacyRenderSVGResourceRadialGradient *this)
{
  return 4;
}

float WebCore::LegacyRenderSVGResourceSolidColor::resourceBoundingBox()
{
  return 0.0;
}

uint64_t WebCore::LegacyRenderSVGResourceSolidColor::resourceType(WebCore::LegacyRenderSVGResourceSolidColor *this)
{
  return 5;
}

const char *WebCore::LegacyRenderSVGRoot::renderName(WebCore::LegacyRenderSVGRoot *this)
{
  return "RenderSVGRoot";
}

uint64_t WebCore::LegacyRenderSVGRoot::canHaveChildren(WebCore::LegacyRenderSVGRoot *this)
{
  return 1;
}

uint64_t WebCore::LegacyRenderSVGRoot::setNeedsBoundariesUpdate(uint64_t this)
{
  *(_BYTE *)(this + 408) |= 2u;
  return this;
}

uint64_t WebCore::LegacyRenderSVGRoot::setNeedsTransformUpdate(uint64_t this)
{
  *(_BYTE *)(this + 408) |= 2u;
  return this;
}

float WebCore::LegacyRenderSVGRoot::objectBoundingBox(WebCore::LegacyRenderSVGRoot *this)
{
  return *((float *)this + 56);
}

uint64_t WebCore::LegacyRenderSVGRoot::canBeSelectionLeaf(WebCore::LegacyRenderSVGRoot *this)
{
  return 0;
}

WTF **std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (!v3)
      return (WTF **)WTF::fastFree(v2, a2);
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_8:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
        if (!v7)
          goto LABEL_16;
        return (WTF **)WTF::fastFree(v2, a2);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (!v7)
    {
LABEL_16:
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (!v9)
        WTF::fastFree((WTF *)v4, a2);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  char v12;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          v7 = *(_QWORD *)v6;
          *(_QWORD *)v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              if (*(_BYTE *)(v7 + 40))
              {
                v8 = *(unsigned int *)(v7 + 32);
                if ((_DWORD)v8 != -1)
                  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v8])(&v11, v7 + 24);
                *(_DWORD *)(v7 + 32) = -1;
              }
              v9 = *(unsigned int *)(v7 + 16);
              if ((_DWORD)v9 != -1)
                ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v9])(&v12, v7 + 8);
              *(_DWORD *)(v7 + 16) = -1;
              WTF::fastFree((WTF *)v7, a2);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          WTF::fastFree(v6, a2);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WebCore::RenderObject *,WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RenderObject *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = v6;
    do
    {
      if (*(_QWORD *)v13 != -1)
      {
        if (*(_QWORD *)v13)
        {
          v14 = WTF::HashTable<WebCore::RenderObject *,WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RenderObject *>>::reinsert(*a1, (uint64_t *)v13);
          std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100]((WTF **)(v13 + 8), 0);
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100]((WTF **)(v13 + 8), 0);
        }
      }
      v13 += 16;
      --v7;
    }
    while (v7);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RenderObject *,WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RenderObject *>>::reinsert(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 16 * v7));
  v8 = a1 + 16 * v7;
  std::unique_ptr<WebCore::GradientData>::reset[abi:sn180100]((WTF **)(v8 + 8), 0);
  *(_QWORD *)v8 = *a2;
  v9 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v8 + 8) = v9;
  return v8;
}

uint64_t WTF::HashTable<WebCore::RenderObject *,WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RenderObject *>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RenderObject *,WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>>>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashMap<WebCore::RenderObject *,std::unique_ptr<WebCore::GradientData>,WTF::DefaultHash<WebCore::RenderObject *>,WTF::HashTraits<WebCore::RenderObject *>,WTF::HashTraits<std::unique_ptr<WebCore::GradientData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RenderObject *>>::rehash(a1, v5, a2);
}

WTF **WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::MaskerData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>(WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *result;
  if (*result)
  {
    v3 = (uint64_t *)result;
    v4 = *((_DWORD *)v2 - 2);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = v8;
      result = (WTF **)*((_QWORD *)v2 + 2 * v8);
      if (result != (WTF **)-1)
      {
        if (!result)
          return result;
        if (result[1] == a2)
          break;
      }
      v8 = (v8 + i) & v4;
    }
    if (v8 != *((_DWORD *)v2 - 1))
    {
      v11 = (_QWORD *)((char *)v2 + 16 * v8);
      *v11 = 0;
      if (*(_DWORD *)result == 1)
        WTF::fastFree((WTF *)result, a2);
      else
        --*(_DWORD *)result;
      *v11 = -1;
      result = std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100]((WTF **)v2 + 2 * v10 + 1, 0);
      ++*(_DWORD *)(*v3 - 16);
      v12 = *v3;
      v13 = *v3 ? *(_DWORD *)(v12 - 12) - 1 : -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *v3;
      if (*v3)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          return (WTF **)WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::MaskerData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(v3, v16 >> 1);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::MaskerData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::MaskerData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  WTF **v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  WTF **v26;
  WTF *v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = ~(*((_QWORD *)v11 + 1) << 32) + *((_QWORD *)v11 + 1);
          v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
          v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
          v18 = v14 & (((v17 + ~(v17 << 27)) >> 31) ^ (v17 + ~((_DWORD)v17 << 27)));
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 16 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (WTF **)(v13 + 16 * v20);
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v22 + 1, 0);
          v24 = *v22;
          *v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
              WTF::fastFree(v24, v23);
            else
              --*(_DWORD *)v24;
          }
          v25 = *v10;
          *v10 = 0;
          *v22 = v25;
          v26 = (WTF **)(v4 + 16 * v9);
          v27 = v26[1];
          *++v26 = 0;
          v22[1] = v27;
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100](v26, 0);
          v12 = *v10;
          *v10 = 0;
          if (!v12)
            goto LABEL_18;
          if (*(_DWORD *)v12 == 1)
          {
LABEL_24:
            WTF::fastFree(v12, v8);
            goto LABEL_18;
          }
          --*(_DWORD *)v12;
        }
        else
        {
          std::unique_ptr<WebCore::ClipperData>::reset[abi:sn180100]((WTF **)(v4 + 16 * v9 + 8), 0);
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
              goto LABEL_24;
            --*(_DWORD *)v12;
          }
        }
      }
LABEL_18:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::remove(uint64_t *a1, WTF ***a2)
{
  WTF **result;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF **)WTF::fastFree((WTF *)result, a2);
    else
      --*(_DWORD *)result;
  }
  v5 = (WTF *)a2[1];
  *a2 = (WTF **)-1;
  a2[1] = 0;
  if (v5)
  {
    v6 = *(_QWORD *)v5;
    *(_QWORD *)v5 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        if (*(_BYTE *)(v6 + 40))
        {
          v13 = *(unsigned int *)(v6 + 32);
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v13])(&v15, v6 + 24);
          *(_DWORD *)(v6 + 32) = -1;
        }
        v14 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v14 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v14])(&v16, v6 + 8);
        *(_DWORD *)(v6 + 16) = -1;
        WTF::fastFree((WTF *)v6, a2);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
    result = (WTF **)WTF::fastFree(v5, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  v7 = *a1;
  if (*a1)
    v8 = *(_DWORD *)(v7 - 12) - 1;
  else
    v8 = -1;
  *(_DWORD *)(v7 - 12) = v8;
  v9 = *a1;
  if (*a1)
  {
    v10 = 6 * *(_DWORD *)(v9 - 12);
    v11 = *(_DWORD *)(v9 - 4);
    if (v10 < v11 && v11 >= 9)
      return WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v11 >> 1, 0);
  }
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::PatternData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::PatternData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF **v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **result;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (WTF **)(v5 + 16 * v10);
      v13 = *v12;
      if (*v12 != (WTF *)-1)
      {
        if (v13)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ~(*((_QWORD *)v13 + 1) << 32) + *((_QWORD *)v13 + 1);
          v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
          v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
          v22 = v18 & (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~((_DWORD)v21 << 27)));
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (WTF **)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
          {
            v28 = *(_QWORD *)v27;
            *(_QWORD *)v27 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
              {
                if (*(_BYTE *)(v28 + 40))
                {
                  v38 = *(unsigned int *)(v28 + 32);
                  if ((_DWORD)v38 != -1)
                    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v38])(&v46, v28 + 24);
                  *(_DWORD *)(v28 + 32) = -1;
                }
                v39 = *(unsigned int *)(v28 + 16);
                if ((_DWORD)v39 != -1)
                  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v39])(&v47, v28 + 8);
                *(_DWORD *)(v28 + 16) = -1;
                WTF::fastFree((WTF *)v28, v9);
              }
              else
              {
                --*(_DWORD *)v28;
              }
            }
            WTF::fastFree(v27, v9);
            v29 = *v26;
            *v26 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
                WTF::fastFree(v29, v9);
              else
                --*(_DWORD *)v29;
            }
          }
          else
          {
            *v26 = 0;
          }
          v30 = *v12;
          *v12 = 0;
          *v26 = v30;
          v31 = v5 + 16 * v10;
          v32 = *(WTF **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v26[1] = v32;
          v33 = *(WTF **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            v34 = *(_QWORD *)v33;
            *(_QWORD *)v33 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 1)
              {
                if (*(_BYTE *)(v34 + 40))
                {
                  v40 = *(unsigned int *)(v34 + 32);
                  if ((_DWORD)v40 != -1)
                    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v40])(&v48, v34 + 24);
                  *(_DWORD *)(v34 + 32) = -1;
                }
                v41 = *(unsigned int *)(v34 + 16);
                if ((_DWORD)v41 != -1)
                  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v41])(&v49, v34 + 8);
                *(_DWORD *)(v34 + 16) = -1;
                WTF::fastFree((WTF *)v34, v9);
              }
              else
              {
                --*(_DWORD *)v34;
              }
            }
            WTF::fastFree(v33, v9);
          }
          v35 = *v12;
          *v12 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 1)
              WTF::fastFree(v35, v9);
            else
              --*(_DWORD *)v35;
          }
          if (v12 == a3)
            v11 = v26;
        }
        else
        {
          v14 = v5 + 16 * v10;
          v15 = *(WTF **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            v16 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 1)
              {
                if (*(_BYTE *)(v16 + 40))
                {
                  v36 = *(unsigned int *)(v16 + 32);
                  if ((_DWORD)v36 != -1)
                    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v36])(&v44, v16 + 24);
                  *(_DWORD *)(v16 + 32) = -1;
                }
                v37 = *(unsigned int *)(v16 + 16);
                if ((_DWORD)v37 != -1)
                  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v37])(&v45, v16 + 8);
                *(_DWORD *)(v16 + 16) = -1;
                WTF::fastFree((WTF *)v16, v9);
              }
              else
              {
                --*(_DWORD *)v16;
              }
            }
            WTF::fastFree(v15, v9);
            v13 = *v12;
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
              WTF::fastFree(v13, v9);
            else
              --*(_DWORD *)v13;
          }
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WebCore::LegacyRenderSVGShape::isEmpty(WebCore::LegacyRenderSVGShape *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 33);
  if (!v1)
    return 1;
  v2 = *(_DWORD *)(v1 + 64);
  if (v2 != 2)
    return !v2;
  result = *(_QWORD *)(v1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

uint64_t WebCore::LegacyRenderSVGShape::fillShape(WebCore::LegacyRenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  return (*(uint64_t (**)(WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)a2 + 176))(a2, *((_QWORD *)this + 33));
}

uint64_t WebCore::LegacyRenderSVGShape::strokeShape(WebCore::LegacyRenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  __int128 *v3;
  const WebCore::Path *v5;
  unsigned int *v6;
  WebCore::GraphicsContext *v7;
  float64x2_t v8[3];

  v3 = (__int128 *)*((_QWORD *)this + 33);
  if ((*(_WORD *)(*((_QWORD *)this + 17) + 8) & 0x400) != 0)
  {
    v7 = a2;
    v5 = (const WebCore::Path *)*((_QWORD *)this + 33);
    v6 = WebCore::LegacyRenderSVGShape::nonScalingStrokeTransform(this);
    WebCore::LegacyRenderSVGShape::nonScalingStrokePath((WebCore::LegacyRenderSVGShape *)v6, v5, v8);
    a2 = v7;
    v3 = &WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath;
  }
  return (*(uint64_t (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)a2 + 184))(a2, v3);
}

__int128 *WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::LegacyRenderSVGShape *this, const WebCore::Path *a2, float64x2_t *a3)
{
  int v4;
  int v5;
  char *v7;
  char v8;

  {
    qword_1EE2F9680 = 0;
    xmmword_1EE2F9660 = 0u;
    unk_1EE2F9670 = 0u;
    WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath = 0u;
    *(_OWORD *)algn_1EE2F9650 = 0u;
    v5 = *((_DWORD *)a2 + 16);
    if (v5 == -1)
    {
      v4 = 0;
      goto LABEL_4;
    }
LABEL_6:
    v7 = (char *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
       + 8;
    ((void (*)(char **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_3[v5])(&v7, (char *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8, (char *)a2 + 8);
    goto LABEL_7;
  }
  v4 = qword_1EE2F9680;
  v5 = *((_DWORD *)a2 + 16);
  if ((_DWORD)qword_1EE2F9680 == -1)
  {
    if (v5 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v5 != -1)
    goto LABEL_6;
LABEL_4:
  ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v4])(&v8, (char *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8);
  LODWORD(qword_1EE2F9680) = -1;
LABEL_7:
  WebCore::Path::transform((WebCore::Path *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, a3);
  return &WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath;
}

unsigned int *WebCore::LegacyRenderSVGShape::nonScalingStrokeTransform(WebCore::LegacyRenderSVGShape *this)
{
  uint64_t v1;
  unsigned int *result;
  void *v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196563984);
  }
  *(_DWORD *)(v1 + 24) += 2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 1320))(v1, 1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return result;
}

BOOL WebCore::LegacyRenderSVGShape::shapeDependentStrokeContains(_QWORD *a1, float *a2, int a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  float64x2_t v20[3];
  char *v21;

  if (a3 != 1 && (*(_WORD *)(a1[17] + 8) & 0x400) != 0)
  {
    v5 = *(_QWORD *)(a1[3] + 8);
    if ((*(_WORD *)(v5 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196563C34);
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 1184))(*(_QWORD *)(a1[3] + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196563C54);
    }
    *(_DWORD *)(v5 + 24) += 2;
    (*(void (**)(float64x2_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 1320))(v20, v5, 1);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    v7 = a1[33];
    {
      v8 = qword_1EE2F9680;
      v9 = *(_DWORD *)(v7 + 64);
      if ((_DWORD)qword_1EE2F9680 == -1)
      {
        if (v9 == -1)
          goto LABEL_21;
      }
      else if (v9 == -1)
      {
LABEL_10:
        ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v8])(&v21, (char *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8);
        LODWORD(qword_1EE2F9680) = -1;
        goto LABEL_21;
      }
    }
    else
    {
      qword_1EE2F9680 = 0;
      xmmword_1EE2F9660 = 0u;
      unk_1EE2F9670 = 0u;
      WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath = 0u;
      *(_OWORD *)algn_1EE2F9650 = 0u;
      v9 = *(_DWORD *)(v7 + 64);
      if (v9 == -1)
      {
        v8 = 0;
        goto LABEL_10;
      }
    }
    v21 = (char *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
        + 8;
    ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_3[v9])(&v21);
LABEL_21:
    WebCore::Path::transform((WebCore::Path *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, v20);
    v21 = (char *)vcvt_f32_f64(vaddq_f64(v20[2], vmlaq_n_f64(vmulq_n_f64(v20[1], a2[1]), v20[0], *a2)));
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E344F938;
    v16[1] = a1;
    v19 = v16;
    if ((_DWORD)qword_1EE2F9680 == 2)
    {
      if (*((_QWORD *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
           + 1)
        && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
                                                 + 1)
                                              + 200))(*((_QWORD *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
                                                        + 1)) & 1) != 0)
      {
        goto LABEL_26;
      }
    }
    else if (!(_DWORD)qword_1EE2F9680)
    {
LABEL_26:
      v14 = 0;
LABEL_28:
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      return v14;
    }
    v17 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath);
    v14 = WebCore::PathCG::strokeContains(v17, (float *)&v21, &v19);
    goto LABEL_28;
  }
  v10 = a1[33];
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E344F960;
  v11[1] = a1;
  *(_QWORD *)&v20[0].f64[0] = v11;
  v12 = *(_DWORD *)(v10 + 64);
  if (v12 == 2)
  {
    v13 = *(_QWORD *)(v10 + 8);
    if (v13 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 200))(v13) & 1) != 0)
      goto LABEL_16;
LABEL_17:
    v15 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v10);
    v14 = WebCore::PathCG::strokeContains(v15, a2, v20);
    goto LABEL_18;
  }
  if (v12)
    goto LABEL_17;
LABEL_16:
  v14 = 0;
LABEL_18:
  (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  return v14;
}

BOOL WebCore::LegacyRenderSVGShape::shapeDependentFillContains(uint64_t a1, float *a2, BOOL a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 264);
  v6 = *(_DWORD *)(v5 + 64);
  if (v6 == 2)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7) & 1) != 0)
      return 0;
LABEL_5:
    v8 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v5);
    return WebCore::PathCG::contains(v8, a2, a3);
  }
  if (v6)
    goto LABEL_5;
  return 0;
}

float WebCore::LegacyRenderSVGShape::strokeWidth(WebCore::LegacyRenderSVGShape *this)
{
  uint64_t v1;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  WebCore::Length *v7;
  int v8;
  float v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  float v21;
  uint64_t v22;
  WTF *v23;
  float v24;
  float v25;
  unint64_t v26;
  char v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32[3];
  char v33;
  char v34;
  _DWORD v35[4];
  int v36;
  char v37;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196563F04);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196563F24);
  }
  *(_DWORD *)(v1 + 24) += 2;
  if ((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v14 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 8) = v1;
    *(_BYTE *)(v14 + 32) = 0;
    v15 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v15 & 0xFFFF000000000000 | v14;
    v16 = v15 & 0xFFFFFFFFFFFFLL;
    if ((v15 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v16);
        v19 = *(unsigned int *)(v16 + 28);
        if ((_DWORD)v19)
        {
          v31 = v16;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v19));
          v16 = v31;
        }
        v20 = *(WTF **)(v16 + 16);
        if (v20)
        {
          *(_QWORD *)(v16 + 16) = 0;
          *(_DWORD *)(v16 + 24) = 0;
          v30 = v16;
          WTF::fastFree(v20, v3);
          v16 = v30;
        }
        WTF::fastFree((WTF *)v16, v3);
      }
    }
  }
  v4 = (unsigned int *)(*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFLL);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v34 = 0;
  v32[1] = 0;
  v32[2] = 0;
  v32[0] = (WTF *)v4;
  v33 = 0;
  v6 = (unsigned __int8 *)*((_QWORD *)this + 13);
  v7 = (WebCore::Length *)(v6 + 244);
  v8 = v6[248];
  if (v8 == 4)
  {
    if (v6[250])
      v9 = *(float *)v7;
    else
      v9 = (float)*(int *)v7;
  }
  else if (v8 == 11)
  {
    v26 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v32);
    v25 = *((float *)&v26 + 1);
    v24 = *(float *)&v26;
    if (!v27)
    {
      v25 = 0.0;
      v24 = 0.0;
    }
    v28 = hypotf(v24, v25);
    WebCore::Length::nonNanCalculatedValue(v7, v28 / 1.4142);
    v9 = v29;
  }
  else
  {
    v9 = 0.0;
    if (v8 == 3)
    {
      v21 = *((float *)v6 + 61);
      if (!v6[250])
        v21 = (float)SLODWORD(v21);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v32, 2, (uint64_t)v35, v21 / 100.0);
      if (v36 != -1)
      {
        if (!v36)
          v9 = *(float *)v35;
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v36])(&v37, v35);
      }
    }
  }
  v10 = v32[0];
  v32[0] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v22 = *((unsigned int *)v10 + 7);
      if ((_DWORD)v22)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v22));
      v23 = (WTF *)*((_QWORD *)v10 + 2);
      if (v23)
      {
        *((_QWORD *)v10 + 2) = 0;
        *((_DWORD *)v10 + 6) = 0;
        WTF::fastFree(v23, v3);
      }
      WTF::fastFree(v10, v3);
    }
  }
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v9;
}

float WebCore::LegacyRenderSVGShape::approximateStrokeBoundingBox(WebCore::LegacyRenderSVGShape *this)
{
  if ((*((_BYTE *)this + 208) & 0x70) != 0)
    return *((float *)this + 44);
  else
    return 0.0;
}

void WebCore::LegacyRenderSVGShape::layout(WebCore::LegacyRenderSVGShape *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BOOL4 v7;
  char v8;
  int v9;
  _WORD *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int j;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  WebCore *v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  WTF *v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  int i;
  uint64_t v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  WebCore::SVGDocumentExtensions *v99;
  WTF *v100;
  void *v101;
  WebCore::LegacyRenderSVGResourceFilter *v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  WebCore::SVGDocumentExtensions *v116;
  WTF *v117;
  void *v118;
  int v119;
  int v120;
  int v121;
  void *v122;
  WTF *v123;
  _BOOL4 v124;
  __int128 v125[3];
  WebCore::LegacyRenderSVGShape *v126;
  uint64_t v127;
  __int128 v128;
  char v129;
  char v130;
  char v131;
  __int16 v132;
  WTF *v133;

  v2 = *((_DWORD *)this + 5);
  if ((~v2 & 0x208) == 0)
  {
    if ((v2 & 0x8000) == 0)
      goto LABEL_205;
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965648BCLL);
    }
    v83 = *((_QWORD *)this + 18);
    if (!v83 || (*(_BYTE *)(v83 + 25) & 8) == 0)
    {
LABEL_205:
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 528)
                                             + 8)
                                 + 288)
                     + 476))
      {
        v3 = *((_QWORD *)this + 4);
        if (!v3
          || (v4 = *(_QWORD *)(v3 + 8)) == 0
          || (*(_BYTE *)(v4 + 52) & 7) != 4
          || (~*(unsigned __int8 *)(v4 + 53) & 3) != 0)
        {
          v5 = 1;
          goto LABEL_8;
        }
        v82 = *(_DWORD *)(v4 + 16) + 1;
        *(_DWORD *)(v4 + 16) = v82;
        if (*(_BYTE *)(v4 + 210)
          || (v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 800))(v4),
              v82 = *(_DWORD *)(v4 + 16),
              (v84 & 1) != 0))
        {
          if (v82)
          {
            v5 = 0;
LABEL_117:
            *(_DWORD *)(v4 + 16) = v82 - 1;
            goto LABEL_8;
          }
        }
        else if (v82)
        {
          v5 = 1;
          goto LABEL_117;
        }
        __break(0xC471u);
        JUMPOUT(0x19656489CLL);
      }
    }
  }
  v5 = 0;
LABEL_8:
  v130 = 0;
  v126 = this;
  v127 = 0;
  v128 = 0uLL;
  v129 = 0;
  v131 = v5;
  v132 = 0;
  if (v5)
  {
    WebCore::RenderObject::containerForRepaint(this, (uint64_t)v125);
    v127 = *((_QWORD *)&v125[0] + 1);
    if (*((_QWORD *)&v125[0] + 1))
    {
      v42 = *(_DWORD *)(*((_QWORD *)&v125[0] + 1) + 16);
      if (!v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19656487CLL);
      }
      *(_DWORD *)(*((_QWORD *)&v125[0] + 1) + 16) = v42 - 1;
    }
    (*(void (**)(__int128 *__return_ptr, WebCore::LegacyRenderSVGShape *))(*(_QWORD *)this + 464))(&v128, this);
  }
  v6 = *((_BYTE *)this + 208);
  v7 = (v6 & 3) != 0;
  if ((v6 & 3) != 0)
  {
    (*(void (**)(WebCore::LegacyRenderSVGShape *))(*(_QWORD *)this + 824))(this);
    v8 = *((_BYTE *)this + 208);
    *((_BYTE *)this + 208) = v8 & 0xFD;
    if ((v8 & 0x70) != 0)
    {
      v9 = *((_DWORD *)this + 44);
      v119 = *((_DWORD *)this + 45);
      v120 = *((_DWORD *)this + 46);
      v121 = *((_DWORD *)this + 47);
    }
    else
    {
      v121 = 0;
      v120 = 0;
      v119 = 0;
      v9 = 0;
    }
    *((_DWORD *)this + 48) = v9;
    *((_DWORD *)this + 49) = v119;
    *((_DWORD *)this + 50) = v120;
    *((_DWORD *)this + 51) = v121;
    if ((*((_BYTE *)this + 70) & 0x10) != 0)
    {
      v50 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
      if ((*(_QWORD *)(v50[85] + 680) & 0x800000000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196564B08);
      }
      if (!v50[226])
      {
        v124 = v7;
        v106 = WTF::fastMalloc((WTF *)0x50);
        *(_DWORD *)v106 = 0;
        v107 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v50);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 + 1, v107));
        *(_QWORD *)(v106 + 8) = v107;
        *(_OWORD *)(v106 + 16) = 0u;
        *(_OWORD *)(v106 + 32) = 0u;
        v109 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v109 = 0;
        *(_QWORD *)(v106 + 48) = v109;
        *(_QWORD *)(v106 + 56) = 0;
        *(_QWORD *)(v106 + 64) = 0;
        v111 = v50[66];
        if (!v111)
          goto LABEL_178;
        v112 = *(_QWORD *)(v111 + 8);
        if (v112
          && (v113 = *(_QWORD *)(v112 + 24)) != 0
          && (v114 = *(_QWORD *)(v113 + 8)) != 0
          && (*(_WORD *)(v114 + 658) & 4) != 0)
        {
          v115 = *(_BYTE *)(v114 + 545) == 0;
        }
        else
        {
LABEL_178:
          v115 = 1;
        }
        *(_BYTE *)(v106 + 72) = v115;
        v116 = (WebCore::SVGDocumentExtensions *)v50[226];
        v50[226] = v106;
        v7 = v124;
        if (v116)
        {
          WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v116, v110);
          if (*(_DWORD *)v117)
          {
            *((_OWORD *)v117 + 3) = 0u;
            *((_OWORD *)v117 + 4) = 0u;
            *((_OWORD *)v117 + 1) = 0u;
            *((_OWORD *)v117 + 2) = 0u;
            *(_OWORD *)v117 = 0u;
          }
          else
          {
            WTF::fastFree(v117, v118);
          }
          v7 = v124;
        }
      }
      v51 = **(_QWORD **)(v50[226] + 48);
      if (v51)
      {
        v52 = *(_DWORD *)(v51 - 8);
        v53 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
        v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
        v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
        v56 = v52 & ((v55 >> 31) ^ v55);
        for (i = 1; ; ++i)
        {
          v58 = v56;
          v59 = *(_QWORD *)(v51 + 16 * v56);
          if (v59 != -1)
          {
            if (!v59)
              goto LABEL_13;
            if (*(WebCore::LegacyRenderSVGShape **)(v59 + 8) == this)
              break;
          }
          v56 = (v58 + i) & v52;
        }
        v60 = *(_QWORD ***)(v51 + 16 * v58 + 8);
        if (v60)
        {
          v61 = *v60;
          if (*v60)
          {
            v62 = v61[1];
            if (!v62
              || (v102 = *(WebCore::LegacyRenderSVGResourceFilter **)(v62 + 8)) == 0
              || (*((float *)this + 48) = WebCore::LegacyRenderSVGResourceFilter::resourceBoundingBox(v102, (uint64_t)this), *((_DWORD *)this + 49) = v103, *((_DWORD *)this + 50) = v104, *((_DWORD *)this + 51) = v105, (v61 = *v60) != 0))
            {
              if (!*v61)
                goto LABEL_110;
              v63 = *(_QWORD *)(*v61 + 8);
              if (!v63)
                goto LABEL_110;
              WebCore::LegacyRenderSVGResourceClipper::resourceBoundingBox(v63, (uint64_t)this, 0);
              v68 = *((float *)this + 48);
              v69 = *((float *)this + 49);
              if (v68 >= v64)
                v70 = *((float *)this + 48);
              else
                v70 = v64;
              v71 = *((float *)this + 51);
              v72 = v68 + *((float *)this + 50);
              if (v69 >= v65)
                v73 = *((float *)this + 49);
              else
                v73 = v65;
              v74 = v64 + v66;
              if (v74 >= v72)
                v74 = v72;
              v75 = v65 + v67;
              if (v75 >= (float)(v69 + v71))
                v75 = v69 + v71;
              v76 = v70 < v74 && v73 < v75;
              if (!v76)
              {
                v70 = 0.0;
                v73 = 0.0;
                v74 = 0.0;
                v75 = 0.0;
              }
              *((float *)this + 48) = v70;
              *((float *)this + 49) = v73;
              *((float *)this + 50) = v74 - v70;
              *((float *)this + 51) = v75 - v73;
              v61 = *v60;
              if (*v60)
              {
LABEL_110:
                v77 = v61[2];
                if (v77)
                {
                  v78 = *(_QWORD *)(v77 + 8);
                  if (v78)
                  {
                    LODWORD(v125[0]) = WebCore::LegacyRenderSVGResourceMasker::resourceBoundingBox(v78, (uint64_t)this, 0);
                    *(_QWORD *)((char *)v125 + 4) = __PAIR64__(v80, v79);
                    HIDWORD(v125[0]) = v81;
                    WebCore::FloatRect::intersect((float32x2_t *)this + 24, (float32x2_t *)v125);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_13:
    v6 = *((_BYTE *)this + 208) & 0xFE;
    *((_BYTE *)this + 208) = v6;
  }
  if ((v6 & 4) != 0)
  {
    v10 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
    if ((v10[14] & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19656483CLL);
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19656485CLL);
    }
    (*(void (**)(__int128 *__return_ptr, _WORD *))(*(_QWORD *)v10 + 1344))(v125, v10);
    v11 = v125[1];
    *(_OWORD *)((char *)this + 216) = v125[0];
    *(_OWORD *)((char *)this + 232) = v11;
    *(_OWORD *)((char *)this + 248) = v125[2];
    *((_BYTE *)this + 208) &= ~4u;
    v7 = 1;
  }
  if ((~*((_DWORD *)this + 5) & 0x208) != 0 || (*(_WORD *)((_BYTE *)this + 69) & 0x1000) == 0)
    goto LABEL_41;
  v12 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if ((*(_QWORD *)(v12[85] + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196564AC4);
  }
  if (!v12[226])
  {
    v88 = v7;
    v89 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v89 = 0;
    v90 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v12);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 + 1, v90));
    *(_QWORD *)(v89 + 8) = v90;
    *(_OWORD *)(v89 + 16) = 0u;
    *(_OWORD *)(v89 + 32) = 0u;
    v92 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v92 = 0;
    *(_QWORD *)(v89 + 48) = v92;
    *(_QWORD *)(v89 + 56) = 0;
    *(_QWORD *)(v89 + 64) = 0;
    v94 = v12[66];
    if (!v94)
      goto LABEL_162;
    v95 = *(_QWORD *)(v94 + 8);
    if (v95
      && (v96 = *(_QWORD *)(v95 + 24)) != 0
      && (v97 = *(_QWORD *)(v96 + 8)) != 0
      && (*(_WORD *)(v97 + 658) & 4) != 0)
    {
      v98 = *(_BYTE *)(v97 + 545) == 0;
    }
    else
    {
LABEL_162:
      v98 = 1;
    }
    *(_BYTE *)(v89 + 72) = v98;
    v99 = (WebCore::SVGDocumentExtensions *)v12[226];
    v12[226] = v89;
    v7 = v88;
    if (v99)
    {
      WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v99, v93);
      if (*(_DWORD *)v100)
      {
        *((_OWORD *)v100 + 3) = 0u;
        *((_OWORD *)v100 + 4) = 0u;
        *((_OWORD *)v100 + 1) = 0u;
        *((_OWORD *)v100 + 2) = 0u;
        *(_OWORD *)v100 = 0u;
      }
      else
      {
        WTF::fastFree(v100, v101);
      }
      v7 = v88;
    }
  }
  v13 = **(_QWORD **)(v12[226] + 48);
  if (!v13)
    goto LABEL_41;
  v14 = *(_DWORD *)(v13 - 8);
  v15 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  for (j = 1; ; v18 = (v20 + j++) & v14)
  {
    v20 = v18;
    v21 = *(_QWORD *)(v13 + 16 * v18);
    if (v21 != -1)
    {
      if (!v21)
        goto LABEL_41;
      if (*(WebCore::LegacyRenderSVGShape **)(v21 + 8) == this)
        break;
    }
  }
  v22 = *(uint64_t **)(v13 + 16 * v20 + 8);
  if (!v22)
    goto LABEL_41;
  v23 = *v22;
  if ((*((_BYTE *)this + 20) & 8) != 0)
  {
    if (!v23)
      goto LABEL_33;
  }
  else
  {
    if (!v23)
      goto LABEL_41;
    v87 = *(_QWORD *)(v23 + 8);
    if (!v87 || !*(_QWORD *)(v87 + 8))
      goto LABEL_41;
  }
  v24 = *(_QWORD *)(v23 + 16);
  if (v24 && *(_QWORD *)(v24 + 8))
    goto LABEL_149;
  v25 = *(_QWORD *)(v23 + 8);
  if (v25)
  {
    if (*(_QWORD *)(v25 + 8))
      goto LABEL_149;
  }
LABEL_33:
  v26 = (_QWORD *)v22[2];
  if (!v26)
    goto LABEL_41;
  if (!*v26 || (v27 = *(_QWORD *)(*v26 + 8)) == 0)
  {
LABEL_38:
    v28 = v26[1];
    if (!v28)
      goto LABEL_41;
    v29 = *(_QWORD *)(v28 + 8);
    if (!v29 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v29 + 216) + 56))(v29 + 216) != 2)
      goto LABEL_41;
    goto LABEL_149;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v27 + 216) + 56))(v27 + 216) != 2)
  {
    v26 = (_QWORD *)v22[2];
    if (!v26)
      goto LABEL_41;
    goto LABEL_38;
  }
LABEL_149:
  WebCore::SVGResources::removeClientFromCache(v22, this, 0);
LABEL_41:
  if (!v7)
    goto LABEL_64;
  v30 = *((_QWORD *)this + 4);
  if (!v30)
    goto LABEL_64;
  v31 = *(_QWORD *)(v30 + 8);
  if (!v31)
    goto LABEL_64;
  *(_DWORD *)(v31 + 16) += 2;
  v32 = v31;
  while (1)
  {
    v33 = *(unsigned __int8 *)(v32 + 46);
    if (v33 == 83 || v33 == 103)
      goto LABEL_47;
    v35 = *(_BYTE *)(v32 + 52) & 7;
    if (v35 == 1)
    {
      if ((*(_BYTE *)(v32 + 53) & 8) != 0)
        goto LABEL_47;
    }
    else if (v35 == 4)
    {
      goto LABEL_47;
    }
    v36 = v33 - 71;
    v76 = v36 > 0xF;
    v37 = (1 << v36) & 0xA001;
    if (v76 || v37 == 0)
      goto LABEL_60;
LABEL_47:
    v34 = *(_BYTE *)(v32 + 52) & 7;
    if ((v34 == 3 || v34 == 4) && (*(_BYTE *)(v32 + 53) & 0x20) != 0)
      break;
    v85 = *(_QWORD *)(v32 + 32);
    if (v85)
    {
      v85 = *(_QWORD *)(v85 + 8);
      if (v85)
        ++*(_DWORD *)(v85 + 16);
    }
    v86 = *(_DWORD *)(v32 + 16);
    if (!v86)
    {
      __break(0xC471u);
      JUMPOUT(0x196564A98);
    }
    *(_DWORD *)(v32 + 16) = v86 - 1;
    v32 = v85;
    if (!v85)
      goto LABEL_62;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 216))(v32);
LABEL_60:
  v39 = *(_DWORD *)(v32 + 16);
  if (!v39)
  {
    __break(0xC471u);
    JUMPOUT(0x1965647FCLL);
  }
  *(_DWORD *)(v32 + 16) = v39 - 1;
LABEL_62:
  v40 = *(_DWORD *)(v31 + 16);
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x19656481CLL);
  }
  *(_DWORD *)(v31 + 16) = v40 - 1;
LABEL_64:
  if (v131)
  {
    if ((_BYTE)v132)
    {
      v45 = 0;
      v46 = 1;
      v43 = v126;
      v44 = v127;
    }
    else
    {
      v43 = v126;
      v44 = v127;
      if ((*((_DWORD *)v126 + 5) & 8) != 0)
      {
        v45 = 0;
        v46 = 1;
      }
      else
      {
        v46 = 0;
        v45 = HIBYTE(v132) != 0;
      }
    }
    (*(void (**)(__int128 *__return_ptr, WebCore *, uint64_t, _BOOL8))(*(_QWORD *)v43 + 464))(v125, v43, v44, v45);
    if (!v44)
    {
      v47 = 0;
      goto LABEL_78;
    }
    v47 = *(_QWORD *)(v44 + 8);
    if (!v47)
    {
      v47 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = v44;
      v123 = *(WTF **)(v44 + 8);
      *(_QWORD *)(v44 + 8) = v47;
      if (v123)
      {
        if (*(_DWORD *)v123 == 1)
        {
          WTF::fastFree(v123, v122);
          v47 = *(_QWORD *)(v44 + 8);
          if (!v47)
          {
LABEL_78:
            v133 = (WTF *)v47;
            WebCore::RenderElement::repaintAfterLayoutIfNeeded(v43, &v133, (const WebCore::FillLayer *)v46, &v128, v125);
            v49 = v133;
            v133 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 1)
                WTF::fastFree(v49, v48);
              else
                --*(_DWORD *)v49;
            }
            goto LABEL_65;
          }
        }
        else
        {
          --*(_DWORD *)v123;
        }
      }
    }
    ++*(_DWORD *)v47;
    goto LABEL_78;
  }
LABEL_65:
  v41 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v41;
  if (this && (*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v41 & 0xFFDFFE07;
}

_QWORD *WebCore::SVGResourcesCache::clientLayoutChanged(_QWORD *this, WebCore::RenderElement *a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x1000) != 0)
  {
    v2 = (uint64_t)this;
    v3 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40) + 8);
    if ((*(_QWORD *)(*((_QWORD *)v3 + 85) + 680) & 0x800000000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196564D18);
    }
    this = (_QWORD *)WebCore::Document::svgExtensions(v3);
    v4 = *(_QWORD *)this[6];
    if (v4)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      for (i = 1; ; ++i)
      {
        v11 = v9;
        v12 = *(_QWORD *)(v4 + 16 * v9);
        if (v12 != -1)
        {
          if (!v12)
            return this;
          if (*(_QWORD *)(v12 + 8) == v2)
            break;
        }
        v9 = (v11 + i) & v5;
      }
      v13 = *(uint64_t **)(v4 + 16 * v11 + 8);
      if (v13)
      {
        v14 = *v13;
        if ((*(_BYTE *)(v2 + 20) & 8) != 0)
        {
          if (!v14)
            goto LABEL_14;
          goto LABEL_12;
        }
        if (v14)
        {
          v19 = *(_QWORD *)(v14 + 8);
          if (v19)
          {
            if (*(_QWORD *)(v19 + 8))
            {
LABEL_12:
              v15 = *(_QWORD *)(v14 + 16);
              if (v15 && *(_QWORD *)(v15 + 8))
                return WebCore::SVGResources::removeClientFromCache(v13, (WebCore::RenderElement *)v2, 0);
              v16 = *(_QWORD *)(v14 + 8);
              if (v16)
              {
                if (*(_QWORD *)(v16 + 8))
                  return WebCore::SVGResources::removeClientFromCache(v13, (WebCore::RenderElement *)v2, 0);
              }
LABEL_14:
              v17 = (_QWORD *)v13[2];
              if (!v17)
                return this;
              if (*v17)
              {
                this = *(_QWORD **)(*v17 + 8);
                if (this)
                {
                  this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(this[27] + 56))(this + 27);
                  if ((_DWORD)this == 2)
                    return WebCore::SVGResources::removeClientFromCache(v13, (WebCore::RenderElement *)v2, 0);
                  v17 = (_QWORD *)v13[2];
                  if (!v17)
                    return this;
                }
              }
              v18 = v17[1];
              if (!v18)
                return this;
              this = *(_QWORD **)(v18 + 8);
              if (!this)
                return this;
              this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(this[27] + 56))(this + 27);
              if ((_DWORD)this != 2)
                return this;
              return WebCore::SVGResources::removeClientFromCache(v13, (WebCore::RenderElement *)v2, 0);
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::LegacyRenderSVGShape::paint(WebCore::LegacyRenderSVGShape *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::EventRegionContext *v5;
  WebCore::EventRegionContext *v6;
  const WebCore::PaintInfo *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  WebCore::Color *v12;
  WebCore::SVGRenderStyle *v13;
  _DWORD *v14;
  unint64_t v15;
  char *v16;
  uint64_t i;
  int v18;
  WebCore::RenderElement *v19;
  WebCore::RenderElement *v20;
  WebCore::LegacyRenderSVGResource *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  BOOL v28;
  __int16 v29;
  WebCore::RenderElement *v30;
  WebCore::RenderElement *v31;
  WebCore::LegacyRenderSVGResource *v32;
  void *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  double v38;
  double v40;
  double v41;
  double v42;
  double v43;
  void *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  _BOOL4 v61;
  _BOOL4 v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  WTF *v66;
  void *v67;
  float v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int32x4_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int8x16_t v79;
  _OWORD *v80;
  WebCore::Node *v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  double v93;
  double v94;
  double v95;
  double v96;
  unint64_t v97;
  unsigned int *v98;
  int8x16_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  char v104;

  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0
    || (*((_DWORD *)this + 30) & 0x30) == 0x10
    || ((*(uint64_t (**)(WebCore::LegacyRenderSVGShape *, WebCore::PaintInfo *, const WebCore::LayoutPoint *))(*(_QWORD *)this + 832))(this, a2, a3) & 1) != 0)
  {
    return;
  }
  if (*((_WORD *)a2 + 8) == 4096)
  {
    v5 = (WebCore::EventRegionContext *)*((_QWORD *)a2 + 9);
    if (v5)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v5 + 16))(*((_QWORD *)a2 + 9)))
        v6 = v5;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v86 = 0u;
    v87 = 0u;
    v85 = *((_OWORD *)this + 9);
    WebCore::EventRegionContext::unite(v6, (const WebCore::FloatRoundedRect *)&v85, this, (WebCore::LegacyRenderSVGShape *)((char *)this + 80), 0);
    return;
  }
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10)) & 1) != 0)
    return;
  if (*((_WORD *)a2 + 8) != 8)
    return;
  v91 = *((_OWORD *)this + 12);
  if (!WebCore::SVGRenderSupport::paintInfoIntersectsRepaintRect((WebCore::SVGRenderSupport *)&v91, (WebCore::LegacyRenderSVGShape *)((char *)this + 216), a2, v7))return;
  v8 = *((_OWORD *)a2 + 3);
  v87 = *((_OWORD *)a2 + 2);
  v88 = v8;
  v89 = *((_OWORD *)a2 + 4);
  v9 = *((_QWORD *)a2 + 10);
  v90 = v9;
  v10 = *((_OWORD *)a2 + 1);
  v85 = *(_OWORD *)a2;
  v86 = v10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
  WebCore::PaintInfo::applyTransform((WebCore::PaintInfo *)&v85, (WebCore::LegacyRenderSVGShape *)((char *)this + 216));
  if ((unsigned __int16)v86 != 8)
    goto LABEL_119;
  v83 = 0u;
  memset(v84, 0, 21);
  v82 = 0u;
  WebCore::SVGRenderingContext::prepareToRenderSVGContent(&v82, this, (const WebCore::RenderElement *)&v85, 1);
  if ((v84[1] & 1) == 0)
    goto LABEL_118;
  v13 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 17);
  ++*(_DWORD *)v13;
  if ((*((_WORD *)v13 + 2) & 3) == 2)
  {
    v14 = (_DWORD *)v90;
    if (*(_BYTE *)(v90 + 342))
    {
      *(_BYTE *)(v90 + 342) = 0;
      v14[46] |= 0x800u;
    }
    (*(void (**)(_DWORD *, _DWORD *))(*(_QWORD *)v14 + 88))(v14, v14 + 2);
  }
  *((_BYTE *)this + 208) = *((_BYTE *)this + 208) & 0xF7 | (8 * (BYTE4(v84[1]) == 0));
  v15 = (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 13) + 236) >> 11) & 7) - 2;
  if (v15 > 4)
    v16 = &WebCore::RenderStyle::paintTypesForPaintOrder(WebCore::PaintOrder)::fill;
  else
    v16 = (char *)*(&off_1E344F9E8 + v15);
  for (i = 0; i != 3; ++i)
  {
    v18 = v16[i];
    if (v18 == 2)
    {
      (*(void (**)(WebCore::LegacyRenderSVGShape *, __int128 *))(*(_QWORD *)this + 864))(this, &v85);
      continue;
    }
    if (v18 != 1)
    {
      if (v16[i])
        continue;
      v97 = 0;
      v98 = (unsigned int *)v90;
      v19 = WebCore::LegacyRenderSVGResource::fillPaintingResource(this, (WebCore::LegacyRenderSVGShape *)((char *)this + 80), (const WebCore::RenderStyle *)&v97, v12);
      if (!v19)
        goto LABEL_31;
      v20 = v19;
      v21 = (WebCore::LegacyRenderSVGResource *)(*(uint64_t (**)(WebCore::RenderElement *, WebCore::LegacyRenderSVGShape *, char *, unsigned int **, uint64_t))(*(_QWORD *)v19 + 32))(v19, this, (char *)this + 80, &v98, 1);
      if ((v21 & 1) != 0)
      {
        (*(void (**)(WebCore::RenderElement *, WebCore::LegacyRenderSVGShape *, unsigned int **, uint64_t, _QWORD, WebCore::LegacyRenderSVGShape *))(*(_QWORD *)v20 + 40))(v20, this, &v98, 1, 0, this);
LABEL_31:
        if ((v97 & 0x8000000000000) != 0)
        {
          v22 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFLL);
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v22);
            WTF::fastFree((WTF *)v22, v11);
          }
        }
        continue;
      }
      if ((v97 & 0x4000000000000) == 0)
        goto LABEL_31;
      v34 = WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(v21);
      v35 = v34[1];
      if ((v35 & 0x8000000000000) != 0)
      {
        if ((v97 & 0x8000000000000) == 0)
          goto LABEL_59;
        v99 = *(int8x16_t *)((v35 & 0xFFFFFFFFFFFFLL) + 4);
        v92 = *(_OWORD *)((v97 & 0xFFFFFFFFFFFFLL) + 4);
        v61 = WebCore::operator==<float,4ul>((float *)v99.i32, (float *)&v92);
        v35 = v34[1];
        if (!v61 || HIBYTE(v35) != HIBYTE(v97) || BYTE6(v35) != BYTE6(v97))
          goto LABEL_59;
      }
      else if (v35 != v97 || (v97 & 0x8000000000000) != 0)
      {
LABEL_59:
        if ((v35 & 0x8000000000000) != 0)
        {
          v55 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            atomic_store(1u, v55);
            WTF::fastFree((WTF *)v55, v33);
          }
        }
        v36 = v97;
        v34[1] = v97;
        if ((v36 & 0x8000000000000) != 0)
        {
          v51 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
        }
      }
      if ((WebCore::LegacyRenderSVGResourceSolidColor::applyResource((uint64_t)v34, this, (WebCore::LegacyRenderSVGShape *)((char *)this + 80), &v98, 1) & 1) != 0)WebCore::LegacyRenderSVGResourceSolidColor::postApplyResource((uint64_t)v34, (uint64_t)this, (uint64_t *)&v98, 1, 0, (uint64_t)this);
      goto LABEL_31;
    }
    v25 = *((_QWORD *)this + 17);
    if (*(_BYTE *)(*(_QWORD *)(v25 + 24) + 80) == 1)
      continue;
    v26 = (unsigned int *)v90;
    v27 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v27 + 248))
      v28 = *(_BYTE *)(v27 + 248) == 11;
    else
      v28 = 1;
    if (!v28)
    {
      if (*(_BYTE *)(v27 + 250))
      {
        if (*(float *)(v27 + 244) == 0.0)
          continue;
      }
      else if (!*(_DWORD *)(v27 + 244))
      {
        continue;
      }
    }
    v29 = *(_WORD *)(v25 + 8);
    if ((v29 & 0x400) == 0)
      goto LABEL_47;
    v81 = *(WebCore::Node **)(*((_QWORD *)this + 3) + 8);
    if ((*((_WORD *)v81 + 14) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965656B4);
    }
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v81 + 1184))(v81) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965656D4);
    }
    *((_DWORD *)v81 + 6) += 2;
    (*(void (**)(__int128 *__return_ptr, WebCore::Node *, uint64_t))(*(_QWORD *)v81 + 1320))(&v92, v81, 1);
    if (*((_DWORD *)v81 + 6) == 2)
    {
      if ((*((_WORD *)v81 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v81, v11);
    }
    else
    {
      *((_DWORD *)v81 + 6) -= 2;
    }
    v37 = *(double *)&v92 * v94 - *((double *)&v92 + 1) * v93;
    v38 = fabs(v37);
    if ((unint64_t)(*(_QWORD *)&v38 - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&v38 - 1) <= 0xFFFFFFFFFFFFELL)
    {
      if (*(double *)&v92 == 1.0 && *((double *)&v92 + 1) == 0.0 && v93 == 0.0 && v94 == 1.0)
      {
        v42 = -v95;
        v43 = -v96;
        v99.i64[1] = 0;
        v100 = 0.0;
        v40 = 1.0;
        v41 = 1.0;
      }
      else
      {
        v40 = v94 / v37;
        v41 = *(double *)&v92 / v37;
        v42 = (v93 * v96 - v94 * v95) / v37;
        *(double *)&v99.i64[1] = -*((double *)&v92 + 1) / v37;
        v100 = -v93 / v37;
        v43 = (*((double *)&v92 + 1) * v95 - *(double *)&v92 * v96) / v37;
      }
      *(double *)v99.i64 = v40;
      v101 = v41;
      v102 = v42;
      v103 = v43;
      v104 = 1;
      (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v26 + 96))(v26, 1);
      (*(void (**)(unsigned int *, int8x16_t *))(*(_QWORD *)v26 + 656))(v26, &v99);
LABEL_47:
      v97 = 0;
      v98 = v26;
      v30 = WebCore::LegacyRenderSVGResource::strokePaintingResource(this, (WebCore::LegacyRenderSVGShape *)((char *)this + 80), (const WebCore::RenderStyle *)&v97, v12);
      if (!v30)
        goto LABEL_50;
      v31 = v30;
      v32 = (WebCore::LegacyRenderSVGResource *)(*(uint64_t (**)(WebCore::RenderElement *, WebCore::LegacyRenderSVGShape *, char *, unsigned int **, uint64_t))(*(_QWORD *)v30 + 32))(v30, this, (char *)this + 80, &v98, 2);
      if ((v32 & 1) != 0)
      {
        (*(void (**)(WebCore::RenderElement *, WebCore::LegacyRenderSVGShape *, unsigned int **, uint64_t, _QWORD, WebCore::LegacyRenderSVGShape *))(*(_QWORD *)v31 + 40))(v31, this, &v98, 2, 0, this);
        goto LABEL_50;
      }
      if ((v97 & 0x4000000000000) == 0)
      {
LABEL_50:
        if ((v97 & 0x8000000000000) != 0)
        {
          v48 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFLL);
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            atomic_store(1u, v48);
            WTF::fastFree((WTF *)v48, v11);
          }
        }
        if ((v29 & 0x400) != 0)
          (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v26 + 104))(v26, 1);
        continue;
      }
      v45 = WebCore::LegacyRenderSVGResource::sharedSolidPaintingResource(v32);
      v46 = v45[1];
      if ((v46 & 0x8000000000000) != 0)
      {
        if ((v97 & 0x8000000000000) == 0)
          goto LABEL_81;
        v99 = *(int8x16_t *)((v46 & 0xFFFFFFFFFFFFLL) + 4);
        v92 = *(_OWORD *)((v97 & 0xFFFFFFFFFFFFLL) + 4);
        v62 = WebCore::operator==<float,4ul>((float *)v99.i32, (float *)&v92);
        v46 = v45[1];
        if (!v62 || HIBYTE(v46) != HIBYTE(v97) || BYTE6(v46) != BYTE6(v97))
          goto LABEL_81;
      }
      else if (v46 != v97 || (v97 & 0x8000000000000) != 0)
      {
LABEL_81:
        if ((v46 & 0x8000000000000) != 0)
        {
          v58 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (!v60)
          {
            atomic_store(1u, v58);
            WTF::fastFree((WTF *)v58, v44);
          }
        }
        v47 = v97;
        v45[1] = v97;
        if ((v47 & 0x8000000000000) != 0)
        {
          v53 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
        }
      }
      if ((WebCore::LegacyRenderSVGResourceSolidColor::applyResource((uint64_t)v45, this, (WebCore::LegacyRenderSVGShape *)((char *)this + 80), &v98, 2) & 1) != 0)WebCore::LegacyRenderSVGResourceSolidColor::postApplyResource((uint64_t)v45, (uint64_t)this, (uint64_t *)&v98, 2, 0, (uint64_t)this);
      goto LABEL_50;
    }
  }
  *((_BYTE *)this + 208) |= 8u;
  if (*(_DWORD *)v13 == 1)
  {
    WebCore::SVGRenderStyle::~SVGRenderStyle(v13, v11);
    WTF::fastFree(v66, v67);
  }
  else
  {
    --*(_DWORD *)v13;
  }
LABEL_118:
  v63 = v84[1];
  if ((v84[1] & 0xE) != 0)
  {
    if ((v84[1] & 8) != 0)
    {
      v99.i64[0] = *(_QWORD *)(*((_QWORD *)&v82 + 1) + 80);
      WebCore::LegacyRenderSVGResourceFilter::postApplyResource(*((uint64_t **)&v83 + 1), (WebCore::RenderElement *)v82, v99.i64);
      v80 = (_OWORD *)*((_QWORD *)&v82 + 1);
      *(_QWORD *)(*((_QWORD *)&v82 + 1) + 80) = v83;
      *v80 = v84[0];
      v63 = v84[1];
      if ((v84[1] & 4) == 0)
      {
LABEL_124:
        if ((v63 & 2) == 0)
          goto LABEL_119;
LABEL_125:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)&v82 + 1) + 80) + 104))(*(_QWORD *)(*((_QWORD *)&v82 + 1) + 80), 1);
        goto LABEL_119;
      }
    }
    else if ((v84[1] & 4) == 0)
    {
      goto LABEL_124;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)&v82 + 1) + 80) + 608))(*(_QWORD *)(*((_QWORD *)&v82 + 1) + 80));
    if ((v84[1] & 2) == 0)
      goto LABEL_119;
    goto LABEL_125;
  }
LABEL_119:
  v64 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  v65 = *(unsigned __int8 *)(v64 + 52);
  if ((v65 & 0xF) != 0)
  {
    v68 = *(float *)(v64 + 48);
    if (((v68 < 3.0) & (v65 >> 4)) != 0 || v68 != 0.0)
    {
      if (*(float *)&v91 >= 2147500000.0)
      {
        v69 = 0x7FFFFFFF;
      }
      else if (*(float *)&v91 <= -2147500000.0)
      {
        v69 = 0x80000000;
      }
      else
      {
        v69 = (int)*(float *)&v91;
      }
      if (*((float *)&v91 + 1) >= 2147500000.0)
      {
        v70 = 0x7FFFFFFF;
      }
      else if (*((float *)&v91 + 1) <= -2147500000.0)
      {
        v70 = 0x80000000;
      }
      else
      {
        v70 = (int)*((float *)&v91 + 1);
      }
      if (*((float *)&v91 + 2) > -2147500000.0)
        v71 = (int)*((float *)&v91 + 2);
      else
        v71 = 0x80000000;
      if (*((float *)&v91 + 2) < 2147500000.0)
        v72 = v71;
      else
        v72 = 0x7FFFFFFF;
      if (*((float *)&v91 + 3) > -2147500000.0)
        v73 = (int)*((float *)&v91 + 3);
      else
        v73 = 0x80000000;
      if (*((float *)&v91 + 3) < 2147500000.0)
        v74 = v73;
      else
        v74 = 0x7FFFFFFF;
      v75.i64[0] = __PAIR64__(v70, v69);
      v75.i64[1] = __PAIR64__(v74, v72);
      v76.i64[0] = 0xFE000000FE000000;
      v76.i64[1] = 0xFE000000FE000000;
      v77 = (int8x16_t)vcgtq_s32(v75, v76);
      v78.i64[0] = 0xFE000000FE000000;
      v78.i64[1] = 0xFE000000FE000000;
      v79.i64[0] = 0x8000000080000000;
      v79.i64[1] = 0x8000000080000000;
      v99 = vorrq_s8((int8x16_t)(*(_OWORD *)&v77 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v78, v75), v79, (int8x16_t)vshlq_n_s32(v75, 6uLL)), v77));
      WebCore::RenderElement::paintOutline(this, (WebCore::PaintInfo *)&v85, (const WebCore::LayoutRect *)&v99);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
}

float WebCore::LegacyRenderSVGShape::repaintRectInLocalCoordinates(WebCore::LegacyRenderSVGShape *a1, char a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  __int128 v7;

  if ((a2 & 1) != 0)
  {
    LODWORD(v7) = WebCore::LegacyRenderSVGShape::strokeBoundingBox(a1);
    *(_QWORD *)((char *)&v7 + 4) = __PAIR64__(v5, v4);
    HIDWORD(v7) = v6;
    WebCore::SVGRenderSupport::intersectRepaintRectWithResources((uint64_t)a1, (float32x2_t *)&v7, 1);
  }
  else
  {
    v7 = *((_OWORD *)a1 + 12);
  }
  return *(float *)&v7;
}

uint64_t WebCore::LegacyRenderSVGShape::addFocusRingRects(uint64_t result, uint64_t a2)
{
  float v3;
  float v4;
  double v5;
  int v6;
  int v7;
  double v8;
  int v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = *(float *)(result + 200);
  v4 = *(float *)(result + 204);
  v5 = *(float *)(result + 192) * 64.0;
  if (v5 > -2147483650.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 < 2147483650.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  v8 = *(float *)(result + 196) * 64.0;
  if (v8 > -2147483650.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 >= 2147483650.0)
    v9 = 0x7FFFFFFF;
  *(_QWORD *)&v18 = __PAIR64__(v9, v7);
  v10 = v3 * 64.0;
  if (v10 > -2147483650.0)
    v11 = (int)v10;
  else
    v11 = 0x80000000;
  if (v10 < 2147483650.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF;
  DWORD2(v18) = v12;
  v13 = v4 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 0x7FFFFFFF;
  }
  else
  {
    if (v13 <= -2147483650.0)
      return result;
    v14 = (int)v13;
  }
  HIDWORD(v18) = v14;
  if (v12 >= 1 && v14 >= 1)
  {
    v15 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v15 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v15 + 1, (unint64_t)&v18);
      v15 = *(unsigned int *)(a2 + 12);
      v16 = *(_QWORD *)a2;
      v17 = *(_OWORD *)result;
    }
    else
    {
      v16 = *(_QWORD *)a2;
      v17 = v18;
    }
    *(_OWORD *)(v16 + 16 * v15) = v17;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

float WebCore::LegacyRenderSVGShape::getTotalLength(WebCore::Path **this)
{
  float result;
  unsigned int *v2;
  void *v3;
  float v4;
  float v5;
  uint64_t v6;
  WebCore::Path *v7;
  char v8;

  if (this[33])
  {
    WebCore::Path::length(this[33]);
  }
  else
  {
    WebCore::LegacyRenderSVGShape::createPath((WebCore::LegacyRenderSVGShape *)this, (unsigned int **)&v7);
    v2 = (unsigned int *)v7;
    WebCore::Path::length(v7);
    v5 = v4;
    if (v2)
    {
      v6 = v2[16];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v6])(&v8, v2 + 2);
      v2[16] = -1;
      WTF::fastFree((WTF *)v2, v3);
    }
    return v5;
  }
  return result;
}

unsigned int *WebCore::LegacyRenderSVGShape::createPath@<X0>(WebCore::LegacyRenderSVGShape *this@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  const WebCore::SVGElement *v4;
  unsigned int *result;
  unsigned int *v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];
  _BYTE v12[56];
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196565AACLL);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196565ACCLL);
  }
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::pathFromGraphicsElement((WebCore *)v3, v4, (uint64_t)v11);
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x48);
  v6 = result;
  *((_BYTE *)result + 8) = 0;
  v7 = result + 2;
  result[16] = -1;
  v8 = v13;
  if (v13 == -1)
  {
    *a2 = result;
  }
  else
  {
    result = (unsigned int *)((uint64_t (*)(char *, void *, _BYTE *))off_1E344F7B0[v13])(&v10, v7, v12);
    v6[16] = v8;
    v9 = v13;
    *a2 = v6;
    if ((_DWORD)v9 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v9])(&v10, v12);
  }
  v13 = -1;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v7);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

float WebCore::LegacyRenderSVGShape::getPointAtLength(WebCore::LegacyRenderSVGShape *this, float a2)
{
  WebCore::Path *v4;
  float v5;
  unsigned int *v6;
  void *v7;
  uint64_t v8;
  WebCore::Path *v10;
  _BYTE v11[8];
  float v12;

  v4 = (WebCore::Path *)*((_QWORD *)this + 33);
  if (v4)
  {
    WebCore::Path::traversalStateAtLength(v4, a2, (uint64_t)v11);
    return v12;
  }
  else
  {
    WebCore::LegacyRenderSVGShape::createPath(this, (unsigned int **)&v10);
    v6 = (unsigned int *)v10;
    WebCore::Path::traversalStateAtLength(v10, a2, (uint64_t)v11);
    v5 = v12;
    if (v6)
    {
      v8 = v6[16];
      if ((_DWORD)v8 != -1)
        ((void (*)(_BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v8])(v11, v6 + 2);
      v6[16] = -1;
      WTF::fastFree((WTF *)v6, v7);
    }
  }
  return v5;
}

uint64_t WebCore::LegacyRenderSVGShape::nodeAtFloatPoint(WebCore::SVGRenderSupport *this, uint64_t a2, const WebCore::FloatPoint *a3, float *a4, int a5)
{
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v25;
  BOOL v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int128 *v33;
  char v34;
  double v35;
  double v36;
  float v37;
  float v38;
  WTF *v39;
  WebCore::Color *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::SVGRenderSupport *v43;
  int v44;
  int v45;
  char v46;
  char v47;
  int v48;
  char v49;
  uint64_t v50;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  void *v56;
  uint64_t v57;
  float *v58;
  int v59;
  float v60;
  void *v61;
  WTF *v62;
  float v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  void *v71;
  char v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  int v78;
  WebCore::RenderElement *v79;
  void *v80;
  char v81;
  float v82;
  float v83;
  BOOL v84;
  BOOL v85;
  double v87;
  int v88;
  int v89;
  double v90;
  int v91;
  WebCore::ImageOverlay *v92;
  WebCore::Node *v93;
  float v94;
  unsigned int v95;
  float v96;
  uint64_t v97;
  void *v98;
  _BOOL4 v99;
  _QWORD *v100;
  uint64_t v101;
  WTF *v102;
  WebCore::Length *v103;
  float v104;
  float v105;
  unint64_t v106;
  char v107;
  float v108;
  WebCore::Length *v109;
  float v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  WTF *v117;
  char v118;
  int v119;
  int v120;
  unint64_t v121;
  double v122;
  uint64_t v123;
  float32x2_t v124;
  double v125;
  double v126;
  float v127;
  float v128;
  float v129;
  float v130;
  __int16 v131;
  float v132;
  float v133;
  _QWORD v134[2];
  int v135;
  char v136;

  if (a5 != 4)
    return 0;
  if (_MergedGlobals_262 == 1)
  {
    v8 = dword_1ECE84BE8;
  }
  else
  {
    v8 = 0;
    qword_1ECE84BE0 = 0;
    *(_QWORD *)&dword_1ECE84BE8 = 0;
    _MergedGlobals_262 = 1;
  }
  dword_1ECE84BE8 = v8 + 1;
  v9 = *((_QWORD *)this + 1);
  if (v9 && *(_QWORD *)(v9 + 8) && qword_1ECE84BE0)
  {
    v10 = *(_DWORD *)(qword_1ECE84BE0 - 8);
    v11 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    for (i = 1; ; ++i)
    {
      v16 = *(_QWORD *)(qword_1ECE84BE0 + 8 * v14);
      if (!v16)
        break;
      if (v16 != -1 && v16 == v9)
        return 0;
      v14 = (v14 + i) & v10;
    }
  }
  v18 = *((double *)this + 27);
  v19 = *((double *)this + 28);
  v20 = *((double *)this + 29);
  v21 = *((double *)this + 30);
  v22 = v18 * v21 - v19 * v20;
  v23 = fabs(v22);
  if ((unint64_t)(*(_QWORD *)&v23 - 0x10000000000000) >> 53 > 0x3FE
    && (unint64_t)(*(_QWORD *)&v23 - 1) > 0xFFFFFFFFFFFFELL)
  {
    v34 = 0;
    LOBYTE(v121) = 0;
    v33 = &constinit_14;
    v28 = 1.0;
    v32 = 0.0;
    v31 = 0.0;
    v25 = 1.0;
  }
  else
  {
    if ((v25 = 1.0, v18 == 1.0) && v19 == 0.0 && (v20 == 0.0 ? (v26 = v21 == 1.0) : (v26 = 0), v26))
    {
      v31 = -*((double *)this + 31);
      v32 = -*((double *)this + 32);
      v122 = 0.0;
      v123 = 0;
      v28 = 1.0;
    }
    else
    {
      v25 = v21 / v22;
      *(double *)&v27 = -v20 / v22;
      v28 = v18 / v22;
      v30 = *((double *)this + 31);
      v29 = *((double *)this + 32);
      v31 = (v20 * v29 - v21 * v30) / v22;
      v122 = -v19 / v22;
      v123 = v27;
      v32 = (v19 * v30 - v18 * v29) / v22;
    }
    v121 = *(_QWORD *)&v25;
    v124 = *(float32x2_t *)&v28;
    v125 = v31;
    v33 = (__int128 *)&v121;
    v34 = 1;
    v126 = v32;
  }
  LOBYTE(v127) = v34;
  v35 = *a4;
  v36 = a4[1];
  v37 = v31 + *((double *)v33 + 2) * v36 + v25 * v35;
  v38 = v32 + v28 * v36 + *((double *)v33 + 1) * v35;
  v132 = v37;
  v133 = v38;
  if (!WebCore::SVGRenderSupport::pointInClippingArea(this, (const WebCore::RenderElement *)&v132, a3))
    return 0;
  v39 = (WTF *)*((_QWORD *)this + 1);
  if (!v39)
  {
    v39 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v39 = 1;
    *((_QWORD *)v39 + 1) = this;
    v62 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v39;
    if (v62)
    {
      if (*(_DWORD *)v62 == 1)
      {
        WTF::fastFree(v62, v61);
        v39 = (WTF *)*((_QWORD *)this + 1);
        if (!v39)
          goto LABEL_29;
      }
      else
      {
        --*(_DWORD *)v62;
      }
    }
  }
  ++*(_DWORD *)v39;
LABEL_29:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84BE0, this, (uint64_t)&v121);
  v41 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v42 = *(_QWORD *)(*(_QWORD *)(v41 + 40) + 8);
  if (*(_BYTE *)(v42 + 3441) && *(_QWORD *)(v42 + 1272) != v41)
    goto LABEL_173;
  v43 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    v43 = (WebCore::SVGRenderSupport *)*((_QWORD *)this + 4);
    if (v43)
      v43 = (WebCore::SVGRenderSupport *)*((_QWORD *)v43 + 1);
  }
  if ((*(_BYTE *)(*((_QWORD *)v43 + 13) + 239) & 1) != 0)
LABEL_173:
    v44 = 0;
  else
    v44 = (*((_DWORD *)v43 + 31) >> 6) & 0xF;
  v45 = 0;
  if ((*(_DWORD *)a2 & 0x40) != 0)
    v44 = 3;
  switch(v44)
  {
    case 1:
    case 8:
      v45 = 1;
      goto LABEL_37;
    case 2:
      v47 = 0;
      v45 = 0;
      v49 = 1;
      v46 = 1;
      break;
    case 3:
      v46 = 0;
      v45 = 0;
      v49 = 1;
      goto LABEL_48;
    case 4:
      v45 = 1;
      goto LABEL_46;
    case 5:
LABEL_37:
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 1;
      goto LABEL_50;
    case 6:
      v47 = 0;
      v45 = 0;
      v48 = 0;
      v49 = 1;
      v46 = 1;
      goto LABEL_50;
    case 7:
      v46 = 0;
      v45 = 0;
      v48 = 0;
      v49 = 1;
      v47 = 1;
      goto LABEL_50;
    case 9:
      v49 = 0;
      v46 = 0;
      v45 = 0;
      goto LABEL_48;
    case 10:
LABEL_46:
      v46 = 0;
      v47 = 0;
      v49 = 1;
      break;
    default:
      v49 = 1;
      v46 = 1;
LABEL_48:
      v47 = 1;
      break;
  }
  v48 = 1;
LABEL_50:
  if (*(_BYTE *)(a2 + 4) && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0)
    v52 = 1;
  else
    v52 = (*((_DWORD *)this + 30) >> 4) & 3;
  if (((v52 != 0) & ~v48) != 0)
    goto LABEL_150;
  v53 = *((_QWORD *)this + 17);
  v54 = *(unsigned __int16 *)(v53 + 4);
  v55 = (*(_DWORD *)a2 & 0x40) != 0 ? 4 : 8;
  if ((v47 & 1) != 0 || v45 && *(_BYTE *)(*(_QWORD *)(v53 + 24) + 80) == 1)
    goto LABEL_126;
  v119 = v55;
  v120 = *(unsigned __int16 *)(v53 + 4);
  if ((*(_WORD *)(v41 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196566490);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 1184))(v41) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965664B0);
  }
  *(_DWORD *)(v41 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v121, (const WebCore::SVGElement *)v41);
  v57 = *((_QWORD *)this + 13);
  v58 = (float *)(v57 + 244);
  v59 = *(unsigned __int8 *)(v57 + 248);
  if (v59 == 4)
  {
    v54 = v120;
    v60 = *(_BYTE *)(v57 + 250) ? *v58 : (float)*(int *)v58;
  }
  else
  {
    v54 = v120;
    if (v59 == 11)
    {
      v118 = v49;
      v103 = (WebCore::Length *)(v57 + 244);
      v106 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)&v121);
      v105 = *((float *)&v106 + 1);
      v104 = *(float *)&v106;
      if (!v107)
      {
        v105 = 0.0;
        v104 = 0.0;
      }
      v108 = hypotf(v104, v105);
      v109 = v103;
      v49 = v118;
      WebCore::Length::nonNanCalculatedValue(v109, v108 / 1.4142);
      v54 = v120;
      v60 = v110;
    }
    else
    {
      v60 = 0.0;
      if (v59 == 3)
      {
        v63 = *(float *)(v57 + 244);
        if (!*(_BYTE *)(v57 + 250))
          v63 = (float)SLODWORD(v63);
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)&v121, 2, (uint64_t)v134, v63 / 100.0);
        if (v135 != -1)
        {
          if (!v135)
            v60 = *(float *)v134;
          ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v135])(&v136, v134);
        }
        v54 = v120;
      }
    }
  }
  v64 = (unsigned int *)v121;
  v121 = 0;
  if (v64)
  {
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      v117 = (WTF *)v64;
      v101 = v64[7];
      if ((_DWORD)v101)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v117 + 2), (WTF::StringImpl *)(*((_QWORD *)v117 + 2) + 32 * v101));
      v102 = (WTF *)*((_QWORD *)v117 + 2);
      if (v102)
      {
        *((_QWORD *)v117 + 2) = 0;
        *((_DWORD *)v117 + 6) = 0;
        WTF::fastFree(v102, v56);
      }
      WTF::fastFree(v117, v56);
      v54 = v120;
    }
  }
  v55 = v119;
  if (*(_DWORD *)(v41 + 24) == 2)
  {
    if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v41, v56);
      v55 = v119;
      v54 = v120;
    }
  }
  else
  {
    *(_DWORD *)(v41 + 24) -= 2;
  }
  if (v60 == 0.0)
    goto LABEL_126;
  v67 = WebCore::LegacyRenderSVGShape::approximateStrokeBoundingBox(this);
  v55 = v119;
  v54 = v120;
  if (v69 <= 0.0 || v70 <= 0.0 || v67 > v132 || (float)(v67 + v69) < v132 || v68 > v133 || (float)(v68 + v70) < v133)
    goto LABEL_126;
  v121 = 0;
  if (v45
    && !WebCore::LegacyRenderSVGResource::strokePaintingResource(this, (WebCore::SVGRenderSupport *)((char *)this + 80), (const WebCore::RenderStyle *)&v121, v40))
  {
    v72 = 0;
  }
  else
  {
    v72 = (*(uint64_t (**)(WebCore::SVGRenderSupport *, float *, _QWORD))(*(_QWORD *)this + 840))(this, &v132, 0);
  }
  v55 = v119;
  v54 = v120;
  if ((v121 & 0x8000000000000) != 0)
  {
    v111 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFLL);
    do
    {
      v112 = __ldaxr(v111);
      v113 = v112 - 1;
    }
    while (__stlxr(v113, v111));
    v55 = v119;
    v54 = v120;
    if (!v113)
    {
      atomic_store(1u, v111);
      WTF::fastFree((WTF *)v111, v71);
      v55 = v119;
      v54 = v120;
    }
  }
  if ((v72 & 1) == 0)
  {
LABEL_126:
    if ((v46 & 1) != 0 || v45 && *(_BYTE *)(*(_QWORD *)(v53 + 16) + 56) == 1)
      goto LABEL_193;
    v73 = *((float *)this + 38);
    if (v73 <= 0.0)
      goto LABEL_193;
    v74 = *((float *)this + 39);
    if (v74 <= 0.0)
      goto LABEL_193;
    v75 = *((float *)this + 36);
    if (v75 > v132)
      goto LABEL_193;
    if ((float)(v75 + v73) < v132)
      goto LABEL_193;
    v76 = *((float *)this + 37);
    if (v76 > v133 || (float)(v76 + v74) < v133)
      goto LABEL_193;
    v121 = 0;
    if (v45
      && (v77 = v54,
          v78 = v55,
          v79 = WebCore::LegacyRenderSVGResource::fillPaintingResource(this, (WebCore::SVGRenderSupport *)((char *)this + 80), (const WebCore::RenderStyle *)&v121, v40), v55 = v78, v54 = v77, !v79))
    {
      v81 = 0;
    }
    else
    {
      v81 = (*(uint64_t (**)(WebCore::SVGRenderSupport *, float *, BOOL))(*(_QWORD *)this + 848))(this, &v132, (v54 & v55) != 0);
    }
    if ((v121 & 0x8000000000000) != 0)
    {
      v114 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFLL);
      do
      {
        v115 = __ldaxr(v114);
        v116 = v115 - 1;
      }
      while (__stlxr(v116, v114));
      if (!v116)
      {
        atomic_store(1u, v114);
        WTF::fastFree((WTF *)v114, v80);
      }
    }
    if ((v81 & 1) == 0)
    {
LABEL_193:
      if ((v49 & 1) != 0)
        goto LABEL_150;
      v82 = *((float *)this + 36);
      v83 = *((float *)this + 37);
      v84 = v82 > v132 || (float)(v82 + *((float *)this + 38)) < v132;
      v85 = v84 || v83 > v133;
      if (v85 || (float)(v83 + *((float *)this + 39)) < v133)
        goto LABEL_150;
    }
  }
  v87 = v132 * 64.0;
  if (v87 > -2147483650.0)
    v88 = (int)v87;
  else
    v88 = 0x80000000;
  if (v87 < 2147483650.0)
    v89 = v88;
  else
    v89 = 0x7FFFFFFF;
  v90 = v133 * 64.0;
  if (v90 > -2147483650.0)
    v91 = (int)v90;
  else
    v91 = 0x80000000;
  if (v90 >= 2147483650.0)
    v91 = 0x7FFFFFFF;
  v121 = __PAIR64__(v91, v89);
  (*(void (**)(WebCore::SVGRenderSupport *, const WebCore::FloatPoint *, unint64_t *))(*(_QWORD *)this + 328))(this, a3, &v121);
  v92 = (WebCore::ImageOverlay *)(*(uint64_t (**)(WebCore::SVGRenderSupport *))(*(_QWORD *)this + 320))(this);
  v93 = v92;
  if (v92)
    *((_DWORD *)v92 + 6) += 2;
  v94 = floorf(v132 * 64.0);
  if (v94 >= 2147500000.0)
  {
    v95 = 0x7FFFFFFF;
  }
  else if (v94 <= -2147500000.0)
  {
    v95 = 0x80000000;
  }
  else
  {
    v95 = (int)v94;
  }
  v96 = floorf(v133 * 64.0);
  if (v96 >= 2147500000.0)
  {
    v97 = 0x7FFFFFFFLL;
  }
  else if (v96 <= -2147500000.0)
  {
    v97 = 0x80000000;
  }
  else
  {
    v97 = (int)v96;
  }
  v121 = v95 | (unint64_t)(v97 << 32);
  *(_QWORD *)&v122 = v95 & 0xFFFFFFC0 | ((unint64_t)((v97 & 0xFFFFFFC0) >> 6) << 38);
  v123 = 0x4000000040;
  v124 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v97, v95)), (float32x2_t)vdup_n_s32(0x3C800000u));
  *(float *)&v125 = (float)(int)(v95 & 0xFFFFFFC0) * 0.015625;
  *((float *)&v125 + 1) = (float)(v97 & 0xFFFFFFC0) * 0.015625;
  *(float *)&v126 = *(float *)&v125 + 1.0;
  *((float *)&v126 + 1) = *((float *)&v125 + 1);
  v127 = *(float *)&v125 + 1.0;
  v128 = *((float *)&v125 + 1) + 1.0;
  v129 = *(float *)&v125;
  v130 = *((float *)&v125 + 1) + 1.0;
  v131 = 256;
  v134[0] = 0;
  v134[1] = 0;
  v99 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v92, (int *)a2, (uint64_t)&v121, (WebCore::LayoutRect *)v134);
  if (v93)
  {
    if (*((_DWORD *)v93 + 6) == 2)
    {
      if ((*((_WORD *)v93 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v93, v98);
    }
    else
    {
      *((_DWORD *)v93 + 6) -= 2;
    }
  }
  if (v99)
  {
LABEL_150:
    v50 = 0;
    if (!v39)
      return v50;
  }
  else
  {
    v50 = 1;
    if (!v39)
      return v50;
  }
  v100 = (_QWORD *)*((_QWORD *)v39 + 1);
  if (v100)
    WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84BE0, v100);
  if (*(_DWORD *)v39 == 1)
    WTF::fastFree(v39, v100);
  else
    --*(_DWORD *)v39;
  return v50;
}

float WebCore::LegacyRenderSVGShape::strokeBoundingBox(WebCore::LegacyRenderSVGShape *this)
{
  if ((*((_BYTE *)this + 208) & 0x70) != 0)
    return *((float *)this + 40);
  else
    return 0.0;
}

uint64_t WebCore::LegacyRenderSVGShape::calculateStrokeBoundingBox(WebCore::LegacyRenderSVGShape *this)
{
  uint64_t v2;
  WebCore::Path *v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  __n128 v10;
  float64_t v11;
  WebCore::LegacyRenderSVGShape *v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  _QWORD *v18;
  __int32 v19;
  int v20;
  int v21;
  _QWORD *v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  char v29;
  float64x2_t v30[3];
  __int128 v31;

  v31 = *((_OWORD *)this + 9);
  v2 = *((_QWORD *)this + 17);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 24) + 80) != 1)
  {
    if ((*(_WORD *)(v2 + 8) & 0x400) != 0)
    {
      WebCore::LegacyRenderSVGShape::nonScalingStrokeTransform(this);
      v12 = (WebCore::LegacyRenderSVGShape *)WebCore::AffineTransform::inverse(v30, (uint64_t)&v26);
      if (v29)
      {
        WebCore::LegacyRenderSVGShape::nonScalingStrokePath(v12, *((const WebCore::Path **)this + 33), v30);
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = off_1E344F988;
        v13[1] = this;
        v22 = v13;
        WebCore::Path::strokeBoundingRect((WebCore::Path *)&WebCore::LegacyRenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, &v22);
        v23 = __PAIR64__(v15, v14);
        v24 = v16;
        v25 = v17;
        v18 = v22;
        v22 = 0;
        if (v18)
          (*(void (**)(_QWORD *))(*v18 + 8))(v18);
        LODWORD(v23) = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v26, (const WebCore::FloatRect *)&v23);
        HIDWORD(v23) = v19;
        v24 = v20;
        v25 = v21;
        WebCore::FloatRect::unite((float32x2_t *)&v31, (float32x2_t *)&v23);
      }
    }
    else
    {
      v4 = (WebCore::Path *)*((_QWORD *)this + 33);
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v5 = off_1E344F9B0;
      v5[1] = this;
      *(_QWORD *)&v30[0].f64[0] = v5;
      WebCore::Path::strokeBoundingRect(v4, v30);
      v26 = __PAIR64__(v7, v6);
      v27 = v8;
      v28 = v9;
      v10 = WebCore::FloatRect::unite((float32x2_t *)&v31, (float32x2_t *)&v26);
      v11 = v30[0].f64[0];
      v30[0].f64[0] = 0.0;
      if (v11 != 0.0)
        (*(void (**)(float64_t, __n128))(**(_QWORD **)&v11 + 8))(COERCE_FLOAT64_T(*(_QWORD *)&v11), v10);
    }
  }
  return (*(uint64_t (**)(WebCore::LegacyRenderSVGShape *, uint64_t, float, float, float, float))(*(_QWORD *)this + 856))(this, 1, *(float *)&v31, *((float *)&v31 + 1), *((float *)&v31 + 2), *((float *)&v31 + 3));
}

unsigned int *WebCore::LegacyRenderSVGShape::ensurePath(WebCore::LegacyRenderSVGShape *this)
{
  unsigned int *result;
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  char v7;

  result = (unsigned int *)*((_QWORD *)this + 33);
  if (!result)
  {
    WebCore::LegacyRenderSVGShape::createPath(this, &v6);
    result = v6;
    v4 = (unsigned int *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v6;
    if (v4)
    {
      v5 = v4[16];
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_12[v5])(&v7, v4 + 2);
      v4[16] = -1;
      WTF::fastFree((WTF *)v4, v3);
      return (unsigned int *)*((_QWORD *)this + 33);
    }
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGTransformableContainer::operator new(uint64_t this)
{
  if (this == 288)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::LegacyRenderSVGTransformableContainer::LegacyRenderSVGTransformableContainer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int32x4_t v4;
  double result;

  v3 = WebCore::RenderElement::RenderElement(a1, 104, a2, a3, 0, 8964);
  v4 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v3 + 160) = v4;
  *(int32x4_t *)(v3 + 192) = v4;
  *(_OWORD *)(v3 + 216) = constinit_14;
  *(_WORD *)(v3 + 208) = 256;
  *(_QWORD *)v3 = off_1E344F0D0;
  *(_BYTE *)(v3 + 211) = *(_BYTE *)(v3 + 211) & 0xFC | 1;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_BYTE *)(v3 + 210) = 0;
  *(_OWORD *)(v3 + 232) = unk_1969FE260;
  result = 0.0;
  *(_OWORD *)(v3 + 248) = xmmword_1969FE270;
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  return result;
}

void WebCore::LegacyRenderSVGTransformableContainer::~LegacyRenderSVGTransformableContainer(WebCore::LegacyRenderSVGTransformableContainer *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderElement::~RenderElement(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

uint64_t WebCore::LegacyRenderSVGTransformableContainer::calculateLocalTransform(WebCore::LegacyRenderSVGTransformableContainer *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  void *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  char v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::SVGLengthValue *v36;
  float v37;
  WebCore::SVGLengthValue *v38;
  void *v39;
  float v40;
  uint64_t v42;
  int v43;
  char v44;
  _OWORD v45[3];
  uint64_t v46;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    goto LABEL_76;
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196566CC0);
  }
  v3 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v3 + 2;
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24);
  v5 = *(_QWORD *)(WebCore::SVGNames::useTag + 24);
  if (v4 == v5)
  {
    *(_DWORD *)(v1 + 24) = v3 + 4;
    v46 = v1;
    goto LABEL_61;
  }
  v46 = 0;
  if ((*(_BYTE *)(v1 + 22) & 0x10) != 0 && v4 == *(_QWORD *)(WebCore::SVGNames::gTag + 24))
  {
    v33 = *(_QWORD *)(v1 + 120);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 56);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        if (v35)
        {
          if (*(_QWORD *)(*(_QWORD *)(v35 + 96) + 24) == v5)
          {
            WTF::RefPtr<WebCore::SVGUseElement,WTF::RawPtrTraits<WebCore::SVGUseElement>,WTF::DefaultRefDerefTraits<WebCore::SVGUseElement>>::operator=(&v46, (_DWORD *)v35);
            if (v46)
            {
LABEL_61:
              WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v45, (const WebCore::SVGElement *)v1);
              v36 = (WebCore::SVGLengthValue *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(*(_QWORD *)(v46 + 248));
              v37 = WebCore::SVGLengthValue::value(v36, (const WebCore::SVGLengthContext *)v45);
              v38 = (WebCore::SVGLengthValue *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(*(_QWORD *)(v46 + 256));
              v40 = WebCore::SVGLengthValue::value(v38, (const WebCore::SVGLengthContext *)v45);
              if (v37 != *((float *)this + 66) || v40 != *((float *)this + 67))
                *((_BYTE *)this + 211) |= 1u;
              *((float *)this + 66) = v37;
              *((float *)this + 67) = v40;
              WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)v45, v39);
            }
          }
        }
      }
    }
  }
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 40) + 44);
  if (v6 >= 5)
    v7 = 2;
  else
    v7 = 0x705020406uLL >> (8 * v6);
  v9 = (*(float (**)(WebCore::LegacyRenderSVGTransformableContainer *, _QWORD))(*(_QWORD *)this + 752))(this, v7 & 7);
  v13 = v9 == *((float *)this + 68) && v10 == *((float *)this + 69);
  if (v13 && (v11 == *((float *)this + 70) ? (v14 = v12 == *((float *)this + 71)) : (v14 = 0), v14))
  {
    v15 = *((_BYTE *)this + 211);
  }
  else
  {
    *((float *)this + 68) = v9;
    *((float *)this + 69) = v10;
    *((float *)this + 70) = v11;
    *((float *)this + 71) = v12;
    v15 = *((_BYTE *)this + 211) | 1;
    *((_BYTE *)this + 211) = v15;
  }
  if ((v15 & 1) != 0)
  {
    *((_BYTE *)this + 211) = v15 | 2;
    goto LABEL_39;
  }
  v16 = *((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_37;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_37;
  while (1)
  {
    v18 = 0;
    v19 = *(unsigned __int8 *)(v17 + 46);
    if (v19 <= 0x66)
    {
      if (v19 == 83)
        goto LABEL_27;
      goto LABEL_69;
    }
    if (v19 == 103)
      goto LABEL_27;
    if (v19 == 104)
      break;
    if (v19 == 105)
    {
      v43 = *(_DWORD *)(v17 + 16);
      *(_DWORD *)(v17 + 16) = v43 + 1;
      if (v43 != -1)
      {
        v44 = *(_BYTE *)(v17 + 211);
        *(_DWORD *)(v17 + 16) = v43;
        if ((v44 & 1) == 0)
          goto LABEL_37;
        goto LABEL_74;
      }
      __break(0xC471u);
LABEL_76:
      JUMPOUT(0x196566CA0);
    }
LABEL_69:
    v42 = *(_QWORD *)(v17 + 32);
    if (!v42)
      goto LABEL_37;
    v18 = 0;
    v17 = *(_QWORD *)(v42 + 8);
    if (!v17)
      goto LABEL_27;
  }
  v24 = *(_DWORD *)(v17 + 16);
  *(_DWORD *)(v17 + 16) = v24 + 1;
  if (v24 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x196566D4CLL);
  }
  v25 = *(_BYTE *)(v17 + 211);
  *(_DWORD *)(v17 + 16) = v24;
  if ((v25 & 2) == 0)
  {
LABEL_37:
    v18 = 0;
    goto LABEL_27;
  }
LABEL_74:
  v18 = 2;
LABEL_27:
  v20 = *((_BYTE *)this + 211);
  *((_BYTE *)this + 211) = v20 & 0xFD | v18;
  if ((v20 & 1) == 0)
  {
    v21 = 0;
    goto LABEL_29;
  }
LABEL_39:
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v1 + 1344))(v45, v1);
  v26 = v45[1];
  *(_OWORD *)((char *)this + 216) = v45[0];
  *(_OWORD *)((char *)this + 232) = v26;
  *(_OWORD *)((char *)this + 248) = v45[2];
  v27 = *((float *)this + 66);
  v28 = *((float *)this + 67);
  v30 = *((double *)this + 27);
  v29 = *((double *)this + 28);
  v32 = *((double *)this + 29);
  v31 = *((double *)this + 30);
  if (v30 == 1.0 && v29 == 0.0 && v32 == 0.0 && v31 == 1.0)
  {
    *((double *)this + 31) = *((double *)this + 31) + v27;
  }
  else
  {
    *((double *)this + 31) = v32 * v28 + v27 * v30 + *((double *)this + 31);
    v28 = v31 * v28 + v27 * v29;
  }
  *((double *)this + 32) = v28 + *((double *)this + 32);
  *((_BYTE *)this + 211) &= ~1u;
  v21 = 1;
LABEL_29:
  v22 = v46;
  v46 = 0;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v8);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v8);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v21;
}

uint64_t *WTF::RefPtr<WebCore::SVGUseElement,WTF::RawPtrTraits<WebCore::SVGUseElement>,WTF::DefaultRefDerefTraits<WebCore::SVGUseElement>>::operator=(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;

  a2[6] += 2;
  v3 = *a1;
  *a1 = (uint64_t)a2;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::LegacyRenderSVGViewportContainer::operator new(uint64_t this)
{
  if (this == 280)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::LegacyRenderSVGViewportContainer::LegacyRenderSVGViewportContainer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  double result;

  WebCore::LegacyRenderSVGContainer::LegacyRenderSVGContainer(a1, 105, a2, a3, 0);
  *(_OWORD *)(v3 + 232) = constinit_14;
  *(_QWORD *)v3 = off_1E344F430;
  *(_BYTE *)(v3 + 211) = *(_BYTE *)(v3 + 211) & 0xF8 | 4;
  *(_QWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 212) = 0;
  *(_OWORD *)(v3 + 248) = unk_1969FE260;
  result = 0.0;
  *(_OWORD *)(v3 + 264) = xmmword_1969FE270;
  return result;
}

double WebCore::LegacyRenderSVGViewportContainer::operator delete(WebCore::RenderElement *a1, void *a2)
{
  uint64_t v2;
  void *v3;
  double result;

  WebCore::RenderElement::~RenderElement(a1, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 272) = 0;
    result = 0.0;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
  return result;
}

uint64_t WebCore::LegacyRenderSVGViewportContainer::svgSVGElement(uint64_t this)
{
  if ((*(_WORD *)(this + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(this + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196566F44);
  }
  return this;
}

uint64_t WebCore::LegacyRenderSVGViewportContainer::determineIfLayoutSizeChanged(WebCore::LegacyRenderSVGViewportContainer *this)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  v2 = WebCore::LegacyRenderSVGViewportContainer::svgSVGElement(*(_QWORD *)(*((_QWORD *)this + 3) + 8));
  result = WebCore::SVGElement::hasRelativeLengths(*(_QWORD *)(v2 + 128), *(_BYTE *)(v2 + 145));
  if ((_DWORD)result)
    v4 = (*((unsigned __int8 *)this + 20) >> 2) & 2;
  else
    LOBYTE(v4) = 0;
  *((_BYTE *)this + 211) = *((_BYTE *)this + 211) & 0xFD | v4;
  return result;
}

uint64_t WebCore::SVGElement::hasRelativeLengths(uint64_t this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
    return 1;
  if (this)
  {
    if (!*(_DWORD *)(this - 12))
      return 0;
    v2 = *(unsigned int *)(this - 4);
    v3 = this + 8 * v2;
    if ((_DWORD)v2)
    {
      v4 = 8 * v2;
      while ((unint64_t)(*(_QWORD *)this + 1) <= 1)
      {
        this += 8;
        v4 -= 8;
        if (!v4)
          goto LABEL_13;
      }
    }
    if (this != v3)
    {
      v5 = *(_QWORD *)this;
LABEL_16:
      if (*(_QWORD *)(v5 + 8))
        return this != v3;
      while (1)
      {
        this += 8;
        if (this == v3)
          break;
        v5 = *(_QWORD *)this;
        if ((unint64_t)(*(_QWORD *)this + 1) > 1)
        {
          if (this == v3)
            break;
          goto LABEL_16;
        }
      }
    }
LABEL_13:
    this = v3;
    return this != v3;
  }
  return this;
}

uint64_t WebCore::LegacyRenderSVGViewportContainer::applyViewportClip(uint64_t this, WebCore::PaintInfo *a2)
{
  if (((*(_DWORD *)(this + 96) >> 10) & 7u) - 1 <= 2)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 456))(*((_QWORD *)a2 + 10), this + 212);
  return this;
}

uint64_t *WebCore::LegacyRenderSVGViewportContainer::calcViewport(WebCore::LegacyRenderSVGViewportContainer *this)
{
  const WebCore::SVGElement *v2;
  WebCore::SVGLengthValue *v3;
  float v4;
  WebCore::SVGLengthValue *v5;
  float v6;
  WebCore::SVGLengthValue *v7;
  float v8;
  WebCore::SVGLengthValue *v9;
  void *v10;
  float v11;
  BOOL v12;
  BOOL v13;
  uint64_t v15[5];
  const WebCore::SVGElement *v16;

  v2 = *(const WebCore::SVGElement **)(*((_QWORD *)this + 3) + 8);
  WebCore::LegacyRenderSVGViewportContainer::svgSVGElement((uint64_t)v2);
  *((_DWORD *)v2 + 6) += 2;
  v16 = v2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v15, v2);
  v3 = (WebCore::SVGLengthValue *)WebCore::SVGSVGElement::x(v2);
  v4 = WebCore::SVGLengthValue::value(v3, (const WebCore::SVGLengthContext *)v15);
  v5 = (WebCore::SVGLengthValue *)WebCore::SVGSVGElement::y(v2);
  v6 = WebCore::SVGLengthValue::value(v5, (const WebCore::SVGLengthContext *)v15);
  v7 = (WebCore::SVGLengthValue *)WebCore::SVGSVGElement::width(v2);
  v8 = WebCore::SVGLengthValue::value(v7, (const WebCore::SVGLengthContext *)v15);
  v9 = (WebCore::SVGLengthValue *)WebCore::SVGSVGElement::height(v2);
  v11 = WebCore::SVGLengthValue::value(v9, (const WebCore::SVGLengthContext *)v15);
  v12 = *((float *)this + 53) == v4 && *((float *)this + 54) == v6;
  if (!v12 || (*((float *)this + 55) == v8 ? (v13 = *((float *)this + 56) == v11) : (v13 = 0), !v13))
  {
    *((float *)this + 53) = v4;
    *((float *)this + 54) = v6;
    *((float *)this + 55) = v8;
    *((float *)this + 56) = v11;
    WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)this);
    *((_BYTE *)this + 211) |= 4u;
  }
  WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v15, v10);
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v16);
}

uint64_t WebCore::SVGSVGElement::x(WebCore::SVGSVGElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t *v7[5];
  uint64_t *v8[5];

  v1 = *((_QWORD *)this + 36);
  v3 = (uint64_t *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2
    && *(_DWORD *)(v2 - 12)
    && (v6 = *((_QWORD *)this + 36),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, v8),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, v7),
        v1 = v6,
        v8[1] != v7[1]))
  {
    v4 = (_QWORD *)(v6 + 48);
  }
  else
  {
    v4 = (_QWORD *)(v1 + 40);
  }
  return *v4 + 28;
}

uint64_t WebCore::SVGSVGElement::y(WebCore::SVGSVGElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t *v7[5];
  uint64_t *v8[5];

  v1 = *((_QWORD *)this + 37);
  v3 = (uint64_t *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2
    && *(_DWORD *)(v2 - 12)
    && (v6 = *((_QWORD *)this + 37),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, v8),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, v7),
        v1 = v6,
        v8[1] != v7[1]))
  {
    v4 = (_QWORD *)(v6 + 48);
  }
  else
  {
    v4 = (_QWORD *)(v1 + 40);
  }
  return *v4 + 28;
}

uint64_t WebCore::SVGSVGElement::width(WebCore::SVGSVGElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t *v7[5];
  uint64_t *v8[5];

  v1 = *((_QWORD *)this + 38);
  v3 = (uint64_t *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2
    && *(_DWORD *)(v2 - 12)
    && (v6 = *((_QWORD *)this + 38),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, v8),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, v7),
        v1 = v6,
        v8[1] != v7[1]))
  {
    v4 = (_QWORD *)(v6 + 48);
  }
  else
  {
    v4 = (_QWORD *)(v1 + 40);
  }
  return *v4 + 28;
}

uint64_t WebCore::SVGSVGElement::height(WebCore::SVGSVGElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t *v7[5];
  uint64_t *v8[5];

  v1 = *((_QWORD *)this + 39);
  v3 = (uint64_t *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2
    && *(_DWORD *)(v2 - 12)
    && (v6 = *((_QWORD *)this + 39),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, v8),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, v7),
        v1 = v6,
        v8[1] != v7[1]))
  {
    v4 = (_QWORD *)(v6 + 48);
  }
  else
  {
    v4 = (_QWORD *)(v1 + 40);
  }
  return *v4 + 28;
}

uint64_t WebCore::LegacyRenderSVGViewportContainer::setNeedsTransformUpdate(uint64_t this)
{
  *(_BYTE *)(this + 211) |= 4u;
  return this;
}

uint64_t WebCore::LegacyRenderSVGViewportContainer::calculateLocalTransform(WebCore::LegacyRenderSVGViewportContainer *this, WebCore::RenderElement *a2)
{
  uint64_t v3;
  WebCore::SVGRenderSupport *v4;
  char v5;
  char v6;
  __int128 v8;
  float64x2_t v9;
  _BYTE v10[48];
  __int128 v11;
  __int128 v12;
  float64x2_t v13;

  if ((*((_BYTE *)this + 211) & 4) != 0)
  {
    *((_BYTE *)this + 211) |= 1u;
  }
  else
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
      v4 = *(WebCore::SVGRenderSupport **)(v3 + 8);
    else
      v4 = 0;
    v5 = WebCore::SVGRenderSupport::transformToRootChanged(v4, a2);
    v6 = *((_BYTE *)this + 211);
    *((_BYTE *)this + 211) = v6 & 0xFE | v5;
    if ((v6 & 4) == 0)
      return 0;
  }
  v9 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 212));
  WebCore::LegacyRenderSVGViewportContainer::viewportTransform((WebCore::LegacyRenderSVGViewportContainer *)v10, (uint64_t)this);
  v11 = 0x3FF0000000000000uLL;
  *(_QWORD *)&v12 = 0;
  *((_QWORD *)&v12 + 1) = 0x3FF0000000000000;
  v13 = v9;
  WebCore::AffineTransform::multiply((WebCore::AffineTransform *)&v11, (const WebCore::AffineTransform *)v10);
  v8 = v12;
  *(_OWORD *)((char *)this + 232) = v11;
  *(_OWORD *)((char *)this + 248) = v8;
  *(float64x2_t *)((char *)this + 264) = v13;
  *((_BYTE *)this + 211) &= ~4u;
  return 1;
}

void WebCore::LegacyRenderSVGViewportContainer::viewportTransform(WebCore::LegacyRenderSVGViewportContainer *this, uint64_t a2)
{
  WebCore::SVGFitToViewBox ***v4;
  void *v5;

  v4 = (WebCore::SVGFitToViewBox ***)WebCore::LegacyRenderSVGViewportContainer::svgSVGElement(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8));
  WebCore::SVGSVGElement::viewBoxToViewTransform(v4, *(float *)(a2 + 220), *(float *)(a2 + 224), v5, this);
}

BOOL WebCore::LegacyRenderSVGViewportContainer::pointIsInsideViewportClip(WebCore::LegacyRenderSVGViewportContainer *this, const WebCore::FloatPoint *a2)
{
  float v2;
  float v3;
  float v4;

  if (((*((_DWORD *)this + 24) >> 10) & 7u) - 1 > 2)
    return 1;
  v2 = *((float *)this + 53);
  if (v2 <= *(float *)a2
    && (float)(v2 + *((float *)this + 55)) >= *(float *)a2
    && (v3 = *((float *)a2 + 1), v4 = *((float *)this + 54), v4 <= v3))
  {
    return (float)(v4 + *((float *)this + 56)) >= v3;
  }
  else
  {
    return 0;
  }
}

float WebCore::LegacyRenderSVGViewportContainer::paint(WebCore::LegacyRenderSVGViewportContainer *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  float result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  WebCore::PaintInfo *v10;
  const WebCore::LayoutPoint *v11;
  WebCore::LegacyRenderSVGViewportContainer *v12;
  uint64_t v13;
  uint64_t *v14[5];
  uint64_t *v15[5];

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965675ECLL);
  }
  if (!*(_BYTE *)(v3 + 232))
    goto LABEL_4;
  v5 = *(_QWORD *)(v3 + 216);
  v7 = (uint64_t *)(v5 + 24);
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_7;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_7;
  v12 = this;
  v13 = v5;
  v10 = a2;
  v11 = a3;
  WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v7, v15);
  WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v7, v14);
  this = v12;
  v5 = v13;
  a2 = v10;
  a3 = v11;
  if (v15[1] != v14[1])
    v8 = (uint64_t *)(v13 + 48);
  else
LABEL_7:
    v8 = (uint64_t *)(v5 + 40);
  v9 = *v8;
  result = *(float *)(v9 + 36);
  if (result > 0.0)
  {
    result = *(float *)(v9 + 40);
    if (result > 0.0)
LABEL_4:
      WebCore::LegacyRenderSVGContainer::paint(this, a2, a3);
  }
  return result;
}

WebCore::Node *WebCore::SVGResources::buildCachedResources(WebCore::Node *this, const WebCore::RenderElement *a2, const WebCore::RenderStyle *a3, uint64_t a4, double a5, double a6, float a7)
{
  uint64_t *v7;
  uint64_t v8;
  __int16 v9;
  WebCore::TreeScope *v11;
  uint64_t v12;
  __int16 v13;
  BOOL v14;
  WTF::String *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::FillLayer *v30;
  _DWORD *v31;
  uint64_t (*v32)();
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  _QWORD *v41;
  WebCore::SVGURIReference *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  WebCore::Node *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  WebCore::LegacyRenderSVGResourceContainer *v92;
  WTF::StringImpl *v93;
  WebCore::TreeScope *v94;
  uint64_t v95;
  __int16 v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  double v99;
  double v100;
  float v101;
  double v102;
  double v103;
  float v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  WTF **v111;
  WTF *v112;
  WTF *v113;
  uint64_t v114;
  WTF **v115;
  WTF *v116;
  WebCore::SVGResources *v117;
  WTF *v118;
  void *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  WTF *v132;
  uint64_t v133;
  void *v134;
  _QWORD **v135;
  uint64_t v136;
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  uint64_t v140;
  WebCore::SVGResources *v141;
  WTF *v142;
  void *v143;
  WebCore::Node *v144;
  const WebCore::SVGElement *v145;
  WebCore::SVGResources *v146;
  WTF *v147;
  uint64_t v148;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  WebCore::LegacyRenderSVGResourceFilter *v153;
  WTF ***v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  unsigned int v157;
  unsigned int v158;
  WTF **v159;
  WebCore::SVGResources *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  int v163;
  WTF::StringImpl *v164;
  int v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  int v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WebCore::LegacyRenderSVGResourceMasker *v173;
  WTF ***v174;
  WTF::StringImpl *v175;
  char v176;
  WTF::String *v177;
  WebCore::TreeScope *v178;
  WebCore::Node *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181[5];
  WTF::StringImpl *v182;
  WebCore::TreeScope **v183;
  char *v184;
  uint64_t *v185;
  WebCore::Node **v186;

  v7 = (uint64_t *)this;
  if ((a3 & 1) != 0 || (v8 = *((_QWORD *)a2 + 1)) == 0)
  {
    *(_QWORD *)this = 0;
    return this;
  }
  v9 = *(_WORD *)(v8 + 28);
  if ((v9 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656813CLL);
  }
  if ((v9 & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656815CLL);
  }
  *(_DWORD *)(v8 + 24) += 2;
  v179 = (WebCore::Node *)v8;
  v11 = *(WebCore::TreeScope **)(v8 + 40);
  v12 = *(_QWORD *)v11;
  v13 = *(_WORD *)(*(_QWORD *)v11 + 28);
  if (*(_QWORD *)v11)
    v14 = (v13 & 0x80) == 0;
  else
    v14 = 1;
  if (!v14 && !*(_BYTE *)(v12 + 193))
  {
    v139 = *(_QWORD *)(v12 + 200);
    if (v139)
    {
      v140 = *(_QWORD *)(v139 + 8);
      if (v140)
      {
        if (*(_WORD *)(*(_QWORD *)(v140 + 96) + 10) == 242)
        {
          v11 = (WebCore::TreeScope *)*((_QWORD *)v11 + 2);
          v12 = *(_QWORD *)v11;
          v13 = *(_WORD *)(*(_QWORD *)v11 + 28);
        }
      }
    }
  }
  if ((v13 & 0xF000) != 0x9000 && (v13 & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196567F40);
  }
  *(_DWORD *)(v12 + 24) += 2;
  v178 = v11;
  v15 = (WTF::String *)*((_QWORD *)v11 + 1);
  v16 = *((_DWORD *)v15 + 6);
  *((_DWORD *)v15 + 6) = v16 + 2;
  v177 = v15;
  v17 = *(_QWORD *)(v8 + 96);
  if (!*(_QWORD *)(v17 + 24))
  {
    *v7 = 0;
    v177 = 0;
    goto LABEL_105;
  }
  v18 = *(_QWORD **)(a4 + 56);
  v176 = 0;
  *v7 = 0;
  if ((byte_1ECE84B79 & 1) == 0)
  {
    WebCore::tagSet(&v182, WebCore::clipperFilterMaskerTags(void)::tags, 24);
    qword_1ECE84BC0 = (uint64_t)v182;
    v163 = (int)v184;
    dword_1ECE84B80 = (int)v183;
    v182 = 0;
    v183 = 0;
    LODWORD(v184) = 0;
    dword_1ECE84B88 = v163;
    BYTE4(v184) = 0;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)&v182, v164);
    byte_1ECE84B79 = 1;
  }
  if (qword_1ECE84BC0)
  {
    v19 = dword_1ECE84B80 - 1;
    v20 = *(_QWORD *)(v17 + 24);
    v21 = *(_DWORD *)(v20 + 16);
    v22 = (dword_1ECE84B88 ^ (v21 >> 8)) & (dword_1ECE84B80 - 1);
    v23 = *(_QWORD *)(qword_1ECE84BC0 + 8 * v22);
    if (v23)
    {
      v24 = v21 >> 8;
      v25 = -1;
      while (1)
      {
        v26 = *(_DWORD *)(v23 + 16);
        if (++v25 > ((v22 + dword_1ECE84B80 - ((dword_1ECE84B88 ^ (v26 >> 8)) & v19)) & v19))
          goto LABEL_28;
        if (v23 == v20 && v26 >> 8 == v24)
          break;
        v22 = (v22 + 1) & v19;
        v23 = *(_QWORD *)(qword_1ECE84BC0 + 8 * v22);
        if (!v23)
          goto LABEL_28;
      }
      v27 = *(_QWORD *)(a4 + 8);
      v28 = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 264);
      if (v28 && !*(_DWORD *)(v28 + 12))
      {
        v120 = *(WTF::StringImpl **)(v28 + 32);
        if (v120)
        {
          *(_DWORD *)v120 += 2;
          v182 = v120;
          if (*((_DWORD *)v120 + 1))
          {
            v121 = WebCore::TreeScope::svgResourcesMap(v178);
            v122 = *(_QWORD *)(v121 + 48);
            if (v122)
            {
              v123 = *(_DWORD *)(v121 + 56);
              v124 = v123 - 1;
              v125 = *(_DWORD *)(v121 + 64);
              v126 = *((_DWORD *)v182 + 4);
              v127 = (v125 ^ (v126 >> 8)) & (v123 - 1);
              v128 = *(WTF::StringImpl **)(v122 + 16 * v127);
              if (v128)
              {
                v129 = v126 >> 8;
                v130 = -1;
                while (1)
                {
                  v131 = *((_DWORD *)v128 + 4);
                  if (++v130 > (((_DWORD)v127 + v123 - ((v125 ^ (v131 >> 8)) & v124)) & v124))
                    goto LABEL_247;
                  if (v128 == v182 && v131 >> 8 == v129)
                    break;
                  v127 = ((_DWORD)v127 + 1) & v124;
                  v128 = *(WTF::StringImpl **)(v122 + 16 * v127);
                  if (!v128)
                    goto LABEL_247;
                }
                v133 = *(_QWORD *)(v122 + 16 * v127 + 8);
                if (!v133
                  || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v133 + 216) + 56))(v133 + 216) != 7)
                {
                  goto LABEL_247;
                }
                v135 = (_QWORD **)*v7;
                if (!*v7)
                {
                  v135 = (_QWORD **)WTF::fastMalloc((WTF *)0x28);
                  a5 = 0.0;
                  *(_OWORD *)v135 = 0u;
                  *((_OWORD *)v135 + 1) = 0u;
                  *((_BYTE *)v135 + 32) = 0;
                  v141 = (WebCore::SVGResources *)*v7;
                  *v7 = (uint64_t)v135;
                  if (v141)
                  {
                    WebCore::SVGResources::~SVGResources(v141, v134);
                    WTF::fastFree(v142, v143);
                    v135 = (_QWORD **)*v7;
                  }
                }
                if (!*v135)
                {
                  v136 = WTF::fastMalloc((WTF *)0x18);
                  *(_QWORD *)(v136 + 8) = 0;
                  *(_QWORD *)(v136 + 16) = 0;
                  *(_QWORD *)v136 = 0;
                  std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100]((WTF ***)v135, (WTF **)v136);
                }
                v137 = *(_QWORD *)(v133 + 8);
                if (!v137)
                {
                  v137 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v137 = 1;
                  *(_QWORD *)(v137 + 8) = v133;
                  v147 = *(WTF **)(v133 + 8);
                  *(_QWORD *)(v133 + 8) = v137;
                  if (v147)
                  {
                    if (*(_DWORD *)v147 == 1)
                    {
                      WTF::fastFree(v147, v134);
                      v137 = *(_QWORD *)(v133 + 8);
                      if (!v137)
                      {
LABEL_194:
                        v138 = (WTF *)**v135;
                        **v135 = v137;
                        if (v138)
                        {
                          if (*(_DWORD *)v138 == 1)
                            WTF::fastFree(v138, v134);
                          else
                            --*(_DWORD *)v138;
                        }
                        goto LABEL_248;
                      }
                    }
                    else
                    {
                      --*(_DWORD *)v147;
                    }
                  }
                }
                ++*(_DWORD *)v137;
                goto LABEL_194;
              }
            }
          }
        }
        else
        {
          v182 = 0;
        }
LABEL_247:
        WebCore::TreeScope::addPendingSVGResource(v178, &v182, v179);
LABEL_248:
        v171 = v182;
        v182 = 0;
        if (v171)
        {
          if (*(_DWORD *)v171 == 2)
            WTF::StringImpl::destroy(v171, (WTF::StringImpl *)v134);
          else
            *(_DWORD *)v171 -= 2;
        }
        v27 = *(_QWORD *)(a4 + 8);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 32);
      if (*(_DWORD *)(v29 + 20) == 1)
      {
        v148 = **(_QWORD **)(v29 + 8);
        if (v148 && *(_BYTE *)(v148 + 12) == 0)
        {
          v150 = (unsigned int *)(v148 + 8);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 + 1, v150));
          WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)(v148 + 16), v177, &v182, a5, a6, a7);
          v152 = WebCore::getRenderSVGResourceById<WebCore::LegacyRenderSVGResourceFilter>(v178, (const WTF::AtomString *)&v182);
          if (v152)
          {
            v153 = (WebCore::LegacyRenderSVGResourceFilter *)v152;
            v154 = (WTF ***)WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_0::operator()(v7);
            WebCore::SVGResources::setFilter(v154, v153);
          }
          else
          {
            WebCore::TreeScope::addPendingSVGResource(v178, &v182, v179);
          }
          v156 = v182;
          v182 = 0;
          if (v156)
          {
            if (*(_DWORD *)v156 == 2)
              WTF::StringImpl::destroy(v156, v155);
            else
              *(_DWORD *)v156 -= 2;
          }
          do
          {
            v157 = __ldaxr(v150);
            v158 = v157 - 1;
          }
          while (__stlxr(v158, v150));
          if (!v158)
          {
            atomic_store(1u, (unsigned int *)(v148 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
          }
        }
      }
      v30 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32) + 48);
      if (!*((_QWORD *)v30 + 1))
      {
        v31 = (_DWORD *)*((_QWORD *)v30 + 2);
        v32 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        if (!v31)
          v32 = 0;
        if (!v32)
          goto LABEL_28;
LABEL_240:
        if (v31)
        {
          ++v31[2];
          (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *, WTF::String *))(*(_QWORD *)v31 + 88))(&v182, v31, v177);
        }
        else
        {
          v182 = 0;
          WTF::URL::invalidate((WTF::URL *)&v182);
        }
        v162 = v182;
        if (v182)
        {
          if (*((_DWORD *)v182 + 1))
          {
            WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)&v182, v177, v181, a5, a6, a7);
            v172 = WebCore::getRenderSVGResourceById<WebCore::LegacyRenderSVGResourceMasker>(v178, (uint64_t)v181);
            if (v172)
            {
              v173 = (WebCore::LegacyRenderSVGResourceMasker *)v172;
              v174 = (WTF ***)WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_0::operator()(v7);
              WebCore::SVGResources::setMasker(v174, v173);
            }
            else
            {
              WebCore::TreeScope::addPendingSVGResource(v178, v181, v179);
            }
            v175 = v181[0];
            v181[0] = 0;
            if (v175)
            {
              if (*(_DWORD *)v175 == 2)
                WTF::StringImpl::destroy(v175, v161);
              else
                *(_DWORD *)v175 -= 2;
            }
            v162 = v182;
            v182 = 0;
            if (!v162)
              goto LABEL_243;
          }
          else
          {
            v182 = 0;
          }
          if (*(_DWORD *)v162 == 2)
            WTF::StringImpl::destroy(v162, v161);
          else
            *(_DWORD *)v162 -= 2;
        }
LABEL_243:
        if (v31)
        {
          if (v31[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
          else
            --v31[2];
        }
        goto LABEL_28;
      }
      if (WebCore::FillLayer::hasImageInAnyLayer(v30))
      {
        v31 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32) + 48) + 16);
        goto LABEL_240;
      }
    }
  }
LABEL_28:
  if ((byte_1ECE84B7A & 1) == 0)
  {
    WebCore::tagSet(&v182, WebCore::markerTags(void)::tags, 4);
    qword_1ECE84BC8 = (uint64_t)v182;
    v165 = (int)v184;
    dword_1ECE84B90 = (int)v183;
    v182 = 0;
    v183 = 0;
    LODWORD(v184) = 0;
    dword_1ECE84B98 = v165;
    BYTE4(v184) = 0;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)&v182, v166);
    byte_1ECE84B7A = 1;
  }
  if (qword_1ECE84BC8)
  {
    v33 = dword_1ECE84B90 - 1;
    v34 = *(_QWORD *)(v17 + 24);
    v35 = *(_DWORD *)(v34 + 16);
    v36 = (dword_1ECE84B98 ^ (v35 >> 8)) & (dword_1ECE84B90 - 1);
    v37 = *(_QWORD *)(qword_1ECE84BC8 + 8 * v36);
    if (v37)
    {
      v38 = v35 >> 8;
      v39 = -1;
      do
      {
        v40 = *(_DWORD *)(v37 + 16);
        if (++v39 > ((v36 + dword_1ECE84B90 - ((dword_1ECE84B98 ^ (v40 >> 8)) & v33)) & v33))
          break;
        if (v37 == v34 && v40 >> 8 == v38)
        {
          v41 = (_QWORD *)v18[5];
          v42 = (WebCore::SVGURIReference *)(v41 + 1);
          v43 = v41[1];
          if (v43 && *(_DWORD *)(v43 + 4)
            || (v44 = v41[2]) != 0 && *(_DWORD *)(v44 + 4)
            || (v45 = v41[3]) != 0 && *(_DWORD *)(v45 + 4))
          {
            v182 = (WTF::StringImpl *)&v177;
            v183 = &v178;
            v184 = &v176;
            v185 = v7;
            v186 = &v179;
            WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_1::operator()((uint64_t)&v182, v42, (void (*)(_QWORD *, uint64_t))WebCore::SVGResources::setMarkerStart, 0, a5, a6, a7);
            WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_1::operator()((uint64_t)&v182, (WebCore::SVGURIReference *)(v18[5] + 16), (void (*)(_QWORD *, uint64_t))WebCore::SVGResources::setMarkerMid, 0, v99, v100, v101);
            WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_1::operator()((uint64_t)&v182, (WebCore::SVGURIReference *)(v18[5] + 24), (void (*)(_QWORD *, uint64_t))WebCore::SVGResources::setMarkerEnd, 0, v102, v103, v104);
          }
          break;
        }
        v36 = (v36 + 1) & v33;
        v37 = *(_QWORD *)(qword_1ECE84BC8 + 8 * v36);
      }
      while (v37);
    }
  }
  if ((byte_1ECE84B7B & 1) == 0)
  {
    WebCore::tagSet(&v182, WebCore::fillAndStrokeTags(void)::tags, 12);
    qword_1ECE84BD0 = (uint64_t)v182;
    v167 = (int)v184;
    dword_1ECE84BA0 = (int)v183;
    v182 = 0;
    v183 = 0;
    LODWORD(v184) = 0;
    dword_1ECE84BA8 = v167;
    BYTE4(v184) = 0;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)&v182, v168);
    byte_1ECE84B7B = 1;
  }
  if (qword_1ECE84BD0)
  {
    v46 = dword_1ECE84BA0 - 1;
    v47 = *(_QWORD *)(v17 + 24);
    v48 = *(_DWORD *)(v47 + 16);
    v49 = (dword_1ECE84BA8 ^ (v48 >> 8)) & (dword_1ECE84BA0 - 1);
    v50 = *(_QWORD *)(qword_1ECE84BD0 + 8 * v49);
    if (v50)
    {
      v51 = v48 >> 8;
      v52 = -1;
      while (1)
      {
        v53 = *(_DWORD *)(v50 + 16);
        if (++v52 > ((v49 + dword_1ECE84BA0 - ((dword_1ECE84BA8 ^ (v53 >> 8)) & v46)) & v46))
          goto LABEL_59;
        if (v50 == v47 && v53 >> 8 == v51)
          break;
        v49 = (v49 + 1) & v46;
        v50 = *(_QWORD *)(qword_1ECE84BD0 + 8 * v49);
        if (!v50)
          goto LABEL_59;
      }
      v54 = v18[2];
      v55 = *(unsigned __int8 *)(v54 + 56);
      if (v55 == 1)
      {
LABEL_58:
        v59 = v18[3];
        v60 = *(unsigned __int8 *)(v59 + 80);
        if (v60 != 1)
        {
          LOBYTE(v181[0]) = 0;
          v182 = 0;
          v105 = WebCore::paintingResourceFromSVGPaint(v178, v60, (WebCore::SVGURIReference *)(v59 + 40), &v182, v181, a5, a6, a7);
          if (v105)
          {
            v159 = (WTF **)v105;
            v160 = (WebCore::SVGResources *)WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_0::operator()(v7);
            WebCore::SVGResources::setStroke(v160, v159);
          }
          else if (LOBYTE(v181[0]))
          {
            WebCore::TreeScope::addPendingSVGResource(v178, &v182, v179);
          }
          v107 = v182;
          v182 = 0;
          if (v107)
          {
            if (*(_DWORD *)v107 == 2)
              WTF::StringImpl::destroy(v107, v106);
            else
              *(_DWORD *)v107 -= 2;
          }
        }
        goto LABEL_59;
      }
      LOBYTE(v181[0]) = 0;
      v182 = 0;
      v56 = WebCore::paintingResourceFromSVGPaint(v178, v55, (WebCore::SVGURIReference *)(v54 + 40), &v182, v181, a5, a6, a7);
      if (!v56)
      {
        if (LOBYTE(v181[0]))
          WebCore::TreeScope::addPendingSVGResource(v178, &v182, v179);
LABEL_55:
        v58 = v182;
        v182 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v57);
          else
            *(_DWORD *)v58 -= 2;
        }
        goto LABEL_58;
      }
      v108 = v56;
      v109 = *v7;
      if (!*v7)
      {
        v109 = WTF::fastMalloc((WTF *)0x28);
        a5 = 0.0;
        *(_OWORD *)v109 = 0u;
        *(_OWORD *)(v109 + 16) = 0u;
        *(_BYTE *)(v109 + 32) = 0;
        v117 = (WebCore::SVGResources *)*v7;
        *v7 = v109;
        if (v117)
        {
          WebCore::SVGResources::~SVGResources(v117, v57);
          WTF::fastFree(v118, v119);
          v109 = *v7;
        }
      }
      if (!*(_QWORD *)(v109 + 16))
      {
        v110 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v110 = 0;
        v110[1] = 0;
        v111 = *(WTF ***)(v109 + 16);
        *(_QWORD *)(v109 + 16) = v110;
        if (v111)
        {
          v112 = v111[1];
          v111[1] = 0;
          if (v112)
          {
            if (*(_DWORD *)v112 == 1)
              WTF::fastFree(v112, v57);
            else
              --*(_DWORD *)v112;
          }
          v113 = *v111;
          *v111 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 1)
              WTF::fastFree(v113, v57);
            else
              --*(_DWORD *)v113;
          }
          WTF::fastFree((WTF *)v111, v57);
        }
      }
      v114 = *(_QWORD *)(v108 + 8);
      if (!v114)
      {
        v114 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v114 = 1;
        *(_QWORD *)(v114 + 8) = v108;
        v132 = *(WTF **)(v108 + 8);
        *(_QWORD *)(v108 + 8) = v114;
        if (v132)
        {
          if (*(_DWORD *)v132 == 1)
          {
            WTF::fastFree(v132, v57);
            v114 = *(_QWORD *)(v108 + 8);
            if (!v114)
            {
LABEL_159:
              v115 = *(WTF ***)(v109 + 16);
              v116 = *v115;
              *v115 = (WTF *)v114;
              if (v116)
              {
                if (*(_DWORD *)v116 == 1)
                  WTF::fastFree(v116, v57);
                else
                  --*(_DWORD *)v116;
              }
              goto LABEL_55;
            }
          }
          else
          {
            --*(_DWORD *)v132;
          }
        }
      }
      ++*(_DWORD *)v114;
      goto LABEL_159;
    }
  }
LABEL_59:
  if ((byte_1ECE84B7C & 1) == 0)
  {
    WebCore::tagSet(&v182, WebCore::chainableResourceTags(void)::tags, 4);
    qword_1ECE84BD8 = (uint64_t)v182;
    v169 = (int)v184;
    dword_1ECE84BB0 = (int)v183;
    v182 = 0;
    v183 = 0;
    LODWORD(v184) = 0;
    dword_1ECE84BB8 = v169;
    BYTE4(v184) = 0;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)&v182, v170);
    byte_1ECE84B7C = 1;
  }
  if (qword_1ECE84BD8)
  {
    v61 = dword_1ECE84BB0 - 1;
    v62 = *(_QWORD *)(v17 + 24);
    v63 = *(_DWORD *)(v62 + 16);
    v64 = (dword_1ECE84BB8 ^ (v63 >> 8)) & (dword_1ECE84BB0 - 1);
    v65 = *(_QWORD *)(qword_1ECE84BD8 + 8 * v64);
    if (v65)
    {
      v66 = v63 >> 8;
      v67 = -1;
      while (1)
      {
        v68 = *(_DWORD *)(v65 + 16);
        if (++v67 > ((v64 + dword_1ECE84BB0 - ((dword_1ECE84BB8 ^ (v68 >> 8)) & v61)) & v61))
          goto LABEL_103;
        if (v65 == v62 && v68 >> 8 == v66)
          break;
        v64 = (v64 + 1) & v61;
        v65 = *(_QWORD *)(qword_1ECE84BD8 + 8 * v64);
        if (!v65)
          goto LABEL_103;
      }
      v69 = v179;
      v180 = 0;
      v70 = *(_QWORD *)(*((_QWORD *)v179 + 12) + 24);
      if (v70 == *(_QWORD *)(WebCore::SVGNames::patternTag + 24))
      {
        WebCore::SVGURIReference::href((uint64_t *)v179 + 26, &v182);
        v75 = v182;
      }
      else
      {
        if (v70 != *(_QWORD *)(WebCore::SVGNames::radialGradientTag + 24)
          && v70 != *(_QWORD *)(WebCore::SVGNames::linearGradientTag + 24)
          && v70 != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
        {
          goto LABEL_78;
        }
        v71 = *((_QWORD *)v179 + 23);
        v73 = (uint64_t *)(v71 + 24);
        v72 = *(_QWORD *)(v71 + 24);
        if (v72
          && *(_DWORD *)(v72 - 12)
          && (WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v73, (uint64_t **)&v182), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v73, (uint64_t **)v181), v183 != (WebCore::TreeScope **)v181[1]))
        {
          v74 = v71 + 48;
        }
        else
        {
          v74 = v71 + 40;
        }
        v75 = *(WTF::StringImpl **)(*(_QWORD *)v74 + 32);
        if (v75)
          *(_DWORD *)v75 += 2;
      }
      v180 = v75;
LABEL_78:
      v76 = *(_QWORD *)(*((_QWORD *)v69 + 5) + 8);
      *(_DWORD *)(v76 + 24) += 2;
      WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)&v180, (const WTF::String *)v76, &v182, a5, a6, a7);
      v78 = v182;
      if (v182)
      {
        v79 = *(_DWORD *)v182;
        *(_DWORD *)v182 += 2;
        v182 = 0;
        if (v79)
          *(_DWORD *)v78 = v79;
        else
          WTF::StringImpl::destroy(v78, v77);
      }
      else
      {
        v182 = 0;
      }
      if (*(_DWORD *)(v76 + 24) == 2)
      {
        if ((*(_WORD *)(v76 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v76);
      }
      else
      {
        *(_DWORD *)(v76 + 24) -= 2;
      }
      v80 = v180;
      v180 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v77);
        else
          *(_DWORD *)v80 -= 2;
      }
      if (v78)
      {
        v181[0] = v78;
        if ((*((_BYTE *)v78 + 16) & 0x10) != 0)
        {
          v182 = v78;
          goto LABEL_89;
        }
        WTF::AtomStringImpl::addSlowCase();
        v98 = v181[0];
        v78 = v182;
        v182 = 0;
        v181[0] = 0;
        if (v98)
        {
          if (*(_DWORD *)v98 == 2)
            WTF::StringImpl::destroy(v98, v97);
          else
            *(_DWORD *)v98 -= 2;
        }
        v182 = v78;
        if (v78)
        {
LABEL_89:
          if (*((_DWORD *)v78 + 1))
          {
            v81 = WebCore::TreeScope::svgResourcesMap((WTF::String *)((char *)v177 + 96));
            v82 = *(_QWORD *)(v81 + 48);
            if (v82)
            {
              v83 = *(_DWORD *)(v81 + 56);
              v84 = v83 - 1;
              v85 = *(_DWORD *)(v81 + 64);
              v86 = *((_DWORD *)v78 + 4);
              v87 = (v85 ^ (v86 >> 8)) & (v83 - 1);
              v88 = *(WTF::StringImpl **)(v82 + 16 * v87);
              if (v88)
              {
                v89 = v86 >> 8;
                v90 = -1;
                do
                {
                  v91 = *((_DWORD *)v88 + 4);
                  if (++v90 > (((_DWORD)v87 + v83 - ((v85 ^ (v91 >> 8)) & v84)) & v84))
                    break;
                  if (v88 == v78 && v91 >> 8 == v89)
                  {
                    v92 = *(WebCore::LegacyRenderSVGResourceContainer **)(v82 + 16 * v87 + 8);
                    if (!v92)
                      break;
                    v144 = v179;
                    WebCore::LegacyRenderSVGModelObject::protectedElement((uint64_t)v92, v181);
                    LODWORD(v144) = WebCore::isChainableResource(*(WebCore **)(*((_QWORD *)v144 + 12) + 24), *((const WebCore::SVGElement **)v181[0] + 12), v145);
                    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v181);
                    if ((_DWORD)v144)
                    {
                      v146 = (WebCore::SVGResources *)WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_0::operator()(v7);
                      WebCore::SVGResources::setLinkedResource(v146, v92);
                    }
                    goto LABEL_100;
                  }
                  v87 = ((_DWORD)v87 + 1) & v84;
                  v88 = *(WTF::StringImpl **)(v82 + 16 * v87);
                }
                while (v88);
              }
            }
          }
        }
      }
      else
      {
        v182 = 0;
      }
      WebCore::TreeScope::addPendingSVGResource(v178, &v182, v179);
      v78 = v182;
LABEL_100:
      v182 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v93);
        else
          *(_DWORD *)v78 -= 2;
      }
    }
  }
LABEL_103:
  v15 = v177;
  v177 = 0;
  if (!v15)
    goto LABEL_107;
  v16 = *((_DWORD *)v15 + 6) - 2;
LABEL_105:
  if (v16)
  {
    *((_DWORD *)v15 + 6) = v16;
  }
  else if ((*((_WORD *)v15 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v15);
  }
LABEL_107:
  v94 = v178;
  v178 = 0;
  if (v94)
  {
    v95 = *(_QWORD *)v94;
    v96 = *(_WORD *)(*(_QWORD *)v94 + 28);
    if ((!v95 || (v96 & 0xF000) != 0x9000) && (v96 & 0x80) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196567F64);
    }
    if (*(_DWORD *)(v95 + 24) == 2)
    {
      if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v95);
    }
    else
    {
      *(_DWORD *)(v95 + 24) -= 2;
    }
  }
  this = v179;
  v179 = 0;
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_0::operator()(uint64_t *a1)
{
  uint64_t result;
  void *v3;
  WebCore::SVGResources *v4;
  WTF *v5;
  void *v6;

  result = *a1;
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_BYTE *)(result + 32) = 0;
    v4 = (WebCore::SVGResources *)*a1;
    *a1 = result;
    if (v4)
    {
      WebCore::SVGResources::~SVGResources(v4, v3);
      WTF::fastFree(v5, v6);
      return *a1;
    }
  }
  return result;
}

WTF *WebCore::SVGResources::setFilter(WTF ***this, WebCore::LegacyRenderSVGResourceFilter *a2)
{
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *result;
  int v9;
  void *v10;
  WTF *v11;

  if (!*this)
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    v11 = 0;
    std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100](this, (WTF **)v4);
    std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100]((WTF ***)&v11, 0);
  }
  WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v11, (uint64_t)a2);
  v6 = *this;
  v7 = v11;
  v11 = 0;
  result = v6[1];
  v6[1] = v7;
  if (result)
  {
    v9 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result != 1)
    {
LABEL_5:
      *(_DWORD *)result = v9;
      return result;
    }
    WTF::fastFree(result, v5);
    result = v11;
    v11 = 0;
    if (result)
    {
      v9 = *(_DWORD *)result - 1;
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v10);
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t WebCore::getRenderSVGResourceById<WebCore::LegacyRenderSVGResourceMasker>(WebCore::TreeScope *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v4 = WebCore::TreeScope::svgResourcesMap(a1);
      v5 = *(_QWORD *)(v4 + 48);
      if (v5)
      {
        v6 = *(_DWORD *)(v4 + 56);
        v7 = v6 - 1;
        v8 = *(_DWORD *)(v4 + 64);
        v9 = *(_DWORD *)(*(_QWORD *)a2 + 16);
        v10 = (v8 ^ (v9 >> 8)) & (v6 - 1);
        v11 = *(_QWORD *)(v5 + 16 * v10);
        if (v11)
        {
          v12 = v9 >> 8;
          v13 = -1;
          while (1)
          {
            v14 = *(_DWORD *)(v11 + 16);
            if (++v13 > (((_DWORD)v10 + v6 - ((v8 ^ (v14 >> 8)) & v7)) & v7))
              break;
            if (v11 == *(_QWORD *)a2 && v14 >> 8 == v12)
            {
              v15 = *(_QWORD *)(v5 + 16 * v10 + 8);
              if (!v15)
                return 0;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v15 + 216) + 56))(v15 + 216))
                return 0;
              else
                return v15;
            }
            result = 0;
            v10 = ((_DWORD)v10 + 1) & v7;
            v11 = *(_QWORD *)(v5 + 16 * v10);
            if (!v11)
              return result;
          }
        }
      }
    }
  }
  return 0;
}

WTF *WebCore::SVGResources::setMasker(WTF ***this, WebCore::LegacyRenderSVGResourceMasker *a2)
{
  uint64_t v4;
  WTF *result;
  WTF *v6;
  WTF *v7;

  if (!*this)
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100](this, (WTF **)v4);
  }
  result = (WTF *)*((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_4;
  result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *((_QWORD *)result + 1) = a2;
  v7 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (!v7)
    goto LABEL_4;
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
LABEL_4:
    ++*(_DWORD *)result;
    goto LABEL_5;
  }
  WTF::fastFree(v7, a2);
  result = (WTF *)*((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_4;
LABEL_5:
  v6 = (*this)[2];
  (*this)[2] = result;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      return (WTF *)WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  return result;
}

WTF::StringImpl *WebCore::SVGResources::buildCachedResources(WebCore::RenderElement const&,WebCore::RenderStyle const&)::$_1::operator()(uint64_t a1, WebCore::SVGURIReference *this, void (*a3)(_QWORD *, uint64_t), uint64_t a4, double a5, double a6, float a7)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  WebCore::SVGResources *v27;
  WTF *v28;
  void *v29;
  _QWORD *v30;
  WTF::StringImpl *v31;

  WebCore::SVGURIReference::fragmentIdentifierFromIRIString(this, **(const WTF::String ***)a1, &v31, a5, a6, a7);
  if (v31)
  {
    if (*((_DWORD *)v31 + 1))
    {
      v12 = WebCore::TreeScope::svgResourcesMap(**(WebCore::TreeScope ***)(a1 + 8));
      v13 = *(_QWORD *)(v12 + 48);
      if (v13)
      {
        v14 = *(_DWORD *)(v12 + 56);
        v15 = v14 - 1;
        v16 = *(_DWORD *)(v12 + 64);
        v17 = *((_DWORD *)v31 + 4);
        v18 = (v16 ^ (v17 >> 8)) & (v14 - 1);
        v19 = *(WTF::StringImpl **)(v13 + 16 * v18);
        if (v19)
        {
          v20 = v17 >> 8;
          v21 = -1;
          do
          {
            v22 = *((_DWORD *)v19 + 4);
            if (++v21 > (((_DWORD)v18 + v14 - ((v16 ^ (v22 >> 8)) & v15)) & v15))
              break;
            if (v19 == v31 && v22 >> 8 == v20)
            {
              v23 = *(_QWORD *)(v13 + 16 * v18 + 8);
              if (!v23 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v23 + 216) + 56))(v23 + 216) != 1)
                break;
              v24 = *(uint64_t **)(a1 + 24);
              v25 = *v24;
              if (!*v24)
              {
                v25 = WTF::fastMalloc((WTF *)0x28);
                *(_OWORD *)v25 = 0u;
                *(_OWORD *)(v25 + 16) = 0u;
                *(_BYTE *)(v25 + 32) = 0;
                v27 = (WebCore::SVGResources *)*v24;
                *v24 = v25;
                if (v27)
                {
                  WebCore::SVGResources::~SVGResources(v27, v26);
                  WTF::fastFree(v28, v29);
                  v25 = *v24;
                }
              }
              v30 = (_QWORD *)(v25 + (a4 >> 1));
              if ((a4 & 1) != 0)
                a3 = *(void (**)(_QWORD *, uint64_t))(*v30 + a3);
              a3(v30, v23);
              goto LABEL_3;
            }
            v18 = ((_DWORD)v18 + 1) & v15;
            v19 = *(WTF::StringImpl **)(v13 + 16 * v18);
          }
          while (v19);
        }
      }
    }
  }
  WebCore::TreeScope::addPendingSVGResource(**(WebCore::TreeScope ***)(a1 + 8), &v31, **(WebCore::SVGElement ***)(a1 + 32));
LABEL_3:
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGResources::setMarkerStart(WebCore::SVGResources *this, WebCore::LegacyRenderSVGResourceMarker *a2)
{
  WTF ***v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;

  v3 = (WTF ***)((char *)this + 8);
  if (*((_QWORD *)this + 1))
  {
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100](v3, (WTF **)v5);
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_4;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v8 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (!v8)
    goto LABEL_4;
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_4:
    ++*(_DWORD *)v4;
    goto LABEL_7;
  }
  WTF::fastFree(v8, a2);
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_4;
LABEL_7:
  v6 = **v3;
  **v3 = (WTF *)v4;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  return 1;
}

uint64_t WebCore::SVGResources::setMarkerMid(WebCore::SVGResources *this, WebCore::LegacyRenderSVGResourceMarker *a2)
{
  WTF ***v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;

  v3 = (WTF ***)((char *)this + 8);
  if (*((_QWORD *)this + 1))
  {
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100](v3, (WTF **)v5);
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_4;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v8 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (!v8)
    goto LABEL_4;
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_4:
    ++*(_DWORD *)v4;
    goto LABEL_7;
  }
  WTF::fastFree(v8, a2);
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_4;
LABEL_7:
  v6 = (*v3)[1];
  (*v3)[1] = (WTF *)v4;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  return 1;
}

uint64_t WebCore::SVGResources::setMarkerEnd(WebCore::SVGResources *this, WebCore::LegacyRenderSVGResourceMarker *a2)
{
  WTF ***v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;

  v3 = (WTF ***)((char *)this + 8);
  if (*((_QWORD *)this + 1))
  {
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100](v3, (WTF **)v5);
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_4;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v8 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (!v8)
    goto LABEL_4;
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_4:
    ++*(_DWORD *)v4;
    goto LABEL_7;
  }
  WTF::fastFree(v8, a2);
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_4;
LABEL_7:
  v6 = (*v3)[2];
  (*v3)[2] = (WTF *)v4;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  return 1;
}

uint64_t WebCore::paintingResourceFromSVGPaint(WebCore::TreeScope *a1, unsigned __int8 a2, WebCore::SVGURIReference *this, WTF::StringImpl **a4, _BYTE *a5, double a6, double a7, float a8)
{
  uint64_t result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  if (a2 - 4 > 2)
    return 0;
  v12 = *((_QWORD *)a1 + 1);
  *(_DWORD *)(v12 + 24) += 2;
  WebCore::SVGURIReference::fragmentIdentifierFromIRIString(this, (const WTF::String *)v12, &v33, a6, a7, a8);
  v14 = v33;
  v33 = 0;
  v15 = *a4;
  *a4 = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      v32 = v33;
      v33 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v15 -= 2;
      v33 = 0;
    }
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if (*a4)
  {
    if (*((_DWORD *)*a4 + 1))
    {
      v16 = WebCore::TreeScope::svgResourcesMap(a1);
      v17 = *(_QWORD *)(v16 + 48);
      if (v17)
      {
        v18 = *(_DWORD *)(v16 + 56);
        v19 = v18 - 1;
        v20 = *(_DWORD *)(v16 + 64);
        v21 = *((_DWORD *)*a4 + 4);
        v22 = (v20 ^ (v21 >> 8)) & (v18 - 1);
        v23 = *(WTF::StringImpl **)(v17 + 16 * v22);
        if (v23)
        {
          v24 = v21 >> 8;
          v25 = -1;
          do
          {
            v26 = *((_DWORD *)v23 + 4);
            if (++v25 > (((_DWORD)v22 + v18 - ((v20 ^ (v26 >> 8)) & v19)) & v19))
              break;
            if (v23 == *a4 && v26 >> 8 == v24)
            {
              v27 = *(_QWORD *)(v17 + 16 * v22 + 8);
              if (!v27)
                break;
              v28 = *(_QWORD *)(v27 + 216);
              ++*(_DWORD *)(v27 + 16);
              v29 = (*(uint64_t (**)(void))(v28 + 56))();
              result = v27;
              if ((v29 - 4) <= 0xFFFFFFFD)
              {
                if (v29 == 4)
                  result = v27;
                else
                  result = 0;
              }
              v30 = *(_DWORD *)(v27 + 16);
              if (!v30)
              {
                __break(0xC471u);
                JUMPOUT(0x196568F38);
              }
              *(_DWORD *)(v27 + 16) = v30 - 1;
              return result;
            }
            v22 = ((_DWORD)v22 + 1) & v19;
            v23 = *(WTF::StringImpl **)(v17 + 16 * v22);
          }
          while (v23);
        }
      }
    }
  }
  result = 0;
  *a5 = 1;
  return result;
}

WTF *WebCore::SVGResources::setStroke(WebCore::SVGResources *this, WTF **a2)
{
  _QWORD *v4;
  WTF **v5;
  WTF *v6;
  WTF *v7;
  WTF *result;
  uint64_t v9;
  WTF *v10;
  WTF *v11;

  if (!*((_QWORD *)this + 2))
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = 0;
    v4[1] = 0;
    v5 = (WTF **)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v4;
    if (v5)
    {
      v6 = v5[1];
      v5[1] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, a2);
        else
          --*(_DWORD *)v6;
      }
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
          WTF::fastFree(v7, a2);
        else
          --*(_DWORD *)v7;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  result = a2[1];
  if (result)
    goto LABEL_11;
  result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *((_QWORD *)result + 1) = a2;
  v11 = a2[1];
  a2[1] = result;
  if (!v11)
    goto LABEL_11;
  if (*(_DWORD *)v11 != 1)
  {
    --*(_DWORD *)v11;
LABEL_11:
    ++*(_DWORD *)result;
    goto LABEL_12;
  }
  WTF::fastFree(v11, a2);
  result = a2[1];
  if (result)
    goto LABEL_11;
LABEL_12:
  v9 = *((_QWORD *)this + 2);
  v10 = *(WTF **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = result;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      return (WTF *)WTF::fastFree(v10, a2);
    else
      --*(_DWORD *)v10;
  }
  return result;
}

BOOL WebCore::isChainableResource(WebCore *this, const WebCore::SVGElement *a2, const WebCore::SVGElement *a3)
{
  WebCore *v3;
  WebCore *v5;

  if (*(WebCore **)(WebCore::SVGNames::patternTag + 24) == this)
  {
LABEL_6:
    v5 = (WebCore *)*((_QWORD *)a2 + 3);
    return v5 == this;
  }
  v3 = *(WebCore **)(WebCore::SVGNames::radialGradientTag + 24);
  if (v3 != this && *(WebCore **)(WebCore::SVGNames::linearGradientTag + 24) != this)
  {
    if (*(WebCore **)(WebCore::SVGNames::filterTag + 24) != this)
      return 0;
    goto LABEL_6;
  }
  v5 = (WebCore *)*((_QWORD *)a2 + 3);
  if (v5 != v3)
  {
    this = *(WebCore **)(WebCore::SVGNames::linearGradientTag + 24);
    return v5 == this;
  }
  return 1;
}

uint64_t WebCore::SVGResources::setLinkedResource(WebCore::SVGResources *this, WebCore::LegacyRenderSVGResourceContainer *a2)
{
  uint64_t result;
  WTF *v4;
  WTF *v6;

  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_2;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v6 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (!v6)
    goto LABEL_2;
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
LABEL_2:
    ++*(_DWORD *)result;
    goto LABEL_3;
  }
  WTF::fastFree(v6, a2);
  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_2;
LABEL_3:
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = result;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

uint64_t **WebCore::SVGResources::layoutDifferentRootIfNeeded(uint64_t **this, const WebCore::RenderElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const WebCore::RenderElement *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderElement *v17;
  uint64_t v18;
  WebCore::RenderElement *v19;
  uint64_t v20;
  WebCore::RenderElement *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;

  if (*((_BYTE *)this + 32))
    return this;
  v3 = (uint64_t)this;
  *((_BYTE *)this + 32) = 1;
  v24[1] = a2;
  v25 = 0;
  v24[0] = &v25;
  if (*this)
  {
    v4 = **this;
    if (!v4)
      goto LABEL_9;
    this = *(uint64_t ***)(v4 + 8);
    if (!this)
      goto LABEL_9;
    v5 = *(_QWORD *)(v4 + 8);
    if (*((_BYTE *)this + 46) != 103)
    {
      v5 = (uint64_t)this;
      do
        v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
      while (*(_BYTE *)(v5 + 46) != 103);
    }
    if (*(_BYTE *)(v5 + 241))
      goto LABEL_9;
    v10 = a2;
    if (*((_BYTE *)a2 + 46) == 103)
    {
LABEL_20:
      v25 = (uint64_t)v10;
      if (v10 == (const WebCore::RenderElement *)v5)
      {
LABEL_9:
        v6 = *(_QWORD *)v3;
        v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
        if (v7)
        {
          v22 = *(_QWORD *)(v7 + 8);
          if (v22)
          {
            this = (uint64_t **)WebCore::lineageOfType<WebCore::LegacyRenderSVGRoot>(*(_QWORD *)(v7 + 8));
            if (!*((_BYTE *)this + 241))
            {
              v23 = (uint64_t)this;
              this = (uint64_t **)v25;
              if (!v25)
              {
                this = (uint64_t **)WebCore::lineageOfType<WebCore::LegacyRenderSVGRoot>((uint64_t)a2);
                v25 = (uint64_t)this;
              }
              if (this != (uint64_t **)v23)
              {
                this = (uint64_t **)WebCore::RenderElement::layoutIfNeeded(v22);
                v6 = *(_QWORD *)v3;
              }
            }
          }
        }
        v8 = *(_QWORD *)(v6 + 8);
        if (v8)
        {
          v14 = *(_QWORD *)(v8 + 8);
          if (v14)
          {
            this = (uint64_t **)WebCore::lineageOfType<WebCore::LegacyRenderSVGRoot>(*(_QWORD *)(v8 + 8));
            if (!*((_BYTE *)this + 241))
            {
              v15 = (uint64_t)this;
              this = (uint64_t **)v25;
              if (!v25)
              {
                this = (uint64_t **)WebCore::lineageOfType<WebCore::LegacyRenderSVGRoot>((uint64_t)a2);
                v25 = (uint64_t)this;
              }
              if (this != (uint64_t **)v15)
                this = (uint64_t **)WebCore::RenderElement::layoutIfNeeded(v14);
            }
          }
        }
        goto LABEL_11;
      }
    }
    else
    {
      for (i = *((_QWORD *)a2 + 4); i; i = *((_QWORD *)v10 + 4))
      {
        v10 = *(const WebCore::RenderElement **)(i + 8);
        if (!v10)
          break;
        if (*((_BYTE *)v10 + 46) == 103)
          goto LABEL_20;
      }
      v25 = 0;
    }
    if ((*((_BYTE *)this + 20) & 0xF8) != 0)
    {
      v12 = this[4];
      if (v12
        && (v13 = v12[1]) != 0
        && (*(_BYTE *)(*(_QWORD *)(v13 + 104) + 239) & 0x18) != 0
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3][1] + 40) + 8) + 1944) + 248) + 479))
      {
        this = (uint64_t **)WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)this);
      }
      else
      {
        this = (uint64_t **)((uint64_t (*)(uint64_t **))(*this)[86])(this);
      }
    }
    goto LABEL_9;
  }
LABEL_11:
  v9 = *(uint64_t **)(v3 + 8);
  if (v9)
  {
    v16 = *v9;
    if (v16)
      v17 = *(WebCore::RenderElement **)(v16 + 8);
    else
      v17 = 0;
    WebCore::SVGResources::layoutDifferentRootIfNeeded(WebCore::RenderElement const&)::$_0::operator()((uint64_t)v24, v17);
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
    if (v18)
      v19 = *(WebCore::RenderElement **)(v18 + 8);
    else
      v19 = 0;
    WebCore::SVGResources::layoutDifferentRootIfNeeded(WebCore::RenderElement const&)::$_0::operator()((uint64_t)v24, v19);
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
    if (v20)
      v21 = *(WebCore::RenderElement **)(v20 + 8);
    else
      v21 = 0;
    this = (uint64_t **)WebCore::SVGResources::layoutDifferentRootIfNeeded(WebCore::RenderElement const&)::$_0::operator()((uint64_t)v24, v21);
  }
  *(_BYTE *)(v3 + 32) = 0;
  return this;
}

uint64_t WebCore::SVGResources::layoutDifferentRootIfNeeded(WebCore::RenderElement const&)::$_0::operator()(uint64_t result, WebCore::RenderElement *this)
{
  WebCore::RenderElement *v2;
  WebCore::RenderElement *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v2 = this;
    if (*((_BYTE *)this + 46) != 103)
    {
      v2 = this;
      do
        v2 = *(WebCore::RenderElement **)(*((_QWORD *)v2 + 4) + 8);
      while (*((_BYTE *)v2 + 46) != 103);
    }
    if (!*((_BYTE *)v2 + 241))
    {
      v3 = **(WebCore::RenderElement ***)result;
      if (!v3)
      {
        v4 = *(_QWORD *)(result + 8);
        do
        {
          if (*(_BYTE *)(v4 + 46) == 103)
            break;
          v4 = *(_QWORD *)(v4 + 32);
          if (!v4)
            break;
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4);
        **(_QWORD **)result = v4;
        v3 = **(WebCore::RenderElement ***)result;
      }
      if (v3 != v2 && (*((_BYTE *)this + 20) & 0xF8) != 0)
      {
        v5 = *((_QWORD *)this + 4);
        if (v5
          && (v6 = *(_QWORD *)(v5 + 8)) != 0
          && (*(_BYTE *)(*(_QWORD *)(v6 + 104) + 239) & 0x18) != 0
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
        {
          return WebCore::RenderElement::clearNeedsLayoutForSkippedContent(this);
        }
        else
        {
          return (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 688))(this);
        }
      }
    }
  }
  return result;
}

BOOL WebCore::SVGResources::markerReverseStart(WebCore::SVGResources *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *v1;
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        if ((*(_WORD *)(v4 + 28) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1965695C8);
        }
        if (*(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x1965695E8);
        }
        v5 = *(_QWORD **)(v4 + 248);
        v6 = v5[3];
        if (v6 && *(_DWORD *)(v6 - 12))
        {
          v9 = *(unsigned int *)(v6 - 4);
          if ((_DWORD)v9)
          {
            v10 = 8 * v9;
            v11 = (uint64_t *)v5[3];
            while ((unint64_t)(*v11 + 1) <= 1)
            {
              ++v11;
              v10 -= 8;
              if (!v10)
                goto LABEL_7;
            }
          }
          else
          {
            v11 = (uint64_t *)v5[3];
          }
          v12 = (uint64_t *)(v6 + 8 * v9);
          if (v11 != v12)
          {
            v13 = *v11;
LABEL_21:
            if (*(_QWORD *)(v13 + 8))
            {
              v7 = v5 + 6;
              return (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7) == 0;
            }
            while (++v11 != v12)
            {
              v13 = *v11;
              if ((unint64_t)(*v11 + 1) > 1)
              {
                if (v11 != v12)
                  goto LABEL_21;
                break;
              }
            }
          }
        }
LABEL_7:
        v7 = v5 + 5;
        return (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7) == 0;
      }
    }
  }
  return 0;
}

_QWORD *WebCore::SVGResources::removeClientFromCache(_QWORD *this, WebCore::RenderElement *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = this;
  v6 = (_QWORD *)*this;
  if (*(_OWORD *)this != 0 || this[2] || (v15 = this[3]) != 0 && *(_QWORD *)(v15 + 8))
  {
    v7 = this[3];
    if (v7)
    {
      this = *(_QWORD **)(v7 + 8);
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, WebCore::RenderElement *, uint64_t))(this[27] + 24))(this + 27, a2, a3);
    }
    if (v6)
    {
      if (*v6)
      {
        this = *(_QWORD **)(*v6 + 8);
        if (this)
        {
          this = (_QWORD *)WebCore::LegacyRenderSVGResourceClipper::removeClientFromCache((uint64_t)this, a2, a3);
          v6 = (_QWORD *)*v5;
        }
      }
      v8 = v6[1];
      if (v8)
      {
        this = *(_QWORD **)(v8 + 8);
        if (this)
        {
          this = (_QWORD *)WebCore::LegacyRenderSVGResourceFilter::removeClientFromCache((WebCore::LegacyRenderSVGResourceFilter *)this, a2, a3);
          v6 = (_QWORD *)*v5;
        }
      }
      v9 = v6[2];
      if (v9)
      {
        this = *(_QWORD **)(v9 + 8);
        if (this)
          this = (_QWORD *)WebCore::LegacyRenderSVGResourceMasker::removeClientFromCache((WTF **)this, a2, a3);
      }
    }
    v10 = (_QWORD *)v5[1];
    if (v10)
    {
      if (*v10)
      {
        this = *(_QWORD **)(*v10 + 8);
        if (this)
        {
          this = (_QWORD *)WebCore::LegacyRenderSVGResourceMarker::removeClientFromCache((WebCore::LegacyRenderSVGResourceMarker *)this, a2, a3);
          v10 = (_QWORD *)v5[1];
        }
      }
      v12 = v10[1];
      if (v12)
      {
        this = *(_QWORD **)(v12 + 8);
        if (this)
        {
          this = (_QWORD *)WebCore::LegacyRenderSVGResourceMarker::removeClientFromCache((WebCore::LegacyRenderSVGResourceMarker *)this, a2, a3);
          v10 = (_QWORD *)v5[1];
        }
      }
      v13 = v10[2];
      if (v13)
      {
        this = *(_QWORD **)(v13 + 8);
        if (this)
          this = (_QWORD *)WebCore::LegacyRenderSVGResourceMarker::removeClientFromCache((WebCore::LegacyRenderSVGResourceMarker *)this, a2, a3);
      }
    }
    v11 = (_QWORD *)v5[2];
    if (v11)
    {
      if (*v11)
      {
        this = *(_QWORD **)(*v11 + 8);
        if (this)
        {
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *, WebCore::RenderElement *, uint64_t))(this[27] + 24))(this + 27, a2, a3);
          v11 = (_QWORD *)v5[2];
        }
      }
      v14 = v11[1];
      if (v14)
      {
        this = *(_QWORD **)(v14 + 8);
        if (this)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *, WebCore::RenderElement *, uint64_t))(this[27] + 24))(this + 27, a2, a3);
      }
    }
  }
  return this;
}

WTF *WebCore::SVGResources::buildSetOfResources(WTF *result, uint64_t *a2)
{
  uint64_t *v2;
  WTF *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF **v23;
  unsigned int v25;
  void *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[24];
  WTF *v43;

  v2 = a2;
  v3 = result;
  v4 = *(_QWORD **)result;
  if (!*(_QWORD *)result && !*((_QWORD *)result + 1) && !*((_QWORD *)result + 2))
  {
    v39 = *((_QWORD *)result + 3);
    if (!v39 || !*(_QWORD *)(v39 + 8))
      return result;
  }
  v5 = *((_QWORD *)result + 3);
  if (v5)
  {
    a2 = *(uint64_t **)(v5 + 8);
    if (a2)
      return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)v2, a2, (uint64_t)v42);
  }
  if (v4)
  {
    if (!*v4 || (v6 = *(_QWORD *)(*v4 + 8)) == 0)
    {
LABEL_19:
      v14 = v4[1];
      if (v14)
      {
        v29 = *(_QWORD *)(v14 + 8);
        if (v29)
        {
          result = WTF::WeakHashSet<WebCore::LegacyRenderSVGResourceContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LegacyRenderSVGResourceFilter>((uint64_t)v42, (uint64_t)v2, v29);
          v4 = *(_QWORD **)v3;
        }
      }
      v15 = v4[2];
      if (v15)
      {
        v38 = *(_QWORD *)(v15 + 8);
        if (v38)
          result = WTF::WeakHashSet<WebCore::LegacyRenderSVGResourceContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LegacyRenderSVGResourceMasker>((uint64_t)v42, v2, v38);
      }
      goto LABEL_21;
    }
    v7 = *((_DWORD *)v2 + 3);
    v8 = *((_DWORD *)v2 + 2) + 1;
    *((_DWORD *)v2 + 2) = v8;
    if (v8 <= v7)
    {
LABEL_14:
      v12 = *(WTF **)(v6 + 8);
      if (!v12)
      {
        v12 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 1;
        *((_QWORD *)v12 + 1) = v6;
        v28 = *(WTF **)(v6 + 8);
        *(_QWORD *)(v6 + 8) = v12;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
          {
            WTF::fastFree(v28, v27);
            v12 = *(WTF **)(v6 + 8);
          }
          else
          {
            --*(_DWORD *)v28;
          }
        }
      }
      *(_DWORD *)v12 += 2;
      v43 = v12;
      WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add(v2, &v43, (uint64_t)v42);
      result = v43;
      v43 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, v13);
        else
          --*(_DWORD *)result;
      }
      if (*(_DWORD *)v12 == 1)
        result = (WTF *)WTF::fastFree(v12, v13);
      else
        --*(_DWORD *)v12;
      v4 = *(_QWORD **)v3;
      goto LABEL_19;
    }
    v9 = *v2;
    if (!*v2)
      goto LABEL_11;
    v20 = *(unsigned int *)(v9 - 4);
    if (!(_DWORD)v20)
      goto LABEL_42;
    v21 = 0;
    v22 = v20 - 1;
    do
    {
      v23 = (WTF **)(v9 + 8 * v22);
      if ((unint64_t)*v23 + 1 >= 2 && !*((_QWORD *)*v23 + 1))
      {
        v41 = v21;
        v40 = v22;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v23, a2);
        v22 = v40;
        v21 = v41 + 1;
      }
    }
    while ((unint64_t)v22--);
    v9 = *v2;
    if (v21)
    {
      v35 = v21;
      *(_DWORD *)(v9 - 16) += v21;
      v36 = *v2;
      if (*v2)
        v37 = *(_DWORD *)(v36 - 12);
      else
        v37 = 0;
      *(_DWORD *)(v36 - 12) = v37 - v35;
      v9 = *v2;
    }
    if (!v9)
    {
LABEL_11:
      v10 = 0;
      *((_DWORD *)v2 + 2) = 0;
LABEL_12:
      v11 = v10;
LABEL_13:
      *((_DWORD *)v2 + 3) = 2 * v11;
      goto LABEL_14;
    }
    v25 = *(_DWORD *)(v9 - 4);
    if (v25 < 9 || 6 * *(_DWORD *)(v9 - 12) >= v25)
    {
LABEL_42:
      *((_DWORD *)v2 + 2) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(v2);
      v9 = *v2;
      *((_DWORD *)v2 + 2) = 0;
      if (!v9)
      {
        v10 = 0;
        goto LABEL_12;
      }
    }
    v10 = *(_DWORD *)(v9 - 12);
    v11 = 0x7FFFFFFF;
    if (v10 >= 0x7FFFFFFF)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_21:
  v16 = (_QWORD *)*((_QWORD *)v3 + 1);
  if (v16)
  {
    if (*v16)
    {
      v30 = *(_QWORD *)(*v16 + 8);
      if (v30)
      {
        result = WTF::WeakHashSet<WebCore::LegacyRenderSVGResourceContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LegacyRenderSVGResourceMasker>((uint64_t)v42, v2, v30);
        v16 = (_QWORD *)*((_QWORD *)v3 + 1);
      }
    }
    v31 = v16[1];
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        result = WTF::WeakHashSet<WebCore::LegacyRenderSVGResourceContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LegacyRenderSVGResourceMasker>((uint64_t)v42, v2, v32);
        v16 = (_QWORD *)*((_QWORD *)v3 + 1);
      }
    }
    v33 = v16[2];
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
        result = WTF::WeakHashSet<WebCore::LegacyRenderSVGResourceContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LegacyRenderSVGResourceMasker>((uint64_t)v42, v2, v34);
    }
  }
  v17 = (_QWORD *)*((_QWORD *)v3 + 2);
  if (v17)
  {
    if (*v17)
    {
      v18 = *(_QWORD **)(*v17 + 8);
      if (v18)
      {
        result = WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)v2, v18, (uint64_t)v42);
        v17 = (_QWORD *)*((_QWORD *)v3 + 2);
      }
    }
    v19 = v17[1];
    if (v19)
    {
      a2 = *(uint64_t **)(v19 + 8);
      if (a2)
        return WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)v2, a2, (uint64_t)v42);
    }
  }
  return result;
}

WTF *WTF::WeakHashSet<WebCore::LegacyRenderSVGResourceContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LegacyRenderSVGResourceFilter>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  WTF *result;
  WTF *v12;
  WTF *v13;

  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF7HashSetINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore32LegacyRenderSVGResourceContainerES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a2, (void *)a2);
    v8 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    if (*(_QWORD *)a2)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a2 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 12) = 2 * v8;
  }
  WTF::WeakPtrFactory<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::createWeakPtr<WebCore::RenderBox>((uint64_t *)&v12, (uint64_t *)(a3 + 8), a3);
  v9 = v12;
  ++*(_DWORD *)v12;
  v13 = v9;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a2, &v13, a1);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v10);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v9 == 1)
    return (WTF *)WTF::fastFree(v9, v10);
  --*(_DWORD *)v9;
  return result;
}

WTF *WTF::WeakHashSet<WebCore::LegacyRenderSVGResourceContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LegacyRenderSVGResourceMasker>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  int v16;
  WTF *v17;
  void *v18;
  WTF *result;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;

  v5 = a2[3];
  v6 = a2[2] + 1;
  a2[2] = v6;
  if (v6 > v5)
  {
    v7 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_3:
      v8 = 0;
      a2[2] = 0;
      goto LABEL_23;
    }
    v9 = *(unsigned int *)(v7 - 4);
    if (!(_DWORD)v9)
      goto LABEL_21;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = v11;
      v13 = *(WTF **)(v7 + 8 * v11);
      if ((unint64_t)v13 + 1 >= 2 && !*((_QWORD *)v13 + 1))
      {
        v26 = a3;
        v27 = v11;
        v25 = v10;
        v24 = v11;
        *(_QWORD *)(v7 + 8 * v11) = 0;
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, a2);
        else
          --*(_DWORD *)v13;
        v12 = v24;
        *(_QWORD *)(v7 + 8 * v24) = -1;
        v10 = v25 + 1;
        a3 = v26;
        v11 = v27;
      }
      --v11;
    }
    while (v12);
    v7 = *(_QWORD *)a2;
    if (v10)
    {
      v20 = v10;
      *(_DWORD *)(v7 - 16) += v10;
      v21 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      *(_DWORD *)(v21 - 12) = v22 - v20;
      v7 = *(_QWORD *)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_3;
    }
    else if (!v7)
    {
      goto LABEL_3;
    }
    v14 = *(_DWORD *)(v7 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v14)
    {
LABEL_21:
      a2[2] = 0;
    }
    else
    {
      v23 = a3;
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      a3 = v23;
      v7 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v7)
      {
        v8 = 0;
        goto LABEL_23;
      }
    }
    v8 = *(_DWORD *)(v7 - 12);
    v16 = 0x7FFFFFFF;
    if (v8 >= 0x7FFFFFFF)
    {
LABEL_24:
      a2[3] = 2 * v16;
      goto LABEL_25;
    }
LABEL_23:
    v16 = v8;
    goto LABEL_24;
  }
LABEL_25:
  WTF::WeakPtrFactory<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::createWeakPtr<WebCore::RenderBox>((uint64_t *)&v28, (uint64_t *)(a3 + 8), a3);
  v17 = v28;
  ++*(_DWORD *)v28;
  v29 = v17;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a2, &v29, a1);
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v18);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v17 == 1)
    return (WTF *)WTF::fastFree(v17, v18);
  --*(_DWORD *)v17;
  return result;
}

WebCore::Node *WebCore::SVGResourcesCache::addResourcesFromRenderer(WebCore::SVGResourcesCache *this, WebCore::RenderElement *a2, const WebCore::RenderStyle *a3, double a4, double a5, float a6)
{
  const WebCore::RenderElement *v7;
  WebCore::Node *result;
  WTF *v10;
  void *v11;
  WebCore::SVGResources *v12;
  WTF **v13;
  void *v14;
  WTF *v15;
  char *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  WTF **v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  WebCore::SVGResources *v37;
  _QWORD v38[3];

  v7 = (const WebCore::RenderElement *)*((_QWORD *)a2 + 3);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656A0E0);
  }
  result = WebCore::SVGResources::buildCachedResources((WebCore::Node *)&v37, v7, (const WebCore::RenderStyle *)*((unsigned __int8 *)a2 + 45), (uint64_t)a3, a4, a5, a6);
  if (!v37)
    return result;
  v10 = (WTF *)*((_QWORD *)a2 + 1);
  if (!v10)
  {
    v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *((_QWORD *)v10 + 1) = a2;
    v32 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v10;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
      {
        WTF::fastFree(v32, v31);
        v10 = (WTF *)*((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v32;
      }
    }
  }
  ++*(_DWORD *)v10;
  v35 = v10;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::SVGResources>>((WebCore::SVGResources *)v38, (uint64_t *)this, &v35, &v37);
  v13 = *(WTF ***)(v38[0] + 8);
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
      WTF::fastFree(v35, v11);
    else
      --*(_DWORD *)v35;
  }
  *(_WORD *)((char *)a2 + 69) |= 0x1000u;
  WebCore::SVGResourcesCycleSolver::resolveCycles(a2, v13, v12);
  v35 = 0;
  v36 = 0;
  WebCore::SVGResources::buildSetOfResources((WTF *)v13, (uint64_t *)&v35);
  v15 = v35;
  if (!v35)
  {
    v16 = 0;
    v17 = 0;
LABEL_8:
    v18 = (WTF *)v16;
    v16 = (char *)v35 + 8 * v17;
    goto LABEL_9;
  }
  v17 = *((unsigned int *)v35 - 1);
  v16 = (char *)v35 + 8 * v17;
  if (!*((_DWORD *)v35 - 3))
    goto LABEL_8;
  if (!(_DWORD)v17)
  {
    v30 = 0;
    v18 = v35;
    goto LABEL_45;
  }
  v29 = 8 * v17;
  v18 = v35;
  while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
  {
    v18 = (WTF *)((char *)v18 + 8);
    v29 -= 8;
    if (!v29)
    {
      v18 = (WTF *)v16;
      break;
    }
  }
LABEL_9:
  if (v35)
  {
    v30 = *((unsigned int *)v35 - 1);
LABEL_45:
    v19 = (WTF *)((char *)v35 + 8 * v30);
    goto LABEL_11;
  }
  v19 = 0;
LABEL_11:
  if (v19 != v18)
  {
    while (!*(_QWORD *)(*(_QWORD *)v18 + 8))
    {
      v34 = (WTF *)((char *)v18 + 8);
      v18 = (WTF *)v16;
      if (v34 != (WTF *)v16)
      {
        v18 = v34;
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 = (WTF *)((char *)v18 + 8);
          if (v18 == (WTF *)v16)
          {
            v18 = (WTF *)v16;
            break;
          }
        }
      }
      if (v18 == v19)
      {
        v18 = v19;
        break;
      }
    }
  }
  if (v35)
    v20 = (WTF *)((char *)v35 + 8 * *((unsigned int *)v35 - 1));
  else
    v20 = 0;
  if (v18 != v20)
  {
    do
    {
      v22 = *(_QWORD *)v18;
      v21 = (char *)v18 + 8;
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>(*(_QWORD *)(v22 + 8) + 232, a2, (uint64_t)v38);
      v23 = v16;
      if (v21 != v16)
      {
        v23 = v21;
        while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
        {
          v23 += 8;
          if (v23 == v16)
          {
            v23 = v16;
            break;
          }
        }
      }
      v18 = v19;
      if (v23 != (char *)v19)
      {
        v18 = (WTF *)v23;
        if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
        {
          while (1)
          {
            v33 = (WTF *)((char *)v18 + 8);
            v18 = (WTF *)v16;
            if (v33 != (WTF *)v16)
            {
              v18 = v33;
              while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
              {
                v18 = (WTF *)((char *)v18 + 8);
                if (v18 == (WTF *)v16)
                {
                  v18 = (WTF *)v16;
                  break;
                }
              }
            }
            if (v18 == v19)
              break;
            if (*(_QWORD *)(*(_QWORD *)v18 + 8))
              goto LABEL_23;
          }
          v18 = v19;
        }
      }
LABEL_23:
      LODWORD(v36) = v36 + 1;
    }
    while (v18 != v20);
    v15 = v35;
  }
  if (v15)
  {
    v26 = *((unsigned int *)v15 - 1);
    if ((_DWORD)v26)
    {
      v27 = (WTF **)v15;
      do
      {
        v28 = *v27;
        if (*v27 != (WTF *)-1)
        {
          *v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
              WTF::fastFree(v28, v14);
            else
              --*(_DWORD *)v28;
          }
        }
        ++v27;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)((char *)v15 - 16), v14);
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    WebCore::SVGResources::~SVGResources(result, v14);
    return (WebCore::Node *)WTF::fastFree(v24, v25);
  }
  return result;
}

WebCore::SVGResources *WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::SVGResources>>(WebCore::SVGResources *result, uint64_t *a2, WTF **a3, WTF **a4)
{
  WebCore::SVGResources *v7;
  uint64_t v8;
  char v9;
  int v10;
  WTF **v11;
  WTF *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  WTF **v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WebCore::SVGResources *)WTF::HashTable<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>>::expand(a2),
        (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *((_QWORD *)*a3 + 1);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (WTF **)(v8 + 16 * v19);
    v21 = *v20;
    if (!*v20)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v12 = *a3;
        v20 = v11;
      }
      *a3 = 0;
      v22 = *v20;
      *v20 = v12;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, a2);
        else
          --*(_DWORD *)v22;
      }
      v23 = *a4;
      *a4 = 0;
      result = v20[1];
      v20[1] = v23;
      if (result)
      {
        WebCore::SVGResources::~SVGResources(result, a2);
        result = (WebCore::SVGResources *)WTF::fastFree(v24, v25);
      }
      v26 = *a2;
      if (*a2)
        v27 = *(_DWORD *)(v26 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *a2;
      if (*a2)
        v29 = *(_DWORD *)(v28 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
      {
        if (v31 > 2 * v30)
          goto LABEL_19;
      }
      else
      {
        if (3 * v31 > 4 * v30)
        {
LABEL_19:
          v32 = v28 + 16 * v31;
          v33 = 1;
          goto LABEL_20;
        }
        if (!(_DWORD)v31)
        {
          v34 = 8;
LABEL_27:
          result = (WebCore::SVGResources *)WTF::HashTable<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, v34, v20);
          v20 = (WTF **)result;
          v28 = *a2;
          if (*a2)
            v31 = *(unsigned int *)(v28 - 4);
          else
            v31 = 0;
          goto LABEL_19;
        }
      }
      v34 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
      goto LABEL_27;
    }
    if (v21 != (WTF *)-1)
      break;
    v11 = (WTF **)(v8 + 16 * v19);
LABEL_7:
    v17 = i + v19;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_7;
  if ((v9 & 1) != 0)
    v35 = 0;
  else
    v35 = *(unsigned int *)(v8 - 4);
  v33 = 0;
  v32 = v8 + 16 * v35;
LABEL_20:
  *(_QWORD *)v7 = v20;
  *((_QWORD *)v7 + 1) = v32;
  *((_BYTE *)v7 + 16) = v33;
  return result;
}

WTF *WebCore::SVGResourcesCycleSolver::resolveCycles(WebCore::SVGResourcesCycleSolver *this, WTF **a2, WebCore::SVGResources *a3)
{
  WTF *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  const WebCore::RenderObject *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int i;
  WTF *v20;
  WTF **v22;
  uint64_t v23;
  uint64_t v24;
  WTF **v25;
  uint64_t v26;
  uint64_t v27;
  WTF **v28;
  WTF *v29;
  uint64_t v30;
  WTF **v31;
  WTF *v32;
  uint64_t v33;
  WTF **v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  WTF **v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  char v42[24];
  _QWORD v43[2];
  WTF **v44;
  uint64_t v45;
  WTF **v46;
  uint64_t v47;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656A8D0);
  }
  v46 = 0;
  v47 = 0;
  result = WebCore::SVGResources::buildSetOfResources((WTF *)a2, (uint64_t *)&v46);
  v44 = 0;
  v45 = 0;
  v43[0] = 0;
  v43[1] = 0;
  if ((*((_BYTE *)this + 52) & 7) == 4 && (~*((unsigned __int8 *)this + 53) & 9) == 0)
    result = WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)&v44, this, (uint64_t)v42);
  if (!v46)
  {
    v7 = 0;
    v8 = 0;
LABEL_5:
    v9 = v7;
    v7 = (uint64_t)&v46[v8];
    goto LABEL_6;
  }
  v8 = *((unsigned int *)v46 - 1);
  v7 = (uint64_t)&v46[v8];
  if (!*((_DWORD *)v46 - 3))
    goto LABEL_5;
  if (!(_DWORD)v8)
  {
    v37 = 0;
    v9 = (uint64_t)v46;
    goto LABEL_81;
  }
  v36 = 8 * v8;
  v9 = (uint64_t)v46;
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v36 -= 8;
    if (!v36)
    {
      v9 = v7;
      break;
    }
  }
LABEL_6:
  if (!v46)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v37 = *((unsigned int *)v46 - 1);
LABEL_81:
  v10 = (uint64_t)&v46[v37];
LABEL_8:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v41 = v9 + 8;
      v9 = v7;
      if (v41 != v7)
      {
        v9 = v41;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v46)
    v11 = &v46[*((unsigned int *)v46 - 1)];
  else
    v11 = 0;
  for (; (WTF **)v9 != v11; LODWORD(v47) = v47 + 1)
  {
    v12 = *(const WebCore::RenderObject **)(*(_QWORD *)v9 + 8);
    LODWORD(v45) = v45 + 1;
    v13 = *((_QWORD *)v12 + 1);
    if (v13 && *(_QWORD *)(v13 + 8) && v44)
    {
      v14 = *((_DWORD *)v44 - 2);
      v15 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
      v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
      v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
      v18 = v14 & ((v17 >> 31) ^ v17);
      for (i = 1; ; ++i)
      {
        v20 = v44[v18];
        if (!v20)
          break;
        if (v20 != (WTF *)-1 && v20 == (WTF *)v13)
          goto LABEL_22;
        v18 = (v18 + i) & v14;
      }
    }
    result = (WTF *)WebCore::SVGResourcesCycleSolver::resourceContainsCycles(v12, (uint64_t)&v44, (uint64_t)v43);
    if ((_DWORD)result)
    {
LABEL_22:
      result = a2[3];
      if (result && *((const WebCore::RenderObject **)result + 1) == v12)
      {
        a2[3] = 0;
LABEL_38:
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, v6);
        else
          --*(_DWORD *)result;
      }
      else
      {
        result = (WTF *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v12 + 27) + 56))((_QWORD *)v12 + 27);
        switch((int)result)
        {
          case 0:
            result = (WTF *)*((_QWORD *)*a2 + 2);
            *((_QWORD *)*a2 + 2) = 0;
            if (result)
              goto LABEL_38;
            break;
          case 1:
            v38 = (WTF **)a2[1];
            if (v38)
            {
              result = *v38;
              if (!*v38)
                goto LABEL_95;
              if (*((const WebCore::RenderObject **)result + 1) == v12)
              {
                *v38 = 0;
                if (*(_DWORD *)result == 1)
                  result = (WTF *)WTF::fastFree(result, v6);
                else
                  --*(_DWORD *)result;
              }
              v38 = (WTF **)a2[1];
              if (v38)
              {
LABEL_95:
                result = v38[1];
                if (result && *((const WebCore::RenderObject **)result + 1) == v12)
                {
                  v38[1] = 0;
                  if (*(_DWORD *)result == 1)
                    result = (WTF *)WTF::fastFree(result, v6);
                  else
                    --*(_DWORD *)result;
                }
                v39 = a2[1];
                if (v39)
                {
                  result = (WTF *)*((_QWORD *)v39 + 2);
                  if (result)
                  {
                    if (*((const WebCore::RenderObject **)result + 1) == v12)
                    {
                      *((_QWORD *)v39 + 2) = 0;
                      goto LABEL_38;
                    }
                  }
                }
              }
            }
            break;
          case 2:
          case 3:
          case 4:
            v22 = (WTF **)a2[2];
            if (v22)
            {
              result = *v22;
              if (!*v22)
                goto LABEL_140;
              if (*((const WebCore::RenderObject **)result + 1) == v12)
              {
                *v22 = 0;
                if (*(_DWORD *)result == 1)
                  result = (WTF *)WTF::fastFree(result, v6);
                else
                  --*(_DWORD *)result;
              }
              v22 = (WTF **)a2[2];
              if (v22)
              {
LABEL_140:
                result = v22[1];
                if (result)
                {
                  if (*((const WebCore::RenderObject **)result + 1) == v12)
                  {
                    v22[1] = 0;
                    goto LABEL_38;
                  }
                }
              }
            }
            break;
          case 6:
            result = (WTF *)*((_QWORD *)*a2 + 1);
            *((_QWORD *)*a2 + 1) = 0;
            if (result)
              goto LABEL_38;
            break;
          case 7:
            result = *(WTF **)*a2;
            *(_QWORD *)*a2 = 0;
            if (result)
              goto LABEL_38;
            break;
          default:
            break;
        }
      }
    }
    v23 = v7;
    if (v9 + 8 != v7)
    {
      v23 = v9 + 8;
      while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
      {
        v23 += 8;
        if (v23 == v7)
        {
          v23 = v7;
          break;
        }
      }
    }
    v9 = v10;
    if (v23 != v10)
    {
      v9 = v23;
      if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
      {
        while (1)
        {
          v40 = v9 + 8;
          v9 = v7;
          if (v40 != v7)
          {
            v9 = v40;
            while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
            {
              v9 += 8;
              if (v9 == v7)
              {
                v9 = v7;
                break;
              }
            }
          }
          if (v9 == v10)
            break;
          if (*(_QWORD *)(*(_QWORD *)v9 + 8))
            goto LABEL_36;
        }
        v9 = v10;
      }
    }
LABEL_36:
    ;
  }
  v24 = v43[0];
  if (v43[0])
  {
    v27 = *(unsigned int *)(v43[0] - 4);
    if ((_DWORD)v27)
    {
      v28 = (WTF **)v43[0];
      do
      {
        v29 = *v28;
        if (*v28 != (WTF *)-1)
        {
          *v28 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
              WTF::fastFree(v29, v6);
            else
              --*(_DWORD *)v29;
          }
        }
        ++v28;
        --v27;
      }
      while (v27);
    }
    result = (WTF *)WTF::fastFree((WTF *)(v24 - 16), v6);
  }
  v25 = v44;
  if (v44)
  {
    v30 = *((unsigned int *)v44 - 1);
    if ((_DWORD)v30)
    {
      v31 = v44;
      do
      {
        v32 = *v31;
        if (*v31 != (WTF *)-1)
        {
          *v31 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
              WTF::fastFree(v32, v6);
            else
              --*(_DWORD *)v32;
          }
        }
        ++v31;
        --v30;
      }
      while (v30);
    }
    result = (WTF *)WTF::fastFree((WTF *)(v25 - 2), v6);
  }
  v26 = (uint64_t)v46;
  if (v46)
  {
    v33 = *((unsigned int *)v46 - 1);
    if ((_DWORD)v33)
    {
      v34 = v46;
      do
      {
        v35 = *v34;
        if (*v34 != (WTF *)-1)
        {
          *v34 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 1)
              WTF::fastFree(v35, v6);
            else
              --*(_DWORD *)v35;
          }
        }
        ++v34;
        --v33;
      }
      while (v33);
    }
    return (WTF *)WTF::fastFree((WTF *)(v26 - 16), v6);
  }
  return result;
}

WebCore::RenderElement **WebCore::SVGResourcesCache::removeResourcesFromRenderer(WebCore::RenderElement **this, WebCore::RenderElement *a2)
{
  uint64_t *v3;
  WebCore::RenderElement *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  _QWORD *v11;
  WTF *v12;
  WebCore::RenderElement ***v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  WTF **v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x1000) != 0)
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 680)
                    + 680) & 0x800000000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19656AD38);
    }
    v3 = (uint64_t *)this;
    v4 = *this;
    if (!*this)
      goto LABEL_68;
    v5 = *((_DWORD *)v4 - 2);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    for (i = 1; ; v9 = (v9 + i++) & v5)
    {
      this = (WebCore::RenderElement **)*((_QWORD *)v4 + 2 * v9);
      if (this != (WebCore::RenderElement **)-1)
      {
        if (!this)
          goto LABEL_68;
        if (this[1] == a2)
          break;
      }
    }
    if (v9 == *((_DWORD *)v4 - 1))
    {
LABEL_68:
      *(_WORD *)((char *)a2 + 69) &= ~0x1000u;
      return this;
    }
    v11 = (_QWORD *)((char *)v4 + 16 * v9);
    v13 = (WebCore::RenderElement ***)(v11 + 1);
    v12 = (WTF *)v11[1];
    v11[1] = 0;
    v14 = *v3;
    if (!*v3 || (v14 += 16 * *(unsigned int *)(v14 - 4), (_QWORD *)v14 != v11))
    {
      if ((_QWORD *)v14 != v11)
      {
        *v11 = 0;
        if (*(_DWORD *)this == 1)
        {
          WTF::fastFree((WTF *)this, a2);
          this = *v13;
          *v11 = -1;
          *v13 = 0;
          if (this)
          {
            WebCore::SVGResources::~SVGResources((WebCore::SVGResources *)this, v40);
            this = (WebCore::RenderElement **)WTF::fastFree(v41, v42);
          }
        }
        else
        {
          --*(_DWORD *)this;
          *v11 = -1;
          *v13 = 0;
        }
        ++*(_DWORD *)(*v3 - 16);
        v15 = *v3;
        if (*v3)
          v16 = *(_DWORD *)(v15 - 12) - 1;
        else
          v16 = -1;
        *(_DWORD *)(v15 - 12) = v16;
        v17 = *v3;
        if (*v3)
        {
          v18 = 6 * *(_DWORD *)(v17 - 12);
          v19 = *(_DWORD *)(v17 - 4);
          if (v18 < v19 && v19 >= 9)
            this = WTF::HashTable<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v3, v19 >> 1, 0);
        }
      }
    }
    *(_WORD *)((char *)a2 + 69) &= ~0x1000u;
    if (v12)
    {
      v45 = 0;
      v46 = 0;
      WebCore::SVGResources::buildSetOfResources(v12, &v45);
      v22 = v45;
      if (v45)
      {
        v24 = *(unsigned int *)(v45 - 4);
        v23 = v45 + 8 * v24;
        if (*(_DWORD *)(v45 - 12))
        {
          if (!(_DWORD)v24)
          {
            v39 = 0;
            v25 = v45;
            goto LABEL_62;
          }
          v38 = 8 * v24;
          v25 = v45;
          while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
          {
            v25 += 8;
            v38 -= 8;
            if (!v38)
            {
              v25 = v23;
              break;
            }
          }
LABEL_27:
          if (!v45)
          {
            v26 = 0;
LABEL_29:
            if (v26 != v25)
            {
              while (!*(_QWORD *)(*(_QWORD *)v25 + 8))
              {
                v44 = v25 + 8;
                v25 = v23;
                if (v44 != v23)
                {
                  v25 = v44;
                  while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
                  {
                    v25 += 8;
                    if (v25 == v23)
                    {
                      v25 = v23;
                      break;
                    }
                  }
                }
                if (v25 == v26)
                {
                  v25 = v26;
                  break;
                }
              }
            }
            if (v45)
              v27 = v45 + 8 * *(unsigned int *)(v45 - 4);
            else
              v27 = 0;
            if (v25 != v27)
            {
              do
              {
                v29 = *(_QWORD *)v25;
                v28 = v25 + 8;
                v30 = *(_QWORD *)(v29 + 8);
                v31 = *(_QWORD *)(v30 + 216);
                v30 += 216;
                (*(void (**)(uint64_t, WebCore::RenderElement *, _QWORD))(v31 + 24))(v30, a2, 0);
                WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>(v30 + 16, a2);
                v32 = v23;
                if (v28 != v23)
                {
                  v32 = v28;
                  while ((unint64_t)(*(_QWORD *)v32 + 1) <= 1)
                  {
                    v32 += 8;
                    if (v32 == v23)
                    {
                      v32 = v23;
                      break;
                    }
                  }
                }
                v25 = v26;
                if (v32 != v26)
                {
                  v25 = v32;
                  if (!*(_QWORD *)(*(_QWORD *)v32 + 8))
                  {
                    while (1)
                    {
                      v43 = v25 + 8;
                      v25 = v23;
                      if (v43 != v23)
                      {
                        v25 = v43;
                        while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
                        {
                          v25 += 8;
                          if (v25 == v23)
                          {
                            v25 = v23;
                            break;
                          }
                        }
                      }
                      if (v25 == v26)
                        break;
                      if (*(_QWORD *)(*(_QWORD *)v25 + 8))
                        goto LABEL_40;
                    }
                    v25 = v26;
                  }
                }
LABEL_40:
                LODWORD(v46) = v46 + 1;
              }
              while (v25 != v27);
              v22 = v45;
            }
            if (v22)
            {
              v35 = *(unsigned int *)(v22 - 4);
              if ((_DWORD)v35)
              {
                v36 = (WTF **)v22;
                do
                {
                  v37 = *v36;
                  if (*v36 != (WTF *)-1)
                  {
                    *v36 = 0;
                    if (v37)
                    {
                      if (*(_DWORD *)v37 == 1)
                        WTF::fastFree(v37, v21);
                      else
                        --*(_DWORD *)v37;
                    }
                  }
                  ++v36;
                  --v35;
                }
                while (v35);
              }
              WTF::fastFree((WTF *)(v22 - 16), v21);
            }
            WebCore::SVGResources::~SVGResources(v12, v21);
            return (WebCore::RenderElement **)WTF::fastFree(v33, v34);
          }
          v39 = *(unsigned int *)(v45 - 4);
LABEL_62:
          v26 = v45 + 8 * v39;
          goto LABEL_29;
        }
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
      v25 = v23;
      v23 = v45 + 8 * v24;
      goto LABEL_27;
    }
  }
  return this;
}

uint64_t WebCore::SVGResourcesCache::cachedResourcesForRenderer(WebCore::SVGResourcesCache *this, const WebCore::RenderElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  WebCore::SVGDocumentExtensions *v24;
  void *v25;
  WebCore::SVGResourcesCache *v26;
  uint64_t v27;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x1000) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656AFB0);
  }
  if (!*(_QWORD *)(v3 + 1808))
  {
    v26 = this;
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    v14 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v14 = 0;
    v27 = v13;
    v15 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v13);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    *(_QWORD *)(v14 + 8) = v15;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v17 = 0;
    *(_QWORD *)(v14 + 48) = v17;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 64) = 0;
    v19 = *(_QWORD *)(v13 + 528);
    v23 = !v19
       || (v20 = *(_QWORD *)(v19 + 8)) == 0
       || (v21 = *(_QWORD *)(v20 + 24)) == 0
       || (v22 = *(_QWORD *)(v21 + 8)) == 0
       || (*(_WORD *)(v22 + 658) & 4) == 0
       || *(_BYTE *)(v22 + 545) == 0;
    *(_BYTE *)(v14 + 72) = v23;
    this = v26;
    v3 = v13;
    v24 = *(WebCore::SVGDocumentExtensions **)(v13 + 1808);
    *(_QWORD *)(v27 + 1808) = v14;
    if (v24)
    {
      WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v24, v18);
      if (*(_DWORD *)v24)
      {
        *((_OWORD *)v24 + 3) = 0u;
        *((_OWORD *)v24 + 4) = 0u;
        *((_OWORD *)v24 + 1) = 0u;
        *((_OWORD *)v24 + 2) = 0u;
        *(_OWORD *)v24 = 0u;
      }
      else
      {
        WTF::fastFree(v24, v25);
      }
      this = v26;
      v3 = v27;
    }
  }
  v4 = **(_QWORD **)(*(_QWORD *)(v3 + 1808) + 48);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = v9;
    v12 = *(_QWORD *)(v4 + 16 * v9);
    if (v12 != -1)
    {
      if (!v12)
        return 0;
      if (*(WebCore::SVGResourcesCache **)(v12 + 8) == this)
        break;
    }
    v9 = (v11 + i) & v5;
  }
  return *(_QWORD *)(v4 + 16 * v11 + 8);
}

uint64_t WebCore::resourcesCacheFromRenderer(WebCore *this, const WebCore::RenderElement *a2)
{
  uint64_t result;

  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 680) & 0x800000000000) == 0)
    return *(_QWORD *)(WebCore::Document::svgExtensions(this) + 48);
  result = 90;
  __break(0xC471u);
  return result;
}

void WebCore::SVGResourcesCache::clientStyleChanged(uint64_t a1, void *a2, const WTF::StringImpl *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  WebCore::SVGRenderStyle *v36;
  WebCore::SVGRenderStyle *v37;
  const WTF::StringImpl *v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  WTF **v43;
  WTF *v44;
  BOOL v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  BOOL v50;
  WebCore::RenderElement **v51;
  double v52;
  double v53;
  float v54;
  _QWORD v55[2];

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656B364);
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    v7 = *(unsigned __int8 *)(a1 + 46);
    v8 = v7 != 97 || a2 > 3;
    if (v8 || (_DWORD)a2 == 1)
    {
      if ((*(_BYTE *)(a1 + 45) & 1) != 0 || v7 == 72 || (*(_WORD *)(v4 + 28) & 0x20) == 0)
      {
LABEL_40:
        v55[0] = 0;
        v55[1] = 0;
        WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(a1, 0, (uint64_t)v55);
        v41 = v55[0];
        if (v55[0])
        {
          v42 = *(unsigned int *)(v55[0] - 4);
          if ((_DWORD)v42)
          {
            v43 = (WTF **)v55[0];
            do
            {
              v44 = *v43;
              if (*v43 != (WTF *)-1)
              {
                *v43 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 1)
                    WTF::fastFree(v44, v40);
                  else
                    --*(_DWORD *)v44;
                }
              }
              ++v43;
              --v42;
            }
            while (v42);
          }
          WTF::fastFree((WTF *)(v41 - 16), v40);
        }
        return;
      }
      if (a3)
      {
        v12 = *((_QWORD *)a3 + 1);
        v13 = *(void **)(*(_QWORD *)(v12 + 40) + 264);
        v14 = *((_QWORD *)a4 + 1);
        a2 = *(void **)(*(_QWORD *)(v14 + 40) + 264);
        if (v13 != a2)
        {
          if (v13)
            v50 = a2 == 0;
          else
            v50 = 1;
          if (v50 || !(*(unsigned int (**)(void *))(*(_QWORD *)v13 + 24))(v13))
            goto LABEL_69;
          v12 = *((_QWORD *)a3 + 1);
          v14 = *((_QWORD *)a4 + 1);
        }
        v15 = *(_QWORD *)(v12 + 32);
        v16 = *(void **)(*(_QWORD *)(v15 + 48) + 16);
        v17 = *(_QWORD *)(v14 + 32);
        a2 = *(void **)(*(_QWORD *)(v17 + 48) + 16);
        if (v16 == a2)
          goto LABEL_19;
        if (v16)
          v45 = a2 == 0;
        else
          v45 = 1;
        if (!v45 && (*(unsigned int (**)(void *))(*(_QWORD *)v16 + 16))(v16))
        {
          v15 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 32);
          v17 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 32);
LABEL_19:
          v18 = *(_QWORD *)(v15 + 32);
          v19 = *(_QWORD *)(v17 + 32);
          v20 = *(unsigned int *)(v18 + 20);
          if ((_DWORD)v20 == *(_DWORD *)(v19 + 20))
          {
            v21 = *(_QWORD *)(v19 + 8);
            v22 = *(_QWORD **)(v18 + 8);
            if ((_DWORD)v20)
            {
              v23 = 8 * v20 - 8;
              v24 = v22;
              v25 = *(_QWORD **)(v19 + 8);
              while (1)
              {
                v26 = v23;
                if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v24 + 24))(*v24, *v25))
                  break;
                ++v24;
                ++v25;
                v23 = v26 - 8;
                if (!v26)
                  goto LABEL_24;
              }
            }
            else
            {
              v25 = *(_QWORD **)(v19 + 8);
              v24 = *(_QWORD **)(v18 + 8);
LABEL_24:
              if (v24 == &v22[v20] && v25 == (_QWORD *)(v21 + 8 * v20))
              {
                v27 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 320);
                v28 = *(_QWORD *)(*((_QWORD *)a4 + 3) + 320);
                v29 = *(unsigned int *)(v27 + 20);
                if ((_DWORD)v29 == *(_DWORD *)(v28 + 20))
                {
                  v30 = *(_QWORD *)(v28 + 8);
                  v31 = *(_QWORD **)(v27 + 8);
                  if ((_DWORD)v29)
                  {
                    v32 = 8 * v29 - 8;
                    v33 = v31;
                    v34 = *(_QWORD **)(v28 + 8);
                    while (1)
                    {
                      v35 = v32;
                      if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v33 + 24))(*v33, *v34))
                        break;
                      ++v33;
                      ++v34;
                      v32 = v35 - 8;
                      if (!v35)
                        goto LABEL_31;
                    }
                  }
                  else
                  {
                    v34 = *(_QWORD **)(v28 + 8);
                    v33 = *(_QWORD **)(v27 + 8);
LABEL_31:
                    if (v33 == &v31[v29] && v34 == (_QWORD *)(v30 + 8 * v29))
                    {
                      v36 = (WebCore::SVGRenderStyle *)*((_QWORD *)a3 + 7);
                      ++*(_DWORD *)v36;
                      v37 = (WebCore::SVGRenderStyle *)*((_QWORD *)a4 + 7);
                      ++*(_DWORD *)v37;
                      if (WTF::equal(*(WTF **)(*((_QWORD *)v36 + 2) + 40), *(const WTF::StringImpl **)(*((_QWORD *)v37 + 2) + 40), a3))v39 = WTF::equal(*(WTF **)(*((_QWORD *)v36 + 3) + 40), *(const WTF::StringImpl **)(*((_QWORD *)v37 + 3) + 40), v38) ^ 1;
                      else
                        v39 = 1;
                      if (*(_DWORD *)v37 == 1)
                      {
                        WebCore::SVGRenderStyle::~SVGRenderStyle(v37, a2);
                        WTF::fastFree(v46, v47);
                      }
                      else
                      {
                        --*(_DWORD *)v37;
                      }
                      if (*(_DWORD *)v36 == 1)
                      {
                        WebCore::SVGRenderStyle::~SVGRenderStyle(v36, a2);
                        WTF::fastFree(v48, v49);
                        if (!v39)
                          goto LABEL_40;
                      }
                      else
                      {
                        --*(_DWORD *)v36;
                        if ((v39 & 1) == 0)
                          goto LABEL_40;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      v51 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8), (const WebCore::RenderElement *)a2);
      WebCore::SVGResourcesCache::removeResourcesFromRenderer(v51, (WebCore::RenderElement *)a1);
      WebCore::SVGResourcesCache::addResourcesFromRenderer((WebCore::SVGResourcesCache *)v51, (WebCore::RenderElement *)a1, a4, v52, v53, v54);
      goto LABEL_40;
    }
  }
}

void WebCore::SVGResourcesCache::clientWasAddedToTree(WebCore::SVGResourcesCache *this, WebCore::RenderObject *a2)
{
  void *v3;
  double v4;
  double v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const WebCore::RenderElement *v10;
  uint64_t *v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  WTF *v15;
  void *v16;
  WebCore::SVGResources *v17;
  WTF **v18;
  void *v19;
  WTF *v20;
  char *v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  WebCore::SVGResources *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF **v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  WTF *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  WebCore::SVGDocumentExtensions *v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  WebCore::SVGResources *v56;
  _QWORD v57[3];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656B854);
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return;
  v57[0] = 0;
  v57[1] = 0;
  WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded((uint64_t)this, 0, (uint64_t)v57);
  v7 = v57[0];
  if (v57[0])
  {
    v12 = *(unsigned int *)(v57[0] - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF **)v57[0];
      do
      {
        v14 = *v13;
        if (*v13 != (WTF *)-1)
        {
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree(v14, v3);
            else
              --*(_DWORD *)v14;
          }
        }
        ++v13;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v7 - 16), v3);
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return;
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v8 || (*(_WORD *)(v8 + 28) & 0x20) == 0 || *((_BYTE *)this + 46) == 72)
    return;
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656B774);
  }
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 40) + 8);
  if ((*(_QWORD *)(v9[85] + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656B894);
  }
  if (!v9[226])
  {
    v39 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v39 = 0;
    v40 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v9);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    *(_QWORD *)(v39 + 8) = v40;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 32) = 0u;
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v42 = 0;
    *(_QWORD *)(v39 + 48) = v42;
    *(_QWORD *)(v39 + 56) = 0;
    *(_QWORD *)(v39 + 64) = 0;
    v44 = v9[66];
    if (!v44)
      goto LABEL_87;
    v45 = *(_QWORD *)(v44 + 8);
    if (v45
      && (v46 = *(_QWORD *)(v45 + 24)) != 0
      && (v47 = *(_QWORD *)(v46 + 8)) != 0
      && (*(_WORD *)(v47 + 658) & 4) != 0)
    {
      v48 = *(_BYTE *)(v47 + 545) == 0;
    }
    else
    {
LABEL_87:
      v48 = 1;
    }
    *(_BYTE *)(v39 + 72) = v48;
    v49 = (WebCore::SVGDocumentExtensions *)v9[226];
    v9[226] = v39;
    if (v49)
    {
      WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v49, v43);
      if (*(_DWORD *)v50)
      {
        v4 = 0.0;
        *((_OWORD *)v50 + 3) = 0u;
        *((_OWORD *)v50 + 4) = 0u;
        *((_OWORD *)v50 + 1) = 0u;
        *((_OWORD *)v50 + 2) = 0u;
        *(_OWORD *)v50 = 0u;
      }
      else
      {
        WTF::fastFree(v50, v51);
      }
    }
  }
  v10 = (const WebCore::RenderElement *)*((_QWORD *)this + 3);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19656B874);
  }
  v11 = *(uint64_t **)(v9[226] + 48);
  WebCore::SVGResources::buildCachedResources((WebCore::Node *)&v56, v10, (const WebCore::RenderStyle *)*((unsigned __int8 *)this + 45), (uint64_t)this + 80, v4, v5, v6);
  if (!v56)
    return;
  v15 = (WTF *)*((_QWORD *)this + 1);
  if (!v15)
  {
    v15 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *((_QWORD *)v15 + 1) = this;
    v38 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v15;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
      {
        WTF::fastFree(v38, v37);
        v15 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v38;
      }
    }
  }
  ++*(_DWORD *)v15;
  v54 = v15;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::SVGResources>>((WebCore::SVGResources *)v57, v11, &v54, &v56);
  v18 = *(WTF ***)(v57[0] + 8);
  if (v54)
  {
    if (*(_DWORD *)v54 == 1)
      WTF::fastFree(v54, v16);
    else
      --*(_DWORD *)v54;
  }
  *(_WORD *)((char *)this + 69) |= 0x1000u;
  WebCore::SVGResourcesCycleSolver::resolveCycles(this, v18, v17);
  v54 = 0;
  v55 = 0;
  WebCore::SVGResources::buildSetOfResources((WTF *)v18, (uint64_t *)&v54);
  v20 = v54;
  if (!v54)
  {
    v21 = 0;
    v22 = 0;
LABEL_28:
    v23 = (WTF *)v21;
    v21 = (char *)v54 + 8 * v22;
    goto LABEL_29;
  }
  v22 = *((unsigned int *)v54 - 1);
  v21 = (char *)v54 + 8 * v22;
  if (!*((_DWORD *)v54 - 3))
    goto LABEL_28;
  if (!(_DWORD)v22)
  {
    v36 = 0;
    v23 = v54;
    goto LABEL_65;
  }
  v35 = 8 * v22;
  v23 = v54;
  while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
  {
    v23 = (WTF *)((char *)v23 + 8);
    v35 -= 8;
    if (!v35)
    {
      v23 = (WTF *)v21;
      break;
    }
  }
LABEL_29:
  if (v54)
  {
    v36 = *((unsigned int *)v54 - 1);
LABEL_65:
    v24 = (WTF *)((char *)v54 + 8 * v36);
    goto LABEL_31;
  }
  v24 = 0;
LABEL_31:
  if (v24 != v23)
  {
    while (!*(_QWORD *)(*(_QWORD *)v23 + 8))
    {
      v53 = (WTF *)((char *)v23 + 8);
      v23 = (WTF *)v21;
      if (v53 != (WTF *)v21)
      {
        v23 = v53;
        while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
        {
          v23 = (WTF *)((char *)v23 + 8);
          if (v23 == (WTF *)v21)
          {
            v23 = (WTF *)v21;
            break;
          }
        }
      }
      if (v23 == v24)
      {
        v23 = v24;
        break;
      }
    }
  }
  if (v54)
    v25 = (WTF *)((char *)v54 + 8 * *((unsigned int *)v54 - 1));
  else
    v25 = 0;
  if (v23 != v25)
  {
    do
    {
      v27 = *(_QWORD *)v23;
      v26 = (char *)v23 + 8;
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>(*(_QWORD *)(v27 + 8) + 232, this, (uint64_t)v57);
      v28 = v21;
      if (v26 != v21)
      {
        v28 = v26;
        while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
        {
          v28 += 8;
          if (v28 == v21)
          {
            v28 = v21;
            break;
          }
        }
      }
      v23 = v24;
      if (v28 != (char *)v24)
      {
        v23 = (WTF *)v28;
        if (!*(_QWORD *)(*(_QWORD *)v28 + 8))
        {
          while (1)
          {
            v52 = (WTF *)((char *)v23 + 8);
            v23 = (WTF *)v21;
            if (v52 != (WTF *)v21)
            {
              v23 = v52;
              while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
              {
                v23 = (WTF *)((char *)v23 + 8);
                if (v23 == (WTF *)v21)
                {
                  v23 = (WTF *)v21;
                  break;
                }
              }
            }
            if (v23 == v24)
              break;
            if (*(_QWORD *)(*(_QWORD *)v23 + 8))
              goto LABEL_43;
          }
          v23 = v24;
        }
      }
LABEL_43:
      LODWORD(v55) = v55 + 1;
    }
    while (v23 != v25);
    v20 = v54;
  }
  if (v20)
  {
    v32 = *((unsigned int *)v20 - 1);
    if ((_DWORD)v32)
    {
      v33 = (WTF **)v20;
      do
      {
        v34 = *v33;
        if (*v33 != (WTF *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, v19);
            else
              --*(_DWORD *)v34;
          }
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)((char *)v20 - 16), v19);
  }
  v29 = v56;
  v56 = 0;
  if (v29)
  {
    WebCore::SVGResources::~SVGResources(v29, v19);
    WTF::fastFree(v30, v31);
  }
}

uint64_t WebCore::SVGResourcesCache::clientWillBeRemovedFromTree(uint64_t this, WebCore::RenderObject *a2)
{
  WebCore::RenderElement *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WebCore::RenderElement **v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  _QWORD v10[2];

  if ((*(_BYTE *)(this + 45) & 1) == 0)
  {
    v2 = (WebCore::RenderElement *)this;
    v3 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 0x20) != 0 && *(_BYTE *)(this + 46) != 72)
      {
        if ((*(_BYTE *)(this + 45) & 2) != 0)
        {
          this = 96;
          __break(0xC471u);
        }
        else if ((*(_WORD *)(this + 69) & 0x1000) != 0
               && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 680) + 680) & 0x800000000000) == 0)
        {
          v10[0] = 0;
          v10[1] = 0;
          WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(this, 0, (uint64_t)v10);
          v5 = v10[0];
          if (v10[0])
          {
            v7 = *(unsigned int *)(v10[0] - 4);
            if ((_DWORD)v7)
            {
              v8 = (WTF **)v10[0];
              do
              {
                v9 = *v8;
                if (*v8 != (WTF *)-1)
                {
                  *v8 = 0;
                  if (v9)
                  {
                    if (*(_DWORD *)v9 == 1)
                      WTF::fastFree(v9, v4);
                    else
                      --*(_DWORD *)v9;
                  }
                }
                ++v8;
                --v7;
              }
              while (v7);
            }
            WTF::fastFree((WTF *)(v5 - 16), v4);
          }
          v6 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40)+ 8), (const WebCore::RenderElement *)v4);
          return (uint64_t)WebCore::SVGResourcesCache::removeResourcesFromRenderer(v6, v2);
        }
      }
    }
  }
  return this;
}

WebCore *WebCore::SVGResourcesCache::resourceDestroyed(WebCore::SVGResourcesCache *this, WebCore::LegacyRenderSVGResourceContainer *a2)
{
  WebCore *result;
  WebCore::RenderElement **v4;
  WebCore::RenderElement *v5;
  uint64_t v6;
  WebCore::RenderElement *v7;
  WebCore::RenderElement *v8;
  uint64_t v9;
  WebCore::RenderElement *v10;
  char *v11;
  WTF::StringImpl **v12;
  WTF ***v13;
  WTF **v14;
  WTF **v15;
  WTF *v16;
  WTF *v17;
  WebCore::RenderElement *v18;
  WTF *v19;
  WTF *v20;
  WTF **v21;
  uint64_t v22;
  WTF *v23;
  WTF **v24;
  uint64_t v25;
  void *v26;
  WTF **v27;
  WTF *v28;
  uint64_t v29;
  __int16 v30;
  WebCore::TreeScope *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  void *v37;
  void *v38;
  WTF **v39;
  WebCore **v40;
  WTF::StringImpl **v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF **v48;
  WTF *v49;
  WTF **v50;
  WTF *v51;
  WTF *v52;
  void *v53;
  WTF **v54;
  WTF **v55;
  WTF *v56;
  WTF **v57;
  void *v58;
  WebCore **v59;
  int v60;
  WTF **v61;
  uint64_t v62;

  result = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if ((*(_QWORD *)(*((_QWORD *)result + 85) + 680) & 0x800000000000) != 0)
    return result;
  v4 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(result, a2);
  result = (WebCore *)WebCore::SVGResourcesCache::removeResourcesFromRenderer(v4, this);
  v5 = *v4;
  if (!*v4)
  {
    v8 = 0;
    v6 = 0;
LABEL_14:
    v7 = (WebCore::RenderElement *)((char *)v5 + 16 * v6);
    goto LABEL_9;
  }
  v6 = *((unsigned int *)v5 - 1);
  v7 = (WebCore::RenderElement *)((char *)v5 + 16 * v6);
  if (!*((_DWORD *)v5 - 3))
  {
    v8 = (WebCore::RenderElement *)((char *)v5 + 16 * v6);
    goto LABEL_14;
  }
  v8 = *v4;
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = *v4;
    while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
    {
      v8 = (WebCore::RenderElement *)((char *)v8 + 16);
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_9:
  if (v5)
    v10 = (WebCore::RenderElement *)((char *)v5 + 16 * *((unsigned int *)v5 - 1));
  else
    v10 = 0;
  if (v10 != v8)
  {
    v11 = (char *)this + 216;
    v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      v13 = (WTF ***)*((_QWORD *)v8 + 1);
      if (*v13 || v13[1] || v13[2] || (v57 = v13[3]) != 0 && v57[1])
      {
        v14 = v13[3];
        if (v14 && v14[1] == this)
        {
          WebCore::LegacyRenderSVGResource::removeAllClientsFromCache((WebCore::SVGResourcesCache *)((char *)this + 216), 1);
          v28 = (WTF *)v13[3];
          v13[3] = 0;
          if (!v28)
          {
LABEL_59:
            v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 24) + 8);
            v30 = *(_WORD *)(v29 + 28);
            if ((v30 & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19656C0E0);
            }
            *(_DWORD *)(v29 + 24) += 2;
            v31 = *(WebCore::TreeScope **)(v29 + 40);
            v32 = *(_QWORD *)v31;
            if (*(_QWORD *)v31)
              v33 = (*(_WORD *)(*(_QWORD *)v31 + 28) & 0x80) == 0;
            else
              v33 = 1;
            if (!v33 && !*(_BYTE *)(v32 + 193))
            {
              v46 = *(_QWORD *)(v32 + 200);
              if (v46)
              {
                v47 = *(_QWORD *)(v46 + 8);
                if (v47)
                {
                  if (*(_WORD *)(*(_QWORD *)(v47 + 96) + 10) == 242)
                    v31 = (WebCore::TreeScope *)*((_QWORD *)v31 + 2);
                }
              }
            }
            v34 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            if ((*(_WORD *)(v34 + 28) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19656C100);
            }
            v35 = *(_QWORD *)(v34 + 104);
            if (v35)
            {
              v36 = v12;
              if (*(_QWORD *)(v35 + 24))
              {
                v42 = *(unsigned int *)(v35 + 4);
                if ((v42 & 1) != 0)
                {
                  v43 = *(_QWORD **)(v35 + 40);
                  v44 = *(unsigned int *)(v35 + 52);
                }
                else
                {
                  v43 = (_QWORD *)(v35 + 32);
                  v44 = v42 >> 5;
                }
                if (v44)
                {
                  while (1)
                  {
                    v45 = *v43;
                    if (*v43 == WebCore::HTMLNames::idAttr
                      || *(_QWORD *)(v45 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                      && *(_QWORD *)(v45 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                    {
                      break;
                    }
                    v43 += 2;
                    if (!--v44)
                      goto LABEL_95;
                  }
                }
                else
                {
LABEL_95:
                  v43 = 0;
                }
                v36 = (WTF::StringImpl **)(v43 + 1);
              }
            }
            else
            {
              v36 = v12;
            }
            if ((v30 & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19656C120);
            }
            result = WebCore::TreeScope::addPendingSVGResource(v31, v36, (WebCore::SVGElement *)v29);
            if (*(_DWORD *)(v29 + 24) == 2)
            {
              if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                result = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v29, v37);
            }
            else
            {
              *(_DWORD *)(v29 + 24) -= 2;
            }
            goto LABEL_29;
          }
LABEL_57:
          if (*(_DWORD *)v28 == 1)
LABEL_85:
            WTF::fastFree(v28, v26);
          else
            --*(_DWORD *)v28;
          goto LABEL_59;
        }
        result = (WebCore *)(*(uint64_t (**)(char *))(*(_QWORD *)v11 + 56))((char *)this + 216);
        if (((_DWORD)result - 2) >= 3)
        {
          switch((int)result)
          {
            case 0:
              if (*v13)
              {
                v49 = (*v13)[2];
                if (v49)
                {
                  if (*((WebCore::SVGResourcesCache **)v49 + 1) == this)
                  {
                    WebCore::LegacyRenderSVGResource::removeAllClientsFromCache((WebCore::SVGResourcesCache *)((char *)this + 216), 1);
                    v28 = (*v13)[2];
                    (*v13)[2] = 0;
                    if (v28)
                      goto LABEL_57;
                    goto LABEL_59;
                  }
                }
              }
              break;
            case 1:
              v50 = v13[1];
              if (v50)
              {
                v51 = *v50;
                if (v51 && *((WebCore::SVGResourcesCache **)v51 + 1) == this)
                {
                  v60 = 1;
                  WebCore::LegacyRenderSVGResource::removeAllClientsFromCache((WebCore::SVGResourcesCache *)((char *)this + 216), 1);
                  v59 = v13[1];
                  result = *v59;
                  *v59 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 1)
                      result = (WebCore *)WTF::fastFree(result, v58);
                    else
                      --*(_DWORD *)result;
                    v60 = 1;
                  }
                }
                else
                {
                  v60 = 0;
                }
                v52 = v13[1][1];
                if (v52)
                {
                  if (*((WebCore::SVGResourcesCache **)v52 + 1) == this)
                  {
                    v60 = 1;
                    WebCore::LegacyRenderSVGResource::removeAllClientsFromCache((WebCore::SVGResourcesCache *)((char *)this + 216), 1);
                    v54 = v13[1];
                    result = v54[1];
                    v54[1] = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 1)
                        result = (WebCore *)WTF::fastFree(result, v53);
                      else
                        --*(_DWORD *)result;
                      v60 = 1;
                    }
                  }
                }
                v16 = v13[1][2];
                if (!v16)
                {
                  LODWORD(v16) = v60;
                  goto LABEL_28;
                }
                v33 = *((_QWORD *)v16 + 1) == (_QWORD)this;
                LODWORD(v16) = v60;
                if (!v33)
                  goto LABEL_28;
                WebCore::LegacyRenderSVGResource::removeAllClientsFromCache((WebCore::SVGResourcesCache *)((char *)this + 216), 1);
                v55 = v13[1];
                v28 = v55[2];
                v55[2] = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 1)
                    goto LABEL_85;
                  --*(_DWORD *)v28;
                }
                goto LABEL_59;
              }
              break;
            case 6:
              if (*v13)
              {
                v56 = (*v13)[1];
                if (v56)
                {
                  if (*((WebCore::SVGResourcesCache **)v56 + 1) == this)
                  {
                    WebCore::LegacyRenderSVGResource::removeAllClientsFromCache((WebCore::SVGResourcesCache *)((char *)this + 216), 1);
                    v48 = *v13;
                    goto LABEL_104;
                  }
                }
              }
              break;
            case 7:
              if (*v13)
              {
                v19 = **v13;
                if (v19)
                {
                  if (*((WebCore::SVGResourcesCache **)v19 + 1) == this)
                  {
                    v61 = 0;
                    v62 = 0;
                    (*(void (**)(char *, uint64_t, WTF ***))(*(_QWORD *)v11 + 16))((char *)this + 216, 1, &v61);
                    v27 = v61;
                    if (v61)
                    {
                      v41 = v12;
                      v22 = *((unsigned int *)v61 - 1);
                      if ((_DWORD)v22)
                      {
                        v21 = v61;
                        do
                        {
                          v20 = *v21;
                          if (*v21 != (WTF *)-1)
                          {
                            *v21 = 0;
                            if (v20)
                            {
                              if (*(_DWORD *)v20 == 1)
                                WTF::fastFree(v20, v26);
                              else
                                --*(_DWORD *)v20;
                            }
                          }
                          ++v21;
                          --v22;
                        }
                        while (v22);
                      }
                      WTF::fastFree((WTF *)(v27 - 2), v26);
                      v12 = v41;
                    }
                    v28 = **v13;
                    **v13 = 0;
                    if (!v28)
                      goto LABEL_59;
                    goto LABEL_57;
                  }
                }
              }
              break;
            default:
              goto LABEL_29;
          }
          goto LABEL_29;
        }
        v15 = v13[2];
        if (v15)
          break;
      }
LABEL_29:
      v18 = (WebCore::RenderElement *)((char *)v8 + 16);
      v8 = v7;
      if (v18 != v7)
      {
        v8 = v18;
        while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
        {
          v8 = (WebCore::RenderElement *)((char *)v8 + 16);
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
      }
      if (v8 == v10)
        return result;
    }
    v16 = *v15;
    if (v16)
    {
      if (*((WebCore::SVGResourcesCache **)v16 + 1) != this)
      {
        LODWORD(v16) = 0;
        v17 = v13[2][1];
        if (v17)
        {
LABEL_27:
          if (*((WebCore::SVGResourcesCache **)v17 + 1) == this)
          {
            WebCore::LegacyRenderSVGResource::removeAllClientsFromCache((WebCore::SVGResourcesCache *)((char *)this + 216), 1);
            v48 = v13[2];
LABEL_104:
            v28 = v48[1];
            v48[1] = 0;
            if (!v28)
              goto LABEL_59;
            goto LABEL_57;
          }
        }
LABEL_28:
        if ((_DWORD)v16)
          goto LABEL_59;
        goto LABEL_29;
      }
      v61 = 0;
      v62 = 0;
      (*(void (**)(char *, uint64_t, WTF ***))(*(_QWORD *)v11 + 16))((char *)this + 216, 1, &v61);
      v39 = v61;
      if (v61)
      {
        v25 = *((unsigned int *)v61 - 1);
        if ((_DWORD)v25)
        {
          v24 = v61;
          do
          {
            v23 = *v24;
            if (*v24 != (WTF *)-1)
            {
              *v24 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 1)
                  WTF::fastFree(v23, v38);
                else
                  --*(_DWORD *)v23;
              }
            }
            ++v24;
            --v25;
          }
          while (v25);
        }
        WTF::fastFree((WTF *)(v39 - 2), v38);
        v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
      v40 = v13[2];
      result = *v40;
      *v40 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WebCore *)WTF::fastFree(result, v38);
        else
          --*(_DWORD *)result;
      }
      LODWORD(v16) = 1;
    }
    v17 = v13[2][1];
    if (v17)
      goto LABEL_27;
    goto LABEL_28;
  }
  return result;
}

WebCore::SVGResourcesCache::SetStyleForScope *WebCore::SVGResourcesCache::SetStyleForScope::SetStyleForScope(WebCore::SVGResourcesCache::SetStyleForScope *this, WebCore::RenderElement *a2, const WebCore::RenderStyle *a3, const WebCore::RenderStyle *a4)
{
  const WebCore::RenderElement *v7;
  char v8;
  uint64_t v9;
  int v10;
  WebCore *v11;
  WebCore::RenderElement **v12;
  double v13;
  double v14;
  float v15;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  WebCore::RenderStyle::operator==((uint64_t)a3, (uint64_t)a4, a3);
  if ((v8 & 1) != 0
    || (*((_BYTE *)a2 + 45) & 1) != 0
    || (v9 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8)) == 0
    || (*(_WORD *)(v9 + 28) & 0x20) == 0)
  {
    *((_BYTE *)this + 16) = 0;
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + 46);
    *((_BYTE *)this + 16) = v10 != 72;
    if (v10 != 72)
    {
      v11 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) + 40) + 8);
      if ((*(_QWORD *)(*((_QWORD *)v11 + 85) + 680) & 0x800000000000) == 0)
      {
        v12 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(v11, v7);
        WebCore::SVGResourcesCache::removeResourcesFromRenderer(v12, *(WebCore::RenderElement **)this);
        WebCore::SVGResourcesCache::addResourcesFromRenderer((WebCore::SVGResourcesCache *)v12, *(WebCore::RenderElement **)this, a4, v13, v14, v15);
      }
    }
  }
  return this;
}

void WebCore::SVGResourcesCache::SetStyleForScope::~SetStyleForScope(const WebCore::RenderStyle **this, const WebCore::RenderElement *a2)
{
  WebCore *v3;
  const WebCore::RenderStyle *v4;
  WebCore::RenderElement **v5;
  double v6;
  double v7;
  float v8;

  if (*((_BYTE *)this + 16))
  {
    v3 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 3) + 8) + 40) + 8);
    if ((*(_QWORD *)(*((_QWORD *)v3 + 85) + 680) & 0x800000000000) == 0)
    {
      v4 = this[1];
      v5 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(v3, a2);
      WebCore::SVGResourcesCache::removeResourcesFromRenderer(v5, *this);
      WebCore::SVGResourcesCache::addResourcesFromRenderer((WebCore::SVGResourcesCache *)v5, *this, v4, v6, v7, v8);
    }
  }
}

uint64_t WebCore::SVGResourcesCycleSolver::resourceContainsCycles(const WebCore::RenderObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Document *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int j;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  WTF *v39;
  uint64_t result;
  int v41;
  int v42;
  unsigned int v43;
  WTF **v44;
  unsigned int v46;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  uint64_t *v53[5];
  uint64_t *v54;
  uint64_t *v55;
  WTF **v56[2];

  ++*(_DWORD *)(a3 + 8);
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 8))
    {
      v7 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = *(_QWORD *)(v7 + 8 * v12);
          if (!v14)
            break;
          if (v14 != -1 && v14 == v6)
            return 0;
          v12 = (v12 + i) & v8;
        }
      }
    }
  }
  WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(a2, a1, (uint64_t)&v54);
  v17 = (uint64_t)a1;
  while (1)
  {
    if ((const WebCore::RenderObject *)v17 != a1
      && (*(_BYTE *)(v17 + 52) & 7) == 4
      && (~*(unsigned __int8 *)(v17 + 53) & 9) == 0)
    {
      v18 = WebCore::RenderObject::nextInPreOrderAfterChildren((WebCore::RenderObject *)v17, a1);
      goto LABEL_18;
    }
    if ((*(_BYTE *)(v17 + 45) & 2) == 0 && (*(_WORD *)(v17 + 69) & 0x1000) != 0)
    {
      v22 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 24) + 8) + 40) + 8);
      if ((*(_QWORD *)(*((_QWORD *)v22 + 85) + 680) & 0x800000000000) != 0)
      {
        result = 90;
        __break(0xC471u);
        return result;
      }
      v23 = **(_QWORD **)(WebCore::Document::svgExtensions(v22) + 48);
      if (v23)
      {
        v24 = *(_DWORD *)(v23 - 8);
        v25 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        for (j = 1; ; ++j)
        {
          v30 = v28;
          v31 = *(_QWORD *)(v23 + 16 * v28);
          if (v31 != -1)
          {
            if (!v31)
              goto LABEL_17;
            if (*(_QWORD *)(v31 + 8) == v17)
              break;
          }
          v28 = (v30 + j) & v24;
        }
        v32 = *(WTF **)(v23 + 16 * v30 + 8);
        if (v32)
          break;
      }
    }
LABEL_17:
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 112))(v17);
    if (!v18)
    {
      if ((const WebCore::RenderObject *)v17 == a1)
      {
LABEL_40:
        WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(a3, a1, (uint64_t)&v54);
        v16 = 0;
        goto LABEL_41;
      }
      while (1)
      {
        v19 = *(unsigned int *)(v17 + 47);
        if (v19 | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32))
        {
          v18 = *(_QWORD *)((v19 | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32)) + 8);
          if (v18)
            break;
        }
        v20 = *(_QWORD *)(v17 + 32);
        if (v20)
        {
          v17 = *(_QWORD *)(v20 + 8);
          if (v17 && v17 != (_QWORD)a1)
            continue;
        }
        goto LABEL_40;
      }
    }
LABEL_18:
    v17 = v18;
    if (!v18)
      goto LABEL_40;
  }
  v56[0] = 0;
  v56[1] = 0;
  WebCore::SVGResources::buildSetOfResources(v32, (uint64_t *)v56);
  WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)v56, &v54);
  WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t *)v56, v53);
  while (1)
  {
    if (v55 == v53[1])
    {
      WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet(v56, v48);
      goto LABEL_17;
    }
    v49 = *(_QWORD *)(*v55 + 8);
    if ((WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::RenderBox>((uint64_t *)a2, *(_QWORD *)(v49 + 8)) & 1) != 0|| (WebCore::SVGResourcesCycleSolver::resourceContainsCycles(v49, a2, a3) & 1) != 0)
    {
      break;
    }
    WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v54);
  }
  WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet(v56, v50);
  v16 = 1;
LABEL_41:
  v34 = *(_DWORD *)(a2 + 12);
  v35 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v35;
  if (v35 <= v34)
    goto LABEL_46;
  v36 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_43;
  v41 = *(_DWORD *)(v36 - 4);
  if (!v41)
    goto LABEL_63;
  v42 = 0;
  v43 = v41 - 1;
  do
  {
    v44 = (WTF **)(v36 + 8 * v43);
    if ((unint64_t)*v44 + 1 >= 2 && !*((_QWORD *)*v44 + 1))
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v44, v33);
      ++v42;
    }
  }
  while ((unint64_t)v43--);
  v36 = *(_QWORD *)a2;
  if (v42)
  {
    *(_DWORD *)(v36 - 16) += v42;
    v51 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v52 = *(_DWORD *)(v51 - 12);
    else
      v52 = 0;
    *(_DWORD *)(v51 - 12) = v52 - v42;
    v36 = *(_QWORD *)a2;
  }
  if (!v36)
  {
LABEL_43:
    v37 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    goto LABEL_44;
  }
  v46 = *(_DWORD *)(v36 - 4);
  if (v46 < 9 || 6 * *(_DWORD *)(v36 - 12) >= v46)
  {
LABEL_63:
    *(_DWORD *)(a2 + 8) = 0;
    goto LABEL_64;
  }
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
  v36 = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  if (v36)
  {
LABEL_64:
    v37 = *(_DWORD *)(v36 - 12);
    v38 = 0x7FFFFFFF;
    if (v37 < 0x7FFFFFFF)
      goto LABEL_44;
    goto LABEL_45;
  }
  v37 = 0;
LABEL_44:
  v38 = v37;
LABEL_45:
  *(_DWORD *)(a2 + 12) = 2 * v38;
LABEL_46:
  v39 = (WTF *)*((_QWORD *)a1 + 1);
  if (v39 && *((_QWORD *)v39 + 1))
    WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((uint64_t *)a2, v39);
  return v16;
}

void WebCore::RenderTreeBuilder::detach(uint64_t *__return_ptr a1@<X8>, WebCore::RenderObject *a2@<X1>, uint64_t **this@<X2>, uint64_t *a4@<X0>, uint64_t a5@<X3>, uint64_t a6@<X4>, WebCore::SVGTextLayoutAttributes **a7@<X5>)
{
  int v7;
  int v11;
  int v12;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t **v19;
  int v21;
  uint64_t *v22;

  v7 = a5;
  v11 = *((unsigned __int8 *)a2 + 46);
  if (v11 == 85)
  {
    WebCore::RenderTreeBuilder::SVG::detach(a4[12], (uint64_t)a2, this, a5, a6, a7);
    return;
  }
  v12 = *((_BYTE *)a2 + 52) & 7;
  if (v12 == 1)
  {
    v14 = (uint64_t *)a4[9];
    v15 = *((_QWORD *)a2 + 28);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 3405))
      v16 = 1;
    else
      v16 = v15 == 0;
    if (!v16)
    {
      v18 = *(_QWORD *)(v15 + 24);
      if (v18)
      {
        v19 = *(uint64_t ***)(v18 + 8);
        if (v19 && v19 != this)
        {
          v22 = v14;
          v21 = a6;
          WebCore::RenderTreeBuilder::MultiColumn::multiColumnRelativeWillBeRemoved(*(_QWORD **)(*v14 + 40), v19, (uint64_t)this, a6);
          v14 = v22;
          LODWORD(a6) = v21;
        }
      }
    }
    goto LABEL_14;
  }
  if (*((unsigned __int8 *)a2 + 46) <= 0x46u)
  {
    switch(v11)
    {
      case 12:
        WebCore::RenderTreeBuilder::detachFromRenderGrid((uint64_t)a4, a2, (WebCore::RenderListItem *)this, a5, a1);
        return;
      case 2:
        WebCore::RenderTreeBuilder::FormControls::detach(a4[8], a2, (WebCore::RenderObject *)this, a5, a1);
        return;
      case 22:
        WebCore::RenderTreeBuilder::FormControls::detach(a4[8], a2, (WebCore::RenderListItem *)this);
        return;
    }
  }
  else if ((v11 - 71) <= 0xF && ((1 << (v11 - 71)) & 0xA001) != 0)
  {
    WebCore::RenderTreeBuilder::SVG::detach(a2, (WebCore::SVGResourcesCache *)this, (uint64_t *)a4[12], a5, a6, a7, a1);
    return;
  }
  if (v12 == 4 && (~*((unsigned __int8 *)a2 + 53) & 3) == 0 || v11 == 103)
  {
    v17 = (uint64_t **)a4[12];
    WebCore::SVGResourcesCache::clientWillBeRemovedFromTree((uint64_t)this, a2);
    a4 = *v17;
  }
  else if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
  {
    v14 = (uint64_t *)a4[9];
LABEL_14:
    WebCore::RenderTreeBuilder::Block::detach(a1, a2, (WebCore::RenderListItem *)this, v14, v7, a6);
    return;
  }
  WebCore::RenderTreeBuilder::detachFromRenderElement(a2, (WebCore::RenderBox *)this, (uint64_t)a4, v7, a1);
}

void WebCore::RenderTreeBuilder::attachInternal(WebCore::RenderElement &,std::unique_ptr<WebCore::RenderObject,WebCore::RenderObjectDeleter>,WebCore::RenderObject*)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  WebCore::RenderObject **v14;
  WebCore::RenderObject *v15;
  int v16;
  WebCore::RenderObject *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::RenderObject *v20;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != a2)
  {
    v4 = *(uint64_t **)(a1 + 16);
    v5 = *v4;
    *v4 = 0;
    v18 = v5;
    WebCore::RenderTreeBuilder::attachInternal(v3, (WebCore::RenderTable *)a2);
    v6 = v18;
    v18 = 0;
    if (!v6)
      return;
    v7 = &v18;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a2 + 52) & 7) == 1)
  {
    v8 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v8 + 1;
    v9 = *(_QWORD *)(a2 + 224);
    if (v9)
    {
      v12 = *(_QWORD *)(v9 + 24);
      if (v12)
      {
        v17 = (WebCore::RenderObject *)a2;
        if (*(_QWORD *)(v12 + 8))
        {
          v13 = *(uint64_t **)(v3 + 80);
          v14 = *(WebCore::RenderObject ***)(a1 + 16);
          v15 = *v14;
          *v14 = 0;
          v20 = v15;
          WebCore::RenderTreeBuilder::BlockFlow::attach(v13, (WebCore::RenderObject *)a2, &v20, **(WebCore::RenderObject ***)(a1 + 24));
          if (v20)
            WebCore::RenderObjectDeleter::operator()((uint64_t)&v20, (uint64_t)v20);
          v16 = *((_DWORD *)v17 + 4);
          if (v16)
          {
            *((_DWORD *)v17 + 4) = v16 - 1;
            return;
          }
        }
        else if (v8 != -1)
        {
          *(_DWORD *)(a2 + 16) = v8;
          a2 = *(_QWORD *)a1;
          goto LABEL_8;
        }
      }
      else if (v8 != -1)
      {
        goto LABEL_7;
      }
    }
    else if (v8 != -1)
    {
LABEL_7:
      *(_DWORD *)(a2 + 16) = v8;
      goto LABEL_8;
    }
    __break(0xC471u);
    JUMPOUT(0x19656CA48);
  }
LABEL_8:
  v10 = *(uint64_t **)(a1 + 16);
  v11 = *v10;
  *v10 = 0;
  v19 = v11;
  WebCore::RenderTreeBuilder::attachToRenderElement(v3, a2, (const WebCore::RenderStyle *)&v19, **(_QWORD **)(a1 + 24));
  v6 = v19;
  if (!v19)
    return;
  v7 = &v19;
LABEL_10:
  WebCore::RenderObjectDeleter::operator()((uint64_t)v7, v6);
}

void WebCore::RenderTreeBuilder::attachIgnoringContinuation(uint64_t a1, WebCore::RenderObject *a2, uint64_t *a3, WebCore::RenderObject *a4)
{
  WebCore::RenderTreeBuilder **v4;
  const WebCore::RenderObject *v5;
  const WebCore::RenderObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::RenderObject *v11;
  const WebCore::RenderObject *v12;
  const WebCore::RenderObject *v13;

  if ((*((_BYTE *)a2 + 45) & 0x20) != 0)
  {
    v8 = *(uint64_t **)(a1 + 88);
    v9 = *a3;
    *a3 = 0;
    v13 = (const WebCore::RenderObject *)v9;
    WebCore::RenderTreeBuilder::Inline::attachIgnoringContinuation(v8, a2, (uint64_t *)&v13, (uint64_t)a4);
    v6 = v13;
    v13 = 0;
    if (v6)
    {
      v7 = (uint64_t *)&v13;
LABEL_5:
      WebCore::RenderObjectDeleter::operator()((uint64_t)v7, (uint64_t)v6);
    }
  }
  else
  {
    if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
    {
      v4 = *(WebCore::RenderTreeBuilder ***)(a1 + 72);
      v5 = (const WebCore::RenderObject *)*a3;
      *a3 = 0;
      v12 = v5;
      WebCore::RenderTreeBuilder::Block::attachIgnoringContinuation(v4, a2, &v12, a4);
      v6 = v12;
      if (!v12)
        return;
      v7 = (uint64_t *)&v12;
      goto LABEL_5;
    }
    v10 = *a3;
    *a3 = 0;
    v11 = (const WebCore::RenderObject *)v10;
    WebCore::RenderTreeBuilder::attachInternal(a1, a2);
    v6 = v11;
    v11 = 0;
    if (v6)
    {
      v7 = (uint64_t *)&v11;
      goto LABEL_5;
    }
  }
}

void WebCore::RenderTreeBuilder::detachFromRenderGrid(uint64_t a1@<X0>, WebCore::RenderElement *a2@<X1>, WebCore::RenderListItem *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  WebCore::RenderTreeBuilder::Block::detach(a5, a2, a3, *(uint64_t **)(a1 + 72), a4, 1);
  if ((*((_DWORD *)a3 + 5) & 0x1800000) != 0x1000000)
    WebCore::RenderGrid::dirtyGrid(a2, 0);
}

void WebCore::RenderTreeBuilder::Block::detach(uint64_t *__return_ptr a1@<X8>, WebCore::RenderElement *this@<X1>, WebCore::RenderListItem *a3@<X2>, uint64_t *a4@<X0>, int a5@<W3>, int a6@<W4>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  int v33;
  int v34;
  uint64_t v38;
  WebCore::RenderTable ***v39;
  WebCore::RenderTable **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  WebCore::RenderTable *v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::RenderTable *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  WebCore::RenderTable *v58;
  int v59;
  WebCore::RenderTable *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  WebCore::RenderElement *v65;
  const WTF::StringImpl *v66;
  uint64_t v67;
  WebCore::RenderTable *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WebCore::RenderTextFragment *v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::SVGTextLayoutAttributes **v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  WebCore::AXObjectCache *v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  int v90;
  WebCore::RenderTable **v91;
  WebCore::RenderTable *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  WebCore::LayoutIntegration::LineLayout *v113;
  int v114;
  WebCore::RenderElement *v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v150;
  int v151;
  uint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  WebCore::RenderBox *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  WebCore::RenderTextFragment *v175;
  int v176;
  uint64_t v177;
  int v179;
  uint64_t v180;
  uint64_t v182;
  int v183;
  uint64_t v184;
  void *v186;
  WTF *v187;
  void *v188;
  WTF *v189;
  WTF *v190;
  WTF *v191;
  WTF *v192;
  WTF *v193;
  WebCore::RenderTable *v194;
  WebCore::RenderTable *v195;
  uint64_t v197;
  uint64_t v198[8];

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (*(_BYTE *)(v8 + 3405))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 1944) + 248);
    v10 = *(unsigned int *)(v9 + 508);
    if ((_DWORD)v10 && *(_QWORD *)(*(_QWORD *)(v9 + 496) + 8 * v10 - 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19656DA0CLL);
    }
    v11 = *((_QWORD *)a3 + 4);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = 0;
        ++*(_DWORD *)(v12 + 16);
        goto LABEL_7;
      }
    }
    else
    {
      v12 = 0;
    }
    v13 = 1;
LABEL_7:
    v14 = *(unsigned int *)((char *)a3 + 47);
    if (v14 | ((unint64_t)*((unsigned __int8 *)a3 + 51) << 32))
    {
      v15 = *(_QWORD *)((v14 | ((unint64_t)*((unsigned __int8 *)a3 + 51) << 32)) + 8);
      if (v15)
      {
        v16 = 0;
        ++*(_DWORD *)(v15 + 16);
LABEL_10:
        v17 = *((unsigned int *)a3 + 10);
        if (!(v17 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32)))
          goto LABEL_19;
        v18 = *(_QWORD *)((v17 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32)) + 8);
        if (!v18)
          goto LABEL_19;
        ++*(_DWORD *)(v18 + 16);
        if ((v16 & 1) != 0)
        {
          v19 = 0;
        }
        else
        {
          v19 = *(_QWORD *)(v15 + 8);
          if (!v19)
          {
            v19 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v19 = 1;
            *(_QWORD *)(v19 + 8) = v15;
            v190 = *(WTF **)(v15 + 8);
            *(_QWORD *)(v15 + 8) = v19;
            if (v190)
            {
              if (*(_DWORD *)v190 == 1)
              {
                WTF::fastFree(v190, this);
                v19 = *(_QWORD *)(v15 + 8);
                if (!v19)
                  goto LABEL_14;
              }
              else
              {
                --*(_DWORD *)v190;
              }
            }
          }
          ++*(_DWORD *)v19;
        }
LABEL_14:
        v20 = (WTF *)(*(unsigned int *)(v18 + 47) | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32));
        *(_DWORD *)(v18 + 47) = v19;
        *(_BYTE *)(v18 + 51) = BYTE4(v19);
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
            WTF::fastFree(v20, this);
          else
            --*(_DWORD *)v20;
        }
        v21 = *(_DWORD *)(v18 + 16);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x19656DAC0);
        }
        *(_DWORD *)(v18 + 16) = v21 - 1;
LABEL_19:
        if (!v15)
          goto LABEL_20;
        v49 = *((unsigned int *)a3 + 10);
        if (!(v49 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32))
          || (v50 = *(_QWORD *)((v49 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32)) + 8)) == 0)
        {
          v51 = 0;
          goto LABEL_73;
        }
        v51 = *(_QWORD *)(v50 + 8);
        if (!v51)
        {
          v51 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v51 = 1;
          *(_QWORD *)(v51 + 8) = v50;
          v193 = *(WTF **)(v50 + 8);
          *(_QWORD *)(v50 + 8) = v51;
          if (v193)
          {
            if (*(_DWORD *)v193 == 1)
            {
              WTF::fastFree(v193, this);
              v51 = *(_QWORD *)(v50 + 8);
              if (!v51)
              {
LABEL_73:
                v52 = (WTF *)(*(unsigned int *)(v15 + 40) | ((unint64_t)*(unsigned __int8 *)(v15 + 44) << 32));
                *(_DWORD *)(v15 + 40) = v51;
                *(_BYTE *)(v15 + 44) = BYTE4(v51);
                if (v52)
                {
                  if (*(_DWORD *)v52 == 1)
                    WTF::fastFree(v52, this);
                  else
                    --*(_DWORD *)v52;
                }
LABEL_20:
                v22 = *(unsigned int *)(v12 + 64);
                if (!(v22 | ((unint64_t)*(unsigned __int8 *)(v12 + 68) << 32))
                  || *(WebCore::RenderListItem **)((v22 | ((unint64_t)*(unsigned __int8 *)(v12 + 68) << 32)) + 8) != a3)
                {
                  goto LABEL_27;
                }
                if ((v16 & 1) != 0)
                {
                  v23 = 0;
                  goto LABEL_24;
                }
                v23 = *(_QWORD *)(v15 + 8);
                if (!v23)
                {
                  v23 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v23 = 1;
                  *(_QWORD *)(v23 + 8) = v15;
                  v191 = *(WTF **)(v15 + 8);
                  *(_QWORD *)(v15 + 8) = v23;
                  if (v191)
                  {
                    if (*(_DWORD *)v191 == 1)
                    {
                      WTF::fastFree(v191, this);
                      v23 = *(_QWORD *)(v15 + 8);
                      if (!v23)
                      {
LABEL_24:
                        v24 = (WTF *)(*(unsigned int *)(v12 + 64) | ((unint64_t)*(unsigned __int8 *)(v12 + 68) << 32));
                        *(_DWORD *)(v12 + 64) = v23;
                        *(_BYTE *)(v12 + 68) = BYTE4(v23);
                        if (v24)
                        {
                          if (*(_DWORD *)v24 == 1)
                            WTF::fastFree(v24, this);
                          else
                            --*(_DWORD *)v24;
                        }
LABEL_27:
                        v25 = *(unsigned int *)(v12 + 71);
                        if (!(v25 | ((unint64_t)*(unsigned __int8 *)(v12 + 75) << 32))
                          || *(WebCore::RenderListItem **)((v25 | ((unint64_t)*(unsigned __int8 *)(v12 + 75) << 32))
                                                         + 8) != a3)
                        {
LABEL_35:
                          v30 = (WTF *)(*((unsigned int *)a3 + 10) | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32));
                          *((_DWORD *)a3 + 10) = 0;
                          *((_BYTE *)a3 + 44) = 0;
                          if (v30)
                          {
                            if (*(_DWORD *)v30 == 1)
                              WTF::fastFree(v30, this);
                            else
                              --*(_DWORD *)v30;
                          }
                          v31 = (WTF *)(*(unsigned int *)((char *)a3 + 47) | ((unint64_t)*((unsigned __int8 *)a3
                                                                                                + 51) << 32));
                          *(_DWORD *)((char *)a3 + 47) = 0;
                          *((_BYTE *)a3 + 51) = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 1)
                              WTF::fastFree(v31, this);
                            else
                              --*(_DWORD *)v31;
                          }
                          v32 = (WTF *)*((_QWORD *)a3 + 4);
                          *((_QWORD *)a3 + 4) = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 1)
                              WTF::fastFree(v32, this);
                            else
                              --*(_DWORD *)v32;
                          }
                          *a1 = (uint64_t)a3;
                          if ((v16 & 1) == 0)
                          {
                            v33 = *(_DWORD *)(v15 + 16);
                            if (!v33)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19656DA2CLL);
                            }
                            *(_DWORD *)(v15 + 16) = v33 - 1;
                          }
                          if ((v13 & 1) == 0)
                          {
                            v34 = *(_DWORD *)(v12 + 16);
                            if (!v34)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19656DA4CLL);
                            }
                            *(_DWORD *)(v12 + 16) = v34 - 1;
                          }
                          return;
                        }
                        v26 = *((unsigned int *)a3 + 10);
                        if (!(v26 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32))
                          || (v27 = *(_QWORD *)((v26 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32)) + 8)) == 0)
                        {
                          v28 = 0;
                          goto LABEL_32;
                        }
                        v28 = *(_QWORD *)(v27 + 8);
                        if (!v28)
                        {
                          v28 = WTF::fastCompactMalloc((WTF *)0x10);
                          *(_DWORD *)v28 = 1;
                          *(_QWORD *)(v28 + 8) = v27;
                          v192 = *(WTF **)(v27 + 8);
                          *(_QWORD *)(v27 + 8) = v28;
                          if (v192)
                          {
                            if (*(_DWORD *)v192 == 1)
                            {
                              WTF::fastFree(v192, this);
                              v28 = *(_QWORD *)(v27 + 8);
                              if (!v28)
                              {
LABEL_32:
                                v29 = (WTF *)(*(unsigned int *)(v12 + 71) | ((unint64_t)*(unsigned __int8 *)(v12 + 75) << 32));
                                *(_DWORD *)(v12 + 71) = v28;
                                *(_BYTE *)(v12 + 75) = BYTE4(v28);
                                if (v29)
                                {
                                  if (*(_DWORD *)v29 == 1)
                                    WTF::fastFree(v29, this);
                                  else
                                    --*(_DWORD *)v29;
                                }
                                goto LABEL_35;
                              }
                            }
                            else
                            {
                              --*(_DWORD *)v192;
                            }
                          }
                        }
                        ++*(_DWORD *)v28;
                        goto LABEL_32;
                      }
                    }
                    else
                    {
                      --*(_DWORD *)v191;
                    }
                  }
                }
                ++*(_DWORD *)v23;
                goto LABEL_24;
              }
            }
            else
            {
              --*(_DWORD *)v193;
            }
          }
        }
        ++*(_DWORD *)v51;
        goto LABEL_73;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
    goto LABEL_10;
  }
  v38 = *((unsigned int *)a3 + 10);
  if (v38 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32)
    && (v39 = *(WebCore::RenderTable ****)((v38 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32)) + 8)) != 0)
  {
    v40 = v39[1];
    if (!v40)
    {
      v40 = (WebCore::RenderTable **)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v40 = 1;
      v40[1] = (WebCore::RenderTable *)v39;
      v187 = (WTF *)v39[1];
      v39[1] = v40;
      if (v187)
      {
        if (*(_DWORD *)v187 == 1)
        {
          WTF::fastFree(v187, v186);
          v40 = v39[1];
          if (!v40)
            goto LABEL_54;
        }
        else
        {
          --*(_DWORD *)v187;
        }
      }
    }
    ++*(_DWORD *)v40;
  }
  else
  {
    v40 = 0;
  }
LABEL_54:
  v41 = *(unsigned int *)((char *)a3 + 47);
  if (!(v41 | ((unint64_t)*((unsigned __int8 *)a3 + 51) << 32))
    || (v42 = *(_QWORD *)((v41 | ((unint64_t)*((unsigned __int8 *)a3 + 51) << 32)) + 8)) == 0)
  {
    v43 = 0;
    goto LABEL_57;
  }
  v43 = *(uint64_t **)(v42 + 8);
  if (v43)
    goto LABEL_434;
  v43 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v43 = 1;
  v43[1] = v42;
  v189 = *(WTF **)(v42 + 8);
  *(_QWORD *)(v42 + 8) = v43;
  if (!v189)
    goto LABEL_434;
  if (*(_DWORD *)v189 != 1)
  {
    --*(_DWORD *)v189;
LABEL_434:
    ++*(_DWORD *)v43;
    goto LABEL_57;
  }
  WTF::fastFree(v189, v188);
  v43 = *(uint64_t **)(v42 + 8);
  if (v43)
    goto LABEL_434;
LABEL_57:
  if (!a6)
    goto LABEL_81;
  v44 = v40 ? v40[1] : 0;
  v45 = v43 ? v43[1] : 0;
  v46 = *(_QWORD *)(*a4 + 136);
  v47 = v46 ? *(WebCore::RenderTable **)(v46 + 8) : 0;
  if ((*((_BYTE *)a3 + 20) & 1) == 0)
    goto LABEL_81;
  if (v44)
  {
    if ((*((_BYTE *)v44 + 45) & 1) == 0)
      goto LABEL_81;
    v194 = v47;
    if ((*((_BYTE *)v44 + 45) & 2) != 0)
    {
      v98 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v44 + 4) + 8) + 96);
      if ((v98 & 0x1F) != 1 && (v98 & 0x1F) != 14)
        goto LABEL_81;
    }
    else
    {
      v98 = *((_QWORD *)v44 + 12);
      if ((v98 & 0x1F) != 1 && (v98 & 0x1F) != 0xE)
        goto LABEL_81;
    }
    v48 = 0;
    if ((*((_BYTE *)v44 + 45) & 0x40) == 0 || (v98 & 0xF80000000000) != 0)
      goto LABEL_82;
    if (((*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)v44 + 176))(v44) & 1) != 0)
      goto LABEL_81;
    v99 = *((unsigned __int8 *)v44 + 46);
    if (v99 == 20 || (*((_BYTE *)v44 + 52) & 7) == 1 && (*((_BYTE *)v44 + 53) & 2) != 0)
      goto LABEL_81;
    v48 = 0;
    if (v99 == 26 || v99 == 49)
      goto LABEL_82;
    if ((*((_BYTE *)v44 + 45) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19656E160);
    }
    if ((*((_BYTE *)v44 + 20) & 4) != 0)
      goto LABEL_81;
    v47 = v194;
    if ((*(_WORD *)((_BYTE *)v44 + 69) & 0x10) != 0)
    {
      ++dword_1ECE91378;
      v100 = *((_QWORD *)v44 + 1);
      v101 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v102 = (~(v100 << 32) + v100) ^ ((unint64_t)(~(v100 << 32) + v100) >> 22);
      v103 = 9 * ((v102 + ~(v102 << 13)) ^ ((v102 + ~(v102 << 13)) >> 8));
      v104 = (v103 ^ (v103 >> 15)) + ~((v103 ^ (v103 >> 15)) << 27);
      v105 = v101 & ((v104 >> 31) ^ v104);
      v106 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v105);
      if (v106 == -1 || v106 != v100)
      {
        v183 = 1;
        do
        {
          v105 = ((_DWORD)v105 + v183) & v101;
          v184 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v105);
          ++v183;
        }
        while (v184 == -1 || v184 != v100);
      }
      v108 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v105 + 8) + 16);
      if (v108)
      {
        v109 = *v108;
        if (v109)
        {
          if (*(_QWORD *)(v109 + 8))
            goto LABEL_81;
        }
      }
    }
  }
  if (v45)
  {
    if ((*(_BYTE *)(v45 + 45) & 1) != 0)
    {
      v195 = v47;
      if ((*(_BYTE *)(v45 + 45) & 2) != 0)
      {
        v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8) + 96);
        if ((v131 & 0x1F) != 1 && (v131 & 0x1F) != 14)
          goto LABEL_81;
      }
      else
      {
        v131 = *(_QWORD *)(v45 + 96);
        if ((v131 & 0x1F) != 1 && (v131 & 0x1F) != 0xE)
          goto LABEL_81;
      }
      v48 = 0;
      if ((*(_BYTE *)(v45 + 45) & 0x40) == 0 || (v131 & 0xF80000000000) != 0)
        goto LABEL_82;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 176))(v45) & 1) == 0)
      {
        v132 = *(unsigned __int8 *)(v45 + 46);
        if (v132 != 20 && ((*(_BYTE *)(v45 + 52) & 7) != 1 || (*(_BYTE *)(v45 + 53) & 2) == 0))
        {
          v48 = 0;
          if (v132 == 26 || v132 == 49)
            goto LABEL_82;
          if ((*(_BYTE *)(v45 + 45) & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19656E0D4);
          }
          v47 = v195;
          if ((*(_BYTE *)(v45 + 20) & 4) == 0)
          {
            if ((*(_WORD *)(v45 + 69) & 0x10) == 0)
              goto LABEL_67;
            ++dword_1ECE91378;
            v133 = *(_QWORD *)(v45 + 8);
            v134 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
            v135 = (~(v133 << 32) + v133) ^ ((unint64_t)(~(v133 << 32) + v133) >> 22);
            v136 = 9 * ((v135 + ~(v135 << 13)) ^ ((v135 + ~(v135 << 13)) >> 8));
            v137 = (v136 ^ (v136 >> 15)) + ~((v136 ^ (v136 >> 15)) << 27);
            v138 = v134 & ((v137 >> 31) ^ v137);
            v139 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v138);
            if (v139 == -1 || v139 != v133)
            {
              v176 = 1;
              do
              {
                v138 = ((_DWORD)v138 + v176) & v134;
                v177 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v138);
                ++v176;
              }
              while (v177 == -1 || v177 != v133);
            }
            v141 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v138 + 8) + 16);
            if (!v141)
              goto LABEL_67;
            v142 = *v141;
            if (!v142 || !*(_QWORD *)(v142 + 8))
              goto LABEL_67;
          }
        }
      }
    }
LABEL_81:
    v48 = 0;
    goto LABEL_82;
  }
  if ((*((_BYTE *)a3 + 45) & 8) == 0 || (*(_WORD *)((_BYTE *)a3 + 69) & 0x10) == 0)
    goto LABEL_69;
LABEL_67:
  ++dword_1ECE91378;
  v116 = *((_QWORD *)a3 + 1);
  v117 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v118 = (~(v116 << 32) + v116) ^ ((unint64_t)(~(v116 << 32) + v116) >> 22);
  v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
  v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
  v121 = v117 & ((v120 >> 31) ^ v120);
  v122 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v121);
  if (v122 == -1 || v122 != v116)
  {
    v147 = 1;
    do
    {
      v121 = ((_DWORD)v121 + v147) & v117;
      v148 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v121);
      ++v147;
    }
    while (v148 == -1 || v148 != v116);
  }
  v124 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v121 + 8) + 16);
  if (v124 && (v125 = *v124) != 0)
  {
    v126 = *(_QWORD *)(v125 + 8);
    if (v45)
      v127 = v44 == v47;
    else
      v127 = 1;
    v130 = !v127 && v44 != 0 && v45 != (_QWORD)v47;
    if (v126)
      v48 = v130;
    else
      v48 = 1;
  }
  else
  {
LABEL_69:
    v48 = 1;
  }
LABEL_82:
  v53 = *a4;
  v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v55 = *(_QWORD *)(*(_QWORD *)(v54 + 1944) + 248);
  v56 = *(unsigned int *)(v55 + 508);
  if ((_DWORD)v56 && *(_QWORD *)(*(_QWORD *)(v55 + 496) + 8 * v56 - 8))
  {
    __break(0xC471u);
    JUMPOUT(0x19656DA94);
  }
  if (*(_BYTE *)(v54 + 3405) || *(_BYTE *)(v53 + 122) == 2)
  {
    WebCore::RenderElement::detachRendererInternal(a3, a1);
  }
  else
  {
    v77 = *((_DWORD *)a3 + 5);
    if ((v77 & 0x200) != 0)
    {
      v78 = *(unsigned __int8 *)(v53 + 121);
      v79 = v77 & 0x1800000;
      if ((v77 & 0x800) != 0 || v79 == 0x1000000)
      {
        if ((*((_BYTE *)a3 + 45) & 4) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19656DC48);
        }
        if ((v77 & 0x800) != 0)
        {
          WebCore::RenderBox::removeFloatingAndInvalidateForLayout(a3);
        }
        else if (v79 == 0x1000000)
        {
          {
            WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
            unk_1ECE91358 = 0u;
          }
          WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, a3);
        }
      }
      else if (*((char *)this + 45) < 0)
      {
        v80 = *((_DWORD *)this + 4) + 1;
        *((_DWORD *)this + 4) = v80;
        if ((*((_BYTE *)a3 + 45) & 4) != 0)
        {
          ++*((_DWORD *)a3 + 4);
          if ((*((_BYTE *)a3 + 52) & 7) != 3)
            WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)this + 26, a3);
          WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)this + 25, a3);
          v81 = *((_DWORD *)a3 + 4);
          if (!v81)
          {
            __break(0xC471u);
            JUMPOUT(0x19656DB90);
          }
          *((_DWORD *)a3 + 4) = v81 - 1;
          v80 = *((_DWORD *)this + 4);
        }
        if (!v80)
        {
          __break(0xC471u);
          JUMPOUT(0x19656DB70);
        }
        *((_DWORD *)this + 4) = v80 - 1;
      }
      if ((a5 & 1) == 0)
      {
        v114 = *((_DWORD *)a3 + 5);
        if ((v114 & 8) == 0)
        {
          *((_DWORD *)a3 + 5) = v114 | 8;
          v115 = WebCore::RenderObject::markContainingBlocksForLayout(a3, 0);
          WebCore::RenderObject::scheduleLayout(a3, v115);
          if ((*((_BYTE *)a3 + 21) & 0x80) != 0)
          {
            if ((*((_BYTE *)a3 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19656E114);
            }
            v150 = *((_QWORD *)a3 + 18);
            if (v150)
            {
              v151 = *(_DWORD *)(v150 + 8) + 1;
              *(_DWORD *)(v150 + 8) = v151;
            }
            else
            {
              v151 = MEMORY[8];
            }
            *(_QWORD *)(v150 + 24) = *(_QWORD *)(v150 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v151)
            {
              __break(0xC471u);
              JUMPOUT(0x19656E140);
            }
            *(_DWORD *)(v150 + 8) = v151 - 1;
          }
        }
        WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a3, 1, 1);
      }
      if ((*((_BYTE *)a3 + 45) & 2) != 0)
      {
        ++*((_DWORD *)a3 + 4);
        WebCore::RenderText::removeAndDestroyTextBoxes(a3);
        v82 = *((_DWORD *)a3 + 4);
        if (!v82)
        {
          __break(0xC471u);
          JUMPOUT(0x19656DB30);
        }
        *((_DWORD *)a3 + 4) = v82 - 1;
      }
      if (*((_BYTE *)a3 + 46) == 19)
      {
        v83 = *((_DWORD *)a3 + 4) + 1;
        *((_DWORD *)a3 + 4) = v83;
        if (!v78)
        {
          WebCore::RenderListItem::updateListMarkerNumbers(a3);
          v83 = *((_DWORD *)a3 + 4);
        }
        if (!v83)
        {
          __break(0xC471u);
          JUMPOUT(0x19656DB50);
        }
        *((_DWORD *)a3 + 4) = v83 - 1;
      }
      if (a5)
      {
        if ((v84 = (*((_DWORD *)a3 + 5) >> 25) & 7, v84 <= 4) && ((1 << v84) & 0x1A) != 0
          || (v95 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 3) + 8) + 40) + 8) + 1944),
              (v96 = *(_QWORD *)(v95 + 288)) != 0)
          && *(WebCore::RenderListItem **)(v96 + 8) == a3
          || (v97 = *(_QWORD *)(v95 + 296)) != 0 && *(WebCore::RenderListItem **)(v97 + 8) == a3)
        {
          WebCore::FrameSelection::setNeedsSelectionUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)+ 8)+ 40)+ 8)+ 528)+ 8)+ 296)+ 3064), 0);
        }
      }
    }
    if ((!*(_BYTE *)(v53 + 122) || (v85 = *(_QWORD *)(v53 + 128)) != 0 && (*(_BYTE *)(v85 + 45) & 0x20) != 0)
      && *((unsigned __int8 *)a3 + 46) - 32 <= 0xFFFFFFFD)
    {
      for (i = *((_QWORD *)a3 + 4); i; i = *(_QWORD *)(v88 + 32))
      {
        v88 = *(_QWORD *)(i + 8);
        if (!v88 || (*(_BYTE *)(v88 + 22) & 4) == 0)
          break;
        if ((*(_BYTE *)(v88 + 52) & 7) == 1)
        {
          v112 = *(_DWORD *)(v88 + 16) + 1;
          *(_DWORD *)(v88 + 16) = v112;
          if (*(_DWORD *)(v88 + 240) == 1)
          {
            v113 = *(WebCore::LayoutIntegration::LineLayout **)(v88 + 232);
            if (v113
              && (WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor((WebCore::RenderObject *)v88, (uint64_t)a3, *(_QWORD *)(v88 + 232), 1)|| (WebCore::LayoutIntegration::LineLayout::removedFromTree(v113, *(const WebCore::RenderElement **)(*((_QWORD *)a3 + 4) + 8), a3) & 1) == 0))
            {
              WebCore::RenderBlockFlow::invalidateLineLayoutPath(v88, 1);
            }
            v112 = *(_DWORD *)(v88 + 16);
          }
          if (!v112)
          {
            __break(0xC471u);
            JUMPOUT(0x19656DF34);
          }
          *(_DWORD *)(v88 + 16) = v112 - 1;
          break;
        }
      }
    }
    if (!*(_BYTE *)(v53 + 121) && (*((_BYTE *)a3 + 23) & 0x10) != 0)
    {
      if ((*((_BYTE *)a3 + 45) & 2) != 0)
      {
        if ((*((_BYTE *)a3 + 52) & 7) != 1 || (*((_BYTE *)a3 + 53) & 2) == 0)
          WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants((uint64_t)a3, 0, 1);
      }
      else
      {
        WebCore::RenderElement::removeFromRenderFragmentedFlow(a3);
      }
    }
    (*(void (**)(WebCore::RenderListItem *))(*(_QWORD *)a3 + 616))(a3);
    WebCore::RenderElement::detachRendererInternal(a3, a1);
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v86 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8));
      if (v86)
        WebCore::AXObjectCache::childrenChanged(v86, this, 0);
    }
  }
  if (v48)
  {
    if (v40)
    {
      v63 = (uint64_t)v40[1];
      if (v63)
      {
        if (v43 && v43[1])
        {
          v64 = *(_DWORD *)(v63 + 20);
          if ((v64 & 8) == 0)
          {
            *(_DWORD *)(v63 + 20) = v64 | 8;
            v65 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v63, 0);
            WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v63, v65);
            if ((*(_BYTE *)(v63 + 21) & 0x80) != 0)
            {
              if ((*(_BYTE *)(v63 + 45) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19656E034);
              }
              v145 = *(_QWORD *)(v63 + 144);
              if (v145)
              {
                v146 = *(_DWORD *)(v145 + 8) + 1;
                *(_DWORD *)(v145 + 8) = v146;
              }
              else
              {
                v146 = MEMORY[8];
              }
              *(_QWORD *)(v145 + 24) = *(_QWORD *)(v145 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
              if (!v146)
              {
                __break(0xC471u);
                JUMPOUT(0x19656E060);
              }
              *(_DWORD *)(v145 + 8) = v146 - 1;
            }
          }
          WebCore::RenderObject::setPreferredLogicalWidthsDirty(v63, 1, 1);
          v67 = v43[1];
          if ((*(_BYTE *)(v67 + 45) & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19656DCC0);
          }
          v68 = v40[1];
          if ((*((_BYTE *)v68 + 45) & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19656DCE0);
          }
          v69 = *((_DWORD *)v68 + 5);
          if (((v69 >> 18) & 1) == (*(_BYTE *)(v67 + 22) & 4) >> 2)
          {
            v70 = *a4;
            if ((*(_BYTE *)(v67 + 52) & 7) == 1)
            {
              v71 = **(_QWORD **)(v70 + 80);
              v72 = *(unsigned int *)(v67 + 64);
              if (v72 | ((unint64_t)*(unsigned __int8 *)(v67 + 68) << 32))
                v73 = *(WebCore::RenderTextFragment **)((v72 | ((unint64_t)*(unsigned __int8 *)(v67 + 68) << 32))
                                                      + 8);
              else
                v73 = 0;
              WebCore::RenderTreeBuilder::moveChildren(v71, v43[1], v40[1], v73, 0, 0, 0);
              if ((*((_BYTE *)v68 + 52) & 7) != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19656DD00);
              }
              WebCore::RenderBlockFlow::addFloatsToNewParent(v67, v68);
            }
            else
            {
              v174 = *(unsigned int *)(v67 + 64);
              if (v174 | ((unint64_t)*(unsigned __int8 *)(v67 + 68) << 32))
                v175 = *(WebCore::RenderTextFragment **)((v174 | ((unint64_t)*(unsigned __int8 *)(v67 + 68) << 32))
                                                       + 8);
              else
                v175 = 0;
              WebCore::RenderTreeBuilder::moveChildren(v70, v43[1], v40[1], v175, 0, 0, 0);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v67 + 1648))(v67);
            WebCore::RenderTreeBuilder::destroy(*a4, v67, 1, v74, v75, v76);
          }
          else
          {
            if ((v69 & 0x40000) != 0)
              v168 = v40[1];
            else
              v168 = (WebCore::RenderBox *)v43[1];
            if ((v69 & 0x40000) == 0)
              v67 = (uint64_t)v40[1];
            WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)this + 10, (WTF::StringImpl *)1, v66, (uint64_t)v198);
            WebCore::RenderElement::setStyle(v168, v198, 0);
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v198, v169);
            WebCore::RenderTreeBuilder::detachFromRenderElement(this, v168, *a4, 0, v198);
            if (v40[1] == v168
              && (v182 = *(unsigned int *)(v67 + 64), v182 | ((unint64_t)*(unsigned __int8 *)(v67 + 68) << 32)))
            {
              v170 = *(_QWORD *)((v182 | ((unint64_t)*(unsigned __int8 *)(v67 + 68) << 32)) + 8);
            }
            else
            {
              v170 = 0;
            }
            v171 = *a4;
            v197 = v198[0];
            v198[0] = 0;
            WebCore::RenderTreeBuilder::attachToRenderElementInternal(v171, v67, &v197, v170);
            v172 = v197;
            v197 = 0;
            if (v172)
              WebCore::RenderObjectDeleter::operator()((uint64_t)&v197, v172);
            WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc((WebCore::RenderObject *)v43[1]);
            if (v168 == v68)
            {
              if (*(_DWORD *)v40 == 1)
                WTF::fastFree((WTF *)v40, v173);
              else
                --*(_DWORD *)v40;
              v40 = 0;
            }
            else
            {
              if (*(_DWORD *)v43 == 1)
                WTF::fastFree((WTF *)v43, v173);
              else
                --*(_DWORD *)v43;
              v43 = 0;
            }
            v57 = (void *)v198[0];
            if (v198[0])
              WebCore::RenderObjectDeleter::operator()((uint64_t)v198, v198[0]);
          }
        }
      }
    }
  }
  if (!a6 || !(*(unsigned int (**)(WebCore::RenderElement *))(*(_QWORD *)this + 1688))(this))
    goto LABEL_102;
  if (!v40 || (v58 = v40[1]) == 0)
  {
    if (!v43)
      goto LABEL_97;
    v58 = (WebCore::RenderTable *)v43[1];
  }
  if (v58)
    v59 = v48;
  else
    v59 = 0;
  if (v59 == 1)
  {
    v110 = *((unsigned int *)v58 + 10);
    if (!(v110 | ((unint64_t)*((unsigned __int8 *)v58 + 44) << 32))
      || !*(_QWORD *)((v110 | ((unint64_t)*((unsigned __int8 *)v58 + 44) << 32)) + 8))
    {
      v111 = *(unsigned int *)((char *)v58 + 47);
      if (!(v111 | ((unint64_t)*((unsigned __int8 *)v58 + 51) << 32))
        || !*(_QWORD *)((v111 | ((unint64_t)*((unsigned __int8 *)v58 + 51) << 32)) + 8))
      {
        if ((*((_BYTE *)v58 + 45) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19656DD20);
        }
LABEL_242:
        WebCore::RenderTreeBuilder::Block::dropAnonymousBoxChild((WebCore::RenderTreeBuilder::Block *)a4, this, v58);
        goto LABEL_102;
      }
    }
  }
LABEL_97:
  if (!v40)
    goto LABEL_99;
  v60 = v40[1];
  if (!v60 || (*((_BYTE *)v60 + 45) & 1) == 0)
    goto LABEL_99;
  if ((*((_BYTE *)v60 + 45) & 2) != 0)
  {
    v89 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v60 + 4) + 8) + 96);
    if ((v89 & 0x1F) != 1 && (v89 & 0x1F) != 14)
      goto LABEL_99;
  }
  else
  {
    v89 = *((_QWORD *)v60 + 12);
    if ((v89 & 0x1F) != 1 && (v89 & 0x1F) != 0xE)
      goto LABEL_99;
  }
  if ((*((_BYTE *)v60 + 45) & 0x40) != 0
    && (v89 & 0xF80000000000) == 0
    && ((*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)v60 + 176))(v40[1]) & 1) == 0)
  {
    v90 = *((unsigned __int8 *)v60 + 46);
    if (v90 != 20 && ((*((_BYTE *)v60 + 52) & 7) != 1 || (*((_BYTE *)v60 + 53) & 2) == 0) && v90 != 26 && v90 != 49)
    {
LABEL_179:
      v91 = v40 + 1;
      v92 = v40[1];
      if (v92 && (*((_BYTE *)v92 + 45) & 1) != 0)
      {
        v166 = (*((_BYTE *)v92 + 45) & 2) != 0
             ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v92 + 4) + 8) + 96)
             : *((_QWORD *)v92 + 12);
        if (((v166 & 0x1F) == 1 || (v166 & 0x1F) == 0xE)
          && (*((_BYTE *)v92 + 45) & 0x40) != 0
          && (v166 & 0xF80000000000) == 0
          && ((*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)v92 + 176))(v40[1]) & 1) == 0)
        {
          v167 = *((unsigned __int8 *)v92 + 46);
          if (v167 != 20)
          {
            if ((*((_BYTE *)v92 + 52) & 7) == 1)
            {
              if ((*((_BYTE *)v92 + 53) & 2) == 0 && v167 != 26 && v167 != 49)
                goto LABEL_308;
            }
            else if (v167 != 49 && v167 != 26)
            {
              goto LABEL_308;
            }
          }
        }
      }
      if (!v43)
      {
        v58 = 0;
LABEL_183:
        if ((*((_BYTE *)v58 + 45) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19656E0F4);
        }
        if ((*((_BYTE *)v58 + 20) & 4) != 0)
          goto LABEL_102;
        if ((*(_WORD *)((_BYTE *)v58 + 69) & 0x10) != 0)
        {
          ++dword_1ECE91378;
          v156 = *((_QWORD *)v58 + 1);
          v157 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
          v158 = (~(v156 << 32) + v156) ^ ((unint64_t)(~(v156 << 32) + v156) >> 22);
          v159 = 9 * ((v158 + ~(v158 << 13)) ^ ((v158 + ~(v158 << 13)) >> 8));
          v160 = (v159 ^ (v159 >> 15)) + ~((v159 ^ (v159 >> 15)) << 27);
          v161 = v157 & ((v160 >> 31) ^ v160);
          v162 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v161);
          if (v162 == -1 || v162 != v156)
          {
            v179 = 1;
            do
            {
              v161 = ((_DWORD)v161 + v179) & v157;
              v180 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v161);
              ++v179;
            }
            while (v180 == -1 || v180 != v156);
          }
          v164 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v161 + 8) + 16);
          if (v164)
          {
            v165 = *v164;
            if (v165)
            {
              if (*(_QWORD *)(v165 + 8))
                goto LABEL_102;
            }
          }
        }
        v93 = *((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
        if (v93)
        {
          while (1)
          {
            v94 = *(_QWORD *)(v93 + 8);
            if (!v94)
              break;
            if ((WebCore::RenderTable *)v94 != v58 && (*(_BYTE *)(v94 + 21) & 8) == 0)
              goto LABEL_102;
            v93 = *(unsigned int *)(v94 + 47) | ((unint64_t)*(unsigned __int8 *)(v94 + 51) << 32);
            if (!v93)
              goto LABEL_242;
          }
        }
        goto LABEL_242;
      }
LABEL_307:
      v91 = (WebCore::RenderTable **)(v43 + 1);
LABEL_308:
      v58 = *v91;
      goto LABEL_183;
    }
  }
LABEL_99:
  if (v43)
  {
    v61 = v43[1];
    if (v61)
    {
      if ((*(_BYTE *)(v61 + 45) & 1) != 0)
      {
        if ((*(_BYTE *)(v61 + 45) & 2) != 0)
        {
          v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 32) + 8) + 96);
          if ((v143 & 0x1F) != 1 && (v143 & 0x1F) != 14)
            goto LABEL_102;
        }
        else
        {
          v143 = *(_QWORD *)(v61 + 96);
          if ((v143 & 0x1F) != 1 && (v143 & 0x1F) != 0xE)
            goto LABEL_102;
        }
        if ((*(_BYTE *)(v61 + 45) & 0x40) != 0
          && (v143 & 0xF80000000000) == 0
          && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 176))(v43[1]) & 1) == 0)
        {
          v144 = *(unsigned __int8 *)(v61 + 46);
          if (v144 != 20)
          {
            if ((*(_BYTE *)(v61 + 52) & 7) == 1)
            {
              if ((*(_BYTE *)(v61 + 53) & 2) != 0 || v144 == 26 || v144 == 49)
                goto LABEL_102;
            }
            else if (v144 == 49 || v144 == 26)
            {
              goto LABEL_102;
            }
            if (!v40)
              goto LABEL_307;
            goto LABEL_179;
          }
        }
      }
    }
  }
LABEL_102:
  v62 = *((unsigned int *)this + 16);
  if ((!(v62 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
     || !*(_QWORD *)((v62 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
    && (*((_BYTE *)this + 22) & 4) != 0)
  {
    (*(void (**)(WebCore::RenderElement *))(*(_QWORD *)this + 1648))(this);
  }
  if (v43)
  {
    if (*(_DWORD *)v43 == 1)
      WTF::fastFree((WTF *)v43, v57);
    else
      --*(_DWORD *)v43;
  }
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::fastFree((WTF *)v40, v57);
    else
      --*(_DWORD *)v40;
  }
}

void WebCore::RenderTreeBuilder::attachToRenderElementInternal(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::RenderObject *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  WebCore::LayoutIntegration::LineLayout *v15;
  int v16;
  WebCore::RenderObject *v17;
  int v18;
  int v19;
  WebCore::RenderElement *v20;
  void *v21;
  WebCore::RenderObject *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 v25;
  WebCore::RenderElement *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int j;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  WebCore::AXObjectCache **v42;
  WebCore::AXObjectCache *v43;
  WebCore::AXObjectCache *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WebCore::AXObjectCache *v49;
  uint64_t v50;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 1944)
                 + 248);
  v7 = *(unsigned int *)(v6 + 508);
  if ((_DWORD)v7 && *(_QWORD *)(*(_QWORD *)(v6 + 496) + 8 * v7 - 8))
  {
    __break(0xC471u);
    goto LABEL_90;
  }
  if (a4)
  {
    while (1)
    {
      v39 = *(_QWORD *)(a4 + 32);
      if (!v39)
        break;
      v8 = a4;
      a4 = *(_QWORD *)(v39 + 8);
      if (!a4)
        break;
      if (a4 == a2)
        goto LABEL_5;
    }
  }
  v8 = 0;
LABEL_5:
  v9 = *a3;
  *a3 = 0;
  v48 = v9;
  v10 = (WebCore::RenderObject *)WebCore::RenderElement::attachRendererInternal(a2, &v48, v8);
  v11 = v48;
  v48 = 0;
  if (v11)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v48, v11);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 3405))
  {
    (*(void (**)(WebCore::RenderObject *))(*(_QWORD *)v10 + 608))(v10);
    if (*((unsigned __int8 *)v10 + 46) - 32 <= 0xFFFFFFFD)
    {
      for (i = *((_QWORD *)v10 + 4); i; i = *(_QWORD *)(v13 + 32))
      {
        v13 = *(_QWORD *)(i + 8);
        if (!v13 || (*(_BYTE *)(v13 + 22) & 4) == 0)
          break;
        if ((*(_BYTE *)(v13 + 52) & 7) == 1)
        {
          v14 = *(_DWORD *)(v13 + 16) + 1;
          *(_DWORD *)(v13 + 16) = v14;
          if (*(_DWORD *)(v13 + 240) == 1)
          {
            v15 = *(WebCore::LayoutIntegration::LineLayout **)(v13 + 232);
            if (v15
              && (WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor((WebCore::RenderObject *)v13, (uint64_t)v10, *(_QWORD *)(v13 + 232), 0)|| (WebCore::LayoutIntegration::LineLayout::insertedIntoTree(v15, *(const WebCore::RenderElement **)(*((_QWORD *)v10 + 4) + 8), v10) & 1) == 0))
            {
              WebCore::RenderBlockFlow::invalidateLineLayoutPath(v13, 1);
            }
            v14 = *(_DWORD *)(v13 + 16);
          }
          if (!v14)
          {
            __break(0xC471u);
            JUMPOUT(0x19656E894);
          }
          *(_DWORD *)(v13 + 16) = v14 - 1;
          break;
        }
      }
    }
    if (*(_BYTE *)(a1 + 121))
    {
LABEL_32:
      v19 = *((_DWORD *)v10 + 5);
      if ((v19 & 8) == 0)
      {
        *((_DWORD *)v10 + 5) = v19 | 8;
        v20 = WebCore::RenderObject::markContainingBlocksForLayout(v10, 0);
        WebCore::RenderObject::scheduleLayout(v10, v20);
        if ((*((_BYTE *)v10 + 21) & 0x80) != 0)
        {
          if ((*((_BYTE *)v10 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19656E848);
          }
          v27 = *((_QWORD *)v10 + 18);
          if (v27)
          {
            v28 = *(_DWORD *)(v27 + 8) + 1;
            *(_DWORD *)(v27 + 8) = v28;
          }
          else
          {
            v28 = MEMORY[8];
          }
          *(_QWORD *)(v27 + 24) = *(_QWORD *)(v27 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x19656E874);
          }
          *(_DWORD *)(v27 + 8) = v28 - 1;
        }
      }
      WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v10, 1, 1);
      v22 = v10;
      if ((*((_BYTE *)v10 + 45) & 2) != 0)
        v22 = *(WebCore::RenderObject **)(*((_QWORD *)v10 + 4) + 8);
      if ((*((_QWORD *)v22 + 12) & 0x180000) == 0x100000)
      {
        v24 = a2 + 20;
        if ((*(_BYTE *)(a2 + 20) & 0x20) != 0)
          goto LABEL_38;
        if (WebCore::RenderObject::containingBlock(v10) == (WebCore::RenderObject *)a2 && *((_BYTE *)v10 + 46) != 48)
        {
          *(_DWORD *)v24 |= 0x100u;
LABEL_38:
          v25 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
          if ((v25 & 1) == 0)
            goto LABEL_39;
          v40 = WebCore::Document::topDocument(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40)
                                                         + 8));
          *(_DWORD *)(v40 + 24) += 2;
          v50 = v40;
          if (*(_QWORD *)(v40 + 1944))
            v41 = *(_BYTE *)(v40 + 3405) == 0;
          else
            v41 = 0;
          if (!v41)
          {
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v50);
            goto LABEL_39;
          }
          v42 = (WebCore::AXObjectCache **)v40;
          v43 = *(WebCore::AXObjectCache **)(v40 + 1488);
          if (v43)
          {
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v50);
          }
          else
          {
            v44 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
            v49 = WebCore::AXObjectCache::AXObjectCache(v44, (WebCore::Document *)v42);
            std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v42 + 186, &v49);
            std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v49);
            WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
            v43 = v42[186];
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v50);
            if (!v43)
            {
LABEL_39:
              if ((*(_BYTE *)(v24 + 1) & 0x40) != 0)
              {
                v29 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
                v30 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
                v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
                v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
                v33 = v29 & ((v32 >> 31) ^ v32);
                for (j = 1; ; v33 = (v35 + j++) & v29)
                {
                  v35 = v33;
                  v36 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v33);
                  if (v36 != -1 && *(_QWORD *)(v36 + 8) == a2)
                    break;
                }
                if (*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v35 + 8) + 1))
                  goto LABEL_56;
              }
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 424))(a2)
                                                     + 8)
                                         + 16)
                             + 52) & 0x10) != 0)
              {
LABEL_56:
                v37 = *((unsigned int *)v10 + 10);
                if (!(v37 | ((unint64_t)*((unsigned __int8 *)v10 + 44) << 32))
                  || (v38 = *(_QWORD *)((v37 | ((unint64_t)*((unsigned __int8 *)v10 + 44) << 32)) + 8)) == 0
                  || *(_BYTE *)(v38 + 46) != 26)
                {
                  *((_BYTE *)WebCore::RenderObject::ensureRareData(v10, v21) + 1) = 1;
                }
              }
              return;
            }
          }
          WebCore::AXObjectCache::childrenChanged(v43, (WebCore::RenderObject *)a2, v10);
          goto LABEL_39;
        }
        v23 = *(_DWORD *)v24;
        if ((*(_DWORD *)v24 & 0x20) != 0)
          goto LABEL_38;
      }
      else
      {
        WebCore::RenderObject::setPreferredLogicalWidthsDirty(a2, 1, 1);
        v24 = a2 + 20;
        v23 = *(_DWORD *)(a2 + 20);
        if ((v23 & 0x20) != 0)
          goto LABEL_38;
      }
      *(_DWORD *)(a2 + 20) = v23 | 0x20;
      v26 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a2, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)a2, v26);
      goto LABEL_38;
    }
    WebCore::RenderObject::initializeFragmentedFlowStateOnInsertion((uint64_t)v10);
    if ((*((_BYTE *)v10 + 23) & 0x10) == 0
      || (v45 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v10 + 648))(v10)) == 0
      || (v46 = v45, *(_BYTE *)(v45 + 46) != 25))
    {
LABEL_22:
      v16 = *((unsigned __int8 *)v10 + 46);
      if (v16 == 19)
        v17 = v10;
      else
        v17 = 0;
      if (v17)
        ++*((_DWORD *)v17 + 4);
      if (v16 == 19)
        WebCore::RenderListItem::updateListMarkerNumbers(v10);
      if (v17)
      {
        v18 = *((_DWORD *)v17 + 4);
        if (!v18)
        {
          __break(0xC471u);
          JUMPOUT(0x19656E828);
        }
        *((_DWORD *)v17 + 4) = v18 - 1;
      }
      goto LABEL_32;
    }
    ++*(_DWORD *)(v45 + 16);
    WebCore::RenderTreeBuilder::MultiColumn::multiColumnDescendantInserted(*(WebCore::RenderTreeBuilder::MultiColumn **)(a1 + 40), (WebCore::RenderMultiColumnFlow *)v45, v10);
    v47 = *(_DWORD *)(v46 + 16);
    if (v47)
    {
      *(_DWORD *)(v46 + 16) = v47 - 1;
      goto LABEL_22;
    }
    __break(0xC471u);
LABEL_90:
    JUMPOUT(0x19656E808);
  }
}

void WebCore::RenderTreeBuilder::removeFloatingObjects(WebCore::RenderTreeBuilder *this, WebCore::RenderBlock *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  int v9;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 3405)
    && (*((_BYTE *)a2 + 52) & 7) == 1)
  {
    v2 = (_QWORD *)*((_QWORD *)a2 + 27);
    if (v2)
    {
      if (*v2 && (v3 = *(unsigned int *)(*v2 - 12), (_DWORD)v3))
      {
        if (v3 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v4 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
      }
      else
      {
        v4 = 0;
      }
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        v6 = 0;
        do
        {
          *((_QWORD *)v4 + v6++) = *v5;
          v5 = (_QWORD *)v5[2];
        }
        while (v5);
        if (!v6)
          goto LABEL_23;
        v7 = 8 * v6;
        v8 = v4;
        do
        {
          a2 = *(WebCore::RenderBlock **)(**(_QWORD **)v8 + 8);
          v9 = *((_DWORD *)a2 + 5);
          if ((v9 & 0x800) != 0)
          {
            WebCore::RenderBox::removeFloatingAndInvalidateForLayout(*(WebCore::RenderBox **)(**(_QWORD **)v8 + 8));
          }
          else if ((v9 & 0x1800000) == 0x1000000)
          {
            {
              WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
              unk_1ECE91358 = 0u;
            }
            WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, a2);
          }
          v8 = (WTF *)((char *)v8 + 8);
          v7 -= 8;
        }
        while (v7);
      }
      if (v4)
LABEL_23:
        WTF::fastFree(v4, a2);
    }
  }
}

void WebCore::RenderTreeBuilder::childFlowStateChangesAndAffectsParentBlock(WebCore::RenderTreeBuilder *this, WebCore::RenderElement *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderElement *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::Element *v17;
  WebCore::RenderBlock ***v18;
  WebCore::RenderBlock **v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  WebCore::RenderBlock *v24;
  BOOL v25;
  int v26;
  WebCore::RenderBlock *v28;
  BOOL v29;
  WebCore::RenderTreeBuilder **v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::RenderElement *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;

  v5 = *((_QWORD *)a2 + 4);
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    if ((*(_BYTE *)(v6 + 45) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19656ED68);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8);
    WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)(v6 + 80), (WTF::StringImpl *)1, a3, (uint64_t)&v41);
    v8 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
    v9 = WebCore::RenderObject::RenderObject((uint64_t)v8, 1, v7, 92, 1);
    *(_QWORD *)v9 = off_1E3422BC8;
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 70) = 0;
    *(_DWORD *)(v9 + 80) = 0;
    v10 = v42;
    v11 = v43;
    v42 = 0;
    *(_QWORD *)(v9 + 88) = v10;
    *(_QWORD *)(v9 + 96) = v11;
    v12 = v44;
    v44 = 0u;
    *(_OWORD *)(v9 + 104) = v12;
    *(_QWORD *)(v9 + 120) = v45;
    v13 = v46;
    v46 = 0u;
    *(_OWORD *)(v9 + 128) = v13;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 160) = 0u;
    *(_OWORD *)(v9 + 176) = 0u;
    *(_QWORD *)(v9 + 192) = 0;
    *(_QWORD *)v9 = off_1E341F9F8;
    *(_DWORD *)(v9 + 200) = -1;
    *(_BYTE *)(v9 + 204) &= 0xFCu;
    *(_BYTE *)(v9 + 208) = 0;
    *(_BYTE *)(v9 + 212) = 0;
    *(_DWORD *)(v9 + 240) = 0;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_DWORD *)(v9 + 20) |= 0x40000u;
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v41, v14);
    WebCore::RenderElement::initializeStyle(v8, v15, v16, v17);
    v40 = v8;
    WebCore::RenderTreeBuilder::attachToRenderElementInternal((uint64_t)this, v6, (uint64_t *)&v40, (uint64_t)a2);
    if (v40)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v40, (uint64_t)v40);
    WebCore::RenderTreeBuilder::detachFromRenderElement((WebCore::RenderElement *)v6, a2, (uint64_t)this, 0, &v41);
    v39 = v41;
    WebCore::RenderTreeBuilder::attachToRenderElementInternal((uint64_t)this, (uint64_t)v8, &v39, 0);
    if (v39)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v39, v39);
    return;
  }
  if (!v5)
    return;
  v18 = *(WebCore::RenderBlock ****)(v5 + 8);
  if (!v18)
  {
    v19 = 0;
LABEL_12:
    v20 = 1;
    goto LABEL_13;
  }
  v19 = v18[1];
  if (!v19)
  {
    v19 = (WebCore::RenderBlock **)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    v19[1] = (WebCore::RenderBlock *)v18;
    v32 = (WTF *)v18[1];
    v18[1] = v19;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
      {
        WTF::fastFree(v32, a2);
        v19 = v18[1];
        if (!v19)
          goto LABEL_12;
      }
      else
      {
        --*(_DWORD *)v32;
      }
    }
  }
  ++*(_DWORD *)v19;
  v28 = v19[1];
  if (v28)
    v29 = (*((_BYTE *)v28 + 45) & 0x40) == 0;
  else
    v29 = 1;
  if (!v29)
  {
    v30 = (WebCore::RenderTreeBuilder **)*((_QWORD *)this + 9);
    WebCore::RenderTreeBuilder::createAnonymousWrappersForInlineContent(*v30, v19[1], 0);
    if ((*((_BYTE *)v28 + 45) & 1) != 0)
    {
      v33 = (*((_BYTE *)v28 + 45) & 2) != 0
          ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v28 + 4) + 8) + 96)
          : *((_QWORD *)v28 + 12);
      if (((v33 & 0x1F) == 1 || (v33 & 0x1F) == 14)
        && (*((_BYTE *)v28 + 45) & 0x40) != 0
        && (v33 & 0xF80000000000) == 0
        && ((*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v28 + 176))(v28) & 1) == 0)
      {
        v35 = *((unsigned __int8 *)v28 + 46);
        if (v35 != 20)
        {
          if ((*((_BYTE *)v28 + 52) & 7) == 1)
          {
            if ((*((_BYTE *)v28 + 53) & 2) != 0 || v35 == 26 || v35 == 49)
              goto LABEL_41;
          }
          else if (v35 == 49 || v35 == 26)
          {
            goto LABEL_41;
          }
          v37 = *((_QWORD *)v28 + 4);
          if (v37)
          {
            v38 = *(_QWORD *)(v37 + 8);
            if (v38)
            {
              if ((*(_BYTE *)(v38 + 45) & 0x40) != 0)
                WebCore::RenderTreeBuilder::Block::removeLeftoverAnonymousBlock((WebCore::RenderTreeBuilder::Block *)v30, v28);
            }
          }
        }
      }
    }
LABEL_41:
    v31 = *((_QWORD *)a2 + 4);
    if (v31)
    {
      v22 = *(_QWORD *)(v31 + 8);
      goto LABEL_15;
    }
LABEL_65:
    v22 = 0;
    goto LABEL_15;
  }
  if ((*((_BYTE *)v28 + 45) & 0x20) != 0)
    WebCore::RenderTreeBuilder::Inline::childBecameNonInline(*((WebCore::RenderTreeBuilder::Inline **)this + 11), v19[1], a2);
  v20 = 0;
LABEL_13:
  v21 = *((_QWORD *)a2 + 4);
  if (!v21)
  {
    if ((v20 & 1) != 0)
      return;
    goto LABEL_65;
  }
  v22 = *(_QWORD *)(v21 + 8);
  if ((v20 & 1) != 0)
  {
    v24 = 0;
    v23 = 1;
    goto LABEL_16;
  }
LABEL_15:
  v23 = 0;
  v24 = v19[1];
LABEL_16:
  if (v22)
    v25 = v24 == (WebCore::RenderBlock *)v22;
  else
    v25 = 1;
  if (!v25 && *(_BYTE *)(v22 + 46) == 12)
  {
    ++*(_DWORD *)(v22 + 16);
    WebCore::RenderGrid::dirtyGrid((WebCore::RenderGrid *)v22, 0);
    v26 = *(_DWORD *)(v22 + 16);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x19656ED88);
    }
    *(_DWORD *)(v22 + 16) = v26 - 1;
  }
  if ((v23 & 1) == 0)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree((WTF *)v19, a2);
    else
      --*(_DWORD *)v19;
  }
}

void WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange(WebCore::RenderElement &,WebCore::RenderStyle &)::$_0::operator()(WebCore::RenderObject **a1)
{
  uint64_t v1;
  _BYTE *v3;
  WebCore::RenderObject *v4;
  uint64_t v5;
  WebCore::RenderMultiColumnFlow *v6;
  WebCore::RenderObject *v7;
  WebCore::RenderObject *v8;
  WebCore::RenderObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::SVGTextLayoutAttributes **v13;
  WebCore::RenderObject *v14;
  uint64_t v15;
  WebCore::RenderObject *v16;
  WebCore::RenderObject *v17;
  uint64_t v18;
  uint64_t i;
  WebCore::RenderObject *v20;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderObject *v24;
  WebCore::RenderObject *v25;
  WTF *v26;
  WTF **v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  WTF **v31;
  uint64_t v32;
  WTF **v33;
  WebCore::RenderMultiColumnFlow *v34;
  WTF **v35;
  WTF *v36;
  WTF **v37;
  WTF **v38;
  WTF **v39;
  uint64_t v40;
  WTF **v41;
  WTF *v42;
  WTF *v43;
  WTF **v44;
  char v45[24];
  WTF **v46;
  uint64_t v47;

  v1 = *((_QWORD *)*a1 + 4);
  if (!v1)
    return;
  v3 = *(_BYTE **)(v1 + 8);
  if (!v3)
    return;
  if ((v3[23] & 0x10) == 0)
    return;
  v4 = a1[3];
  v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 648))(v3);
  if (!v5)
    return;
  v6 = (WebCore::RenderMultiColumnFlow *)v5;
  if (*(_BYTE *)(v5 + 46) != 25)
    return;
  v7 = a1[2];
  v8 = *a1;
  if (*(_BYTE *)a1[1] && !*(_BYTE *)v7)
    goto LABEL_14;
  v9 = WebCore::RenderObject::containingBlock(*a1);
  if (v9 && *(_BYTE *)v7 && (*((_BYTE *)v9 + 23) & 0x10) != 0 && (*((_BYTE *)v8 + 23) & 0x10) == 0)
  {
    v8 = *a1;
LABEL_14:
    WebCore::RenderObject::initializeFragmentedFlowStateOnInsertion((uint64_t)v8);
    WebCore::RenderTreeBuilder::MultiColumn::multiColumnDescendantInserted(*((WebCore::RenderTreeBuilder::MultiColumn **)v4 + 5), v6, *a1);
    return;
  }
  if (!*(_BYTE *)a1[1] && *(_BYTE *)a1[2])
  {
    WebCore::RenderTreeBuilder::MultiColumn::restoreColumnSpannersForContainer(*((uint64_t ***)v4 + 5), *a1, v6, v11, v12, v13);
    return;
  }
  v46 = 0;
  v47 = 0;
  v14 = *a1;
  v15 = *((unsigned int *)v14 + 16);
  if (v15 | ((unint64_t)*((unsigned __int8 *)v14 + 68) << 32))
  {
    v16 = *(WebCore::RenderObject **)((v15 | ((unint64_t)*((unsigned __int8 *)v14 + 68) << 32)) + 8);
    if (v16)
    {
      if (*((_BYTE *)v16 + 46) == 27)
      {
        v17 = *(WebCore::RenderObject **)((v15 | ((unint64_t)*((unsigned __int8 *)v14 + 68) << 32)) + 8);
        do
        {
LABEL_38:
          v24 = WebCore::RenderObject::containingBlock(v17);
          if (v24)
          {
            v25 = v24;
            v23 = (*((_BYTE *)v24 + 23) & 0x10) != 0
                ? (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v24 + 648))(v24)
                : 0;
            if ((WebCore::RenderMultiColumnFlow *)v23 != v6)
              WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)&v46, v25, (uint64_t)v45);
          }
          v17 = (WebCore::RenderObject *)WebCore::RenderTraversal::next<WebCore::RenderMultiColumnSpannerPlaceholder,WebCore::RenderMultiColumnSpannerPlaceholder>((uint64_t)v17, (uint64_t)v14);
        }
        while (v17);
      }
      else
      {
        while (1)
        {
          v17 = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v16 + 112))(v16);
          if (!v17)
          {
            if (v16 == v14)
              goto LABEL_44;
            v18 = *(unsigned int *)((char *)v16 + 47);
            if (!(v18 | ((unint64_t)*((unsigned __int8 *)v16 + 51) << 32)))
              break;
            v17 = *(WebCore::RenderObject **)((v18 | ((unint64_t)*((unsigned __int8 *)v16 + 51) << 32)) + 8);
            if (!v17)
              break;
          }
LABEL_21:
          v16 = v17;
          if (*((_BYTE *)v17 + 46) == 27)
            goto LABEL_38;
        }
        for (i = *((_QWORD *)v16 + 4); i; i = *((_QWORD *)v20 + 4))
        {
          v20 = *(WebCore::RenderObject **)(i + 8);
          if (!v20 || v20 == v14)
            break;
          v22 = *(unsigned int *)((char *)v20 + 47);
          if (v22 | ((unint64_t)*((unsigned __int8 *)v20 + 51) << 32))
          {
            v17 = *(WebCore::RenderObject **)((v22 | ((unint64_t)*((unsigned __int8 *)v20 + 51) << 32)) + 8);
            if (v17)
              goto LABEL_21;
          }
        }
      }
    }
  }
LABEL_44:
  v26 = (WTF *)*((_QWORD *)v6 + 1);
  if (v26)
    goto LABEL_45;
  v26 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v26 = 1;
  *((_QWORD *)v26 + 1) = v6;
  v43 = (WTF *)*((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v26;
  if (!v43)
    goto LABEL_45;
  if (*(_DWORD *)v43 != 1)
  {
    --*(_DWORD *)v43;
LABEL_45:
    ++*(_DWORD *)v26;
    goto LABEL_46;
  }
  WTF::fastFree(v43, v10);
  v26 = (WTF *)*((_QWORD *)v6 + 1);
  if (v26)
    goto LABEL_45;
LABEL_46:
  if (!v46)
  {
    v27 = 0;
    v28 = 0;
LABEL_48:
    v29 = v27;
    v27 = &v46[v28];
    goto LABEL_55;
  }
  v28 = *((unsigned int *)v46 - 1);
  v27 = &v46[v28];
  if (!*((_DWORD *)v46 - 3))
    goto LABEL_48;
  if (!(_DWORD)v28)
  {
    v32 = 0;
    v29 = v46;
    goto LABEL_58;
  }
  v30 = 8 * v28;
  v29 = v46;
  while ((unint64_t)*v29 + 1 <= 1)
  {
    ++v29;
    v30 -= 8;
    if (!v30)
    {
      v29 = v27;
      break;
    }
  }
LABEL_55:
  if (!v46)
  {
    v31 = 0;
    goto LABEL_59;
  }
  v32 = *((unsigned int *)v46 - 1);
LABEL_58:
  v31 = &v46[v32];
LABEL_59:
  if (v31 != v29)
  {
    while (!*((_QWORD *)*v29 + 1))
    {
      v44 = v29 + 1;
      v29 = v27;
      if (v44 != v27)
      {
        v29 = v44;
        while ((unint64_t)*v29 + 1 <= 1)
        {
          if (++v29 == v27)
          {
            v29 = v27;
            break;
          }
        }
      }
      if (v29 == v31)
      {
        v29 = v31;
        break;
      }
    }
  }
  if (v46)
    v33 = &v46[*((unsigned int *)v46 - 1)];
  else
    v33 = 0;
  if (v29 == v33)
  {
LABEL_84:
    if (!v26)
      goto LABEL_87;
  }
  else
  {
    if (!v26)
      goto LABEL_87;
    while (1)
    {
      v34 = (WebCore::RenderMultiColumnFlow *)*((_QWORD *)v26 + 1);
      if (!v34)
        break;
      v36 = *v29;
      v35 = v29 + 1;
      WebCore::RenderTreeBuilder::MultiColumn::restoreColumnSpannersForContainer(*((uint64_t ***)v4 + 5), *((const WebCore::RenderElement **)v36 + 1), v34, v11, v12, v13);
      v37 = v27;
      if (v35 != v27)
      {
        v37 = v35;
        while ((unint64_t)*v37 + 1 <= 1)
        {
          if (++v37 == v27)
          {
            v37 = v27;
            break;
          }
        }
      }
      v29 = v31;
      if (v37 != v31)
      {
        v29 = v37;
        if (!*((_QWORD *)*v37 + 1))
        {
          while (1)
          {
            v38 = v29 + 1;
            v29 = v27;
            if (v38 != v27)
            {
              v29 = v38;
              while ((unint64_t)*v29 + 1 <= 1)
              {
                if (++v29 == v27)
                {
                  v29 = v27;
                  break;
                }
              }
            }
            if (v29 == v31)
              break;
            if (*((_QWORD *)*v29 + 1))
              goto LABEL_72;
          }
          v29 = v31;
        }
      }
LABEL_72:
      LODWORD(v47) = v47 + 1;
      if (v29 == v33)
        goto LABEL_84;
    }
  }
  if (*(_DWORD *)v26 == 1)
    WTF::fastFree(v26, v10);
  else
    --*(_DWORD *)v26;
LABEL_87:
  v39 = v46;
  if (v46)
  {
    v40 = *((unsigned int *)v46 - 1);
    if ((_DWORD)v40)
    {
      v41 = v46;
      do
      {
        v42 = *v41;
        if (*v41 != (WTF *)-1)
        {
          *v41 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
              WTF::fastFree(v42, v10);
            else
              --*(_DWORD *)v42;
          }
        }
        ++v41;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)(v39 - 2), v10);
  }
}

void WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange(WebCore::RenderElement &,WebCore::RenderStyle &)::$_1::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v21;

  if (*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v1 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v1)
    {
      if ((*(_BYTE *)(v1 + 45) & 4) != 0)
      {
        v3 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
        goto LABEL_6;
      }
      while (1)
      {
        v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
        if (!v3)
        {
          if (v1 == a1)
            return;
          v17 = *(unsigned int *)(v1 + 47);
          if (!(v17 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)))
            break;
          v3 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)) + 8);
          if (!v3)
            break;
        }
LABEL_52:
        v1 = v3;
        if ((*(_BYTE *)(v3 + 45) & 4) != 0)
        {
          while (1)
          {
LABEL_6:
            if ((*(_BYTE *)(v3 + 21) & 8) != 0)
              WebCore::RenderBox::removeFloatingAndInvalidateForLayout((WebCore::RenderBox *)v3);
            v4 = *(unsigned int *)(v3 + 64);
            if (!(v4 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32))
              || (v5 = *(_BYTE **)((v4 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32)) + 8)) == 0)
            {
              if (v3 == a1)
                return;
              v6 = *(unsigned int *)(v3 + 47);
              if (!(v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
                break;
              v5 = *(_BYTE **)((v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
              if (!v5)
                break;
            }
LABEL_13:
            v3 = (uint64_t)v5;
            if ((v5[45] & 4) == 0)
            {
              while (1)
              {
                v16 = v5;
                v3 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 112))(v5);
                if (!v3)
                {
                  if (v16 == (_BYTE *)a1)
                    return;
                  v11 = v16[51];
                  if (!(*(unsigned int *)(v16 + 47) | (unint64_t)(v11 << 32)))
                    break;
                  v3 = *(_QWORD *)((*(unsigned int *)(v16 + 47) | (unint64_t)(v11 << 32)) + 8);
                  if (!v3)
                    break;
                }
LABEL_37:
                v5 = (_BYTE *)v3;
                if ((*(_BYTE *)(v3 + 45) & 4) != 0)
                  goto LABEL_6;
              }
              v12 = *((_QWORD *)v16 + 4);
              if (v12)
              {
                while (1)
                {
                  v13 = *(_QWORD *)(v12 + 8);
                  if (!v13 || v13 == a1)
                    break;
                  v15 = *(unsigned int *)(v13 + 47);
                  if (v15 | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32))
                  {
                    v3 = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32)) + 8);
                    if (v3)
                      goto LABEL_37;
                  }
                  v12 = *(_QWORD *)(v13 + 32);
                  if (!v12)
                    return;
                }
              }
              return;
            }
          }
          v7 = *(_QWORD *)(v3 + 32);
          if (v7)
          {
            while (1)
            {
              v8 = *(_QWORD *)(v7 + 8);
              if (!v8 || v8 == a1)
                break;
              v10 = *(unsigned int *)(v8 + 47);
              if (v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32))
              {
                v5 = *(_BYTE **)((v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
                if (v5)
                  goto LABEL_13;
              }
              v7 = *(_QWORD *)(v8 + 32);
              if (!v7)
                return;
            }
          }
          return;
        }
      }
      for (i = *(_QWORD *)(v1 + 32); i; i = *(_QWORD *)(v19 + 32))
      {
        v19 = *(_QWORD *)(i + 8);
        if (!v19 || v19 == a1)
          break;
        v21 = *(unsigned int *)(v19 + 47);
        if (v21 | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32))
        {
          v3 = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32)) + 8);
          if (v3)
            goto LABEL_52;
        }
      }
    }
  }
}

void WebCore::RenderTreeBuilder::createAnonymousWrappersForInlineContent(WebCore::RenderTreeBuilder *this, WebCore::RenderBlock *a2, WebCore::RenderObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  WebCore::RenderObject *v13;
  WebCore::RenderObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  WebCore::RenderElement *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  const WebCore::Element *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::RenderTextFragment *v34;
  WebCore::RenderElement *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  _BYTE v41[20];

  (*(void (**)(WebCore::RenderBlock *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  v6 = *((unsigned int *)a2 + 16);
  if (v6 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
  {
    v7 = *(_QWORD *)((v6 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
    if (v7)
    {
      (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)a2 + 1648))(a2);
      while (1)
      {
        while (1)
        {
          v9 = *(_DWORD *)(v7 + 20);
          v10 = (v9 & 1) == 0;
          if ((v9 & 1) != 0)
            break;
          v12 = *(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32);
          if (!v12)
            goto LABEL_29;
LABEL_9:
          v13 = *(WebCore::RenderObject **)(v12 + 8);
          if (v13)
          {
            v15 = v7;
            while (1)
            {
              v14 = v13;
              v16 = *((_DWORD *)v13 + 5);
              if ((v16 & 1) != 0)
                break;
              if (v14 == a3)
              {
                v14 = a3;
                goto LABEL_11;
              }
              v20 = *(unsigned int *)((char *)v14 + 47) | ((unint64_t)*((unsigned __int8 *)v14 + 51) << 32);
              if (!v20)
                goto LABEL_29;
              v10 = 1;
LABEL_26:
              v13 = *(WebCore::RenderObject **)(v20 + 8);
              v15 = (uint64_t)v14;
              v14 = 0;
              if (!v13)
                goto LABEL_11;
            }
            v18 = (v16 & 0x800) == 0;
            v17 = v16 & 0x1800000;
            v18 = !v18 || v17 == 0x1000000;
            v19 = !v18;
            if (v14 == a3 || (v19 & 1) != 0)
              goto LABEL_11;
            v20 = *(unsigned int *)((char *)v14 + 47) | ((unint64_t)*((unsigned __int8 *)v14 + 51) << 32);
            if (v20)
              goto LABEL_26;
            if (!v10)
              goto LABEL_13;
LABEL_29:
            v34 = 0;
LABEL_32:
            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
            WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)a2 + 10, (WTF::StringImpl *)1, v8, (uint64_t)&v36);
            v22 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
            v23 = WebCore::RenderObject::RenderObject((uint64_t)v22, 1, v33, 92, 1);
            *(_QWORD *)v23 = off_1E3422BC8;
            *(_QWORD *)(v23 + 64) = 0;
            *(_QWORD *)(v23 + 70) = 0;
            *(_DWORD *)(v23 + 80) = 0;
            v24 = *((_QWORD *)&v36 + 1);
            v25 = v37;
            *((_QWORD *)&v36 + 1) = 0;
            *(_QWORD *)(v23 + 88) = v24;
            *(_QWORD *)(v23 + 96) = v25;
            v26 = v38;
            v38 = 0u;
            *(_OWORD *)(v23 + 104) = v26;
            *(_QWORD *)(v23 + 120) = v39;
            v27 = v40;
            v40 = 0u;
            *(_OWORD *)(v23 + 128) = v27;
            *(_OWORD *)(v23 + 144) = 0u;
            *(_OWORD *)(v23 + 160) = 0u;
            *(_OWORD *)(v23 + 176) = 0u;
            *(_QWORD *)(v23 + 192) = 0;
            *(_QWORD *)v23 = off_1E341F9F8;
            *(_DWORD *)(v23 + 200) = -1;
            *(_BYTE *)(v23 + 204) &= 0xFCu;
            *(_BYTE *)(v23 + 208) = 0;
            *(_BYTE *)(v23 + 212) = 0;
            *(_DWORD *)(v23 + 240) = 0;
            *(_OWORD *)(v23 + 216) = 0u;
            *(_DWORD *)(v23 + 20) |= 0x40000u;
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v36, v28);
            WebCore::RenderElement::initializeStyle(v22, v29, v30, v31);
            v35 = v22;
            *(_QWORD *)&v36 = 0;
            WebCore::RenderTreeBuilder::attachToRenderElementInternal((uint64_t)this, (uint64_t)a2, (uint64_t *)&v35, v7);
            v32 = (uint64_t)v35;
            v35 = 0;
            if (v32)
              WebCore::RenderObjectDeleter::operator()((uint64_t)&v35, v32);
            WebCore::RenderTreeBuilder::moveChildren((uint64_t)this, (uint64_t)a2, v22, (WebCore::RenderTextFragment *)v7, v34, 0, 0);
            if ((_QWORD)v36)
              WebCore::RenderObjectDeleter::operator()((uint64_t)&v36, v36);
            v7 = (uint64_t)v34;
            if (!v34)
              goto LABEL_13;
          }
          else
          {
            v14 = 0;
            v15 = v7;
LABEL_11:
            if (v10)
            {
              v21 = *(unsigned int *)(v15 + 47);
              if (!(v21 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32)))
                goto LABEL_29;
              v34 = *(WebCore::RenderTextFragment **)((v21 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32))
                                                    + 8);
              goto LABEL_32;
            }
            v7 = (uint64_t)v14;
            if (!v14)
            {
LABEL_13:
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                                                                         + 1944)
                                                                             + 24)
                                                                 + 8)
                                                     + 40)
                                         + 8)
                             + 3382))
              {
                LOBYTE(v36) = 0;
                LOBYTE(v37) = 0;
                v41[0] = 0;
                v41[16] = 0;
                WebCore::RenderObject::issueRepaint((uint64_t)a2, &v36, 0, 0, (uint64_t)v41);
              }
              return;
            }
          }
        }
        v11 = *(unsigned int *)(v7 + 47);
        v12 = v11 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32);
        if ((v9 & 0x800) != 0 || (v9 & 0x1800000) == 0x1000000)
        {
          if (!v12)
            goto LABEL_13;
          goto LABEL_9;
        }
        if (v12)
        {
          v7 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
          if (v7)
            continue;
        }
        goto LABEL_13;
      }
    }
  }
}

WebCore::RenderTextFragment *WebCore::RenderTreeBuilder::splitAnonymousBoxesAroundChild(WebCore::RenderTreeBuilder *this, WebCore::RenderBox *a2, WebCore::RenderObject *a3)
{
  WebCore::RenderBox *v5;
  WebCore::RenderTable *v6;
  char v7;
  uint64_t v8;
  WebCore::RenderTextFragment *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WebCore::RenderBox *v13;
  uint64_t v14;
  WebCore::RenderTreeBuilder *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::RenderBox *v19;
  WebCore::RenderBox *v20;
  uint64_t v22;
  uint64_t v23;

  v6 = WebCore::RenderTreeBuilder::MultiColumn::adjustBeforeChildForMultiColumnSpannerIfNeeded(a3, a2);
  v7 = 0;
LABEL_2:
  v8 = (uint64_t)v6;
  while (1)
  {
    v9 = (WebCore::RenderTextFragment *)v8;
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10)
    {
      v8 = 0;
      goto LABEL_5;
    }
    v8 = *(_QWORD *)(v10 + 8);
    if ((WebCore::RenderBox *)v8 == a2)
      break;
LABEL_5:
    if ((*(_BYTE *)(v8 + 45) & 4) == 0)
      goto LABEL_27;
    v11 = *(unsigned int *)(v8 + 64);
    v12 = v11 | ((unint64_t)*(unsigned __int8 *)(v8 + 68) << 32);
    if (v12)
      v12 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(v8 + 68) << 32)) + 8);
    if ((*(_BYTE *)(v8 + 45) & 1) != 0 && (WebCore::RenderTextFragment *)v12 != v9)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, WebCore::RenderBox *))(*(_QWORD *)v8 + 1560))(&v23, v8, a2);
      v6 = (WebCore::RenderTable *)v23;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 168))(v23, (*(_DWORD *)(v8 + 20) >> 18) & 1);
      v14 = *(_QWORD *)(v8 + 32);
      if (v14)
      {
        v15 = *(WebCore::RenderTreeBuilder **)(v14 + 8);
        if (v15 && (*((_BYTE *)v15 + 45) & 4) == 0)
        {
LABEL_27:
          __break(0xC471u);
          JUMPOUT(0x19656FAD0);
        }
      }
      else
      {
        v15 = 0;
      }
      WebCore::RenderTreeBuilder::markBoxForRelayoutAfterSplit(v15, v13);
      v22 = v23;
      v23 = 0;
      v16 = *(unsigned int *)(v8 + 47);
      if (v16 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32))
        v17 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
      else
        v17 = 0;
      WebCore::RenderTreeBuilder::attachToRenderElementInternal((uint64_t)this, (uint64_t)v15, &v22, v17);
      v18 = v22;
      v22 = 0;
      if (v18)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v22, v18);
      WebCore::RenderTreeBuilder::moveChildren((uint64_t)this, v8, v6, v9, 0, 0, 1);
      WebCore::RenderTreeBuilder::markBoxForRelayoutAfterSplit((WebCore::RenderTreeBuilder *)v8, v19);
      WebCore::RenderTreeBuilder::markBoxForRelayoutAfterSplit(v6, v20);
      v5 = (WebCore::RenderBox *)v23;
      v23 = 0;
      if (v5)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v23, (uint64_t)v5);
      v7 = 1;
      goto LABEL_2;
    }
  }
  if ((v7 & 1) != 0)
    WebCore::RenderTreeBuilder::markBoxForRelayoutAfterSplit(a2, v5);
  return v9;
}

uint64_t WebCore::RenderTreeBuilder::markBoxForRelayoutAfterSplit(WebCore::RenderTreeBuilder *this, WebCore::RenderBox *a2)
{
  int v3;
  int *v4;
  int v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  WebCore::RenderElement *v11;
  uint64_t v12;
  int v13;

  v3 = *((unsigned __int8 *)this + 46);
  if (v3 == 35 || v3 == 63)
  {
    v4 = (int *)((char *)this + 16);
    ++*((_DWORD *)this + 4);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
    {
      *((_BYTE *)this + 328) |= 8u;
      v5 = *((_DWORD *)this + 5);
      if ((v5 & 8) == 0)
      {
        *((_DWORD *)this + 5) = v5 | 8;
        v6 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
        WebCore::RenderObject::scheduleLayout(this, v6);
        if ((*((_BYTE *)this + 21) & 0x80) != 0)
        {
          if ((*((_BYTE *)this + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19656FD1CLL);
          }
          v7 = *((_QWORD *)this + 18);
          if (v7)
          {
            v8 = *(_DWORD *)(v7 + 8) + 1;
            *(_DWORD *)(v7 + 8) = v8;
          }
          else
          {
            v8 = MEMORY[8];
          }
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v8)
          {
LABEL_30:
            __break(0xC471u);
            JUMPOUT(0x19656FBE0);
          }
          *(_DWORD *)(v7 + 8) = v8 - 1;
        }
      }
    }
    WebCore::RenderTable::recalcSections(this, a2);
    v9 = *((_DWORD *)this + 4);
    if (!v9)
      goto LABEL_30;
    goto LABEL_15;
  }
  if (v3 == 40)
  {
    v4 = (int *)((char *)this + 16);
    ++*((_DWORD *)this + 4);
    WebCore::RenderTableSection::setNeedsCellRecalc(this);
    v9 = *v4;
    if (!*v4)
    {
      __break(0xC471u);
      JUMPOUT(0x19656FCB0);
    }
LABEL_15:
    *v4 = v9 - 1;
  }
  v10 = *((_DWORD *)this + 5);
  if ((v10 & 8) == 0)
  {
    *((_DWORD *)this + 5) = v10 | 8;
    v11 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
    WebCore::RenderObject::scheduleLayout(this, v11);
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19656FCD0);
      }
      v12 = *((_QWORD *)this + 18);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 8) + 1;
        *(_DWORD *)(v12 + 8) = v13;
      }
      else
      {
        v13 = MEMORY[8];
      }
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(v12 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19656FCFCLL);
      }
      *(_DWORD *)(v12 + 8) = v13 - 1;
    }
  }
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
}

uint64_t WebCore::RenderTreeBuilder::Block::dropAnonymousBoxChild(WebCore::RenderTreeBuilder::Block *this, WebCore::RenderBlock *a2, WebCore::RenderBlock *a3)
{
  int v6;
  WebCore::RenderElement *v7;
  uint64_t v8;
  WebCore::RenderObject *v9;
  uint64_t v10;
  double v11;
  uint64_t result;
  uint64_t v13;

  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 8) == 0)
  {
    *((_DWORD *)a2 + 5) = v6 | 8;
    v7 = WebCore::RenderObject::markContainingBlocksForLayout(a2, 0);
    WebCore::RenderObject::scheduleLayout(a2, v7);
    if ((*((_BYTE *)a2 + 21) & 0x80) != 0)
      WebCore::RenderObject::setLayerNeedsFullRepaint((uint64_t)a2);
  }
  WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a2, 1, 1);
  (*(void (**)(WebCore::RenderBlock *, _QWORD))(*(_QWORD *)a2 + 168))(a2, (*((_DWORD *)a3 + 5) >> 18) & 1);
  while (1)
  {
    v8 = *((unsigned int *)a3 + 16);
    if (!(v8 | ((unint64_t)*((unsigned __int8 *)a3 + 68) << 32)))
      break;
    v9 = *(WebCore::RenderObject **)((v8 | ((unint64_t)*((unsigned __int8 *)a3 + 68) << 32)) + 8);
    if (!v9)
      break;
    WebCore::RenderElement::detachRendererInternal(v9, &v13);
    WebCore::RenderElement::attachRendererInternal((uint64_t)a2, &v13, (uint64_t)a3);
    v10 = v13;
    v13 = 0;
    if (v10)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v13, v10);
  }
  v11 = WebCore::RenderTreeBuilder::detachFromRenderElement(a2, a3, *(_QWORD *)this, 1, &v13);
  result = (*(uint64_t (**)(WebCore::RenderBlock *, double))(*(_QWORD *)a3 + 1648))(a3, v11);
  if (v13)
    return WebCore::RenderObjectDeleter::operator()((uint64_t)&v13, v13);
  return result;
}

void WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(WebCore::RenderTreeBuilder *this, WebCore::RenderObject *a2, const WebCore::RenderElement *a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  char v8;
  const WebCore::RenderElement *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  WebCore::RenderObject *v15;
  WebCore::RenderObject *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t *v36;
  WTF *v37;
  int v38;
  WTF *v39;
  WTF *v40;
  unsigned __int8 *v41;
  unsigned __int8 v42;
  WebCore::RenderBlock *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  uint64_t v69;
  int v70;
  int v71;
  WTF *v72;
  uint64_t v74;
  int *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v83;
  WTF *v84;
  WTF *v85;
  WebCore::RenderObject *v86;
  uint64_t v87;
  uint64_t j;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;

  v8 = *((_BYTE *)this + 122);
  *((_BYTE *)this + 122) = a3 != 0 && a2 != a3;
  if (a3 != 0 && a2 != a3)
    v9 = a3;
  else
    v9 = 0;
  v10 = *((_QWORD *)this + 16);
  if (v10)
    ++*(_DWORD *)(v10 + 16);
  if (a3 != 0 && a2 != a3)
    ++*((_DWORD *)a3 + 4);
  *((_QWORD *)this + 16) = v9;
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 16);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x196570620);
    }
    *(_DWORD *)(v10 + 16) = v11 - 1;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 3405))
  {
    WebCore::RenderTreeBuilder::destroy((uint64_t)this, (uint64_t)a2, 1, a4, a5, a6);
    goto LABEL_13;
  }
  v14 = *((unsigned __int8 *)a2 + 46);
  v15 = a2;
  do
  {
    v16 = v15;
    if (v14 == 49)
      break;
    v15 = (WebCore::RenderObject *)*((_QWORD *)v15 + 4);
    if (v15)
      v15 = (WebCore::RenderObject *)*((_QWORD *)v15 + 1);
    if ((*((_BYTE *)v15 + 45) & 1) == 0)
      break;
    v14 = *((unsigned __int8 *)v15 + 46);
    if (v14 == 49)
      break;
    if ((*((_BYTE *)v15 + 52) & 7) == 1)
    {
      if (v14 == 88 || (*((_BYTE *)v15 + 53) & 2) != 0)
        break;
    }
    else if (v14 == 88)
    {
      break;
    }
    v17 = *((unsigned int *)v15 + 16);
    v18 = v17 | ((unint64_t)*((unsigned __int8 *)v15 + 68) << 32);
    if (v18)
      v18 = *(_QWORD *)((v17 | ((unint64_t)*((unsigned __int8 *)v15 + 68) << 32)) + 8);
    if ((WebCore::RenderObject *)v18 != v16)
      break;
    v19 = *(unsigned int *)((char *)v15 + 71);
    v20 = v19 | ((unint64_t)*((unsigned __int8 *)v15 + 75) << 32);
    if (v20)
      v20 = *(_QWORD *)((v19 | ((unint64_t)*((unsigned __int8 *)v15 + 75) << 32)) + 8);
  }
  while ((WebCore::RenderObject *)v20 == v16);
  v21 = (uint64_t *)*((_QWORD *)v16 + 1);
  if (!v21)
  {
    v21 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v21 = 1;
    v21[1] = (uint64_t)v16;
    v58 = (WTF *)*((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v21;
    if (v58)
    {
      if (*(_DWORD *)v58 == 1)
      {
        WTF::fastFree(v58, a2);
        v21 = (uint64_t *)*((_QWORD *)v16 + 1);
      }
      else
      {
        --*(_DWORD *)v58;
      }
    }
  }
  ++*(_DWORD *)v21;
  v22 = v21[1];
  if ((*(_BYTE *)(v22 + 45) & 2) == 0)
  {
    v23 = *(WTF **)(v22 + 8);
    if (!v23)
    {
      v23 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v23 = 1;
      *((_QWORD *)v23 + 1) = v22;
      v59 = *(WTF **)(v22 + 8);
      *(_QWORD *)(v22 + 8) = v23;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1)
        {
          WTF::fastFree(v59, a2);
          v23 = *(WTF **)(v22 + 8);
          if (!v23)
            goto LABEL_53;
        }
        else
        {
          --*(_DWORD *)v59;
        }
      }
    }
    ++*(_DWORD *)v23;
    v24 = *((_QWORD *)v23 + 1);
    if (v24)
    {
      v25 = *(unsigned int *)(v24 + 64);
      if (v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 68) << 32))
      {
        v26 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 68) << 32)) + 8);
        if (v26)
        {
          if ((*(_BYTE *)(v26 + 45) & 4) != 0)
          {
            v60 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 68) << 32)) + 8);
            while (1)
            {
LABEL_122:
              v61 = *(_DWORD *)(v60 + 20);
              v62 = v61 & 0x1800000;
              if ((v61 & 0x800) != 0 || v62 == 0x1000000)
              {
                if ((v61 & 0x800) != 0)
                {
                  WebCore::RenderBox::removeFloatingAndInvalidateForLayout((WebCore::RenderBox *)v60);
                }
                else if (v62 == 0x1000000)
                {
                  {
                    WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                    unk_1ECE91358 = 0u;
                  }
                  WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, (const WebCore::RenderBox *)v60);
                }
              }
              v63 = *(unsigned int *)(v60 + 64);
              if (!(v63 | ((unint64_t)*(unsigned __int8 *)(v60 + 68) << 32))
                || (v64 = *(_QWORD *)((v63 | ((unint64_t)*(unsigned __int8 *)(v60 + 68) << 32)) + 8)) == 0)
              {
                if (v60 == v24)
                  goto LABEL_39;
                v65 = *(unsigned int *)(v60 + 47);
                if (!(v65 | ((unint64_t)*(unsigned __int8 *)(v60 + 51) << 32)))
                  break;
                v64 = *(_QWORD *)((v65 | ((unint64_t)*(unsigned __int8 *)(v60 + 51) << 32)) + 8);
                if (!v64)
                  break;
              }
LABEL_131:
              v60 = v64;
              if ((*(_BYTE *)(v64 + 45) & 4) == 0)
              {
                while (1)
                {
                  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 112))(v64);
                  if (!v60)
                  {
                    if (v64 == v24)
                      goto LABEL_39;
                    v92 = *(unsigned int *)(v64 + 47);
                    if (!(v92 | ((unint64_t)*(unsigned __int8 *)(v64 + 51) << 32)))
                      break;
                    v60 = *(_QWORD *)((v92 | ((unint64_t)*(unsigned __int8 *)(v64 + 51) << 32)) + 8);
                    if (!v60)
                      break;
                  }
LABEL_267:
                  v64 = v60;
                  if ((*(_BYTE *)(v60 + 45) & 4) != 0)
                    goto LABEL_122;
                }
                v93 = *(_QWORD *)(v64 + 32);
                if (v93)
                {
                  while (1)
                  {
                    v94 = *(_QWORD *)(v93 + 8);
                    if (!v94 || v94 == v24)
                      break;
                    v96 = *(unsigned int *)(v94 + 47);
                    if (v96 | ((unint64_t)*(unsigned __int8 *)(v94 + 51) << 32))
                    {
                      v60 = *(_QWORD *)((v96 | ((unint64_t)*(unsigned __int8 *)(v94 + 51) << 32)) + 8);
                      if (v60)
                        goto LABEL_267;
                    }
                    v93 = *(_QWORD *)(v94 + 32);
                    if (!v93)
                      goto LABEL_39;
                  }
                }
                goto LABEL_39;
              }
            }
            for (i = *(_QWORD *)(v60 + 32); i; i = *(_QWORD *)(v67 + 32))
            {
              v67 = *(_QWORD *)(i + 8);
              if (!v67 || v67 == v24)
                break;
              v69 = *(unsigned int *)(v67 + 47);
              if (v69 | ((unint64_t)*(unsigned __int8 *)(v67 + 51) << 32))
              {
                v64 = *(_QWORD *)((v69 | ((unint64_t)*(unsigned __int8 *)(v67 + 51) << 32)) + 8);
                if (v64)
                  goto LABEL_131;
              }
            }
          }
          else
          {
            while (1)
            {
              v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 112))(v26);
              if (!v60)
              {
                if (v26 == v24)
                  goto LABEL_39;
                v87 = *(unsigned int *)(v26 + 47);
                if (!(v87 | ((unint64_t)*(unsigned __int8 *)(v26 + 51) << 32)))
                  break;
                v60 = *(_QWORD *)((v87 | ((unint64_t)*(unsigned __int8 *)(v26 + 51) << 32)) + 8);
                if (!v60)
                  break;
              }
LABEL_251:
              v26 = v60;
              if ((*(_BYTE *)(v60 + 45) & 4) != 0)
                goto LABEL_122;
            }
            for (j = *(_QWORD *)(v26 + 32); j; j = *(_QWORD *)(v89 + 32))
            {
              v89 = *(_QWORD *)(j + 8);
              if (!v89 || v89 == v24)
                break;
              v91 = *(unsigned int *)(v89 + 47);
              if (v91 | ((unint64_t)*(unsigned __int8 *)(v89 + 51) << 32))
              {
                v60 = *(_QWORD *)((v91 | ((unint64_t)*(unsigned __int8 *)(v89 + 51) << 32)) + 8);
                if (v60)
                  goto LABEL_251;
              }
            }
          }
        }
      }
LABEL_39:
      v27 = v21[1];
      if (v27 && (*(_BYTE *)(v27 + 45) & 4) != 0)
      {
        v28 = *(_DWORD *)(v27 + 20);
        v29 = *(_DWORD *)(v27 + 16) + 1;
        *(_DWORD *)(v27 + 16) = v29;
        v30 = v28 & 0x1800000;
        if ((v28 & 0x800) != 0 || v30 == 0x1000000)
        {
          if ((v28 & 0x800) != 0)
          {
            WebCore::RenderBox::removeFloatingAndInvalidateForLayout((WebCore::RenderBox *)v27);
          }
          else if (v30 == 0x1000000)
          {
            {
              WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
              unk_1ECE91358 = 0u;
            }
            WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, (const WebCore::RenderBox *)v27);
          }
          v29 = *(_DWORD *)(v27 + 16);
        }
        if (!v29)
        {
          __break(0xC471u);
          JUMPOUT(0x1965706A8);
        }
        *(_DWORD *)(v27 + 16) = v29 - 1;
      }
    }
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree(v23, a2);
    else
      --*(_DWORD *)v23;
  }
LABEL_53:
  v31 = v21[1];
  v32 = *(unsigned __int8 *)(v31 + 46);
  if (v32 == 37)
  {
    v75 = (int *)(v31 + 16);
    ++*(_DWORD *)(v31 + 16);
    WebCore::RenderTreeBuilder::Table::collapseAndDestroyAnonymousSiblingCells(*((WebCore::RenderTreeBuilder::Table **)this + 6), (const WebCore::RenderTableCell *)v31);
    v76 = *v75;
    if (!*v75)
    {
      __break(0xC471u);
      JUMPOUT(0x1965707B8);
    }
    goto LABEL_176;
  }
  if (v32 == 39)
  {
    v75 = (int *)(v31 + 16);
    ++*(_DWORD *)(v31 + 16);
    WebCore::RenderTreeBuilder::Table::collapseAndDestroyAnonymousSiblingRows(*((WebCore::RenderTreeBuilder::Table **)this + 6), (const WebCore::RenderTableRow *)v31);
    v76 = *v75;
    if (!*v75)
    {
      __break(0xC471u);
      JUMPOUT(0x1965705C8);
    }
LABEL_176:
    *v75 = v76 - 1;
    v31 = v21[1];
  }
  v33 = *(_QWORD *)(v31 + 32);
  if (v33 && (v34 = *(_QWORD *)(v33 + 8)) != 0)
  {
    v35 = *(WTF **)(v34 + 8);
    if (!v35)
    {
      v35 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = v34;
      v83 = *(WTF **)(v34 + 8);
      *(_QWORD *)(v34 + 8) = v35;
      if (v83)
      {
        if (*(_DWORD *)v83 == 1)
        {
          WTF::fastFree(v83, (void *)v31);
          v35 = *(WTF **)(v34 + 8);
          if (!v35)
            goto LABEL_58;
        }
        else
        {
          --*(_DWORD *)v83;
        }
      }
    }
    ++*(_DWORD *)v35;
  }
  else
  {
    v35 = 0;
  }
LABEL_58:
  if ((WebCore::RenderObject *)v21[1] == a2)
    goto LABEL_59;
  v84 = (WTF *)*((_QWORD *)this + 17);
  if (v84)
  {
    ++*(_DWORD *)v84;
    ++*(_DWORD *)v21;
    *((_QWORD *)this + 17) = v21;
    if (*(_DWORD *)v84 == 1)
      WTF::fastFree(v84, (void *)v31);
    else
      --*(_DWORD *)v84;
  }
  else
  {
    ++*(_DWORD *)v21;
    *((_QWORD *)this + 17) = v21;
  }
  WebCore::RenderTreeBuilder::destroy((uint64_t)this, (uint64_t)a2, 1, a4, a5, a6);
  v85 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v84;
  if (v85)
  {
    if (*(_DWORD *)v85 == 1)
      WTF::fastFree(v85, (void *)v31);
    else
      --*(_DWORD *)v85;
  }
  v86 = (WebCore::RenderObject *)v21[1];
  if (!v86)
    goto LABEL_66;
  if (v86 == a2)
  {
LABEL_59:
    v36 = 0;
  }
  else
  {
    ++*(_DWORD *)v21;
    v36 = v21;
  }
  v37 = (WTF *)*((_QWORD *)this + 17);
  if (v37)
  {
    v38 = (*(_DWORD *)v37)++;
    *((_QWORD *)this + 17) = v36;
    if (v38)
      *(_DWORD *)v37 = v38;
    else
      WTF::fastFree(v37, (void *)v31);
  }
  else
  {
    *((_QWORD *)this + 17) = v36;
  }
  WebCore::RenderTreeBuilder::destroy((uint64_t)this, v21[1], 1, a4, a5, a6);
  v39 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v37;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::fastFree(v39, (void *)v31);
    else
      --*(_DWORD *)v39;
  }
LABEL_66:
  if (!v35)
    goto LABEL_159;
  if (!*((_QWORD *)v35 + 1))
    goto LABEL_157;
  v40 = (WTF *)*((_QWORD *)this + 17);
  if (v40)
  {
    ++*(_DWORD *)v40;
    ++*(_DWORD *)v35;
    *((_QWORD *)this + 17) = v35;
    if (*(_DWORD *)v40 == 1)
      WTF::fastFree(v40, (void *)v31);
    else
      --*(_DWORD *)v40;
  }
  else
  {
    ++*(_DWORD *)v35;
    *((_QWORD *)this + 17) = v35;
  }
  v41 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
  v42 = v41[45];
  if ((v42 & 0x40) != 0)
    v43 = (WebCore::RenderBlock *)*((_QWORD *)v35 + 1);
  else
    v43 = 0;
  if ((v41[45] & 0x40) == 0)
    goto LABEL_152;
  ++*((_DWORD *)v41 + 4);
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v41 + 1688))(v41))
    goto LABEL_150;
  v44 = *((unsigned int *)v41 + 16);
  if (!(v44 | ((unint64_t)v41[68] << 32)))
    goto LABEL_150;
  v45 = *(_QWORD *)((v44 | ((unint64_t)v41[68] << 32)) + 8);
  if (!v45)
    goto LABEL_150;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = *(_BYTE *)(v45 + 45);
    if ((v48 & 2) != 0)
      v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8) + 96);
    else
      v49 = *(_QWORD *)(v45 + 96);
    if ((v49 & 0xE000000) == 0 && (v49 & 0x180000) != 0x100000)
    {
      if ((*(_BYTE *)(v45 + 45) & 1) == 0)
        goto LABEL_150;
      v97 = v45;
      if ((*(_BYTE *)(v45 + 45) & 2) != 0)
      {
        v78 = v45;
        v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8) + 96);
        if ((v77 & 0x1F) != 1 && (v77 & 0x1F) != 14)
          goto LABEL_150;
      }
      else
      {
        v77 = *(_QWORD *)(v45 + 96);
        if ((v77 & 0x1F) == 1)
        {
          v78 = v97;
        }
        else
        {
          v78 = v97;
          if ((v77 & 0x1F) != 0xE)
            goto LABEL_150;
        }
      }
      if ((v48 & 0x40) == 0)
        goto LABEL_150;
      if ((v77 & 0xF80000000000) != 0)
        goto LABEL_150;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 176))(v97) & 1) != 0)
        goto LABEL_150;
      v79 = *(unsigned __int8 *)(v97 + 46);
      if (v79 == 20)
        goto LABEL_150;
      if ((*(_BYTE *)(v97 + 52) & 7) == 1)
      {
        v80 = v97;
        if ((*(_BYTE *)(v97 + 53) & 2) != 0 || v79 == 26)
          goto LABEL_150;
      }
      else
      {
        v80 = v97;
        if (v79 == 26)
          goto LABEL_150;
      }
      if (v79 == 49)
        goto LABEL_150;
      if ((*(_BYTE *)(v80 + 45) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196570860);
      }
      if ((*(_WORD *)(v97 + 69) & 0x20) != 0)
        goto LABEL_150;
      v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 112))(v97);
      if (!v81)
        goto LABEL_207;
      if (!v46)
      {
        v46 = 1;
        v47 = (*(_BYTE *)(v81 + 20) & 1) == 0;
LABEL_207:
        v45 = v97;
        goto LABEL_83;
      }
      v45 = v97;
      if (((*(_BYTE *)(v81 + 20) & 1) == 0) != v47)
        goto LABEL_150;
      v46 = 1;
    }
LABEL_83:
    v50 = *(unsigned int *)(v45 + 47) | ((unint64_t)*(unsigned __int8 *)(v45 + 51) << 32);
    if (!v50)
      break;
    v45 = *(_QWORD *)(v50 + 8);
  }
  while (v45);
  v51 = *((unsigned int *)v41 + 16);
  if (v51 | ((unint64_t)v41[68] << 32))
  {
    v52 = *(_QWORD *)((v51 | ((unint64_t)v41[68] << 32)) + 8);
    while (v52)
    {
      v53 = v52;
      v54 = *(unsigned int *)(v52 + 47);
      if (v54 | ((unint64_t)*(unsigned __int8 *)(v52 + 51) << 32))
        v52 = *(_QWORD *)((v54 | ((unint64_t)*(unsigned __int8 *)(v52 + 51) << 32)) + 8);
      else
        v52 = 0;
      if ((*(_BYTE *)(v53 + 45) & 1) != 0)
      {
        v55 = (*(_BYTE *)(v53 + 45) & 2) != 0
            ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 32) + 8) + 96)
            : *(_QWORD *)(v53 + 96);
        if (((v55 & 0x1F) == 1 || (v55 & 0x1F) == 14)
          && (*(_BYTE *)(v53 + 45) & 0x40) != 0
          && (v55 & 0xF80000000000) == 0
          && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 176))(v53) & 1) == 0)
        {
          v57 = *(unsigned __int8 *)(v53 + 46);
          if (v57 != 20)
          {
            if ((*(_BYTE *)(v53 + 52) & 7) == 1)
            {
              if ((*(_BYTE *)(v53 + 53) & 2) == 0 && v57 != 26 && v57 != 49)
                goto LABEL_108;
            }
            else if (v57 != 49 && v57 != 26)
            {
LABEL_108:
              if ((*(_BYTE *)(v53 + 45) & 0x40) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x196570798);
              }
              WebCore::RenderTreeBuilder::Block::dropAnonymousBoxChild(*((WebCore::RenderTreeBuilder::Block **)this + 9), v43, (WebCore::RenderBlock *)v53);
            }
          }
        }
      }
    }
  }
LABEL_150:
  v70 = *((_DWORD *)v41 + 4);
  if (!v70)
  {
    __break(0xC471u);
    JUMPOUT(0x19657067CLL);
  }
  *((_DWORD *)v41 + 4) = v70 - 1;
  v41 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
  v42 = v41[45];
LABEL_152:
  if ((v42 & 1) != 0)
  {
    v71 = v41[46];
    if (v71 != 49)
    {
      if ((v41[52] & 7) == 1)
      {
        if (v71 == 88 || (v41[53] & 2) != 0)
          goto LABEL_154;
      }
      else if (v71 == 88)
      {
        goto LABEL_154;
      }
      v74 = *((unsigned int *)v41 + 16);
      if (!(v74 | ((unint64_t)v41[68] << 32)) || !*(_QWORD *)((v74 | ((unint64_t)v41[68] << 32)) + 8))
        WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(this, (WebCore::RenderObject *)v41, (const WebCore::RenderElement *)v41);
    }
  }
LABEL_154:
  v72 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v40;
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::fastFree(v72, (void *)v31);
    else
      --*(_DWORD *)v72;
  }
LABEL_157:
  if (*(_DWORD *)v35 == 1)
    WTF::fastFree(v35, (void *)v31);
  else
    --*(_DWORD *)v35;
LABEL_159:
  if (*(_DWORD *)v21 == 1)
    WTF::fastFree((WTF *)v21, (void *)v31);
  else
    --*(_DWORD *)v21;
LABEL_13:
  v12 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v10;
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 16);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x196570640);
    }
    *(_DWORD *)(v12 + 16) = v13 - 1;
  }
  *((_BYTE *)this + 122) = v8;
}

void WebCore::RenderTreeBuilder::Block::insertChildToContinuation(uint64_t *a1, uint64_t *a2, uint64_t *a3, WebCore::RenderObject *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  uint64_t v72;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v4 = a2;
  if (!a4 || (v5 = *((_QWORD *)a4 + 4)) == 0 || *(uint64_t **)(v5 + 8) != a2)
  {
    if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) == 0)
      goto LABEL_5;
    v7 = ++dword_1ECE91378;
    v8 = a2[1];
    v9 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v13);
    if (v14 == -1 || v14 != v8)
    {
      v16 = 1;
      do
      {
        v13 = ((_DWORD)v13 + v16) & v9;
        v17 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v13);
        ++v16;
      }
      while (v17 == -1 || v17 != v8);
    }
    v19 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v13 + 8) + 16);
    if (v19 && (v20 = *v19) != 0 && (a2 = *(uint64_t **)(v20 + 8)) != 0)
    {
      if ((*((_BYTE *)a2 + 45) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196571014);
      }
      if (a4)
      {
        v5 = *((_QWORD *)a4 + 4);
        while (1)
        {
          v21 = a2;
          v22 = v5 ? *(uint64_t **)(v5 + 8) : 0;
          if (v22 == a2)
            break;
          if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) == 0)
            goto LABEL_49;
          dword_1ECE91378 = ++v7;
          v23 = a2[1];
          v24 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
          v25 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v28);
          if (v29 == -1 || v29 != v23)
          {
            v31 = 1;
            do
            {
              v28 = ((_DWORD)v28 + v31) & v24;
              v32 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v28);
              ++v31;
            }
            while (v32 == -1 || v32 != v23);
          }
          v34 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v28 + 8) + 16);
          if (!v34 || (v35 = *v34) == 0 || (a2 = *(uint64_t **)(v35 + 8)) == 0)
          {
LABEL_49:
            a2 = v21;
            goto LABEL_8;
          }
          v4 = v21;
          if ((*((_BYTE *)a2 + 45) & 0x40) == 0)
            goto LABEL_124;
        }
        v60 = *((unsigned int *)a2 + 16);
        v61 = v60 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32);
        if (v61)
          v61 = *(_QWORD *)((v60 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
        if ((WebCore::RenderObject *)v61 == a4)
          a2 = v4;
LABEL_8:
        if (!v5)
        {
          v6 = 0;
          goto LABEL_60;
        }
        goto LABEL_10;
      }
      if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) == 0)
      {
LABEL_51:
        v36 = *((unsigned int *)a2 + 16);
        if (v36 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
        {
          if (!*(_QWORD *)((v36 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8))
            a2 = v4;
        }
        else
        {
          a2 = v4;
        }
        if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) != 0)
        {
          ++dword_1ECE91378;
          v49 = a2[1];
          v50 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
          v51 = (~(v49 << 32) + v49) ^ ((unint64_t)(~(v49 << 32) + v49) >> 22);
          v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
          v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
          v54 = v50 & ((v53 >> 31) ^ v53);
          v55 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v54);
          if (v55 == -1 || v55 != v49)
          {
            v57 = 1;
            do
            {
              v54 = ((_DWORD)v54 + v57) & v50;
              v58 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v54);
              ++v57;
            }
            while (v58 == -1 || v58 != v49);
          }
          v6 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v54 + 8) + 16);
          if (v6)
          {
            v6 = (uint64_t *)*v6;
            if (v6)
              v6 = (uint64_t *)v6[1];
          }
        }
        else
        {
          v6 = 0;
        }
        if (!v6)
          v6 = a2;
        goto LABEL_60;
      }
      while (1)
      {
        v62 = a2;
        dword_1ECE91378 = ++v7;
        v63 = a2[1];
        v64 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
        v65 = (~(v63 << 32) + v63) ^ ((unint64_t)(~(v63 << 32) + v63) >> 22);
        v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
        v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
        v68 = v64 & ((v67 >> 31) ^ v67);
        v69 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v68);
        if (v69 == -1 || v69 != v63)
        {
          v71 = 1;
          do
          {
            v68 = ((_DWORD)v68 + v71) & v64;
            v72 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v68);
            ++v71;
          }
          while (v72 == -1 || v72 != v63);
        }
        v74 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v68 + 8) + 16);
        if (!v74)
          break;
        v75 = *v74;
        if (!v75)
          break;
        a2 = *(uint64_t **)(v75 + 8);
        if (!a2)
          break;
        if ((*((_BYTE *)a2 + 45) & 0x40) == 0)
          goto LABEL_124;
        v4 = v62;
        if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) == 0)
          goto LABEL_6;
      }
      a2 = v62;
    }
    else
    {
LABEL_5:
      a2 = v4;
    }
LABEL_6:
    if (a4)
    {
      v5 = *((_QWORD *)a4 + 4);
      goto LABEL_8;
    }
    goto LABEL_51;
  }
LABEL_10:
  v6 = *(uint64_t **)(v5 + 8);
  if (v6 && (*((_BYTE *)v6 + 45) & 8) == 0)
  {
LABEL_124:
    __break(0xC471u);
    JUMPOUT(0x196570AF4);
  }
LABEL_60:
  v37 = *a3;
  v38 = *(_DWORD *)(*a3 + 20);
  if ((v38 & 0x800) != 0 || (v38 & 0x1800000) == 0x1000000)
  {
    v40 = *a1;
    *a3 = 0;
    v80 = v37;
    WebCore::RenderTreeBuilder::attachIgnoringContinuation(v40, (WebCore::RenderObject *)v6, &v80, a4);
    v41 = v80;
    if (!v80)
      return;
    v42 = &v80;
  }
  else
  {
    if ((v38 & 1) != 0)
    {
      v43 = *a3;
      if ((*(_BYTE *)(v37 + 45) & 2) != 0)
        v43 = *(_QWORD *)(*(_QWORD *)(v37 + 32) + 8);
      v39 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 88) + 32) + 24) + 56) & 8) == 0;
    }
    else
    {
      v39 = 1;
    }
    v44 = (*((_BYTE *)v6 + 20) & 1) == 0 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6[11] + 32) + 24) + 56) & 8) == 0;
    v45 = (*((_BYTE *)a2 + 20) & 1) == 0 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[11] + 32) + 24) + 56) & 8) == 0;
    if (a2 == v6)
    {
      v47 = *a1;
      *a3 = 0;
      v79 = v37;
      WebCore::RenderTreeBuilder::attachIgnoringContinuation(v47, (WebCore::RenderObject *)a2, &v79, a4);
      v41 = v79;
      if (!v79)
        return;
      v42 = &v79;
    }
    else if (v39 == v44)
    {
      v46 = *a1;
      *a3 = 0;
      v78 = v37;
      WebCore::RenderTreeBuilder::attachIgnoringContinuation(v46, (WebCore::RenderObject *)v6, &v78, a4);
      v41 = v78;
      if (!v78)
        return;
      v42 = &v78;
    }
    else
    {
      v48 = *a1;
      *a3 = 0;
      if (v45 == v39)
      {
        v77 = v37;
        WebCore::RenderTreeBuilder::attachIgnoringContinuation(v48, (WebCore::RenderObject *)a2, &v77, 0);
        v41 = v77;
        if (!v77)
          return;
        v42 = &v77;
      }
      else
      {
        v76 = v37;
        WebCore::RenderTreeBuilder::attachIgnoringContinuation(v48, (WebCore::RenderObject *)v6, &v76, a4);
        v41 = v76;
        if (!v76)
          return;
        v42 = &v76;
      }
    }
  }
  WebCore::RenderObjectDeleter::operator()((uint64_t)v42, v41);
}

uint64_t WebCore::findParentAndBeforeChildForNonSibling(uint64_t this, WebCore::RenderBlock *a2, const WebCore::RenderObject *a3, WebCore::RenderObject *a4)
{
  uint64_t v7;
  WebCore::RenderBlock *v8;
  WebCore::RenderBlock *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v7 = this;
  v8 = (WebCore::RenderBlock *)*((_QWORD *)a4 + 4);
  if (v8)
    v8 = (WebCore::RenderBlock *)*((_QWORD *)v8 + 1);
  do
  {
    do
    {
      v9 = v8;
      v8 = 0;
      v10 = *((_QWORD *)v9 + 4);
    }
    while (!v10);
    v8 = *(WebCore::RenderBlock **)(v10 + 8);
  }
  while (v8 != a2);
  if ((*((_BYTE *)v9 + 45) & 1) != 0)
  {
    if ((*((_BYTE *)v9 + 20) & 1) == 0)
    {
      if ((*((_BYTE *)a3 + 20) & 1) == 0)
      {
        *(_QWORD *)this = a2;
        *(_QWORD *)(this + 8) = v9;
        goto LABEL_20;
      }
      v19 = *((unsigned __int8 *)v9 + 46);
      if (v19 != 35 && v19 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x196571248);
      }
    }
    if ((*((_BYTE *)v9 + 45) & 2) != 0)
      v11 = *((_QWORD *)a2 + 12);
    else
      v11 = *((_QWORD *)v9 + 12);
    if (((v11 & 0x1F) == 1 || (v11 & 0x1F) == 0xE)
      && (*((_BYTE *)v9 + 45) & 0x40) != 0
      && (v11 & 0xF80000000000) == 0)
    {
      this = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v9 + 176))(v9);
      if ((this & 1) == 0)
      {
        v12 = *((unsigned __int8 *)v9 + 46);
        if (v12 != 20)
        {
          if ((*((_BYTE *)v9 + 52) & 7) == 1)
          {
            if ((*((_BYTE *)v9 + 53) & 2) != 0 || v12 == 26 || v12 == 49)
              goto LABEL_18;
LABEL_24:
            v13 = *((_DWORD *)a3 + 5);
            if ((v13 & 0x1800000) != 0x1000000 || (*((_BYTE *)v9 + 45) & 4) == 0)
            {
LABEL_26:
              if ((v13 & 1) == 0)
                goto LABEL_19;
              v14 = *((unsigned int *)v9 + 16);
              if (!(v14 | ((unint64_t)*((unsigned __int8 *)v9 + 68) << 32))
                || *(WebCore::RenderObject **)((v14 | ((unint64_t)*((unsigned __int8 *)v9 + 68) << 32)) + 8) != a4)
              {
                goto LABEL_19;
              }
LABEL_29:
              v15 = *((_QWORD *)a4 + 4);
              if (v15)
                v15 = *(_QWORD *)(v15 + 8);
              *(_QWORD *)v7 = a2;
              *(_QWORD *)(v7 + 8) = v15;
              goto LABEL_20;
            }
            v16 = *((_DWORD *)v9 + 5);
            if ((v16 & 1) != 0)
            {
              v17 = *((_QWORD *)v9 + 4);
              if ((v16 & 0x800) == 0 && (v16 & 0x1800000) != 0x1000000)
              {
                if (!v17)
                  goto LABEL_26;
                v18 = *(_QWORD *)(v17 + 8);
                if (!v18)
                  goto LABEL_26;
                if (*(char *)(v18 + 45) < 0 || *(_BYTE *)(v18 + 46) == 5)
                  goto LABEL_29;
                goto LABEL_39;
              }
            }
            else
            {
              v17 = *((_QWORD *)v9 + 4);
            }
            if (!v17)
              goto LABEL_26;
            v18 = *(_QWORD *)(v17 + 8);
            if (!v18)
              goto LABEL_26;
LABEL_39:
            if ((v16 & 0x400) == 0 && *(_BYTE *)(v18 + 46) == 12)
              goto LABEL_29;
            goto LABEL_26;
          }
          if (v12 != 49 && v12 != 26)
            goto LABEL_24;
        }
      }
    }
LABEL_18:
    if (*((unsigned __int8 *)a3 + 46) - 36 > 4)
    {
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      goto LABEL_20;
    }
LABEL_19:
    *(_QWORD *)v7 = v9;
    *(_QWORD *)(v7 + 8) = a4;
LABEL_20:
    *(_BYTE *)(v7 + 16) = 1;
    return this;
  }
  *(_BYTE *)this = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

void WebCore::RenderTreeBuilder::Block::removeLeftoverAnonymousBlock(WebCore::RenderTreeBuilder::Block *this, WebCore::RenderBlock *a2)
{
  uint64_t v4;
  WebCore::RenderElement *v5;
  uint64_t v7;
  WebCore::RenderObject *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) == 0)
    goto LABEL_2;
  ++dword_1ECE91378;
  v10 = *((_QWORD *)a2 + 1);
  v11 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v12 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v15);
  if (v16 == -1 || v16 != v10)
  {
    v18 = 1;
    do
    {
      v15 = ((_DWORD)v15 + v18) & v11;
      v19 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v15);
      ++v18;
    }
    while (v19 == -1 || v19 != v10);
  }
  v21 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v15 + 8) + 16);
  if (!v21 || (v22 = *v21) == 0 || !*(_QWORD *)(v22 + 8))
  {
LABEL_2:
    v4 = *((_QWORD *)a2 + 4);
    if (v4)
      v5 = *(WebCore::RenderElement **)(v4 + 8);
    else
      v5 = 0;
    if (*((_BYTE *)v5 + 46) != 2 && ((*((_BYTE *)v5 + 52) & 7) != 1 || (*((_BYTE *)v5 + 53) & 4) == 0))
    {
      WebCore::RenderTreeBuilder::removeFloatingObjects(this, a2);
      while (1)
      {
        v7 = *((unsigned int *)a2 + 16);
        if (!(v7 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)))
          break;
        v8 = *(WebCore::RenderObject **)((v7 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
        if (!v8)
          break;
        WebCore::RenderElement::detachRendererInternal(v8, &v23);
        WebCore::RenderElement::attachRendererInternal((uint64_t)v5, &v23, (uint64_t)a2);
        v9 = v23;
        v23 = 0;
        if (v9)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v23, v9);
      }
      WebCore::RenderTreeBuilder::detachFromRenderElement(v5, a2, *(_QWORD *)this, 1, &v23);
      if (v23)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v23, v23);
    }
  }
}

const char *WebCore::LegacyRenderSVGShape::renderName(WebCore::LegacyRenderSVGShape *this)
{
  return "RenderSVGShape";
}

uint64_t WebCore::LegacyRenderSVGTransformableContainer::setNeedsTransformUpdate(uint64_t this)
{
  *(_BYTE *)(this + 211) |= 1u;
  return this;
}

__n128 WebCore::LegacyRenderSVGTransformableContainer::localTransform@<Q0>(WebCore::LegacyRenderSVGTransformableContainer *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)((char *)this + 248);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t WebCore::LegacyRenderSVGTransformableContainer::localToParentTransform(WebCore::LegacyRenderSVGTransformableContainer *this)
{
  return (uint64_t)this + 216;
}

uint64_t WebCore::LegacyRenderSVGTransformableContainer::didTransformToRootUpdate(WebCore::LegacyRenderSVGTransformableContainer *this)
{
  return (*((unsigned __int8 *)this + 211) >> 1) & 1;
}

const char *WebCore::LegacyRenderSVGViewportContainer::renderName(WebCore::LegacyRenderSVGViewportContainer *this)
{
  return "RenderSVGViewportContainer";
}

uint64_t WebCore::LegacyRenderSVGViewportContainer::localToParentTransform(WebCore::LegacyRenderSVGViewportContainer *this)
{
  return (uint64_t)this + 232;
}

uint64_t WebCore::LegacyRenderSVGViewportContainer::didTransformToRootUpdate(WebCore::LegacyRenderSVGViewportContainer *this)
{
  return *((_BYTE *)this + 211) & 1;
}

uint64_t WebCore::tagSet(_QWORD *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v9[24];

  *a1 = 0;
  a1[1] = 0;
  *(_QWORD *)((char *)a1 + 13) = 0;
  result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity((uint64_t)a1, a3);
  if (a3)
  {
    v7 = 8 * a3;
    do
    {
      v8 = *a2++;
      result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, *v8 + 24, (uint64_t)v9);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void WebCore::SVGResources::~SVGResources(WebCore::SVGResources *this, void *a2)
{
  WTF *v3;
  WTF **v4;
  WTF *v5;
  WTF *v6;

  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4[1];
    v4[1] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    v6 = *v4;
    *v4 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, a2);
      else
        --*(_DWORD *)v6;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100]((WTF ***)this + 1, 0);
  std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100]((WTF ***)this, 0);
}

uint64_t *WebCore::SVGURIReference::href@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9[5];
  uint64_t *v10[5];

  v2 = this[1];
  v4 = (uint64_t *)(v2 + 24);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3
    && *(_DWORD *)(v3 - 12)
    && (v7 = this[1],
        v8 = a2,
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v4, v10),
        this = WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v4, v9), v2 = v7, a2 = v8, v10[1] != v9[1]))
  {
    v5 = v7 + 48;
  }
  else
  {
    v5 = v2 + 40;
  }
  v6 = *(_DWORD **)(*(_QWORD *)v5 + 32);
  if (v6)
    *v6 += 2;
  *a2 = v6;
  return this;
}

WTF ***std::unique_ptr<WebCore::SVGResources::ClipperFilterMaskerData>::reset[abi:sn180100](WTF ***result, WTF **a2)
{
  WTF **v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2[2];
    v2[2] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
        WTF::fastFree(v3, a2);
      else
        --*(_DWORD *)v3;
    }
    v4 = v2[1];
    v2[1] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
    v5 = *v2;
    *v2 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    return (WTF ***)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  WebCore::SVGResources *v6;
  WTF *v7;
  void *v8;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WebCore::SVGResources::~SVGResources(v6, a2);
          WTF::fastFree(v7, v8);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WTF *WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  int v17;
  WTF *v18;
  void *v19;
  WTF *result;
  void *v21;
  WTF *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_23;
    }
    v10 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v10)
      goto LABEL_21;
    v11 = 0;
    v12 = v10 - 1;
    do
    {
      v13 = v12;
      v14 = *(WTF **)(v8 + 8 * v12);
      if ((unint64_t)v14 + 1 >= 2 && !*((_QWORD *)v14 + 1))
      {
        v28 = v12;
        v27 = v11;
        v26 = v12;
        *(_QWORD *)(v8 + 8 * v12) = 0;
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree(v14, a2);
        else
          --*(_DWORD *)v14;
        v13 = v26;
        *(_QWORD *)(v8 + 8 * v26) = -1;
        v11 = v27 + 1;
        v12 = v28;
      }
      --v12;
    }
    while (v13);
    v8 = *(_QWORD *)a1;
    if (v11)
    {
      v23 = v11;
      *(_DWORD *)(v8 - 16) += v11;
      v24 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      *(_DWORD *)(v24 - 12) = v25 - v23;
      v8 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_3;
    }
    else if (!v8)
    {
      goto LABEL_3;
    }
    v15 = *(_DWORD *)(v8 - 4);
    if (v15 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v15)
    {
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_23;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v17 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
    {
LABEL_24:
      *(_DWORD *)(a1 + 12) = 2 * v17;
      goto LABEL_25;
    }
LABEL_23:
    v17 = v9;
    goto LABEL_24;
  }
LABEL_25:
  v18 = (WTF *)a2[1];
  if (!v18)
  {
    v18 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    *((_QWORD *)v18 + 1) = a2;
    v22 = (WTF *)a2[1];
    a2[1] = v18;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, v21);
        v18 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  *(_DWORD *)v18 += 2;
  v29 = v18;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v29, a3);
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v19);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v18 == 1)
    return (WTF *)WTF::fastFree(v18, v19);
  --*(_DWORD *)v18;
  return result;
}

uint64_t WebCore::RenderTraversal::next<WebCore::RenderMultiColumnSpannerPlaceholder,WebCore::RenderMultiColumnSpannerPlaceholder>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v3 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v3)
      goto LABEL_6;
  }
  if (a1 == a2)
    return 0;
  v4 = *(unsigned int *)(a1 + 47);
  if (!(v4 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32))
    || (v3 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)) + 8)) == 0)
  {
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14 && v14 != a2)
      {
        while (1)
        {
          v16 = *(unsigned int *)(v14 + 47);
          if (v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32))
          {
            v3 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)) + 8);
            if (v3)
              break;
          }
          v17 = *(_QWORD *)(v14 + 32);
          if (!v17)
            return 0;
          result = 0;
          v14 = *(_QWORD *)(v17 + 8);
          if (v14)
            v18 = v14 == a2;
          else
            v18 = 1;
          if (v18)
            return result;
        }
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (*(_BYTE *)(v3 + 46) != 27)
  {
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
      if (!result)
      {
        if (v3 == a2)
          return 0;
        v6 = *(unsigned int *)(v3 + 47);
        if (!(v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32))
          || (result = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8)) == 0)
        {
          v7 = *(_QWORD *)(v3 + 32);
          if (!v7)
            return 0;
          v8 = *(_QWORD *)(v7 + 8);
          if (!v8 || v8 == a2)
            return 0;
          while (1)
          {
            v10 = *(unsigned int *)(v8 + 47);
            if (v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32))
            {
              result = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
              if (result)
                break;
            }
            v11 = *(_QWORD *)(v8 + 32);
            if (!v11)
              return 0;
            result = 0;
            v8 = *(_QWORD *)(v11 + 8);
            if (v8)
              v12 = v8 == a2;
            else
              v12 = 1;
            if (v12)
              return result;
          }
        }
      }
      v3 = result;
      if (*(_BYTE *)(result + 46) == 27)
        return result;
    }
  }
  return v3;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::LegacyRenderSVGShape::shapeDependentStrokeContains(WebCore::FloatPoint const&,WebCore::LegacyRenderSVGShape::PointCoordinateSpace)::$_0,void,WebCore::GraphicsContext &>::call(uint64_t a1, WebCore::SVGRenderSupport *this, uint64_t a3, const WebCore::RenderElement *a4)
{
  return WebCore::SVGRenderSupport::applyStrokeStyleToContext((unsigned int *)this, (WebCore::GraphicsContext *)(*(_QWORD *)(a1 + 8) + 80), *(const WebCore::RenderStyle **)(a1 + 8), a4);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::LegacyRenderSVGShape::shapeDependentStrokeContains(WebCore::FloatPoint const&,WebCore::LegacyRenderSVGShape::PointCoordinateSpace)::$_1,void,WebCore::GraphicsContext &>::call(uint64_t a1, WebCore::SVGRenderSupport *this, uint64_t a3, const WebCore::RenderElement *a4)
{
  return WebCore::SVGRenderSupport::applyStrokeStyleToContext((unsigned int *)this, (WebCore::GraphicsContext *)(*(_QWORD *)(a1 + 8) + 80), *(const WebCore::RenderStyle **)(a1 + 8), a4);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::LegacyRenderSVGShape::calculateStrokeBoundingBox(void)::$_0,void,WebCore::GraphicsContext &>::call(uint64_t a1, WebCore::SVGRenderSupport *this, uint64_t a3, const WebCore::RenderElement *a4)
{
  return WebCore::SVGRenderSupport::applyStrokeStyleToContext((unsigned int *)this, (WebCore::GraphicsContext *)(*(_QWORD *)(a1 + 8) + 80), *(const WebCore::RenderStyle **)(a1 + 8), a4);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::LegacyRenderSVGShape::calculateStrokeBoundingBox(void)::$_1,void,WebCore::GraphicsContext &>::call(uint64_t a1, WebCore::SVGRenderSupport *this, uint64_t a3, const WebCore::RenderElement *a4)
{
  return WebCore::SVGRenderSupport::applyStrokeStyleToContext((unsigned int *)this, (WebCore::GraphicsContext *)(*(_QWORD *)(a1 + 8) + 80), *(const WebCore::RenderStyle **)(a1 + 8), a4);
}

uint64_t *_ZN3WTF7HashSetINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore32LegacyRenderSVGResourceContainerES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;

  v2 = *result;
  if (*result)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = v3 - 1;
      do
      {
        v6 = v2 + 8 * v5;
        if ((unint64_t)(*(_QWORD *)v6 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v6 + 8))
        {
          v18 = result;
          v16 = v4;
          v15 = v2;
          v17 = v5;
          WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket((WTF **)(v2 + 8 * v5), a2);
          v5 = v17;
          v2 = v15;
          result = v18;
          v4 = v16 + 1;
        }
      }
      while ((unint64_t)v5--);
      v8 = *result;
      if (v4)
      {
        v12 = v4;
        *(_DWORD *)(v8 - 16) += v4;
        v13 = *result;
        if (*result)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v12;
        v8 = *result;
      }
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 4);
        v10 = 6 * *(_DWORD *)(v8 - 12);
        if (v9 >= 9 && v10 < v9)
          return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(result);
      }
    }
  }
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v3, 0);
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::SVGResources>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::SVGResources>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderElement const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  WTF **v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF **v18;
  WTF *v19;
  WTF *v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF **v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  WTF **v38;
  WebCore::SVGResources *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  WebCore::SVGResources *v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (WTF **)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != (WTF *)-1)
        {
          v29 = *a1;
          if (*a1)
            v30 = *(_DWORD *)(v29 - 8);
          else
            v30 = 0;
          v31 = ~(*((_QWORD *)v15 + 1) << 32) + *((_QWORD *)v15 + 1);
          v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
          v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
          v34 = v30 & (((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~((_DWORD)v33 << 27)));
          v35 = 1;
          do
          {
            v36 = v34;
            v37 = *(_QWORD *)(v29 + 16 * v34);
            v34 = (v34 + v35++) & v30;
          }
          while (v37);
          v38 = (WTF **)(v29 + 16 * v36);
          v39 = v38[1];
          v38[1] = 0;
          if (v39)
          {
            WebCore::SVGResources::~SVGResources(v39, v10);
            WTF::fastFree(v40, v41);
            v42 = *v38;
            *v38 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 1)
                WTF::fastFree(v42, v10);
              else
                --*(_DWORD *)v42;
            }
          }
          else
          {
            *v38 = 0;
          }
          v43 = *v14;
          *v14 = 0;
          *v38 = v43;
          v44 = v6 + 16 * v11;
          v45 = *(WTF **)(v44 + 8);
          *(_QWORD *)(v44 + 8) = 0;
          v38[1] = v45;
          v46 = *(WebCore::SVGResources **)(v44 + 8);
          *(_QWORD *)(v44 + 8) = 0;
          if (v46)
          {
            WebCore::SVGResources::~SVGResources(v46, v10);
            WTF::fastFree(v47, v48);
          }
          v49 = *v14;
          *v14 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 1)
              WTF::fastFree(v49, v10);
            else
              --*(_DWORD *)v49;
          }
          if (v14 == a3)
            v12 = v38;
        }
      }
      else
      {
        v16 = v14[1];
        v14[1] = 0;
        if (v16)
        {
          v17 = (WTF *)*((_QWORD *)v16 + 3);
          *((_QWORD *)v16 + 3) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
              WTF::fastFree(v17, v10);
            else
              --*(_DWORD *)v17;
          }
          v18 = (WTF **)*((_QWORD *)v16 + 2);
          *((_QWORD *)v16 + 2) = 0;
          if (v18)
          {
            v19 = v18[1];
            v18[1] = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 1)
                WTF::fastFree(v19, v10);
              else
                --*(_DWORD *)v19;
            }
            v20 = *v18;
            *v18 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 1)
                WTF::fastFree(v20, v10);
              else
                --*(_DWORD *)v20;
            }
            WTF::fastFree((WTF *)v18, v10);
          }
          v21 = (WTF **)*((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          if (v21)
          {
            v22 = v21[2];
            v21[2] = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 1)
                WTF::fastFree(v22, v10);
              else
                --*(_DWORD *)v22;
            }
            v23 = v21[1];
            v21[1] = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 1)
                WTF::fastFree(v23, v10);
              else
                --*(_DWORD *)v23;
            }
            v24 = *v21;
            *v21 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 1)
                WTF::fastFree(v24, v10);
              else
                --*(_DWORD *)v24;
            }
            WTF::fastFree((WTF *)v21, v10);
          }
          v25 = *(WTF ***)v16;
          *(_QWORD *)v16 = 0;
          if (v25)
          {
            v26 = v25[2];
            v25[2] = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 1)
                WTF::fastFree(v26, v10);
              else
                --*(_DWORD *)v26;
            }
            v27 = v25[1];
            v25[1] = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 1)
                WTF::fastFree(v27, v10);
              else
                --*(_DWORD *)v27;
            }
            v28 = *v25;
            *v25 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
                WTF::fastFree(v28, v10);
              else
                --*(_DWORD *)v28;
            }
            WTF::fastFree((WTF *)v25, v10);
          }
          WTF::fastFree(v16, v10);
          v15 = *v14;
        }
        *v14 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
            WTF::fastFree(v15, v10);
          else
            --*(_DWORD *)v15;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::RenderObject *WebCore::RenderTreeBuilder::MultiColumn::resolveMovedChild(WebCore::RenderTreeBuilder::MultiColumn *this, WebCore::RenderFragmentedFlow *a2, WebCore::RenderObject *a3)
{
  WebCore::RenderObject *v3;
  WebCore::RenderObject *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  uint64_t v16;

  v3 = a3;
  if (a3 && (*((_BYTE *)a3 + 45) & 4) != 0 && *((_BYTE *)a2 + 46) == 25)
  {
    v4 = a3;
    if ((*((_BYTE *)a3 + 45) & 2) != 0)
      v4 = *(WebCore::RenderObject **)(*((_QWORD *)a3 + 4) + 8);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 11) + 32) + 24) + 56) & 8) != 0)
    {
      v5 = **((_QWORD **)a2 + 42);
      if (!v5)
        goto LABEL_16;
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; v10 = (v12 + i++) & v6)
      {
        v12 = v10;
        v13 = *(_QWORD *)(v5 + 16 * v10);
        if (v13 != -1)
        {
          if (!v13)
            goto LABEL_16;
          if (*(WebCore::RenderObject **)(v13 + 8) == a3)
            break;
        }
      }
      v14 = *(WTF **)(v5 + 16 * v12 + 8);
      if (v14)
      {
        v15 = (*(_DWORD *)v14)++;
        v16 = *((_QWORD *)v14 + 1);
        if (v15)
          *(_DWORD *)v14 = v15;
        else
          WTF::fastFree(v14, a2);
      }
      else
      {
LABEL_16:
        v16 = 0;
      }
      if (v16)
        return (WebCore::RenderObject *)v16;
    }
  }
  return v3;
}

void WebCore::RenderTreeBuilder::FirstLetter::updateStyle(uint64_t **this, WebCore::RenderBlock *a2, WebCore::RenderObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderTable *v6;
  const WebCore::RenderStyle *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Element *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  WebCore::SVGTextLayoutAttributes **v20;
  uint64_t v21;
  WebCore::RenderText *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t LetterRemainingText;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::SVGTextLayoutAttributes **v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t *v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  _QWORD v45[2];
  char v46;
  char v47;

  v3 = *((_QWORD *)a3 + 4);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return;
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
    return;
  v6 = *(WebCore::RenderTable **)(v5 + 8);
  if (!v6)
    return;
  WebCore::styleForFirstLetter((WebCore *)v45, *(const WebCore::RenderElement ***)(v5 + 8));
  if (!v47)
    return;
  if (WebCore::Style::determineChange((WebCore::Style *)(v4 + 80), (const WebCore::RenderStyle *)v45, v9) == 5)
  {
    if (v47)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
      if ((v46 & 0x1F) != 0)
      {
        v11 = bmalloc::api::isoAllocate();
        v12 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v11, 1, v10, v45, 76, 1);
        *(_OWORD *)(v12 + 184) = 0u;
        *(_OWORD *)(v12 + 168) = 0u;
        *(_OWORD *)(v12 + 152) = 0u;
        *(_QWORD *)v12 = off_1E341F9F8;
        *(_DWORD *)(v12 + 200) = -1;
        *(_BYTE *)(v12 + 204) &= 0xFCu;
        *(_BYTE *)(v12 + 208) = 0;
        *(_BYTE *)(v12 + 212) = 0;
        v16 = (_QWORD *)(v12 + 216);
        *(_DWORD *)(v12 + 240) = 0;
      }
      else
      {
        v11 = bmalloc::api::isoAllocate();
        v18 = (_QWORD *)WebCore::RenderLayerModelObject::RenderLayerModelObject(v11, 16, v10, v45, 40, 0);
        *v18 = off_1E3428870;
        v16 = v18 + 19;
      }
      *v16 = 0;
      v16[1] = 0;
      *(_DWORD *)(v11 + 20) |= 0x40000u;
      v44 = (void *)v11;
      WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v11, v13, v14, v15);
      *(_WORD *)(v11 + 69) |= 0x40u;
      while (1)
      {
        v21 = *(unsigned int *)(v4 + 64);
        if (!(v21 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32)))
          break;
        v22 = *(WebCore::RenderText **)((v21 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32)) + 8);
        if (!v22)
          break;
        if ((*((_BYTE *)v22 + 45) & 2) != 0)
          WebCore::RenderText::removeAndDestroyTextBoxes(v22);
        WebCore::RenderTreeBuilder::detach((uint64_t *)&v43, (WebCore::RenderObject *)v4, (uint64_t **)v22, *this, 0, 1, v20);
        v23 = *this;
        v42 = v43;
        v43 = 0;
        WebCore::RenderTreeBuilder::attach((uint64_t)v23, (WebCore::RenderTable *)v11, &v42);
        v24 = v42;
        v42 = 0;
        if (v24)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v42, v24);
        v19 = (void *)v43;
        v43 = 0;
        if (v19)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v43, (uint64_t)v19);
      }
      if ((*(_BYTE *)(v4 + 45) & 8) != 0)
      {
        LetterRemainingText = WebCore::RenderBoxModelObject::firstLetterRemainingText((WebCore::RenderBoxModelObject *)v4, v19);
        if (!LetterRemainingText)
          goto LABEL_32;
        v30 = LetterRemainingText;
        v31 = *(_QWORD *)(v11 + 8);
        if (!v31)
        {
          v31 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v31 = 1;
          *(_QWORD *)(v31 + 8) = v11;
          v37 = *(WTF **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v31;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
            {
              WTF::fastFree(v37, v26);
              v31 = *(_QWORD *)(v11 + 8);
              if (!v31)
                goto LABEL_26;
            }
            else
            {
              --*(_DWORD *)v37;
            }
          }
        }
        ++*(_DWORD *)v31;
LABEL_26:
        v32 = *(WTF **)(v30 + 144);
        *(_QWORD *)(v30 + 144) = v31;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1)
            WTF::fastFree(v32, v26);
          else
            --*(_DWORD *)v32;
        }
        {
          WebCore::firstLetterRemainingTextMap(void)::map = 0;
          *(_QWORD *)&dword_1EE2F9358 = 0;
        }
        WTF::WeakHashMap<WebCore::RenderBoxModelObject const,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBoxModelObject,WebCore::RenderTextFragment&>((uint64_t)&WebCore::firstLetterRemainingTextMap(void)::map, (uint64_t *)v11, v30);
LABEL_32:
        v33 = *(unsigned int *)(v4 + 47);
        if (v33 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)
          && (v34 = *(_QWORD *)((v33 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8)) != 0)
        {
          v40 = *(_QWORD *)((v33 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
          v35 = *(WTF **)(v34 + 8);
          if (!v35)
          {
            v35 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v35 = 1;
            *((_QWORD *)v35 + 1) = v40;
            v39 = *(WTF **)(v40 + 8);
            *(_QWORD *)(v40 + 8) = v35;
            if (v39)
            {
              if (*(_DWORD *)v39 == 1)
              {
                WTF::fastFree(v39, v38);
                v35 = *(WTF **)(v40 + 8);
                if (!v35)
                  goto LABEL_35;
              }
              else
              {
                --*(_DWORD *)v39;
              }
            }
          }
          ++*(_DWORD *)v35;
        }
        else
        {
          v35 = 0;
        }
LABEL_35:
        WebCore::RenderTreeBuilder::destroy((uint64_t)*this, v4, 1, v27, v28, v29);
        v36 = *this;
        v44 = 0;
        v41 = (void *)v11;
        WebCore::RenderTreeBuilder::attach((uint64_t)v36, v6, (unint64_t *)&v41);
        v17 = v41;
        v41 = 0;
        if (v17)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v41, (uint64_t)v17);
        if (v35)
        {
          if (*(_DWORD *)v35 == 1)
          {
            WTF::fastFree(v35, v17);
            v17 = v44;
            if (v44)
              WebCore::RenderObjectDeleter::operator()((uint64_t)&v44, (uint64_t)v44);
          }
          else
          {
            --*(_DWORD *)v35;
          }
        }
        goto LABEL_40;
      }
LABEL_52:
      __break(0xC471u);
      JUMPOUT(0x1965724E8);
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (!v47)
    goto LABEL_51;
  WebCore::RenderElement::setStyle(v4, v45, 0);
LABEL_40:
  if (v47)
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v45, v17);
}

void WebCore::RenderTreeBuilder::FirstLetter::createRenderers(uint64_t this, WebCore::RenderText *a2)
{
  uint64_t v4;
  const WebCore::RenderElement **v5;
  const WebCore::RenderElement **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::Element *v12;
  _QWORD *v13;
  _QWORD *v14;
  WebCore::RenderText *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int i;
  UChar32 v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::SVGTextLayoutAttributes **v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  UChar32 v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  char v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WebCore::RenderText *v61;
  WebCore::RenderInline *v62;
  WTF *v63;
  uint64_t v64;
  WebCore::RenderText *v65;
  uint64_t *v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  WTF *v82;
  void *v83;
  WTF *v84;
  void *v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  WTF *v92;
  void *v93;
  WTF *v94;
  WebCore::RenderInline **v95;
  WebCore::RenderTable *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  WebCore::RenderText *v100;
  WebCore::RenderText *v101;
  WTF::StringImpl *v102;
  uint64_t *v103;
  WTF *v104[2];
  char v105;
  char v106;
  uint64_t v107[2];

  v4 = *((_QWORD *)a2 + 4);
  if (v4)
    v5 = *(const WebCore::RenderElement ***)(v4 + 8);
  else
    v5 = 0;
  v6 = v5;
  if ((*((_WORD *)a2 + 59) & 0x1000) != 0)
  {
    {
      WebCore::inlineWrapperForDisplayContentsMap(void)::map = 0;
    }
    WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::inlineWrapperForDisplayContentsMap(void)::map, (uint64_t)a2, v104);
    v84 = v104[0];
    if (v104[0])
    {
      v87 = *((_QWORD *)v104[0] + 1);
      v104[0] = 0;
      if (*(_DWORD *)v84 == 1)
        WTF::fastFree(v84, v83);
      else
        --*(_DWORD *)v84;
      v6 = v5;
      if (v87)
      {
        v88 = *(_QWORD *)(v87 + 32);
        if (!v88)
          return;
        v6 = *(const WebCore::RenderElement ***)(v88 + 8);
      }
    }
    else
    {
      v6 = v5;
    }
  }
  if (v6)
  {
    WebCore::styleForFirstLetter((WebCore *)v104, v6);
    if (v106)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
      if ((v105 & 0x1F) != 0)
      {
        v8 = bmalloc::api::isoAllocate();
        v9 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v8, 1, v7, v104, 76, 1);
        *(_OWORD *)(v9 + 184) = 0u;
        *(_OWORD *)(v9 + 168) = 0u;
        *(_OWORD *)(v9 + 152) = 0u;
        *(_QWORD *)v9 = off_1E341F9F8;
        *(_DWORD *)(v9 + 200) = -1;
        *(_BYTE *)(v9 + 204) &= 0xFCu;
        *(_BYTE *)(v9 + 208) = 0;
        *(_BYTE *)(v9 + 212) = 0;
        v13 = (_QWORD *)(v9 + 216);
        *(_DWORD *)(v9 + 240) = 0;
      }
      else
      {
        v8 = bmalloc::api::isoAllocate();
        v14 = (_QWORD *)WebCore::RenderLayerModelObject::RenderLayerModelObject(v8, 16, v7, v104, 40, 0);
        *v14 = off_1E3428870;
        v13 = v14 + 19;
      }
      *v13 = 0;
      v13[1] = 0;
      *(_DWORD *)(v8 + 20) |= 0x40000u;
      v103 = (uint64_t *)v8;
      WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v8, v10, v11, v12);
      *(_WORD *)(v8 + 69) |= 0x40u;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::RenderText *))(*(_QWORD *)a2 + 664))(&v102, a2);
      v16 = v102;
      if (!v102)
      {
LABEL_122:
        v79 = v103;
        if (v103)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v103, (uint64_t)v103);
        if (v106)
          WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v104, v79);
        return;
      }
      if (!*((_DWORD *)v102 + 1))
      {
LABEL_119:
        v78 = v102;
        v102 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v15);
          else
            *(_DWORD *)v78 -= 2;
        }
        goto LABEL_122;
      }
      v97 = this;
      v17 = 0;
LABEL_12:
      for (i = *((_DWORD *)v16 + 1); v17 < i; i = 0)
      {
        v19 = WTF::String::characterStartingAt((WTF::String *)&v102);
        if ((unsigned __int16)v19 > 0xFFu)
        {
          v20 = MEMORY[0x19AEA858C]() == 9;
        }
        else
        {
          v20 = ((unsigned __int16)v19 < 0x21u) & (0x100003600uLL >> v19);
          if ((unsigned __int16)v19 == 11)
            v20 = 1;
        }
        if (v19 != 160 && (v20 & 1) == 0 && ((1 << u_charType(v19)) & 0x30B00000) == 0)
        {
          v16 = v102;
          break;
        }
        v21 = this & 0xFFFFFF0000000000;
        if (v102)
        {
          v22 = *((unsigned int *)v102 + 1);
          v23 = ((unint64_t)*((unsigned int *)v102 + 4) >> 2) & 1;
          this = v21 | (v23 << 32) | v22;
          if (v22 > v17 && v17)
          {
            v24 = v22 - v17;
            v25 = v22 - v17;
            if ((_DWORD)v23)
            {
              if (v25 < v24)
                goto LABEL_156;
            }
            else if (v25 < v24)
            {
              goto LABEL_156;
            }
          }
        }
        else
        {
          this = v21 | 0x100000000;
        }
        v17 += WTF::numCodeUnitsInGraphemeClusters();
        v16 = v102;
        if (v102)
          goto LABEL_12;
      }
      v96 = (WebCore::RenderTable *)v5;
      if (!v16)
        goto LABEL_37;
      v26 = *((unsigned int *)v16 + 1);
      if (v26 <= v17 || !v17)
        goto LABEL_37;
      v80 = v26 - v17;
      v81 = v26 - v17;
      if (((*((_DWORD *)v16 + 4) >> 2) & 1) != 0)
      {
        if (v81 >= v80)
          goto LABEL_37;
      }
      else if (v81 >= v80)
      {
LABEL_37:
        v30 = WTF::numCodeUnitsInGraphemeClusters() + v17;
        v31 = v30;
        while (1)
        {
          v32 = v102;
          if (v102)
            v32 = *((_DWORD *)v102 + 1);
          if (v31 >= v32)
            break;
          v33 = WTF::String::characterStartingAt((WTF::String *)&v102);
          if ((unsigned __int16)v33 > 0xFFu)
          {
            v34 = MEMORY[0x19AEA858C]() == 9;
          }
          else
          {
            v34 = ((unsigned __int16)v33 < 0x21u) & (0x100003600uLL >> v33);
            if ((unsigned __int16)v33 == 11)
              v34 = 1;
          }
          if (v33 != 160 && (v34 & 1) == 0 && ((1 << u_charType(v33)) & 0x30B00000) == 0)
            break;
          v35 = this & 0xFFFFFF0000000000;
          if (v102)
          {
            v36 = *((unsigned int *)v102 + 1);
            v37 = ((unint64_t)*((unsigned int *)v102 + 4) >> 2) & 1;
            this = v35 | (v37 << 32) | v36;
            if (v36 > v31 && v31)
            {
              v38 = v36 - v31;
              v39 = v36 - v31;
              if ((_DWORD)v37)
              {
                if (v39 < v38)
                  goto LABEL_156;
              }
              else if (v39 < v38)
              {
                goto LABEL_156;
              }
            }
          }
          else
          {
            this = v35 | 0x100000000;
          }
          v31 += WTF::numCodeUnitsInGraphemeClusters();
          if (((1 << u_charType(v33)) & 0x30B00000) != 0)
            v30 = v31;
        }
        if ((*((_BYTE *)a2 + 45) & 1) != 0)
        {
          v40 = 0;
          v41 = (uint64_t *)v97;
          goto LABEL_63;
        }
        v40 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
        v41 = (uint64_t *)v97;
        if (!v40 || (*(_WORD *)(v40 + 28) & 2) != 0)
        {
LABEL_63:
          v42 = *(unsigned int *)((char *)a2 + 47);
          if (!(v42 | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32))
            || (v43 = *(_QWORD *)((v42 | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32)) + 8)) == 0)
          {
            v44 = 0;
            goto LABEL_66;
          }
          v44 = *(WTF **)(v43 + 8);
          if (!v44)
          {
            v44 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v44 = 1;
            *((_QWORD *)v44 + 1) = v43;
            v94 = *(WTF **)(v43 + 8);
            *(_QWORD *)(v43 + 8) = v44;
            if (v94)
            {
              if (*(_DWORD *)v94 == 1)
              {
                WTF::fastFree(v94, v93);
                v44 = *(WTF **)(v43 + 8);
                if (!v44)
                  goto LABEL_183;
              }
              else
              {
                --*(_DWORD *)v94;
              }
            }
          }
          ++*(_DWORD *)v44;
LABEL_183:
          v41 = (uint64_t *)v97;
LABEL_66:
          if ((*((_WORD *)a2 + 59) & 0x1000) == 0)
          {
            v95 = 0;
            v45 = 1;
            goto LABEL_68;
          }
          {
            WebCore::inlineWrapperForDisplayContentsMap(void)::map = 0;
          }
          WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::inlineWrapperForDisplayContentsMap(void)::map, (uint64_t)a2, v107);
          v86 = (WTF *)v107[0];
          if (!v107[0])
            goto LABEL_161;
          v89 = *(_QWORD *)(v107[0] + 8);
          v107[0] = 0;
          if (*(_DWORD *)v86 == 1)
          {
            WTF::fastFree(v86, v85);
            if (!v89)
              goto LABEL_161;
          }
          else
          {
            --*(_DWORD *)v86;
            if (!v89)
              goto LABEL_161;
          }
          v95 = *(WebCore::RenderInline ***)(v89 + 8);
          if (v95)
            goto LABEL_171;
          v91 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v91 = 1;
          *(_QWORD *)(v91 + 8) = v89;
          v92 = *(WTF **)(v89 + 8);
          v95 = (WebCore::RenderInline **)v91;
          *(_QWORD *)(v89 + 8) = v91;
          if (!v92)
            goto LABEL_171;
          if (*(_DWORD *)v92 != 1)
          {
            --*(_DWORD *)v92;
LABEL_171:
            v45 = 0;
            ++*(_DWORD *)v95;
            goto LABEL_162;
          }
          WTF::fastFree(v92, v90);
          v95 = *(WebCore::RenderInline ***)(v89 + 8);
          if (v95)
            goto LABEL_171;
LABEL_161:
          v95 = 0;
          v45 = 1;
LABEL_162:
          v41 = (uint64_t *)v97;
LABEL_68:
          WebCore::RenderTreeBuilder::destroy(*v41, (uint64_t)a2, 1, v27, v28, v29);
          if (v40)
          {
            v46 = (int)v102;
            if (v102)
              v46 = *((_DWORD *)v102 + 1);
            v47 = v46 - v30;
            v48 = bmalloc::api::isoAllocate();
            v49 = v102;
            if (v102)
            {
              if (v30 || *((_DWORD *)v102 + 1) > v47)
              {
                WTF::StringImpl::substring(v102);
              }
              else
              {
                *(_DWORD *)v102 += 2;
                v107[0] = (uint64_t)v49;
              }
            }
            else
            {
              v107[0] = 0;
            }
            WebCore::RenderText::RenderText(v48, 46, v40, v107);
            v51 = (WTF::StringImpl *)v107[0];
            v107[0] = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v50);
              else
                *(_DWORD *)v51 -= 2;
            }
            *(_QWORD *)v48 = off_1E3436F38;
            *(_DWORD *)(v48 + 120) = v30;
            *(_DWORD *)(v48 + 124) = v47;
            *(_QWORD *)(v48 + 136) = 0;
            *(_QWORD *)(v48 + 144) = 0;
            *(_QWORD *)(v48 + 128) = 0;
            v101 = (WebCore::RenderText *)v48;
            *(_QWORD *)(v40 + 64) = v48 | ((unint64_t)*(unsigned __int16 *)(v40 + 70) << 48);
            v52 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
            v53 = (uint64_t *)v97;
            if (v52)
              WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)v40);
          }
          else
          {
            v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v41 + 8) + 24) + 8) + 40) + 8);
            v55 = (int)v102;
            if (v102)
              v55 = *((_DWORD *)v102 + 1);
            v56 = v55 - v30;
            v57 = bmalloc::api::isoAllocate();
            v58 = v102;
            if (v102)
            {
              if (v30 || *((_DWORD *)v102 + 1) > v56)
              {
                WTF::StringImpl::substring(v102);
              }
              else
              {
                *(_DWORD *)v102 += 2;
                v107[0] = (uint64_t)v58;
              }
            }
            else
            {
              v107[0] = 0;
            }
            WebCore::RenderText::RenderText(v57, 46, v54, v107);
            v60 = (WTF::StringImpl *)v107[0];
            v107[0] = 0;
            v53 = (uint64_t *)v97;
            if (v60)
            {
              if (*(_DWORD *)v60 == 2)
                WTF::StringImpl::destroy(v60, v59);
              else
                *(_DWORD *)v60 -= 2;
            }
            *(_QWORD *)v57 = off_1E3436F38;
            *(_DWORD *)(v57 + 120) = v30;
            *(_DWORD *)(v57 + 124) = v56;
            *(_QWORD *)(v57 + 136) = 0;
            *(_QWORD *)(v57 + 144) = 0;
            *(_QWORD *)(v57 + 128) = 0;
            v101 = (WebCore::RenderText *)v57;
          }
          v61 = v101;
          if ((v45 & 1) != 0)
          {
            v62 = 0;
            v63 = (WTF *)v95;
          }
          else
          {
            v63 = (WTF *)v95;
            v62 = v95[1];
          }
          WebCore::RenderText::setInlineWrapperForDisplayContents(v101, v62);
          v64 = *v53;
          v100 = v101;
          v101 = 0;
          WebCore::RenderTreeBuilder::attach(v64, v96, (unint64_t *)&v100);
          v65 = v100;
          v100 = 0;
          if (v65)
            WebCore::RenderObjectDeleter::operator()((uint64_t)&v100, (uint64_t)v65);
          v66 = v103;
          v67 = v103[1];
          if (!v67)
          {
            v67 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v67 = 1;
            *(_QWORD *)(v67 + 8) = v66;
            v82 = (WTF *)v66[1];
            v66[1] = v67;
            if (v82)
            {
              if (*(_DWORD *)v82 == 1)
              {
                WTF::fastFree(v82, v65);
                v67 = v66[1];
                if (!v67)
                {
LABEL_96:
                  v68 = (WTF *)*((_QWORD *)v61 + 18);
                  *((_QWORD *)v61 + 18) = v67;
                  if (v68)
                  {
                    if (*(_DWORD *)v68 == 1)
                      WTF::fastFree(v68, v65);
                    else
                      --*(_DWORD *)v68;
                  }
                  {
                    WebCore::firstLetterRemainingTextMap(void)::map = 0;
                    *(_QWORD *)&dword_1EE2F9358 = 0;
                  }
                  WTF::WeakHashMap<WebCore::RenderBoxModelObject const,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBoxModelObject,WebCore::RenderTextFragment&>((uint64_t)&WebCore::firstLetterRemainingTextMap(void)::map, v66, (uint64_t)v61);
                  v69 = *v53;
                  v103 = 0;
                  v99 = v66;
                  WebCore::RenderTreeBuilder::attach(v69, (WebCore::RenderTable *)v6, (unint64_t *)&v99);
                  v70 = (uint64_t)v99;
                  v99 = 0;
                  if (v70)
                    WebCore::RenderObjectDeleter::operator()((uint64_t)&v99, v70);
                  v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v53 + 8) + 24) + 8) + 40)
                                  + 8);
                  v72 = bmalloc::api::isoAllocate();
                  v73 = v102;
                  if (v102)
                  {
                    if (*((_DWORD *)v102 + 1) > v30)
                    {
                      WTF::StringImpl::substring(v102);
                    }
                    else
                    {
                      *(_DWORD *)v102 += 2;
                      v107[0] = (uint64_t)v73;
                    }
                  }
                  else
                  {
                    v107[0] = 0;
                  }
                  WebCore::RenderText::RenderText(v72, 46, v71, v107);
                  v75 = (WTF::StringImpl *)v107[0];
                  v107[0] = 0;
                  if (v75)
                  {
                    if (*(_DWORD *)v75 == 2)
                      WTF::StringImpl::destroy(v75, v74);
                    else
                      *(_DWORD *)v75 -= 2;
                  }
                  *(_QWORD *)v72 = off_1E3436F38;
                  *(_DWORD *)(v72 + 120) = 0;
                  *(_DWORD *)(v72 + 124) = v30;
                  *(_QWORD *)(v72 + 136) = 0;
                  *(_QWORD *)(v72 + 144) = 0;
                  *(_QWORD *)(v72 + 128) = 0;
                  v76 = *v53;
                  v98 = v72;
                  WebCore::RenderTreeBuilder::attach(v76, (WebCore::RenderTable *)v66, &v98);
                  v77 = v98;
                  v98 = 0;
                  if (v77)
                    WebCore::RenderObjectDeleter::operator()((uint64_t)&v98, v77);
                  v15 = v101;
                  if (v101)
                    WebCore::RenderObjectDeleter::operator()((uint64_t)&v101, (uint64_t)v101);
                  if ((v45 & 1) == 0)
                  {
                    if (*(_DWORD *)v63 == 1)
                    {
                      WTF::fastFree(v63, v15);
                      if (!v44)
                        goto LABEL_119;
                      goto LABEL_117;
                    }
                    --*(_DWORD *)v63;
                  }
                  if (!v44)
                    goto LABEL_119;
LABEL_117:
                  if (*(_DWORD *)v44 == 1)
                    WTF::fastFree(v44, v15);
                  else
                    --*(_DWORD *)v44;
                  goto LABEL_119;
                }
              }
              else
              {
                --*(_DWORD *)v82;
              }
            }
          }
          ++*(_DWORD *)v67;
          goto LABEL_96;
        }
LABEL_157:
        __break(0xC471u);
        JUMPOUT(0x196572EC8);
      }
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
  }
}

void WebCore::styleForFirstLetter(WebCore *this, const WebCore::RenderElement **a2)
{
  WebCore::RenderObject *v2;
  const WebCore::RenderElement *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::RenderStyle *v18;
  void *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  float v28;
  int v29;
  void *v30;
  WTF *v31;
  float v32;
  float v33;
  void *v34;
  uint64_t v35;
  WebCore::FontCascadeFonts *v36;
  int v37;
  WebCore *v38;
  uint64_t v39;
  unint64_t StatusReg;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  WebCore *v44;
  int v45;
  int v46;
  void *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  void *v55;
  uint64_t v56;
  WebCore::FontCascadeFonts *v57;
  int v58;
  WebCore *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  WebCore *v64;
  WTF::StringImpl *v65;
  int v66;
  unsigned int *v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  WTF::StringImpl **v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unsigned int *v74;
  uint64_t v75;
  unint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  void *v85;
  uint64_t v86;
  WTF::StringImpl **v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  WebCore::StyleRareInheritedData *v92;
  WTF *v93;
  void *v94;
  WebCore::FontCascadeFonts *v95;
  WebCore *v96;
  WebCore *v97[19];
  float v98;
  WTF *v99;
  float v100;
  __int16 v101;
  _BYTE v102[156];
  float v103;
  WTF *v104;
  int v105;
  __int16 v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v2 = (WebCore::RenderObject *)a2;
  v4 = (const WebCore::RenderElement *)a2;
  if ((*((_BYTE *)a2 + 45) & 1) != 0)
  {
    v4 = a2[4];
    if (v4)
    {
      v5 = *((_QWORD *)v4 + 1);
      if (v5)
      {
        while ((*(_BYTE *)(v5 + 45) & 1) != 0)
        {
          v6 = *(_QWORD *)(v5 + 32);
          if (!v6)
            goto LABEL_121;
          v4 = 0;
          v5 = *(_QWORD *)(v6 + 8);
          if (!v5)
            goto LABEL_9;
        }
        v4 = (const WebCore::RenderElement *)v5;
      }
      else
      {
LABEL_121:
        v4 = 0;
      }
    }
  }
LABEL_9:
  v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v7 += 2;
  v8 = (uint64_t *)*((_QWORD *)v4 + 16);
  if (v8 && (v81 = *((unsigned int *)v8 + 3), (_DWORD)v81))
  {
    v82 = *v8;
    v83 = 8 * v81;
    do
    {
      v9 = *(_QWORD **)v82;
      if ((*(_QWORD *)(*(_QWORD *)v82 + 16) & 0xF80000000000) == 0x100000000000
        && *(WTF::StringImpl **)(*(_QWORD *)(v9[1] + 40) + 592) == v7)
      {
        break;
      }
      v9 = 0;
      v82 += 8;
      v83 -= 8;
    }
    while (v83);
  }
  else
  {
    v9 = 0;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      if (v9)
        goto LABEL_17;
      goto LABEL_95;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (v9)
  {
LABEL_17:
    v107 = 0;
    v10 = v9[1];
    ++*(_DWORD *)v10;
    v11 = v9[2];
    v12 = (_DWORD *)v9[3];
    v108 = v10;
    v109 = v11;
    ++*v12;
    *(_QWORD *)&v110 = v12;
    v13 = (_DWORD *)v9[4];
    ++*v13;
    v14 = v9[5];
    *((_QWORD *)&v110 + 1) = v13;
    v111 = v14;
    *(_QWORD *)&v112 = 0;
    v15 = (_DWORD *)v9[7];
    ++*v15;
    *((_QWORD *)&v112 + 1) = v15;
    v16 = *(_QWORD *)(v10 + 40);
    if (*(int *)(v16 + 52) >= 1 && (v109 & 0xE000000) == 0)
    {
      v17 = 0x4000000;
      if ((v111 & 0x4000000) == 0)
        v17 = 0x2000000;
      v109 = v17 | v109 & 0xFFFFFFFFF1FFFFFFLL;
    }
    if ((*((_BYTE *)v2 + 52) & 7) != 1)
    {
      v2 = WebCore::RenderObject::containingBlock(v2);
      v16 = *(_QWORD *)(v10 + 40);
    }
    if (*(int *)(v16 + 56) < 1)
    {
LABEL_93:
      v75 = v108;
      v76 = v109 & 0xFFFF07FFFFC7FC00;
      v77 = (v109 & 0xE000000) != 0;
      *(_DWORD *)this = 0;
      v78 = v76 | (32 * v77) | v77 | 0x100000000000;
      v108 = 0;
      v109 = v78;
      *((_QWORD *)this + 1) = v75;
      *((_QWORD *)this + 2) = v78;
      v79 = v110;
      v110 = 0u;
      *(_OWORD *)((char *)this + 24) = v79;
      *((_QWORD *)this + 5) = v111;
      v80 = v112;
      v112 = 0u;
      *((_OWORD *)this + 3) = v80;
      *((_BYTE *)this + 64) = 1;
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v107, a2);
      return;
    }
    WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)&v107, a2);
    v18 = (WebCore::RenderObject *)((char *)v2 + 80);
    WebCore::RenderStyle::metricsOfPrimaryFont(v18, v19);
    v21 = v110;
    v22 = *(_DWORD *)(v110 + 232);
    if ((v22 & 0x7F00) != 0x4000)
    {
      if (*(_DWORD *)v110 != 1)
      {
        v90 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v90, v21);
        v92 = (WebCore::StyleRareInheritedData *)v110;
        *(_QWORD *)&v110 = v91;
        if (v92)
        {
          if (*(_DWORD *)v92 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v92, v20);
            WTF::fastFree(v93, v94);
            v91 = v110;
          }
          else
          {
            --*(_DWORD *)v92;
          }
        }
        v22 = *(_DWORD *)(v91 + 232);
        v21 = v91;
      }
      *(_DWORD *)(v21 + 232) = v22 & 0xFFFF80FF | 0x4000;
    }
    v23 = (int)WebCore::RenderStyle::computedLineHeight(v18, v20);
    v24 = *((_QWORD *)&v110 + 1);
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v102, (const WebCore::FontDescription *)(*((_QWORD *)&v110 + 1) + 48));
    v25 = *(WTF **)(v24 + 216);
    ++*(_DWORD *)v25;
    v104 = v25;
    v105 = *(_DWORD *)(v24 + 224);
    v106 = *(_WORD *)(v24 + 228);
    v27 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)&v107, v26);
    v28 = *((float *)v27 + 2) / *(float *)(*((_QWORD *)&v110 + 1) + 204);
    v29 = *(_DWORD *)(*(_QWORD *)(v108 + 40) + 56) - 1;
    v31 = WebCore::RenderStyle::metricsOfPrimaryFont(v18, v30);
    v32 = (float)(*((_DWORD *)v31 + 15) + v29 * v23) / v28;
    if (v32 >= 3.4028e38)
    {
      v105 = 2139095039;
      v32 = 3.4028e38;
    }
    else
    {
      if (v32 <= -3.4028e38)
        v33 = -3.4028e38;
      else
        v33 = (float)(*((_DWORD *)v31 + 15) + v29 * v23) / v28;
      v105 = LODWORD(v33);
      if (v32 <= -3.4028e38)
        v32 = -3.4028e38;
    }
    v103 = v32;
    WebCore::RenderStyle::setFontDescription((uint64_t)&v107, (uint64_t)v102);
    v35 = *((_QWORD *)&v110 + 1);
    v36 = *(WebCore::FontCascadeFonts **)(*((_QWORD *)&v110 + 1) + 248);
    if (v36)
    {
      v37 = (*(_DWORD *)v36)++;
      v38 = (WebCore *)*((_QWORD *)v36 + 14);
      if (v37)
      {
        *(_DWORD *)v36 = v37;
        if (!v38)
          goto LABEL_38;
        goto LABEL_37;
      }
      WebCore::FontCascadeFonts::~FontCascadeFonts(v36, v34);
      v36 = (WebCore::FontCascadeFonts *)WTF::fastFree(v84, v85);
      if (v38)
LABEL_37:
        ++*((_DWORD *)v38 + 2);
    }
    else
    {
      v38 = 0;
    }
LABEL_38:
    v39 = v35 + 32;
    v97[0] = v38;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v41 = *(_QWORD *)(StatusReg + 736);
    if (!v41 || (v36 = *(WebCore::FontCascadeFonts **)(v41 + 96)) == 0)
      v36 = (WebCore::FontCascadeFonts *)WebCore::threadGlobalDataSlow(v36);
    v42 = *((_QWORD *)v36 + 10);
    if (!v42)
    {
      v95 = v36;
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v36);
      v42 = *((_QWORD *)v95 + 10);
    }
    WebCore::FontCache::updateFontCascade(v42, v39, v97);
    v44 = v97[0];
    v97[0] = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v44 + 8))(v44);
      else
        --*((_DWORD *)v44 + 2);
    }
    v45 = *(_DWORD *)(*(_QWORD *)(v108 + 40) + 56) - 1;
    v46 = *((_DWORD *)WebCore::RenderStyle::metricsOfPrimaryFont(v18, v43) + 15) + v45 * v23;
    if (*((_DWORD *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)&v107, v47) + 15) > v46)
    {
      do
      {
        v49 = *((_QWORD *)&v110 + 1);
        WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v97, (const WebCore::FontDescription *)(*((_QWORD *)&v110 + 1) + 48));
        v50 = *(WTF **)(v49 + 216);
        ++*(_DWORD *)v50;
        v101 = *(_WORD *)(v49 + 228);
        v100 = *(float *)(v49 + 224);
        if ((float)(v100 + -1.0) > -3.4028e38)
          v51 = v100 + -1.0;
        else
          v51 = -3.4028e38;
        v99 = v50;
        if ((float)(v100 + -1.0) < 3.4028e38)
          v52 = v51;
        else
          v52 = 3.4028e38;
        v100 = v52;
        if ((float)(v98 + -1.0) > -3.4028e38)
          v53 = v98 + -1.0;
        else
          v53 = -3.4028e38;
        if ((float)(v98 + -1.0) < 3.4028e38)
          v54 = v53;
        else
          v54 = 3.4028e38;
        v98 = v54;
        WebCore::RenderStyle::setFontDescription((uint64_t)&v107, (uint64_t)v97);
        v56 = *((_QWORD *)&v110 + 1);
        v57 = *(WebCore::FontCascadeFonts **)(*((_QWORD *)&v110 + 1) + 248);
        if (v57)
        {
          v58 = (*(_DWORD *)v57)++;
          v59 = (WebCore *)*((_QWORD *)v57 + 14);
          if (v58)
          {
            *(_DWORD *)v57 = v58;
            if (!v59)
              goto LABEL_63;
LABEL_62:
            ++*((_DWORD *)v59 + 2);
            goto LABEL_63;
          }
          WebCore::FontCascadeFonts::~FontCascadeFonts(v57, v55);
          v57 = (WebCore::FontCascadeFonts *)WTF::fastFree(v68, v69);
          if (v59)
            goto LABEL_62;
        }
        else
        {
          v59 = 0;
        }
LABEL_63:
        v96 = v59;
        v60 = *(_QWORD *)(StatusReg + 736);
        if (!v60 || (v61 = *(_QWORD *)(v60 + 96)) == 0)
          v61 = WebCore::threadGlobalDataSlow(v57);
        v62 = *(_QWORD *)(v61 + 80);
        if (!v62)
        {
          WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v61);
          v62 = *(_QWORD *)(v61 + 80);
        }
        WebCore::FontCache::updateFontCascade(v62, v56 + 32, &v96);
        v64 = v96;
        v96 = 0;
        if (v64)
        {
          if (*((_DWORD *)v64 + 2) == 1)
            (*(void (**)(WebCore *))(*(_QWORD *)v64 + 8))(v64);
          else
            --*((_DWORD *)v64 + 2);
        }
        v66 = *((_DWORD *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)&v107, v63) + 15);
        v67 = (unsigned int *)v99;
        v99 = 0;
        if (v67)
        {
          if (*v67 == 1)
          {
            v70 = v67[1];
            if ((_DWORD)v70)
            {
              v71 = (WTF::StringImpl **)(v67 + 2);
              v72 = 8 * v70;
              do
              {
                v73 = *v71;
                *v71 = 0;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 2)
                    WTF::StringImpl::destroy(v73, v65);
                  else
                    *(_DWORD *)v73 -= 2;
                }
                ++v71;
                v72 -= 8;
              }
              while (v72);
            }
            WTF::fastFree((WTF *)v67, v65);
          }
          else
          {
            --*v67;
          }
        }
        WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v97, v65);
      }
      while (v66 > v46);
    }
    v74 = (unsigned int *)v104;
    v104 = 0;
    if (v74)
    {
      if (*v74 == 1)
      {
        v86 = v74[1];
        if ((_DWORD)v86)
        {
          v87 = (WTF::StringImpl **)(v74 + 2);
          v88 = 8 * v86;
          do
          {
            v89 = *v87;
            *v87 = 0;
            if (v89)
            {
              if (*(_DWORD *)v89 == 2)
                WTF::StringImpl::destroy(v89, v48);
              else
                *(_DWORD *)v89 -= 2;
            }
            ++v87;
            v88 -= 8;
          }
          while (v88);
        }
        WTF::fastFree((WTF *)v74, v48);
      }
      else
      {
        --*v74;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v102, v48);
    goto LABEL_93;
  }
LABEL_95:
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 64) = 0;
}

WebCore::RenderBlock *WebCore::RenderTreeBuilder::FormControls::findOrCreateParentForChild(WebCore::RenderTreeBuilder::FormControls *this, WebCore::RenderButton *a2)
{
  uint64_t v4;
  WebCore::RenderBlock *v5;
  uint64_t *v6;
  WebCore::RenderElement *v7;
  WebCore::RenderElement *v9;
  WebCore::RenderElement *v10;

  v4 = *((_QWORD *)a2 + 52);
  if (!v4 || (v5 = *(WebCore::RenderBlock **)(v4 + 8)) == 0)
  {
    WebCore::RenderBlock::createAnonymousBlockWithStyleAndDisplay(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8), (_QWORD *)a2 + 10, (const WTF::StringImpl *)(*((_DWORD *)a2 + 24) & 0x1F), &v10);
    v5 = v10;
    v6 = *(uint64_t **)(*(_QWORD *)this + 72);
    v9 = v10;
    v10 = 0;
    WebCore::RenderTreeBuilder::Block::attach(v6, a2, (const WTF::StringImpl *)&v9, 0);
    if (v9)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v9, (uint64_t)v9);
    WebCore::RenderButton::setInnerRenderer(a2, v5);
    v7 = v10;
    v10 = 0;
    if (v7)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v10, (uint64_t)v7);
  }
  return v5;
}

void WebCore::RenderTreeBuilder::FormControls::attach(WebCore::RenderTreeBuilder::FormControls *a1, WebCore::RenderMenuList *a2, WebCore::RenderObject **a3, WebCore::RenderObject *a4)
{
  WebCore::RenderObject *v7;
  uint64_t *v8;
  WebCore::RenderBlock *ParentForChild;
  uint64_t v10;
  uint64_t v11;

  v7 = *a3;
  v8 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  ParentForChild = WebCore::RenderTreeBuilder::FormControls::findOrCreateParentForChild(a1, a2);
  v10 = (uint64_t)*a3;
  *a3 = 0;
  v11 = v10;
  WebCore::RenderTreeBuilder::Block::attach(v8, ParentForChild, (const WTF::StringImpl *)&v11, a4);
  if (v11)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v11, v11);
  WebCore::RenderMenuList::didAttachChild(a2, v7, a4);
}

WebCore::RenderBlock *WebCore::RenderTreeBuilder::FormControls::findOrCreateParentForChild(WebCore::RenderTreeBuilder::FormControls *this, WebCore::RenderMenuList *a2)
{
  uint64_t v4;
  WebCore::RenderBlock *v5;
  uint64_t *v6;
  WebCore::RenderElement *v7;
  WebCore::RenderElement *v9;
  WebCore::RenderElement *v10;

  v4 = *((_QWORD *)a2 + 53);
  if (!v4 || (v5 = *(WebCore::RenderBlock **)(v4 + 8)) == 0)
  {
    WebCore::RenderBlock::createAnonymousBlockWithStyleAndDisplay(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8), (_QWORD *)a2 + 10, (const WTF::StringImpl *)1, &v10);
    v5 = v10;
    v6 = *(uint64_t **)(*(_QWORD *)this + 72);
    v9 = v10;
    v10 = 0;
    WebCore::RenderTreeBuilder::Block::attach(v6, a2, (const WTF::StringImpl *)&v9, 0);
    if (v9)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v9, (uint64_t)v9);
    WebCore::RenderMenuList::setInnerRenderer(a2, v5);
    v7 = v10;
    v10 = 0;
    if (v7)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v10, (uint64_t)v7);
  }
  return v5;
}

uint64_t WebCore::RenderTreeBuilder::FormControls::detach(uint64_t a1, WebCore::RenderElement *a2, WebCore::RenderListItem *a3)
{
  uint64_t v3;
  WebCore::RenderObject *v4;

  v3 = *((_QWORD *)a2 + 53);
  if (!v3)
    return WebCore::RenderTreeBuilder::Block::detach(*(_QWORD *)(*(_QWORD *)a1 + 72), a2, a3);
  v4 = *(WebCore::RenderObject **)(v3 + 8);
  if (!v4 || v4 == a3)
    return WebCore::RenderTreeBuilder::Block::detach(*(_QWORD *)(*(_QWORD *)a1 + 72), a2, a3);
  else
    return WebCore::RenderTreeBuilder::detach(*(_QWORD *)a1, v4, a3);
}

void WebCore::RenderTreeBuilder::FormControls::detach(uint64_t a1@<X0>, WebCore::RenderElement *a2@<X1>, WebCore::RenderObject *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  WebCore::RenderObject *v6;
  BOOL v7;
  uint64_t v8;

  v5 = *((_QWORD *)a2 + 52);
  if (!v5
    || ((v6 = *(WebCore::RenderObject **)(v5 + 8)) != 0 ? (v7 = v6 == a3) : (v7 = 1),
        v7 || (v8 = *((_QWORD *)a3 + 4)) != 0 && *(WebCore::RenderElement **)(v8 + 8) == a2))
  {
    WebCore::RenderTreeBuilder::Block::detach(a5, a2, a3, *(uint64_t **)(*(_QWORD *)a1 + 72), a4, 1);
  }
  else
  {
    WebCore::RenderTreeBuilder::detach(a5, *(_QWORD *)a1, v6, a3);
  }
}

void WebCore::RenderTreeBuilder::Inline::insertChildToContinuation(uint64_t *a1, WebCore::RenderElement *a2, const WebCore::RenderObject **a3, uint64_t a4)
{
  WebCore::RenderElement *v6;
  WebCore::RenderElement *v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int j;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32;
  WebCore::RenderObject *v33;
  uint64_t v34;
  int v35;
  _BOOL4 v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v60;
  uint64_t v61;
  WebCore::RenderElement *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v81;
  int v82;
  uint64_t v83;
  int v85;
  uint64_t v86;
  WebCore::RenderElement *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  int k;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v6 = a2;
  if (a4)
  {
    v41 = *(_QWORD *)(a4 + 32);
    if (v41)
    {
      v8 = a2;
      if (*(WebCore::RenderElement **)(v41 + 8) == a2)
        goto LABEL_53;
    }
  }
  if ((*((_BYTE *)a2 + 45) & 0x20) == 0 || (*((_BYTE *)a2 + 20) & 2) != 0)
  {
    if ((*((_BYTE *)a2 + 45) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19657411CLL);
    }
    v8 = a2;
    if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) != 0)
    {
      {
        v9 = dword_1ECE91378 + 1;
      }
      else
      {
        WebCore::continuationChainNodeMap(void)::map = 0;
        *(_QWORD *)&dword_1ECE91378 = 0;
        v9 = 1;
      }
      dword_1ECE91378 = v9;
      v10 = *((_QWORD *)a2 + 1);
      v11 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v12 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      for (i = 1; ; ++i)
      {
        v17 = v15;
        v18 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v15);
        if (v18 != -1 && v18 == v10)
          break;
        v15 = (v17 + i) & v11;
      }
      v49 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v17 + 8);
      while (1)
      {
        v49 = (_QWORD *)v49[2];
        if (!v49)
          break;
        if (*v49)
          v50 = *(_QWORD *)(*v49 + 8);
        else
          v50 = 0;
        if (v50 && (*(_BYTE *)(v50 + 45) & 0x20) != 0)
          goto LABEL_95;
      }
      v8 = a2;
    }
LABEL_15:
    if (a4)
      goto LABEL_53;
    v20 = *((unsigned int *)v8 + 16);
    if (!(v20 | ((unint64_t)*((unsigned __int8 *)v8 + 68) << 32))
      || !*(_QWORD *)((v20 | ((unint64_t)*((unsigned __int8 *)v8 + 68) << 32)) + 8))
    {
      v8 = a2;
    }
    if ((*((_BYTE *)v8 + 45) & 0x20) == 0 || (*((_BYTE *)v8 + 20) & 2) != 0)
    {
      if ((*((_BYTE *)v8 + 45) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19657413CLL);
      }
      if ((*(_WORD *)((_BYTE *)v8 + 69) & 0x10) != 0)
      {
        {
          v21 = dword_1ECE91378 + 1;
        }
        else
        {
          WebCore::continuationChainNodeMap(void)::map = 0;
          *(_QWORD *)&dword_1ECE91378 = 0;
          v21 = 1;
        }
        dword_1ECE91378 = v21;
        v22 = *((_QWORD *)v8 + 1);
        v23 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
        v24 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
        v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
        v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        v27 = v23 & ((v26 >> 31) ^ v26);
        for (j = 1; ; ++j)
        {
          v29 = v27;
          v30 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v27);
          if (v30 != -1 && v30 == v22)
            break;
          v27 = (v29 + j) & v23;
        }
        v51 = *(uint64_t ***)(WebCore::continuationChainNodeMap(void)::map + 16 * v29 + 8);
        while (1)
        {
          v51 = (uint64_t **)v51[2];
          if (!v51)
            break;
          v32 = *v51;
          if (*v51)
            v32 = (uint64_t *)v32[1];
          if (v32 && (*((_BYTE *)v32 + 45) & 0x20) != 0)
            goto LABEL_33;
        }
      }
    }
    else if ((*(_WORD *)((_BYTE *)v8 + 69) & 0x10) != 0)
    {
      ++dword_1ECE91378;
      v73 = *((_QWORD *)v8 + 1);
      v74 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v75 = (~(v73 << 32) + v73) ^ ((unint64_t)(~(v73 << 32) + v73) >> 22);
      v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
      v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
      v78 = v74 & ((v77 >> 31) ^ v77);
      v79 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v78);
      if (v79 == -1 || v79 != v73)
      {
        v85 = 1;
        do
        {
          v78 = ((_DWORD)v78 + v85) & v74;
          v86 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v78);
          ++v85;
        }
        while (v86 == -1 || v86 != v73);
      }
      v32 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v78 + 8) + 16);
      if (v32)
      {
        v32 = (uint64_t *)*v32;
        if (v32)
          v32 = (uint64_t *)v32[1];
      }
      goto LABEL_33;
    }
    v32 = 0;
LABEL_33:
    if (v32)
      v33 = (WebCore::RenderObject *)v32;
    else
      v33 = v8;
    goto LABEL_36;
  }
  v8 = a2;
  if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) == 0)
    goto LABEL_15;
  v9 = ++dword_1ECE91378;
  v52 = *((_QWORD *)a2 + 1);
  v53 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v54 = (~(v52 << 32) + v52) ^ ((unint64_t)(~(v52 << 32) + v52) >> 22);
  v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
  v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
  v57 = v53 & ((v56 >> 31) ^ v56);
  v58 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v57);
  if (v58 == -1 || v58 != v52)
  {
    v82 = 1;
    do
    {
      v57 = ((_DWORD)v57 + v82) & v53;
      v83 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v57);
      ++v82;
    }
    while (v83 == -1 || v83 != v52);
  }
  v60 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v57 + 8) + 16);
  v8 = a2;
  if (!v60)
    goto LABEL_15;
  v61 = *v60;
  v8 = a2;
  if (!v61)
    goto LABEL_15;
  v50 = *(_QWORD *)(v61 + 8);
  v8 = a2;
  if (!v50)
    goto LABEL_15;
LABEL_95:
  if (!a4)
  {
    v62 = a2;
    while (1)
    {
      v8 = (WebCore::RenderElement *)v50;
      a2 = v62;
      if ((*(_BYTE *)(v50 + 45) & 0x20) == 0 || (*(_BYTE *)(v50 + 20) & 2) != 0)
        break;
      if ((*(_WORD *)(v50 + 69) & 0x10) != 0)
      {
        dword_1ECE91378 = ++v9;
        v63 = *(_QWORD *)(v50 + 8);
        v64 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
        v65 = (~(v63 << 32) + v63) ^ ((unint64_t)(~(v63 << 32) + v63) >> 22);
        v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
        v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
        v68 = v64 & ((v67 >> 31) ^ v67);
        v69 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v68);
        if (v69 == -1 || v69 != v63)
        {
          v101 = 1;
          do
          {
            v68 = ((_DWORD)v68 + v101) & v64;
            v102 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v68);
            ++v101;
          }
          while (v102 == -1 || v102 != v63);
        }
        v71 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v68 + 8) + 16);
        if (v71)
        {
          v72 = *v71;
          if (v72)
          {
            v50 = *(_QWORD *)(v72 + 8);
LABEL_111:
            v62 = v8;
            if (v50)
              continue;
          }
        }
      }
      goto LABEL_15;
    }
    if ((*(_BYTE *)(v50 + 45) & 0x40) == 0)
    {
LABEL_175:
      __break(0xC471u);
      JUMPOUT(0x1965742C4);
    }
    if ((*(_WORD *)(v50 + 69) & 0x10) != 0)
    {
      ++v9;
      v90 = *(_QWORD *)(v50 + 8);
      dword_1ECE91378 = v9;
      v91 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v92 = (~(v90 << 32) + v90) ^ ((unint64_t)(~(v90 << 32) + v90) >> 22);
      v93 = 9 * ((v92 + ~(v92 << 13)) ^ ((v92 + ~(v92 << 13)) >> 8));
      v94 = (v93 ^ (v93 >> 15)) + ~((v93 ^ (v93 >> 15)) << 27);
      v95 = v91 & ((v94 >> 31) ^ v94);
      for (k = 1; ; ++k)
      {
        v97 = v95;
        v98 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v95);
        if (v98 != -1 && v98 == v90)
          break;
        v95 = (v97 + k) & v91;
      }
      v100 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v97 + 8);
      while (1)
      {
        v100 = (_QWORD *)v100[2];
        if (!v100)
          break;
        if (*v100)
          v50 = *(_QWORD *)(*v100 + 8);
        else
          v50 = 0;
        if (v50 && (*(_BYTE *)(v50 + 45) & 0x20) != 0)
          goto LABEL_111;
      }
    }
    goto LABEL_15;
  }
  v88 = a2;
  while (1)
  {
    v8 = (WebCore::RenderElement *)v50;
    v89 = *(_QWORD *)(a4 + 32);
    if (v89)
      v89 = *(_QWORD *)(v89 + 8);
    if (v89 == v50)
      break;
    if ((*(_BYTE *)(v50 + 45) & 0x20) == 0 || (*(_BYTE *)(v50 + 20) & 2) != 0)
    {
      if ((*(_BYTE *)(v50 + 45) & 0x40) == 0)
        goto LABEL_175;
      v50 = WebCore::RenderBoxModelObject::inlineContinuation((WebCore::RenderBoxModelObject *)v50);
    }
    else
    {
      v50 = WebCore::RenderBoxModelObject::continuation((WebCore::RenderBoxModelObject *)v50);
    }
    v88 = v8;
    if (!v50)
      goto LABEL_53;
  }
  v104 = *(unsigned int *)(v50 + 64);
  v105 = v104 | ((unint64_t)*(unsigned __int8 *)(v50 + 68) << 32);
  if (v105)
    v105 = *(_QWORD *)((v104 | ((unint64_t)*(unsigned __int8 *)(v50 + 68) << 32)) + 8);
  if (v105 == a4)
    v8 = v88;
LABEL_53:
  v42 = *(_QWORD *)(a4 + 32);
  if (!v42)
  {
LABEL_136:
    v33 = 0;
    goto LABEL_36;
  }
  v33 = *(WebCore::RenderObject **)(v42 + 8);
  if (!v33)
    goto LABEL_36;
  if ((*((_BYTE *)v33 + 45) & 0x41) == 1 || (v81 = *((unsigned __int8 *)v33 + 46), v81 == 35) || v81 == 63)
  {
    v43 = *(_QWORD *)(v42 + 8);
    while (1)
    {
      v44 = *(_QWORD *)(v43 + 32);
      if (!v44)
        goto LABEL_136;
      v33 = *(WebCore::RenderObject **)(v44 + 8);
      if (!v33)
        goto LABEL_36;
      if ((*((_BYTE *)v33 + 45) & 1) != 0)
      {
        v45 = *(_WORD *)(v43 + 69);
        v43 = *(_QWORD *)(v44 + 8);
        if ((v45 & 0x20) == 0)
          continue;
      }
      if ((*((_BYTE *)v33 + 45) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196573D58);
      }
      goto LABEL_36;
    }
  }
  if ((*((_BYTE *)v33 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196574098);
  }
LABEL_36:
  v34 = (uint64_t)*a3;
  v35 = *((_DWORD *)*a3 + 5);
  if ((v35 & 0x800) != 0 || (v35 & 0x1800000) == 0x1000000)
  {
    v46 = *a1;
    *a3 = 0;
    v110 = v34;
    WebCore::RenderTreeBuilder::attachIgnoringContinuation(v46, v33, &v110, (WebCore::RenderObject *)a4);
    v39 = v110;
    if (!v110)
      return;
    v40 = &v110;
    goto LABEL_46;
  }
  if (v8 == v33)
  {
    v47 = *a1;
    *a3 = 0;
    v109 = v34;
    WebCore::RenderTreeBuilder::attachIgnoringContinuation(v47, v8, &v109, (WebCore::RenderObject *)a4);
    v39 = v109;
    if (!v109)
      return;
    v40 = &v109;
LABEL_46:
    WebCore::RenderObjectDeleter::operator()((uint64_t)v40, v39);
    return;
  }
  if ((v35 & 1) != 0)
  {
    if (WebCore::RenderTreeBuilder::Table::childRequiresTable(*(WebCore::RenderTreeBuilder::Table **)(*a1 + 48), v6, *a3))
    {
      v36 = (*((_BYTE *)v6 + 96) & 0x1F) == 0;
      if (v36 == ((*((_BYTE *)v33 + 20) & 1) == 0))
        goto LABEL_68;
    }
    else
    {
      if ((*((_BYTE *)v33 + 20) & 1) != 0)
        goto LABEL_68;
      v36 = 0;
    }
  }
  else
  {
    if ((*((_BYTE *)v33 + 20) & 1) == 0)
      goto LABEL_68;
    v36 = 1;
  }
  if (!a4 || (*(_BYTE *)(a4 + 20) & 1) != 0)
  {
    v37 = (*((_DWORD *)v8 + 5) & 1) == 0;
    v38 = *a1;
    *a3 = 0;
    if (((v36 ^ v37) & 1) == 0)
    {
      v107 = v34;
      WebCore::RenderTreeBuilder::attachIgnoringContinuation(v38, v8, &v107, 0);
      v39 = v107;
      if (!v107)
        return;
      v40 = &v107;
      goto LABEL_46;
    }
    v106 = v34;
    WebCore::RenderTreeBuilder::attachIgnoringContinuation(v38, v33, &v106, (WebCore::RenderObject *)a4);
    v39 = v106;
    if (v106)
    {
      v40 = &v106;
      goto LABEL_46;
    }
    return;
  }
LABEL_68:
  v48 = *a1;
  *a3 = 0;
  v108 = v34;
  WebCore::RenderTreeBuilder::attachIgnoringContinuation(v48, v33, &v108, (WebCore::RenderObject *)a4);
  v39 = v108;
  if (v108)
  {
    v40 = &v108;
    goto LABEL_46;
  }
}

uint64_t WebCore::RenderTreeBuilder::Inline::splitFlow(uint64_t *a1, WebCore::RenderObject *this, uint64_t a3, WebCore::RenderBoxModelObject **a4, unint64_t *a5, WebCore::RenderBoxModelObject *a6)
{
  WebCore::RenderObject *v7;
  WebCore::RenderBoxModelObject *v9;
  WebCore::RenderObject *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  WebCore::RenderElement *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const WebCore::Element *v23;
  WebCore::RenderObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::RenderObject *v46;
  char v47;
  WebCore::RenderObject *v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  WebCore::RenderElement *v62;
  int v63;
  WebCore::RenderElement *v64;
  int v65;
  WebCore::RenderElement *v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  WebCore::RenderBoxModelObject *v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  WebCore::RenderElement *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WebCore::RenderObject *v116;
  uint64_t v117;
  WebCore::RenderObject *v118;
  double v119;
  uint64_t v120;
  WebCore::RenderBox *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  char v126;
  WebCore::RenderBoxModelObject *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WebCore::RenderElement *v135;
  uint64_t v136;
  WebCore::RenderElement *v137;
  WebCore::RenderBoxModelObject *v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WebCore::RenderBoxModelObject *v147;
  uint64_t v148;
  uint64_t v149[2];

  v7 = this;
  v9 = *a4;
  v10 = WebCore::RenderObject::containingBlock(this);
  (*(void (**)(WebCore::RenderObject *))(*(_QWORD *)v10 + 1648))(v10);
  v137 = 0;
  if ((*((_BYTE *)v10 + 45) & 1) == 0
    || ((*((_BYTE *)v10 + 45) & 2) != 0
      ? (v83 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 4) + 8) + 96))
      : (v83 = *((_QWORD *)v10 + 12)),
        (v83 & 0x1F) != 1 ? (v84 = (v83 & 0x1F) == 14) : (v84 = 1),
        !v84
     || (*((_BYTE *)v10 + 45) & 0x40) == 0
     || (v83 & 0xF80000000000) != 0
     || ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v10 + 176))(v10) & 1) != 0
     || (v85 = *((unsigned __int8 *)v10 + 46), v85 == 20)
     || (*((_BYTE *)v10 + 52) & 7) == 1 && (*((_BYTE *)v10 + 53) & 2) != 0
     || v85 == 26
     || v85 == 49
     || (v86 = *((_QWORD *)v10 + 4)) != 0
     && (v87 = *(_QWORD *)(v86 + 8)) != 0
     && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 144))(v87) & 1) != 0))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 3) + 8) + 40) + 8);
    v13 = 1;
    WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)v10 + 10, (WTF::StringImpl *)1, v11, (uint64_t)&v138);
    v14 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
    v15 = WebCore::RenderObject::RenderObject((uint64_t)v14, 1, v12, 92, 1);
    *(_QWORD *)v15 = off_1E3422BC8;
    *(_QWORD *)(v15 + 64) = 0;
    *(_QWORD *)(v15 + 70) = 0;
    *(_DWORD *)(v15 + 80) = 0;
    v16 = v139;
    v17 = v140;
    v139 = 0;
    *(_QWORD *)(v15 + 88) = v16;
    *(_QWORD *)(v15 + 96) = v17;
    v18 = v141;
    v141 = 0u;
    *(_OWORD *)(v15 + 104) = v18;
    *(_QWORD *)(v15 + 120) = v142;
    v19 = v143;
    v143 = 0u;
    *(_OWORD *)(v15 + 128) = v19;
    *(_OWORD *)(v15 + 144) = 0u;
    *(_OWORD *)(v15 + 160) = 0u;
    *(_OWORD *)(v15 + 176) = 0u;
    *(_QWORD *)(v15 + 192) = 0;
    *(_QWORD *)v15 = off_1E341F9F8;
    *(_DWORD *)(v15 + 200) = -1;
    *(_BYTE *)(v15 + 204) &= 0xFCu;
    *(_BYTE *)(v15 + 208) = 0;
    *(_BYTE *)(v15 + 212) = 0;
    *(_DWORD *)(v15 + 240) = 0;
    *(_OWORD *)(v15 + 216) = 0u;
    *(_DWORD *)(v15 + 20) |= 0x40000u;
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v138, v20);
    WebCore::RenderElement::initializeStyle(v14, v21, v22, v23);
    v137 = v14;
    v24 = v10;
    v10 = v14;
  }
  else
  {
    WebCore::RenderBlock::removePositionedObjects(v10, 0, 1);
    if ((*((_BYTE *)v10 + 52) & 7) == 1)
      WebCore::RenderBlockFlow::removeFloatingObjects((uint64_t *)v10);
    v24 = WebCore::RenderObject::containingBlock(v10);
    v14 = 0;
    v13 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, WebCore::RenderObject *, WebCore::RenderObject *))(*(_QWORD *)v10
                                                                                                  + 1560))(&v136, v10, v24);
  v25 = v136;
  if ((*(_BYTE *)(v136 + 45) & 0x40) == 0)
  {
    __break(0xC471u);
    goto LABEL_197;
  }
  if (v13)
  {
    v26 = *((unsigned __int8 *)v24 + 68);
    v27 = *((unsigned int *)v24 + 16);
  }
  else
  {
    v26 = *((unsigned __int8 *)v10 + 51);
    v27 = *(unsigned int *)((char *)v10 + 47);
  }
  v28 = v27 | (v26 << 32);
  if (v28)
    v29 = *(_QWORD *)(v28 + 8);
  else
    v29 = 0;
  if (v14)
  {
    v69 = *a1;
    v137 = 0;
    v135 = v14;
    WebCore::RenderTreeBuilder::attachToRenderElementInternal(v69, (uint64_t)v24, (uint64_t *)&v135, v29);
    v70 = (uint64_t)v135;
    v135 = 0;
    if (v70)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v135, v70);
  }
  v30 = *a1;
  v31 = (uint64_t)*a4;
  *a4 = 0;
  v134 = v31;
  WebCore::RenderTreeBuilder::attachToRenderElementInternal(v30, (uint64_t)v24, &v134, v29);
  v32 = v134;
  v134 = 0;
  if (v32)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v134, v32);
  v33 = *a1;
  v34 = v136;
  v136 = 0;
  v133 = v34;
  WebCore::RenderTreeBuilder::attachToRenderElementInternal(v33, (uint64_t)v24, &v133, v29);
  v35 = v133;
  v133 = 0;
  if (v35)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v133, v35);
  (*(void (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v24 + 168))(v24, 0);
  if (v29)
    v36 = v13;
  else
    v36 = 0;
  if (v36 == 1)
  {
    do
    {
      v102 = *(unsigned int *)(v29 + 47);
      if (v102 | ((unint64_t)*(unsigned __int8 *)(v29 + 51) << 32))
        v103 = *(_QWORD *)((v102 | ((unint64_t)*(unsigned __int8 *)(v29 + 51) << 32)) + 8);
      else
        v103 = 0;
      WebCore::RenderTreeBuilder::detachFromRenderElement(v24, (WebCore::RenderBox *)v29, *a1, 0, &v138);
      v104 = *a1;
      v105 = (uint64_t)v138;
      v138 = 0;
      v132 = v105;
      WebCore::RenderTreeBuilder::attachToRenderElementInternal(v104, (uint64_t)v10, &v132, 0);
      v106 = v132;
      v132 = 0;
      if (v106)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v132, v106);
      v107 = *(_DWORD *)(v29 + 20);
      if ((v107 & 8) == 0)
      {
        *(_DWORD *)(v29 + 20) = v107 | 8;
        v108 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v29, 0);
        WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v29, v108);
        if ((*(_BYTE *)(v29 + 21) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v29 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196574E14);
          }
          v110 = *(_QWORD *)(v29 + 144);
          if (v110)
          {
            v111 = *(_DWORD *)(v110 + 8) + 1;
            *(_DWORD *)(v110 + 8) = v111;
          }
          else
          {
            v111 = MEMORY[8];
          }
          *(_QWORD *)(v110 + 24) = *(_QWORD *)(v110 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v111)
          {
            __break(0xC471u);
            JUMPOUT(0x196574E40);
          }
          *(_DWORD *)(v110 + 8) = v111 - 1;
        }
      }
      WebCore::RenderObject::setPreferredLogicalWidthsDirty(v29, 1, 1);
      v109 = (uint64_t)v138;
      v138 = 0;
      if (v109)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v138, v109);
      v29 = v103;
    }
    while (v103);
  }
  v37 = *a1;
  v126 = *(_BYTE *)(*a1 + 121);
  *(_BYTE *)(*a1 + 121) = 1;
  WebCore::cloneAsContinuation((WebCore *)&v138, v7);
  v39 = a3;
  if (a3)
  {
    while (1)
    {
      v112 = *(unsigned int *)(v39 + 47);
      v113 = v112 | ((unint64_t)*(unsigned __int8 *)(v39 + 51) << 32);
      if (v113)
        v114 = *(_QWORD *)((v112 | ((unint64_t)*(unsigned __int8 *)(v39 + 51) << 32)) + 8);
      else
        v114 = 0;
      v115 = *(_QWORD *)(v39 + 32);
      if (!v115)
        goto LABEL_18;
      v116 = *(WebCore::RenderObject **)(v115 + 8);
      if (v116 == v7)
      {
        v116 = (WebCore::RenderObject *)v39;
        goto LABEL_174;
      }
      if (!v116)
        goto LABEL_18;
      while (1)
      {
        v117 = *((_QWORD *)v116 + 4);
        if (!v117)
          goto LABEL_18;
        v118 = *(WebCore::RenderObject **)(v117 + 8);
        if (v118 == v7)
          break;
        v116 = v118;
        if (!v118)
          goto LABEL_18;
      }
      if (*(unsigned int *)(v39 + 40) | ((unint64_t)*(unsigned __int8 *)(v39 + 44) << 32)
        && *(_QWORD *)((*(unsigned int *)(v39 + 40) | ((unint64_t)*(unsigned __int8 *)(v39 + 44) << 32)) + 8))
      {
        break;
      }
      v125 = *(unsigned int *)((char *)v116 + 47) | ((unint64_t)*((unsigned __int8 *)v116 + 51) << 32);
      if (v125)
        goto LABEL_191;
      v114 = 0;
LABEL_174:
      v119 = WebCore::RenderTreeBuilder::detachFromRenderElement(*(WebCore::RenderElement **)(*((_QWORD *)v116 + 4) + 8), v116, *a1, 0, v149);
      v120 = *a1;
      v148 = v149[0];
      v149[0] = 0;
      WebCore::RenderTreeBuilder::attachIgnoringContinuation(v120, v138, &v148, 0, v119);
      v121 = (WebCore::RenderBox *)v148;
      v148 = 0;
      if (v121)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v148, (uint64_t)v121);
      v122 = *((_QWORD *)v116 + 4);
      if (v122)
      {
        v123 = *(_QWORD *)(v122 + 8);
        if (v123)
        {
          if ((*(_BYTE *)(v123 + 45) & 4) != 0)
          {
            ++*(_DWORD *)(v123 + 16);
            WebCore::RenderTreeBuilder::markBoxForRelayoutAfterSplit((WebCore::RenderTreeBuilder *)v123, v121);
            v124 = *(_DWORD *)(v123 + 16);
            if (!v124)
            {
              __break(0xC471u);
LABEL_197:
              JUMPOUT(0x196574A18);
            }
            *(_DWORD *)(v123 + 16) = v124 - 1;
          }
        }
      }
      WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(v116);
      v38 = (void *)v149[0];
      v149[0] = 0;
      if (v38)
        WebCore::RenderObjectDeleter::operator()((uint64_t)v149, (uint64_t)v38);
      v39 = v114;
      if (!v114)
        goto LABEL_18;
    }
    if (v113 && *(_QWORD *)(v113 + 8))
      goto LABEL_189;
    v125 = *(unsigned int *)((char *)v116 + 47) | ((unint64_t)*((unsigned __int8 *)v116 + 51) << 32);
    if (!v125)
    {
      v114 = 0;
LABEL_189:
      v116 = (WebCore::RenderObject *)v39;
      goto LABEL_174;
    }
    v116 = (WebCore::RenderObject *)v39;
LABEL_191:
    v114 = *(_QWORD *)(v125 + 8);
    goto LABEL_174;
  }
LABEL_18:
  v40 = (uint64_t)v138;
  v41 = WebCore::RenderBoxModelObject::ensureContinuationChainNode(v9, v38);
  v43 = WebCore::RenderBoxModelObject::ensureContinuationChainNode((WebCore::RenderBoxModelObject *)v40, v42);
  v44 = *(_QWORD *)(v41 + 16);
  *(_QWORD *)(v43 + 16) = v44;
  if (v44)
    *(_QWORD *)(v44 + 8) = v43;
  *(_QWORD *)(v43 + 8) = v41;
  *(_QWORD *)(v41 + 16) = v43;
  if (a6)
    WebCore::RenderBoxModelObject::insertIntoContinuationChainAfter(a6, (WebCore::RenderBoxModelObject *)v40);
  v45 = *((_QWORD *)v7 + 4);
  if (!v45)
    goto LABEL_26;
  v46 = *(WebCore::RenderObject **)(v45 + 8);
  if (!v46)
    goto LABEL_26;
  v47 = *((_BYTE *)v46 + 45);
  if ((v47 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196574A38);
  }
  if (v46 != v10)
  {
    v88 = 1;
    do
    {
      v48 = v46;
      if (v88 > 0xC7 || (v47 & 1) != 0)
      {
        *(_BYTE *)(*a1 + 120) = 1;
      }
      else
      {
        if ((v47 & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196574CF0);
        }
        v130 = v138;
        WebCore::cloneAsContinuation((WebCore *)v149, v46);
        v138 = (WebCore::RenderBoxModelObject *)v149[0];
        v89 = (WebCore::RenderBoxModelObject *)v149[0];
        v90 = *a1;
        v149[0] = 0;
        v147 = v130;
        WebCore::RenderTreeBuilder::attachIgnoringContinuation(v90, v89, &v147, 0, v91);
        v92 = (uint64_t)v147;
        v147 = 0;
        if (v92)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v147, v92);
        WebCore::RenderBoxModelObject::insertIntoContinuationChainAfter(v89, v48);
        v93 = *(unsigned int *)((char *)v7 + 47);
        if (v93 | ((unint64_t)*((unsigned __int8 *)v7 + 51) << 32))
        {
          v94 = *(_QWORD *)((v93 | ((unint64_t)*((unsigned __int8 *)v7 + 51) << 32)) + 8);
          if (v94)
          {
            do
            {
              v96 = *(unsigned int *)(v94 + 47);
              if (v96 | ((unint64_t)*(unsigned __int8 *)(v94 + 51) << 32))
                v95 = *(_QWORD *)((v96 | ((unint64_t)*(unsigned __int8 *)(v94 + 51) << 32)) + 8);
              else
                v95 = 0;
              v97 = WebCore::RenderTreeBuilder::detachFromRenderElement(v48, (WebCore::RenderBox *)v94, *a1, 0, &v146);
              v98 = *a1;
              v145 = v146;
              v146 = 0;
              WebCore::RenderTreeBuilder::attachIgnoringContinuation(v98, v138, &v145, 0, v97);
              v99 = v145;
              v145 = 0;
              if (v99)
                WebCore::RenderObjectDeleter::operator()((uint64_t)&v145, v99);
              WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc((WebCore::RenderObject *)v94);
              v100 = v146;
              v146 = 0;
              if (v100)
                WebCore::RenderObjectDeleter::operator()((uint64_t)&v146, v100);
              v94 = v95;
            }
            while (v95);
            if (v149[0])
              WebCore::RenderObjectDeleter::operator()((uint64_t)v149, v149[0]);
          }
        }
      }
      v101 = *((_QWORD *)v48 + 4);
      if (!v101)
        break;
      v46 = *(WebCore::RenderObject **)(v101 + 8);
      if (!v46)
        break;
      v47 = *((_BYTE *)v46 + 45);
      if ((v47 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196574CD0);
      }
      ++v88;
      v7 = v48;
    }
    while (v46 != v10);
    v40 = (uint64_t)v138;
  }
  else
  {
LABEL_26:
    v48 = v7;
  }
  v49 = *(unsigned __int8 *)(v40 + 68);
  for (i = *(unsigned int *)(v40 + 64); ; i = *(unsigned int *)(v52 + 47))
  {
    v51 = i | (v49 << 32);
    if (!v51)
      break;
    v52 = *(_QWORD *)(v51 + 8);
    if (!v52)
      break;
    if ((*(_BYTE *)(v52 + 45) & 0x40) != 0)
    {
LABEL_32:
      WebCore::RenderBlock::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(v52, 0);
      while (1)
      {
        v53 = *(unsigned int *)(v52 + 47);
        if (!(v53 | ((unint64_t)*(unsigned __int8 *)(v52 + 51) << 32)))
          goto LABEL_37;
        v52 = *(_QWORD *)((v53 | ((unint64_t)*(unsigned __int8 *)(v52 + 51) << 32)) + 8);
        if (!v52)
          goto LABEL_37;
        if ((*(_BYTE *)(v52 + 45) & 0x40) != 0)
          goto LABEL_32;
      }
    }
    v49 = *(unsigned __int8 *)(v52 + 51);
  }
LABEL_37:
  v54 = *a1;
  v138 = 0;
  v149[0] = v40;
  WebCore::RenderTreeBuilder::attachToRenderElementInternal(v54, v25, v149, 0);
  v55 = v149[0];
  v149[0] = 0;
  if (v55)
    WebCore::RenderObjectDeleter::operator()((uint64_t)v149, v55);
  v56 = *(unsigned int *)((char *)v48 + 47);
  if (v56 | ((unint64_t)*((unsigned __int8 *)v48 + 51) << 32))
  {
    v57 = *(_QWORD *)((v56 | ((unint64_t)*((unsigned __int8 *)v48 + 51) << 32)) + 8);
    if (v57)
    {
      do
      {
        v78 = *(unsigned int *)(v57 + 47);
        if (v78 | ((unint64_t)*(unsigned __int8 *)(v57 + 51) << 32))
          v77 = *(_QWORD *)((v78 | ((unint64_t)*(unsigned __int8 *)(v57 + 51) << 32)) + 8);
        else
          v77 = 0;
        WebCore::RenderTreeBuilder::detachFromRenderElement(v10, (WebCore::RenderBox *)v57, *a1, 0, &v146);
        v79 = *a1;
        v80 = v146;
        v146 = 0;
        v144 = v80;
        WebCore::RenderTreeBuilder::attachToRenderElementInternal(v79, v25, &v144, 0);
        v81 = v144;
        v144 = 0;
        if (v81)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v144, v81);
        v82 = v146;
        v146 = 0;
        if (v82)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v146, v82);
        v57 = v77;
      }
      while (v77);
      if (v138)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v138, (uint64_t)v138);
    }
  }
  *(_BYTE *)(v37 + 121) = v126;
  (*(void (**)(WebCore::RenderBoxModelObject *, _QWORD))(*(_QWORD *)v9 + 168))(v9, 0);
  v58 = *a1;
  v59 = *a5;
  *a5 = 0;
  v131 = v59;
  WebCore::RenderTreeBuilder::attach(v58, v9, &v131);
  v60 = v131;
  v131 = 0;
  if (v60)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v131, v60);
  v61 = *((_DWORD *)v10 + 5);
  if ((v61 & 8) == 0)
  {
    *((_DWORD *)v10 + 5) = v61 | 8;
    v62 = WebCore::RenderObject::markContainingBlocksForLayout(v10, 0);
    WebCore::RenderObject::scheduleLayout(v10, v62);
    if ((*((_BYTE *)v10 + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)v10 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196574BE0);
      }
      v71 = *((_QWORD *)v10 + 18);
      if (v71)
      {
        v72 = *(_DWORD *)(v71 + 8) + 1;
        *(_DWORD *)(v71 + 8) = v72;
      }
      else
      {
        v72 = MEMORY[8];
      }
      *(_QWORD *)(v71 + 24) = *(_QWORD *)(v71 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v72)
      {
        __break(0xC471u);
        JUMPOUT(0x196574C4CLL);
      }
      *(_DWORD *)(v71 + 8) = v72 - 1;
    }
  }
  WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v10, 1, 1);
  v63 = *((_DWORD *)v24 + 5);
  if ((v63 & 8) == 0)
  {
    *((_DWORD *)v24 + 5) = v63 | 8;
    v64 = WebCore::RenderObject::markContainingBlocksForLayout(v24, 0);
    WebCore::RenderObject::scheduleLayout(v24, v64);
    if ((*((_BYTE *)v24 + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)v24 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196574C00);
      }
      v73 = *((_QWORD *)v24 + 18);
      if (v73)
      {
        v74 = *(_DWORD *)(v73 + 8) + 1;
        *(_DWORD *)(v73 + 8) = v74;
      }
      else
      {
        v74 = MEMORY[8];
      }
      *(_QWORD *)(v73 + 24) = *(_QWORD *)(v73 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v74)
      {
        __break(0xC471u);
        JUMPOUT(0x196574C78);
      }
      *(_DWORD *)(v73 + 8) = v74 - 1;
    }
  }
  WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v24, 1, 1);
  v65 = *(_DWORD *)(v25 + 20);
  if ((v65 & 8) == 0)
  {
    *(_DWORD *)(v25 + 20) = v65 | 8;
    v66 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v25, 0);
    WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v25, v66);
    if ((*(_BYTE *)(v25 + 21) & 0x80) != 0)
    {
      if ((*(_BYTE *)(v25 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196574C20);
      }
      v75 = *(_QWORD *)(v25 + 144);
      if (v75)
      {
        v76 = *(_DWORD *)(v75 + 8) + 1;
        *(_DWORD *)(v75 + 8) = v76;
      }
      else
      {
        v76 = MEMORY[8];
      }
      *(_QWORD *)(v75 + 24) = *(_QWORD *)(v75 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v76)
      {
        __break(0xC471u);
        JUMPOUT(0x196574CA4);
      }
      *(_DWORD *)(v75 + 8) = v76 - 1;
    }
  }
  result = WebCore::RenderObject::setPreferredLogicalWidthsDirty(v25, 1, 1);
  v68 = v136;
  v136 = 0;
  if (v68)
    result = WebCore::RenderObjectDeleter::operator()((uint64_t)&v136, v68);
  if (v137)
    return WebCore::RenderObjectDeleter::operator()((uint64_t)&v137, (uint64_t)v137);
  return result;
}

void WebCore::cloneAsContinuation(WebCore *this, WebCore::RenderInline *a2)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Element *v15;
  void *v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int i;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v27[8];

  LODWORD(v27[0]) = 0;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  ++*v4;
  v27[1] = v4;
  v5 = *((_QWORD *)a2 + 12);
  v6 = (_DWORD *)*((_QWORD *)a2 + 13);
  ++*v6;
  v27[3] = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 14);
  ++*v7;
  v8 = *((_QWORD *)a2 + 15);
  v27[4] = v7;
  v27[5] = v8;
  v27[6] = 0;
  v9 = (_DWORD *)*((_QWORD *)a2 + 17);
  ++*v9;
  v27[7] = v9;
  v27[2] = v5 & 0xFFFFFFFFFFFFFC00;
  if ((*((_BYTE *)a2 + 45) & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v10 && (*(_WORD *)(v10 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965751D0);
    }
  }
  v11 = bmalloc::api::isoAllocate();
  v12 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v11, 16, v10, v27, 40, 0);
  *(_QWORD *)v12 = off_1E3428870;
  *(_QWORD *)(v12 + 152) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_DWORD *)(v12 + 20) |= 0x40000u;
  *(_QWORD *)this = v12;
  WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v12, v13, v14, v15);
  v17 = *(_DWORD *)(v11 + 20);
  *(_DWORD *)(v11 + 20) = v17 & 0xEFFFFFFF | (((*((_DWORD *)a2 + 5) >> 28) & 1) << 28);
  if ((*((_BYTE *)a2 + 21) & 0x40) != 0)
  {
    v18 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
    v19 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    for (i = 1; ; ++i)
    {
      v24 = v22;
      v25 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v22);
      if (v25 != -1 && *(WebCore::RenderInline **)(v25 + 8) == a2)
        break;
      v22 = (v24 + i) & v18;
    }
    if (*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v24 + 8) + 1))
    {
      v26 = 1;
LABEL_13:
      *((_BYTE *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v11, v16) + 1) = v26;
      goto LABEL_6;
    }
  }
  if ((v17 & 0x4000) != 0)
  {
    v26 = 0;
    goto LABEL_13;
  }
LABEL_6:
  *(_WORD *)(v11 + 69) |= 0x20u;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v27, v16);
}

uint64_t WebCore::RenderTreeBuilder::Inline::childBecameNonInline(WebCore::RenderTreeBuilder::Inline *this, WebCore::RenderInline *a2, WebCore::RenderElement *a3)
{
  WebCore::RenderObject *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  const WebCore::Element *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::RenderBoxModelObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;

  v6 = WebCore::RenderObject::containingBlock(a2);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)v6 + 10, (WTF::StringImpl *)1, v8, (uint64_t)&v40);
  v9 = bmalloc::api::isoAllocate();
  v10 = WebCore::RenderObject::RenderObject(v9, 1, v7, 92, 1);
  *(_QWORD *)v10 = off_1E3422BC8;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 70) = 0;
  *(_DWORD *)(v10 + 80) = 0;
  v11 = v41;
  v12 = v42;
  v41 = 0;
  *(_QWORD *)(v10 + 88) = v11;
  *(_QWORD *)(v10 + 96) = v12;
  v13 = v43;
  v43 = 0u;
  *(_OWORD *)(v10 + 104) = v13;
  *(_QWORD *)(v10 + 120) = v44;
  v14 = v45;
  v45 = 0u;
  *(_OWORD *)(v10 + 128) = v14;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_QWORD *)(v10 + 192) = 0;
  *(_QWORD *)v10 = off_1E341F9F8;
  *(_DWORD *)(v10 + 200) = -1;
  *(_BYTE *)(v10 + 204) &= 0xFCu;
  *(_BYTE *)(v10 + 208) = 0;
  *(_BYTE *)(v10 + 212) = 0;
  *(_DWORD *)(v10 + 240) = 0;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_DWORD *)(v10 + 20) |= 0x40000u;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v40, v15);
  WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v9, v16, v17, v18);
  v19 = 0;
  *(_WORD *)(v9 + 69) |= 0x20u;
  if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) != 0)
  {
    ++dword_1ECE91378;
    v25 = *((_QWORD *)a2 + 1);
    v26 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v27 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
    v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    v30 = v26 & ((v29 >> 31) ^ v29);
    v31 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v30);
    if (v31 == -1 || v31 != v25)
    {
      v33 = 1;
      do
      {
        v30 = ((_DWORD)v30 + v33) & v26;
        v34 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v30);
        ++v33;
      }
      while (v34 == -1 || v34 != v25);
    }
    v36 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v30 + 8) + 16);
    if (v36 && (v37 = *v36) != 0)
    {
      v19 = *(_QWORD *)(v37 + 8);
      if (v19)
      {
        *(_WORD *)(v19 + 69) &= ~0x10u;
        WTF::WeakHashMap<WebCore::RenderBoxModelObject const,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::SingleThreadWeakPtrImpl>::remove((uint64_t)&WebCore::continuationChainNodeMap(void)::map, (_QWORD *)v19);
      }
    }
    else
    {
      v19 = 0;
    }
  }
  WebCore::RenderBoxModelObject::insertIntoContinuationChainAfter((WebCore::RenderBoxModelObject *)v9, a2);
  v20 = *(unsigned int *)((char *)a3 + 47);
  if (v20 | ((unint64_t)*((unsigned __int8 *)a3 + 51) << 32))
    v21 = *(_QWORD *)((v20 | ((unint64_t)*((unsigned __int8 *)a3 + 51) << 32)) + 8);
  else
    v21 = 0;
  WebCore::RenderTreeBuilder::detachFromRenderElement(a2, a3, *(_QWORD *)this, 0, &v40);
  v22 = v40;
  v39 = (WebCore::RenderBoxModelObject *)v9;
  v40 = 0;
  v38 = v22;
  result = WebCore::RenderTreeBuilder::Inline::splitFlow((uint64_t *)this, a2, v21, &v39, (unint64_t *)&v38, (WebCore::RenderBoxModelObject *)v19);
  if (v38)
    result = WebCore::RenderObjectDeleter::operator()((uint64_t)&v38, v38);
  if (v39)
    result = WebCore::RenderObjectDeleter::operator()((uint64_t)&v39, (uint64_t)v39);
  v24 = v40;
  v40 = 0;
  if (v24)
    return WebCore::RenderObjectDeleter::operator()((uint64_t)&v40, v24);
  return result;
}

void WebCore::RenderTreeBuilder::List::updateItemMarker(WebCore::RenderTreeBuilder::List *this, WebCore::RenderListItem *a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::Element *v19;
  void *v20;
  WebCore::RenderObject *v21;
  uint64_t v22;
  WTF *v23;
  WebCore::RenderBlock *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore *ParentOfFirstLineBox;
  WebCore::SVGTextLayoutAttributes **v28;
  WebCore *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  WebCore::RenderElement *v34;
  WTF *v35;
  uint64_t v36;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  uint64_t v40;
  WebCore *v41;
  WebCore::RenderBlock *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::SVGTextLayoutAttributes **v47;
  WebCore *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  WebCore::RenderElement *v52;
  _QWORD v53[8];

  v8 = *((_QWORD *)a2 + 13);
  v9 = *(unsigned __int8 *)(v8 + 368);
  v10 = *(WTF::StringImpl **)(v8 + 376);
  if (v10)
  {
    v11 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    if (v9 == 2)
    {
      v12 = *(_QWORD *)(v8 + 8);
      if (!v12)
      {
        if (v11)
          *(_DWORD *)v10 = v11;
        else
          WTF::StringImpl::destroy(v10, a2);
        goto LABEL_6;
      }
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 64))(v12);
      v39 = v37;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v38);
        if ((v39 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        *(_DWORD *)v10 -= 2;
        if ((v37 & 1) != 0)
          goto LABEL_6;
      }
    }
    else if (v11)
    {
      *(_DWORD *)v10 = v11;
    }
    else
    {
      WTF::StringImpl::destroy(v10, a2);
    }
  }
  else if (v9 == 2)
  {
    v36 = *(_QWORD *)(v8 + 8);
    if (!v36 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 64))(v36) & 1) != 0)
    {
LABEL_6:
      v13 = *((_QWORD *)a2 + 31);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
          WebCore::RenderTreeBuilder::destroy(*(_QWORD *)this, v14, 1, a4, a5, a6);
      }
      return;
    }
  }
  WebCore::RenderListItem::computeMarkerStyle(a2, (WebCore::RenderStyle *)v53);
  v52 = 0;
  v15 = *((_QWORD *)a2 + 31);
  if (v15)
  {
    v24 = *(WebCore::RenderBlock **)(v15 + 8);
    if (v24)
    {
      WebCore::RenderElement::setStyle(*(_QWORD *)(v15 + 8), v53, 0);
      v16 = 0;
      goto LABEL_20;
    }
  }
  v16 = bmalloc::api::isoAllocate();
  v52 = (WebCore::RenderElement *)WebCore::RenderListMarker::RenderListMarker(v16, (uint64_t)a2, v53);
  WebCore::RenderElement::initializeStyle(v52, v17, v18, v19);
  v22 = *(_QWORD *)(v16 + 8);
  if (!v22)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = v16;
    v35 = *(WTF **)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v22;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
      {
        WTF::fastFree(v35, v20);
        v22 = *(_QWORD *)(v16 + 8);
        if (!v22)
          goto LABEL_16;
      }
      else
      {
        --*(_DWORD *)v35;
      }
    }
  }
  ++*(_DWORD *)v22;
LABEL_16:
  v23 = (WTF *)*((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree(v23, v20);
    else
      --*(_DWORD *)v23;
  }
  v24 = (WebCore::RenderBlock *)v16;
LABEL_20:
  v25 = *((_QWORD *)v24 + 4);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    ParentOfFirstLineBox = WebCore::getParentOfFirstLineBox(a2, v24, v21);
    if (ParentOfFirstLineBox)
    {
      v29 = ParentOfFirstLineBox;
      goto LABEL_23;
    }
    if (v26 && WebCore::RenderObject::isAnonymousBlock((WebCore::RenderObject *)v26))
      goto LABEL_30;
  }
  else
  {
    v29 = WebCore::getParentOfFirstLineBox(a2, v24, v21);
    if (v29)
    {
LABEL_25:
      v30 = *(_QWORD *)this;
      v52 = 0;
      v50 = v16;
      v31 = *((unsigned int *)v29 + 16);
      if (v31 | ((unint64_t)*((unsigned __int8 *)v29 + 68) << 32))
      {
        for (i = *(_QWORD *)((v31 | ((unint64_t)*((unsigned __int8 *)v29 + 68) << 32)) + 8);
              i;
              i = *(_QWORD *)(v49 + 8))
        {
          if (*(_BYTE *)(i + 46) != 20)
            break;
          v49 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
          if (!v49)
            break;
        }
      }
      WebCore::RenderTreeBuilder::attach(v30, v29, &v50);
      v33 = v50;
      v50 = 0;
      if (v33)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v50, v33);
      goto LABEL_30;
    }
    v26 = 0;
  }
  v48 = (WebCore *)*((_QWORD *)a2 + 28);
  if (v48)
  {
    v48 = (WebCore *)*((_QWORD *)v48 + 3);
    if (v48)
      v48 = (WebCore *)*((_QWORD *)v48 + 1);
  }
  if (v48)
    v29 = v48;
  else
    v29 = a2;
LABEL_23:
  if (v29 != (WebCore *)v26)
  {
    if (v26)
    {
      v40 = *(_QWORD *)this;
      v41 = v29;
      WebCore::RenderTreeBuilder::detach(&v51, (WebCore::RenderObject *)v26, (uint64_t **)v24, *(uint64_t **)this, 0, 0, v28);
      WebCore::firstNonMarkerChild(*((unsigned int *)v41 + 16) | ((unint64_t)*((unsigned __int8 *)v41 + 68) << 32), v42);
      WebCore::RenderTreeBuilder::attach(v40, v41, (unint64_t *)&v51);
      v43 = v51;
      v51 = 0;
      if (v43)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v51, v43);
      if (WebCore::RenderObject::isAnonymousBlock((WebCore::RenderObject *)v26))
      {
        v44 = *(unsigned int *)(v26 + 64);
        if (!(v44 | ((unint64_t)*(unsigned __int8 *)(v26 + 68) << 32))
          || !*(_QWORD *)((v44 | ((unint64_t)*(unsigned __int8 *)(v26 + 68) << 32)) + 8))
        {
          if ((*(_BYTE *)(v26 + 45) & 0x40) == 0)
          {
            __break(0xC471u);
            return;
          }
          if (!WebCore::RenderBoxModelObject::continuation((WebCore::RenderBoxModelObject *)v26))
            WebCore::RenderTreeBuilder::destroy(*(_QWORD *)this, v26, 1, v45, v46, v47);
        }
      }
      goto LABEL_30;
    }
    goto LABEL_25;
  }
LABEL_30:
  v34 = v52;
  if (v52)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v52, (uint64_t)v52);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v53, v34);
}

WebCore *WebCore::getParentOfFirstLineBox(WebCore *this, WebCore::RenderBlock *a2, WebCore::RenderObject *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  char v9;
  WebCore *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore *v14;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v3 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v3)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384);
      while (1)
      {
        if ((WebCore::RenderBlock *)v3 != a2)
        {
          v7 = *(_DWORD *)(v3 + 20);
          if ((v7 & 1) == 0)
          {
            if ((*(_BYTE *)(v3 + 45) & 0x20) == 0
              || WebCore::generatesLineBoxesForInlineChild(this, (WebCore::RenderBlock *)v3, a3))
            {
              return this;
            }
            v7 = *(_DWORD *)(v3 + 20);
          }
          if ((v7 & 0x800) == 0 && (v7 & 0x1800000) != 0x1000000)
          {
            v8 = *(unsigned __int8 *)(v3 + 46);
            if (v8 != 22)
            {
              v9 = *(_BYTE *)(v3 + 45);
              if ((v9 & 0x40) == 0)
                return 0;
              result = 0;
              if (v8 == 35 || v8 == 63)
                return result;
              if ((*(_BYTE *)(v3 + 45) & 4) != 0)
              {
                v11 = *(_QWORD *)(v3 + 32);
                if (!v11)
                  return 0;
                v12 = *(_QWORD *)(v11 + 8);
                if (!v12 || ((*(_DWORD *)(v3 + 124) ^ *(_DWORD *)(v12 + 124)) & 0xE000) != 0)
                  return 0;
              }
              if (*((_BYTE *)this + 46) == 19 && v6 == 2 && (*(_BYTE *)(v3 + 45) & 1) == 0)
              {
                v14 = *(WebCore **)(*(_QWORD *)(v3 + 24) + 8);
                if (v14)
                {
                  if (WebCore::isHTMLListElement(v14, a2))
                    return 0;
                  v9 = *(_BYTE *)(v3 + 45);
                }
              }
              if ((v9 & 0x40) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x196575994);
              }
              result = (WebCore *)WebCore::getParentOfFirstLineBox((WebCore *)v3, a2, a3);
              if (result)
                return result;
            }
          }
        }
        v13 = *(unsigned int *)(v3 + 47);
        if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
          return 0;
        result = 0;
        v3 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
        if (!v3)
          return result;
      }
    }
  }
  return 0;
}

uint64_t WebCore::firstNonMarkerChild(unint64_t this, WebCore::RenderBlock *a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;

  if ((this & 0xFFFFFFFFFFLL) == 0)
    return 0;
  v2 = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
  if (!v2)
    return 0;
  while (*(_BYTE *)(v2 + 46) == 20)
  {
    v4 = *(unsigned int *)(v2 + 47) | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32);
    if (!v4)
      return 0;
    result = 0;
    v2 = *(_QWORD *)(v4 + 8);
    if (!v2)
      return result;
  }
  return v2;
}

void WebCore::RenderTreeBuilder::MathML::attach(uint64_t a1, WTF::StringImpl **this, uint64_t *a3, WebCore::RenderObject *a4)
{
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebCore::RenderMathMLFencedOperator *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::Element *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  WebCore::RenderObject *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const WebCore::Element *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WebCore::RenderMathMLFencedOperator *v44;
  uint64_t v45;
  __int16 v46;
  const WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  const WebCore::Element *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  WebCore::RenderMathMLFencedOperator **v64;
  WTF *v65;
  uint64_t *v66;
  WTF::StringImpl *v67;
  WebCore::RenderObject *v68;
  uint64_t *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WebCore::RenderObject *v72;
  uint64_t v73;
  WebCore::RenderMathMLFencedOperator *v74;
  WebCore::RenderMathMLFencedOperator *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  char v80;
  WTF::StringImpl *v81;
  uint64_t v82[8];

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
  {
    goto LABEL_25;
  }
  WebCore::RenderMathMLFenced::updateFromElement((WebCore::RenderMathMLFenced *)this, (WTF::StringImpl *)this);
  v9 = this[26];
  if (v9)
    *(_DWORD *)v9 += 2;
  v77 = v9;
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay(this + 10, (WTF::StringImpl *)1, v8, (uint64_t)v82);
  v11 = (WebCore::RenderMathMLFencedOperator *)bmalloc::api::isoAllocate();
  v12 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v11, 53, v10, v82, 76, 0);
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_QWORD *)v12 = off_1E343A178;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v13 = 1;
  *((_QWORD *)v11 + 25) = v13;
  (*(void (**)(WebCore::RenderMathMLFencedOperator *, _QWORD))(*(_QWORD *)v11 + 168))(v11, 0);
  *((_BYTE *)v11 + 208) = 0;
  *((_BYTE *)v11 + 212) = 0;
  *((_WORD *)v11 + 108) = 0;
  *(_QWORD *)((char *)v11 + 220) = 0;
  *(_QWORD *)((char *)v11 + 225) = 0;
  *((_DWORD *)v11 + 59) = 0;
  *((_QWORD *)v11 + 30) = 0;
  *((_QWORD *)v11 + 35) = 0;
  *((_QWORD *)v11 + 36) = 0;
  *((_DWORD *)v11 + 74) = 0;
  *(_QWORD *)((char *)v11 + 300) = 1065353216;
  *((_WORD *)v11 + 124) = 0;
  *(_QWORD *)v11 = off_1E343B858;
  *((_BYTE *)v11 + 308) = 1;
  *((_DWORD *)v11 + 79) = 1;
  *((_WORD *)v11 + 160) = 2;
  WebCore::RenderMathMLFencedOperator::updateOperatorContent(v11, (const WTF::String *)&v77);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v82, v14);
  WebCore::RenderElement::initializeStyle(v11, v15, v16, v17);
  v19 = v77;
  v77 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  v77 = v11;
  v21 = *((unsigned int *)this + 16);
  if (v21 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    v22 = *(WebCore::RenderObject **)((v21 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  else
    v22 = 0;
  WebCore::RenderTreeBuilder::Block::attach(v20, (WebCore::RenderBlock *)this, (const WTF::StringImpl *)&v77, v22);
  if (v77)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v77, (uint64_t)v77);
  v24 = this[27];
  if (v24)
    *(_DWORD *)v24 += 2;
  v81 = v24;
  v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay(this + 10, (WTF::StringImpl *)1, v23, (uint64_t)v82);
  v26 = (_QWORD *)bmalloc::api::isoAllocate();
  v27 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v26, 53, v25, v82, 76, 0);
  *(_OWORD *)(v27 + 184) = 0u;
  *(_OWORD *)(v27 + 168) = 0u;
  *(_OWORD *)(v27 + 152) = 0u;
  *(_QWORD *)v27 = off_1E343A178;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v28 = 1;
  v26[25] = v28;
  (*(void (**)(_QWORD *, _QWORD))(*v26 + 168))(v26, 0);
  *((_BYTE *)v26 + 208) = 0;
  *((_BYTE *)v26 + 212) = 0;
  *((_WORD *)v26 + 108) = 0;
  *(_QWORD *)((char *)v26 + 220) = 0;
  *(_QWORD *)((char *)v26 + 225) = 0;
  *((_DWORD *)v26 + 59) = 0;
  v26[30] = 0;
  v26[35] = 0;
  v26[36] = 0;
  *((_DWORD *)v26 + 74) = 0;
  *(_QWORD *)((char *)v26 + 300) = 1065353216;
  *((_WORD *)v26 + 124) = 0;
  *v26 = off_1E343B858;
  *((_BYTE *)v26 + 308) = 1;
  *((_DWORD *)v26 + 79) = 2;
  *((_WORD *)v26 + 160) = 2;
  WebCore::RenderMathMLFencedOperator::updateOperatorContent((WebCore::RenderMathMLFencedOperator *)v26, (const WTF::String *)&v81);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v82, v29);
  WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v26, v30, v31, v32);
  v34 = v81;
  v81 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v26[1];
  if (!v35)
  {
    v35 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = v26;
    v65 = (WTF *)v26[1];
    v26[1] = v35;
    if (v65)
    {
      if (*(_DWORD *)v65 == 1)
      {
        WTF::fastFree(v65, v33);
        v35 = v26[1];
        if (!v35)
          goto LABEL_20;
      }
      else
      {
        --*(_DWORD *)v65;
      }
    }
  }
  ++*(_DWORD *)v35;
LABEL_20:
  v36 = this[29];
  this[29] = (WTF::StringImpl *)v35;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::fastFree(v36, v33);
    else
      --*(_DWORD *)v36;
  }
  v37 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  v82[0] = (uint64_t)v26;
  WebCore::RenderTreeBuilder::Block::attach(v37, (WebCore::RenderBlock *)this, (const WTF::StringImpl *)v82, 0);
  if (v82[0])
    WebCore::RenderObjectDeleter::operator()((uint64_t)v82, v82[0]);
LABEL_25:
  v38 = this[28];
  if (!v38)
    goto LABEL_36;
  if ((*(_BYTE *)(*a3 + 45) & 1) != 0 || (v39 = *(_QWORD *)(*(_QWORD *)(*a3 + 24) + 8)) == 0)
  {
    v40 = 0;
  }
  else
  {
    v40 = 0;
    do
    {
      v40 += (*(unsigned __int16 *)(v39 + 28) >> 3) & 1;
      v39 = *(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFLL;
    }
    while (v39);
  }
  v41 = v40 - (a4 == 0);
  if (!v41)
  {
LABEL_36:
    v44 = 0;
    if (a4)
      goto LABEL_54;
    goto LABEL_69;
  }
  v42 = *((_DWORD *)v38 + 1);
  if (v41 <= v42)
  {
    v43 = v41 - 1;
  }
  else
  {
    if (!v42)
    {
      __break(0xC471u);
      return;
    }
    v43 = v42 - 1;
  }
  v45 = *((_QWORD *)v38 + 1);
  if ((*((_BYTE *)v38 + 16) & 4) != 0)
    v46 = *(unsigned __int8 *)(v45 + v43);
  else
    v46 = *(_WORD *)(v45 + 2 * v43);
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 1;
  LOWORD(v82[0]) = v46;
  WTF::StringBuilder::append();
  v48 = v77;
  if (v77
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v77),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v77),
        (v48 = v77) != 0))
  {
    *(_DWORD *)v48 += 2;
  }
  v81 = v48;
  v49 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay(this + 10, (WTF::StringImpl *)1, v47, (uint64_t)v82);
  v44 = (WebCore::RenderMathMLFencedOperator *)bmalloc::api::isoAllocate();
  v50 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v44, 53, v49, v82, 76, 0);
  *(_OWORD *)(v50 + 184) = 0u;
  *(_OWORD *)(v50 + 168) = 0u;
  *(_OWORD *)(v50 + 152) = 0u;
  *(_QWORD *)v50 = off_1E343A178;
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v51 = 1;
  *((_QWORD *)v44 + 25) = v51;
  (*(void (**)(WebCore::RenderMathMLFencedOperator *, _QWORD))(*(_QWORD *)v44 + 168))(v44, 0);
  *((_BYTE *)v44 + 208) = 0;
  *((_BYTE *)v44 + 212) = 0;
  *((_WORD *)v44 + 108) = 0;
  *(_QWORD *)((char *)v44 + 220) = 0;
  *(_QWORD *)((char *)v44 + 225) = 0;
  *((_DWORD *)v44 + 59) = 0;
  *((_QWORD *)v44 + 30) = 0;
  *((_QWORD *)v44 + 35) = 0;
  *((_QWORD *)v44 + 36) = 0;
  *((_DWORD *)v44 + 74) = 0;
  *(_QWORD *)((char *)v44 + 300) = 1065353216;
  *((_WORD *)v44 + 124) = 0;
  *(_QWORD *)v44 = off_1E343B858;
  *((_BYTE *)v44 + 308) = 1;
  *((_DWORD *)v44 + 79) = 0;
  *((_WORD *)v44 + 160) = 16;
  WebCore::RenderMathMLFencedOperator::updateOperatorContent(v44, (const WTF::String *)&v81);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v82, v52);
  WebCore::RenderElement::initializeStyle(v44, v53, v54, v55);
  v57 = v81;
  v81 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v56);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v78;
  v78 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v56);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v77;
  v77 = 0;
  if (!v59)
    goto LABEL_53;
  if (*(_DWORD *)v59 != 2)
  {
    *(_DWORD *)v59 -= 2;
LABEL_53:
    if (a4)
      goto LABEL_54;
    goto LABEL_69;
  }
  WTF::StringImpl::destroy(v59, v56);
  if (a4)
  {
LABEL_54:
    v60 = *(uint64_t **)(*(_QWORD *)a1 + 72);
    v61 = *a3;
    *a3 = 0;
    v76 = v61;
    WebCore::RenderTreeBuilder::Block::attach(v60, (WebCore::RenderBlock *)this, (const WTF::StringImpl *)&v76, a4);
    if (v76)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v76, v76);
    if (v44)
    {
      v62 = *(uint64_t **)(*(_QWORD *)a1 + 72);
      v75 = v44;
      WebCore::RenderTreeBuilder::Block::attach(v62, (WebCore::RenderBlock *)this, (const WTF::StringImpl *)&v75, a4);
      v63 = (uint64_t)v75;
      if (v75)
      {
        v64 = &v75;
LABEL_80:
        WebCore::RenderObjectDeleter::operator()((uint64_t)v64, v63);
        return;
      }
    }
    return;
  }
LABEL_69:
  if (v44)
  {
    v66 = *(uint64_t **)(*(_QWORD *)a1 + 72);
    v74 = v44;
    v67 = this[29];
    v68 = v67 ? (WebCore::RenderObject *)*((_QWORD *)v67 + 1) : 0;
    WebCore::RenderTreeBuilder::Block::attach(v66, (WebCore::RenderBlock *)this, (const WTF::StringImpl *)&v74, v68);
    if (v74)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v74, (uint64_t)v74);
  }
  v69 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  v70 = *a3;
  *a3 = 0;
  v73 = v70;
  v71 = this[29];
  if (v71)
    v72 = (WebCore::RenderObject *)*((_QWORD *)v71 + 1);
  else
    v72 = 0;
  WebCore::RenderTreeBuilder::Block::attach(v69, (WebCore::RenderBlock *)this, (const WTF::StringImpl *)&v73, v72);
  v63 = v73;
  if (v73)
  {
    v64 = (WebCore::RenderMathMLFencedOperator **)&v73;
    goto LABEL_80;
  }
}

WTF *WebCore::RenderTreeBuilder::MultiColumn::createFragmentedFlow(uint64_t **this, WebCore::RenderBlockFlow *a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::Element *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::RenderTextFragment *v21;
  uint64_t v22;
  WTF *result;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::SVGTextLayoutAttributes **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;

  WebCore::RenderBlockFlow::setChildrenInline((uint64_t)a2, 0);
  (*(void (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)a2 + 1648))(a2);
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v31 = (const WTF::StringImpl *)(*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)a2 + 648))(a2);
    if (v31)
    {
      v4 = v31;
      if (*((_BYTE *)v31 + 46) == 25)
        WebCore::RenderTreeBuilder::MultiColumn::restoreColumnSpannersForContainer(this, a2, v31, v32, v33, v34);
    }
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)a2 + 10, (WTF::StringImpl *)1, v4, (uint64_t)&v36);
  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderObject::RenderObject(v6, 25, v5, 92, 513);
  *(_QWORD *)v7 = off_1E3422BC8;
  *(_QWORD *)(v7 + 64) = 0;
  v8 = (unsigned int *)(v7 + 64);
  *(_QWORD *)(v7 + 70) = 0;
  *(_DWORD *)(v7 + 80) = 0;
  v9 = v37;
  v10 = v38;
  v37 = 0;
  *(_QWORD *)(v7 + 88) = v9;
  *(_QWORD *)(v7 + 96) = v10;
  v11 = v39;
  v39 = 0u;
  *(_OWORD *)(v7 + 104) = v11;
  *(_QWORD *)(v7 + 120) = v40;
  v12 = v41;
  v41 = 0u;
  *(_OWORD *)(v7 + 128) = v12;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_QWORD *)(v7 + 192) = 0;
  *(_DWORD *)(v7 + 200) = -1;
  *(_BYTE *)(v7 + 204) &= 0xFCu;
  *(_BYTE *)(v7 + 208) = 0;
  *(_BYTE *)(v7 + 212) = 0;
  *(_DWORD *)(v7 + 240) = 0;
  *(_DWORD *)(v7 + 20) |= 0x40000u;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_OWORD *)(v7 + 280) = 0u;
  *(_OWORD *)(v7 + 296) = 0u;
  *(_OWORD *)(v7 + 312) = 0u;
  *(_BYTE *)(v7 + 328) = *(_BYTE *)(v7 + 328) & 0xF0 | 6;
  *(_QWORD *)v7 = off_1E342CBE0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v13 = 0;
  *(_QWORD *)(v6 + 336) = v13;
  *(_QWORD *)(v6 + 344) = 0;
  *(_DWORD *)(v6 + 352) = 1;
  *(_QWORD *)(v6 + 361) = 0;
  *(_QWORD *)(v6 + 356) = 0;
  *(_DWORD *)(v6 + 20) |= 0x10000000u;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v36, v14);
  WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v6, v15, v16, v17);
  v18 = (uint64_t *)(*this)[9];
  v35 = v6;
  v36 = 0;
  WebCore::RenderTreeBuilder::Block::attach(v18, a2, (const WTF::StringImpl *)&v35, 0);
  v19 = v35;
  v35 = 0;
  if (v19)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v35, v19);
  v20 = *((unsigned int *)a2 + 16);
  if (v20 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
    v21 = *(WebCore::RenderTextFragment **)((v20 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
  else
    v21 = 0;
  WebCore::RenderTreeBuilder::moveChildren((uint64_t)*this, (uint64_t)a2, (WebCore::RenderTable *)v6, v21, (WebCore::RenderTextFragment *)v6, 0, 1);
  if ((*((_BYTE *)a2 + 45) & 1) == 0)
  {
    v22 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v22)
    {
      if ((*(_WORD *)(v22 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      {
        v24 = *((unsigned __int8 *)v8 + 4);
        for (i = *v8; ; i = *(unsigned int *)(v27 + 47))
        {
          v26 = i | (v24 << 32);
          if (!v26)
            break;
          v27 = *(_QWORD *)(v26 + 8);
          if (!v27)
            break;
          if ((*(_BYTE *)(v27 + 45) & 4) != 0)
          {
LABEL_18:
            if ((*(_BYTE *)(v27 + 45) & 1) == 0)
            {
              v28 = *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8);
              if (v28)
              {
                if ((*(_WORD *)(v28 + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
                {
                  WebCore::RenderTreeBuilder::move((uint64_t)*this, (WebCore::RenderElement *)v6, a2, (WebCore::RenderBox *)v27, 0, 1);
                }
              }
            }
            while (1)
            {
              v29 = *(unsigned int *)(v27 + 47);
              if (!(v29 | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32)))
                break;
              v27 = *(_QWORD *)((v29 | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32)) + 8);
              if (!v27)
                break;
              if ((*(_BYTE *)(v27 + 45) & 4) != 0)
                goto LABEL_18;
            }
            v30 = v36;
            result = WebCore::RenderBlockFlow::setMultiColumnFlow(a2, (WebCore::RenderMultiColumnFlow *)v6);
            if (v30)
              return (WTF *)WebCore::RenderObjectDeleter::operator()((uint64_t)&v36, v30);
            return result;
          }
          v24 = *(unsigned __int8 *)(v27 + 51);
        }
      }
    }
  }
  return WebCore::RenderBlockFlow::setMultiColumnFlow(a2, (WebCore::RenderMultiColumnFlow *)v6);
}

WTF *WebCore::RenderTreeBuilder::MultiColumn::destroyFragmentedFlow(uint64_t **this, WebCore::RenderBlockFlow *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::SVGTextLayoutAttributes **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WTF *v18;
  char *v19;
  _QWORD *v20;
  WTF *v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::RenderBlockFlow *v25;
  WebCore::RenderBlockFlow *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  WebCore::RenderBlockFlow **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  WebCore::RenderTextFragment *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::SVGTextLayoutAttributes **v48;
  void *v49;
  WTF *v50;
  uint64_t *v51;
  WebCore::RenderTable *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  WTF *result;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  WebCore::RenderBlockFlow *v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;

  v4 = *((_QWORD *)a2 + 28);
  if (v4 && (v64 = *(_QWORD *)(v4 + 24)) != 0)
    v5 = *(_QWORD *)(v64 + 8);
  else
    v5 = 0;
  WebCore::RenderFragmentedFlow::deleteLines((uint64_t *)v5, a2);
  v10 = *(_QWORD **)(v5 + 336);
  v71 = 0;
  v72 = 0;
  v11 = (_QWORD *)*v10;
  if (v11)
  {
    v12 = *((unsigned int *)v11 - 1);
    v13 = &v11[2 * v12];
    if (*((_DWORD *)v11 - 3))
    {
      v14 = v11;
      if ((_DWORD)v12)
      {
        v15 = 16 * v12;
        v14 = v11;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 2;
          v15 -= 16;
          if (!v15)
          {
            v14 = v13;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v14 = &v11[2 * v12];
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  v13 = &v11[2 * v12];
  if (v11)
  {
LABEL_10:
    v16 = &v11[2 * *((unsigned int *)v11 - 1)];
    goto LABEL_15;
  }
  v16 = 0;
LABEL_15:
  if (v16 == v14)
  {
    v23 = 0;
    v22 = 0;
    v69 = 0;
    v70 = 0;
  }
  else
  {
    LODWORD(v17) = 0;
    do
    {
      v18 = (WTF *)v14[1];
      if (v18)
        v18 = (WTF *)*((_QWORD *)v18 + 1);
      v69 = v18;
      if ((_DWORD)v17 == (_DWORD)v72)
      {
        v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v71, v17 + 1, (unint64_t)&v69);
        LODWORD(v17) = HIDWORD(v72);
        *((_QWORD *)v71 + HIDWORD(v72)) = *(_QWORD *)v19;
      }
      else
      {
        *((_QWORD *)v71 + v17) = v18;
      }
      v17 = (v17 + 1);
      HIDWORD(v72) = v17;
      v20 = v14 + 2;
      v14 = v13;
      if (v20 != v13)
      {
        v14 = v20;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 2;
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
    }
    while (v14 != v16);
    v21 = v71;
    v69 = 0;
    v70 = 0;
    if ((_DWORD)v17)
    {
      v22 = 0;
      v23 = 0;
      v24 = 8 * v17;
      do
      {
        v25 = *(WebCore::RenderBlockFlow **)(*(_QWORD *)v21 + 32);
        if (v25)
          v25 = (WebCore::RenderBlockFlow *)*((_QWORD *)v25 + 1);
        if (v25 == (WebCore::RenderBlockFlow *)v5)
          v26 = a2;
        else
          v26 = v25;
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 200) + 8);
        WebCore::RenderTreeBuilder::detach(&v66, *(WebCore::RenderObject **)(*(_QWORD *)(v27 + 32) + 8), (uint64_t **)v27, *this, 0, 0, v9);
        v28 = v66;
        v66 = 0;
        v67 = v26;
        v68 = v28;
        if (v23 == (_DWORD)v70)
        {
          v29 = (uint64_t *)WTF::Vector<std::pair<WebCore::RenderElement *,std::unique_ptr<WebCore::RenderObject,WebCore::RenderObjectDeleter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, v23 + 1, (unint64_t)&v67);
          v23 = HIDWORD(v70);
          v22 = v69;
          v30 = (_QWORD *)((char *)v69 + 16 * HIDWORD(v70));
          v32 = *v29;
          v31 = v29 + 1;
          *v30 = v32;
          v33 = v30 + 1;
        }
        else
        {
          v34 = (WebCore::RenderBlockFlow **)((char *)v22 + 16 * v23);
          *v34 = v26;
          v33 = (uint64_t *)(v34 + 1);
          v31 = &v68;
        }
        v35 = *v31;
        *v31 = 0;
        *v33 = v35;
        HIDWORD(v70) = ++v23;
        v36 = v68;
        v68 = 0;
        if (v36)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v68, v36);
        v6 = v66;
        v66 = 0;
        if (v6)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v66, v6);
        v21 = (WTF *)((char *)v21 + 8);
        v24 -= 8;
      }
      while (v24);
    }
    else
    {
      v23 = 0;
      v22 = 0;
    }
  }
LABEL_46:
  v37 = *(unsigned __int8 *)(v5 + 51);
  for (i = *(unsigned int *)(v5 + 47); ; i = *(unsigned int *)(v6 + 47))
  {
    v39 = i | (v37 << 32);
    if (!v39)
      break;
    v6 = *(_QWORD *)(v39 + 8);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 46) == 26)
    {
      WebCore::RenderTreeBuilder::destroy((uint64_t)*this, v6, 1, v7, v8, v9);
      goto LABEL_46;
    }
    v37 = *(unsigned __int8 *)(v6 + 51);
  }
  v40 = *((_QWORD *)a2 + 28);
  v41 = *(WTF **)(v40 + 24);
  *(_QWORD *)(v40 + 24) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
      WTF::fastFree(v41, (void *)v6);
    else
      --*(_DWORD *)v41;
  }
  if ((*((_BYTE *)a2 + 45) & 1) == 0
    && (v42 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8)) != 0
    && (*(_WORD *)(v42 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v42 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24)
    && (v58 = *((unsigned int *)a2 + 16), v58 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
    && (v59 = *(_QWORD *)((v58 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8)) != 0)
  {
    v43 = 1;
    while ((*(_BYTE *)(v59 + 45) & 4) == 0)
    {
      v60 = *(unsigned int *)(v59 + 47) | ((unint64_t)*(unsigned __int8 *)(v59 + 51) << 32);
      if (!v60)
        goto LABEL_59;
      v59 = *(_QWORD *)(v60 + 8);
      if (!v59)
        goto LABEL_60;
    }
    v43 = 1;
    while (1)
    {
      if ((*(_BYTE *)(v59 + 45) & 1) == 0)
      {
        v61 = *(_QWORD *)(*(_QWORD *)(v59 + 24) + 8);
        if (v61)
        {
          if ((*(_WORD *)(v61 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v61 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
          {
            break;
          }
        }
      }
      v62 = *(unsigned int *)(v59 + 47) | ((unint64_t)*(unsigned __int8 *)(v59 + 51) << 32);
      if (!v62)
        goto LABEL_59;
      v59 = *(_QWORD *)(v62 + 8);
      if (!v59)
        goto LABEL_59;
      while ((*(_BYTE *)(v59 + 45) & 4) == 0)
      {
        v63 = *(unsigned int *)(v59 + 47) | ((unint64_t)*(unsigned __int8 *)(v59 + 51) << 32);
        if (!v63)
          goto LABEL_59;
        v59 = *(_QWORD *)(v63 + 8);
        if (!v59)
          goto LABEL_60;
      }
    }
    v43 = 0;
  }
  else
  {
LABEL_59:
    v43 = 1;
  }
LABEL_60:
  WebCore::RenderBlockFlow::setChildrenInline((uint64_t)a2, v43);
  v44 = *(unsigned int *)(v5 + 64);
  if (v44 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32))
    v45 = *(WebCore::RenderTextFragment **)((v44 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32)) + 8);
  else
    v45 = 0;
  WebCore::RenderTreeBuilder::moveChildren((uint64_t)*this, v5, a2, v45, 0, 0, 1);
  WebCore::RenderTreeBuilder::destroy((uint64_t)*this, v5, 1, v46, v47, v48);
  if (v23)
  {
    v50 = v22;
    do
    {
      v51 = *this;
      v52 = *(WebCore::RenderTable **)v50;
      v53 = *((_QWORD *)v50 + 1);
      *((_QWORD *)v50 + 1) = 0;
      v65 = v53;
      WebCore::RenderTreeBuilder::attach((uint64_t)v51, v52, &v65);
      v54 = v65;
      v65 = 0;
      if (v54)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v65, v54);
      v50 = (WTF *)((char *)v50 + 16);
    }
    while (v50 != (WTF *)((char *)v22 + 16 * v23));
    v55 = 16 * v23;
    v56 = (void **)((char *)v22 + 8);
    do
    {
      v49 = *v56;
      *v56 = 0;
      if (v49)
        WebCore::RenderObjectDeleter::operator()((uint64_t)v56, (uint64_t)v49);
      v56 += 2;
      v55 -= 16;
    }
    while (v55);
  }
  if (v22)
  {
    v69 = 0;
    LODWORD(v70) = 0;
    WTF::fastFree(v22, v49);
  }
  result = v71;
  if (v71)
  {
    v71 = 0;
    LODWORD(v72) = 0;
    return (WTF *)WTF::fastFree(result, v49);
  }
  return result;
}

uint64_t **WebCore::RenderTreeBuilder::MultiColumn::restoreColumnSpannersForContainer(uint64_t **this, const WebCore::RenderElement *a2, WebCore::RenderMultiColumnFlow *a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  const WebCore::RenderElement *v6;
  uint64_t **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  const WebCore::RenderElement *v17;
  _BOOL4 v18;
  BOOL v19;
  const WebCore::RenderElement *v20;
  uint64_t v21;
  _QWORD *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderTable *v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  const WebCore::RenderElement *v33;
  const WebCore::RenderElement *v34;
  WTF *v35;
  uint64_t v36;

  v6 = a2;
  v7 = this;
  v8 = (_QWORD *)*((_QWORD *)a3 + 42);
  v35 = 0;
  v36 = 0;
  v9 = (_QWORD *)*v8;
  if (v9)
  {
    v10 = *((unsigned int *)v9 - 1);
    v11 = &v9[2 * v10];
    if (*((_DWORD *)v9 - 3))
    {
      v12 = v9;
      if ((_DWORD)v10)
      {
        v13 = 16 * v10;
        v12 = v9;
        while ((unint64_t)(*v12 + 1) <= 1)
        {
          v12 += 2;
          v13 -= 16;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v12 = &v9[2 * v10];
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = &v9[2 * v10];
  if (v9)
  {
LABEL_8:
    v14 = &v9[2 * *((unsigned int *)v9 - 1)];
    goto LABEL_13;
  }
  v14 = 0;
LABEL_13:
  if (v14 != v12)
  {
    v15 = 0;
    do
    {
      v16 = v12[1];
      if (v16)
      {
        v17 = *(const WebCore::RenderElement **)(v16 + 8);
        v18 = v17 != 0;
        if (v17)
          v19 = v17 == v6;
        else
          v19 = 1;
        if (v19)
        {
LABEL_27:
          if (v18)
          {
            v34 = v17;
            if (v15 == (_DWORD)v36)
            {
              this = (uint64_t **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v35, v15 + 1, (unint64_t)&v34);
              v15 = HIDWORD(v36);
              *((_QWORD *)v35 + HIDWORD(v36)) = *this;
            }
            else
            {
              *((_QWORD *)v35 + v15) = v17;
            }
            HIDWORD(v36) = ++v15;
          }
        }
        else
        {
          v20 = v17;
          while (1)
          {
            v21 = *((_QWORD *)v20 + 4);
            if (!v21)
              break;
            v20 = *(const WebCore::RenderElement **)(v21 + 8);
            v18 = v20 != 0;
            if (v20 == v6 || v20 == 0)
              goto LABEL_27;
          }
        }
      }
      v23 = v12 + 2;
      v12 = v11;
      if (v23 != v11)
      {
        v12 = v23;
        while ((unint64_t)(*v12 + 1) <= 1)
        {
          v12 += 2;
          if (v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
    }
    while (v12 != v14);
    v24 = v35;
    if (v15)
    {
      v25 = 8 * v15;
      do
      {
        v26 = *(_QWORD *)(*(_QWORD *)v24 + 200);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 8);
          if (v27)
          {
            v28 = *(_QWORD *)(*(_QWORD *)v24 + 32);
            if (v28)
              v29 = *(WebCore::RenderTable **)(v28 + 8);
            else
              v29 = 0;
            WebCore::RenderTreeBuilder::detach((uint64_t *)&v34, *(WebCore::RenderObject **)(*(_QWORD *)(v27 + 32) + 8), (uint64_t **)v27, *v7, 0, 1, a6);
            v30 = _MergedGlobals_263;
            _MergedGlobals_263 = 1;
            v31 = *v7;
            v33 = v34;
            v34 = 0;
            this = (uint64_t **)WebCore::RenderTreeBuilder::attach((uint64_t)v31, v29, (unint64_t *)&v33);
            v32 = (uint64_t)v33;
            v33 = 0;
            if (v32)
              this = (uint64_t **)WebCore::RenderObjectDeleter::operator()((uint64_t)&v33, v32);
            _MergedGlobals_263 = v30;
            a2 = v34;
            v34 = 0;
            if (a2)
              this = (uint64_t **)WebCore::RenderObjectDeleter::operator()((uint64_t)&v34, (uint64_t)a2);
          }
        }
        v24 = (WTF *)((char *)v24 + 8);
        v25 -= 8;
      }
      while (v25);
      v24 = v35;
    }
    if (v24)
    {
      v35 = 0;
      LODWORD(v36) = 0;
      return (uint64_t **)WTF::fastFree(v24, a2);
    }
  }
  return this;
}

void WebCore::RenderTreeBuilder::MultiColumn::multiColumnDescendantInserted(WebCore::RenderTreeBuilder::MultiColumn *this, WebCore::RenderMultiColumnFlow *a2, WebCore::RenderObject *a3)
{
  WebCore::RenderObject *v3;
  WebCore::RenderObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  int v15;
  WTF **v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int k;
  unsigned int v23;
  WTF **v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  WebCore::RenderMultiColumnFlow *v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::RenderObject *v42;
  WebCore::RenderObject *v43;
  uint64_t v44;
  int v45;
  char v46;
  int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  WTF *v61;
  WTF *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::RenderElement *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  const WebCore::Element *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  WebCore::RenderElement *v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  WebCore::RenderElement *v92;
  uint64_t v93;
  uint64_t v94;
  const WebCore::Element *v95;
  void *v96;
  uint64_t v97;
  WebCore::SVGTextLayoutAttributes **v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WebCore::RenderTreeBuilder::MultiColumn *v104;
  WebCore::RenderElement *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109[2];
  unint64_t v110;

  if ((byte_1ECE84BF1 & 1) != 0)
    return;
  if ((_MergedGlobals_263 & 1) != 0)
    return;
  v3 = a3;
  if ((*((_BYTE *)a3 + 52) & 7) == 1 && (*((_BYTE *)a3 + 53) & 2) != 0)
    return;
  v6 = a3;
  while (2)
  {
    v7 = *((unsigned __int8 *)v6 + 46);
    if (v7 != 27)
    {
      if (v7 == 25)
      {
        v8 = *(unsigned int *)((char *)v6 + 47);
        if (v8 | ((unint64_t)*((unsigned __int8 *)v6 + 51) << 32))
        {
          v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)v6 + 51) << 32)) + 8);
          goto LABEL_129;
        }
        return;
      }
      v26 = *((_QWORD *)a2 + 4);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 8);
        if (v27 && (*(_BYTE *)(v27 + 52) & 7) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19657765CLL);
        }
      }
      else
      {
        v27 = 0;
      }
      v28 = *((_DWORD *)v6 + 5);
      if ((v28 & 0x1800000) != 0x1000000)
      {
        v29 = v6;
        do
        {
          v30 = *((unsigned __int8 *)v29 + 51);
          for (i = *(unsigned int *)((char *)v29 + 47); ; i = *(unsigned int *)(v33 + 47))
          {
            v32 = i | (v30 << 32);
            if (!v32)
              break;
            v33 = *(_QWORD *)(v32 + 8);
            if (!v33)
              break;
            if ((*(_DWORD *)(v33 + 20) & 0x1800000) != 0x1000000)
              goto LABEL_40;
            v30 = *(unsigned __int8 *)(v33 + 51);
          }
          v34 = *((_QWORD *)v29 + 4);
          if (!v34)
            break;
          v29 = *(WebCore::RenderMultiColumnFlow **)(v34 + 8);
          v35 = !v29 || v29 == a2;
        }
        while (!v35 && (*((_DWORD *)v29 + 5) & 0x1800000) != 0x1000000);
      }
      v33 = 0;
LABEL_40:
      if (!v27)
        return;
      if ((*((_BYTE *)v6 + 45) & 4) == 0
        || (v28 & 0x800) != 0
        || (v28 & 0x1800000) == 0x1000000
        || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 11) + 32) + 24) + 56) & 8) == 0)
      {
        goto LABEL_42;
      }
      v41 = *((_QWORD *)v6 + 4);
      if (v41)
        v41 = *(_QWORD *)(v41 + 8);
      if ((*(_BYTE *)(v41 + 52) & 7) != 1)
        goto LABEL_42;
      if ((v28 & 0x10000000) == 0)
        goto LABEL_42;
      if ((*(_DWORD *)(v41 + 20) & 0x40000) != 0)
        goto LABEL_42;
      if ((WebCore::RenderMultiColumnFlow *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 648))(v6) != a2)
        goto LABEL_42;
      v42 = WebCore::RenderObject::containingBlock(v6);
      if (!v42)
        goto LABEL_42;
      v43 = v42;
      v104 = this;
      while (1)
      {
        if (*((_BYTE *)v43 + 46) == 49)
          goto LABEL_42;
        if ((*((_BYTE *)v43 + 45) & 1) == 0)
        {
          v44 = *(_QWORD *)(*((_QWORD *)v43 + 3) + 8);
          if (v44)
          {
            if ((*(_WORD *)(v44 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v44 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
            {
              goto LABEL_42;
            }
          }
        }
        v45 = *((_BYTE *)v43 + 52) & 7;
        v46 = *((_BYTE *)v43 + 53);
        if (v45 == 1 && (v46 & 4) != 0)
          goto LABEL_42;
        v48 = v46 & 2;
        if (v45 == 1 && v48 != 0)
          break;
        this = v104;
        if ((v45 != 1
           || !WebCore::RenderBlockFlow::willCreateColumns((uint64_t)v43, 0)
           && ((v50 = *((_QWORD *)v43 + 28)) == 0 || (v51 = *(_QWORD *)(v50 + 24)) == 0 || !*(_QWORD *)(v51 + 8)))
          && !WebCore::RenderBox::isUnsplittableForPagination(v43))
        {
          v43 = WebCore::RenderObject::containingBlock(v43);
          if (v43)
            continue;
        }
        goto LABEL_42;
      }
      this = v104;
      if (v43 != a2)
      {
LABEL_42:
        if (v33 && *(_BYTE *)(v33 + 46) == 27)
        {
          v77 = *(_QWORD *)(*(_QWORD *)(v33 + 200) + 8);
          v78 = *(unsigned int *)(v77 + 40);
          if (v78 | ((unint64_t)*(unsigned __int8 *)(v77 + 44) << 32))
          {
            v79 = *(_QWORD *)((v78 | ((unint64_t)*(unsigned __int8 *)(v77 + 44) << 32)) + 8);
            if (v79)
            {
              if (*(_BYTE *)(v79 + 46) == 26)
                goto LABEL_127;
            }
          }
          goto LABEL_123;
        }
        v36 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
        if ((*(_BYTE *)(v36 + 52) & 7) == 1)
        {
          v37 = *(unsigned __int8 *)(v36 + 75);
          for (j = *(unsigned int *)(v36 + 71); ; j = *(unsigned int *)(v40 + 40))
          {
            v39 = j | (v37 << 32);
            if (!v39)
              break;
            v40 = *(_QWORD *)(v39 + 8);
            if (!v40)
              break;
            if (*(_BYTE *)(v40 + 46) == 26)
            {
              v63 = *(unsigned int *)(v40 + 47) | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32);
              if (!v63)
                goto LABEL_127;
              v64 = *(_QWORD *)(v63 + 8);
              if (!v64)
                goto LABEL_127;
              if ((*(_BYTE *)(v64 + 45) & 1) == 0)
              {
                v65 = *(_QWORD *)(*(_QWORD *)(v64 + 24) + 8);
                if (v65)
                {
                  if ((*(_WORD *)(v65 + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(v65 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
                  {
                    goto LABEL_127;
                  }
                }
              }
              goto LABEL_123;
            }
            v37 = *(unsigned __int8 *)(v40 + 44);
          }
          goto LABEL_123;
        }
LABEL_198:
        __break(0xC471u);
        JUMPOUT(0x19657763CLL);
      }
      v80 = *((_QWORD *)v6 + 4);
      if (v80)
      {
        v81 = *(_QWORD *)(v80 + 8);
        if (v81 && (*(_BYTE *)(v81 + 52) & 7) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19657767CLL);
        }
        if (!v33)
          goto LABEL_179;
      }
      else
      {
        v81 = 0;
        if (!v33)
          goto LABEL_179;
      }
      v82 = *(unsigned int *)((char *)a2 + 47);
      if (v82 | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32))
      {
        v83 = *(_QWORD *)((v82 | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32)) + 8);
        if (v83)
        {
          while (*(_BYTE *)(v83 + 46) != 26)
          {
            v84 = *(unsigned int *)(v83 + 47);
            if (v84 | ((unint64_t)*(unsigned __int8 *)(v83 + 51) << 32))
            {
              v83 = *(_QWORD *)((v84 | ((unint64_t)*(unsigned __int8 *)(v83 + 51) << 32)) + 8);
              if (v83)
                continue;
            }
            goto LABEL_179;
          }
          while (!WebCore::RenderMultiColumnSet::containsRendererInFragmentedFlow((WebCore::RenderMultiColumnSet *)v83, v6))
          {
            v86 = *(unsigned int *)(v83 + 47);
            if (!(v86 | ((unint64_t)*(unsigned __int8 *)(v83 + 51) << 32)))
              goto LABEL_179;
            v83 = *(_QWORD *)((v86 | ((unint64_t)*(unsigned __int8 *)(v83 + 51) << 32)) + 8);
            if (!v83)
              goto LABEL_179;
            while (*(_BYTE *)(v83 + 46) != 26)
            {
              v85 = *(unsigned int *)(v83 + 47);
              if (v85 | ((unint64_t)*(unsigned __int8 *)(v83 + 51) << 32))
              {
                v83 = *(_QWORD *)((v85 | ((unint64_t)*(unsigned __int8 *)(v83 + 51) << 32)) + 8);
                if (v83)
                  continue;
              }
              goto LABEL_179;
            }
          }
          v87 = *(_DWORD *)(v83 + 20);
          if ((v87 & 8) == 0)
          {
            *(_DWORD *)(v83 + 20) = v87 | 8;
            v88 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v83, 0);
            WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v83, v88);
            if ((*(_BYTE *)(v83 + 21) & 0x80) != 0)
            {
              if ((*(_BYTE *)(v83 + 45) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19657769CLL);
              }
              v89 = *(_QWORD *)(v83 + 144);
              if (v89)
              {
                v90 = *(_DWORD *)(v89 + 8) + 1;
                *(_DWORD *)(v89 + 8) = v90;
              }
              else
              {
                v90 = MEMORY[8];
              }
              *(_QWORD *)(v89 + 24) = *(_QWORD *)(v89 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
              if (!v90)
              {
                __break(0xC471u);
                JUMPOUT(0x1965776BCLL);
              }
              *(_DWORD *)(v89 + 8) = v90 - 1;
            }
          }
        }
      }
LABEL_179:
      if ((*((_BYTE *)v6 + 45) & 4) != 0)
      {
        WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)(v81 + 80), (WTF::StringImpl *)1, a3, (uint64_t)v109);
        v110 = v110 & 0xFFFFFFFFFFF8FFFFLL | 0x50000;
        v91 = bmalloc::api::isoAllocate();
        v92 = (WebCore::RenderElement *)WebCore::RenderMultiColumnSpannerPlaceholder::RenderMultiColumnSpannerPlaceholder(v91, (uint64_t)a2, (uint64_t)v6, v109);
        WebCore::RenderElement::initializeStyle(v92, v93, v94, v95);
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v109, v96);
        v97 = *(_QWORD *)v104;
        v108 = v91;
        v109[0] = 0;
        WebCore::RenderTreeBuilder::attach(v97, (WebCore::RenderTable *)v81, &v108);
        v99 = v108;
        v108 = 0;
        if (v99)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v108, v99);
        WebCore::RenderTreeBuilder::detach(&v107, (WebCore::RenderObject *)v81, (uint64_t **)v6, *(uint64_t **)v104, 0, 1, v98);
        v100 = byte_1ECE84BF1;
        byte_1ECE84BF1 = 1;
        v101 = *(_QWORD *)(*(_QWORD *)v104 + 72);
        v106 = v107;
        v107 = 0;
        WebCore::RenderTreeBuilder::Block::attach(v101, (WebCore::RenderBlock *)v27);
        v102 = v106;
        v106 = 0;
        if (v102)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v106, v102);
        if (v3 == v6)
          v3 = (WebCore::RenderObject *)v91;
        byte_1ECE84BF1 = v100;
        v103 = v107;
        v107 = 0;
        if (v103)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v107, v103);
        if (v109[0])
          WebCore::RenderObjectDeleter::operator()((uint64_t)v109, v109[0]);
        v6 = (WebCore::RenderObject *)v91;
        this = v104;
LABEL_123:
        WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)(v27 + 80), (WTF::StringImpl *)1, a3, (uint64_t)v109);
        v66 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
        v67 = WebCore::RenderFragmentContainerSet::RenderFragmentContainerSet((uint64_t)v66, 26, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8), v109, (uint64_t)a2);
        *(_QWORD *)v67 = off_1E342D400;
        *(_DWORD *)(v67 + 284) = 1;
        *(_QWORD *)(v67 + 288) = 0;
        *(_QWORD *)(v67 + 293) = 0;
        *(_OWORD *)(v67 + 304) = xmmword_1969FCD50;
        *(_QWORD *)(v67 + 320) = v67 + 336;
        *(_QWORD *)(v67 + 328) = 1;
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v109, v68);
        WebCore::RenderElement::initializeStyle(v66, v69, v70, v71);
        v72 = *(_QWORD *)(*(_QWORD *)this + 72);
        v109[0] = 0;
        v105 = v66;
        WebCore::RenderTreeBuilder::Block::attach(v72, (WebCore::RenderBlock *)v27);
        v73 = (uint64_t)v105;
        v105 = 0;
        if (v73)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v105, v73);
        WebCore::RenderFragmentedFlow::invalidateFragments(a2, (void *)1);
        if (v109[0])
          WebCore::RenderObjectDeleter::operator()((uint64_t)v109, v109[0]);
LABEL_127:
        if (v6)
          goto LABEL_128;
        return;
      }
      goto LABEL_198;
    }
    v10 = *((_QWORD *)v6 + 25);
    if (v10)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = 0;
    v12 = (uint64_t *)*((_QWORD *)a2 + 42);
    v13 = *(WTF **)(v11 + 8);
    if (!v13)
    {
      v13 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = v11;
      v61 = *(WTF **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v13;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1)
        {
          WTF::fastFree(v61, a2);
          v13 = *(WTF **)(v11 + 8);
        }
        else
        {
          --*(_DWORD *)v61;
        }
      }
    }
    ++*(_DWORD *)v13;
    v14 = *v12;
    if (*v12
      || (WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v12, 8u), (v14 = *v12) != 0))
    {
      v15 = *(_DWORD *)(v14 - 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = 0;
    v17 = *((_QWORD *)v13 + 1);
    v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = (v20 >> 31) ^ v20;
    for (k = 1; ; ++k)
    {
      v23 = v21 & v15;
      v24 = (WTF **)(v14 + 16 * v23);
      v25 = *v24;
      if (*v24 != (WTF *)-1)
        break;
      v16 = (WTF **)(v14 + 16 * v23);
LABEL_22:
      v21 = k + v23;
    }
    if (!v25)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*v12 - 16);
        *v16 = v13;
      }
      else
      {
        *v24 = v13;
        v16 = (WTF **)(v14 + 16 * v23);
      }
      v52 = *((_QWORD *)v6 + 1);
      if (!v52)
      {
        v52 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v52 = 1;
        *(_QWORD *)(v52 + 8) = v6;
        v62 = (WTF *)*((_QWORD *)v6 + 1);
        *((_QWORD *)v6 + 1) = v52;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1)
          {
            WTF::fastFree(v62, a2);
            v52 = *((_QWORD *)v6 + 1);
            if (!v52)
            {
LABEL_91:
              v53 = v16[1];
              v16[1] = (WTF *)v52;
              if (v53)
              {
                if (*(_DWORD *)v53 == 1)
                  WTF::fastFree(v53, a2);
                else
                  --*(_DWORD *)v53;
              }
              v54 = *v12;
              if (*v12)
                v55 = *(_DWORD *)(v54 - 12) + 1;
              else
                v55 = 1;
              *(_DWORD *)(v54 - 12) = v55;
              v56 = *v12;
              if (*v12)
                v57 = *(_DWORD *)(v56 - 12);
              else
                v57 = 0;
              v58 = (*(_DWORD *)(v56 - 16) + v57);
              v59 = *(unsigned int *)(v56 - 4);
              if (v59 > 0x400)
              {
                if (v59 > 2 * v58)
                  goto LABEL_128;
              }
              else
              {
                if (3 * v59 > 4 * v58)
                  goto LABEL_128;
                if (!(_DWORD)v59)
                {
                  v60 = 8;
                  goto LABEL_107;
                }
              }
              v60 = (_DWORD)v59 << (6 * *(_DWORD *)(v56 - 12) >= (2 * v59));
LABEL_107:
              WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v12, v60);
              goto LABEL_128;
            }
          }
          else
          {
            --*(_DWORD *)v62;
          }
        }
      }
      ++*(_DWORD *)v52;
      goto LABEL_91;
    }
    if (*((_QWORD *)v25 + 1) != v17)
      goto LABEL_22;
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, a2);
    else
      --*(_DWORD *)v13;
LABEL_128:
    v9 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 112))(v6);
    if (v9)
    {
LABEL_129:
      v6 = (WebCore::RenderObject *)v9;
      if (!v9)
        return;
      continue;
    }
    break;
  }
  if (v6 != v3)
  {
    while (1)
    {
      v74 = *(unsigned int *)((char *)v6 + 47);
      if (v74 | ((unint64_t)*((unsigned __int8 *)v6 + 51) << 32))
      {
        v9 = *(_QWORD *)((v74 | ((unint64_t)*((unsigned __int8 *)v6 + 51) << 32)) + 8);
        if (v9)
          break;
      }
      v75 = *((_QWORD *)v6 + 4);
      if (v75)
      {
        v6 = *(WebCore::RenderObject **)(v75 + 8);
        if (v6 && v6 != v3)
          continue;
      }
      return;
    }
    goto LABEL_129;
  }
}

void WebCore::RenderTreeBuilder::MultiColumn::multiColumnRelativeWillBeRemoved(_QWORD *a1, uint64_t **this, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int j;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  WebCore::RenderElement *v42;
  uint64_t v43;
  int v44;

  WebCore::RenderFragmentedFlow::invalidateFragments((WebCore::RenderObject *)this, (void *)1);
  if (*(_BYTE *)(a3 + 46) == 27)
  {
    v8 = this[42];
    v9 = *(_QWORD *)(a3 + 200);
    if (v9)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = 0;
    v11 = *v8;
    if (*v8)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      for (i = 1; ; ++i)
      {
        v18 = v16;
        v19 = *(_QWORD *)(v11 + 16 * v16);
        if (v19 != -1)
        {
          if (!v19)
            return;
          if (*(_QWORD *)(v19 + 8) == v10)
            break;
        }
        v16 = (v18 + i) & v12;
      }
      if ((_DWORD)v18 != *(_DWORD *)(v11 - 4))
        WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::remove(v8, (WTF **)(v11 + 16 * v18));
    }
    return;
  }
  v20 = a3;
  if ((*(_BYTE *)(a3 + 45) & 2) != 0)
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 88) + 32) + 24) + 56) & 8) == 0)
    return;
  v21 = *(uint64_t **)(a3 + 32);
  if (v21)
    v21 = (uint64_t *)v21[1];
  v22 = this[4];
  if (v22)
    v22 = (uint64_t *)v22[1];
  if (v21 != v22)
    return;
  if ((*(_BYTE *)(a3 + 45) & 4) == 0)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1965779F4);
  }
  v23 = this[42];
  v24 = *v23;
  if (*v23)
  {
    v25 = *(_DWORD *)(v24 - 8);
    v26 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    for (j = 1; ; ++j)
    {
      v31 = v29;
      v32 = *(_QWORD *)(v24 + 16 * v29);
      if (v32 != -1)
      {
        if (!v32)
          goto LABEL_38;
        if (*(_QWORD *)(v32 + 8) == a3)
          break;
      }
      v29 = (v31 + j) & v25;
    }
    if ((_DWORD)v31 != *(_DWORD *)(v24 - 4))
    {
      v33 = v24 + 16 * v31;
      v34 = *(WTF **)(v33 + 8);
      *(_QWORD *)(v33 + 8) = 0;
      v35 = *v23;
      if (!*v23 || (v35 += 16 * *(unsigned int *)(v35 - 4), v35 != v33))
      {
        if (v35 != v33)
          WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::remove(v23, (WTF **)v33);
      }
      if (v34)
      {
        v36 = (void *)*((_QWORD *)v34 + 1);
        if (v36)
          WebCore::RenderTreeBuilder::destroy(*a1, v36, a4);
        if (*(_DWORD *)v34 == 1)
          WTF::fastFree(v34, v36);
        else
          --*(_DWORD *)v34;
      }
    }
  }
LABEL_38:
  v37 = *(unsigned int *)(a3 + 47);
  if (v37 | ((unint64_t)*(unsigned __int8 *)(a3 + 51) << 32))
  {
    v38 = *(_QWORD *)((v37 | ((unint64_t)*(unsigned __int8 *)(a3 + 51) << 32)) + 8);
    if (v38)
    {
      v39 = *(unsigned int *)(a3 + 40);
      if (v39 | ((unint64_t)*(unsigned __int8 *)(a3 + 44) << 32))
      {
        v40 = *(_QWORD *)((v39 | ((unint64_t)*(unsigned __int8 *)(a3 + 44) << 32)) + 8);
        if (v40)
        {
          if (*(_BYTE *)(v40 + 46) == 26 && *(_BYTE *)(v38 + 46) == 26)
          {
            WebCore::RenderTreeBuilder::destroy(*a1, v38, 1);
            v41 = *(_DWORD *)(v40 + 20);
            if ((v41 & 8) == 0)
            {
              *(_DWORD *)(v40 + 20) = v41 | 8;
              v42 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v40, 0);
              WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v40, v42);
              if ((*(_BYTE *)(v40 + 21) & 0x80) != 0)
              {
                if ((*(_BYTE *)(v40 + 45) & 0x10) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196577A14);
                }
                v43 = *(_QWORD *)(v40 + 144);
                if (v43)
                {
                  v44 = *(_DWORD *)(v43 + 8) + 1;
                  *(_DWORD *)(v43 + 8) = v44;
                }
                else
                {
                  v44 = MEMORY[8];
                }
                *(_QWORD *)(v43 + 24) = *(_QWORD *)(v43 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                if (v44)
                {
                  *(_DWORD *)(v43 + 8) = v44 - 1;
                  return;
                }
                goto LABEL_56;
              }
            }
          }
        }
      }
    }
  }
}

WebCore::RenderTreeBuilder::MultiColumn *WebCore::RenderTreeBuilder::MultiColumn::adjustBeforeChildForMultiColumnSpannerIfNeeded(WebCore::RenderTreeBuilder::MultiColumn *this, WebCore::RenderObject *a2)
{
  WebCore::RenderTreeBuilder::MultiColumn *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v17;

  v2 = this;
  if ((*((_BYTE *)this + 45) & 4) != 0)
  {
    v3 = *(unsigned int *)((char *)this + 47);
    if (v3 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
    {
      v4 = *(_QWORD *)((v3 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 46) == 26)
        {
          v5 = *(_QWORD *)(v4 + 248);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v7 = **(_QWORD **)(v6 + 336);
              if (!v7)
                return 0;
              v8 = *(_DWORD *)(v7 - 8);
              v9 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
              v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
              v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
              v12 = v8 & ((v11 >> 31) ^ v11);
              for (i = 1; ; v12 = (v14 + i++) & v8)
              {
                v14 = v12;
                v15 = *(_QWORD *)(v7 + 16 * v12);
                if (v15 != -1)
                {
                  if (!v15)
                    return 0;
                  if (*(WebCore::RenderTreeBuilder::MultiColumn **)(v15 + 8) == this)
                    break;
                }
              }
              v16 = *(WTF **)(v7 + 16 * v14 + 8);
              if (v16)
              {
                v17 = (*(_DWORD *)v16)++;
                v2 = (WebCore::RenderTreeBuilder::MultiColumn *)*((_QWORD *)v16 + 1);
                if (v17)
                  *(_DWORD *)v16 = v17;
                else
                  WTF::fastFree(v16, a2);
              }
              else
              {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

BOOL WebCore::generatesLineBoxesForInlineChild(WebCore *this, WebCore::RenderBlock *a2, WebCore::RenderObject *a3)
{
  __int16 v4;
  char v5;
  int v6;
  WebCore *v7;
  WebCore::RenderBlock *v8;
  char v9;
  char v10;
  int v11;
  char v12;

  v7 = this;
  v8 = a2;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v4 = 1;
    v5 = 1;
    v6 = 0;
    if ((WebCore::requiresLineBox((uint64_t)&v7, (const WebCore::RenderInline *)&v4, 0) & 1) != 0)
      break;
    WebCore::LegacyInlineIterator::increment((uint64_t)&v7, 0);
    if (!v8)
      return 0;
  }
  return v8 != 0;
}

unint64_t WTF::Vector<std::pair<WebCore::RenderElement *,std::unique_ptr<WebCore::RenderObject,WebCore::RenderObjectDeleter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<std::pair<WebCore::RenderElement *,std::unique_ptr<WebCore::RenderObject,WebCore::RenderObjectDeleter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<std::pair<WebCore::RenderElement *,std::unique_ptr<WebCore::RenderObject,WebCore::RenderObjectDeleter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WebCore::RenderElement *,std::unique_ptr<WebCore::RenderObject,WebCore::RenderObjectDeleter>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = (_QWORD *)result;
        v11 = 16 * v8;
        v12 = (void **)((char *)v7 + 8);
        do
        {
          *v10 = *(v12 - 1);
          v13 = *v12;
          *v12 = 0;
          v10[1] = v13;
          v9 = *v12;
          *v12 = 0;
          if (v9)
            result = WebCore::RenderObjectDeleter::operator()((uint64_t)v12, (uint64_t)v9);
          v12 += 2;
          v10 += 2;
          v11 -= 16;
        }
        while (v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (WTF **)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 == (WTF *)-1)
        goto LABEL_29;
      if (v14)
        break;
      v15 = v4 + 16 * v11;
      v16 = *(WTF **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WTF::fastFree(v16, v8);
          v14 = *v13;
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
      *v13 = 0;
      if (!v14)
        goto LABEL_29;
      if (*(_DWORD *)v14 == 1)
      {
LABEL_38:
        WTF::fastFree(v14, v8);
        goto LABEL_29;
      }
      --*(_DWORD *)v14;
LABEL_29:
      if (++v11 == v12)
        goto LABEL_42;
    }
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 8);
    else
      v18 = 0;
    v19 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
    v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
    v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
    v22 = v18 & (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~((_DWORD)v21 << 27)));
    v23 = 1;
    do
    {
      v24 = v22;
      v25 = *(_QWORD *)(v17 + 16 * v22);
      v22 = (v22 + v23++) & v18;
    }
    while (v25);
    v26 = (WTF **)(v17 + 16 * v24);
    v27 = v26[1];
    v26[1] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
      {
        WTF::fastFree(v27, v8);
        v32 = *v26;
        *v26 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1)
            WTF::fastFree(v32, v8);
          else
            --*(_DWORD *)v32;
        }
        goto LABEL_25;
      }
      --*(_DWORD *)v27;
    }
    *v26 = 0;
LABEL_25:
    v28 = *v13;
    *v13 = 0;
    *v26 = v28;
    v29 = v4 + 16 * v11;
    v30 = *(WTF **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = 0;
    v26[1] = v30;
    v31 = *(WTF **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v8);
      else
        --*(_DWORD *)v31;
    }
    v14 = *v13;
    *v13 = 0;
    if (!v14)
      goto LABEL_29;
    if (*(_DWORD *)v14 == 1)
      goto LABEL_38;
    --*(_DWORD *)v14;
    goto LABEL_29;
  }
  if (v4)
LABEL_42:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::remove(uint64_t *a1, WTF **a2)
{
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *a2;
  *a2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = a2[1];
  *a2 = (WTF *)-1;
  a2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v10 >> 1);
  }
}

WebCore::RenderElement *WebCore::RenderTreeBuilder::Ruby::findOrCreateParentForStyleBasedRubyChild(WebCore::RenderTreeBuilder::Ruby *this, WebCore::RenderElement *a2, const WebCore::RenderObject *a3, WebCore::RenderObject **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  const WebCore::Element *v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  const WebCore::RenderObject *v27;
  unint64_t *v28;
  WebCore::RenderObject *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::RenderElement *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  const WebCore::Element *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  const WebCore::Element *v46;
  uint64_t *v47;
  int v49;
  void *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  const WebCore::RenderObject *v54;
  const WebCore::RenderObject *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;

  if ((*((_BYTE *)a3 + 45) & 2) == 0
    && (*((_QWORD *)a3 + 12) & 0x1FLL) == 0x16
    && (*((_QWORD *)a2 + 12) & 0x1FLL) == 0x17)
  {
    return a2;
  }
  if ((*((_QWORD *)a2 + 12) & 0x1FLL) == 0x17)
  {
    v8 = *((unsigned int *)a2 + 16);
    if (v8 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
    {
      v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
      if (v9)
      {
        ++*(_DWORD *)(v9 + 16);
        while ((*(_BYTE *)(v9 + 45) & 1) != 0)
        {
          if ((*(_BYTE *)(v9 + 45) & 2) != 0)
          {
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 96) & 0x1FLL) == 0x16)
            {
              __break(0xC471u);
              goto LABEL_69;
            }
          }
          else if ((*(_QWORD *)(v9 + 96) & 0x1FLL) == 0x16)
          {
            v49 = *(_DWORD *)(v9 + 16);
            if (v49)
            {
              *(_DWORD *)(v9 + 16) = v49 - 1;
              return (WebCore::RenderElement *)v9;
            }
LABEL_67:
            __break(0xC471u);
            JUMPOUT(0x196578600);
          }
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9);
          if (v10)
            ++*(_DWORD *)(v10 + 16);
          v11 = *(_DWORD *)(v9 + 16);
          if (!v11)
          {
            __break(0xC471u);
            JUMPOUT(0x1965785C0);
          }
          *(_DWORD *)(v9 + 16) = v11 - 1;
          v9 = v10;
          if (!v10)
            goto LABEL_20;
        }
        v12 = *(_DWORD *)(v9 + 16);
        if (!v12)
          goto LABEL_67;
        *(_DWORD *)(v9 + 16) = v12 - 1;
      }
    }
  }
LABEL_20:
  v13 = (_QWORD *)((char *)a2 + 80);
  if ((*((_QWORD *)a2 + 12) & 0x1FLL) != 0x16)
  {
    WebCore::RenderStyle::createAnonymousStyleWithDisplay(v13, (WTF::StringImpl *)0x16, a3, (uint64_t)&v56);
    v58 = v58 & 0xFFFFFFFFFE3FFFFFLL | 0xC00000;
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
    v15 = bmalloc::api::isoAllocate();
    v16 = WebCore::RenderObject::RenderObject(v15, 16, v14, 56, 0);
    *(_QWORD *)v16 = off_1E3422BC8;
    *(_QWORD *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 70) = 0;
    *(_DWORD *)(v16 + 80) = 0;
    v17 = v57;
    v18 = v58;
    v57 = 0;
    *(_QWORD *)(v16 + 88) = v17;
    *(_QWORD *)(v16 + 96) = v18;
    v19 = v59;
    v59 = 0u;
    *(_OWORD *)(v16 + 104) = v19;
    *(_QWORD *)(v16 + 120) = v60;
    v20 = v61;
    v61 = 0u;
    *(_OWORD *)(v16 + 128) = v20;
    *(_QWORD *)(v16 + 144) = 0;
    *(_QWORD *)v16 = off_1E3428870;
    *(_OWORD *)(v16 + 152) = 0u;
    *(_DWORD *)(v16 + 20) |= 0x40000u;
    WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v16, v21, v22, v23);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v56, v24);
    v25 = *(WTF **)(v15 + 8);
    if (!v25)
    {
      v25 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v25 = 1;
      *((_QWORD *)v25 + 1) = v15;
      v51 = *(WTF **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = v25;
      if (v51)
      {
        if (*(_DWORD *)v51 == 1)
        {
          WTF::fastFree(v51, v50);
          v25 = *(WTF **)(v15 + 8);
          if (!v25)
            goto LABEL_26;
        }
        else
        {
          --*(_DWORD *)v51;
        }
      }
    }
    ++*(_DWORD *)v25;
LABEL_26:
    v26 = *(_QWORD *)this;
    v55 = (const WebCore::RenderObject *)v15;
    v56 = 0;
    WebCore::RenderTreeBuilder::attach(v26, a2, (unint64_t *)&v55);
    v27 = v55;
    v55 = 0;
    if (!v27)
      goto LABEL_46;
    v28 = (unint64_t *)&v55;
    goto LABEL_45;
  }
  if ((*((_BYTE *)a3 + 45) & 2) == 0 && (*((_QWORD *)a3 + 12) & 0x1ELL) == 0x18)
    return a2;
  v29 = *a4;
  if (*a4)
  {
    v30 = *((_QWORD *)v29 + 4);
    if (v30)
    {
      v9 = *(_QWORD *)(v30 + 8);
      if ((*(_QWORD *)(v9 + 96) & 0x1FLL) == 0x18)
        return (WebCore::RenderElement *)v9;
    }
    else if ((MEMORY[0x60] & 0x1F) == 0x18)
    {
      return 0;
    }
    v31 = *((unsigned int *)v29 + 10) | ((unint64_t)*((unsigned __int8 *)v29 + 44) << 32);
    if (!v31)
    {
LABEL_40:
      WebCore::RenderStyle::createAnonymousStyleWithDisplay(v13, (WTF::StringImpl *)0x18, a3, (uint64_t)&v56);
      v58 = v58 & 0xFFFFFFFFFE3FFFFFLL | 0xC00000;
      LODWORD(v60) = v60 | 0x40000000;
      v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
      v34 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
      v35 = WebCore::RenderObject::RenderObject((uint64_t)v34, 16, v33, 56, 0);
      *(_QWORD *)v35 = off_1E3422BC8;
      *(_QWORD *)(v35 + 64) = 0;
      *(_QWORD *)(v35 + 70) = 0;
      *(_DWORD *)(v35 + 80) = 0;
      v36 = v57;
      v37 = v58;
      v57 = 0;
      *(_QWORD *)(v35 + 88) = v36;
      *(_QWORD *)(v35 + 96) = v37;
      v38 = v59;
      v59 = 0u;
      *(_OWORD *)(v35 + 104) = v38;
      *(_QWORD *)(v35 + 120) = v60;
      v39 = v61;
      v61 = 0u;
      *(_OWORD *)(v35 + 128) = v39;
      *(_QWORD *)(v35 + 144) = 0;
      *(_QWORD *)v35 = off_1E3428870;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_DWORD *)(v35 + 20) |= 0x40000u;
      WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v35, v40, v41, v42);
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v56, v43);
      WebCore::RenderElement::initializeStyle(v34, v44, v45, v46);
      v25 = (WTF *)*((_QWORD *)v34 + 1);
      if (!v25)
      {
        v25 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v25 = 1;
        *((_QWORD *)v25 + 1) = v34;
        v53 = (WTF *)*((_QWORD *)v34 + 1);
        *((_QWORD *)v34 + 1) = v25;
        if (v53)
        {
          if (*(_DWORD *)v53 == 1)
          {
            WTF::fastFree(v53, v52);
            v25 = (WTF *)*((_QWORD *)v34 + 1);
            if (!v25)
              goto LABEL_42;
          }
          else
          {
            --*(_DWORD *)v53;
          }
        }
      }
      ++*(_DWORD *)v25;
LABEL_42:
      if ((*((_BYTE *)a2 + 45) & 0x20) == 0)
      {
        __break(0xC471u);
LABEL_69:
        JUMPOUT(0x196578198);
      }
      v47 = *(uint64_t **)(*(_QWORD *)this + 88);
      v56 = 0;
      v54 = v34;
      WebCore::RenderTreeBuilder::Inline::attach(v47, a2, &v54, *a4);
      v27 = v54;
      v54 = 0;
      if (!v27)
      {
LABEL_46:
        *a4 = 0;
        if (v25)
        {
          v9 = *((_QWORD *)v25 + 1);
          if (*(_DWORD *)v25 == 1)
          {
            WTF::fastFree(v25, v27);
            if (v56)
              WebCore::RenderObjectDeleter::operator()((uint64_t)&v56, v56);
          }
          else
          {
            --*(_DWORD *)v25;
          }
          return (WebCore::RenderElement *)v9;
        }
        return 0;
      }
      v28 = (unint64_t *)&v54;
LABEL_45:
      WebCore::RenderObjectDeleter::operator()((uint64_t)v28, (uint64_t)v27);
      goto LABEL_46;
    }
  }
  else
  {
    v31 = *(unsigned int *)((char *)a2 + 71) | ((unint64_t)*((unsigned __int8 *)a2 + 75) << 32);
    if (!v31)
      goto LABEL_40;
  }
  v9 = *(_QWORD *)(v31 + 8);
  if (!v9)
    goto LABEL_40;
  v32 = *(_QWORD *)(v31 + 8);
  if ((*(_BYTE *)(v9 + 45) & 2) != 0)
    v32 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8);
  if ((*(_QWORD *)(v32 + 96) & 0x1FLL) != 0x18)
    goto LABEL_40;
  *a4 = 0;
  if ((*(_BYTE *)(v9 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196578378);
  }
  return (WebCore::RenderElement *)v9;
}

void WebCore::RenderTreeBuilder::Ruby::attachForStyleBasedRuby(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  const WebCore::Element *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;

  v5 = a2;
  if ((*(_QWORD *)(a2 + 96) & 0x1FLL) == 0x17)
  {
    v7 = *a1;
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v42 = v8;
    WebCore::RenderTreeBuilder::attachToRenderElementInternal(v7, a2, &v42, a4);
    v9 = v42;
    v42 = 0;
    if (!v9)
      return;
    v10 = &v42;
    goto LABEL_34;
  }
  if (a4)
  {
    v11 = a4;
    do
    {
      v12 = v11;
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        break;
      v11 = *(_QWORD *)(v13 + 8);
    }
    while (v11 && v11 != a2);
  }
  else
  {
    v12 = 0;
  }
  v15 = *(_QWORD *)a3;
  if ((*(_BYTE *)(*(_QWORD *)a3 + 45) & 2) != 0)
    v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8);
  if ((*(_QWORD *)(v15 + 96) & 0x1FLL) == 0x19)
  {
    if (a4)
    {
      v16 = *(unsigned __int8 *)(v12 + 44);
      v17 = *(unsigned int *)(v12 + 40);
    }
    else
    {
      v16 = *(unsigned __int8 *)(a2 + 75);
      v17 = *(unsigned int *)(a2 + 71);
    }
    v18 = v17 | (v16 << 32);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 8)) == 0)
    {
      v20 = 0;
LABEL_23:
      v21 = 1;
      goto LABEL_24;
    }
    v20 = *(WTF **)(v19 + 8);
    if (!v20)
    {
      v20 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      *((_QWORD *)v20 + 1) = v19;
      v39 = *(WTF **)(v19 + 8);
      *(_QWORD *)(v19 + 8) = v20;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
        {
          WTF::fastFree(v39, (void *)a2);
          v20 = *(WTF **)(v19 + 8);
          if (!v20)
            goto LABEL_23;
        }
        else
        {
          --*(_DWORD *)v39;
        }
      }
    }
    v35 = (*(_DWORD *)v20)++;
    v38 = *((_QWORD *)v20 + 1);
    if (v38)
    {
      if ((*(_BYTE *)(v38 + 45) & 2) != 0)
        v38 = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 8);
      if ((*(_QWORD *)(v38 + 96) & 0x1FLL) == 0x18)
      {
LABEL_30:
        if (v35)
          *(_DWORD *)v20 = v35;
        else
          WTF::fastFree(v20, (void *)a2);
        goto LABEL_32;
      }
    }
    v21 = 0;
LABEL_24:
    WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)(v5 + 80), (WTF::StringImpl *)0x18, a3, (uint64_t)&v43);
    v45 = v45 & 0xFFFFFFFFFE3FFFFFLL | 0xC00000;
    LODWORD(v47) = v47 | 0x40000000;
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8);
    v23 = bmalloc::api::isoAllocate();
    v24 = WebCore::RenderObject::RenderObject(v23, 16, v22, 56, 0);
    *(_QWORD *)v24 = off_1E3422BC8;
    *(_QWORD *)(v24 + 64) = 0;
    *(_QWORD *)(v24 + 70) = 0;
    *(_DWORD *)(v24 + 80) = 0;
    v25 = v44;
    v26 = v45;
    v44 = 0;
    *(_QWORD *)(v24 + 88) = v25;
    *(_QWORD *)(v24 + 96) = v26;
    v27 = v46;
    v46 = 0u;
    *(_OWORD *)(v24 + 104) = v27;
    *(_QWORD *)(v24 + 120) = v47;
    v28 = v48;
    v48 = 0u;
    *(_OWORD *)(v24 + 128) = v28;
    *(_QWORD *)(v24 + 144) = 0;
    *(_QWORD *)v24 = off_1E3428870;
    *(_OWORD *)(v24 + 152) = 0u;
    *(_DWORD *)(v24 + 20) |= 0x40000u;
    WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v24, v29, v30, v31);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v43, v32);
    v33 = *a1;
    v43 = 0;
    v41 = v23;
    WebCore::RenderTreeBuilder::attachToRenderElementInternal(v33, v5, &v41, v12);
    v34 = v41;
    v41 = 0;
    if (v34)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v41, v34);
    a2 = v43;
    if (v43)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v43, v43);
    if ((v21 & 1) != 0)
      goto LABEL_32;
    v35 = *(_DWORD *)v20 - 1;
    goto LABEL_30;
  }
LABEL_32:
  v36 = *a1;
  v37 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v40 = v37;
  WebCore::RenderTreeBuilder::attachToRenderElementInternal(v36, v5, &v40, v12);
  v9 = v40;
  v40 = 0;
  if (!v9)
    return;
  v10 = &v40;
LABEL_34:
  WebCore::RenderObjectDeleter::operator()((uint64_t)v10, v9);
}

void WebCore::RenderTreeBuilder::SVG::attach(uint64_t a1, WebCore::RenderObject *a2, const WebCore::RenderObject **a3, WebCore::RenderObject *a4)
{
  uint64_t v4;
  const WebCore::RenderObject *v5;
  uint64_t *v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  const WebCore::RenderObject *v9;

  v4 = (uint64_t)a2;
  v5 = *a3;
  v6 = *(uint64_t **)(*(_QWORD *)a1 + 88);
  *a3 = 0;
  v9 = v5;
  WebCore::RenderTreeBuilder::Inline::attach(v6, a2, &v9, a4);
  v7 = v9;
  if (v9)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v9, (uint64_t)v9);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
    WebCore::SVGResourcesCache::clientWasAddedToTree(v5, v7);
  while (*(_BYTE *)(v4 + 46) != 85)
  {
    v8 = *(_QWORD *)(v4 + 32);
    if (v8)
    {
      v4 = *(_QWORD *)(v8 + 8);
      if (v4)
        continue;
    }
    return;
  }
  WebCore::RenderSVGText::subtreeChildWasAdded(v4, v5);
}

void WebCore::RenderTreeBuilder::SVG::attach(WebCore::RenderTreeBuilder::SVG *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t ViewportContainer;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)a1;
  if (!(*(unsigned int *)(a2 + 64) | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
    || (ViewportContainer = *(_QWORD *)((*(unsigned int *)(a2 + 64) | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
                                      + 8)) == 0
    || (*(_BYTE *)(ViewportContainer + 45) & 1) == 0
    || *(_BYTE *)(ViewportContainer + 46) != 88)
  {
    ViewportContainer = WebCore::RenderTreeBuilder::SVG::createViewportContainer(a1, (WebCore::RenderSVGRoot *)a2, a3);
  }
  v8 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v10 = v8;
  WebCore::RenderTreeBuilder::attachToRenderElement(v6, ViewportContainer, (const WebCore::RenderStyle *)&v10, a4);
  v9 = v10;
  v10 = 0;
  if (v9)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v10, v9);
}

WTF *WebCore::RenderTreeBuilder::SVG::detach(uint64_t a1, uint64_t a2, uint64_t **this, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  WTF *result;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WebCore::RenderSVGInlineText *v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[16];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3][1] + 40) + 8) + 680) + 680) & 0x800000000000) == 0)
    WebCore::SVGResourcesCache::clientWillBeRemovedFromTree((uint64_t)this, (WebCore::RenderObject *)a2);
  v23 = (WTF *)v25;
  v24 = 2;
  WebCore::RenderSVGText::subtreeChildWillBeRemoved(a2, this, (uint64_t)&v23, a4, a5, a6);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v10 = *(_QWORD *)(a2 + 224);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 3405))
    v11 = 1;
  else
    v11 = v10 == 0;
  if (!v11)
  {
    v16 = *(_QWORD *)(v10 + 24);
    if (v16)
    {
      v17 = *(uint64_t ***)(v16 + 8);
      if (v17 && v17 != this)
      {
        v19 = *(_QWORD *)(*(_QWORD *)a1 + 72);
        WebCore::RenderTreeBuilder::MultiColumn::multiColumnRelativeWillBeRemoved(*(_QWORD **)(*(_QWORD *)v9 + 40), v17, (uint64_t)this, 1);
        LODWORD(v9) = v19;
      }
    }
  }
  result = (WTF *)WebCore::RenderTreeBuilder::Block::detach(v9, (WebCore::RenderElement *)a2, (WebCore::RenderListItem *)this);
  if ((*(_DWORD *)(a2 + 20) & 0x204) == 0x200
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 3405)
    && (v14 = HIDWORD(v24), HIDWORD(v24)))
  {
    v20 = 0;
    v21 = a2 + 304;
    while (v20 < HIDWORD(v24))
    {
      v22 = (WebCore::RenderSVGInlineText *)WebCore::SVGTextLayoutAttributes::context(*((WebCore::SVGTextLayoutAttributes **)v23
                                                                                      + v20));
      result = (WTF *)WebCore::SVGTextLayoutAttributesBuilder::buildLayoutAttributesForTextRenderer(v21, v22);
      if (v14 == ++v20)
        goto LABEL_11;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_11:
    result = v23;
    if (v25 != (_BYTE *)v23 && v23 != 0)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

void WebCore::RenderTreeBuilder::SVG::detach(WebCore::RenderElement *this@<X1>, WebCore::SVGResourcesCache *a2@<X2>, uint64_t *a3@<X0>, uint64_t a4@<X3>, uint64_t a5@<X4>, WebCore::SVGTextLayoutAttributes **a6@<X5>, _QWORD *a7@<X8>)
{
  int v7;
  WebCore::RenderElement *v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v18;
  WebCore::RenderSVGInlineText *v19;
  WTF *v20;
  uint64_t v21;
  _BYTE v22[16];

  v7 = a4;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
    WebCore::SVGResourcesCache::clientWillBeRemovedFromTree((uint64_t)a2, this);
  v12 = this;
  if (*((_BYTE *)this + 46) == 85)
  {
LABEL_7:
    v20 = (WTF *)v22;
    v21 = 2;
    WebCore::RenderSVGText::subtreeChildWillBeRemoved((uint64_t)v12, a2, (uint64_t)&v20, a4, a5, a6);
    WebCore::RenderTreeBuilder::detachFromRenderElement(this, a2, *a3, v7, a7);
    if ((*((_DWORD *)v12 + 5) & 0x204) == 0x200
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 3) + 8) + 40) + 8) + 3405)
      && (v15 = HIDWORD(v21), HIDWORD(v21)))
    {
      v18 = 0;
      while (v18 < HIDWORD(v21))
      {
        v19 = (WebCore::RenderSVGInlineText *)WebCore::SVGTextLayoutAttributes::context(*((WebCore::SVGTextLayoutAttributes **)v20
                                                                                        + v18));
        WebCore::SVGTextLayoutAttributesBuilder::buildLayoutAttributesForTextRenderer((unint64_t)v12 + 304, v19);
        if (v15 == ++v18)
          goto LABEL_10;
      }
      __break(0xC471u);
    }
    else
    {
LABEL_10:
      v16 = v20;
      if (v22 != (_BYTE *)v20 && v20 != 0)
      {
        v20 = 0;
        LODWORD(v21) = 0;
        WTF::fastFree(v16, v14);
      }
    }
  }
  else
  {
    for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)v12 + 4))
    {
      v12 = *(WebCore::RenderElement **)(i + 8);
      if (!v12)
        break;
      if (*((_BYTE *)v12 + 46) == 85)
        goto LABEL_7;
    }
    WebCore::RenderTreeBuilder::detachFromRenderElement(this, a2, *a3, v7, a7);
  }
}

uint64_t WebCore::RenderTreeBuilder::SVG::createViewportContainer(WebCore::RenderTreeBuilder::SVG *this, WebCore::RenderSVGRoot *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  uint64_t v8;
  const WebCore::Element *v9;
  uint64_t v10;
  void *v11;
  void *v13;
  unsigned int v14;
  __int16 v15;
  char v16;
  _QWORD v17[8];

  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)a2 + 10, 0, a3, (uint64_t)v17);
  WebCore::RenderStyle::setUsedZIndex((WebCore::RenderStyle *)v17, 0);
  v14 = 0;
  v15 = 4;
  v16 = 0;
  WebCore::RenderStyle::setTransformOriginX((uint64_t)v17, (WebCore::Length *)&v14);
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
  }
  v14 = 0;
  v15 = 4;
  v16 = 0;
  WebCore::RenderStyle::setTransformOriginY((uint64_t)v17, (WebCore::Length *)&v14);
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
  }
  v5 = bmalloc::api::isoAllocate();
  v6 = (WebCore::RenderElement *)WebCore::RenderSVGViewportContainer::RenderSVGViewportContainer(v5, (uint64_t)a2, v17);
  WebCore::RenderElement::initializeStyle(v6, v7, v8, v9);
  v10 = *(_QWORD *)this;
  v13 = (void *)v5;
  WebCore::RenderTreeBuilder::attachToRenderElement(v10, (uint64_t)a2, (const WebCore::RenderStyle *)&v13, 0);
  v11 = v13;
  v13 = 0;
  if (v11)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v13, (uint64_t)v11);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v17, v11);
  return v5;
}

WebCore::RenderTreeBuilder::SVG *WebCore::RenderTreeBuilder::SVG::updateAfterDescendants(WebCore::RenderTreeBuilder::SVG *this, WebCore::RenderSVGRoot *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((unsigned int *)a2 + 16);
  if (!(v3 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)))
    return (WebCore::RenderTreeBuilder::SVG *)WebCore::RenderTreeBuilder::SVG::createViewportContainer(this, a2, a3);
  v4 = *(_QWORD *)((v3 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
  if (!v4 || (*(_BYTE *)(v4 + 45) & 1) == 0 || *(_BYTE *)(v4 + 46) != 88)
    return (WebCore::RenderTreeBuilder::SVG *)WebCore::RenderTreeBuilder::SVG::createViewportContainer(this, a2, a3);
  return this;
}

uint64_t WebCore::RenderTreeBuilder::Table::findOrCreateParentForChild(WebCore::RenderTableRow &,WebCore::RenderObject const&,WebCore::RenderObject*&)::$_0::operator()<WebCore::RenderTableRow>(uint64_t **a1, WebCore::RenderTableCell *this, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  WebCore::RenderTableCell::createAnonymousWithParentRenderer(this, a3, &v10);
  v6 = v10;
  v7 = *v5;
  v9 = v10;
  WebCore::RenderTreeBuilder::attach(v7, this, (unint64_t *)&v9);
  if (v9)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v9, v9);
  *a1[1] = 0;
  return v6;
}

uint64_t WebCore::RenderTableSection::firstRow(WebCore::RenderTableSection *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((unsigned int *)this + 16);
  if (!(v1 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  result = *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (result)
  {
    if (*(_BYTE *)(result + 46) != 39)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

BOOL WebCore::RenderTreeBuilder::Table::childRequiresTable(WebCore::RenderTreeBuilder::Table *this, const WebCore::RenderElement *a2, const WebCore::RenderObject *a3)
{
  _BOOL8 result;
  BOOL v4;
  int v5;
  int v6;
  _BOOL4 v8;

  switch(*((_BYTE *)a3 + 46))
  {
    case '$':
    case '(':
      v5 = *((unsigned __int8 *)a2 + 46);
      v4 = v5 == 35 || v5 == 63;
      goto LABEL_5;
    case '%':
      v4 = *((_BYTE *)a2 + 46) == 39;
      goto LABEL_5;
    case '&':
      v6 = *((unsigned __int8 *)a2 + 46);
      v8 = v6 != 35 && v6 != 63;
      return ((*((_QWORD *)a3 + 12) & 0x1FLL) != 0xB || v6 != 38) && v8;
    case '\'':
      v4 = *((_BYTE *)a2 + 46) == 40;
LABEL_5:
      result = !v4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::RenderTreePosition::nextSiblingRenderer(WebCore::Node const&)const::$_1::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v5 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0xA8)) != 0
    && (result = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196579140);
    }
  }
  else
  {
    v7 = a2;
    v3 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v3 == *(_DWORD *)(a1 + 8))
    {
      v6 = (_QWORD *)WTF::Vector<WebCore::Element *,30ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v3 + 1, (unint64_t)&v7);
      v3 = *(unsigned int *)(a1 + 12);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = *v6;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a2;
    }
    result = 0;
    *(_DWORD *)(a1 + 12) = v3 + 1;
  }
  return result;
}

WebCore::ComposedTreeIterator *WebCore::ComposedTreeIterator::traverseNext(WebCore::ComposedTreeIterator *this, WebCore::ShadowRoot *a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v2 = *((_DWORD *)this + 5);
  if (!v2)
    goto LABEL_32;
  v4 = *((_QWORD *)this + 1) + 584 * v2 - 584;
  v5 = *(_QWORD *)v4;
  v6 = *(_WORD *)(*(_QWORD *)v4 + 28);
  if (*(_QWORD *)v4)
    v7 = (v6 & 8) == 0;
  else
    v7 = 1;
  if (!v7 && (*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2 = *(WebCore::ShadowRoot **)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (a2)
    {
      WebCore::ComposedTreeIterator::traverseShadowRoot(this, a2);
      return this;
    }
  }
  if (v2 > 1 || *(_BYTE *)this)
  {
    WebCore::ComposedTreeIterator::traverseNextInShadowTree(this, a2);
    return this;
  }
  if ((v6 & 4) != 0 && (v8 = *(_QWORD *)(v5 + 80)) != 0)
  {
    do
    {
      if ((*(_WORD *)(v8 + 28) & 0xA) != 0)
      {
        v9 = v8;
        goto LABEL_13;
      }
      v9 = 0;
      v8 = *(_QWORD *)(v8 + 56);
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }
  do
  {
LABEL_13:
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
    {
      if (v9)
        goto LABEL_19;
      v15 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v4 + 8) + 16 * v15;
        *(_QWORD *)v4 = *(_QWORD *)(v16 - 16);
        *(_DWORD *)(v4 + 280) = *(_DWORD *)(v16 - 8);
        *(_DWORD *)(v4 + 20) = v15 - 1;
        return this;
      }
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x1965792F4);
    }
  }
  while ((*(_WORD *)(v5 + 28) & 0xA) == 0);
  if (v9)
  {
    v10 = (uint64_t *)(v4 + 8);
    *(_QWORD *)&v20 = v5;
    DWORD2(v20) = *(_DWORD *)(v4 + 280);
    v11 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v11 == *(_DWORD *)(v4 + 16))
    {
      v18 = v4;
      v19 = v9;
      v17 = (__int128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v20);
      v4 = v18;
      v9 = v19;
      v11 = *(unsigned int *)(v18 + 20);
      v12 = *(_QWORD *)(v18 + 8);
      v13 = *v17;
    }
    else
    {
      v12 = *v10;
      v13 = v20;
    }
    *(_OWORD *)(v12 + 16 * v11) = v13;
    ++*(_DWORD *)(v4 + 20);
LABEL_19:
    ++*(_DWORD *)(v4 + 280);
    *(_QWORD *)v4 = v9;
  }
  else
  {
    *(_QWORD *)v4 = v5;
  }
  return this;
}

uint64_t WebCore::RenderTreeUpdater::renderTreePosition(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(unsigned int *)(this + 28);
  v2 = 72 * v1;
  while (1)
  {
    v3 = v2 - 72;
    if (!v2)
      break;
    v4 = *(_QWORD *)(this + 16);
    v5 = *(unsigned __int8 *)(v4 + v2 - 32);
    v2 -= 72;
    if (v5)
    {
      v6 = v4 + v3;
      goto LABEL_5;
    }
  }
  if (!(_DWORD)v1)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(this + 16) + 72 * v1 - 72;
LABEL_5:
  if (*(_BYTE *)(v6 + 40))
    return v6 + 16;
LABEL_10:
  __break(1u);
  return this;
}

void WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::SVGTextLayoutAttributes **v8;
  uint64_t v9;
  WebCore::Document *v10;
  WebCore::Editor *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v27;
  BOOL v29;
  uint64_t v30;
  WebCore::Editor *v31;
  void *v32;
  WebCore::Editor *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *CachedPseudoStyle;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  const WTF::StringImpl ***v43;
  const WTF::StringImpl **v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::SVGTextLayoutAttributes **v49;
  const WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::RenderTable *v53;
  WebCore::RenderElement *v54;
  uint64_t v55;
  uint64_t v56;
  const WebCore::Element *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::RenderTable *v67;
  uint64_t v68;
  uint64_t v69;
  WebCore::SVGTextLayoutAttributes **v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  WebCore::RenderTable *v77;
  void *v78;
  WTF *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  void *v83;
  WTF *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::SVGTextLayoutAttributes **v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  WebCore::RenderTable *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl ***v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF *v104;
  WTF::StringImpl *v105;
  WebCore::RenderTable **v106;
  WTF::StringImpl **v107;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2))
    return;
  if ((*(_BYTE *)(a2 + 45) & 1) != 0)
    return;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v9)
    return;
  if ((*(_WORD *)(v9 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965795F8);
  }
  v10 = *(WebCore::Document **)(*(_QWORD *)(v9 + 40) + 8);
  v11 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
  if (!v11)
  {
    v31 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v31, v10);
    v33 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
    *((_QWORD *)v10 + 382) = v31;
    if (v33)
    {
      WebCore::Editor::~Editor(v33, v32);
      if (*(_DWORD *)v34)
      {
        *(_QWORD *)(v34 + 496) = 0;
        *(_OWORD *)(v34 + 464) = 0u;
        *(_OWORD *)(v34 + 480) = 0u;
        *(_OWORD *)(v34 + 432) = 0u;
        *(_OWORD *)(v34 + 448) = 0u;
        *(_OWORD *)(v34 + 400) = 0u;
        *(_OWORD *)(v34 + 416) = 0u;
        *(_OWORD *)(v34 + 368) = 0u;
        *(_OWORD *)(v34 + 384) = 0u;
        *(_OWORD *)(v34 + 336) = 0u;
        *(_OWORD *)(v34 + 352) = 0u;
        *(_OWORD *)(v34 + 304) = 0u;
        *(_OWORD *)(v34 + 320) = 0u;
        *(_OWORD *)(v34 + 272) = 0u;
        *(_OWORD *)(v34 + 288) = 0u;
        *(_OWORD *)(v34 + 240) = 0u;
        *(_OWORD *)(v34 + 256) = 0u;
        *(_OWORD *)(v34 + 208) = 0u;
        *(_OWORD *)(v34 + 224) = 0u;
        *(_OWORD *)(v34 + 176) = 0u;
        *(_OWORD *)(v34 + 192) = 0u;
        *(_OWORD *)(v34 + 144) = 0u;
        *(_OWORD *)(v34 + 160) = 0u;
        *(_OWORD *)(v34 + 112) = 0u;
        *(_OWORD *)(v34 + 128) = 0u;
        *(_OWORD *)(v34 + 80) = 0u;
        *(_OWORD *)(v34 + 96) = 0u;
        *(_OWORD *)(v34 + 48) = 0u;
        *(_OWORD *)(v34 + 64) = 0u;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(_OWORD *)v34 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v34, v35);
      }
    }
    v11 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
  }
  v12 = *(_QWORD *)(*((_QWORD *)v11 + 2) + 8);
  v13 = *(_DWORD *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v13 + 2;
  v14 = *(_QWORD *)(v12 + 3064);
  if (*(_BYTE *)(v14 + 153) != 1)
  {
    v15 = 0;
    goto LABEL_8;
  }
  v20 = *(_QWORD *)(v14 + 136);
  if (v20)
  {
    v21 = *(_DWORD *)(v20 + 24) + 2;
    *(_DWORD *)(v20 + 24) = v21;
    v22 = *(_BYTE *)(v14 + 148) & 7;
    if (v22 <= 4)
    {
      v23 = *(_DWORD *)(v14 + 144);
      if (((1 << v22) & 0x19) != 0)
      {
        v24 = v20;
        goto LABEL_25;
      }
      v24 = *(_QWORD *)(v20 + 32);
      if (v24)
      {
        v21 = *(_DWORD *)(v24 + 24);
LABEL_25:
        *(_DWORD *)(v24 + 24) = v21 + 4;
        v25 = v21 + 2;
        if ((*(_WORD *)(v24 + 28) & 2) != 0)
        {
          if (v25)
          {
            *(_DWORD *)(v24 + 24) = v25;
            v15 = v24;
          }
          else
          {
            v15 = v24;
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v24);
              v15 = v24;
            }
          }
          goto LABEL_31;
        }
        if (v25)
        {
          *(_DWORD *)(v24 + 24) = v25;
        }
        else if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v24);
        }
        switch(v22)
        {
          case 4u:
            if ((*(_WORD *)(v20 + 28) & 4) != 0)
            {
              v15 = *(_QWORD *)(v20 + 88);
              break;
            }
            goto LABEL_43;
          case 0u:
            if (v23 && (*(_WORD *)(v20 + 28) & 4) != 0)
            {
              v15 = *(_QWORD *)(v20 + 80);
              if (v23 != 1 && v15 != 0)
              {
                v27 = v23 - 2;
                do
                {
                  v15 = *(_QWORD *)(v15 + 56);
                  v29 = v27-- != 0;
                }
                while (v15 && v29);
              }
              break;
            }
            goto LABEL_43;
          case 1u:
            v15 = *(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFLL;
            break;
          case 2u:
            v15 = v20;
            break;
          default:
LABEL_43:
            v15 = 0;
            break;
        }
LABEL_31:
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v24);
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
        goto LABEL_33;
      }
    }
    v15 = 0;
LABEL_33:
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
    goto LABEL_35;
  }
  v15 = 0;
LABEL_35:
  v13 = *(_DWORD *)(v12 + 24) - 2;
LABEL_8:
  if (v13)
  {
    *(_DWORD *)(v12 + 24) = v13;
  }
  else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v12);
  }
  if (v15)
  {
    v16 = *(_DWORD *)(v15 + 24);
    *(_DWORD *)(v15 + 24) = v16 + 2;
    v17 = *(_BYTE *)(a2 + 45);
    if ((v17 & 1) != 0)
    {
      v18 = 0;
    }
    else
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (v18 && (*(_WORD *)(v18 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196579618);
      }
    }
    v19 = *(_QWORD *)(v15 + 32);
    if (v19 && (*(_WORD *)(v19 + 28) & 8) == 0)
      v19 = 0;
    if (v18 != v19)
      goto LABEL_18;
    v107 = (WTF::StringImpl **)*((_QWORD *)v11 + 22);
    if (!v107)
    {
      v30 = *(_QWORD *)(a2 + 24);
LABEL_64:
      WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(v30, v17, a1, v6, v7, v8);
LABEL_65:
      v16 = *(_DWORD *)(v15 + 24) - 2;
LABEL_18:
      if (v16)
      {
        *(_DWORD *)(v15 + 24) = v16;
      }
      else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v15);
      }
      return;
    }
    v36 = a3;
    LODWORD(v100) = 23;
    v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v37 += 2;
    v101 = v37;
    CachedPseudoStyle = (_QWORD *)WebCore::RenderElement::getCachedPseudoStyle(a2, (uint64_t)&v100, a2 + 80);
    v40 = v101;
    v101 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v38);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (CachedPseudoStyle)
    {
      if ((CachedPseudoStyle[2] & 0x1FLL) != 0x1A)
      {
        v41 = *(_QWORD *)(v15 + 64);
        v42 = v41 & 0xFFFFFFFFFFFFLL;
        if ((v41 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v41 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          v43 = *(const WTF::StringImpl ****)((v41 & 0xFFFFFFFFFFFFLL) + 8);
          if (v43)
            goto LABEL_87;
          v43 = (const WTF::StringImpl ***)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v43 = 1;
          v43[1] = (const WTF::StringImpl **)v42;
          v84 = *(WTF **)(v42 + 8);
          *(_QWORD *)(v42 + 8) = v43;
          if (!v84)
            goto LABEL_87;
          if (*(_DWORD *)v84 != 1)
          {
            --*(_DWORD *)v84;
LABEL_87:
            ++*(_DWORD *)v43;
            v44 = v43[1];
            if (!v44)
            {
              WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(*(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 45), a1, v6, v7, v8);
LABEL_123:
              if (*(_DWORD *)v43 == 1)
                WTF::fastFree((WTF *)v43, v78);
              else
                --*(_DWORD *)v43;
              goto LABEL_65;
            }
            v45 = v44[4];
            if (v45)
              v46 = *((_QWORD *)v45 + 1);
            else
              v46 = 0;
            WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v106, v46);
            if (!v106 || !v106[1])
            {
              WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(*(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 45), a1, v47, v48, v49);
LABEL_120:
              v79 = (WTF *)v106;
              v106 = 0;
              if (v79)
              {
                if (*(_DWORD *)v79 == 1)
                  WTF::fastFree(v79, v78);
                else
                  --*(_DWORD *)v79;
              }
              goto LABEL_123;
            }
            v50 = v43[1][13];
            if (v50)
              *(_DWORD *)v50 += 2;
            v105 = v50;
            v100 = &v107;
            v101 = (WTF::StringImpl *)&v105;
            WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_1::operator()(&v103, (uint64_t **)&v100);
            WebCore::RenderText::setText(v43[1], &v103, 0);
            WebCore::RenderStyle::clone(CachedPseudoStyle, (uint64_t)&v100);
            v102 &= 0xFFFFFFFFFFFFFC00;
            v51 = *((_QWORD *)v11 + 23);
            if (!v51 || (v85 = *(_QWORD *)(v51 + 8)) == 0)
            {
              v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
              v53 = (WebCore::RenderTable *)bmalloc::api::isoAllocate();
              v54 = (WebCore::RenderElement *)WebCore::RenderInline::RenderInline((uint64_t)v53, 16, v52, &v100);
              WebCore::RenderElement::initializeStyle(v54, v55, v56, v57);
              if (*(unsigned int *)((char *)v43[1] + 47) | ((unint64_t)*((unsigned __int8 *)v43[1] + 51) << 32))
                v58 = *(_QWORD *)((*(unsigned int *)((char *)v43[1] + 47) | ((unint64_t)*((unsigned __int8 *)v43[1]
                                                                                               + 51) << 32))
                                + 8);
              else
                v58 = 0;
              WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v99, v58);
              v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
              v60 = *v107;
              if (*v107)
                *(_DWORD *)v60 += 2;
              v98 = v60;
              v61 = bmalloc::api::isoAllocate();
              WebCore::RenderText::RenderText(v61, 41, v59, &v98);
              v63 = v98;
              v98 = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, v62);
                else
                  *(_DWORD *)v63 -= 2;
              }
              v64 = *a1 + 48;
              v97 = v61;
              WebCore::RenderTreeBuilder::attach(v64, v53, (unint64_t *)&v97);
              v65 = v97;
              v97 = 0;
              if (v65)
                WebCore::RenderObjectDeleter::operator()((uint64_t)&v97, v65);
              WebCore::Editor::setWritingSuggestionRenderer(v11, v53);
              v66 = *a1 + 48;
              if (v106)
                v67 = v106[1];
              else
                v67 = 0;
              v96 = v53;
              WebCore::RenderTreeBuilder::attach(v66, v67, (unint64_t *)&v96);
              v71 = (uint64_t)v96;
              v96 = 0;
              if (v71)
                WebCore::RenderObjectDeleter::operator()((uint64_t)&v96, v71);
              if (v106 && v106[1] && (v72 = WebCore::RenderText::textNode((WebCore::RenderText *)v43[1])) != 0)
              {
                if (v104 && *((_DWORD *)v104 + 1))
                {
                  v74 = v72;
                  v75 = bmalloc::api::isoAllocate();
                  WebCore::RenderText::RenderText(v75, 41, v74, (uint64_t *)&v104);
                  v76 = *a1 + 48;
                  v77 = v106 ? v106[1] : 0;
                  v95 = (void *)v75;
                  WebCore::RenderTreeBuilder::attach(v76, v77, (unint64_t *)&v95);
                  v73 = v95;
                  v95 = 0;
                  if (v73)
                    WebCore::RenderObjectDeleter::operator()((uint64_t)&v95, (uint64_t)v73);
                }
              }
              else
              {
                WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(*(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 45), a1, v68, v69, v70);
              }
              v80 = v99;
              v99 = 0;
              if (v80)
              {
                if (*(_DWORD *)v80 == 1)
                  WTF::fastFree(v80, v73);
                else
                  --*(_DWORD *)v80;
              }
              goto LABEL_133;
            }
            WebCore::RenderElement::setStyle(*(_QWORD *)(v51 + 8), &v100, v36);
            v89 = *(unsigned int *)(v85 + 64);
            if (!(v89 | ((unint64_t)*(unsigned __int8 *)(v85 + 68) << 32)))
              goto LABEL_154;
            v90 = *(_QWORD *)((v89 | ((unint64_t)*(unsigned __int8 *)(v85 + 68) << 32)) + 8);
            if (!v90 || (*(_BYTE *)(v90 + 45) & 2) == 0)
              goto LABEL_154;
            v91 = *v107;
            if (*v107)
              *(_DWORD *)v91 += 2;
            v99 = v91;
            WebCore::RenderText::setText((const WTF::StringImpl **)v90, &v99, 0);
            v92 = v99;
            v99 = 0;
            if (v92)
            {
              if (*(_DWORD *)v92 == 2)
                WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v73);
              else
                *(_DWORD *)v92 -= 2;
            }
            if (!v104 || !*((_DWORD *)v104 + 1))
              goto LABEL_133;
            v93 = *(unsigned int *)(v85 + 47);
            if (v93 | ((unint64_t)*(unsigned __int8 *)(v85 + 51) << 32)
              && (v94 = *(_QWORD *)((v93 | ((unint64_t)*(unsigned __int8 *)(v85 + 51) << 32)) + 8)) != 0
              && (*(_BYTE *)(v94 + 45) & 2) != 0)
            {
              WebCore::RenderText::setText((const WTF::StringImpl **)v94, &v104, 0);
            }
            else
            {
LABEL_154:
              WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(*(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 45), a1, v86, v87, v88);
            }
LABEL_133:
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v100, v73);
            WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v103, v81);
            v82 = v105;
            v105 = 0;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
                WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v78);
              else
                *(_DWORD *)v82 -= 2;
            }
            goto LABEL_120;
          }
          WTF::fastFree(v84, v83);
          v43 = *(const WTF::StringImpl ****)(v42 + 8);
          if (v43)
            goto LABEL_87;
        }
      }
    }
    v30 = *(_QWORD *)(a2 + 24);
    v17 = *(_BYTE *)(a2 + 45);
    goto LABEL_64;
  }
}

