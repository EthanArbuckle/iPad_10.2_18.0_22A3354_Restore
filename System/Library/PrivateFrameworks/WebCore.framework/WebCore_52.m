void WebCore::AudioListener::~AudioListener(WTF **this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  WebCore::AudioParam *v12;
  WebCore::AudioParam *v13;
  WebCore::AudioParam *v14;
  WebCore::AudioParam *v15;
  WebCore::AudioParam *v16;
  WebCore::AudioParam *v17;
  WebCore::AudioParam *v18;
  WebCore::AudioParam *v19;
  WebCore::AudioParam *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  void *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  void *v38;

  WTF::fastAlignedFree(this[27], a2);
  WTF::fastAlignedFree(this[25], v3);
  WTF::fastAlignedFree(this[23], v4);
  WTF::fastAlignedFree(this[21], v5);
  WTF::fastAlignedFree(this[19], v6);
  WTF::fastAlignedFree(this[17], v7);
  WTF::fastAlignedFree(this[15], v8);
  WTF::fastAlignedFree(this[13], v9);
  WTF::fastAlignedFree(this[11], v10);
  v12 = this[9];
  this[9] = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v12, v11);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*((_DWORD *)v12 + 16);
    }
  }
  v13 = this[8];
  this[8] = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v13, v11);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*((_DWORD *)v13 + 16);
    }
  }
  v14 = this[7];
  this[7] = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v14, v11);
      WTF::fastFree(v25, v26);
    }
    else
    {
      --*((_DWORD *)v14 + 16);
    }
  }
  v15 = this[6];
  this[6] = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v15, v11);
      WTF::fastFree(v27, v28);
    }
    else
    {
      --*((_DWORD *)v15 + 16);
    }
  }
  v16 = this[5];
  this[5] = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v16, v11);
      WTF::fastFree(v29, v30);
    }
    else
    {
      --*((_DWORD *)v16 + 16);
    }
  }
  v17 = this[4];
  this[4] = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v17, v11);
      WTF::fastFree(v31, v32);
    }
    else
    {
      --*((_DWORD *)v17 + 16);
    }
  }
  v18 = this[3];
  this[3] = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v18, v11);
      WTF::fastFree(v33, v34);
    }
    else
    {
      --*((_DWORD *)v18 + 16);
    }
  }
  v19 = this[2];
  this[2] = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v19, v11);
      WTF::fastFree(v35, v36);
    }
    else
    {
      --*((_DWORD *)v19 + 16);
    }
  }
  v20 = this[1];
  this[1] = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v20, v11);
      WTF::fastFree(v37, v38);
    }
    else
    {
      --*((_DWORD *)v20 + 16);
    }
  }
}

BOOL WebCore::AudioListener::hasSampleAccurateValues(WebCore::AudioParam **this)
{
  return WebCore::AudioParam::hasSampleAccurateValues(this[1])
      || WebCore::AudioParam::hasSampleAccurateValues(this[2])
      || WebCore::AudioParam::hasSampleAccurateValues(this[3])
      || WebCore::AudioParam::hasSampleAccurateValues(this[4])
      || WebCore::AudioParam::hasSampleAccurateValues(this[5])
      || WebCore::AudioParam::hasSampleAccurateValues(this[6])
      || WebCore::AudioParam::hasSampleAccurateValues(this[7])
      || WebCore::AudioParam::hasSampleAccurateValues(this[8])
      || WebCore::AudioParam::hasSampleAccurateValues(this[9]);
}

BOOL WebCore::AudioParam::hasSampleAccurateValues(WebCore::AudioParam *this)
{
  _BOOL8 v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  double v15;
  BOOL v16;
  int v17;
  double v19;

  if (!*((_DWORD *)this + 7))
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = atomic_load((unint64_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 32) + 88))(v4 - 32)
                                        + 152));
    v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (v6)
      v7 = v6 - 32;
    else
      v7 = 0;
    v8 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7) + 160);
    v9 = (unsigned __int8 *)this + 128;
    while (1)
    {
      v10 = *v9;
      if ((v10 & 1) != 0)
        break;
      v11 = __ldaxr(v9);
      if (v11 == v10)
      {
        if (!__stxr(v10 | 1, v9))
        {
          v12 = *((_DWORD *)this + 31);
          if (v12
            && ((v13 = *((_QWORD *)this + 14), v14 = *(double *)(v13 + 8), v15 = (double)(v5 + 128) / v8, v14 <= v15)
             || (*(_DWORD *)v13 <= 4u ? (v16 = ((1 << *(_DWORD *)v13) & 0x19) == 0) : (v16 = 1), v16)))
          {
            if (v12 <= 1)
            {
              switch(*(_DWORD *)v13)
              {
                case 0:
                case 1:
                case 2:
                case 5:
                  v1 = v14 >= (double)v5 / v8;
                  break;
                case 3:
                  v1 = v14 <= v15;
                  break;
                case 4:
                  v19 = (double)v5 / v8;
                  if (v14 > v19)
                    goto LABEL_21;
                  v1 = v19 < v14 + *(double *)(v13 + 24);
                  break;
                default:
                  goto LABEL_23;
              }
            }
            else
            {
LABEL_23:
              v1 = 1;
            }
          }
          else
          {
LABEL_21:
            v1 = 0;
          }
          v17 = __ldxr(v9);
          if (v17 == 1)
          {
            if (!__stlxr(0, v9))
              return v1;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v9);
          return v1;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  return 1;
}

void WebCore::AudioListener::updateValuesIfNeeded(WebCore::AudioListener *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  unint64_t v61;
  uint64_t v62;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 32) + 88))(v4 - 32);
      v7 = atomic_load((unint64_t *)(v6 + 152));
      v8 = (double)v7 / *(float *)(v6 + 160);
      if (*((double *)this + 10) != v8)
      {
        *((double *)this + 10) = v8;
        v9 = *((_QWORD *)this + 1);
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v12 = (float *)*((_QWORD *)this + 11);
            v13 = atomic_load((unint64_t *)(v11 + 240));
            v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v14)
              v14 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v12 && v14 == v13)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v9, v12, a2, *(_BYTE *)(v9 + 104) == 0);
          }
        }
        v15 = *((_QWORD *)this + 2);
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 8);
          if (v17)
          {
            v18 = (float *)*((_QWORD *)this + 13);
            v19 = atomic_load((unint64_t *)(v17 + 240));
            v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v20)
              v20 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v18 && v20 == v19)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v15, v18, a2, *(_BYTE *)(v15 + 104) == 0);
          }
        }
        v21 = *((_QWORD *)this + 3);
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            v24 = (float *)*((_QWORD *)this + 15);
            v25 = atomic_load((unint64_t *)(v23 + 240));
            v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v26)
              v26 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v24 && v26 == v25)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v21, v24, a2, *(_BYTE *)(v21 + 104) == 0);
          }
        }
        v27 = *((_QWORD *)this + 4);
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            v30 = (float *)*((_QWORD *)this + 17);
            v31 = atomic_load((unint64_t *)(v29 + 240));
            v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v32)
              v32 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v30 && v32 == v31)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v27, v30, a2, *(_BYTE *)(v27 + 104) == 0);
          }
        }
        v33 = *((_QWORD *)this + 5);
        v34 = *(_QWORD *)(v33 + 8);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 8);
          if (v35)
          {
            v36 = (float *)*((_QWORD *)this + 19);
            v37 = atomic_load((unint64_t *)(v35 + 240));
            v38 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v38)
              v38 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v36 && v38 == v37)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v33, v36, a2, *(_BYTE *)(v33 + 104) == 0);
          }
        }
        v39 = *((_QWORD *)this + 6);
        v40 = *(_QWORD *)(v39 + 8);
        if (v40)
        {
          v41 = *(_QWORD *)(v40 + 8);
          if (v41)
          {
            v42 = (float *)*((_QWORD *)this + 21);
            v43 = atomic_load((unint64_t *)(v41 + 240));
            v44 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v44)
              v44 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v42 && v44 == v43)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v39, v42, a2, *(_BYTE *)(v39 + 104) == 0);
          }
        }
        v45 = *((_QWORD *)this + 7);
        v46 = *(_QWORD *)(v45 + 8);
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + 8);
          if (v47)
          {
            v48 = (float *)*((_QWORD *)this + 23);
            v49 = atomic_load((unint64_t *)(v47 + 240));
            v50 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v50)
              v50 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v48 && v50 == v49)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v45, v48, a2, *(_BYTE *)(v45 + 104) == 0);
          }
        }
        v51 = *((_QWORD *)this + 8);
        v52 = *(_QWORD *)(v51 + 8);
        if (v52)
        {
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
          {
            v54 = (float *)*((_QWORD *)this + 25);
            v55 = atomic_load((unint64_t *)(v53 + 240));
            v56 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v56)
              v56 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v54 && v56 == v55)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v51, v54, a2, *(_BYTE *)(v51 + 104) == 0);
          }
        }
        v57 = *((_QWORD *)this + 9);
        v58 = *(_QWORD *)(v57 + 8);
        if (v58)
        {
          v59 = *(_QWORD *)(v58 + 8);
          if (v59)
          {
            v60 = (float *)*((_QWORD *)this + 27);
            v61 = atomic_load((unint64_t *)(v59 + 240));
            v62 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v62)
              v62 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v60 && v62 == v61)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v57, v60, a2, *(_BYTE *)(v57 + 104) == 0);
          }
        }
      }
    }
  }
}

void WebCore::AudioListener::updateDirtyState(WebCore::AudioListener *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;

  v2 = WebCore::AudioListener::position(this);
  v5 = *((float *)this + 58);
  v6 = *((float *)this + 59);
  v7 = *((float *)this + 60);
  *((float *)this + 58) = v2;
  *((float *)this + 59) = v3;
  *((float *)this + 60) = v4;
  v9 = v5 != v2 || v6 != v3 || v7 != v4;
  *((_BYTE *)this + 268) = v9;
  v10 = WebCore::AudioListener::orientation(this);
  v13 = *((float *)this + 61);
  v14 = *((float *)this + 62);
  v15 = *((float *)this + 63);
  *((float *)this + 61) = v10;
  *((float *)this + 62) = v11;
  *((float *)this + 63) = v12;
  v17 = v13 != v10 || v14 != v11 || v15 != v12;
  *((_BYTE *)this + 269) = v17;
  v18 = WebCore::AudioListener::upVector(this);
  v21 = *((float *)this + 64);
  v22 = *((float *)this + 65);
  v23 = *((float *)this + 66);
  *((float *)this + 64) = v18;
  *((float *)this + 65) = v19;
  *((float *)this + 66) = v20;
  v24 = 1;
  if (v21 == v18 && v22 == v19)
    v24 = v23 != v20;
  *((_BYTE *)this + 270) = v24;
}

float WebCore::AudioListener::position(WebCore::AudioListener *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::BaseAudioContext *v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::BaseAudioContext *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::BaseAudioContext *v25;
  unint64_t v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = atomic_load((unint64_t *)(v4 + 240));
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6)
        v6 = WTF::Thread::initializeCurrentTLS(0);
      if (v6 == v5)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
        v8 = v7 ? (WebCore::BaseAudioContext *)(v7 - 32) : 0;
        v9 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v2 + 112), v8, *(float *)(v2 + 88), *(float *)(v2 + 96), *(float *)(v2 + 100));
        if (HIDWORD(v9))
          *(_DWORD *)(v2 + 88) = v9;
      }
    }
  }
  v10 = *(float *)(v2 + 88);
  v11 = *((_QWORD *)this + 2);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = atomic_load((unint64_t *)(v13 + 240));
      v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v15)
        v15 = WTF::Thread::initializeCurrentTLS(0);
      if (v15 == v14)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
        v17 = v16 ? (WebCore::BaseAudioContext *)(v16 - 32) : 0;
        v18 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v11 + 112), v17, *(float *)(v11 + 88), *(float *)(v11 + 96), *(float *)(v11 + 100));
        if (HIDWORD(v18))
          *(_DWORD *)(v11 + 88) = v18;
      }
    }
  }
  v19 = *((_QWORD *)this + 3);
  v20 = *(_QWORD *)(v19 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = atomic_load((unint64_t *)(v21 + 240));
      v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v23)
        v23 = WTF::Thread::initializeCurrentTLS(0);
      if (v23 == v22)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8);
        if (v24)
          v25 = (WebCore::BaseAudioContext *)(v24 - 32);
        else
          v25 = 0;
        v26 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v19 + 112), v25, *(float *)(v19 + 88), *(float *)(v19 + 96), *(float *)(v19 + 100));
        if (HIDWORD(v26))
          *(_DWORD *)(v19 + 88) = v26;
      }
    }
  }
  return v10;
}

float WebCore::AudioListener::orientation(WebCore::AudioListener *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::BaseAudioContext *v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::BaseAudioContext *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::BaseAudioContext *v25;
  unint64_t v26;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = atomic_load((unint64_t *)(v4 + 240));
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6)
        v6 = WTF::Thread::initializeCurrentTLS(0);
      if (v6 == v5)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
        v8 = v7 ? (WebCore::BaseAudioContext *)(v7 - 32) : 0;
        v9 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v2 + 112), v8, *(float *)(v2 + 88), *(float *)(v2 + 96), *(float *)(v2 + 100));
        if (HIDWORD(v9))
          *(_DWORD *)(v2 + 88) = v9;
      }
    }
  }
  v10 = *(float *)(v2 + 88);
  v11 = *((_QWORD *)this + 5);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = atomic_load((unint64_t *)(v13 + 240));
      v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v15)
        v15 = WTF::Thread::initializeCurrentTLS(0);
      if (v15 == v14)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
        v17 = v16 ? (WebCore::BaseAudioContext *)(v16 - 32) : 0;
        v18 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v11 + 112), v17, *(float *)(v11 + 88), *(float *)(v11 + 96), *(float *)(v11 + 100));
        if (HIDWORD(v18))
          *(_DWORD *)(v11 + 88) = v18;
      }
    }
  }
  v19 = *((_QWORD *)this + 6);
  v20 = *(_QWORD *)(v19 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = atomic_load((unint64_t *)(v21 + 240));
      v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v23)
        v23 = WTF::Thread::initializeCurrentTLS(0);
      if (v23 == v22)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8);
        if (v24)
          v25 = (WebCore::BaseAudioContext *)(v24 - 32);
        else
          v25 = 0;
        v26 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v19 + 112), v25, *(float *)(v19 + 88), *(float *)(v19 + 96), *(float *)(v19 + 100));
        if (HIDWORD(v26))
          *(_DWORD *)(v19 + 88) = v26;
      }
    }
  }
  return v10;
}

float WebCore::AudioListener::upVector(WebCore::AudioListener *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::BaseAudioContext *v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::BaseAudioContext *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::BaseAudioContext *v25;
  unint64_t v26;

  v2 = *((_QWORD *)this + 7);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = atomic_load((unint64_t *)(v4 + 240));
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6)
        v6 = WTF::Thread::initializeCurrentTLS(0);
      if (v6 == v5)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
        v8 = v7 ? (WebCore::BaseAudioContext *)(v7 - 32) : 0;
        v9 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v2 + 112), v8, *(float *)(v2 + 88), *(float *)(v2 + 96), *(float *)(v2 + 100));
        if (HIDWORD(v9))
          *(_DWORD *)(v2 + 88) = v9;
      }
    }
  }
  v10 = *(float *)(v2 + 88);
  v11 = *((_QWORD *)this + 8);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = atomic_load((unint64_t *)(v13 + 240));
      v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v15)
        v15 = WTF::Thread::initializeCurrentTLS(0);
      if (v15 == v14)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
        v17 = v16 ? (WebCore::BaseAudioContext *)(v16 - 32) : 0;
        v18 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v11 + 112), v17, *(float *)(v11 + 88), *(float *)(v11 + 96), *(float *)(v11 + 100));
        if (HIDWORD(v18))
          *(_DWORD *)(v11 + 88) = v18;
      }
    }
  }
  v19 = *((_QWORD *)this + 9);
  v20 = *(_QWORD *)(v19 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = atomic_load((unint64_t *)(v21 + 240));
      v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v23)
        v23 = WTF::Thread::initializeCurrentTLS(0);
      if (v23 == v22)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8);
        if (v24)
          v25 = (WebCore::BaseAudioContext *)(v24 - 32);
        else
          v25 = 0;
        v26 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v19 + 112), v25, *(float *)(v19 + 88), *(float *)(v19 + 96), *(float *)(v19 + 100));
        if (HIDWORD(v26))
          *(_DWORD *)(v19 + 88) = v26;
      }
    }
  }
  return v10;
}

WTF *WebCore::AudioListener::setPosition@<X0>(WTF *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  WTF **v7;
  uint64_t v11;
  unint64_t v12;
  double v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  float v21;
  double v22;
  _BYTE v23[16];
  int v24;
  char v25[8];
  uint64_t v26;
  int v27;
  _BYTE v28[16];
  int v29;
  char v30;

  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v6 && (v7 = (WTF **)this, (this = *(WTF **)(v6 + 8)) != 0))
  {
    v11 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)this - 4) + 88))((uint64_t)this - 32);
    v12 = atomic_load((unint64_t *)(v11 + 152));
    v13 = (double)v12 / *(float *)(v11 + 160);
    WebCore::AudioParam::setValueAtTime(v7[1], a2, v13, (uint64_t)v25);
    v14 = v27;
    if (!v27)
    {
      WebCore::AudioParam::setValueAtTime(v7[2], a3, v13, (uint64_t)v23);
      v28[0] = 0;
      v29 = -1;
      v15 = v24;
      if (v24 != -1)
      {
        ((void (*)(char *, _BYTE *, _BYTE *))off_1E3368C18[v24])(&v30, v28, v23);
        v29 = v15;
      }
      std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v28, (uint64_t)v25);
      if (v29 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v29])(&v30, v28);
      if (v24 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24])(v28, v23);
      v14 = v27;
      if (!v27)
      {
        WebCore::AudioParam::setValueAtTime(v7[3], a4, v13, (uint64_t)v23);
        v28[0] = 0;
        v29 = -1;
        v16 = v24;
        if (v24 != -1)
        {
          ((void (*)(char *, _BYTE *, _BYTE *))off_1E3368C18[v24])(&v30, v28, v23);
          v29 = v16;
        }
        std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v28, (uint64_t)v25);
        if (v29 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v29])(&v30, v28);
        if (v24 != -1)
          ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24])(v28, v23);
        v14 = v27;
        if (!v27)
        {
          v18 = 0;
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
          return (WTF *)((uint64_t (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v18])(v28, v25);
        }
      }
    }
    if (v14 == 1)
    {
      v17 = v26;
      v26 = 0;
      *(_BYTE *)a5 = v25[0];
      a5[1] = v17;
      v18 = 1;
      *((_BYTE *)a5 + 16) = 1;
      return (WTF *)((uint64_t (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v18])(v28, v25);
    }
    v19 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioParam::setValueAtTime(v19, v21, v22, v20);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  return this;
}

WTF *WebCore::AudioParam::setValueAtTime@<X0>(WTF *this@<X0>, float a2@<S0>, double a3@<D1>, uint64_t a4@<X8>)
{
  WTF *v4;
  uint64_t v6;
  double v7;
  uint64_t v9;
  unint64_t v10;
  double v11;
  unsigned __int8 *v12;
  void *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[2];
  unsigned __int8 v19;
  _DWORD v20[2];
  double v21;
  int v22;
  WTF *v23[2];
  _DWORD v24[6];
  char v25;
  char v26;

  v4 = this;
  v6 = *((_QWORD *)this + 1);
  if (!v6 || (this = *(WTF **)(v6 + 8)) == 0)
  {
    *(_QWORD *)a4 = v4;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  v7 = a3;
  if (a3 < 0.0)
  {
    this = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 32;
    goto LABEL_21;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)this - 4) + 88))((uint64_t)this - 32);
  v10 = atomic_load((unint64_t *)(v9 + 152));
  v11 = *(float *)(v9 + 160);
  if ((double)v10 / v11 > v7)
    v7 = (double)v10 / v11;
  v12 = (unsigned __int8 *)v4 + 128;
  if (__ldaxr((unsigned __int8 *)v4 + 128))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C]((char *)v4 + 128);
LABEL_12:
  v20[0] = 0;
  *(float *)&v20[1] = a2;
  v21 = v7;
  v22 = 0;
  v25 = 0;
  *(_OWORD *)v23 = 0u;
  memset(v24, 0, 21);
  v26 = 0;
  WebCore::AudioParamTimeline::insertEvent((unsigned int *)v4 + 28, (unint64_t)v20, v18);
  this = v23[1];
  if (v23[1])
  {
    v23[1] = 0;
    v24[0] = 0;
    this = (WTF *)WTF::fastFree(this, v14);
  }
  v15 = __ldxr(v12);
  if (v15 == 1)
  {
    if (!__stlxr(0, v12))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  this = (WTF *)WTF::Lock::unlockSlow((WTF *)((char *)v4 + 128));
LABEL_19:
  v16 = v19;
  if (!v19)
  {
    *(_QWORD *)a4 = v4;
    goto LABEL_22;
  }
  v17 = v18[1];
  *(_BYTE *)a4 = v18[0];
  *(_QWORD *)(a4 + 8) = v17;
LABEL_21:
  v16 = 1;
LABEL_22:
  *(_DWORD *)(a4 + 16) = v16;
  return this;
}

WTF **WebCore::AudioListener::setOrientation@<X0>(WTF **this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>, _QWORD *a8@<X8>)
{
  uint64_t v9;
  WTF **v10;
  uint64_t v17;
  unint64_t v18;
  double v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  _BYTE v30[16];
  int v31;
  char v32[8];
  uint64_t v33;
  int v34;
  _BYTE v35[16];
  int v36;
  char v37;

  v9 = *((_QWORD *)this[4] + 1);
  if (v9 && (v10 = this, (this = *(WTF ***)(v9 + 8)) != 0))
  {
    v17 = (*((uint64_t (**)(WTF **))*(this - 4) + 11))(this - 4);
    v18 = atomic_load((unint64_t *)(v17 + 152));
    v19 = (double)v18 / *(float *)(v17 + 160);
    WebCore::AudioParam::setValueAtTime(v10[4], a2, v19, (uint64_t)v32);
    v20 = v34;
    if (!v34)
    {
      WebCore::AudioParam::setValueAtTime(v10[5], a3, v19, (uint64_t)v30);
      v35[0] = 0;
      v36 = -1;
      v21 = v31;
      if (v31 != -1)
      {
        ((void (*)(char *, _BYTE *, _BYTE *))off_1E3368C18[v31])(&v37, v35, v30);
        v36 = v21;
      }
      std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v35, (uint64_t)v32);
      if (v36 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v36])(&v37, v35);
      if (v31 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v31])(v35, v30);
      v20 = v34;
      if (!v34)
      {
        WebCore::AudioParam::setValueAtTime(v10[6], a4, v19, (uint64_t)v30);
        v35[0] = 0;
        v36 = -1;
        v22 = v31;
        if (v31 != -1)
        {
          ((void (*)(char *, _BYTE *, _BYTE *))off_1E3368C18[v31])(&v37, v35, v30);
          v36 = v22;
        }
        std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v35, (uint64_t)v32);
        if (v36 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v36])(&v37, v35);
        if (v31 != -1)
          ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v31])(v35, v30);
        v20 = v34;
        if (!v34)
        {
          WebCore::AudioParam::setValueAtTime(v10[7], a5, v19, (uint64_t)v30);
          v35[0] = 0;
          v36 = -1;
          v23 = v31;
          if (v31 != -1)
          {
            ((void (*)(char *, _BYTE *, _BYTE *))off_1E3368C18[v31])(&v37, v35, v30);
            v36 = v23;
          }
          std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v35, (uint64_t)v32);
          if (v36 != -1)
            ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v36])(&v37, v35);
          if (v31 != -1)
            ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v31])(v35, v30);
          v20 = v34;
          if (!v34)
          {
            WebCore::AudioParam::setValueAtTime(v10[8], a6, v19, (uint64_t)v30);
            v35[0] = 0;
            v36 = -1;
            v24 = v31;
            if (v31 != -1)
            {
              ((void (*)(char *, _BYTE *, _BYTE *))off_1E3368C18[v31])(&v37, v35, v30);
              v36 = v24;
            }
            std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v35, (uint64_t)v32);
            if (v36 != -1)
              ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v36])(&v37, v35);
            if (v31 != -1)
              ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v31])(v35, v30);
            v20 = v34;
            if (!v34)
            {
              WebCore::AudioParam::setValueAtTime(v10[9], a7, v19, (uint64_t)v30);
              v35[0] = 0;
              v36 = -1;
              v25 = v31;
              if (v31 != -1)
              {
                ((void (*)(char *, _BYTE *, _BYTE *))off_1E3368C18[v31])(&v37, v35, v30);
                v36 = v25;
              }
              std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v35, (uint64_t)v32);
              if (v36 != -1)
                ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v36])(&v37, v35);
              if (v31 != -1)
                ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v31])(v35, v30);
              v20 = v34;
              if (!v34)
              {
                v27 = 0;
                *a8 = 0;
                a8[1] = 0;
                a8[2] = 0;
                return (WTF **)((uint64_t (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v27])(v35, v32);
              }
            }
          }
        }
      }
    }
    if (v20 == 1)
    {
      v26 = v33;
      v33 = 0;
      *(_BYTE *)a8 = v32[0];
      a8[1] = v26;
      v27 = 1;
      *((_BYTE *)a8 + 16) = 1;
      return (WTF **)((uint64_t (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v27])(v35, v32);
    }
    v28 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF **)WebCore::convertEnumerationToString(v28, v29);
  }
  else
  {
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
  return this;
}

_QWORD *WebCore::convertEnumerationToString(_QWORD *result, int a2)
{
  _DWORD *v2;

  if ((_MergedGlobals_65[0] & 1) == 0)
  {
    _MergedGlobals_35 += 2;
    dword_1ECE7B440 += 2;
    qword_1EE337940 = (uint64_t)&_MergedGlobals_35;
    unk_1EE337948 = &dword_1ECE7B440;
    dword_1ECE7B460 += 2;
    dword_1ECE7B480 += 2;
    qword_1EE337950 = (uint64_t)&dword_1ECE7B460;
    unk_1EE337958 = &dword_1ECE7B480;
    dword_1ECE7B4A0 += 2;
    dword_1ECE7B4C0 += 2;
    qword_1EE337960 = (uint64_t)&dword_1ECE7B4A0;
    unk_1EE337968 = &dword_1ECE7B4C0;
    dword_1ECE7B4E0 += 2;
    dword_1ECE7B500 += 2;
    qword_1EE337970 = (uint64_t)&dword_1ECE7B4E0;
    unk_1EE337978 = &dword_1ECE7B500;
    dword_1ECE7B520 += 2;
    dword_1ECE7B540 += 2;
    qword_1EE337980 = (uint64_t)&dword_1ECE7B520;
    unk_1EE337988 = &dword_1ECE7B540;
    dword_1ECE7B560 += 2;
    dword_1ECE7B580 += 2;
    qword_1EE337990 = (uint64_t)&dword_1ECE7B560;
    unk_1EE337998 = &dword_1ECE7B580;
    dword_1ECE7B5A0 += 2;
    dword_1ECE7B5C0 += 2;
    qword_1EE3379A0 = (uint64_t)&dword_1ECE7B5A0;
    unk_1EE3379A8 = &dword_1ECE7B5C0;
    dword_1ECE7B5E0 += 2;
    dword_1ECE7B600 += 2;
    qword_1EE3379B0 = (uint64_t)&dword_1ECE7B5E0;
    unk_1EE3379B8 = &dword_1ECE7B600;
    dword_1ECE7B620 += 2;
    dword_1ECE7B640 += 2;
    qword_1EE3379C0 = (uint64_t)&dword_1ECE7B620;
    unk_1EE3379C8 = &dword_1ECE7B640;
    dword_1ECE7B660 += 2;
    dword_1ECE7B680 += 2;
    qword_1EE3379D0 = (uint64_t)&dword_1ECE7B660;
    unk_1EE3379D8 = &dword_1ECE7B680;
    dword_1ECE7B6A0 += 2;
    qword_1EE3379E0 = (uint64_t)&dword_1ECE7B6A0;
    _MergedGlobals_65[0] = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_65[8 * a2 + 8];
  if (v2)
    *v2 += 2;
  *result = v2;
  return result;
}

uint64_t WebCore::AudioNode::AudioNode(uint64_t a1, unsigned int *a2, int a3)
{
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[4];

  *(_QWORD *)a1 = off_1E3368A80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E3368BA8;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a3;
  if (a3)
  {
    v6 = 0;
    v7 = a2 + 6;
    v8 = a2;
  }
  else
  {
    v7 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>((uint64_t)a2);
    v6 = 1;
    if (!v7)
    {
      v8 = 0;
      goto LABEL_6;
    }
    v8 = v7;
  }
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
LABEL_6:
  *(_QWORD *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 88) = _Q0;
  *(_DWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 108) = 0;
  v15 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 112))(a2);
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(a1 + 120) = v15;
  v18 = *((_QWORD *)a2 + 9);
  v19 = *((_QWORD *)a2 + 10) + 1;
  *((_QWORD *)a2 + 10) = v19;
  v20 = v18 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = 2;
  *(_DWORD *)(a1 + 144) = 0;
  v22[0] = "AudioNode";
  v22[1] = 10;
  v22[2] = "AudioNode";
  v22[3] = v20;
  if (*(_BYTE *)(v15 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v22);
  if (a3)
    (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 136))(a2);
  return a1;
}

char *WebCore::AudioNode::logChannel(WebCore::AudioNode *this)
{
  return &WebCore::LogMedia;
}

void WebCore::AudioNode::~AudioNode(WebCore::AudioNode *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::AudioNodeOutput **v9;
  uint64_t v10;
  WebCore::AudioNodeOutput *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];

  *(_QWORD *)this = off_1E3368A80;
  *((_QWORD *)this + 3) = &unk_1E3368BA8;
  v3 = *((_QWORD *)this + 15);
  v4 = *((_QWORD *)this + 16);
  v17[0] = "AudioNode";
  v17[1] = 10;
  v17[2] = "~AudioNode";
  v17[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17);
    v3 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (!v3)
      goto LABEL_9;
  }
  else
  {
    *((_QWORD *)this + 15) = 0;
  }
  v5 = (unsigned int *)(v3 + 8);
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
LABEL_9:
  v8 = *((unsigned int *)this + 21);
  if ((_DWORD)v8)
  {
    v9 = (WebCore::AudioNodeOutput **)*((_QWORD *)this + 9);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        WebCore::AudioNodeOutput::~AudioNodeOutput(v11, a2);
        WTF::fastFree(v12, v13);
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v14 = (WTF *)*((_QWORD *)this + 9);
  if (v14)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v14, a2);
  }
  WTF::Vector<std::unique_ptr<WebCore::AudioNodeInput>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  v16 = *((unsigned int *)this + 12);
  if ((_DWORD)v16 != -1)
    ((void (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16BaseAudioContextENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS6_7WeakPtrIS9_NS8_30WeakPtrImplWithEventTargetDataENSA_ISG_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v16])(v17, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  WebCore::EventTarget::~EventTarget(this, v15);
}

uint64_t WebCore::AudioNode::initialize(uint64_t this)
{
  *(_BYTE *)(this + 32) = 1;
  return this;
}

uint64_t WebCore::AudioNode::uninitialize(uint64_t this)
{
  *(_BYTE *)(this + 32) = 0;
  return this;
}

WebCore::AudioSummingJunction *WebCore::AudioNode::addInput(WebCore::AudioNode *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::AudioNodeInput *v5;
  WebCore::AudioSummingJunction *result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::AudioSummingJunction *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WebCore::AudioSummingJunction *v19;
  uint64_t v20[4];

  v2 = *((_QWORD *)this + 15);
  v3 = *((_QWORD *)this + 16);
  v20[0] = (uint64_t)"AudioNode";
  v20[1] = 10;
  v20[2] = (uint64_t)"addInput";
  v20[3] = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v20);
  }
  v5 = (WebCore::AudioNodeInput *)WTF::fastMalloc((WTF *)0x58);
  result = WebCore::AudioNodeInput::AudioNodeInput(v5, this);
  v19 = result;
  v7 = *((unsigned int *)this + 17);
  if ((_DWORD)v7 == *((_DWORD *)this + 16))
  {
    result = (WebCore::AudioSummingJunction *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 7, v7 + 1, (unint64_t)&v19);
    v9 = *((unsigned int *)this + 17);
    v10 = *((_QWORD *)this + 7);
    v11 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)(v10 + 8 * v9) = v11;
    v12 = v19;
    *((_DWORD *)this + 17) = v9 + 1;
    v19 = 0;
    if (v12)
    {
      v13 = (unsigned int *)*((_QWORD *)v12 + 10);
      *((_QWORD *)v12 + 10) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          v20[0] = (uint64_t)v13;
          WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v20, v8);
        }
      }
      v16 = *((_QWORD *)v12 + 9);
      if (v16)
        WTF::fastFree((WTF *)(v16 - 16), v8);
      WebCore::AudioSummingJunction::~AudioSummingJunction(v12, v8);
      return (WebCore::AudioSummingJunction *)WTF::fastFree(v17, v18);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v7) = result;
    *((_DWORD *)this + 17) = v7 + 1;
  }
  return result;
}

WebCore::AudioNodeOutput *WebCore::AudioNode::addOutput(WebCore::AudioNode *this, void *a2)
{
  uint64_t v4;
  WebCore::AudioNodeOutput *v5;
  WebCore::AudioNodeOutput *result;
  WebCore::AudioNodeOutput *v8;
  unsigned int **v9;
  WebCore::AudioBus *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  WebCore::AudioNodeOutput *v23[4];

  v4 = *((_QWORD *)this + 15);
  v5 = (WebCore::AudioNodeOutput *)*((_QWORD *)this + 16);
  v23[0] = (WebCore::AudioNodeOutput *)"AudioNode";
  v23[1] = (WebCore::AudioNodeOutput *)10;
  v23[2] = (WebCore::AudioNodeOutput *)"addOutput";
  v23[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v23);
  }
  result = (WebCore::AudioNodeOutput *)WTF::fastMalloc((WTF *)0x48);
  v8 = result;
  *(_QWORD *)result = this;
  *((_DWORD *)result + 2) = (_DWORD)a2;
  *((_DWORD *)result + 3) = (_DWORD)a2;
  *((_QWORD *)result + 2) = 0;
  v9 = (unsigned int **)((char *)result + 16);
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 3) = 0;
  *((_BYTE *)result + 32) = 0;
  *((_BYTE *)result + 48) = 1;
  *((_DWORD *)result + 13) = 0;
  *((_DWORD *)result + 14) = 0;
  *((_QWORD *)result + 8) = 0;
  if (a2 <= 0x20)
  {
    v10 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    result = WebCore::AudioBus::AudioBus(v10, a2, 0x80uLL, 1);
    v12 = *v9;
    *v9 = (unsigned int *)result;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        v23[0] = (WebCore::AudioNodeOutput *)v12;
        result = (WebCore::AudioNodeOutput *)WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v23, v11);
      }
    }
  }
  v23[0] = v8;
  v15 = *((unsigned int *)this + 21);
  if ((_DWORD)v15 == *((_DWORD *)this + 20))
  {
    v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 9, v15 + 1, (unint64_t)v23);
    v18 = *((unsigned int *)this + 21);
    v19 = *((_QWORD *)this + 9);
    v20 = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v19 + 8 * v18) = v20;
    result = v23[0];
    *((_DWORD *)this + 21) = v18 + 1;
    v23[0] = 0;
    if (result)
    {
      WebCore::AudioNodeOutput::~AudioNodeOutput(result, v17);
      return (WebCore::AudioNodeOutput *)WTF::fastFree(v21, v22);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v15) = v8;
    *((_DWORD *)this + 21) = v15 + 1;
  }
  return result;
}

unsigned __int8 *WebCore::AudioNode::connect@<X0>(WebCore::AudioNode *this@<X0>, WebCore::AudioNode *a2@<X1>, unsigned int a3@<W2>, WTF::String *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char *v10;
  WTF::Thread *v11;
  WTF::Thread *v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  unsigned __int8 *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  WTF::String *v36;
  uint64_t *v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int *v68;
  unsigned int v69;
  WebCore::PlatformMediaSessionManager *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  WebCore::AudioNode *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  WebCore::AudioNode *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  WTF::Thread *v99;
  uint64_t v100;
  int v102;
  unsigned int v103;
  uint64_t v104[4];
  WTF::Logger *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::Logger *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  __int128 buf;
  int v119;
  WTF::StringImpl *v120;
  int v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 12);
  if ((_DWORD)v6 == -1)
    goto LABEL_188;
  v10 = (char *)this + 40;
  *(_QWORD *)&buf = v104;
  v11 = (WTF::Thread *)((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&buf, (char *)this + 40);
  v12 = v11;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13)
    v13 = WTF::Thread::initializeCurrentTLS(v11);
  if (v13 == *((_QWORD *)v12 + 35))
  {
    v15 = *((_DWORD *)v12 + 72) + 1;
    goto LABEL_11;
  }
  if (__ldaxr((unsigned __int8 *)v12 + 292))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)v12 + 292))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v12 + 35) = v13;
  v15 = 1;
LABEL_11:
  *((_DWORD *)v12 + 72) = v15;
  v16 = *((_QWORD *)this + 15);
  v17 = *((_QWORD *)this + 16);
  v104[0] = (uint64_t)"AudioNode";
  v104[1] = 10;
  v104[2] = (uint64_t)"connect";
  v104[3] = v17;
  if (*(_BYTE *)(v16 + 12))
  {
    v18 = *((_DWORD *)a2 + 9);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v104);
    v102 = v18;
    WebCore::convertEnumerationToString(&v111, v18);
    WTF::String::String((WTF::String *)&v110, ", output = ");
    WTF::String::number((WTF::String *)a3);
    WTF::String::String((WTF::String *)&v108, ", input = ");
    WTF::String::number(a4);
    v19 = v111;
    *(_QWORD *)&buf = v112;
    v105 = v111;
    v116 = v109;
    v117 = v110;
    v114 = v107;
    v115 = v108;
    result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v105, (uint64_t *)&v117, (uint64_t *)&v116, (uint64_t *)&v115, (uint64_t *)&v114, &v113);
    if (!v113)
    {
      __break(0xC471u);
      return result;
    }
    v22 = v107;
    v107 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v108;
    v108 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v21);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v109;
    v109 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v21);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v110;
    v110 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v21);
      else
        *(_DWORD *)v25 -= 2;
    }
    v111 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v21);
      else
        *(_DWORD *)v19 -= 2;
    }
    v26 = v112;
    v112 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v21);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = qword_1ECE7C4A0;
    v28 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v28)
    {
      WTF::String::utf8();
      v30 = v105 ? (char *)v105 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v30;
      _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v28 = (uint64_t)v105;
      v105 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
          v28 = WTF::fastFree((WTF *)v28, v29);
        else
          --*(_DWORD *)v28;
      }
    }
    if (WebCore::LogMedia)
    {
      v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v32 = *v31;
        if ((v32 & 1) != 0)
          break;
        v33 = __ldaxr(v31);
        if (v33 == v32)
        {
          if (!__stxr(v32 | 1, v31))
          {
            v103 = a4;
            v99 = v12;
            v34 = WTF::Logger::observers((WTF::Logger *)v28);
            v35 = *(unsigned int *)(v34 + 12);
            v36 = (WTF::String *)a3;
            if ((_DWORD)v35)
            {
              v37 = *(uint64_t **)v34;
              v100 = *(_QWORD *)v34 + 8 * v35;
              do
              {
                v38 = *v37;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v104);
                v119 = 0;
                WebCore::convertEnumerationToString(&v120, v102);
                v121 = 0;
                WTF::String::String((WTF::String *)&v122, ", output = ");
                v123 = 0;
                WTF::String::number(v36);
                v125 = 0;
                WTF::String::String((WTF::String *)&v126, ", input = ");
                v127 = 0;
                WTF::String::number((WTF::String *)v103);
                v105 = 0;
                v106 = 0;
                v39 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                LODWORD(v106) = 6;
                v105 = v39;
                v40 = HIDWORD(v106);
                *((_DWORD *)v39 + 4 * HIDWORD(v106)) = buf;
                v41 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v39 + 2 * v40 + 1) = v41;
                *((_DWORD *)v39 + 4 * (v40 + 1)) = v119;
                v42 = v120;
                if (v120)
                  *(_DWORD *)v120 += 2;
                *((_QWORD *)v39 + 2 * (v40 + 1) + 1) = v42;
                *((_DWORD *)v39 + 4 * (v40 + 2)) = v121;
                v43 = v122;
                if (v122)
                  *(_DWORD *)v122 += 2;
                *((_QWORD *)v39 + 2 * (v40 + 2) + 1) = v43;
                *((_DWORD *)v39 + 4 * (v40 + 3)) = v123;
                v44 = v124;
                if (v124)
                  *(_DWORD *)v124 += 2;
                *((_QWORD *)v39 + 2 * (v40 + 3) + 1) = v44;
                *((_DWORD *)v39 + 4 * (v40 + 4)) = v125;
                v45 = v126;
                if (v126)
                  *(_DWORD *)v126 += 2;
                *((_QWORD *)v39 + 2 * (v40 + 4) + 1) = v45;
                *((_DWORD *)v39 + 4 * (v40 + 5)) = v127;
                v46 = v128;
                if (v128)
                  *(_DWORD *)v128 += 2;
                *((_QWORD *)v39 + 2 * (v40 + 5) + 1) = v46;
                HIDWORD(v106) = v40 + 6;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v38 + 16))(v38, &WebCore::LogMedia, 0, &v105);
                v47 = v105;
                if (HIDWORD(v106))
                {
                  v48 = 16 * HIDWORD(v106);
                  v49 = (WTF::StringImpl **)((char *)v105 + 8);
                  do
                  {
                    v50 = *v49;
                    *v49 = 0;
                    if (v50)
                    {
                      if (*(_DWORD *)v50 == 2)
                        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v29);
                      else
                        *(_DWORD *)v50 -= 2;
                    }
                    v49 += 2;
                    v48 -= 16;
                  }
                  while (v48);
                  v47 = v105;
                  v36 = (WTF::String *)a3;
                }
                if (v47)
                {
                  v105 = 0;
                  LODWORD(v106) = 0;
                  WTF::fastFree(v47, v29);
                }
                v51 = v128;
                v128 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v126;
                v126 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v124;
                v124 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = v122;
                v122 = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                v55 = v120;
                v120 = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v55 -= 2;
                }
                v56 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                    WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v56 -= 2;
                }
                ++v37;
              }
              while (v37 != (uint64_t *)v100);
            }
            v57 = __ldxr(v31);
            if (v57 == 1)
            {
              v12 = v99;
              LODWORD(a4) = v103;
              if (!__stlxr(0, v31))
                break;
            }
            else
            {
              __clrex();
              v12 = v99;
              LODWORD(a4) = v103;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v58 = v113;
    v113 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v29);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  if (*((_DWORD *)this + 21) <= a3 || *((_DWORD *)a2 + 17) <= a4)
  {
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 0;
    goto LABEL_110;
  }
  v59 = *((unsigned int *)this + 12);
  if ((_DWORD)v59 == -1
    || (*(_QWORD *)&buf = v104,
        v60 = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v59])(&buf, v10), v61 = *((unsigned int *)a2 + 12), (_DWORD)v61 == -1))
  {
LABEL_188:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v62 = v60;
  *(_QWORD *)&buf = v104;
  if (v60 != ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v61])(&buf, (char *)a2 + 40)|| (*((_DWORD *)a2 + 17) <= a4? (v65 = 0): (v65 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * a4)), *((_DWORD *)this + 21) <= a3 ? (v66 = 0) : (v66 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * a3)), !*(_DWORD *)(v66 + 8)))
  {
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 12;
LABEL_110:
    *(_BYTE *)(a5 + 16) = 1;
    goto LABEL_111;
  }
  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 72))(v62);
  if ((v67 & 1) == 0)
  {
    v68 = (unsigned int *)(v62 + 24);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 + 1, v68));
    v70 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 80))(v62);
    if (v70 == a2)
    {
      v71 = *(_QWORD *)(v62 + 432);
      if (!*(_DWORD *)(v71 + 68)
        || (v72 = **(_QWORD **)(v71 + 56)) == 0
        || (v73 = *(_QWORD *)(v72 + 40)) == 0
        || !*(_DWORD *)(v73 - 12))
      {
        if (*(_BYTE *)(WebCore::PlatformMediaSessionManager::sharedManager(v70) + 50)
          && (v74 = *(_QWORD *)(v62 + 440), *(_BYTE *)(v74 + 48) != 4))
        {
          WebCore::PlatformMediaSession::endInterruption(v74, 0);
          *(_BYTE *)(v62 + 461) = 0;
          WebCore::PlatformMediaSession::beginInterruption(*(_QWORD *)(v62 + 440), 2);
          *(_BYTE *)(v62 + 461) = 1;
        }
        {
          if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
            (*(void (**)(uint64_t))(*(_QWORD *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager
                                            + 48))(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager);
        }
        else
        {
          WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
        }
      }
    }
  }
  if (!*(_QWORD *)(v65 + 64))
    goto LABEL_181;
  if (*(_BYTE *)(v66 + 48))
  {
    if ((WebCore::AudioSummingJunction::addOutput(v65, v66) & 1) == 0)
      goto LABEL_181;
  }
  else
  {
    v104[0] = v66;
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v65 + 72), v104, (uint64_t)&buf);
    if (!(_BYTE)v119)
      goto LABEL_181;
  }
  v77 = *(_QWORD *)(v66 + 40);
  v76 = (uint64_t *)(v66 + 40);
  v75 = v77;
  v78 = *(WebCore::AudioNode **)(v65 + 64);
  if (v77
    || (WTF::HashTable<WebCore::AudioNodeInput *,WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashMap<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashTraits<WebCore::AudioNodeInput *>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioNodeInput *>>::rehash(v76, 8u), (v75 = *v76) != 0))
  {
    v79 = *(_DWORD *)(v75 - 8);
  }
  else
  {
    v79 = 0;
  }
  v80 = (~(v65 << 32) + v65) ^ ((unint64_t)(~(v65 << 32) + v65) >> 22);
  v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
  v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
  v83 = v79 & ((v82 >> 31) ^ v82);
  v84 = (uint64_t *)(v75 + 16 * v83);
  v85 = *v84;
  if (*v84)
  {
    v86 = 0;
    v87 = 1;
    while (v85 != v65)
    {
      if (v85 == -1)
        v86 = v84;
      v83 = (v83 + v87) & v79;
      v84 = (uint64_t *)(v75 + 16 * v83);
      v85 = *v84;
      ++v87;
      if (!*v84)
      {
        if (v86)
        {
          *v86 = 0;
          v86[1] = 0;
          --*(_DWORD *)(*v76 - 16);
          v84 = v86;
        }
        goto LABEL_164;
      }
    }
    goto LABEL_181;
  }
LABEL_164:
  *v84 = v65;
  if (v78)
    WebCore::AudioNode::incrementConnectionCount(v78);
  v88 = (WebCore::AudioNode *)v84[1];
  v84[1] = (uint64_t)v78;
  if (v88)
    WebCore::AudioNode::decrementConnectionCount(v88);
  v89 = *v76;
  if (*v76)
    v90 = *(_DWORD *)(v89 - 12) + 1;
  else
    v90 = 1;
  *(_DWORD *)(v89 - 12) = v90;
  v91 = *v76;
  if (*v76)
    v92 = *(_DWORD *)(v91 - 12);
  else
    v92 = 0;
  v93 = (*(_DWORD *)(v91 - 16) + v92);
  v94 = *(unsigned int *)(v91 - 4);
  if (v94 <= 0x400)
  {
    if (3 * v94 > 4 * v93)
      goto LABEL_181;
    if (!(_DWORD)v94)
    {
      v95 = 8;
      goto LABEL_180;
    }
LABEL_177:
    v95 = (_DWORD)v94 << (6 * *(_DWORD *)(v91 - 12) >= (2 * v94));
LABEL_180:
    WTF::HashTable<WebCore::AudioNodeInput *,WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashMap<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashTraits<WebCore::AudioNodeInput *>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioNodeInput *>>::rehash(v76, v95);
    goto LABEL_181;
  }
  if (v94 <= 2 * v93)
    goto LABEL_177;
LABEL_181:
  result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 272))(this);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if ((v67 & 1) == 0)
  {
    v96 = (unsigned int *)(v62 + 24);
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, (unsigned int *)(v62 + 24));
      result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
    }
  }
LABEL_111:
  v63 = *((_DWORD *)v12 + 72) - 1;
  *((_DWORD *)v12 + 72) = v63;
  if (!v63)
  {
    *((_QWORD *)v12 + 35) = 0;
    result = (unsigned __int8 *)v12 + 292;
    v64 = __ldxr((unsigned __int8 *)v12 + 292);
    if (v64 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WebCore::AudioNode::connect@<X0>(WebCore::AudioNode *this@<X0>, uint64_t a2@<X1>, WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char *v9;
  WTF::Thread *v10;
  WTF::Thread *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t result;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::Logger *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::Logger *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  int v69;
  uint64_t *v70;
  void *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  WebCore::AudioParam **v82;
  WebCore::AudioParam *v83;
  WebCore::AudioParam **v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  WTF *v93;
  void *v94;
  WTF::Thread *v95;
  uint64_t v96;
  _QWORD v97[4];
  WTF::Logger *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  __int128 buf;
  const char *v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5 == -1)
    goto LABEL_189;
  v9 = (char *)this + 40;
  *(_QWORD *)&buf = v97;
  v10 = (WTF::Thread *)((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&buf, (char *)this + 40);
  v11 = v10;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12)
    v12 = WTF::Thread::initializeCurrentTLS(v10);
  if (v12 != *((_QWORD *)v11 + 35))
  {
    if (__ldaxr((unsigned __int8 *)v11 + 292))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11 + 292))
    {
LABEL_10:
      *((_QWORD *)v11 + 35) = v12;
      v14 = 1;
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  v14 = *((_DWORD *)v11 + 72) + 1;
LABEL_11:
  *((_DWORD *)v11 + 72) = v14;
  v15 = *((_QWORD *)this + 15);
  v16 = *((_QWORD *)this + 16);
  v97[0] = "AudioNode";
  v97[1] = 10;
  v97[2] = "connect";
  v97[3] = v16;
  if (!*(_BYTE *)(v15 + 12))
    goto LABEL_122;
  if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
    goto LABEL_122;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v97);
  v18 = *(_QWORD *)(a2 + 80);
  if (v18)
    *(_DWORD *)v18 += 2;
  WTF::String::String((WTF::String *)&v101, ", output = ");
  result = WTF::String::number(a3);
  if (v102)
    v20 = *((_DWORD *)v102 + 1);
  else
    v20 = 0;
  if (v18)
  {
    v21 = *(_DWORD *)(v18 + 4);
    if (v101)
      goto LABEL_23;
LABEL_168:
    v22 = 0;
    if (v100)
      goto LABEL_24;
LABEL_169:
    v23 = 0;
    goto LABEL_25;
  }
  v21 = 0;
  if (!v101)
    goto LABEL_168;
LABEL_23:
  v22 = *((_DWORD *)v101 + 1);
  if (!v100)
    goto LABEL_169;
LABEL_24:
  v23 = *((_DWORD *)v100 + 1);
LABEL_25:
  if ((v23 | v22) < 0
    || ((v24 = __OFADD__(v22, v23), v25 = v22 + v23, !v24) ? (v26 = 0) : (v26 = 1),
        v21 < 0
     || (v26 & 1) != 0
     || ((v24 = __OFADD__(v21, v25), v27 = v21 + v25, !v24) ? (v28 = 0) : (v28 = 1),
         v20 < 0 || (v28 & 1) != 0 || (result = (v20 + v27), __OFADD__(v20, v27)))))
  {
    v103 = 0;
    goto LABEL_191;
  }
  if (v102 && (*((_BYTE *)v102 + 16) & 4) == 0 || v18 && (*(_BYTE *)(v18 + 16) & 4) == 0)
  {
    v29 = 0;
    goto LABEL_42;
  }
  if (v101)
  {
    v62 = *((_DWORD *)v101 + 4);
    v29 = (v62 >> 2) & 1;
    if (v100 && (v62 & 4) != 0)
      goto LABEL_116;
  }
  else
  {
    if (v100)
    {
LABEL_116:
      v29 = (*((unsigned __int8 *)v100 + 16) >> 2) & 1;
      goto LABEL_42;
    }
    v29 = 1;
  }
LABEL_42:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v29, (uint64_t)v102, (_DWORD *)v18, (uint64_t)v101, (uint64_t)v100, &v103);
  if (!v103)
  {
LABEL_191:
    __break(0xC471u);
    return result;
  }
  v31 = v100;
  v100 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v101;
  v101 = 0;
  if (!v32)
  {
LABEL_49:
    if (v18)
      goto LABEL_50;
    goto LABEL_52;
  }
  if (*(_DWORD *)v32 != 2)
  {
    *(_DWORD *)v32 -= 2;
    goto LABEL_49;
  }
  WTF::StringImpl::destroy(v32, v30);
  if (v18)
  {
LABEL_50:
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v18, v30);
    else
      *(_DWORD *)v18 -= 2;
  }
LABEL_52:
  v33 = v102;
  v102 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v30);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = qword_1ECE7C4A0;
  v35 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v35)
  {
    WTF::String::utf8();
    v37 = v98 ? (char *)v98 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v37;
    _os_log_impl(&dword_1940B8000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v35 = (uint64_t)v98;
    v98 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        v35 = WTF::fastFree((WTF *)v35, v36);
      else
        --*(_DWORD *)v35;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v38 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v39 = *v38;
      if ((v39 & 1) != 0)
        break;
      v40 = __ldaxr(v38);
      if (v40 == v39)
      {
        if (!__stxr(v39 | 1, v38))
        {
          v95 = v11;
          v96 = a4;
          v41 = WTF::Logger::observers((WTF::Logger *)v35);
          v42 = *(unsigned int *)(v41 + 12);
          if ((_DWORD)v42)
          {
            v43 = *(uint64_t **)v41;
            v44 = *(_QWORD *)v41 + 8 * v42;
            do
            {
              v45 = *v43;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v97);
              LODWORD(v105) = 0;
              v46 = *(WTF::StringImpl **)(a2 + 80);
              if (v46)
                *(_DWORD *)v46 += 2;
              v106 = v46;
              v107 = 0;
              WTF::String::String((WTF::String *)&v108, ", output = ");
              v109 = 0;
              WTF::String::number(a3);
              v98 = 0;
              v99 = 0;
              v47 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v99) = 4;
              v98 = v47;
              v48 = HIDWORD(v99);
              *((_DWORD *)v47 + 4 * HIDWORD(v99)) = buf;
              v49 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v47 + 2 * v48 + 1) = v49;
              *((_DWORD *)v47 + 4 * (v48 + 1)) = (_DWORD)v105;
              v50 = v106;
              if (v106)
                *(_DWORD *)v106 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 1) + 1) = v50;
              *((_DWORD *)v47 + 4 * (v48 + 2)) = v107;
              v51 = v108;
              if (v108)
                *(_DWORD *)v108 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 2) + 1) = v51;
              *((_DWORD *)v47 + 4 * (v48 + 3)) = v109;
              v52 = v110;
              if (v110)
                *(_DWORD *)v110 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 3) + 1) = v52;
              HIDWORD(v99) = v48 + 4;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v45 + 16))(v45, &WebCore::LogMedia, 3, &v98);
              v53 = v98;
              if (HIDWORD(v99))
              {
                v54 = 16 * HIDWORD(v99);
                v55 = (WTF::StringImpl **)((char *)v98 + 8);
                do
                {
                  v56 = *v55;
                  *v55 = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v36);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  v55 += 2;
                  v54 -= 16;
                }
                while (v54);
                v53 = v98;
              }
              if (v53)
              {
                v98 = 0;
                LODWORD(v99) = 0;
                WTF::fastFree(v53, v36);
              }
              v57 = v110;
              v110 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = v108;
              v108 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = v106;
              v106 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v59 -= 2;
              }
              v60 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v60 -= 2;
              }
              ++v43;
            }
            while (v43 != (uint64_t *)v44);
          }
          v61 = __ldxr(v38);
          if (v61 == 1)
          {
            v11 = v95;
            a4 = v96;
            if (!__stlxr(0, v38))
              break;
          }
          else
          {
            __clrex();
            v11 = v95;
            a4 = v96;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v63 = v103;
  v103 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v36);
    else
      *(_DWORD *)v63 -= 2;
  }
LABEL_122:
  if (*((_DWORD *)this + 21) <= a3)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 0;
    goto LABEL_131;
  }
  v64 = *((unsigned int *)this + 12);
  if ((_DWORD)v64 == -1)
LABEL_189:
    std::__throw_bad_variant_access[abi:sn180100]();
  *(_QWORD *)&buf = v97;
  result = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v64])(&buf, v9);
  v65 = *(_QWORD *)(a2 + 8);
  if (!v65 || ((v66 = *(_QWORD *)(v65 + 8)) != 0 ? (v67 = v66 - 32 == result) : (v67 = 0), !v67))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 12;
LABEL_131:
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_132;
  }
  if (*((_DWORD *)this + 21) > a3)
  {
    v70 = *(uint64_t **)(*((_QWORD *)this + 9) + 8 * a3);
    if (v70)
    {
      result = (uint64_t)WebCore::AudioSummingJunction::addOutput(a2, (uint64_t)v70);
      if ((_DWORD)result)
      {
        v72 = *(_QWORD *)(a2 + 144);
        v73 = *(WTF::StringImpl **)(a2 + 152);
        *(_QWORD *)&buf = "AudioParam";
        *((_QWORD *)&buf + 1) = 11;
        v105 = "connect";
        v106 = v73;
        LODWORD(v97[0]) = *(_DWORD *)(*v70 + 36);
        if (*(_BYTE *)(v72 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::AudioNode::NodeType>((WTF::Logger::LogSiteIdentifier *)&buf, (int *)v97);
        ++*(_DWORD *)(a2 + 64);
        v76 = v70[8];
        v75 = v70 + 8;
        v74 = v76;
        if (v76
          || (result = WTF::HashTable<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>::rehash(v75, 8u), (v74 = *v75) != 0))
        {
          v77 = *(_DWORD *)(v74 - 8);
        }
        else
        {
          v77 = 0;
        }
        v78 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((v78 + ~(v78 << 13)) >> 8));
        v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
        v81 = v77 & ((v80 >> 31) ^ v80);
        v82 = (WebCore::AudioParam **)(v74 + 8 * v81);
        v83 = *v82;
        if (*v82)
        {
          v84 = 0;
          v85 = 1;
          do
          {
            if (v83 == (WebCore::AudioParam *)a2)
            {
              if (*(_DWORD *)(a2 + 64) == 1)
              {
                WebCore::AudioParam::~AudioParam((WebCore::AudioParam *)a2, v71);
                result = WTF::fastFree(v93, v94);
              }
              else
              {
                --*(_DWORD *)(a2 + 64);
              }
              goto LABEL_185;
            }
            if (v83 == (WebCore::AudioParam *)-1)
              v84 = v82;
            v81 = (v81 + v85) & v77;
            v82 = (WebCore::AudioParam **)(v74 + 8 * v81);
            v83 = *v82;
            ++v85;
          }
          while (*v82);
          if (v84)
          {
            *v84 = 0;
            --*(_DWORD *)(*v75 - 16);
            v82 = v84;
          }
        }
        *v82 = (WebCore::AudioParam *)a2;
        v86 = *v75;
        if (*v75)
          v87 = *(_DWORD *)(v86 - 12) + 1;
        else
          v87 = 1;
        *(_DWORD *)(v86 - 12) = v87;
        v88 = *v75;
        if (*v75)
          v89 = *(_DWORD *)(v88 - 12);
        else
          v89 = 0;
        v90 = (*(_DWORD *)(v88 - 16) + v89);
        v91 = *(unsigned int *)(v88 - 4);
        if (v91 > 0x400)
        {
          if (v91 > 2 * v90)
            goto LABEL_185;
          goto LABEL_179;
        }
        if (3 * v91 <= 4 * v90)
        {
          if (!(_DWORD)v91)
          {
            v92 = 8;
            goto LABEL_184;
          }
LABEL_179:
          v92 = (_DWORD)v91 << (6 * *(_DWORD *)(v88 - 12) >= (2 * v91));
LABEL_184:
          result = WTF::HashTable<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>::rehash(v75, v92);
        }
      }
    }
  }
LABEL_185:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
LABEL_132:
  v68 = *((_DWORD *)v11 + 72) - 1;
  *((_DWORD *)v11 + 72) = v68;
  if (!v68)
  {
    *((_QWORD *)v11 + 35) = 0;
    result = (uint64_t)v11 + 292;
    v69 = __ldxr((unsigned __int8 *)v11 + 292);
    if (v69 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WebCore::AudioNode::disconnect(WebCore::AudioNode *this)
{
  uint64_t v1;
  WTF::Thread *v3;
  WTF::Thread *v4;
  uint64_t v5;
  int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned __int8 *result;
  int v14;
  int v15;
  WebCore::AudioNode *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  _QWORD v20[4];

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v16 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioNode::disconnect(v16, v17, v18);
  }
  v20[0] = &v19;
  v3 = (WTF::Thread *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(v20, (char *)this + 40);
  v4 = v3;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5)
    v5 = WTF::Thread::initializeCurrentTLS(v3);
  if (v5 == *((_QWORD *)v4 + 35))
  {
    v7 = *((_DWORD *)v4 + 72) + 1;
    goto LABEL_11;
  }
  if (__ldaxr((unsigned __int8 *)v4 + 292))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)v4 + 292))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v4 + 35) = v5;
  v7 = 1;
LABEL_11:
  *((_DWORD *)v4 + 72) = v7;
  if (*((_DWORD *)this + 21))
  {
    v8 = 0;
    do
    {
      v9 = *(uint64_t **)(*((_QWORD *)this + 9) + 8 * v8);
      v10 = *((_QWORD *)this + 15);
      v11 = *((_QWORD *)this + 16);
      v20[0] = "AudioNode";
      v20[1] = 10;
      v20[2] = "disconnect";
      v20[3] = v11;
      v19 = *(_DWORD *)(*v9 + 36);
      if (*(_BYTE *)(v10 + 12))
      {
        if (WebCore::LogMedia)
          v12 = byte_1ECE7C490 >= 3u;
        else
          v12 = 0;
        if (v12)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::AudioNode::NodeType>((WTF::Logger::LogSiteIdentifier *)v20, &v19);
      }
      WebCore::AudioNodeOutput::disconnectAllInputs((uint64_t)v9);
      WebCore::AudioNodeOutput::disconnectAllParams(v9);
      ++v8;
    }
    while (v8 < *((unsigned int *)this + 21));
  }
  result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 272))(this);
  v14 = *((_DWORD *)v4 + 72) - 1;
  *((_DWORD *)v4 + 72) = v14;
  if (!v14)
  {
    *((_QWORD *)v4 + 35) = 0;
    result = (unsigned __int8 *)v4 + 292;
    v15 = __ldxr((unsigned __int8 *)v4 + 292);
    if (v15 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WebCore::AudioNode::disconnect@<X0>(WebCore::AudioNode *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::Thread *v7;
  WTF::Thread *v8;
  uint64_t v9;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *result;
  int v16;
  int v17;
  WebCore::AudioNode *v18;
  WebCore::AudioNode *v19;
  int v20;
  _QWORD v21[4];

  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1)
  {
    v18 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WebCore::AudioNode::disconnect(v18, v19);
  }
  v21[0] = &v20;
  v7 = (WTF::Thread *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(v21, (char *)this + 40);
  v8 = v7;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
    v9 = WTF::Thread::initializeCurrentTLS(v7);
  if (v9 == *((_QWORD *)v8 + 35))
  {
    v11 = *((_DWORD *)v8 + 72) + 1;
    goto LABEL_11;
  }
  if (__ldaxr((unsigned __int8 *)v8 + 292))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)v8 + 292))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v8 + 35) = v9;
  v11 = 1;
LABEL_11:
  *((_DWORD *)v8 + 72) = v11;
  if (*((_DWORD *)this + 21) <= a2)
  {
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v12 = *(uint64_t **)(*((_QWORD *)this + 9) + 8 * a2);
    v13 = *((_QWORD *)this + 15);
    v14 = *((_QWORD *)this + 16);
    v21[0] = "AudioNode";
    v21[1] = 10;
    v21[2] = "disconnect";
    v21[3] = v14;
    v20 = *(_DWORD *)(*v12 + 36);
    if (*(_BYTE *)(v13 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::AudioNode::NodeType>((WTF::Logger::LogSiteIdentifier *)v21, &v20);
    WebCore::AudioNodeOutput::disconnectAllInputs((uint64_t)v12);
    WebCore::AudioNodeOutput::disconnectAllParams(v12);
    result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 272))(this);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  v16 = *((_DWORD *)v8 + 72) - 1;
  *((_DWORD *)v8 + 72) = v16;
  if (!v16)
  {
    *((_QWORD *)v8 + 35) = 0;
    result = (unsigned __int8 *)v8 + 292;
    v17 = __ldxr((unsigned __int8 *)v8 + 292);
    if (v17 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WebCore::AudioNode::disconnect@<X0>(WebCore::AudioNode *this@<X0>, WebCore::AudioNode *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  WTF::Thread *v7;
  WTF::Thread *v8;
  uint64_t v9;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  _QWORD *v44;
  WebCore::AudioNode *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int8 *result;
  int v59;
  int v60;
  WebCore::AudioNodeInput *v61;
  WebCore::AudioNodeOutput *v62;
  WTF::Thread *v63;
  _QWORD *v64;
  char v65;
  char *v66;

  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1)
  {
    v61 = (WebCore::AudioNodeInput *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WebCore::AudioNodeInput::disconnect(v61, v62);
  }
  v66 = &v65;
  v7 = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v66, (char *)this + 40);
  v8 = v7;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
    v9 = WTF::Thread::initializeCurrentTLS(v7);
  if (v9 == *((_QWORD *)v8 + 35))
  {
    v11 = *((_DWORD *)v8 + 72) + 1;
    goto LABEL_11;
  }
  if (__ldaxr((unsigned __int8 *)v8 + 292))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)v8 + 292))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v8 + 35) = v9;
  v11 = 1;
LABEL_11:
  *((_DWORD *)v8 + 72) = v11;
  v12 = *((unsigned int *)this + 21);
  if (!(_DWORD)v12)
    goto LABEL_70;
  LODWORD(v13) = *((_DWORD *)a2 + 17);
  if (!(_DWORD)v13)
    goto LABEL_70;
  v63 = v8;
  v64 = a3;
  v14 = 0;
  v15 = 0;
  do
  {
    if (!(_DWORD)v13)
      goto LABEL_67;
    v16 = *(uint64_t **)(*((_QWORD *)this + 9) + 8 * v14);
    v18 = v16 + 5;
    v17 = v16[5];
    if (!v17)
      goto LABEL_67;
    v19 = 0;
    v20 = ((unint64_t)v16 + ~((_QWORD)v16 << 32)) ^ (((unint64_t)v16 + ~((_QWORD)v16 << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = (v22 >> 31) ^ v22;
LABEL_17:
    v24 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v19);
    v25 = *(_DWORD *)(v17 - 8);
    v26 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = (v28 >> 31) ^ v28;
    v30 = v25 & v29;
    v31 = *(_QWORD *)(v17 + 16 * (v25 & v29));
    if (v31 == v24)
      goto LABEL_81;
    v32 = 1;
    do
    {
      if (!v31)
        goto LABEL_55;
      v30 = (v30 + v32) & v25;
      v31 = *(_QWORD *)(v17 + 16 * v30);
      ++v32;
    }
    while (v31 != v24);
    if (v16)
    {
LABEL_81:
      if (*(_QWORD *)(v24 + 64))
      {
        if ((WebCore::AudioSummingJunction::removeOutput(*(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v19), v16) & 1) == 0)
        {
          v38 = (uint64_t *)(v24 + 72);
          v39 = *(_QWORD *)(v24 + 72);
          if (!v39)
            goto LABEL_54;
          v40 = *(_DWORD *)(v39 - 8);
          v41 = v40 & v23;
          v42 = *(uint64_t **)(v39 + 8 * v41);
          if (v42 != v16)
          {
            v43 = 1;
            while (v42)
            {
              v41 = ((_DWORD)v41 + v43) & v40;
              v42 = *(uint64_t **)(v39 + 8 * v41);
              ++v43;
              if (v42 == v16)
                goto LABEL_43;
            }
            v41 = *(unsigned int *)(v39 - 4);
          }
LABEL_43:
          if (v41 == *(_DWORD *)(v39 - 4))
            goto LABEL_54;
          *(_QWORD *)(v39 + 8 * v41) = -1;
          ++*(_DWORD *)(*v38 - 16);
          v48 = *v38;
          if (*v38)
            v49 = *(_DWORD *)(v48 - 12) - 1;
          else
            v49 = -1;
          *(_DWORD *)(v48 - 12) = v49;
          v54 = *v38;
          if (*v38)
          {
            v55 = 6 * *(_DWORD *)(v54 - 12);
            v56 = *(_DWORD *)(v54 - 4);
            if (v55 < v56 && v56 >= 9)
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v38, v56 >> 1, 0);
          }
        }
        v33 = *v18;
        if (*v18)
        {
          v34 = *(_DWORD *)(v33 - 8);
          v35 = v34 & v29;
          v36 = *(_QWORD *)(v33 + 16 * v35);
          if (v36 != v24)
          {
            v37 = 1;
            while (v36)
            {
              v35 = ((_DWORD)v35 + v37) & v34;
              v36 = *(_QWORD *)(v33 + 16 * v35);
              ++v37;
              if (v36 == v24)
                goto LABEL_37;
            }
            v35 = *(unsigned int *)(v33 - 4);
          }
LABEL_37:
          if (v35 != *(_DWORD *)(v33 - 4))
          {
            v44 = (_QWORD *)(v33 + 16 * v35);
            v45 = (WebCore::AudioNode *)v44[1];
            *v44 = -1;
            v44[1] = 0;
            if (v45)
              WebCore::AudioNode::decrementConnectionCount(v45);
            ++*(_DWORD *)(*v18 - 16);
            v46 = *v18;
            if (*v18)
              v47 = *(_DWORD *)(v46 - 12) - 1;
            else
              v47 = -1;
            *(_DWORD *)(v46 - 12) = v47;
            v50 = *v18;
            if (*v18)
            {
              v51 = 6 * *(_DWORD *)(v50 - 12);
              v52 = *(_DWORD *)(v50 - 4);
              if (v51 < v52 && v52 >= 9)
                WTF::HashTable<WebCore::AudioNodeInput *,WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashMap<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashTraits<WebCore::AudioNodeInput *>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioNodeInput *>>::rehash(v18, v52 >> 1);
            }
          }
        }
      }
    }
LABEL_54:
    v15 = 1;
LABEL_55:
    while (1)
    {
      ++v19;
      v13 = *((unsigned int *)a2 + 17);
      if (v19 >= v13)
        break;
      v17 = *v18;
      if (*v18)
        goto LABEL_17;
    }
    v12 = *((unsigned int *)this + 21);
LABEL_67:
    ++v14;
  }
  while (v14 < v12);
  v8 = v63;
  a3 = v64;
  if ((v15 & 1) != 0)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 272))(this);
    *v64 = 0;
    v64[1] = 0;
    v64[2] = 0;
    goto LABEL_71;
  }
LABEL_70:
  result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a3 = 12;
  a3[16] = 1;
LABEL_71:
  v59 = *((_DWORD *)v8 + 72) - 1;
  *((_DWORD *)v8 + 72) = v59;
  if (!v59)
  {
    *((_QWORD *)v8 + 35) = 0;
    result = (unsigned __int8 *)v8 + 292;
    v60 = __ldxr((unsigned __int8 *)v8 + 292);
    if (v60 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WebCore::AudioNodeInput::disconnect(uint64_t this, WebCore::AudioNodeOutput *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WebCore::AudioNodeOutput *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;

  if (!a2)
    return this;
  v2 = this;
  if (!*(_QWORD *)(this + 64))
    return this;
  this = WebCore::AudioSummingJunction::removeOutput(this, a2);
  if ((this & 1) != 0)
    goto LABEL_4;
  this = v2 + 72;
  v14 = *(_QWORD *)(v2 + 72);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(WebCore::AudioNodeOutput **)(v14 + 8 * v19);
    if (v20 != a2)
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(WebCore::AudioNodeOutput **)(v14 + 8 * v19);
        ++v21;
        if (v20 == a2)
          goto LABEL_23;
      }
      v19 = *(unsigned int *)(v14 - 4);
    }
LABEL_23:
    if (v19 != *(_DWORD *)(v14 - 4))
    {
      *(_QWORD *)(v14 + 8 * v19) = -1;
      ++*(_DWORD *)(*(_QWORD *)this - 16);
      v25 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v26 = *(_DWORD *)(v25 - 12) - 1;
      else
        v26 = -1;
      *(_DWORD *)(v25 - 12) = v26;
      v31 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v32 = 6 * *(_DWORD *)(v31 - 12);
        v33 = *(_DWORD *)(v31 - 4);
        if (v32 < v33 && v33 >= 9)
          this = (uint64_t)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)this, v33 >> 1, 0);
      }
LABEL_4:
      v6 = *((_QWORD *)a2 + 5);
      v5 = (uint64_t *)((char *)a2 + 40);
      v4 = v6;
      if (v6)
      {
        v7 = *(_DWORD *)(v4 - 8);
        v8 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        v12 = *(_QWORD *)(v4 + 16 * v11);
        if (v12 != v2)
        {
          v13 = 1;
          while (v12)
          {
            v11 = ((_DWORD)v11 + v13) & v7;
            v12 = *(_QWORD *)(v4 + 16 * v11);
            ++v13;
            if (v12 == v2)
              goto LABEL_17;
          }
          v11 = *(unsigned int *)(v4 - 4);
        }
LABEL_17:
        if (v11 != *(_DWORD *)(v4 - 4))
        {
          v22 = (_QWORD *)(v4 + 16 * v11);
          this = v22[1];
          *v22 = -1;
          v22[1] = 0;
          if (this)
            this = (uint64_t)WebCore::AudioNode::decrementConnectionCount((WebCore::AudioNode *)this);
          ++*(_DWORD *)(*v5 - 16);
          v23 = *v5;
          if (*v5)
            v24 = *(_DWORD *)(v23 - 12) - 1;
          else
            v24 = -1;
          *(_DWORD *)(v23 - 12) = v24;
          v27 = *v5;
          if (*v5)
          {
            v28 = 6 * *(_DWORD *)(v27 - 12);
            v29 = *(_DWORD *)(v27 - 4);
            if (v28 < v29 && v29 >= 9)
              return WTF::HashTable<WebCore::AudioNodeInput *,WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashMap<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashTraits<WebCore::AudioNodeInput *>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioNodeInput *>>::rehash(v5, v29 >> 1);
          }
        }
      }
    }
  }
  return this;
}

unsigned __int8 *WebCore::AudioNode::disconnect@<X0>(WebCore::AudioNode *this@<X0>, WebCore::AudioNode *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  WTF::Thread *v9;
  WTF::Thread *v10;
  uint64_t v11;
  int v13;
  unint64_t v14;
  WebCore::AudioNodeOutput *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *result;
  int v28;
  int v29;
  WebCore::AudioNode *v30;
  WebCore::AudioNode *v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  char *v35;

  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5 == -1)
  {
    v30 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WebCore::AudioNode::disconnect(v30, v31, v32, v33);
  }
  v35 = &v34;
  v9 = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v35, (char *)this + 40);
  v10 = v9;
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(v9);
  if (v11 == *((_QWORD *)v10 + 35))
  {
    v13 = *((_DWORD *)v10 + 72) + 1;
    goto LABEL_11;
  }
  if (__ldaxr((unsigned __int8 *)v10 + 292))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)v10 + 292))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v10 + 35) = v11;
  v13 = 1;
LABEL_11:
  *((_DWORD *)v10 + 72) = v13;
  if (*((_DWORD *)this + 21) <= a3)
  {
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 0;
LABEL_29:
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_30;
  }
  v14 = *((unsigned int *)a2 + 17);
  if (!(_DWORD)v14
    || (v15 = *(WebCore::AudioNodeOutput **)(*((_QWORD *)this + 9) + 8 * a3), (v16 = *((_QWORD *)v15 + 5)) == 0))
  {
LABEL_28:
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 12;
    goto LABEL_29;
  }
  v17 = 0;
  v18 = 0;
  do
  {
    while (1)
    {
      if (!v16)
        goto LABEL_21;
      v19 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v17);
      v20 = *(_DWORD *)(v16 - 8);
      v21 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(_QWORD *)(v16 + 16 * v24);
      if (v25 != v19)
        break;
LABEL_23:
      WebCore::AudioNodeInput::disconnect(v19, v15);
      v14 = *((unsigned int *)a2 + 17);
      if (++v17 >= v14)
        goto LABEL_27;
      v16 = *((_QWORD *)v15 + 5);
      v18 = 1;
    }
    v26 = 1;
    while (v25)
    {
      v24 = (v24 + v26) & v20;
      v25 = *(_QWORD *)(v16 + 16 * v24);
      ++v26;
      if (v25 == v19)
        goto LABEL_23;
    }
LABEL_21:
    ++v17;
  }
  while (v17 < v14);
  if ((v18 & 1) == 0)
    goto LABEL_28;
LABEL_27:
  result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 272))(this);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
LABEL_30:
  v28 = *((_DWORD *)v10 + 72) - 1;
  *((_DWORD *)v10 + 72) = v28;
  if (!v28)
  {
    *((_QWORD *)v10 + 35) = 0;
    result = (unsigned __int8 *)v10 + 292;
    v29 = __ldxr((unsigned __int8 *)v10 + 292);
    if (v29 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WebCore::AudioNode::disconnect@<X0>(WebCore::AudioNode *this@<X0>, WebCore::AudioNode *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  WTF::Thread *v11;
  WTF::Thread *v12;
  uint64_t v13;
  int v15;
  WebCore::AudioNodeOutput *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *result;
  int v27;
  int v28;
  WebCore::AudioNode *v29;
  WebCore::AudioParam *v30;
  char v31;
  char *v32;

  v6 = *((unsigned int *)this + 12);
  if ((_DWORD)v6 == -1)
  {
    v29 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WebCore::AudioNode::disconnect(v29, v30);
  }
  v32 = &v31;
  v11 = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v32, (char *)this + 40);
  v12 = v11;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13)
    v13 = WTF::Thread::initializeCurrentTLS(v11);
  if (v13 != *((_QWORD *)v12 + 35))
  {
    if (__ldaxr((unsigned __int8 *)v12 + 292))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12 + 292))
    {
LABEL_10:
      *((_QWORD *)v12 + 35) = v13;
      v15 = 1;
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  v15 = *((_DWORD *)v12 + 72) + 1;
LABEL_11:
  *((_DWORD *)v12 + 72) = v15;
  if (*((_DWORD *)this + 21) <= a3 || *((_DWORD *)a2 + 17) <= a4)
  {
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 0;
  }
  else
  {
    v16 = *(WebCore::AudioNodeOutput **)(*((_QWORD *)this + 9) + 8 * a3);
    v17 = *((_QWORD *)v16 + 5);
    if (v17)
    {
      v18 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * a4);
      v19 = *(_DWORD *)(v17 - 8);
      v20 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(_QWORD *)(v17 + 16 * v23);
      if (v24 == v18)
      {
LABEL_18:
        WebCore::AudioNodeInput::disconnect(v18, v16);
        result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 272))(this);
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        goto LABEL_21;
      }
      v25 = 1;
      while (v24)
      {
        v23 = (v23 + v25) & v19;
        v24 = *(_QWORD *)(v17 + 16 * v23);
        ++v25;
        if (v24 == v18)
          goto LABEL_18;
      }
    }
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 12;
  }
  *(_BYTE *)(a5 + 16) = 1;
LABEL_21:
  v27 = *((_DWORD *)v12 + 72) - 1;
  *((_DWORD *)v12 + 72) = v27;
  if (!v27)
  {
    *((_QWORD *)v12 + 35) = 0;
    result = (unsigned __int8 *)v12 + 292;
    v28 = __ldxr((unsigned __int8 *)v12 + 292);
    if (v28 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WebCore::AudioNode::disconnect@<X0>(WebCore::AudioNode *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WTF::Thread *v7;
  WTF::Thread *v8;
  uint64_t v9;
  int v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  WebCore::AudioParam *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned __int8 *result;
  int v28;
  int v29;
  WebCore::AudioNode *v30;
  WebCore::AudioParam *v31;
  unsigned int v32;
  int v33;
  _QWORD v34[4];

  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1)
  {
    v30 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WebCore::AudioNode::disconnect(v30, v31, v32);
  }
  v34[0] = &v33;
  v7 = (WTF::Thread *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(v34, (char *)this + 40);
  v8 = v7;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
    v9 = WTF::Thread::initializeCurrentTLS(v7);
  if (v9 != *((_QWORD *)v8 + 35))
  {
    if (__ldaxr((unsigned __int8 *)v8 + 292))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8 + 292))
    {
LABEL_10:
      *((_QWORD *)v8 + 35) = v9;
      v11 = 1;
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  v11 = *((_DWORD *)v8 + 72) + 1;
LABEL_11:
  *((_DWORD *)v8 + 72) = v11;
  if (!*((_DWORD *)this + 21))
    goto LABEL_32;
  v12 = 0;
  v13 = 0;
  v14 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  do
  {
    v18 = *(uint64_t **)(*((_QWORD *)this + 9) + 8 * v12);
    v19 = v18[8];
    if (v19)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v21 = v20 & v17;
      v22 = *(WebCore::AudioParam **)(v19 + 8 * (v20 & v17));
      if (v22 == (WebCore::AudioParam *)a2)
      {
LABEL_19:
        v24 = *(_QWORD *)(a2 + 144);
        v25 = *(_QWORD *)(a2 + 152);
        v34[0] = "AudioParam";
        v34[1] = 11;
        v34[2] = "disconnect";
        v34[3] = v25;
        v33 = *(_DWORD *)(*v18 + 36);
        if (*(_BYTE *)(v24 + 12))
        {
          if (WebCore::LogMedia)
            v26 = byte_1ECE7C490 >= 3u;
          else
            v26 = 0;
          if (v26)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::AudioNode::NodeType>((WTF::Logger::LogSiteIdentifier *)v34, &v33);
        }
        if (WebCore::AudioSummingJunction::removeOutput(a2, v18))
          WTF::HashSet<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>(v18 + 8, (void *)a2);
LABEL_28:
        v13 = 1;
      }
      else
      {
        v23 = 1;
        while (v22)
        {
          v21 = (v21 + v23) & v20;
          v22 = *(WebCore::AudioParam **)(v19 + 8 * v21);
          ++v23;
          if (v22 == (WebCore::AudioParam *)a2)
          {
            if (!v18)
              goto LABEL_28;
            goto LABEL_19;
          }
        }
      }
    }
    ++v12;
  }
  while (v12 < *((unsigned int *)this + 21));
  if ((v13 & 1) != 0)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 272))(this);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
LABEL_32:
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 12;
    *((_BYTE *)a3 + 16) = 1;
  }
  v28 = *((_DWORD *)v8 + 72) - 1;
  *((_DWORD *)v8 + 72) = v28;
  if (!v28)
  {
    *((_QWORD *)v8 + 35) = 0;
    result = (unsigned __int8 *)v8 + 292;
    v29 = __ldxr((unsigned __int8 *)v8 + 292);
    if (v29 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WebCore::AudioNode::disconnect@<X0>(WebCore::AudioNode *this@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  WTF::Thread *v9;
  WTF::Thread *v10;
  uint64_t v11;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  WebCore::AudioParam *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned __int8 *result;
  int v27;
  int v28;
  WebCore::AudioNode *v29;
  int v30;
  _QWORD v31[4];

  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5 == -1)
  {
    v29 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WebCore::AudioNode::sampleRate(v29);
  }
  v31[0] = &v30;
  v9 = (WTF::Thread *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(v31, (char *)this + 40);
  v10 = v9;
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(v9);
  if (v11 == *((_QWORD *)v10 + 35))
  {
    v13 = *((_DWORD *)v10 + 72) + 1;
    goto LABEL_11;
  }
  if (__ldaxr((unsigned __int8 *)v10 + 292))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)v10 + 292))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v10 + 35) = v11;
  v13 = 1;
LABEL_11:
  *((_DWORD *)v10 + 72) = v13;
  if (*((_DWORD *)this + 21) <= a3)
  {
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 0;
LABEL_30:
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_31;
  }
  v14 = *(uint64_t **)(*((_QWORD *)this + 9) + 8 * a3);
  v15 = v14[8];
  if (!v15)
  {
LABEL_29:
    result = (unsigned __int8 *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 12;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v15 - 8);
  v17 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(WebCore::AudioParam **)(v15 + 8 * v20);
  if (v21 != (WebCore::AudioParam *)a2)
  {
    v22 = 1;
    while (v21)
    {
      v20 = (v20 + v22) & v16;
      v21 = *(WebCore::AudioParam **)(v15 + 8 * v20);
      ++v22;
      if (v21 == (WebCore::AudioParam *)a2)
      {
        if (!v14)
          goto LABEL_27;
        goto LABEL_18;
      }
    }
    goto LABEL_29;
  }
LABEL_18:
  v23 = *(_QWORD *)(a2 + 144);
  v24 = *(_QWORD *)(a2 + 152);
  v31[0] = "AudioParam";
  v31[1] = 11;
  v31[2] = "disconnect";
  v31[3] = v24;
  v30 = *(_DWORD *)(*v14 + 36);
  if (*(_BYTE *)(v23 + 12))
  {
    if (WebCore::LogMedia)
      v25 = byte_1ECE7C490 >= 3u;
    else
      v25 = 0;
    if (v25)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::AudioNode::NodeType>((WTF::Logger::LogSiteIdentifier *)v31, &v30);
  }
  if (WebCore::AudioSummingJunction::removeOutput(a2, v14))
    WTF::HashSet<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>(v14 + 8, (void *)a2);
LABEL_27:
  result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 272))(this);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
LABEL_31:
  v27 = *((_DWORD *)v10 + 72) - 1;
  *((_DWORD *)v10 + 72) = v27;
  if (!v27)
  {
    *((_QWORD *)v10 + 35) = 0;
    result = (unsigned __int8 *)v10 + 292;
    v28 = __ldxr((unsigned __int8 *)v10 + 292);
    if (v28 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WebCore::AudioNode::sampleRate(WebCore::AudioNode *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::AudioNode *v4;
  unsigned int v5;
  char v6;
  char *v7;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioNode::setChannelCount(v4, v5);
  }
  else
  {
    v7 = &v6;
    v2 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v7, (char *)this + 40);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  }
}

WTF::Thread *WebCore::AudioNode::setChannelCount@<X0>(WebCore::AudioNode *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WTF::Thread *result;
  WTF::Thread *v7;
  WTF::Thread *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[4];
  unsigned int v23;
  uint64_t v24;

  v23 = a2;
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1)
  {
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::Thread *)WebCore::AudioNode::setChannelCountMode(v21);
  }
  v22[0] = &v24;
  result = (WTF::Thread *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(v22, (char *)this + 40);
  v7 = result;
  v8 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8)
  {
    result = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(result);
    v8 = result;
  }
  if (v8 == *((WTF::Thread **)v7 + 35))
  {
    v10 = *((_DWORD *)v7 + 72) + 1;
    goto LABEL_11;
  }
  result = (WTF::Thread *)((char *)v7 + 292);
  if (__ldaxr((unsigned __int8 *)v7 + 292))
  {
    __clrex();
LABEL_9:
    result = (WTF::Thread *)MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v7 + 35) = v8;
  v10 = 1;
LABEL_11:
  *((_DWORD *)v7 + 72) = v10;
  v11 = *((_QWORD *)this + 15);
  v12 = *((_QWORD *)this + 16);
  v22[0] = "AudioNode";
  v22[1] = 10;
  v22[2] = "setChannelCount";
  v22[3] = v12;
  if (*(_BYTE *)(v11 + 12))
    result = (WTF::Thread *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned int>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v22, &v23);
  if (v23 && v23 < 0x21)
  {
    if (*((_DWORD *)this + 34) != v23)
    {
      *((_DWORD *)this + 34) = v23;
      if (*((_DWORD *)this + 35))
      {
        v13 = *((unsigned int *)this + 17);
        if ((_DWORD)v13)
        {
          v14 = (uint64_t *)*((_QWORD *)this + 7);
          v15 = 8 * v13;
          do
          {
            v16 = *v14;
            if (!*(_BYTE *)(*v14 + 32))
            {
              result = (WTF::Thread *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(*v14);
              if ((_DWORD)result)
              {
                v17 = *(_QWORD *)(v16 + 8);
                if (v17)
                {
                  v18 = *(_QWORD *)(v17 + 8);
                  if (v18)
                    v17 = v18 - 32;
                  else
                    v17 = 0;
                }
                v24 = v16;
                result = (WTF::Thread *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v17 + 192), &v24, (uint64_t)v22);
                *(_BYTE *)(v16 + 32) = 1;
              }
            }
            ++v14;
            v15 -= 8;
          }
          while (v15);
        }
      }
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 6;
    *((_BYTE *)a3 + 16) = 1;
  }
  v19 = *((_DWORD *)v7 + 72) - 1;
  *((_DWORD *)v7 + 72) = v19;
  if (!v19)
  {
    *((_QWORD *)v7 + 35) = 0;
    result = (WTF::Thread *)((char *)v7 + 292);
    v20 = __ldxr((unsigned __int8 *)v7 + 292);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Thread *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WebCore::AudioNode::setChannelCountMode@<X0>(uint64_t a1@<X0>, WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53[4];
  WTF::Logger *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __int128 buf;
  int v60;
  WTF::StringImpl *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  *(_QWORD *)&buf = v53;
  result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&buf, a1 + 40);
  v8 = result;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
  {
    result = WTF::Thread::initializeCurrentTLS((WTF::Thread *)result);
    v9 = result;
  }
  if (v9 == *(_QWORD *)(v8 + 280))
  {
    v11 = *(_DWORD *)(v8 + 288) + 1;
    goto LABEL_11;
  }
  result = v8 + 292;
  if (__ldaxr((unsigned __int8 *)(v8 + 292)))
  {
    __clrex();
LABEL_9:
    result = MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_9;
LABEL_10:
  *(_QWORD *)(v8 + 280) = v9;
  v11 = 1;
LABEL_11:
  *(_DWORD *)(v8 + 288) = v11;
  v12 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 128);
  v53[0] = (uint64_t)"AudioNode";
  v53[1] = 10;
  v53[2] = (uint64_t)"setChannelCountMode";
  v53[3] = v13;
  if (!*(_BYTE *)(v12 + 12))
    goto LABEL_76;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v53);
  result = WTF::String::number(a2);
  if (!v57)
  {
    v14 = 0;
    if (v56)
      goto LABEL_14;
LABEL_99:
    v15 = 0;
    goto LABEL_15;
  }
  v14 = *((_DWORD *)v57 + 1);
  if (!v56)
    goto LABEL_99;
LABEL_14:
  v15 = *((_DWORD *)v56 + 1);
LABEL_15:
  if ((v15 | v14) < 0 || (result = (v14 + v15), __OFADD__(v14, v15)))
  {
    v58 = 0;
    goto LABEL_104;
  }
  if (v57)
  {
    v16 = *((_DWORD *)v57 + 4);
    v17 = (v16 >> 2) & 1;
    if (v56 && (v16 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    if (v56)
    {
LABEL_20:
      v17 = (*((unsigned __int8 *)v56 + 16) >> 2) & 1;
      goto LABEL_21;
    }
    v17 = 1;
  }
LABEL_21:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v17, (uint64_t)v57, (uint64_t)v56, &v58);
  if (!v58)
  {
LABEL_104:
    __break(0xC471u);
    return result;
  }
  v19 = v56;
  v56 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v57;
  v57 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = qword_1ECE7C4A0;
  v22 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v54 ? (char *)v54 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v54;
    v54 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (WebCore::LogMedia)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v53);
              v60 = 0;
              WTF::String::number(a2);
              v54 = 0;
              v55 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v55) = 2;
              v54 = v33;
              v34 = HIDWORD(v55);
              *((_DWORD *)v33 + 4 * HIDWORD(v55)) = buf;
              v35 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = v60;
              v36 = v61;
              if (v61)
                *(_DWORD *)v61 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              HIDWORD(v55) = v34 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, &WebCore::LogMedia, 0, &v54);
              v37 = v54;
              if (HIDWORD(v55))
              {
                v38 = 16 * HIDWORD(v55);
                v39 = (WTF::StringImpl **)((char *)v54 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v37 = v54;
              }
              if (v37)
              {
                v54 = 0;
                LODWORD(v55) = 0;
                WTF::fastFree(v37, v23);
              }
              v41 = v61;
              v61 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v42 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v43 = __ldxr(v25);
          if (v43 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_76:
  v44 = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = (_DWORD)a2;
  if (v44 != (_DWORD)a2)
  {
    v45 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v45)
    {
      v46 = *(uint64_t **)(a1 + 56);
      v47 = 8 * v45;
      do
      {
        v48 = *v46;
        if (!*(_BYTE *)(*v46 + 32))
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(*v46);
          if ((_DWORD)result)
          {
            v49 = *(_QWORD *)(v48 + 8);
            if (v49)
            {
              v50 = *(_QWORD *)(v49 + 8);
              if (v50)
                v49 = v50 - 32;
              else
                v49 = 0;
            }
            v53[0] = v48;
            result = (uint64_t)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v49 + 192), v53, (uint64_t)&buf);
            *(_BYTE *)(v48 + 32) = 1;
          }
        }
        ++v46;
        v47 -= 8;
      }
      while (v47);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v51 = *(_DWORD *)(v8 + 288) - 1;
  *(_DWORD *)(v8 + 288) = v51;
  if (!v51)
  {
    *(_QWORD *)(v8 + 280) = 0;
    result = v8 + 292;
    v52 = __ldxr((unsigned __int8 *)(v8 + 292));
    if (v52 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

WTF::Thread *WebCore::AudioNode::setChannelInterpretation@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WTF::Thread *result;
  WTF::Thread *v7;
  WTF::Thread *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  WebCore::AudioNode *v15;
  _QWORD v16[4];
  unsigned int v17;
  char v18;

  v17 = a2;
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 == -1)
  {
    v15 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::Thread *)WebCore::AudioNode::eventTargetInterface(v15);
  }
  v16[0] = &v18;
  result = (WTF::Thread *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(v16, a1 + 40);
  v7 = result;
  v8 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8)
  {
    result = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(result);
    v8 = result;
  }
  if (v8 == *((WTF::Thread **)v7 + 35))
  {
    v10 = *((_DWORD *)v7 + 72) + 1;
    goto LABEL_11;
  }
  result = (WTF::Thread *)((char *)v7 + 292);
  if (__ldaxr((unsigned __int8 *)v7 + 292))
  {
    __clrex();
LABEL_9:
    result = (WTF::Thread *)MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v7 + 35) = v8;
  v10 = 1;
LABEL_11:
  *((_DWORD *)v7 + 72) = v10;
  v11 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 128);
  v16[0] = "AudioNode";
  v16[1] = 10;
  v16[2] = "setChannelInterpretation";
  v16[3] = v12;
  if (*(_BYTE *)(v11 + 12))
    result = (WTF::Thread *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,int>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v16, &v17);
  *(_DWORD *)(a1 + 144) = v17;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v13 = *((_DWORD *)v7 + 72) - 1;
  *((_DWORD *)v7 + 72) = v13;
  if (!v13)
  {
    *((_QWORD *)v7 + 35) = 0;
    result = (WTF::Thread *)((char *)v7 + 292);
    v14 = __ldxr((unsigned __int8 *)v7 + 292);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Thread *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WebCore::AudioNode::eventTargetInterface(WebCore::AudioNode *this)
{
  return 33;
}

uint64_t WebCore::AudioNode::scriptExecutionContext(WebCore::AudioNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioNode::processIfNecessary(v5, v6);
  }
  else
  {
    v8 = &v7;
    v2 = *(_QWORD *)(((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v8, (char *)this + 40)+ 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
        return v3 - 96;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t WebCore::AudioNode::processIfNecessary(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t i;
  uint64_t v30;
  void **v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  WebCore::AudioNode *v39;
  WebCore::AudioNodeInput *v40;
  char v41;
  char *v42;

  if (*(_BYTE *)(this + 32))
  {
    v2 = this;
    v3 = *(unsigned int *)(this + 48);
    if ((_DWORD)v3 == -1)
      goto LABEL_43;
    v42 = &v41;
    v5 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v42, this + 40);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
    v6 = atomic_load((unint64_t *)(this + 152));
    v7 = (double)v6 / *(float *)(this + 160);
    if (*(double *)(v2 + 88) != v7)
    {
      *(double *)(v2 + 88) = v7;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 232))(v2, a2);
      v8 = *(unsigned int *)(v2 + 68);
      if (!(_DWORD)v8)
      {
LABEL_20:
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 192))(v2))
          goto LABEL_39;
        v22 = *(unsigned int *)(v2 + 84);
        if ((_DWORD)v22)
        {
          v23 = *(_QWORD *)(v2 + 72);
          v24 = v23 + 8 * v22;
          v25 = 16;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)v23 + 32))
              v26 = 24;
            else
              v26 = 16;
            v27 = *(_QWORD *)(*(_QWORD *)v23 + v26);
            v28 = *(unsigned int *)(v27 + 28);
            if ((_DWORD)v28)
            {
              for (i = 0; i < v28; ++i)
              {
                v30 = *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * i);
                if (!*(_BYTE *)(v30 + 24))
                {
                  *(_BYTE *)(v30 + 24) = 1;
                  v31 = *(void ***)(v30 + 8);
                  v32 = (_QWORD *)(v30 + 16);
                  if (v31)
                    v32 = v31 + 1;
                  else
                    v31 = (void **)v30;
                  bzero(*v31, 4 * *v32);
                  v28 = *(unsigned int *)(v27 + 28);
                }
              }
            }
            v23 += 8;
          }
          while (v23 != v24);
        }
        else
        {
          v25 = 16;
        }
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 8 * v25))(v2, a2);
      }
      v9 = *(uint64_t **)(v2 + 56);
      v10 = &v9[v8];
      while (1)
      {
        v11 = *v9;
        if (*(_DWORD *)(*v9 + 28) == 1 && !*(_DWORD *)(*(_QWORD *)(v11 + 64) + 140))
        {
          v19 = **(_QWORD **)(v11 + 16);
          v20 = *(unsigned __int8 *)(v19 + 32);
          v21 = (uint64_t *)(v19 + 24);
          v12 = (uint64_t *)(v19 + 16);
          if (v20)
            v12 = v21;
        }
        else
        {
          v12 = (uint64_t *)(v11 + 80);
        }
        v13 = *v12;
        v14 = *(unsigned int *)(*v12 + 28);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(v13 + 16);
          if (!*(_BYTE *)(*(_QWORD *)v15 + 24))
          {
LABEL_36:
            v33 = *(unsigned int *)(v2 + 48);
            if ((_DWORD)v33 != -1)
            {
              v42 = &v41;
              v34 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v33])(&v42, v2 + 40);
              v35 = atomic_load((unint64_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 88))(v34)
                                                   + 152));
              v36 = *(unsigned int *)(v2 + 48);
              if ((_DWORD)v36 != -1)
              {
                v37 = (double)(v35 + a2);
                v42 = &v41;
                v38 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v36])(&v42, v2 + 40);
                *(double *)(v2 + 96) = v37
                                     / *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 88))(v38) + 160);
LABEL_39:
                v25 = 15;
                return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 8 * v25))(v2, a2);
              }
            }
LABEL_43:
            v39 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::AudioNode::checkNumberOfChannelsForInput(v39, v40);
          }
          v16 = 0;
          v17 = v15 + 8;
          while (v14 - 1 != v16)
          {
            if (!*(unsigned __int8 *)(*(_QWORD *)(v17 + 8 * v16++) + 24))
            {
              if (v16 < v14)
                goto LABEL_36;
              break;
            }
          }
        }
        if (++v9 == v10)
          goto LABEL_20;
      }
    }
  }
  return this;
}

uint64_t *WebCore::AudioNode::checkNumberOfChannelsForInput(WebCore::AudioNode *this, WebCore::AudioNodeInput *a2)
{
  return WebCore::AudioNodeInput::updateInternalBus((uint64_t *)a2, a2);
}

uint64_t *WebCore::AudioNodeInput::updateInternalBus(uint64_t *this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  WebCore::AudioBus *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;

  v2 = this;
  v3 = this[8];
  v4 = *(_DWORD *)(v3 + 140);
  if (v4 == 2)
  {
    v5 = *(unsigned int *)(v3 + 136);
    goto LABEL_34;
  }
  v6 = this[5];
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 8 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = this[5];
      if ((_DWORD)v7)
      {
        v10 = 8 * v7;
        v9 = this[5];
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          v10 -= 8;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v9 = v6 + 8 * v7;
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = v6 + 8 * v7;
LABEL_13:
  if (v6)
    v6 += 8 * *(unsigned int *)(v6 - 4);
  if (v6 == v9)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = v9 + 8;
      v13 = *(_DWORD *)(*(_QWORD *)v9 + 8);
      if (v11 <= v13)
        v11 = v13;
      v9 = v8;
      if (v12 != v8)
      {
        v9 = v12;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
    }
    while (v9 != v6);
  }
  if (v11 <= 1)
    v5 = 1;
  else
    v5 = v11;
  if (v4 == 1)
  {
    v14 = *(_DWORD *)(v3 + 136);
    if (v14 >= v5)
      v5 = v5;
    else
      v5 = v14;
  }
LABEL_34:
  v15 = (unsigned int *)this[10];
  if ((_DWORD)v5 == v15[7])
    return this;
  if (v5 < 0x21)
  {
    v16 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    this = (uint64_t *)WebCore::AudioBus::AudioBus(v16, (void *)v5, 0x80uLL, 1);
    v15 = (unsigned int *)v2[10];
    v2[10] = (uint64_t)this;
    if (!v15)
      return this;
  }
  else
  {
    this[10] = 0;
  }
  do
  {
    v17 = __ldaxr(v15);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v15));
  if (!v18)
  {
    atomic_store(1u, v15);
    v19 = v15;
    return WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v19, a2);
  }
  return this;
}

uint64_t WebCore::AudioNode::propagatesSilence(WebCore::AudioNode *this)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WebCore::AudioNode *v11;
  unint64_t v12;
  char v13;
  char *v14;

  v2 = *((double *)this + 12);
  v3 = (*(double (**)(WebCore::AudioNode *))(*(_QWORD *)this + 176))(this);
  (*(void (**)(WebCore::AudioNode *))(*(_QWORD *)this + 168))(this);
  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5 == -1)
  {
    v11 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioNode::pullInputs(v11, v12);
  }
  else
  {
    v6 = v2 + v3 + v4;
    v14 = &v13;
    v7 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v14, (char *)this + 40);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
    v9 = atomic_load((unint64_t *)(v8 + 152));
    return v6 < (double)v9 / *(float *)(v8 + 160);
  }
}

uint64_t WebCore::AudioNode::pullInputs(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  WebCore::AudioNodeInput **v4;
  uint64_t v5;
  WebCore::AudioNodeInput *v6;

  v2 = *(unsigned int *)(this + 68);
  if ((_DWORD)v2)
  {
    v4 = *(WebCore::AudioNodeInput ***)(this + 56);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      this = WebCore::AudioNodeInput::pull(v6, 0, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t WebCore::AudioNodeInput::pull(WebCore::AudioNodeInput *this, WebCore::AudioBus *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t j;
  uint64_t v25;
  void **v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v33;

  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5 == 1)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 8) + 140))
    {
      v6 = *((_QWORD *)this + 10);
LABEL_5:
      if (v6)
      {
        v7 = *(unsigned int *)(v6 + 28);
        if (!(_DWORD)v7)
          goto LABEL_14;
        for (i = 0; i < v7; ++i)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * i);
          if (!*(_BYTE *)(v9 + 24))
          {
            *(_BYTE *)(v9 + 24) = 1;
            v10 = *(_QWORD *)(v9 + 8);
            v11 = (_QWORD *)(v9 + 16);
            if (v10)
            {
              v11 = (_QWORD *)(v10 + 8);
              v9 = *(_QWORD *)(v9 + 8);
            }
            bzero(*(void **)v9, 4 * *v11);
            v7 = *(unsigned int *)(v6 + 28);
          }
        }
        v5 = *((unsigned int *)this + 7);
        if ((_DWORD)v5)
        {
LABEL_14:
          v12 = (uint64_t *)*((_QWORD *)this + 2);
          v13 = &v12[v5];
          v14 = *(_DWORD *)(*((_QWORD *)this + 8) + 144);
          do
          {
            v15 = *v12;
            *(_BYTE *)(v15 + 32) = 0;
            v16 = *(unsigned int **)(v15 + 24);
            *(_QWORD *)(v15 + 24) = 0;
            if (v16)
            {
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                v33 = v16;
                WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v33, a2);
              }
            }
            WebCore::AudioNode::processIfNecessary(*(_QWORD *)v15, a3);
            if (*(_BYTE *)(v15 + 32))
              v19 = 24;
            else
              v19 = 16;
            WebCore::AudioBus::sumFrom(v6, *(_QWORD *)(v15 + v19), v14);
            ++v12;
          }
          while (v12 != v13);
        }
      }
      return v6;
    }
    v20 = **((_QWORD **)this + 2);
    if (a2 && *((_DWORD *)a2 + 7) == *(_DWORD *)(v20 + 8))
    {
      v21 = *(_DWORD *)(v20 + 56) + *(_DWORD *)(v20 + 52) == 1;
      *(_BYTE *)(v20 + 32) = v21;
      if (v21)
      {
        do
          v22 = __ldaxr((unsigned int *)a2);
        while (__stlxr(v22 + 1, (unsigned int *)a2));
      }
      else
      {
        a2 = 0;
      }
    }
    else
    {
      a2 = 0;
      *(_BYTE *)(v20 + 32) = 0;
    }
    v28 = *(unsigned int **)(v20 + 24);
    *(_QWORD *)(v20 + 24) = a2;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        v33 = v28;
        WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v33, a2);
      }
    }
    WebCore::AudioNode::processIfNecessary(*(_QWORD *)v20, a3);
    v31 = 24;
    if (!*(_BYTE *)(v20 + 32))
      v31 = 16;
    return *(_QWORD *)(v20 + v31);
  }
  else
  {
    v6 = *((_QWORD *)this + 10);
    if ((_DWORD)v5)
      goto LABEL_5;
    v23 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v23)
    {
      for (j = 0; j < v23; ++j)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * j);
        if (!*(_BYTE *)(v25 + 24))
        {
          *(_BYTE *)(v25 + 24) = 1;
          v26 = *(void ***)(v25 + 8);
          v27 = (_QWORD *)(v25 + 16);
          if (v26)
            v27 = v26 + 1;
          else
            v26 = (void **)v25;
          bzero(*v26, 4 * *v27);
          v23 = *(unsigned int *)(v6 + 28);
        }
      }
    }
  }
  return v6;
}

WTF::Thread *WebCore::AudioNode::enableOutputsIfNecessary(WebCore::AudioNode *this)
{
  uint64_t v1;
  char *v3;
  WTF::Thread *result;
  WTF::Thread *v5;
  WTF::Thread *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  int v42;
  uint64_t v43;
  char v44;
  char *v45;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
    goto LABEL_77;
  v3 = (char *)this + 40;
  v45 = &v44;
  result = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v45, (char *)this + 40);
  v5 = result;
  v6 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6)
  {
    result = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(result);
    v6 = result;
  }
  if (v6 == *((WTF::Thread **)v5 + 35))
  {
    v8 = *((_DWORD *)v5 + 72) + 1;
    goto LABEL_11;
  }
  result = (WTF::Thread *)((char *)v5 + 292);
  if (__ldaxr((unsigned __int8 *)v5 + 292))
  {
    __clrex();
LABEL_9:
    result = (WTF::Thread *)MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v5 + 35) = v6;
  v8 = 1;
LABEL_11:
  *((_DWORD *)v5 + 72) = v8;
  if (*((_BYTE *)this + 115))
  {
    v9 = *((unsigned int *)this + 12);
    if ((_DWORD)v9 != -1)
    {
      v45 = &v44;
      v10 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v45, v3);
      result = (WTF::Thread *)WebCore::BaseAudioContext::removeTailProcessingNode(v10, this);
      goto LABEL_14;
    }
LABEL_77:
    v43 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::Thread *)WebCore::AudioNodeOutput::disable(v43);
  }
LABEL_14:
  if (*((_BYTE *)this + 113))
  {
    v11 = atomic_load((unsigned int *)this + 27);
    if (v11 >= 1)
    {
      *((_BYTE *)this + 113) = 0;
      v12 = *((unsigned int *)this + 21);
      if ((_DWORD)v12)
      {
        v13 = (uint64_t *)*((_QWORD *)this + 9);
        v14 = &v13[v12];
        while (1)
        {
          v15 = *v13;
          if (!*(_BYTE *)(*v13 + 48))
            break;
LABEL_19:
          if (++v13 == v14)
            goto LABEL_70;
        }
        *(_BYTE *)(v15 + 48) = 1;
        v16 = *(_QWORD *)(v15 + 40);
        if (v16)
        {
          v17 = *(unsigned int *)(v16 - 4);
          v18 = (uint64_t *)(v16 + 16 * v17);
          if (*(_DWORD *)(v16 - 12))
          {
            v19 = *(uint64_t **)(v15 + 40);
            if ((_DWORD)v17)
            {
              v20 = 16 * v17;
              v19 = *(uint64_t **)(v15 + 40);
              while ((unint64_t)(*v19 + 1) <= 1)
              {
                v19 += 2;
                v20 -= 16;
                if (!v20)
                {
                  v19 = v18;
                  goto LABEL_28;
                }
              }
            }
            goto LABEL_28;
          }
          v19 = (uint64_t *)(v16 + 16 * v17);
        }
        else
        {
          v19 = 0;
          v17 = 0;
        }
        v18 = (uint64_t *)(v16 + 16 * v17);
        if (!v16)
        {
          v21 = 0;
LABEL_33:
          if (v21 != v19)
          {
            if (v15)
            {
              v22 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
              v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
              v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
              v25 = (v24 >> 31) ^ v24;
              do
              {
                v26 = *v19;
                if (*(_QWORD *)(*v19 + 64))
                {
                  WebCore::AudioSummingJunction::addOutput(*v19, v15);
                  v27 = (uint64_t *)(v26 + 72);
                  v28 = *(_QWORD *)(v26 + 72);
                  if (v28)
                  {
                    v29 = *(_DWORD *)(v28 - 8);
                    v30 = v29 & v25;
                    v31 = *(_QWORD *)(v28 + 8 * v30);
                    if (v31 != v15)
                    {
                      v32 = 1;
                      while (v31)
                      {
                        v30 = ((_DWORD)v30 + v32) & v29;
                        v31 = *(_QWORD *)(v28 + 8 * v30);
                        ++v32;
                        if (v31 == v15)
                          goto LABEL_44;
                      }
                      v30 = *(unsigned int *)(v28 - 4);
                    }
LABEL_44:
                    if (v30 != *(_DWORD *)(v28 - 4))
                    {
                      *(_QWORD *)(v28 + 8 * v30) = -1;
                      ++*(_DWORD *)(*v27 - 16);
                      v33 = *v27;
                      v34 = *v27 ? *(_DWORD *)(v33 - 12) - 1 : -1;
                      *(_DWORD *)(v33 - 12) = v34;
                      v35 = *v27;
                      if (*v27)
                      {
                        v36 = 6 * *(_DWORD *)(v35 - 12);
                        v37 = *(_DWORD *)(v35 - 4);
                        if (v36 < v37 && v37 >= 9)
                          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v27, v37 >> 1, 0);
                      }
                    }
                  }
                  result = (WTF::Thread *)WebCore::AudioNode::enableOutputsIfNecessary(*(WebCore::AudioNode **)(v26 + 64));
                }
                v39 = v19 + 2;
                v19 = v18;
                if (v39 != v18)
                {
                  v19 = v39;
                  while ((unint64_t)(*v19 + 1) <= 1)
                  {
                    v19 += 2;
                    if (v19 == v18)
                    {
                      v19 = v18;
                      break;
                    }
                  }
                }
              }
              while (v19 != v21);
            }
            else
            {
              do
              {
                v40 = v19 + 2;
                v19 = v18;
                if (v40 != v18)
                {
                  v19 = v40;
                  while ((unint64_t)(*v19 + 1) <= 1)
                  {
                    v19 += 2;
                    if (v19 == v18)
                    {
                      v19 = v18;
                      break;
                    }
                  }
                }
              }
              while (v19 != v21);
            }
          }
          goto LABEL_19;
        }
LABEL_28:
        v21 = (uint64_t *)(v16 + 16 * *(unsigned int *)(v16 - 4));
        goto LABEL_33;
      }
    }
  }
LABEL_70:
  v41 = *((_DWORD *)v5 + 72) - 1;
  *((_DWORD *)v5 + 72) = v41;
  if (!v41)
  {
    *((_QWORD *)v5 + 35) = 0;
    result = (WTF::Thread *)((char *)v5 + 292);
    v42 = __ldxr((unsigned __int8 *)v5 + 292);
    if (v42 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Thread *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WebCore::AudioNodeOutput::disable(uint64_t this)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::AudioNodeOutput **v14;
  uint64_t v15;
  WebCore::AudioNodeOutput *v16;
  uint64_t *v17;
  uint64_t *v18;
  WebCore::AudioNode *v19;
  _QWORD v20[3];
  void *v21;
  char v22;

  if (!*(_BYTE *)(this + 48))
    return this;
  v1 = (void *)this;
  *(_BYTE *)(this + 48) = 0;
  v2 = *(_QWORD *)(this + 40);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = (uint64_t *)(v2 + 16 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = *(uint64_t **)(this + 40);
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = *(uint64_t **)(this + 40);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v5 = (uint64_t *)(v2 + 16 * v3);
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = (uint64_t *)(v2 + 16 * v3);
  if (v2)
  {
LABEL_9:
    v7 = (uint64_t *)(v2 + 16 * *(unsigned int *)(v2 - 4));
    goto LABEL_14;
  }
  v7 = 0;
LABEL_14:
  if (v7 != v5)
  {
    if (this)
    {
      while (1)
      {
        v8 = *v5;
        v21 = v1;
        if (*(_QWORD *)(v8 + 64))
        {
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v8 + 72), (uint64_t *)&v21, (uint64_t)v20);
          this = WebCore::AudioSummingJunction::removeOutput(v8, v21);
          v9 = *(unsigned int **)(v8 + 64);
          v10 = atomic_load(v9 + 27);
          if (v10 <= 1 && !*((_BYTE *)v9 + 113))
          {
            this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 184))(v9);
            if ((_DWORD)this)
            {
              v11 = v9[12];
              if ((_DWORD)v11 == -1)
              {
                v19 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
                return WebCore::AudioNode::incrementConnectionCount(v19);
              }
              v20[0] = &v22;
              v12 = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v11])(v20, v9 + 10);
              this = WebCore::BaseAudioContext::addTailProcessingNode(v12, (WebCore::AudioNode *)v9);
            }
            else
            {
              *((_BYTE *)v9 + 113) = 1;
              v13 = v9[21];
              if ((_DWORD)v13)
              {
                v14 = (WebCore::AudioNodeOutput **)*((_QWORD *)v9 + 9);
                v15 = 8 * v13;
                do
                {
                  v16 = *v14++;
                  this = WebCore::AudioNodeOutput::disable(v16);
                  v15 -= 8;
                }
                while (v15);
              }
            }
          }
        }
        v17 = v5 + 2;
        v5 = v4;
        if (v17 != v4)
        {
          v5 = v17;
          while ((unint64_t)(*v5 + 1) <= 1)
          {
            v5 += 2;
            if (v5 == v4)
            {
              v5 = v4;
              break;
            }
          }
        }
        if (v5 == v7)
          return this;
      }
    }
    do
    {
      v18 = v5 + 2;
      v5 = v4;
      if (v18 != v4)
      {
        v5 = v18;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
    }
    while (v5 != v7);
  }
  return this;
}

WTF::Thread *WebCore::AudioNode::incrementConnectionCount(WebCore::AudioNode *this)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  WTF::Thread *result;
  WTF::Thread *v6;
  WTF::Thread *v7;
  int v9;
  uint64_t v12;
  WTF::Thread *v13;
  uint64_t v14;
  WebCore::AudioNode **v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  uint64_t v18;
  WebCore::AudioNode **v19;
  uint64_t v20;
  WebCore::AudioNode *v21;
  int v22;
  int v23;
  WebCore::AudioNode *v24;
  char v25;
  char *v26;

  v2 = (unsigned int *)((char *)this + 108);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::AudioNode::enableOutputsIfNecessary(this);
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1)
    goto LABEL_40;
  v26 = &v25;
  result = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v26, (char *)this + 40);
  v6 = result;
  v7 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7)
  {
    result = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(result);
    v7 = result;
  }
  if (v7 != *((WTF::Thread **)v6 + 35))
  {
    result = (WTF::Thread *)((char *)v6 + 292);
    if (__ldaxr((unsigned __int8 *)v6 + 292))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)result))
    {
LABEL_12:
      *((_QWORD *)v6 + 35) = v7;
      v9 = 1;
      goto LABEL_13;
    }
    result = (WTF::Thread *)MEMORY[0x19AEA534C]();
    goto LABEL_12;
  }
  v9 = *((_DWORD *)v6 + 72) + 1;
LABEL_13:
  *((_DWORD *)v6 + 72) = v9;
  if (!*((_BYTE *)this + 112))
    goto LABEL_33;
  if (!atomic_load(v2) && !atomic_load((unsigned int *)this + 26))
    goto LABEL_33;
  *((_BYTE *)this + 112) = 0;
  v12 = *((unsigned int *)this + 12);
  if ((_DWORD)v12 == -1)
  {
LABEL_40:
    v24 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioNode::decrementConnectionCount(v24);
  }
  v26 = &v25;
  result = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v26, (char *)this + 40);
  v13 = result;
  v14 = *((unsigned int *)result + 47);
  if ((_DWORD)v14)
  {
    v15 = (WebCore::AudioNode **)*((_QWORD *)result + 22);
    if (*v15 == this)
    {
      v16 = 0;
LABEL_24:
      result = (WTF::Thread *)memmove(&v15[v16], &v15[v16 + 1], 8 * v14 - (8 * v16 + 8));
      --*((_DWORD *)v13 + 47);
    }
    else
    {
      v16 = 0;
      while (v14 - 1 != v16)
      {
        v17 = v15[++v16];
        if (v17 == this)
          goto LABEL_24;
      }
    }
  }
  v18 = *((unsigned int *)v13 + 35);
  if ((_DWORD)v18)
  {
    v19 = (WebCore::AudioNode **)*((_QWORD *)v13 + 16);
    if (*v19 == this)
    {
      v20 = 0;
LABEL_32:
      result = (WTF::Thread *)memmove(&v19[v20], &v19[v20 + 1], 8 * v18 - (8 * v20 + 8));
      --*((_DWORD *)v13 + 35);
    }
    else
    {
      v20 = 0;
      while (v18 - 1 != v20)
      {
        v21 = v19[++v20];
        if (v21 == this)
          goto LABEL_32;
      }
    }
  }
LABEL_33:
  v22 = *((_DWORD *)v6 + 72) - 1;
  *((_DWORD *)v6 + 72) = v22;
  if (!v22)
  {
    *((_QWORD *)v6 + 35) = 0;
    result = (WTF::Thread *)((char *)v6 + 292);
    v23 = __ldxr((unsigned __int8 *)v6 + 292);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Thread *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::Thread *WebCore::AudioNode::decrementConnectionCount(WebCore::AudioNode *this)
{
  uint64_t v1;
  char *v3;
  unint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  WTF::Thread *v8;
  WTF::Thread *v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Thread *result;
  uint64_t v33;
  WTF::Thread *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  char *v43;
  WebCore::AudioNode *v44;
  char v45;
  WebCore::AudioNode *v46;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
    goto LABEL_57;
  v3 = (char *)this + 40;
  v46 = (WebCore::AudioNode *)&v45;
  v4 = atomic_load((unint64_t *)(((uint64_t (*)(WebCore::AudioNode **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v46, (char *)this + 40)+ 272));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 736);
  if (!v6)
    v6 = WTF::Thread::initializeCurrentTLS(0);
  if (v6 != v4)
  {
    v7 = *((unsigned int *)this + 12);
    if ((_DWORD)v7 == -1)
      goto LABEL_57;
    v46 = (WebCore::AudioNode *)&v45;
    v8 = (WTF::Thread *)((uint64_t (*)(WebCore::AudioNode **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v46, v3);
    v9 = v8;
    v10 = (char *)v8 + 280;
    v11 = *(_QWORD *)(StatusReg + 736);
    if (!v11)
      v11 = WTF::Thread::initializeCurrentTLS(v8);
    if (v11 == *(_QWORD *)v10)
    {
      v19 = *((_DWORD *)v9 + 72) + 1;
LABEL_25:
      *((_DWORD *)v9 + 72) = v19;
      goto LABEL_28;
    }
    if (__ldaxr((unsigned __int8 *)v9 + 292))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9 + 292))
    {
LABEL_24:
      *((_QWORD *)v9 + 35) = v11;
      v19 = 1;
      goto LABEL_25;
    }
    MEMORY[0x19AEA534C]();
    goto LABEL_24;
  }
  v13 = *((unsigned int *)this + 12);
  if ((_DWORD)v13 == -1)
    goto LABEL_57;
  v46 = (WebCore::AudioNode *)&v45;
  v14 = ((uint64_t (*)(WebCore::AudioNode **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v46, v3);
  v10 = (char *)(v14 + 280);
  v15 = *(_QWORD *)(StatusReg + 736);
  if (!v15)
    v15 = WTF::Thread::initializeCurrentTLS(0);
  if (v15 != *(_QWORD *)v10)
  {
    v16 = (unsigned __int8 *)(v14 + 292);
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          *(_QWORD *)(v14 + 280) = v15;
          v20 = 1;
          goto LABEL_27;
        }
      }
      else
      {
        __clrex();
      }
    }
    v39 = *((unsigned int *)this + 12);
    if ((_DWORD)v39 == -1)
      goto LABEL_57;
    v46 = (WebCore::AudioNode *)&v45;
    v40 = ((uint64_t (*)(WebCore::AudioNode **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v39])(&v46, v3);
    v46 = this;
    v41 = (char **)(v40 + 232);
    v42 = *(unsigned int *)(v40 + 244);
    if ((_DWORD)v42 == *(_DWORD *)(v40 + 240))
    {
      v43 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v42 + 1, (unint64_t)&v46);
      v42 = *(unsigned int *)(v40 + 244);
      *(_QWORD *)(*(_QWORD *)(v40 + 232) + 8 * v42) = *(_QWORD *)v43;
    }
    else
    {
      *(_QWORD *)&(*v41)[8 * v42] = this;
    }
    *(_DWORD *)(v40 + 244) = v42 + 1;
    goto LABEL_43;
  }
  v20 = *(_DWORD *)(v14 + 288) + 1;
LABEL_27:
  *(_DWORD *)(v14 + 288) = v20;
LABEL_28:
  v21 = (unsigned int *)((char *)this + 108);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!atomic_load(v21))
  {
    if (atomic_load((unsigned int *)this + 26))
    {
      v28 = atomic_load(v21);
      if (v28 <= 1 && !*((_BYTE *)this + 113))
      {
        if ((*(unsigned int (**)(WebCore::AudioNode *))(*(_QWORD *)this + 184))(this))
        {
          v29 = *((unsigned int *)this + 12);
          if ((_DWORD)v29 == -1)
            goto LABEL_57;
          v46 = (WebCore::AudioNode *)&v45;
          v30 = ((uint64_t (*)(WebCore::AudioNode **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v29])(&v46, v3);
          WebCore::BaseAudioContext::addTailProcessingNode(v30, this);
        }
        else
        {
          *((_BYTE *)this + 113) = 1;
          v35 = *((unsigned int *)this + 21);
          if ((_DWORD)v35)
          {
            v36 = (uint64_t *)*((_QWORD *)this + 9);
            v37 = 8 * v35;
            do
            {
              v38 = *v36++;
              WebCore::AudioNodeOutput::disable(v38);
              v37 -= 8;
            }
            while (v37);
          }
        }
      }
    }
  }
  WebCore::AudioNode::markNodeForDeletionIfNecessary((uint64_t *)this);
  v24 = *((_DWORD *)v10 + 2) - 1;
  *((_DWORD *)v10 + 2) = v24;
  if (!v24)
  {
    *(_QWORD *)v10 = 0;
    v25 = (unsigned __int8 *)(v10 + 12);
    v26 = __ldxr(v25);
    if (v26 == 1)
    {
      if (!__stlxr(0, v25))
        goto LABEL_43;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
  }
LABEL_43:
  v31 = *((unsigned int *)this + 12);
  if ((_DWORD)v31 == -1)
    goto LABEL_57;
  v46 = (WebCore::AudioNode *)&v45;
  result = (WTF::Thread *)((uint64_t (*)(WebCore::AudioNode **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v31])(&v46, v3);
  if (!*((_BYTE *)result + 381))
    return result;
  v33 = *((unsigned int *)this + 12);
  if ((_DWORD)v33 == -1)
  {
LABEL_57:
    v44 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::Thread *)WebCore::AudioNode::decrementConnectionCountWithLock(v44);
  }
  v46 = (WebCore::AudioNode *)&v45;
  v34 = (WTF::Thread *)((uint64_t (*)(WebCore::AudioNode **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v33])(&v46, v3);
  return WebCore::BaseAudioContext::deleteMarkedNodes(v34);
}

uint64_t *WebCore::AudioNode::decrementConnectionCountWithLock(WebCore::AudioNode *this)
{
  unsigned int *v2;
  unsigned int v3;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  char *v16;

  v2 = (unsigned int *)((char *)this + 108);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (atomic_load(v2))
    return WebCore::AudioNode::markNodeForDeletionIfNecessary((uint64_t *)this);
  if (!atomic_load((unsigned int *)this + 26))
    return WebCore::AudioNode::markNodeForDeletionIfNecessary((uint64_t *)this);
  v7 = atomic_load(v2);
  if (v7 > 1 || *((_BYTE *)this + 113))
    return WebCore::AudioNode::markNodeForDeletionIfNecessary((uint64_t *)this);
  if (!(*(unsigned int (**)(WebCore::AudioNode *))(*(_QWORD *)this + 184))(this))
  {
    *((_BYTE *)this + 113) = 1;
    v10 = *((unsigned int *)this + 21);
    if ((_DWORD)v10)
    {
      v11 = (uint64_t *)*((_QWORD *)this + 9);
      v12 = 8 * v10;
      do
      {
        v13 = *v11++;
        WebCore::AudioNodeOutput::disable(v13);
        v12 -= 8;
      }
      while (v12);
    }
    return WebCore::AudioNode::markNodeForDeletionIfNecessary((uint64_t *)this);
  }
  v8 = *((unsigned int *)this + 12);
  if ((_DWORD)v8 != -1)
  {
    v16 = &v15;
    v9 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v16, (char *)this + 40);
    WebCore::BaseAudioContext::addTailProcessingNode(v9, this);
    return WebCore::AudioNode::markNodeForDeletionIfNecessary((uint64_t *)this);
  }
  v14 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::AudioNode::markNodeForDeletionIfNecessary(v14);
}

uint64_t *WebCore::AudioNode::markNodeForDeletionIfNecessary(uint64_t *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WebCore::BaseAudioContext *v9;
  WebCore::AudioNode *v10;
  char v11;
  char *v12;

  if (!atomic_load((unsigned int *)this + 27))
  {
    v2 = (uint64_t)this;
    v3 = atomic_load((unsigned int *)this + 26);
    if (!v3 && !*((_BYTE *)this + 112) && *((_DWORD *)this + 9))
    {
      v4 = *((unsigned int *)this + 21);
      if ((_DWORD)v4)
      {
        v5 = (uint64_t **)this[9];
        v6 = 8 * v4;
        do
        {
          v7 = *v5++;
          WebCore::AudioNodeOutput::disconnectAllInputs((uint64_t)v7);
          WebCore::AudioNodeOutput::disconnectAllParams(v7);
          v6 -= 8;
        }
        while (v6);
      }
      v8 = *(unsigned int *)(v2 + 48);
      if ((_DWORD)v8 == -1)
      {
        v10 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
        return (uint64_t *)WebCore::AudioNode::ref(v10);
      }
      else
      {
        v12 = &v11;
        v9 = (WebCore::BaseAudioContext *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v12, v2 + 40);
        this = WebCore::BaseAudioContext::markForDeletion(v9, (WebCore::AudioNode *)v2);
        *(_BYTE *)(v2 + 112) = 1;
      }
    }
  }
  return this;
}

WTF::Thread *WebCore::AudioNode::ref(WebCore::AudioNode *this)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  WTF::Thread *result;
  WTF::Thread *v6;
  WTF::Thread *v7;
  int v9;
  uint64_t v12;
  WTF::Thread *v13;
  uint64_t v14;
  WebCore::AudioNode **v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  uint64_t v18;
  WebCore::AudioNode **v19;
  uint64_t v20;
  WebCore::AudioNode *v21;
  int v22;
  int v23;
  WebCore::AudioNode *v24;
  char v25;
  char *v26;

  v2 = (unsigned int *)((char *)this + 104);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1)
    goto LABEL_40;
  v26 = &v25;
  result = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v26, (char *)this + 40);
  v6 = result;
  v7 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7)
  {
    result = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(result);
    v7 = result;
  }
  if (v7 != *((WTF::Thread **)v6 + 35))
  {
    result = (WTF::Thread *)((char *)v6 + 292);
    if (__ldaxr((unsigned __int8 *)v6 + 292))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)result))
    {
LABEL_12:
      *((_QWORD *)v6 + 35) = v7;
      v9 = 1;
      goto LABEL_13;
    }
    result = (WTF::Thread *)MEMORY[0x19AEA534C]();
    goto LABEL_12;
  }
  v9 = *((_DWORD *)v6 + 72) + 1;
LABEL_13:
  *((_DWORD *)v6 + 72) = v9;
  if (!*((_BYTE *)this + 112))
    goto LABEL_33;
  if (!atomic_load((unsigned int *)this + 27) && !atomic_load(v2))
    goto LABEL_33;
  *((_BYTE *)this + 112) = 0;
  v12 = *((unsigned int *)this + 12);
  if ((_DWORD)v12 == -1)
  {
LABEL_40:
    v24 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioNode::deref(v24);
  }
  v26 = &v25;
  result = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v26, (char *)this + 40);
  v13 = result;
  v14 = *((unsigned int *)result + 47);
  if ((_DWORD)v14)
  {
    v15 = (WebCore::AudioNode **)*((_QWORD *)result + 22);
    if (*v15 == this)
    {
      v16 = 0;
LABEL_24:
      result = (WTF::Thread *)memmove(&v15[v16], &v15[v16 + 1], 8 * v14 - (8 * v16 + 8));
      --*((_DWORD *)v13 + 47);
    }
    else
    {
      v16 = 0;
      while (v14 - 1 != v16)
      {
        v17 = v15[++v16];
        if (v17 == this)
          goto LABEL_24;
      }
    }
  }
  v18 = *((unsigned int *)v13 + 35);
  if ((_DWORD)v18)
  {
    v19 = (WebCore::AudioNode **)*((_QWORD *)v13 + 16);
    if (*v19 == this)
    {
      v20 = 0;
LABEL_32:
      result = (WTF::Thread *)memmove(&v19[v20], &v19[v20 + 1], 8 * v18 - (8 * v20 + 8));
      --*((_DWORD *)v13 + 35);
    }
    else
    {
      v20 = 0;
      while (v18 - 1 != v20)
      {
        v21 = v19[++v20];
        if (v21 == this)
          goto LABEL_32;
      }
    }
  }
LABEL_33:
  v22 = *((_DWORD *)v6 + 72) - 1;
  *((_DWORD *)v6 + 72) = v22;
  if (!v22)
  {
    *((_QWORD *)v6 + 35) = 0;
    result = (WTF::Thread *)((char *)v6 + 292);
    v23 = __ldxr((unsigned __int8 *)v6 + 292);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Thread *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::Thread *WebCore::AudioNode::deref(WebCore::AudioNode *this)
{
  uint64_t v1;
  char *v3;
  WTF::Thread *v4;
  WTF::Thread *v5;
  uint64_t v6;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  WTF::Thread *result;
  uint64_t v16;
  WTF::Thread *v17;
  uint64_t v18;
  char v19;
  char *v20;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
    goto LABEL_24;
  v3 = (char *)this + 40;
  v20 = &v19;
  v4 = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v20, (char *)this + 40);
  v5 = v4;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6)
    v6 = WTF::Thread::initializeCurrentTLS(v4);
  if (v6 != *((_QWORD *)v5 + 35))
  {
    if (__ldaxr((unsigned __int8 *)v5 + 292))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5 + 292))
    {
LABEL_10:
      *((_QWORD *)v5 + 35) = v6;
      v8 = 1;
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  v8 = *((_DWORD *)v5 + 72) + 1;
LABEL_11:
  *((_DWORD *)v5 + 72) = v8;
  v9 = (unsigned int *)((char *)this + 104);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  WebCore::AudioNode::markNodeForDeletionIfNecessary((uint64_t *)this);
  v11 = *((_DWORD *)v5 + 72) - 1;
  *((_DWORD *)v5 + 72) = v11;
  if (v11)
    goto LABEL_19;
  *((_QWORD *)v5 + 35) = 0;
  v12 = (unsigned __int8 *)v5 + 292;
  v13 = __ldxr((unsigned __int8 *)v5 + 292);
  if (v13 == 1)
  {
    if (!__stlxr(0, v12))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_19:
  v14 = *((unsigned int *)this + 12);
  if ((_DWORD)v14 == -1)
    goto LABEL_24;
  v20 = &v19;
  result = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v20, v3);
  if (!*((_BYTE *)result + 381))
    return result;
  v16 = *((unsigned int *)this + 12);
  if ((_DWORD)v16 == -1)
  {
LABEL_24:
    v18 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::Thread *)WebCore::AudioNode::handleAudioNodeOptions(v18);
  }
  v20 = &v19;
  v17 = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v16])(&v20, v3);
  return WebCore::BaseAudioContext::deleteMarkedNodes(v17);
}

WTF::StringImpl *WebCore::AudioNode::handleAudioNodeOptions@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v8;
  WTF::StringImpl *result;
  unsigned int *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  _QWORD v20[2];
  char v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  char v24;

  if (*((_BYTE *)a2 + 4))
    v8 = a2;
  else
    v8 = a3;
  result = (WTF::StringImpl *)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 200))(v20, a1, *v8);
  if (v21)
    goto LABEL_31;
  v10 = a2 + 2;
  if (!*((_BYTE *)a2 + 12))
    v10 = a3 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(&v17, a1, *v10);
  v22[0] = 0;
  v24 = 0;
  if (v19)
  {
    v22[0] = v17;
    v11 = v18;
    v18 = 0;
    v23 = v11;
    v24 = 1;
  }
  result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)v22, (uint64_t)v20);
  if (v24)
  {
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v19)
  {
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v21)
    goto LABEL_31;
  v13 = a2 + 4;
  if (!*((_BYTE *)a2 + 20))
    v13 = a3 + 2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 216))(&v17, a1, *v13);
  v22[0] = 0;
  v24 = 0;
  if (v19)
  {
    v22[0] = v17;
    v14 = v18;
    v18 = 0;
    v23 = v14;
    v24 = 1;
  }
  result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)v22, (uint64_t)v20);
  if (v24)
  {
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v19)
  {
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v21)
  {
LABEL_31:
    v16 = v20[1];
    *(_BYTE *)a4 = v20[0];
    *(_QWORD *)(a4 + 8) = v16;
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return result;
}

char *`non-virtual thunk to'WebCore::AudioNode::logChannel(WebCore::AudioNode *this)
{
  return &WebCore::LogMedia;
}

WebCore::AudioNodeInput *WebCore::AudioNodeInput::AudioNodeInput(WebCore::AudioNodeInput *this, WebCore::AudioNode *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::AudioBus *v8;
  WebCore::AudioBus *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WebCore::AudioNodeInput *v15;
  char v16;
  unsigned int *v17;

  v2 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v2 == -1)
  {
    v15 = (WebCore::AudioNodeInput *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::AudioNodeInput *)WebCore::AudioNodeInput::didUpdate(v15);
  }
  else
  {
    v17 = (unsigned int *)&v16;
    v5 = ((uint64_t (*)(unsigned int **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v17, (char *)a2 + 40);
    *(_QWORD *)this = off_1E3368DF0;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(v5);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_BYTE *)this + 32) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *(_QWORD *)this = off_1E3368BE8;
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = a2;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    v8 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    v9 = WebCore::AudioBus::AudioBus(v8, (void *)1, 0x80uLL, 1);
    v11 = (unsigned int *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v9;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        v17 = v11;
        WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v17, v10);
      }
    }
    return this;
  }
}

uint64_t WebCore::AudioNodeInput::didUpdate(WebCore::AudioNodeInput *this)
{
  return (*(uint64_t (**)(_QWORD, WebCore::AudioNodeInput *))(**((_QWORD **)this + 8) + 160))(*((_QWORD *)this + 8), this);
}

unsigned int **WebCore::AudioNodeOutput::setNumberOfChannels(WebCore::AudioNodeOutput *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int **v12;
  void *v13;
  _QWORD v14[3];
  WebCore::AudioNodeOutput *v15;

  *((_DWORD *)this + 3) = a2;
  v2 = *(unsigned int *)(*(_QWORD *)this + 48);
  if ((_DWORD)v2 == -1)
  {
LABEL_9:
    v12 = (unsigned int **)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioNodeOutput::updateNumberOfChannels(v12, v13);
  }
  v4 = *(_QWORD *)this + 40;
  v14[0] = &v15;
  v6 = atomic_load((unint64_t *)(((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v2])(v14, v4)+ 272));
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7)
    v7 = WTF::Thread::initializeCurrentTLS(0);
  if (v7 != v6)
  {
    v8 = *(unsigned int *)(*(_QWORD *)this + 48);
    if ((_DWORD)v8 != -1)
    {
      v9 = *(_QWORD *)this + 40;
      v14[0] = &v15;
      v10 = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(v14, v9);
      v15 = this;
      return (unsigned int **)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v10 + 200), (uint64_t *)&v15, (uint64_t)v14);
    }
    goto LABEL_9;
  }
  return WebCore::AudioNodeOutput::updateNumberOfChannels((unsigned int **)this, v5);
}

unsigned int **WebCore::AudioNodeOutput::updateNumberOfChannels(unsigned int **this, void *a2)
{
  void *v2;
  unsigned int **v3;
  unsigned int *v4;
  WebCore::AudioBus *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;

  v2 = (void *)*((unsigned int *)this + 3);
  if (*((_DWORD *)this + 2) == (_DWORD)v2)
    return this;
  v3 = this;
  *((_DWORD *)this + 2) = (_DWORD)v2;
  v4 = this[2];
  if ((_DWORD)v2 != v4[7])
  {
    if (v2 < 0x21)
    {
      v5 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
      this = (unsigned int **)WebCore::AudioBus::AudioBus(v5, v2, 0x80uLL, 1);
      v4 = v3[2];
      v3[2] = (unsigned int *)this;
      if (!v4)
      {
LABEL_9:
        LODWORD(v2) = *((_DWORD *)v3 + 2);
        goto LABEL_10;
      }
    }
    else
    {
      this[2] = 0;
    }
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v4);
      v15 = v4;
      this = (unsigned int **)WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v15, a2);
    }
    goto LABEL_9;
  }
LABEL_10:
  if (!(_DWORD)v2)
    return this;
  v8 = v3[5];
  if (v8)
  {
    v9 = *(v8 - 1);
    v10 = &v8[4 * v9];
    if (*(v8 - 3))
    {
      v11 = v8;
      if ((_DWORD)v9)
      {
        v12 = 16 * v9;
        v11 = v8;
        while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
        {
          v11 += 4;
          v12 -= 16;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v11 = &v8[4 * v9];
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = &v8[4 * v9];
LABEL_21:
  if (v8)
    v13 = &v8[4 * *(v8 - 1)];
  else
    v13 = 0;
  while (v11 != v13)
  {
    v14 = v11 + 4;
    this = (unsigned int **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v11 + 64) + 160))(*(_QWORD *)(*(_QWORD *)v11 + 64));
    v11 = v10;
    if (v14 != v10)
    {
      v11 = v14;
      while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
      {
        v11 += 4;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::AudioNodeOutput::disconnectAllInputs(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;

  v2 = (uint64_t *)(this + 40);
  v1 = *(_QWORD *)(this + 40);
  if (v1)
  {
    v3 = (void *)this;
    v4 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = (v6 >> 31) ^ v6;
    do
    {
      if (!*(_DWORD *)(v1 - 12))
        return this;
      v8 = *(unsigned int *)(v1 - 4);
      if ((_DWORD)v8)
      {
        v9 = 16 * v8;
        v10 = v1 + 16 * v8;
        while ((unint64_t)(*(_QWORD *)v1 + 1) <= 1)
        {
          v1 += 16;
          v9 -= 16;
          if (!v9)
          {
            v1 = v10;
            break;
          }
        }
      }
      v11 = *(_QWORD *)v1;
      if (*(_QWORD *)(*(_QWORD *)v1 + 64))
      {
        this = WebCore::AudioSummingJunction::removeOutput(v11, v3);
        if ((_DWORD)this)
        {
          v12 = *v2;
          if (!*v2)
            return this;
          v13 = *(_DWORD *)(v12 - 8);
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = *(_QWORD *)(v12 + 16 * v17);
          if (v18 != v11)
          {
            v19 = 1;
            while (v18)
            {
              v17 = ((_DWORD)v17 + v19) & v13;
              v18 = *(_QWORD *)(v12 + 16 * v17);
              ++v19;
              if (v18 == v11)
                goto LABEL_24;
            }
            v17 = *(unsigned int *)(v12 - 4);
          }
LABEL_24:
          if (v17 != *(_DWORD *)(v12 - 4))
          {
            v25 = (_QWORD *)(v12 + 16 * v17);
            this = v25[1];
            *v25 = -1;
            v25[1] = 0;
            if (this)
              this = WebCore::AudioNode::decrementConnectionCount((WebCore::AudioNode *)this);
            ++*(_DWORD *)(*v2 - 16);
            v26 = *v2;
            if (*v2)
              v27 = *(_DWORD *)(v26 - 12);
            else
              v27 = 0;
            *(_DWORD *)(v26 - 12) = v27 - 1;
            v30 = *v2;
            if (!*v2)
              return this;
            v31 = 6 * *(_DWORD *)(v30 - 12);
            v32 = *(_DWORD *)(v30 - 4);
            if (v31 < v32 && v32 > 8)
              goto LABEL_67;
          }
        }
        else
        {
          this = v11 + 72;
          v20 = *(_QWORD *)(v11 + 72);
          if (v20)
          {
            v21 = *(_DWORD *)(v20 - 8);
            v22 = v21 & v7;
            v23 = *(void **)(v20 + 8 * v22);
            if (v23 != v3)
            {
              v24 = 1;
              while (v23)
              {
                v22 = ((_DWORD)v22 + v24) & v21;
                v23 = *(void **)(v20 + 8 * v22);
                ++v24;
                if (v23 == v3)
                  goto LABEL_30;
              }
              v22 = *(unsigned int *)(v20 - 4);
            }
LABEL_30:
            if (v22 != *(_DWORD *)(v20 - 4))
            {
              *(_QWORD *)(v20 + 8 * v22) = -1;
              ++*(_DWORD *)(*(_QWORD *)this - 16);
              v28 = *(_QWORD *)this;
              if (*(_QWORD *)this)
                v29 = *(_DWORD *)(v28 - 12) - 1;
              else
                v29 = -1;
              *(_DWORD *)(v28 - 12) = v29;
              v34 = *(_QWORD *)this;
              if (*(_QWORD *)this)
              {
                v35 = 6 * *(_DWORD *)(v34 - 12);
                v36 = *(_DWORD *)(v34 - 4);
                if (v35 < v36 && v36 >= 9)
                  this = (uint64_t)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)this, v36 >> 1, 0);
              }
              v38 = *v2;
              if (!*v2)
                return this;
              v39 = *(_DWORD *)(v38 - 8);
              v40 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
              v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
              v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
              v43 = v39 & ((v42 >> 31) ^ v42);
              v44 = *(_QWORD *)(v38 + 16 * v43);
              if (v44 != v11)
              {
                v45 = 1;
                while (v44)
                {
                  v43 = ((_DWORD)v43 + v45) & v39;
                  v44 = *(_QWORD *)(v38 + 16 * v43);
                  ++v45;
                  if (v44 == v11)
                    goto LABEL_55;
                }
                v43 = *(unsigned int *)(v38 - 4);
              }
LABEL_55:
              if (v43 != *(_DWORD *)(v38 - 4))
              {
                v46 = (_QWORD *)(v38 + 16 * v43);
                this = v46[1];
                *v46 = -1;
                v46[1] = 0;
                if (this)
                  this = WebCore::AudioNode::decrementConnectionCount((WebCore::AudioNode *)this);
                ++*(_DWORD *)(*v2 - 16);
                v47 = *v2;
                if (*v2)
                  v48 = *(_DWORD *)(v47 - 12);
                else
                  v48 = 0;
                *(_DWORD *)(v47 - 12) = v48 - 1;
                v49 = *v2;
                if (!*v2)
                  return this;
                v50 = 6 * *(_DWORD *)(v49 - 12);
                v32 = *(_DWORD *)(v49 - 4);
                if (v50 < v32 && v32 >= 9)
LABEL_67:
                  this = WTF::HashTable<WebCore::AudioNodeInput *,WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashMap<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashTraits<WebCore::AudioNodeInput *>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioNodeInput *>>::rehash(v2, v32 >> 1);
              }
            }
          }
        }
      }
      v1 = *v2;
    }
    while (*v2);
  }
  return this;
}

uint64_t *WTF::HashSet<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v17;
  void *v18;

  v2 = *result;
  if (*result)
  {
    v3 = result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(void **)(v2 + 8 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(void **)(v2 + 8 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      result = *(uint64_t **)(v2 + 8 * v8);
      *(_QWORD *)(v2 + 8 * v8) = -1;
      if (result)
      {
        if (*((_DWORD *)result + 16) == 1)
        {
          WebCore::AudioParam::~AudioParam((WebCore::AudioParam *)result, a2);
          result = (uint64_t *)WTF::fastFree(v17, v18);
        }
        else
        {
          --*((_DWORD *)result + 16);
        }
      }
      ++*(_DWORD *)(*v3 - 16);
      v11 = *v3;
      if (*v3)
        v12 = *(_DWORD *)(v11 - 12) - 1;
      else
        v12 = -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *v3;
      if (*v3)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>::rehash(v3, v15 >> 1);
      }
    }
  }
  return result;
}

uint64_t *WebCore::AudioNodeOutput::disconnectAllParams(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  _QWORD v12[4];

  v2 = this + 8;
  v1 = this[8];
  if (v1)
  {
    v3 = this;
    do
    {
      if (!*(_DWORD *)(v1 - 12))
        break;
      v4 = *(unsigned int *)(v1 - 4);
      if ((_DWORD)v4)
      {
        v5 = 8 * v4;
        v6 = v1 + 8 * v4;
        while ((unint64_t)(*(_QWORD *)v1 + 1) <= 1)
        {
          v1 += 8;
          v5 -= 8;
          if (!v5)
          {
            v1 = v6;
            break;
          }
        }
      }
      v7 = *(_QWORD **)v1;
      v8 = *(_QWORD *)(*(_QWORD *)v1 + 144);
      v9 = v7[19];
      v12[0] = "AudioParam";
      v12[1] = 11;
      v12[2] = "disconnect";
      v12[3] = v9;
      v11 = *(_DWORD *)(*v3 + 36);
      if (*(_BYTE *)(v8 + 12))
      {
        if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::AudioNode::NodeType>((WTF::Logger::LogSiteIdentifier *)v12, &v11);
      }
      this = (uint64_t *)WebCore::AudioSummingJunction::removeOutput((uint64_t)v7, v3);
      if ((_DWORD)this)
        this = WTF::HashSet<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>(v2, v7);
      v1 = *v2;
    }
    while (*v2);
  }
  return this;
}

uint64_t WebCore::AudioParam::AudioParam(uint64_t a1, _QWORD *a2, _DWORD **a3, char a4, char a5, float a6, float a7, float a8)
{
  unsigned int *v16;
  unsigned int v17;
  _DWORD *v18;
  WebCore::AudioBus *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WTF::String *v27;
  WTF::String *v28;
  WTF::String *v29;
  WTF::String *v30;
  uint64_t result;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  NSObject *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::String *v55;
  float v56;
  WTF::String *v57;
  float v58;
  WTF::String *v59;
  float v60;
  WTF::String *v61;
  float v62;
  WTF::Logger *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  _QWORD v94[4];
  WTF::Logger *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  __int128 buf;
  int v118;
  WTF::StringImpl *v119;
  int v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  int v128;
  WTF::StringImpl *v129;
  int v130;
  WTF::StringImpl *v131;
  int v132;
  WTF::StringImpl *v133;
  int v134;
  WTF::StringImpl *v135;
  int v136;
  WTF::StringImpl *v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E3368DF0;
  v16 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>((uint64_t)a2);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 1;
  *(_QWORD *)a1 = off_1E3368C98;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 72) = &unk_1E3368CE8;
  v18 = *a3;
  if (*a3)
    *v18 += 2;
  *(_QWORD *)(a1 + 80) = v18;
  *(float *)(a1 + 88) = a6;
  *(float *)(a1 + 92) = a6;
  *(float *)(a1 + 96) = a7;
  *(float *)(a1 + 100) = a8;
  *(_BYTE *)(a1 + 104) = a4;
  *(_BYTE *)(a1 + 105) = a5;
  *(float *)(a1 + 108) = a6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  v19 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(a1 + 136) = WebCore::AudioBus::AudioBus(v19, (void *)1, 0x80uLL, 0);
  v20 = (*(uint64_t (**)(_QWORD *))(*a2 + 112))(a2);
  v21 = (unsigned int *)(v20 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *(_QWORD *)(a1 + 144) = v20;
  v23 = a2[9];
  v24 = a2[11] + 1;
  a2[11] = v24;
  v25 = v23 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v24;
  *(_QWORD *)(a1 + 152) = v25;
  v94[0] = "AudioParam";
  v94[1] = 11;
  v94[2] = "AudioParam";
  v94[3] = v25;
  if (!*(_BYTE *)(v20 + 12))
    return a1;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v94);
  WTF::String::String((WTF::String *)&v105, "name = ");
  v26 = *(WTF::StringImpl **)(a1 + 80);
  if (v26)
    *(_DWORD *)v26 += 2;
  v27 = (WTF::String *)WTF::String::String((WTF::String *)&v104, ", value = ");
  WTF::String::number(v27, *(float *)(a1 + 88));
  v28 = (WTF::String *)WTF::String::String((WTF::String *)&v102, ", default = ");
  WTF::String::number(v28, *(float *)(a1 + 92));
  v29 = (WTF::String *)WTF::String::String((WTF::String *)&v100, ", min = ");
  WTF::String::number(v29, *(float *)(a1 + 96));
  v30 = (WTF::String *)WTF::String::String((WTF::String *)&v98, ", max = ");
  WTF::String::number(v30, *(float *)(a1 + 100));
  v116 = v26;
  *(_QWORD *)&buf = v106;
  v95 = v105;
  v114 = v103;
  v115 = v104;
  v112 = v101;
  v113 = v102;
  v110 = v99;
  v111 = v100;
  v108 = v97;
  v109 = v98;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v95, (uint64_t *)&v116, (uint64_t *)&v115, (uint64_t *)&v114, (uint64_t *)&v113, (uint64_t *)&v112, (uint64_t *)&v111, &v107, (uint64_t *)&v110, (uint64_t *)&v109, (uint64_t *)&v108);
  if (v107)
  {
    v33 = v97;
    v97 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v98;
    v98 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v99;
    v99 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v32);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v100;
    v100 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v32);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = v101;
    v101 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v32);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = v102;
    v102 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v32);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = v103;
    v103 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v32);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v104;
    v104 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::destroy(v40, v32);
        if (v26)
        {
LABEL_36:
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v32);
          else
            *(_DWORD *)v26 -= 2;
        }
LABEL_38:
        v41 = v105;
        v105 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v32);
          else
            *(_DWORD *)v41 -= 2;
        }
        v42 = v106;
        v106 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v32);
          else
            *(_DWORD *)v42 -= 2;
        }
        v43 = qword_1ECE7C4A0;
        v44 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v44)
        {
          WTF::String::utf8();
          v46 = v95 ? (char *)v95 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v46;
          _os_log_impl(&dword_1940B8000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v44 = (uint64_t)v95;
          v95 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 1)
              v44 = WTF::fastFree((WTF *)v44, v45);
            else
              --*(_DWORD *)v44;
          }
        }
        if (WebCore::LogMedia)
        {
          v47 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v48 = *v47;
            if ((v48 & 1) != 0)
              break;
            v49 = __ldaxr(v47);
            if (v49 == v48)
            {
              if (!__stxr(v48 | 1, v47))
              {
                v50 = WTF::Logger::observers((WTF::Logger *)v44);
                v51 = *(unsigned int *)(v50 + 12);
                if ((_DWORD)v51)
                {
                  v52 = *(uint64_t **)v50;
                  v93 = *(_QWORD *)v50 + 8 * v51;
                  do
                  {
                    v53 = *v52;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v94);
                    v118 = 0;
                    WTF::String::String((WTF::String *)&v119, "name = ");
                    v120 = 0;
                    v54 = *(WTF::StringImpl **)(a1 + 80);
                    if (v54)
                      *(_DWORD *)v54 += 2;
                    v121 = v54;
                    v122 = 0;
                    v55 = (WTF::String *)WTF::String::String((WTF::String *)&v123, ", value = ");
                    v56 = *(float *)(a1 + 88);
                    v124 = 0;
                    WTF::String::number(v55, v56);
                    v126 = 0;
                    v57 = (WTF::String *)WTF::String::String((WTF::String *)&v127, ", default = ");
                    v58 = *(float *)(a1 + 92);
                    v128 = 0;
                    WTF::String::number(v57, v58);
                    v130 = 0;
                    v59 = (WTF::String *)WTF::String::String((WTF::String *)&v131, ", min = ");
                    v60 = *(float *)(a1 + 96);
                    v132 = 0;
                    WTF::String::number(v59, v60);
                    v134 = 0;
                    v61 = (WTF::String *)WTF::String::String((WTF::String *)&v135, ", max = ");
                    v62 = *(float *)(a1 + 100);
                    v136 = 0;
                    WTF::String::number(v61, v62);
                    v95 = 0;
                    v96 = 0;
                    v63 = (WTF::Logger *)WTF::fastMalloc((WTF *)0xB0);
                    LODWORD(v96) = 11;
                    v95 = v63;
                    v64 = HIDWORD(v96);
                    *((_DWORD *)v63 + 4 * HIDWORD(v96)) = buf;
                    v65 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v63 + 2 * v64 + 1) = v65;
                    *((_DWORD *)v63 + 4 * (v64 + 1)) = v118;
                    v66 = v119;
                    if (v119)
                      *(_DWORD *)v119 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 1) + 1) = v66;
                    *((_DWORD *)v63 + 4 * (v64 + 2)) = v120;
                    v67 = v121;
                    if (v121)
                      *(_DWORD *)v121 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 2) + 1) = v67;
                    *((_DWORD *)v63 + 4 * (v64 + 3)) = v122;
                    v68 = v123;
                    if (v123)
                      *(_DWORD *)v123 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 3) + 1) = v68;
                    *((_DWORD *)v63 + 4 * (v64 + 4)) = v124;
                    v69 = v125;
                    if (v125)
                      *(_DWORD *)v125 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 4) + 1) = v69;
                    *((_DWORD *)v63 + 4 * (v64 + 5)) = v126;
                    v70 = v127;
                    if (v127)
                      *(_DWORD *)v127 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 5) + 1) = v70;
                    *((_DWORD *)v63 + 4 * (v64 + 6)) = v128;
                    v71 = v129;
                    if (v129)
                      *(_DWORD *)v129 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 6) + 1) = v71;
                    *((_DWORD *)v63 + 4 * (v64 + 7)) = v130;
                    v72 = v131;
                    if (v131)
                      *(_DWORD *)v131 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 7) + 1) = v72;
                    *((_DWORD *)v63 + 4 * (v64 + 8)) = v132;
                    v73 = v133;
                    if (v133)
                      *(_DWORD *)v133 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 8) + 1) = v73;
                    *((_DWORD *)v63 + 4 * (v64 + 9)) = v134;
                    v74 = v135;
                    if (v135)
                      *(_DWORD *)v135 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 9) + 1) = v74;
                    *((_DWORD *)v63 + 4 * (v64 + 10)) = v136;
                    v75 = v137;
                    if (v137)
                      *(_DWORD *)v137 += 2;
                    *((_QWORD *)v63 + 2 * (v64 + 10) + 1) = v75;
                    HIDWORD(v96) = v64 + 11;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v53 + 16))(v53, &WebCore::LogMedia, 0, &v95);
                    v76 = v95;
                    if (HIDWORD(v96))
                    {
                      v77 = 16 * HIDWORD(v96);
                      v78 = (WTF::StringImpl **)((char *)v95 + 8);
                      do
                      {
                        v79 = *v78;
                        *v78 = 0;
                        if (v79)
                        {
                          if (*(_DWORD *)v79 == 2)
                            WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v45);
                          else
                            *(_DWORD *)v79 -= 2;
                        }
                        v78 += 2;
                        v77 -= 16;
                      }
                      while (v77);
                      v76 = v95;
                    }
                    if (v76)
                    {
                      v95 = 0;
                      LODWORD(v96) = 0;
                      WTF::fastFree(v76, v45);
                    }
                    v80 = v137;
                    v137 = 0;
                    if (v80)
                    {
                      if (*(_DWORD *)v80 == 2)
                        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v80 -= 2;
                    }
                    v81 = v135;
                    v135 = 0;
                    if (v81)
                    {
                      if (*(_DWORD *)v81 == 2)
                        WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v81 -= 2;
                    }
                    v82 = v133;
                    v133 = 0;
                    if (v82)
                    {
                      if (*(_DWORD *)v82 == 2)
                        WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v82 -= 2;
                    }
                    v83 = v131;
                    v131 = 0;
                    if (v83)
                    {
                      if (*(_DWORD *)v83 == 2)
                        WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v83 -= 2;
                    }
                    v84 = v129;
                    v129 = 0;
                    if (v84)
                    {
                      if (*(_DWORD *)v84 == 2)
                        WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v84 -= 2;
                    }
                    v85 = v127;
                    v127 = 0;
                    if (v85)
                    {
                      if (*(_DWORD *)v85 == 2)
                        WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v85 -= 2;
                    }
                    v86 = v125;
                    v125 = 0;
                    if (v86)
                    {
                      if (*(_DWORD *)v86 == 2)
                        WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v86 -= 2;
                    }
                    v87 = v123;
                    v123 = 0;
                    if (v87)
                    {
                      if (*(_DWORD *)v87 == 2)
                        WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v87 -= 2;
                    }
                    v88 = v121;
                    v121 = 0;
                    if (v88)
                    {
                      if (*(_DWORD *)v88 == 2)
                        WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v88 -= 2;
                    }
                    v89 = v119;
                    v119 = 0;
                    if (v89)
                    {
                      if (*(_DWORD *)v89 == 2)
                        WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v89 -= 2;
                    }
                    v90 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v90)
                    {
                      if (*(_DWORD *)v90 == 2)
                        WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v45);
                      else
                        *(_DWORD *)v90 -= 2;
                    }
                    ++v52;
                  }
                  while (v52 != (uint64_t *)v93);
                }
                v91 = __ldxr(v47);
                if (v91 == 1)
                {
                  if (!__stlxr(0, v47))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v92 = v107;
        v107 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2)
            WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v45);
          else
            *(_DWORD *)v92 -= 2;
        }
        return a1;
      }
      *(_DWORD *)v40 -= 2;
    }
    if (v26)
      goto LABEL_36;
    goto LABEL_38;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AudioParam::logger(WebCore::AudioParam *this)
{
  return *((_QWORD *)this + 18);
}

char *WebCore::AudioParam::logChannel(WebCore::AudioParam *this)
{
  return &WebCore::LogMedia;
}

const char *WebCore::AudioParam::logClassName(WebCore::AudioParam *this)
{
  return "AudioParam";
}

uint64_t WebCore::AudioParam::logIdentifier(WebCore::AudioParam *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::AudioParamTimeline::valueForContextTime(WebCore::AudioParamTimeline *this, WebCore::BaseAudioContext *a2, float a3, float a4, float a5)
{
  unsigned __int8 *v10;
  float v11;
  int v12;
  int v13;
  uint64_t result;
  unint64_t v15;
  int v16;
  int v17;
  double v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  float __D;
  float __C;
  float __B;

  v10 = (unsigned __int8 *)this + 16;
  v11 = 0.0;
  do
  {
    while (1)
    {
      v12 = *v10;
      if ((v12 & 1) != 0)
        goto LABEL_23;
      v13 = __ldaxr(v10);
      if (v13 == v12)
        break;
      __clrex();
    }
  }
  while (__stxr(v12 | 1, v10));
  if (!*((_DWORD *)this + 3))
    goto LABEL_10;
  result = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 88))(a2);
  v15 = atomic_load((unint64_t *)(result + 152));
  if (*((_DWORD *)this + 3))
  {
    if ((double)v15 / *(float *)(result + 160) >= *(double *)(*(_QWORD *)this + 8))
    {
      v16 = 1;
LABEL_12:
      v17 = __ldxr(v10);
      if (v17 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v16)
            goto LABEL_15;
          goto LABEL_23;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v16)
      {
LABEL_15:
        __D = 0.0;
        v18 = *(float *)((*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 88))(a2) + 160);
        v19 = (void *)atomic_load((unint64_t *)((*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 88))(a2)
                                                     + 152));
        while (1)
        {
          v20 = *v10;
          if ((v20 & 1) != 0)
            break;
          v21 = __ldaxr(v10);
          if (v21 == v20)
          {
            if (!__stxr(v20 | 1, v10))
            {
              a3 = WebCore::AudioParamTimeline::valuesForFrameRangeImpl(this, v19, (unint64_t)v19 + 1, a3, &__D, 1u, v18, v18 * 0.0078125);
              __C = a5;
              __B = a4;
              vDSP_vclip(&__D, 1, &__B, &__C, &__D, 1, 1uLL);
              v23 = __ldxr(v10);
              if (v23 == 1)
              {
                if (!__stlxr(0, v10))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v10);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
        v22 = 0x100000000;
        v11 = a3;
        return v22 | LODWORD(v11);
      }
LABEL_23:
      v22 = 0;
      return v22 | LODWORD(v11);
    }
LABEL_10:
    v16 = 0;
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AudioParam::setValueForBindings@<X0>(uint64_t this@<X0>, float a2@<S0>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::AudioParam *v16;
  float v17;
  double v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  float v23;

  v3 = this;
  v23 = a2;
  v5 = *(_QWORD *)(this + 144);
  v6 = *(_QWORD *)(this + 152);
  v19 = "AudioParam";
  v20 = 11;
  v21 = "setValue";
  v22 = v6;
  if (*(_BYTE *)(v5 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v19, &v23);
  }
  v8 = *(float *)(v3 + 96);
  v9 = *(float *)(v3 + 100);
  if (v9 < v8)
  {
    __break(1u);
  }
  else
  {
    if (v9 >= v23)
      v9 = v23;
    if (v23 >= v8)
      v10 = v9;
    else
      v10 = *(float *)(v3 + 96);
    *(float *)(v3 + 88) = v10;
    v11 = *(_QWORD *)(v3 + 8);
    if (!v11 || (this = *(_QWORD *)(v11 + 8)) == 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return this;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 88))(this - 32);
    v13 = atomic_load((unint64_t *)(v12 + 152));
    WebCore::AudioParam::setValueAtTime((WTF *)v3, v10, (double)v13 / *(float *)(v12 + 160), (uint64_t)&v19);
    v14 = v21;
    if (!(_DWORD)v21)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return ((uint64_t (*)(float *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v14])(&v23, &v19);
    }
    if ((_DWORD)v21 == 1)
    {
      v15 = v20;
      v20 = 0;
      *(_BYTE *)a3 = (_BYTE)v19;
      a3[1] = v15;
      *((_BYTE *)a3 + 16) = 1;
      return ((uint64_t (*)(float *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v14])(&v23, &v19);
    }
  }
  v16 = (WebCore::AudioParam *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::AudioParam::linearRampToValueAtTime(v16, v17, v18);
}

uint64_t WebCore::AudioParam::linearRampToValueAtTime@<X0>(uint64_t this@<X0>, float a2@<S0>, double a3@<D1>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  double v7;
  uint64_t v9;
  unint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD v19[2];
  unsigned __int8 v20;

  v4 = this;
  v6 = *(_QWORD *)(this + 8);
  if (!v6 || (this = *(_QWORD *)(v6 + 8)) == 0)
  {
    *(_QWORD *)a4 = v4;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  v7 = a3;
  if (a3 >= 0.0)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 88))(this - 32);
    v10 = atomic_load((unint64_t *)(v9 + 152));
    v11 = *(float *)(v9 + 160);
    if ((double)v10 / v11 > v7)
      v7 = (double)v10 / v11;
    v12 = *(float *)(v4 + 88);
    v13 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    if (v13)
      v14 = v13 - 32;
    else
      v14 = 0;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
    v16 = atomic_load((unint64_t *)(v15 + 152));
    this = (uint64_t)WebCore::AudioParamTimeline::linearRampToValueAtTime(v4 + 112, v19, a2, v7, v12, (double)v16 / *(float *)(v15 + 160));
    v17 = v20;
    if (!v20)
    {
      *(_QWORD *)a4 = v4;
      goto LABEL_15;
    }
    v18 = v19[1];
    *(_BYTE *)a4 = v19[0];
    *(_QWORD *)(a4 + 8) = v18;
  }
  else
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 32;
  }
  v17 = 1;
LABEL_15:
  *(_DWORD *)(a4 + 16) = v17;
  return this;
}

WTF *WebCore::AudioParamTimeline::linearRampToValueAtTime@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>, double a4@<D1>, float a5@<S2>, double a6@<D3>)
{
  unsigned __int8 *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  void *v17;
  WTF *result;
  int v19;
  int v20;
  float v21;
  double v22;
  int v23;
  WTF *v24[2];
  _DWORD v25[6];
  char v26;
  char v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;

  v12 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 16);
LABEL_5:
  if (!*(_DWORD *)(a1 + 12))
  {
    v20 = 0;
    v21 = a5;
    v22 = a6;
    v23 = 0;
    v26 = 0;
    *(_OWORD *)v24 = 0u;
    memset(v25, 0, 21);
    v27 = 0;
    WebCore::AudioParamTimeline::insertEvent((unsigned int *)a1, (unint64_t)&v20, &v28);
    if (v30)
    {
      v15 = v29;
      v29 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v16 = v24[1];
    if (v24[1])
    {
      v24[1] = 0;
      v25[0] = 0;
      WTF::fastFree(v16, v14);
    }
  }
  v20 = 1;
  v21 = a3;
  v22 = a4;
  v23 = 0;
  v26 = 0;
  *(_OWORD *)v24 = 0u;
  memset(v25, 0, 21);
  v27 = 0;
  WebCore::AudioParamTimeline::insertEvent((unsigned int *)a1, (unint64_t)&v20, a2);
  result = v24[1];
  if (v24[1])
  {
    v24[1] = 0;
    v25[0] = 0;
    result = (WTF *)WTF::fastFree(result, v17);
  }
  v19 = __ldxr(v12);
  if (v19 != 1)
  {
    __clrex();
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  if (__stlxr(0, v12))
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  return result;
}

uint64_t WebCore::AudioParam::exponentialRampToValueAtTime@<X0>(uint64_t this@<X0>, float a2@<S0>, double a3@<D1>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  double v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD v19[2];
  unsigned __int8 v20;

  v4 = this;
  v6 = *(_QWORD *)(this + 8);
  if (!v6 || (this = *(_QWORD *)(v6 + 8)) == 0)
  {
    *(_QWORD *)a4 = v4;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  if (a2 == 0.0 || (v8 = a3, a3 < 0.0))
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 32;
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 88))(this - 32);
    v10 = atomic_load((unint64_t *)(v9 + 152));
    v11 = *(float *)(v9 + 160);
    if ((double)v10 / v11 > v8)
      v8 = (double)v10 / v11;
    v12 = *(float *)(v4 + 88);
    v13 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    if (v13)
      v14 = v13 - 32;
    else
      v14 = 0;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
    v16 = atomic_load((unint64_t *)(v15 + 152));
    this = (uint64_t)WebCore::AudioParamTimeline::exponentialRampToValueAtTime(v4 + 112, v19, a2, v8, v12, (double)v16 / *(float *)(v15 + 160));
    v17 = v20;
    if (!v20)
    {
      *(_QWORD *)a4 = v4;
      goto LABEL_16;
    }
    v18 = v19[1];
    *(_BYTE *)a4 = v19[0];
    *(_QWORD *)(a4 + 8) = v18;
  }
  v17 = 1;
LABEL_16:
  *(_DWORD *)(a4 + 16) = v17;
  return this;
}

WTF *WebCore::AudioParamTimeline::exponentialRampToValueAtTime@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>, double a4@<D1>, float a5@<S2>, double a6@<D3>)
{
  unsigned __int8 *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  void *v17;
  WTF *result;
  int v19;
  int v20;
  float v21;
  double v22;
  int v23;
  WTF *v24[2];
  _DWORD v25[6];
  char v26;
  char v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;

  v12 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 16);
LABEL_5:
  if (!*(_DWORD *)(a1 + 12))
  {
    v20 = 0;
    v21 = a5;
    v22 = a6;
    v23 = 0;
    v26 = 0;
    *(_OWORD *)v24 = 0u;
    memset(v25, 0, 21);
    v27 = 0;
    WebCore::AudioParamTimeline::insertEvent((unsigned int *)a1, (unint64_t)&v20, &v28);
    if (v30)
    {
      v15 = v29;
      v29 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v16 = v24[1];
    if (v24[1])
    {
      v24[1] = 0;
      v25[0] = 0;
      WTF::fastFree(v16, v14);
    }
  }
  v20 = 2;
  v21 = a3;
  v22 = a4;
  v23 = 0;
  v26 = 0;
  *(_OWORD *)v24 = 0u;
  memset(v25, 0, 21);
  v27 = 0;
  WebCore::AudioParamTimeline::insertEvent((unsigned int *)a1, (unint64_t)&v20, a2);
  result = v24[1];
  if (v24[1])
  {
    v24[1] = 0;
    v25[0] = 0;
    result = (WTF *)WTF::fastFree(result, v17);
  }
  v19 = __ldxr(v12);
  if (v19 != 1)
  {
    __clrex();
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  if (__stlxr(0, v12))
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  return result;
}

uint64_t WebCore::AudioParam::setTargetAtTime@<X0>(uint64_t this@<X0>, float a2@<S0>, double a3@<D1>, float a4@<S2>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  int v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned __int8 v18;

  v5 = this;
  v7 = *(_QWORD *)(this + 8);
  if (!v7 || (this = *(_QWORD *)(v7 + 8)) == 0)
  {
    *(_QWORD *)a5 = v5;
    *(_DWORD *)(a5 + 16) = 0;
    return this;
  }
  if (a3 >= 0.0 && a4 >= 0.0)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 88))(this - 32);
    v13 = atomic_load((unint64_t *)(v12 + 152));
    v14 = *(float *)(v12 + 160);
    if ((double)v13 / v14 <= a3)
      v15 = a3;
    else
      v15 = (double)v13 / v14;
    this = (uint64_t)WebCore::AudioParamTimeline::setTargetAtTime(v5 + 112, v17, a2, v15, a4);
    v10 = v18;
    if (!v18)
    {
      *(_QWORD *)a5 = v5;
      goto LABEL_9;
    }
    v16 = v17[1];
    *(_BYTE *)a5 = v17[0];
    *(_QWORD *)(a5 + 8) = v16;
  }
  else
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 32;
  }
  v10 = 1;
LABEL_9:
  *(_DWORD *)(a5 + 16) = v10;
  return this;
}

WTF *WebCore::AudioParamTimeline::setTargetAtTime@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>, double a4@<D1>, float a5@<S2>)
{
  unsigned __int8 *v10;
  void *v12;
  WTF *result;
  int v14;
  int v15;
  float v16;
  double v17;
  float v18;
  WTF *v19[2];
  _DWORD v20[6];
  char v21;
  char v22;

  v10 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 16);
LABEL_5:
  if (a5 == 0.0)
  {
    v15 = 0;
    v16 = a3;
    v17 = a4;
    v18 = 0.0;
  }
  else
  {
    v15 = 3;
    v16 = a3;
    v17 = a4;
    v18 = a5;
  }
  v21 = 0;
  *(_OWORD *)v19 = 0u;
  memset(v20, 0, 21);
  v22 = 0;
  WebCore::AudioParamTimeline::insertEvent((unsigned int *)a1, (unint64_t)&v15, a2);
  result = v19[1];
  if (v19[1])
  {
    v19[1] = 0;
    v20[0] = 0;
    result = (WTF *)WTF::fastFree(result, v12);
  }
  v14 = __ldxr(v10);
  if (v14 != 1)
  {
    __clrex();
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  if (__stlxr(0, v10))
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  return result;
}

uint64_t WebCore::AudioParam::setValueCurveAtTime@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, WTF *a5@<D1>)
{
  uint64_t v5;
  uint64_t v7;
  char v9;
  uint64_t v12;
  unint64_t v13;
  double v14;
  int v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  unsigned __int8 v19;

  v5 = result;
  v7 = *(_QWORD *)(result + 8);
  if (!v7 || (result = *(_QWORD *)(v7 + 8)) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  if (*(_DWORD *)(a2 + 12) <= 1u)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 8;
LABEL_13:
    *(_BYTE *)a3 = v9;
    goto LABEL_14;
  }
  if (a4 < 0.0 || *(double *)&a5 <= 0.0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 32;
    goto LABEL_13;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 32) + 88))(result - 32);
  v13 = atomic_load((unint64_t *)(v12 + 152));
  v14 = (double)v13 / *(float *)(v12 + 160);
  if (v14 <= a4)
    v14 = a4;
  result = (uint64_t)WebCore::AudioParamTimeline::setValueCurveAtTime((unsigned __int8 *)(v5 + 112), a2, (uint64_t)v17, v14, a5);
  v15 = v19;
  if (!v19)
  {
    *(_QWORD *)a3 = v5;
    goto LABEL_15;
  }
  v16 = v18;
  *(_BYTE *)a3 = v17[0];
  *(_QWORD *)(a3 + 8) = v16;
LABEL_14:
  v15 = 1;
LABEL_15:
  *(_DWORD *)(a3 + 16) = v15;
  return result;
}

unsigned __int8 *WebCore::AudioParamTimeline::setValueCurveAtTime@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, WTF *a5@<D1>)
{
  unsigned int *v8;
  unsigned __int8 *v10;
  uint64_t v12;
  WTF *v13;
  int v14;
  int v15;
  void *v16;
  WTF::StringImpl *v17;
  void *v18;
  int v19;
  uint64_t v20;
  double v21;
  int v22;
  WTF *v23[2];
  _BYTE v24[21];
  char v25;
  char v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  char v29;

  v8 = (unsigned int *)result;
  v10 = result + 16;
  if (__ldaxr(result + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 16);
LABEL_5:
  v12 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v12)
  {
    __break(0xC471u);
    return result;
  }
  v13 = *(WTF **)a2;
  v14 = *(_DWORD *)(*(_QWORD *)a2 + 4 * (v12 - 1));
  v20 = 4;
  v21 = a4;
  v22 = 0;
  v23[0] = a5;
  v23[1] = v13;
  v15 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)v24 = v15;
  *(_DWORD *)&v24[4] = v12;
  *(double *)&v24[8] = (double)(unint64_t)(v12 - 1) / *(double *)&a5;
  *(_DWORD *)&v24[16] = v14;
  v24[20] = 0;
  v25 = 0;
  v26 = 0;
  WebCore::AudioParamTimeline::insertEvent(v8, (unint64_t)&v20, &v27);
  result = (unsigned __int8 *)v23[1];
  if (v23[1])
  {
    v23[1] = 0;
    *(_DWORD *)v24 = 0;
    result = (unsigned __int8 *)WTF::fastFree((WTF *)result, v16);
  }
  if (v29)
  {
    v17 = v28;
    *(_BYTE *)a3 = v27;
    *(_QWORD *)(a3 + 8) = v17;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    LODWORD(v20) = 0;
    HIDWORD(v20) = v14;
    v21 = a4 + *(double *)&a5;
    v22 = 0;
    v25 = 0;
    *(_OWORD *)v23 = 0u;
    memset(v24, 0, sizeof(v24));
    v26 = 0;
    WebCore::AudioParamTimeline::insertEvent(v8, (unint64_t)&v20, (_QWORD *)a3);
    result = (unsigned __int8 *)v23[1];
    if (v23[1])
    {
      v23[1] = 0;
      *(_DWORD *)v24 = 0;
      result = (unsigned __int8 *)WTF::fastFree((WTF *)result, v18);
    }
    if (v29)
    {
      result = (unsigned __int8 *)v28;
      v28 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  v19 = __ldxr(v10);
  if (v19 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  if (__stlxr(0, v10))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  return result;
}

WTF *WebCore::AudioParamTimeline::cancelScheduledValues(WTF *result, void *a2, double a3)
{
  WTF *v4;
  unsigned __int8 *v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  double v13;
  BOOL v14;
  WTF *v15;
  unint64_t v16;
  uint64_t v17;
  WTF *v18;
  int v19;

  v4 = result;
  v5 = (unsigned __int8 *)result + 16;
  if (__ldaxr((unsigned __int8 *)result + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  result = (WTF *)MEMORY[0x19AEA534C]((char *)result + 16);
LABEL_5:
  v7 = *((_DWORD *)v4 + 3);
  if (v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)v4;
    v10 = 88 * v7;
    v11 = *((_DWORD *)v4 + 3);
    while (1)
    {
      v12 = v9 + v8;
      v13 = *(double *)(v9 + v8 + 8);
      if (v13 >= a3)
        break;
      v14 = v13 <= a3 && *(_DWORD *)(v9 + v8) == 4;
      if (v14 && v13 + *(double *)(v9 + v8 + 24) > a3)
        break;
      v8 += 88;
      --v11;
      if (v10 == v8)
        goto LABEL_23;
    }
    v15 = (WTF *)(v9 + 88 * v7);
    if (v11)
    {
      v16 = v12 + 32;
      v17 = v10 - v8;
      do
      {
        v18 = *(WTF **)v16;
        if (*(_QWORD *)v16)
        {
          *(_QWORD *)v16 = 0;
          *(_DWORD *)(v16 + 8) = 0;
          WTF::fastFree(v18, a2);
        }
        v16 += 88;
        v17 -= 88;
      }
      while (v17);
      v9 = *(_QWORD *)v4;
      v7 = *((_DWORD *)v4 + 3);
    }
    result = WTF::VectorMover<false,WebCore::AudioParamTimeline::ParamEvent>::moveOverlapping(v15, (WTF *)(v9 + 88 * v7), v12);
    *((_DWORD *)v4 + 3) -= v11;
  }
LABEL_23:
  v19 = __ldxr(v5);
  if (v19 != 1)
  {
    __clrex();
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

unsigned __int8 *WebCore::AudioParamTimeline::cancelAndHoldAtTime@<X0>(unsigned __int8 *result@<X0>, void *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  unsigned int *v5;
  unsigned __int8 *v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double *v12;
  unint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  WTF *v27;
  uint64_t v28;
  unint64_t v29;
  WTF *v30;
  uint64_t v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  float v42;
  float v43;
  double v44;
  double v45;
  int v46;
  int v47;
  void *v48;
  double v49;
  uint64_t v50;
  float v51;
  char v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  char v55;
  _QWORD v56[2];
  char v57;
  _DWORD v58[2];
  double v59;
  int v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  _QWORD v64[2];
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  double v69;
  int v70;
  double v71;
  WTF *v72;
  uint64_t v73;
  _QWORD v74[2];
  int v75;
  int v76;
  uint64_t v77;
  char v78;
  char v79;

  v5 = (unsigned int *)result;
  v7 = result + 16;
  if (__ldaxr(result + 16))
  {
    __clrex();
LABEL_4:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v7))
    goto LABEL_4;
LABEL_5:
  v9 = v5[3];
  if (!(_DWORD)v9)
    goto LABEL_22;
  v10 = 0;
  v11 = *(_QWORD *)v5;
  v12 = (double *)(*(_QWORD *)v5 + 8);
  while (*v12 <= a4)
  {
    ++v10;
    v12 += 11;
    if (v9 == v10)
    {
      v10 = v5[3];
      break;
    }
  }
  if (!v10)
    goto LABEL_76;
  v13 = v10 - 1;
  if (v10 - 1 >= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19553698CLL);
  }
  if ((*(_DWORD *)(v11 + 88 * v13) - 3) >= 2)
  {
LABEL_76:
    v13 = v10;
    if (v10 >= v9)
    {
LABEL_22:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      goto LABEL_44;
    }
  }
  if (v13 >= v9)
    goto LABEL_71;
  v14 = *(_DWORD *)(v11 + 88 * v13);
  LOBYTE(v68) = 0;
  v79 = 0;
  LOBYTE(v58[0]) = 0;
  v67 = 0;
  v15 = 1;
  if ((v14 - 1) < 2)
  {
    v21 = 0;
    v22 = v11 + 88 * v13;
    v23 = *(_DWORD *)(v22 + 4);
    v24 = *(_QWORD *)(v22 + 8);
    v68 = 5;
    v69 = a4;
    v70 = 0;
    v71 = 0.0;
    v72 = 0;
    v73 = 0;
    memset(v74, 0, 13);
    v75 = v14;
    v76 = v23;
    v77 = v24;
    v78 = 1;
  }
  else
  {
    if (v14 != 3)
    {
      if (v14 != 4)
      {
LABEL_27:
        v21 = 1;
        goto LABEL_28;
      }
      v16 = v11 + 88 * v13;
      v18 = *(double *)(v16 + 8);
      v17 = (double *)(v16 + 8);
      v19 = v18;
      if (v18 >= a4)
      {
LABEL_21:
        v15 = 1;
        goto LABEL_27;
      }
      v20 = *(double *)(v11 + 88 * v13 + 24);
      if (a4 > v19 + v20)
      {
        ++v13;
        goto LABEL_21;
      }
      v33 = a4 - v19;
      v34 = v11 + 88 * v13;
      v37 = *(_QWORD *)(v34 + 32);
      v36 = v34 + 32;
      v35 = v37;
      v38 = *(unsigned int *)(v36 + 12);
      v39 = v38 - 1;
      v40 = v33 * ((double)(unint64_t)(v38 - 1) / v20);
      v41 = (unint64_t)v40;
      if (v38 - 1 < (unint64_t)v40)
        v41 = v38 - 1;
      if (v39 >= v41 + 1)
        v39 = v41 + 1;
      v42 = *(float *)(v35 + 4 * v41);
      v43 = *(float *)(v35 + 4 * v39);
      v44 = v40 - (double)v41;
      if (v44 <= 1.0)
        v45 = v44;
      else
        v45 = 1.0;
      v46 = *(_DWORD *)(v36 - 28);
      v47 = *(_DWORD *)(v36 - 16);
      if (!(_DWORD)v38)
      {
        v48 = 0;
        v49 = v19;
        goto LABEL_66;
      }
      if (!(v38 >> 30))
      {
        v48 = (void *)WTF::fastMalloc((WTF *)(4 * v38));
        result = (unsigned __int8 *)memcpy(v48, *(const void **)v36, 4 * *(unsigned int *)(v36 + 12));
        v49 = *v17;
        v9 = v5[3];
LABEL_66:
        v15 = 0;
        v21 = 0;
        v50 = *(_QWORD *)(v11 + 88 * v13 + 48);
        HIDWORD(v68) = v46;
        LODWORD(v68) = 4;
        v51 = v45;
        v69 = v19;
        v70 = v47;
        v71 = v33;
        v72 = (WTF *)v48;
        LODWORD(v73) = v38;
        HIDWORD(v73) = v38;
        v74[0] = v50;
        *(float *)&v74[1] = v42 + (float)((float)(v43 - v42) * v51);
        BYTE4(v74[1]) = 0;
        LOBYTE(v75) = 0;
        v78 = 0;
        v79 = 1;
        v63 = 0;
        v64[0] = 0;
        *(_QWORD *)((char *)v64 + 5) = 0;
        v58[0] = 0;
        *(float *)&v58[1] = *(float *)&v74[1];
        v59 = v33 + v49;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 1;
        goto LABEL_28;
      }
LABEL_71:
      __break(0xC471u);
      JUMPOUT(0x195536984);
    }
    if (*(double *)(v11 + 88 * v13 + 8) >= a4)
      goto LABEL_27;
    v21 = 0;
    ++v13;
    v68 = 5;
    v69 = a4;
    v70 = 0;
    v71 = 0.0;
    v72 = 0;
    v73 = 0;
    memset(v74, 0, 13);
    LOBYTE(v75) = 0;
    v78 = 0;
  }
  v79 = 1;
LABEL_28:
  if (v13 < v9)
  {
    v52 = v15;
    v25 = v21;
    v26 = *(_QWORD *)v5 + 88 * v13;
    v27 = (WTF *)(*(_QWORD *)v5 + 88 * v9);
    v28 = 88 * v9 - 88 * v13;
    v29 = v26 + 32;
    do
    {
      v30 = *(WTF **)v29;
      if (*(_QWORD *)v29)
      {
        *(_QWORD *)v29 = 0;
        *(_DWORD *)(v29 + 8) = 0;
        WTF::fastFree(v30, a2);
      }
      v29 += 88;
      v28 -= 88;
    }
    while (v28);
    result = (unsigned __int8 *)WTF::VectorMover<false,WebCore::AudioParamTimeline::ParamEvent>::moveOverlapping(v27, (WTF *)(*(_QWORD *)v5 + 88 * v5[3]), v26);
    v5[3] += v13 - v9;
    v21 = v25;
    v15 = v52;
  }
  if ((v21 & 1) != 0)
    goto LABEL_35;
  result = (unsigned __int8 *)WebCore::AudioParamTimeline::insertEvent(v5, (unint64_t)&v68, v56);
  if (v57)
    goto LABEL_37;
  if ((v15 & 1) != 0)
    goto LABEL_35;
  result = (unsigned __int8 *)WebCore::AudioParamTimeline::insertEvent(v5, (unint64_t)v58, &v53);
  if (v55)
  {
    result = (unsigned __int8 *)v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v57)
  {
LABEL_37:
    v31 = v56[1];
    *(_BYTE *)a3 = v56[0];
    a3[1] = v31;
    *((_BYTE *)a3 + 16) = 1;
  }
  else
  {
LABEL_35:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  if (v67)
  {
    result = (unsigned __int8 *)v62;
    if (v62)
    {
      v62 = 0;
      LODWORD(v63) = 0;
      result = (unsigned __int8 *)WTF::fastFree((WTF *)result, a2);
    }
  }
  if (v79)
  {
    result = (unsigned __int8 *)v72;
    if (v72)
    {
      v72 = 0;
      LODWORD(v73) = 0;
      result = (unsigned __int8 *)WTF::fastFree((WTF *)result, a2);
    }
  }
LABEL_44:
  v32 = __ldxr(v7);
  if (v32 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  if (__stlxr(0, v7))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return result;
}

void WebCore::AudioParam::calculateFinalValues(WebCore::AudioParam *this, float *a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  int v18;
  float v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  WebCore::BaseAudioContext *v24;
  unint64_t v25;
  float *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF **v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  float *v46;
  unsigned int v47;
  unsigned int *v48;
  float __C;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v8 = a2;
      v10 = atomic_load((unint64_t *)(v5 + 240));
      v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v11)
        v11 = WTF::Thread::initializeCurrentTLS(0);
      if (a3 && v8 && v11 == v10)
      {
        if (a4)
        {
          v12 = *((_QWORD *)this + 1);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
            {
              v14 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 32) + 88))(v13 - 32) + 160);
              v15 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
              if (v15)
                v16 = v15 - 32;
              else
                v16 = 0;
              a2 = (float *)atomic_load((unint64_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16)
                                                           + 152));
              v17 = *((float *)this + 22);
              v18 = *((_DWORD *)this + 24);
              v19 = *((float *)this + 25);
              v20 = (unsigned __int8 *)this + 128;
              do
              {
                while (1)
                {
                  v21 = *v20;
                  if ((v21 & 1) != 0)
                  {
                    v46 = v8;
                    v47 = a3;
                    do
                    {
                      *v46++ = v17;
                      --v47;
                    }
                    while (v47);
                    goto LABEL_33;
                  }
                  v22 = __ldaxr(v20);
                  if (v22 == v21)
                    break;
                  __clrex();
                }
              }
              while (__stxr(v21 | 1, v20));
              v17 = WebCore::AudioParamTimeline::valuesForFrameRangeImpl((WebCore::AudioParam *)((char *)this + 112), a2, (unint64_t)a2 + a3, v17, v8, a3, v14, v14);
              LODWORD(v48) = v18;
              __C = v19;
              vDSP_vclip(v8, 1, (const float *)&v48, &__C, v8, 1, a3);
              v28 = __ldxr(v20);
              if (v28 == 1)
              {
                if (!__stlxr(0, v20))
                  goto LABEL_33;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WebCore::AudioParam *)((char *)this + 128));
LABEL_33:
              *((float *)this + 22) = v17;
            }
          }
        }
        else
        {
          v23 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
          if (v23)
            v24 = (WebCore::BaseAudioContext *)(v23 - 32);
          else
            v24 = 0;
          v25 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParam *)((char *)this + 112), v24, *((float *)this + 22), *((float *)this + 24), *((float *)this + 25));
          if (HIDWORD(v25))
            *((_DWORD *)this + 22) = v25;
          v26 = v8;
          v27 = a3;
          do
          {
            *v26++ = *((float *)this + 22);
            --v27;
          }
          while (v27);
        }
        v29 = *((unsigned int *)this + 7);
        if ((_DWORD)v29)
        {
          v30 = *((_QWORD *)this + 17);
          if (a4)
            v31 = a3;
          else
            v31 = 1;
          if (*(_DWORD *)(v30 + 28))
          {
            v32 = *(uint64_t **)(v30 + 16);
            v33 = *v32;
            v34 = *(WTF ***)(*v32 + 8);
            *(_QWORD *)(*v32 + 8) = 0;
            if (v34)
            {
              WTF::fastAlignedFree(*v34, a2);
              WTF::fastFree((WTF *)v34, v35);
              v29 = *((unsigned int *)this + 7);
              *(_QWORD *)v33 = v8;
              *(_QWORD *)(v33 + 16) = v31;
              *(_BYTE *)(v33 + 24) = 0;
              *(_QWORD *)(v30 + 8) = v31;
              if (!(_DWORD)v29)
              {
LABEL_41:
                if (a3 != 1 && (a4 & 1) == 0)
                {
                  v36 = 1;
                  do
                    v8[v36++] = *v8;
                  while (a3 != (_DWORD)v36);
                }
                v37 = 0;
                do
                  ++v37;
                while (a3 != v37);
                v38 = *((float *)this + 25);
                LODWORD(v48) = *((_DWORD *)this + 24);
                __C = v38;
                vDSP_vclip(v8, 1, (const float *)&v48, &__C, v8, 1, a3);
                return;
              }
            }
            else
            {
              *(_QWORD *)v33 = v8;
              *(_QWORD *)(v33 + 16) = v31;
              *(_BYTE *)(v33 + 24) = 0;
              *(_QWORD *)(v30 + 8) = v31;
            }
          }
          v39 = (uint64_t *)*((_QWORD *)this + 2);
          v40 = &v39[v29];
          do
          {
            v41 = *v39;
            *(_BYTE *)(v41 + 32) = 0;
            v42 = *(unsigned int **)(v41 + 24);
            *(_QWORD *)(v41 + 24) = 0;
            if (v42)
            {
              do
              {
                v43 = __ldaxr(v42);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, v42));
              if (!v44)
              {
                atomic_store(1u, v42);
                v48 = v42;
                WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v48, a2);
              }
            }
            WebCore::AudioNode::processIfNecessary(*(_QWORD *)v41, 128);
            if (*(_BYTE *)(v41 + 32))
              v45 = 24;
            else
              v45 = 16;
            WebCore::AudioBus::sumFrom(*((_QWORD *)this + 17), *(_QWORD *)(v41 + v45), 0);
            ++v39;
          }
          while (v39 != v40);
          goto LABEL_41;
        }
      }
    }
  }
}

char *`non-virtual thunk to'WebCore::AudioParam::logChannel(WebCore::AudioParam *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::AudioParam>>(uint64_t a1, uint64_t *a2, WTF *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[8];

  JSC::JSLockHolder::JSLockHolder();
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v8 = *a2;
  if (!*a2 || (v9 = *(_DWORD *)(v8 + 4)) == 0)
  {
    v10 = *(_QWORD *)(v7 + 41968);
    goto LABEL_7;
  }
  if (v9 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_4;
      v14 = v15;
    }
    v10 = *(_QWORD *)(v7 + 8 * v14 + 42216);
    goto LABEL_7;
  }
LABEL_4:
  v10 = *(_QWORD *)(v7 + 64760);
  if (!v10 || v8 != *(_QWORD *)(v10 + 8))
  {
    v10 = JSC::jsStringWithCacheSlowCase();
    v6 = *(_QWORD *)a1;
  }
LABEL_7:
  v11 = WebCore::wrap<WebCore::AudioParam>(v6, v6, a3);
  WebCore::setToBackingMap(*(_QWORD *)a1, *(WTF::StringImpl **)(a1 + 8), v10, v11);
  return MEMORY[0x19AEA32A0](v16);
}

WebCore::AudioParam *WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  WebCore::AudioParam *result;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  WTF *v31;
  void *v32;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v18 = *a2;
    if (*a2)
      *(_DWORD *)v18 += 2;
    *v15 = v18;
    v19 = *(WTF **)a3;
    *(_QWORD *)a3 = 0;
    result = v15[1];
    v15[1] = v19;
    if (result)
    {
      if (*((_DWORD *)result + 16) == 1)
      {
        WebCore::AudioParam::~AudioParam(result, a2);
        result = (WebCore::AudioParam *)WTF::fastFree(v31, v32);
      }
      else
      {
        --*((_DWORD *)result + 16);
      }
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_32;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_37:
        result = (WebCore::AudioParam *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v28, v15);
        v15 = (WTF **)result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_41;
      }
LABEL_32:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_37;
    }
LABEL_41:
    v30 = v24 + 16 * v27;
    v29 = 1;
    goto LABEL_42;
  }
  result = (WebCore::AudioParam *)WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v22 = *a1;
  if (*a1)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  v29 = 0;
  v30 = v22 + 16 * v23;
LABEL_42:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

unsigned int *WebCore::AudioParamTimeline::insertEvent@<X0>(unsigned int *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  double v5;
  double v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v16;
  uint64_t v20;
  double v21;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  if (*(int *)a2 > 5
    || (v4 = a2, (*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    || (v5 = *(double *)(a2 + 8), (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || (*(_DWORD *)(a2 + 16) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (v6 = *(double *)(a2 + 24), (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v6 < 0.0)
  {
LABEL_48:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v7 = result;
  v8 = *(_QWORD *)result;
  v9 = result[3];
  if (!(_DWORD)v9)
  {
    v10 = 0;
LABEL_45:
    v23 = v10;
    if ((_DWORD)v9 == result[2])
    {
      v4 = WTF::Vector<WebCore::AudioParamTimeline::ParamEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v9 + 1, a2);
      LODWORD(v9) = v7[3];
      v8 = *(_QWORD *)v7;
    }
    v24 = v8 + 88 * v23;
    result = (unsigned int *)WTF::VectorMover<false,WebCore::AudioParamTimeline::ParamEvent>::moveOverlapping((WTF *)v24, (WTF *)(v8 + 88 * v9), v24 + 88);
    v25 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v24 = *(_OWORD *)v4;
    *(_OWORD *)(v24 + 16) = v25;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    v26 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v24 + 32) = v26;
    LODWORD(v26) = *(_DWORD *)(v4 + 40);
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v24 + 40) = v26;
    LODWORD(v26) = *(_DWORD *)(v4 + 44);
    *(_DWORD *)(v4 + 44) = 0;
    *(_DWORD *)(v24 + 44) = v26;
    v27 = *(_OWORD *)(v4 + 48);
    v28 = *(_OWORD *)(v4 + 64);
    *(_BYTE *)(v24 + 80) = *(_BYTE *)(v4 + 80);
    *(_OWORD *)(v24 + 48) = v27;
    *(_OWORD *)(v24 + 64) = v28;
    ++v7[3];
    goto LABEL_48;
  }
  if (*(_DWORD *)a2 == 4)
  {
    v10 = 0;
    v11 = v5 + v6;
    v12 = 88 * v9;
    v13 = *(_QWORD *)result;
    do
    {
      if (*(_DWORD *)v13 == 4)
      {
        v14 = *(double *)(v13 + 8);
        if (v14 >= v5 && v14 < v11)
          goto LABEL_49;
        v16 = v14 + *(double *)(v13 + 24);
        if (v16 > v5 && (v5 >= v14 || v16 < v11))
          goto LABEL_49;
        if (v11 >= v14 && v11 < v16)
          goto LABEL_49;
      }
      else if (*(_DWORD *)v13 == 5)
      {
        v14 = *(double *)(v13 + 8);
      }
      else
      {
        v14 = *(double *)(v13 + 8);
        if (v14 > v5 && v14 < v11)
          goto LABEL_49;
      }
      if (v14 > v5)
        goto LABEL_45;
      ++v10;
      v13 += 88;
      v12 -= 88;
    }
    while (v12);
LABEL_44:
    v10 = result[3];
    goto LABEL_45;
  }
  v10 = 0;
  v20 = *(_QWORD *)result;
  while (1)
  {
    v21 = *(double *)(v20 + 8);
    if (*(_DWORD *)v20 == 4 && v5 >= v21 && v5 < v21 + *(double *)(v20 + 24))
      break;
    if (v21 > v5)
      goto LABEL_45;
    ++v10;
    v20 += 88;
    if (v20 == v8 + 88 * v9)
      goto LABEL_44;
  }
LABEL_49:
  result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

float WebCore::AudioParamTimeline::valuesForFrameRangeImpl(WebCore::AudioParamTimeline *this, void *a2, unint64_t a3, float a4, float *a5, unsigned int a6, double a7, double a8)
{
  unsigned int v9;
  float *v10;
  WebCore::AudioParamTimeline *v11;
  int64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  float *v21;
  unsigned int v22;
  unint64_t v23;
  int64_t v25;
  int64_t v26;
  double v27;
  double v28;
  unint64_t v29;
  unsigned int v30;
  float v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  int v40;
  double v41;
  BOOL v42;
  unint64_t v44;
  float *v45;
  double v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  float *v50;
  double v52;
  unint64_t v53;
  int64_t v54;
  float v55;
  int v56;
  unint64_t v57;
  int v58;
  int64_t v59;
  float v60;
  double v61;
  long double v62;
  float v63;
  double v64;
  float *v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  double v76;
  uint64_t v77;
  unsigned int v78;
  double v79;
  unsigned int v80;
  unsigned int v81;
  double v82;
  float v83;
  float v84;
  unint64_t v85;
  WTF *v86;
  unint64_t v87;
  WTF *v88;
  unint64_t v89;
  unint64_t v90;
  float *v91;
  float v92;
  float v93;
  unint64_t v94;
  unint64_t v96;
  _BYTE *v97;
  int v98;
  double v99;
  long double v100;
  float v101;
  float v102;
  float *v103;
  unsigned int v105;
  unint64_t v106;
  float v107;
  int64_t v108;
  long double v109;
  float *v110;
  uint64_t v111;
  float *v112;
  unsigned int v113;
  unint64_t v114;
  float *v115;
  unint64_t v116;
  int64_t v117;
  long double v118;
  unint64_t v119;
  float v120;
  float v121;
  unsigned int v122;
  unsigned int v123;
  int64_t v124;
  float v125;
  float v126;
  unint64_t v127;
  float *v128;
  float v129;
  float v130;
  BOOL v131;
  int64_t v132;
  double v133;
  float v134;
  float v135;
  unint64_t v136;
  float *v137;
  int v138;
  float *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  WTF *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  WTF *v147;
  unint64_t v148;
  WebCore::AudioParamTimeline *v149;
  unsigned int v150;
  float *v151;
  float v152;
  unint64_t v153;
  _BYTE *v154;
  double v155;
  int v156;
  unint64_t v157;
  unint64_t v159;
  int64_t v160;
  int64_t v161;
  void *v162;
  unint64_t v163;
  WebCore::AudioParamTimeline *v164;
  unsigned int v166;
  unint64_t v167;
  double v168;
  float __B;
  float __A[4];
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v9 = a6;
    v10 = a5;
    v11 = this;
    v12 = *((unsigned int *)this + 3);
    if ((_DWORD)v12
      && (v13 = a7,
          v14 = 1.0 / a7,
          v168 = (double)a3,
          v15 = *(double *)(*(_QWORD *)this + 8),
          1.0 / a7 * (double)a3 > v15))
    {
      v16 = a8;
      if (v15 <= v14 * (double)(unint64_t)a2)
      {
        v20 = 0;
        v23 = (unint64_t)a2;
      }
      else
      {
        v17 = v15 * a7;
        v18 = vcvtpd_u64_f64(v17);
        if (ceil(v17) >= v168)
          v18 = a3;
        v19 = v18 - (_DWORD)a2;
        if (v19 >= a6)
          v20 = a6;
        else
          v20 = v19;
        if (v20)
        {
          v21 = a5;
          v22 = v20;
          do
          {
            *v21++ = a4;
            --v22;
          }
          while (v22);
        }
        v23 = (unint64_t)a2 + v20;
      }
      if ((int)v12 >= 1 && v20 < a6)
      {
        v25 = 0;
        v159 = 0;
        v26 = (v12 - 1);
        v27 = 1.0;
        v28 = (v168 * v14 + 1.0) * a7;
        v29 = vcvtpd_u64_f64(v28);
        if (v28 >= v168)
          v29 = a3;
        v167 = v29;
        v30 = v29 - (_DWORD)a2;
        if (v30 >= a6)
          v30 = a6;
        v166 = v30;
        v155 = a7 + a7;
        v31 = v14;
        v152 = v31;
        v163 = a3;
        v164 = v11;
        v161 = v12;
        v162 = a2;
        v160 = (v12 - 1);
        while (1)
        {
          v32 = *((unsigned int *)v11 + 3);
          if (v25 >= v32)
          {
            __break(0xC471u);
            JUMPOUT(0x195537FD0);
          }
          v33 = *(_QWORD *)v11;
          v34 = *(_QWORD *)v11 + 88 * v25;
          if (v25 >= v26)
          {
            v44 = v33 + 88 * v25;
            v45 = (float *)(v44 + 4);
            v46 = *(double *)(v44 + 8);
            LODWORD(v47) = v166;
            v48 = v167;
LABEL_38:
            switch(*(_DWORD *)v34)
            {
              case 0:
              case 1:
              case 2:
                v49 = *v45;
                if (v47 <= v20)
                  goto LABEL_117;
                v50 = &v10[v20];
                do
                {
                  *v50++ = v49;
                  ++v20;
                }
                while ((_DWORD)v47 != v20);
                goto LABEL_115;
              case 3:
                v59 = v25;
                v60 = *v45;
                v61 = *(float *)(v34 + 16);
                v62 = exp(-1.0 / (v61 * v16));
                v27 = 1.0;
                v13 = a7;
                v63 = 1.0 - v62;
                v64 = (double)v23;
                if (v46 * a7 > (double)v23 || v46 * a7 + 1.0 <= v64)
                {
                  v49 = a4 + (float)((float)(v60 - a4) * v63);
                }
                else
                {
                  v100 = exp(-(v64 * v14 - v46) / v61);
                  v27 = 1.0;
                  v13 = a7;
                  v49 = v60 + (float)(a4 - v60) * v100;
                }
                v42 = v14 * v64 <= v46 + v61 * 10.0;
                a3 = v163;
                v11 = v164;
                v16 = a8;
                v12 = v161;
                a2 = v162;
                v26 = v160;
                v25 = v59;
                if (v42)
                {
                  if (v60 == 0.0)
                  {
                    v101 = fabsf(v49);
                    v102 = 0.0000454;
                  }
                  else
                  {
                    v101 = vabds_f32(v60, v49);
                    v102 = fabsf(v49) * 0.0000454;
                  }
                  if (v101 >= v102)
                  {
                    if (v47 > v20)
                    {
                      __A[0] = 0.0;
                      v113 = ((v47 - v20) & 0xFFFFFFFC) + v20;
                      __A[1] = v63;
                      __A[2] = (float)(2.0 - v63) * v63;
                      for (__A[3] = (float)((float)((float)(v63 + -3.0) * v63) + 3.0) * v63; v20 < v113; v20 += 4)
                      {
                        __B = v60 - v49;
                        vDSP_vsmul(__A, 1, &__B, &v10[v20], 1, 4uLL);
                        __B = v49;
                        vDSP_vsadd(&v10[v20], 1, &__B, &v10[v20], 1, 4uLL);
                        v49 = v49
                            + (float)((float)(v60 - v49)
                                    * (float)((float)((float)(v63 * (float)((float)((float)(4.0 - v63) * v63) + -6.0))
                                                    + 4.0)
                                            * v63));
                      }
                      a3 = v163;
                      v11 = v164;
                      v16 = a8;
                      v13 = a7;
                      v12 = v161;
                      a2 = v162;
                      v26 = v160;
                      v27 = 1.0;
                      v25 = v59;
                    }
                    if (v20 < v47)
                    {
                      v114 = v47 - (unint64_t)v20;
                      v115 = &v10[v20];
                      do
                      {
                        *v115++ = v49;
                        v49 = v49 + (float)((float)(v60 - v49) * v63);
                        --v114;
                      }
                      while (v114);
                      v20 = v47;
                    }
                    if (v20)
                      v49 = v10[v20 - 1];
                    goto LABEL_117;
                  }
                }
                v111 = v47 - v20;
                v23 += v111;
                if (v47 <= v20)
                {
                  v49 = v60;
                  goto LABEL_192;
                }
                if ((_DWORD)v111)
                {
                  v112 = &v10[v20];
                  do
                  {
                    *v112++ = v60;
                    ++v20;
                  }
                  while ((_DWORD)v47 != v20);
                }
                v49 = v60;
                goto LABEL_189;
              case 4:
                if (v13 <= 0.0
                  || ((v67 = *(_QWORD *)(v34 + 32), v68 = *(_DWORD *)(v34 + 44), v67) ? (v69 = v68 == 0) : (v69 = 1),
                      v69 || (v70 = *(double *)(v34 + 24), v70 <= 0.0)))
                {
                  if (v47 <= v20)
                  {
LABEL_116:
                    v49 = a4;
                  }
                  else
                  {
                    v103 = &v10[v20];
                    do
                    {
                      *v103++ = a4;
                      ++v20;
                    }
                    while ((_DWORD)v47 != v20);
LABEL_114:
                    v49 = a4;
LABEL_115:
                    v20 = v47;
                  }
LABEL_117:
                  v23 = v48;
                }
                else
                {
                  v49 = *(float *)(v34 + 56);
                  v71 = v14 * *(double *)(v34 + 48);
                  v72 = (v46 + v70) * v13;
                  v73 = vcvtpd_u64_f64(v72);
                  if (ceil(v72) >= v168)
                    v73 = a3;
                  if (v73 >= (unint64_t)a2)
                    v74 = v73 - (_DWORD)a2;
                  else
                    v74 = 0;
                  if (v9 >= v74)
                    v75 = v74;
                  else
                    v75 = v9;
                  v76 = ((double)v23 - v46 * v13) * v71;
                  if (v46 >= v14 * (double)v23)
                    v76 = 0.0;
                  if (v20 >= v75)
                  {
                    v83 = *(float *)(v34 + 56);
                  }
                  else
                  {
                    v77 = 0;
                    v78 = v20 - v75;
                    do
                    {
                      v79 = v76 + (double)(int)v77 * v71;
                      v80 = v79;
                      if (v79 >= (double)v68)
                        v80 = v68 - 1;
                      if (v68 - 1 >= v80 + 1)
                        v81 = v80 + 1;
                      else
                        v81 = v68 - 1;
                      v82 = v79 - (double)v80;
                      if (v82 > v27)
                        v82 = v27;
                      v83 = *(float *)(v67 + 4 * v80)
                          + (float)(*(float *)(v67 + 4 * v81) - *(float *)(v67 + 4 * v80)) * v82;
                      v10[v20 + v77++] = v83;
                    }
                    while (v78 + (_DWORD)v77);
                    v20 += v77;
                  }
                  if (v47 <= v20)
                  {
                    v49 = v83;
                  }
                  else
                  {
                    v110 = &v10[v20];
                    do
                    {
                      *v110++ = v49;
                      ++v20;
                    }
                    while ((_DWORD)v47 != v20);
                    v20 = v47;
                  }
                  v23 += v47;
                }
                goto LABEL_192;
              case 5:
                if (*(_BYTE *)(v34 + 60))
                {
                  a4 = *v45;
                }
                else if (v25)
                {
                  if (v46 * v13 <= (double)v23 && v46 * v13 + v27 > (double)v23)
                  {
                    v105 = v25 - 1;
                    if (v32 <= (int)v25 - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195537FF0);
                    }
                    if (*(_DWORD *)(v33 + 88 * v105) == 3)
                    {
                      v106 = v33 + 88 * v105;
                      v107 = *(float *)(v106 + 4);
                      v108 = v25;
                      v109 = exp(-1.0 / (*(float *)(v106 + 16) * v16));
                      v25 = v108;
                      v27 = 1.0;
                      v26 = v160;
                      v12 = v161;
                      a2 = v162;
                      a3 = v163;
                      v13 = a7;
                      v11 = v164;
                      *(float *)&v109 = 1.0 - v109;
                      a4 = a4 + (float)((float)(v107 - a4) * *(float *)&v109);
                    }
                  }
                }
                if (v47 <= v20)
                  goto LABEL_116;
                v66 = &v10[v20];
                do
                {
                  *v66++ = a4;
                  ++v20;
                }
                while ((_DWORD)v47 != v20);
                goto LABEL_114;
              default:
                v49 = a4;
                goto LABEL_192;
            }
          }
          v35 = v25 + 1;
          if (v25 + 1 >= v32)
          {
            __break(0xC471u);
            JUMPOUT(0x195537FD8);
          }
          v36 = v33 + 88 * v35;
          v37 = *(double *)(v36 + 8);
          v38 = (double)v23;
          v39 = (double)v23 / v13;
          v40 = *(_DWORD *)v34;
          if (v37 < v39)
            break;
          v56 = *(_DWORD *)v36;
          if ((*(_DWORD *)v36 - 3) < 0xFFFFFFFE || v40 != 3)
            goto LABEL_50;
          v156 = *(_DWORD *)v36;
          v52 = *(double *)(v33 + 88 * v25 + 8);
          v53 = v33 + 88 * v25;
          if (fabs(v27 - ((double)(2 * v23) - v155 * v52)) <= v27)
          {
            v84 = *(float *)(v53 + 4);
            v54 = v25;
            a4 = v84 + (float)(a4 - v84) * exp(-(v39 - v52) / *(float *)(v53 + 16));
          }
          else
          {
            v153 = v33 + 88 * v25;
            v54 = v25;
            v55 = 1.0 - exp(-1.0 / (*(float *)(v53 + 16) * v16));
            a4 = a4 + (float)((float)(*(float *)(v153 + 4) - a4) * v55);
          }
          v27 = 1.0;
          v25 = v54;
          v11 = v164;
          if ((int)v54 >= v32)
          {
            __break(0xC471u);
            JUMPOUT(0x195537FE0);
          }
          v85 = v33 + 88 * (int)v54;
          *(_DWORD *)v85 = 0;
          *(float *)(v85 + 4) = a4;
          *(double *)(v85 + 8) = v39;
          *(_DWORD *)(v85 + 16) = 0;
          *(_QWORD *)(v85 + 24) = 0;
          v88 = *(WTF **)(v85 + 32);
          v87 = v85 + 32;
          v86 = v88;
          v13 = a7;
          a2 = v162;
          a3 = v163;
          v56 = v156;
          if (v88)
          {
            *(_QWORD *)v87 = 0;
            *(_DWORD *)(v87 + 8) = 0;
            WTF::fastFree(v86, v162);
            v56 = v156;
            v25 = v54;
            v27 = 1.0;
            a2 = v162;
            a3 = v163;
            v13 = a7;
            v11 = v164;
          }
          v89 = v33 + 88 * (int)v54;
          *(_BYTE *)(v89 + 64) = 0;
          *(_BYTE *)(v89 + 80) = 0;
          *(_QWORD *)(v87 + 8) = 0;
          *(_QWORD *)(v87 + 16) = 0;
          *(_QWORD *)v87 = 0;
          *(_QWORD *)(v87 + 21) = 0;
          v32 = *((unsigned int *)v11 + 3);
          if ((int)v54 >= v32)
          {
            __break(0xC471u);
            JUMPOUT(0x195537FE8);
          }
          v57 = *(_QWORD *)v11;
          v34 = *(_QWORD *)v11 + 88 * (int)v54;
          v37 = *(double *)(v36 + 8);
          v58 = *(_DWORD *)v36;
          v26 = v160;
          v12 = v161;
LABEL_97:
          v45 = (float *)(v34 + 4);
          v49 = *(float *)(v34 + 4);
          v46 = *(double *)(v34 + 8);
          v90 = v33 + 88 * v35;
          v92 = *(float *)(v90 + 4);
          v91 = (float *)(v90 + 4);
          v93 = v92;
          if (v58 == 5)
          {
            v94 = v33 + 88 * v35;
            if (*(_BYTE *)(v94 + 80))
            {
              if (*(_DWORD *)v34 <= 5u && ((1 << *(_DWORD *)v34) & 0x27) != 0)
              {
                v56 = *(_DWORD *)(v94 + 64);
                v96 = v33 + 88 * v35;
                v98 = *(unsigned __int8 *)(v96 + 60);
                v97 = (_BYTE *)(v96 + 60);
                if (!v98)
                {
                  if (v56 == 2)
                  {
                    v116 = v33 + 88 * v35;
                    v117 = v25;
                    v157 = v57;
                    v154 = v97;
                    v118 = pow((float)(*(float *)(v116 + 68) / v49), (v37 - v46) / (*(double *)(v116 + 72) - v46));
                    v97 = v154;
                    v57 = v157;
                    v56 = 2;
                    v25 = v117;
                    v27 = 1.0;
                    v26 = v160;
                    v12 = v161;
                    a2 = v162;
                    a3 = v163;
                    v13 = a7;
                    v11 = v164;
                    v99 = v118 * v49;
LABEL_152:
                    v93 = v99;
                  }
                  else if (v56 == 1)
                  {
                    v99 = (v37 - v46)
                        * (float)(*(float *)(v33 + 88 * v35 + 68) - v49)
                        / (*(double *)(v33 + 88 * v35 + 72) - v46)
                        + v49;
                    goto LABEL_152;
                  }
                  *v91 = v93;
                  *v97 = 1;
                }
              }
            }
          }
          v119 = vcvtpd_u64_f64(v37 * v13);
          if (v37 * v13 >= v168)
            v48 = a3;
          else
            v48 = v119;
          if ((int)v48 - (int)a2 >= v9)
            v47 = v9;
          else
            v47 = (v48 - (_DWORD)a2);
          if (v56 != 2)
          {
            if (v56 != 1)
            {
              v33 = v57;
              goto LABEL_38;
            }
            v120 = 0.0;
            if (v37 - v46 > 1.17549435e-38)
              v120 = v27 / (v37 - v46);
            v121 = v93 - v49;
            v122 = (v47 - v20) & 0xFFFFFFFC;
            v123 = v122 + v20;
            if (v122 + v20 > v20)
            {
              v124 = v25;
              v10[v20] = 0.0;
              v10[v20 + 1] = 1.0;
              v10[v20 + 2] = 2.0;
              v10[v20 + 3] = 3.0;
              __A[0] = v152;
              vDSP_vsmul(&v10[v20], 1, __A, &v10[v20], 1, 4uLL);
              v125 = -(v46 - v38 * v14);
              __A[0] = v125;
              vDSP_vsadd(&v10[v20], 1, __A, &v10[v20], 1, 4uLL);
              __A[0] = v121 * v120;
              vDSP_vsmul(&v10[v20], 1, __A, &v10[v20], 1, 4uLL);
              __A[0] = v49;
              vDSP_vsadd(&v10[v20], 1, __A, &v10[v20], 1, 4uLL);
              v23 += v122;
              for (v20 += 4; v20 < v123; v20 += 4)
              {
                v126 = v14 * 4.0 * v120 * v121;
                __A[0] = v126;
                vDSP_vsadd(&v10[v20 - 4], 1, __A, &v10[v20], 1, 4uLL);
              }
              a3 = v163;
              v11 = v164;
              v13 = a7;
              v12 = v161;
              a2 = v162;
              v26 = v160;
              v27 = 1.0;
              v25 = v124;
            }
            if (v20)
              a4 = v10[v20 - 1];
            if (v20 >= v47)
            {
              v49 = a4;
            }
            else
            {
              v127 = v20 - (unint64_t)v47;
              v128 = &v10[v20];
              do
              {
                v129 = ((double)v23 * v14 - v46) * v120;
                v130 = v49 + (float)(v121 * v129);
                *v128++ = v130;
                ++v23;
                v131 = __CFADD__(v127++, 1);
              }
              while (!v131);
              v49 = v130;
              v20 = v47;
            }
            v16 = a8;
            goto LABEL_192;
          }
          if (v49 == 0.0 || (float)(v49 * v93) < 0.0)
          {
            v138 = v20 - v47;
            if (v20 < v47)
            {
              v139 = &v10[v20];
              do
              {
                *v139++ = v49;
                v131 = __CFADD__(v138++, 1);
              }
              while (!v131);
LABEL_189:
              v20 = v47;
            }
            goto LABEL_192;
          }
          v132 = v25;
          v133 = v37 - v46;
          v134 = v133 * v13;
          v135 = powf(v93 / v49, 1.0 / v134);
          v49 = pow(v93 / v49, -(v46 - v38 * v14) / v133) * v49;
          if (v20 < v47)
          {
            v136 = v20 - (unint64_t)v47;
            v137 = &v10[v20];
            v11 = v164;
            v26 = v160;
            v12 = v161;
            v27 = 1.0;
            v25 = v132;
            do
            {
              *v137++ = v49;
              v49 = v135 * v49;
              v131 = __CFADD__(v136++, 1);
            }
            while (!v131);
            v23 = v23 - v20 + v47;
            v20 = v47;
            v13 = a7;
            a2 = v162;
            a3 = v163;
LABEL_191:
            v49 = v49 / v135;
            goto LABEL_192;
          }
          a3 = v163;
          v11 = v164;
          v13 = a7;
          v12 = v161;
          a2 = v162;
          v26 = v160;
          v27 = 1.0;
          v25 = v132;
          if (v20)
            goto LABEL_191;
LABEL_192:
          ++v25;
          a4 = v49;
LABEL_193:
          if (v25 >= v12 || v20 >= v9)
          {
            if (v159)
            {
              v140 = *((unsigned int *)v11 + 3);
              if ((_DWORD)v140)
              {
                if (v140 - 1 >= v159)
                  v141 = v159;
                else
                  v141 = v140 - 1;
                v142 = *(_QWORD *)v11;
                v143 = (WTF *)(*(_QWORD *)v11 + 88 * v141);
                v144 = *(_QWORD *)v11;
                if (v141)
                {
                  v145 = 88 * v141;
                  v146 = v142 + 32;
                  do
                  {
                    v147 = *(WTF **)v146;
                    if (*(_QWORD *)v146)
                    {
                      *(_QWORD *)v146 = 0;
                      *(_DWORD *)(v146 + 8) = 0;
                      WTF::fastFree(v147, a2);
                      v11 = v164;
                    }
                    v146 += 88;
                    v145 -= 88;
                  }
                  while (v145);
                  v144 = *(_QWORD *)v11;
                  LODWORD(v140) = *((_DWORD *)v11 + 3);
                }
                v148 = v142;
                v149 = v11;
                WTF::VectorMover<false,WebCore::AudioParamTimeline::ParamEvent>::moveOverlapping(v143, (WTF *)(v144 + 88 * v140), v148);
                *((_DWORD *)v149 + 3) -= v141;
              }
            }
            goto LABEL_207;
          }
        }
        v41 = *(double *)(v33 + 88 * v25 + 8) * v13;
        if (v40)
          v42 = 1;
        else
          v42 = v41 > v38;
        if (v42 || v41 + v27 <= v38)
        {
          ++v159;
          ++v25;
          goto LABEL_193;
        }
        v56 = *(_DWORD *)v36;
LABEL_50:
        v57 = *(_QWORD *)v11;
        v58 = v56;
        goto LABEL_97;
      }
LABEL_207:
      v150 = v20 - v9;
      if (v20 < v9)
      {
        v151 = &v10[v20];
        do
        {
          *v151++ = a4;
          v131 = __CFADD__(v150++, 1);
        }
        while (!v131);
      }
    }
    else
    {
      do
      {
        *v10++ = a4;
        --v9;
      }
      while (v9);
    }
  }
  return a4;
}

double WebCore::AudioProcessingEvent::create@<D0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  if (!*((_QWORD *)a2 + 2) || !*((_QWORD *)a2 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x195538124);
  }
  v6 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  *(_QWORD *)(v6 + 8) = 0;
  if (v8)
    v11 = 1179650;
  else
    v11 = 1179648;
  v12 = v11 | (4 * v9) | (8 * v10) | (*a1 != 0) | *(_DWORD *)(v6 + 20) & 0xFFC00000;
  *(_DWORD *)(v6 + 16) = 1;
  *(_DWORD *)(v6 + 20) = v12;
  v13 = (_DWORD *)*a1;
  if (*a1)
  {
    *v13 += 2;
    v12 = *(_DWORD *)(v6 + 20);
  }
  *(_QWORD *)(v6 + 24) = v13;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  *(_DWORD *)(v6 + 20) = v12 | 0x4000;
  *(_QWORD *)v6 = off_1E3368D28;
  v14 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = v14;
  v15 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(v6 + 80) = v15;
  result = *((double *)a2 + 1);
  *(double *)(v6 + 88) = result;
  *a3 = v6;
  return result;
}

void WebCore::AudioProcessingEvent::~AudioProcessingEvent(WebCore::AudioProcessingEvent *this, void *a2)
{
  WTF **v3;
  WTF **v4;

  v3 = (WTF **)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  v4 = (WTF **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v4, a2);
  WebCore::Event::~Event(this, a2);
}

{
  WTF **v3;
  WTF **v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF **)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  v4 = (WTF **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v4, a2);
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::AudioNodeInput::~AudioNodeInput(WebCore::AudioNodeInput *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v7, a2);
    }
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  WebCore::AudioSummingJunction::~AudioSummingJunction(this, a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  unsigned int *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v9 = v3;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v9, a2);
    }
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  WebCore::AudioSummingJunction::~AudioSummingJunction(this, a2);
  WTF::fastFree(v7, v8);
}

BOOL WebCore::AudioNodeInput::canUpdateState(WebCore::AudioNodeInput *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 8) + 112) == 0;
}

uint64_t WebCore::AudioParam::canUpdateState(WebCore::AudioParam *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::AudioParam::~AudioParam(WebCore::AudioParam *this, void *a2)
{
  WebCore::AudioParam::~AudioParam((WebCore::AudioParam *)((char *)this - 72), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioParam::~AudioParam((WebCore::AudioParam *)((char *)this - 72), a2);
  WTF::fastFree(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::AudioParam::logger(WebCore::AudioParam *this)
{
  return *((_QWORD *)this + 9);
}

const char *`non-virtual thunk to'WebCore::AudioParam::logClassName(WebCore::AudioParam *this)
{
  return "AudioParam";
}

uint64_t `non-virtual thunk to'WebCore::AudioParam::logIdentifier(WebCore::AudioParam *this)
{
  return *((_QWORD *)this + 10);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN7WebCore10AudioParamENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN7WebCore10AudioParamENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[16];
  int v17;
  char v18;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(unsigned int *)(a2 + 16);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = v2 == -1;
    if (v2 == -1)
      v6 = -1;
    else
      v6 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      v5 = v6 == v3;
    if (v5)
    {
      return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E3368C28[v6])(v16, result, a2);
    }
    else
    {
      v8 = (v2 - 1) < 0xFFFFFFFE || (v3 + 1) < 2;
      if (v8)
        v9 = result;
      else
        v9 = a2;
      if (v8)
        v10 = a2;
      else
        v10 = result;
      v16[0] = 0;
      v17 = -1;
      v11 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E3368C18[v11])(&v18, v16, v10);
        v17 = v11;
        v12 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v18, v10);
      }
      *(_DWORD *)(v10 + 16) = -1;
      v13 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3368C38[v13])(&v18, v10, v9);
        *(_DWORD *)(v10 + 16) = v13;
        v14 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v14])(&v18, v9);
      }
      *(_DWORD *)(v9 + 16) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E3368C38[v17])(&v18, v9, v16);
        *(_DWORD *)(v9 + 16) = v15;
        if (v17 != -1)
          return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17])(&v18, v16);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJPN7WebCore10AudioParamENS7_9ExceptionEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJPN7WebCore10AudioParamENS7_9ExceptionEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v4 = *(_BYTE *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)a3 = v4;
  result = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN7WebCore10AudioParamENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN7WebCore10AudioParamENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16BaseAudioContextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_7WeakPtrISB_NSA_30WeakPtrImplWithEventTargetDataENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 6);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16BaseAudioContextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_7WeakPtrISB_NSA_30WeakPtrImplWithEventTargetDataENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)result));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)result);
      v5 = *(unsigned int *)(result + 28);
      if ((_DWORD)v5)
      {
        v8 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v5));
        result = v8;
      }
      v6 = *(WTF **)(result + 16);
      if (v6)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v7 = result;
        WTF::fastFree(v6, a2);
        result = v7;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::AudioNodeOutput::~AudioNodeOutput(WebCore::AudioNodeOutput *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::AudioParam **v5;
  WebCore::AudioParam *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::AudioNode **v11;
  WebCore::AudioNode *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;

  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::AudioParam **)*((_QWORD *)this + 8);
      do
      {
        v6 = *v5;
        if (*v5 != (WebCore::AudioParam *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*((_DWORD *)v6 + 16) == 1)
            {
              WebCore::AudioParam::~AudioParam(v6, a2);
              WTF::fastFree(v7, v8);
            }
            else
            {
              --*((_DWORD *)v6 + 16);
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WebCore::AudioNode **)(v9 + 8);
      do
      {
        if (*(v11 - 1) != (WebCore::AudioNode *)-1)
        {
          v12 = *v11;
          *v11 = 0;
          if (v12)
            WebCore::AudioNode::decrementConnectionCount(v12);
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v13 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v19 = v13;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v19, a2);
    }
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      v19 = v16;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v19, a2);
    }
  }
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(WTF::StringImpl ***a1, void *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::AudioParam *v7;
  WTF *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*((_DWORD *)v7 + 16) == 1)
            {
              WebCore::AudioParam::~AudioParam(v7, a2);
              WTF::fastFree(v8, v9);
              v6 = *v5;
            }
            else
            {
              --*((_DWORD *)v7 + 16);
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::AudioNodeInput>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::AudioSummingJunction *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  unsigned int *v15;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *(WebCore::AudioSummingJunction **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)*((_QWORD *)v6 + 10);
        *((_QWORD *)v6 + 10) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            v15 = v7;
            WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v15, a2);
          }
        }
        v10 = *((_QWORD *)v6 + 9);
        if (v10)
          WTF::fastFree((WTF *)(v10 - 16), a2);
        WebCore::AudioSummingJunction::~AudioSummingJunction(v6, a2);
        WTF::fastFree(v11, v12);
      }
      v4 = (WTF *)((char *)v4 + 8);
    }
    while (v4 != (WTF *)v5);
  }
  v13 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2);
  }
  return a1;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::AudioNode::NodeType>(WTF::Logger::LogSiteIdentifier *a1, int *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::Logger *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint8_t buf[4];
  _BYTE v42[12];
  int v43;
  WTF::StringImpl *v44[3];

  v44[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  result = (uint64_t)WebCore::convertEnumerationToString(&v38, *a2);
  v5 = (WTF::StringImpl *)v38;
  if (!v39)
  {
    v6 = 0;
    if (v38)
      goto LABEL_3;
LABEL_72:
    v7 = 0;
    goto LABEL_4;
  }
  v6 = *((_DWORD *)v39 + 1);
  if (!v38)
    goto LABEL_72;
LABEL_3:
  v7 = *(_DWORD *)(v38 + 4);
LABEL_4:
  if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
  {
    v40 = 0;
    goto LABEL_76;
  }
  if (v39)
  {
    v8 = *((_DWORD *)v39 + 4);
    v9 = (v8 >> 2) & 1;
    if (v38 && (v8 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v38)
    {
LABEL_9:
      v9 = (*(unsigned __int8 *)(v38 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v9 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v39, v38, &v40);
  if (!v40)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v38 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v10);
    else
      *(_DWORD *)v5 -= 2;
  }
  v11 = v39;
  v39 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7C4A0;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v36 ? (char *)v36 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v42 = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = (uint64_t)v36;
    v36 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v24 = *a2;
              v43 = 0;
              WebCore::convertEnumerationToString(v44, v24);
              v36 = 0;
              v37 = 0;
              v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v37) = 2;
              v36 = v25;
              v26 = HIDWORD(v37);
              *((_DWORD *)v25 + 4 * HIDWORD(v37)) = *(_DWORD *)buf;
              v27 = *(_QWORD *)&v42[4];
              if (*(_QWORD *)&v42[4])
                **(_DWORD **)&v42[4] += 2;
              *((_QWORD *)v25 + 2 * v26 + 1) = v27;
              *((_DWORD *)v25 + 4 * (v26 + 1)) = v43;
              v28 = v44[0];
              if (v44[0])
                *(_DWORD *)v44[0] += 2;
              *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
              HIDWORD(v37) = v26 + 2;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogMedia, 3, &v36);
              v29 = v36;
              if (HIDWORD(v37))
              {
                v30 = 16 * HIDWORD(v37);
                v31 = (WTF::StringImpl **)((char *)v36 + 8);
                do
                {
                  v32 = *v31;
                  *v31 = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  v31 += 2;
                  v30 -= 16;
                }
                while (v30);
                v29 = v36;
              }
              if (v29)
              {
                v36 = 0;
                LODWORD(v37) = 0;
                WTF::fastFree(v29, v14);
              }
              v33 = v44[0];
              v44[0] = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = *(WTF::StringImpl **)&v42[4];
              *(_QWORD *)&v42[4] = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v34 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v35 = __ldxr(v16);
          if (v35 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AudioNode::context(void)::$_0,WebCore::AudioNode::context(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::BaseAudioContext,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::WeakPtr<WTF::Ref,WebCore::WeakPtrImplWithEventTargetData,WebCore::BaseAudioContext<WTF::WeakPtr>>> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AudioNode::context(void)::$_0,WebCore::AudioNode::context(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::BaseAudioContext,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::WeakPtr<WTF::Ref,WebCore::WeakPtrImplWithEventTargetData,WebCore::BaseAudioContext<WTF::WeakPtr>>> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!*(_QWORD *)a2)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v2)
    return v2 - 32;
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AudioNode::context(void)::$_0,WebCore::AudioNode::context(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::BaseAudioContext,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::WeakPtr<WTF::Ref,WebCore::WeakPtrImplWithEventTargetData,WebCore::BaseAudioContext<WTF::WeakPtr>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AudioNode::context(void)::$_0,WebCore::AudioNode::context(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::BaseAudioContext,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::WeakPtr<WTF::Ref,WebCore::WeakPtrImplWithEventTargetData,WebCore::BaseAudioContext<WTF::WeakPtr>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!*(_QWORD *)a2)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v2)
    return v2 - 32;
  else
    return 0;
}

uint64_t WTF::HashTable<WebCore::AudioNodeInput *,WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashMap<WebCore::AudioNodeInput *,WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,WTF::DefaultHash<WebCore::AudioNodeInput *>,WTF::HashTraits<WebCore::AudioNodeInput *>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioNodeInput *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::AudioNode *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  WebCore::AudioNode *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (WebCore::AudioNode *)v23[1];
          v23[1] = 0;
          if (v24)
            WebCore::AudioNode::decrementConnectionCount(v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(WebCore::AudioNode **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          WebCore::AudioNode::decrementConnectionCount(v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(WebCore::AudioNode **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  WebCore::AudioParam **v10;
  WebCore::AudioParam *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::AudioParam **v21;
  WebCore::AudioParam *v22;
  WebCore::AudioParam *v23;
  WTF *v24;
  void *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WebCore::AudioParam **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (WebCore::AudioParam *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (WebCore::AudioParam **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*((_DWORD *)v23 + 16) == 1)
            {
              WebCore::AudioParam::~AudioParam(v23, v8);
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*((_DWORD *)v23 + 16);
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  BOOL v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  BOOL v56;
  int v57;
  unsigned int v58;

  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 + 4);
  else
    v19 = 0;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 + 4);
  else
    v21 = 0;
  v22 = *a3;
  if (*a3)
    v23 = *(_DWORD *)(v22 + 4);
  else
    v23 = 0;
  v24 = *a4;
  if (*a4)
    v25 = *(_DWORD *)(v24 + 4);
  else
    v25 = 0;
  v26 = *a5;
  if (*a5)
    result = *(unsigned int *)(v26 + 4);
  else
    result = 0;
  v28 = *a6;
  if (*a6)
    v29 = *(_DWORD *)(v28 + 4);
  else
    v29 = 0;
  v30 = *a7;
  if (v30)
    v31 = *(_DWORD *)(v30 + 4);
  else
    v31 = 0;
  v32 = *a8;
  if (v32)
    v33 = *(_DWORD *)(v32 + 4);
  else
    v33 = 0;
  v34 = *a10;
  if (*a10)
    v35 = *(_DWORD *)(v34 + 4);
  else
    v35 = 0;
  v36 = *a11;
  if (*a11)
    v37 = *(_DWORD *)(v36 + 4);
  else
    v37 = 0;
  v38 = *a12;
  if (*a12)
    v39 = *(_DWORD *)(v38 + 4);
  else
    v39 = 0;
  if (((v39 | v37) & 0x80000000) == 0)
  {
    v40 = __OFADD__(v37, v39);
    v41 = v37 + v39;
    v42 = v40;
    if ((v35 & 0x80000000) == 0 && !v42)
    {
      v40 = __OFADD__(v35, v41);
      v43 = v35 + v41;
      v44 = v40;
      if ((v33 & 0x80000000) == 0 && !v44)
      {
        v40 = __OFADD__(v33, v43);
        v45 = v33 + v43;
        v46 = v40;
        if ((v31 & 0x80000000) == 0 && !v46)
        {
          v40 = __OFADD__(v31, v45);
          v47 = v31 + v45;
          v48 = v40;
          if ((v29 & 0x80000000) == 0 && !v48)
          {
            v40 = __OFADD__(v29, v47);
            v49 = v29 + v47;
            v50 = v40;
            if ((result & 0x80000000) == 0 && !v50)
            {
              v40 = __OFADD__((_DWORD)result, v49);
              result = (result + v49);
              v51 = v40;
              if ((v25 & 0x80000000) == 0 && !v51)
              {
                v40 = __OFADD__(v25, (_DWORD)result);
                v52 = v25 + result;
                result = v40;
                if ((v23 & 0x80000000) == 0 && (result & 1) == 0)
                {
                  v40 = __OFADD__(v23, v52);
                  v53 = v23 + v52;
                  v54 = v40;
                  if ((v21 & 0x80000000) == 0 && !v54)
                  {
                    v40 = __OFADD__(v21, v53);
                    v55 = v21 + v53;
                    v56 = v40;
                    if ((v19 & 0x80000000) == 0 && !v56)
                    {
                      result = (v19 + v55);
                      if (!__OFADD__(v19, v55))
                      {
                        if ((!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0)
                          && (!v20 || (*(_BYTE *)(v20 + 16) & 4) != 0)
                          && (!v22 || (*(_BYTE *)(v22 + 16) & 4) != 0)
                          && (!v24 || (*(_BYTE *)(v24 + 16) & 4) != 0)
                          && (!v26 || (*(_BYTE *)(v26 + 16) & 4) != 0)
                          && (!v28 || (*(_BYTE *)(v28 + 16) & 4) != 0)
                          && (!v30 || (*(_BYTE *)(v30 + 16) & 4) != 0)
                          && (!v32 || (*(_BYTE *)(v32 + 16) & 4) != 0)
                          && (!v34 || (*(_BYTE *)(v34 + 16) & 4) != 0))
                        {
                          if (v36)
                          {
                            v58 = *(_DWORD *)(v36 + 16);
                            v57 = (v58 >> 2) & 1;
                            if (!v38 || (v58 & 4) == 0)
                              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v57, v18, v20, v22, v24, v26, v28, a9, v30, v32, v34, *a11, v38);
                          }
                          else if (!v38)
                          {
                            v57 = 1;
                            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v57, v18, v20, v22, v24, v26, v28, a9, v30, v32, v34, *a11, v38);
                          }
                          v57 = (*(unsigned __int8 *)(v38 + 16) >> 2) & 1;
                        }
                        else
                        {
                          v57 = 0;
                        }
                        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v57, v18, v20, v22, v24, v26, v28, a9, v30, v32, v34, *a11, v38);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *a9 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v19;
  _QWORD *i;
  _DWORD *v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  size_t v28;
  uint64_t v29;
  _DWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unsigned __int128 *v40;
  unsigned __int128 *v41;
  unsigned __int128 v42;
  unsigned __int128 *v43;
  unsigned __int128 *v44;
  unsigned __int128 *v45;
  unsigned __int128 v46;
  char v47;
  char v48;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;

  v19 = result;
  i = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v21 = v54;
        if (v54)
        {
          v22 = v54 + 5;
          *v54 = 2;
          v21[1] = v19;
          *((_QWORD *)v21 + 1) = v21 + 5;
          v21[4] = 4;
          if (a3)
          {
            v23 = *(_BYTE **)(a3 + 8);
            v24 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v24)
              {
                if ((_DWORD)v24 == 1)
                  *v22 = *v23;
                else
                  memcpy(v21 + 5, v23, v24);
              }
            }
            else
            {
              if (v24 < 0x10)
              {
                v40 = (unsigned __int128 *)(v21 + 5);
              }
              else
              {
                v40 = (unsigned __int128 *)&v22[v24 & 0xFFFFFFF0];
                v41 = (unsigned __int128 *)(v21 + 5);
                do
                {
                  v42 = (unsigned __int128)vld2q_s8(v23);
                  v23 += 32;
                  *v41++ = v42;
                }
                while (v41 != v40);
              }
              while (v40 != (unsigned __int128 *)&v22[v24])
              {
                v47 = *v23;
                v23 += 2;
                *(_BYTE *)v40 = v47;
                v40 = (unsigned __int128 *)((char *)v40 + 1);
              }
            }
            v25 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v22[v25];
          if (a4)
          {
            v27 = *(_BYTE **)(a4 + 8);
            v28 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              i = a9;
              if ((_DWORD)v28)
              {
                if ((_DWORD)v28 == 1)
                  *v26 = *v27;
                else
                  memcpy(v26, v27, v28);
              }
            }
            else
            {
              v43 = (unsigned __int128 *)&v26[v28];
              if (v28 < 0x10)
              {
                v44 = (unsigned __int128 *)v26;
              }
              else
              {
                v44 = (unsigned __int128 *)&v26[v28 & 0xFFFFFFF0];
                v45 = (unsigned __int128 *)v26;
                do
                {
                  v46 = (unsigned __int128)vld2q_s8(v27);
                  v27 += 32;
                  *v45++ = v46;
                }
                while (v45 != v44);
              }
              for (i = a9; v44 != v43; v44 = (unsigned __int128 *)((char *)v44 + 1))
              {
                v48 = *v27;
                v27 += 2;
                *(_BYTE *)v44 = v48;
              }
            }
            v29 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v29 = 0;
            i = a9;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v26[v29], a5, a6, a7, a8, a10, a11, a12, a13, a14);
        }
        goto LABEL_28;
      }
LABEL_34:
      v21 = 0;
      goto LABEL_28;
    }
LABEL_33:
    v21 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_28;
  }
  if (!(_DWORD)result)
    goto LABEL_33;
  if (result > 0x7FFFFFEF)
    goto LABEL_34;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v21 = v54;
  if (v54)
  {
    v34 = v54 + 5;
    *v54 = 2;
    v21[1] = v19;
    *((_QWORD *)v21 + 1) = v21 + 5;
    v21[4] = 0;
    v52 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v52, (char *)v21 + 20);
    v35 = v52;
    if (v52)
      v35 = *(unsigned int *)(v52 + 4);
    v36 = (char *)v34 + 2 * v35;
    v53 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v53, v36);
    v37 = v53;
    if (v53)
      v37 = *(unsigned int *)(v53 + 4);
    i = a9;
    v38 = &v36[2 * v37];
    v54 = (_DWORD *)a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v54, v38);
    v39 = (unint64_t)v54;
    if (v54)
      v39 = v54[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v38[2 * v39], a6, a7, a8, a10, a11, a12, a13, a14);
  }
LABEL_28:
  *i = v21;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::AudioParam *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WebCore::AudioParam *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::AudioParam *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*((_DWORD *)v24 + 16) != 1)
            {
              --*((_DWORD *)v24 + 16);
              goto LABEL_25;
            }
            WebCore::AudioParam::~AudioParam(v24, v10);
            WTF::fastFree(v32, v33);
            v34 = *v23;
            *v23 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)v34 -= 2;
            }
          }
          else
          {
LABEL_25:
            *v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v23[1] = v27;
          v28 = *(WebCore::AudioParam **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*((_DWORD *)v28 + 16) == 1)
            {
              WebCore::AudioParam::~AudioParam(v28, v10);
              WTF::fastFree(v35, v36);
            }
            else
            {
              --*((_DWORD *)v28 + 16);
            }
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_34;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WebCore::AudioParam **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*((_DWORD *)v16 + 16) == 1)
          {
            WebCore::AudioParam::~AudioParam(v16, v10);
            WTF::fastFree(v30, v31);
            v14 = *v13;
          }
          else
          {
            --*((_DWORD *)v16 + 16);
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_34:
      if (++v11 == v7)
        goto LABEL_45;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::AudioParamTimeline::ParamEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 88 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::AudioParamTimeline::ParamEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::AudioParamTimeline::ParamEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::AudioParamTimeline::ParamEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  unsigned int *v11;
  __int128 v12;
  __int128 v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x2E8BA2F)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 88 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(88 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = 88 * v4;
        v9 = (char *)v3 + 32;
        do
        {
          v10 = *((_OWORD *)v9 - 1);
          *(_OWORD *)v7 = *((_OWORD *)v9 - 2);
          *((_OWORD *)v7 + 1) = v10;
          *((_QWORD *)v7 + 4) = 0;
          *((_QWORD *)v7 + 5) = 0;
          v11 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v7 + 4) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          v7[10] = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[11] = v11;
          v12 = *((_OWORD *)v9 + 1);
          v13 = *((_OWORD *)v9 + 2);
          *((_BYTE *)v7 + 80) = v9[48];
          *((_OWORD *)v7 + 3) = v12;
          *((_OWORD *)v7 + 4) = v13;
          result = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 88;
          v7 += 22;
          v8 -= 88;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebCore::AudioParamTimeline::ParamEvent>::moveOverlapping(WTF *result, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v4;
  WTF *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = a3;
  v4 = a2;
  v5 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      v10 = a3 + 88 * ((a2 - result) / 88) - 44;
      do
      {
        v11 = *(_OWORD *)((char *)v4 - 88);
        *(_OWORD *)(v10 - 28) = *(_OWORD *)((char *)v4 - 72);
        *(_OWORD *)(v10 - 44) = v11;
        *(_QWORD *)(v10 - 4) = 0;
        *(_QWORD *)(v10 - 12) = 0;
        v12 = *((_QWORD *)v4 - 7);
        *((_QWORD *)v4 - 7) = 0;
        *(_QWORD *)(v10 - 12) = v12;
        LODWORD(v12) = *((_DWORD *)v4 - 12);
        *((_DWORD *)v4 - 12) = 0;
        *(_DWORD *)(v10 - 4) = v12;
        LODWORD(v12) = *((_DWORD *)v4 - 11);
        *((_DWORD *)v4 - 11) = 0;
        *(_DWORD *)v10 = v12;
        v13 = *(_OWORD *)((char *)v4 - 40);
        v14 = *(_OWORD *)((char *)v4 - 24);
        *(_BYTE *)(v10 + 36) = *((_BYTE *)v4 - 8);
        *(_OWORD *)(v10 + 20) = v14;
        *(_OWORD *)(v10 + 4) = v13;
        result = (WTF *)*((_QWORD *)v4 - 7);
        if (result)
        {
          *((_QWORD *)v4 - 7) = 0;
          *((_DWORD *)v4 - 12) = 0;
          result = (WTF *)WTF::fastFree(result, a2);
        }
        v4 = (WTF *)((char *)v4 - 88);
        v10 -= 88;
      }
      while (v4 != v5);
    }
  }
  else
  {
    while (v5 != v4)
    {
      v6 = *((_OWORD *)v5 + 1);
      *(_OWORD *)v3 = *(_OWORD *)v5;
      *(_OWORD *)(v3 + 16) = v6;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 40) = 0;
      v7 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(v3 + 32) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 10);
      *((_DWORD *)v5 + 10) = 0;
      *(_DWORD *)(v3 + 40) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 11);
      *((_DWORD *)v5 + 11) = 0;
      *(_DWORD *)(v3 + 44) = v7;
      v8 = *((_OWORD *)v5 + 3);
      v9 = *((_OWORD *)v5 + 4);
      *(_BYTE *)(v3 + 80) = *((_BYTE *)v5 + 80);
      *(_OWORD *)(v3 + 48) = v8;
      *(_OWORD *)(v3 + 64) = v9;
      result = (WTF *)*((_QWORD *)v5 + 4);
      if (result)
      {
        *((_QWORD *)v5 + 4) = 0;
        *((_DWORD *)v5 + 10) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v5 = (WTF *)((char *)v5 + 88);
      v3 += 88;
    }
  }
  return result;
}

uint64_t WebCore::AudioScheduledSourceNode::AudioScheduledSourceNode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v5 = WebCore::AudioNode::AudioNode(a1, (unsigned int *)a2, a3);
  v6 = v5 + 152;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    if (*(_BYTE *)(v8 + 178))
    {
      v9 = v8 - 96;
    }
    else
    {
      v10 = v8 - 288;
      v11 = *(_QWORD *)(v8 + 416);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v10 = v12;
      }
      v9 = v10 + 192;
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a1 + 152) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 160) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 152), (WebCore::ScriptExecutionContext *)v9);
  *(_QWORD *)(a1 + 152) = &off_1E33A0540;
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
  {
    if (*(_BYTE *)(v9 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195539D34);
    }
    v15 = v6;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v9 + 128), &v15, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = off_1E3369380;
  *(_QWORD *)(a1 + 24) = &unk_1E33694B8;
  *(_QWORD *)(a1 + 152) = &unk_1E33694F8;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  return a1;
}

void WebCore::AudioScheduledSourceNode::updateSchedulingInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6)
{
  float v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t i;
  uint64_t v37;
  void **v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t j;
  uint64_t v42;
  void **v43;
  _QWORD *v44;
  WebCore::AudioScheduledSourceNode *v45;
  uint64_t v46;
  double v47;
  char v48;
  char *v49;

  *a5 = 0;
  *a4 = 0;
  *a6 = 0.0;
  if (a2 == 128)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    v12 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v12 == -1)
    {
      v45 = (WebCore::AudioScheduledSourceNode *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::AudioScheduledSourceNode::startLater(v45, v47, v46);
    }
    else
    {
      v13 = v11;
      v49 = &v48;
      v14 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v49, a1 + 40);
      v15 = atomic_load((unint64_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) + 152));
      v16 = round(*(double *)(a1 + 184) * v13 * 1024.0) * 0.0009765625;
      v17 = vcvtpd_u64_f64(v16);
      if (ceil(v16) >= 1.84467441e19)
        v18 = -1;
      else
        v18 = v17;
      if (*(_BYTE *)(a1 + 200))
      {
        v19 = round(*(double *)(a1 + 192) * v13 * 1024.0) * 0.0009765625;
        v20 = vcvtpd_u64_f64(v19);
        if (ceil(v19) >= 1.84467441e19)
          v21 = -1;
        else
          v21 = v20;
        if (v21 <= v15)
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
      }
      else
      {
        v21 = 0;
      }
      v22 = atomic_load((unsigned int *)(a1 + 176));
      if (!v22 || (v23 = atomic_load((unsigned int *)(a1 + 176)), v23 == 3) || v18 >= v15 + 128)
      {
        v35 = *(unsigned int *)(a3 + 28);
        if ((_DWORD)v35)
        {
          for (i = 0; i < v35; ++i)
          {
            v37 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * i);
            if (!*(_BYTE *)(v37 + 24))
            {
              *(_BYTE *)(v37 + 24) = 1;
              v38 = *(void ***)(v37 + 8);
              v39 = (_QWORD *)(v37 + 16);
              if (v38)
                v39 = v38 + 1;
              else
                v38 = (void **)v37;
              bzero(*v38, 4 * *v39);
              v35 = *(unsigned int *)(a3 + 28);
            }
          }
        }
      }
      else
      {
        v24 = atomic_load((unsigned int *)(a1 + 176));
        if (v24 == 1)
        {
          atomic_store(2u, (unsigned int *)(a1 + 176));
          *a6 = -((double)v18 - *(double *)(a1 + 184) * v13);
        }
        v25 = v18 - v15;
        if (v18 < v15)
          v25 = 0;
        if (v25 >= 0x80)
          v26 = 128;
        else
          v26 = v25;
        *a4 = v26;
        *a5 = 128 - v26;
        if (v25 >= 0x80)
        {
          v40 = *(unsigned int *)(a3 + 28);
          if ((_DWORD)v40)
          {
            for (j = 0; j < v40; ++j)
            {
              v42 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * j);
              if (!*(_BYTE *)(v42 + 24))
              {
                *(_BYTE *)(v42 + 24) = 1;
                v43 = *(void ***)(v42 + 8);
                v44 = (_QWORD *)(v42 + 16);
                if (v43)
                  v44 = v43 + 1;
                else
                  v43 = (void **)v42;
                bzero(*v43, 4 * *v44);
                v40 = *(unsigned int *)(a3 + 28);
              }
            }
          }
        }
        else
        {
          if (*a4 && *(_DWORD *)(a3 + 28))
          {
            v27 = 0;
            do
            {
              v28 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v27);
              *(_BYTE *)(v28 + 24) = 0;
              v29 = *(void **)v28;
              if (!*(_QWORD *)v28)
                v29 = **(void ***)(v28 + 8);
              bzero(v29, 4 * *a4);
              ++v27;
            }
            while (v27 < *(unsigned int *)(a3 + 28));
          }
          if (*(_BYTE *)(a1 + 200))
          {
            v30 = v21 - v15;
            if (v21 >= v15 && v21 < v15 + 128)
            {
              if (v30 <= 0x7F)
              {
                v31 = *a5 - (128 - v30);
                if (*a5 < 128 - v30)
                  v31 = 0;
                *a5 = v31;
                if (*(_DWORD *)(a3 + 28))
                {
                  v32 = 0;
                  do
                  {
                    v33 = *(uint64_t **)(*(_QWORD *)(a3 + 16) + 8 * v32);
                    *((_BYTE *)v33 + 24) = 0;
                    v34 = *v33;
                    if (!*v33)
                      v34 = *(_QWORD *)v33[1];
                    bzero((void *)(v34 + 4 * v30), 4 * (128 - v30));
                    ++v32;
                  }
                  while (v32 < *(unsigned int *)(a3 + 28));
                }
              }
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::AudioScheduledSourceNode::startLater@<X0>(WebCore::AudioScheduledSourceNode *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::AudioScheduledSourceNode *v12;
  _QWORD v13[4];
  double v14;
  char v15;

  v14 = a2;
  v5 = *((_QWORD *)this + 15);
  v6 = *((_QWORD *)this + 16);
  v13[0] = "AudioNode";
  v13[1] = 10;
  v13[2] = "startLater";
  v13[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v13, &v14);
  if (atomic_load((unsigned int *)this + 44))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 8;
LABEL_10:
    *(_BYTE *)a3 = v9;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < 0.0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 32;
    goto LABEL_10;
  }
  v10 = *((unsigned int *)this + 12);
  if ((_DWORD)v10 == -1)
  {
    v12 = (WebCore::AudioScheduledSourceNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioScheduledSourceNode::virtualHasPendingActivity(v12);
  }
  else
  {
    v13[0] = &v15;
    v11 = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v10])(v13, (char *)this + 40);
    result = (*(uint64_t (**)(uint64_t, WebCore::AudioScheduledSourceNode *))(*(_QWORD *)v11 + 104))(v11, this);
    *((double *)this + 23) = v14;
    atomic_store(1u, (unsigned int *)this + 44);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::AudioScheduledSourceNode::virtualHasPendingActivity(WebCore::AudioScheduledSourceNode *this)
{
  unsigned int v1;
  uint64_t v3;
  WebCore::AudioScheduledSourceNode *v4;
  char v5;
  char *v6;

  if (!*((_BYTE *)this + 208))
    return 0;
  v1 = atomic_load((unsigned int *)this + 44);
  if (v1 == 3 || *((_BYTE *)this + 112))
    return 0;
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 == -1)
  {
    v4 = (WebCore::AudioScheduledSourceNode *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v6 = &v5;
    return *(unsigned __int8 *)(((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v6, (char *)this + 40)+ 376) != 3;
  }
}

uint64_t `non-virtual thunk to'WebCore::AudioScheduledSourceNode::virtualHasPendingActivity(WebCore::AudioScheduledSourceNode *this)
{
  unsigned int v1;
  uint64_t v3;
  WebCore::AudioScheduledSourceNode *v4;
  char v5;
  char *v6;

  if (!*((_BYTE *)this + 56))
    return 0;
  v1 = atomic_load((unsigned int *)this + 6);
  if (v1 == 3 || *((_BYTE *)this - 40))
    return 0;
  v3 = *((unsigned int *)this - 26);
  if ((_DWORD)v3 == -1)
  {
    v4 = (WebCore::AudioScheduledSourceNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AudioScheduledSourceNode::eventListenersDidChange(v4);
  }
  else
  {
    v6 = &v5;
    return *(unsigned __int8 *)(((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v6, (char *)this - 112)+ 376) != 3;
  }
}

WebCore::EventNames **WebCore::AudioScheduledSourceNode::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 752);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 208) = v6;
  return this;
}

void WebCore::AudioSummingJunction::~AudioSummingJunction(WebCore::AudioSummingJunction *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3368DF0;
  if (*((_BYTE *)this + 32))
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        WebCore::BaseAudioContext::removeMarkedSummingJunction((WebCore::BaseAudioContext *)(v4 - 32), this);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v11 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v11)
      {
        v14 = v8;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
        v8 = v14;
      }
      v12 = *(WTF **)(v8 + 16);
      if (v12)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        v13 = v8;
        WTF::fastFree(v12, a2);
        v8 = v13;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
}

uint64_t *WebCore::AudioSummingJunction::addOutput(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *result;
  void *v6;
  int v7;
  WTF **v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD v24[2];
  unsigned __int8 v25;
  uint64_t v26;

  v4 = (uint64_t **)(a1 + 40);
  v26 = a2;
  result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a1 + 40), &v26, (uint64_t)v24);
  v7 = v25;
  if (!v25)
    return (uint64_t *)(v7 != 0);
  v8 = (WTF **)(a1 + 48);
  v9 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v9)
  {
    v24[0] = a2;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 56))
    {
      v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 48), v9 + 1, (unint64_t)v24);
      v9 = *(unsigned int *)(a1 + 60);
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9) = *(_QWORD *)v10;
    }
    else
    {
      *((_QWORD *)*v8 + v9) = a2;
    }
    *(_DWORD *)(a1 + 60) = v9 + 1;
LABEL_23:
    if (!*(_BYTE *)(a1 + 32) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    {
      v20 = *(_QWORD *)(a1 + 8);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if (v21)
          v20 = v21 - 32;
        else
          v20 = 0;
      }
      v26 = a1;
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v20 + 192), &v26, (uint64_t)v24);
      *(_BYTE *)(a1 + 32) = 1;
    }
    return (uint64_t *)(v7 != 0);
  }
  if (!*v4)
  {
    v13 = 0;
    LODWORD(v11) = 0;
    goto LABEL_19;
  }
  v11 = *((unsigned int *)*v4 - 3);
  if (!(_DWORD)v11)
  {
    v13 = 0;
    goto LABEL_19;
  }
  if (!(v11 >> 29))
  {
    v12 = WTF::fastMalloc((WTF *)(8 * v11));
    v13 = v12;
    v14 = *v4;
    if (*v4 && *((_DWORD *)v14 - 3))
    {
      v15 = *((unsigned int *)v14 - 1);
      if ((_DWORD)v15)
      {
        v16 = 8 * v15;
        v17 = *v4;
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          ++v17;
          v16 -= 8;
          if (!v16)
            goto LABEL_19;
        }
      }
      else
      {
        v17 = *v4;
      }
      v22 = &v14[v15];
      if (v17 != v22)
      {
        v18 = 0;
        v23 = *v17;
LABEL_34:
        *(_QWORD *)(v12 + 8 * v18++) = v23;
        while (1)
        {
          if (++v17 == v22)
            goto LABEL_20;
          v23 = *v17;
          if ((unint64_t)(*v17 + 1) > 1)
          {
            if (v17 != v22)
              goto LABEL_34;
            goto LABEL_20;
          }
        }
      }
    }
LABEL_19:
    v18 = 0;
LABEL_20:
    v19 = *v8;
    if (*v8)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v19, v6);
    }
    *(_QWORD *)(a1 + 48) = v13;
    *(_DWORD *)(a1 + 56) = v11;
    *(_DWORD *)(a1 + 60) = v18;
    goto LABEL_23;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::AudioSummingJunction::removeOutput(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t **v3;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t result;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = (uint64_t **)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    return 0;
  v6 = *(_DWORD *)(v2 - 8);
  v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(void **)(v2 + 8 * v10);
  if (v11 != a2)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(void **)(v2 + 8 * v10);
      ++v12;
      if (v11 == a2)
        goto LABEL_8;
    }
    v10 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v10 == *(_DWORD *)(v2 - 4))
    return 0;
  *(_QWORD *)(v2 + 8 * v10) = -1;
  ++*((_DWORD *)*v3 - 4);
  v14 = *v3;
  if (*v3)
    v15 = *((_DWORD *)v14 - 3) - 1;
  else
    v15 = -1;
  *((_DWORD *)v14 - 3) = v15;
  v16 = *v3;
  if (*v3)
  {
    v17 = 6 * *((_DWORD *)v16 - 3);
    v18 = *((_DWORD *)v16 - 1);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a1 + 40), v18 >> 1, 0);
  }
  v20 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v20)
  {
    if (*v3)
    {
      v24 = *((unsigned int *)*v3 - 3);
      if ((_DWORD)v24)
      {
        if (v24 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19553AA40);
        }
        v25 = WTF::fastMalloc((WTF *)(8 * v24));
        v26 = v25;
        v27 = *v3;
        if (!*v3 || !*((_DWORD *)v27 - 3))
          goto LABEL_48;
        v28 = *((unsigned int *)v27 - 1);
        if ((_DWORD)v28)
        {
          v29 = 8 * v28;
          v30 = *v3;
          while ((unint64_t)(*v30 + 1) <= 1)
          {
            ++v30;
            v29 -= 8;
            if (!v29)
              goto LABEL_48;
          }
        }
        else
        {
          v30 = *v3;
        }
        v32 = &v27[v28];
        if (v30 != v32)
        {
          v31 = 0;
          v33 = *v30;
LABEL_43:
          *(_QWORD *)(v25 + 8 * v31++) = v33;
          while (++v30 != v32)
          {
            v33 = *v30;
            if ((unint64_t)(*v30 + 1) > 1)
            {
              if (v30 != v32)
                goto LABEL_43;
              goto LABEL_49;
            }
          }
        }
        else
        {
LABEL_48:
          v31 = 0;
        }
        goto LABEL_49;
      }
    }
    else
    {
      LODWORD(v24) = 0;
    }
    v31 = 0;
    v26 = 0;
LABEL_49:
    v34 = *(WTF **)(a1 + 48);
    if (v34)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v34, a2);
    }
    *(_QWORD *)(a1 + 48) = v26;
    *(_DWORD *)(a1 + 56) = v24;
    goto LABEL_52;
  }
  v21 = *(void ***)(a1 + 48);
  if (*v21 != a2)
  {
    v22 = 0;
    while (v20 - 1 != v22)
    {
      v23 = v21[++v22];
      if (v23 == a2)
        goto LABEL_37;
    }
    goto LABEL_53;
  }
  v22 = 0;
LABEL_37:
  memmove(&v21[v22], &v21[v22 + 1], 8 * v20 - (8 * v22 + 8));
  v31 = *(_DWORD *)(a1 + 60) - 1;
LABEL_52:
  *(_DWORD *)(a1 + 60) = v31;
LABEL_53:
  if (*(_BYTE *)(a1 + 32) || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v35 = *(_QWORD *)(a1 + 8);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
      v35 = v36 - 32;
    else
      v35 = 0;
  }
  v38 = a1;
  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v35 + 192), &v38, (uint64_t)&v37);
  result = 1;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

_QWORD *WebCore::AudioWorklet::createGlobalScopes@<X0>(WebCore::AudioWorklet *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  _QWORD *result;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  _BYTE v60[496];
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = 1;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = off_1E33690D0;
  *(_QWORD *)(v4 + 16) = &unk_1E3369120;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    goto LABEL_72;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = this;
  v8 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v6;
  if (!v8)
    goto LABEL_72;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
LABEL_72:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  *(_QWORD *)(v4 + 24) = v6;
  v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (*(_BYTE *)(v12 + 178))
  {
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x19553AEECLL);
  }
  *(_DWORD *)(v12 - 264) += 2;
  *(_QWORD *)(v4 + 32) = v12 - 288;
  v13 = *((_QWORD *)this + 1);
  if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
  {
    if (*(_BYTE *)(v14 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19553AF2CLL);
    }
    v15 = v14 - 288;
    *(_DWORD *)(v14 - 264) += 2;
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_QWORD *)(v15 + 528);
  if (!v16
    || (v17 = *(_QWORD *)(v16 + 8)) == 0
    || (v18 = *(_QWORD *)(v17 + 24)) == 0
    || (v19 = *(_DWORD **)(v18 + 8)) == 0)
  {
    __break(0xC471u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v20 = *(_DWORD *)(*(_QWORD *)(v15 + 680) + 424);
  v21 = (*v19)++;
  if (v21)
  {
    *v19 = v21;
  }
  else
  {
    WebCore::Page::~Page((uint64_t)v19);
    WTF::fastFree(v48, v49);
  }
  v22 = *(WTF::StringImpl **)(v15 + 736);
  if (v22)
    *(_DWORD *)v22 += 2;
  v53 = v22;
  v54 = *(_OWORD *)(v15 + 744);
  v55 = *(_OWORD *)(v15 + 760);
  v56 = v20;
  v23 = *((_QWORD *)this + 10);
  v24 = 0;
  if (v23)
  {
    v25 = *(_QWORD *)(v23 + 8);
    if (v25)
      v24 = *(_DWORD *)((*(uint64_t (**)(uint64_t, float))(*(_QWORD *)(v25 - 32) + 88))(v25 - 32, 0.0) + 160);
  }
  v57 = v24;
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  if (v26)
    *(_DWORD *)v26 += 2;
  v58 = v26;
  v27 = *(_QWORD *)(v15 + 528);
  if (!v27)
    goto LABEL_65;
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
    goto LABEL_65;
  v29 = *(_QWORD *)(v28 + 24);
  if (!v29)
    goto LABEL_65;
  v30 = *(_QWORD *)(v29 + 8);
  if (!v30)
    goto LABEL_65;
  v31 = (*(_DWORD *)v30)++;
  v32 = *(_QWORD *)(v30 + 1008);
  if (v31)
  {
    *(_DWORD *)v30 = v31;
  }
  else
  {
    WebCore::Page::~Page(v30);
    WTF::fastFree(v50, v51);
  }
  v59 = v32;
  WebCore::Settings::Values::Values((WebCore::Settings::Values *)v60, (const WebCore::Settings::Values *)(*(_QWORD *)(v15 + 680) + 232));
  LOBYTE(v61) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 192) + 8))(v15 + 192);
  v33 = *((_QWORD *)this + 10);
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 8);
    if (v34)
      LOBYTE(v33) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v34 - 32) + 72))(v34 - 32) ^ 1;
    else
      LOBYTE(v33) = 0;
  }
  BYTE1(v61) = v33;
  HIWORD(v61) = WebCore::Document::advancedPrivacyProtections((WebCore::Document *)v15);
  v62 = WebCore::Document::noiseInjectionHashSalt((WebCore::Document *)v15);
  v63 = v35;
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v35);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  v36 = WTF::fastMalloc((WTF *)0x2C8);
  WTF::String::isolatedCopy();
  WebCore::WorkerOrWorkletThread::WorkerOrWorkletThread(v36, (_DWORD **)&v52, 1);
  v38 = v52;
  v52 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v37);
    else
      *(_DWORD *)v38 -= 2;
  }
  *(_QWORD *)v36 = off_1E3369170;
  *(_QWORD *)(v36 + 120) = v4;
  WTF::URL::isolatedCopy();
  *(_DWORD *)(v36 + 168) = v56;
  *(_DWORD *)(v36 + 172) = v57;
  WTF::String::isolatedCopy();
  *(_QWORD *)(v36 + 184) = v59;
  WebCore::Settings::Values::isolatedCopy((WebCore::Settings::Values *)v60, v36 + 192);
  *(_DWORD *)(v36 + 688) = v61;
  *(_QWORD *)(v36 + 696) = v62;
  *(_BYTE *)(v36 + 704) = (_BYTE)v63;
  *(_QWORD *)(v4 + 40) = v36;
  WebCore::Settings::Values::~Values((WebCore::Settings::Values *)v60, v39);
  v41 = v58;
  v58 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v53;
  v53 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = *(_QWORD *)(v4 + 40);
  v53 = 0;
  WebCore::WorkerOrWorkletThread::start(v43, (uint64_t *)&v53);
  if (v53)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v53 + 8))(v53);
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  do
    v45 = __ldaxr(v5);
  while (__stlxr(v45 + 1, v5));
  *result = v4;
  ++*(_DWORD *)(a2 + 12);
  do
  {
    v46 = __ldaxr(v5);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v5));
  if (!v47)
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebCore::AudioWorkletMessagingProxy::postTaskForModeToWorkletGlobalScope(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 40)
                                                                                                 + 48));
  return 1;
}

void WebCore::AudioWorkletGlobalScope::~AudioWorkletGlobalScope(WebCore::AudioWorkletGlobalScope *this, void *a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  WTF::StringImpl *v19;

  if (*((_BYTE *)this + 1128))
    JSC::VM::DrainMicrotaskDelayScope::~DrainMicrotaskDelayScope((WebCore::AudioWorkletGlobalScope *)((char *)this + 1120));
  v3 = (uint64_t *)*((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v3)
  {
    WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v3 + 1, a2);
    v5 = (WTF::StringImpl *)*v3;
    *v3 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    WTF::fastFree((WTF *)v3, v4);
  }
  v6 = *((_QWORD *)this + 136);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)(v6 + 8);
      do
      {
        if (*(v8 - 1) == -1)
          goto LABEL_25;
        v9 = *v8;
        *v8 = 0;
        if (!v9)
          goto LABEL_25;
        if (__ldaxr((unsigned __int8 *)v9))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v9))
        {
          goto LABEL_17;
        }
        MEMORY[0x19AEA534C](v9);
LABEL_17:
        v11 = *(_QWORD *)(v9 + 16) - 1;
        *(_QWORD *)(v9 + 16) = v11;
        if (v11)
        {
          v14 = __ldxr((unsigned __int8 *)v9);
          if (v14 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v9))
              goto LABEL_25;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v9);
          goto LABEL_25;
        }
        v12 = *(_QWORD *)(v9 + 8);
        v13 = __ldxr((unsigned __int8 *)v9);
        if (v13 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v9))
          {
            if (!v12)
              goto LABEL_24;
            goto LABEL_25;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (!v12)
LABEL_24:
          WTF::fastFree((WTF *)v9, a2);
LABEL_25:
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v15 = (WTF *)*((_QWORD *)this + 133);
  if (v15)
  {
    v16 = *((unsigned int *)this + 268);
    if ((_DWORD)v16)
    {
      v17 = (_DWORD **)((char *)v15 + 8);
      do
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          if (v18[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
          else
            --v18[4];
        }
        v19 = (WTF::StringImpl *)*(v17 - 1);
        *(v17 - 1) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v19 -= 2;
        }
        v17 += 2;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v15, a2);
  }
  WebCore::WorkletGlobalScope::~WorkletGlobalScope(this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioWorkletGlobalScope::~AudioWorkletGlobalScope(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::AudioWorkletGlobalScope::~AudioWorkletGlobalScope(WebCore::AudioWorkletGlobalScope *this, void *a2)
{
  WebCore::AudioWorkletGlobalScope::~AudioWorkletGlobalScope((WebCore::AudioWorkletGlobalScope *)((char *)this - 96), a2);
}

{
  WebCore::AudioWorkletGlobalScope::~AudioWorkletGlobalScope((WebCore::AudioWorkletGlobalScope *)((char *)this - 320), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioWorkletGlobalScope::~AudioWorkletGlobalScope((WebCore::AudioWorkletGlobalScope *)((char *)this - 96), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioWorkletGlobalScope::~AudioWorkletGlobalScope((WebCore::AudioWorkletGlobalScope *)((char *)this - 320), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::AudioWorkletGlobalScope::registerProcessor@<X0>(uint64_t a1@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t result;
  char v8;
  const WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF **v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  int v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  JSC::VM *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSValue v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  WTF *v36;
  uint64_t v37;
  int i;
  unsigned int v39;
  JSC::JSCell *IndexQuickly;
  int v41;
  int v42;
  JSC::JSCell *v44;
  uint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  float v49;
  const WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  int v57;
  _BOOL4 v58;
  int v59;
  int v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  WTF *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  WTF::StringImpl *v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl **v82;
  WTF::StringImpl *v83;
  unsigned int v84;
  _QWORD *v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  WTF::StringImpl *v89;
  _DWORD *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _DWORD *v96;
  WTF::StringImpl *v97;
  _DWORD *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  WTF::StringImpl *v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  char v120;
  const WTF::StringImpl *v121;
  _BYTE *v122;
  const WTF::StringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  const WTF::StringImpl *v131;
  uint64_t v132;
  _DWORD *v133;
  int v134;
  int j;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl **v138;
  WTF::StringImpl *v139;
  unsigned int v140;
  int v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF *v147;
  WTF::StringImpl *v148;
  _QWORD *v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  __int128 v154;
  _QWORD *v155;
  WTF *v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  _QWORD *v161;
  __int128 v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  WTF::StringImpl **v165;
  WTF *v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  unsigned int v174;
  WTF *v175;
  _BYTE *v176;
  unsigned int v177;
  const WTF::StringImpl *v178;
  WTF *v179;
  uint64_t v180;
  const WTF::StringImpl **v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF *v189;
  unint64_t v190;
  WTF::StringImpl **v191;
  _BYTE v192[32];
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (!*a2 || !*((_DWORD *)v6 + 1))
  {
LABEL_2:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 6;
LABEL_3:
    *(_BYTE *)a4 = v8;
LABEL_4:
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v10 = a2;
  v11 = *(_QWORD *)(a1 + 1064);
  v184 = a1;
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 1072);
    v13 = v12 - 1;
    v14 = *(_DWORD *)(a1 + 1080);
    v15 = *((_DWORD *)v6 + 4);
    if (v15 < 0x100)
    {
      v17 = WTF::StringImpl::hashSlowCase(v6);
      a1 = v184;
      v16 = v17;
      v11 = *(_QWORD *)(v184 + 1064);
    }
    else
    {
      v16 = v15 >> 8;
    }
    v18 = (v16 ^ v14) & v13;
    v19 = (WTF **)(v11 + 16 * v18);
    v20 = *v19;
    if (*v19)
    {
      v21 = -1;
      do
      {
        v22 = *((_DWORD *)v20 + 4);
        if (v22 < 0x100)
        {
          v23 = WTF::StringImpl::hashSlowCase(v20);
          a1 = v184;
        }
        else
        {
          v23 = v22 >> 8;
        }
        if (++v21 > ((v18 + v12 - ((v23 ^ v14) & v13)) & v13))
          break;
        if (v23 == v16)
        {
          v24 = WTF::equal(*v19, *v10, a3);
          a1 = v184;
          if ((v24 & 1) != 0)
            goto LABEL_2;
        }
        v18 = (v18 + 1) & v13;
        v19 = (WTF **)(*(_QWORD *)(a1 + 1064) + 16 * v18);
        v20 = *v19;
      }
      while (*v19);
    }
  }
  v25 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 16);
  if (!v25 || (v25[1] & 3) != 0)
    v26 = 0;
  else
    v26 = *v25;
  if (*(unsigned __int8 *)(v26 + 5) < 0x17u)
    goto LABEL_37;
  v27 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28);
  v28 = (JSC::VM *)*((_QWORD *)v27 + 7);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)
                                                       + 0x40))(v192, v26);
  if (!v192[0])
    goto LABEL_37;
  v178 = a3;
  if ((*(_WORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
  {
    v29 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(v26, v27);
  }
  else
  {
    v29 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
    if (!v29)
      v29 = *(_QWORD *)(v26 + 16);
  }
  if (*((_DWORD *)v28 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    if ((_DWORD)result)
      goto LABEL_272;
  }
  if ((v29 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v29 + 5) <= 0x16u)
  {
LABEL_37:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 33;
    goto LABEL_3;
  }
  WTF::AtomStringImpl::addLiteral();
  v30 = *(WTF::StringImpl **)v192;
  v33 = JSC::JSObject::get((JSC::Structure *)v26, v27, *(unint64_t *)v192);
  v34 = v184;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v31);
      v34 = v184;
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (*((_DWORD *)v28 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    v34 = v184;
    if ((_DWORD)result)
    {
LABEL_272:
      *(_BYTE *)a4 = 37;
      *(_QWORD *)(a4 + 8) = 0;
      goto LABEL_4;
    }
  }
  v181 = v10;
  if (v33 == 10)
  {
    v35 = 0;
    v177 = 0;
    v36 = 0;
    goto LABEL_127;
  }
  v37 = *((_QWORD *)v27 + 7);
  v191 = (WTF::StringImpl **)v37;
  if ((v33 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v33 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    result = *(_QWORD *)v192;
    *(_QWORD *)v192 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v31);
      else
        *(_DWORD *)result -= 2;
    }
    v41 = 1;
    *(_DWORD *)&v192[16] = 1;
    goto LABEL_58;
  }
  v188 = 0;
  v189 = 0;
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v39 = (*(_BYTE *)(v33 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v33 + 8) - 8) : 0;
      if (i - 1 >= v39)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v33, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v33, v27, (i - 1));
      if (*(_DWORD *)(v37 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37);
        if ((result & 1) != 0)
          break;
      }
      result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::AudioParamDescriptor>>::convert((JSC::VM **)v27, IndexQuickly, (unsigned int *)&v188);
      if (*(_QWORD *)(v37 + 16))
      {
        v45 = JSC::JSArrayIterator::create();
        v46 = i | 0xFFFE000000000000;
        if (i < 0)
          v46 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v45 + 16) = v46;
        goto LABEL_78;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(v27, (JSC::JSGlobalObject *)v33, v32);
    if (!*(_DWORD *)(v37 + 80)
      || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v37 + 16) || result == 6)
          break;
        v44 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v37 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37);
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::AudioParamDescriptor>>::convert((JSC::VM **)v27, v44, (unsigned int *)&v188);
        if (*(_QWORD *)(v37 + 16))
        {
LABEL_78:
          result = JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (!*(_DWORD *)(v37 + 80))
  {
    v47 = v188;
LABEL_81:
    v10 = v181;
    v34 = v184;
    *(_QWORD *)v192 = v47;
    *(_QWORD *)&v192[8] = v189;
    *(_DWORD *)&v192[16] = 0;
    goto LABEL_82;
  }
  result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37);
  v47 = v188;
  if ((result & 1) == 0)
    goto LABEL_81;
  *(_DWORD *)&v192[16] = 1;
  if (HIDWORD(v189))
  {
    v172 = 24 * HIDWORD(v189);
    v173 = v188;
    do
    {
      result = *(_QWORD *)v173;
      *(_QWORD *)v173 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v31);
        else
          *(_DWORD *)result -= 2;
      }
      v173 = (WTF::StringImpl *)((char *)v173 + 24);
      v172 -= 24;
    }
    while (v172);
  }
  v10 = v181;
  v34 = v184;
  if (v47)
  {
    result = WTF::fastFree(v47, v31);
    v34 = v184;
  }
LABEL_82:
  v41 = *(_DWORD *)&v192[16];
  if (*(_DWORD *)&v192[16])
  {
LABEL_58:
    v35 = 0;
    v177 = 0;
    v36 = 0;
    *(_BYTE *)a4 = 37;
    *(_QWORD *)(a4 + 8) = 0;
    v42 = 1;
    *(_BYTE *)(a4 + 16) = 1;
    v34 = v184;
    goto LABEL_124;
  }
  v36 = *(WTF **)v192;
  v35 = *(_DWORD *)&v192[12];
  v177 = *(_DWORD *)&v192[8];
  *(_OWORD *)v192 = 0uLL;
  v191 = 0;
  if (v35)
  {
    v48 = v36;
    while (1)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v191, (WTF::StringImpl **)v48, v32.super.isa, (uint64_t)&v188);
      if (!(_BYTE)v190)
        break;
      v49 = *((float *)v48 + 2);
      if (v49 < *((float *)v48 + 3))
      {
        v50 = *v10;
        if (!*v10)
        {
          v55 = 0;
          goto LABEL_99;
        }
        v55 = *((_DWORD *)v50 + 1);
        *(_DWORD *)v50 += 2;
        if ((v55 & 0x80000000) == 0)
        {
LABEL_99:
          v56 = __OFADD__(v55, 51);
          v57 = v55 + 51;
          if (!v56 && !__OFADD__(v57, 32))
          {
            v58 = !v50 || (*((_BYTE *)v50 + 16) & 4) != 0;
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v57 + 32), v58, (int8x16_t *)"AudioParamDescriptor with name '", 0x20u, (uint64_t)v50, (int8x16_t *)"' has a defaultValue that is less than the minValue", 0x33u, &v186);
            v62 = v186;
            if (v186)
            {
              *(_BYTE *)a4 = 8;
              *(_QWORD *)(a4 + 8) = v62;
              *(_BYTE *)(a4 + 16) = 1;
              v186 = 0;
              goto LABEL_117;
            }
LABEL_290:
            __break(0xC471u);
LABEL_295:
            JUMPOUT(0x19553C298);
          }
        }
        v186 = 0;
        goto LABEL_290;
      }
      v34 = v184;
      if (v49 > *((float *)v48 + 4))
      {
        v50 = *v10;
        if (!*v10)
        {
          v59 = 0;
          goto LABEL_106;
        }
        v59 = *((_DWORD *)v50 + 1);
        *(_DWORD *)v50 += 2;
        if ((v59 & 0x80000000) == 0)
        {
LABEL_106:
          v56 = __OFADD__(v59, 54);
          v60 = v59 + 54;
          if (!v56 && !__OFADD__(v60, 32))
          {
            v61 = !v50 || (*((_BYTE *)v50 + 16) & 4) != 0;
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v60 + 32), v61, (int8x16_t *)"AudioParamDescriptor with name '", 0x20u, (uint64_t)v50, (int8x16_t *)"' has a defaultValue that is greater than the maxValue", 0x36u, &v185);
            v63 = v185;
            if (v185)
            {
              *(_BYTE *)a4 = 8;
              *(_QWORD *)(a4 + 8) = v63;
              *(_BYTE *)(a4 + 16) = 1;
              v185 = 0;
              goto LABEL_117;
            }
LABEL_292:
            __break(0xC471u);
            JUMPOUT(0x19553C2A4);
          }
        }
        v185 = 0;
        goto LABEL_292;
      }
      v48 = (WTF *)((char *)v48 + 24);
      if (v48 == (WTF *)((char *)v36 + 24 * v35))
      {
        v42 = 0;
        goto LABEL_121;
      }
    }
    v50 = *v10;
    if (*v10)
    {
      v51 = *((_DWORD *)v50 + 1);
      *(_DWORD *)v50 += 2;
      if (v51 < 0 || (v52 = (v51 + 56), __OFADD__(v51, 56)))
      {
        v187 = 0;
        goto LABEL_294;
      }
      v53 = (*((unsigned __int8 *)v50 + 16) >> 2) & 1;
    }
    else
    {
      v53 = 1;
      v52 = 56;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v52, v53, (int8x16_t *)"parameterDescriptors contain duplicate AudioParam name: ", 0x38u, (uint64_t)v50, &v187);
    v54 = v187;
    if (v187)
    {
      *(_BYTE *)a4 = 6;
      *(_QWORD *)(a4 + 8) = v54;
      *(_BYTE *)(a4 + 16) = 1;
      v187 = 0;
LABEL_117:
      v34 = v184;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
        {
          WTF::StringImpl::destroy(v50, v31);
          v34 = v184;
        }
        else
        {
          *(_DWORD *)v50 -= 2;
        }
      }
      v42 = 1;
LABEL_121:
      result = (uint64_t)v191;
      if (v191)
      {
        result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v191, v31);
        v34 = v184;
      }
      goto LABEL_123;
    }
LABEL_294:
    __break(0xC471u);
    goto LABEL_295;
  }
  v42 = 0;
LABEL_123:
  v41 = *(_DWORD *)&v192[16];
LABEL_124:
  if (v41 != -1)
  {
    result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33691D0[v41])(&v188, v192);
    v34 = v184;
  }
  if (v42)
    goto LABEL_256;
LABEL_127:
  v64 = *(unsigned int *)(v34 + 1076);
  v65 = *(unsigned int *)(v34 + 1072);
  v175 = v36;
  v176 = (_BYTE *)a4;
  v174 = v35;
  if (10 * v64 < (unint64_t)(9 * v65) && (v65 > 2 * (int)v64 || !*(_BYTE *)(v34 + 1084)))
    goto LABEL_184;
  if ((_DWORD)v65)
    v66 = 2 * v65;
  else
    v66 = 8;
  v67 = *(WTF **)(v34 + 1064);
  v68 = WTF::fastZeroedMalloc((WTF *)(16 * v66));
  v34 = v184;
  *(_QWORD *)(v184 + 1064) = v68;
  *(_DWORD *)(v184 + 1072) = v66;
  v69 = (~(v68 << 32) + v68) ^ ((unint64_t)(~(v68 << 32) + v68) >> 22);
  v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
  v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
  *(_DWORD *)(v184 + 1080) = (v71 >> 31) ^ v71;
  *(_BYTE *)(v184 + 1084) = 0;
  if ((_DWORD)v65)
  {
    v72 = 0;
    v179 = v67;
    v180 = v65;
    do
    {
      v73 = (char *)v67 + 16 * v72;
      v74 = *(WTF::StringImpl **)v73;
      if (*(_QWORD *)v73)
      {
        v75 = *(_DWORD *)(v34 + 1072);
        v76 = *(_DWORD *)(v34 + 1080);
        v77 = *((_DWORD *)v74 + 4);
        v183 = v75;
        v182 = v72;
        if (v77 < 0x100)
        {
          v78 = WTF::StringImpl::hashSlowCase(v74);
          v75 = v183;
          v34 = v184;
        }
        else
        {
          v78 = v77 >> 8;
        }
        v79 = v75 - 1;
        v80 = (v78 ^ v76) & (v75 - 1);
        v81 = *(_QWORD *)(v34 + 1064);
        v82 = (WTF::StringImpl **)(v81 + 16 * v80);
        v83 = *v82;
        if (*v82)
        {
          v84 = 0;
          v85 = (_QWORD *)((char *)v67 + 16 * v182 + 8);
          do
          {
            v86 = *((_DWORD *)v83 + 4);
            if (v86 < 0x100)
            {
              v87 = WTF::StringImpl::hashSlowCase(v83);
              v75 = v183;
              v34 = v184;
            }
            else
            {
              v87 = v86 >> 8;
            }
            v88 = (v80 + v75 - ((v87 ^ v76) & v79)) & v79;
            if (v84 > v88)
            {
              v89 = *(WTF::StringImpl **)v73;
              v90 = (_DWORD *)*v85;
              *(_QWORD *)v73 = 0;
              *((_QWORD *)v73 + 1) = 0;
              v91 = *v82;
              *v82 = 0;
              v92 = *(WTF::StringImpl **)v73;
              *(_QWORD *)v73 = v91;
              if (v92)
              {
                if (*(_DWORD *)v92 == 2)
                {
                  WTF::StringImpl::destroy(v92, v31);
                  v75 = v183;
                  v34 = v184;
                }
                else
                {
                  *(_DWORD *)v92 -= 2;
                }
              }
              v93 = v81 + 16 * v80;
              v95 = *(_QWORD *)(v93 + 8);
              v94 = (_QWORD *)(v93 + 8);
              *v94 = 0;
              v96 = (_DWORD *)*v85;
              *v85 = v95;
              if (v96)
              {
                if (v96[4] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 16))(v96);
                  v75 = v183;
                  v34 = v184;
                }
                else
                {
                  --v96[4];
                }
              }
              v97 = *v82;
              *v82 = v89;
              if (v97)
              {
                if (*(_DWORD *)v97 == 2)
                {
                  WTF::StringImpl::destroy(v97, v31);
                  v75 = v183;
                  v34 = v184;
                }
                else
                {
                  *(_DWORD *)v97 -= 2;
                }
              }
              v98 = (_DWORD *)*v94;
              *v94 = v90;
              if (v98)
              {
                if (v98[4] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v98 + 16))(v98);
                  v75 = v183;
                  v34 = v184;
                }
                else
                {
                  --v98[4];
                }
              }
              v84 = v88;
            }
            v80 = ((_DWORD)v80 + 1) & v79;
            ++v84;
            v81 = *(_QWORD *)(v34 + 1064);
            v82 = (WTF::StringImpl **)(v81 + 16 * v80);
            v83 = *v82;
          }
          while (*v82);
        }
        v99 = *(WTF::StringImpl **)v73;
        *(_QWORD *)v73 = 0;
        v100 = *v82;
        *v82 = v99;
        v65 = v180;
        v10 = v181;
        v67 = v179;
        v72 = v182;
        if (v100)
        {
          if (*(_DWORD *)v100 == 2)
          {
            WTF::StringImpl::destroy(v100, v31);
            v34 = v184;
          }
          else
          {
            *(_DWORD *)v100 -= 2;
          }
        }
        v101 = v81 + 16 * v80;
        v102 = (char *)v179 + 16 * v182;
        v103 = *((_QWORD *)v102 + 1);
        *((_QWORD *)v102 + 1) = 0;
        v104 = *(_DWORD **)(v101 + 8);
        *(_QWORD *)(v101 + 8) = v103;
        if (v104)
        {
          if (v104[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v104 + 16))(v104);
            v34 = v184;
          }
          else
          {
            --v104[4];
          }
        }
      }
      v105 = (_DWORD *)*((_QWORD *)v73 + 1);
      *((_QWORD *)v73 + 1) = 0;
      if (v105)
      {
        if (v105[4] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v105 + 16))(v105);
          v34 = v184;
        }
        else
        {
          --v105[4];
        }
      }
      v106 = *(WTF::StringImpl **)v73;
      *(_QWORD *)v73 = 0;
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
        {
          WTF::StringImpl::destroy(v106, v31);
          v34 = v184;
        }
        else
        {
          *(_DWORD *)v106 -= 2;
        }
      }
      ++v72;
    }
    while (v72 != v65);
    goto LABEL_183;
  }
  if (v67)
  {
LABEL_183:
    WTF::fastFree(v67, v31);
    v34 = v184;
    LODWORD(v65) = *(_DWORD *)(v184 + 1072);
    goto LABEL_184;
  }
  LODWORD(v65) = 8;
LABEL_184:
  v107 = v65 - 1;
  v108 = *(_DWORD *)(v34 + 1080);
  v109 = *((_DWORD *)*v10 + 4);
  if (v109 < 0x100)
  {
    v111 = WTF::StringImpl::hashSlowCase(*v10);
    v34 = v184;
    v110 = v111;
  }
  else
  {
    v110 = v109 >> 8;
  }
  v112 = (v110 ^ v108) & v107;
  v113 = *(_QWORD *)(v34 + 1064);
  v114 = v113 + 16 * v112;
  v115 = *(WTF **)v114;
  if (!*(_QWORD *)v114)
  {
    v122 = v176;
    v121 = v178;
    goto LABEL_200;
  }
  v116 = 0;
  while (1)
  {
    v117 = *((_DWORD *)v115 + 4);
    if (v117 < 0x100)
    {
      v118 = WTF::StringImpl::hashSlowCase(v115);
      v34 = v184;
    }
    else
    {
      v118 = v117 >> 8;
    }
    v119 = (v112 + v65 - ((v118 ^ v108) & v107)) & v107;
    if (v116 > v119)
    {
      if (v116 >= 0x80)
        *(_BYTE *)(v34 + 1084) = 1;
      v126 = *(WTF **)v114;
      *(_QWORD *)v114 = 0;
      v127 = v113 + 16 * v112;
      v130 = *(_QWORD *)(v127 + 8);
      v128 = (_QWORD *)(v127 + 8);
      v129 = v130;
      *v128 = 0;
      *(_QWORD *)v114 = 0;
      *(_QWORD *)(v114 + 8) = 0;
      v131 = *v10;
      if (*v10)
        *(_DWORD *)v131 += 2;
      *(_QWORD *)v114 = v131;
      v132 = *(_QWORD *)v178;
      *(_QWORD *)v178 = 0;
      v133 = (_DWORD *)*v128;
      *v128 = v132;
      if (v133)
      {
        if (v133[4] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v133 + 16))(v133);
          v34 = v184;
        }
        else
        {
          --v133[4];
        }
      }
      v134 = v65;
      for (j = v112 + 1; ; j = v136 + 1)
      {
        v136 = j & v107;
        v137 = *(_QWORD *)(v34 + 1064);
        v138 = (WTF::StringImpl **)(v137 + 16 * v136);
        v139 = *v138;
        if (!*v138)
          break;
        v140 = *((_DWORD *)v139 + 4);
        if (v140 < 0x100)
        {
          v141 = WTF::StringImpl::hashSlowCase(v139);
          v34 = v184;
        }
        else
        {
          v141 = v140 >> 8;
        }
        if (++v119 > (((_DWORD)v136 + v134 - ((v141 ^ v108) & v107)) & v107))
        {
          v142 = *v138;
          *v138 = 0;
          v143 = v137 + 16 * v136;
          v144 = *(_QWORD *)(v143 + 8);
          *v138 = v126;
          *(_QWORD *)(v143 + 8) = v129;
          v129 = v144;
          v126 = v142;
          v119 = (v136 + v134 - ((v141 ^ v108) & v107)) & v107;
        }
      }
      *v138 = v126;
      v145 = v137 + 16 * v136;
      result = *(_QWORD *)(v145 + 8);
      *(_QWORD *)(v145 + 8) = v129;
      v36 = v175;
      v122 = v176;
      v35 = v174;
      if (!result)
        goto LABEL_222;
LABEL_220:
      if (*(_DWORD *)(result + 16) == 1)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        v34 = v184;
      }
      else
      {
        --*(_DWORD *)(result + 16);
      }
LABEL_222:
      ++*(_DWORD *)(v34 + 1076);
      v146 = *(_QWORD *)(*(_QWORD *)(v34 + 360) + 120);
      if (!v146)
      {
        *v122 = 8;
        *((_QWORD *)v122 + 1) = 0;
        goto LABEL_255;
      }
      WTF::String::isolatedCopy();
      if (!v35)
      {
LABEL_235:
        v189 = v36;
        v190 = __PAIR64__(v35, v177);
        v155 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v155 = &off_1E3369298;
        v155[1] = v188;
        v156 = v189;
        v188 = 0;
        v189 = 0;
        v155[2] = v156;
        v157 = v190;
        v190 = 0;
        v155[3] = v157;
        v158 = *(_QWORD *)(v146 + 32);
        v159 = (unsigned int *)(v146 + 8);
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 + 1, v159));
        v161 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v161 = &off_1E33692C0;
        v161[1] = v146;
        v161[2] = v146;
        v161[3] = v155;
        v162 = *(_OWORD *)(v158 + 432);
        *(_OWORD *)v192 = *(_OWORD *)(v158 + 416);
        *(_OWORD *)&v192[16] = v162;
        v163 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v163 = &off_1E33A3A20;
        *(_OWORD *)(v163 + 16) = *(_OWORD *)v192;
        *(_OWORD *)(v163 + 32) = *(_OWORD *)&v192[16];
        *(_QWORD *)(v163 + 48) = v161;
        *(_BYTE *)(v163 + 56) = 0;
        v191 = (WTF::StringImpl **)v163;
        WTF::callOnMainThread();
        v165 = v191;
        v191 = 0;
        if (v165)
          (*((void (**)(WTF::StringImpl **))*v165 + 1))(v165);
        if (HIDWORD(v190))
        {
          v166 = v189;
          v167 = 24 * HIDWORD(v190);
          do
          {
            v168 = *(WTF::StringImpl **)v166;
            *(_QWORD *)v166 = 0;
            if (v168)
            {
              if (*(_DWORD *)v168 == 2)
                WTF::StringImpl::destroy(v168, v164);
              else
                *(_DWORD *)v168 -= 2;
            }
            v166 = (WTF *)((char *)v166 + 24);
            v167 -= 24;
          }
          while (v167);
        }
        v169 = v189;
        if (v189)
        {
          v189 = 0;
          LODWORD(v190) = 0;
          WTF::fastFree(v169, v164);
        }
        result = (uint64_t)v188;
        v188 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v164);
          else
            *(_DWORD *)result -= 2;
        }
        *(_QWORD *)v122 = 0;
        *((_QWORD *)v122 + 1) = 0;
        *((_QWORD *)v122 + 2) = 0;
        return result;
      }
      v147 = v36;
      while (1)
      {
        WTF::String::isolatedCopy();
        v149 = (_QWORD *)((char *)v147 + 8);
        *(_QWORD *)&v192[8] = *((_QWORD *)v147 + 1);
        *(_DWORD *)&v192[16] = *((_DWORD *)v147 + 4);
        v192[20] = *((_BYTE *)v147 + 20);
        v150 = *(_QWORD *)v192;
        *(_QWORD *)v192 = 0;
        v151 = *(WTF::StringImpl **)v147;
        *(_QWORD *)v147 = v150;
        if (v151)
        {
          if (*(_DWORD *)v151 == 2)
          {
            WTF::StringImpl::destroy(v151, v148);
            v154 = *(_OWORD *)v192;
            *(_QWORD *)((char *)v147 + 13) = *(_QWORD *)&v192[13];
            *v149 = *((_QWORD *)&v154 + 1);
            *(_QWORD *)v192 = 0;
            if ((_QWORD)v154)
            {
              if (*(_DWORD *)v154 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v154, v153);
              else
                *(_DWORD *)v154 -= 2;
            }
            goto LABEL_229;
          }
          *(_DWORD *)v151 -= 2;
        }
        v152 = *(_QWORD *)&v192[8];
        *(_QWORD *)((char *)v147 + 13) = *(_QWORD *)&v192[13];
        *v149 = v152;
LABEL_229:
        v147 = (WTF *)((char *)v147 + 24);
        if (v147 >= (WTF *)((char *)v36 + 24 * v35))
          goto LABEL_235;
      }
    }
    if (v118 == v110)
    {
      v120 = WTF::equal(*(WTF **)v114, *v10, v32.super.isa);
      v34 = v184;
      if ((v120 & 1) != 0)
        break;
    }
    v113 = *(_QWORD *)(v34 + 1064);
    v112 = ((_DWORD)v112 + 1) & v107;
    ++v116;
    v114 = v113 + 16 * v112;
    v115 = *(WTF **)v114;
    if (!*(_QWORD *)v114)
    {
      v121 = v178;
      if (v116 >= 0x80)
        *(_BYTE *)(v34 + 1084) = 1;
      v122 = v176;
LABEL_200:
      v35 = v174;
      v36 = v175;
      v123 = *v10;
      if (*v10)
        *(_DWORD *)v123 += 2;
      *(_QWORD *)v114 = v123;
      v124 = v113 + 16 * v112;
      v125 = *(_QWORD *)v121;
      *(_QWORD *)v121 = 0;
      result = *(_QWORD *)(v124 + 8);
      *(_QWORD *)(v124 + 8) = v125;
      if (!result)
        goto LABEL_222;
      goto LABEL_220;
    }
  }
  v122 = v176;
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *v176 = 6;
  v35 = v174;
  v36 = v175;
LABEL_255:
  v122[16] = 1;
LABEL_256:
  if (v35)
  {
    v170 = 24 * v35;
    v171 = (uint64_t *)v36;
    do
    {
      result = *v171;
      *v171 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v31);
        else
          *(_DWORD *)result -= 2;
      }
      v171 += 3;
      v170 -= 24;
    }
    while (v170);
  }
  if (v36)
    return WTF::fastFree(v36, v31);
  return result;
}

double WebCore::AudioWorkletGlobalScope::prepareForDestruction(WebCore::AudioWorkletGlobalScope *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  double result;
  uint64_t v9;
  _BYTE *v10;
  WebCore::WorkerOrWorkletScriptController *v11;
  WTF *v12;
  void *v13;

  v3 = (WTF *)*((_QWORD *)this + 133);
  if (v3)
  {
    v4 = *((unsigned int *)this + 268);
    *((_QWORD *)this + 133) = 0;
    *((_QWORD *)this + 134) = 0;
    *(_QWORD *)((char *)this + 1077) = 0;
    if ((_DWORD)v4)
    {
      v5 = (_DWORD **)((char *)v3 + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (v6[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
          else
            --v6[4];
        }
        v7 = (WTF::StringImpl *)*(v5 - 1);
        *(v5 - 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree(v3, a2);
  }
  WebCore::WorkerOrWorkletGlobalScope::prepareForDestruction(this, a2);
  v9 = *((_QWORD *)this + 43);
  if (v9)
  {
    v10 = *(_BYTE **)(v9 + 8);
    v10[93441] = 1;
    v10[56] |= 0x40u;
    JSC::VMTraps::fireTrap((JSC::VMTraps *)(v10 + 64));
    v11 = (WebCore::WorkerOrWorkletScriptController *)*((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = 0;
    if (v11)
    {
      WebCore::WorkerOrWorkletScriptController::~WorkerOrWorkletScriptController(v11);
      if (*(_DWORD *)v12)
      {
        result = 0.0;
        *((_OWORD *)v12 + 1) = 0u;
        *((_OWORD *)v12 + 2) = 0u;
        *(_OWORD *)v12 = 0u;
      }
      else
      {
        WTF::fastFree(v12, v13);
      }
    }
  }
  return result;
}

void WebCore::AudioWorkletGlobalScope::handlePreRenderTasks(WebCore::AudioWorkletGlobalScope *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 45);
  if (v2 && (v3 = *(_QWORD *)(v2 + 40)) != 0)
  {
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4)
      v4 = WTF::Thread::initializeCurrentTLS(0);
    if (v3 != v4)
    {
LABEL_6:
      __break(0xC471u);
      JUMPOUT(0x19553C428);
    }
  }
  else if ((WTF::isMainThread(this) & 1) == 0)
  {
    goto LABEL_6;
  }
  JSC::VM::DrainMicrotaskDelayScope::DrainMicrotaskDelayScope((JSC::VM::DrainMicrotaskDelayScope *)&v6, *(JSC::VM **)(*((_QWORD *)this + 43) + 8));
  if (*((_BYTE *)this + 1128))
  {
    JSC::VM::DrainMicrotaskDelayScope::operator=();
  }
  else
  {
    v5 = v6;
    v6 = 0;
    *((_QWORD *)this + 140) = v5;
    *((_BYTE *)this + 1128) = 1;
  }
  JSC::VM::DrainMicrotaskDelayScope::~DrainMicrotaskDelayScope((JSC::VM::DrainMicrotaskDelayScope *)&v6);
}

uint64_t *WebCore::AudioWorkletGlobalScope::visitProcessors(uint64_t *this, JSC::AbstractSlotVisitor *a2)
{
  JSC::AbstractSlotVisitor *v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  WTF *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t *v32;
  unsigned __int8 *v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v49;
  int v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  double v66;
  double v67;
  double v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;

  v2 = a2;
  v3 = (uint64_t)this;
  v4 = this + 136;
  v5 = (unsigned __int8 *)(this + 138);
  if (__ldaxr((unsigned __int8 *)this + 1104))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  this = (uint64_t *)MEMORY[0x19AEA534C](this + 138);
LABEL_5:
  v75 = 0;
  if (!*v4)
  {
    v8 = 0;
    v13 = 0;
LABEL_95:
    v43 = 0;
    *(_DWORD *)(v3 + 1096) = 0;
    goto LABEL_107;
  }
  v7 = *(unsigned int *)(*v4 - 12);
  if (!(_DWORD)v7)
  {
    v8 = 0;
    v73 = 0;
    goto LABEL_20;
  }
  if (v7 >> 29)
  {
    __break(0xC471u);
LABEL_148:
    JUMPOUT(0x19553CAF4);
  }
  this = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v7));
  v8 = (WTF *)this;
  LODWORD(v75) = v7;
  v74 = (WTF *)this;
  v9 = (_QWORD *)*v4;
  if (!*v4 || !*((_DWORD *)v9 - 3))
  {
    v14 = 0;
LABEL_17:
    v74 = 0;
    LODWORD(v75) = 0;
    this = (uint64_t *)WTF::fastFree(v8, a2);
    v8 = 0;
    goto LABEL_18;
  }
  v10 = *((unsigned int *)v9 - 1);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    v12 = (uint64_t *)*v4;
    while ((unint64_t)(*v12 + 1) <= 1)
    {
      v12 += 2;
      v11 -= 16;
      if (!v11)
        goto LABEL_47;
    }
  }
  else
  {
    v12 = (uint64_t *)*v4;
  }
  v16 = &v9[2 * v10];
  if (v16 == v12)
  {
LABEL_47:
    v25 = 0;
    v14 = 0;
    goto LABEL_48;
  }
  v14 = 0;
  v17 = *v12;
LABEL_24:
  v18 = v12[1];
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_28;
  }
  this = (uint64_t *)MEMORY[0x19AEA534C](v18);
LABEL_28:
  if (*(_QWORD *)(v18 + 24))
    ++*(_QWORD *)(v18 + 8);
  else
    v17 = 0;
  v20 = __ldxr((unsigned __int8 *)v18);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
      goto LABEL_36;
  }
  else
  {
    __clrex();
  }
  this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_36:
  if (v17)
  {
    v76 = v17;
    LODWORD(v21) = HIDWORD(v75);
    if (HIDWORD(v75) == (_DWORD)v75)
    {
      this = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v74, HIDWORD(v75) + 1, (unint64_t)&v76);
      v21 = HIDWORD(v75);
      v22 = v74;
      v23 = *this;
      *this = 0;
      *((_QWORD *)v22 + v21) = v23;
    }
    else
    {
      v76 = 0;
      *((_QWORD *)v74 + HIDWORD(v75)) = v17;
    }
    HIDWORD(v75) = v21 + 1;
    v24 = v76;
    v76 = 0;
    if (v24)
      this = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 8), a2);
  }
  else
  {
    v14 = 1;
  }
  while (1)
  {
    v12 += 2;
    if (v12 == v16)
      break;
    v17 = *v12;
    if ((unint64_t)(*v12 + 1) > 1)
    {
      if (v12 != v16)
        goto LABEL_24;
      break;
    }
  }
  LODWORD(v7) = v75;
  v25 = HIDWORD(v75);
  v8 = v74;
LABEL_48:
  if (v7 <= v25)
  {
    v73 = v25;
    goto LABEL_52;
  }
  if (v25)
  {
    v73 = v25;
    this = (uint64_t *)WTF::fastRealloc(v8, (void *)(8 * v25));
    v8 = (WTF *)this;
    goto LABEL_52;
  }
  if (v8)
    goto LABEL_17;
LABEL_18:
  v73 = 0;
LABEL_52:
  v15 = *v4;
  if (!v14)
    goto LABEL_88;
  if (!v15)
    goto LABEL_94;
  v26 = *(_DWORD *)(v15 - 4);
  if (!v26)
  {
LABEL_105:
    *(_DWORD *)(v3 + 1096) = 0;
    goto LABEL_106;
  }
  v70 = v4;
  v71 = v3;
  v72 = 0;
  v27 = v26 - 1;
  do
  {
    v28 = v27;
    v29 = (_QWORD *)(v15 + 16 * v27);
    if ((unint64_t)(*v29 + 1) < 2)
      goto LABEL_81;
    v30 = v15 + 16 * v27;
    v33 = *(unsigned __int8 **)(v30 + 8);
    v32 = (uint64_t *)(v30 + 8);
    v31 = v33;
    if (__ldaxr(v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, v31))
    {
      goto LABEL_61;
    }
    this = (uint64_t *)MEMORY[0x19AEA534C](v31);
LABEL_61:
    v35 = *((_QWORD *)v31 + 3);
    v36 = __ldxr(v31);
    if (v36 == 1)
    {
      if (!__stlxr(0, v31))
      {
        if (v35)
          goto LABEL_81;
        goto LABEL_67;
      }
    }
    else
    {
      __clrex();
    }
    this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (v35)
      goto LABEL_81;
LABEL_67:
    *v29 = -1;
    v37 = *v32;
    *v32 = 0;
    if (!v37)
      goto LABEL_80;
    if (__ldaxr((unsigned __int8 *)v37))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v37))
    {
      goto LABEL_72;
    }
    this = (uint64_t *)MEMORY[0x19AEA534C](v37);
LABEL_72:
    v39 = *(_QWORD *)(v37 + 16) - 1;
    *(_QWORD *)(v37 + 16) = v39;
    if (v39)
    {
      v42 = __ldxr((unsigned __int8 *)v37);
      if (v42 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v37))
          goto LABEL_80;
      }
      else
      {
        __clrex();
      }
      this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v37);
      goto LABEL_80;
    }
    v40 = *(_QWORD *)(v37 + 8);
    v41 = __ldxr((unsigned __int8 *)v37);
    if (v41 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v37))
      {
        if (!v40)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    else
    {
      __clrex();
    }
    this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v37);
    if (!v40)
LABEL_79:
      this = (uint64_t *)WTF::fastFree((WTF *)v37, a2);
LABEL_80:
    ++v72;
LABEL_81:
    --v27;
  }
  while (v28);
  v4 = v70;
  v15 = *v70;
  if (!v72)
  {
    v3 = v71;
    if (v15)
      goto LABEL_100;
    goto LABEL_94;
  }
  *(_DWORD *)(v15 - 16) += v72;
  v44 = *v70;
  v3 = v71;
  if (*v70)
    v45 = *(_DWORD *)(v44 - 12);
  else
    v45 = 0;
  *(_DWORD *)(v44 - 12) = v45 - v72;
  v15 = *v70;
  if (!*v70)
  {
LABEL_94:
    v13 = v73;
    goto LABEL_95;
  }
LABEL_100:
  v46 = *(_DWORD *)(v15 - 4);
  v47 = *(unsigned int *)(v15 - 12);
  if (v46 < 9 || 6 * (int)v47 >= v46)
    goto LABEL_105;
  v63 = (v47 - 1) | ((v47 - 1) >> 1) | ((((_DWORD)v47 - 1) | ((v47 - 1) >> 1)) >> 2);
  v64 = v63 | (v63 >> 4) | ((v63 | (v63 >> 4)) >> 8);
  v65 = (v64 | HIWORD(v64)) + 1;
  if (v65 > 0x400)
  {
    if (v65 <= 2 * v47)
    {
LABEL_137:
      LODWORD(v65) = 2 * v65;
      if (v65 <= 0x400)
        goto LABEL_138;
    }
    v66 = (double)v47;
    v67 = (double)v65;
    v68 = 0.416666667;
  }
  else
  {
    if (3 * v65 <= 4 * v47)
      goto LABEL_137;
LABEL_138:
    v66 = (double)v47;
    v67 = (double)v65;
    v68 = 0.604166667;
  }
  if (v67 * v68 <= v66)
    LODWORD(v65) = 2 * v65;
  if (v65 <= 8)
    v69 = 8;
  else
    v69 = v65;
  this = (uint64_t *)WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash(v70, v69);
LABEL_20:
  v15 = *v4;
LABEL_88:
  *(_DWORD *)(v3 + 1096) = 0;
  if (!v15)
  {
    v43 = 0;
    v13 = v73;
    goto LABEL_107;
  }
LABEL_106:
  v43 = *(_DWORD *)(v15 - 12);
  v49 = 0x7FFFFFFF;
  v13 = v73;
  if (v43 < 0x7FFFFFFF)
LABEL_107:
    v49 = v43;
  *(_DWORD *)(v3 + 1100) = 2 * v49;
  v50 = __ldxr(v5);
  if (v50 == 1)
  {
    if (!__stlxr(0, v5))
    {
      if (!v13)
        goto LABEL_119;
      goto LABEL_114;
    }
  }
  else
  {
    __clrex();
  }
  this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v13)
    goto LABEL_119;
LABEL_114:
  if (!*((_BYTE *)v2 + 130))
  {
    v54 = v8;
LABEL_123:
    v55 = *(_QWORD *)v54;
    this = (uint64_t *)*((_QWORD *)v2 + 15);
    a2 = (JSC::AbstractSlotVisitor *)this[6];
    v56 = *((_DWORD *)a2 + 1);
    v57 = ~(*(_QWORD *)v54 << 32) + *(_QWORD *)v54;
    v58 = (v57 ^ (v57 >> 22)) + ~((v57 ^ (v57 >> 22)) << 13);
    v59 = (9 * (v58 ^ (v58 >> 8))) ^ ((9 * (v58 ^ (v58 >> 8))) >> 15);
    v60 = v56 & (((v59 + ~(v59 << 27)) >> 31) ^ (v59 + ~((_DWORD)v59 << 27)));
    v61 = v60;
    while (1)
    {
      v62 = *((_QWORD *)a2 + v61 + 2);
      if (!v62)
        break;
      if (v55 == v62)
        goto LABEL_132;
      v61 = (v61 + 1) & v56;
      if (v61 == v60)
      {
        __break(0xC471u);
        goto LABEL_148;
      }
    }
    this = (uint64_t *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)this)
    {
      if (*((_BYTE *)v2 + 131))
        this = (uint64_t *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)v2 + 144))(v2, v55);
      ++*((_QWORD *)v2 + 9);
    }
LABEL_132:
    while (1)
    {
      v54 = (WTF *)((char *)v54 + 8);
      if (v54 == (WTF *)((char *)v8 + 8 * v13))
        break;
      if (!*((_BYTE *)v2 + 130))
        goto LABEL_123;
    }
  }
  v51 = 8 * v13;
  v52 = v8;
  do
  {
    v53 = *(_QWORD *)v52;
    *(_QWORD *)v52 = 0;
    if (v53)
      this = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v53 + 8), a2);
    v52 = (WTF *)((char *)v52 + 8);
    v51 -= 8;
  }
  while (v51);
LABEL_119:
  if (v8)
    return (uint64_t *)WTF::fastFree(v8, a2);
  return this;
}

void WebCore::AudioWorkletMessagingProxy::~AudioWorkletMessagingProxy(WebCore::AudioWorkletMessagingProxy *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = off_1E33690D0;
  *((_QWORD *)this + 2) = &unk_1E3369120;
  v2 = *((_QWORD *)this + 5);
  v18 = 0;
  WebCore::WorkerOrWorkletThread::stop(v2, &v18);
  v4 = v18;
  v18 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(*((_QWORD *)this + 5) + 120) = 0;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_8:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v17 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v17 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          goto LABEL_20;
LABEL_16:
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, v3);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_20:
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v3);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  v14 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v3);
    }
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::AudioWorkletMessagingProxy::~AudioWorkletMessagingProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::AudioWorkletThread::clearProxies(uint64_t this)
{
  *(_QWORD *)(this + 120) = 0;
  return this;
}

void `non-virtual thunk to'WebCore::AudioWorkletMessagingProxy::~AudioWorkletMessagingProxy(WebCore::AudioWorkletMessagingProxy *this)
{
  WebCore::AudioWorkletMessagingProxy::~AudioWorkletMessagingProxy((WebCore::AudioWorkletMessagingProxy *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebCore::AudioWorkletMessagingProxy::~AudioWorkletMessagingProxy((WebCore::AudioWorkletMessagingProxy *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

void WebCore::AudioWorkletMessagingProxy::createCacheStorageConnection(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebCore::AudioWorkletMessagingProxy::createCacheStorageConnection(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AudioWorkletMessagingProxy::createRTCDataChannelRemoteHandlerConnection@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 32) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 296) + 24))(*(_QWORD *)(v5 + 296));
      }
    }
  }
  *a2 = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::AudioWorkletMessagingProxy::createRTCDataChannelRemoteHandlerConnection@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 16) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 296) + 24))(*(_QWORD *)(v5 + 296));
      }
    }
  }
  *a2 = 0;
  return this;
}

__n128 WebCore::AudioWorkletMessagingProxy::loaderContextIdentifier@<Q0>(WebCore::AudioWorkletMessagingProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *((_QWORD *)this + 4);
  result = *(__n128 *)(v2 + 416);
  v4 = *(_OWORD *)(v2 + 432);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

__n128 `non-virtual thunk to'WebCore::AudioWorkletMessagingProxy::loaderContextIdentifier@<Q0>(WebCore::AudioWorkletMessagingProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *((_QWORD *)this + 2);
  result = *(__n128 *)(v2 + 416);
  v4 = *(_OWORD *)(v2 + 432);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t WebCore::AudioWorkletMessagingProxy::postTaskToLoader(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v2 = *(_QWORD *)(a1 + 32);
  v8 = *(_OWORD *)(v2 + 416);
  v9 = *(_OWORD *)(v2 + 432);
  v3 = *a2;
  *a2 = 0;
  v4 = *((_BYTE *)a2 + 8);
  v5 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v5 = &off_1E33A3A20;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 48) = v3;
  *(_BYTE *)(v5 + 56) = v4;
  v7 = v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioWorkletMessagingProxy::postTaskToLoader(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v2 = *(_QWORD *)(a1 + 16);
  v8 = *(_OWORD *)(v2 + 416);
  v9 = *(_OWORD *)(v2 + 432);
  v3 = *a2;
  *a2 = 0;
  v4 = *((_BYTE *)a2 + 8);
  v5 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v5 = &off_1E33A3A20;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 48) = v3;
  *(_BYTE *)(v5 + 56) = v4;
  v7 = v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void WebCore::AudioWorkletNode::create(JSC::JSGlobalObject *a1@<X0>, _QWORD *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char v7;
  char *v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::ScriptExecutionContext *v28;
  WebCore::MessageChannel *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v39;
  char *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WebCore::AudioNode *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  const WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  int v77;
  WebCore::AudioNode *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::AudioNode *v83;
  _QWORD *v84;
  float v85;
  float v86;
  char v87;
  uint64_t v88;
  WebCore::AudioParam *v89;
  WTF *v90;
  void *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  int i;
  uint64_t v97;
  WTF *v98;
  float v99;
  uint64_t v100;
  float v102;
  float v103;
  WTF *v104;
  void *v105;
  WebCore::AudioNode *v106;
  WTF::StringImpl **v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl **v110;
  unsigned __int8 *v111;
  uint64_t v112;
  WTF **v113;
  void *v114;
  WTF *v115;
  const WTF::StringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  WTF *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  WTF::StringImpl *v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  unsigned int v136;
  WTF ***v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  WTF::StringImpl *v141;
  WTF **v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF **v145;
  WTF **v146;
  void *v147;
  WTF::StringImpl *v148;
  WTF **v149;
  void *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  WTF **v156;
  void *v157;
  WTF **v158;
  void *v159;
  WTF::StringImpl *v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  WTF *v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  WTF::StringImpl **v173;
  WTF::StringImpl **v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  WTF **v177;
  void *v178;
  WTF *v179;
  uint64_t v180;
  WTF ***v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  WTF **v185;
  void *v186;
  int j;
  uint64_t v188;
  uint64_t v189;
  WTF **v190;
  WTF::StringImpl *v191;
  unsigned int v192;
  int v193;
  WTF *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  int v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  void *v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  __int128 v207;
  WebCore::AudioNode *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  _QWORD *v211;
  uint64_t v212;
  WebCore::AudioNode *v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v224;
  unsigned int v225;
  void *v226;
  int v227;
  _QWORD *v228;
  int v229;
  unsigned __int8 *v230;
  int v231;
  WTF::StringImpl *v232;
  WebCore::MessageChannel *v233;
  uint64_t v234;
  WTF::StringImpl **v235;
  WTF::StringImpl *v236;
  unsigned int v237;
  unsigned int v238;
  void *v239;
  void *v240;
  void *v241;
  uint64_t v242;
  WebCore::MessageChannel *v243;
  uint64_t *v244;
  uint64_t *v245;
  WebCore::MessagePort *v246;
  unsigned int v247;
  WTF *v248;
  int v249;
  unsigned int *v250;
  uint64_t v251;
  WTF::StringImpl **v252;
  unsigned __int8 *v253;
  WTF::StringImpl **v254;
  WTF **v255;
  _QWORD *v256;
  WTF *v258;
  WTF::StringImpl **v259;
  uint64_t v260;
  uint64_t v261;
  WebCore::AudioNode *v262;
  int v263;
  _OWORD v264[2];
  WTF *v265;
  WTF::StringImpl *v266;
  char v267;
  WTF::StringImpl *v268;
  const char *v269;
  __int128 v270;
  __int128 v271;
  unsigned int *v272;
  WebCore::AudioNode *v273;
  uint64_t v274;
  uint64_t v275;

  v6 = *(unsigned int *)(a4 + 28);
  if (!*(_QWORD *)(a4 + 24))
  {
LABEL_2:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 6;
LABEL_44:
    *(_BYTE *)a5 = v7;
    goto LABEL_45;
  }
  v8 = (char *)a4;
  if (*(_BYTE *)(a4 + 48))
  {
    if (*(_DWORD *)(a4 + 44) != (_DWORD)v6)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 0;
LABEL_45:
      *(_DWORD *)(a5 + 16) = 1;
      return;
    }
    if ((_DWORD)v6)
    {
      v10 = *(_DWORD **)(a4 + 32);
      v11 = 4 * v6;
      while ((*v10 - 33) > 0xFFFFFFDF)
      {
        ++v10;
        v11 -= 4;
        if (!v11)
          goto LABEL_9;
      }
      goto LABEL_2;
    }
  }
LABEL_9:
  v251 = a5;
  v12 = a2[40];
  v13 = *((unsigned int *)a2 + 82);
  v256 = a2;
  if (v12)
  {
    v14 = v13 - 1;
    v15 = *((_DWORD *)a2 + 84);
    v16 = *((_DWORD *)*a3 + 4);
    if (v16 < 0x100)
    {
      v19 = WTF::StringImpl::hashSlowCase(*a3);
      a2 = v256;
      v17 = v19;
      v12 = v256[40];
    }
    else
    {
      v17 = v16 >> 8;
    }
    v20 = (v17 ^ v15) & v14;
    v18 = v12 + 24 * v20;
    v21 = *(WTF **)v18;
    if (*(_QWORD *)v18)
    {
      v22 = -1;
      while (1)
      {
        v23 = *((_DWORD *)v21 + 4);
        if (v23 < 0x100)
        {
          v24 = WTF::StringImpl::hashSlowCase(v21);
          a2 = v256;
        }
        else
        {
          v24 = v23 >> 8;
        }
        if (++v22 > ((v20 + v13 - ((v24 ^ v15) & v14)) & v14))
          break;
        if (v24 == v17)
        {
          v25 = WTF::equal(*(WTF **)v18, *a3, (const WTF::StringImpl *)a3);
          a2 = v256;
          v12 = v256[40];
          if ((v25 & 1) != 0)
          {
            LODWORD(v13) = *((_DWORD *)v256 + 82);
            goto LABEL_30;
          }
        }
        else
        {
          v12 = a2[40];
        }
        v20 = (v20 + 1) & v14;
        v18 = v12 + 24 * v20;
        v21 = *(WTF **)v18;
        if (!*(_QWORD *)v18)
          goto LABEL_29;
      }
      v12 = a2[40];
    }
LABEL_29:
    LODWORD(v13) = *((_DWORD *)a2 + 82);
    v18 = v12 + 24 * v13;
  }
  else
  {
    v18 = 24 * v13;
  }
LABEL_30:
  if (v12 + 24 * v13 == v18)
  {
    a5 = v251;
LABEL_43:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 8;
    goto LABEL_44;
  }
  v26 = a2[1];
  a5 = v251;
  if (!v26)
    goto LABEL_43;
  v27 = *(_QWORD *)(v26 + 8);
  if (!v27)
    goto LABEL_43;
  v28 = (WebCore::ScriptExecutionContext *)(v27 - 96);
  v29 = (WebCore::MessageChannel *)WTF::fastMalloc((WTF *)0x18);
  WebCore::MessageChannel::MessageChannel(v29, v28);
  v31 = *(_QWORD *)(v30 + 8);
  v245 = (uint64_t *)(v30 + 8);
  v246 = *(WebCore::MessagePort **)(v30 + 16);
  v244 = (uint64_t *)(v30 + 16);
  JSC::JSLockHolder::JSLockHolder();
  v32 = WebCore::convertDictionaryToJS((uint64_t)a1, (uint64_t)a1, (unsigned int *)v8);
  v265 = 0;
  v266 = 0;
  v274 = 0;
  v275 = 0;
  WebCore::SerializedScriptValue::create(a1, v32, (uint64_t)&v274, (uint64_t)&v265, 0, 0, 1, (uint64_t)&v269);
  if (!DWORD2(v270))
  {
    v34 = v269;
    v269 = 0;
LABEL_35:
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[DWORD2(v270)])(&v274, &v269);
    v35 = (uint64_t)v34;
    goto LABEL_36;
  }
  v34 = 0;
  v35 = 0;
  if (DWORD2(v270) != -1)
    goto LABEL_35;
LABEL_36:
  v36 = (uint64_t *)v265;
  if (HIDWORD(v266))
  {
    v242 = 8 * HIDWORD(v266);
    do
    {
      v36 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v36, v33)+ 1;
      v242 -= 8;
    }
    while (v242);
    v36 = (uint64_t *)v265;
    if (!v265)
    {
LABEL_38:
      if (v35)
        goto LABEL_40;
      goto LABEL_39;
    }
  }
  else if (!v265)
  {
    goto LABEL_38;
  }
  v265 = 0;
  LODWORD(v266) = 0;
  WTF::fastFree((WTF *)v36, v33);
  if (!v35)
  {
LABEL_39:
    v35 = WTF::fastMalloc((WTF *)0x100);
    *(_DWORD *)v35 = 1;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_OWORD *)(v35 + 56) = 0u;
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 136) = 0u;
    *(_OWORD *)(v35 + 152) = 0u;
    *(_OWORD *)(v35 + 168) = 0u;
    *(_OWORD *)(v35 + 184) = 0u;
    *(_OWORD *)(v35 + 200) = 0u;
    *(_OWORD *)(v35 + 216) = 0u;
    *(_OWORD *)(v35 + 232) = 0u;
    *(_QWORD *)(v35 + 248) = 0;
    *(_QWORD *)(v35 + 248) = WebCore::SerializedScriptValue::computeMemoryCost((WebCore::SerializedScriptValue *)v35);
  }
LABEL_40:
  MEMORY[0x19AEA32A0](&v268);
  v249 = v8[72];
  v250 = (unsigned int *)v35;
  if (v8[72])
  {
    v247 = *((_DWORD *)v8 + 17);
    v248 = (WTF *)*((_QWORD *)v8 + 7);
    *((_QWORD *)v8 + 7) = 0;
    *((_QWORD *)v8 + 8) = 0;
  }
  else
  {
    v247 = 0;
    v248 = 0;
  }
  v262 = (WebCore::AudioNode *)bmalloc::api::isoAllocate();
  v37 = *(_QWORD *)(v31 + 48);
  if (__ldaxr((unsigned __int8 *)v37))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v37))
  {
    goto LABEL_51;
  }
  MEMORY[0x19AEA534C](v37);
LABEL_51:
  ++*(_QWORD *)(v37 + 8);
  v39 = __ldxr((unsigned __int8 *)v37);
  if (v39 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v37))
      goto LABEL_56;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v37);
LABEL_56:
  *(_QWORD *)v262 = off_1E3368A80;
  *((_QWORD *)v262 + 1) = 0;
  *((_QWORD *)v262 + 2) = 0;
  *((_QWORD *)v262 + 3) = &unk_1E3368BA8;
  *((_BYTE *)v262 + 32) = 0;
  *((_DWORD *)v262 + 9) = 20;
  v40 = (char *)v262 + 40;
  v41 = (unsigned int *)(v256 + 3);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 + 1, v41));
  *((_QWORD *)v262 + 5) = v256;
  *((_DWORD *)v262 + 12) = 0;
  *(_OWORD *)((char *)v262 + 72) = 0u;
  *(_OWORD *)((char *)v262 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)v262 + 88) = _Q0;
  *((_DWORD *)v262 + 26) = 1;
  *(_QWORD *)((char *)v262 + 108) = 0;
  v47 = (*(uint64_t (**)(_QWORD *))(*v256 + 112))(v256);
  v48 = (unsigned int *)(v47 + 8);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 + 1, v48));
  *((_QWORD *)v262 + 15) = v47;
  v50 = v256;
  v51 = v256[9];
  v52 = v256[10] + 1;
  v256[10] = v52;
  v53 = v51 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v52;
  *((_QWORD *)v262 + 16) = v53;
  v54 = 2;
  *((_QWORD *)v262 + 17) = 2;
  *((_DWORD *)v262 + 36) = 0;
  v269 = "AudioNode";
  *(_QWORD *)&v270 = 10;
  *((_QWORD *)&v270 + 1) = "AudioNode";
  *(_QWORD *)&v271 = v53;
  if (*(_BYTE *)(v47 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v269);
    v50 = v256;
  }
  (*(void (**)(_QWORD *))(*v50 + 136))(v50);
  v55 = (float *)((char *)v262 + 152);
  v56 = v256[1];
  if (v56 && (v57 = *(_QWORD *)(v56 + 8)) != 0)
  {
    if (*(_BYTE *)(v57 + 178))
    {
      v58 = v57 - 96;
    }
    else
    {
      v59 = v57 - 288;
      v60 = *(_QWORD *)(v57 + 416);
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 8);
        if (v61)
LABEL_326:
          v59 = v61;
      }
      v58 = v59 + 192;
    }
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)v262 + 19) = &off_1E33A18C0;
  *((_QWORD *)v262 + 20) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v55, (WebCore::ScriptExecutionContext *)v58);
  *((_QWORD *)v262 + 19) = &off_1E33A0540;
  *((_QWORD *)v262 + 21) = 0;
  if (v58)
  {
    if (*(_BYTE *)(v58 + 278))
      goto LABEL_336;
    v265 = (WTF *)v55;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v58 + 128), (uint64_t *)&v265, (uint64_t)&v269);
  }
  *(_QWORD *)v262 = off_1E33695B8;
  *((_QWORD *)v262 + 3) = &unk_1E33696E8;
  *((_QWORD *)v262 + 19) = &unk_1E3369728;
  v62 = *a3;
  if (*a3)
    *(_DWORD *)v62 += 2;
  v63 = v262;
  *((_QWORD *)v262 + 22) = v62;
  v64 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v64 = 1;
  *(_QWORD *)(v64 + 8) = 0;
  *((_BYTE *)v262 + 200) = 0;
  *((_QWORD *)v262 + 23) = v64;
  *((_QWORD *)v262 + 24) = v31;
  *((_QWORD *)v262 + 30) = 0;
  *(_QWORD *)((char *)v262 + 229) = 0;
  *((_QWORD *)v262 + 27) = 0;
  *((_QWORD *)v262 + 28) = 0;
  *((_QWORD *)v262 + 26) = 0;
  v65 = *((unsigned int *)v8 + 6);
  *((_QWORD *)v262 + 31) = 0;
  *((_QWORD *)v262 + 32) = 0;
  v253 = (unsigned __int8 *)v262 + 200;
  *((_DWORD *)v262 + 65) = v65;
  if ((_DWORD)v65)
  {
    if (v65 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19553E3C0);
    }
    v66 = (void *)WTF::fastMalloc((WTF *)(8 * v65));
    v63 = v262;
    *((_DWORD *)v262 + 64) = v65;
    *((_QWORD *)v262 + 31) = v66;
    bzero(v66, 8 * *((unsigned int *)v262 + 65));
  }
  v67 = *((unsigned int *)v8 + 7);
  *((_QWORD *)v63 + 33) = 0;
  *((_QWORD *)v63 + 34) = 0;
  *((_DWORD *)v63 + 69) = v67;
  if ((_DWORD)v67)
  {
    if (!(v67 >> 29))
    {
      v68 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
      v63 = v262;
      *((_DWORD *)v262 + 68) = v67;
      *((_QWORD *)v262 + 33) = v68;
      bzero(v68, 8 * *((unsigned int *)v262 + 69));
      goto LABEL_81;
    }
LABEL_336:
    __break(0xC471u);
    JUMPOUT(0x19553E310);
  }
LABEL_81:
  *((_QWORD *)v63 + 35) = 0x7FF0000000000000;
  *((_BYTE *)v63 + 288) = v8[48];
  if (*((_DWORD *)v8 + 6))
  {
    v69 = 0;
    do
    {
      WebCore::AudioNode::addInput(v63);
      ++v69;
    }
    while (v69 < *((_DWORD *)v8 + 6));
  }
  if (*((_DWORD *)v8 + 7))
  {
    v70 = 0;
    do
    {
      if (v8[48])
      {
        if (v70 >= *((unsigned int *)v8 + 11))
          goto LABEL_334;
        v71 = *(unsigned int *)(*((_QWORD *)v8 + 4) + 4 * v70);
      }
      else
      {
        v71 = 1;
      }
      WebCore::AudioNode::addOutput(v262, (void *)v71);
      ++v70;
    }
    while (v70 < *((unsigned int *)v8 + 7));
  }
  (*(void (**)(WebCore::AudioNode *))(*(_QWORD *)v262 + 136))(v262);
  WebCore::ActiveDOMObject::suspendIfNeeded(v55);
  v269 = (const char *)v54;
  LODWORD(v270) = 0;
  WebCore::AudioNode::handleAudioNodeOptions((uint64_t)v262, (unsigned int *)v8, (unsigned int *)&v269, (uint64_t)&v265);
  if (!v267)
  {
    v77 = __ldaxr(v253);
    v243 = v29;
    if (v77)
    {
      __clrex();
      v78 = v262;
    }
    else
    {
      v78 = v262;
      if (!__stxr(1u, v253))
        goto LABEL_97;
    }
    MEMORY[0x19AEA534C]();
LABEL_97:
    v79 = *(unsigned int *)(v18 + 20);
    if ((_DWORD)v79)
    {
      v80 = *(_QWORD *)(v18 + 8);
      v81 = 24 * v79;
      while (1)
      {
        v82 = *((unsigned int *)v78 + 12);
        if ((_DWORD)v82 == -1)
          break;
        v83 = v78;
        v269 = (const char *)&v274;
        v84 = (_QWORD *)((uint64_t (*)(const char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v82])(&v269, v40);
        LODWORD(v54) = *(_DWORD *)(v80 + 8);
        v85 = *(float *)(v80 + 12);
        v86 = *(float *)(v80 + 16);
        v87 = *(_BYTE *)(v80 + 20);
        v88 = WTF::fastMalloc((WTF *)0xA0);
        v274 = WebCore::AudioParam::AudioParam(v88, v84, (_DWORD **)v80, v87, 1, *(float *)&v54, v85, v86);
        WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>((uint64_t *)(*((_QWORD *)v83 + 23) + 8), (WTF::StringImpl **)v80, (const WTF::StringImpl *)&v274, (uint64_t)&v269);
        v89 = (WebCore::AudioParam *)v274;
        v274 = 0;
        v78 = v83;
        if (v89)
        {
          if (*((_DWORD *)v89 + 16) == 1)
          {
            WebCore::AudioParam::~AudioParam(v89, v72);
            WTF::fastFree(v90, v91);
          }
          else
          {
            --*((_DWORD *)v89 + 16);
          }
        }
        v80 += 24;
        v81 -= 24;
        if (!v81)
          goto LABEL_106;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_334:
      __break(0xC471u);
      JUMPOUT(0x19553E3B8);
    }
LABEL_106:
    if (v249 && v247 && *(_QWORD *)(*((_QWORD *)v262 + 23) + 8))
    {
      v18 = (uint64_t)v248;
      v29 = (WebCore::MessageChannel *)"AudioParam";
      v31 = 11;
      v40 = &WebCore::LogMedia;
      v8 = "setValue";
      do
      {
        v92 = *(_QWORD *)(*((_QWORD *)v262 + 23) + 8);
        if (v92)
        {
          v93 = *(_DWORD *)(v92 - 8);
          v94 = *(_DWORD *)(*(_QWORD *)v18 + 16);
          v95 = v94 < 0x100 ? WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v18) : v94 >> 8;
          for (i = 0; ; v95 = i + v97)
          {
            v97 = v95 & v93;
            v98 = *(WTF **)(v92 + 16 * v97);
            if (v98 != (WTF *)-1)
            {
              if (!v98)
                goto LABEL_134;
              if ((WTF::equal(v98, *(const WTF::StringImpl **)v18, v73) & 1) != 0)
                break;
            }
            ++i;
          }
          v55 = *(float **)(v92 + 16 * v97 + 8);
          if (v55)
          {
            ++*((_DWORD *)v55 + 16);
            v99 = *(double *)(v18 + 8);
            *(float *)&v274 = v99;
            v100 = *((_QWORD *)v55 + 18);
            v61 = *((_QWORD *)v55 + 19);
            v269 = "AudioParam";
            *(_QWORD *)&v270 = 11;
            *((_QWORD *)&v270 + 1) = "setValue";
            *(_QWORD *)&v271 = v61;
            if (*(_BYTE *)(v100 + 12))
            {
              v61 = byte_1ECE7C490;
              if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v269, (float *)&v274);
            }
            v102 = v55[24];
            v103 = v55[25];
            if (v103 < v102)
            {
              __break(1u);
              goto LABEL_326;
            }
            if (v103 >= *(float *)&v274)
              v103 = *(float *)&v274;
            if (*(float *)&v274 >= v102)
              v102 = v103;
            v55[22] = v102;
            if (*((_DWORD *)v55 + 16) == 1)
            {
              WebCore::AudioParam::~AudioParam((WebCore::AudioParam *)v55, v72);
              WTF::fastFree(v104, v105);
            }
            else
            {
              --*((_DWORD *)v55 + 16);
            }
          }
        }
LABEL_134:
        v18 += 16;
      }
      while ((WTF *)v18 != (WTF *)((char *)v248 + 16 * v247));
    }
    v106 = v262;
    v107 = *(WTF::StringImpl ***)(*((_QWORD *)v262 + 23) + 8);
    if (v107)
    {
      v108 = *((unsigned int *)v107 - 1);
      v109 = &v107[2 * v108];
      if (*((_DWORD *)v107 - 3))
      {
        v110 = *(WTF::StringImpl ***)(*((_QWORD *)v262 + 23) + 8);
        v111 = (unsigned __int8 *)v262 + 200;
        if ((_DWORD)v108)
        {
          v112 = 16 * v108;
          v110 = *(WTF::StringImpl ***)(*((_QWORD *)v262 + 23) + 8);
          while ((unint64_t)*v110 + 1 <= 1)
          {
            v110 += 2;
            v112 -= 16;
            if (!v112)
            {
              v110 = v109;
              break;
            }
          }
        }
LABEL_147:
        if (v107)
          v107 += 2 * *((unsigned int *)v107 - 1);
        if (v107 != v110)
        {
          v254 = v109;
          v252 = v107;
          while (1)
          {
            v259 = v110;
            v113 = (WTF **)WTF::fastMalloc((WTF *)0x10);
            *v113 = 0;
            v113[1] = 0;
            WTF::fastAlignedFree(0, v114);
            v115 = (WTF *)WTF::fastAlignedMalloc((WTF *)0x20);
            v255 = v113;
            *v113 = v115;
            v113[1] = (WTF *)128;
            *(_OWORD *)v115 = 0u;
            *((_OWORD *)v115 + 1) = 0u;
            *((_OWORD *)v115 + 2) = 0u;
            *((_OWORD *)v115 + 3) = 0u;
            *((_OWORD *)v115 + 4) = 0u;
            *((_OWORD *)v115 + 5) = 0u;
            *((_OWORD *)v115 + 6) = 0u;
            *((_OWORD *)v115 + 7) = 0u;
            *((_OWORD *)v115 + 8) = 0u;
            *((_OWORD *)v115 + 9) = 0u;
            *((_OWORD *)v115 + 10) = 0u;
            *((_OWORD *)v115 + 11) = 0u;
            *((_OWORD *)v115 + 12) = 0u;
            *((_OWORD *)v115 + 13) = 0u;
            *((_OWORD *)v115 + 14) = 0u;
            *((_OWORD *)v115 + 15) = 0u;
            *((_OWORD *)v115 + 16) = 0u;
            *((_OWORD *)v115 + 17) = 0u;
            *((_OWORD *)v115 + 18) = 0u;
            *((_OWORD *)v115 + 19) = 0u;
            *((_OWORD *)v115 + 20) = 0u;
            *((_OWORD *)v115 + 21) = 0u;
            *((_OWORD *)v115 + 22) = 0u;
            *((_OWORD *)v115 + 23) = 0u;
            *((_OWORD *)v115 + 24) = 0u;
            *((_OWORD *)v115 + 25) = 0u;
            *((_OWORD *)v115 + 26) = 0u;
            *((_OWORD *)v115 + 27) = 0u;
            *((_OWORD *)v115 + 28) = 0u;
            *((_OWORD *)v115 + 29) = 0u;
            *((_OWORD *)v115 + 30) = 0u;
            *((_OWORD *)v115 + 31) = 0u;
            v118 = *((unsigned int *)v106 + 56);
            v117 = *((unsigned int *)v106 + 57);
            if (20 * v117 < 19 * (unint64_t)v118
              && (v118 > 2 * (int)v117 || !*((_BYTE *)v106 + 236)))
            {
              goto LABEL_200;
            }
            v119 = (_DWORD)v118 ? 2 * v118 : 8;
            v120 = (WTF *)*((_QWORD *)v106 + 27);
            v121 = WTF::fastZeroedMalloc((WTF *)(16 * v119));
            *((_QWORD *)v106 + 27) = v121;
            *((_DWORD *)v106 + 56) = v119;
            v122 = (~(v121 << 32) + v121) ^ ((unint64_t)(~(v121 << 32) + v121) >> 22);
            v123 = 9 * ((v122 + ~(v122 << 13)) ^ ((v122 + ~(v122 << 13)) >> 8));
            v124 = (v123 ^ (v123 >> 15)) + ~((v123 ^ (v123 >> 15)) << 27);
            *((_DWORD *)v106 + 58) = (v124 >> 31) ^ v124;
            *((_BYTE *)v106 + 236) = 0;
            if ((_DWORD)v118)
              break;
            if (v120)
              goto LABEL_199;
            LODWORD(v118) = 8;
LABEL_200:
            v161 = *((_DWORD *)v106 + 58);
            v162 = *((_DWORD *)*v259 + 4);
            if (v162 < 0x100)
              v163 = WTF::StringImpl::hashSlowCase(*v259);
            else
              v163 = v162 >> 8;
            v164 = v118 - 1;
            v165 = (v163 ^ v161) & (v118 - 1);
            v166 = *((_QWORD *)v106 + 27);
            v167 = v166 + 16 * v165;
            v168 = *(WTF **)v167;
            if (*(_QWORD *)v167)
            {
              v169 = 0;
              while (1)
              {
                v170 = *((_DWORD *)v168 + 4);
                v171 = v170 < 0x100 ? WTF::StringImpl::hashSlowCase(v168) : v170 >> 8;
                v172 = (v165 + v118 - ((v171 ^ v161) & v164)) & v164;
                if (v169 > v172)
                  break;
                if (v171 == v163 && (WTF::equal(*(WTF **)v167, *v259, v116) & 1) != 0)
                {
                  WTF::fastAlignedFree(*v255, v72);
                  WTF::fastFree((WTF *)v255, v198);
                  v111 = (unsigned __int8 *)v262 + 200;
                  v173 = v254;
                  v174 = v259;
                  goto LABEL_221;
                }
                v166 = *((_QWORD *)v106 + 27);
                v165 = ((_DWORD)v165 + 1) & v164;
                ++v169;
                v167 = v166 + 16 * v165;
                v168 = *(WTF **)v167;
                if (!*(_QWORD *)v167)
                {
                  v173 = v254;
                  v174 = v259;
                  if (v169 >= 0x80)
                    *((_BYTE *)v106 + 236) = 1;
                  v111 = (unsigned __int8 *)v262 + 200;
                  goto LABEL_216;
                }
              }
              if (v169 >= 0x80)
                *((_BYTE *)v106 + 236) = 1;
              v179 = *(WTF **)v167;
              *(_QWORD *)v167 = 0;
              v180 = v166 + 16 * v165;
              v183 = *(_QWORD *)(v180 + 8);
              v181 = (WTF ***)(v180 + 8);
              v182 = v183;
              *v181 = 0;
              *(_QWORD *)v167 = 0;
              *(_QWORD *)(v167 + 8) = 0;
              v184 = *v259;
              if (*v259)
                *(_DWORD *)v184 += 2;
              *(_QWORD *)v167 = v184;
              v185 = *v181;
              *v181 = v255;
              if (v185)
              {
                WTF::fastAlignedFree(*v185, v72);
                WTF::fastFree((WTF *)v185, v186);
              }
              for (j = v165 + 1; ; j = v188 + 1)
              {
                v188 = j & v164;
                v189 = *((_QWORD *)v262 + 27);
                v190 = (WTF **)(v189 + 16 * v188);
                v191 = *v190;
                if (!*v190)
                  break;
                v192 = *((_DWORD *)v191 + 4);
                if (v192 < 0x100)
                  v193 = WTF::StringImpl::hashSlowCase(v191);
                else
                  v193 = v192 >> 8;
                if (++v172 > (((_DWORD)v188 + (_DWORD)v118 - ((v193 ^ v161) & v164)) & v164))
                {
                  v194 = *v190;
                  *v190 = 0;
                  v195 = v189 + 16 * v188;
                  v196 = *(_QWORD *)(v195 + 8);
                  *v190 = v179;
                  *(_QWORD *)(v195 + 8) = v182;
                  v182 = v196;
                  v179 = v194;
                  v172 = (v188 + v118 - ((v193 ^ v161) & v164)) & v164;
                }
              }
              *v190 = v179;
              v197 = v189 + 16 * v188;
              v177 = *(WTF ***)(v197 + 8);
              *(_QWORD *)(v197 + 8) = v182;
              v106 = v262;
              v111 = (unsigned __int8 *)v262 + 200;
              v173 = v254;
              v174 = v259;
              if (!v177)
                goto LABEL_220;
            }
            else
            {
              v111 = (unsigned __int8 *)v262 + 200;
              v173 = v254;
              v174 = v259;
LABEL_216:
              v175 = *v174;
              if (*v174)
                *(_DWORD *)v175 += 2;
              *(_QWORD *)v167 = v175;
              v176 = v166 + 16 * v165;
              v177 = *(WTF ***)(v176 + 8);
              *(_QWORD *)(v176 + 8) = v255;
              if (!v177)
                goto LABEL_220;
            }
            WTF::fastAlignedFree(*v177, v72);
            WTF::fastFree((WTF *)v177, v178);
            v174 = v259;
            v173 = v254;
LABEL_220:
            ++*((_DWORD *)v106 + 57);
LABEL_221:
            v110 = v173;
            if (v174 + 2 != v173)
            {
              v110 = v174 + 2;
              while ((unint64_t)*v110 + 1 <= 1)
              {
                v110 += 2;
                if (v110 == v173)
                {
                  v110 = v173;
                  break;
                }
              }
            }
            if (v110 == v252)
              goto LABEL_246;
          }
          v125 = 0;
          v260 = v118;
          v258 = v120;
          do
          {
            v126 = (char *)v120 + 16 * v125;
            v127 = *(WTF::StringImpl **)v126;
            if (*(_QWORD *)v126)
            {
              v263 = *((_DWORD *)v106 + 56);
              v128 = *((_DWORD *)v106 + 58);
              v129 = *((_DWORD *)v127 + 4);
              if (v129 < 0x100)
                v130 = WTF::StringImpl::hashSlowCase(v127);
              else
                v130 = v129 >> 8;
              v131 = v263 - 1;
              v132 = (v130 ^ v128) & (v263 - 1);
              v133 = *((_QWORD *)v106 + 27);
              v134 = v133 + 16 * v132;
              v135 = *(WTF::StringImpl **)v134;
              if (*(_QWORD *)v134)
              {
                v136 = 0;
                v261 = v125;
                v137 = (WTF ***)((char *)v120 + 16 * v125 + 8);
                do
                {
                  v138 = *((_DWORD *)v135 + 4);
                  if (v138 < 0x100)
                    v139 = WTF::StringImpl::hashSlowCase(v135);
                  else
                    v139 = v138 >> 8;
                  v140 = (v132 + v263 - ((v139 ^ v128) & v131)) & v131;
                  if (v136 > v140)
                  {
                    v141 = *(WTF::StringImpl **)v126;
                    v142 = *v137;
                    *(_QWORD *)v126 = 0;
                    *((_QWORD *)v126 + 1) = 0;
                    v143 = *(WTF::StringImpl **)v134;
                    *(_QWORD *)v134 = 0;
                    v144 = *(WTF::StringImpl **)v126;
                    *(_QWORD *)v126 = v143;
                    if (v144)
                    {
                      if (*(_DWORD *)v144 == 2)
                        WTF::StringImpl::destroy(v144, (WTF::StringImpl *)v72);
                      else
                        *(_DWORD *)v144 -= 2;
                    }
                    v145 = *(WTF ***)(v134 + 8);
                    *(_QWORD *)(v134 + 8) = 0;
                    v146 = *v137;
                    *v137 = v145;
                    if (v146)
                    {
                      WTF::fastAlignedFree(*v146, v72);
                      WTF::fastFree((WTF *)v146, v147);
                    }
                    v148 = *(WTF::StringImpl **)v134;
                    *(_QWORD *)v134 = v141;
                    v106 = v262;
                    if (v148)
                    {
                      if (*(_DWORD *)v148 == 2)
                        WTF::StringImpl::destroy(v148, (WTF::StringImpl *)v72);
                      else
                        *(_DWORD *)v148 -= 2;
                    }
                    v149 = *(WTF ***)(v134 + 8);
                    *(_QWORD *)(v134 + 8) = v142;
                    if (v149)
                    {
                      WTF::fastAlignedFree(*v149, v72);
                      WTF::fastFree((WTF *)v149, v150);
                    }
                    v136 = v140;
                  }
                  v132 = ((_DWORD)v132 + 1) & v131;
                  ++v136;
                  v133 = *((_QWORD *)v106 + 27);
                  v134 = v133 + 16 * v132;
                  v135 = *(WTF::StringImpl **)v134;
                }
                while (*(_QWORD *)v134);
                v120 = v258;
                v125 = v261;
              }
              v151 = *(WTF::StringImpl **)v126;
              *(_QWORD *)v126 = 0;
              v152 = *(WTF::StringImpl **)v134;
              *(_QWORD *)v134 = v151;
              v118 = v260;
              if (v152)
              {
                if (*(_DWORD *)v152 == 2)
                  WTF::StringImpl::destroy(v152, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v152 -= 2;
              }
              v153 = v133 + 16 * v132;
              v154 = (char *)v120 + 16 * v125;
              v155 = *((_QWORD *)v154 + 1);
              *((_QWORD *)v154 + 1) = 0;
              v156 = *(WTF ***)(v153 + 8);
              *(_QWORD *)(v153 + 8) = v155;
              if (v156)
              {
                WTF::fastAlignedFree(*v156, v72);
                WTF::fastFree((WTF *)v156, v157);
              }
            }
            v158 = (WTF **)*((_QWORD *)v126 + 1);
            *((_QWORD *)v126 + 1) = 0;
            if (v158)
            {
              WTF::fastAlignedFree(*v158, v72);
              WTF::fastFree((WTF *)v158, v159);
            }
            v160 = *(WTF::StringImpl **)v126;
            *(_QWORD *)v126 = 0;
            if (v160)
            {
              if (*(_DWORD *)v160 == 2)
                WTF::StringImpl::destroy(v160, (WTF::StringImpl *)v72);
              else
                *(_DWORD *)v160 -= 2;
            }
            ++v125;
          }
          while (v125 != v118);
LABEL_199:
          WTF::fastFree(v120, v72);
          LODWORD(v118) = *((_DWORD *)v106 + 56);
          goto LABEL_200;
        }
LABEL_246:
        v199 = __ldxr(v111);
        if (v199 == 1)
        {
          if (!__stlxr(0, v111))
          {
LABEL_251:
            if (*((_DWORD *)v106 + 21))
              (*(void (**)(_QWORD *, WebCore::AudioNode *))(*v256 + 104))(v256, v106);
            v200 = v256[13];
            v201 = (WTF::StringImpl *)WebCore::MessagePort::disentangle(v246, (WebCore::ScriptExecutionContext *)v72, v264);
            if (*(_DWORD *)(v200 + 68) && (v203 = **(_QWORD **)(v200 + 56)) != 0)
            {
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 24))(v203) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19553E358);
              }
              v204 = (unsigned int *)(v203 + 8);
              do
                v205 = __ldaxr(v204);
              while (__stlxr(v205 + 1, v204));
              WTF::String::isolatedCopy();
              v270 = v264[0];
              v271 = v264[1];
              v272 = v250;
              WebCore::AudioNode::ref(v106);
              v273 = v106;
              v206 = WTF::fastMalloc((WTF *)0x40);
              *(_QWORD *)v206 = &off_1E3369228;
              *(_QWORD *)(v206 + 8) = v269;
              v207 = v271;
              *(_OWORD *)(v206 + 16) = v270;
              *(_OWORD *)(v206 + 32) = v207;
              *(_QWORD *)(v206 + 48) = v272;
              v208 = v273;
              v268 = 0;
              v269 = 0;
              v272 = 0;
              v273 = 0;
              *(_QWORD *)(v206 + 56) = v208;
              v274 = v206;
              LOBYTE(v275) = 0;
              (*(void (**)(_QWORD, uint64_t *, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v203 + 40) + 48)
                                                                            + 32))(*(_QWORD *)(*(_QWORD *)(v203 + 40) + 48), &v274, &v268);
              v210 = v268;
              v268 = 0;
              v211 = v256;
              if (v210)
              {
                if (*(_DWORD *)v210 == 2)
                {
                  WTF::StringImpl::destroy(v210, v209);
                  v211 = v256;
                }
                else
                {
                  *(_DWORD *)v210 -= 2;
                }
              }
              v212 = v274;
              v274 = 0;
              if (v212)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
                v211 = v256;
              }
              v213 = v273;
              v273 = 0;
              if (v213)
              {
                WebCore::AudioNode::deref(v213);
                v211 = v256;
              }
              v214 = v272;
              v272 = 0;
              if (v214)
              {
                do
                {
                  v218 = __ldaxr(v214);
                  v219 = v218 - 1;
                }
                while (__stlxr(v219, v214));
                if (!v219)
                {
                  atomic_store(1u, v214);
                  WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v214 + 2), v209);
                  WTF::fastFree((WTF *)v214, v220);
                  v211 = v256;
                }
              }
              v201 = (WTF::StringImpl *)v269;
              v269 = 0;
              if (v201)
              {
                if (*(_DWORD *)v201 == 2)
                {
                  v201 = (WTF::StringImpl *)WTF::StringImpl::destroy(v201, v209);
                  v211 = v256;
                }
                else
                {
                  *(_DWORD *)v201 -= 2;
                }
              }
              do
              {
                v215 = __ldaxr(v204);
                v216 = v215 - 1;
              }
              while (__stlxr(v216, v204));
              if (!v216)
              {
                atomic_store(1u, (unsigned int *)(v203 + 8));
                v201 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
                v211 = v256;
              }
              v217 = v251;
            }
            else
            {
              v217 = v251;
              v211 = v256;
              if (v250)
              {
                do
                {
                  v224 = __ldaxr(v250);
                  v225 = v224 - 1;
                }
                while (__stlxr(v225, v250));
                if (!v225)
                {
                  atomic_store(1u, v250);
                  WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v250 + 2), v202);
                  v201 = (WTF::StringImpl *)WTF::fastFree((WTF *)v250, v226);
                  v211 = v256;
                }
              }
            }
            v221 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v221)
            {
              v222 = WTF::Thread::initializeCurrentTLS(v201);
              v211 = v256;
              v221 = v222;
            }
            if (v221 == v211[35])
            {
              v227 = *((_DWORD *)v211 + 72) + 1;
              goto LABEL_289;
            }
            if (__ldaxr((unsigned __int8 *)v211 + 292))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v211 + 292))
            {
LABEL_288:
              v211[35] = v221;
              v227 = 1;
LABEL_289:
              *((_DWORD *)v211 + 72) = v227;
              v228 = v211;
              WebCore::AudioWorkletNode::updatePullStatus(v106);
              v229 = *((_DWORD *)v228 + 72) - 1;
              *((_DWORD *)v228 + 72) = v229;
              v76 = v248;
              if (v229)
                goto LABEL_295;
              v228[35] = 0;
              v230 = (unsigned __int8 *)v228 + 292;
              v231 = __ldxr((unsigned __int8 *)v228 + 292);
              if (v231 == 1)
              {
                if (!__stlxr(0, v230))
                {
LABEL_295:
                  *(_QWORD *)v217 = v106;
                  *(_DWORD *)(v217 + 16) = 0;
                  if (v267)
                  {
                    v232 = v266;
                    v266 = 0;
                    v29 = v243;
                    if (v232)
                    {
                      if (*(_DWORD *)v232 == 2)
                        WTF::StringImpl::destroy(v232, v75);
                      else
                        *(_DWORD *)v232 -= 2;
                    }
                    v250 = 0;
                  }
                  else
                  {
                    v250 = 0;
                    v29 = v243;
                  }
                  goto LABEL_301;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v230);
              goto LABEL_295;
            }
            MEMORY[0x19AEA534C]();
            v211 = v256;
            goto LABEL_288;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v111);
        goto LABEL_251;
      }
      v110 = &v107[2 * v108];
    }
    else
    {
      v110 = 0;
      v108 = 0;
    }
    v111 = (unsigned __int8 *)v262 + 200;
    v109 = &v107[2 * v108];
    goto LABEL_147;
  }
  v74 = v266;
  *(_BYTE *)v251 = (_BYTE)v265;
  *(_QWORD *)(v251 + 8) = v74;
  *(_DWORD *)(v251 + 16) = 1;
  WebCore::AudioNode::deref(v262);
  v76 = v248;
LABEL_301:
  if (v249)
  {
    v233 = v29;
    if (v247)
    {
      v234 = 16 * v247;
      v235 = (WTF::StringImpl **)v76;
      do
      {
        v236 = *v235;
        *v235 = 0;
        if (v236)
        {
          if (*(_DWORD *)v236 == 2)
            WTF::StringImpl::destroy(v236, v75);
          else
            *(_DWORD *)v236 -= 2;
        }
        v235 += 2;
        v234 -= 16;
      }
      while (v234);
    }
    v29 = v233;
    if (v76)
      WTF::fastFree(v76, v75);
  }
  if (v250)
  {
    do
    {
      v237 = __ldaxr(v250);
      v238 = v237 - 1;
    }
    while (__stlxr(v238, v250));
    if (!v238)
    {
      atomic_store(1u, v250);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v250 + 2), v75);
      WTF::fastFree((WTF *)v250, v241);
    }
  }
  if (*(_DWORD *)v29 == 1)
  {
    WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v244, v75);
    WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v245, v239);
    WTF::fastFree(v29, v240);
  }
  else
  {
    --*(_DWORD *)v29;
  }
}

void WebCore::AudioWorkletNode::updatePullStatus(WebCore::AudioWorkletNode *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::BaseAudioContext *v10;
  WebCore::AudioWorkletNode *v11;
  WebCore::AudioWorkletNode *v12;
  _QWORD v13[2];
  char v14;

  v2 = *((unsigned int *)this + 21);
  if ((_DWORD)v2)
  {
    v3 = 0;
    while (1)
    {
      v4 = v3 >= v2 ? 0 : *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v3);
      v5 = *(_QWORD *)(v4 + 40);
      if (v5)
      {
        if (*(_DWORD *)(v5 - 12))
          break;
      }
      v6 = *(_QWORD *)(v4 + 64);
      if (v6)
      {
        if (*(_DWORD *)(v6 - 12))
          break;
      }
      if (v2 == ++v3)
        goto LABEL_11;
    }
    v9 = *((unsigned int *)this + 12);
    if ((_DWORD)v9 != -1)
    {
      v13[0] = &v12;
      v10 = (WebCore::BaseAudioContext *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v9])(v13, (char *)this + 40);
      WebCore::BaseAudioContext::removeAutomaticPullNode(v10, this);
      return;
    }
    goto LABEL_17;
  }
LABEL_11:
  v7 = *((unsigned int *)this + 12);
  if ((_DWORD)v7 == -1)
  {
LABEL_17:
    v11 = (WebCore::AudioWorkletNode *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::AudioWorkletNode::~AudioWorkletNode(v11);
    return;
  }
  v13[0] = &v12;
  v8 = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(v13, (char *)this + 40);
  v12 = this;
  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v8 + 208), (uint64_t *)&v12, (uint64_t)v13);
  if (v14)
    *(_BYTE *)(v8 + 382) = 1;
}

void WebCore::AudioWorkletNode::~AudioWorkletNode(WebCore::AudioWorkletNode *this)
{
  WebCore::ActiveDOMObject *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  void *v18;
  uint64_t v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  uint64_t v26;
  unsigned int **v27;
  unsigned int **v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WTF ***v35;
  WTF **v36;
  void *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  void *v40;
  WTF::StringImpl ***v41;
  WTF::StringImpl *v42;
  void *v43;
  void *v44;
  WebCore::AudioWorkletNode *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl **v47;
  char v48;

  *(_QWORD *)this = off_1E33695B8;
  *((_QWORD *)this + 3) = &unk_1E33696E8;
  *((_QWORD *)this + 19) = &unk_1E3369728;
  v2 = (WebCore::AudioWorkletNode *)((char *)this + 152);
  v3 = (unsigned __int8 *)this + 200;
  if (__ldaxr((unsigned __int8 *)this + 200))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 200);
LABEL_5:
  if (*((_QWORD *)this + 26))
  {
    v5 = *((unsigned int *)this + 12);
    if ((_DWORD)v5 == -1)
    {
      v45 = (WebCore::AudioWorkletNode *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::AudioWorkletNode::~AudioWorkletNode(v45);
      return;
    }
    v47 = &v46;
    v6 = *(_QWORD *)(((uint64_t (*)(WTF::StringImpl ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v47, (char *)this + 40)+ 104);
    if (*(_DWORD *)(v6 + 68))
    {
      v7 = **(_QWORD **)(v6 + 56);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19553E86CLL);
        }
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (WTF::StringImpl *)*((_QWORD *)this + 26);
        *((_QWORD *)this + 26) = 0;
        v11 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
        *v11 = (WTF::StringImpl *)&off_1E33692F8;
        v11[1] = v10;
        v46 = 0;
        v47 = v11;
        v48 = 0;
        (*(void (**)(_QWORD, WTF::StringImpl ***, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v7 + 40)
                                                                                              + 48)
                                                                                + 32))(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 48), &v47, &v46);
        v13 = v46;
        v46 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = v47;
        v47 = 0;
        if (v14)
          (*((void (**)(WTF::StringImpl **))*v14 + 1))(v14);
        do
        {
          v15 = __ldaxr(v8);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v8));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)(v7 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
      }
    }
  }
  v17 = __ldxr(v3);
  if (v17 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_25;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_25:
  (*(void (**)(WebCore::AudioWorkletNode *))(*(_QWORD *)this + 144))(this);
  v19 = *((unsigned int *)this + 69);
  if ((_DWORD)v19)
  {
    v20 = (unsigned int **)*((_QWORD *)this + 33);
    v21 = &v20[v19];
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v47 = (WTF::StringImpl **)v22;
          WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v47, v18);
        }
      }
      ++v20;
    }
    while (v20 != v21);
  }
  v25 = (WTF *)*((_QWORD *)this + 33);
  if (v25)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v25, v18);
  }
  v26 = *((unsigned int *)this + 65);
  if ((_DWORD)v26)
  {
    v27 = (unsigned int **)*((_QWORD *)this + 31);
    v28 = &v27[v26];
    do
    {
      v29 = *v27;
      *v27 = 0;
      if (v29)
      {
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v29);
          v47 = (WTF::StringImpl **)v29;
          WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v47, v18);
        }
      }
      ++v27;
    }
    while (v27 != v28);
  }
  v32 = (WTF *)*((_QWORD *)this + 31);
  if (v32)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v32, v18);
  }
  v33 = (WTF *)*((_QWORD *)this + 27);
  if (v33)
  {
    v34 = *((unsigned int *)this + 56);
    if ((_DWORD)v34)
    {
      v35 = (WTF ***)((char *)v33 + 8);
      do
      {
        v36 = *v35;
        *v35 = 0;
        if (v36)
        {
          WTF::fastAlignedFree(*v36, v18);
          WTF::fastFree((WTF *)v36, v37);
        }
        v38 = (WTF::StringImpl *)*(v35 - 1);
        *(v35 - 1) = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
          else
            *(_DWORD *)v38 -= 2;
        }
        v35 += 2;
        --v34;
      }
      while (v34);
    }
    WTF::fastFree(v33, v18);
  }
  v39 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v39)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v39 + 8), v18);
  WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)this + 24, v18);
  v41 = (WTF::StringImpl ***)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(v41 + 1, v40);
      WTF::fastFree((WTF *)v41, v44);
    }
    else
    {
      --*(_DWORD *)v41;
    }
  }
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v40);
  WebCore::AudioNode::~AudioNode(this, v43);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::AudioWorkletNode::~AudioWorkletNode(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::AudioWorkletNode::~AudioWorkletNode(WebCore::AudioWorkletNode *this)
{
  WebCore::AudioWorkletNode::~AudioWorkletNode((WebCore::AudioWorkletNode *)((char *)this - 24));
}

{
  WebCore::AudioWorkletNode::~AudioWorkletNode((WebCore::AudioWorkletNode *)((char *)this - 152));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::AudioWorkletNode::~AudioWorkletNode((WebCore::AudioWorkletNode *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::AudioWorkletNode::~AudioWorkletNode((WebCore::AudioWorkletNode *)((char *)this - 152));
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::AudioWorkletNode::process(WebCore::AudioWorkletNode *this, void *a2)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  unint64_t StatusReg;
  uint64_t v8;
  unint64_t v9;
  unint64_t k;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t m;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  unint64_t v20;
  unint64_t n;
  uint64_t v22;
  int v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int **v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int **v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  const WTF::StringImpl *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  WebCore::AudioUtilities *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  WTF::StringImpl *v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  _BOOL4 hasSampleAccurateValues;
  uint64_t v75;
  float *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  unint64_t v83;
  uint64_t v84;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t i;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t j;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned __int8 *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  char v107;
  char *v108;

  v4 = (unsigned __int8 *)this + 200;
  do
  {
    while (1)
    {
      v5 = *v4;
      if ((v5 & 1) != 0)
      {
        v92 = *((unsigned int *)this + 21);
        if ((_DWORD)v92)
        {
          for (i = 0; i < v92; ++i)
          {
            if (i >= v92)
              v94 = 0;
            else
              v94 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * i);
            if (*(_BYTE *)(v94 + 32))
              v95 = 24;
            else
              v95 = 16;
            v96 = *(_QWORD *)(v94 + v95);
            v97 = *(unsigned int *)(v96 + 28);
            if ((_DWORD)v97)
            {
              for (j = 0; j < v97; ++j)
              {
                v99 = *(_QWORD *)(*(_QWORD *)(v96 + 16) + 8 * j);
                if (!*(_BYTE *)(v99 + 24))
                {
                  *(_BYTE *)(v99 + 24) = 1;
                  v100 = *(_QWORD *)(v99 + 8);
                  v101 = (_QWORD *)(v99 + 16);
                  if (v100)
                  {
                    v101 = (_QWORD *)(v100 + 8);
                    v99 = *(_QWORD *)(v99 + 8);
                  }
                  bzero(*(void **)v99, 4 * *v101);
                  v97 = *(unsigned int *)(v96 + 28);
                }
              }
              v92 = *((unsigned int *)this + 21);
            }
          }
        }
        return;
      }
      v6 = __ldaxr(v4);
      if (v6 == v5)
        break;
      __clrex();
    }
  }
  while (__stxr(v5 | 1, v4));
  if (!*((_QWORD *)this + 26))
    goto LABEL_11;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 736);
  if (!v8)
    v8 = WTF::Thread::initializeCurrentTLS(0);
  if (v8 != *((_QWORD *)this + 30))
  {
LABEL_11:
    v9 = *((unsigned int *)this + 21);
    if ((_DWORD)v9)
    {
      for (k = 0; k < v9; ++k)
      {
        if (k >= v9)
          v11 = 0;
        else
          v11 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * k);
        if (*(_BYTE *)(v11 + 32))
          v12 = 24;
        else
          v12 = 16;
        v13 = *(_QWORD *)(v11 + v12);
        v14 = *(unsigned int *)(v13 + 28);
        if ((_DWORD)v14)
        {
          for (m = 0; m < v14; ++m)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * m);
            if (!*(_BYTE *)(v16 + 24))
            {
              *(_BYTE *)(v16 + 24) = 1;
              v17 = *(_QWORD *)(v16 + 8);
              v18 = (_QWORD *)(v16 + 16);
              if (v17)
              {
                v18 = (_QWORD *)(v17 + 8);
                v16 = *(_QWORD *)(v16 + 8);
              }
              bzero(*(void **)v16, 4 * *v18);
              v14 = *(unsigned int *)(v13 + 28);
            }
          }
          v9 = *((unsigned int *)this + 21);
        }
      }
    }
    goto LABEL_28;
  }
  LODWORD(v20) = *((_DWORD *)this + 17);
  if ((_DWORD)v20)
  {
    for (n = 0; n < v20; ++n)
    {
      if (v20 <= n)
      {
        v23 = MEMORY[0x1C];
        if (!MEMORY[0x1C])
        {
LABEL_48:
          if (n >= *((unsigned int *)this + 65))
            goto LABEL_165;
          v25 = 0;
          v26 = (unsigned int **)(*((_QWORD *)this + 31) + 8 * n);
          goto LABEL_50;
        }
        v22 = 0;
      }
      else
      {
        v22 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * n);
        v23 = *(_DWORD *)(v22 + 28);
        if (!v23)
          goto LABEL_48;
      }
      if (v23 == 1 && !*(_DWORD *)(*(_QWORD *)(v22 + 64) + 140))
      {
        v31 = **(_QWORD **)(v22 + 16);
        v32 = *(unsigned __int8 *)(v31 + 32);
        v33 = (unsigned int **)(v31 + 24);
        v24 = (unsigned int **)(v31 + 16);
        if (v32)
          v24 = v33;
      }
      else
      {
        v24 = (unsigned int **)(v22 + 80);
      }
      if (n >= *((unsigned int *)this + 65))
        goto LABEL_165;
      v25 = *v24;
      v26 = (unsigned int **)(*((_QWORD *)this + 31) + 8 * n);
      if (v25)
      {
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 + 1, v25));
      }
LABEL_50:
      v28 = *v26;
      *v26 = v25;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          v108 = (char *)v28;
          WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v108, a2);
        }
      }
      v20 = *((unsigned int *)this + 17);
    }
  }
  LODWORD(v34) = *((_DWORD *)this + 21);
  if ((_DWORD)v34)
  {
    v35 = 0;
    do
    {
      if (v35 >= *((unsigned int *)this + 69))
      {
        __break(0xC471u);
        JUMPOUT(0x19553F07CLL);
      }
      if (v34 <= v35)
        v36 = 0;
      else
        v36 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v35);
      if (*(_BYTE *)(v36 + 32))
        v37 = 24;
      else
        v37 = 16;
      v38 = *(unsigned int **)(v36 + v37);
      v39 = *((_QWORD *)this + 33);
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 + 1, v38));
      v41 = *(unsigned int **)(v39 + 8 * v35);
      *(_QWORD *)(v39 + 8 * v35) = v38;
      if (v41)
      {
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v41);
          v108 = (char *)v41;
          WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v108, a2);
        }
      }
      ++v35;
      v34 = *((unsigned int *)this + 21);
    }
    while (v35 < v34);
  }
  v44 = *((unsigned int *)this + 12);
  if ((_DWORD)v44 == -1)
  {
LABEL_164:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_165:
    __break(0xC471u);
    JUMPOUT(0x19553F074);
  }
  v108 = &v107;
  if (*(_BYTE *)(((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v44])(&v108)
                + 384))
  {
    v46 = *((unsigned int *)this + 17);
    if ((_DWORD)v46)
    {
      v47 = 0;
      while (v47 < *((unsigned int *)this + 65))
      {
        v48 = *((_QWORD *)this + 31);
        v49 = *(_QWORD *)(v48 + 8 * v47);
        if (v49 && *(_DWORD *)(v49 + 28))
        {
          v50 = 0;
          do
          {
            v51 = *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8 * v50);
            *(_BYTE *)(v51 + 24) = 0;
            v52 = *(WebCore::AudioUtilities **)v51;
            if (!*(_QWORD *)v51)
              v52 = **(WebCore::AudioUtilities ***)(v51 + 8);
            WebCore::AudioUtilities::applyNoise(v52, *(float **)(v51 + 16), 0.01);
            ++v50;
            v49 = *(_QWORD *)(v48 + 8 * v47);
          }
          while (v50 < *(unsigned int *)(v49 + 28));
          v46 = *((unsigned int *)this + 17);
        }
        if (++v47 >= v46)
          goto LABEL_88;
      }
LABEL_167:
      __break(0xC471u);
      JUMPOUT(0x19553F068);
    }
  }
LABEL_88:
  v53 = *(_QWORD *)(*((_QWORD *)this + 23) + 8);
  v102 = v4;
  v103 = StatusReg;
  if (!v53)
  {
    v56 = 0;
    v54 = 0;
LABEL_97:
    v55 = v53 + 16 * v54;
    goto LABEL_98;
  }
  v54 = *(unsigned int *)(v53 - 4);
  v55 = v53 + 16 * v54;
  if (!*(_DWORD *)(v53 - 12))
  {
    v56 = v53 + 16 * v54;
    goto LABEL_97;
  }
  v56 = *(_QWORD *)(*((_QWORD *)this + 23) + 8);
  if ((_DWORD)v54)
  {
    v57 = 16 * v54;
    v56 = *(_QWORD *)(*((_QWORD *)this + 23) + 8);
    while ((unint64_t)(*(_QWORD *)v56 + 1) <= 1)
    {
      v56 += 16;
      v57 -= 16;
      if (!v57)
      {
        v56 = v55;
        break;
      }
    }
  }
LABEL_98:
  if (v53)
    v53 += 16 * *(unsigned int *)(v53 - 4);
  if (v53 != v56)
  {
    v104 = v53;
    v105 = (unint64_t)a2;
    do
    {
      v58 = *(_QWORD *)(v56 + 8);
      v59 = *((_DWORD *)this + 56);
      v60 = *((_DWORD *)this + 58);
      v61 = *(WTF::StringImpl **)(v58 + 80);
      v62 = *((_DWORD *)v61 + 4);
      v63 = v62 < 0x100 ? WTF::StringImpl::hashSlowCase(v61) : v62 >> 8;
      v64 = 0;
      v65 = v59 - 1;
      v66 = v63 ^ v60;
      while (1)
      {
        v67 = *((_QWORD *)this + 27);
        v68 = v66 & v65;
        v69 = (WTF::StringImpl **)(v67 + 16 * v68);
        v70 = *((_DWORD *)*v69 + 4);
        v71 = v70 < 0x100 ? WTF::StringImpl::hashSlowCase(*v69) : v70 >> 8;
        if (v71 == v63 && (WTF::equal(*v69, *(const WTF::StringImpl **)(v58 + 80), v45) & 1) != 0)
          break;
        v66 = v68 + 1;
        ++v64;
      }
      v72 = *(_QWORD *)(v67 + 16 * v68 + 8);
      v73 = v105;
      if (*(_QWORD *)(v72 + 8) < v105)
        goto LABEL_167;
      hasSampleAccurateValues = WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v56 + 8));
      v75 = *(_QWORD *)(v56 + 8);
      if (hasSampleAccurateValues && !*(_BYTE *)(v75 + 104))
      {
        v80 = *(_QWORD *)(v75 + 8);
        v77 = v104;
        if (v80)
        {
          v81 = *(_QWORD *)(v80 + 8);
          if (v81)
          {
            v82 = *(float **)v72;
            v83 = atomic_load((unint64_t *)(v81 + 240));
            v84 = *(_QWORD *)(v103 + 736);
            if (!v84)
              v84 = WTF::Thread::initializeCurrentTLS(0);
            if ((_DWORD)v105)
            {
              if (v82 && v84 == v83)
                WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v75, v82, v105, *(_BYTE *)(v75 + 104) == 0);
            }
          }
        }
      }
      else
      {
        v76 = *(float **)v72;
        LODWORD(v108) = 0;
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v75, (float *)&v108, 1u, 0);
        v77 = v104;
        if (v105)
        {
          v78 = (int)v108;
          do
          {
            *(_DWORD *)v76++ = v78;
            --v73;
          }
          while (v73);
        }
      }
      v79 = v56 + 16;
      v56 = v55;
      if (v79 != v55)
      {
        v56 = v79;
        while ((unint64_t)(*(_QWORD *)v56 + 1) <= 1)
        {
          v56 += 16;
          if (v56 == v55)
          {
            v56 = v55;
            break;
          }
        }
      }
    }
    while (v56 != v77);
  }
  v106 = 0;
  v4 = v102;
  if (!WebCore::AudioWorkletProcessor::process(*((_QWORD *)this + 26), (WebCore::AudioWorkletNode *)((char *)this + 248), (uint64_t *)this + 33, (uint64_t)this + 216, &v106))
  {
    if (v106)
    {
      WebCore::AudioNode::ref(this);
      v87 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v87 = &off_1E3369320;
      *(_QWORD *)(v87 + 8) = this;
      *(_QWORD *)(v87 + 16) = this;
      *(_DWORD *)(v87 + 24) = 1;
      v108 = (char *)v87;
      WTF::callOnMainThread();
      v88 = (uint64_t)v108;
      v108 = 0;
      if (v88)
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
    }
    v89 = *((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = 0;
    if (v89)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v89 + 8), v86);
    *((_QWORD *)this + 35) = 0;
    if (*((_DWORD *)this + 21))
    {
      v90 = *((unsigned int *)this + 12);
      if ((_DWORD)v90 != -1)
      {
        v108 = &v107;
        v91 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v90])(&v108, (char *)this + 40);
        *((_BYTE *)this + 114) = 1;
        *(_BYTE *)(v91 + 383) = 1;
        goto LABEL_28;
      }
      goto LABEL_164;
    }
  }
LABEL_28:
  v19 = __ldxr(v4);
  if (v19 == 1)
  {
    if (!__stlxr(0, v4))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

BOOL WebCore::AudioWorkletProcessor::process(uint64_t a1, JSC::MarkedVectorBase *a2, uint64_t *a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  __n128 v17;
  JSC::JSObject *v18;
  uint64_t v19;
  JSC *v20;
  JSC::JSArray *v21;
  int v22;
  unint64_t v23;
  JSC::MarkedVectorBase *v24;
  unint64_t v25;
  JSC::JSObject *v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::Structure *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  JSC::JSObject *v37;
  JSC::JSGlobalObject *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t SlowCase;
  unint64_t v48;
  uint64_t v49;
  JSValue v50;
  void (*v51)(WTF::StringImpl **);
  unint64_t v52;
  JSValue v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *Allocator;
  uint64_t v57;
  uint64_t v58;
  int v59;
  JSC::JSObject *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  JSC::JSObject *v68;
  __n128 v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  JSC::JSArray *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  JSC::JSObject *v80;
  JSC::JSGlobalObject *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  JSValue v86;
  void (*v87)(WTF::StringImpl **);
  unint64_t v88;
  JSValue v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  JSC::JSCell *v100;
  JSC::JSObject *Object;
  unint64_t v102;
  size_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  JSC::MarkedVectorBase *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t IndexQuickly;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  const void *v127;
  unint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  char v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl **v155;
  uint64_t v156;
  unint64_t v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  float *v160;
  unsigned int v161;
  uint64_t v162;
  char v163;
  WTF::StringImpl *v164;
  int v165;
  const void *v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD *v183;
  unsigned __int16 *v184;
  uint64_t v185;
  unsigned int v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned __int8 *v211;
  int v212;
  uint64_t v213;
  unsigned __int8 *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  int v222;
  int v223;
  uint64_t v224;
  unsigned int v225;
  BOOL v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t MoreOutOfLineStorage;
  JSC::Heap *v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  JSC::Heap *v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  unint64_t v263;
  int v264;
  int v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  uint64_t v274;
  unsigned __int8 *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  int v283;
  int v284;
  unint64_t v285;
  int v286;
  uint64_t v287;
  unsigned __int8 *v288;
  uint64_t v289;
  unsigned int v290;
  unsigned int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  JSC::Heap *v296;
  const JSCell *v297;
  unsigned __int8 *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  int v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  int v308;
  int v309;
  uint64_t *v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  JSC::Heap *v319;
  int v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  JSC::Heap *v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  void (*v329)(WTF::StringImpl **);
  unint64_t v330;
  int v331;
  int v332;
  unint64_t v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  unsigned __int8 *v341;
  uint64_t v342;
  unsigned int v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  JSC::Structure *v349;
  WTF::StringImpl *v350;
  WTF::StringImpl *v351;
  uint64_t v352;
  void *v353;
  _BOOL8 v354;
  JSC::JSObject *v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  WTF::StringImpl *v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  WTF::StringImpl *v363;
  uint64_t v364;
  WTF::StringImpl *v365;
  unint64_t v366;
  float *v367;
  unsigned int v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t *v373;
  const void *v374;
  unint64_t v375;
  unint64_t v376;
  char v377;
  unint64_t v378;
  char v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  JSValue v383;
  JSValue v384;
  JSValue v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t IndexQuicklyForTypedArray;
  unint64_t v397;
  void *v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  void **v402;
  _QWORD *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t i;
  uint64_t v407;
  void **v408;
  _QWORD *v409;
  uint64_t *v410;
  unint64_t v412;
  _QWORD *v413;
  unint64_t v414;
  uint64_t v415;
  BOOL v416;
  int v417;
  uint64_t v418;
  int *v419;
  int v420;
  unsigned __int8 *v421;
  unsigned __int8 *v422;
  int v423;
  uint64_t v424;
  WTF::StringImpl **v425;
  _BYTE *v426;
  uint64_t v427;
  WTF::StringImpl **v428;
  _QWORD *v429;
  uint64_t v430;
  WTF::StringImpl **v431;
  unsigned __int8 *v432;
  JSC::MarkedVectorBase *v433;
  uint64_t *v434;
  JSC::JSObject *v435;
  JSC::JSObject *v436;
  JSC::JSObject *v437;
  unint64_t v438;
  JSC::JSObject *v439;
  JSC::JSObject *v440;
  JSC::JSObject *v441;
  unint64_t v442;
  char v443[8];
  uint64_t v444;
  WTF *v445;
  _OWORD v446[4];
  uint64_t v447;
  char v448[8];
  void *v449;
  unint64_t v450;
  int v451;
  char v452;
  __int16 v453;
  char v454;
  uint64_t v455;
  WTF::StringImpl *v456;
  JSC *v457;
  JSC::JSObject *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  int v462;

  v10 = WebCore::ScriptExecutionContext::globalObject(*(WebCore::ScriptExecutionContext **)(a1 + 16));
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSDOMGlobalObject::s_info && v13 != 0);
  }
  if (!v12)
    return 0;
  v433 = a2;
  v434 = a3;
  v426 = a5;
  v427 = a4;
  v442 = v10;
  v439 = *(JSC::JSObject **)(v10 + 56);
  MEMORY[0x19AEA3294](v448);
  v443[0] = 0;
  v444 = 0x800000000;
  v429 = (_QWORD *)a1;
  v445 = (WTF *)((char *)v446 + 8);
  v17 = 0uLL;
  memset(v446, 0, sizeof(v446));
  v447 = 0;
  v18 = *(JSC::JSObject **)(a1 + 40);
  if (!v18)
  {
    v19 = *(_QWORD *)(a1 + 48);
    if (!v19 || !*(_QWORD *)v19 || (*(_BYTE *)(v19 + 8) & 3) != 0)
      goto LABEL_15;
    v18 = *(JSC::JSObject **)v19;
  }
  v437 = v18;
  if (((unint64_t)v18 & 0xFFFE000000000002) == 0 && (*((_BYTE *)v18 + 5) & 0xFE) == 0x24)
  {
    v111 = a2;
    v54 = (_QWORD *)a1;
    if (!*((_DWORD *)a2 + 3))
      goto LABEL_68;
    v112 = 0;
    v113 = MEMORY[0x1E0CC10F8];
    while (1)
    {
      v114 = *(_QWORD *)v111;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v437, v112, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get(v437, (JSC::JSGlobalObject *)v442, v112);
      if ((IndexQuickly & 0xFFFE000000000002) != 0)
        v116 = 0;
      else
        v116 = (*(_BYTE *)(IndexQuickly + 5) & 0xFE) == 0x24 ? IndexQuickly : 0;
      v117 = *(_QWORD *)(v114 + 8 * v112);
      if (v117)
      {
        v118 = *(unsigned int *)(v117 + 28);
        if (!v116)
          break;
      }
      else
      {
        v118 = 0;
        if (!v116)
          break;
      }
      v119 = (*(_BYTE *)(v116 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(v116 + 8) - 8) : 0;
      if (v119 != v118)
        break;
      if (v118)
      {
        v120 = 0;
        do
        {
          v121 = *(_QWORD *)(v114 + 8 * v112);
          if (v120 >= *(unsigned int *)(v121 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x195541EA4);
          }
          v122 = *(_QWORD *)(*(_QWORD *)(v121 + 16) + 8 * v120);
          v123 = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v116, v120, 0);
          if (!v123)
            v123 = JSC::JSObject::get((JSC::JSObject *)v116, (JSC::JSGlobalObject *)v442, v120);
          if ((v123 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v123 + 5) != 46)
            goto LABEL_15;
          if ((*(_BYTE *)(v123 + 40) & 7u) > 2)
          {
            LOBYTE(v456) = 0;
            LOBYTE(v457) = 0;
            v129 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v123, (WTF *)&v456);
            v124 = v130 ? v129 : 0;
          }
          else
          {
            v124 = *(_QWORD *)(v123 + 24);
          }
          if (v124 != *(_QWORD *)(v122 + 16))
            goto LABEL_15;
          v125 = *(_QWORD *)(v123 + 16);
          if (v125)
          {
            v126 = *(_QWORD *)(v113 + 56);
            if (v126)
            {
              if (*(_BYTE *)(v113 + 34) || !*MEMORY[0x1E0CC10F0])
                v125 = (v125 & 0x3FFFFFFFFLL) + v126;
            }
          }
          *(_BYTE *)(v122 + 24) = 0;
          v127 = *(const void **)v122;
          if (!*(_QWORD *)v122)
            v127 = **(const void ***)(v122 + 8);
          if ((*(_BYTE *)(v123 + 40) & 7u) > 2)
          {
            LOBYTE(v456) = 0;
            LOBYTE(v457) = 0;
            v131 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v123, (WTF *)&v456);
            if (v132)
              v128 = v131;
            else
              v128 = 0;
          }
          else
          {
            v128 = *(_QWORD *)(v123 + 24);
          }
          memcpy((void *)v125, v127, 4 * v128);
        }
        while (v118 != ++v120);
      }
      ++v112;
      v111 = v433;
      v54 = v429;
      if (v112 >= *((unsigned int *)v433 + 3))
        goto LABEL_68;
    }
  }
LABEL_15:
  v21 = v439;
  v20 = (JSC *)v442;
  v22 = *(_DWORD *)(v442 + 868);
  if (v22)
    v23 = 16 * (v22 & 0xFFFFFFFE);
  else
    v23 = 0;
  v24 = v433;
  v25 = JSC::JSArray::tryCreate(v439, v23, (JSC::Structure *)*((unsigned int *)v433 + 3), *((_DWORD *)v433 + 3), v17);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x195541CCCLL);
  }
  v28 = v25;
  if (*((_DWORD *)v433 + 3))
  {
    v29 = 0;
    v435 = (JSC::JSObject *)(v442 + 1832);
    v30 = v442 - 16;
    if ((v442 & 8) == 0)
      v30 = v442 & 0xFFFFFFFFFFFFC000 | 8;
    v425 = (WTF::StringImpl **)v30;
    v430 = v25;
    while (1)
    {
      v31 = *(_QWORD *)v24;
      v32 = *(_QWORD *)(*(_QWORD *)v24 + 8 * v29);
      if (v32)
        v33 = (JSC::Structure *)*(unsigned int *)(v32 + 28);
      else
        v33 = 0;
      v34 = *((_DWORD *)v20 + 217);
      if (v34)
        v35 = 16 * (v34 & 0xFFFFFFFE);
      else
        v35 = 0;
      v36 = JSC::JSArray::tryCreate(v21, v35, v33, v33, v27);
      if (!v36)
      {
        __break(0xC471u);
        JUMPOUT(0x195541878);
      }
      v38 = (JSC::JSGlobalObject *)v36;
      if ((_DWORD)v33)
        break;
LABEL_57:
      v20 = (JSC *)v442;
      JSC::objectConstructorFreeze((JSC *)v442, v38, v37);
      v28 = v430;
      v53.super.isa = v38;
      JSC::JSObject::setIndexQuickly(v430, v21, v29++, v53);
      v24 = v433;
      if (v29 >= *((unsigned int *)v433 + 3))
        goto LABEL_58;
    }
    v39 = 0;
    v40 = v33;
    while (1)
    {
      v41 = *(_QWORD *)(v31 + 8 * v29);
      if (v39 >= *(unsigned int *)(v41 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x195541DE8);
      }
      v42 = *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8 * v39);
      v43 = *(const void **)v42;
      if (!*(_QWORD *)v42)
        v43 = **(const void ***)(v42 + 8);
      v44 = *(unsigned int *)(v42 + 16);
      if ((*(_QWORD *)v435 & 1) != 0)
      {
        v51 = *(void (**)(WTF::StringImpl **))(*(_QWORD *)v435 & 0xFFFFFFFFFFFFFFFCLL);
        v456 = *v425;
        v457 = (JSC *)v442;
        v458 = (JSC::JSObject *)(v442 + 1832);
        v51(&v456);
      }
      v45 = *(_QWORD *)(v442 + 56);
      v449 = (void *)v45;
      MEMORY[0x19AEA375C](&v456, v45);
      if (v456)
        break;
      JSC::throwOutOfMemoryError();
      SlowCase = 0;
      if (v43)
      {
LABEL_45:
        v48 = *(_QWORD *)(SlowCase + 16);
        if (v48)
        {
          v49 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v49)
          {
            if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              v48 = (v48 & 0x3FFFFFFFFLL) + v49;
          }
        }
        memcpy((void *)v48, v43, 4 * v44);
      }
LABEL_50:
      v50.super.isa = (Class)SlowCase;
      JSC::JSObject::setIndexQuickly((uint64_t)v38, v21, v39++, v50);
      if (v40 == v39)
        goto LABEL_57;
    }
    v46 = *(_QWORD **)(v45 + 40464);
    if (!v46)
      v46 = (_QWORD *)JSC::GCClient::Heap::float32ArraySpaceSlow((JSC::GCClient::Heap *)(v45 + 37552));
    SlowCase = v46[3];
    if (SlowCase >= v46[4])
    {
      SlowCase = v46[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_42:
        *(_DWORD *)SlowCase = 0;
        JSC::JSArrayBufferView::JSArrayBufferView();
        JSC::JSArrayBufferView::finishCreation();
        v21 = v439;
        if (v43)
          goto LABEL_45;
        goto LABEL_50;
      }
      v52 = *(_QWORD *)(SlowCase + 8) ^ v46[6];
      v46[4] = SlowCase + HIDWORD(v52);
      v46[5] = SlowCase + (int)v52;
    }
    v46[3] = SlowCase + 48;
    goto LABEL_42;
  }
LABEL_58:
  JSC::objectConstructorFreeze(v20, (JSC::JSGlobalObject *)v28, v26);
  if ((v28 & 0xFFFE000000000002) != 0)
  {
    v54 = v429;
    v429[5] = v28;
    v380 = v429[6];
    if (!v380)
      goto LABEL_74;
    *(_QWORD *)(v380 + 8) = 3;
    v429[6] = 0;
  }
  else
  {
    v54 = v429;
    v429[5] = 0;
    if ((v28 & 8) != 0)
      v16 = (v28 - 112) | 1;
    else
      v16 = v28 & 0xFFFFFFFFFFFFC000;
    if ((v16 & 1) != 0)
      v55 = v16 + 47;
    else
      v55 = *(_QWORD *)v16 + 32;
    Allocator = *(_QWORD **)(v55 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v55 + 16) = *Allocator;
    *Allocator = v28;
    Allocator[1] = 0;
    Allocator[2] = 0;
    __dmb(0xAu);
    v57 = v429[6];
    v429[6] = Allocator;
    if (v57)
      *(_QWORD *)(v57 + 8) = 3;
  }
LABEL_68:
  v28 = v54[5];
  if (!v28)
  {
    v58 = v54[6];
    if (v58 && *(_QWORD *)v58)
    {
      if ((*(_BYTE *)(v58 + 8) & 3) != 0)
        v28 = 10;
      else
        v28 = *(_QWORD *)v58;
    }
    else
    {
      v28 = 10;
    }
  }
LABEL_74:
  v59 = v444;
  if ((_DWORD)v444 == HIDWORD(v444) || v445 != (WTF *)((char *)v446 + 8) && v445)
  {
    v383.super.isa = (Class)v28;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v444, v383) == 1)
      v443[0] = 1;
  }
  else
  {
    *((_QWORD *)v445 + v444) = v28;
    LODWORD(v444) = v59 + 1;
  }
  v60 = (JSC::JSObject *)v54[7];
  if ((v60 || (v61 = v54[8]) != 0 && (v60 = *(JSC::JSObject **)v61) != 0 && (*(_BYTE *)(v61 + 8) & 3) == 0)
    && ((unint64_t)v60 & 0xFFFE000000000002) == 0
    && (*((_BYTE *)v60 + 5) & 0xFE) == 0x24)
  {
    v133 = v434;
    v90 = v429;
    if (!*((_DWORD *)v434 + 3))
      goto LABEL_121;
    v134 = 0;
    v135 = MEMORY[0x1E0CC10F8];
    v136 = (_BYTE *)MEMORY[0x1E0CC10F0];
    while (1)
    {
      v137 = *v133;
      v138 = JSC::JSObject::tryGetIndexQuickly(v60, v134, 0);
      if (!v138)
        v138 = JSC::JSObject::get(v60, (JSC::JSGlobalObject *)v442, v134);
      if ((v138 & 0xFFFE000000000002) != 0 || (*(_BYTE *)(v138 + 5) & 0xFE) != 0x24)
        break;
      v139 = (*(_BYTE *)(v138 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v138 + 8) - 8) : 0;
      v140 = *(unsigned int *)(*(_QWORD *)(v137 + 8 * v134) + 28);
      if (v139 != (_DWORD)v140)
        break;
      if ((_DWORD)v140)
      {
        v141 = 0;
        do
        {
          v142 = *(_QWORD *)(v137 + 8 * v134);
          if (v141 >= *(unsigned int *)(v142 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x195541E9CLL);
          }
          v143 = *(_QWORD *)(*(_QWORD *)(v142 + 16) + 8 * v141);
          v144 = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v138, v141, 0);
          if (!v144)
            v144 = JSC::JSObject::get((JSC::JSObject *)v138, (JSC::JSGlobalObject *)v442, v141);
          if ((v144 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v144 + 5) != 46)
            goto LABEL_81;
          if ((*(_BYTE *)(v144 + 40) & 7u) > 2)
          {
            LOBYTE(v456) = 0;
            LOBYTE(v457) = 0;
            v149 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v144, (WTF *)&v456);
            v145 = v150 ? v149 : 0;
          }
          else
          {
            v145 = *(_QWORD *)(v144 + 24);
          }
          if (v145 != *(_QWORD *)(v143 + 16))
            goto LABEL_81;
          v146 = *(_QWORD *)(v144 + 16);
          if (v146)
          {
            v147 = *(_QWORD *)(v135 + 56);
            if (v147)
            {
              if (*(_BYTE *)(v135 + 34) || !*v136)
                v146 = (v146 & 0x3FFFFFFFFLL) + v147;
            }
          }
          if ((*(_BYTE *)(v144 + 40) & 7u) > 2)
          {
            LOBYTE(v456) = 0;
            LOBYTE(v457) = 0;
            v151 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v144, (WTF *)&v456);
            if (v152)
              v148 = v151;
            else
              v148 = 0;
          }
          else
          {
            v148 = *(_QWORD *)(v144 + 24);
          }
          bzero((void *)v146, 4 * v148);
        }
        while (v140 != ++v141);
      }
      ++v134;
      v133 = v434;
      v90 = v429;
      if (v134 >= *((unsigned int *)v434 + 3))
        goto LABEL_121;
    }
  }
LABEL_81:
  v62 = (unint64_t *)v439;
  v63 = v442;
  v64 = *(_DWORD *)(v442 + 868);
  if (v64)
    v65 = 16 * (v64 & 0xFFFFFFFE);
  else
    v65 = 0;
  v66 = v434;
  v67 = JSC::JSArray::tryCreate(v439, v65, (JSC::Structure *)*((unsigned int *)v434 + 3), *((_DWORD *)v434 + 3), v17);
  if (!v67)
  {
    __break(0xC471u);
    JUMPOUT(0x195541CECLL);
  }
  v70 = v67;
  if (*((_DWORD *)v434 + 3))
  {
    v71 = 0;
    v72 = (_QWORD *)(v442 + 1832);
    v73 = v442 - 16;
    if ((v442 & 8) == 0)
      v73 = v442 & 0xFFFFFFFFFFFFC000 | 8;
    v431 = (WTF::StringImpl **)v73;
    v436 = (JSC::JSObject *)v67;
    while (1)
    {
      v74 = (JSC::JSArray *)v62;
      v75 = *v66;
      v76 = *(unsigned int *)(*(_QWORD *)(*v66 + 8 * v71) + 28);
      v77 = *(_DWORD *)(v63 + 868);
      if (v77)
        v78 = 16 * (v77 & 0xFFFFFFFE);
      else
        v78 = 0;
      v79 = JSC::JSArray::tryCreate(v74, v78, (JSC::Structure *)*(unsigned int *)(*(_QWORD *)(*v66 + 8 * v71) + 28), *(_DWORD *)(*(_QWORD *)(*v66 + 8 * v71) + 28), v69);
      if (!v79)
      {
        __break(0xC471u);
        JUMPOUT(0x195541898);
      }
      v81 = (JSC::JSGlobalObject *)v79;
      if ((_DWORD)v76)
        break;
LABEL_110:
      JSC::objectConstructorFreeze((JSC *)v63, v81, v80);
      v70 = (uint64_t)v436;
      v62 = (unint64_t *)v439;
      v89.super.isa = v81;
      JSC::JSObject::setIndexQuickly((uint64_t)v436, v439, v71++, v89);
      v66 = v434;
      if (v71 >= *((unsigned int *)v434 + 3))
        goto LABEL_111;
    }
    v82 = 0;
    while (1)
    {
      if (v82 >= *(unsigned int *)(*(_QWORD *)(v75 + 8 * v71) + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x195541DF0);
      }
      if ((*v72 & 1) != 0)
      {
        v87 = *(void (**)(WTF::StringImpl **))(*v72 & 0xFFFFFFFFFFFFFFFCLL);
        v456 = *v431;
        v457 = (JSC *)v63;
        v458 = (JSC::JSObject *)(v442 + 1832);
        v87(&v456);
      }
      v83 = *(_QWORD *)(v63 + 56);
      v449 = (void *)v83;
      MEMORY[0x19AEA375C](&v456, v83);
      if (!v456)
      {
        JSC::throwOutOfMemoryError();
        v85 = 0;
        goto LABEL_105;
      }
      v84 = *(_QWORD **)(v83 + 40464);
      if (!v84)
        v84 = (_QWORD *)JSC::GCClient::Heap::float32ArraySpaceSlow((JSC::GCClient::Heap *)(v83 + 37552));
      v85 = v84[3];
      if (v85 >= v84[4])
      {
        v85 = v84[5];
        if ((v85 & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          v85 = JSC::LocalAllocator::allocateSlowCase();
          goto LABEL_103;
        }
        v88 = *(_QWORD *)(v85 + 8) ^ v84[6];
        v84[4] = v85 + HIDWORD(v88);
        v84[5] = v85 + (int)v88;
      }
      v84[3] = v85 + 48;
LABEL_103:
      *(_DWORD *)v85 = 0;
      JSC::JSArrayBufferView::JSArrayBufferView();
      JSC::JSArrayBufferView::finishCreation();
      v63 = v442;
LABEL_105:
      v86.super.isa = (Class)v85;
      JSC::JSObject::setIndexQuickly((uint64_t)v81, v439, v82++, v86);
      if (v76 == v82)
        goto LABEL_110;
    }
  }
LABEL_111:
  JSC::objectConstructorFreeze((JSC *)v63, (JSC::JSGlobalObject *)v70, v68);
  if ((v70 & 0xFFFE000000000002) != 0)
  {
    v95 = v427;
    v90 = v429;
    v429[7] = v70;
    v381 = v429[8];
    if (!v381)
      goto LABEL_126;
    *(_QWORD *)(v381 + 8) = 3;
    v429[8] = 0;
  }
  else
  {
    v90 = v429;
    v429[7] = 0;
    if ((v70 & 8) != 0)
      v16 = (v70 - 112) | 1;
    else
      v16 = v70 & 0xFFFFFFFFFFFFC000;
    if ((v16 & 1) != 0)
      v91 = v16 + 47;
    else
      v91 = *(_QWORD *)v16 + 32;
    v92 = *(_QWORD **)(v91 + 16);
    if (!v92)
      v92 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v91 + 16) = *v92;
    *v92 = v70;
    v92[1] = 0;
    v92[2] = 0;
    __dmb(0xAu);
    v93 = v429[8];
    v429[8] = v92;
    if (v93)
      *(_QWORD *)(v93 + 8) = 3;
  }
LABEL_121:
  v70 = v90[7];
  if (v70)
  {
    v62 = (unint64_t *)v439;
    v63 = v442;
    v95 = v427;
  }
  else
  {
    v94 = v90[8];
    v95 = v427;
    v62 = (unint64_t *)v439;
    if (v94 && (v70 = *(_QWORD *)v94) != 0)
    {
      v63 = v442;
      if ((*(_BYTE *)(v94 + 8) & 3) != 0)
        v70 = 10;
    }
    else
    {
      v70 = 10;
      v63 = v442;
    }
  }
LABEL_126:
  v96 = v62 + 5017;
  v97 = v444;
  if ((_DWORD)v444 == HIDWORD(v444) || v445 != (WTF *)((char *)v446 + 8) && v445)
  {
    v384.super.isa = (Class)v70;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v444, v384) == 1)
      v443[0] = 1;
  }
  else
  {
    *((_QWORD *)v445 + v444) = v70;
    LODWORD(v444) = v97 + 1;
  }
  v98 = v90[9];
  if ((v98 || (v99 = v90[10]) != 0 && (v98 = *(_QWORD *)v99) != 0 && (*(_BYTE *)(v99 + 8) & 3) == 0)
    && (v98 & 0xFFFE000000000002) == 0
    && *(unsigned __int8 *)(v98 + 5) >= 0x17u)
  {
    if (!*(_DWORD *)(v95 + 12))
      goto LABEL_636;
    v153 = *(unsigned int *)(v95 + 8);
    if ((_DWORD)v153)
    {
      v154 = 16 * v153;
      v155 = *(WTF::StringImpl ***)v95;
      while (!*v155)
      {
        v155 += 2;
        v154 -= 16;
        if (!v154)
          goto LABEL_636;
      }
    }
    else
    {
      v155 = *(WTF::StringImpl ***)v95;
    }
    v358 = *(_QWORD *)v95 + 16 * v153;
    if (v155 == (WTF::StringImpl **)v358)
      goto LABEL_636;
    v359 = *v155;
    v360 = MEMORY[0x1E0CC10F8];
    while (1)
    {
      if (v359)
      {
        if ((*((_BYTE *)v359 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v359 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase();
          v359 = v456;
        }
      }
      v361 = *(_DWORD *)v359;
      *(_DWORD *)v359 += 2;
      if (v361)
        *(_DWORD *)v359 = v361;
      else
        WTF::StringImpl::destroy(v359, (WTF::StringImpl *)v16);
      v362 = JSC::JSObject::get((JSC::Structure *)v98, (JSC::JSGlobalObject *)v63, (unint64_t)v359);
      if ((v362 & 0xFFFE000000000002) != 0)
        v364 = 0;
      else
        v364 = *(_BYTE *)(v362 + 5) == 46 ? v362 : 0;
      if (*(_DWORD *)v359 == 2)
      {
        WTF::StringImpl::destroy(v359, v363);
        if (!v364)
          break;
      }
      else
      {
        *(_DWORD *)v359 -= 2;
        if (!v364)
          break;
      }
      v365 = v155[1];
      v366 = *((_QWORD *)v365 + 1);
      if (v366 < 2)
      {
LABEL_678:
        LODWORD(v366) = 1;
      }
      else
      {
        v367 = *(float **)v365;
        v368 = 2;
        v369 = 1;
        while (v367[v369] == *v367)
        {
          v369 = v368;
          v163 = v366 > v368++;
          if (!v163)
            goto LABEL_678;
        }
      }
      if ((*(_BYTE *)(v364 + 40) & 7u) > 2)
      {
        LOBYTE(v456) = 0;
        LOBYTE(v457) = 0;
        v376 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v364, (WTF *)&v456);
        v370 = v377 ? v376 : 0;
      }
      else
      {
        v370 = *(_QWORD *)(v364 + 24);
      }
      if (v370 != v366)
        break;
      v371 = *(_QWORD *)(v364 + 16);
      if (v371 && (v372 = *(_QWORD *)(v360 + 56)) != 0)
      {
        v373 = v96;
        if (*(_BYTE *)(v360 + 34) || !*MEMORY[0x1E0CC10F0])
          v371 = (v371 & 0x3FFFFFFFFLL) + v372;
      }
      else
      {
        v373 = v96;
      }
      v374 = *(const void **)v155[1];
      if ((*(_BYTE *)(v364 + 40) & 7u) > 2)
      {
        LOBYTE(v456) = 0;
        LOBYTE(v457) = 0;
        v378 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v364, (WTF *)&v456);
        if (v379)
          v375 = v378;
        else
          v375 = 0;
      }
      else
      {
        v375 = *(_QWORD *)(v364 + 24);
      }
      memcpy((void *)v371, v374, 4 * v375);
      v155 += 2;
      v96 = v373;
      v95 = v427;
      if (v155 != (WTF::StringImpl **)v358)
      {
        while (1)
        {
          v359 = *v155;
          if (*v155)
            break;
          v155 += 2;
          if (v155 == (WTF::StringImpl **)v358)
            goto LABEL_636;
        }
        if (v155 != (WTF::StringImpl **)v358)
          continue;
      }
      goto LABEL_636;
    }
  }
  v100 = *(JSC::JSCell **)(v63 + 656);
  LODWORD(v456) = 24;
  if (((unint64_t)v100 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v100);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, v439);
  }
  v102 = *v96;
  if (*v96 >= v96[1])
  {
    v102 = v96[2];
    if ((v102 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v102 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_138;
    }
    v412 = *(_QWORD *)(v102 + 8) ^ v96[3];
    v96[1] = v102 + HIDWORD(v412);
    v96[2] = v102 + (int)v412;
  }
  *v96 = v102 + 128;
LABEL_138:
  *(_DWORD *)v102 = 0;
  MEMORY[0x19AEA4278](v102, v439, v63, v100, &v456, MEMORY[0x1E0CBE3A8], 0, 0);
  if (*((_BYTE *)v439 + 755))
    __dmb(0xAu);
  v103 = 8 * *(unsigned __int8 *)(v102 + 14);
  v104 = JSC::allocateCell<JSC::JSFinalObject>((uint64_t)v439, v103 + 16);
  v105 = *(_DWORD *)(v102 + 8);
  *(_BYTE *)(v104 + 4) = v105;
  v432 = (unsigned __int8 *)(v104 + 4);
  *(_DWORD *)v104 = v102 >> 4;
  *(_BYTE *)(v104 + 5) = BYTE1(v105);
  *(_BYTE *)(v104 + 6) = BYTE2(v105);
  *(_BYTE *)(v104 + 7) = HIBYTE(v105);
  *(_QWORD *)(v104 + 8) = 0;
  bzero((void *)(v104 + 16), v103);
  if (*((_BYTE *)v439 + 755))
    __dmb(0xAu);
  if (*(_DWORD *)(v95 + 12))
  {
    v108 = *(unsigned int *)(v95 + 8);
    if ((_DWORD)v108)
    {
      v109 = 16 * v108;
      v110 = *(WTF::StringImpl ***)v95;
      while (!*v110)
      {
        v110 += 2;
        v109 -= 16;
        if (!v109)
          goto LABEL_632;
      }
    }
    else
    {
      v110 = *(WTF::StringImpl ***)v95;
    }
    v156 = *(_QWORD *)v95 + 16 * v108;
    if (v110 != (WTF::StringImpl **)v156)
    {
      v440 = (JSC::JSObject *)(v63 + 1832);
      v157 = v63 - 16;
      if ((v63 & 8) == 0)
        v157 = v63 & 0xFFFFFFFFFFFFC000 | 8;
      v428 = (WTF::StringImpl **)v157;
LABEL_251:
      v449 = 0;
      v450 = v104;
      v451 = -1;
      v452 &= 0xF8u;
      v453 = 256;
      v454 = 1;
      v455 = 0;
      v158 = v110[1];
      v159 = *((_QWORD *)v158 + 1);
      if (v159 < 2)
      {
LABEL_255:
        LODWORD(v159) = 1;
      }
      else
      {
        v160 = *(float **)v158;
        v161 = 2;
        v162 = 1;
        while (v160[v162] == *v160)
        {
          v162 = v161;
          v163 = v159 > v161++;
          if (!v163)
            goto LABEL_255;
        }
      }
      v164 = *v110;
      if (*v110)
      {
        if ((*((_BYTE *)v164 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v164 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase();
          v164 = v456;
        }
      }
      v165 = *(_DWORD *)v164;
      *(_DWORD *)v164 += 2;
      if (v165)
        *(_DWORD *)v164 = v165;
      else
        WTF::StringImpl::destroy(v164, (WTF::StringImpl *)v106);
      v166 = *(const void **)v110[1];
      if ((*(_QWORD *)v440 & 1) != 0)
      {
        v329 = *(void (**)(WTF::StringImpl **))(*(_QWORD *)v440 & 0xFFFFFFFFFFFFFFFCLL);
        v456 = *v428;
        v457 = (JSC *)v63;
        v458 = v440;
        v329(&v456);
      }
      v167 = *(_QWORD *)(v63 + 56);
      v461 = v167;
      MEMORY[0x19AEA375C](&v456, v167);
      if (!v456)
      {
        JSC::throwOutOfMemoryError();
        v169 = 0;
LABEL_271:
        if (v166)
        {
          v170 = *(_QWORD *)(v169 + 16);
          if (v170)
          {
            v171 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v171)
            {
              if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
                v170 = (v170 & 0x3FFFFFFFFLL) + v171;
            }
          }
          memcpy((void *)v170, v166, 4 * v159);
        }
        v172 = *(_DWORD *)v104;
        v173 = 16 * (*(_DWORD *)v104 & 0xFFFFFFFE);
        if ((*(_WORD *)(v173 + 0xC) & 0x400) != 0)
        {
          (*(void (**)(unint64_t, unint64_t, WTF::StringImpl *, unint64_t, void **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v173 & 0xFFFFFFFE) + 0x4C) + 0x48))(v104, v442, v164, v169, &v449);
          goto LABEL_295;
        }
        v174 = *(_QWORD *)(v442 + 56);
        v175 = *((_DWORD *)v164 + 4);
        if ((v175 & 0x20) == 0)
        {
          v176 = (_BYTE *)*((_QWORD *)v164 + 1);
          v177 = *((unsigned int *)v164 + 1);
          if ((v175 & 4) != 0)
          {
            if (!(_DWORD)v177)
              goto LABEL_284;
            v107 = *v176 - 48;
            if (v107 > 9 || v177 >= 2 && *v176 == 48)
              goto LABEL_284;
            v341 = v176 + 1;
            v342 = v177 - 1;
            while (v342)
            {
              if (v107 <= 0x19999999)
              {
                v343 = *v341 - 48;
                if (v343 <= 9)
                {
                  v187 = __CFADD__(v343, 10 * v107);
                  v107 = v343 + 10 * (_DWORD)v107;
                  ++v341;
                  --v342;
                  if (!v187)
                    continue;
                }
              }
              goto LABEL_284;
            }
          }
          else
          {
            if (!(_DWORD)v177)
              goto LABEL_284;
            v107 = *(unsigned __int16 *)v176 - 48;
            if (v107 > 9 || v177 >= 2 && *(_WORD *)v176 == 48)
              goto LABEL_284;
            v184 = (unsigned __int16 *)(v176 + 2);
            v185 = v177 - 1;
            while (v185)
            {
              if (v107 <= 0x19999999)
              {
                v186 = *v184 - 48;
                if (v186 <= 9)
                {
                  v187 = __CFADD__(v186, 10 * v107);
                  v107 = v186 + 10 * (_DWORD)v107;
                  ++v184;
                  --v185;
                  if (!v187)
                    continue;
                }
              }
              goto LABEL_284;
            }
          }
          if ((_DWORD)v107 != -1)
          {
            if (v450 == v104
              || (v450 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v450 + 5) == 32 && *(_QWORD *)(v450 + 16) == v104)
            {
              (*(void (**)(unint64_t, unint64_t))(16
                                                                         * *(unsigned int *)(16 * (v172 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x50))(v104, v442);
            }
            else
            {
              JSC::ordinarySetSlow();
            }
            goto LABEL_295;
          }
        }
LABEL_284:
        v178 = v174 + 41952;
        if (*(WTF::StringImpl **)(*(_QWORD *)(v174 + 41952) + 16) == v164
          || (v179 = *(_DWORD *)(16 * (v172 & 0xFFFFFFFE) + 0x10), (v179 & 0x10) != 0))
        {
LABEL_294:
          JSC::JSObject::putInlineSlow();
          goto LABEL_295;
        }
        v180 = *((_DWORD *)v164 + 4) & 0x20;
        v181 = 16 * (v172 & 0xFFFFFFFE);
        v182 = (_DWORD *)v104;
        while (1)
        {
          if ((*(_WORD *)(v181 + 12) & 0x800) != 0 || v182 != (_DWORD *)v104 && (*(_WORD *)(v181 + 12) & 0x400) != 0)
            goto LABEL_294;
          v183 = *(_DWORD **)(v181 + 48);
          if (!v183)
            v183 = (_DWORD *)*((_QWORD *)v182 + 2);
          if (v183 == (_DWORD *)2)
            break;
          v181 = 16 * (*v183 & 0xFFFFFFFE);
          v182 = v183;
          if ((*(_BYTE *)(v181 + 0x10) & 0x10) != 0)
            goto LABEL_294;
        }
        if (v450 != v104
          && ((v450 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v450 + 5) != 32 || *(_QWORD *)(v450 + 16) != v104))
        {
          JSC::JSObject::definePropertyOnReceiver();
          goto LABEL_295;
        }
        if ((v179 & 0x400000) == 0 && (*(_BYTE *)(v104 + 6) & 0x20) != 0)
        {
          JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded();
          goto LABEL_295;
        }
        v461 = *(_QWORD *)(v442 + 56);
        if ((v179 & 3) != 0)
        {
          if ((v179 & 0x100000) != 0)
          {
            v107 = JSC::JSObject::putDirectToDictionaryWithoutExtensibility();
            v311 = v106;
            goto LABEL_491;
          }
          v188 = *(_QWORD *)(16 * (v172 & 0xFFFFFFFE) + 0x58);
          if (!v188)
          {
            v188 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (v172 & 0xFFFFFFFE)), (JSC::VM *)v174);
            v175 = *((_DWORD *)v164 + 4);
            v180 = v175 & 0x20;
          }
          v189 = *(_QWORD *)(v188 + 16);
          v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
          v191 = *(unsigned int *)(v188 + 8);
          v423 = v172;
          if ((v189 & 1) != 0)
          {
            if (v180)
              v175 = *((_DWORD *)v164 + 8);
            v192 = v175 >> 8;
            v193 = *(unsigned int *)(v188 + 12);
            v194 = v192 & v193;
            v195 = *(unsigned __int8 *)(v190 + v194);
            LODWORD(v196) = v194;
            if (*(_BYTE *)(v190 + v194))
            {
              v197 = v190 + v191;
              v198 = 1;
              while (1)
              {
                v199 = *(_QWORD *)(v197 + 8 * (v195 - 1));
                if (v164 == (WTF::StringImpl *)(v199 & 0xFFFFFFFFFFFFLL))
                  break;
                v196 = ((_DWORD)v196 + v198) & v193;
                v195 = *(unsigned __int8 *)(v190 + v196);
                ++v198;
                if (!*(_BYTE *)(v190 + v196))
                  goto LABEL_336;
              }
              v210 = (v199 >> 16) & 0xFF00000000 | HIBYTE(v199);
              goto LABEL_335;
            }
          }
          else
          {
            if (v180)
              v175 = *((_DWORD *)v164 + 8);
            v283 = *(_DWORD *)(v188 + 12);
            LODWORD(v196) = v283 & (v175 >> 8);
            v284 = *(_DWORD *)(v190 + 4 * v196);
            if (v284)
            {
              v285 = v190 + 4 * v191;
              v286 = 1;
              while (1)
              {
                v287 = (v284 - 1);
                if (*(WTF::StringImpl **)(v285 + 16 * v287) == v164)
                  break;
                LODWORD(v196) = (v196 + v286) & v283;
                v284 = *(_DWORD *)(v190 + 4 * v196);
                ++v286;
                if (!v284)
                  goto LABEL_336;
              }
              v210 = *(unsigned int *)(v285 + 16 * v287 + 8) | ((unint64_t)*(unsigned __int8 *)(v285 + 16 * v287 + 12) << 32);
LABEL_335:
              if ((_DWORD)v210 == -1)
                goto LABEL_336;
              if ((v210 & 0x3200000000) == 0)
              {
                if ((int)v210 < 64)
                {
                  v248 = v210;
                  v247 = v104 + 16;
                }
                else
                {
                  v247 = *(_QWORD *)(v104 + 8) - 8;
                  v248 = 63 - v210;
                }
                *(_QWORD *)(v247 + 8 * v248) = v169;
                if (v104
                  && v169
                  && (v169 & 0xFFFE000000000002) == 0
                  && *(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
                {
                  JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v174 + 192), (const JSCell *)v104);
                }
                if ((*(_BYTE *)(v173 + 18) & 4) != 0)
                  JSC::Structure::didReplacePropertySlow((JSC::Structure *)v173);
                LOBYTE(v453) = 1;
                v449 = (void *)v104;
                v451 = v210;
                goto LABEL_295;
              }
              goto LABEL_489;
            }
          }
LABEL_336:
          v211 = (unsigned __int8 *)(v173 + 15);
          v212 = __ldaxr((unsigned __int8 *)(v173 + 15));
          v424 = v173;
          if (v212)
          {
            __clrex();
          }
          else if (!__stxr(1u, v211))
          {
            goto LABEL_340;
          }
          v213 = v173 + 15;
          v214 = (unsigned __int8 *)(v173 + 15);
          v215 = v169;
          v216 = v188;
          v217 = v174;
          v218 = v196;
          MEMORY[0x19AEA534C](v213);
          LODWORD(v196) = v218;
          v174 = v217;
          v188 = v216;
          v169 = v215;
          v173 = v424;
          v211 = v214;
LABEL_340:
          ++*(_DWORD *)(v174 + 916);
          *(_DWORD *)(v173 + 16) |= 4u;
          if (v188)
          {
            *(_QWORD *)(v173 + 88) = v188;
            if (*(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v173 + 7))
            {
              v296 = (JSC::Heap *)(v174 + 192);
              v297 = (const JSCell *)v173;
              v298 = v211;
              v299 = v169;
              v300 = v188;
              v301 = v174;
              v302 = v196;
              JSC::Heap::writeBarrierSlowPath(v296, v297);
              LODWORD(v196) = v302;
              v174 = v301;
              v188 = v300;
              v169 = v299;
              v173 = v424;
              v211 = v298;
            }
          }
          else
          {
            *(_QWORD *)(v173 + 88) = 0;
          }
          v219 = *(_QWORD *)(v173 + 64);
          if (!v219 || *(_BYTE *)(v219 + 5) == 1)
            *(_QWORD *)(v173 + 64) = 0;
          else
            *(_DWORD *)(v219 + 80) = 0;
          v220 = *(unsigned int *)(v173 + 72);
          *(_DWORD *)(v173 + 72) = 0;
          if ((_DWORD)v220)
          {
            v221 = (WTF::StringImpl *)(16 * v220);
            v222 = *(_DWORD *)(16 * v220) - 2;
            if (!v222)
            {
              v275 = v211;
              v276 = v169;
              v277 = v188;
              v278 = v174;
              v279 = v196;
              WTF::StringImpl::destroy(v221, (WTF::StringImpl *)v106);
              LODWORD(v196) = v279;
              v174 = v278;
              v188 = v277;
              v169 = v276;
              v173 = v424;
              v211 = v275;
              if (!v164)
                goto LABEL_351;
              goto LABEL_349;
            }
            *(_DWORD *)v221 = v222;
          }
          if (!v164)
            goto LABEL_351;
LABEL_349:
          if ((*((_BYTE *)v164 + 16) & 0x20) != 0)
            *(_DWORD *)(v173 + 16) &= ~0x20u;
LABEL_351:
          if (*(WTF::StringImpl **)(*(_QWORD *)v178 + 16) == v164)
            *(_DWORD *)(v173 + 16) |= 0x20000000u;
          v223 = *(unsigned __int8 *)(v173 + 14);
          v224 = *(_QWORD *)(v188 + 32);
          if (v224 && (v274 = *(unsigned int *)(v224 + 12), (_DWORD)v274))
          {
            v229 = *(unsigned int *)(*(_QWORD *)v224 + 4 * v274 - 4);
            *(_DWORD *)(v224 + 12) = v274 - 1;
          }
          else
          {
            v225 = *(_DWORD *)(v188 + 24);
            v226 = __OFSUB__(v225, v223);
            v227 = v225 - v223;
            v163 = (v227 < 0) ^ v226;
            v228 = v227 + 64;
            if (v163)
              v229 = v225;
            else
              v229 = v228;
          }
          v230 = *((_DWORD *)v164 + 4);
          if ((v230 & 0x20) != 0)
            v230 = *((_DWORD *)v164 + 8);
          v231 = *(_DWORD *)(v173 + 28) ^ (v230 >> 8);
          v232 = *(_DWORD *)(v173 + 32) | ((unint64_t)v164 >> 4);
          *(_DWORD *)(v173 + 28) = v231;
          *(_DWORD *)(v173 + 32) = v232;
          *(_DWORD *)v164 += 2;
          v233 = *(_DWORD *)(v188 + 24);
          if ((*(_DWORD *)(v188 + 28) + v233) >= *(_DWORD *)(v188 + 8) >> 1
            || (v234 = *(_QWORD *)(v188 + 16), (v234 & 1) != 0) && (int)v229 > 255)
          {
            v288 = v211;
            JSC::PropertyTable::rehash((JSC::PropertyTable *)v188, (JSC::VM *)v174, v233 + 1, (int)v229 < 256);
            v234 = *(_QWORD *)(v188 + 16);
            v235 = v234 & 0xFFFFFFFFFFFFFFFELL;
            v289 = *(unsigned int *)(v188 + 8);
            v290 = *((_DWORD *)v164 + 4);
            if ((v234 & 1) != 0)
            {
              if ((v290 & 0x20) != 0)
                v290 = *((_DWORD *)v164 + 8);
              v291 = *(_DWORD *)(v188 + 12);
              v292 = (v290 >> 8) & *(_QWORD *)&v291;
              v293 = *(unsigned __int8 *)(v235 + v292);
              LODWORD(v196) = v292;
              if (*(_BYTE *)(v235 + v292))
              {
                v294 = v235 + v289;
                v295 = 1;
                do
                {
                  if (v164 == (WTF::StringImpl *)(*(_QWORD *)(v294 + 8 * (v293 - 1)) & 0xFFFFFFFFFFFFLL))
                    break;
                  v292 = ((_DWORD)v292 + v295) & v291;
                  v293 = *(unsigned __int8 *)(v235 + v292);
                  ++v295;
                }
                while (*(_BYTE *)(v235 + v292));
                LODWORD(v196) = v292;
              }
            }
            else
            {
              if ((v290 & 0x20) != 0)
                v290 = *((_DWORD *)v164 + 8);
              v331 = *(_DWORD *)(v188 + 12);
              LODWORD(v196) = v331 & (v290 >> 8);
              v332 = *(_DWORD *)(v235 + 4 * v196);
              if (v332)
              {
                v333 = v235 + 4 * v289;
                v334 = 1;
                do
                {
                  if (*(WTF::StringImpl **)(v333 + 16 * (v332 - 1)) == v164)
                    break;
                  LODWORD(v196) = (v196 + v334) & v331;
                  v332 = *(_DWORD *)(v235 + 4 * v196);
                  ++v334;
                }
                while (v332);
              }
            }
            v211 = v288;
          }
          else
          {
            v235 = v234 & 0xFFFFFFFFFFFFFFFELL;
          }
          v236 = *(_DWORD *)(v188 + 28) + *(_DWORD *)(v188 + 24);
          v237 = v236 + 1;
          if ((v234 & 1) != 0)
          {
            *(_BYTE *)(v235 + v196) = v237;
            *(_QWORD *)(v235 + *(unsigned int *)(v188 + 8) + 8 * v236) = (unint64_t)v164 | (v229 << 56);
          }
          else
          {
            *(_DWORD *)(v235 + 4 * v196) = v237;
            v280 = v235 + 4 * *(unsigned int *)(v188 + 8) + 16 * v236;
            *(_QWORD *)v280 = v164;
            *(_DWORD *)(v280 + 8) = v229;
            *(_BYTE *)(v280 + 12) = 0;
          }
          ++*(_DWORD *)(v188 + 24);
          v238 = *(unsigned __int16 *)(v173 + 24);
          if (v238 == 65534)
          {
            v239 = v174;
            v242 = 0;
            if ((int)v229 < 0)
              v241 = -1;
            else
              v241 = v229;
          }
          else
          {
            v239 = v174;
            if (v238 == 0xFFFF)
              v240 = *(_DWORD *)(*(_QWORD *)(v173 + 64) + 84);
            else
              v240 = *(unsigned __int16 *)(v173 + 24);
            if ((int)v229 <= v240)
              v241 = v240;
            else
              v241 = v229;
            if (v240 < 64)
            {
              v242 = 0;
            }
            else if ((v240 - 63) >= 5)
            {
              v249 = (v240 - 64) | ((v240 - 64) >> 1) | (((v240 - 64) | ((v240 - 64) >> 1)) >> 2);
              v250 = v249 | (v249 >> 4) | ((v249 | (v249 >> 4)) >> 8);
              v242 = (v250 | HIWORD(v250)) + 1;
            }
            else
            {
              v242 = 4;
            }
          }
          if (v241 < 64)
          {
            v251 = 0;
          }
          else if ((v241 - 63) >= 5)
          {
            v252 = (v241 - 64) | ((v241 - 64) >> 1) | (((v241 - 64) | ((v241 - 64) >> 1)) >> 2);
            v253 = v252 | (v252 >> 4) | ((v252 | (v252 >> 4)) >> 8);
            v251 = (v253 | HIWORD(v253)) + 1;
          }
          else
          {
            v251 = 4;
          }
          if (v251 == v242)
          {
            if (v241 == -1)
            {
              *(_WORD *)(v173 + 24) = -2;
            }
            else
            {
              if (v241 > 65533)
              {
                v422 = v211;
                v339 = *(_QWORD *)(v173 + 64);
                if (v238 == 0xFFFF)
                {
                  *(_DWORD *)(v339 + 84) = v241;
                }
                else
                {
                  if (!v339 || *(_BYTE *)(v339 + 5) == 1)
                  {
                    JSC::Structure::allocateRareData((JSC::Structure *)v173, (JSC::VM *)v239);
                    v339 = *(_QWORD *)(v173 + 64);
                  }
                  *(_DWORD *)(v339 + 84) = v241;
                  __dmb(0xAu);
                  *(_WORD *)(v173 + 24) = -1;
                }
                v256 = MEMORY[0x1E0CC10F8];
                v211 = v422;
LABEL_409:
                v257 = __ldxr(v211);
                if (v257 == 1)
                {
                  if (!__stlxr(0, v211))
                  {
LABEL_414:
                    v258 = v239;
                    v259 = (JSC::Heap *)(v239 + 192);
                    --*(_DWORD *)(v258 + 916);
                    v260 = v258;
                    if (*(_BYTE *)(v258 + 1198) || *(_BYTE *)(v256 + 1489))
                      JSC::Heap::decrementDeferralDepthAndGCIfNeededSlow(v259);
                    v261 = v229;
                    v262 = v104 + 16;
                    if ((int)v229 >= 64)
                    {
                      v262 = *(_QWORD *)(v104 + 8) - 8;
                      v261 = 63 - v229;
                    }
                    *(_QWORD *)(v262 + 8 * v261) = v169;
                    if (v104
                      && v169
                      && (v169 & 0xFFFE000000000002) == 0
                      && *(_DWORD *)(v260 + 760) >= *(unsigned __int8 *)(v104 + 7))
                    {
                      JSC::Heap::writeBarrierSlowPath(v259, (const JSCell *)v104);
                    }
                    LOBYTE(v453) = 2;
                    v449 = (void *)v104;
                    v451 = v229;
                    v263 = *(unsigned int *)v104;
LABEL_531:
                    if ((*(_BYTE *)((16 * v263) | 0x12) & 8) != 0)
                      JSC::VM::invalidateStructureChainIntegrity();
                    goto LABEL_295;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v211);
                goto LABEL_414;
              }
              *(_WORD *)(v173 + 24) = v241;
            }
          }
          else
          {
            v421 = v211;
            MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)v104, (JSC::VM *)v239);
            v255 = (JSC::Heap *)(v239 + 192);
            if (*(_BYTE *)(v239 + 755))
            {
              *(_DWORD *)v104 = v423 | 1;
              __dmb(0xAu);
              *(_QWORD *)(v104 + 8) = MoreOutOfLineStorage;
              v211 = v421;
              if (*(_DWORD *)(v239 + 760) >= *(unsigned __int8 *)(v104 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(v255, (const JSCell *)v104);
                v211 = v421;
              }
              __dmb(0xAu);
            }
            else
            {
              *(_QWORD *)(v104 + 8) = MoreOutOfLineStorage;
              v211 = v421;
              if (*(_DWORD *)(v239 + 760) >= *(unsigned __int8 *)(v104 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(v255, (const JSCell *)v104);
                v211 = v421;
              }
            }
            if (v241 == -1)
            {
              *(_WORD *)(v173 + 24) = -2;
            }
            else if (v241 > 65533)
            {
              v340 = *(_QWORD *)(v173 + 64);
              if (*(__int16 *)(v173 + 24) == -1)
              {
                *(_DWORD *)(v340 + 84) = v241;
              }
              else
              {
                if (!v340 || *(_BYTE *)(v340 + 5) == 1)
                {
                  JSC::Structure::allocateRareData((JSC::Structure *)v173, (JSC::VM *)v239);
                  v340 = *(_QWORD *)(v173 + 64);
                }
                *(_DWORD *)(v340 + 84) = v241;
                __dmb(0xAu);
                *(_WORD *)(v173 + 24) = -1;
              }
              v211 = v421;
            }
            else
            {
              *(_WORD *)(v173 + 24) = v241;
            }
            __dmb(0xAu);
            *(_DWORD *)v104 = v423;
          }
          v256 = MEMORY[0x1E0CC10F8];
          goto LABEL_409;
        }
        if ((v179 & 0x8000000) == 0)
        {
          v200 = *(_QWORD *)(16 * (v172 & 0xFFFFFFFE) + 0x50);
          if ((v200 & 1) != 0)
          {
            v209 = v200 & 0xFFFFFFFFFFFFFFFELL;
            if ((v200 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v243 = (*(_DWORD *)(v209 + 16) >> 13) & 0x1F;
              if ((_DWORD)v243 == 16)
              {
                v244 = *(_QWORD *)(v209 + 48);
                v245 = v244 | 0x1000000000000000;
                v14 = v244 == 2;
                v246 = 0x1000000000000000;
                if (!v14)
                  v246 = v245;
              }
              else
              {
                v246 = (v243 << 56) | (16 * *(unsigned int *)(v209 + 72));
              }
              if ((v246 | ((unint64_t)*(unsigned __int8 *)(v209 + 20) << 48)) == ((unint64_t)v164 | 0x100000000000000))
                goto LABEL_424;
            }
          }
          else
          {
            v201 = *(_QWORD *)(v200 + 8);
            if (!v201)
              goto LABEL_477;
            v202 = *(_DWORD *)(v201 - 8);
            v203 = (((unint64_t)v164 | 0x100000000000000) + ~((_QWORD)v164 << 32)) ^ ((((unint64_t)v164 | 0x100000000000000)
                                                                                              + ~((_QWORD)v164 << 32)) >> 22);
            v204 = 9 * ((v203 + ~(v203 << 13)) ^ ((v203 + ~(v203 << 13)) >> 8));
            v205 = (v204 ^ (v204 >> 15)) + ~((v204 ^ (v204 >> 15)) << 27);
            v206 = v202 & ((v205 >> 31) ^ v205);
            v207 = *(_QWORD *)(v201 + 16 * v206);
            if (v207 == ((unint64_t)v164 | 0x100000000000000))
            {
LABEL_330:
              v208 = *(_QWORD *)(v201 + 16 * v206 + 8);
              if (!v208)
                goto LABEL_477;
              if ((*(_BYTE *)(v208 + 8) & 3) != 0)
                goto LABEL_477;
              v209 = *(_QWORD *)v208;
              if (!*(_QWORD *)v208)
                goto LABEL_477;
LABEL_424:
              v264 = *(unsigned __int16 *)(v209 + 22);
              if (v264 == 65534)
              {
                v264 = -1;
              }
              else if (v264 == 0xFFFF)
              {
                v264 = *(_DWORD *)(*(_QWORD *)(v209 + 64) + 88);
              }
              v265 = *(unsigned __int16 *)(16 * (v172 & 0xFFFFFFFE) + 0x18);
              if (v265 == 65534)
              {
                v270 = 0;
              }
              else
              {
                if (v265 == 0xFFFF)
                  v266 = *(_DWORD *)(*(_QWORD *)(16 * (v172 & 0xFFFFFFFE) + 0x40) + 84);
                else
                  v266 = *(unsigned __int16 *)(16 * (v172 & 0xFFFFFFFE) + 0x18);
                v267 = (v266 - 64) | ((v266 - 64) >> 1) | (((v266 - 64) | ((v266 - 64) >> 1)) >> 2);
                v268 = v267 | (v267 >> 4) | ((v267 | (v267 >> 4)) >> 8);
                v269 = v268 | HIWORD(v268);
                if ((v266 - 63) >= 5)
                  v270 = v269 + 1;
                else
                  v270 = 4;
                if (v266 < 64)
                  v270 = 0;
              }
              v271 = *(unsigned __int16 *)(v209 + 24);
              if (v271 == 65534
                || (v271 == 0xFFFF
                  ? (v272 = *(_DWORD *)(*(_QWORD *)(v209 + 64) + 84))
                  : (v272 = *(unsigned __int16 *)(v209 + 24)),
                    v272 < 64))
              {
                v273 = 0;
              }
              else if ((v272 - 63) >= 5)
              {
                v281 = (v272 - 64) | ((v272 - 64) >> 1) | (((v272 - 64) | ((v272 - 64) >> 1)) >> 2);
                v282 = v281 | (v281 >> 4) | ((v281 | (v281 >> 4)) >> 8);
                v273 = (v282 | HIWORD(v282)) + 1;
              }
              else
              {
                v273 = 4;
              }
              if (v270 != v273)
              {
                v323 = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)v104, (JSC::VM *)v174);
                v324 = (JSC::Heap *)(v174 + 192);
                if (*(_BYTE *)(v174 + 755))
                {
                  *(_DWORD *)v104 = v172 | 1;
                  __dmb(0xAu);
                  *(_QWORD *)(v104 + 8) = v323;
                  if (*(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
                    JSC::Heap::writeBarrierSlowPath(v324, (const JSCell *)v104);
                  __dmb(0xAu);
                }
                else
                {
                  *(_QWORD *)(v104 + 8) = v323;
                  if (*(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
                    JSC::Heap::writeBarrierSlowPath(v324, (const JSCell *)v104);
                }
              }
              v325 = v264;
              v326 = v104 + 16;
              if (v264 >= 64)
              {
                v326 = *(_QWORD *)(v104 + 8) - 8;
                v325 = 63 - v264;
              }
              *(_QWORD *)(v326 + 8 * v325) = v169;
              if (v169
                && (v169 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v174 + 192), (const JSCell *)v104);
              }
              v263 = v209 >> 4;
              *(_DWORD *)v104 = v209 >> 4;
              *(_BYTE *)(v104 + 6) = *(_BYTE *)(v104 + 6) & 0x80 | *(_BYTE *)(v209 + 10);
              *(_BYTE *)(v104 + 5) = *(_BYTE *)(v209 + 9);
              if (*(unsigned __int8 *)(v104 + 4) != *(unsigned __int8 *)(v209 + 8))
              {
                do
                {
                  while (1)
                  {
                    v335 = *v432;
                    v336 = __ldxr(v432);
                    if (v336 == v335)
                      break;
                    __clrex();
                  }
                }
                while (__stxr(v335 & 0xC0 | *(_BYTE *)(v209 + 8), v432));
              }
              if (*(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v174 + 192), (const JSCell *)v104);
                LODWORD(v263) = *(_DWORD *)v104;
              }
              LOBYTE(v453) = 2;
              v449 = (void *)v104;
              v451 = v264;
              v263 = v263;
              goto LABEL_531;
            }
            v303 = 1;
            while (v207)
            {
              v206 = ((_DWORD)v206 + v303) & v202;
              v207 = *(_QWORD *)(v201 + 16 * v206);
              ++v303;
              if (v207 == ((unint64_t)v164 | 0x100000000000000))
                goto LABEL_330;
            }
          }
        }
LABEL_477:
        v462 = 0;
        if (((unint64_t)v164 >> 4)
          && (((unint64_t)v164 >> 4) & ~*(_DWORD *)(16 * (v172 & 0xFFFFFFFE) + 0x20)) == 0
          && (v304 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (v172 & 0xFFFFFFFE)), (JSC::VM *)v174)) != 0&& (v456 = v164, v305 = JSC::PropertyTable::get(v304, (uint64_t *)&v456), v106 = v305, (_DWORD)v305 != -1))
        {
          v462 = v305;
          if ((v305 & 0x3200000000) != 0)
          {
LABEL_489:
            v310 = (uint64_t *)MEMORY[0x1E0CBE870];
LABEL_490:
            v107 = *v310;
            v311 = v310[1];
LABEL_491:
            if (v311 && (v452 & 1) != 0)
              JSC::throwTypeError();
            goto LABEL_295;
          }
          if ((*(_BYTE *)(16 * (v172 & 0xFFFFFFFE) + 0x12) & 4) != 0)
          {
            JSC::Structure::didReplacePropertySlow((JSC::Structure *)(16 * (v172 & 0xFFFFFFFE)));
            v106 = v462;
          }
          v327 = v106;
          v328 = v104 + 16;
          if ((int)v106 >= 64)
          {
            v328 = *(_QWORD *)(v104 + 8) - 8;
            v327 = 63 - v106;
          }
          *(_QWORD *)(v328 + 8 * v327) = v169;
          if (v169
            && (v169 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v174 + 192), (const JSCell *)v104);
            v106 = v462;
          }
          v107 = 0;
          LOBYTE(v453) = 1;
          v449 = (void *)v104;
          v451 = v106;
        }
        else
        {
          v462 = -1;
          if ((*(_BYTE *)((16 * *(unsigned int *)v104) | 0x12) & 0x10) != 0)
          {
            v310 = (uint64_t *)MEMORY[0x1E0CBE960];
            goto LABEL_490;
          }
          JSC::WatchpointSet::WatchpointSet();
          v459 = v174;
          v460 = 16 * (v172 & 0xFFFFFFFE);
          v306 = JSC::Structure::addNewPropertyTransition();
          v307 = v306;
          v308 = 0;
          v309 = *(unsigned __int16 *)(16 * (v172 & 0xFFFFFFFE) + 0x18);
          if (v309 != 65534)
          {
            if (v309 == 0xFFFF)
              v309 = *(_DWORD *)(*(_QWORD *)(16 * (v172 & 0xFFFFFFFE) + 0x40) + 84);
            if (v309 < 64)
            {
              v308 = 0;
            }
            else if ((v309 - 63) >= 5)
            {
              v312 = (v309 - 64) | ((v309 - 64) >> 1) | (((v309 - 64) | ((v309 - 64) >> 1)) >> 2);
              v313 = v312 | (v312 >> 4) | ((v312 | (v312 >> 4)) >> 8);
              v308 = (v313 | HIWORD(v313)) + 1;
            }
            else
            {
              v308 = 4;
            }
          }
          v314 = *(unsigned __int16 *)(v306 + 24);
          if (v314 == 65534)
          {
            v315 = 0;
          }
          else
          {
            if (v314 == 0xFFFF)
              v314 = *(_DWORD *)(*(_QWORD *)(v306 + 64) + 84);
            if (v314 < 64)
            {
              v315 = 0;
            }
            else if ((v314 - 63) >= 5)
            {
              v316 = (v314 - 64) | ((v314 - 64) >> 1) | (((v314 - 64) | ((v314 - 64) >> 1)) >> 2);
              v317 = v316 | (v316 >> 4) | ((v316 | (v316 >> 4)) >> 8);
              v315 = (v317 | HIWORD(v317)) + 1;
            }
            else
            {
              v315 = 4;
            }
          }
          if (v308 != v315)
          {
            v318 = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)v104, (JSC::VM *)v174);
            v319 = (JSC::Heap *)(v174 + 192);
            if (*(_BYTE *)(v174 + 755))
            {
              *(_DWORD *)v104 = v172 | 1;
              __dmb(0xAu);
              *(_QWORD *)(v104 + 8) = v318;
              if (*(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
                JSC::Heap::writeBarrierSlowPath(v319, (const JSCell *)v104);
              __dmb(0xAu);
            }
            else
            {
              *(_QWORD *)(v104 + 8) = v318;
              if (*(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
                JSC::Heap::writeBarrierSlowPath(v319, (const JSCell *)v104);
            }
          }
          v320 = v462;
          if (v462 < 64)
          {
            v321 = v104 + 16;
          }
          else
          {
            v321 = *(_QWORD *)(v104 + 8) - 8;
            v320 = 63 - v462;
          }
          *(_QWORD *)(v321 + 8 * v320) = v169;
          if (v169
            && (v169 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v174 + 192), (const JSCell *)v104);
          }
          v322 = v307 >> 4;
          *(_DWORD *)v104 = v307 >> 4;
          *(_BYTE *)(v104 + 6) = *(_BYTE *)(v104 + 6) & 0x80 | *(_BYTE *)(v307 + 10);
          *(_BYTE *)(v104 + 5) = *(_BYTE *)(v307 + 9);
          if (*(unsigned __int8 *)(v104 + 4) != *(unsigned __int8 *)(v307 + 8))
          {
            do
            {
              while (1)
              {
                v337 = *v432;
                v338 = __ldxr(v432);
                if (v338 == v337)
                  break;
                __clrex();
              }
            }
            while (__stxr(v337 & 0xC0 | *(_BYTE *)(v307 + 8), v432));
          }
          if (*(_DWORD *)(v174 + 760) >= *(unsigned __int8 *)(v104 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v174 + 192), (const JSCell *)v104);
            LODWORD(v322) = *(_DWORD *)v104;
          }
          LOBYTE(v453) = 2;
          v449 = (void *)v104;
          v451 = v462;
          if ((*(_BYTE *)((16 * v322) | 0x12) & 8) != 0)
            JSC::VM::invalidateStructureChainIntegrity();
          if (BYTE4(v456) == 1)
            JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow((JSC::DeferredStructureTransitionWatchpointFire *)&v456);
          JSC::WatchpointSet::~WatchpointSet((JSC::WatchpointSet *)&v456);
          v107 = 0;
        }
LABEL_295:
        if (*(_DWORD *)v164 == 2)
          WTF::StringImpl::destroy(v164, (WTF::StringImpl *)v106);
        else
          *(_DWORD *)v164 -= 2;
        v63 = v442;
        while (1)
        {
          v110 += 2;
          if (v110 == (WTF::StringImpl **)v156)
            goto LABEL_632;
          if (*v110)
          {
            if (v110 != (WTF::StringImpl **)v156)
              goto LABEL_251;
            goto LABEL_632;
          }
        }
      }
      v168 = *(_QWORD **)(v167 + 40464);
      if (!v168)
        v168 = (_QWORD *)JSC::GCClient::Heap::float32ArraySpaceSlow((JSC::GCClient::Heap *)(v167 + 37552));
      v169 = v168[3];
      if (v169 >= v168[4])
      {
        v169 = v168[5];
        if ((v169 & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          v169 = JSC::LocalAllocator::allocateSlowCase();
          goto LABEL_269;
        }
        v330 = *(_QWORD *)(v169 + 8) ^ v168[6];
        v168[4] = v169 + HIDWORD(v330);
        v168[5] = v169 + (int)v330;
      }
      v168[3] = v169 + 48;
LABEL_269:
      *(_DWORD *)v169 = 0;
      JSC::JSArrayBufferView::JSArrayBufferView();
      JSC::JSArrayBufferView::finishCreation();
      goto LABEL_271;
    }
  }
LABEL_632:
  JSC::objectConstructorFreeze((JSC *)v63, (JSC::JSGlobalObject *)v104, (JSC::JSObject *)v107);
  if ((v104 & 0xFFFE000000000002) != 0)
  {
    v90 = v429;
    v429[9] = v104;
    v382 = v429[10];
    if (!v382)
      goto LABEL_642;
    *(_QWORD *)(v382 + 8) = 3;
    v429[10] = 0;
  }
  else
  {
    v344 = 0;
    v90 = v429;
    v429[9] = 0;
    if (v104)
    {
      if ((v104 & 8) != 0)
        v414 = (v104 - 112) | 1;
      else
        v414 = v104 & 0xFFFFFFFFFFFFC000;
      if ((v414 & 1) != 0)
        v415 = v414 + 47;
      else
        v415 = *(_QWORD *)v414 + 32;
      v344 = *(_QWORD **)(v415 + 16);
      if (!v344)
        v344 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v415 + 16) = *v344;
      *v344 = v104;
      v344[1] = 0;
      v344[2] = 0;
      v63 = v442;
      v90 = v429;
    }
    __dmb(0xAu);
    v345 = v90[10];
    v90[10] = (uint64_t)v344;
    if (v345)
      *(_QWORD *)(v345 + 8) = 3;
  }
LABEL_636:
  v104 = v90[9];
  if (!v104)
  {
    v346 = v90[10];
    if (v346 && *(_QWORD *)v346)
    {
      if ((*(_BYTE *)(v346 + 8) & 3) != 0)
        v104 = 10;
      else
        v104 = *(_QWORD *)v346;
    }
    else
    {
      v104 = 10;
    }
  }
LABEL_642:
  v347 = v444;
  if ((_DWORD)v444 == HIDWORD(v444) || v445 != (WTF *)((char *)v446 + 8) && v445)
  {
    v385.super.isa = (Class)v104;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v444, v385) == 1)
      v443[0] = 1;
  }
  else
  {
    *((_QWORD *)v445 + v444) = v104;
    LODWORD(v444) = v347 + 1;
  }
  v449 = 0;
  v348 = *v90;
  if (!*v90 || (*(_BYTE *)(v348 + 8) & 3) != 0)
    v349 = 0;
  else
    v349 = *(JSC::Structure **)v348;
  WTF::AtomStringImpl::addLiteral();
  v350 = v456;
  v352 = WebCore::JSCallbackData::invokeCallback((JSC::JSGlobalObject *)v63, v349, 10, (uint64_t)v443, 1, v456, (uint64_t *)&v449);
  if (v350)
  {
    if (*(_DWORD *)v350 == 2)
      WTF::StringImpl::destroy(v350, v351);
    else
      *(_DWORD *)v350 -= 2;
  }
  v353 = v449;
  if (!v449)
  {
    v355 = (JSC::JSObject *)v90[7];
    v438 = v352;
    if (v355)
    {
      v357 = v434;
    }
    else
    {
      v356 = v90[8];
      v357 = v434;
      if (!v356)
        goto LABEL_658;
      v355 = *(JSC::JSObject **)v356;
      if (!*(_QWORD *)v356 || (*(_BYTE *)(v356 + 8) & 3) != 0)
        goto LABEL_658;
    }
    if (((unint64_t)v355 & 0xFFFE000000000002) == 0)
    {
      if ((*((_BYTE *)v355 + 5) & 0xFE) != 0x24)
        v355 = 0;
      v441 = v355;
LABEL_735:
      if (*((_DWORD *)v357 + 3))
      {
        v386 = 0;
        v387 = MEMORY[0x1E0CC10F8];
        while (1)
        {
          v388 = *v357;
          v389 = JSC::JSObject::tryGetIndexQuickly(v441, v386, 0);
          if (!v389)
            v389 = JSC::JSObject::get(v441, (JSC::JSGlobalObject *)v442, v386);
          if ((v389 & 0xFFFE000000000002) != 0)
            break;
          v390 = *(_QWORD *)(v388 + 8 * v386);
          if ((*(_BYTE *)(v389 + 5) & 0xFE) != 0x24)
            goto LABEL_779;
          if (*(_DWORD *)(v390 + 28))
          {
            v391 = 0;
            v392 = 2;
            do
            {
              v393 = v392 - 2;
              v394 = *(_QWORD *)(*(_QWORD *)(v390 + 16) + v391);
              v395 = *(_QWORD *)(v389 + 8);
              switch(*(_BYTE *)(v389 + 4) & 0xF)
              {
                case 0:
                case 1:
                  if (!JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)v389, v392 - 2))
                    goto LABEL_775;
                  IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray(v389, (int)v392 - 2, 0);
                  break;
                case 3:
                  goto LABEL_775;
                case 4:
                case 5:
                case 8:
                case 9:
                  if (v393 >= *(unsigned int *)(v395 - 8))
                    goto LABEL_775;
                  IndexQuicklyForTypedArray = *(_QWORD *)(v395 + v391);
                  break;
                case 6:
                case 7:
                  if (v393 >= *(unsigned int *)(v395 - 8))
                    goto LABEL_775;
                  IndexQuicklyForTypedArray = *(_QWORD *)(v395 + v391) + 0x2000000000000;
                  break;
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                  if (v393 >= *(unsigned int *)(v395 - 4))
                    goto LABEL_775;
                  IndexQuicklyForTypedArray = *(_QWORD *)(v395 + 8 * v392);
                  break;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x195541CA4);
              }
              if (!IndexQuicklyForTypedArray)
LABEL_775:
                IndexQuicklyForTypedArray = JSC::JSObject::get((JSC::JSObject *)v389, (JSC::JSGlobalObject *)v442, (v392 - 2));
              if ((IndexQuicklyForTypedArray & 0xFFFE000000000002) == 0
                && *(_BYTE *)(IndexQuicklyForTypedArray + 5) == 46
                && ((*(_BYTE *)(IndexQuicklyForTypedArray + 40) & 7u) > 2
                  ? ((LOBYTE(v456) = 0,
                      LOBYTE(v457) = 0,
                      v404 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(IndexQuicklyForTypedArray, (WTF *)&v456), (_BYTE)v353)? (v397 = v404): (v397 = 0)): (v397 = *(_QWORD *)(IndexQuicklyForTypedArray + 24)), v397 == *(_QWORD *)(v394 + 16)))
              {
                *(_BYTE *)(v394 + 24) = 0;
                v398 = *(void **)v394;
                if (!*(_QWORD *)v394)
                  v398 = **(void ***)(v394 + 8);
                v399 = *(_QWORD *)(IndexQuicklyForTypedArray + 16);
                if (v399)
                {
                  v400 = *(_QWORD *)(v387 + 56);
                  if (v400)
                  {
                    if (*(_BYTE *)(v387 + 34) || !*MEMORY[0x1E0CC10F0])
                      v399 = (v399 & 0x3FFFFFFFFLL) + v400;
                  }
                }
                memcpy(v398, (const void *)v399, 4 * v397);
              }
              else if (!*(_BYTE *)(v394 + 24))
              {
                *(_BYTE *)(v394 + 24) = 1;
                v402 = *(void ***)(v394 + 8);
                v403 = (_QWORD *)(v394 + 16);
                if (v402)
                  v403 = v402 + 1;
                else
                  v402 = (void **)v394;
                bzero(*v402, 4 * *v403);
              }
              v390 = *(_QWORD *)(v388 + 8 * v386);
              v401 = v392++ - 1;
              v391 += 8;
            }
            while (v401 < *(unsigned int *)(v390 + 28));
          }
LABEL_787:
          ++v386;
          v357 = v434;
          if (v386 >= *((unsigned int *)v434 + 3))
            goto LABEL_788;
        }
        v390 = *(_QWORD *)(v388 + 8 * v386);
LABEL_779:
        v405 = *(unsigned int *)(v390 + 28);
        if ((_DWORD)v405)
        {
          for (i = 0; i < v405; ++i)
          {
            v407 = *(_QWORD *)(*(_QWORD *)(v390 + 16) + 8 * i);
            if (!*(_BYTE *)(v407 + 24))
            {
              *(_BYTE *)(v407 + 24) = 1;
              v408 = *(void ***)(v407 + 8);
              v409 = (_QWORD *)(v407 + 16);
              if (v408)
                v409 = v408 + 1;
              else
                v408 = (void **)v407;
              bzero(*v408, 4 * *v409);
              v405 = *(unsigned int *)(v390 + 28);
            }
          }
        }
        goto LABEL_787;
      }
LABEL_788:
      if (v438 >= 0xFFFE000000000000)
      {
        v416 = (_DWORD)v438 == 0;
        goto LABEL_829;
      }
      if (v438 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v354 = COERCE_DOUBLE(v438 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v438 - 0x2000000000000) < 0.0;
        goto LABEL_792;
      }
      if ((v438 & 0xFFFE000000000002) != 0)
      {
        v354 = v438 == 7;
        goto LABEL_792;
      }
      v417 = *(unsigned __int8 *)(v438 + 5);
      if (v417 == 3)
      {
        v420 = *(_DWORD *)(v438 + 8);
      }
      else
      {
        if (v417 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v438 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v354 = 1;
            goto LABEL_792;
          }
          v416 = *(_QWORD *)(16 * (*(_DWORD *)v438 & 0xFFFFFFFE) + 0x28) == v442;
LABEL_829:
          v354 = !v416;
          goto LABEL_792;
        }
        v418 = *(_QWORD *)(v438 + 8);
        if ((v418 & 1) != 0)
          v419 = (int *)(v438 + 16);
        else
          v419 = (int *)(v418 + 4);
        v420 = *v419;
      }
      v416 = v420 == 0;
      goto LABEL_829;
    }
LABEL_658:
    v441 = 0;
    goto LABEL_735;
  }
  WebCore::reportException((JSC::JSGlobalObject *)v63, (uint64_t)v449, 0, 0, 0);
  v354 = 0;
  *v426 = 1;
LABEL_792:
  v410 = *(uint64_t **)&v446[0];
  if (*(_QWORD *)&v446[0])
  {
    v456 = (WTF::StringImpl *)&v444;
    v413 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v446[0], (uint64_t *)&v456);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v410, v413);
  }
  if (v445 != (WTF *)((char *)v446 + 8) && v445)
    WTF::fastFree(v445, v353);
  MEMORY[0x19AEA32A0](v448);
  return v354;
}

void WebCore::AudioWorkletNode::checkNumberOfChannelsForInput(WebCore::AudioWorkletNode *this, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::AudioNodeOutput *v15;

  v2 = (uint64_t *)a2;
  if (*((_DWORD *)this + 17) != 1 || *((_DWORD *)this + 21) != 1 || *((_BYTE *)this + 288))
    goto LABEL_39;
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_DWORD *)(v4 + 140);
  if (v5 != 2)
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
    {
      v7 = *(unsigned int *)(v6 - 4);
      v8 = v6 + 8 * v7;
      if (*(_DWORD *)(v6 - 12))
      {
        v9 = *(_QWORD *)(a2 + 40);
        if ((_DWORD)v7)
        {
          v10 = 8 * v7;
          v9 = *(_QWORD *)(a2 + 40);
          while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
          {
            v9 += 8;
            v10 -= 8;
            if (!v10)
            {
              v9 = v8;
              goto LABEL_16;
            }
          }
        }
        goto LABEL_16;
      }
      v9 = v6 + 8 * v7;
    }
    else
    {
      v9 = 0;
      v7 = 0;
    }
    v8 = v6 + 8 * v7;
LABEL_16:
    if (v6)
      v6 += 8 * *(unsigned int *)(v6 - 4);
    if (v6 == v9)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        v12 = v9 + 8;
        v13 = *(_DWORD *)(*(_QWORD *)v9 + 8);
        if (v11 <= v13)
          v11 = v13;
        v9 = v8;
        if (v12 != v8)
        {
          v9 = v12;
          while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
          {
            v9 += 8;
            if (v9 == v8)
            {
              v9 = v8;
              break;
            }
          }
        }
      }
      while (v9 != v6);
    }
    if (v11 <= 1)
      a2 = 1;
    else
      a2 = v11;
    if (v5 == 1)
    {
      v14 = *(_DWORD *)(v4 + 136);
      if (v14 >= a2)
        a2 = a2;
      else
        a2 = v14;
    }
    goto LABEL_37;
  }
  a2 = *(unsigned int *)(v4 + 136);
LABEL_37:
  v15 = (WebCore::AudioNodeOutput *)**((_QWORD **)this + 9);
  if ((_DWORD)a2 != *((_DWORD *)v15 + 2))
    WebCore::AudioNodeOutput::setNumberOfChannels(v15, a2);
LABEL_39:
  WebCore::AudioNodeInput::updateInternalBus(v2, (void *)a2);
  WebCore::AudioWorkletNode::updatePullStatus(this);
}

BOOL WebCore::AudioWorkletNode::virtualHasPendingActivity(WebCore::AudioWorkletNode *this)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1955420A4);
  }
  v4 = &v3;
  return *(_BYTE *)(((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, (char *)this + 40)+ 376) != 3;
}

uint64_t WebCore::AudioWorkletProcessor::create@<X0>(WebCore::AudioWorkletProcessor *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  _QWORD *v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;

  if (!(*(unsigned int (**)(WebCore::AudioWorkletProcessor *, WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 80))(this, a2)|| ((*(uint64_t (**)(WebCore::AudioWorkletProcessor *))(*(_QWORD *)this + 496))(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1955421F4);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v5)
  {
    v6 = (_QWORD *)bmalloc::api::isoAllocate();
    *(_QWORD *)a3 = WebCore::AudioWorkletProcessor::AudioWorkletProcessor(v6, (uint64_t)this, (uint64_t)v5);
    *(_DWORD *)(a3 + 16) = 0;
    WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v5 + 1, v7);
    v9 = (WTF::StringImpl *)*v5;
    *v5 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    return WTF::fastFree((WTF *)v5, v8);
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

_QWORD *WebCore::AudioWorkletProcessor::AudioWorkletProcessor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = 0;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = a1;
  a1[1] = v6;
  a1[2] = a2;
  v7 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v7 += 2;
  a1[3] = v7;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(v8 + 48);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_7:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = v8;
  __dmb(0xAu);
  v12 = a1[6];
  a1[6] = 0;
  if (v12)
    *(_QWORD *)(v12 + 8) = 3;
  a1[7] = 0;
  a1[8] = 0;
  __dmb(0xAu);
  v13 = a1[8];
  a1[8] = 0;
  if (v13)
    *(_QWORD *)(v13 + 8) = 3;
  a1[9] = 0;
  a1[10] = 0;
  __dmb(0xAu);
  v14 = a1[10];
  a1[10] = 0;
  if (v14)
    *(_QWORD *)(v14 + 8) = 3;
  return a1;
}

void WebCore::AudioWorkletThread::~AudioWorkletThread(WebCore::AudioWorkletThread *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E3369170;
  WebCore::Settings::Values::~Values((WebCore::AudioWorkletThread *)((char *)this + 192), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::WorkerOrWorkletThread::~WorkerOrWorkletThread(this);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E3369170;
  WebCore::Settings::Values::~Values((WebCore::AudioWorkletThread *)((char *)this + 192), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::WorkerOrWorkletThread::~WorkerOrWorkletThread(this);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::AudioWorkletThread::createGlobalScope@<X0>(WebCore::AudioWorkletThread *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  int v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16;

  result = JSC::VM::tryCreate();
  if (v14)
  {
    v5 = bmalloc::api::isoAllocate();
    v15[0] = v14;
    v6 = WebCore::WorkletGlobalScope::WorkletGlobalScope(v5, (uint64_t)this, v15, (uint64_t)this + 128);
    *(_QWORD *)v6 = off_1E3368E20;
    *(_QWORD *)(v6 + 96) = &unk_1E3369030;
    *(_QWORD *)(v6 + 320) = &unk_1E3369058;
    *(_QWORD *)(v6 + 1048) = 0;
    *(_DWORD *)(v6 + 1056) = *((_DWORD *)this + 43);
    *(_QWORD *)(v6 + 1077) = 0;
    *(_OWORD *)(v6 + 1064) = 0u;
    *(_BYTE *)(v6 + 1104) = 0;
    *(_OWORD *)(v6 + 1088) = 0u;
    *(_QWORD *)(v6 + 1112) = 0;
    *(_BYTE *)(v6 + 1120) = 0;
    *(_BYTE *)(v6 + 1128) = 0;
    v7 = (unsigned int *)v15[0];
    v15[0] = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v12 = (WTF *)MEMORY[0x19AEA3AF8]();
        WTF::fastFree(v12, v13);
      }
    }
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_11:
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v16 = v5;
    WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v5 + 224), &v16, (uint64_t)v15);
    v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v11 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_18:
    result = 0;
    goto LABEL_19;
  }
  v5 = 0;
LABEL_19:
  *a2 = v5;
  return result;
}

uint64_t WebCore::AudioWorkletThread::workerLoaderProxy(WebCore::AudioWorkletThread *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    return v1 + 16;
  else
    return 0;
}

uint64_t WebCore::AudioWorkletThread::workerDebuggerProxy(WebCore::AudioWorkletThread *this)
{
  return 0;
}

uint64_t WebCore::AudioWorkletThread::createThread(WebCore::AudioWorkletThread *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3369358;
  v2[1] = this;
  v4 = (uint64_t)v2;
  WTF::Thread::create();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void WebCore::AudioWorklet::~AudioWorklet(WebCore::AudioWorklet *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::Worklet::~Worklet(this, a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::Worklet::~Worklet(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::Worklet::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::Worklet::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::SecurityContext::crossOriginOpenerPolicy(WebCore::SecurityContext *this)
{
  return (uint64_t)this + 48;
}

uint64_t WebCore::WorkerOrWorkletGlobalScope::referrerPolicy(WebCore::WorkerOrWorkletGlobalScope *this)
{
  return *((unsigned __int8 *)this + 400);
}

uint64_t WebCore::WorkletGlobalScope::isSecureContext(WebCore::WorkletGlobalScope *this)
{
  return 0;
}

uint64_t WebCore::ScriptExecutionContext::isServiceWorkerGlobalScope(WebCore::ScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::WorkletGlobalScope::isWorkletGlobalScope(WebCore::WorkletGlobalScope *this)
{
  return 1;
}

uint64_t WebCore::WorkletGlobalScope::url(WebCore::WorkletGlobalScope *this)
{
  return (uint64_t)this + 448;
}

uint64_t WebCore::WorkletGlobalScope::settingsValues(WebCore::WorkletGlobalScope *this)
{
  return (uint64_t)this + 552;
}

uint64_t WebCore::WorkerOrWorkletGlobalScope::notificationClient(WebCore::WorkerOrWorkletGlobalScope *this)
{
  return 0;
}

uint64_t WebCore::WorkerOrWorkletGlobalScope::sessionID(WebCore::WorkerOrWorkletGlobalScope *this)
{
  return *((_QWORD *)this + 49);
}

uint64_t WebCore::WorkletGlobalScope::idbConnectionProxy(WebCore::WorkletGlobalScope *this)
{
  return 0;
}

uint64_t WebCore::WorkletGlobalScope::socketProvider(WebCore::WorkletGlobalScope *this)
{
  return 0;
}

uint64_t WebCore::ScriptExecutionContext::graphicsClient(WebCore::ScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::WorkerOrWorkletGlobalScope::advancedPrivacyProtections(WebCore::WorkerOrWorkletGlobalScope *this)
{
  return *((unsigned __int16 *)this + 212);
}

uint64_t WebCore::WorkerOrWorkletGlobalScope::noiseInjectionHashSalt(WebCore::WorkerOrWorkletGlobalScope *this)
{
  return *((_QWORD *)this + 51);
}

uint64_t WebCore::WorkletGlobalScope::topOrigin(WebCore::WorkletGlobalScope *this)
{
  return *((_QWORD *)this + 55);
}

uint64_t WebCore::ScriptExecutionContext::shouldBypassMainWorldContentSecurityPolicy(WebCore::ScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::ScriptExecutionContext::cssFontSelector(WebCore::ScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::WorkletGlobalScope::errorEventTarget(WebCore::WorkletGlobalScope *this)
{
  return (uint64_t)this + 320;
}

void WebCore::WorkletGlobalScope::wrapCryptoKey()
{
  __break(0xC471u);
}

void WebCore::WorkletGlobalScope::unwrapCryptoKey()
{
  __break(0xC471u);
}

uint64_t WebCore::AudioWorkletGlobalScope::destination(WebCore::AudioWorkletGlobalScope *this)
{
  return 2;
}

uint64_t WebCore::WorkerOrWorkletGlobalScope::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 312);
  return this;
}

_DWORD *WebCore::WorkerOrWorkletGlobalScope::derefEventTarget(_DWORD *this)
{
  if (this[78] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 40))(this);
  --this[78];
  return this;
}

uint64_t WebCore::WorkletGlobalScope::isPaintWorkletGlobalScope(WebCore::WorkletGlobalScope *this)
{
  return 0;
}

uint64_t WebCore::AudioWorkletGlobalScope::isAudioWorkletGlobalScope(WebCore::AudioWorkletGlobalScope *this)
{
  return 1;
}

uint64_t WebCore::WorkletGlobalScope::eventTargetInterface(WebCore::WorkletGlobalScope *this)
{
  return 84;
}

uint64_t `non-virtual thunk to'WebCore::WorkletGlobalScope::eventTargetInterface(WebCore::WorkletGlobalScope *this)
{
  return 84;
}

uint64_t `non-virtual thunk to'WebCore::WorkerOrWorkletGlobalScope::scriptExecutionContext(WebCore::WorkerOrWorkletGlobalScope *this)
{
  return (uint64_t)this - 320;
}

uint64_t `non-virtual thunk to'WebCore::WorkerOrWorkletGlobalScope::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WorkerOrWorkletGlobalScope::derefEventTarget(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 320) + 40))(this - 320);
  --*(_DWORD *)(this - 8);
  return this;
}

uint64_t WebCore::AudioWorkletMessagingProxy::isAudioWorkletMessagingProxy(WebCore::AudioWorkletMessagingProxy *this)
{
  return 1;
}

uint64_t WebCore::WorkerLoaderProxy::isWorkerMessagingProxy(WebCore::WorkerLoaderProxy *this)
{
  return 0;
}

uint64_t WebCore::WorkerLoaderProxy::reportingClient(WebCore::WorkerLoaderProxy *this)
{
  return 0;
}

double WebCore::AudioWorkletNode::tailTime(WebCore::AudioWorkletNode *this)
{
  return *((double *)this + 35);
}

double WebCore::AudioWorkletNode::latencyTime(WebCore::AudioWorkletNode *this)
{
  return 0.0;
}

uint64_t WebCore::AudioWorkletNode::requiresTailProcessing(WebCore::AudioWorkletNode *this)
{
  return 1;
}

WTF::Thread *`non-virtual thunk to'WebCore::AudioWorkletNode::ref(WebCore::AudioWorkletNode *this)
{
  return WebCore::AudioNode::ref((WebCore::AudioWorkletNode *)((char *)this - 152));
}

WTF::Thread *`non-virtual thunk to'WebCore::AudioWorkletNode::deref(WebCore::AudioWorkletNode *this)
{
  return WebCore::AudioNode::deref((WebCore::AudioWorkletNode *)((char *)this - 152));
}

uint64_t WebCore::WorkerOrWorkletThread::shouldWaitForWebInspectorOnStartup(WebCore::WorkerOrWorkletThread *this)
{
  return 0;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore20AudioParamDescriptorELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WebCore::Settings::Values *WebCore::Settings::Values::Values(WebCore::Settings::Values *this, const WebCore::Settings::Values *a2)
{
  __int128 v4;
  __int128 v5;
  _DWORD *v6;
  _DWORD *v7;
  __int128 v8;
  _DWORD *v9;
  __int128 v10;
  __int128 v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = *(_OWORD *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(_OWORD *)this = v4;
  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::HashTable((uint64_t *)this + 3, (int **)a2 + 3);
  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::HashTable((uint64_t *)this + 4, (int **)a2 + 4);
  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::HashTable((uint64_t *)this + 5, (int **)a2 + 5);
  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::HashTable((uint64_t *)this + 6, (int **)a2 + 6);
  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::HashTable((uint64_t *)this + 7, (int **)a2 + 7);
  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::HashTable((uint64_t *)this + 8, (int **)a2 + 8);
  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::HashTable((uint64_t *)this + 9, (int **)a2 + 9);
  v5 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 14) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 15) = v7;
  v8 = *((_OWORD *)a2 + 8);
  *((_BYTE *)this + 144) = *((_BYTE *)a2 + 144);
  *((_OWORD *)this + 8) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 19) = v9;
  v10 = *((_OWORD *)a2 + 10);
  v11 = *((_OWORD *)a2 + 12);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_OWORD *)this + 12) = v11;
  *((_OWORD *)this + 10) = v10;
  v12 = (_DWORD *)*((_QWORD *)a2 + 26);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 26) = v12;
  v13 = *((_QWORD *)a2 + 27);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_QWORD *)this + 27) = v13;
  v14 = (_DWORD *)*((_QWORD *)a2 + 29);
  if (v14)
    *v14 += 2;
  *((_QWORD *)this + 29) = v14;
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  v15 = (_DWORD *)*((_QWORD *)a2 + 31);
  if (v15)
    *v15 += 2;
  *((_QWORD *)this + 31) = v15;
  *((_OWORD *)this + 16) = *((_OWORD *)a2 + 16);
  v16 = *((_OWORD *)a2 + 17);
  v17 = *((_OWORD *)a2 + 18);
  v18 = *((_OWORD *)a2 + 19);
  *(_OWORD *)((char *)this + 313) = *(_OWORD *)((char *)a2 + 313);
  *((_OWORD *)this + 18) = v17;
  *((_OWORD *)this + 19) = v18;
  *((_OWORD *)this + 17) = v16;
  v19 = (_DWORD *)*((_QWORD *)a2 + 42);
  if (v19)
    *v19 += 2;
  *((_QWORD *)this + 42) = v19;
  v20 = *(_OWORD *)((char *)a2 + 344);
  *(_OWORD *)((char *)this + 360) = *(_OWORD *)((char *)a2 + 360);
  *(_OWORD *)((char *)this + 344) = v20;
  v22 = *(_OWORD *)((char *)a2 + 456);
  v21 = *(_OWORD *)((char *)a2 + 472);
  v23 = *(_OWORD *)((char *)a2 + 440);
  *(_QWORD *)((char *)this + 485) = *(_QWORD *)((char *)a2 + 485);
  *(_OWORD *)((char *)this + 456) = v22;
  *(_OWORD *)((char *)this + 472) = v21;
  *(_OWORD *)((char *)this + 440) = v23;
  v24 = *(_OWORD *)((char *)a2 + 376);
  v25 = *(_OWORD *)((char *)a2 + 392);
  v26 = *(_OWORD *)((char *)a2 + 424);
  *(_OWORD *)((char *)this + 408) = *(_OWORD *)((char *)a2 + 408);
  *(_OWORD *)((char *)this + 424) = v26;
  *(_OWORD *)((char *)this + 376) = v24;
  *(_OWORD *)((char *)this + 392) = v25;
  return this;
}

uint64_t *WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::HashTable(uint64_t *a1, int **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int *v33;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_44;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_44:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(16 * v11 + 16));
  v14 = (_QWORD *)(v12 + 24);
  v15 = v11;
  do
  {
    *((_DWORD *)v14 - 2) = -2;
    *v14 = 0;
    v14 += 2;
    --v15;
  }
  while (v15);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v16 = *a2;
  if (*a2)
  {
    v17 = *(v16 - 1);
    v18 = &v16[4 * v17];
    if (*(v16 - 3))
    {
      v19 = v16;
      if ((_DWORD)v17)
      {
        v20 = 16 * v17;
        v19 = v16;
        while ((*v19 + 3) <= 1)
        {
          v19 += 4;
          v20 -= 16;
          if (!v20)
          {
            v19 = v18;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v19 = &v16[4 * v17];
  }
  else
  {
    v19 = 0;
    v17 = 0;
  }
  v18 = &v16[4 * v17];
LABEL_21:
  if (v16)
    v21 = &v16[4 * *(v16 - 1)];
  else
    v21 = 0;
  while (v19 != v21)
  {
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 8);
    else
      v23 = 0;
    v24 = 0;
    v25 = *v19;
    v26 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
    v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
    do
    {
      v28 = v27 & v23;
      v27 = ++v24 + v28;
    }
    while (*(_DWORD *)(v22 + 16 * v28) != -2);
    v29 = (_DWORD *)(v22 + 16 * v28);
    *v29 = v25;
    v30 = (WTF::StringImpl **)(v29 + 2);
    v31 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
    if (v31)
      *(_DWORD *)v31 += 2;
    v32 = *v30;
    *v30 = v31;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v13);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v19 + 4;
    v19 = v18;
    if (v33 != v18)
    {
      v19 = v33;
      while ((*v19 + 3) <= 1)
      {
        v19 += 4;
        if (v19 == v18)
        {
          v19 = v18;
          break;
        }
      }
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioScheduledSourceNode::finish(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF *v2;
  WebCore::AudioNode *v3;
  WebCore::AudioNode *v5;
  void *v6;

  *a1 = &off_1E33691F0;
  v2 = (WTF *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v5 = (WebCore::AudioNode *)*((_QWORD *)v2 + 1);
      --*((_QWORD *)v5 + 21);
      *((_QWORD *)v2 + 1) = 0;
      WebCore::AudioNode::deref(v5);
      WTF::fastFree(v2, v6);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  v3 = (WebCore::AudioNode *)a1[2];
  a1[2] = 0;
  if (v3)
    WebCore::AudioNode::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioScheduledSourceNode::finish(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WebCore::AudioNode *v4;
  WebCore::AudioNode *v6;
  void *v7;

  *(_QWORD *)this = &off_1E33691F0;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = (WebCore::AudioNode *)*((_QWORD *)v3 + 1);
      --*((_QWORD *)v6 + 21);
      *((_QWORD *)v3 + 1) = 0;
      WebCore::AudioNode::deref(v6);
      WTF::fastFree(v3, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::AudioNode *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WebCore::AudioNode::deref(v4);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::AudioScheduledSourceNode::finish(void)::$_0,void>::call(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned __int8 *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  _DWORD *v11;
  unsigned __int8 *v12;
  void *v13;
  char v14;
  char *v15;

  v1 = *(unsigned int **)(a1 + 8);
  v2 = v1[12];
  if ((_DWORD)v2 == -1)
  {
    v12 = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(v12, v13);
  }
  else
  {
    v15 = &v14;
    result = (unsigned __int8 *)((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v15, v1 + 10);
    if (!result[379])
    {
      v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
        v5 = WebCore::threadGlobalDataSlow((WebCore *)result);
      v6 = *(_QWORD *)(v5 + 40);
      if (!v6)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
        v6 = *(_QWORD *)(v5 + 40);
      }
      v7 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
      *(_QWORD *)v7 = off_1E33A4B48;
      *(_QWORD *)(v7 + 8) = 0;
      v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8200;
      v10 = *(_QWORD *)(v6 + 752) != 0;
      *(_DWORD *)(v7 + 16) = 1;
      *(_DWORD *)(v7 + 20) = v9 | v10;
      v11 = *(_DWORD **)(v6 + 752);
      if (v11)
        *v11 += 2;
      *(_QWORD *)(v7 + 24) = v11;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = v8;
      *(_QWORD *)(v7 + 64) = 0;
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v1 + 48))(v1, v7);
      if (*(_DWORD *)(v7 + 16) == 1)
        return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      else
        --*(_DWORD *)(v7 + 16);
    }
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v14 = *((_QWORD *)v2 + 2);
    v6 = (bmalloc::api *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v14 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    v9 = *((_QWORD *)v6 + 10);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *((_QWORD *)v6 + 10) = 0;
    }
    v10 = *((_QWORD *)v6 + 8);
    if (v10)
    {
      *(_QWORD *)(v10 + 8) = 3;
      *((_QWORD *)v6 + 8) = 0;
    }
    v11 = *((_QWORD *)v6 + 6);
    if (v11)
    {
      *(_QWORD *)(v11 + 8) = 3;
      *((_QWORD *)v6 + 6) = 0;
    }
    WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)v6 + 4, a2);
    v13 = (WTF::StringImpl *)*((_QWORD *)v6 + 3);
    *((_QWORD *)v6 + 3) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
      *(_QWORD *)v6 = 0;
    }
    this = (unsigned __int8 *)bmalloc::api::isoDeallocate(v6, v12);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioWorklet::createProcessor(WTF::String const&,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WebCore::AudioWorkletNode &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::AudioNode *v3;
  unsigned int *v4;
  WTF::StringImpl *v5;
  unsigned int v7;
  unsigned int v8;
  void *v9;

  *a1 = &off_1E3369228;
  v3 = (WebCore::AudioNode *)a1[7];
  a1[7] = 0;
  if (v3)
    WebCore::AudioNode::deref(v3);
  v4 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v4 + 2), a2);
      WTF::fastFree((WTF *)v4, v9);
    }
  }
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorklet::createProcessor(WTF::String const&,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WebCore::AudioWorkletNode &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::AudioNode *v3;
  unsigned int *v4;
  WTF::StringImpl *v5;
  unsigned int v7;
  unsigned int v8;
  void *v9;

  *(_QWORD *)this = &off_1E3369228;
  v3 = (WebCore::AudioNode *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    WebCore::AudioNode::deref(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v4 + 2), a2);
      WTF::fastFree((WTF *)v4, v9);
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WebCore::ContextDestructionObserver *WTF::Detail::CallableWrapper<WebCore::AudioWorklet::createProcessor(WTF::String const&,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WebCore::AudioWorkletNode &)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  const WTF::StringImpl *v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  WebCore::ContextDestructionObserver *v21;
  uint64_t v22;
  WebCore::ContextDestructionObserver *v23;
  WebCore::ContextDestructionObserver *result;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  _DWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  void *v35;
  objc_class *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  char **v41;
  BOOL v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v51;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v88;
  int v89;
  int v90;
  JSValue v91;
  uint64_t *v92;
  void *v94;
  unsigned __int8 *v95;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  _OWORD v101[2];
  WTF *v102;
  int v103;
  BOOL v104;
  WebCore::ContextDestructionObserver *v105;
  uint64_t v106;
  WTF *v107;
  _OWORD v108[4];
  uint64_t v109;
  _BYTE v110[16];

  v4 = *(unsigned __int8 **)(a1 + 56);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195543B54);
  }
  v6 = *(_OWORD *)(a1 + 32);
  v101[0] = *(_OWORD *)(a1 + 16);
  v101[1] = v6;
  v7 = *(_QWORD *)(a2 + 1064);
  if (v7)
  {
    v8 = *(_DWORD *)(a2 + 1072);
    v9 = v8 - 1;
    v10 = *(_DWORD *)(a2 + 1080);
    v11 = *(WTF::StringImpl **)(a1 + 8);
    v12 = *((_DWORD *)v11 + 4);
    if (v12 < 0x100)
    {
      v13 = WTF::StringImpl::hashSlowCase(v11);
      v7 = *(_QWORD *)(a2 + 1064);
    }
    else
    {
      v13 = v12 >> 8;
    }
    v14 = (v13 ^ v10) & v9;
    v15 = v7 + 16 * v14;
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15)
    {
      v17 = -1;
      while (1)
      {
        v18 = *((_DWORD *)v16 + 4);
        if (v18 < 0x100)
          v19 = WTF::StringImpl::hashSlowCase(v16);
        else
          v19 = v18 >> 8;
        if (++v17 > ((v14 + v8 - ((v19 ^ v10) & v9)) & v9))
          goto LABEL_16;
        if (v19 == v13 && (WTF::equal(*(WTF **)v15, *(const WTF::StringImpl **)(a1 + 8), v5) & 1) != 0)
          break;
        v14 = (v14 + 1) & v9;
        v15 = *(_QWORD *)(a2 + 1064) + 16 * v14;
        v16 = *(WTF **)v15;
        if (!*(_QWORD *)v15)
          goto LABEL_16;
      }
      v25 = *(_QWORD *)(v15 + 8);
      if (!v25)
        goto LABEL_16;
      v26 = **(WTF::StringImpl ****)(v25 + 24);
      v27 = *v26;
      v28 = (JSC::VM *)*((_QWORD *)*v26 + 7);
      JSC::JSLockHolder::JSLockHolder();
      v29 = *(_DWORD **)(a1 + 8);
      if (v29)
        *v29 += 2;
      WebCore::MessagePort::entangle((WebCore::ScriptExecutionContext *)a2, v101, &v105);
      v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v30 = v29;
      v30[1] = v105;
      v32 = *(uint64_t **)(a2 + 1112);
      *(_QWORD *)(a2 + 1112) = v30;
      if (v32)
      {
        WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v32 + 1, v31);
        v34 = (WTF::StringImpl *)*v32;
        *v32 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
        WTF::fastFree((WTF *)v32, v33);
      }
      LOBYTE(v105) = 0;
      v106 = 0x800000000;
      v107 = (WTF *)((char *)v108 + 8);
      memset(v108, 0, sizeof(v108));
      v109 = 0;
      v104 = 0;
      v36 = (objc_class *)WebCore::SerializedScriptValue::deserialize(*(_QWORD *)(a1 + 48), v27, v27, 0, &v104);
      if (*((_DWORD *)v28 + 20))
      {
        v85 = 0;
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0 || v104)
        {
LABEL_163:
          v92 = *(uint64_t **)&v108[0];
          if (*(_QWORD *)&v108[0])
          {
            v102 = (WTF *)&v106;
            v100 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v108[0], (uint64_t *)&v102);
            WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v92, v100);
          }
          if (v107 != (WTF *)((char *)v108 + 8) && v107 != 0)
            WTF::fastFree(v107, v35);
          MEMORY[0x19AEA32A0](v110);
          if (!v85)
            goto LABEL_16;
          v95 = v4 + 200;
          if (__ldaxr(v4 + 200))
          {
            __clrex();
          }
          else if (!__stxr(1u, v95))
          {
LABEL_175:
            v97 = *((_QWORD *)v4 + 26);
            *((_QWORD *)v4 + 26) = v85;
            if (v97)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v97 + 8), v94);
            v98 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v98)
              v98 = WTF::Thread::initializeCurrentTLS(0);
            *((_QWORD *)v4 + 30) = v98;
            v99 = __ldxr(v95);
            if (v99 == 1)
            {
              if (!__stlxr(0, v95))
                goto LABEL_18;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 200));
            goto LABEL_18;
          }
          MEMORY[0x19AEA534C](v4 + 200);
          goto LABEL_175;
        }
      }
      else if (v104)
      {
        goto LABEL_162;
      }
      v37 = v106;
      if ((_DWORD)v106 == HIDWORD(v106) || v107 != (WTF *)((char *)v108 + 8) && v107)
      {
        v91.super.isa = v36;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v106, v91) == 1)
          LOBYTE(v105) = 1;
      }
      else
      {
        *((_QWORD *)v107 + v106) = v36;
        LODWORD(v106) = v37 + 1;
      }
      v102 = v107;
      v103 = v106;
      v38 = JSC::construct();
      if (!*((_DWORD *)v28 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) == 0)
      {
        v39 = *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C);
        v40 = *(_DWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C) != 0;
        v41 = (char **)(16 * v39);
        if ((_DWORD)v39)
          v42 = v41 == &WebCore::JSAudioWorkletProcessor::s_info;
        else
          v42 = 1;
        if (!v42)
        {
          do
          {
            v41 = (char **)v41[2];
            v40 = v41 != 0;
          }
          while (v41 != &WebCore::JSAudioWorkletProcessor::s_info && v41 != 0);
        }
        if (v40)
        {
          v44 = *(_QWORD *)(v38 + 24);
          v45 = *(_QWORD *)(v44 + 8);
          if (__ldaxr((unsigned __int8 *)v45))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v45))
          {
            goto LABEL_49;
          }
          MEMORY[0x19AEA534C](v45);
LABEL_49:
          v47 = *(_QWORD *)(v45 + 24);
          v48 = __ldxr((unsigned __int8 *)v45);
          if (v48 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v45))
            {
LABEL_54:
              if (!v47)
              {
                __break(0xC471u);
                JUMPOUT(0x195543CE8);
              }
              v49 = (unsigned __int8 *)(a2 + 1104);
              if (__ldaxr((unsigned __int8 *)(a2 + 1104)))
              {
                __clrex();
              }
              else if (!__stxr(1u, v49))
              {
                goto LABEL_59;
              }
              MEMORY[0x19AEA534C](a2 + 1104);
LABEL_59:
              v51 = *(_QWORD *)(v44 + 8);
              if (__ldaxr((unsigned __int8 *)v51))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v51))
              {
                goto LABEL_63;
              }
              MEMORY[0x19AEA534C](v51);
LABEL_63:
              if (*(_QWORD *)(v51 + 24))
              {
                ++*(_QWORD *)(v51 + 16);
                v53 = v51;
              }
              else
              {
                v53 = 0;
              }
              v54 = __ldxr((unsigned __int8 *)v51);
              if (v54 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v51))
                {
LABEL_70:
                  if (!v53)
                    goto LABEL_128;
                  v55 = (uint64_t *)(a2 + 1088);
                  v56 = *(_DWORD *)(a2 + 1096) + 1;
                  *(_DWORD *)(a2 + 1096) = v56;
                  if (v56 <= *(_DWORD *)(a2 + 1100))
                  {
                    v57 = *v55;
                  }
                  else
                  {
                    _ZN3WTF9HashTableIPKN7WebCore21AudioWorkletProcessorENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((uint64_t *)(a2 + 1088), v35);
                    *(_DWORD *)(a2 + 1096) = 0;
                    v57 = *(_QWORD *)(a2 + 1088);
                    if (v57)
                    {
                      v58 = *(_DWORD *)(v57 - 12);
                      if (v58 > 0x7FFFFFFE)
                        v58 = 0x7FFFFFFF;
                    }
                    else
                    {
                      v58 = 0;
                    }
                    *(_DWORD *)(a2 + 1100) = 2 * v58;
                  }
                  if (v57
                    || (WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash((uint64_t *)(a2 + 1088), 8u), (v57 = *v55) != 0))
                  {
                    v59 = *(_DWORD *)(v57 - 8);
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v60 = (~(v44 << 32) + v44) ^ ((unint64_t)(~(v44 << 32) + v44) >> 22);
                  v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
                  v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
                  v63 = v59 & ((v62 >> 31) ^ v62);
                  v64 = (_QWORD *)(v57 + 16 * v63);
                  v65 = *v64;
                  if (*v64)
                  {
                    v66 = 0;
                    v67 = 1;
                    while (v65 != v44)
                    {
                      if (v65 == -1)
                        v66 = v64;
                      v63 = (v63 + v67) & v59;
                      v64 = (_QWORD *)(v57 + 16 * v63);
                      v65 = *v64;
                      ++v67;
                      if (!*v64)
                      {
                        if (v66)
                        {
                          *v66 = 0;
                          v66[1] = 0;
                          --*(_DWORD *)(*v55 - 16);
                          v64 = v66;
                        }
                        goto LABEL_90;
                      }
                    }
                    if (__ldaxr((unsigned __int8 *)v53))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, (unsigned __int8 *)v53))
                    {
                      goto LABEL_118;
                    }
                    MEMORY[0x19AEA534C](v53);
LABEL_118:
                    v81 = *(_QWORD *)(v53 + 16) - 1;
                    *(_QWORD *)(v53 + 16) = v81;
                    if (v81)
                    {
                      v90 = __ldxr((unsigned __int8 *)v53);
                      if (v90 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v53))
                          goto LABEL_128;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v53);
LABEL_128:
                      v84 = __ldxr(v49);
                      if (v84 == 1)
                      {
                        if (!__stlxr(0, v49))
                        {
LABEL_133:
                          v85 = *(_QWORD *)(v38 + 24);
                          v86 = *(_QWORD *)(v85 + 8);
                          if (__ldaxr((unsigned __int8 *)v86))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, (unsigned __int8 *)v86))
                          {
                            goto LABEL_137;
                          }
                          MEMORY[0x19AEA534C](v86);
LABEL_137:
                          ++*(_QWORD *)(v86 + 8);
                          v88 = __ldxr((unsigned __int8 *)v86);
                          if (v88 == 1)
                          {
                            if (!__stlxr(0, (unsigned __int8 *)v86))
                              goto LABEL_163;
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow((WTF::Lock *)v86);
                          goto LABEL_163;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v49);
                      goto LABEL_133;
                    }
                    v82 = *(_QWORD *)(v53 + 8);
                    v83 = __ldxr((unsigned __int8 *)v53);
                    if (v83 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v53))
                      {
LABEL_124:
                        if (!v82)
                          WTF::fastFree((WTF *)v53, v35);
                        goto LABEL_128;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v53);
                    goto LABEL_124;
                  }
LABEL_90:
                  v68 = v64[1];
                  *v64 = v44;
                  v64[1] = v53;
                  if (!v68)
                  {
LABEL_105:
                    v74 = *v55;
                    if (*v55)
                      v75 = *(_DWORD *)(v74 - 12) + 1;
                    else
                      v75 = 1;
                    *(_DWORD *)(v74 - 12) = v75;
                    v76 = *v55;
                    if (*v55)
                      v77 = *(_DWORD *)(v76 - 12);
                    else
                      v77 = 0;
                    v78 = (*(_DWORD *)(v76 - 16) + v77);
                    v79 = *(unsigned int *)(v76 - 4);
                    if (v79 > 0x400)
                    {
                      if (v79 > 2 * v78)
                        goto LABEL_128;
                    }
                    else
                    {
                      if (3 * v79 > 4 * v78)
                        goto LABEL_128;
                      if (!(_DWORD)v79)
                      {
                        v80 = 8;
                        goto LABEL_127;
                      }
                    }
                    v80 = (_DWORD)v79 << (6 * *(_DWORD *)(v76 - 12) >= (2 * v79));
LABEL_127:
                    WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash(v55, v80);
                    goto LABEL_128;
                  }
                  if (__ldaxr((unsigned __int8 *)v68))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v68))
                  {
                    goto LABEL_97;
                  }
                  MEMORY[0x19AEA534C](v68);
LABEL_97:
                  v71 = *(_QWORD *)(v68 + 16) - 1;
                  *(_QWORD *)(v68 + 16) = v71;
                  if (v71)
                  {
                    v89 = __ldxr((unsigned __int8 *)v68);
                    if (v89 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v68))
                        goto LABEL_105;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v68);
                    goto LABEL_105;
                  }
                  v72 = *(_QWORD *)(v68 + 8);
                  v73 = __ldxr((unsigned __int8 *)v68);
                  if (v73 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v68))
                    {
LABEL_103:
                      if (!v72)
                        WTF::fastFree((WTF *)v68, v35);
                      goto LABEL_105;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v68);
                  goto LABEL_103;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v51);
              goto LABEL_70;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v45);
          goto LABEL_54;
        }
      }
LABEL_162:
      v85 = 0;
      goto LABEL_163;
    }
  }
LABEL_16:
  WebCore::AudioNode::ref((WebCore::AudioNode *)v4);
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v20 = &off_1E3369320;
  *(_QWORD *)(v20 + 8) = v4;
  *(_QWORD *)(v20 + 16) = v4;
  *(_DWORD *)(v20 + 24) = 0;
  v105 = (WebCore::ContextDestructionObserver *)v20;
  WTF::callOnMainThread();
  v21 = v105;
  v105 = 0;
  if (v21)
    (*(void (**)(WebCore::ContextDestructionObserver *))(*(_QWORD *)v21 + 8))(v21);
LABEL_18:
  v22 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v23 = (WebCore::ContextDestructionObserver *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v23 = &off_1E3369250;
  *((_QWORD *)v23 + 1) = v22;
  v105 = v23;
  WTF::callOnMainThread();
  result = v105;
  v105 = 0;
  if (result)
    return (WebCore::ContextDestructionObserver *)(*(uint64_t (**)(WebCore::ContextDestructionObserver *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioWorklet::createProcessor(WTF::String const&,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WebCore::AudioWorkletNode &)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WebCore::AudioNode *v2;

  v2 = (WebCore::AudioNode *)a1[1];
  *a1 = &off_1E3369250;
  a1[1] = 0;
  if (v2)
    WebCore::AudioNode::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorklet::createProcessor(WTF::String const&,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WebCore::AudioWorkletNode &)::$_0::operator()(WebCore::ScriptExecutionContext &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::AudioNode *v3;

  v3 = (WebCore::AudioNode *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3369250;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WebCore::AudioNode::deref(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::AudioParamDescriptor>>::convert(JSC::VM **a1, JSC::JSCell *a2, unsigned int *a3)
{
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD v16[2];
  WTF::StringImpl *v17;
  _QWORD v18[2];
  int v19;

  result = (WTF::StringImpl *)WebCore::convertDictionary<WebCore::AudioParamDescriptor>(a2, a1, (uint64_t)&v17);
  v5 = v19;
  if (!v19)
  {
    v6 = v17;
    v17 = 0;
    v15 = v6;
    v16[0] = v18[0];
    *(_QWORD *)((char *)v16 + 5) = *(_QWORD *)((char *)v18 + 5);
    v7 = a3[3];
    if ((_DWORD)v7 == a3[2])
    {
      v8 = (uint64_t *)WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v7 + 1, (unint64_t)&v15);
      v10 = (_QWORD *)(*(_QWORD *)a3 + 24 * a3[3]);
      v11 = *v8;
      *v8 = 0;
      *v10 = v11;
      v12 = v8[1];
      *(_QWORD *)((char *)v10 + 13) = *(uint64_t *)((char *)v8 + 13);
      v10[1] = v12;
      result = v15;
      ++a3[3];
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v13 = (WTF::StringImpl **)(*(_QWORD *)a3 + 24 * v7);
      v15 = 0;
      *v13 = v6;
      v14 = (WTF::StringImpl *)v16[0];
      *(WTF::StringImpl **)((char *)v13 + 13) = *(WTF::StringImpl **)((char *)v16 + 5);
      v13[1] = v14;
      ++a3[3];
    }
    v5 = v19;
  }
  if (v5 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3369278[v5])(&v15, &v17);
  return result;
}

unint64_t WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *(_QWORD *)((char *)v7 + 13) = *(_QWORD *)((char *)v9 + 13);
          *((_QWORD *)v7 + 1) = v11;
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20AudioParamDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorkletGlobalScope::registerProcessor(WTF::String &&,WTF::Ref<WebCore::JSAudioWorkletProcessorConstructor,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::AudioWorklet &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)a1 = &off_1E3369298;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)(a1 + 16);
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 16);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorkletGlobalScope::registerProcessor(WTF::String &&,WTF::Ref<WebCore::JSAudioWorkletProcessorConstructor,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::AudioWorklet &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = &off_1E3369298;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorkletGlobalScope::registerProcessor(WTF::String &&,WTF::Ref<WebCore::JSAudioWorkletProcessorConstructor,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::AudioWorklet &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE v11[24];

  v2 = *(_QWORD *)(a2 + 80);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = v3 - 32;
      v5 = (unsigned int *)(v3 - 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = *(_DWORD *)(v3 + 300);
      result = WTF::HashMap<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(v3 + 288), (WTF::StringImpl *)(result + 8), (const WTF::StringImpl *)(result + 16), (uint64_t)v11);
      if (!v7)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 304))(v8);
      }
      do
      {
        v9 = __ldaxr(v5);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v5));
      if (!v10)
      {
        atomic_store(1u, v5);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  return result;
}

uint64_t *_ZN3WTF9HashTableIPKN7WebCore21AudioWorkletProcessorENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_(uint64_t *result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  unsigned int v34;

  v2 = *result;
  if (!*result)
    return result;
  v3 = *(_DWORD *)(v2 - 4);
  if (!v3)
    return result;
  v4 = result;
  v5 = 0;
  v6 = v3 - 1;
  do
  {
    v7 = v6;
    v8 = (_QWORD *)(v2 + 16 * v6);
    if ((unint64_t)(*v8 + 1) < 2)
      goto LABEL_29;
    v9 = v2 + 16 * v6;
    v12 = *(unsigned __int8 **)(v9 + 8);
    v11 = (uint64_t *)(v9 + 8);
    v10 = v12;
    if (__ldaxr(v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_9;
    }
    result = (uint64_t *)MEMORY[0x19AEA534C](v10);
LABEL_9:
    v14 = *((_QWORD *)v10 + 3);
    v15 = __ldxr(v10);
    if (v15 == 1)
    {
      if (!__stlxr(0, v10))
      {
        if (v14)
          goto LABEL_29;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v14)
      goto LABEL_29;
LABEL_15:
    *v8 = -1;
    v16 = *v11;
    *v11 = 0;
    if (!v16)
      goto LABEL_28;
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_20;
    }
    result = (uint64_t *)MEMORY[0x19AEA534C](v16);
LABEL_20:
    v18 = *(_QWORD *)(v16 + 16) - 1;
    *(_QWORD *)(v16 + 16) = v18;
    if (v18)
    {
      v21 = __ldxr((unsigned __int8 *)v16);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
          goto LABEL_28;
      }
      else
      {
        __clrex();
      }
      result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v16);
      goto LABEL_28;
    }
    v19 = *(_QWORD *)(v16 + 8);
    v20 = __ldxr((unsigned __int8 *)v16);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (!v19)
          goto LABEL_27;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (!v19)
LABEL_27:
      result = (uint64_t *)WTF::fastFree((WTF *)v16, a2);
LABEL_28:
    ++v5;
LABEL_29:
    --v6;
  }
  while (v7);
  v22 = *v4;
  if (v5)
  {
    *(_DWORD *)(v22 - 16) += v5;
    v23 = *v4;
    if (*v4)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    *(_DWORD *)(v23 - 12) = v24 - v5;
    v22 = *v4;
  }
  if (v22)
  {
    v25 = *(_DWORD *)(v22 - 4);
    v26 = *(unsigned int *)(v22 - 12);
    if (6 * (int)v26 < v25 && v25 >= 9)
    {
      v28 = (v26 - 1) | ((v26 - 1) >> 1) | ((((_DWORD)v26 - 1) | ((v26 - 1) >> 1)) >> 2);
      v29 = v28 | (v28 >> 4) | ((v28 | (v28 >> 4)) >> 8);
      v30 = (v29 | HIWORD(v29)) + 1;
      if (v30 > 0x400)
      {
        if (v30 > 2 * v26)
          goto LABEL_52;
      }
      else if (3 * v30 > 4 * v26)
      {
LABEL_50:
        v31 = (double)v26;
        v32 = (double)v30;
        v33 = 0.604166667;
LABEL_53:
        if (v32 * v33 <= v31)
          LODWORD(v30) = 2 * v30;
        if (v30 <= 8)
          v34 = 8;
        else
          v34 = v30;
        return (uint64_t *)WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash(v4, v34);
      }
      LODWORD(v30) = 2 * v30;
      if (v30 <= 0x400)
        goto LABEL_50;
LABEL_52:
      v31 = (double)v26;
      v32 = (double)v30;
      v33 = 0.416666667;
      goto LABEL_53;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (uint64_t *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 == -1)
        goto LABEL_52;
      if (!v12)
      {
        v13 = v4 + 16 * v9;
        v14 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (!v14)
          goto LABEL_52;
        if (__ldaxr((unsigned __int8 *)v14))
        {
          __clrex();
          goto LABEL_14;
        }
        if (__stxr(1u, (unsigned __int8 *)v14))
LABEL_14:
          MEMORY[0x19AEA534C](v14);
        v18 = *(_QWORD *)(v14 + 16) - 1;
        *(_QWORD *)(v14 + 16) = v18;
        if (v18)
        {
          v40 = __ldxr((unsigned __int8 *)v14);
          if (v40 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v14))
              goto LABEL_52;
          }
          else
          {
            __clrex();
          }
          goto LABEL_64;
        }
        v19 = *(_QWORD *)(v14 + 8);
        v20 = __ldxr((unsigned __int8 *)v14);
        if (v20 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v14))
          {
            if (!v19)
              goto LABEL_51;
            goto LABEL_52;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
        if (!v19)
          goto LABEL_51;
        goto LABEL_52;
      }
      v16 = *a1;
      if (*a1)
        v17 = *(_DWORD *)(v16 - 8);
      else
        v17 = 0;
      v21 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v17 & ((v23 >> 31) ^ v23);
      v25 = 1;
      do
      {
        v26 = v24;
        v27 = *(_QWORD *)(v16 + 16 * v24);
        v24 = (v24 + v25++) & v17;
      }
      while (v27);
      v28 = (uint64_t *)(v16 + 16 * v26);
      v29 = v28[1];
      v28[1] = 0;
      if (!v29)
        goto LABEL_39;
      if (__ldaxr((unsigned __int8 *)v29))
        break;
      if (__stxr(1u, (unsigned __int8 *)v29))
        goto LABEL_30;
LABEL_31:
      v31 = *(_QWORD *)(v29 + 16) - 1;
      *(_QWORD *)(v29 + 16) = v31;
      if (!v31)
      {
        v32 = *(_QWORD *)(v29 + 8);
        v33 = __ldxr((unsigned __int8 *)v29);
        if (v33 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v29))
          {
            if (v32)
              goto LABEL_39;
LABEL_38:
            WTF::fastFree((WTF *)v29, v8);
            goto LABEL_39;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        if (v32)
          goto LABEL_39;
        goto LABEL_38;
      }
      v41 = __ldxr((unsigned __int8 *)v29);
      if (v41 != 1)
      {
        __clrex();
LABEL_66:
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        goto LABEL_39;
      }
      if (__stlxr(0, (unsigned __int8 *)v29))
        goto LABEL_66;
LABEL_39:
      *v28 = *v11;
      v34 = v4 + 16 * v9;
      v35 = *(_QWORD *)(v34 + 8);
      *(_QWORD *)(v34 + 8) = 0;
      v28[1] = v35;
      v14 = *(_QWORD *)(v34 + 8);
      *(_QWORD *)(v34 + 8) = 0;
      if (!v14)
        goto LABEL_52;
      if (__ldaxr((unsigned __int8 *)v14))
      {
        __clrex();
LABEL_43:
        MEMORY[0x19AEA534C](v14);
        goto LABEL_44;
      }
      if (__stxr(1u, (unsigned __int8 *)v14))
        goto LABEL_43;
LABEL_44:
      v37 = *(_QWORD *)(v14 + 16) - 1;
      *(_QWORD *)(v14 + 16) = v37;
      if (v37)
      {
        v42 = __ldxr((unsigned __int8 *)v14);
        if (v42 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v14))
            goto LABEL_52;
        }
        else
        {
          __clrex();
        }
LABEL_64:
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
        goto LABEL_52;
      }
      v38 = *(_QWORD *)(v14 + 8);
      v39 = __ldxr((unsigned __int8 *)v14);
      if (v39 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v14))
        {
          if (!v38)
            goto LABEL_51;
          goto LABEL_52;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (!v38)
LABEL_51:
        WTF::fastFree((WTF *)v14, v8);
LABEL_52:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    __clrex();
LABEL_30:
    MEMORY[0x19AEA534C](v29);
    goto LABEL_31;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioWorkletMessagingProxy::postTaskToAudioWorklet(WTF::Function<void ()(WebCore::AudioWorklet &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33692C0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorkletMessagingProxy::postTaskToAudioWorklet(WTF::Function<void ()(WebCore::AudioWorklet &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E33692C0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorkletMessagingProxy::postTaskToAudioWorklet(WTF::Function<void ()(WebCore::AudioWorklet &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioWorkletNode::~AudioWorkletNode()::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E33692F8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorkletNode::~AudioWorkletNode()::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33692F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AudioWorkletProcessor,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorkletNode::~AudioWorkletNode()::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v37;
  int v38;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2), (result & 1) == 0))
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (unsigned __int8 *)(a2 + 1104);
  if (__ldaxr((unsigned __int8 *)(a2 + 1104)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEA534C](a2 + 1104);
LABEL_7:
  v9 = (uint64_t *)(a2 + 1088);
  v10 = *(_DWORD *)(a2 + 1096) + 1;
  *(_DWORD *)(a2 + 1096) = v10;
  if (v10 <= *(_DWORD *)(a2 + 1100))
  {
    v11 = *v9;
    if (!*v9)
      goto LABEL_59;
  }
  else
  {
    result = (uint64_t)_ZN3WTF9HashTableIPKN7WebCore21AudioWorkletProcessorENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((uint64_t *)(a2 + 1088), v5);
    *(_DWORD *)(a2 + 1096) = 0;
    v11 = *(_QWORD *)(a2 + 1088);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 12);
      if (v12 > 0x7FFFFFFE)
        v12 = 0x7FFFFFFF;
    }
    else
    {
      v12 = 0;
    }
    *(_DWORD *)(a2 + 1100) = 2 * v12;
    if (!v11)
      goto LABEL_59;
  }
  v13 = *(_DWORD *)(v11 - 8);
  v14 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = *(_QWORD *)(v11 + 16 * v17);
  if (v18 != v6)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v13;
      v18 = *(_QWORD *)(v11 + 16 * v17);
      ++v19;
      if (v18 == v6)
        goto LABEL_21;
    }
    v17 = *(unsigned int *)(v11 - 4);
  }
LABEL_21:
  v20 = *(unsigned int *)(v11 - 4);
  if (v17 != v20)
  {
    v21 = (_QWORD *)(v11 + 16 * v17);
    v23 = v21 + 1;
    v22 = (unsigned __int8 *)v21[1];
    if (!v22)
      goto LABEL_34;
    if (__ldaxr(v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, v22))
    {
      goto LABEL_27;
    }
    result = MEMORY[0x19AEA534C](v22);
LABEL_27:
    v25 = __ldxr(v22);
    if (v25 == 1)
    {
      if (!__stlxr(0, v22))
        goto LABEL_32;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_32:
    v11 = *v9;
    if (!*v9)
      goto LABEL_35;
    v20 = *(unsigned int *)(v11 - 4);
LABEL_34:
    v11 += 16 * v20;
    if ((_QWORD *)v11 == v21)
      goto LABEL_59;
LABEL_35:
    if ((_QWORD *)v11 == v21)
      goto LABEL_59;
    *v21 = -1;
    v26 = *v23;
    *v23 = 0;
    if (!v26)
      goto LABEL_49;
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
      goto LABEL_41;
    }
    result = MEMORY[0x19AEA534C](v26);
LABEL_41:
    v28 = *(_QWORD *)(v26 + 16) - 1;
    *(_QWORD *)(v26 + 16) = v28;
    if (!v28)
    {
      v29 = *(_QWORD *)(v26 + 8);
      v30 = __ldxr((unsigned __int8 *)v26);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v26))
        {
LABEL_47:
          if (!v29)
            result = WTF::fastFree((WTF *)v26, v5);
          goto LABEL_49;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v26);
      goto LABEL_47;
    }
    v38 = __ldxr((unsigned __int8 *)v26);
    if (v38 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
      {
LABEL_49:
        ++*(_DWORD *)(*v9 - 16);
        v31 = *v9;
        if (*v9)
          v32 = *(_DWORD *)(v31 - 12) - 1;
        else
          v32 = -1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v9;
        if (*v9)
        {
          v34 = 6 * *(_DWORD *)(v33 - 12);
          v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9)
            result = WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash(v9, v35 >> 1);
        }
        goto LABEL_59;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v26);
    goto LABEL_49;
  }
LABEL_59:
  v37 = __ldxr(v7);
  if (v37 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  if (__stlxr(0, v7))
    return WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioWorkletNode::fireProcessorErrorOnMainThread(WebCore::AudioWorkletNode::ProcessorError)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WebCore::AudioNode *v2;

  *a1 = &off_1E3369320;
  v2 = (WebCore::AudioNode *)a1[2];
  a1[2] = 0;
  if (v2)
    WebCore::AudioNode::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioWorkletNode::fireProcessorErrorOnMainThread(WebCore::AudioWorkletNode::ProcessorError)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::AudioNode *v3;

  *(_QWORD *)this = &off_1E3369320;
  v3 = (WebCore::AudioNode *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WebCore::AudioNode::deref(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::AudioWorkletNode::fireProcessorErrorOnMainThread(WebCore::AudioWorkletNode::ProcessorError)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  unint64_t v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 24);
  v19 = 0;
  if (v2 <= 1)
    a1 = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v5 = *(_QWORD *)(v4 + 40);
  }
  v15 = 0;
  v16 = 0;
  WebCore::ErrorEvent::create((_QWORD *)(v5 + 1576), (_DWORD **)&v19, (_DWORD **)&v16, 0, 0, &v15, (uint64_t *)&v17);
  v6 = v17;
  v17 = 0;
  v18 = v6;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v1 + 152), v1, 9, (uint64_t *)&v18);
  if (v18)
  {
    if (v18[4] == 1)
      (*(void (**)(void))(*(_QWORD *)v18 + 8))();
    else
      --v18[4];
  }
  v8 = v17;
  v17 = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  if (v15)
  {
    v9 = (uint64_t *)(v15 - 16);
    v10 = *(_QWORD *)(((v15 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = *(uint64_t **)(v15 - 8);
    if (v11)
    {
      v12 = *v9;
      *v11 = *v9;
      *(_QWORD *)(v12 + 8) = v11;
      *v9 = 0;
      v9[1] = 0;
    }
    *v9 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;
    v15 = 0;
  }
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ErrorEvent::create@<X0>(_QWORD *a1@<X0>, _DWORD **a2@<X1>, _DWORD **a3@<X2>, int a4@<W3>, int a5@<W4>, unint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  JSC::HandleSet *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v21;
  unint64_t v22;
  uint64_t result;
  unint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  JSC::HandleSet *v28;
  uint64_t *v29;

  v14 = bmalloc::api::isoAllocate();
  v15 = v14;
  v29 = 0;
  if (*a6)
  {
    v16 = *(JSC::HandleSet **)(((*a6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v17 = (_QWORD *)*((_QWORD *)v16 + 5);
    if (!v17)
    {
      v28 = *(JSC::HandleSet **)(((*a6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      JSC::HandleSet::grow(v16);
      v16 = v28;
      v17 = (_QWORD *)*((_QWORD *)v28 + 5);
    }
    *((_QWORD *)v16 + 5) = *v17;
    v17[2] = 0;
    v18 = v17 + 2;
    *v17 = 0;
    v17[1] = 0;
    v29 = v17 + 2;
    v19 = *a6;
    if (*a6)
    {
      v19 = *(_QWORD *)v19;
      if (v19 && (v19 & 0xFFFE000000000002) == 0)
      {
        v21 = *(_QWORD **)(((unint64_t)(v18 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v22 = v21[3];
        v21 += 3;
        *(v18 - 2) = v22;
        *(v18 - 1) = (unint64_t)v21;
        *v21 = v18 - 2;
        *(_QWORD *)(v22 + 8) = v18 - 2;
      }
    }
    *v18 = v19;
    result = WebCore::ErrorEvent::ErrorEvent(v15, a1, a2, a3, a4, a5, &v29);
    *a7 = v15;
    v24 = v18 - 2;
    v25 = *(_QWORD *)(((unint64_t)(v18 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v26 = (unint64_t *)*(v18 - 1);
    if (v26)
    {
      v27 = *v24;
      *v26 = *v24;
      *(_QWORD *)(v27 + 8) = v26;
      *v24 = 0;
      *(v18 - 1) = 0;
    }
    *v24 = *(_QWORD *)(v25 + 40);
    *(_QWORD *)(v25 + 40) = v24;
  }
  else
  {
    result = WebCore::ErrorEvent::ErrorEvent(v14, a1, a2, a3, a4, a5, &v29);
    *a7 = v15;
  }
  return result;
}

__n128 *JSC::tryCreateArrayButterfly(JSC *this, JSC::VM *a2, JSC::JSObject *a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  __n128 *result;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  unint64_t v10;
  int v11;
  int v12;

  v4 = *((_QWORD *)this + 846);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 60);
    result = *(__n128 **)(v4 + 24);
    if ((unint64_t)result >= *(_QWORD *)(v4 + 32))
    {
      v7 = *(__n128 **)(v4 + 40);
      if ((v7 & 1) == 0)
      {
        v10 = v7->n128_u64[1] ^ *(_QWORD *)(v4 + 48);
        *(_QWORD *)(v4 + 32) = (char *)v7 + HIDWORD(v10);
        *(_QWORD *)(v4 + 40) = (char *)v7 + (int)v10;
        *(_QWORD *)(v4 + 24) = (char *)v7 + v5;
        result = v7;
        goto LABEL_6;
      }
      v12 = (int)a3;
      JSC::sanitizeStackForVM();
      result = (__n128 *)JSC::LocalAllocator::allocateSlowCase();
      LODWORD(a3) = v12;
    }
    else
    {
      *(_QWORD *)(v4 + 24) = (char *)result + v5;
    }
  }
  else
  {
    v11 = (int)a3;
    result = (__n128 *)JSC::CompleteSubspace::allocateSlow();
    LODWORD(a3) = v11;
  }
  if (!result)
    return result;
  v7 = result;
LABEL_6:
  result->n128_u64[0] = a3 | 0x400000000;
  v8 = v7;
  v9 = v7;
  a4.n128_u64[0] = 0;
  while (v7 != v9)
  {
    *v7 = a4;
    v7[1] = a4;
    v7[2] = a4;
    v7[3] = a4;
    v7 += 4;
  }
  while (v7 != v8)
  {
    v7->n128_u64[0] = 0;
    v7 = (__n128 *)((char *)v7 + 8);
  }
  result->n128_u64[1] = 0;
  result[1].n128_u64[0] = 0;
  return (__n128 *)((char *)result + 8);
}

uint64_t JSC::JSObject::setIndexQuicklyForTypedArray(uint64_t this, unsigned int a2, JSValue a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v8;
  int isa;
  int v11;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  float isa_low;
  float v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v33;
  uint64_t v34;
  double v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  switch(*(_BYTE *)(this + 5))
  {
    case '\'':
      v3 = a2;
      if ((*(_BYTE *)(this + 40) & 7u) <= 2)
      {
        v4 = *(_QWORD *)(this + 24);
        goto LABEL_4;
      }
      v71 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
      if (*(_BYTE *)(v71 + 64) && (v101 = *(_QWORD *)(v71 + 32)) != 0)
        v72 = *(_QWORD *)(v101 + 32);
      else
        v72 = *(_QWORD *)(v71 + 48);
      v74 = *(_QWORD *)(this + 24);
      v73 = *(_QWORD *)(this + 32);
      if (v74 + v73 > v72)
        goto LABEL_9;
      if ((*(_BYTE *)(this + 40) & 1) != 0)
      {
        v4 = v72 - v73;
LABEL_4:
        if (v4 > a2 && (unint64_t)a3.super.isa >> 49 != 0)
          goto LABEL_54;
LABEL_9:
        __break(0xC471u);
        JUMPOUT(0x1955452E0);
      }
      if (v74 <= a2 || !((unint64_t)a3.super.isa >> 49))
        goto LABEL_9;
      goto LABEL_54;
    case '(':
      v3 = a2;
      if ((*(_BYTE *)(this + 40) & 7u) > 2)
      {
        v75 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
        if (*(_BYTE *)(v75 + 64) && (v102 = *(_QWORD *)(v75 + 32)) != 0)
          v76 = *(_QWORD *)(v102 + 32);
        else
          v76 = *(_QWORD *)(v75 + 48);
        v78 = *(_QWORD *)(this + 24);
        v77 = *(_QWORD *)(this + 32);
        if (v78 + v77 > v76)
          goto LABEL_173;
        if ((*(_BYTE *)(this + 40) & 1) == 0)
        {
          if (v78 > a2 && (unint64_t)a3.super.isa >> 49)
          {
LABEL_54:
            if ((unint64_t)a3.super.isa < 0xFFFE000000000000)
            {
              v23 = (unint64_t)a3.super.isa - 0x2000000000000;
              if ((double)(int)COERCE_DOUBLE((uint64_t)a3.super.isa - 0x2000000000000) == COERCE_DOUBLE((uint64_t)a3.super.isa- 0x2000000000000))
              {
                LODWORD(a3.super.isa) = (int)COERCE_DOUBLE((uint64_t)a3.super.isa - 0x2000000000000);
              }
              else
              {
                v24 = (v23 >> 52) & 0x7FF;
                v25 = (v23 >> 52) + 1;
                if ((v24 - 1023) <= 0x53)
                {
                  v45 = v23 >> (51 - (v23 >> 52));
                  if (v24 > 0x433)
                    LODWORD(v45) = (uint64_t)a3.super.isa << (v24 - 51);
                  v46 = (((1 << v25) - 1) & v45) + (1 << v25);
                  if (v24 >= 0x41F)
                    v47 = v45;
                  else
                    v47 = v46;
                  if ((uint64_t)a3.super.isa >= 0x2000000000000)
                    LOBYTE(a3.super.isa) = v47;
                  else
                    LODWORD(a3.super.isa) = -v47;
                }
                else
                {
                  LOBYTE(a3.super.isa) = 0;
                }
              }
            }
            v48 = *(_QWORD *)(this + 16);
            v49 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v49 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v48 = (v48 & 0x3FFFFFFFFLL) + v49;
            *(_BYTE *)(v48 + v3) = a3.super.isa;
            return this;
          }
LABEL_173:
          __break(0xC471u);
          JUMPOUT(0x19554591CLL);
        }
        v21 = v76 - v77;
      }
      else
      {
        v21 = *(_QWORD *)(this + 24);
      }
      if (v21 > a2 && (unint64_t)a3.super.isa >> 49 != 0)
        goto LABEL_54;
      goto LABEL_173;
    case ')':
      if ((*(_BYTE *)(this + 40) & 7u) > 2)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
        if (*(_BYTE *)(v59 + 64) && (v98 = *(_QWORD *)(v59 + 32)) != 0)
          v60 = *(_QWORD *)(v98 + 32);
        else
          v60 = *(_QWORD *)(v59 + 48);
        v62 = *(_QWORD *)(this + 24);
        v61 = *(_QWORD *)(this + 32);
        if (v62 + v61 > v60)
          goto LABEL_145;
        if ((*(_BYTE *)(this + 40) & 1) == 0)
        {
          if (v62 > a2 && (unint64_t)a3.super.isa >> 49)
            goto LABEL_23;
          goto LABEL_145;
        }
        v8 = v60 - v61;
      }
      else
      {
        v8 = *(_QWORD *)(this + 24);
      }
      if (v8 > a2 && (unint64_t)a3.super.isa >> 49 != 0)
      {
LABEL_23:
        if ((unint64_t)a3.super.isa < 0xFFFE000000000000)
        {
          v36 = (char *)a3.super.isa - 0x2000000000000;
          if (COERCE_DOUBLE((uint64_t)a3.super.isa - 0x2000000000000) < 0.0)
          {
            LOBYTE(v11) = 0;
          }
          else
          {
            v37 = (uint64_t)rint(*(double *)&v36);
            if (*(double *)&v36 <= 255.0)
              LOBYTE(v11) = v37;
            else
              LOBYTE(v11) = -1;
          }
        }
        else
        {
          if (SLODWORD(a3.super.isa) >= 255)
            isa = 255;
          else
            isa = (int)a3.super.isa;
          v11 = isa & ~(isa >> 31);
        }
        v38 = *(_QWORD *)(this + 16);
        v39 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v39 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
          v38 = (v38 & 0x3FFFFFFFFLL) + v39;
        *(_BYTE *)(v38 + a2) = v11;
        return this;
      }
LABEL_145:
      __break(0xC471u);
      JUMPOUT(0x195545810);
    case '*':
      v6 = a2;
      if ((*(_BYTE *)(this + 40) & 7u) <= 2)
      {
        if (*(_QWORD *)(this + 24) > (unint64_t)a2 && (unint64_t)a3.super.isa >> 49 != 0)
          goto LABEL_33;
LABEL_207:
        __break(0xC471u);
        JUMPOUT(0x195545A24);
      }
      v63 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
      if (*(_BYTE *)(v63 + 64) && (v99 = *(_QWORD *)(v63 + 32)) != 0)
        v64 = *(_QWORD *)(v99 + 32);
      else
        v64 = *(_QWORD *)(v63 + 48);
      v66 = *(_QWORD *)(this + 24);
      v65 = *(_QWORD *)(this + 32);
      if (v65 + 2 * v66 > v64)
        goto LABEL_207;
      if ((*(_BYTE *)(this + 40) & 1) != 0)
      {
        if (a2 < (v64 - v65) >> 1 && (unint64_t)a3.super.isa >> 49 != 0)
          goto LABEL_33;
        goto LABEL_207;
      }
      if (v66 <= a2 || !((unint64_t)a3.super.isa >> 49))
        goto LABEL_207;
      goto LABEL_33;
    case '+':
      v6 = a2;
      if ((*(_BYTE *)(this + 40) & 7u) > 2)
      {
        v55 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
        if (*(_BYTE *)(v55 + 64) && (v97 = *(_QWORD *)(v55 + 32)) != 0)
          v56 = *(_QWORD *)(v97 + 32);
        else
          v56 = *(_QWORD *)(v55 + 48);
        v58 = *(_QWORD *)(this + 24);
        v57 = *(_QWORD *)(this + 32);
        if (v57 + 2 * v58 <= v56)
        {
          if ((*(_BYTE *)(this + 40) & 1) != 0)
          {
            if (a2 < (v56 - v57) >> 1 && (unint64_t)a3.super.isa >> 49 != 0)
              goto LABEL_33;
          }
          else if (v58 > a2 && (unint64_t)a3.super.isa >> 49)
          {
LABEL_33:
            if ((unint64_t)a3.super.isa < 0xFFFE000000000000)
            {
              v13 = (unint64_t)a3.super.isa - 0x2000000000000;
              if ((double)(int)COERCE_DOUBLE((uint64_t)a3.super.isa - 0x2000000000000) == COERCE_DOUBLE((uint64_t)a3.super.isa- 0x2000000000000))
              {
                LODWORD(a3.super.isa) = (int)COERCE_DOUBLE((uint64_t)a3.super.isa - 0x2000000000000);
              }
              else
              {
                v14 = (v13 >> 52) & 0x7FF;
                v15 = (v13 >> 52) + 1;
                if ((v14 - 1023) <= 0x53)
                {
                  v40 = v13 >> (51 - (v13 >> 52));
                  if (v14 > 0x433)
                    LODWORD(v40) = (uint64_t)a3.super.isa << (v14 - 51);
                  v41 = (((1 << v15) - 1) & v40) + (1 << v15);
                  if (v14 >= 0x41F)
                    v42 = v40;
                  else
                    v42 = v41;
                  if ((uint64_t)a3.super.isa >= 0x2000000000000)
                    LOWORD(a3.super.isa) = v42;
                  else
                    LODWORD(a3.super.isa) = -v42;
                }
                else
                {
                  LOWORD(a3.super.isa) = 0;
                }
              }
            }
            v43 = *(_QWORD *)(this + 16);
            v44 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v44 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v43 = (v43 & 0x3FFFFFFFFLL) + v44;
            *(_WORD *)(v43 + 2 * v6) = a3.super.isa;
            return this;
          }
        }
      }
      else if (*(_QWORD *)(this + 24) > (unint64_t)a2 && (unint64_t)a3.super.isa >> 49 != 0)
      {
        goto LABEL_33;
      }
      __break(0xC471u);
      JUMPOUT(0x195545328);
    case ',':
      v26 = a2;
      if ((*(_BYTE *)(this + 40) & 7u) <= 2)
      {
        if (*(_QWORD *)(this + 24) > (unint64_t)a2 && (unint64_t)a3.super.isa >> 49 != 0)
          goto LABEL_70;
LABEL_64:
        __break(0xC471u);
        JUMPOUT(0x1955454F4);
      }
      v79 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
      if (*(_BYTE *)(v79 + 64) && (v103 = *(_QWORD *)(v79 + 32)) != 0)
        v80 = *(_QWORD *)(v103 + 32);
      else
        v80 = *(_QWORD *)(v79 + 48);
      v82 = *(_QWORD *)(this + 24);
      v81 = *(_QWORD *)(this + 32);
      if (v81 + 4 * v82 > v80)
        goto LABEL_64;
      if ((*(_BYTE *)(this + 40) & 1) != 0)
      {
        if (a2 < (v80 - v81) >> 2 && (unint64_t)a3.super.isa >> 49 != 0)
          goto LABEL_70;
        goto LABEL_64;
      }
      if (v82 <= a2 || !((unint64_t)a3.super.isa >> 49))
        goto LABEL_64;
      goto LABEL_70;
    case '-':
      v26 = a2;
      if ((*(_BYTE *)(this + 40) & 7u) > 2)
      {
        v83 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
        if (*(_BYTE *)(v83 + 64) && (v104 = *(_QWORD *)(v83 + 32)) != 0)
          v84 = *(_QWORD *)(v104 + 32);
        else
          v84 = *(_QWORD *)(v83 + 48);
        v86 = *(_QWORD *)(this + 24);
        v85 = *(_QWORD *)(this + 32);
        if (v85 + 4 * v86 <= v84)
        {
          if ((*(_BYTE *)(this + 40) & 1) != 0)
          {
            if (a2 < (v84 - v85) >> 2 && (unint64_t)a3.super.isa >> 49 != 0)
              goto LABEL_70;
          }
          else if (v86 > a2 && (unint64_t)a3.super.isa >> 49)
          {
LABEL_70:
            if ((unint64_t)a3.super.isa < 0xFFFE000000000000)
            {
              v29 = (unint64_t)a3.super.isa - 0x2000000000000;
              if ((double)(int)COERCE_DOUBLE((uint64_t)a3.super.isa - 0x2000000000000) == COERCE_DOUBLE((uint64_t)a3.super.isa- 0x2000000000000))
              {
                LODWORD(a3.super.isa) = (int)COERCE_DOUBLE((uint64_t)a3.super.isa - 0x2000000000000);
              }
              else
              {
                v30 = (v29 >> 52) & 0x7FF;
                v31 = (v29 >> 52) + 1;
                if ((v30 - 1023) <= 0x53)
                {
                  v50 = v29 >> (51 - (v29 >> 52));
                  if (v30 > 0x433)
                    LODWORD(v50) = (uint64_t)a3.super.isa << (v30 - 51);
                  v51 = (((1 << v31) - 1) & v50) + (1 << v31);
                  if (v30 >= 0x41F)
                    v52 = v50;
                  else
                    v52 = v51;
                  if ((uint64_t)a3.super.isa >= 0x2000000000000)
                    LODWORD(a3.super.isa) = v52;
                  else
                    LODWORD(a3.super.isa) = -v52;
                }
                else
                {
                  LODWORD(a3.super.isa) = 0;
                }
              }
            }
            v53 = *(_QWORD *)(this + 16);
            v54 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v54 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v53 = (v53 & 0x3FFFFFFFFLL) + v54;
            *(_DWORD *)(v53 + 4 * v26) = a3.super.isa;
            return this;
          }
        }
      }
      else if (*(_QWORD *)(this + 24) > (unint64_t)a2 && (unint64_t)a3.super.isa >> 49 != 0)
      {
        goto LABEL_70;
      }
      __break(0xC471u);
      JUMPOUT(0x195545AB4);
    case '.':
      if ((*(_BYTE *)(this + 40) & 7u) > 2)
      {
        v67 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
        if (*(_BYTE *)(v67 + 64) && (v100 = *(_QWORD *)(v67 + 32)) != 0)
          v68 = *(_QWORD *)(v100 + 32);
        else
          v68 = *(_QWORD *)(v67 + 48);
        v70 = *(_QWORD *)(this + 24);
        v69 = *(_QWORD *)(this + 32);
        if (v69 + 4 * v70 <= v68)
        {
          if ((*(_BYTE *)(this + 40) & 1) != 0)
          {
            if (a2 < (v68 - v69) >> 2 && (unint64_t)a3.super.isa >> 49 != 0)
              goto LABEL_42;
          }
          else if (v70 > a2 && (unint64_t)a3.super.isa >> 49)
          {
LABEL_42:
            v17 = *(_QWORD *)(this + 16);
            v18 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v18 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v17 = (v17 & 0x3FFFFFFFFLL) + v18;
            isa_low = (float)SLODWORD(a3.super.isa);
            if ((unint64_t)a3.super.isa <= 0xFFFDFFFFFFFFFFFFLL)
            {
              v20 = COERCE_DOUBLE((uint64_t)a3.super.isa - 0x2000000000000);
              isa_low = v20;
            }
            *(float *)(v17 + 4 * a2) = isa_low;
            return this;
          }
        }
      }
      else if (*(_QWORD *)(this + 24) > (unint64_t)a2 && (unint64_t)a3.super.isa >> 49 != 0)
      {
        goto LABEL_42;
      }
      __break(0xC471u);
      JUMPOUT(0x195545A58);
    case '/':
      if ((*(_BYTE *)(this + 40) & 7u) <= 2)
      {
        if (*(_QWORD *)(this + 24) > (unint64_t)a2 && (unint64_t)a3.super.isa >> 49 != 0)
          goto LABEL_79;
LABEL_233:
        __break(0xC471u);
        JUMPOUT(0x195545AE8);
      }
      v87 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
      if (*(_BYTE *)(v87 + 64) && (v105 = *(_QWORD *)(v87 + 32)) != 0)
        v88 = *(_QWORD *)(v105 + 32);
      else
        v88 = *(_QWORD *)(v87 + 48);
      v90 = *(_QWORD *)(this + 24);
      v89 = *(_QWORD *)(this + 32);
      if (v89 + 8 * v90 > v88)
        goto LABEL_233;
      if ((*(_BYTE *)(this + 40) & 1) != 0)
      {
        if (a2 < (v88 - v89) >> 3 && (unint64_t)a3.super.isa >> 49 != 0)
          goto LABEL_79;
        goto LABEL_233;
      }
      if (v90 <= a2 || !((unint64_t)a3.super.isa >> 49))
        goto LABEL_233;
LABEL_79:
      v33 = *(_QWORD *)(this + 16);
      v34 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v34 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
        v33 = (v33 & 0x3FFFFFFFFLL) + v34;
      v35 = (double)SLODWORD(a3.super.isa);
      if ((unint64_t)a3.super.isa <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v35 = (char *)a3.super.isa - 0x2000000000000;
      *(double *)(v33 + 8 * a2) = v35;
      return this;
    case '0':
      __break(0xC471u);
      JUMPOUT(0x195545B68);
    case '1':
      __break(0xC471u);
      JUMPOUT(0x195545B38);
    default:
      __break(0xC471u);
      JUMPOUT(0x195545B08);
  }
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::AudioWorkletThread::createThread(void)::$_0,void>::call(uint64_t a1)
{
  return WebCore::WorkerOrWorkletThread::workerOrWorkletThread(*(WebCore::WorkerOrWorkletThread **)(a1 + 8));
}

WebCore::BaseAudioContext *WebCore::BaseAudioContext::BaseAudioContext(WebCore::BaseAudioContext *this, WebCore::Document *a2)
{
  uint64_t v4;
  WebCore::Document *v5;
  WebCore::Document *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Worklet *v12;
  uint64_t v13;
  WebCore::Worklet *v14;
  unsigned int *v15;
  unsigned int v16;
  WebCore::AudioListener *v17;
  WebCore::AudioListener *v18;
  _BYTE v20[24];
  WebCore::BaseAudioContext *v21;

  v4 = *((_QWORD *)a2 + 88);
  v5 = a2;
  if (v4)
  {
    v6 = *(WebCore::Document **)(v4 + 8);
    if (v6)
      v5 = v6;
    else
      v5 = a2;
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::Document *)((char *)v5 + 192));
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v5 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195545EF8);
  }
  v21 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v5 + 40, (uint64_t *)&v21, (uint64_t)v20);
  *((_DWORD *)this + 6) = 1;
  *(_QWORD *)this = &off_1E3369780;
  *((_QWORD *)this + 4) = &unk_1E3369848;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = &unk_1E33698C0;
  v7 = WebCore::Document::logger(a2);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 8) = v7;
  v10 = WTF::cryptographicallyRandomNumber<unsigned long long>();
  v11 = WebCore::generateContextID(void)::contextIDSeed + 1;
  *((_QWORD *)this + 12) = WebCore::generateContextID(void)::contextIDSeed + 1;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = v10;
  WebCore::generateContextID(void)::contextIDSeed = v11;
  v12 = (WebCore::Worklet *)bmalloc::api::isoAllocate();
  v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (*(_BYTE *)(v13 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195545F18);
  }
  v14 = v12;
  *(_QWORD *)WebCore::Worklet::Worklet(v12, (WebCore::Document *)(v13 - 288)) = &off_1E3369550;
  v15 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>((uint64_t)this);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *((_QWORD *)v14 + 10) = v15;
  *((_QWORD *)this + 13) = v14;
  WebCore::ActiveDOMObject::suspendIfNeeded(v14);
  *((_QWORD *)this + 32) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  v17 = (WebCore::AudioListener *)WTF::fastMalloc((WTF *)0x110);
  v18 = WebCore::AudioListener::AudioListener(v17, this);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = v18;
  *(_QWORD *)((char *)this + 285) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 325) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 47) = 0;
  *((_BYTE *)this + 384) = (WebCore::Document::advancedPrivacyProtections(a2) & 0x40) != 0;
  {
    WebCore::liveAudioContexts(void)::contexts = 0;
  }
  WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::add(&WebCore::liveAudioContexts(void)::contexts, (uint64_t *)this + 12, (uint64_t)v20);
  return this;
}

void WebCore::BaseAudioContext::~BaseAudioContext(WebCore::BaseAudioContext *this, void *a2)
{
  WebCore::EventTarget *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t i;
  char *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF **v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  _DWORD *v52;
  WTF *v53;
  WTF *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  _BYTE **v61;
  uint64_t v62;
  _BYTE *v63;
  WTF *v64;
  uint64_t v65;
  _BYTE **v66;
  uint64_t v67;
  _BYTE *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  WebCore::AudioNode **v72;
  uint64_t v73;
  WebCore::AudioNode *v74;
  WTF *v75;
  _DWORD *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  void *v81;
  uint64_t v82;
  WTF ***v83;
  uint64_t v84;
  WTF **v85;
  void *v86;
  WTF *v87;
  uint64_t v88;
  WTF ***v89;
  uint64_t v90;
  WTF **v91;
  void *v92;
  WTF *v93;
  uint64_t v94;
  WTF ***v95;
  uint64_t v96;
  WTF **v97;
  void *v98;
  WTF *v99;
  uint64_t v100;
  WTF ***v101;
  uint64_t v102;
  WTF **v103;
  void *v104;
  WTF *v105;
  WTF *v106;
  void *v107;
  WTF *v108;
  void *v109;

  *((_QWORD *)this + 4) = &unk_1E3369848;
  v3 = (WebCore::BaseAudioContext *)((char *)this + 32);
  *(_QWORD *)this = &off_1E3369780;
  *((_QWORD *)this + 7) = &unk_1E33698C0;
  {
    if (WebCore::liveAudioContexts(void)::contexts)
    {
      v4 = *(_DWORD *)(WebCore::liveAudioContexts(void)::contexts - 8);
      v5 = *((_QWORD *)this + 12);
      v6 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v4 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(WebCore::liveAudioContexts(void)::contexts + 8 * v9);
      if (v10 != v5)
      {
        v11 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v11) & v4;
          v10 = *(_QWORD *)(WebCore::liveAudioContexts(void)::contexts + 8 * v9);
          ++v11;
          if (v10 == v5)
            goto LABEL_9;
        }
        v9 = *(unsigned int *)(WebCore::liveAudioContexts(void)::contexts - 4);
      }
LABEL_9:
      if (v9 != *(_DWORD *)(WebCore::liveAudioContexts(void)::contexts - 4))
      {
        *(_QWORD *)(WebCore::liveAudioContexts(void)::contexts + 8 * v9) = -1;
        ++*(_DWORD *)(WebCore::liveAudioContexts(void)::contexts - 16);
        v12 = WebCore::liveAudioContexts(void)::contexts
            ? *(_DWORD *)(WebCore::liveAudioContexts(void)::contexts - 12) - 1
            : -1;
        *(_DWORD *)(WebCore::liveAudioContexts(void)::contexts - 12) = v12;
        if (WebCore::liveAudioContexts(void)::contexts)
        {
          v13 = *(_DWORD *)(WebCore::liveAudioContexts(void)::contexts - 4);
          if (6 * *(_DWORD *)(WebCore::liveAudioContexts(void)::contexts - 12) < v13 && v13 >= 9)
            WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(&WebCore::liveAudioContexts(void)::contexts, v13 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebCore::liveAudioContexts(void)::contexts = 0;
  }
  if (*((_BYTE *)this + 382))
  {
    v15 = *((_QWORD *)this + 26);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 12);
      v17 = (_DWORD *)((char *)this + 228);
      v18 = *((unsigned int *)this + 57);
      if (v18 < v16)
      {
        v19 = *((unsigned int *)this + 56);
        if (v19 < v16)
        {
          v20 = v19 + (v19 >> 2);
          if (v20 >= 0x10)
            v21 = v20 + 1;
          else
            v21 = 16;
          if (v21 <= v16)
            v22 = v16;
          else
            v22 = v21;
          if (v22 >> 29)
          {
            __break(0xC471u);
            return;
          }
          v23 = (void *)*((_QWORD *)this + 27);
          v24 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
          *((_DWORD *)this + 56) = v22;
          *((_QWORD *)this + 27) = v24;
          memcpy(v24, v23, 8 * v18);
          if (v23)
          {
            if (*((void **)this + 27) == v23)
            {
              *((_QWORD *)this + 27) = 0;
              *((_DWORD *)this + 56) = 0;
            }
            WTF::fastFree((WTF *)v23, a2);
          }
        }
      }
    }
    else
    {
      LODWORD(v16) = 0;
      v17 = (_DWORD *)((char *)this + 228);
    }
    *v17 = v16;
  }
  v25 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v82 = *(unsigned int *)(v25 + 36);
      if ((_DWORD)v82)
      {
        v83 = *(WTF ****)(v25 + 24);
        v84 = 8 * v82;
        do
        {
          v85 = *v83;
          *v83 = 0;
          if (v85)
          {
            WTF::fastAlignedFree(*v85, a2);
            WTF::fastFree((WTF *)v85, v86);
          }
          ++v83;
          v84 -= 8;
        }
        while (v84);
      }
      v87 = *(WTF **)(v25 + 24);
      if (v87)
      {
        *(_QWORD *)(v25 + 24) = 0;
        *(_DWORD *)(v25 + 32) = 0;
        WTF::fastFree(v87, a2);
      }
      WTF::fastFree((WTF *)v25, a2);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  v26 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v88 = *(unsigned int *)(v26 + 36);
      if ((_DWORD)v88)
      {
        v89 = *(WTF ****)(v26 + 24);
        v90 = 8 * v88;
        do
        {
          v91 = *v89;
          *v89 = 0;
          if (v91)
          {
            WTF::fastAlignedFree(*v91, a2);
            WTF::fastFree((WTF *)v91, v92);
          }
          ++v89;
          v90 -= 8;
        }
        while (v90);
      }
      v93 = *(WTF **)(v26 + 24);
      if (v93)
      {
        *(_QWORD *)(v26 + 24) = 0;
        *(_DWORD *)(v26 + 32) = 0;
        WTF::fastFree(v93, a2);
      }
      WTF::fastFree((WTF *)v26, a2);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  v27 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
    {
      v94 = *(unsigned int *)(v27 + 36);
      if ((_DWORD)v94)
      {
        v95 = *(WTF ****)(v27 + 24);
        v96 = 8 * v94;
        do
        {
          v97 = *v95;
          *v95 = 0;
          if (v97)
          {
            WTF::fastAlignedFree(*v97, a2);
            WTF::fastFree((WTF *)v97, v98);
          }
          ++v95;
          v96 -= 8;
        }
        while (v96);
      }
      v99 = *(WTF **)(v27 + 24);
      if (v99)
      {
        *(_QWORD *)(v27 + 24) = 0;
        *(_DWORD *)(v27 + 32) = 0;
        WTF::fastFree(v99, a2);
      }
      WTF::fastFree((WTF *)v27, a2);
    }
    else
    {
      --*(_DWORD *)v27;
    }
  }
  v28 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
    {
      v100 = *(unsigned int *)(v28 + 36);
      if ((_DWORD)v100)
      {
        v101 = *(WTF ****)(v28 + 24);
        v102 = 8 * v100;
        do
        {
          v103 = *v101;
          *v101 = 0;
          if (v103)
          {
            WTF::fastAlignedFree(*v103, a2);
            WTF::fastFree((WTF *)v103, v104);
          }
          ++v101;
          v102 -= 8;
        }
        while (v102);
      }
      v105 = *(WTF **)(v28 + 24);
      if (v105)
      {
        *(_QWORD *)(v28 + 24) = 0;
        *(_DWORD *)(v28 + 32) = 0;
        WTF::fastFree(v105, a2);
      }
      WTF::fastFree((WTF *)v28, a2);
    }
    else
    {
      --*(_DWORD *)v28;
    }
  }
  v29 = (WTF *)*((_QWORD *)this + 40);
  if (v29)
  {
    v30 = *((unsigned int *)this + 82);
    if ((_DWORD)v30)
    {
      for (i = 0; i != v30; ++i)
      {
        v32 = (char *)v29 + 24 * i;
        v33 = (WTF::StringImpl ***)(v32 + 8);
        v34 = *((unsigned int *)v32 + 5);
        if ((_DWORD)v34)
        {
          v35 = *v33;
          v36 = 24 * v34;
          do
          {
            v37 = *v35;
            *v35 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v37 -= 2;
            }
            v35 += 3;
            v36 -= 24;
          }
          while (v36);
        }
        v38 = (WTF *)*v33;
        if (*v33)
        {
          *v33 = 0;
          *((_DWORD *)v29 + 6 * i + 4) = 0;
          WTF::fastFree(v38, a2);
        }
        v39 = *(WTF::StringImpl **)v32;
        *(_QWORD *)v32 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
    }
    WTF::fastFree(v29, a2);
  }
  v40 = (WTF *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v40)
  {
    v41 = *(_QWORD *)v40;
    *(_QWORD *)v40 = 0;
    if (v41)
    {
      v42 = (unsigned int *)(v41 + 8);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, (unsigned int *)(v41 + 8));
        v108 = (WTF *)MEMORY[0x19AEA564C]();
        WTF::fastFree(v108, v109);
      }
    }
    WTF::fastFree(v40, a2);
  }
  v45 = (WTF **)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
    {
      WebCore::AudioListener::~AudioListener(v45, a2);
      WTF::fastFree(v106, v107);
    }
    else
    {
      --*(_DWORD *)v45;
    }
  }
  v46 = *((unsigned int *)this + 65);
  v47 = (WTF *)*((_QWORD *)this + 31);
  if ((_DWORD)v46)
  {
    v48 = (WTF *)((char *)v47 + 16 * v46);
    do
    {
      v49 = *((unsigned int *)v47 + 3);
      if ((_DWORD)v49)
      {
        v50 = *(WTF **)v47;
        v51 = 8 * v49;
        do
        {
          v52 = *(_DWORD **)v50;
          *(_QWORD *)v50 = 0;
          if (v52)
          {
            if (v52[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 16))(v52);
            else
              --v52[4];
          }
          v50 = (WTF *)((char *)v50 + 8);
          v51 -= 8;
        }
        while (v51);
      }
      v53 = *(WTF **)v47;
      if (*(_QWORD *)v47)
      {
        *(_QWORD *)v47 = 0;
        *((_DWORD *)v47 + 2) = 0;
        WTF::fastFree(v53, a2);
      }
      v47 = (WTF *)((char *)v47 + 16);
    }
    while (v47 != v48);
    v47 = (WTF *)*((_QWORD *)this + 31);
  }
  if (v47)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v47, a2);
  }
  v54 = (WTF *)*((_QWORD *)this + 29);
  if (v54)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v54, a2);
  }
  v55 = (WTF *)*((_QWORD *)this + 27);
  if (v55)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v55, a2);
  }
  v56 = *((_QWORD *)this + 26);
  if (v56)
    WTF::fastFree((WTF *)(v56 - 16), a2);
  v57 = *((_QWORD *)this + 25);
  if (v57)
    WTF::fastFree((WTF *)(v57 - 16), a2);
  v58 = *((_QWORD *)this + 24);
  if (v58)
    WTF::fastFree((WTF *)(v58 - 16), a2);
  v59 = (WTF *)*((_QWORD *)this + 22);
  if (v59)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v59, a2);
  }
  v60 = *((unsigned int *)this + 43);
  if ((_DWORD)v60)
  {
    v61 = (_BYTE **)*((_QWORD *)this + 20);
    v62 = 8 * v60;
    do
    {
      v63 = *v61;
      if (*v61)
      {
        v63[115] = 0;
        *v61 = 0;
        (*(void (**)(_BYTE *))(*(_QWORD *)v63 + 112))(v63);
      }
      else
      {
        *v61 = 0;
      }
      ++v61;
      v62 -= 8;
    }
    while (v62);
  }
  v64 = (WTF *)*((_QWORD *)this + 20);
  if (v64)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v64, a2);
  }
  v65 = *((unsigned int *)this + 39);
  if ((_DWORD)v65)
  {
    v66 = (_BYTE **)*((_QWORD *)this + 18);
    v67 = 8 * v65;
    do
    {
      v68 = *v66;
      if (*v66)
      {
        v68[115] = 0;
        *v66 = 0;
        (*(void (**)(_BYTE *))(*(_QWORD *)v68 + 112))(v68);
      }
      else
      {
        *v66 = 0;
      }
      ++v66;
      v67 -= 8;
    }
    while (v67);
  }
  v69 = (WTF *)*((_QWORD *)this + 18);
  if (v69)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v69, a2);
  }
  v70 = (WTF *)*((_QWORD *)this + 16);
  if (v70)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v70, a2);
  }
  v71 = *((unsigned int *)this + 31);
  if ((_DWORD)v71)
  {
    v72 = (WebCore::AudioNode **)*((_QWORD *)this + 14);
    v73 = 8 * v71;
    do
    {
      v74 = *v72;
      *v72 = 0;
      if (v74)
        WebCore::AudioNode::decrementConnectionCount(v74);
      ++v72;
      v73 -= 8;
    }
    while (v73);
  }
  v75 = (WTF *)*((_QWORD *)this + 14);
  if (v75)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v75, a2);
  }
  v76 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v76)
  {
    if (v76[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 16))(v76);
    else
      --v76[6];
  }
  v77 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v77)
  {
    v78 = v77 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v77 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
    }
  }
  WebCore::EventTarget::~EventTarget(v3, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v81);
}

BOOL WebCore::BaseAudioContext::isContextAlive(WebCore::BaseAudioContext *this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  WebCore::BaseAudioContext *v6;
  _BOOL8 v7;
  int v8;

  {
    if (WebCore::liveAudioContexts(void)::contexts)
    {
      v1 = *(_DWORD *)(WebCore::liveAudioContexts(void)::contexts - 8);
      v2 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
      v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
      v5 = v1 & ((v4 >> 31) ^ v4);
      v6 = *(WebCore::BaseAudioContext **)(WebCore::liveAudioContexts(void)::contexts + 8 * v5);
      if (v6 == this)
      {
        return 1;
      }
      else
      {
        v8 = 1;
        do
        {
          v7 = v6 != 0;
          if (!v6)
            break;
          v5 = (v5 + v8) & v1;
          v6 = *(WebCore::BaseAudioContext **)(WebCore::liveAudioContexts(void)::contexts + 8 * v5);
          ++v8;
        }
        while (v6 != this);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v7 = 0;
    WebCore::liveAudioContexts(void)::contexts = 0;
  }
  return v7;
}

_BYTE *WebCore::BaseAudioContext::lazyInitialize(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;

  if (!this[379])
  {
    v1 = this;
    if (this[376] != 3 && !this[380] && !this[381])
    {
      v2 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 80))(this);
      this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
      v1[380] = 1;
    }
  }
  return this;
}

WTF::Thread *WebCore::BaseAudioContext::deleteMarkedNodes(WTF::Thread *this)
{
  WTF::Thread *v1;
  unsigned int *v2;
  unsigned int v3;
  WTF::Thread *v4;
  int v6;
  unsigned int i;
  uint64_t v8;
  uint64_t v9;
  unint64_t j;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t k;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;

  v1 = this;
  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
  {
    this = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(this);
    v4 = this;
  }
  if (v4 == *((WTF::Thread **)v1 + 35))
  {
    v6 = *((_DWORD *)v1 + 72) + 1;
    goto LABEL_12;
  }
  this = (WTF::Thread *)((char *)v1 + 292);
  if (__ldaxr((unsigned __int8 *)v1 + 292))
  {
    __clrex();
LABEL_10:
    this = (WTF::Thread *)MEMORY[0x19AEA534C]();
    goto LABEL_11;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_10;
LABEL_11:
  *((_QWORD *)v1 + 35) = v4;
  v6 = 1;
LABEL_12:
  *((_DWORD *)v1 + 72) = v6;
  for (i = *((_DWORD *)v1 + 47); i; i = *((_DWORD *)v1 + 47))
  {
    v8 = *(_QWORD *)(*((_QWORD *)v1 + 22) + 8 * i - 8);
    *((_DWORD *)v1 + 47) = i - 1;
    v9 = *(unsigned int *)(v8 + 68);
    if ((_DWORD)v9)
    {
      for (j = 0; j != v9; ++j)
      {
        if (j >= *(unsigned int *)(v8 + 68))
          v11 = 0;
        else
          v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * j);
        v12 = *((_QWORD *)v1 + 24);
        if (v12)
        {
          v13 = *(_DWORD *)(v12 - 8);
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = *(_QWORD *)(v12 + 8 * v17);
          if (v18 != v11)
          {
            v19 = 1;
            while (v18)
            {
              v17 = ((_DWORD)v17 + v19) & v13;
              v18 = *(_QWORD *)(v12 + 8 * v17);
              ++v19;
              if (v18 == v11)
                goto LABEL_25;
            }
            v17 = *(unsigned int *)(v12 - 4);
          }
LABEL_25:
          if (v17 != *(_DWORD *)(v12 - 4))
          {
            *(_QWORD *)(v12 + 8 * v17) = -1;
            ++*(_DWORD *)(*((_QWORD *)v1 + 24) - 16);
            v20 = *((_QWORD *)v1 + 24);
            v21 = v20 ? *(_DWORD *)(v20 - 12) - 1 : -1;
            *(_DWORD *)(v20 - 12) = v21;
            v22 = *((_QWORD *)v1 + 24);
            if (v22)
            {
              v23 = *(_DWORD *)(v22 - 12);
              v24 = *(unsigned int *)(v22 - 4);
              if (6 * v23 < v24 && v24 >= 9)
              {
                v26 = WTF::fastZeroedMalloc((WTF *)(8 * (v24 >> 1) + 16));
                v28 = 0;
                *((_QWORD *)v1 + 24) = v26 + 16;
                *(_DWORD *)(v26 + 12) = v24 >> 1;
                *(_DWORD *)(*((_QWORD *)v1 + 24) - 8) = (v24 >> 1) - 1;
                *(_DWORD *)(*((_QWORD *)v1 + 24) - 16) = 0;
                *(_DWORD *)(*((_QWORD *)v1 + 24) - 12) = v23;
                do
                {
                  v29 = *(_QWORD *)(v22 + 8 * v28);
                  if ((unint64_t)(v29 + 1) >= 2)
                  {
                    v30 = *((_QWORD *)v1 + 24);
                    if (v30)
                      v31 = *(_DWORD *)(v30 - 8);
                    else
                      v31 = 0;
                    v32 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
                    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
                    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
                    v35 = v31 & ((v34 >> 31) ^ v34);
                    v36 = 1;
                    do
                    {
                      v37 = v35;
                      v38 = *(_QWORD *)(v30 + 8 * v35);
                      v35 = (v35 + v36++) & v31;
                    }
                    while (v38);
                    *(_QWORD *)(v30 + 8 * v37) = v29;
                  }
                  ++v28;
                }
                while (v28 != v24);
                this = (WTF::Thread *)WTF::fastFree((WTF *)(v22 - 16), v27);
              }
            }
          }
        }
      }
    }
    v39 = *(unsigned int *)(v8 + 84);
    if ((_DWORD)v39)
    {
      for (k = 0; k != v39; ++k)
      {
        if (k >= *(unsigned int *)(v8 + 84))
          v41 = 0;
        else
          v41 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 8 * k);
        v42 = *((_QWORD *)v1 + 25);
        if (v42)
        {
          v43 = *(_DWORD *)(v42 - 8);
          v44 = (~(v41 << 32) + v41) ^ ((unint64_t)(~(v41 << 32) + v41) >> 22);
          v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
          v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
          v47 = v43 & ((v46 >> 31) ^ v46);
          v48 = *(_QWORD *)(v42 + 8 * v47);
          if (v48 != v41)
          {
            v49 = 1;
            while (v48)
            {
              v47 = ((_DWORD)v47 + v49) & v43;
              v48 = *(_QWORD *)(v42 + 8 * v47);
              ++v49;
              if (v48 == v41)
                goto LABEL_58;
            }
            v47 = *(unsigned int *)(v42 - 4);
          }
LABEL_58:
          if (v47 != *(_DWORD *)(v42 - 4))
          {
            *(_QWORD *)(v42 + 8 * v47) = -1;
            ++*(_DWORD *)(*((_QWORD *)v1 + 25) - 16);
            v50 = *((_QWORD *)v1 + 25);
            v51 = v50 ? *(_DWORD *)(v50 - 12) - 1 : -1;
            *(_DWORD *)(v50 - 12) = v51;
            v52 = *((_QWORD *)v1 + 25);
            if (v52)
            {
              v53 = *(_DWORD *)(v52 - 12);
              v54 = *(unsigned int *)(v52 - 4);
              if (6 * v53 < v54 && v54 >= 9)
              {
                v56 = WTF::fastZeroedMalloc((WTF *)(8 * (v54 >> 1) + 16));
                v58 = 0;
                *((_QWORD *)v1 + 25) = v56 + 16;
                *(_DWORD *)(v56 + 12) = v54 >> 1;
                *(_DWORD *)(*((_QWORD *)v1 + 25) - 8) = (v54 >> 1) - 1;
                *(_DWORD *)(*((_QWORD *)v1 + 25) - 16) = 0;
                *(_DWORD *)(*((_QWORD *)v1 + 25) - 12) = v53;
                do
                {
                  v59 = *(_QWORD *)(v52 + 8 * v58);
                  if ((unint64_t)(v59 + 1) >= 2)
                  {
                    v60 = *((_QWORD *)v1 + 25);
                    if (v60)
                      v61 = *(_DWORD *)(v60 - 8);
                    else
                      v61 = 0;
                    v62 = (~(v59 << 32) + v59) ^ ((unint64_t)(~(v59 << 32) + v59) >> 22);
                    v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
                    v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
                    v65 = v61 & ((v64 >> 31) ^ v64);
                    v66 = 1;
                    do
                    {
                      v67 = v65;
                      v68 = *(_QWORD *)(v60 + 8 * v65);
                      v65 = (v65 + v66++) & v61;
                    }
                    while (v68);
                    *(_QWORD *)(v60 + 8 * v67) = v59;
                  }
                  ++v58;
                }
                while (v58 != v54);
                this = (WTF::Thread *)WTF::fastFree((WTF *)(v52 - 16), v57);
              }
            }
          }
        }
      }
      if (!v8)
        continue;
    }
    this = (WTF::Thread *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
  }
  *((_BYTE *)v1 + 377) = 0;
  v69 = *((_DWORD *)v1 + 72) - 1;
  *((_DWORD *)v1 + 72) = v69;
  if (!v69)
  {
    *((_QWORD *)v1 + 35) = 0;
    this = (WTF::Thread *)((char *)v1 + 292);
    v70 = __ldxr((unsigned __int8 *)v1 + 292);
    if (v70 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)this))
        goto LABEL_88;
    }
    else
    {
      __clrex();
    }
    this = (WTF::Thread *)WTF::Lock::unlockSlow(this);
    goto LABEL_88;
  }
  do
  {
LABEL_88:
    v71 = __ldaxr(v2);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, v2));
  if (!v72)
  {
    atomic_store(1u, (unsigned int *)v1 + 6);
    return (WTF::Thread *)(*(uint64_t (**)(WTF::Thread *))(*(_QWORD *)v1 + 16))(v1);
  }
  return this;
}

unsigned __int8 *WebCore::BaseAudioContext::uninitialize(WebCore::BaseAudioContext *this)
{
  uint64_t v2;
  unsigned __int8 *result;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  int v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v36;
  void *v37;
  int v38;
  int v39;
  uint64_t v40;
  WebCore::AudioNode **v41;
  uint64_t v42;
  WebCore::AudioNode *v43;
  unint64_t StatusReg;
  _QWORD v45[4];

  v2 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 112))(this);
  result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 120))(this);
  v45[0] = "BaseAudioContext";
  v45[1] = 17;
  v45[2] = "uninitialize";
  v45[3] = result;
  if (*(_BYTE *)(v2 + 12))
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v45);
  if (!*((_BYTE *)this + 380))
    return result;
  v4 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 80))(this);
  v5 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 144))(v4);
  *((_BYTE *)this + 381) = 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(char **)(StatusReg + 736);
  if (!v7)
  {
    v5 = (char *)WTF::Thread::initializeCurrentTLS((WTF::Thread *)v5);
    v7 = v5;
  }
  if (v7 != *((char **)this + 35))
  {
    v5 = (char *)this + 292;
    if (__ldaxr((unsigned __int8 *)this + 292))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
LABEL_12:
      *((_QWORD *)this + 35) = v7;
      v9 = 1;
      goto LABEL_13;
    }
    v5 = (char *)MEMORY[0x19AEA534C]();
    goto LABEL_12;
  }
  v9 = *((_DWORD *)this + 72) + 1;
LABEL_13:
  *((_DWORD *)this + 72) = v9;
  v10 = (WTF **)((char *)this + 144);
  while (1)
  {
    v11 = *((unsigned int *)this + 39);
    if (!(_DWORD)v11)
      break;
    v12 = *v10;
    v13 = (uint64_t)*v10 + 8 * v11;
    *v10 = 0;
    *((_QWORD *)this + 19) = 0;
    v14 = v12;
    do
    {
      v15 = *(_QWORD *)v14;
      *(_BYTE *)(v15 + 113) = 1;
      v16 = *(unsigned int *)(v15 + 84);
      if ((_DWORD)v16)
      {
        v17 = *(uint64_t **)(v15 + 72);
        v18 = 8 * v16;
        do
        {
          v19 = *v17++;
          WebCore::AudioNodeOutput::disable(v19);
          v18 -= 8;
        }
        while (v18);
      }
      v14 = (WTF *)((char *)v14 + 8);
    }
    while (v14 != (WTF *)v13);
    v20 = 0;
    v21 = 8 * v11;
    do
    {
      v5 = *(char **)((char *)v12 + v20);
      if (v5)
      {
        v5[115] = 0;
        *(_QWORD *)((char *)v12 + v20) = 0;
        v5 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v5 + 112))(v5);
      }
      else
      {
        *(_QWORD *)((char *)v12 + v20) = 0;
      }
      v20 += 8;
    }
    while (v21 != v20);
    if (v12)
LABEL_26:
      v5 = (char *)WTF::fastFree(v12, v6);
LABEL_27:
    v22 = (WTF *)*((_QWORD *)this + 20);
    v23 = *((unsigned int *)this + 43);
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    v24 = v22;
    if ((_DWORD)v23)
    {
      do
      {
        v25 = *(_QWORD *)v24;
        *(_BYTE *)(v25 + 113) = 1;
        v26 = *(unsigned int *)(v25 + 84);
        if ((_DWORD)v26)
        {
          v27 = *(uint64_t **)(v25 + 72);
          v28 = 8 * v26;
          do
          {
            v29 = *v27++;
            WebCore::AudioNodeOutput::disable(v29);
            v28 -= 8;
          }
          while (v28);
        }
        v24 = (WTF *)((char *)v24 + 8);
      }
      while (v24 != (WTF *)((char *)v22 + 8 * v23));
      v30 = 8 * v23;
      v31 = v22;
      do
      {
        v5 = *(char **)v31;
        if (*(_QWORD *)v31)
        {
          v5[115] = 0;
          *(_QWORD *)v31 = 0;
          v5 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v5 + 112))(v5);
        }
        else
        {
          *(_QWORD *)v31 = 0;
        }
        v31 = (WTF *)((char *)v31 + 8);
        v30 -= 8;
      }
      while (v30);
    }
    if (v22)
      v5 = (char *)WTF::fastFree(v22, v6);
  }
  if (*((_DWORD *)this + 43))
  {
    v12 = *v10;
    *v10 = 0;
    *((_QWORD *)this + 19) = 0;
    if (v12)
      goto LABEL_26;
    goto LABEL_27;
  }
  v32 = *((_DWORD *)this + 72) - 1;
  *((_DWORD *)this + 72) = v32;
  if (v32)
    goto LABEL_48;
  *((_QWORD *)this + 35) = 0;
  v5 = (char *)this + 292;
  v33 = __ldxr((unsigned __int8 *)this + 292);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_47:
    v5 = (char *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_48:
  v34 = *(_QWORD *)(StatusReg + 736);
  if (!v34)
    v34 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)v5);
  if (v34 == *((_QWORD *)this + 35))
  {
    v36 = *((_DWORD *)this + 72) + 1;
  }
  else
  {
    if (__ldaxr((unsigned __int8 *)this + 292))
    {
      __clrex();
      goto LABEL_55;
    }
    if (__stxr(1u, (unsigned __int8 *)this + 292))
LABEL_55:
      MEMORY[0x19AEA534C]();
    *((_QWORD *)this + 35) = v34;
    v36 = 1;
  }
  *((_DWORD *)this + 72) = v36;
  result = (unsigned __int8 *)WebCore::BaseAudioContext::derefFinishedSourceNodes(this);
  v38 = *((_DWORD *)this + 72) - 1;
  *((_DWORD *)this + 72) = v38;
  if (!v38)
  {
    *((_QWORD *)this + 35) = 0;
    result = (unsigned __int8 *)this + 292;
    v39 = __ldxr((unsigned __int8 *)this + 292);
    if (v39 == 1)
    {
      if (!__stlxr(0, result))
        goto LABEL_63;
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
LABEL_63:
  if (*((_DWORD *)this + 30))
  {
    v40 = *((unsigned int *)this + 31);
    if ((_DWORD)v40)
    {
      v41 = (WebCore::AudioNode **)*((_QWORD *)this + 14);
      v42 = 8 * v40;
      do
      {
        v43 = *v41;
        *v41 = 0;
        if (v43)
          WebCore::AudioNode::decrementConnectionCount(v43);
        ++v41;
        v42 -= 8;
      }
      while (v42);
      *((_DWORD *)this + 31) = 0;
    }
    result = (unsigned __int8 *)*((_QWORD *)this + 14);
    if (result)
    {
      *((_QWORD *)this + 14) = 0;
      *((_DWORD *)this + 30) = 0;
      result = (unsigned __int8 *)WTF::fastFree((WTF *)result, v37);
    }
  }
  *((_BYTE *)this + 380) = 0;
  return result;
}

char *WebCore::BaseAudioContext::logChannel(WebCore::BaseAudioContext *this)
{
  return &WebCore::LogMedia;
}

WTF::Thread *WebCore::BaseAudioContext::derefFinishedSourceNodes(WTF::Thread *this)
{
  WTF::Thread *v1;
  unint64_t v2;
  uint64_t v3;
  WTF::Thread **v4;
  int v5;
  char *v6;
  WTF::Thread **v7;
  WTF::Thread **v8;
  WebCore::AudioNode **v9;
  WebCore::AudioNode **v10;
  WebCore::AudioNode *v11;
  WebCore::AudioNode *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::Thread *v16;
  WebCore::AudioNode *v17;
  uint64_t v18;
  char *v19;
  WTF::Thread *v20;
  _QWORD *v21;
  uint64_t v22;

  if (*((_BYTE *)this + 383))
  {
    v1 = this;
    v2 = *((_QWORD *)this + 14);
    v3 = *((unsigned int *)this + 31);
    v4 = (WTF::Thread **)(v2 + 8 * v3);
    if ((_DWORD)v3)
    {
      v5 = 0;
      v6 = (char *)(v2 + 8 * v3);
      v7 = (WTF::Thread **)v6;
      while (1)
      {
        this = *(WTF::Thread **)v2;
        if (*(_BYTE *)(*(_QWORD *)v2 + 114))
          break;
LABEL_22:
        v2 += 8;
        if (v2 >= (unint64_t)v4)
        {
          v2 = *((_QWORD *)v1 + 14);
          v18 = *((unsigned int *)v1 + 31);
          v4 = v7;
          goto LABEL_25;
        }
      }
      v8 = (WTF::Thread **)v2;
      if (v7 != (WTF::Thread **)(*((_QWORD *)v1 + 14) + 8 * *((unsigned int *)v1 + 31)))
      {
        if (v6 != (char *)v2)
        {
          if (v6 <= (char *)v7)
          {
            v14 = 0;
            v13 = (uint64_t)(v2 - (_QWORD)v6) >> 3;
            do
            {
              v15 = v2 + v14;
              v16 = *(WTF::Thread **)(v2 + v14 - 8);
              *(_QWORD *)(v15 - 8) = 0;
              *(WTF::Thread **)((char *)v7 + ((v2 - (_QWORD)v6) & 0xFFFFFFFFFFFFFFF8) + v14 - 8) = v16;
              v17 = *(WebCore::AudioNode **)(v2 + v14 - 8);
              *(_QWORD *)(v15 - 8) = 0;
              if (v17)
                WebCore::AudioNode::decrementConnectionCount(v17);
              v14 -= 8;
            }
            while ((char *)(v2 + v14) != v6);
          }
          else
          {
            v9 = v7;
            v10 = (WebCore::AudioNode **)v6;
            do
            {
              v11 = *v10;
              *v10 = 0;
              *v9 = v11;
              v12 = *v10;
              *v10 = 0;
              if (v12)
                WebCore::AudioNode::decrementConnectionCount(v12);
              ++v9;
              ++v10;
            }
            while (v10 != (WebCore::AudioNode **)v2);
            v13 = (uint64_t)(v2 - (_QWORD)v6) >> 3;
          }
          v8 = &v7[v13];
          this = *(WTF::Thread **)v2;
          *(_QWORD *)v2 = 0;
          v6 = (char *)(v2 + 8);
          if (!this)
            goto LABEL_21;
          goto LABEL_20;
        }
        v8 = v7;
      }
      *(_QWORD *)v2 = 0;
      v6 = (char *)(v2 + 8);
LABEL_20:
      this = WebCore::AudioNode::decrementConnectionCount(this);
LABEL_21:
      ++v5;
      v7 = v8;
      goto LABEL_22;
    }
    v18 = 0;
    v5 = 0;
    v6 = (char *)v4;
LABEL_25:
    v19 = (char *)(v2 + 8 * v18);
    if (v6 != v19)
    {
      if (v6 <= (char *)v4)
      {
        v21 = (WTF::Thread **)((char *)v4 + ((v19 - v6) & 0xFFFFFFFFFFFFFFF8) - 8);
        do
        {
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *(_QWORD *)v19 = 0;
          *v21 = v22;
          this = *(WTF::Thread **)v19;
          *(_QWORD *)v19 = 0;
          if (this)
            this = WebCore::AudioNode::decrementConnectionCount(this);
          --v21;
        }
        while (v19 != v6);
      }
      else
      {
        do
        {
          v20 = *(WTF::Thread **)v6;
          *(_QWORD *)v6 = 0;
          *v4 = v20;
          this = *(WTF::Thread **)v6;
          *(_QWORD *)v6 = 0;
          if (this)
            this = WebCore::AudioNode::decrementConnectionCount(this);
          ++v4;
          v6 += 8;
        }
        while (v6 != v19);
      }
    }
    *((_DWORD *)v1 + 31) -= v5;
    *((_BYTE *)v1 + 383) = 0;
  }
  return this;
}

uint64_t WebCore::BaseAudioContext::setState(uint64_t result, void *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _DWORD *v21;

  v2 = a2;
  v3 = result;
  if (*(unsigned __int8 *)(result + 376) != (_DWORD)a2)
  {
    *(_BYTE *)(result + 376) = (_BYTE)a2;
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
      v5 = WebCore::threadGlobalDataSlow((WebCore *)result);
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *(_QWORD *)(v5 + 40);
    }
    v7 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
    *(_DWORD *)(v7 + 16) = 1;
    *(_QWORD *)v7 = off_1E33A4B48;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 20) = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8202 | (*(_QWORD *)(v6 + 1984) != 0);
    v9 = *(_DWORD **)(v6 + 1984);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(v7 + 24) = v9;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = v8;
    *(_QWORD *)(v7 + 64) = 0;
    v21 = (_DWORD *)v7;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v3, v3 + 32, 9, (uint64_t *)&v21);
    result = (uint64_t)v21;
    if (v21)
    {
      if (v21[4] == 1)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 8))();
      else
        --v21[4];
    }
    {
      result = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager
                                                    + 48))(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager);
    }
    else
    {
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    }
  }
  if (*(_DWORD *)(v3 + 260) > v2)
  {
    v10 = *(_QWORD *)(v3 + 248) + 16 * v2;
    v11 = *(WTF **)v10;
    v12 = *(unsigned int *)(v10 + 12);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = 8 * v12;
      v15 = (uint64_t *)v11;
      do
      {
        v16 = *v15;
        v17 = *(_QWORD *)(*v15 + 24);
        if (v17 && *(_QWORD *)v17 && (*(_BYTE *)(v17 + 8) & 3) == 0)
        {
          v18 = *(_QWORD *)(v16 + 32);
          if (!v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
            v19 = 0;
          else
            v19 = *(uint64_t **)v18;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v16, v19, 0, (objc_class *)0xA);
          MEMORY[0x19AEA32A0](&v21);
        }
        ++v15;
        v14 -= 8;
      }
      while (v14);
      v20 = (uint64_t *)v11;
      do
      {
        result = *v20;
        *v20 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 16);
        }
        ++v20;
        v13 -= 8;
      }
      while (v13);
    }
    if (v11)
      return WTF::fastFree(v11, a2);
  }
  return result;
}

uint64_t WebCore::BaseAudioContext::stop(WebCore::BaseAudioContext *this)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Document *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[4];

  v2 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 112))(this);
  result = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 120))(this);
  v18[0] = "BaseAudioContext";
  v18[1] = 17;
  v18[2] = "stop";
  v18[3] = result;
  if (*(_BYTE *)(v2 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v18);
  if (!*((_BYTE *)this + 379))
  {
    v4 = (unsigned int *)((char *)this + 24);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    *((_BYTE *)this + 379) = 1;
    v6 = *((_QWORD *)this + 1);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    {
      if (*(_BYTE *)(v7 + 178))
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v8 = (WebCore::Document *)(v7 - 288);
    }
    else
    {
      v8 = 0;
    }
    WebCore::Document::updateIsPlayingMedia(v8);
    (*(void (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 144))(this);
    do
      v10 = __ldaxr(v4);
    while (__stlxr(v10 + 1, v4));
    do
    {
      v11 = *((_QWORD *)this + 16);
      v12 = *((_QWORD *)this + 17);
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
      v13 = (WTF *)*((_QWORD *)this + 22);
      if (v13)
      {
        *((_QWORD *)this + 22) = 0;
        *((_DWORD *)this + 46) = 0;
        WTF::fastFree(v13, v9);
      }
      *((_QWORD *)this + 22) = v11;
      *((_QWORD *)this + 23) = v12;
      result = (uint64_t)WebCore::BaseAudioContext::deleteMarkedNodes(this);
    }
    while (*((_DWORD *)this + 47));
    do
    {
      v14 = __ldaxr(v4);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v4));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)this + 6);
      result = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 16))(this);
    }
    do
    {
      v16 = __ldaxr(v4);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v4));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)this + 6);
      return (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 16))(this);
    }
  }
  return result;
}

uint64_t WebCore::BaseAudioContext::scriptExecutionContext(WebCore::BaseAudioContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

WTF::StringImpl *WebCore::BaseAudioContext::decodeAudioData(unsigned int *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *result;
  WTF::NativePromiseBase *v46;
  _BYTE *v47;
  void *v48;
  _BYTE *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  WTF::Logger *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::Logger *v77;
  uint64_t v78;
  WTF::Logger *v79;
  _BYTE *v80;
  WTF::NativePromiseBase *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  char *v96;
  int v97;
  uint64_t v98;
  WTF::NativePromiseBase *v99;
  WTF::Lock *v100;
  int v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  WTF *v117;
  void *v118;
  uint64_t v119;
  __int128 v120;
  _BYTE v121[48];
  unsigned int *v122;
  unsigned int *v123;
  __int128 v124;
  const char *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  char v128;
  WTF::StringImpl *v129;
  WTF::NativePromiseBase *v130;
  WTF::Lock *v131;
  char v132;
  WTF::Logger *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  _BYTE buf[24];
  __int128 v150;
  WTF::StringImpl *v151;
  int v152;
  WTF::StringImpl *v153;
  int v154;
  WTF::StringImpl *v155;
  int v156;
  WTF::StringImpl *v157;
  int v158;
  WTF::Logger *v159;
  int v160;
  _QWORD v161[5];

  v161[2] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 178))
      {
        __break(0xC471u);
        goto LABEL_191;
      }
      if ((WebCore::Document::isFullyActive((WebCore::Document *)(v7 - 288)) & 1) != 0)
      {
        if (!*((_QWORD *)a1 + 37))
        {
          v12 = WTF::fastMalloc((WTF *)8);
          WTF::RunLoop::create();
          v14 = (WTF *)*((_QWORD *)a1 + 37);
          *((_QWORD *)a1 + 37) = v12;
          if (v14)
          {
            v15 = *(_QWORD *)v14;
            *(_QWORD *)v14 = 0;
            if (v15)
            {
              v16 = (unsigned int *)(v15 + 8);
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, (unsigned int *)(v15 + 8));
                v117 = (WTF *)MEMORY[0x19AEA564C]();
                WTF::fastFree(v117, v118);
              }
            }
            WTF::fastFree(v14, v13);
          }
        }
        v19 = (_DWORD *)*a2;
        v20 = *(_DWORD *)(*a2 + 88);
        if (v20 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x195548414);
        }
        v19[22] = v20 + 1;
        v21 = (uint64_t *)*((_QWORD *)a1 + 37);
        *v19 += 2;
        *(_QWORD *)buf = v19;
        v22 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 88))(a1);
        WebCore::AsyncAudioDecoder::decodeAsync(v21, (uint64_t *)buf, (uint64_t *)&v127, *(float *)(v22 + 160));
        v23 = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)buf);
        v24 = (uint64_t)v127;
        v25 = WTF::RunLoop::current((WTF::RunLoop *)v23);
        v26 = *a2;
        *a2 = 0;
        *(_QWORD *)v121 = a1;
        *(_QWORD *)&v121[8] = v26;
        v27 = WTF::fastMalloc((WTF *)0x10);
        v28 = v27;
        *(_DWORD *)v27 = 1;
        v29 = a1 + 6;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
        *(_QWORD *)(v27 + 8) = a1;
        ++*((_QWORD *)a1 + 2);
        v31 = *a3;
        *a3 = 0;
        v32 = *a4;
        *a4 = 0;
        v33 = *a5;
        *a5 = 0;
        v120 = *(_OWORD *)v121;
        *(_QWORD *)buf = *(_QWORD *)v121;
        memset(&v121[8], 0, 40);
        v34 = WTF::fastMalloc((WTF *)0x50);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
        v35 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v35 = off_1E336A138;
        *(_OWORD *)(v35 + 8) = v120;
        *(_OWORD *)&buf[8] = 0u;
        *(_QWORD *)(v35 + 24) = v28;
        *(_QWORD *)(v35 + 32) = v31;
        v150 = 0u;
        *(_QWORD *)(v35 + 40) = v32;
        *(_QWORD *)(v35 + 48) = v33;
        v151 = 0;
        *(_DWORD *)(v34 + 8) = 1;
        *(_QWORD *)(v34 + 16) = v25;
        *(_OWORD *)(v34 + 24) = 0u;
        *(_QWORD *)(v34 + 40) = "decodeAudioData";
        *(_QWORD *)(v34 + 48) = 0;
        *(_WORD *)(v34 + 56) = 0;
        *(_QWORD *)v34 = &off_1E336A1A8;
        v37 = (unsigned int *)(v24 + 8);
        *(_QWORD *)(v34 + 64) = 0;
        *(_QWORD *)(v34 + 72) = v35;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
        v122 = (unsigned int *)v24;
        v124 = 0u;
        v125 = "decodeAudioData";
        v126 = 0;
        WebCore::BaseAudioContext::decodeAudioData(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0::~$_0((uint64_t *)buf, v36);
        v123 = 0;
        v39 = (unsigned __int8 *)(v24 + 48);
        v130 = (WTF::NativePromiseBase *)v34;
        v131 = (WTF::Lock *)(v24 + 48);
        v132 = 1;
        if (__ldaxr((unsigned __int8 *)(v24 + 48)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v39))
        {
          goto LABEL_30;
        }
        v39 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
LABEL_30:
        *(_BYTE *)(v24 + 128) = 1;
        v46 = v130;
        v47 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v39);
        if (!*v47)
          goto LABEL_144;
        v49 = v47;
        if (v47[16] < 4u)
          goto LABEL_144;
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v124);
        WTF::String::String((WTF::String *)&v140, " invoking maybeSettle() [");
        WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v24, &v139);
        WTF::String::String((WTF::String *)&v138, " callback:");
        WTF::LogArgument<void const*>::toString();
        WTF::String::String((WTF::String *)&v136, " isNothing:");
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v50 = *(WTF::StringImpl **)buf;
        WTF::String::String((WTF::String *)&v135, "]");
        v133 = v140;
        v148 = v139;
        *(_QWORD *)buf = v141;
        v147 = v138;
        v145 = v136;
        v146 = v137;
        v143 = v135;
        v144 = v50;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)&v133, (uint64_t *)&v148, (uint64_t *)&v147, (uint64_t *)&v146, (uint64_t *)&v145, (uint64_t *)&v144, (uint64_t *)&v143, &v142);
        if (v142)
        {
          v52 = v135;
          v135 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::destroy(v52, v51);
              if (v50)
              {
LABEL_37:
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, v51);
                else
                  *(_DWORD *)v50 -= 2;
              }
LABEL_39:
              v53 = v136;
              v136 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, v51);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = v137;
              v137 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, v51);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = v138;
              v138 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, v51);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = v139;
              v139 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, v51);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = v140;
              v140 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, v51);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = v141;
              v141 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, v51);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = *((_QWORD *)v49 + 4);
              v60 = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v60)
              {
                WTF::String::utf8();
                v61 = v133 ? (char *)v133 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v61;
                _os_log_impl(&dword_1940B8000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v60 = (uint64_t)v133;
                v133 = 0;
                if (v60)
                {
                  if (*(_DWORD *)v60 == 1)
                    v60 = WTF::fastFree((WTF *)v60, v48);
                  else
                    --*(_DWORD *)v60;
                }
              }
              if (*v49 && v49[16] >= 4u)
              {
                v62 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v63 = *v62;
                  if ((v63 & 1) != 0)
                    break;
                  v64 = __ldaxr(v62);
                  if (v64 == v63)
                  {
                    if (!__stxr(v63 | 1, v62))
                    {
                      v65 = WTF::Logger::observers((WTF::Logger *)v60);
                      v66 = *(unsigned int *)(v65 + 12);
                      if ((_DWORD)v66)
                      {
                        v67 = *(uint64_t **)v65;
                        v119 = *(_QWORD *)v65 + 8 * v66;
                        do
                        {
                          v68 = *v67;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v124);
                          *(_DWORD *)&buf[16] = 0;
                          WTF::String::String((WTF::String *)&v150, " invoking maybeSettle() [");
                          DWORD2(v150) = 0;
                          WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v24, &v151);
                          v152 = 0;
                          WTF::String::String((WTF::String *)&v153, " callback:");
                          v154 = 0;
                          WTF::LogArgument<void const*>::toString();
                          v156 = 0;
                          WTF::String::String((WTF::String *)&v157, " isNothing:");
                          v158 = 0;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v159 = v133;
                          v160 = 0;
                          WTF::String::String((WTF::String *)v161, "]");
                          v133 = 0;
                          v134 = 0;
                          v69 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                          LODWORD(v134) = 8;
                          v133 = v69;
                          v70 = HIDWORD(v134);
                          *((_DWORD *)v69 + 4 * HIDWORD(v134)) = *(_DWORD *)buf;
                          v71 = *(_QWORD *)&buf[8];
                          if (*(_QWORD *)&buf[8])
                            **(_DWORD **)&buf[8] += 2;
                          *((_QWORD *)v69 + 2 * v70 + 1) = v71;
                          *((_DWORD *)v69 + 4 * (v70 + 1)) = *(_DWORD *)&buf[16];
                          v72 = v150;
                          if ((_QWORD)v150)
                            *(_DWORD *)v150 += 2;
                          *((_QWORD *)v69 + 2 * (v70 + 1) + 1) = v72;
                          *((_DWORD *)v69 + 4 * (v70 + 2)) = DWORD2(v150);
                          v73 = v151;
                          if (v151)
                            *(_DWORD *)v151 += 2;
                          *((_QWORD *)v69 + 2 * (v70 + 2) + 1) = v73;
                          *((_DWORD *)v69 + 4 * (v70 + 3)) = v152;
                          v74 = v153;
                          if (v153)
                            *(_DWORD *)v153 += 2;
                          *((_QWORD *)v69 + 2 * (v70 + 3) + 1) = v74;
                          *((_DWORD *)v69 + 4 * (v70 + 4)) = v154;
                          v75 = v155;
                          if (v155)
                            *(_DWORD *)v155 += 2;
                          *((_QWORD *)v69 + 2 * (v70 + 4) + 1) = v75;
                          *((_DWORD *)v69 + 4 * (v70 + 5)) = v156;
                          v76 = v157;
                          if (v157)
                            *(_DWORD *)v157 += 2;
                          *((_QWORD *)v69 + 2 * (v70 + 5) + 1) = v76;
                          *((_DWORD *)v69 + 4 * (v70 + 6)) = v158;
                          v77 = v159;
                          if (v159)
                            *(_DWORD *)v159 += 2;
                          *((_QWORD *)v69 + 2 * (v70 + 6) + 1) = v77;
                          *((_DWORD *)v69 + 4 * (v70 + 7)) = v160;
                          v78 = v161[0];
                          if (v161[0])
                            *(_DWORD *)v161[0] += 2;
                          *((_QWORD *)v69 + 2 * (v70 + 7) + 1) = v78;
                          HIDWORD(v134) = v70 + 8;
                          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v68 + 16))(v68, v49, 4, &v133);
                          v79 = v133;
                          if (HIDWORD(v134))
                          {
                            v80 = v49;
                            v81 = v46;
                            v82 = 16 * HIDWORD(v134);
                            v83 = (WTF::StringImpl **)((char *)v133 + 8);
                            do
                            {
                              v84 = *v83;
                              *v83 = 0;
                              if (v84)
                              {
                                if (*(_DWORD *)v84 == 2)
                                  WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v48);
                                else
                                  *(_DWORD *)v84 -= 2;
                              }
                              v83 += 2;
                              v82 -= 16;
                            }
                            while (v82);
                            v79 = v133;
                            v46 = v81;
                            v49 = v80;
                          }
                          if (v79)
                          {
                            v133 = 0;
                            LODWORD(v134) = 0;
                            WTF::fastFree(v79, v48);
                          }
                          v85 = (WTF::StringImpl *)v161[0];
                          v161[0] = 0;
                          if (v85)
                          {
                            if (*(_DWORD *)v85 == 2)
                              WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v85 -= 2;
                          }
                          v86 = v159;
                          v159 = 0;
                          if (v86)
                          {
                            if (*(_DWORD *)v86 == 2)
                              WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v86 -= 2;
                          }
                          v87 = v157;
                          v157 = 0;
                          if (v87)
                          {
                            if (*(_DWORD *)v87 == 2)
                              WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v87 -= 2;
                          }
                          v88 = v155;
                          v155 = 0;
                          if (v88)
                          {
                            if (*(_DWORD *)v88 == 2)
                              WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v88 -= 2;
                          }
                          v89 = v153;
                          v153 = 0;
                          if (v89)
                          {
                            if (*(_DWORD *)v89 == 2)
                              WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v89 -= 2;
                          }
                          v90 = v151;
                          v151 = 0;
                          if (v90)
                          {
                            if (*(_DWORD *)v90 == 2)
                              WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v90 -= 2;
                          }
                          v91 = (WTF::StringImpl *)v150;
                          *(_QWORD *)&v150 = 0;
                          if (v91)
                          {
                            if (*(_DWORD *)v91 == 2)
                              WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v91 -= 2;
                          }
                          v92 = *(WTF::StringImpl **)&buf[8];
                          *(_QWORD *)&buf[8] = 0;
                          if (v92)
                          {
                            if (*(_DWORD *)v92 == 2)
                              WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v92 -= 2;
                          }
                          ++v67;
                        }
                        while (v67 != (uint64_t *)v119);
                      }
                      v93 = __ldxr(v62);
                      if (v93 == 1)
                      {
                        if (!__stlxr(0, v62))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v94 = v142;
              v142 = 0;
              if (v94)
              {
                if (*(_DWORD *)v94 == 2)
                  WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v48);
                else
                  *(_DWORD *)v94 -= 2;
              }
LABEL_144:
              if (*(_DWORD *)(v24 + 80))
              {
                WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(v130, v24, (unsigned __int8 **)&v131);
              }
              else
              {
                v95 = *(unsigned int *)(v24 + 100);
                if ((_DWORD)v95 == *(_DWORD *)(v24 + 96))
                {
                  v96 = WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v24 + 88), v95 + 1, (unint64_t)&v130);
                  v95 = *(unsigned int *)(v24 + 100);
                  v97 = v95 + 1;
                  v98 = *(_QWORD *)(v24 + 88);
                  v99 = *(WTF::NativePromiseBase **)v96;
                  *(_QWORD *)v96 = 0;
                }
                else
                {
                  v97 = v95 + 1;
                  v98 = *(_QWORD *)(v24 + 88);
                  v99 = v130;
                  v130 = 0;
                }
                *(_QWORD *)(v98 + 8 * v95) = v99;
                *(_DWORD *)(v24 + 100) = v97;
              }
              if (!v132)
                goto LABEL_156;
              v100 = v131;
              v101 = __ldxr((unsigned __int8 *)v131);
              if (v101 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v131))
                {
LABEL_156:
                  v102 = (unsigned int *)v130;
                  v130 = 0;
                  if (v102)
                  {
                    v103 = v102 + 2;
                    do
                    {
                      v104 = __ldaxr(v103);
                      v105 = v104 - 1;
                    }
                    while (__stlxr(v105, v103));
                    if (!v105)
                    {
                      atomic_store(1u, v102 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 8))(v102);
                    }
                  }
                  v106 = v123;
                  v123 = 0;
                  if (v106)
                  {
                    v107 = v106 + 2;
                    do
                    {
                      v108 = __ldaxr(v107);
                      v109 = v108 - 1;
                    }
                    while (__stlxr(v109, v107));
                    if (!v109)
                    {
                      atomic_store(1u, v106 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v106 + 8))(v106);
                    }
                  }
                  v110 = v122;
                  v122 = 0;
                  if (v110)
                  {
                    v111 = v110 + 2;
                    do
                    {
                      v112 = __ldaxr(v111);
                      v113 = v112 - 1;
                    }
                    while (__stlxr(v113, v111));
                    if (!v113)
                    {
                      atomic_store(1u, v110 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v110 + 16))(v110);
                    }
                  }
                  WebCore::BaseAudioContext::decodeAudioData(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0::~$_0((uint64_t *)v121, v48);
                  result = v127;
                  v127 = 0;
                  if (result)
                  {
                    v114 = (unsigned int *)((char *)result + 8);
                    do
                    {
                      v115 = __ldaxr(v114);
                      v116 = v115 - 1;
                    }
                    while (__stlxr(v116, v114));
                    if (!v116)
                    {
                      atomic_store(1u, (unsigned int *)result + 2);
                      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
                    }
                  }
                  return result;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(v100);
              goto LABEL_156;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (v50)
            goto LABEL_37;
          goto LABEL_39;
        }
        __break(0xC471u);
LABEL_191:
        JUMPOUT(0x195548360);
      }
    }
  }
  v41 = *a5;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v128 = 8;
  *(_QWORD *)v121 = 0;
  buf[0] = 8;
  v42 = v129;
  if (v129)
    *(_DWORD *)v129 += 2;
  *(_QWORD *)&buf[8] = v42;
  WebCore::DeferredPromise::reject(v41, buf, 0, (objc_class **)v121);
  v44 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  result = v129;
  v129 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v43);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::BaseAudioContext::decodeAudioData(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0::~$_0(uint64_t *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  WTF *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;

  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (WTF *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = *((_QWORD *)v6 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v6 + 1) = 0;
      v9 = (unsigned int *)(v8 + 24);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)(v8 + 24));
        v12 = v6;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        v6 = v12;
      }
      WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(a1 + 1);
  return a1;
}

uint64_t WebCore::BaseAudioContext::createScriptProcessor@<X0>(WebCore::BaseAudioContext *this@<X0>, int64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  WebCore::AudioSession *v11;
  WebCore::AudioSessionIOS *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  int v16;
  WebCore::ScriptProcessorNode *v17;
  WebCore::ScriptProcessorNode *v18;
  _QWORD v19[4];

  v10 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 112))(this);
  v11 = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 120))(this);
  v19[0] = "BaseAudioContext";
  v19[1] = 17;
  v19[2] = "createScriptProcessor";
  v19[3] = v11;
  if (*(_BYTE *)(v10 + 12))
    v11 = (WebCore::AudioSession *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19);
  if (a2 > 2047)
  {
    if (a2 >= 0x2000)
    {
      if (a2 != 0x2000 && a2 != 0x4000)
        goto LABEL_28;
    }
    else if (a2 != 2048 && a2 != 4096)
    {
      goto LABEL_28;
    }
  }
  else if (a2 > 511)
  {
    if (a2 != 512 && a2 != 1024)
      goto LABEL_28;
  }
  else if (a2)
  {
    if (a2 != 256)
      goto LABEL_28;
  }
  else
  {
    v12 = WebCore::AudioSession::sharedSession(v11);
    v13 = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v12 + 80))(v12);
    v14 = (unint64_t)log2((double)v13);
    if (v14 >= 0xE)
      v14 = 14;
    if (v14 <= 8)
      LOBYTE(v14) = 8;
    a2 = (1 << v14);
  }
  if (a4 | a3 && a3 < 0x21 && a4 < 0x21)
  {
    v17 = (WebCore::ScriptProcessorNode *)bmalloc::api::isoAllocate();
    v18 = WebCore::ScriptProcessorNode::ScriptProcessorNode(v17, this, a2, (void *)a3, (void *)a4);
    result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v18 + 19);
    v16 = 0;
    *(_QWORD *)a5 = v17;
    goto LABEL_29;
  }
LABEL_28:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a5 = 0;
  v16 = 1;
LABEL_29:
  *(_DWORD *)(a5 + 16) = v16;
  return result;
}

WTF::StringImpl *WebCore::BiquadFilterNode::create@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *result;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float v61;
  float v62;
  char v63[8];
  WTF::StringImpl *v64;
  char v65;
  float v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  const char *v69;
  unint64_t v70;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_QWORD *)v6 = off_1E3368A80;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = &unk_1E3368BA8;
  *(_BYTE *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 36) = 7;
  v8 = a1 + 6;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(v6 + 40) = a1;
  *(_DWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v6 + 88) = _Q0;
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)(v6 + 108) = 0;
  v15 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(v7 + 120) = v15;
  v18 = *((_QWORD *)a1 + 9);
  v19 = *((_QWORD *)a1 + 10) + 1;
  *((_QWORD *)a1 + 10) = v19;
  v20 = v18 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v19;
  *(_QWORD *)(v7 + 128) = v20;
  *(_QWORD *)(v7 + 136) = 2;
  *(_DWORD *)(v7 + 144) = 0;
  v67 = (WTF::StringImpl *)"AudioNode";
  v68 = 10;
  v69 = "AudioNode";
  v70 = v20;
  if (*(_BYTE *)(v15 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v67);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
  *(_QWORD *)v7 = off_1E3368918;
  *(_QWORD *)(v7 + 24) = &unk_1E3368A40;
  *(_QWORD *)(v7 + 152) = 0;
  WebCore::AudioNode::addInput((WebCore::AudioNode *)v7);
  WebCore::AudioNode::addOutput((WebCore::AudioNode *)v7, (void *)1);
  *(_QWORD *)v7 = off_1E3369900;
  *(_QWORD *)(v7 + 24) = &unk_1E3369A28;
  v21 = *(float *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 88))(a1) + 160);
  v22 = WTF::fastMalloc((WTF *)0x58);
  *(_BYTE *)(v22 + 8) = 0;
  *(_DWORD *)(v22 + 12) = 1;
  *(float *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  *(_BYTE *)(v22 + 40) = 1;
  *(_QWORD *)v22 = off_1E3369A68;
  *(_DWORD *)(v22 + 44) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v22 + 48) = WebCore::AudioParam::AudioParam(v23, a1, (_DWORD **)&v67, 0, 1, 350.0, 0.0, v21 * 0.5);
  v25 = v67;
  v67 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v22 + 56) = WebCore::AudioParam::AudioParam(v26, a1, (_DWORD **)&v67, 0, 1, 1.0, -3.4028e38, 3.4028e38);
  v28 = v67;
  v67 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v22 + 64) = WebCore::AudioParam::AudioParam(v29, a1, (_DWORD **)&v67, 0, 1, 0.0, -3.4028e38, 1541.3);
  v31 = v67;
  v67 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v22 + 72) = WebCore::AudioParam::AudioParam(v32, a1, (_DWORD **)&v67, 0, 1, 0.0, -153600.0, 153600.0);
  v34 = v67;
  v67 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  *(_WORD *)(v22 + 80) = 1;
  *(_BYTE *)(v22 + 82) = 1;
  v35 = *(_QWORD *)(v7 + 152);
  *(_QWORD *)(v7 + 152) = v22;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (!*(_BYTE *)(v7 + 32))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 152) + 16))(*(_QWORD *)(v7 + 152));
    *(_BYTE *)(v7 + 32) = 1;
  }
  v67 = (WTF::StringImpl *)2;
  LODWORD(v68) = 0;
  result = WebCore::AudioNode::handleAudioNodeOptions(v7, (unsigned int *)a2, (unsigned int *)&v67, (uint64_t)v63);
  if (v65)
  {
    v38 = v64;
    *(_BYTE *)a3 = v63[0];
    *(_QWORD *)(a3 + 8) = v38;
    *(_DWORD *)(a3 + 16) = 1;
    return WebCore::AudioNode::deref((WebCore::AudioNode *)v7);
  }
  else
  {
    v39 = *(_DWORD *)(a2 + 24);
    v40 = *(_QWORD *)(v7 + 152);
    if (*(_DWORD *)(v40 + 44) != v39)
    {
      *(_DWORD *)(v40 + 44) = v39;
      if (*(_BYTE *)(v40 + 8))
      {
        *(_BYTE *)(v40 + 40) = 1;
        if (*(_DWORD *)(v40 + 36))
        {
          v41 = 0;
          do
          {
            v42 = *(_QWORD *)(*(_QWORD *)(v40 + 24) + 8 * v41);
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
            ++v41;
          }
          while (v41 < *(unsigned int *)(v40 + 36));
          v40 = *(_QWORD *)(v7 + 152);
        }
      }
    }
    v43 = *(_QWORD *)(v40 + 56);
    v66 = *(float *)(a2 + 28);
    v44 = *(_QWORD *)(v43 + 144);
    v45 = *(_QWORD *)(v43 + 152);
    v67 = (WTF::StringImpl *)"AudioParam";
    v68 = 11;
    v69 = "setValue";
    v70 = v45;
    if (*(_BYTE *)(v44 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v67, &v66);
    v46 = *(float *)(v43 + 96);
    v47 = *(float *)(v43 + 100);
    if (v47 < v46)
      goto LABEL_77;
    if (v47 >= v66)
      v47 = v66;
    if (v66 >= v46)
      v46 = v47;
    *(float *)(v43 + 88) = v46;
    v48 = *(_QWORD *)(*(_QWORD *)(v7 + 152) + 72);
    v66 = *(float *)(a2 + 32);
    v49 = *(_QWORD *)(v48 + 144);
    v50 = *(_QWORD *)(v48 + 152);
    v67 = (WTF::StringImpl *)"AudioParam";
    v68 = 11;
    v69 = "setValue";
    v70 = v50;
    if (*(_BYTE *)(v49 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v67, &v66);
    v51 = *(float *)(v48 + 96);
    v52 = *(float *)(v48 + 100);
    if (v52 < v51)
      goto LABEL_77;
    if (v52 >= v66)
      v52 = v66;
    if (v66 >= v51)
      v51 = v52;
    *(float *)(v48 + 88) = v51;
    v53 = *(_QWORD *)(*(_QWORD *)(v7 + 152) + 48);
    v66 = *(float *)(a2 + 36);
    v54 = *(_QWORD *)(v53 + 144);
    v55 = *(_QWORD *)(v53 + 152);
    v67 = (WTF::StringImpl *)"AudioParam";
    v68 = 11;
    v69 = "setValue";
    v70 = v55;
    if (*(_BYTE *)(v54 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v67, &v66);
    v56 = *(float *)(v53 + 96);
    v57 = *(float *)(v53 + 100);
    if (v57 < v56)
      goto LABEL_77;
    if (v57 >= v66)
      v57 = v66;
    if (v66 >= v56)
      v56 = v57;
    *(float *)(v53 + 88) = v56;
    v58 = *(_QWORD *)(*(_QWORD *)(v7 + 152) + 64);
    v66 = *(float *)(a2 + 40);
    v59 = *(_QWORD *)(v58 + 144);
    v60 = *(_QWORD *)(v58 + 152);
    v67 = (WTF::StringImpl *)"AudioParam";
    v68 = 11;
    v69 = "setValue";
    v70 = v60;
    if (*(_BYTE *)(v59 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v67, &v66);
    v61 = *(float *)(v58 + 96);
    v62 = *(float *)(v58 + 100);
    if (v62 < v61)
    {
LABEL_77:
      __break(1u);
    }
    else
    {
      if (v62 >= v66)
        v62 = v66;
      if (v66 >= v61)
        v61 = v62;
      *(float *)(v58 + 88) = v61;
      *(_QWORD *)a3 = v7;
      *(_DWORD *)(a3 + 16) = 0;
      if (v65)
      {
        result = v64;
        v64 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF *WebCore::BaseAudioContext::createWaveShaper@<X0>(WebCore::BaseAudioContext *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF *v5;
  WTF *result;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  WTF *v11;
  int v12;
  char v13;
  int v14;

  v4 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 112))(this);
  v5 = (WTF *)(*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 120))(this);
  v8 = "BaseAudioContext";
  v9 = 17;
  v10 = "createWaveShaper";
  v11 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v8);
  LOBYTE(v8) = 0;
  BYTE4(v8) = 0;
  LOBYTE(v9) = 0;
  BYTE4(v9) = 0;
  LOBYTE(v10) = 0;
  BYTE4(v10) = 0;
  LOBYTE(v11) = 0;
  v13 = 0;
  v14 = 0;
  result = (WTF *)WebCore::WaveShaperNode::create((unsigned int *)this, (uint64_t)&v8, a2);
  if (v13)
  {
    result = v11;
    if (v11)
    {
      v11 = 0;
      v12 = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ConvolverNode::create@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  _BYTE v28[8];
  uint64_t v29;
  char v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  const char *v33;
  unint64_t v34;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_QWORD *)v6 = off_1E3368A80;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = &unk_1E3368BA8;
  *(_BYTE *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 36) = 9;
  v8 = a1 + 6;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(v6 + 40) = a1;
  *(_DWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v6 + 88) = _Q0;
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)(v6 + 108) = 0;
  v15 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(v7 + 120) = v15;
  v18 = *((_QWORD *)a1 + 9);
  v19 = *((_QWORD *)a1 + 10) + 1;
  *((_QWORD *)a1 + 10) = v19;
  v20 = v18 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v19;
  *(_QWORD *)(v7 + 128) = v20;
  *(_QWORD *)(v7 + 136) = 2;
  *(_DWORD *)(v7 + 144) = 0;
  v31 = (uint64_t)"AudioNode";
  v32 = (WTF::StringImpl *)10;
  v33 = "AudioNode";
  v34 = v20;
  if (*(_BYTE *)(v15 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v31);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
  *(_QWORD *)v7 = off_1E3369F80;
  *(_QWORD *)(v7 + 24) = &unk_1E336A0A8;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  *(_WORD *)(v7 + 168) = 256;
  WebCore::AudioNode::addInput((WebCore::AudioNode *)v7);
  WebCore::AudioNode::addOutput((WebCore::AudioNode *)v7, (void *)1);
  *(_BYTE *)(v7 + 32) = 1;
  v31 = 0x100000002;
  LODWORD(v32) = 0;
  WebCore::AudioNode::handleAudioNodeOptions(v7, (unsigned int *)a2, (unsigned int *)&v31, (uint64_t)v28);
  if (v30)
    goto LABEL_19;
  *(_BYTE *)(v7 + 169) = *(_BYTE *)(a2 + 32) ^ 1;
  WebCore::ConvolverNode::setBufferForBindings((uint64_t *)v7, (uint64_t *)(a2 + 24), &v25);
  LOBYTE(v31) = 0;
  LOBYTE(v33) = 0;
  if (v27)
  {
    LOBYTE(v31) = v25;
    v21 = v26;
    v26 = 0;
    v32 = v21;
    LOBYTE(v33) = 1;
  }
  result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v31, (uint64_t)v28);
  if ((_BYTE)v33)
  {
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v27)
  {
    result = v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v30)
  {
LABEL_19:
    v24 = v29;
    *(_BYTE *)a3 = v28[0];
    *(_QWORD *)(a3 + 8) = v24;
    *(_DWORD *)(a3 + 16) = 1;
    return WebCore::AudioNode::deref((WebCore::AudioNode *)v7);
  }
  else
  {
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::BaseAudioContext::createDynamicsCompressor@<X0>(WebCore::BaseAudioContext *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::AudioNode *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;
  char v19;

  v4 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 112))(this);
  v5 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 120))(this);
  v10 = "BaseAudioContext";
  v11 = 17;
  v12 = "createDynamicsCompressor";
  *(_QWORD *)&v13 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v10);
  LOBYTE(v10) = 0;
  BYTE4(v10) = 0;
  LOBYTE(v11) = 0;
  BYTE4(v11) = 0;
  LOBYTE(v12) = 0;
  BYTE4(v12) = 0;
  v13 = xmmword_1968DEF60;
  v14 = -1044381696;
  v6 = (WebCore::AudioNode *)bmalloc::api::isoAllocate();
  v7 = WebCore::DynamicsCompressorNode::DynamicsCompressorNode((uint64_t)v6, (unsigned int *)this, (float *)&v10);
  v15 = 0x100000002;
  v16 = 0;
  result = WebCore::AudioNode::handleAudioNodeOptions(v7, (unsigned int *)&v10, (unsigned int *)&v15, (uint64_t)v17);
  if (v19)
  {
    v9 = v18;
    *(_BYTE *)a2 = v17[0];
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = 1;
    if (v6)
      return WebCore::AudioNode::deref(v6);
  }
  else
  {
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

WTF::Thread *WebCore::ChannelSplitterNode::create@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;

  if (a2[6] - 33 > 0xFFFFFFDF)
  {
    v7 = bmalloc::api::isoAllocate();
    v8 = v7;
    v9 = a2[6];
    *(_QWORD *)v7 = off_1E3368A80;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = &unk_1E3368BA8;
    *(_BYTE *)(v7 + 32) = 0;
    *(_DWORD *)(v7 + 36) = 12;
    v10 = a1 + 6;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    *(_QWORD *)(v7 + 40) = a1;
    *(_DWORD *)(v7 + 48) = 0;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v7 + 88) = _Q0;
    *(_DWORD *)(v7 + 104) = 1;
    *(_QWORD *)(v7 + 108) = 0;
    v17 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    *(_QWORD *)(v8 + 120) = v17;
    v20 = *((_QWORD *)a1 + 9);
    v21 = *((_QWORD *)a1 + 10) + 1;
    *((_QWORD *)a1 + 10) = v21;
    v22 = v20 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v21;
    *(_QWORD *)(v8 + 128) = v22;
    *(_QWORD *)(v8 + 136) = 2;
    *(_DWORD *)(v8 + 144) = 0;
    v26 = "AudioNode";
    v27 = 10;
    v28 = "AudioNode";
    v29 = v22;
    if (*(_BYTE *)(v17 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v26);
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
    *(_QWORD *)v8 = off_1E3369C48;
    *(_QWORD *)(v8 + 24) = &unk_1E3369D70;
    WebCore::AudioNode::addInput((WebCore::AudioNode *)v8);
    for (; v9; --v9)
      WebCore::AudioNode::addOutput((WebCore::AudioNode *)v8, (void *)1);
    *(_BYTE *)(v8 + 32) = 1;
    v24 = a2[6];
    v25 = 0x100000002;
    result = WebCore::AudioNode::handleAudioNodeOptions(v8, a2, &v24, (uint64_t)&v26);
    if ((_BYTE)v28)
    {
      v23 = v27;
      *(_BYTE *)a3 = (_BYTE)v26;
      *(_QWORD *)(a3 + 8) = v23;
      *(_DWORD *)(a3 + 16) = 1;
      return WebCore::AudioNode::deref((WebCore::AudioNode *)v8);
    }
    else
    {
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 16) = 0;
    }
  }
  else
  {
    result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

WTF::Thread *WebCore::ChannelMergerNode::create@<X0>(WebCore::BaseAudioContext *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;
  WebCore::ChannelMergerNode *v7;
  WebCore::ChannelMergerNode *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE v12[8];
  uint64_t v13;
  char v14;

  if (a2[6] - 33 > 0xFFFFFFDF)
  {
    v7 = (WebCore::ChannelMergerNode *)bmalloc::api::isoAllocate();
    v8 = WebCore::ChannelMergerNode::ChannelMergerNode(v7, a1, (void *)a2[6]);
    v10 = 0x200000001;
    v11 = 0;
    result = WebCore::AudioNode::handleAudioNodeOptions((uint64_t)v8, a2, (unsigned int *)&v10, (uint64_t)v12);
    if (v14)
    {
      v9 = v13;
      *(_BYTE *)a3 = v12[0];
      *(_QWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 16) = 1;
      if (v7)
        return WebCore::AudioNode::deref(v7);
    }
    else
    {
      *(_QWORD *)a3 = v7;
      *(_DWORD *)(a3 + 16) = 0;
    }
  }
  else
  {
    result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::BaseAudioContext::createOscillator@<X0>(WebCore::BaseAudioContext *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *result;
  void *v7;
  WTF *v8;
  uint64_t v9;
  WTF ***v10;
  uint64_t v11;
  WTF **v12;
  void *v13;
  WTF *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  _QWORD v18[2];
  WTF *v19;

  v4 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 112))(this);
  v5 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 120))(this);
  v15 = "BaseAudioContext";
  v16 = 17;
  v17 = "createOscillator";
  v18[0] = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
  LOBYTE(v15) = 0;
  BYTE4(v15) = 0;
  LOBYTE(v16) = 0;
  BYTE4(v16) = 0;
  LOBYTE(v17) = 0;
  BYTE4(v17) = 0;
  LOBYTE(v18[0]) = 0;
  *(_QWORD *)((char *)v18 + 4) = 1138491392;
  v19 = 0;
  result = WebCore::OscillatorNode::create(this, (uint64_t)&v15, a2);
  v8 = v19;
  v19 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v9 = *((unsigned int *)v8 + 9);
      if ((_DWORD)v9)
      {
        v10 = (WTF ***)*((_QWORD *)v8 + 3);
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            WTF::fastAlignedFree(*v12, v7);
            WTF::fastFree((WTF *)v12, v13);
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v14 = (WTF *)*((_QWORD *)v8 + 3);
      if (v14)
      {
        *((_QWORD *)v8 + 3) = 0;
        *((_DWORD *)v8 + 8) = 0;
        WTF::fastFree(v14, v7);
      }
      return (WTF::StringImpl *)WTF::fastFree(v8, v7);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  return result;
}

WTF *WebCore::BaseAudioContext::createPeriodicWave@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  const char *v13;
  WTF *v14;
  uint64_t v15;
  WTF *result;
  void *v17;
  const char *v18;
  WTF *v19;
  const char *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  char v24;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v18 = "BaseAudioContext";
  v19 = (WTF *)17;
  v20 = "createPeriodicWave";
  v21 = v11;
  if (*(_BYTE *)(v10 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v18);
  v12 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  v19 = v12;
  v13 = *(const char **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v20 = v13;
  LOBYTE(v21) = 1;
  v14 = *(WTF **)a3;
  *(_QWORD *)a3 = 0;
  v22 = v14;
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v23 = v15;
  v24 = 1;
  LOBYTE(v18) = *a4;
  result = WebCore::PeriodicWave::create(a1, (uint64_t)&v18, a5);
  if (v24)
  {
    result = v22;
    if (v22)
    {
      v22 = 0;
      LODWORD(v23) = 0;
      result = (WTF *)WTF::fastFree(result, v17);
    }
  }
  if ((_BYTE)v21)
  {
    result = v19;
    if (v19)
    {
      v19 = 0;
      LODWORD(v20) = 0;
      return (WTF *)WTF::fastFree(result, v17);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::BaseAudioContext::createStereoPanner@<X0>(WebCore::BaseAudioContext *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::StereoPannerNode *v6;
  WebCore::StereoPannerNode *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[8];
  uint64_t v17;
  char v18;

  v4 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 112))(this);
  v5 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)this + 120))(this);
  v10 = "BaseAudioContext";
  v11 = 17;
  v12 = "createStereoPanner";
  v13 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v10);
  LOBYTE(v10) = 0;
  BYTE4(v10) = 0;
  LOBYTE(v11) = 0;
  BYTE4(v11) = 0;
  LOBYTE(v12) = 0;
  BYTE4(v12) = 0;
  LODWORD(v13) = 0;
  v6 = (WebCore::StereoPannerNode *)bmalloc::api::isoAllocate();
  v7 = WebCore::StereoPannerNode::StereoPannerNode(v6, this, 0.0);
  v14 = 0x100000002;
  v15 = 0;
  result = WebCore::AudioNode::handleAudioNodeOptions((uint64_t)v7, (unsigned int *)&v10, (unsigned int *)&v14, (uint64_t)v16);
  if (v18)
  {
    v9 = v17;
    *(_BYTE *)a2 = v16[0];
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = 1;
    if (v6)
      return WebCore::AudioNode::deref(v6);
  }
  else
  {
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

WTF *WebCore::BaseAudioContext::createIIRFilter@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  WTF *result;
  const char *v19;
  uint64_t v20;
  const char *v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;

  v10 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
  v11 = (WTF *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 120))(a1);
  v19 = "BaseAudioContext";
  v20 = 17;
  v21 = "createIIRFilter";
  v22 = v11;
  if (*(_BYTE *)(v10 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v19);
  LOBYTE(v19) = 0;
  BYTE4(v19) = 0;
  LOBYTE(v20) = 0;
  BYTE4(v20) = 0;
  LOBYTE(v21) = 0;
  BYTE4(v21) = 0;
  v12 = *(WTF **)a3;
  *(_QWORD *)a3 = 0;
  v22 = v12;
  v13 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v23 = v13;
  v14 = *(WTF **)a4;
  *(_QWORD *)a4 = 0;
  v24 = v14;
  v15 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  v25 = v15;
  WebCore::IIRFilterNode::create(a2, a1, (uint64_t)&v19, a5);
  v17 = v24;
  if (v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v17, v16);
  }
  result = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    return (WTF *)WTF::fastFree(result, v16);
  }
  return result;
}

void WebCore::BaseAudioContext::handlePreRenderTasks(WebCore::BaseAudioContext *this, _OWORD *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int ***v16;
  uint64_t v17;
  int v18;
  WTF *v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int ***v27;
  unsigned int ***v28;
  uint64_t v29;
  unsigned int ***v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int ***v34;
  int v35;
  unsigned __int8 *v36;
  int v37;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(0);
  if (v4 != *((_QWORD *)this + 35))
  {
    v5 = (unsigned __int8 *)this + 292;
    while (1)
    {
      v6 = *v5;
      if ((v6 & 1) != 0)
        return;
      v7 = __ldaxr(v5);
      if (v7 == v6)
      {
        if (!__stxr(v6 | 1, v5))
        {
          *((_QWORD *)this + 35) = v4;
          v8 = 1;
          goto LABEL_11;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v8 = *((_DWORD *)this + 72) + 1;
LABEL_11:
  *((_DWORD *)this + 72) = v8;
  v9 = *((_QWORD *)this + 24);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    v11 = (_QWORD *)(v9 + 8 * v10);
    if (*(_DWORD *)(v9 - 12))
    {
      v12 = (_QWORD *)*((_QWORD *)this + 24);
      if ((_DWORD)v10)
      {
        v13 = 8 * v10;
        v12 = (_QWORD *)*((_QWORD *)this + 24);
        while ((unint64_t)(*v12 + 1) <= 1)
        {
          ++v12;
          v13 -= 8;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v12 = (_QWORD *)(v9 + 8 * v10);
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = (_QWORD *)(v9 + 8 * v10);
  if (v9)
  {
LABEL_18:
    v14 = (_QWORD *)(v9 + 8 * *(unsigned int *)(v9 - 4));
    goto LABEL_23;
  }
  v14 = 0;
LABEL_23:
  if (v14 != v12)
  {
    do
    {
      v15 = *v12;
      if (*(_BYTE *)(*v12 + 32) && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v15 + 16))(*v12))
      {
        v16 = *(unsigned int ****)(v15 + 48);
        v18 = *(_DWORD *)(v15 + 56);
        v17 = *(unsigned int *)(v15 + 60);
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        v19 = *(WTF **)(v15 + 16);
        if (v19)
        {
          *(_QWORD *)(v15 + 16) = 0;
          *(_DWORD *)(v15 + 24) = 0;
          WTF::fastFree(v19, a2);
        }
        *(_QWORD *)(v15 + 16) = v16;
        *(_DWORD *)(v15 + 24) = v18;
        *(_DWORD *)(v15 + 28) = v17;
        if ((_DWORD)v17)
        {
          v20 = 8 * v17;
          do
          {
            v21 = *v16;
            WebCore::AudioNodeOutput::updateNumberOfChannels(*v16, a2);
            v22 = v21[5];
            if (v22)
              LODWORD(v22) = *(v22 - 3);
            *((_DWORD *)v21 + 13) = (_DWORD)v22;
            v23 = v21[8];
            if (v23)
              LODWORD(v23) = *(v23 - 3);
            *((_DWORD *)v21 + 14) = (_DWORD)v23;
            ++v16;
            v20 -= 8;
          }
          while (v20);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
        *(_BYTE *)(v15 + 32) = 0;
      }
      v24 = v12 + 1;
      v12 = v11;
      if (v24 != v11)
      {
        v12 = v24;
        while ((unint64_t)(*v12 + 1) <= 1)
        {
          if (++v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
    }
    while (v12 != v14);
    v9 = *((_QWORD *)this + 24);
  }
  if (v9)
  {
    *((_QWORD *)this + 24) = 0;
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v25 = *((_QWORD *)this + 25);
  if (v25)
  {
    v26 = *(unsigned int *)(v25 - 4);
    v27 = (unsigned int ***)(v25 + 8 * v26);
    if (*(_DWORD *)(v25 - 12))
    {
      v28 = (unsigned int ***)*((_QWORD *)this + 25);
      if ((_DWORD)v26)
      {
        v29 = 8 * v26;
        v28 = (unsigned int ***)*((_QWORD *)this + 25);
        while ((unint64_t)*v28 + 1 <= 1)
        {
          ++v28;
          v29 -= 8;
          if (!v29)
          {
            v28 = v27;
            goto LABEL_52;
          }
        }
      }
      goto LABEL_52;
    }
    v28 = (unsigned int ***)(v25 + 8 * v26);
  }
  else
  {
    v28 = 0;
    v26 = 0;
  }
  v27 = (unsigned int ***)(v25 + 8 * v26);
  if (v25)
  {
LABEL_52:
    v30 = (unsigned int ***)(v25 + 8 * *(unsigned int *)(v25 - 4));
    goto LABEL_57;
  }
  v30 = 0;
LABEL_57:
  if (v30 != v28)
  {
    do
    {
      v31 = *v28;
      WebCore::AudioNodeOutput::updateNumberOfChannels(*v28, a2);
      v32 = v31[5];
      if (v32)
        LODWORD(v32) = *(v32 - 3);
      *((_DWORD *)v31 + 13) = (_DWORD)v32;
      v33 = v31[8];
      if (v33)
        LODWORD(v33) = *(v33 - 3);
      *((_DWORD *)v31 + 14) = (_DWORD)v33;
      v34 = v28 + 1;
      v28 = v27;
      if (v34 != v27)
      {
        v28 = v34;
        while ((unint64_t)*v28 + 1 <= 1)
        {
          if (++v28 == v27)
          {
            v28 = v27;
            break;
          }
        }
      }
    }
    while (v28 != v30);
    v25 = *((_QWORD *)this + 25);
  }
  if (v25)
  {
    *((_QWORD *)this + 25) = 0;
    WTF::fastFree((WTF *)(v25 - 16), a2);
  }
  WebCore::BaseAudioContext::updateAutomaticPullNodes((uint64_t)this);
  *((_OWORD *)this + 19) = *a2;
  WebCore::AudioListener::updateDirtyState(*((WebCore::AudioListener **)this + 33));
  v35 = *((_DWORD *)this + 72) - 1;
  *((_DWORD *)this + 72) = v35;
  if (!v35)
  {
    *((_QWORD *)this + 35) = 0;
    v36 = (unsigned __int8 *)this + 292;
    v37 = __ldxr((unsigned __int8 *)this + 292);
    if (v37 == 1)
    {
      if (!__stlxr(0, v36))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v36);
  }
}

uint64_t WebCore::BaseAudioContext::updateAutomaticPullNodes(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(this + 382))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 208);
    if (v2)
    {
      v3 = *(unsigned int *)(v2 - 12);
      v4 = *(unsigned int *)(this + 228);
      if (v4 < v3)
      {
        v5 = *(unsigned int *)(this + 224);
        if (v5 < v3)
        {
          v6 = v5 + (v5 >> 2);
          if (v6 >= 0x10)
            v7 = v6 + 1;
          else
            v7 = 16;
          if (v7 <= v3)
            v8 = v3;
          else
            v8 = v7;
          if (v8 >> 29)
            goto LABEL_37;
          v9 = *(void **)(this + 216);
          v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
          *(_DWORD *)(v1 + 224) = v8;
          *(_QWORD *)(v1 + 216) = v10;
          this = (uint64_t)memcpy(v10, v9, 8 * v4);
          if (v9)
          {
            if (*(void **)(v1 + 216) == v9)
            {
              *(_QWORD *)(v1 + 216) = 0;
              *(_DWORD *)(v1 + 224) = 0;
            }
            this = WTF::fastFree((WTF *)v9, v11);
          }
        }
      }
      v12 = *(uint64_t **)(v1 + 208);
      *(_DWORD *)(v1 + 228) = v3;
      if (v12 && *((_DWORD *)v12 - 3))
      {
        v13 = *((unsigned int *)v12 - 1);
        if ((_DWORD)v13)
        {
          v14 = 8 * v13;
          v15 = v12;
          while ((unint64_t)(*v15 + 1) <= 1)
          {
            ++v15;
            v14 -= 8;
            if (!v14)
              goto LABEL_24;
          }
        }
        else
        {
          v15 = v12;
        }
        v16 = &v12[v13];
        if (v16 != v15)
        {
          v17 = 0;
          while (v17 != v3)
          {
            v18 = *v15++;
            *(_QWORD *)(*(_QWORD *)(v1 + 216) + 8 * v17) = v18;
            if (v15 != v16)
            {
              ++v17;
              while ((unint64_t)(*v15 + 1) <= 1)
              {
                if (++v15 == v16)
                  goto LABEL_24;
              }
              if (v15 != v16)
                continue;
            }
            goto LABEL_24;
          }
LABEL_37:
          __break(0xC471u);
          JUMPOUT(0x195549E9CLL);
        }
      }
    }
    else
    {
      *(_DWORD *)(this + 228) = 0;
    }
LABEL_24:
    *(_BYTE *)(v1 + 382) = 0;
  }
  return this;
}

unsigned __int8 *WebCore::BaseAudioContext::handlePostRenderTasks(WebCore::BaseAudioContext *this, void *a2)
{
  unint64_t StatusReg;
  unsigned __int8 *result;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  WebCore::AudioNode **v10;
  uint64_t v11;
  WebCore::AudioNode *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int ***v31;
  uint64_t v32;
  int v33;
  WTF *v34;
  uint64_t v35;
  unsigned int **v36;
  unsigned int *v37;
  unsigned int *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int ***v42;
  unsigned int ***v43;
  uint64_t v44;
  unsigned int ***v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int ***v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  _QWORD *v63;
  unsigned __int8 *v64;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(unsigned __int8 **)(StatusReg + 736);
  if (!result)
    result = (unsigned __int8 *)WTF::Thread::initializeCurrentTLS(0);
  if (result != *((unsigned __int8 **)this + 35))
  {
    v5 = (unsigned __int8 *)this + 292;
    while (1)
    {
      v6 = *v5;
      if ((v6 & 1) != 0)
        return result;
      v7 = __ldaxr(v5);
      if (v7 == v6)
      {
        if (!__stxr(v6 | 1, v5))
        {
          *((_QWORD *)this + 35) = result;
          v8 = 1;
          goto LABEL_11;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v8 = *((_DWORD *)this + 72) + 1;
LABEL_11:
  *((_DWORD *)this + 72) = v8;
  v9 = *((unsigned int *)this + 61);
  if ((_DWORD)v9)
  {
    v10 = (WebCore::AudioNode **)*((_QWORD *)this + 29);
    v11 = 8 * v9;
    do
    {
      v12 = *v10++;
      WebCore::AudioNode::decrementConnectionCountWithLock(v12);
      v11 -= 8;
    }
    while (v11);
  }
  if (*((_DWORD *)this + 60))
  {
    if (*((_DWORD *)this + 61))
      *((_DWORD *)this + 61) = 0;
    v13 = (WTF *)*((_QWORD *)this + 29);
    if (v13)
    {
      *((_QWORD *)this + 29) = 0;
      *((_DWORD *)this + 60) = 0;
      WTF::fastFree(v13, a2);
    }
  }
  WebCore::BaseAudioContext::derefFinishedSourceNodes(this);
  if (*((_BYTE *)this + 380))
  {
    v15 = *((_QWORD *)this + 35);
    v16 = *(_QWORD *)(StatusReg + 736);
    if (!v16)
      v16 = WTF::Thread::initializeCurrentTLS(0);
    if (v15 == v16)
    {
      v23 = *((_DWORD *)this + 35);
      if (v23)
      {
        if (!*((_BYTE *)this + 377))
        {
          v24 = *((_QWORD *)this + 16);
          v25 = *((_DWORD *)this + 34);
          *((_QWORD *)this + 16) = 0;
          *((_QWORD *)this + 17) = 0;
          v26 = (WTF *)*((_QWORD *)this + 22);
          if (v26)
          {
            *((_QWORD *)this + 22) = 0;
            *((_DWORD *)this + 46) = 0;
            WTF::fastFree(v26, v14);
          }
          *((_QWORD *)this + 22) = v24;
          *((_DWORD *)this + 46) = v25;
          *((_DWORD *)this + 47) = v23;
          *((_BYTE *)this + 377) = 1;
          v27 = (unsigned int *)((char *)this + 24);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
          v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v29 = &off_1E336A258;
          v29[1] = this;
          v63 = v29;
          WTF::callOnMainThread();
          if (v63)
            (*(void (**)(_QWORD *))(*v63 + 8))(v63);
        }
      }
    }
  }
  v17 = *((_QWORD *)this + 24);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    v19 = (_QWORD *)(v17 + 8 * v18);
    if (*(_DWORD *)(v17 - 12))
    {
      v20 = (_QWORD *)*((_QWORD *)this + 24);
      if ((_DWORD)v18)
      {
        v21 = 8 * v18;
        v20 = (_QWORD *)*((_QWORD *)this + 24);
        while ((unint64_t)(*v20 + 1) <= 1)
        {
          ++v20;
          v21 -= 8;
          if (!v21)
          {
            v20 = v19;
            goto LABEL_30;
          }
        }
      }
      goto LABEL_30;
    }
    v20 = (_QWORD *)(v17 + 8 * v18);
  }
  else
  {
    v20 = 0;
    v18 = 0;
  }
  v19 = (_QWORD *)(v17 + 8 * v18);
  if (v17)
  {
LABEL_30:
    v22 = (_QWORD *)(v17 + 8 * *(unsigned int *)(v17 - 4));
    goto LABEL_43;
  }
  v22 = 0;
LABEL_43:
  if (v22 != v20)
  {
    do
    {
      v30 = *v20;
      if (*(_BYTE *)(*v20 + 32) && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v30 + 16))(*v20))
      {
        v31 = *(unsigned int ****)(v30 + 48);
        v33 = *(_DWORD *)(v30 + 56);
        v32 = *(unsigned int *)(v30 + 60);
        *(_QWORD *)(v30 + 48) = 0;
        *(_QWORD *)(v30 + 56) = 0;
        v34 = *(WTF **)(v30 + 16);
        if (v34)
        {
          *(_QWORD *)(v30 + 16) = 0;
          *(_DWORD *)(v30 + 24) = 0;
          WTF::fastFree(v34, v14);
        }
        *(_QWORD *)(v30 + 16) = v31;
        *(_DWORD *)(v30 + 24) = v33;
        *(_DWORD *)(v30 + 28) = v32;
        if ((_DWORD)v32)
        {
          v35 = 8 * v32;
          do
          {
            v36 = *v31;
            WebCore::AudioNodeOutput::updateNumberOfChannels(*v31, v14);
            v37 = v36[5];
            if (v37)
              LODWORD(v37) = *(v37 - 3);
            *((_DWORD *)v36 + 13) = (_DWORD)v37;
            v38 = v36[8];
            if (v38)
              LODWORD(v38) = *(v38 - 3);
            *((_DWORD *)v36 + 14) = (_DWORD)v38;
            ++v31;
            v35 -= 8;
          }
          while (v35);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
        *(_BYTE *)(v30 + 32) = 0;
      }
      v39 = v20 + 1;
      v20 = v19;
      if (v39 != v19)
      {
        v20 = v39;
        while ((unint64_t)(*v20 + 1) <= 1)
        {
          if (++v20 == v19)
          {
            v20 = v19;
            break;
          }
        }
      }
    }
    while (v20 != v22);
    v17 = *((_QWORD *)this + 24);
  }
  if (v17)
  {
    *((_QWORD *)this + 24) = 0;
    WTF::fastFree((WTF *)(v17 - 16), v14);
  }
  v40 = *((_QWORD *)this + 25);
  if (v40)
  {
    v41 = *(unsigned int *)(v40 - 4);
    v42 = (unsigned int ***)(v40 + 8 * v41);
    if (*(_DWORD *)(v40 - 12))
    {
      v43 = (unsigned int ***)*((_QWORD *)this + 25);
      if ((_DWORD)v41)
      {
        v44 = 8 * v41;
        v43 = (unsigned int ***)*((_QWORD *)this + 25);
        while ((unint64_t)*v43 + 1 <= 1)
        {
          ++v43;
          v44 -= 8;
          if (!v44)
          {
            v43 = v42;
            goto LABEL_72;
          }
        }
      }
      goto LABEL_72;
    }
    v43 = (unsigned int ***)(v40 + 8 * v41);
  }
  else
  {
    v43 = 0;
    v41 = 0;
  }
  v42 = (unsigned int ***)(v40 + 8 * v41);
  if (v40)
  {
LABEL_72:
    v45 = (unsigned int ***)(v40 + 8 * *(unsigned int *)(v40 - 4));
    goto LABEL_77;
  }
  v45 = 0;
LABEL_77:
  if (v45 != v43)
  {
    do
    {
      v46 = *v43;
      WebCore::AudioNodeOutput::updateNumberOfChannels(*v43, v14);
      v47 = v46[5];
      if (v47)
        LODWORD(v47) = *(v47 - 3);
      *((_DWORD *)v46 + 13) = (_DWORD)v47;
      v48 = v46[8];
      if (v48)
        LODWORD(v48) = *(v48 - 3);
      *((_DWORD *)v46 + 14) = (_DWORD)v48;
      v49 = v43 + 1;
      v43 = v42;
      if (v49 != v42)
      {
        v43 = v49;
        while ((unint64_t)*v43 + 1 <= 1)
        {
          if (++v43 == v42)
          {
            v43 = v42;
            break;
          }
        }
      }
    }
    while (v43 != v45);
    v40 = *((_QWORD *)this + 25);
  }
  if (v40)
  {
    *((_QWORD *)this + 25) = 0;
    WTF::fastFree((WTF *)(v40 - 16), v14);
  }
  result = (unsigned __int8 *)WebCore::BaseAudioContext::updateAutomaticPullNodes((uint64_t)this);
  v50 = *((unsigned int *)this + 39);
  if ((_DWORD)v50)
  {
    while (1)
    {
      v51 = v50 - 1;
      if (v50 - 1 >= (unint64_t)*((unsigned int *)this + 39))
        break;
      v52 = (char *)(*((_QWORD *)this + 18) + 8 * v51);
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v52 + 192))(*(_QWORD *)v52);
      if ((_DWORD)result)
      {
        v53 = *((unsigned int *)this + 43);
        if ((_DWORD)v53 == *((_DWORD *)this + 42))
        {
          v52 = WTF::Vector<WebCore::BaseAudioContext::TailProcessingNode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 160, v53 + 1, (unint64_t)v52);
          v53 = *((unsigned int *)this + 43);
        }
        *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v53) = *(_QWORD *)v52;
        *(_QWORD *)v52 = 0;
        *((_DWORD *)this + 43) = v53 + 1;
        v54 = *((_QWORD *)this + 18);
        result = *(unsigned __int8 **)(v54 + 8 * v51);
        if (result)
        {
          result[115] = 0;
          *(_QWORD *)(v54 + 8 * v51) = 0;
          result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 112))(result);
        }
        else
        {
          *(_QWORD *)(v54 + 8 * v51) = 0;
        }
        v55 = (_QWORD *)(v54 + 8 * v50);
        v56 = *((unsigned int *)this + 39);
        v57 = *((_QWORD *)this + 18) + 8 * v56;
        while (v55 != (_QWORD *)v57)
        {
          *(v55 - 1) = *v55;
          *v55++ = 0;
        }
        *((_DWORD *)this + 39) = v56 - 1;
      }
      --v50;
      if (!v51)
        goto LABEL_104;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_104:
    if (*((_DWORD *)this + 43) && !*((_BYTE *)this + 378))
    {
      *((_BYTE *)this + 378) = 1;
      v58 = (unsigned int *)((char *)this + 24);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
      v60 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v60 = &off_1E336A230;
      *((_QWORD *)v60 + 1) = this;
      *((_QWORD *)v60 + 2) = this;
      v64 = v60;
      WTF::callOnMainThread();
      result = v64;
      if (v64)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v64 + 8))(v64);
    }
    v61 = *((_DWORD *)this + 72) - 1;
    *((_DWORD *)this + 72) = v61;
    if (!v61)
    {
      *((_QWORD *)this + 35) = 0;
      result = (unsigned __int8 *)this + 292;
      v62 = __ldxr((unsigned __int8 *)this + 292);
      if (v62 == 1)
      {
        if (!__stlxr(0, result))
          return result;
      }
      else
      {
        __clrex();
      }
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
    }
  }
  return result;
}

uint64_t WebCore::BaseAudioContext::addTailProcessingNode(uint64_t this, WebCore::AudioNode *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  _QWORD *v13;

  if (!*((_BYTE *)a2 + 115))
  {
    v3 = this;
    v4 = *(unsigned int *)(this + 156);
    if ((_DWORD)v4 == *(_DWORD *)(this + 152))
    {
      v5 = v4 + (v4 >> 2);
      if (v5 >= 0x10)
        v6 = v5 + 1;
      else
        v6 = 16;
      if (v6 <= v4 + 1)
        v7 = v4 + 1;
      else
        v7 = v6;
      if (v7 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v8 = *(WTF **)(this + 144);
      v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
      *(_DWORD *)(v3 + 152) = v7;
      *(_QWORD *)(v3 + 144) = v9;
      if ((_DWORD)v4)
      {
        v11 = 8 * v4;
        v12 = v8;
        do
        {
          *(_QWORD *)v9 = *(_QWORD *)v12;
          v9 = (WTF *)((char *)v9 + 8);
          *(_QWORD *)v12 = 0;
          v12 = (WTF *)((char *)v12 + 8);
          v11 -= 8;
        }
        while (v11);
        v9 = *(WTF **)(v3 + 144);
      }
      if (v8)
      {
        if (v9 == v8)
        {
          *(_QWORD *)(v3 + 144) = 0;
          *(_DWORD *)(v3 + 152) = 0;
        }
        WTF::fastFree(v8, v10);
        v9 = *(WTF **)(v3 + 144);
      }
      v13 = (_QWORD *)((char *)v9 + 8 * *(unsigned int *)(v3 + 156));
    }
    else
    {
      v13 = (_QWORD *)(*(_QWORD *)(this + 144) + 8 * v4);
    }
    this = (*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)a2 + 104))(a2);
    *v13 = a2;
    *((_BYTE *)a2 + 115) = 1;
    ++*(_DWORD *)(v3 + 156);
  }
  return this;
}

uint64_t WebCore::BaseAudioContext::removeTailProcessingNode(uint64_t this, WebCore::AudioNode *a2)
{
  uint64_t v3;
  unint64_t v4;
  WebCore::AudioNode **v5;
  unint64_t v6;
  WebCore::AudioNode *v7;
  BOOL v8;
  WebCore::AudioNode **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::AudioNode **v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  WebCore::AudioNode **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = this;
  v4 = *(unsigned int *)(this + 156);
  if (!(_DWORD)v4)
  {
LABEL_12:
    v13 = *(unsigned int *)(v3 + 172);
    if ((_DWORD)v13)
    {
      v14 = *(WebCore::AudioNode ***)(v3 + 160);
      if (*v14 == a2)
      {
        v15 = 0;
LABEL_19:
        v18 = &v14[v15];
        *((_BYTE *)a2 + 115) = 0;
        *v18 = 0;
        v19 = v18 + 1;
        this = (*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)a2 + 112))(a2);
        v20 = *(unsigned int *)(v3 + 172);
        v21 = *(_QWORD *)(v3 + 160) + 8 * v20;
        while (v19 != (_QWORD *)v21)
        {
          *(v19 - 1) = *v19;
          *v19++ = 0;
        }
        *(_DWORD *)(v3 + 172) = v20 - 1;
      }
      else
      {
        v15 = 0;
        v16 = v13 - 1;
        while (v16 != v15)
        {
          v17 = v14[++v15];
          if (v17 == a2)
            goto LABEL_19;
        }
      }
    }
    return this;
  }
  v5 = *(WebCore::AudioNode ***)(this + 144);
  if (*v5 != a2)
  {
    v6 = 0;
    while (v4 - 1 != v6)
    {
      v7 = v5[++v6];
      if (v7 == a2)
      {
        v8 = v6 < v4;
        goto LABEL_8;
      }
    }
    goto LABEL_12;
  }
  v6 = 0;
  v8 = 1;
LABEL_8:
  v9 = &v5[v6];
  *((_BYTE *)a2 + 115) = 0;
  *v9 = 0;
  v10 = v9 + 1;
  this = (*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)a2 + 112))(a2);
  v11 = *(unsigned int *)(v3 + 156);
  v12 = *(_QWORD *)(v3 + 144) + 8 * v11;
  while (v10 != (_QWORD *)v12)
  {
    *(v10 - 1) = *v10;
    *v10++ = 0;
  }
  *(_DWORD *)(v3 + 156) = v11 - 1;
  if (!v8)
    goto LABEL_12;
  return this;
}

uint64_t *WebCore::BaseAudioContext::markForDeletion(WebCore::BaseAudioContext *this, WebCore::AudioNode *a2)
{
  char **v4;
  uint64_t v5;
  char *v6;
  char **v7;
  uint64_t v8;
  char *v9;
  WebCore::AudioNode *v11;

  if (*((_BYTE *)this + 381))
  {
    v4 = (char **)((char *)this + 176);
    v11 = a2;
    v5 = *((unsigned int *)this + 47);
    if ((_DWORD)v5 == *((_DWORD *)this + 46))
    {
      v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v5 + 1, (unint64_t)&v11);
      v5 = *((unsigned int *)this + 47);
      *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v5) = *(_QWORD *)v6;
    }
    else
    {
      *(_QWORD *)&(*v4)[8 * v5] = a2;
    }
    *((_DWORD *)this + 47) = v5 + 1;
  }
  else
  {
    v7 = (char **)((char *)this + 128);
    v11 = a2;
    v8 = *((unsigned int *)this + 35);
    if ((_DWORD)v8 == *((_DWORD *)this + 34))
    {
      v9 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v11);
      v8 = *((unsigned int *)this + 35);
      *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v8) = *(_QWORD *)v9;
    }
    else
    {
      *(_QWORD *)&(*v7)[8 * v8] = a2;
    }
    *((_DWORD *)this + 35) = v8 + 1;
  }
  return WebCore::BaseAudioContext::removeAutomaticPullNode(this, a2);
}

uint64_t *WebCore::BaseAudioContext::removeAutomaticPullNode(WebCore::BaseAudioContext *this, WebCore::AudioNode *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::AudioNode *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v5 = *((_QWORD *)this + 26);
  result = (uint64_t *)((char *)this + 208);
  v4 = v5;
  if (v5)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::AudioNode **)(v4 + 8 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::AudioNode **)(v4 + 8 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      *(_QWORD *)(v4 + 8 * v10) = -1;
      ++*(_DWORD *)(*result - 16);
      v13 = *result;
      if (*result)
        v14 = *(_DWORD *)(v13 - 12) - 1;
      else
        v14 = -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *result;
      if (*result)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(result, v17 >> 1, 0);
      }
      *((_BYTE *)this + 382) = 1;
    }
  }
  return result;
}

uint64_t *WebCore::BaseAudioContext::removeMarkedSummingJunction(WebCore::BaseAudioContext *this, WebCore::AudioSummingJunction *a2)
{
  uint64_t v4;
  int v6;
  uint64_t *result;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WebCore::AudioSummingJunction *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v22;
  int v23;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(this);
  if (v4 == *((_QWORD *)this + 35))
  {
    v6 = *((_DWORD *)this + 72) + 1;
    goto LABEL_10;
  }
  if (__ldaxr((unsigned __int8 *)this + 292))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C]();
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)this + 292))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 35) = v4;
  v6 = 1;
LABEL_10:
  *((_DWORD *)this + 72) = v6;
  result = (uint64_t *)((char *)this + 192);
  v8 = *((_QWORD *)this + 24);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(WebCore::AudioSummingJunction **)(v8 + 8 * v13);
    if (v14 != a2)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(WebCore::AudioSummingJunction **)(v8 + 8 * v13);
        ++v15;
        if (v14 == a2)
          goto LABEL_17;
      }
      v13 = *(unsigned int *)(v8 - 4);
    }
LABEL_17:
    if (v13 != *(_DWORD *)(v8 - 4))
    {
      *(_QWORD *)(v8 + 8 * v13) = -1;
      ++*(_DWORD *)(*result - 16);
      v16 = *result;
      v17 = *result ? *(_DWORD *)(v16 - 12) - 1 : -1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *result;
      if (*result)
      {
        v19 = 6 * *(_DWORD *)(v18 - 12);
        v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9)
          result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(result, v20 >> 1, 0);
      }
    }
  }
  v22 = *((_DWORD *)this + 72) - 1;
  *((_DWORD *)this + 72) = v22;
  if (!v22)
  {
    *((_QWORD *)this + 35) = 0;
    result = (uint64_t *)((char *)this + 292);
    v23 = __ldxr((unsigned __int8 *)this + 292);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WebCore::BaseAudioContext::eventTargetInterface(WebCore::BaseAudioContext *this)
{
  return 34;
}

uint64_t `non-virtual thunk to'WebCore::BaseAudioContext::eventTargetInterface(WebCore::BaseAudioContext *this)
{
  return 34;
}

uint64_t `non-virtual thunk to'WebCore::BaseAudioContext::scriptExecutionContext(WebCore::BaseAudioContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::BaseAudioContext::postTask(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;

  if (!*(_BYTE *)(result + 379))
  {
    v3 = result;
    v4 = WTF::fastMalloc((WTF *)0x10);
    v5 = v4;
    *(_DWORD *)v4 = 1;
    v6 = (unsigned int *)(v3 + 24);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *(_QWORD *)(v4 + 8) = v3;
    ++*(_QWORD *)(v3 + 16);
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 + 1, v6));
    v9 = *a2;
    *a2 = 0;
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = &off_1E336A208;
    *(_QWORD *)(result + 8) = v3;
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v9;
    v14 = result;
    v10 = *(_QWORD *)(v3 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v12, 9, &v14);
        result = v14;
        v14 = 0;
        if (!result)
          return result;
      }
      else
      {
        v14 = 0;
      }
      v13 = *(uint64_t (***)())result;
    }
    else
    {
      v14 = 0;
      v13 = &off_1E336A208;
    }
    return v13[1]();
  }
  return result;
}

uint64_t WebCore::BaseAudioContext::origin(WebCore::BaseAudioContext *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v4 == 1 || v4 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v3 - 96), a2);
  v7 = v6;
  v8 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v8 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v8 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v5);
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
  return v7;
}

uint64_t WebCore::BaseAudioContext::periodicWave(_QWORD *a1, int a2)
{
  _QWORD *v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF ***v14;
  uint64_t v15;
  WTF **v16;
  void *v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  WTF ***v25;
  uint64_t v26;
  WTF **v27;
  void *v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  WTF ***v36;
  uint64_t v37;
  WTF **v38;
  void *v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v47;
  WTF ***v48;
  uint64_t v49;
  WTF **v50;
  void *v51;
  WTF *v52;

  switch(a2)
  {
    case 0:
      v3 = a1 + 43;
      if (a1[43])
        return *v3;
      v4 = *(float *)((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) + 160);
      v5 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v5 = 1;
      *(float *)(v5 + 4) = v4;
      v6 = 4096.0;
      if (v4 > 88200.0)
        v6 = 16384.0;
      v7 = 8192.0;
      if (v4 <= 88200.0)
        v7 = 2048.0;
      v8 = v4 <= 24000.0 ? 2048.0 : v6;
      v9 = v4 <= 24000.0 ? 1024.0 : v7;
      *(_DWORD *)(v5 + 8) = ((float)(log2f(v8) * 3.0) + 0.5);
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(float *)(v5 + 12) = (float)(v4 * 0.5) / v9;
      *(float *)(v5 + 16) = v8 / v4;
      WebCore::PeriodicWave::generateBasicWaveform(v5, 0);
      v11 = a1[43];
      a1[43] = v5;
      if (!v11)
        return *v3;
      v12 = *(_DWORD *)v11 - 1;
      if (*(_DWORD *)v11 != 1)
        goto LABEL_72;
      v13 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v13)
      {
        v14 = *(WTF ****)(v11 + 24);
        v15 = 8 * v13;
        do
        {
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            WTF::fastAlignedFree(*v16, v10);
            WTF::fastFree((WTF *)v16, v17);
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
      goto LABEL_79;
    case 1:
      v3 = a1 + 44;
      if (a1[44])
        return *v3;
      v40 = *(float *)((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) + 160);
      v41 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v41 = 1;
      *(float *)(v41 + 4) = v40;
      v42 = 4096.0;
      if (v40 > 88200.0)
        v42 = 16384.0;
      v43 = 8192.0;
      if (v40 <= 88200.0)
        v43 = 2048.0;
      v44 = v40 <= 24000.0 ? 2048.0 : v42;
      v45 = v40 <= 24000.0 ? 1024.0 : v43;
      *(_DWORD *)(v41 + 8) = ((float)(log2f(v44) * 3.0) + 0.5);
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0;
      *(float *)(v41 + 12) = (float)(v40 * 0.5) / v45;
      *(float *)(v41 + 16) = v44 / v40;
      WebCore::PeriodicWave::generateBasicWaveform(v41, (void *)1);
      v11 = a1[44];
      a1[44] = v41;
      if (!v11)
        return *v3;
      v12 = *(_DWORD *)v11 - 1;
      if (*(_DWORD *)v11 != 1)
        goto LABEL_72;
      v47 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v47)
      {
        v48 = *(WTF ****)(v11 + 24);
        v49 = 8 * v47;
        do
        {
          v50 = *v48;
          *v48 = 0;
          if (v50)
          {
            WTF::fastAlignedFree(*v50, v10);
            WTF::fastFree((WTF *)v50, v51);
          }
          ++v48;
          v49 -= 8;
        }
        while (v49);
      }
      goto LABEL_79;
    case 2:
      v3 = a1 + 45;
      if (a1[45])
        return *v3;
      v18 = *(float *)((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) + 160);
      v19 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v19 = 1;
      *(float *)(v19 + 4) = v18;
      v20 = 4096.0;
      if (v18 > 88200.0)
        v20 = 16384.0;
      v21 = 8192.0;
      if (v18 <= 88200.0)
        v21 = 2048.0;
      v22 = v18 <= 24000.0 ? 2048.0 : v20;
      v23 = v18 <= 24000.0 ? 1024.0 : v21;
      *(_DWORD *)(v19 + 8) = ((float)(log2f(v22) * 3.0) + 0.5);
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0;
      *(float *)(v19 + 12) = (float)(v18 * 0.5) / v23;
      *(float *)(v19 + 16) = v22 / v18;
      WebCore::PeriodicWave::generateBasicWaveform(v19, (void *)2);
      v11 = a1[45];
      a1[45] = v19;
      if (!v11)
        return *v3;
      v12 = *(_DWORD *)v11 - 1;
      if (*(_DWORD *)v11 != 1)
        goto LABEL_72;
      v24 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v24)
      {
        v25 = *(WTF ****)(v11 + 24);
        v26 = 8 * v24;
        do
        {
          v27 = *v25;
          *v25 = 0;
          if (v27)
          {
            WTF::fastAlignedFree(*v27, v10);
            WTF::fastFree((WTF *)v27, v28);
          }
          ++v25;
          v26 -= 8;
        }
        while (v26);
      }
      goto LABEL_79;
    case 3:
      v3 = a1 + 46;
      if (a1[46])
        return *v3;
      v29 = *(float *)((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) + 160);
      v30 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v30 = 1;
      *(float *)(v30 + 4) = v29;
      v31 = 4096.0;
      if (v29 > 88200.0)
        v31 = 16384.0;
      v32 = 8192.0;
      if (v29 <= 88200.0)
        v32 = 2048.0;
      v33 = v29 <= 24000.0 ? 2048.0 : v31;
      v34 = v29 <= 24000.0 ? 1024.0 : v32;
      *(_DWORD *)(v30 + 8) = ((float)(log2f(v33) * 3.0) + 0.5);
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0;
      *(float *)(v30 + 12) = (float)(v29 * 0.5) / v34;
      *(float *)(v30 + 16) = v33 / v29;
      WebCore::PeriodicWave::generateBasicWaveform(v30, (void *)3);
      v11 = a1[46];
      a1[46] = v30;
      if (!v11)
        return *v3;
      v12 = *(_DWORD *)v11 - 1;
      if (*(_DWORD *)v11 == 1)
      {
        v35 = *(unsigned int *)(v11 + 36);
        if ((_DWORD)v35)
        {
          v36 = *(WTF ****)(v11 + 24);
          v37 = 8 * v35;
          do
          {
            v38 = *v36;
            *v36 = 0;
            if (v38)
            {
              WTF::fastAlignedFree(*v38, v10);
              WTF::fastFree((WTF *)v38, v39);
            }
            ++v36;
            v37 -= 8;
          }
          while (v37);
        }
LABEL_79:
        v52 = *(WTF **)(v11 + 24);
        if (v52)
        {
          *(_QWORD *)(v11 + 24) = 0;
          *(_DWORD *)(v11 + 32) = 0;
          WTF::fastFree(v52, v10);
        }
        WTF::fastFree((WTF *)v11, v10);
      }
      else
      {
LABEL_72:
        *(_DWORD *)v11 = v12;
      }
      return *v3;
    case 4:
      __break(0xC471u);
      JUMPOUT(0x19554B19CLL);
    default:
      __break(0xC471u);
      JUMPOUT(0x19554B17CLL);
  }
}

uint64_t WTF::HashMap<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  WTF::StringImpl ***v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF *v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  WTF **v51;
  WTF *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t result;
  uint64_t *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  unsigned int v75;
  int v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl ***v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF *v84;
  uint64_t v85;
  unsigned int v86;
  WTF *v87;
  uint64_t v88;
  WTF *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  WTF **v96;
  uint64_t v98;
  WTF *v99;
  int v100;
  WTF::StringImpl *v102;
  WTF *v103;
  uint64_t v104;

  v4 = a1;
  v6 = *((unsigned int *)a1 + 2);
  v5 = *((unsigned int *)a1 + 3);
  if (10 * v5 >= (unint64_t)(9 * v6)
    || (v6 <= 2 * (int)v5 ? (v7 = *((_BYTE *)a1 + 20) == 0) : (v7 = 1), !v7))
  {
    if ((_DWORD)v6)
      v8 = 2 * v6;
    else
      v8 = 8;
    v9 = (WTF *)*a1;
    v10 = WTF::fastZeroedMalloc((WTF *)(24 * v8));
    *v4 = v10;
    *((_DWORD *)v4 + 2) = v8;
    v11 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    *((_DWORD *)v4 + 4) = (v13 >> 31) ^ v13;
    *((_BYTE *)v4 + 20) = 0;
    if ((_DWORD)v6)
    {
      v14 = 0;
      v98 = v6;
      v99 = v9;
      do
      {
        v15 = (WTF::StringImpl **)((char *)v9 + 24 * v14);
        v16 = *v15;
        if (*v15)
        {
          v17 = *((_DWORD *)v4 + 2);
          v18 = *((_DWORD *)v4 + 4);
          v19 = *((_DWORD *)v16 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v16);
          else
            v20 = v19 >> 8;
          v21 = v17 - 1;
          v22 = (v20 ^ v18) & (v17 - 1);
          v23 = *v4 + 24 * v22;
          v24 = *(WTF::StringImpl **)v23;
          if (*(_QWORD *)v23)
          {
            v25 = 0;
            do
            {
              v26 = *((_DWORD *)v24 + 4);
              if (v26 < 0x100)
                v27 = WTF::StringImpl::hashSlowCase(v24);
              else
                v27 = v26 >> 8;
              v28 = (v22 + v17 - ((v27 ^ v18) & v21)) & v21;
              if (v25 > v28)
              {
                std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v15, (WTF::StringImpl *)v23);
                v25 = v28;
              }
              v22 = (v22 + 1) & v21;
              ++v25;
              v4 = a1;
              v23 = *a1 + 24 * v22;
              v24 = *(WTF::StringImpl **)v23;
            }
            while (*(_QWORD *)v23);
          }
          v29 = *v15;
          *v15 = 0;
          v30 = *(WTF::StringImpl **)v23;
          *(_QWORD *)v23 = v29;
          v6 = v98;
          v9 = v99;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, a2);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = *(unsigned int *)(v23 + 20);
          if ((_DWORD)v31)
          {
            v32 = *(WTF::StringImpl ***)(v23 + 8);
            v33 = 24 * v31;
            do
            {
              v34 = *v32;
              *v32 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, a2);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v32 += 3;
              v33 -= 24;
            }
            while (v33);
          }
          v35 = *(WTF **)(v23 + 8);
          if (v35)
          {
            *(_QWORD *)(v23 + 8) = 0;
            *(_DWORD *)(v23 + 16) = 0;
            WTF::fastFree(v35, a2);
          }
          v36 = (char *)v99 + 24 * v14;
          v37 = *((_QWORD *)v36 + 1);
          *((_QWORD *)v36 + 1) = 0;
          *(_QWORD *)(v23 + 8) = v37;
          LODWORD(v37) = *((_DWORD *)v36 + 4);
          *((_DWORD *)v36 + 4) = 0;
          *(_DWORD *)(v23 + 16) = v37;
          LODWORD(v37) = *((_DWORD *)v36 + 5);
          *((_DWORD *)v36 + 5) = 0;
          *(_DWORD *)(v23 + 20) = v37;
        }
        v38 = (char *)v9 + 24 * v14;
        v39 = (WTF::StringImpl ***)(v38 + 8);
        v40 = *((unsigned int *)v38 + 5);
        if ((_DWORD)v40)
        {
          v41 = *v39;
          v42 = 24 * v40;
          do
          {
            v43 = *v41;
            *v41 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, a2);
              else
                *(_DWORD *)v43 -= 2;
            }
            v41 += 3;
            v42 -= 24;
          }
          while (v42);
        }
        v44 = (WTF *)*v39;
        if (*v39)
        {
          *v39 = 0;
          *((_DWORD *)v9 + 6 * v14 + 4) = 0;
          WTF::fastFree(v44, a2);
        }
        v45 = *v15;
        *v15 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, a2);
          else
            *(_DWORD *)v45 -= 2;
        }
        ++v14;
      }
      while (v14 != v6);
      goto LABEL_55;
    }
    if (v9)
    {
LABEL_55:
      WTF::fastFree(v9, a2);
      LODWORD(v6) = *((_DWORD *)v4 + 2);
      goto LABEL_56;
    }
    LODWORD(v6) = 8;
  }
LABEL_56:
  v46 = v6 - 1;
  v100 = *((_DWORD *)v4 + 4);
  v47 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v47 < 0x100)
    v48 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v48 = v47 >> 8;
  v49 = (v48 ^ v100) & v46;
  v50 = *v4;
  v51 = (WTF **)(*v4 + 24 * v49);
  v52 = *v51;
  if (*v51)
  {
    v53 = 0;
    while (1)
    {
      v54 = *((_DWORD *)v52 + 4);
      v55 = v54 < 0x100 ? WTF::StringImpl::hashSlowCase(v52) : v54 >> 8;
      v56 = (v49 + v6 - ((v55 ^ v100) & v46)) & v46;
      if (v53 > v56)
        break;
      if (v55 == v48)
      {
        result = WTF::equal(*v51, *(const WTF::StringImpl **)a2, a3);
        v50 = *v4;
        if ((result & 1) != 0)
        {
          v92 = 0;
          v93 = a4;
          goto LABEL_122;
        }
      }
      else
      {
        v50 = *v4;
      }
      v49 = ((_DWORD)v49 + 1) & v46;
      ++v53;
      v51 = (WTF **)(v50 + 24 * v49);
      v52 = *v51;
      if (!*v51)
      {
        v58 = (uint64_t *)a3;
        if (v53 >= 0x80)
          *((_BYTE *)v4 + 20) = 1;
        goto LABEL_73;
      }
    }
    if (v53 >= 0x80)
      *((_BYTE *)v4 + 20) = 1;
    v59 = *v51;
    v96 = v51;
    *v51 = 0;
    v60 = v50 + 24 * v49;
    v103 = 0;
    v104 = 0;
    v102 = v59;
    v62 = *(WTF **)(v60 + 8);
    v61 = v60 + 8;
    *(_QWORD *)v61 = 0;
    v103 = v62;
    LODWORD(v59) = *(_DWORD *)(v61 + 8);
    *(_DWORD *)(v61 + 8) = 0;
    LODWORD(v104) = (_DWORD)v59;
    LODWORD(v59) = *(_DWORD *)(v61 + 12);
    *(_DWORD *)(v61 + 12) = 0;
    HIDWORD(v104) = (_DWORD)v59;
    v63 = *(unsigned int *)(v61 + 12);
    if ((_DWORD)v63)
    {
      v64 = *(WTF::StringImpl ***)v61;
      v65 = 24 * v63;
      do
      {
        v66 = *v64;
        *v64 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, a2);
          else
            *(_DWORD *)v66 -= 2;
        }
        v64 += 3;
        v65 -= 24;
      }
      while (v65);
    }
    v67 = *(WTF **)v61;
    if (*(_QWORD *)v61)
    {
      *(_QWORD *)v61 = 0;
      *(_DWORD *)(v61 + 8) = 0;
      WTF::fastFree(v67, a2);
    }
    v51 = v96;
    v68 = *v96;
    *v96 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, a2);
      else
        *(_DWORD *)v68 -= 2;
    }
    *v96 = 0;
    v96[1] = 0;
    v96[2] = 0;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v96, *(WTF::StringImpl **)a2, (uint64_t *)a3);
    v70 = (v49 + 1) & v46;
    v71 = v56 + 1;
    while (1)
    {
      v72 = *v4;
      v73 = (WTF::StringImpl **)(*v4 + 24 * v70);
      v74 = *v73;
      if (!*v73)
        break;
      v75 = *((_DWORD *)v74 + 4);
      if (v75 < 0x100)
        v76 = WTF::StringImpl::hashSlowCase(*v73);
      else
        v76 = v75 >> 8;
      v86 = (v70 + v6 - ((v76 ^ v100) & v46)) & v46;
      if (v71 > v86)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v102, (WTF::StringImpl *)v73);
        v71 = v86;
      }
      v70 = (v70 + 1) & v46;
      ++v71;
      v4 = a1;
      if (!v74)
        goto LABEL_108;
    }
    v77 = v102;
    v102 = 0;
    *v73 = v77;
    v78 = v72 + 24 * v70;
    v79 = (WTF::StringImpl ***)(v78 + 8);
    v80 = *(unsigned int *)(v78 + 20);
    if ((_DWORD)v80)
    {
      v81 = *v79;
      v82 = 24 * v80;
      do
      {
        v83 = *v81;
        *v81 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
            WTF::StringImpl::destroy(v83, v69);
          else
            *(_DWORD *)v83 -= 2;
        }
        v81 += 3;
        v82 -= 24;
      }
      while (v82);
    }
    v84 = (WTF *)*v79;
    if (*v79)
    {
      *v79 = 0;
      *(_DWORD *)(v72 + 24 * v70 + 16) = 0;
      WTF::fastFree(v84, v69);
    }
    *v79 = (WTF::StringImpl **)v103;
    v85 = v104;
    v103 = 0;
    v104 = 0;
    *(_QWORD *)(v72 + 24 * v70 + 16) = v85;
    v51 = v96;
LABEL_108:
    v87 = v103;
    if (HIDWORD(v104))
    {
      v88 = 24 * HIDWORD(v104);
      v89 = v103;
      do
      {
        v90 = *(WTF::StringImpl **)v89;
        *(_QWORD *)v89 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v69);
          else
            *(_DWORD *)v90 -= 2;
        }
        v89 = (WTF *)((char *)v89 + 24);
        v88 -= 24;
      }
      while (v88);
    }
    if (v87)
      WTF::fastFree(v87, v69);
    result = (uint64_t)v102;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        result = WTF::StringImpl::destroy(v102, v69);
      else
        *(_DWORD *)v102 -= 2;
    }
  }
  else
  {
    v58 = (uint64_t *)a3;
LABEL_73:
    result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v51, *(WTF::StringImpl **)a2, v58);
  }
  v93 = a4;
  ++*((_DWORD *)v4 + 3);
  v50 = *v4;
  v92 = 1;
LABEL_122:
  v91 = v50 + 24 * *((unsigned int *)v4 + 2);
  *(_QWORD *)v93 = v51;
  *(_QWORD *)(v93 + 8) = v91;
  *(_BYTE *)(v93 + 16) = v92;
  return result;
}

unsigned __int8 *WebCore::BaseAudioContext::sourceNodeWillBeginPlayback(WebCore::BaseAudioContext *this, WebCore::AudioNode *a2)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  unsigned __int8 *result;
  uint64_t v9;
  int v10;
  int v11;
  WebCore::AudioNode *v12;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(this);
  if (v4 == *((_QWORD *)this + 35))
  {
    v6 = *((_DWORD *)this + 72) + 1;
    goto LABEL_10;
  }
  if (__ldaxr((unsigned __int8 *)this + 292))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C]();
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)this + 292))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 35) = v4;
  v6 = 1;
LABEL_10:
  *((_DWORD *)this + 72) = v6;
  v12 = a2;
  v7 = *((unsigned int *)this + 31);
  if ((_DWORD)v7 == *((_DWORD *)this + 30))
  {
    result = (unsigned __int8 *)WTF::Vector<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AudioNode*>((uint64_t)this + 112, &v12);
  }
  else
  {
    v9 = *((_QWORD *)this + 14);
    result = (unsigned __int8 *)WebCore::AudioNode::incrementConnectionCount(a2);
    *(_QWORD *)(v9 + 8 * v7) = a2;
    ++*((_DWORD *)this + 31);
  }
  v10 = *((_DWORD *)this + 72) - 1;
  *((_DWORD *)this + 72) = v10;
  if (!v10)
  {
    *((_QWORD *)this + 35) = 0;
    result = (unsigned __int8 *)this + 292;
    v11 = __ldxr((unsigned __int8 *)this + 292);
    if (v11 == 1)
    {
      if (!__stlxr(0, result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

char *`non-virtual thunk to'WebCore::BaseAudioContext::logChannel(WebCore::BaseAudioContext *this)
{
  return &WebCore::LogMedia;
}

void WebCore::BiquadDSPKernel::updateCoefficients(WebCore::BiquadDSPKernel *this, unint64_t a2, const float *a3, const float *a4, const float *a5, const float *a6)
{
  double v8;
  WebCore::Biquad *v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  uint64_t v17;
  double v18;
  float v19;
  double v20;
  double v21;
  double v22;
  double cosval;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __double2 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  BOOL v35;
  float v36;
  double v37;
  __double2 v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  double v50;
  __double2 v51;
  double v52;
  float v53;
  double v54;
  __double2 v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  unint64_t v64;

  v8 = *((float *)this + 4);
  v9 = (WebCore::BiquadDSPKernel *)((char *)this + 24);
  v10 = a2 > 1;
  v11 = a2 - 1;
  v12 = v10;
  *((_BYTE *)this + 168) = v12;
  if (a2)
  {
    v64 = v11;
    v17 = 0;
    v18 = v8 * 0.5;
    while (2)
    {
      v19 = a6[v17];
      v20 = a3[v17] / v18;
      if (v19 != 0.0)
        v20 = v20 * exp2f(v19 / 1200.0);
      switch(*(_DWORD *)(*((_QWORD *)this + 1) + 44))
      {
        case 0:
          if (v20 <= 1.0)
            v21 = v20;
          else
            v21 = 1.0;
          if (fmax(v21, 0.0) == 1.0)
            goto LABEL_42;
          if (v21 <= 0.0)
            goto LABEL_54;
          v22 = __exp10(a4[v17] * 0.05);
          v24 = __sincos_stret(v21 * 3.14159265);
          cosval = v24.__cosval;
          v25 = v24.__sinval / (v22 + v22);
          v26 = (1.0 - v24.__cosval) * 0.5;
          v27 = v26 + v26;
          goto LABEL_21;
        case 1:
          if (v20 <= 1.0)
            v28 = v20;
          else
            v28 = 1.0;
          if (fmax(v28, 0.0) == 1.0)
            goto LABEL_54;
          if (v28 <= 0.0)
            goto LABEL_42;
          v29 = __exp10(a4[v17] * 0.05);
          v30 = __sincos_stret(v28 * 3.14159265);
          cosval = v30.__cosval;
          v25 = v30.__sinval / (v29 + v29);
          v26 = (v30.__cosval + 1.0) * 0.5;
          v27 = v26 * -2.0;
LABEL_21:
          v31 = 1.0 / (v25 + 1.0);
          v32 = v26 * v31;
          *(double *)(*((_QWORD *)this + 3) + 8 * v17) = v32;
          *(double *)(*((_QWORD *)this + 5) + 8 * v17) = v27 * v31;
          *(double *)(*((_QWORD *)this + 7) + 8 * v17) = v32;
          *(double *)(*((_QWORD *)this + 9) + 8 * v17) = cosval * -2.0 * v31;
          v33 = (1.0 - v25) * v31;
          goto LABEL_61;
        case 2:
          if (v20 <= 0.0)
            v34 = 0.0;
          else
            v34 = v20;
          v35 = v20 > 0.0 && v34 < 1.0;
          if (!v35)
            goto LABEL_54;
          v36 = a4[v17];
          if (v36 > 0.0)
          {
            v37 = v36;
            v38 = __sincos_stret(v34 * 3.14159265);
            v39 = v38.__sinval / (v37 + v37);
            v40 = 1.0 / (v39 + 1.0);
            *(double *)(*((_QWORD *)this + 3) + 8 * v17) = v39 * v40;
            *(double *)(*((_QWORD *)this + 5) + 8 * v17) = v40 * 0.0;
            *(double *)(*((_QWORD *)this + 7) + 8 * v17) = -(v39 * v40);
            v41 = 1.0 - v39;
            v42 = v38.__cosval * -2.0 * v40;
            goto LABEL_53;
          }
LABEL_42:
          *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v17) = 0x3FF0000000000000;
          goto LABEL_55;
        case 3:
          WebCore::Biquad::setLowShelfParams(v9, v17, v20, a5[v17]);
          goto LABEL_62;
        case 4:
          WebCore::Biquad::setHighShelfParams(v9, v17, v20, a5[v17]);
          goto LABEL_62;
        case 5:
          WebCore::Biquad::setPeakingParams(v9, v17, v20, a4[v17], a5[v17]);
          goto LABEL_62;
        case 6:
          if (v20 <= 1.0)
            v43 = v20;
          else
            v43 = 1.0;
          if (v43 > 0.0)
          {
            v44 = v43 < 1.0;
          }
          else
          {
            v43 = 0.0;
            v44 = 0;
          }
          if (!v44)
            goto LABEL_42;
          v49 = a4[v17];
          if (v49 <= 0.0)
          {
LABEL_54:
            *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v17) = 0;
LABEL_55:
            *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v17) = 0;
            *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v17) = 0;
            *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v17) = 0;
            v33 = 0.0;
          }
          else
          {
            v50 = v49;
            v51 = __sincos_stret(v43 * 3.14159265);
            v52 = v51.__sinval / (v50 + v50);
            v40 = 1.0 / (v52 + 1.0);
            *(double *)(*((_QWORD *)this + 3) + 8 * v17) = v40;
            v41 = 1.0 - v52;
            v42 = v51.__cosval * -2.0 * v40;
            *(double *)(*((_QWORD *)this + 5) + 8 * v17) = v42;
            *(double *)(*((_QWORD *)this + 7) + 8 * v17) = v40;
LABEL_53:
            *(double *)(*((_QWORD *)this + 9) + 8 * v17) = v42;
            v33 = v41 * v40;
          }
          goto LABEL_61;
        case 7:
          if (v20 <= 1.0)
            v45 = v20;
          else
            v45 = 1.0;
          if (v45 > 0.0)
          {
            v46 = v45 < 1.0;
          }
          else
          {
            v45 = 0.0;
            v46 = 0;
          }
          if (v46)
          {
            v53 = a4[v17];
            if (v53 > 0.0)
            {
              v54 = v53;
              v55 = __sincos_stret(v45 * 3.14159265);
              v56 = v55.__sinval / (v54 + v54);
              v57 = v56 + 1.0;
              v58 = 1.0 / (v56 + 1.0);
              v33 = (1.0 - v56) * v58;
              *(double *)(*((_QWORD *)this + 3) + 8 * v17) = v33;
              v59 = v55.__cosval * -2.0 * v58;
              *(double *)(*((_QWORD *)this + 5) + 8 * v17) = v59;
              v60 = v57 * v58;
              goto LABEL_60;
            }
            v47 = *((_QWORD *)this + 3);
            v48 = 0xBFF0000000000000;
          }
          else
          {
            v47 = *((_QWORD *)this + 3);
            v48 = 0x3FF0000000000000;
          }
          *(_QWORD *)(v47 + 8 * v17) = v48;
          *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v17) = 0;
          v60 = 0.0;
          v59 = 0.0;
          v33 = 0.0;
LABEL_60:
          *(double *)(*((_QWORD *)this + 7) + 8 * v17) = v60;
          *(double *)(*((_QWORD *)this + 9) + 8 * v17) = v59;
LABEL_61:
          *(double *)(*((_QWORD *)this + 11) + 8 * v17) = v33;
LABEL_62:
          if (a2 != ++v17)
            continue;
          v8 = *((float *)this + 4);
          v11 = v64;
          break;
        default:
          goto LABEL_62;
      }
      break;
    }
  }
  v61 = WebCore::Biquad::tailFrame(v9, v11, v8 * 30.0) / v8;
  if (v61 <= 30.0)
    v62 = v61;
  else
    v62 = 30.0;
  v35 = v61 < 0.0;
  v63 = 0.0;
  if (!v35)
    v63 = v62;
  *((double *)this + 22) = v63;
}

double WebCore::BiquadDSPKernel::process(WebCore::BiquadDSPKernel *this, float *a2, float *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  WebCore::AudioParam *v30;
  WebCore::AudioParam *v31;
  WebCore::AudioParam *v32;
  WebCore::AudioParam *v33;
  const float *v34;
  const float *v35;
  const float *v36;
  const float *v37;
  WebCore::BiquadDSPKernel *v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v46;
  float v47;
  float v48[128];
  float v49[128];
  float v50[128];
  float v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v8 + 80))
  {
    if (!*(_BYTE *)(v8 + 81) || !*(_BYTE *)(v8 + 82))
    {
      v30 = *(WebCore::AudioParam **)(v8 + 48);
      v51[0] = 0.0;
      WebCore::AudioParam::calculateFinalValues(v30, v51, 1u, 0);
      v50[0] = v51[0];
      v31 = *(WebCore::AudioParam **)(*((_QWORD *)this + 1) + 56);
      v51[0] = 0.0;
      WebCore::AudioParam::calculateFinalValues(v31, v51, 1u, 0);
      v49[0] = v51[0];
      v32 = *(WebCore::AudioParam **)(*((_QWORD *)this + 1) + 64);
      v51[0] = 0.0;
      WebCore::AudioParam::calculateFinalValues(v32, v51, 1u, 0);
      v48[0] = v51[0];
      v33 = *(WebCore::AudioParam **)(*((_QWORD *)this + 1) + 72);
      v51[0] = 0.0;
      WebCore::AudioParam::calculateFinalValues(v33, v51, 1u, 0);
      v34 = v50;
      v35 = v49;
      v36 = v48;
      v37 = v51;
      v38 = this;
      v29 = 1;
LABEL_53:
      WebCore::BiquadDSPKernel::updateCoefficients(v38, v29, v34, v35, v36, v37);
      return WebCore::Biquad::process((double **)this + 3, a2, a3, a4);
    }
    if (a4 >= 0x81)
    {
      __break(0xC471u);
      JUMPOUT(0x19554C1ECLL);
    }
    v9 = *(_QWORD *)(v8 + 48);
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = atomic_load((unint64_t *)(v11 + 240));
        v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v13)
          v13 = WTF::Thread::initializeCurrentTLS(0);
        if ((_DWORD)a4 && v13 == v12)
          WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v9, v51, a4, *(_BYTE *)(v9 + 104) == 0);
      }
    }
    v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 56);
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = atomic_load((unint64_t *)(v16 + 240));
        v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v18)
          v18 = WTF::Thread::initializeCurrentTLS(0);
        if ((_DWORD)a4 && v18 == v17)
          WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v14, v50, a4, *(_BYTE *)(v14 + 104) == 0);
      }
    }
    v19 = *(_QWORD *)(*((_QWORD *)this + 1) + 64);
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        v22 = atomic_load((unint64_t *)(v21 + 240));
        v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v23)
          v23 = WTF::Thread::initializeCurrentTLS(0);
        if ((_DWORD)a4 && v23 == v22)
          WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v19, v49, a4, *(_BYTE *)(v19 + 104) == 0);
      }
    }
    v24 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        v27 = atomic_load((unint64_t *)(v26 + 240));
        v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v28)
          v28 = WTF::Thread::initializeCurrentTLS(0);
        if ((_DWORD)a4 && v28 == v27)
          WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v24, v48, a4, *(_BYTE *)(v24 + 104) == 0);
      }
    }
    if (a4 >= 2)
    {
      v29 = a4;
      if (v51[1] != v51[0])
        goto LABEL_52;
      v39 = 2;
      while (a4 != v39)
      {
        v40 = v51[v39++];
        if (v40 != v51[0])
        {
          v29 = a4;
          if (v39 - 1 < a4)
            goto LABEL_52;
          break;
        }
      }
      v29 = a4;
      if (v50[1] != v50[0])
        goto LABEL_52;
      v41 = 2;
      while (a4 != v41)
      {
        v42 = v50[v41++];
        if (v42 != v50[0])
        {
          v29 = a4;
          if (v41 - 1 < a4)
            goto LABEL_52;
          break;
        }
      }
      v29 = a4;
      if (v49[1] != v49[0])
        goto LABEL_52;
      v43 = 2;
      while (a4 != v43)
      {
        v44 = v49[v43++];
        if (v44 != v49[0])
        {
          v29 = a4;
          if (v43 - 1 < a4)
            goto LABEL_52;
          break;
        }
      }
      v29 = a4;
      if (v48[1] != v48[0])
        goto LABEL_52;
      v46 = 2;
      while (a4 != v46)
      {
        v47 = v48[v46++];
        if (v47 != v48[0])
        {
          v29 = a4;
          if (v46 - 1 >= a4)
            break;
          goto LABEL_52;
        }
      }
    }
    v29 = 1;
LABEL_52:
    v34 = v51;
    v35 = v50;
    v36 = v49;
    v37 = v48;
    v38 = this;
    goto LABEL_53;
  }
  return WebCore::Biquad::process((double **)this + 3, a2, a3, a4);
}

double WebCore::BiquadDSPKernel::tailTime(WebCore::BiquadDSPKernel *this)
{
  return *((double *)this + 22);
}

double WebCore::BiquadDSPKernel::latencyTime(WebCore::BiquadDSPKernel *this)
{
  return 0.0;
}

uint64_t WebCore::BiquadDSPKernel::requiresTailProcessing(WebCore::BiquadDSPKernel *this)
{
  return 1;
}

void WebCore::BiquadFilterNode::getFrequencyResponse(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::BaseAudioContext *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WebCore::BaseAudioContext *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WebCore::BaseAudioContext *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WebCore::BaseAudioContext *v93;
  uint64_t v94;
  void *v95;
  float *v96;
  WTF *v97;
  uint64_t v98;
  double v99;
  float v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float *v112;
  float v113;
  float v114;
  float v115;
  float v116;

  v6 = *a2;
  v7 = *(_QWORD *)(*a2 + 32);
  if (!v7
    || (v8 = *(_QWORD *)(v7 + 16)) == 0
    || (v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v8 & 0x3FFFFFFFFLL) + v9))
  {
LABEL_64:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *(_BYTE *)(v6 + 6);
  if ((v10 & 3) != 0)
  {
    if (*(_BYTE *)(v7 + 64) && (v109 = *(_QWORD *)(v7 + 32)) != 0)
    {
      v32 = atomic_load((unint64_t *)(v109 + 32));
      v10 = *(_BYTE *)(v6 + 6);
    }
    else
    {
      v32 = *(_QWORD *)(v7 + 48);
    }
    v33 = *(_QWORD *)(v6 + 8);
    if ((v10 & 4) == 0)
    {
      v11 = *(_QWORD *)(v6 + 16);
      v34 = v11 + v33 <= v32 && v32 >= v33;
      if (v34)
        v11 = 0;
      goto LABEL_8;
    }
    v34 = v32 >= v33;
    v42 = v32 - v33;
    if (!v34)
    {
      v43 = *(_BYTE *)(v6 + 4) - 4;
      if (v43 > 7u)
        LOBYTE(v44) = 0;
      else
        v44 = qword_1968DEF78[(char)v43];
      v11 = (-1 << v44) & v42;
      goto LABEL_8;
    }
    goto LABEL_64;
  }
  v11 = *(_QWORD *)(v6 + 16);
LABEL_8:
  v12 = v11 >> 2;
  v13 = *a3;
  v14 = *(_QWORD *)(*a3 + 32);
  if (!v14)
    goto LABEL_68;
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
    goto LABEL_68;
  v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v16 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v15 & 0x3FFFFFFFFLL) + v16))
    goto LABEL_68;
  v17 = *(_BYTE *)(v13 + 6);
  if ((v17 & 3) == 0)
  {
    v18 = *(_QWORD *)(v13 + 16);
    goto LABEL_15;
  }
  if (*(_BYTE *)(v14 + 64) && (v110 = *(_QWORD *)(v14 + 32)) != 0)
  {
    v35 = atomic_load((unint64_t *)(v110 + 32));
    v17 = *(_BYTE *)(v13 + 6);
  }
  else
  {
    v35 = *(_QWORD *)(v14 + 48);
  }
  v36 = *(_QWORD *)(v13 + 8);
  if ((v17 & 4) == 0)
  {
    v37 = *(_QWORD *)(v13 + 16);
    if (v37 + v36 <= v35 && v35 >= v36)
      v18 = 0;
    else
      v18 = v37;
    goto LABEL_15;
  }
  v34 = v35 >= v36;
  v45 = v35 - v36;
  if (v34)
  {
LABEL_68:
    v18 = 0;
    goto LABEL_15;
  }
  v46 = *(_BYTE *)(v13 + 4) - 4;
  if (v46 > 7u)
    LOBYTE(v47) = 0;
  else
    v47 = qword_1968DEF78[(char)v46];
  v18 = (-1 << v47) & v45;
LABEL_15:
  v19 = v18 >> 2;
  if (v18 >> 2 != v12)
  {
LABEL_33:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 12;
    *(_BYTE *)(a5 + 16) = 1;
    return;
  }
  v20 = *a4;
  v21 = *(_QWORD *)(*a4 + 32);
  if (!v21)
    goto LABEL_72;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    goto LABEL_72;
  v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v23 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v22 & 0x3FFFFFFFFLL) + v23))
    goto LABEL_72;
  v24 = *(_BYTE *)(v20 + 6);
  if ((v24 & 3) == 0)
  {
    v25 = *(_QWORD *)(v20 + 16);
    goto LABEL_23;
  }
  if (*(_BYTE *)(v21 + 64) && (v111 = *(_QWORD *)(v21 + 32)) != 0)
  {
    v39 = atomic_load((unint64_t *)(v111 + 32));
    v24 = *(_BYTE *)(v20 + 6);
  }
  else
  {
    v39 = *(_QWORD *)(v21 + 48);
  }
  v40 = *(_QWORD *)(v20 + 8);
  if ((v24 & 4) != 0)
  {
    v34 = v39 >= v40;
    v48 = v39 - v40;
    if (!v34)
    {
      v49 = *(_BYTE *)(v20 + 4) - 4;
      if (v49 > 7u)
        LOBYTE(v50) = 0;
      else
        v50 = qword_1968DEF78[(char)v49];
      v25 = (-1 << v50) & v48;
      goto LABEL_23;
    }
LABEL_72:
    v25 = 0;
    goto LABEL_23;
  }
  v25 = *(_QWORD *)(v20 + 16);
  if (v25 + v40 <= v39 && v39 >= v40)
    v25 = 0;
LABEL_23:
  if (v19 != v25 >> 2)
    goto LABEL_33;
  if (!(_DWORD)v12)
    goto LABEL_158;
  v26 = *(_QWORD *)(a1 + 152);
  v27 = *a2;
  v28 = *(_QWORD *)(*a2 + 32);
  if (!v28 || (v29 = *(_QWORD *)(v28 + 16)) == 0)
  {
LABEL_85:
    v31 = 0;
    goto LABEL_88;
  }
  v30 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v30 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    if ((v29 & 0x3FFFFFFFFLL) + v30)
    {
      v31 = *(_QWORD *)(v27 + 24);
      if (v31 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
        v31 = (v31 & 0x3FFFFFFFFLL) + v30;
      goto LABEL_88;
    }
    goto LABEL_85;
  }
  v31 = *(_QWORD *)(v27 + 24);
LABEL_88:
  v51 = *a3;
  v52 = *(_QWORD *)(*a3 + 32);
  if (!v52)
    goto LABEL_96;
  v53 = *(_QWORD *)(v52 + 16);
  if (!v53)
    goto LABEL_96;
  v54 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v54 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v55 = *(float **)(v51 + 24);
    goto LABEL_99;
  }
  if ((v53 & 0x3FFFFFFFFLL) + v54)
  {
    v55 = *(float **)(v51 + 24);
    if (v55 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
      v55 = (float *)(((unint64_t)v55 & 0x3FFFFFFFFLL) + v54);
  }
  else
  {
LABEL_96:
    v55 = 0;
  }
LABEL_99:
  v56 = *a4;
  v57 = *(_QWORD *)(*a4 + 32);
  v112 = v55;
  if (!v57 || (v58 = *(_QWORD *)(v57 + 16)) == 0)
  {
LABEL_107:
    v60 = 0;
    goto LABEL_110;
  }
  v59 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v59 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    if ((v58 & 0x3FFFFFFFFLL) + v59)
    {
      v60 = *(float **)(v56 + 24);
      if (v60 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
        v60 = (float *)(((unint64_t)v60 & 0x3FFFFFFFFLL) + v59);
      goto LABEL_110;
    }
    goto LABEL_107;
  }
  v60 = *(float **)(v56 + 24);
LABEL_110:
  v61 = WTF::fastMalloc((WTF *)0xB8);
  *(_QWORD *)(v61 + 8) = v26;
  *(_DWORD *)(v61 + 16) = *(_DWORD *)(v26 + 16);
  *(_QWORD *)v61 = off_1E336A0E8;
  WebCore::Biquad::Biquad((WebCore::Biquad *)(v61 + 24), v62);
  *(_QWORD *)(v61 + 176) = 0x7FF0000000000000;
  v63 = *(_QWORD *)(v26 + 48);
  v64 = *(_QWORD *)(v63 + 8);
  if (v64)
  {
    v65 = *(_QWORD *)(v64 + 8);
    if (v65)
    {
      v66 = atomic_load((unint64_t *)(v65 + 240));
      v67 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v67)
        v67 = WTF::Thread::initializeCurrentTLS(0);
      if (v67 == v66)
      {
        v68 = *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8);
        v69 = v68 ? (WebCore::BaseAudioContext *)(v68 - 32) : 0;
        v70 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v63 + 112), v69, *(float *)(v63 + 88), *(float *)(v63 + 96), *(float *)(v63 + 100));
        if ((v70 & 0xFF00000000) != 0)
          *(_DWORD *)(v63 + 88) = v70;
      }
    }
  }
  v116 = *(float *)(v63 + 88);
  v71 = *(_QWORD *)(v26 + 56);
  v72 = *(_QWORD *)(v71 + 8);
  if (v72)
  {
    v73 = *(_QWORD *)(v72 + 8);
    if (v73)
    {
      v74 = atomic_load((unint64_t *)(v73 + 240));
      v75 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v75)
        v75 = WTF::Thread::initializeCurrentTLS(0);
      if (v75 == v74)
      {
        v76 = *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8);
        v77 = v76 ? (WebCore::BaseAudioContext *)(v76 - 32) : 0;
        v78 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v71 + 112), v77, *(float *)(v71 + 88), *(float *)(v71 + 96), *(float *)(v71 + 100));
        if ((v78 & 0xFF00000000) != 0)
          *(_DWORD *)(v71 + 88) = v78;
      }
    }
  }
  v115 = *(float *)(v71 + 88);
  v79 = *(_QWORD *)(v26 + 64);
  v80 = *(_QWORD *)(v79 + 8);
  if (v80)
  {
    v81 = *(_QWORD *)(v80 + 8);
    if (v81)
    {
      v82 = atomic_load((unint64_t *)(v81 + 240));
      v83 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v83)
        v83 = WTF::Thread::initializeCurrentTLS(0);
      if (v83 == v82)
      {
        v84 = *(_QWORD *)(*(_QWORD *)(v79 + 8) + 8);
        v85 = v84 ? (WebCore::BaseAudioContext *)(v84 - 32) : 0;
        v86 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v79 + 112), v85, *(float *)(v79 + 88), *(float *)(v79 + 96), *(float *)(v79 + 100));
        if ((v86 & 0xFF00000000) != 0)
          *(_DWORD *)(v79 + 88) = v86;
      }
    }
  }
  v114 = *(float *)(v79 + 88);
  v87 = *(_QWORD *)(v26 + 72);
  v88 = *(_QWORD *)(v87 + 8);
  if (v88)
  {
    v89 = *(_QWORD *)(v88 + 8);
    if (v89)
    {
      v90 = atomic_load((unint64_t *)(v89 + 240));
      v91 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v91)
        v91 = WTF::Thread::initializeCurrentTLS(0);
      if (v91 == v90)
      {
        v92 = *(_QWORD *)(*(_QWORD *)(v87 + 8) + 8);
        if (v92)
          v93 = (WebCore::BaseAudioContext *)(v92 - 32);
        else
          v93 = 0;
        v94 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v87 + 112), v93, *(float *)(v87 + 88), *(float *)(v87 + 96), *(float *)(v87 + 100));
        if ((v94 & 0xFF00000000) != 0)
          *(_DWORD *)(v87 + 88) = v94;
      }
    }
  }
  v113 = *(float *)(v87 + 88);
  WebCore::BiquadDSPKernel::updateCoefficients((WebCore::BiquadDSPKernel *)v61, 1uLL, &v116, &v115, &v114, &v113);
  if (v31 && v112 && v60)
  {
    if (v12 >> 30)
    {
      __break(0xC471u);
      return;
    }
    v96 = (float *)WTF::fastMalloc((WTF *)(v18 & 0xFFFFFFFFFFFFFFFCLL));
    v97 = (WTF *)v96;
    v98 = 0;
    v99 = *(float *)(v61 + 16) * 0.5;
    do
    {
      v100 = *(float *)(v31 + 4 * v98) / v99;
      v96[v98++] = v100;
    }
    while (v19 != v98);
    WebCore::Biquad::getFrequencyResponse((double **)(v61 + 24), v12, v96, v112, v60);
    WTF::fastFree(v97, v101);
  }
  WTF::fastAlignedFree(*(WTF **)(v61 + 120), v95);
  WTF::fastAlignedFree(*(WTF **)(v61 + 104), v102);
  WTF::fastAlignedFree(*(WTF **)(v61 + 88), v103);
  WTF::fastAlignedFree(*(WTF **)(v61 + 72), v104);
  WTF::fastAlignedFree(*(WTF **)(v61 + 56), v105);
  WTF::fastAlignedFree(*(WTF **)(v61 + 40), v106);
  WTF::fastAlignedFree(*(WTF **)(v61 + 24), v107);
  WTF::fastFree((WTF *)v61, v108);
LABEL_158:
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
}

void WebCore::BiquadProcessor::~BiquadProcessor(WebCore::BiquadProcessor *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WebCore::AudioParam *v8;
  WebCore::AudioParam *v9;
  WebCore::AudioParam *v10;
  WebCore::AudioParam *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;

  if (*((_BYTE *)this + 8))
  {
    if (*((_DWORD *)this + 8))
    {
      v3 = *((unsigned int *)this + 9);
      if ((_DWORD)v3)
      {
        v4 = (uint64_t *)*((_QWORD *)this + 3);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          ++v4;
          v5 -= 8;
        }
        while (v5);
        *((_DWORD *)this + 9) = 0;
      }
      v7 = (WTF *)*((_QWORD *)this + 3);
      if (v7)
      {
        *((_QWORD *)this + 3) = 0;
        *((_DWORD *)this + 8) = 0;
        WTF::fastFree(v7, a2);
      }
    }
    *((_BYTE *)this + 8) = 0;
  }
  v8 = (WebCore::AudioParam *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v8, a2);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*((_DWORD *)v8 + 16);
    }
  }
  v9 = (WebCore::AudioParam *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v9, a2);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*((_DWORD *)v9 + 16);
    }
  }
  v10 = (WebCore::AudioParam *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v10, a2);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*((_DWORD *)v10 + 16);
    }
  }
  v11 = (WebCore::AudioParam *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v11, a2);
      WTF::fastFree(v22, v23);
    }
    else
    {
      --*((_DWORD *)v11 + 16);
    }
  }
  *(_QWORD *)this = off_1E3407510;
  v12 = *((unsigned int *)this + 9);
  v13 = (WTF *)*((_QWORD *)this + 3);
  if ((_DWORD)v12)
  {
    v14 = 8 * v12;
    do
    {
      v15 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v13 = (WTF *)((char *)v13 + 8);
      v14 -= 8;
    }
    while (v14);
    v13 = (WTF *)*((_QWORD *)this + 3);
  }
  if (v13)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v13, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::BiquadProcessor::~BiquadProcessor(this, a2);
  WTF::fastFree(v2, v3);
}

WebCore::Biquad *WebCore::BiquadProcessor::createKernel@<X0>(WebCore::BiquadProcessor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  WebCore::Biquad *result;

  v4 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)(v4 + 16) = *((_DWORD *)this + 4);
  *(_QWORD *)v4 = off_1E336A0E8;
  *(_QWORD *)(v4 + 8) = this;
  result = WebCore::Biquad::Biquad((WebCore::Biquad *)(v4 + 24), v5);
  *(_QWORD *)(v4 + 176) = 0x7FF0000000000000;
  *a2 = v4;
  return result;
}

void WebCore::BiquadProcessor::process(WebCore::BiquadProcessor *this, const WebCore::AudioBus *a2, WebCore::AudioBus *a3)
{
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;

  if (*((_BYTE *)this + 8))
  {
    *((_WORD *)this + 40) = 0;
    if (WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 6))
      || WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 7))
      || WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 8))
      || WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 9)))
    {
      *((_WORD *)this + 40) = 257;
      v6 = !*(_BYTE *)(*((_QWORD *)this + 6) + 104)
        || !*(_BYTE *)(*((_QWORD *)this + 7) + 104)
        || !*(_BYTE *)(*((_QWORD *)this + 8) + 104)
        || *(_BYTE *)(*((_QWORD *)this + 9) + 104) == 0;
      *((_BYTE *)this + 82) = v6;
LABEL_12:
      if (*((_DWORD *)this + 9))
      {
        v7 = 0;
        do
        {
          if (v7 >= *((unsigned int *)a2 + 7) || v7 >= *((unsigned int *)a3 + 7))
          {
            __break(0xC471u);
            JUMPOUT(0x19554D004);
          }
          v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v7);
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * v7) + 24) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          ++v7;
        }
        while (v7 < *((unsigned int *)this + 9));
      }
      return;
    }
    v14 = *((_QWORD *)this + 6);
    if (*((_BYTE *)this + 40))
    {
      *(_DWORD *)(v14 + 108) = *(_DWORD *)(v14 + 88);
      v15 = *((_QWORD *)this + 8);
      *(_DWORD *)(*((_QWORD *)this + 7) + 108) = *(_DWORD *)(*((_QWORD *)this + 7) + 88);
      *(_DWORD *)(v15 + 108) = *(_DWORD *)(v15 + 88);
      *(_DWORD *)(*((_QWORD *)this + 9) + 108) = *(_DWORD *)(*((_QWORD *)this + 9) + 88);
      *((_BYTE *)this + 80) = 1;
      *((_BYTE *)this + 40) = 0;
      goto LABEL_12;
    }
    v16 = *(_QWORD *)(v14 + 8);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v14 + 112), (WebCore::BaseAudioContext *)(v17 - 32), *(float *)(v14 + 88), *(float *)(v14 + 96), *(float *)(v14 + 100));
        if ((v18 & 0xFF00000000) != 0)
        {
          *(_DWORD *)(v14 + 88) = v18;
          if (*(float *)(v14 + 108) != *(float *)&v18)
          {
            v19 = 0;
            *(_DWORD *)(v14 + 108) = v18;
            goto LABEL_36;
          }
        }
        else
        {
          v20 = *(float *)(v14 + 108);
          v21 = *(float *)(v14 + 88);
          if (v20 != v21)
          {
            v42 = v20 + (float)(v21 - v20) * 0.05;
            *(float *)(v14 + 108) = v42;
            v19 = 0;
            if (vabds_f32(v42, v21) < 0.001)
              *(float *)(v14 + 108) = v21;
LABEL_36:
            v22 = *((_QWORD *)this + 7);
            v23 = *(_QWORD *)(v22 + 8);
            if (v23)
            {
              v24 = *(_QWORD *)(v23 + 8);
              if (v24)
              {
                v25 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v22 + 112), (WebCore::BaseAudioContext *)(v24 - 32), *(float *)(v22 + 88), *(float *)(v22 + 96), *(float *)(v22 + 100));
                if ((v25 & 0xFF00000000) != 0)
                {
                  *(_DWORD *)(v22 + 88) = v25;
                  if (*(float *)(v22 + 108) != *(float *)&v25)
                  {
                    v26 = 0;
                    *(_DWORD *)(v22 + 108) = v25;
                    goto LABEL_43;
                  }
                }
                else
                {
                  v27 = *(float *)(v22 + 108);
                  v28 = *(float *)(v22 + 88);
                  if (v27 != v28)
                  {
                    v43 = v27 + (float)(v28 - v27) * 0.05;
                    *(float *)(v22 + 108) = v43;
                    v26 = 0;
                    if (vabds_f32(v43, v28) < 0.001)
                      *(float *)(v22 + 108) = v28;
LABEL_43:
                    v29 = *((_QWORD *)this + 8);
                    v30 = *(_QWORD *)(v29 + 8);
                    if (v30)
                    {
                      v31 = *(_QWORD *)(v30 + 8);
                      if (v31)
                      {
                        v32 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v29 + 112), (WebCore::BaseAudioContext *)(v31 - 32), *(float *)(v29 + 88), *(float *)(v29 + 96), *(float *)(v29 + 100));
                        if ((v32 & 0xFF00000000) != 0)
                        {
                          *(_DWORD *)(v29 + 88) = v32;
                          if (*(float *)(v29 + 108) != *(float *)&v32)
                          {
                            v33 = 0;
                            *(_DWORD *)(v29 + 108) = v32;
                            goto LABEL_50;
                          }
                        }
                        else
                        {
                          v34 = *(float *)(v29 + 108);
                          v35 = *(float *)(v29 + 88);
                          if (v34 != v35)
                          {
                            v44 = v34 + (float)(v35 - v34) * 0.05;
                            *(float *)(v29 + 108) = v44;
                            v33 = 0;
                            if (vabds_f32(v44, v35) < 0.001)
                              *(float *)(v29 + 108) = v35;
LABEL_50:
                            v36 = *((_QWORD *)this + 9);
                            v37 = *(_QWORD *)(v36 + 8);
                            if (v37)
                            {
                              v38 = *(_QWORD *)(v37 + 8);
                              if (v38)
                              {
                                v39 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v36 + 112), (WebCore::BaseAudioContext *)(v38 - 32), *(float *)(v36 + 88), *(float *)(v36 + 96), *(float *)(v36 + 100));
                                if ((v39 & 0xFF00000000) != 0)
                                {
                                  *(_DWORD *)(v36 + 88) = v39;
                                  if (*(float *)(v36 + 108) != *(float *)&v39)
                                  {
                                    *(_DWORD *)(v36 + 108) = v39;
LABEL_57:
                                    *((_BYTE *)this + 80) = 1;
                                    goto LABEL_12;
                                  }
                                }
                                else
                                {
                                  v40 = *(float *)(v36 + 108);
                                  v41 = *(float *)(v36 + 88);
                                  if (v40 != v41)
                                  {
                                    v45 = v40 + (float)(v41 - v40) * 0.05;
                                    *(float *)(v36 + 108) = v45;
                                    if (vabds_f32(v45, v41) < 0.001)
                                      *(float *)(v36 + 108) = v41;
                                    goto LABEL_57;
                                  }
                                }
                              }
                            }
                            if ((v19 & v26 & v33 & 1) != 0)
                              goto LABEL_12;
                            goto LABEL_57;
                          }
                        }
                      }
                    }
                    v33 = 1;
                    goto LABEL_50;
                  }
                }
              }
            }
            v26 = 1;
            goto LABEL_43;
          }
        }
      }
    }
    v19 = 1;
    goto LABEL_36;
  }
  v9 = *((unsigned int *)a3 + 7);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; ++i)
    {
      v11 = *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * i);
      if (!*(_BYTE *)(v11 + 24))
      {
        *(_BYTE *)(v11 + 24) = 1;
        v12 = *(void ***)(v11 + 8);
        v13 = (_QWORD *)(v11 + 16);
        if (v12)
          v13 = v12 + 1;
        else
          v12 = (void **)v11;
        bzero(*v12, 4 * *v13);
        v9 = *((unsigned int *)a3 + 7);
      }
    }
  }
}

void WebCore::BiquadProcessor::processOnlyAudioParams(WebCore::BiquadProcessor *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 6);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = atomic_load((unint64_t *)(v6 + 240));
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v8)
        v8 = WTF::Thread::initializeCurrentTLS(0);
      if (a2 && v8 == v7)
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v4, v24, a2, *(_BYTE *)(v4 + 104) == 0);
    }
  }
  v9 = *((_QWORD *)this + 7);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = atomic_load((unint64_t *)(v11 + 240));
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13)
        v13 = WTF::Thread::initializeCurrentTLS(0);
      if (a2 && v13 == v12)
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v9, v24, a2, *(_BYTE *)(v9 + 104) == 0);
    }
  }
  v14 = *((_QWORD *)this + 8);
  v15 = *(_QWORD *)(v14 + 8);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = atomic_load((unint64_t *)(v16 + 240));
      v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v18)
        v18 = WTF::Thread::initializeCurrentTLS(0);
      if (a2 && v18 == v17)
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v14, v24, a2, *(_BYTE *)(v14 + 104) == 0);
    }
  }
  v19 = *((_QWORD *)this + 9);
  v20 = *(_QWORD *)(v19 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = atomic_load((unint64_t *)(v21 + 240));
      v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v23)
        v23 = WTF::Thread::initializeCurrentTLS(0);
      if (a2)
      {
        if (v23 == v22)
          WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v19, v24, a2, *(_BYTE *)(v19 + 104) == 0);
      }
    }
  }
}

WebCore::ChannelMergerNode *WebCore::ChannelMergerNode::ChannelMergerNode(WebCore::ChannelMergerNode *this, WebCore::BaseAudioContext *a2, void *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  WTF::Thread *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  _QWORD v36[4];

  *(_QWORD *)this = off_1E3368A80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E3368BA8;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 13;
  v6 = (unsigned int *)((char *)a2 + 24);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *((_QWORD *)this + 5) = a2;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  *((_DWORD *)this + 26) = 1;
  *(_QWORD *)((char *)this + 108) = 0;
  v13 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 112))(a2);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *((_QWORD *)this + 15) = v13;
  v16 = *((_QWORD *)a2 + 9);
  v17 = *((_QWORD *)a2 + 10) + 1;
  *((_QWORD *)a2 + 10) = v17;
  v18 = v16 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v17;
  *((_QWORD *)this + 16) = v18;
  *((_QWORD *)this + 17) = 2;
  *((_DWORD *)this + 36) = 0;
  v36[0] = "AudioNode";
  v36[1] = 10;
  v36[2] = "AudioNode";
  v36[3] = v18;
  if (*(_BYTE *)(v13 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v36);
  (*(void (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 136))(a2);
  *(_QWORD *)this = off_1E3369AE0;
  *((_QWORD *)this + 3) = &unk_1E3369C08;
  if ((_DWORD)a3)
  {
    v19 = (int)a3;
    do
    {
      WebCore::AudioNode::addInput(this);
      --v19;
    }
    while (v19);
  }
  v20 = WebCore::AudioNode::addOutput(this, a3);
  *((_BYTE *)this + 32) = 1;
  v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v24)
    v24 = WTF::Thread::initializeCurrentTLS(v20);
  if (v24 == *((_QWORD *)a2 + 35))
  {
    v27 = *((_DWORD *)a2 + 72) + 1;
    goto LABEL_19;
  }
  v25 = (unsigned __int8 *)a2 + 292;
  if (__ldaxr((unsigned __int8 *)a2 + 292))
  {
    __clrex();
LABEL_17:
    MEMORY[0x19AEA534C](v25, v21, v22, v23);
    goto LABEL_18;
  }
  if (__stxr(1u, v25))
    goto LABEL_17;
LABEL_18:
  *((_QWORD *)a2 + 35) = v24;
  v27 = 1;
LABEL_19:
  *((_DWORD *)a2 + 72) = v27;
  *((_BYTE *)this + 113) = 1;
  v28 = *((unsigned int *)this + 21);
  if ((_DWORD)v28)
  {
    v29 = (uint64_t *)*((_QWORD *)this + 9);
    v30 = 8 * v28;
    do
    {
      v31 = *v29++;
      WebCore::AudioNodeOutput::disable(v31);
      v30 -= 8;
    }
    while (v30);
  }
  v32 = *((_DWORD *)a2 + 72) - 1;
  *((_DWORD *)a2 + 72) = v32;
  if (!v32)
  {
    *((_QWORD *)a2 + 35) = 0;
    v33 = (unsigned __int8 *)a2 + 292;
    v34 = __ldxr((unsigned __int8 *)a2 + 292);
    if (v34 == 1)
    {
      if (!__stlxr(0, v33))
        return this;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
  }
  return this;
}

void WebCore::ChannelMergerNode::process(WebCore::ChannelMergerNode *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  void *v19;
  const void *v20;

  if (*((_DWORD *)this + 21))
    v2 = **((_QWORD **)this + 9);
  else
    v2 = 0;
  LODWORD(v3) = *((_DWORD *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3 <= v4 ? 0 : *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v4);
      v6 = *(_BYTE *)(v2 + 32) ? 24 : 16;
      v7 = *(_QWORD *)(v2 + v6);
      if (v4 >= *(unsigned int *)(v7 + 28))
        break;
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v4);
      v9 = *(_DWORD *)(v5 + 28);
      if (!v9)
        goto LABEL_40;
      if (v9 == 1 && !*(_DWORD *)(*(_QWORD *)(v5 + 64) + 140))
      {
        v16 = **(_QWORD **)(v5 + 16);
        v17 = *(unsigned __int8 *)(v16 + 32);
        v18 = (uint64_t *)(v16 + 24);
        v10 = (uint64_t *)(v16 + 16);
        if (v17)
          v10 = v18;
      }
      else
      {
        v10 = (uint64_t *)(v5 + 80);
      }
      v11 = *v10;
      if (!*(_DWORD *)(v11 + 28))
        break;
      v12 = **(_QWORD **)(v11 + 16);
      if (v12 && (v13 = *(_QWORD *)(v8 + 16), *(_QWORD *)(v12 + 16) >= v13) && !*(_BYTE *)(v12 + 24))
      {
        *(_BYTE *)(v8 + 24) = 0;
        v19 = *(void **)v8;
        if (!*(_QWORD *)v8)
          v19 = **(void ***)(v8 + 8);
        v20 = *(const void **)v12;
        if (!*(_QWORD *)v12)
          v20 = **(const void ***)(v12 + 8);
        memcpy(v19, v20, 4 * v13);
      }
      else
      {
LABEL_40:
        if (!*(_BYTE *)(v8 + 24))
        {
          *(_BYTE *)(v8 + 24) = 1;
          v14 = *(_QWORD *)(v8 + 8);
          v15 = (_QWORD *)(v8 + 16);
          if (v14)
          {
            v15 = (_QWORD *)(v14 + 8);
            v8 = *(_QWORD *)(v8 + 8);
          }
          bzero(*(void **)v8, 4 * *v15);
        }
      }
      ++v4;
      v3 = *((unsigned int *)this + 17);
      if (v4 >= v3)
        return;
    }
    __break(0xC471u);
    JUMPOUT(0x19554D564);
  }
}

WTF::Thread *WebCore::ChannelMergerNode::setChannelCount@<X0>(WebCore::ChannelMergerNode *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;

  if (a2 == 1)
    return WebCore::AudioNode::setChannelCount(this, 1u, (_QWORD *)a3);
  result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t WebCore::ChannelMergerNode::setChannelCountMode@<X0>(uint64_t a1@<X0>, WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  if ((_DWORD)a2 == 2)
    return WebCore::AudioNode::setChannelCountMode(a1, a2, (_QWORD *)a3);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void WebCore::ChannelSplitterNode::process(WebCore::ChannelSplitterNode *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  void **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;

  if (*((_DWORD *)this + 17))
    v2 = **((_QWORD **)this + 7);
  else
    v2 = 0;
  if (*(_DWORD *)(v2 + 28) == 1 && !*(_DWORD *)(*(_QWORD *)(v2 + 64) + 140))
  {
    v24 = **(_QWORD **)(v2 + 16);
    v25 = *(unsigned __int8 *)(v24 + 32);
    v26 = (uint64_t *)(v24 + 24);
    v27 = (uint64_t *)(v24 + 16);
    if (v25)
      v3 = v26;
    else
      v3 = v27;
  }
  else
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  LODWORD(v4) = *((_DWORD *)this + 21);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *v3;
    v7 = *(unsigned int *)(*v3 + 28);
    while (v4 > v5)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v5);
      if (*(_BYTE *)(v8 + 32))
        v9 = 24;
      else
        v9 = 16;
      v10 = *(_QWORD *)(v8 + v9);
      if (v5 < v7)
        goto LABEL_28;
      if (*(_DWORD *)(v8 + 52))
      {
        v11 = *(unsigned int *)(v10 + 28);
        if ((_DWORD)v11)
        {
          for (i = 0; i < v11; ++i)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * i);
            if (!*(_BYTE *)(v13 + 24))
            {
              *(_BYTE *)(v13 + 24) = 1;
              v14 = *(void ***)(v13 + 8);
              v15 = (_QWORD *)(v13 + 16);
              if (v14)
                v15 = v14 + 1;
              else
                v14 = (void **)v13;
              bzero(*v14, 4 * *v15);
              v11 = *(unsigned int *)(v10 + 28);
            }
          }
        }
      }
LABEL_42:
      ++v5;
      v4 = *((unsigned int *)this + 21);
      if (v5 >= v4)
        return;
    }
    if (MEMORY[0x20])
      v16 = 24;
    else
      v16 = 16;
    v10 = *(_QWORD *)v16;
LABEL_28:
    if (!*(_DWORD *)(v10 + 28) || v5 >= *(unsigned int *)(v6 + 28))
    {
      __break(0xC471u);
      JUMPOUT(0x19554D828);
    }
    v17 = **(_QWORD **)(v10 + 16);
    v18 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v5);
    if (v18 && (v19 = *(_QWORD *)(v17 + 16), *(_QWORD *)(v18 + 16) >= v19) && !*(_BYTE *)(v18 + 24))
    {
      *(_BYTE *)(v17 + 24) = 0;
      v22 = *(void **)v17;
      if (!*(_QWORD *)v17)
        v22 = **(void ***)(v17 + 8);
      v23 = *(const void **)v18;
      if (!*(_QWORD *)v18)
        v23 = **(const void ***)(v18 + 8);
      memcpy(v22, v23, 4 * v19);
    }
    else if (!*(_BYTE *)(v17 + 24))
    {
      *(_BYTE *)(v17 + 24) = 1;
      v20 = *(_QWORD *)(v17 + 8);
      v21 = (_QWORD *)(v17 + 16);
      if (v20)
      {
        v21 = (_QWORD *)(v20 + 8);
        v17 = *(_QWORD *)(v17 + 8);
      }
      bzero(*(void **)v17, 4 * *v21);
    }
    goto LABEL_42;
  }
}

WTF::Thread *WebCore::ChannelSplitterNode::setChannelCount@<X0>(WebCore::ChannelSplitterNode *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;

  if (*((_DWORD *)this + 21) == a2)
    return WebCore::AudioNode::setChannelCount(this, a2, (_QWORD *)a3);
  result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t WebCore::ChannelSplitterNode::setChannelCountMode@<X0>(uint64_t a1@<X0>, WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  if ((_DWORD)a2 == 2)
    return WebCore::AudioNode::setChannelCountMode(a1, a2, (_QWORD *)a3);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

WTF::Thread *WebCore::ChannelSplitterNode::setChannelInterpretation@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;

  if (a2 == 1)
    return WebCore::AudioNode::setChannelInterpretation(a1, 1u, (_QWORD *)a3);
  result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

WebCore::ConstantSourceNode *WebCore::ConstantSourceNode::ConstantSourceNode(WebCore::ConstantSourceNode *this, WebCore::BaseAudioContext *a2, float a3)
{
  _QWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _OWORD *v10;
  WTF::StringImpl *v12;

  v6 = (_QWORD *)WebCore::AudioScheduledSourceNode::AudioScheduledSourceNode((uint64_t)this, (uint64_t)a2, 17);
  *v6 = off_1E3369DB0;
  v6[3] = &unk_1E3369EE8;
  v6[19] = &unk_1E3369F28;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 27) = WebCore::AudioParam::AudioParam(v7, a2, (_DWORD **)&v12, 0, 1, a3, -3.4028e38, 3.4028e38);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  WTF::fastAlignedFree(0, v8);
  v10 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 28) = v10;
  *((_QWORD *)this + 29) = 128;
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  v10[17] = 0u;
  v10[18] = 0u;
  v10[19] = 0u;
  v10[20] = 0u;
  v10[21] = 0u;
  v10[22] = 0u;
  v10[23] = 0u;
  v10[24] = 0u;
  v10[25] = 0u;
  v10[26] = 0u;
  v10[27] = 0u;
  v10[28] = 0u;
  v10[29] = 0u;
  v10[30] = 0u;
  v10[31] = 0u;
  WebCore::AudioNode::addOutput(this, (void *)1);
  *((_BYTE *)this + 32) = 1;
  return this;
}

void WebCore::ConstantSourceNode::~ConstantSourceNode(WebCore::ConstantSourceNode *this, void *a2)
{
  void *v3;
  WebCore::AudioParam *v4;
  void *v5;
  WTF *v6;
  void *v7;

  *((_BYTE *)this + 32) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 28), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ConstantSourceNode *)((char *)this + 152), v3);
  WebCore::AudioNode::~AudioNode(this, v5);
}

{
  void *v3;
  WebCore::AudioParam *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *((_BYTE *)this + 32) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 28), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ConstantSourceNode *)((char *)this + 152), v3);
  WebCore::AudioNode::~AudioNode(this, v5);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::ConstantSourceNode::~ConstantSourceNode(WebCore::ConstantSourceNode *this, void *a2)
{
  void *v3;
  WebCore::AudioParam *v4;
  void *v5;
  WTF *v6;
  void *v7;

  *((_BYTE *)this + 8) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 25), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ConstantSourceNode *)((char *)this + 128), v3);
  WebCore::AudioNode::~AudioNode((WebCore::ConstantSourceNode *)((char *)this - 24), v5);
}

{
  void *v3;
  WebCore::AudioParam *v4;
  void *v5;
  WTF *v6;
  void *v7;

  *((_BYTE *)this - 120) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 9), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v3);
  WebCore::AudioNode::~AudioNode((WebCore::ConstantSourceNode *)((char *)this - 152), v5);
}

{
  void *v3;
  WebCore::AudioParam *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *((_BYTE *)this + 8) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 25), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ConstantSourceNode *)((char *)this + 128), v3);
  WebCore::AudioNode::~AudioNode((WebCore::ConstantSourceNode *)((char *)this - 24), v5);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  void *v3;
  WebCore::AudioParam *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *((_BYTE *)this - 120) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 9), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v3);
  WebCore::AudioNode::~AudioNode((WebCore::ConstantSourceNode *)((char *)this - 152), v5);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::ConstantSourceNode::process(WebCore::ConstantSourceNode *this, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 hasSampleAccurateValues;
  uint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::BaseAudioContext *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void **v36;
  _QWORD *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void **v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;

  v2 = a2;
  if (*((_DWORD *)this + 21))
    v4 = **((_QWORD **)this + 9);
  else
    v4 = 0;
  v5 = 24;
  if (!*(_BYTE *)(v4 + 32))
    v5 = 16;
  v6 = *(_QWORD *)(v4 + v5);
  v7 = *(unsigned int *)(v6 + 28);
  if (!*((_BYTE *)this + 32))
  {
    if (*(_DWORD *)(v6 + 28))
    {
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v11);
        if (!*(_BYTE *)(v12 + 24))
        {
          *(_BYTE *)(v12 + 24) = 1;
          v13 = *(void ***)(v12 + 8);
          v14 = (_QWORD *)(v12 + 16);
          if (v13)
            v14 = v13 + 1;
          else
            v13 = (void **)v12;
          bzero(*v13, 4 * *v14);
          v7 = *(unsigned int *)(v6 + 28);
        }
        ++v11;
      }
      while (v11 < v7);
    }
    return;
  }
  if (!*(_DWORD *)(v6 + 28))
    return;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  WebCore::AudioScheduledSourceNode::updateSchedulingInfo((uint64_t)this, a2, v6, &v56, &v55, (double *)&v54);
  if (!v55)
  {
    v15 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v15)
    {
      for (i = 0; i < v15; ++i)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * i);
        if (!*(_BYTE *)(v17 + 24))
        {
          *(_BYTE *)(v17 + 24) = 1;
          v18 = *(void ***)(v17 + 8);
          v19 = (_QWORD *)(v17 + 16);
          if (v18)
            v19 = v18 + 1;
          else
            v18 = (void **)v17;
          bzero(*v18, 4 * *v19);
          v15 = *(unsigned int *)(v6 + 28);
        }
      }
    }
    return;
  }
  hasSampleAccurateValues = WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 27));
  v9 = *((_QWORD *)this + 27);
  if (hasSampleAccurateValues)
  {
    if (!*(_BYTE *)(v9 + 104))
    {
      v38 = (float *)*((_QWORD *)this + 28);
      v39 = *(_QWORD *)(v9 + 8);
      if (v39)
      {
        v40 = *(_QWORD *)(v39 + 8);
        if (v40)
        {
          v41 = atomic_load((unint64_t *)(v40 + 240));
          v42 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v42)
            v42 = WTF::Thread::initializeCurrentTLS(0);
          if (v2 && v38 && v42 == v41)
            WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v9, v38, v2, *(_BYTE *)(v9 + 104) == 0);
        }
      }
      v43 = v55;
      v44 = *(unsigned int *)(v6 + 28);
      if (v55)
      {
        if (!*(_DWORD *)(v6 + 28))
          goto LABEL_84;
        v45 = **(uint64_t ***)(v6 + 16);
        *((_BYTE *)v45 + 24) = 0;
        v46 = *v45;
        if (!*v45)
          v46 = *(_QWORD *)v45[1];
        memcpy((void *)(v46 + 4 * v56), &v38[v56], 4 * v43);
        v47 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v47)
        {
          v48 = *(uint64_t **)(v6 + 16);
          do
          {
            v49 = *v48++;
            *(_BYTE *)(v49 + 24) = 0;
            --v47;
          }
          while (v47);
        }
      }
      else if (*(_DWORD *)(v6 + 28))
      {
        v50 = 0;
        do
        {
          v51 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v50);
          if (!*(_BYTE *)(v51 + 24))
          {
            *(_BYTE *)(v51 + 24) = 1;
            v52 = *(void ***)(v51 + 8);
            v53 = (_QWORD *)(v51 + 16);
            if (v52)
              v53 = v52 + 1;
            else
              v52 = (void **)v51;
            bzero(*v52, 4 * *v53);
            v44 = *(unsigned int *)(v6 + 28);
          }
          ++v50;
        }
        while (v50 < v44);
      }
      return;
    }
    v57 = 0.0;
    WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v9, &v57, 1u, 0);
    v10 = v57;
  }
  else
  {
    v20 = *(_QWORD *)(v9 + 8);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        v22 = atomic_load((unint64_t *)(v21 + 240));
        v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v23)
          v23 = WTF::Thread::initializeCurrentTLS(0);
        if (v23 == v22)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
          v25 = v24 ? (WebCore::BaseAudioContext *)(v24 - 32) : 0;
          v26 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v9 + 112), v25, *(float *)(v9 + 88), *(float *)(v9 + 96), *(float *)(v9 + 100));
          if ((v26 & 0xFF00000000) != 0)
            *(_DWORD *)(v9 + 88) = v26;
        }
      }
    }
    v10 = *(float *)(v9 + 88);
  }
  v27 = *(unsigned int *)(v6 + 28);
  if (v10 != 0.0)
  {
    if (*(_DWORD *)(v6 + 28))
    {
      v28 = *(uint64_t **)(v6 + 16);
      v29 = (uint64_t *)*v28;
      *((_BYTE *)v29 + 24) = 0;
      v30 = *v29;
      if (!*v29)
        v30 = *(_QWORD *)v29[1];
      v31 = v55;
      if (v55)
      {
        v32 = (float *)(v30 + 4 * v56);
        do
        {
          *v32++ = v10;
          --v31;
        }
        while (v31);
      }
      do
      {
        v33 = *v28++;
        *(_BYTE *)(v33 + 24) = 0;
        --v27;
      }
      while (v27);
      return;
    }
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x19554E094);
  }
  if (*(_DWORD *)(v6 + 28))
  {
    v34 = 0;
    do
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v34);
      if (!*(_BYTE *)(v35 + 24))
      {
        *(_BYTE *)(v35 + 24) = 1;
        v36 = *(void ***)(v35 + 8);
        v37 = (_QWORD *)(v35 + 16);
        if (v36)
          v37 = v36 + 1;
        else
          v36 = (void **)v35;
        bzero(*v36, 4 * *v37);
        v27 = *(unsigned int *)(v6 + 28);
      }
      ++v34;
    }
    while (v34 < v27);
  }
}

BOOL WebCore::ConstantSourceNode::propagatesSilence(WebCore::ConstantSourceNode *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)((char *)this + 176);
  v2 = atomic_load((unsigned int *)this + 44);
  if (v2 != 2)
  {
    v3 = atomic_load(v1);
    if (v3 != 1)
      return 1;
  }
  v4 = atomic_load(v1);
  return v4 == 3;
}

uint64_t *WebCore::ConvolverNode::setBufferForBindings@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::Thread *v36;
  void *v37;
  WTF::Thread *v38;
  uint64_t v39;
  int v41;
  unsigned __int8 *v42;
  WTF *v44;
  uint64_t v45;
  WebCore::AudioNodeOutput *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  char *v77;

  v6 = (unint64_t)a3;
  if (!*a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v7 = (uint64_t)result;
  v8 = *((unsigned int *)result + 12);
  if ((_DWORD)v8 == -1)
    goto LABEL_126;
  v4 = a2;
  v9 = *(float *)(*a2 + 4);
  v3 = result + 5;
  v77 = &v76;
  v10 = ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v77, result + 5);
  if (v9 != *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10) + 160))
  {
LABEL_4:
    result = (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)v6 = 6;
    *(_BYTE *)(v6 + 16) = 1;
    return result;
  }
  v11 = *v4;
  v12 = *(unsigned int **)(*v4 + 16);
  if (v12)
  {
    v14 = *v12;
    v13 = v12 + 2;
    v5 = v14;
    if (v14)
    {
      if (*MEMORY[0x1E0CC10F0])
        goto LABEL_127;
      v15 = 8 * v5;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)v13 + 32);
        if (!v16)
          goto LABEL_137;
        v17 = *(_QWORD *)(v16 + 16);
        if (!v17)
          goto LABEL_137;
        v18 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        v19 = v17 & 0x3FFFFFFFFLL;
        if (v18 && v19 + v18 == 0)
          goto LABEL_137;
        v13 += 2;
        v15 -= 8;
      }
      while (v15);
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_19:
  v21 = *(_QWORD *)(v11 + 8);
  while (2)
  {
    if (v5 > 4 || ((1 << v5) & 0x16) == 0)
      goto LABEL_4;
    v74 = v3;
    v75 = v7;
    v73 = (_QWORD *)v6;
    v7 = WTF::fastMalloc((WTF *)0x38);
    WebCore::AudioBus::AudioBus((WebCore::AudioBus *)v7, (void *)v5, v21, 0);
    v22 = 0;
    v23 = v5;
    v24 = MEMORY[0x1E0CC10F8];
    do
    {
      WebCore::AudioBuffer::channelData(*v4, v22, &v77);
      v5 = (uint64_t)v77;
      v26 = *((_QWORD *)v77 + 4);
      if (!v26 || (v27 = *(_QWORD *)(v26 + 16)) == 0)
      {
LABEL_31:
        v6 = 0;
        goto LABEL_34;
      }
      v28 = *(_QWORD *)(v24 + 56);
      if (v28 && (*(_BYTE *)(v24 + 34) || !*MEMORY[0x1E0CC10F0]))
      {
        if (!((v27 & 0x3FFFFFFFFLL) + v28))
          goto LABEL_31;
        v6 = *((_QWORD *)v77 + 3);
        if (v6 && (*(_BYTE *)(v24 + 34) || !*MEMORY[0x1E0CC10F0]))
          v6 = (v6 & 0x3FFFFFFFFLL) + v28;
      }
      else
      {
        v6 = *((_QWORD *)v77 + 3);
      }
LABEL_34:
      if (v22 < *(unsigned int *)(v7 + 28))
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v22);
        v30 = *(WTF ***)(v29 + 8);
        *(_QWORD *)(v29 + 8) = 0;
        if (v30)
        {
          WTF::fastAlignedFree(*v30, v25);
          WTF::fastFree((WTF *)v30, v31);
        }
        *(_QWORD *)v29 = v6;
        *(_QWORD *)(v29 + 16) = v21;
        *(_BYTE *)(v29 + 24) = 0;
        *(_QWORD *)(v7 + 8) = v21;
      }
      if (*(_DWORD *)v5 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v5;
      ++v22;
    }
    while (v23 != v22);
    *(_DWORD *)(v7 + 52) = *(_DWORD *)(*v4 + 4);
    v3 = (uint64_t *)v75;
    v32 = *(unsigned int *)(v75 + 48);
    if ((_DWORD)v32 == -1
      || (v6 = (unint64_t)&v76,
          v77 = &v76,
          v33 = ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v32])(&v77, v74), v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33) ^ 1, v5 = WTF::fastMalloc((WTF *)0x28), WebCore::Reverb::Reverb((WebCore::Reverb *)v5, (WebCore::AudioBus *)v7, 0x80uLL, 0x8000, v34, *(unsigned __int8 *)(v75 + 169)), v35 = *(unsigned int *)(v75 + 48), (_DWORD)v35 == -1))
    {
LABEL_126:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_127:
      v67 = 8 * v5;
      while (1)
      {
        v68 = *(_QWORD *)(*(_QWORD *)v13 + 32);
        if (!v68)
          break;
        v69 = *(_QWORD *)(v68 + 16);
        if (!v69)
          break;
        v70 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v70)
        {
          v71 = v69 & 0x3FFFFFFFFLL;
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v71 + v70 == 0)
            break;
        }
        v13 += 2;
        v67 -= 8;
        if (!v67)
          goto LABEL_19;
      }
LABEL_137:
      v21 = 0;
      continue;
    }
    break;
  }
  v77 = &v76;
  v36 = (WTF::Thread *)((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v35])(&v77, v74);
  v38 = v36;
  v39 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v39)
    v39 = WTF::Thread::initializeCurrentTLS(v36);
  if (v39 == *((_QWORD *)v38 + 35))
  {
    v41 = *((_DWORD *)v38 + 72) + 1;
  }
  else
  {
    if (__ldaxr((unsigned __int8 *)v38 + 292))
    {
      __clrex();
      goto LABEL_55;
    }
    if (__stxr(1u, (unsigned __int8 *)v38 + 292))
LABEL_55:
      MEMORY[0x19AEA534C]();
    *((_QWORD *)v38 + 35) = v39;
    v41 = 1;
  }
  *((_DWORD *)v38 + 72) = v41;
  v42 = (unsigned __int8 *)(v75 + 168);
  if (__ldaxr((unsigned __int8 *)(v75 + 168)))
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stxr(1u, v42))
LABEL_60:
    MEMORY[0x19AEA534C](v75 + 168);
  v44 = *(WTF **)(v75 + 152);
  *(_QWORD *)(v75 + 152) = v5;
  if (v44)
    std::default_delete<WebCore::Reverb>::operator()[abi:sn180100](v44, v37);
  v45 = *v4;
  *v4 = 0;
  result = *(uint64_t **)(v75 + 160);
  *(_QWORD *)(v75 + 160) = v45;
  if (result)
  {
    result = (uint64_t *)WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)result, v37);
    v45 = *(_QWORD *)(v75 + 160);
  }
  if (v45)
  {
    if (*(_DWORD *)(v75 + 84))
      v46 = **(WebCore::AudioNodeOutput ***)(v75 + 72);
    else
      v46 = 0;
    if (*(_DWORD *)(v75 + 68))
      v47 = **(_QWORD **)(v75 + 56);
    else
      v47 = 0;
    v48 = *(_QWORD *)(v47 + 64);
    v49 = *(_DWORD *)(v48 + 140);
    if (v49 == 2)
    {
      v50 = *(_DWORD *)(v48 + 136);
      goto LABEL_104;
    }
    v51 = *(_QWORD *)(v47 + 40);
    if (v51)
    {
      v52 = *(unsigned int *)(v51 - 4);
      v53 = v51 + 8 * v52;
      if (*(_DWORD *)(v51 - 12))
      {
        v54 = v51;
        if ((_DWORD)v52)
        {
          v55 = 8 * v52;
          v54 = v51;
          while ((unint64_t)(*(_QWORD *)v54 + 1) <= 1)
          {
            v54 += 8;
            v55 -= 8;
            if (!v55)
            {
              v54 = v53;
              goto LABEL_84;
            }
          }
        }
        goto LABEL_84;
      }
      v54 = v51 + 8 * v52;
    }
    else
    {
      v54 = 0;
      v52 = 0;
    }
    v53 = v51 + 8 * v52;
LABEL_84:
    if (v51)
      v51 += 8 * *(unsigned int *)(v51 - 4);
    if (v51 == v54)
    {
      v56 = 0;
    }
    else
    {
      v56 = 0;
      do
      {
        v57 = v54 + 8;
        v58 = *(_DWORD *)(*(_QWORD *)v54 + 8);
        if (v56 <= v58)
          v56 = v58;
        v54 = v53;
        if (v57 != v53)
        {
          v54 = v57;
          while ((unint64_t)(*(_QWORD *)v54 + 1) <= 1)
          {
            v54 += 8;
            if (v54 == v53)
            {
              v54 = v53;
              break;
            }
          }
        }
      }
      while (v54 != v51);
    }
    if (v56 <= 1)
      v50 = 1;
    else
      v50 = v56;
    if (v49 == 1)
    {
      v59 = *(_DWORD *)(v48 + 136);
      if (v59 < v50)
        v50 = v59;
    }
LABEL_104:
    v60 = *(_DWORD **)(v45 + 16);
    if (v60)
      LOBYTE(v60) = *v60 == 1;
    if (((v50 == 1) & v60) != 0)
      v61 = 1;
    else
      v61 = 2;
    result = (uint64_t *)WebCore::AudioNodeOutput::setNumberOfChannels(v46, v61);
  }
  v62 = __ldxr(v42);
  if (v62 != 1)
  {
    __clrex();
    goto LABEL_114;
  }
  if (__stlxr(0, v42))
LABEL_114:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)(v75 + 168));
  v63 = *((_DWORD *)v38 + 72) - 1;
  *((_DWORD *)v38 + 72) = v63;
  if (!v63)
  {
    *((_QWORD *)v38 + 35) = 0;
    result = (uint64_t *)((char *)v38 + 292);
    v64 = __ldxr((unsigned __int8 *)v38 + 292);
    if (v64 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        goto LABEL_121;
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
LABEL_121:
  *v73 = 0;
  v73[1] = 0;
  v73[2] = 0;
  do
  {
    v65 = __ldaxr((unsigned int *)v7);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, (unsigned int *)v7));
  if (!v66)
  {
    atomic_store(1u, (unsigned int *)v7);
    v77 = (char *)v7;
    return WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v77, v37);
  }
  return result;
}

void WebCore::ConvolverNode::~ConvolverNode(WebCore::ConvolverNode *this, void *a2)
{
  WTF **v3;
  WTF *v4;

  *((_BYTE *)this + 32) = 0;
  v3 = (WTF **)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    std::default_delete<WebCore::Reverb>::operator()[abi:sn180100](v4, a2);
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  WTF **v3;
  WTF *v4;
  bmalloc::api *v5;
  void *v6;

  *((_BYTE *)this + 32) = 0;
  v3 = (WTF **)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    std::default_delete<WebCore::Reverb>::operator()[abi:sn180100](v4, a2);
  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void `non-virtual thunk to'WebCore::ConvolverNode::~ConvolverNode(WebCore::ConvolverNode *this, void *a2)
{
  WTF **v3;
  WTF *v4;

  *((_BYTE *)this + 8) = 0;
  v3 = (WTF **)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    std::default_delete<WebCore::Reverb>::operator()[abi:sn180100](v4, a2);
  WebCore::AudioNode::~AudioNode((WebCore::ConvolverNode *)((char *)this - 24), a2);
}

{
  WTF **v3;
  WTF *v4;
  bmalloc::api *v5;
  void *v6;

  *((_BYTE *)this + 8) = 0;
  v3 = (WTF **)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    std::default_delete<WebCore::Reverb>::operator()[abi:sn180100](v4, a2);
  WebCore::AudioNode::~AudioNode((WebCore::ConvolverNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::ConvolverNode::process(WebCore::ConvolverNode *this, vDSP_Length a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t j;
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  const WebCore::AudioBus **v14;
  int v15;
  uint64_t v16;
  int v17;
  const WebCore::AudioBus **v18;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  void **v22;
  _QWORD *v23;

  if (*((_DWORD *)this + 21))
    v2 = **((_QWORD **)this + 9);
  else
    v2 = 0;
  v3 = 24;
  if (!*(_BYTE *)(v2 + 32))
    v3 = 16;
  v4 = *(_QWORD *)(v2 + v3);
  v5 = (unsigned __int8 *)this + 168;
  do
  {
    while (1)
    {
      v6 = *v5;
      if ((v6 & 1) != 0)
      {
        v19 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v19)
        {
          for (i = 0; i < v19; ++i)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * i);
            if (!*(_BYTE *)(v21 + 24))
            {
              *(_BYTE *)(v21 + 24) = 1;
              v22 = *(void ***)(v21 + 8);
              v23 = (_QWORD *)(v21 + 16);
              if (v22)
                v23 = v22 + 1;
              else
                v22 = (void **)v21;
              bzero(*v22, 4 * *v23);
              v19 = *(unsigned int *)(v4 + 28);
            }
          }
        }
        return;
      }
      v7 = __ldaxr(v5);
      if (v7 == v6)
        break;
      __clrex();
    }
  }
  while (__stxr(v6 | 1, v5));
  if (*((_BYTE *)this + 32) && *((_QWORD *)this + 19))
  {
    if (*((_DWORD *)this + 17))
      v8 = **((_QWORD **)this + 7);
    else
      v8 = 0;
    if (*(_DWORD *)(v8 + 28) == 1 && !*(_DWORD *)(*(_QWORD *)(v8 + 64) + 140))
    {
      v16 = **(_QWORD **)(v8 + 16);
      v17 = *(unsigned __int8 *)(v16 + 32);
      v18 = (const WebCore::AudioBus **)(v16 + 24);
      v14 = (const WebCore::AudioBus **)(v16 + 16);
      if (v17)
        v14 = v18;
    }
    else
    {
      v14 = (const WebCore::AudioBus **)(v8 + 80);
    }
    WebCore::Reverb::process(*((WebCore::Reverb **)this + 19), *v14, (WebCore::AudioBus *)v4, a2);
  }
  else
  {
    v9 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v9)
    {
      for (j = 0; j < v9; ++j)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * j);
        if (!*(_BYTE *)(v11 + 24))
        {
          *(_BYTE *)(v11 + 24) = 1;
          v12 = *(void ***)(v11 + 8);
          v13 = (_QWORD *)(v11 + 16);
          if (v12)
            v13 = v12 + 1;
          else
            v12 = (void **)v11;
          bzero(*v12, 4 * *v13);
          v9 = *(unsigned int *)(v4 + 28);
        }
      }
    }
  }
  v15 = __ldxr(v5);
  if (v15 == 1)
  {
    if (!__stlxr(0, v5))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
}

uint64_t WebCore::ConvolverNode::tailTime(uint64_t this)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::ConvolverNode *v7;
  char v8;
  char *v9;

  v1 = (unsigned __int8 *)(this + 168);
  while (1)
  {
    v2 = *v1;
    if ((v2 & 1) != 0)
      break;
    v3 = __ldaxr(v1);
    if (v3 == v2)
    {
      if (!__stxr(v2 | 1, v1))
      {
        if (*(_QWORD *)(this + 152))
        {
          v4 = *(unsigned int *)(this + 48);
          if ((_DWORD)v4 == -1)
          {
            v7 = (WebCore::ConvolverNode *)std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::ConvolverNode::latencyTime(v7);
          }
          v9 = &v8;
          v5 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v9, this + 40);
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
        }
        v6 = __ldxr(v1);
        if (v6 == 1)
        {
          if (!__stlxr(0, v1))
            return this;
        }
        else
        {
          __clrex();
        }
        return WTF::Lock::unlockSlow((WTF::Lock *)v1);
      }
    }
    else
    {
      __clrex();
    }
  }
  return this;
}

uint64_t WebCore::ConvolverNode::latencyTime(uint64_t this)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::ConvolverNode *v7;
  char v8;
  char *v9;

  v1 = (unsigned __int8 *)(this + 168);
  while (1)
  {
    v2 = *v1;
    if ((v2 & 1) != 0)
      break;
    v3 = __ldaxr(v1);
    if (v3 == v2)
    {
      if (!__stxr(v2 | 1, v1))
      {
        if (*(_QWORD *)(this + 152))
        {
          v4 = *(unsigned int *)(this + 48);
          if ((_DWORD)v4 == -1)
          {
            v7 = (WebCore::ConvolverNode *)std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::ConvolverNode::requiresTailProcessing(v7);
          }
          v9 = &v8;
          v5 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v9, this + 40);
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
        }
        v6 = __ldxr(v1);
        if (v6 == 1)
        {
          if (!__stlxr(0, v1))
            return this;
        }
        else
        {
          __clrex();
        }
        return WTF::Lock::unlockSlow((WTF::Lock *)v1);
      }
    }
    else
    {
      __clrex();
    }
  }
  return this;
}

uint64_t WebCore::ConvolverNode::requiresTailProcessing(WebCore::ConvolverNode *this)
{
  return 1;
}

WTF::Thread *WebCore::ConvolverNode::setChannelCount@<X0>(WebCore::ConvolverNode *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;

  if (a2 < 3)
    return WebCore::AudioNode::setChannelCount(this, a2, (_QWORD *)a3);
  result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t WebCore::ConvolverNode::setChannelCountMode@<X0>(uint64_t a1@<X0>, WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  if ((_DWORD)a2)
    return WebCore::AudioNode::setChannelCountMode(a1, a2, (_QWORD *)a3);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *WebCore::ConvolverNode::checkNumberOfChannelsForInput(WebCore::ConvolverNode *this, uint64_t a2)
{
  uint64_t *v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WebCore::AudioNodeOutput *v24;

  v2 = (uint64_t *)a2;
  v4 = (unsigned __int8 *)this + 168;
  while (1)
  {
    v5 = *v4;
    if ((v5 & 1) != 0)
      return WebCore::AudioNodeInput::updateInternalBus(v2, (void *)a2);
    v6 = __ldaxr(v4);
    if (v6 == v5)
    {
      if (!__stxr(v5 | 1, v4))
      {
        v7 = *((_QWORD *)this + 20);
        if (v7 && (v8 = *(int **)(v7 + 16)) != 0)
          v9 = *v8;
        else
          v9 = 0;
        v10 = __ldxr(v4);
        if (v10 == 1)
        {
          if (!__stlxr(0, v4))
          {
            if (!v7)
              return WebCore::AudioNodeInput::updateInternalBus(v2, (void *)a2);
            goto LABEL_17;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v4);
        if (!v7)
          return WebCore::AudioNodeInput::updateInternalBus(v2, (void *)a2);
LABEL_17:
        v11 = v2[8];
        v12 = *(_DWORD *)(v11 + 140);
        if (v12 == 2)
        {
          v13 = *(_DWORD *)(v11 + 136);
LABEL_49:
          if (v13 == 1 && v9 == 1)
            a2 = 1;
          else
            a2 = 2;
          if (*((_BYTE *)this + 32) && (_DWORD)a2 != *(_DWORD *)(**((_QWORD **)this + 9) + 8))
            *((_BYTE *)this + 32) = 0;
          if (!*((_BYTE *)this + 32))
          {
            if (*((_DWORD *)this + 21))
              v24 = (WebCore::AudioNodeOutput *)**((_QWORD **)this + 9);
            else
              v24 = 0;
            WebCore::AudioNodeOutput::setNumberOfChannels(v24, a2);
            *((_BYTE *)this + 32) = 1;
          }
          return WebCore::AudioNodeInput::updateInternalBus(v2, (void *)a2);
        }
        v14 = v2[5];
        if (v14)
        {
          v15 = *(unsigned int *)(v14 - 4);
          v16 = v14 + 8 * v15;
          if (*(_DWORD *)(v14 - 12))
          {
            v17 = v2[5];
            if ((_DWORD)v15)
            {
              v18 = 8 * v15;
              v17 = v2[5];
              while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
              {
                v17 += 8;
                v18 -= 8;
                if (!v18)
                {
                  v17 = v16;
                  goto LABEL_29;
                }
              }
            }
            goto LABEL_29;
          }
          v17 = v14 + 8 * v15;
        }
        else
        {
          v17 = 0;
          v15 = 0;
        }
        v16 = v14 + 8 * v15;
LABEL_29:
        if (v14)
          v14 += 8 * *(unsigned int *)(v14 - 4);
        if (v14 == v17)
        {
          v19 = 0;
        }
        else
        {
          v19 = 0;
          do
          {
            v20 = v17 + 8;
            v21 = *(_DWORD *)(*(_QWORD *)v17 + 8);
            if (v19 <= v21)
              v19 = v21;
            v17 = v16;
            if (v20 != v16)
            {
              v17 = v20;
              while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
              {
                v17 += 8;
                if (v17 == v16)
                {
                  v17 = v16;
                  break;
                }
              }
            }
          }
          while (v17 != v14);
        }
        if (v19 <= 1)
          v13 = 1;
        else
          v13 = v19;
        if (v12 == 1)
        {
          v22 = *(_DWORD *)(v11 + 136);
          if (v22 < v13)
            v13 = v22;
        }
        goto LABEL_49;
      }
    }
    else
    {
      __clrex();
    }
  }
}

uint64_t WebCore::BaseAudioContext::logger(WebCore::BaseAudioContext *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t WebCore::BaseAudioContext::logIdentifier(WebCore::BaseAudioContext *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t `non-virtual thunk to'WebCore::BaseAudioContext::logger(WebCore::BaseAudioContext *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t `non-virtual thunk to'WebCore::BaseAudioContext::logIdentifier(WebCore::BaseAudioContext *this)
{
  return *((_QWORD *)this + 2);
}

void WebCore::BiquadDSPKernel::~BiquadDSPKernel(WTF **this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  WTF::fastAlignedFree(this[15], a2);
  WTF::fastAlignedFree(this[13], v3);
  WTF::fastAlignedFree(this[11], v4);
  WTF::fastAlignedFree(this[9], v5);
  WTF::fastAlignedFree(this[7], v6);
  WTF::fastAlignedFree(this[5], v7);
  WTF::fastAlignedFree(this[3], v8);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  WTF::fastAlignedFree(this[15], a2);
  WTF::fastAlignedFree(this[13], v3);
  WTF::fastAlignedFree(this[11], v4);
  WTF::fastAlignedFree(this[9], v5);
  WTF::fastAlignedFree(this[7], v6);
  WTF::fastAlignedFree(this[5], v7);
  WTF::fastAlignedFree(this[3], v8);
  WTF::fastFree((WTF *)this, v9);
}

double WebCore::BiquadDSPKernel::reset(WebCore::BiquadDSPKernel *this)
{
  _QWORD *v1;
  _QWORD *v2;
  double result;

  v1 = (_QWORD *)*((_QWORD *)this + 13);
  *v1 = 0;
  v1[1] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  *v2 = 0;
  v2[1] = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

uint64_t WebCore::AudioDSPKernelProcessor::numberOfChannels(WebCore::AudioDSPKernelProcessor *this)
{
  return *((unsigned int *)this + 3);
}

void WebCore::ChannelMergerNode::~ChannelMergerNode(WebCore::ChannelMergerNode *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

double WebCore::ChannelMergerNode::tailTime(WebCore::ChannelMergerNode *this)
{
  return 0.0;
}

double WebCore::ChannelMergerNode::latencyTime(WebCore::ChannelMergerNode *this)
{
  return 0.0;
}

uint64_t WebCore::ChannelMergerNode::requiresTailProcessing(WebCore::ChannelMergerNode *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::ChannelMergerNode::~ChannelMergerNode(WebCore::ChannelMergerNode *this, void *a2)
{
  WebCore::AudioNode::~AudioNode((WebCore::ChannelMergerNode *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioNode::~AudioNode((WebCore::ChannelMergerNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::ChannelSplitterNode::~ChannelSplitterNode(WebCore::ChannelSplitterNode *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

double WebCore::ChannelSplitterNode::tailTime(WebCore::ChannelSplitterNode *this)
{
  return 0.0;
}

double WebCore::ChannelSplitterNode::latencyTime(WebCore::ChannelSplitterNode *this)
{
  return 0.0;
}

uint64_t WebCore::ChannelSplitterNode::requiresTailProcessing(WebCore::ChannelSplitterNode *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::ChannelSplitterNode::~ChannelSplitterNode(WebCore::ChannelSplitterNode *this, void *a2)
{
  WebCore::AudioNode::~AudioNode((WebCore::ChannelSplitterNode *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioNode::~AudioNode((WebCore::ChannelSplitterNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

double WebCore::ConstantSourceNode::tailTime(WebCore::ConstantSourceNode *this)
{
  return 0.0;
}

double WebCore::ConstantSourceNode::latencyTime(WebCore::ConstantSourceNode *this)
{
  return 0.0;
}

void WebCore::BiquadFilterNode::~BiquadFilterNode(WebCore::BiquadFilterNode *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::BiquadFilterNode::~BiquadFilterNode(WebCore::BiquadFilterNode *this, void *a2)
{
  uint64_t v3;
  WebCore::AudioNode *v4;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::BiquadFilterNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
}

{
  uint64_t v3;
  WebCore::AudioNode *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::BiquadFilterNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_3RefIN7WebCore11AudioBufferENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEENS4_9ExceptionELj0EE11whenSettledIZNS4_16BaseAudioContext15decodeAudioDataEONS3_IN3JSC11ArrayBufferENS6_ISG_EENS8_ISG_EEEEONS_6RefPtrINS4_19AudioBufferCallbackENS6_ISM_EENS8_ISM_EEEESQ_ONS3_INS4_15DeferredPromiseENS6_ISR_EENS8_ISR_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_SB_EEE_vJS1A_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E336A138;
  WebCore::BaseAudioContext::decodeAudioData(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_3RefIN7WebCore11AudioBufferENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEENS4_9ExceptionELj0EE11whenSettledIZNS4_16BaseAudioContext15decodeAudioDataEONS3_IN3JSC11ArrayBufferENS6_ISG_EENS8_ISG_EEEEONS_6RefPtrINS4_19AudioBufferCallbackENS6_ISM_EENS8_ISM_EEEESQ_ONS3_INS4_15DeferredPromiseENS6_ISR_EENS8_ISR_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_SB_EEE_vJS1A_EED0Ev(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E336A138;
  WebCore::BaseAudioContext::decodeAudioData(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0::~$_0(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_3RefIN7WebCore11AudioBufferENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEENS4_9ExceptionELj0EE11whenSettledIZNS4_16BaseAudioContext15decodeAudioDataEONS3_IN3JSC11ArrayBufferENS6_ISG_EENS8_ISG_EEEEONS_6RefPtrINS4_19AudioBufferCallbackENS6_ISM_EENS8_ISM_EEEESQ_ONS3_INS4_15DeferredPromiseENS6_ISR_EENS8_ISR_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_SB_EEE_vJS1A_EE4callES1A_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t (***v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)();
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _OWORD v24[2];
  _BYTE v25[16];
  int v26;
  uint64_t (***v27)();

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&v24[0] = v2;
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)((char *)v24 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  *((_QWORD *)&v24[1] + 1) = v5;
  v25[0] = 0;
  v26 = -1;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E336A160[v6])(&v27, v25, a2);
    v26 = v6;
  }
  v7 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v7 = off_1E336A180;
  *(_OWORD *)(v7 + 8) = v24[0];
  *(_QWORD *)(v7 + 24) = *(_QWORD *)&v24[1];
  v8 = *((_QWORD *)&v24[1] + 1);
  memset(v24, 0, sizeof(v24));
  *(_QWORD *)(v7 + 32) = v8;
  *(_BYTE *)(v7 + 40) = 0;
  *(_DWORD *)(v7 + 56) = -1;
  v9 = v26;
  if (v26 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E336A160[v26])(&v27, v7 + 40, v25);
    *(_DWORD *)(v7 + 56) = v9;
  }
  v10 = WTF::fastMalloc((WTF *)0x10);
  v11 = v10;
  *(_DWORD *)v10 = 1;
  v12 = (unsigned int *)(v3 + 24);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(v10 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 + 1, v12));
  v15 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v15 = &off_1E336A208;
  v15[1] = (uint64_t (**)())v3;
  v15[2] = (uint64_t (**)())v11;
  v15[3] = (uint64_t (**)())v7;
  v27 = v15;
  v16 = *(_QWORD *)(v3 + 8);
  if (!v16)
  {
    v27 = 0;
    v19 = &off_1E336A208;
    goto LABEL_15;
  }
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
  {
    v27 = 0;
    goto LABEL_14;
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v17 - 96) + 104))(v17 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v18, 25, (uint64_t *)&v27);
  v15 = v27;
  v27 = 0;
  if (v15)
  {
LABEL_14:
    v19 = *v15;
LABEL_15:
    ((void (*)(uint64_t (***)()))v19[1])(v15);
  }
  if (v26 != -1)
    ((void (*)(uint64_t (****)(), _BYTE *))off_1E336A150[v26])(&v27, v25);
  v26 = -1;
  v20 = (_DWORD *)*((_QWORD *)&v24[1] + 1);
  *((_QWORD *)&v24[1] + 1) = 0;
  if (v20)
  {
    if (v20[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
    else
      --v20[4];
  }
  v21 = *(_DWORD **)&v24[1];
  *(_QWORD *)&v24[1] = 0;
  if (v21)
  {
    if (v21[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[4];
  }
  v22 = (_DWORD *)*((_QWORD *)&v24[0] + 1);
  *((_QWORD *)&v24[0] + 1) = 0;
  if (v22)
  {
    if (v22[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
    else
      --v22[4];
  }
  return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)v24);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioContext::decodeAudioData(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<std::experimental>,WTF::DefaultRefDerefTraits<std::experimental>>,WebCore::Exception> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  char v7;

  *(_QWORD *)a1 = off_1E336A180;
  v2 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E336A150[v2])(&v7, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  v3 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)(a1 + 8));
  return a1;
}

{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  void *v6;
  char v8;

  *(_QWORD *)a1 = off_1E336A180;
  v2 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E336A150[v2])(&v8, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  v3 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v6);
}

WTF **WTF::Detail::CallableWrapper<WebCore::BaseAudioContext::decodeAudioData(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::AudioBufferCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<std::experimental>,WTF::DefaultRefDerefTraits<std::experimental>>,WebCore::Exception> &&)::{lambda(void)#1},void>::call(WTF **result)
{
  WTF *v1;
  int v2;
  WTF **v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  void *v12;
  WTF *v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  v1 = result[1];
  v2 = *((_DWORD *)v1 + 22);
  if (!v2)
    goto LABEL_22;
  v3 = result;
  *((_DWORD *)v1 + 22) = v2 - 1;
  v4 = *((_DWORD *)result + 14);
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = (uint64_t)result[4];
      v6 = *((_BYTE *)v3 + 40);
      v7 = v3[6];
      v3[6] = 0;
      v16 = 0;
      v14[0] = v6;
      if (v7)
        *(_DWORD *)v7 += 2;
      v15 = v7;
      WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
      v9 = v15;
      v15 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          WTF::StringImpl::destroy(v9, v8);
          if (v7)
          {
LABEL_10:
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v8);
            else
              *(_DWORD *)v7 -= 2;
          }
LABEL_12:
          result = (WTF **)v3[3];
          if (result)
            return (WTF **)(*((uint64_t (**)(WTF **, _QWORD))*result + 5))(result, 0);
          return result;
        }
        *(_DWORD *)v9 -= 2;
      }
      if (v7)
        goto LABEL_10;
      goto LABEL_12;
    }
    result = (WTF **)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_22:
    __break(0xC471u);
    return result;
  }
  v10 = (uint64_t)result[4];
  v11 = v3[5];
  v3[5] = 0;
  WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::AudioBuffer>>(v10, v11);
  v13 = v3[2];
  if (v13)
    (*(void (**)(WTF *, WebCore::JSDOMGlobalObject *))(*(_QWORD *)v13 + 40))(v13, v11);
  return WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v11, v12);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::AudioBuffer>>(uint64_t result, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  WebCore::AudioBuffer *v8;
  objc_class *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  int v16;
  _BYTE v17[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(WebCore **)v5;
    v7 = *((_QWORD *)v6 + 7);
    MEMORY[0x19AEA3294](v17, v7);
    v9 = (objc_class *)WebCore::toJS(v6, **(JSC::JSGlobalObject ***)(v4 + 32), a2, v8);
    v10 = *(_QWORD *)(v7 + 16);
    if (!v10)
    {
      WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v9);
      v10 = *(_QWORD *)(v7 + 16);
      if (!v10)
        return MEMORY[0x19AEA32A0](v17);
    }
    v11 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v11 + 64))(v11))
    {
LABEL_12:
      WebCore::reportException(v6, v10, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v17);
    }
    v12 = v11[43];
    if (*(_QWORD *)(v7 + 24) == v10)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v12 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v12)
      goto LABEL_12;
    v13 = (unsigned __int8 *)(v12 + 40);
    if (__ldaxr((unsigned __int8 *)(v12 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v12 + 40);
LABEL_20:
    v15 = *(unsigned __int8 *)(v12 + 41);
    v16 = __ldxr(v13);
    if (v16 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_25:
        if (!v15)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E336A1A8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E336A1D8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E336A1A8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E336A1D8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 16);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v81);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v101);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t std::default_delete<WebCore::Reverb>::operator()[abi:sn180100](WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::ReverbConvolver **v7;
  uint64_t v8;
  WebCore::ReverbConvolver *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  unsigned int *v14;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v14 = v3;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v14, a2);
    }
  }
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    v7 = (WebCore::ReverbConvolver **)*((_QWORD *)this + 2);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        WebCore::ReverbConvolver::~ReverbConvolver(v9, a2);
        WTF::fastFree(v10, v11);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v12 = (WTF *)*((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Vector<WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v4 + 16 * v5);
      v10 = v4;
      do
      {
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        v11 = *(WTF **)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)v8 = v11;
        LODWORD(v11) = *((_DWORD *)v10 + 2);
        *((_DWORD *)v10 + 2) = 0;
        *(_DWORD *)(v8 + 8) = (_DWORD)v11;
        LODWORD(v11) = *((_DWORD *)v10 + 3);
        *((_DWORD *)v10 + 3) = 0;
        *(_DWORD *)(v8 + 12) = (_DWORD)v11;
        v12 = *((unsigned int *)v10 + 3);
        if ((_DWORD)v12)
        {
          v13 = *(WTF **)v10;
          v14 = 8 * v12;
          do
          {
            v15 = *(_DWORD **)v13;
            *(_QWORD *)v13 = 0;
            if (v15)
            {
              if (v15[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
              else
                --v15[4];
            }
            v13 = (WTF *)((char *)v13 + 8);
            v14 -= 8;
          }
          while (v14);
        }
        v16 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v16, v7);
        }
        v8 += 16;
        v10 = (WTF *)((char *)v10 + 16);
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  _DWORD *v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (_QWORD *)v9;
      v12 = 8 * v8;
      v13 = v7;
      do
      {
        v14 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        *v11 = v14;
        v15 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (v15[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[4];
        }
        ++v11;
        v13 = (WTF *)((char *)v13 + 8);
        v12 -= 8;
      }
      while (v12);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::BaseAudioContext>(WebCore::BaseAudioContext &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;

  *a1 = &off_1E336A208;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v10 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v10 + 16);
      *((_QWORD *)v4 + 1) = 0;
      v11 = (unsigned int *)(v10 + 24);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)(v10 + 24));
        v14 = v4;
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v4 = v14;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::BaseAudioContext>(WebCore::BaseAudioContext &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;

  *(_QWORD *)this = &off_1E336A208;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v10 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v10 + 16);
      *((_QWORD *)v4 + 1) = 0;
      v11 = (unsigned int *)(v10 + 24);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)(v10 + 24));
        v14 = v4;
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v4 = v14;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::BaseAudioContext>(WebCore::BaseAudioContext &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

char *WTF::Vector<WebCore::BaseAudioContext::TailProcessingNode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  WTF *v23;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v14 = *(WTF **)a1;
        return (char *)v14 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_QWORD *)(v11 + v13) = *(_QWORD *)((char *)v5 + v13);
          *(_QWORD *)((char *)v5 + v13) = 0;
          v13 += 8;
        }
        while (8 * v6 != v13);
        v14 = *(WTF **)a1;
        if (v5)
        {
          if (v14 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v14 = *(WTF **)a1;
        }
        return (char *)v14 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x195550AE0);
    }
  }
  v15 = *(unsigned int *)(a1 + 8);
  v16 = v15 + (v15 >> 2);
  if (v16 >= 0x10)
    v17 = v16 + 1;
  else
    v17 = 16;
  if (v17 <= a2)
    v18 = a2;
  else
    v18 = v17;
  if (v18 > v15)
  {
    if (v18 >> 29)
      goto LABEL_35;
    v19 = *(unsigned int *)(a1 + 12);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v18));
    *(_DWORD *)(a1 + 8) = v18;
    *(_QWORD *)a1 = v20;
    if ((_DWORD)v19)
    {
      v22 = 8 * v19;
      v23 = v5;
      do
      {
        *v20++ = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        v23 = (WTF *)((char *)v23 + 8);
        v22 -= 8;
      }
      while (v22);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v21);
    }
  }
  return (char *)v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BaseAudioContext::updateTailProcessingNodes(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E336A230;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioContext::updateTailProcessingNodes(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E336A230;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioContext::updateTailProcessingNodes(void)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3)
  {
    result = WTF::Thread::initializeCurrentTLS((WTF::Thread *)result);
    v3 = result;
  }
  if (v3 == *(_QWORD *)(v2 + 280))
  {
    v5 = *(_DWORD *)(v2 + 288) + 1;
    goto LABEL_10;
  }
  result = v2 + 292;
  if (__ldaxr((unsigned __int8 *)(v2 + 292)))
  {
    __clrex();
LABEL_8:
    result = MEMORY[0x19AEA534C]();
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_8;
LABEL_9:
  *(_QWORD *)(v2 + 280) = v3;
  v5 = 1;
LABEL_10:
  *(_DWORD *)(v2 + 288) = v5;
  v6 = *(WTF **)(v2 + 160);
  v7 = *(unsigned int *)(v2 + 172);
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  if ((_DWORD)v7)
  {
    v8 = v6;
    do
    {
      v9 = *(_QWORD *)v8;
      *(_BYTE *)(v9 + 113) = 1;
      v10 = *(unsigned int *)(v9 + 84);
      if ((_DWORD)v10)
      {
        v11 = *(uint64_t **)(v9 + 72);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          WebCore::AudioNodeOutput::disable(v13);
          v12 -= 8;
        }
        while (v12);
      }
      v8 = (WTF *)((char *)v8 + 8);
    }
    while (v8 != (WTF *)((char *)v6 + 8 * v7));
    v14 = 8 * v7;
    v15 = (uint64_t *)v6;
    do
    {
      result = *v15;
      if (*v15)
      {
        *(_BYTE *)(result + 115) = 0;
        *v15 = 0;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
      }
      else
      {
        *v15 = 0;
      }
      ++v15;
      v14 -= 8;
    }
    while (v14);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  *(_BYTE *)(v2 + 378) = 0;
  v16 = *(_DWORD *)(v2 + 288) - 1;
  *(_DWORD *)(v2 + 288) = v16;
  if (!v16)
  {
    *(_QWORD *)(v2 + 280) = 0;
    result = v2 + 292;
    v17 = __ldxr((unsigned __int8 *)(v2 + 292));
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BaseAudioContext::scheduleNodeDeletion(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E336A258;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioContext::scheduleNodeDeletion(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336A258;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::Thread *WTF::Detail::CallableWrapper<WebCore::BaseAudioContext::scheduleNodeDeletion(void)::$_0,void>::call(uint64_t a1)
{
  return WebCore::BaseAudioContext::deleteMarkedNodes(*(WTF::Thread **)(a1 + 8));
}

WTF *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *result;
  uint64_t v11;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(WTF::StringImpl ***)(a1 + 8);
    v8 = 24 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  result = *(WTF **)(a1 + 8);
  if (result)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a1 + 16) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a1 + 20) = v11;
  return result;
}

WTF *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::AudioParamDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *result;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v5 = *(WTF::StringImpl **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, a2);
      v17 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v17)
      {
        v18 = *(WTF::StringImpl ***)(a1 + 8);
        v19 = 24 * v17;
        do
        {
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, a2);
            else
              *(_DWORD *)v20 -= 2;
          }
          v18 += 3;
          v19 -= 24;
        }
        while (v19);
      }
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v9 = *(WTF **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v10;
  v11 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v12)
  {
    v13 = (WTF::StringImpl **)*((_QWORD *)a2 + 1);
    v14 = 24 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v13 += 3;
      v14 -= 24;
    }
    while (v14);
  }
  result = (WTF *)*((_QWORD *)a2 + 1);
  if (result)
  {
    *((_QWORD *)a2 + 1) = 0;
    *((_DWORD *)a2 + 4) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *((_QWORD *)a2 + 1) = v4;
  *((_QWORD *)a2 + 2) = v6;
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AudioNode*>(uint64_t result, WebCore::AudioNode **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WebCore::AudioNode **v13;
  WebCore::AudioNode *v14;
  WebCore::AudioNode *v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v11;
    if ((_DWORD)v5)
    {
      v12 = 8 * v5;
      v13 = (WebCore::AudioNode **)v9;
      do
      {
        v14 = *v13;
        *v13 = 0;
        *(_QWORD *)v11 = v14;
        v15 = *v13;
        *v13 = 0;
        if (v15)
          WebCore::AudioNode::decrementConnectionCount(v15);
        v11 = (WTF *)((char *)v11 + 8);
        ++v13;
        v12 -= 8;
      }
      while (v12);
      v11 = *(WTF **)v3;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v9, v10);
      v9 = *(WTF **)v3;
    }
    else
    {
      v9 = v11;
    }
  }
  v16 = *(unsigned int *)(v3 + 12);
  v17 = *a2;
  if (v17)
    WebCore::AudioNode::incrementConnectionCount(v17);
  v18 = *(_DWORD *)(v3 + 12);
  *((_QWORD *)v9 + v16) = v17;
  *(_DWORD *)(v3 + 12) = v18 + 1;
  return 1;
}

uint64_t WebCore::DefaultAudioDestinationNode::uninitialize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  _QWORD v11[4];

  if (!*(_BYTE *)(this + 32))
    return this;
  v1 = this;
  v2 = *(_QWORD *)(this + 120);
  v3 = *(_QWORD *)(this + 128);
  v11[0] = "AudioNode";
  v11[1] = 10;
  v11[2] = "uninitialize";
  v11[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  if (*(_BYTE *)(v1 + 196))
  {
    v4 = *(_QWORD *)(v1 + 176);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E336AB68;
    v11[0] = v5;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, v11);
    v6 = v11[0];
    v11[0] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_BYTE *)(v1 + 196) = 0;
  }
  v7 = *(_QWORD *)(v1 + 176);
  v8 = (unsigned __int8 *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)(v7 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v7 + 8);
LABEL_12:
  *(_QWORD *)(v7 + 16) = 0;
  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 8));
LABEL_17:
  this = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v1 + 176) = 0;
  if (this)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
  *(_DWORD *)(v1 + 192) = 0;
  *(_BYTE *)(v1 + 32) = 0;
  return this;
}

void WebCore::DefaultAudioDestinationNode::~DefaultAudioDestinationNode(WebCore::DefaultAudioDestinationNode *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;

  WebCore::DefaultAudioDestinationNode::uninitialize((uint64_t)this);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)this = off_1E3368500;
  *((_QWORD *)this + 3) = &unk_1E3368648;
  *((_BYTE *)this + 32) = 0;
  WebCore::AudioNode::~AudioNode(this, v2);
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  WebCore::DefaultAudioDestinationNode::uninitialize((uint64_t)this);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)this = off_1E3368500;
  *((_QWORD *)this + 3) = &unk_1E3368648;
  *((_BYTE *)this + 32) = 0;
  WebCore::AudioNode::~AudioNode(this, v2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void `non-virtual thunk to'WebCore::DefaultAudioDestinationNode::~DefaultAudioDestinationNode(WebCore::DefaultAudioDestinationNode *this)
{
  WebCore::AudioNode *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v2 = (WebCore::DefaultAudioDestinationNode *)((char *)this - 24);
  WebCore::DefaultAudioDestinationNode::uninitialize((uint64_t)this - 24);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *((_QWORD *)this - 3) = off_1E3368500;
  *(_QWORD *)this = &unk_1E3368648;
  *((_BYTE *)this + 8) = 0;
  WebCore::AudioNode::~AudioNode(v2, v3);
}

{
  WebCore::AudioNode *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v2 = (WebCore::DefaultAudioDestinationNode *)((char *)this - 168);
  WebCore::DefaultAudioDestinationNode::uninitialize((uint64_t)this - 168);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *((_QWORD *)this - 21) = off_1E3368500;
  *((_QWORD *)this - 18) = &unk_1E3368648;
  *((_BYTE *)this - 136) = 0;
  WebCore::AudioNode::~AudioNode(v2, v3);
}

{
  WebCore::AudioNode *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v2 = (WebCore::DefaultAudioDestinationNode *)((char *)this - 24);
  WebCore::DefaultAudioDestinationNode::uninitialize((uint64_t)this - 24);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *((_QWORD *)this - 3) = off_1E3368500;
  *(_QWORD *)this = &unk_1E3368648;
  *((_BYTE *)this + 8) = 0;
  WebCore::AudioNode::~AudioNode(v2, v3);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::AudioNode *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v2 = (WebCore::DefaultAudioDestinationNode *)((char *)this - 168);
  WebCore::DefaultAudioDestinationNode::uninitialize((uint64_t)this - 168);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *((_QWORD *)this - 21) = off_1E3368500;
  *((_QWORD *)this - 18) = &unk_1E3368648;
  *((_BYTE *)this - 136) = 0;
  WebCore::AudioNode::~AudioNode(v2, v3);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::DefaultAudioDestinationNode::initialize(uint64_t this)
{
  WebCore::DefaultAudioDestinationNode *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!*(_BYTE *)(this + 32))
  {
    v1 = (WebCore::DefaultAudioDestinationNode *)this;
    v2 = *(_QWORD *)(this + 120);
    v3 = *(_QWORD *)(this + 128);
    v4[0] = "AudioNode";
    v4[1] = 10;
    v4[2] = "initialize";
    v4[3] = v3;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v4);
    this = WebCore::DefaultAudioDestinationNode::createDestination(v1);
    *((_BYTE *)v1 + 32) = 1;
  }
  return this;
}

uint64_t WebCore::DefaultAudioDestinationNode::createDestination(WebCore::DefaultAudioDestinationNode *this)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  WebCore::AudioSessionIOS *v5;
  float v6;
  float v7;
  WTF::String *v8;
  WTF::String *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::String *v29;
  WTF::String *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  WTF::Logger *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int128 buf;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 15);
  v2 = *((_QWORD *)this + 16);
  v52[0] = "AudioNode";
  v52[1] = 10;
  v52[2] = "createDestination";
  v52[3] = v2;
  v4 = *((float *)this + 40);
  v5 = WebCore::AudioSession::sharedSession(this);
  (*(void (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v5 + 72))(v5);
  if (*(_BYTE *)(v3 + 12))
  {
    v7 = v6;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v52);
    v8 = (WTF::String *)WTF::String::String((WTF::String *)&v58, "contextSampleRate = ");
    WTF::String::number(v8, v4);
    v9 = (WTF::String *)WTF::String::String((WTF::String *)&v56, ", hardwareSampleRate = ");
    WTF::String::number(v9, v7);
    v53 = v58;
    v63 = v57;
    *(_QWORD *)&buf = v59;
    v61 = v55;
    v62 = v56;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v53, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t *)&v61, &v60);
    if (!v60)
    {
      __break(0xC471u);
      return result;
    }
    v12 = v55;
    v55 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v56;
    v56 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v57;
    v57 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v58;
    v58 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v59;
    v59 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = qword_1ECE7C4A0;
    v18 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v18)
    {
      WTF::String::utf8();
      v20 = v53 ? (char *)v53 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v18 = (uint64_t)v53;
      v53 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          v18 = WTF::fastFree((WTF *)v18, v19);
        else
          --*(_DWORD *)v18;
      }
    }
    if (WebCore::LogMedia)
    {
      v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v22 = *v21;
        if ((v22 & 1) != 0)
          break;
        v23 = __ldaxr(v21);
        if (v23 == v22)
        {
          if (!__stxr(v22 | 1, v21))
          {
            v24 = WTF::Logger::observers((WTF::Logger *)v18);
            v25 = *(unsigned int *)(v24 + 12);
            if ((_DWORD)v25)
            {
              v26 = *(uint64_t **)v24;
              v27 = *(_QWORD *)v24 + 8 * v25;
              do
              {
                v28 = *v26;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v52);
                v65 = 0;
                v29 = (WTF::String *)WTF::String::String((WTF::String *)&v66, "contextSampleRate = ");
                v67 = 0;
                WTF::String::number(v29, v4);
                v69 = 0;
                v30 = (WTF::String *)WTF::String::String((WTF::String *)&v70, ", hardwareSampleRate = ");
                v71 = 0;
                WTF::String::number(v30, v7);
                v53 = 0;
                v54 = 0;
                v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v54) = 5;
                v53 = v31;
                v32 = HIDWORD(v54);
                *((_DWORD *)v31 + 4 * HIDWORD(v54)) = buf;
                v33 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                *((_DWORD *)v31 + 4 * (v32 + 1)) = v65;
                v34 = v66;
                if (v66)
                  *(_DWORD *)v66 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                *((_DWORD *)v31 + 4 * (v32 + 2)) = v67;
                v35 = v68;
                if (v68)
                  *(_DWORD *)v68 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                *((_DWORD *)v31 + 4 * (v32 + 3)) = v69;
                v36 = v70;
                if (v70)
                  *(_DWORD *)v70 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
                *((_DWORD *)v31 + 4 * (v32 + 4)) = v71;
                v37 = v72;
                if (v72)
                  *(_DWORD *)v72 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
                HIDWORD(v54) = v32 + 5;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMedia, 0, &v53);
                v38 = v53;
                if (HIDWORD(v54))
                {
                  v39 = 16 * HIDWORD(v54);
                  v40 = (WTF::StringImpl **)((char *)v53 + 8);
                  do
                  {
                    v41 = *v40;
                    *v40 = 0;
                    if (v41)
                    {
                      if (*(_DWORD *)v41 == 2)
                        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v41 -= 2;
                    }
                    v40 += 2;
                    v39 -= 16;
                  }
                  while (v39);
                  v38 = v53;
                }
                if (v38)
                {
                  v53 = 0;
                  LODWORD(v54) = 0;
                  WTF::fastFree(v38, v19);
                }
                v42 = v72;
                v72 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v70;
                v70 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v68;
                v68 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v66;
                v66 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                ++v26;
              }
              while (v26 != (uint64_t *)v27);
            }
            v47 = __ldxr(v21);
            if (v47 == 1)
            {
              if (!__stlxr(0, v21))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v48 = v60;
    v60 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WebCore::s_platformStrategies;
  v53 = (WTF::Logger *)WebCore::s_platformStrategies;
  v50 = atomic_load((unint64_t *)(WebCore::s_platformStrategies + 24));
  if (v50 != -1)
  {
    *(_QWORD *)&buf = &v53;
    v52[0] = &buf;
    std::__call_once((std::once_flag::_State_type *)(WebCore::s_platformStrategies + 24), v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>);
  }
  (***(void (****)(__int128 *__return_ptr, _QWORD, char *, char *, _QWORD, _QWORD, float))(v49 + 32))(&buf, *(_QWORD *)(v49 + 32), (char *)this + 168, (char *)this + 184, *((unsigned int *)this + 48), *((unsigned int *)this + 34), *((float *)this + 40));
  v51 = buf;
  *(_QWORD *)&buf = 0;
  result = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v51;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    result = buf;
    *(_QWORD *)&buf = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  return result;
}

_QWORD *WebCore::DefaultAudioDestinationNode::recreateDestination(WebCore::DefaultAudioDestinationNode *this)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  WebCore::DefaultAudioDestinationNode *v25;
  const WTF::String *v26;
  _QWORD *v27;
  _QWORD *v28;

  v2 = *((unsigned __int8 *)this + 196);
  if (*((_BYTE *)this + 196))
  {
    v3 = *((_QWORD *)this + 22);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E336AB68;
    v28 = v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 40))(v3, &v28);
    v5 = v28;
    v28 = 0;
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    *((_BYTE *)this + 196) = 0;
  }
  v6 = *((_QWORD *)this + 22);
  v7 = (unsigned __int8 *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)(v6 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v6 + 8);
LABEL_9:
  *(_QWORD *)(v6 + 16) = 0;
  v9 = __ldxr(v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v7))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 8));
  v10 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  result = (_QWORD *)WebCore::DefaultAudioDestinationNode::createDestination(this);
  if (v2)
  {
    *((_BYTE *)this + 196) = 1;
    v12 = *((unsigned int *)this + 12);
    if ((_DWORD)v12 == -1)
    {
      v25 = (WebCore::DefaultAudioDestinationNode *)std::__throw_bad_variant_access[abi:sn180100]();
      return (_QWORD *)WebCore::DefaultAudioDestinationNode::enableInput(v25, v26);
    }
    else
    {
      v13 = *((_QWORD *)this + 22);
      v28 = &v27;
      v14 = (_QWORD *)((uint64_t (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v28, (char *)this + 40);
      if ((*(unsigned int (**)(_QWORD *))(*v14 + 72))(v14))
      {
        __break(0xC471u);
        JUMPOUT(0x195551F00);
      }
      v15 = v14[13];
      if (*(_DWORD *)(v15 + 68) && (v16 = **(unsigned int ***)(v15 + 56)) != 0)
      {
        if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195551F20);
        }
        v17 = v16 + 2;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 + 1, v17));
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v20 = &off_1E336ABB8;
        v20[1] = v16;
        v28 = v20;
        do
        {
          v21 = __ldaxr(v17);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v17));
        if (!v22)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      else
      {
        v28 = 0;
      }
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v23 = off_1E336AB90;
      v27 = v23;
      (*(void (**)(uint64_t, _QWORD **, _QWORD **))(*(_QWORD *)v13 + 32))(v13, &v28, &v27);
      v24 = v27;
      v27 = 0;
      if (v24)
        (*(void (**)(_QWORD *))(*v24 + 8))(v24);
      result = v28;
      v28 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

_QWORD *WebCore::DefaultAudioDestinationNode::enableInput(_QWORD *this, const WTF::String *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD v7[4];

  v3 = this;
  v4 = this[15];
  v5 = this[16];
  v7[0] = "AudioNode";
  v7[1] = 10;
  v7[2] = "enableInput";
  v7[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    this = (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  if (*((_DWORD *)v3 + 48) != 2)
  {
    *((_DWORD *)v3 + 48) = 2;
    v6 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v6 += 2;
    this = (_QWORD *)v3[23];
    v3[23] = v6;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    if (*((_BYTE *)v3 + 32))
      return WebCore::DefaultAudioDestinationNode::recreateDestination((WebCore::DefaultAudioDestinationNode *)v3);
  }
  return this;
}

WTF::StringImpl *WebCore::DefaultAudioDestinationNode::startRendering(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  WTF::StringImpl *result;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *a2;
    *a2 = 0;
    *(_BYTE *)(a1 + 196) = 1;
    v4 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v4 == -1)
    {
      v20 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::DefaultAudioDestinationNode::resume(v20);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 176);
      v22 = (WTF::StringImpl *)&v21;
      v6 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v22, a1 + 40);
      if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6))
      {
        __break(0xC471u);
        JUMPOUT(0x195552210);
      }
      v7 = v6[13];
      if (*(_DWORD *)(v7 + 68) && (v8 = **(unsigned int ***)(v7 + 56)) != 0)
      {
        if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195552230);
        }
        v9 = v8 + 2;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        do
          v11 = __ldaxr(v9);
        while (__stlxr(v11 + 1, v9));
        v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v12 = &off_1E336ABB8;
        *((_QWORD *)v12 + 1) = v8;
        v22 = v12;
        do
        {
          v13 = __ldaxr(v9);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v9));
        if (!v14)
        {
          atomic_store(1u, v8 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
        }
      }
      else
      {
        v22 = 0;
      }
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = &off_1E336AC08;
      v15[1] = v3;
      v21 = v15;
      (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD **))(*(_QWORD *)v5 + 32))(v5, &v22, &v21);
      v16 = v21;
      v21 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      result = v22;
      v22 = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v22) = 8;
    v24 = 1;
    v18 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v22);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v24)
    {
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::DefaultAudioDestinationNode::resume(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;

  if (!*(_BYTE *)(a1 + 32))
  {
    v18 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v18 != -1)
    {
      v25 = &v24;
      v19 = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v25, a1 + 40);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19))
      {
        __break(0xC471u);
        JUMPOUT(0x195552474);
      }
      v20 = *a2;
      *a2 = 0;
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = &off_1E336AC30;
      v21[1] = v20;
      v25 = v21;
      WebCore::BaseAudioContext::postTask(v19, (uint64_t *)&v25);
      result = (uint64_t)v25;
      if (v25)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
LABEL_27:
    v22 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DefaultAudioDestinationNode::suspend(v22, v23);
  }
  *(_BYTE *)(a1 + 196) = 1;
  v3 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v3 == -1)
    goto LABEL_27;
  v4 = *(_QWORD *)(a1 + 176);
  v25 = &v24;
  v5 = (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v25, a1 + 40);
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 72))(v5))
  {
    __break(0xC471u);
    JUMPOUT(0x195552454);
  }
  v6 = v5[13];
  if (*(_DWORD *)(v6 + 68) && (v7 = **(unsigned int ***)(v6 + 56)) != 0)
  {
    if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195552494);
    }
    v8 = v7 + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 + 1, v8));
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E336ABB8;
    v11[1] = v7;
    v25 = v11;
    do
    {
      v12 = __ldaxr(v8);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v8));
    if (!v13)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  else
  {
    v25 = 0;
  }
  v14 = *a2;
  *a2 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E336AC58;
  v15[1] = v14;
  v24 = v15;
  (*(void (**)(uint64_t, _QWORD **, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v25, &v24);
  v16 = v24;
  v24 = 0;
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::DefaultAudioDestinationNode::suspend(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  WebCore::DefaultAudioDestinationNode *v11;
  char v12;
  char *v13;

  if (*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 196) = 0;
    v3 = *(_QWORD *)(a1 + 176);
    v4 = *a2;
    *a2 = 0;
    v5 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = &off_1E336ACA8;
    *((_QWORD *)v5 + 1) = v4;
    v13 = v5;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v3 + 40))(v3, &v13);
    result = (uint64_t)v13;
    v13 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v7 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v7 == -1)
  {
    v11 = (WebCore::DefaultAudioDestinationNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DefaultAudioDestinationNode::restartRendering(v11);
  }
  v13 = &v12;
  v8 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v13, a1 + 40);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8))
  {
    __break(0xC471u);
    JUMPOUT(0x1955525B8);
  }
  v9 = *a2;
  *a2 = 0;
  v10 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = &off_1E336AC80;
  *((_QWORD *)v10 + 1) = v9;
  v13 = v10;
  WebCore::BaseAudioContext::postTask(v8, (uint64_t *)&v13);
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WebCore::DefaultAudioDestinationNode::restartRendering(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;

  if (*((_BYTE *)this + 196))
  {
    v1 = (uint64_t)this;
    v2 = this[22];
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E336AB68;
    v21 = v3;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 40))(v2, &v21);
    v4 = v21;
    v21 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    v5 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v5 == -1)
    {
      v18 = std::__throw_bad_variant_access[abi:sn180100]();
      return (_QWORD *)WebCore::DefaultAudioDestinationNode::close(v18, v19);
    }
    else
    {
      v6 = *(_QWORD *)(v1 + 176);
      v21 = &v20;
      v7 = (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v21, v1 + 40);
      if ((*(unsigned int (**)(_QWORD *))(*v7 + 72))(v7))
      {
        __break(0xC471u);
        JUMPOUT(0x19555279CLL);
      }
      v8 = v7[13];
      if (*(_DWORD *)(v8 + 68) && (v9 = **(unsigned int ***)(v8 + 56)) != 0)
      {
        if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1955527BCLL);
        }
        v10 = v9 + 2;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 + 1, v10));
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = &off_1E336ABB8;
        v13[1] = v9;
        v21 = v13;
        do
        {
          v14 = __ldaxr(v10);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v10));
        if (!v15)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      else
      {
        v21 = 0;
      }
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E336AB90;
      v20 = v16;
      (*(void (**)(uint64_t, _QWORD **, _QWORD **))(*(_QWORD *)v6 + 32))(v6, &v21, &v20);
      v17 = v20;
      v20 = 0;
      if (v17)
        (*(void (**)(_QWORD *))(*v17 + 8))(v17);
      this = v21;
      v21 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

uint64_t WebCore::DefaultAudioDestinationNode::close(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  WebCore::DefaultAudioDestinationNode *v9;
  char v10;
  char *v11;

  WebCore::DefaultAudioDestinationNode::uninitialize(a1);
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 == -1)
  {
    v9 = (WebCore::DefaultAudioDestinationNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DefaultAudioDestinationNode::maxChannelCount(v9);
  }
  else
  {
    v11 = &v10;
    v5 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v11, a1 + 40);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5))
    {
      __break(0xC471u);
      JUMPOUT(0x195552894);
    }
    v6 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = &off_1E335A710;
    v7 = *a2;
    *a2 = 0;
    *((_QWORD *)v6 + 1) = v7;
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1955528B4);
    }
    v11 = v6;
    WebCore::BaseAudioContext::postTask(v5, (uint64_t *)&v11);
    result = (uint64_t)v11;
    if (v11)
      return (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 8))(v11);
  }
  return result;
}

uint64_t WebCore::DefaultAudioDestinationNode::maxChannelCount(WebCore::DefaultAudioDestinationNode *this)
{
  WebCore::AudioSessionIOS *v1;

  v1 = WebCore::AudioSession::sharedSession(this);
  return (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v1 + 96))(v1);
}

WTF::StringImpl *WebCore::DefaultAudioDestinationNode::setChannelCount@<X0>(WebCore::DefaultAudioDestinationNode *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  WebCore::DefaultAudioDestinationNode *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::AudioSessionIOS *v8;
  WTF::StringImpl *result;
  int v10;
  WTF::StringImpl *v11;
  int v12;
  const char *v13;
  WTF::StringImpl *v14;
  const char *v15;
  uint64_t v16;
  unsigned int v17;

  v3 = a2;
  v4 = this;
  v17 = a2;
  v6 = *((_QWORD *)this + 15);
  v7 = *((_QWORD *)this + 16);
  v13 = "AudioNode";
  v14 = (WTF::StringImpl *)10;
  v15 = "setChannelCount";
  v16 = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    this = (WebCore::DefaultAudioDestinationNode *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned int>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v13, &v17);
    v3 = v17;
  }
  v8 = WebCore::AudioSession::sharedSession(this);
  if (v3 > (*(unsigned int (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v8 + 96))(v8))
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 0;
LABEL_7:
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v10 = *((_DWORD *)v4 + 34);
  result = WebCore::AudioNode::setChannelCount(v4, v17, &v13);
  if ((_BYTE)v15)
  {
    *(_BYTE *)a3 = (_BYTE)v13;
    *(_QWORD *)(a3 + 8) = v14;
    goto LABEL_7;
  }
  if (*((_DWORD *)v4 + 34) == v10 || !*((_BYTE *)v4 + 32))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    result = (WTF::StringImpl *)WebCore::DefaultAudioDestinationNode::recreateDestination(v4);
    v12 = v15;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    if (v12)
    {
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebCore::DefaultAudioDestinationNode::render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t i;
  uint64_t v23;
  void **v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  char *v28;

  WebCore::AudioDestinationNode::renderQuantum(a1, a3, a4, a5);
  v7 = *(unsigned int *)(a3 + 28);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a3 + 16);
    if (*(_BYTE *)(*(_QWORD *)v8 + 24))
    {
      v9 = 0;
      v10 = v8 + 8;
      while (v7 - 1 != v9)
      {
        if (!*(unsigned __int8 *)(*(_QWORD *)(v10 + 8 * v9++) + 24))
          goto LABEL_10;
      }
      v9 = *(unsigned int *)(a3 + 28);
LABEL_10:
      v12 = v9 >= v7;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 198) != v12)
  {
    *(_BYTE *)(a1 + 198) = v12;
    v13 = *(_QWORD *)(a1 + 176);
    v14 = v13 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) && *(_BYTE *)(a1 + 198) == 0;
    if (*(unsigned __int8 *)(a1 + 197) != v14)
    {
      *(_BYTE *)(a1 + 197) = v14;
      v15 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v15 == -1)
      {
        v26 = std::__throw_bad_variant_access[abi:sn180100]();
        return;
      }
      v28 = &v27;
      v16 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v28, a1 + 40);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16))
      {
        __break(0xC471u);
        JUMPOUT(0x195552C14);
      }
      v17 = (unsigned int *)(v16 + 24);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v19 = (char *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = &off_1E33688C8;
      *((_QWORD *)v19 + 1) = v16;
      v28 = v19;
      WTF::callOnMainThread();
      v20 = v28;
      v28 = 0;
      if (v20)
        (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  if (*(_BYTE *)(a1 + 199))
  {
    v21 = *(unsigned int *)(a3 + 28);
    if ((_DWORD)v21)
    {
      for (i = 0; i < v21; ++i)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * i);
        if (!*(_BYTE *)(v23 + 24))
        {
          *(_BYTE *)(v23 + 24) = 1;
          v24 = *(void ***)(v23 + 8);
          v25 = (_QWORD *)(v23 + 16);
          if (v24)
            v25 = v24 + 1;
          else
            v24 = (void **)v23;
          bzero(*v24, 4 * *v25);
          v21 = *(unsigned int *)(a3 + 28);
        }
      }
    }
  }
}

void `non-virtual thunk to'WebCore::DefaultAudioDestinationNode::render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  WebCore::DefaultAudioDestinationNode::render(a1 - 168, a2, a3, a4, a5);
}

char *WebCore::DefaultAudioDestinationNode::isPlayingDidChange(WebCore::DefaultAudioDestinationNode *this)
{
  char *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  WebCore::DefaultAudioDestinationNode *v9;
  char v10;
  char *v11;

  result = (char *)*((_QWORD *)this + 22);
  v3 = result
    && (result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 48))(result), (_DWORD)result)
    && *((_BYTE *)this + 198) == 0;
  if (*((unsigned __int8 *)this + 197) != v3)
  {
    *((_BYTE *)this + 197) = v3;
    v4 = *((unsigned int *)this + 12);
    if ((_DWORD)v4 == -1)
    {
      v9 = (WebCore::DefaultAudioDestinationNode *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v11 = &v10;
      v5 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v11, (char *)this + 40);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5))
      {
        __break(0xC471u);
        JUMPOUT(0x195552D2CLL);
      }
      v6 = (unsigned int *)(v5 + 24);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = (char *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = &off_1E33688C8;
      *((_QWORD *)v8 + 1) = v5;
      v11 = v8;
      WTF::callOnMainThread();
      result = v11;
      v11 = 0;
      if (result)
        return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WebCore::DelayDSPKernel *`non-virtual thunk to'WebCore::DefaultAudioDestinationNode::isPlayingDidChange(WebCore::DefaultAudioDestinationNode *this)
{
  WebCore::DelayDSPKernel *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::DelayDSPKernel *v8;
  WebCore::DelayDSPKernel *v9;
  void *v10;
  double v11;
  float v12;
  char v13;
  WebCore::DelayDSPKernel *v14;

  result = (WebCore::DelayDSPKernel *)*((_QWORD *)this + 1);
  v3 = result
    && (result = (WebCore::DelayDSPKernel *)(*(uint64_t (**)(WebCore::DelayDSPKernel *))(*(_QWORD *)result
                                                                                                 + 48))(result),
        (_DWORD)result)
    && *((_BYTE *)this + 30) == 0;
  if (*((unsigned __int8 *)this + 29) != v3)
  {
    *((_BYTE *)this + 29) = v3;
    v4 = *((unsigned int *)this - 30);
    if ((_DWORD)v4 == -1)
    {
      v9 = (WebCore::DelayDSPKernel *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::DelayDSPKernel::DelayDSPKernel(v9, v11, v12, v10);
    }
    else
    {
      v14 = (WebCore::DelayDSPKernel *)&v13;
      v5 = ((uint64_t (*)(WebCore::DelayDSPKernel **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, (char *)this - 128);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5))
      {
        __break(0xC471u);
        JUMPOUT(0x195552E3CLL);
      }
      v6 = (unsigned int *)(v5 + 24);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = (WebCore::DelayDSPKernel *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = &off_1E33688C8;
      *((_QWORD *)v8 + 1) = v5;
      v14 = v8;
      WTF::callOnMainThread();
      result = v14;
      v14 = 0;
      if (result)
        return (WebCore::DelayDSPKernel *)(*(uint64_t (**)(WebCore::DelayDSPKernel *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WebCore::DelayDSPKernel *WebCore::DelayDSPKernel::DelayDSPKernel(WebCore::DelayDSPKernel *this, double a2, float a3, void *a4)
{
  WebCore::DelayDSPKernel *result;
  void *v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;

  *((float *)this + 4) = a3;
  *(_QWORD *)this = off_1E336A498;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((double *)this + 5) = a2;
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  WTF::fastAlignedFree(0, a4);
  result = (WebCore::DelayDSPKernel *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 10) = result;
  *((_QWORD *)this + 11) = 128;
  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_OWORD *)result + 18) = 0u;
  *((_OWORD *)result + 19) = 0u;
  *((_OWORD *)result + 20) = 0u;
  *((_OWORD *)result + 21) = 0u;
  *((_OWORD *)result + 22) = 0u;
  *((_OWORD *)result + 23) = 0u;
  *((_OWORD *)result + 24) = 0u;
  *((_OWORD *)result + 25) = 0u;
  *((_OWORD *)result + 26) = 0u;
  *((_OWORD *)result + 27) = 0u;
  *((_OWORD *)result + 28) = 0u;
  *((_OWORD *)result + 29) = 0u;
  *((_OWORD *)result + 30) = 0u;
  *((_OWORD *)result + 31) = 0u;
  if (a2 <= 0.0)
    return this;
  v9 = round(a3 * a2 * 1024.0) * 0.0009765625;
  v10 = vcvtpd_u64_f64(v9) + 128;
  v11 = ceil(v9) >= 1.84467441e19 ? 127 : v10;
  if (!v11 || v11 == *((_QWORD *)this + 4))
    return this;
  if (!(v11 >> 62))
  {
    WTF::fastAlignedFree(*((WTF **)this + 3), v8);
    v12 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 3) = v12;
    *((_QWORD *)this + 4) = v11;
    bzero(v12, 4 * v11);
    return this;
  }
  __break(0xC471u);
  return result;
}

void WebCore::DelayDSPKernel::process(WebCore::DelayDSPKernel *this, const float *a2, float *a3, unint64_t a4)
{
  uint64_t v8;
  BOOL hasSampleAccurateValues;
  uint64_t v10;
  BOOL v11;
  char v12;

  if (a3 && a2 && *((_QWORD *)this + 4))
  {
    v8 = *((_QWORD *)this + 1);
    if (!v8)
      goto LABEL_10;
    hasSampleAccurateValues = WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v8 + 48));
    v10 = *((_QWORD *)this + 1);
    if (!v10)
      goto LABEL_10;
    v11 = *(_BYTE *)(*(_QWORD *)(v10 + 48) + 104) == 0;
    v12 = !hasSampleAccurateValues;
    if (!v11)
      v12 = 1;
    if ((v12 & 1) == 0)
      WebCore::DelayDSPKernel::processARate(this, a2, a3, a4);
    else
LABEL_10:
      WebCore::DelayDSPKernel::processKRate(this, a2, a3, a4);
  }
}

void *WebCore::DelayDSPKernel::processARate(WebCore::DelayDSPKernel *this, const float *__src, float *a3, unint64_t a4)
{
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *result;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t v33;
  unint64_t v34;

  v8 = (char *)*((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 4);
  v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 48);
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = (float *)*((_QWORD *)this + 8);
      v14 = atomic_load((unint64_t *)(v12 + 240));
      v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v15)
        v15 = WTF::Thread::initializeCurrentTLS(0);
      if ((_DWORD)a4 && v13 && v15 == v14)
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v10, v13, a4, *(_BYTE *)(v10 + 104) == 0);
    }
  }
  if (v9 < a4)
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  v16 = *((_QWORD *)this + 6);
  v17 = &v8[4 * v16];
  v18 = v9 >= v16;
  v19 = v9 - v16;
  if (v18)
    v20 = v19;
  else
    v20 = 0;
  if (v20 >= a4)
    v21 = a4;
  else
    v21 = v20;
  memcpy(v17, __src, 4 * v21);
  v22 = a4 - v20;
  if (a4 < v20)
    v22 = 0;
  result = memcpy(v8, &__src[v20], 4 * v22);
  if (a4)
  {
    v24 = *((_QWORD *)this + 8);
    v25 = *((double *)this + 5);
    v26 = 0;
    if (v25 >= 0.0)
    {
      v27 = *((_QWORD *)this + 6);
      do
      {
        v28 = *(float *)(v24 + 4 * v26);
        v29 = v28;
        if (v25 < v28)
          v29 = v25;
        if (v28 < 0.0)
          v29 = 0.0;
        v30 = (double)(v27 + v9) - v29 * *((float *)this + 4);
        if (v30 >= (double)v9)
          v31 = (double)v9;
        else
          v31 = 0.0;
        v32 = v30 - v31;
        v33 = (unint64_t)v32;
        v34 = ((unint64_t)v32 + 1) % v9;
        *(float *)&v32 = v32 - (double)(unint64_t)v32;
        v27 = (v27 + 1) % v9;
        a3[v26++] = *(float *)&v8[4 * v33]
                  + (float)(*(float *)&v32 * (float)(*(float *)&v8[4 * v34] - *(float *)&v8[4 * v33]));
      }
      while (a4 > v26);
      *((_QWORD *)this + 6) = v27;
      return result;
    }
    __break(1u);
LABEL_33:
    JUMPOUT(0x195553204);
  }
  return result;
}

void WebCore::DelayDSPKernel::processKRate(WebCore::DelayDSPKernel *this, const float *a2, float *a3, vDSP_Length a4)
{
  char *v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::AudioParam *v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  int64_t v19;
  float v20;
  char *v21;
  char *v22;
  BOOL v23;
  vDSP_Length v24;
  vDSP_Length v25;
  vDSP_Length v26;
  vDSP_Length v27;
  char *v28;
  unint64_t v29;
  vDSP_Length v30;
  vDSP_Length v31;
  int64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  vDSP_Length v36;
  vDSP_Length v37;
  float v38;
  float __C;

  v8 = (char *)*((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    v11 = *(WebCore::AudioParam **)(v10 + 48);
    v38 = 0.0;
    WebCore::AudioParam::calculateFinalValues(v11, &v38, 1u, 0);
    v12 = v38;
  }
  else
  {
    v12 = *((double *)this + 7) / *((float *)this + 4);
  }
  v13 = *((double *)this + 5);
  if (v13 < 0.0)
  {
    __break(1u);
LABEL_41:
    __break(0xC471u);
    return;
  }
  if (v13 >= v12)
    v13 = v12;
  if (v12 >= 0.0)
    v14 = v13;
  else
    v14 = 0.0;
  v15 = *((_QWORD *)this + 6);
  v16 = (double)(v15 + v9) - v14 * *((float *)this + 4);
  v17 = (double)v9;
  if (v16 < (double)v9)
    v17 = 0.0;
  if (v9 < a4)
    goto LABEL_41;
  v18 = v16 - v17;
  v19 = (unint64_t)v18;
  v20 = v18 - (double)(unint64_t)v18;
  v21 = &v8[4 * v9];
  v22 = &v8[4 * v15];
  v23 = v9 >= v15;
  v24 = v9 - v15;
  if (v23)
    v25 = v24;
  else
    v25 = 0;
  if (v25 >= a4)
    v26 = a4;
  else
    v26 = v25;
  memcpy(v22, a2, 4 * v26);
  v27 = a4 - v25;
  if (a4 < v25)
    v27 = 0;
  memcpy(v8, &a2[v25], 4 * v27);
  *((_QWORD *)this + 6) = (*((_QWORD *)this + 6) + a4) % v9;
  v28 = &v8[4 * v19];
  if ((uint64_t)v9 <= v19)
    v29 = 0;
  else
    v29 = (v21 - v28) >> 2;
  if (v29 >= a4)
    v30 = a4;
  else
    v30 = v29;
  memcpy(a3, v28, 4 * v30);
  v31 = a4 - v29;
  if (a4 < v29)
    v31 = 0;
  memcpy(&a3[v29], v8, 4 * v31);
  if (v20 != 0.0)
  {
    v32 = (v19 + 1) % v9;
    v33 = (char *)*((_QWORD *)this + 10);
    v34 = &v8[4 * v32];
    if ((uint64_t)v9 <= v32)
      v35 = 0;
    else
      v35 = (v21 - v34) >> 2;
    if (v35 >= a4)
      v36 = a4;
    else
      v36 = v35;
    memcpy(v33, v34, 4 * v36);
    v37 = a4 - v35;
    if (a4 < v35)
      v37 = 0;
    memcpy(&v33[4 * v35], v8, 4 * v37);
    __C = v20;
    vDSP_vintb(a3, 1, (const float *)v33, 1, &__C, a3, 1, a4);
  }
}

void WebCore::DelayDSPKernel::processOnlyAudioParams(WebCore::DelayDSPKernel *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  float v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 48);
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v7 = atomic_load((unint64_t *)(v5 + 240));
        v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v8)
          v8 = WTF::Thread::initializeCurrentTLS(0);
        if (a2)
        {
          if (v8 == v7)
            WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v3, v9, a2, *(_BYTE *)(v3 + 104) == 0);
        }
      }
    }
  }
}

void WebCore::DelayDSPKernel::reset(void **this)
{
  bzero(this[3], 4 * (_QWORD)this[4]);
}

double WebCore::DelayDSPKernel::tailTime(WebCore::DelayDSPKernel *this)
{
  return *((double *)this + 5);
}

double WebCore::DelayDSPKernel::latencyTime(WebCore::DelayDSPKernel *this)
{
  return 0.0;
}

uint64_t WebCore::DelayDSPKernel::requiresTailProcessing(WebCore::DelayDSPKernel *this)
{
  return 1;
}

uint64_t WebCore::DelayNode::create@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  int v41;
  _OWORD v42[7];
  __int128 v43;
  WTF::StringImpl *v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 __src;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)(a2 + 24);
  if (v4 <= 0.0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 6;
LABEL_12:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  if (v4 >= 180.0)
  {
    WTF::numberToString();
    result = strlen((const char *)v42);
    HIDWORD(v43) = result;
    if ((result & 0x80000000) != 0)
      goto LABEL_45;
    v6 = (result + 33);
    if (__OFADD__((_DWORD)result, 33))
      goto LABEL_45;
    v48 = v42[4];
    v49 = v42[5];
    v50 = v42[6];
    v51 = v43;
    *(_OWORD *)v44 = v42[0];
    v45 = v42[1];
    v46 = v42[2];
    v47 = v42[3];
    result = WTF::tryFastCompactMalloc((WTF *)(v6 + 20));
    v7 = __src;
    if (!(_QWORD)__src)
    {
LABEL_45:
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)__src = 2;
    *(_DWORD *)(v7 + 4) = v6;
    *(_QWORD *)(v7 + 8) = v7 + 20;
    *(_DWORD *)(v7 + 16) = 4;
    qmemcpy((void *)(v7 + 20), "maxDelayTime should be less than ", 33);
    v56 = v48;
    v57 = v49;
    v58 = v50;
    v59 = v51;
    __src = *(_OWORD *)v44;
    v53 = v45;
    v54 = v46;
    v55 = v47;
    if (HIDWORD(v51))
    {
      result = v7 + 53;
      if (HIDWORD(v51) == 1)
        *(_BYTE *)result = __src;
      else
        result = (uint64_t)memcpy((void *)result, &__src, HIDWORD(v51));
    }
    *(_BYTE *)a3 = 6;
    *(_QWORD *)(a3 + 8) = v7;
    goto LABEL_12;
  }
  v10 = bmalloc::api::isoAllocate();
  v11 = v10;
  v12 = *(double *)(a2 + 24);
  *(_QWORD *)v10 = off_1E3368A80;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = &unk_1E3368BA8;
  *(_BYTE *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 36) = 10;
  v13 = a1 + 6;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(v10 + 40) = a1;
  *(_DWORD *)(v10 + 48) = 0;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v10 + 88) = _Q0;
  *(_DWORD *)(v10 + 104) = 1;
  *(_QWORD *)(v10 + 108) = 0;
  v20 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
  v21 = (unsigned int *)(v20 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *(_QWORD *)(v11 + 120) = v20;
  v23 = *((_QWORD *)a1 + 9);
  v24 = *((_QWORD *)a1 + 10) + 1;
  *((_QWORD *)a1 + 10) = v24;
  v25 = v23 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v24;
  *(_QWORD *)(v11 + 128) = v25;
  *(_QWORD *)(v11 + 136) = 2;
  *(_DWORD *)(v11 + 144) = 0;
  *(_QWORD *)&__src = "AudioNode";
  *((_QWORD *)&__src + 1) = 10;
  *(_QWORD *)&v53 = "AudioNode";
  *((_QWORD *)&v53 + 1) = v25;
  if (*(_BYTE *)(v20 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&__src);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
  *(_QWORD *)v11 = off_1E3368918;
  *(_QWORD *)(v11 + 24) = &unk_1E3368A40;
  *(_QWORD *)(v11 + 152) = 0;
  WebCore::AudioNode::addInput((WebCore::AudioNode *)v11);
  WebCore::AudioNode::addOutput((WebCore::AudioNode *)v11, (void *)1);
  *(_QWORD *)v11 = off_1E336A9F0;
  *(_QWORD *)(v11 + 24) = &unk_1E336AB18;
  v26 = *(_DWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 88))(a1) + 160);
  v27 = WTF::fastMalloc((WTF *)0x38);
  *(_BYTE *)(v27 + 8) = 0;
  *(_DWORD *)(v27 + 12) = 1;
  *(_DWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 24) = 0;
  *(_QWORD *)(v27 + 32) = 0;
  *(_BYTE *)(v27 + 40) = 1;
  *(_QWORD *)v27 = off_1E336A4E8;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = WTF::fastMalloc((WTF *)0xA0);
  v28 = v12;
  *(_QWORD *)(v27 + 48) = WebCore::AudioParam::AudioParam(v29, a1, (_DWORD **)&__src, 0, 1, 0.0, 0.0, v28);
  v31 = (WTF::StringImpl *)__src;
  *(_QWORD *)&__src = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = *(_QWORD *)(v11 + 152);
  *(_QWORD *)(v11 + 152) = v27;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (!*(_BYTE *)(v11 + 32))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 152) + 16))(*(_QWORD *)(v11 + 152));
    *(_BYTE *)(v11 + 32) = 1;
  }
  *(_QWORD *)&__src = 2;
  DWORD2(__src) = 0;
  result = (uint64_t)WebCore::AudioNode::handleAudioNodeOptions(v11, (unsigned int *)a2, (unsigned int *)&__src, (uint64_t)v44);
  if ((_BYTE)v45)
  {
    v34 = v44[1];
    *(_BYTE *)a3 = v44[0];
    *(_QWORD *)(a3 + 8) = v34;
    *(_DWORD *)(a3 + 16) = 1;
    return (uint64_t)WebCore::AudioNode::deref((WebCore::AudioNode *)v11);
  }
  else
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v11 + 152) + 48);
    v36 = *(double *)(a2 + 32);
    *(float *)v42 = v36;
    v37 = *(_QWORD *)(v35 + 144);
    v38 = *(_QWORD *)(v35 + 152);
    *(_QWORD *)&__src = "AudioParam";
    *((_QWORD *)&__src + 1) = 11;
    *(_QWORD *)&v53 = "setValue";
    *((_QWORD *)&v53 + 1) = v38;
    if (*(_BYTE *)(v37 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&__src, (float *)v42);
    v39 = *(float *)(v35 + 96);
    v40 = *(float *)(v35 + 100);
    if (v40 < v39)
      __break(1u);
    if (v40 >= *(float *)v42)
      v40 = *(float *)v42;
    if (*(float *)v42 >= v39)
      v39 = v40;
    *(float *)(v35 + 88) = v39;
    *(_QWORD *)a3 = v11;
    v41 = v45;
    *(_DWORD *)(a3 + 16) = 0;
    if (v41)
    {
      result = (uint64_t)v44[1];
      v44[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebCore::DelayProcessor::~DelayProcessor(WebCore::DelayProcessor *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WebCore::AudioParam *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;

  if (*((_BYTE *)this + 8))
  {
    if (*((_DWORD *)this + 8))
    {
      v3 = *((unsigned int *)this + 9);
      if ((_DWORD)v3)
      {
        v4 = (uint64_t *)*((_QWORD *)this + 3);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          ++v4;
          v5 -= 8;
        }
        while (v5);
        *((_DWORD *)this + 9) = 0;
      }
      v7 = (WTF *)*((_QWORD *)this + 3);
      if (v7)
      {
        *((_QWORD *)this + 3) = 0;
        *((_DWORD *)this + 8) = 0;
        WTF::fastFree(v7, a2);
      }
    }
    *((_BYTE *)this + 8) = 0;
  }
  v8 = (WebCore::AudioParam *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v8, a2);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*((_DWORD *)v8 + 16);
    }
  }
  *(_QWORD *)this = off_1E3407510;
  v9 = *((unsigned int *)this + 9);
  v10 = (WTF *)*((_QWORD *)this + 3);
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
    v10 = (WTF *)*((_QWORD *)this + 3);
  }
  if (v10)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v10, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::DelayProcessor::~DelayProcessor(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::DelayProcessor::createKernel(WebCore::DelayProcessor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  _OWORD *v6;
  void *v7;
  _OWORD *v8;
  void *v9;
  float v10;
  float v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v4 + 16) = *((_DWORD *)this + 4);
  *(_QWORD *)v4 = off_1E336A498;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  WTF::fastAlignedFree(0, v5);
  v6 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 64) = v6;
  *(_QWORD *)(v4 + 72) = 128;
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v6[16] = 0u;
  v6[17] = 0u;
  v6[18] = 0u;
  v6[19] = 0u;
  v6[20] = 0u;
  v6[21] = 0u;
  v6[22] = 0u;
  v6[23] = 0u;
  v6[24] = 0u;
  v6[25] = 0u;
  v6[26] = 0u;
  v6[27] = 0u;
  v6[28] = 0u;
  v6[29] = 0u;
  v6[30] = 0u;
  v6[31] = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  WTF::fastAlignedFree(0, v7);
  v8 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 80) = v8;
  *(_QWORD *)(v4 + 88) = 128;
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  v8[16] = 0u;
  v8[17] = 0u;
  v8[18] = 0u;
  v8[19] = 0u;
  v8[20] = 0u;
  v8[21] = 0u;
  v8[22] = 0u;
  v8[23] = 0u;
  v8[24] = 0u;
  v8[25] = 0u;
  v8[26] = 0u;
  v8[27] = 0u;
  v8[28] = 0u;
  v8[29] = 0u;
  v8[30] = 0u;
  v8[31] = 0u;
  v10 = *((float *)this + 4);
  if (v10 <= 0.0)
    goto LABEL_9;
  v11 = *(float *)(*((_QWORD *)this + 6) + 100);
  *(double *)(v4 + 40) = v11;
  if (v11 < 0.0)
    goto LABEL_9;
  v12 = round(v10 * v11 * 1024.0) * 0.0009765625;
  v13 = vcvtpd_u64_f64(v12) + 128;
  v14 = ceil(v12) >= 1.84467441e19 ? 127 : v13;
  if (v14 == *(_QWORD *)(v4 + 32))
    goto LABEL_9;
  if (!(v14 >> 62))
  {
    WTF::fastAlignedFree(*(WTF **)(v4 + 24), v9);
    v15 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *(_QWORD *)(v4 + 24) = v15;
    *(_QWORD *)(v4 + 32) = v14;
    bzero(v15, 4 * v14);
LABEL_9:
    *a2 = v4;
    return;
  }
  __break(0xC471u);
}

uint64_t WebCore::DynamicsCompressorNode::DynamicsCompressorNode(uint64_t a1, unsigned int *a2, float *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  float v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  float v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  float v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  float v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  float v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  WebCore::DynamicsCompressor *v43;
  void *v44;
  WTF *v45;
  WebCore::DynamicsCompressorNode *v47;
  WTF::StringImpl *v48[4];
  char v49;

  *(_QWORD *)a1 = off_1E3368A80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E3368BA8;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 15;
  v6 = a1 + 40;
  v7 = a2 + 6;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 88) = _Q0;
  *(_DWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 108) = 0;
  v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 112))(a2);
  v15 = (unsigned int *)(v14 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(a1 + 120) = v14;
  v17 = *((_QWORD *)a2 + 9);
  v18 = *((_QWORD *)a2 + 10) + 1;
  *((_QWORD *)a2 + 10) = v18;
  v19 = (WTF::StringImpl *)(v17 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v18);
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = 2;
  *(_DWORD *)(a1 + 144) = 0;
  v48[0] = (WTF::StringImpl *)"AudioNode";
  v48[1] = (WTF::StringImpl *)10;
  v48[2] = (WTF::StringImpl *)"AudioNode";
  v48[3] = v19;
  if (*(_BYTE *)(v14 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v48);
  (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 136))(a2);
  *(_QWORD *)a1 = off_1E336A560;
  *(_QWORD *)(a1 + 24) = &unk_1E336A690;
  *(_QWORD *)(a1 + 152) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = a3[10];
  v21 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(a1 + 160) = WebCore::AudioParam::AudioParam(v21, a2, (_DWORD **)v48, 1, 0, v20, -100.0, 0.0);
  v23 = v48[0];
  v48[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v24 = a3[7];
  v25 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(a1 + 168) = WebCore::AudioParam::AudioParam(v25, a2, (_DWORD **)v48, 1, 0, v24, 0.0, 40.0);
  v27 = v48[0];
  v48[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = a3[8];
  v29 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(a1 + 176) = WebCore::AudioParam::AudioParam(v29, a2, (_DWORD **)v48, 1, 0, v28, 1.0, 20.0);
  v31 = v48[0];
  v48[0] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32 = a3[6];
  v33 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(a1 + 184) = WebCore::AudioParam::AudioParam(v33, a2, (_DWORD **)v48, 1, 0, v32, 0.0, 1.0);
  v35 = v48[0];
  v48[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = a3[9];
  v37 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(a1 + 192) = WebCore::AudioParam::AudioParam(v37, a2, (_DWORD **)v48, 1, 0, v36, 0.0, 1.0);
  v39 = v48[0];
  v48[0] = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  *(_DWORD *)(a1 + 200) = 0;
  WebCore::AudioNode::addInput((WebCore::AudioNode *)a1);
  WebCore::AudioNode::addOutput((WebCore::AudioNode *)a1, (void *)2);
  if (*(_BYTE *)(a1 + 32))
    return a1;
  *(_BYTE *)(a1 + 32) = 1;
  v40 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v40 != -1)
  {
    v48[0] = (WTF::StringImpl *)&v49;
    v41 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v40])(v48, v6);
    v42 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 88))(v41) + 160);
    v43 = (WebCore::DynamicsCompressor *)WTF::fastMalloc((WTF *)0xA8);
    WebCore::DynamicsCompressor::DynamicsCompressor(v43, v42, (void *)2);
    v45 = *(WTF **)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v43;
    if (v45)
      std::default_delete<WebCore::DynamicsCompressor>::operator()[abi:sn180100](v45, v44);
    return a1;
  }
  v47 = (WebCore::DynamicsCompressorNode *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::DynamicsCompressorNode::initialize(v47);
}

void WebCore::DynamicsCompressorNode::initialize(WebCore::DynamicsCompressorNode *this)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  WebCore::DynamicsCompressor *v5;
  void *v6;
  WTF *v7;
  WebCore::DynamicsCompressorNode *v8;
  char v9;
  char *v10;

  if (!*((_BYTE *)this + 32))
  {
    *((_BYTE *)this + 32) = 1;
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 == -1)
    {
      v8 = (WebCore::DynamicsCompressorNode *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::DynamicsCompressorNode::~DynamicsCompressorNode(v8);
    }
    else
    {
      v10 = &v9;
      v3 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v10, (char *)this + 40);
      v4 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) + 160);
      v5 = (WebCore::DynamicsCompressor *)WTF::fastMalloc((WTF *)0xA8);
      WebCore::DynamicsCompressor::DynamicsCompressor(v5, v4, (void *)2);
      v7 = (WTF *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = v5;
      if (v7)
        std::default_delete<WebCore::DynamicsCompressor>::operator()[abi:sn180100](v7, v6);
    }
  }
}

void WebCore::DynamicsCompressorNode::~DynamicsCompressorNode(WebCore::DynamicsCompressorNode *this, void *a2)
{
  WTF *v3;
  WebCore::AudioParam *v4;
  WebCore::AudioParam *v5;
  WebCore::AudioParam *v6;
  WebCore::AudioParam *v7;
  WebCore::AudioParam *v8;
  WTF *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;

  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v3)
      std::default_delete<WebCore::DynamicsCompressor>::operator()[abi:sn180100](v3, a2);
    *((_BYTE *)this + 32) = 0;
  }
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, a2);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  v5 = (WebCore::AudioParam *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v5, a2);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*((_DWORD *)v5 + 16);
    }
  }
  v6 = (WebCore::AudioParam *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v6, a2);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*((_DWORD *)v6 + 16);
    }
  }
  v7 = (WebCore::AudioParam *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v7, a2);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*((_DWORD *)v7 + 16);
    }
  }
  v8 = (WebCore::AudioParam *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v8, a2);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*((_DWORD *)v8 + 16);
    }
  }
  v9 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v9)
    std::default_delete<WebCore::DynamicsCompressor>::operator()[abi:sn180100](v9, a2);
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DynamicsCompressorNode::~DynamicsCompressorNode(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::DynamicsCompressorNode::uninitialize(uint64_t this, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 32))
  {
    v2 = this;
    this = *(_QWORD *)(this + 152);
    *(_QWORD *)(v2 + 152) = 0;
    if (this)
      this = std::default_delete<WebCore::DynamicsCompressor>::operator()[abi:sn180100]((WTF *)this, a2);
    *(_BYTE *)(v2 + 32) = 0;
  }
  return this;
}

void `non-virtual thunk to'WebCore::DynamicsCompressorNode::~DynamicsCompressorNode(WebCore::DynamicsCompressorNode *this, void *a2)
{
  WebCore::DynamicsCompressorNode::~DynamicsCompressorNode((WebCore::DynamicsCompressorNode *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DynamicsCompressorNode::~DynamicsCompressorNode((WebCore::DynamicsCompressorNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

float WebCore::DynamicsCompressorNode::process(WebCore::DynamicsCompressorNode *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::AudioParam *v7;
  float v8;
  WebCore::AudioParam *v9;
  float v10;
  WebCore::AudioParam *v11;
  float v12;
  WebCore::AudioParam *v13;
  float v14;
  WebCore::AudioParam *v15;
  float v16;
  float *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  float result;
  float v24;

  if (*((_DWORD *)this + 21))
    v4 = **((_QWORD **)this + 9);
  else
    v4 = 0;
  v5 = 24;
  if (!*(_BYTE *)(v4 + 32))
    v5 = 16;
  v6 = *(_QWORD *)(v4 + v5);
  v7 = (WebCore::AudioParam *)*((_QWORD *)this + 20);
  v24 = 0.0;
  WebCore::AudioParam::calculateFinalValues(v7, &v24, 1u, 0);
  v8 = v24;
  v9 = (WebCore::AudioParam *)*((_QWORD *)this + 21);
  v24 = 0.0;
  WebCore::AudioParam::calculateFinalValues(v9, &v24, 1u, 0);
  v10 = v24;
  v11 = (WebCore::AudioParam *)*((_QWORD *)this + 22);
  v24 = 0.0;
  WebCore::AudioParam::calculateFinalValues(v11, &v24, 1u, 0);
  v12 = v24;
  v13 = (WebCore::AudioParam *)*((_QWORD *)this + 23);
  v24 = 0.0;
  WebCore::AudioParam::calculateFinalValues(v13, &v24, 1u, 0);
  v14 = v24;
  v15 = (WebCore::AudioParam *)*((_QWORD *)this + 24);
  v24 = 0.0;
  WebCore::AudioParam::calculateFinalValues(v15, &v24, 1u, 0);
  v16 = v24;
  v17 = (float *)*((_QWORD *)this + 19);
  v17[1] = v8;
  v17[2] = v10;
  v17[3] = v12;
  v17[4] = v14;
  v17[5] = v16;
  if (*((_DWORD *)this + 17))
    v18 = **((_QWORD **)this + 7);
  else
    v18 = 0;
  if (*(_DWORD *)(v18 + 28) == 1 && !*(_DWORD *)(*(_QWORD *)(v18 + 64) + 140))
  {
    v20 = **(_QWORD **)(v18 + 16);
    v21 = *(unsigned __int8 *)(v20 + 32);
    v22 = (uint64_t *)(v20 + 24);
    v19 = (uint64_t *)(v20 + 16);
    if (v21)
      v19 = v22;
  }
  else
  {
    v19 = (uint64_t *)(v18 + 80);
  }
  WebCore::DynamicsCompressor::process((uint64_t)v17, *v19, v6, a2);
  result = *(float *)(*((_QWORD *)this + 19) + 52);
  *((float *)this + 50) = result;
  return result;
}

uint64_t WebCore::DynamicsCompressorNode::setReduction(uint64_t this, float a2)
{
  *(float *)(this + 200) = a2;
  return this;
}

void WebCore::DynamicsCompressorNode::processOnlyAudioParams(WebCore::DynamicsCompressorNode *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 20);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = atomic_load((unint64_t *)(v6 + 240));
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v8)
        v8 = WTF::Thread::initializeCurrentTLS(0);
      if (a2 && v8 == v7)
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v4, v29, a2, *(_BYTE *)(v4 + 104) == 0);
    }
  }
  v9 = *((_QWORD *)this + 21);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = atomic_load((unint64_t *)(v11 + 240));
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13)
        v13 = WTF::Thread::initializeCurrentTLS(0);
      if (a2 && v13 == v12)
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v9, v29, a2, *(_BYTE *)(v9 + 104) == 0);
    }
  }
  v14 = *((_QWORD *)this + 22);
  v15 = *(_QWORD *)(v14 + 8);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = atomic_load((unint64_t *)(v16 + 240));
      v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v18)
        v18 = WTF::Thread::initializeCurrentTLS(0);
      if (a2 && v18 == v17)
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v14, v29, a2, *(_BYTE *)(v14 + 104) == 0);
    }
  }
  v19 = *((_QWORD *)this + 23);
  v20 = *(_QWORD *)(v19 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = atomic_load((unint64_t *)(v21 + 240));
      v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v23)
        v23 = WTF::Thread::initializeCurrentTLS(0);
      if (a2 && v23 == v22)
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v19, v29, a2, *(_BYTE *)(v19 + 104) == 0);
    }
  }
  v24 = *((_QWORD *)this + 24);
  v25 = *(_QWORD *)(v24 + 8);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
    {
      v27 = atomic_load((unint64_t *)(v26 + 240));
      v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v28)
        v28 = WTF::Thread::initializeCurrentTLS(0);
      if (a2)
      {
        if (v28 == v27)
          WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v24, v29, a2, *(_BYTE *)(v24 + 104) == 0);
      }
    }
  }
}

double WebCore::DynamicsCompressorNode::tailTime(WebCore::DynamicsCompressorNode *this)
{
  return 1.625;
}

double WebCore::DynamicsCompressorNode::latencyTime(WebCore::DynamicsCompressorNode *this, double a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 19);
  LODWORD(a2) = *(_DWORD *)(v2 + 100);
  return (double)*(unint64_t *)&a2 / *(float *)(v2 + 56);
}

uint64_t WebCore::DynamicsCompressorNode::requiresTailProcessing(WebCore::DynamicsCompressorNode *this)
{
  return 1;
}

WTF::Thread *WebCore::DynamicsCompressorNode::setChannelCount@<X0>(WebCore::DynamicsCompressorNode *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;

  if (a2 < 3)
    return WebCore::AudioNode::setChannelCount(this, a2, (_QWORD *)a3);
  result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t WebCore::DynamicsCompressorNode::setChannelCountMode@<X0>(uint64_t a1@<X0>, WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  if ((_DWORD)a2)
    return WebCore::AudioNode::setChannelCountMode(a1, a2, (_QWORD *)a3);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

WTF::StringImpl *WebCore::GainNode::create@<X0>(WebCore::BaseAudioContext *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::GainNode *v6;
  WebCore::GainNode *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v15;
  float v16;
  int v17;
  _BYTE v18[8];
  WTF::StringImpl *v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  float v25;

  v6 = (WebCore::GainNode *)bmalloc::api::isoAllocate();
  v7 = WebCore::GainNode::GainNode(v6, a1);
  v21 = 2;
  LODWORD(v22) = 0;
  result = WebCore::AudioNode::handleAudioNodeOptions((uint64_t)v7, (unsigned int *)a2, (unsigned int *)&v21, (uint64_t)v18);
  if (v20)
  {
    v10 = v19;
    *(_BYTE *)a3 = v18[0];
    *(_QWORD *)(a3 + 8) = v10;
    *(_DWORD *)(a3 + 16) = 1;
    if (v6)
      return WebCore::AudioNode::deref(v6);
  }
  else
  {
    v11 = *((_QWORD *)v6 + 21);
    v25 = *(float *)(a2 + 24);
    v12 = *(_QWORD *)(v11 + 144);
    v13 = *(_QWORD *)(v11 + 152);
    v21 = (uint64_t)"AudioParam";
    v22 = 11;
    v23 = "setValue";
    v24 = v13;
    if (*(_BYTE *)(v12 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
        result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v21, &v25);
    }
    v15 = *(float *)(v11 + 96);
    v16 = *(float *)(v11 + 100);
    if (v16 < v15)
    {
      __break(1u);
    }
    else
    {
      if (v16 >= v25)
        v16 = v25;
      if (v25 >= v15)
        v15 = v16;
      *(float *)(v11 + 88) = v15;
      *(_QWORD *)a3 = v6;
      v17 = v20;
      *(_DWORD *)(a3 + 16) = 0;
      if (v17)
      {
        result = v19;
        v19 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WebCore::GainNode *WebCore::GainNode::GainNode(WebCore::GainNode *this, WebCore::BaseAudioContext *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  void *v17;
  _OWORD *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v23[4];

  *(_QWORD *)this = off_1E3368A80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E3368BA8;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 11;
  v4 = (unsigned int *)((char *)a2 + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 5) = a2;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  *((_DWORD *)this + 26) = 1;
  *(_QWORD *)((char *)this + 108) = 0;
  v11 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 112))(a2);
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *((_QWORD *)this + 15) = v11;
  v14 = *((_QWORD *)a2 + 9);
  v15 = *((_QWORD *)a2 + 10) + 1;
  *((_QWORD *)a2 + 10) = v15;
  v16 = (WTF::StringImpl *)(v14 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v15);
  *((_QWORD *)this + 16) = v16;
  *((_QWORD *)this + 17) = 2;
  *((_DWORD *)this + 36) = 0;
  v23[0] = (WTF::StringImpl *)"AudioNode";
  v23[1] = (WTF::StringImpl *)10;
  v23[2] = (WTF::StringImpl *)"AudioNode";
  v23[3] = v16;
  if (*(_BYTE *)(v11 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v23);
  (*(void (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 136))(a2);
  *(_QWORD *)this = off_1E336A6D0;
  *((_QWORD *)this + 3) = &unk_1E336A7F8;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  WTF::fastAlignedFree(0, v17);
  v18 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 19) = v18;
  *((_QWORD *)this + 20) = 128;
  *v18 = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v18[16] = 0u;
  v18[17] = 0u;
  v18[18] = 0u;
  v18[19] = 0u;
  v18[20] = 0u;
  v18[21] = 0u;
  v18[22] = 0u;
  v18[23] = 0u;
  v18[24] = 0u;
  v18[25] = 0u;
  v18[26] = 0u;
  v18[27] = 0u;
  v18[28] = 0u;
  v18[29] = 0u;
  v18[30] = 0u;
  v18[31] = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 21) = WebCore::AudioParam::AudioParam(v19, a2, (_DWORD **)v23, 0, 1, 1.0, -3.4028e38, 3.4028e38);
  v21 = v23[0];
  v23[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  WebCore::AudioNode::addInput(this);
  WebCore::AudioNode::addOutput(this, (void *)1);
  *((_BYTE *)this + 32) = 1;
  return this;
}

void WebCore::GainNode::process(WebCore::GainNode *this, vDSP_Length a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const WebCore::AudioBus **v9;
  const WebCore::AudioBus *v10;
  _BOOL4 hasSampleAccurateValues;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::BaseAudioContext *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t j;
  uint64_t v30;
  void **v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  const WebCore::AudioBus **v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float v41;

  if (*((_DWORD *)this + 21))
    v4 = **((_QWORD **)this + 9);
  else
    v4 = 0;
  v5 = 24;
  if (!*(_BYTE *)(v4 + 32))
    v5 = 16;
  v6 = *(_QWORD *)(v4 + v5);
  if (!*((_BYTE *)this + 32))
    goto LABEL_19;
  if (*((_DWORD *)this + 17))
  {
    v7 = **((_QWORD **)this + 7);
    v8 = *(_DWORD *)(v7 + 28);
    if (!v8)
    {
LABEL_19:
      v16 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v16)
      {
        for (i = 0; i < v16; ++i)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * i);
          if (!*(_BYTE *)(v18 + 24))
          {
            *(_BYTE *)(v18 + 24) = 1;
            v19 = *(void ***)(v18 + 8);
            v20 = (_QWORD *)(v18 + 16);
            if (v19)
              v20 = v19 + 1;
            else
              v19 = (void **)v18;
            bzero(*v19, 4 * *v20);
            v16 = *(unsigned int *)(v6 + 28);
          }
        }
      }
      return;
    }
  }
  else
  {
    v8 = MEMORY[0x1C];
    if (!MEMORY[0x1C])
      goto LABEL_19;
    v7 = 0;
  }
  if (v8 == 1 && !*(_DWORD *)(*(_QWORD *)(v7 + 64) + 140))
  {
    v33 = **(_QWORD **)(v7 + 16);
    v34 = *(unsigned __int8 *)(v33 + 32);
    v35 = (const WebCore::AudioBus **)(v33 + 24);
    v9 = (const WebCore::AudioBus **)(v33 + 16);
    if (v34)
      v9 = v35;
  }
  else
  {
    v9 = (const WebCore::AudioBus **)(v7 + 80);
  }
  v10 = *v9;
  hasSampleAccurateValues = WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 21));
  v12 = *((_QWORD *)this + 21);
  if (hasSampleAccurateValues && !*(_BYTE *)(v12 + 104))
  {
    if (*((_QWORD *)this + 20) >= a2)
    {
      v36 = (float *)*((_QWORD *)this + 19);
      v37 = *(_QWORD *)(v12 + 8);
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 8);
        if (v38)
        {
          v39 = atomic_load((unint64_t *)(v38 + 240));
          v40 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v40)
            v40 = WTF::Thread::initializeCurrentTLS(0);
          if ((_DWORD)a2 && v36 && v40 == v39)
            WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v12, v36, a2, *(_BYTE *)(v12 + 104) == 0);
        }
      }
      WebCore::AudioBus::copyWithSampleAccurateGainValuesFrom(v6, (uint64_t)v10, v36, a2);
    }
  }
  else
  {
    v13 = WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 21));
    v14 = *((_QWORD *)this + 21);
    if (v13)
    {
      v41 = 0.0;
      WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v14, &v41, 1u, 0);
      v15 = v41;
    }
    else
    {
      v21 = *(_QWORD *)(v14 + 8);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
        {
          v23 = atomic_load((unint64_t *)(v22 + 240));
          v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v24)
            v24 = WTF::Thread::initializeCurrentTLS(0);
          if (v24 == v23)
          {
            v25 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8);
            v26 = v25 ? (WebCore::BaseAudioContext *)(v25 - 32) : 0;
            v27 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v14 + 112), v26, *(float *)(v14 + 88), *(float *)(v14 + 96), *(float *)(v14 + 100));
            if ((v27 & 0xFF00000000) != 0)
              *(_DWORD *)(v14 + 88) = v27;
          }
        }
      }
      v15 = *(float *)(v14 + 88);
    }
    if (v15 == 0.0)
    {
      v28 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v28)
      {
        for (j = 0; j < v28; ++j)
        {
          v30 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * j);
          if (!*(_BYTE *)(v30 + 24))
          {
            *(_BYTE *)(v30 + 24) = 1;
            v31 = *(void ***)(v30 + 8);
            v32 = (_QWORD *)(v30 + 16);
            if (v31)
              v32 = v31 + 1;
            else
              v31 = (void **)v30;
            bzero(*v31, 4 * *v32);
            v28 = *(unsigned int *)(v6 + 28);
          }
        }
      }
    }
    else
    {
      WebCore::AudioBus::copyWithGainFrom((WebCore::AudioBus *)v6, v10, v15);
    }
  }
}

void WebCore::GainNode::processOnlyAudioParams(WebCore::GainNode *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  float v8[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 21);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = atomic_load((unint64_t *)(v4 + 240));
      v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v7)
        v7 = WTF::Thread::initializeCurrentTLS(0);
      if (a2)
      {
        if (v7 == v6)
          WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v2, v8, a2, *(_BYTE *)(v2 + 104) == 0);
      }
    }
  }
}

uint64_t *WebCore::GainNode::checkNumberOfChannelsForInput(uint64_t *this, WebCore::AudioNodeInput *a2)
{
  uint64_t *v3;
  WebCore::AudioNodeInput *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::AudioNodeOutput *v17;

  v3 = this;
  if (*((_DWORD *)this + 17))
    v4 = *(WebCore::AudioNodeInput **)this[7];
  else
    v4 = 0;
  if (v4 != a2)
    return this;
  v5 = *((_QWORD *)a2 + 8);
  v6 = *(_DWORD *)(v5 + 140);
  if (v6 != 2)
  {
    v8 = *((_QWORD *)a2 + 5);
    if (v8)
    {
      v9 = *(unsigned int *)(v8 - 4);
      v10 = v8 + 8 * v9;
      if (*(_DWORD *)(v8 - 12))
      {
        v11 = *((_QWORD *)a2 + 5);
        if ((_DWORD)v9)
        {
          v12 = 8 * v9;
          v11 = *((_QWORD *)a2 + 5);
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 += 8;
            v12 -= 8;
            if (!v12)
            {
              v11 = v10;
              goto LABEL_17;
            }
          }
        }
        goto LABEL_17;
      }
      v11 = v8 + 8 * v9;
    }
    else
    {
      v11 = 0;
      v9 = 0;
    }
    v10 = v8 + 8 * v9;
LABEL_17:
    if (v8)
      v8 += 8 * *(unsigned int *)(v8 - 4);
    if (v8 == v11)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      do
      {
        v14 = v11 + 8;
        v15 = *(_DWORD *)(*(_QWORD *)v11 + 8);
        if (v13 <= v15)
          v13 = v15;
        v11 = v10;
        if (v14 != v10)
        {
          v11 = v14;
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 += 8;
            if (v11 == v10)
            {
              v11 = v10;
              break;
            }
          }
        }
      }
      while (v11 != v8);
    }
    if (v13 <= 1)
      v7 = 1;
    else
      v7 = v13;
    if (v6 == 1)
    {
      v16 = *(_DWORD *)(v5 + 136);
      if (v16 >= v7)
        v7 = v7;
      else
        v7 = v16;
    }
    goto LABEL_38;
  }
  v7 = *(unsigned int *)(v5 + 136);
LABEL_38:
  if (*((_BYTE *)this + 32) && (_DWORD)v7 != *(_DWORD *)(*(_QWORD *)this[9] + 8))
    *((_BYTE *)this + 32) = 0;
  if (!*((_BYTE *)this + 32))
  {
    if (*((_DWORD *)this + 21))
      v17 = *(WebCore::AudioNodeOutput **)this[9];
    else
      v17 = 0;
    WebCore::AudioNodeOutput::setNumberOfChannels(v17, v7);
    *((_BYTE *)v3 + 32) = 1;
  }
  return WebCore::AudioNodeInput::updateInternalBus((uint64_t *)a2, (void *)v7);
}

float WebCore::IIRDSPKernel::process(WebCore::IIRDSPKernel *this, const float *a2, float *a3, uint64_t a4, float a5)
{
  return WebCore::IIRFilter::process((WebCore::IIRDSPKernel *)((char *)this + 24), a2, a3, a4, a5);
}

unsigned int *WebCore::IIRDSPKernel::reset(WebCore::IIRDSPKernel *this)
{
  unsigned int *result;
  uint64_t v3;

  v3 = 0;
  WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)this + 6, &v3, *((unsigned int *)this + 9));
  v3 = 0;
  result = WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)this + 10, &v3, *((unsigned int *)this + 13));
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t WebCore::IIRDSPKernel::requiresTailProcessing(WebCore::IIRDSPKernel *this)
{
  return 1;
}

WTF::Thread *WebCore::IIRFilterNode::create@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  double *v10;
  WTF::Thread *result;
  char v12;
  unint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  unint64_t v17;
  double *v18;
  WTF *v19;
  void *v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  unint64_t v32;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  const char *v60;
  unint64_t v61;

  v5 = *(unsigned int *)(a3 + 36);
  if ((v5 - 21) <= 0xFFFFFFEB)
    goto LABEL_7;
  v9 = a3 + 24;
  v10 = *(double **)(a3 + 24);
  while (*v10 == 0.0)
  {
    ++v10;
    if (!--v5)
      goto LABEL_5;
  }
  v13 = *(unsigned int *)(a3 + 52);
  if ((v13 - 21) > 0xFFFFFFEB)
  {
    if (**(double **)(a3 + 40) == 0.0)
    {
LABEL_5:
      result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v12 = 8;
      goto LABEL_8;
    }
    v14 = (int)v13;
    v15 = (double *)WTF::fastMalloc((WTF *)(8 * v13));
    memcpy(v15, *(const void **)(a3 + 40), 8 * *(unsigned int *)(a3 + 52));
    v16 = *v15;
    if (*v15 != 1.0)
    {
      if (v13 >= 2)
      {
        v17 = v13 - 1;
        v18 = v15 + 1;
        do
        {
          *v18 = *v18 / v16;
          ++v18;
          --v17;
        }
        while (v17);
      }
      *v15 = 1.0;
    }
    v19 = (WTF *)WTF::fastMalloc((WTF *)(8 * (int)v13));
    if ((int)v13 >= 2)
    {
      v22 = (int)v13 - 1;
      while (1)
      {
        v23 = v14 - 1;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        if (v23 >= v13)
        {
LABEL_48:
          __break(0xC471u);
          JUMPOUT(0x195555590);
        }
        v25 = v15;
        v15 = (double *)v19;
        v26 = v25[v23];
        v27 = fabs(v26);
        v21 = v27 < 1.0;
        if (v27 >= 1.0)
          break;
        v28 = 0;
        v29 = 8 * v24;
        v30 = -v26;
        v31 = 1.0 - v26 * v26;
        v32 = v22;
        do
        {
          if (v32 >= v13)
            goto LABEL_48;
          *(double *)((char *)v19 + v28) = (v25[v28 / 8] + v30 * v25[v32]) / v31;
          v28 += 8;
          --v32;
        }
        while (v29 != v28);
        --v22;
        v19 = (WTF *)v25;
        if (v14-- < 3)
          goto LABEL_30;
      }
      v15 = v25;
    }
    else
    {
      v21 = 1;
    }
LABEL_30:
    WTF::fastFree(v19, v20);
    WTF::fastFree((WTF *)v15, v34);
    if ((v21 & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a1 + 248))(a1, 1, 1, &v58, 0);
      v36 = v58;
      v58 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v35);
        else
          *(_DWORD *)v36 -= 2;
      }
    }
    v37 = bmalloc::api::isoAllocate();
    v38 = v37;
    *(_QWORD *)v37 = off_1E3368A80;
    *(_QWORD *)(v37 + 8) = 0;
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = &unk_1E3368BA8;
    *(_BYTE *)(v37 + 32) = 0;
    *(_DWORD *)(v37 + 36) = 19;
    v39 = a2 + 6;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_QWORD *)(v37 + 40) = a2;
    *(_DWORD *)(v37 + 48) = 0;
    *(_OWORD *)(v37 + 72) = 0u;
    *(_OWORD *)(v37 + 56) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v37 + 88) = _Q0;
    *(_DWORD *)(v37 + 104) = 1;
    *(_QWORD *)(v37 + 108) = 0;
    v46 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 112))(a2);
    v47 = (unsigned int *)(v46 + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    *(_QWORD *)(v38 + 120) = v46;
    v49 = *((_QWORD *)a2 + 9);
    v50 = *((_QWORD *)a2 + 10) + 1;
    *((_QWORD *)a2 + 10) = v50;
    v51 = v49 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v50;
    *(_QWORD *)(v38 + 128) = v51;
    *(_QWORD *)(v38 + 136) = 2;
    *(_DWORD *)(v38 + 144) = 0;
    v58 = (WTF::StringImpl *)"AudioNode";
    v59 = 10;
    v60 = "AudioNode";
    v61 = v51;
    if (*(_BYTE *)(v46 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v58);
    (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 136))(a2);
    *(_QWORD *)v38 = off_1E3368918;
    *(_QWORD *)(v38 + 24) = &unk_1E3368A40;
    *(_QWORD *)(v38 + 152) = 0;
    WebCore::AudioNode::addInput((WebCore::AudioNode *)v38);
    WebCore::AudioNode::addOutput((WebCore::AudioNode *)v38, (void *)1);
    *(_QWORD *)v38 = off_1E336A888;
    *(_QWORD *)(v38 + 24) = &unk_1E336A9B0;
    v52 = *(float *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 88))(a2) + 160);
    v53 = WTF::fastMalloc((WTF *)0x60);
    WebCore::IIRProcessor::IIRProcessor(v53, 1, v9, (const void **)(a3 + 40), v21, v52);
    v54 = *(_QWORD *)(v38 + 152);
    *(_QWORD *)(v38 + 152) = v53;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    if (!*(_BYTE *)(v38 + 32))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v38 + 152) + 16))(*(_QWORD *)(v38 + 152));
      *(_BYTE *)(v38 + 32) = 1;
    }
    v56 = 2;
    v57 = 0;
    result = WebCore::AudioNode::handleAudioNodeOptions(v38, (unsigned int *)a3, (unsigned int *)&v56, (uint64_t)&v58);
    if ((_BYTE)v60)
    {
      v55 = v59;
      *(_BYTE *)a4 = (_BYTE)v58;
      *(_QWORD *)(a4 + 8) = v55;
      *(_DWORD *)(a4 + 16) = 1;
      return WebCore::AudioNode::deref((WebCore::AudioNode *)v38);
    }
    else
    {
      *(_QWORD *)a4 = v38;
      *(_DWORD *)(a4 + 16) = 0;
    }
  }
  else
  {
LABEL_7:
    result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 6;
LABEL_8:
    *(_BYTE *)a4 = v12;
    *(_DWORD *)(a4 + 16) = 1;
  }
  return result;
}

void WebCore::IIRFilterNode::getFrequencyResponse(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  WTF *v47;
  const float *v48;
  WTF *v49;
  WTF *v50;
  double v51;
  float v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *(_QWORD *)(a2 + 32);
  if (!v6)
    goto LABEL_8;
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    goto LABEL_64;
  v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v8 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v7 & 0x3FFFFFFFFLL) + v8))
    goto LABEL_64;
  v9 = *(_BYTE *)(a2 + 6);
  if ((v9 & 3) != 0)
  {
    if (*(_BYTE *)(v6 + 64) && (v54 = *(_QWORD *)(v6 + 32)) != 0)
    {
      v23 = atomic_load((unint64_t *)(v54 + 32));
      v9 = *(_BYTE *)(a2 + 6);
    }
    else
    {
      v23 = *(_QWORD *)(v6 + 48);
    }
    v24 = *(_QWORD *)(a2 + 8);
    if ((v9 & 4) == 0)
    {
      v25 = *(_QWORD *)(a2 + 16) + v24 <= v23 && v23 >= v24;
      if (v25)
        v6 = 0;
      else
        v6 = *(_QWORD *)(a2 + 16);
      goto LABEL_8;
    }
    v25 = v23 >= v24;
    v32 = v23 - v24;
    if (!v25)
    {
      if ((*(_BYTE *)(a2 + 4) - 4) > 7u)
        LOBYTE(v33) = 0;
      else
        v33 = qword_1968DEFB8[(char)(*(_BYTE *)(a2 + 4) - 4)];
      v6 = (-1 << v33) & v32;
      goto LABEL_8;
    }
LABEL_64:
    v6 = 0;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a2 + 16);
LABEL_8:
  v10 = v6 >> 2;
  v11 = *(_QWORD *)(a3 + 32);
  if (!v11)
    goto LABEL_15;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_68;
  v13 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v13 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v12 & 0x3FFFFFFFFLL) + v13))
    goto LABEL_68;
  v14 = *(_BYTE *)(a3 + 6);
  if ((v14 & 3) == 0)
  {
    v11 = *(_QWORD *)(a3 + 16);
    goto LABEL_15;
  }
  if (*(_BYTE *)(v11 + 64) && (v55 = *(_QWORD *)(v11 + 32)) != 0)
  {
    v26 = atomic_load((unint64_t *)(v55 + 32));
    v14 = *(_BYTE *)(a3 + 6);
  }
  else
  {
    v26 = *(_QWORD *)(v11 + 48);
  }
  v27 = *(_QWORD *)(a3 + 8);
  if ((v14 & 4) == 0)
  {
    if (*(_QWORD *)(a3 + 16) + v27 <= v26 && v26 >= v27)
      v11 = 0;
    else
      v11 = *(_QWORD *)(a3 + 16);
    goto LABEL_15;
  }
  v25 = v26 >= v27;
  v34 = v26 - v27;
  if (v25)
  {
LABEL_68:
    v11 = 0;
    goto LABEL_15;
  }
  if ((*(_BYTE *)(a3 + 4) - 4) > 7u)
    LOBYTE(v35) = 0;
  else
    v35 = qword_1968DEFB8[(char)(*(_BYTE *)(a3 + 4) - 4)];
  v11 = (-1 << v35) & v34;
LABEL_15:
  if (v10 != v11 >> 2)
  {
LABEL_33:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 12;
    *(_BYTE *)(a5 + 16) = 1;
    return;
  }
  v15 = *(_QWORD *)(a4 + 32);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 16);
    if (!v16)
      goto LABEL_72;
    v17 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v17 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v16 & 0x3FFFFFFFFLL) + v17))
      goto LABEL_72;
    v18 = *(_BYTE *)(a4 + 6);
    if ((v18 & 3) == 0)
    {
      v15 = *(_QWORD *)(a4 + 16);
      goto LABEL_23;
    }
    if (*(_BYTE *)(v15 + 64) && (v56 = *(_QWORD *)(v15 + 32)) != 0)
    {
      v29 = atomic_load((unint64_t *)(v56 + 32));
      v18 = *(_BYTE *)(a4 + 6);
    }
    else
    {
      v29 = *(_QWORD *)(v15 + 48);
    }
    v30 = *(_QWORD *)(a4 + 8);
    if ((v18 & 4) == 0)
    {
      if (*(_QWORD *)(a4 + 16) + v30 <= v29 && v29 >= v30)
        v15 = 0;
      else
        v15 = *(_QWORD *)(a4 + 16);
      goto LABEL_23;
    }
    v25 = v29 >= v30;
    v36 = v29 - v30;
    if (v25)
    {
LABEL_72:
      v15 = 0;
      goto LABEL_23;
    }
    if ((*(_BYTE *)(a4 + 4) - 4) > 7u)
      LOBYTE(v37) = 0;
    else
      v37 = qword_1968DEFB8[(char)(*(_BYTE *)(a4 + 4) - 4)];
    v15 = (-1 << v37) & v36;
  }
LABEL_23:
  if (v10 != v15 >> 2)
    goto LABEL_33;
  if (v6 < 4)
  {
LABEL_115:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    return;
  }
  v19 = *(_QWORD *)(a2 + 32);
  if (!v19)
    goto LABEL_85;
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
    goto LABEL_85;
  v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v21 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v22 = *(_QWORD *)(a2 + 24);
    goto LABEL_88;
  }
  if ((v20 & 0x3FFFFFFFFLL) + v21)
  {
    v22 = *(_QWORD *)(a2 + 24);
    if (v22 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
      v22 = (v22 & 0x3FFFFFFFFLL) + v21;
  }
  else
  {
LABEL_85:
    v22 = 0;
  }
LABEL_88:
  v38 = *(_QWORD *)(a3 + 32);
  if (!v38 || (v39 = *(_QWORD *)(v38 + 16)) == 0)
  {
LABEL_96:
    v41 = 0;
    goto LABEL_99;
  }
  v40 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v40 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    if ((v39 & 0x3FFFFFFFFLL) + v40)
    {
      v41 = *(float **)(a3 + 24);
      if (v41 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
        v41 = (float *)(((unint64_t)v41 & 0x3FFFFFFFFLL) + v40);
      goto LABEL_99;
    }
    goto LABEL_96;
  }
  v41 = *(float **)(a3 + 24);
LABEL_99:
  v42 = *(_QWORD *)(a4 + 32);
  if (!v42)
    goto LABEL_107;
  v43 = *(_QWORD *)(v42 + 16);
  if (!v43)
    goto LABEL_107;
  v44 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v44 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v45 = *(float **)(a4 + 24);
    goto LABEL_110;
  }
  if (!((v43 & 0x3FFFFFFFFLL) + v44))
  {
LABEL_107:
    v45 = 0;
    goto LABEL_110;
  }
  v45 = *(float **)(a4 + 24);
  if (v45 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    v45 = (float *)(((unint64_t)v45 & 0x3FFFFFFFFLL) + v44);
LABEL_110:
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 88);
  if (!(_DWORD)v10)
  {
    WebCore::IIRFilter::getFrequencyResponse((WebCore::IIRFilter *)(v46 + 24), 0, 0, v41, v45);
    goto LABEL_115;
  }
  if (!(v10 >> 30))
  {
    v47 = (WTF *)(4 * (v6 >> 2));
    v48 = (const float *)WTF::fastMalloc(v47);
    v49 = (WTF *)v48;
    v50 = 0;
    v51 = *(float *)(v46 + 16) * 0.5;
    do
    {
      v52 = *(float *)((char *)v50 + v22) / v51;
      *(float *)((char *)v50 + (_QWORD)v48) = v52;
      v50 = (WTF *)((char *)v50 + 4);
    }
    while (v47 != v50);
    WebCore::IIRFilter::getFrequencyResponse((WebCore::IIRFilter *)(v46 + 24), v10, v48, v41, v45);
    WTF::fastFree(v49, v53);
    goto LABEL_115;
  }
  __break(0xC471u);
}

uint64_t WebCore::DefaultAudioDestinationNode::requiresTailProcessing(WebCore::DefaultAudioDestinationNode *this)
{
  return 0;
}

void WebCore::DelayDSPKernel::~DelayDSPKernel(WTF **this, void *a2)
{
  void *v3;
  void *v4;

  WTF::fastAlignedFree(this[10], a2);
  WTF::fastAlignedFree(this[8], v3);
  WTF::fastAlignedFree(this[3], v4);
}

{
  void *v3;
  void *v4;
  void *v5;

  WTF::fastAlignedFree(this[10], a2);
  WTF::fastAlignedFree(this[8], v3);
  WTF::fastAlignedFree(this[3], v4);
  WTF::fastFree((WTF *)this, v5);
}

float WebCore::DynamicsCompressorNode::noiseInjectionMultiplier(WebCore::DynamicsCompressorNode *this)
{
  return 0.01;
}

void WebCore::GainNode::~GainNode(WebCore::GainNode *this, void *a2)
{
  WebCore::AudioParam *v3;
  void *v4;
  WTF *v5;
  void *v6;

  v3 = (WebCore::AudioParam *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 16);
    }
  }
  WTF::fastAlignedFree(*((WTF **)this + 19), a2);
  WebCore::AudioNode::~AudioNode(this, v4);
}

{
  WebCore::AudioParam *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;
  WTF *v7;
  void *v8;

  v3 = (WebCore::AudioParam *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*((_DWORD *)v3 + 16);
    }
  }
  WTF::fastAlignedFree(*((WTF **)this + 19), a2);
  WebCore::AudioNode::~AudioNode(this, v4);
  bmalloc::api::isoDeallocate(v5, v6);
}

double WebCore::GainNode::tailTime(WebCore::GainNode *this)
{
  return 0.0;
}

double WebCore::GainNode::latencyTime(WebCore::GainNode *this)
{
  return 0.0;
}

uint64_t WebCore::GainNode::requiresTailProcessing(WebCore::GainNode *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::GainNode::~GainNode(WebCore::GainNode *this, void *a2)
{
  WebCore::AudioParam *v3;
  void *v4;
  WTF *v5;
  void *v6;

  v3 = (WebCore::AudioParam *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 16);
    }
  }
  WTF::fastAlignedFree(*((WTF **)this + 16), a2);
  WebCore::AudioNode::~AudioNode((WebCore::GainNode *)((char *)this - 24), v4);
}

{
  WebCore::AudioParam *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;
  WTF *v7;
  void *v8;

  v3 = (WebCore::AudioParam *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*((_DWORD *)v3 + 16);
    }
  }
  WTF::fastAlignedFree(*((WTF **)this + 16), a2);
  WebCore::AudioNode::~AudioNode((WebCore::GainNode *)((char *)this - 24), v4);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::IIRDSPKernel::~IIRDSPKernel(WebCore::IIRDSPKernel *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

double WebCore::IIRDSPKernel::tailTime(WebCore::IIRDSPKernel *this)
{
  return *((double *)this + 10);
}

double WebCore::IIRDSPKernel::latencyTime(WebCore::IIRDSPKernel *this)
{
  return 0.0;
}

void WebCore::IIRFilterNode::~IIRFilterNode(WebCore::IIRFilterNode *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::IIRFilterNode::~IIRFilterNode(WebCore::IIRFilterNode *this, void *a2)
{
  uint64_t v3;
  WebCore::AudioNode *v4;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::IIRFilterNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
}

{
  uint64_t v3;
  WebCore::AudioNode *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::IIRFilterNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::DelayNode::~DelayNode(WebCore::DelayNode *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::DelayNode::~DelayNode(WebCore::DelayNode *this, void *a2)
{
  uint64_t v3;
  WebCore::AudioNode *v4;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::DelayNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
}

{
  uint64_t v3;
  WebCore::AudioNode *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::DelayNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t std::default_delete<WebCore::DynamicsCompressor>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  WTF ***v4;
  uint64_t v5;
  WTF **v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  v3 = *((unsigned int *)this + 29);
  if ((_DWORD)v3)
  {
    v4 = (WTF ***)*((_QWORD *)this + 13);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        WTF::fastAlignedFree(*v6, a2);
        WTF::fastFree((WTF *)v6, v7);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
    WTF::fastFree(v9, a2);
  v10 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
    WTF::fastFree(v10, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::dispatchToRenderThreadFunction(void)::$_0,void,WTF::Function<void ()(void)> &&>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E336ABB8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::dispatchToRenderThreadFunction(void)::$_0,void,WTF::Function<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336ABB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::dispatchToRenderThreadFunction(void)::$_0,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  _QWORD *v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E336ABE0;
  v4[1] = v3;
  v8 = 0;
  v9 = v4;
  v10 = 0;
  (*(void (**)(_QWORD, _QWORD **, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v2 + 40) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 48), &v9, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::dispatchToRenderThreadFunction(void)::$_0::operator() const(WTF::Function<void ()(void)> &&)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336ABE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::dispatchToRenderThreadFunction(void)::$_0::operator() const(WTF::Function<void ()(void)> &&)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336ABE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::dispatchToRenderThreadFunction(void)::$_0::operator() const(WTF::Function<void ()(void)> &&)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336AC08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336AC08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  char v3;
  char v4;
  uint64_t v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  char v8[8];
  WTF::StringImpl *v9;
  char v10;

  if ((a2 & 1) != 0)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
    v3 = 8;
  }
  v8[0] = v3;
  v10 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::resume(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336AC30;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::resume(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336AC30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::resume(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5[0] = 8;
  v7 = 1;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, v5);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::resume(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336AC58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::resume(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336AC58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::resume(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  char v3;
  char v4;
  uint64_t v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  char v8[8];
  WTF::StringImpl *v9;
  char v10;

  if ((a2 & 1) != 0)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
    v3 = 8;
  }
  v8[0] = v3;
  v10 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::suspend(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336AC80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::suspend(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336AC80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::suspend(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5[0] = 8;
  v7 = 1;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, v5);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::suspend(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336ACA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::suspend(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336ACA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DefaultAudioDestinationNode::suspend(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  char v3;
  char v4;
  uint64_t v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  char v8[8];
  WTF::StringImpl *v9;
  char v10;

  if ((a2 & 1) != 0)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
    v3 = 8;
  }
  v8[0] = v3;
  v10 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::IIRProcessor::IIRProcessor(uint64_t a1, int a2, uint64_t a3, const void **a4, char a5, float a6)
{
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  float v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;

  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  *(float *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)a1 = off_1E336AD10;
  v10 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195556AE4);
    }
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *(_DWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 48) = v12;
    memcpy(v12, *(const void **)a3, 8 * *(unsigned int *)(a3 + 12));
  }
  v13 = *((unsigned int *)a4 + 3);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v14 = (_QWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 76) = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195556AECLL);
    }
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 64) = v15;
    memcpy(v15, *a4, 8 * *((unsigned int *)a4 + 3));
  }
  *(_BYTE *)(a1 + 80) = a5;
  *(_QWORD *)(a1 + 88) = 0;
  v16 = *((unsigned int *)a4 + 3);
  if (!(_DWORD)v16)
  {
    __break(0xC471u);
    JUMPOUT(0x195556ADCLL);
  }
  v17 = *(double *)*a4;
  if (v17 != 1.0)
  {
    v18 = *(unsigned int *)(a3 + 12);
    v19 = v17;
    v20 = v19;
    if (v16 >= 2)
    {
      v21 = *(_DWORD *)(a1 + 76);
      if (v21 <= 1)
        v21 = 1;
      v22 = 8 * v16;
      v23 = 8 * v21;
      v24 = 8;
      do
      {
        if (v23 == v24)
        {
          __break(0xC471u);
          JUMPOUT(0x195556AD4);
        }
        *(double *)(*v14 + v24) = *(double *)(*v14 + v24) / v20;
        v24 += 8;
      }
      while (v22 != v24);
    }
    if ((_DWORD)v18)
    {
      v25 = 0;
      v26 = 8 * v18;
      v27 = 8 * *(unsigned int *)(a1 + 60);
      while (v27 != v25)
      {
        *(double *)(*v11 + v25) = *(double *)(*v11 + v25) / v20;
        v25 += 8;
        if (v26 == v25)
          goto LABEL_19;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195556ACCLL);
    }
LABEL_19:
    if (!*(_DWORD *)(a1 + 76))
      goto LABEL_37;
    *(_QWORD *)*v14 = 0x3FF0000000000000;
  }
  v28 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v28 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)v28 = off_1E336A838;
  *(_QWORD *)(v28 + 8) = a1;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  *(_DWORD *)(v28 + 36) = 32;
  v29 = (void *)WTF::fastMalloc((WTF *)0x100);
  *(_DWORD *)(v28 + 32) = 32;
  *(_QWORD *)(v28 + 24) = v29;
  v30 = *(unsigned int *)(v28 + 36);
  if ((_DWORD)v30)
    bzero(v29, 8 * v30);
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 48) = 0;
  *(_DWORD *)(v28 + 52) = 32;
  v31 = (void *)WTF::fastMalloc((WTF *)0x100);
  *(_DWORD *)(v28 + 48) = 32;
  *(_QWORD *)(v28 + 40) = v31;
  v32 = *(unsigned int *)(v28 + 52);
  if ((_DWORD)v32)
    bzero(v31, 8 * v32);
  *(_QWORD *)(v28 + 56) = 0;
  *(_QWORD *)(v28 + 64) = v11;
  *(_QWORD *)(v28 + 72) = v14;
  *(double *)(v28 + 80) = WebCore::IIRFilter::tailTime((WebCore::IIRFilter *)(v28 + 24), *(float *)(a1 + 16), (void *)*(unsigned __int8 *)(a1 + 80));
  v34 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v28;
  if (v34)
  {
    v35 = *(WTF **)(v34 + 40);
    if (v35)
    {
      *(_QWORD *)(v34 + 40) = 0;
      *(_DWORD *)(v34 + 48) = 0;
      WTF::fastFree(v35, v33);
    }
    v36 = *(WTF **)(v34 + 24);
    if (v36)
    {
      *(_QWORD *)(v34 + 24) = 0;
      *(_DWORD *)(v34 + 32) = 0;
      WTF::fastFree(v36, v33);
    }
    WTF::fastFree((WTF *)v34, v33);
  }
  return a1;
}

void WebCore::IIRProcessor::~IIRProcessor(WebCore::IIRProcessor *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  if (*((_BYTE *)this + 8))
  {
    if (*((_DWORD *)this + 8))
    {
      v3 = *((unsigned int *)this + 9);
      if ((_DWORD)v3)
      {
        v4 = (uint64_t *)*((_QWORD *)this + 3);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          ++v4;
          v5 -= 8;
        }
        while (v5);
        *((_DWORD *)this + 9) = 0;
      }
      v7 = (WTF *)*((_QWORD *)this + 3);
      if (v7)
      {
        *((_QWORD *)this + 3) = 0;
        *((_DWORD *)this + 8) = 0;
        WTF::fastFree(v7, a2);
      }
    }
    *((_BYTE *)this + 8) = 0;
  }
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    v9 = *(WTF **)(v8 + 40);
    if (v9)
    {
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 48) = 0;
      WTF::fastFree(v9, a2);
    }
    v10 = *(WTF **)(v8 + 24);
    if (v10)
    {
      *(_QWORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 32) = 0;
      WTF::fastFree(v10, a2);
    }
    WTF::fastFree((WTF *)v8, a2);
  }
  v11 = (WTF *)*((_QWORD *)this + 8);
  if (v11)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 6);
  if (v12)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v12, a2);
  }
  *(_QWORD *)this = off_1E3407510;
  v13 = *((unsigned int *)this + 9);
  v14 = (WTF *)*((_QWORD *)this + 3);
  if ((_DWORD)v13)
  {
    v15 = 8 * v13;
    do
    {
      v16 = *(_QWORD *)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v14 = (WTF *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
    v14 = (WTF *)*((_QWORD *)this + 3);
  }
  if (v14)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v14, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::IIRProcessor::~IIRProcessor(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::IIRProcessor::createKernel(WebCore::IIRProcessor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v4 + 16) = *((_DWORD *)this + 4);
  *(_QWORD *)v4 = off_1E336A838;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 36) = 32;
  v5 = (void *)WTF::fastMalloc((WTF *)0x100);
  *(_DWORD *)(v4 + 32) = 32;
  *(_QWORD *)(v4 + 24) = v5;
  v6 = *(unsigned int *)(v4 + 36);
  if ((_DWORD)v6)
    bzero(v5, 8 * v6);
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 52) = 32;
  v7 = (void *)WTF::fastMalloc((WTF *)0x100);
  *(_DWORD *)(v4 + 48) = 32;
  *(_QWORD *)(v4 + 40) = v7;
  v8 = *(unsigned int *)(v4 + 52);
  if ((_DWORD)v8)
    bzero(v7, 8 * v8);
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = (char *)this + 48;
  *(_QWORD *)(v4 + 72) = (char *)this + 64;
  *(double *)(v4 + 80) = WebCore::IIRFilter::tailTime((WebCore::IIRFilter *)(v4 + 24), *((float *)this + 4), (void *)*((unsigned __int8 *)this + 80));
  *a2 = v4;
}

void WebCore::IIRProcessor::process(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  void **v11;
  _QWORD *v12;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 36))
    {
      v6 = 0;
      do
      {
        if (*(_DWORD *)(a2 + 28) <= v6 || *(_DWORD *)(a3 + 28) <= v6)
        {
          __break(0xC471u);
          JUMPOUT(0x195556E50);
        }
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v6) + 24) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        ++v6;
      }
      while (v6 < *(unsigned int *)(a1 + 36));
    }
  }
  else
  {
    v8 = *(unsigned int *)(a3 + 28);
    if ((_DWORD)v8)
    {
      for (i = 0; i < v8; ++i)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * i);
        if (!*(_BYTE *)(v10 + 24))
        {
          *(_BYTE *)(v10 + 24) = 1;
          v11 = *(void ***)(v10 + 8);
          v12 = (_QWORD *)(v10 + 16);
          if (v11)
            v12 = v11 + 1;
          else
            v11 = (void **)v10;
          bzero(*v11, 4 * *v12);
          v8 = *(unsigned int *)(a3 + 28);
        }
      }
    }
  }
}

uint64_t WebCore::MediaElementAudioSourceNode::create@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v30[4];

  if (!*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1955570B0);
  }
  v6 = *(_QWORD *)(*a2 + 1400);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v8 = 1;
  }
  else
  {
    v9 = bmalloc::api::isoAllocate();
    v10 = v9;
    v11 = *a2;
    *(_DWORD *)(*a2 + 24) += 2;
    *(_QWORD *)v9 = off_1E3368A80;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = &unk_1E3368BA8;
    *(_BYTE *)(v9 + 32) = 0;
    *(_DWORD *)(v9 + 36) = 3;
    v12 = a1 + 6;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    *(_QWORD *)(v9 + 40) = a1;
    *(_DWORD *)(v9 + 48) = 0;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v9 + 88) = _Q0;
    *(_DWORD *)(v9 + 104) = 1;
    *(_QWORD *)(v9 + 108) = 0;
    v19 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    *(_QWORD *)(v10 + 120) = v19;
    v22 = *((_QWORD *)a1 + 9);
    v23 = *((_QWORD *)a1 + 10) + 1;
    *((_QWORD *)a1 + 10) = v23;
    v24 = v22 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v23;
    *(_QWORD *)(v10 + 128) = v24;
    *(_QWORD *)(v10 + 136) = 2;
    *(_DWORD *)(v10 + 144) = 0;
    v30[0] = "AudioNode";
    v30[1] = 10;
    v30[2] = "AudioNode";
    v30[3] = v24;
    if (*(_BYTE *)(v19 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v30);
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
    *(_QWORD *)(v10 + 160) = 0;
    v26 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = v10 + 152;
    v27 = *(unsigned int **)(v10 + 160);
    *(_QWORD *)(v10 + 160) = v26;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v25);
      }
    }
    *(_QWORD *)v10 = off_1E336AD88;
    *(_QWORD *)(v10 + 24) = &unk_1E336AEB8;
    *(_QWORD *)(v10 + 152) = &unk_1E336AEF8;
    *(_QWORD *)(v10 + 168) = v11;
    *(_BYTE *)(v10 + 176) = 0;
    *(_DWORD *)(v10 + 180) = 0;
    *(_QWORD *)(v10 + 184) = 0;
    *(_BYTE *)(v10 + 192) = 0;
    *(_QWORD *)(v10 + 200) = 0;
    WebCore::AudioNode::addOutput((WebCore::AudioNode *)v10, (void *)2);
    *(_BYTE *)(v10 + 32) = 1;
    WebCore::HTMLMediaElement::setAudioSourceNode(*a2, (WebCore::MediaElementAudioSourceNode *)v10);
    result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v10);
    v8 = 0;
    *(_QWORD *)a3 = v10;
  }
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void WebCore::MediaElementAudioSourceNode::~MediaElementAudioSourceNode(WebCore::MediaElementAudioSourceNode *this)
{
  void *v2;
  WebCore::MultiChannelResampler *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  WebCore::HTMLMediaElement::setAudioSourceNode(*((_QWORD *)this + 21), 0);
  *((_BYTE *)this + 32) = 0;
  v3 = (WebCore::MultiChannelResampler *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    WebCore::MultiChannelResampler::~MultiChannelResampler(v3, v2);
    WTF::fastFree(v4, v5);
  }
  v6 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 20);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 20) = 0;
  }
  WebCore::AudioNode::~AudioNode(this, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaElementAudioSourceNode::~MediaElementAudioSourceNode(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::MediaElementAudioSourceNode::~MediaElementAudioSourceNode(WebCore::MediaElementAudioSourceNode *this)
{
  WebCore::MediaElementAudioSourceNode::~MediaElementAudioSourceNode((WebCore::MediaElementAudioSourceNode *)((char *)this - 24));
}

{
  WebCore::MediaElementAudioSourceNode::~MediaElementAudioSourceNode((WebCore::MediaElementAudioSourceNode *)((char *)this - 152));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaElementAudioSourceNode::~MediaElementAudioSourceNode((WebCore::MediaElementAudioSourceNode *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaElementAudioSourceNode::~MediaElementAudioSourceNode((WebCore::MediaElementAudioSourceNode *)((char *)this - 152));
  bmalloc::api::isoDeallocate(v1, v2);
}

WTF::Thread *WebCore::MediaElementAudioSourceNode::setFormat(WebCore::MediaElementAudioSourceNode *this, char *a2, float a3)
{
  char *v3;
  uint64_t (**v4)();
  uint64_t i;
  uint64_t (**v6)();
  double v7;
  unsigned __int8 *v10;
  uint64_t v12;
  WebCore::BaseAudioContext *v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  WebCore::MultiChannelResampler *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  WTF::Thread *v32;
  WTF::Thread *v33;
  uint64_t v34;
  unsigned __int16 v36;
  _BYTE *v37;
  int v38;
  WebCore::AudioNodeOutput *v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  char v48;
  char *v49;

  *(float *)&v7 = a3;
  WebCore::AudioNode::ref(this);
  v10 = (unsigned __int8 *)this + 176;
  if (__ldaxr((unsigned __int8 *)this + 176))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 176);
    goto LABEL_5;
  }
  if (__stxr(1u, v10))
    goto LABEL_4;
LABEL_5:
  v12 = *((unsigned int *)this + 12);
  if ((_DWORD)v12 == -1)
    goto LABEL_72;
  v3 = (char *)this + 40;
  v49 = &v48;
  v6 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix;
  v13 = (WebCore::BaseAudioContext *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v49, (char *)this + 40);
  v15 = (unsigned int *)WebCore::BaseAudioContext::origin(v13, v14);
  if (!v15)
  {
    i = 1;
    goto LABEL_14;
  }
  v4 = (uint64_t (**)())v15;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = *((_QWORD *)this + 21);
  v19 = *(_QWORD *)(v18 + 1136);
  if (!v19 || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 72) + 808))(*(_QWORD *)(v19 + 72)) & 1) != 0)
  {
LABEL_11:
    i = 0;
    goto LABEL_12;
  }
  i = *(_QWORD *)(v18 + 1136);
  if (!i)
    goto LABEL_12;
  v36 = (*(uint64_t (**)(_QWORD, uint64_t (**)()))(**(_QWORD **)(i + 72) + 816))(*(_QWORD *)(i + 72), v4);
  if (v36 < 0x100u)
  {
    i += 104;
    if ((WTF::URL::protocolIs() & 1) == 0)
    {
      v37 = &unk_1EE2F7000;
        goto LABEL_73;
      goto LABEL_37;
    }
    goto LABEL_11;
  }
  for (i = v36 != 0;
        ;
        LODWORD(i) = WebCore::SecurityOrigin::canRequest((uint64_t)v4, (WebCore::ThreadableBlobRegistry *)i, (uint64_t (***)(_QWORD, uint64_t))&WebCore::EmptyOriginAccessPatterns::singleton(void)::instance) ^ 1)
  {
    do
    {
LABEL_12:
      v20 = __ldaxr((unsigned int *)v4);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v4));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v4);
      v45 = (WTF::StringImpl *)v4[6];
      v4[6] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v16);
        else
          *(_DWORD *)v45 -= 2;
      }
      v46 = (WTF::StringImpl *)v4[5];
      v4[5] = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v16);
        else
          *(_DWORD *)v46 -= 2;
      }
      v47 = *((unsigned int *)v4 + 8);
      if ((_DWORD)v47 != -1)
        ((void (*)(char **, uint64_t (**)()))off_1E336B828[v47])(&v49, v4 + 1);
      *((_DWORD *)v4 + 8) = -1;
      WTF::fastFree((WTF *)v4, v16);
    }
LABEL_14:
    *((_BYTE *)this + 192) = i;
    if ((char *)*((unsigned int *)this + 45) == a2 && *((double *)this + 23) == *(float *)&v7)
      break;
    if (*(float *)&v7 > 192000.0 || (unint64_t)(a2 - 33) < 0xFFFFFFFFFFFFFFE0 || *(float *)&v7 < 8000.0)
    {
      *((_DWORD *)this + 45) = 0;
      *((_QWORD *)this + 23) = 0;
      break;
    }
    *((_DWORD *)this + 45) = (_DWORD)a2;
    *((double *)this + 23) = *(float *)&v7;
    v22 = *((unsigned int *)this + 12);
    if ((_DWORD)v22 == -1)
      goto LABEL_72;
    v49 = &v48;
    v4 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix;
    v23 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v22])(&v49, v3);
    if (*(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23) + 160) != *(float *)&v7)
    {
      v25 = *((unsigned int *)this + 12);
      if ((_DWORD)v25 == -1)
        goto LABEL_72;
      v49 = &v48;
      v26 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v25])(&v49, v3);
      v7 = (float)(*(float *)&v7 / *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26) + 160));
      v4 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x30);
      v27 = (char *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v27 = off_1E336B7A0;
      *((_QWORD *)v27 + 1) = WebCore::MediaElementAudioSourceNode::provideInput;
      *((_QWORD *)v27 + 2) = 0;
      *((_QWORD *)v27 + 3) = this;
      v49 = v27;
      WebCore::MultiChannelResampler::MultiChannelResampler((uint64_t)v4, a2, (void *)0x80, (uint64_t *)&v49, v7);
      if (v49)
        (*(void (**)(char *))(*(_QWORD *)v49 + 8))(v49);
      v28 = (WebCore::MultiChannelResampler *)*((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = v4;
      if (!v28)
        goto LABEL_26;
LABEL_25:
      WebCore::MultiChannelResampler::~MultiChannelResampler(v28, v24);
      WTF::fastFree(v29, v30);
      goto LABEL_26;
    }
    v28 = (WebCore::MultiChannelResampler *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v28)
      goto LABEL_25;
LABEL_26:
    v31 = *((unsigned int *)this + 12);
    if ((_DWORD)v31 != -1)
    {
      v49 = &v48;
      v32 = (WTF::Thread *)((uint64_t (*)(char **, char *))v6[v31])(&v49, v3);
      v33 = v32;
      v34 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v34)
        v34 = WTF::Thread::initializeCurrentTLS(v32);
      if (v34 == *((_QWORD *)v33 + 35))
      {
        v38 = *((_DWORD *)v33 + 72) + 1;
      }
      else
      {
        if (__ldaxr((unsigned __int8 *)v33 + 292))
        {
          __clrex();
          goto LABEL_43;
        }
        if (__stxr(1u, (unsigned __int8 *)v33 + 292))
LABEL_43:
          MEMORY[0x19AEA534C]();
        *((_QWORD *)v33 + 35) = v34;
        v38 = 1;
      }
      *((_DWORD *)v33 + 72) = v38;
      if (*((_DWORD *)this + 21))
        v39 = (WebCore::AudioNodeOutput *)**((_QWORD **)this + 9);
      else
        v39 = 0;
      WebCore::AudioNodeOutput::setNumberOfChannels(v39, (int)a2);
      v40 = *((_DWORD *)v33 + 72) - 1;
      *((_DWORD *)v33 + 72) = v40;
      if (!v40)
      {
        *((_QWORD *)v33 + 35) = 0;
        v41 = (unsigned __int8 *)v33 + 292;
        v42 = __ldxr((unsigned __int8 *)v33 + 292);
        if (v42 == 1)
        {
          if (!__stlxr(0, v41))
            break;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v41);
      }
      break;
    }
LABEL_72:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_73:
    WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
    v37[3848] = 1;
LABEL_37:
    ;
  }
  v43 = __ldxr(v10);
  if (v43 == 1)
  {
    if (!__stlxr(0, v10))
      return WebCore::AudioNode::deref(this);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::MediaElementAudioSourceNode *)((char *)this + 176));
  return WebCore::AudioNode::deref(this);
}

void WebCore::MediaElementAudioSourceNode::provideInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (***v6)(_QWORD, uint64_t, uint64_t);
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  void **v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 1136);
  if (v4
    && (v6 = (void (***)(_QWORD, uint64_t, uint64_t))(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72)
                                                                                                + 904))(*(_QWORD *)(v4 + 72))) != 0)
  {
    (**v6)(v6, a2, a3);
  }
  else
  {
    v7 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v7)
    {
      for (i = 0; i < v7; ++i)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i);
        if (!*(_BYTE *)(v9 + 24))
        {
          *(_BYTE *)(v9 + 24) = 1;
          v10 = *(void ***)(v9 + 8);
          v11 = (_QWORD *)(v9 + 16);
          if (v10)
            v11 = v10 + 1;
          else
            v10 = (void **)v9;
          bzero(*v10, 4 * *v11);
          v7 = *(unsigned int *)(a2 + 28);
        }
      }
    }
  }
}

WTF::Thread *`non-virtual thunk to'WebCore::MediaElementAudioSourceNode::setFormat(WebCore::MediaElementAudioSourceNode *this, char *a2, float a3)
{
  return WebCore::MediaElementAudioSourceNode::setFormat((WebCore::MediaElementAudioSourceNode *)((char *)this - 152), a2, a3);
}

void WebCore::MediaElementAudioSourceNode::process(WebCore::MediaElementAudioSourceNode *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t j;
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  uint64_t v21;
  void (***v22)(_QWORD, uint64_t, unint64_t);
  unint64_t k;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  if (*((_DWORD *)this + 21))
    v3 = **((_QWORD **)this + 9);
  else
    v3 = 0;
  v4 = 24;
  if (!*(_BYTE *)(v3 + 32))
    v4 = 16;
  v5 = *(_QWORD *)(v3 + v4);
  v6 = (unsigned __int8 *)this + 176;
  do
  {
    while (1)
    {
      v7 = *v6;
      if ((v7 & 1) != 0)
      {
        v16 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v16)
        {
          for (i = 0; i < v16; ++i)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * i);
            if (!*(_BYTE *)(v18 + 24))
            {
              *(_BYTE *)(v18 + 24) = 1;
              v19 = *(void ***)(v18 + 8);
              v20 = (_QWORD *)(v18 + 16);
              if (v19)
                v20 = v19 + 1;
              else
                v19 = (void **)v18;
              bzero(*v19, 4 * *v20);
              v16 = *(unsigned int *)(v5 + 28);
            }
          }
        }
        return;
      }
      v8 = __ldaxr(v6);
      if (v8 == v7)
        break;
      __clrex();
    }
  }
  while (__stxr(v7 | 1, v6));
  if (*((_BYTE *)this + 192)
    || (v15 = *((unsigned int *)this + 45), !(_DWORD)v15)
    || *((double *)this + 23) == 0.0
    || v15 != *(_DWORD *)(v5 + 28))
  {
    v9 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v9)
    {
      for (j = 0; j < v9; ++j)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * j);
        if (!*(_BYTE *)(v11 + 24))
        {
          *(_BYTE *)(v11 + 24) = 1;
          v12 = *(void ***)(v11 + 8);
          v13 = (_QWORD *)(v11 + 16);
          if (v12)
            v13 = v12 + 1;
          else
            v12 = (void **)v11;
          bzero(*v12, 4 * *v13);
          v9 = *(unsigned int *)(v5 + 28);
        }
      }
    }
    goto LABEL_21;
  }
  if (!*((_QWORD *)this + 25))
  {
    v21 = *(_QWORD *)(*((_QWORD *)this + 21) + 1136);
    if (v21)
    {
      v22 = (void (***)(_QWORD, uint64_t, unint64_t))(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 72) + 904))(*(_QWORD *)(v21 + 72));
      if (v22)
      {
        (**v22)(v22, v5, a2);
        goto LABEL_21;
      }
      v15 = *(unsigned int *)(v5 + 28);
      if (!(_DWORD)v15)
        goto LABEL_21;
    }
    for (k = 0; k < v15; ++k)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * k);
      if (!*(_BYTE *)(v24 + 24))
      {
        *(_BYTE *)(v24 + 24) = 1;
        v25 = *(_QWORD *)(v24 + 8);
        v26 = (_QWORD *)(v24 + 16);
        if (v25)
        {
          v26 = (_QWORD *)(v25 + 8);
          v24 = *(_QWORD *)(v24 + 8);
        }
        bzero(*(void **)v24, 4 * *v26);
        v15 = *(unsigned int *)(v5 + 28);
      }
    }
    goto LABEL_21;
  }
  WebCore::MultiChannelResampler::process(*((uint64_t ***)this + 25), (WebCore::AudioBus *)v5, a2);
LABEL_21:
  v14 = __ldxr(v6);
  if (v14 == 1)
  {
    if (!__stlxr(0, v6))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

WTF::Thread *WebCore::MediaStreamAudioDestinationNode::create@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;
  uint64_t v6;
  WebCore::MediaStreamAudioDestinationNode *v8;
  WebCore::MediaStreamAudioDestinationNode *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;
  char v15;

  if (!*(_BYTE *)(a1 + 379) && (v6 = *(_QWORD *)(a1 + 8)) != 0 && *(_QWORD *)(v6 + 8))
  {
    v8 = (WebCore::MediaStreamAudioDestinationNode *)bmalloc::api::isoAllocate();
    v9 = WebCore::MediaStreamAudioDestinationNode::MediaStreamAudioDestinationNode(v8, (WebCore::BaseAudioContext *)a1);
    v11 = 0x200000002;
    v12 = 0;
    result = WebCore::AudioNode::handleAudioNodeOptions((uint64_t)v9, a2, (unsigned int *)&v11, (uint64_t)v13);
    if (v15)
    {
      v10 = v14;
      *(_BYTE *)a3 = v13[0];
      *(_QWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 16) = 1;
      if (v8)
        return WebCore::AudioNode::deref(v8);
    }
    else
    {
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 16) = 0;
    }
  }
  else
  {
    result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 31;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

WebCore::MediaStreamAudioDestinationNode *WebCore::MediaStreamAudioDestinationNode::MediaStreamAudioDestinationNode(WebCore::MediaStreamAudioDestinationNode *this, WebCore::BaseAudioContext *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  float v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Document *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  WTF *v48;
  void *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;

  *(_QWORD *)this = off_1E3368A80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E3368BA8;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 4;
  v4 = (unsigned int *)((char *)a2 + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 5) = a2;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  *((_DWORD *)this + 26) = 1;
  *(_QWORD *)((char *)this + 108) = 0;
  v11 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 112))(a2);
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *((_QWORD *)this + 15) = v11;
  v14 = *((_QWORD *)a2 + 9);
  v15 = *((_QWORD *)a2 + 10) + 1;
  *((_QWORD *)a2 + 10) = v15;
  v16 = (WTF::StringImpl *)(v14 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v15);
  *((_QWORD *)this + 16) = v16;
  *((_QWORD *)this + 17) = 2;
  *((_DWORD *)this + 36) = 0;
  v53 = (WTF::StringImpl *)"AudioNode";
  v54 = 10;
  v55 = (WTF::StringImpl *)"AudioNode";
  v56 = v16;
  if (*(_BYTE *)(v11 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v53);
  (*(void (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 136))(a2);
  *(_QWORD *)this = off_1E3367E20;
  *((_QWORD *)this + 3) = &unk_1E3367F48;
  *((_BYTE *)this + 148) = 0;
  WebCore::AudioNode::addInput(this);
  *(_QWORD *)this = off_1E336AF20;
  *((_QWORD *)this + 3) = &unk_1E336B048;
  v17 = *(float *)((*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 88))(a2) + 160);
  v18 = WTF::fastMalloc((WTF *)0x1B8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = v53;
  v53 = 0;
  LOBYTE(v54) = 1;
  if (v19)
    *(_DWORD *)v19 += 2;
  v55 = v19;
  v20 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v20 += 2;
  v56 = v20;
  v57 = 0;
  v51 = 0;
  v52 = 0;
  WebCore::RealtimeMediaSource::RealtimeMediaSource(v18, (uint64_t)&v53, (uint64_t *)&v51, 0);
  v22 = v52;
  v52 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v51;
  v51 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v56;
  v56 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v55;
  v55 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v53;
  v53 = 0;
  if (!v26)
  {
LABEL_26:
    if (!v19)
      goto LABEL_29;
    goto LABEL_27;
  }
  if (*(_DWORD *)v26 != 2)
  {
    *(_DWORD *)v26 -= 2;
    goto LABEL_26;
  }
  WTF::StringImpl::destroy(v26, v21);
  if (!v19)
    goto LABEL_29;
LABEL_27:
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy(v19, v21);
  else
    *(_DWORD *)v19 -= 2;
LABEL_29:
  v27 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v27 = 0;
  *(_OWORD *)(v27 + 8) = xmmword_19689B170;
  *(_QWORD *)(v27 + 24) = v18;
  *(_QWORD *)v18 = off_1E336B088;
  *(_QWORD *)(v18 + 325) = 0;
  *(_BYTE *)(v18 + 352) = 0;
  *(_QWORD *)(v18 + 336) = 0;
  *(_QWORD *)(v18 + 344) = 0;
  *(_QWORD *)(v18 + 368) = 0;
  *(_QWORD *)(v18 + 376) = 0;
  *(_QWORD *)(v18 + 360) = 0;
  *(_QWORD *)(v18 + 304) = v27;
  *(_QWORD *)(v18 + 312) = 0;
  *(_QWORD *)(v18 + 320) = 0;
  *(_WORD *)(v18 + 384) = 4;
  *(_BYTE *)(v18 + 386) = 0;
  *(_QWORD *)(v18 + 414) = 0;
  *(_QWORD *)(v18 + 392) = 0x3FF0000000000000;
  *(_QWORD *)(v18 + 400) = 0;
  *(_QWORD *)(v18 + 408) = 0;
  *(_QWORD *)(v18 + 424) = 0;
  *(_QWORD *)(v18 + 432) = 0;
  *(_DWORD *)(v18 + 344) = v17;
  *((_QWORD *)this + 19) = v18;
  v28 = *((_QWORD *)a2 + 1);
  if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
  {
    if (*(_BYTE *)(v29 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195557EFCLL);
    }
    v30 = (WebCore::Document *)(v29 - 288);
  }
  else
  {
    v30 = 0;
  }
  v31 = (WTF::StringImpl *)WebCore::Document::logger(v30);
  v32 = (unsigned int *)((char *)v31 + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 + 1, v32));
  v51 = v31;
  v34 = *((_QWORD *)this + 19);
  v35 = *(_QWORD *)(v34 + 304);
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_40;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_40:
  ++*(_QWORD *)(v35 + 8);
  v37 = __ldxr((unsigned __int8 *)v35);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, (unsigned __int8 *)v35))
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
  v50 = v34;
  WebCore::MediaStreamPrivate::create((WTF *)&v51, &v50, (uint64_t *)&v53);
  v38 = bmalloc::api::isoAllocate();
  v39 = WebCore::MediaStream::MediaStream(v38, (uint64_t)v30, (uint64_t *)&v53);
  *((_QWORD *)this + 20) = v39;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v39 + 24));
  v41 = v53;
  v53 = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v41, v40);
      WTF::fastFree(v48, v49);
    }
    else
    {
      --*((_DWORD *)v41 + 4);
    }
  }
  v42 = v50;
  v50 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 144))(v42);
  v43 = (unsigned int *)v51;
  v51 = 0;
  if (v43)
  {
    v44 = v43 + 2;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v43 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
    }
  }
  *((_BYTE *)this + 32) = 1;
  return this;
}

void WebCore::MediaStreamAudioDestinationNode::~MediaStreamAudioDestinationNode(WebCore::MediaStreamAudioDestinationNode *this, void *a2)
{
  WebCore::MediaStream *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  *((_BYTE *)this + 32) = 0;
  v3 = (WebCore::MediaStream *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v3);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 22);
    }
  }
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaStreamAudioSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 304));
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  WebCore::MediaStream *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  *((_BYTE *)this + 32) = 0;
  v3 = (WebCore::MediaStream *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v3);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v3 + 22);
    }
  }
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaStreamAudioSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 304));
  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void `non-virtual thunk to'WebCore::MediaStreamAudioDestinationNode::~MediaStreamAudioDestinationNode(WebCore::MediaStreamAudioDestinationNode *this, void *a2)
{
  WebCore::MediaStream *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  *((_BYTE *)this + 8) = 0;
  v3 = (WebCore::MediaStream *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v3);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 22);
    }
  }
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaStreamAudioSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 304));
  WebCore::AudioNode::~AudioNode((WebCore::MediaStreamAudioDestinationNode *)((char *)this - 24), a2);
}

{
  WebCore::MediaStream *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  *((_BYTE *)this + 8) = 0;
  v3 = (WebCore::MediaStream *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v3);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v3 + 22);
    }
  }
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaStreamAudioSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 304));
  WebCore::AudioNode::~AudioNode((WebCore::MediaStreamAudioDestinationNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::MediaStreamAudioDestinationNode::process(WebCore::MediaStreamAudioDestinationNode *this, unint64_t a2)
{
  WebCore::MediaStreamAudioSource *v3;
  uint64_t v4;
  WebCore::AudioBus **v5;
  uint64_t v6;
  int v7;
  WebCore::AudioBus **v8;

  v3 = (WebCore::MediaStreamAudioSource *)*((_QWORD *)this + 19);
  if (*((_DWORD *)this + 17))
    v4 = **((_QWORD **)this + 7);
  else
    v4 = 0;
  if (*(_DWORD *)(v4 + 28) == 1 && !*(_DWORD *)(*(_QWORD *)(v4 + 64) + 140))
  {
    v6 = **(_QWORD **)(v4 + 16);
    v7 = *(unsigned __int8 *)(v6 + 32);
    v8 = (WebCore::AudioBus **)(v6 + 24);
    v5 = (WebCore::AudioBus **)(v6 + 16);
    if (v7)
      v5 = v8;
  }
  else
  {
    v5 = (WebCore::AudioBus **)(v4 + 80);
  }
  WebCore::MediaStreamAudioSource::consumeAudio(v3, *v5, a2);
}

void WebCore::MediaStreamAudioSource::~MediaStreamAudioSource(WebCore::MediaStreamAudioSource *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaStreamAudioSource::~MediaStreamAudioSource(this, a2);
  WTF::fastFree(v2, v3);
}

__int128 *WebCore::MediaStreamAudioSource::capabilities(WebCore::MediaStreamAudioSource *this)
{
  {
    xmmword_1EE2E0E70 = 0u;
    unk_1EE2E0E80 = 0u;
    xmmword_1EE2E0E50 = 0u;
    unk_1EE2E0E60 = 0u;
    xmmword_1EE2E0E30 = 0u;
    unk_1EE2E0E40 = 0u;
    xmmword_1EE2E0E10 = 0u;
    unk_1EE2E0E20 = 0u;
    xmmword_1EE2E0DF0 = 0u;
    unk_1EE2E0E00 = 0u;
    WebCore::RealtimeMediaSourceCapabilities::emptyCapabilities(void)::emptyCapabilities = 0u;
    unk_1EE2E0DE0 = 0u;
  }
  return &WebCore::RealtimeMediaSourceCapabilities::emptyCapabilities(void)::emptyCapabilities;
}

uint64_t WebCore::MediaStreamAudioSource::settings(WebCore::MediaStreamAudioSource *this)
{
  return (uint64_t)this + 320;
}

WTF *WebCore::MediaStreamAudioSourceNode::create@<X0>(unsigned int *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  WTF *v7;
  WebCore::MediaStreamTrackPrivate *v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::MediaStreamTrackAudioSourceProviderCocoa *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  int v49;
  WTF *result;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  _DWORD *v55;
  WTF *v56;
  int v57;
  unsigned int v58;
  WTF *v59;
  uint64_t v60;
  const char *v61;
  unint64_t v62;

  v3 = *a2;
  if (!*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19555861CLL);
  }
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E335F830;
  v59 = v7;
  WebCore::MediaStream::filteredTracks(v3, &v59, (uint64_t)&v56);
  (*(void (**)(WTF *))(*(_QWORD *)v7 + 8))(v7);
  if (v58)
  {
    v8 = *(WebCore::MediaStreamTrackPrivate **)(*(_QWORD *)v56 + 96);
    v9 = *((_QWORD *)v8 + 10);
    v10 = *((_QWORD *)v8 + 11);
    v59 = (WTF *)"MediaStreamTrackPrivate";
    v60 = 24;
    v61 = "createAudioSourceProvider";
    v62 = v10;
    if (*(_BYTE *)(v9 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v59);
    v11 = (WebCore::MediaStreamTrackAudioSourceProviderCocoa *)WTF::fastMalloc((WTF *)0x128);
    WebCore::MediaStreamTrackAudioSourceProviderCocoa::MediaStreamTrackAudioSourceProviderCocoa(v11, v8);
    v12 = bmalloc::api::isoAllocate();
    v13 = v12;
    v14 = *a2;
    *(_QWORD *)v12 = off_1E3368A80;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = &unk_1E3368BA8;
    *(_BYTE *)(v12 + 32) = 0;
    *(_DWORD *)(v12 + 36) = 5;
    v15 = a1 + 6;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    *(_QWORD *)(v12 + 40) = a1;
    *(_DWORD *)(v12 + 48) = 0;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v12 + 88) = _Q0;
    *(_DWORD *)(v12 + 104) = 1;
    *(_QWORD *)(v12 + 108) = 0;
    v22 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
    v23 = (unsigned int *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    *(_QWORD *)(v13 + 120) = v22;
    v25 = *((_QWORD *)a1 + 9);
    v26 = *((_QWORD *)a1 + 10) + 1;
    *((_QWORD *)a1 + 10) = v26;
    v27 = v25 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v26;
    *(_QWORD *)(v13 + 128) = v27;
    *(_QWORD *)(v13 + 136) = 2;
    *(_DWORD *)(v13 + 144) = 0;
    v59 = (WTF *)"AudioNode";
    v60 = 10;
    v61 = "AudioNode";
    v62 = v27;
    if (*(_BYTE *)(v22 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v59);
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
    *(_QWORD *)(v13 + 160) = 0;
    v29 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = v13 + 152;
    v30 = *(unsigned int **)(v13 + 160);
    *(_QWORD *)(v13 + 160) = v29;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v28);
      }
    }
    *(_QWORD *)v13 = off_1E336B238;
    *(_QWORD *)(v13 + 24) = &unk_1E336B368;
    *(_QWORD *)(v13 + 152) = &unk_1E336B3A8;
    ++*((_DWORD *)v14 + 22);
    *(_QWORD *)(v13 + 168) = v14;
    v33 = (unsigned int *)((char *)v11 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    *(_QWORD *)(v13 + 176) = v11;
    *(_QWORD *)(v13 + 184) = 0;
    *(_BYTE *)(v13 + 192) = 0;
    *(_DWORD *)(v13 + 196) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    v35 = *(_QWORD *)(v13 + 160);
    if (v35)
      goto LABEL_50;
    v35 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = v13 + 152;
    v37 = *(unsigned int **)(v13 + 160);
    *(_QWORD *)(v13 + 160) = v35;
    if (!v37)
      goto LABEL_50;
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((WTF *)v37, v36);
    }
    v35 = *(_QWORD *)(v13 + 160);
    if (v35)
    {
LABEL_50:
      do
        v40 = __ldaxr((unsigned int *)v35);
      while (__stlxr(v40 + 1, (unsigned int *)v35));
    }
    v59 = (WTF *)v35;
    (*(void (**)(WebCore::MediaStreamTrackAudioSourceProviderCocoa *, WTF **))(*(_QWORD *)v11 + 8))(v11, &v59);
    v42 = (unsigned int *)v59;
    v59 = 0;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, v41);
      }
    }
    WebCore::AudioNode::addOutput((WebCore::AudioNode *)v13, (void *)2);
    *(_BYTE *)(v13 + 32) = 1;
    do
    {
      v45 = __ldaxr(v33);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v33));
    if (!v46)
    {
      atomic_store(1u, v33);
      v51 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v51 = off_1E335A100;
      *((_QWORD *)v51 + 1) = v33;
      v59 = v51;
      WTF::ensureOnMainThread();
      v52 = v59;
      v59 = 0;
      if (v52)
        (*(void (**)(WTF *))(*(_QWORD *)v52 + 8))(v52);
    }
    v47 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 88))(a1);
    WebCore::MediaStreamAudioSourceNode::setFormat((WebCore::MediaStreamAudioSourceNode *)v13, (char *)2, *(float *)(v47 + 160));
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v13);
    v49 = 0;
    *(_QWORD *)a3 = v13;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v49 = 1;
  }
  *(_DWORD *)(a3 + 16) = v49;
  if (v58)
  {
    v53 = v56;
    v54 = 8 * v58;
    do
    {
      v55 = *(_DWORD **)v53;
      *(_QWORD *)v53 = 0;
      if (v55)
      {
        if (v55[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 16))(v55);
        else
          --v55[6];
      }
      v53 = (WTF *)((char *)v53 + 8);
      v54 -= 8;
    }
    while (v54);
  }
  result = v56;
  if (v56)
  {
    v56 = 0;
    v57 = 0;
    return (WTF *)WTF::fastFree(result, v48);
  }
  return result;
}

void WebCore::MediaStreamAudioSourceNode::setFormat(WebCore::MediaStreamAudioSourceNode *this, char *a2, float a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  float v11;
  WebCore::MultiChannelResampler *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF::Thread *v16;
  WTF::Thread *v17;
  uint64_t v18;
  double v20;
  uint64_t v21;
  char *v22;
  int v23;
  WebCore::AudioNodeOutput *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  WebCore::MediaStreamAudioSourceNode *v29;
  char v30;
  char *v31;

  v6 = (unsigned __int8 *)this + 192;
  if (__ldaxr((unsigned __int8 *)this + 192))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 192);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if ((char *)*((unsigned int *)this + 49) == a2 && *((double *)this + 25) == a3)
    goto LABEL_36;
  if ((unint64_t)(a2 - 33) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    *((_DWORD *)this + 49) = 0;
    goto LABEL_36;
  }
  *((_DWORD *)this + 49) = (_DWORD)a2;
  *((double *)this + 25) = a3;
  v8 = *((unsigned int *)this + 12);
  if ((_DWORD)v8 == -1)
  {
LABEL_41:
    v29 = (WebCore::MediaStreamAudioSourceNode *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode(v29);
    return;
  }
  v31 = &v30;
  v9 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v31, (char *)this + 40);
  v11 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9) + 160);
  if (v11 == a3)
  {
    v12 = (WebCore::MultiChannelResampler *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (!v12)
      goto LABEL_13;
    goto LABEL_12;
  }
  v20 = (float)(a3 / v11);
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = (char *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v22 = off_1E336B7C8;
  *((_QWORD *)v22 + 1) = WebCore::MediaStreamAudioSourceNode::provideInput;
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = this;
  v31 = v22;
  WebCore::MultiChannelResampler::MultiChannelResampler(v21, a2, (void *)0x80, (uint64_t *)&v31, v20);
  if (v31)
    (*(void (**)(char *))(*(_QWORD *)v31 + 8))(v31);
  v12 = (WebCore::MultiChannelResampler *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v21;
  if (v12)
  {
LABEL_12:
    WebCore::MultiChannelResampler::~MultiChannelResampler(v12, v10);
    WTF::fastFree(v13, v14);
  }
LABEL_13:
  *((_DWORD *)this + 49) = (_DWORD)a2;
  v15 = *((unsigned int *)this + 12);
  if ((_DWORD)v15 == -1)
    goto LABEL_41;
  v31 = &v30;
  v16 = (WTF::Thread *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v31, (char *)this + 40);
  v17 = v16;
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v18)
    v18 = WTF::Thread::initializeCurrentTLS(v16);
  if (v18 == *((_QWORD *)v17 + 35))
  {
    v23 = *((_DWORD *)v17 + 72) + 1;
    goto LABEL_27;
  }
  if (__ldaxr((unsigned __int8 *)v17 + 292))
  {
    __clrex();
LABEL_25:
    MEMORY[0x19AEA534C]();
    goto LABEL_26;
  }
  if (__stxr(1u, (unsigned __int8 *)v17 + 292))
    goto LABEL_25;
LABEL_26:
  *((_QWORD *)v17 + 35) = v18;
  v23 = 1;
LABEL_27:
  *((_DWORD *)v17 + 72) = v23;
  if (*((_DWORD *)this + 21))
    v24 = (WebCore::AudioNodeOutput *)**((_QWORD **)this + 9);
  else
    v24 = 0;
  WebCore::AudioNodeOutput::setNumberOfChannels(v24, (int)a2);
  v25 = *((_DWORD *)v17 + 72) - 1;
  *((_DWORD *)v17 + 72) = v25;
  if (!v25)
  {
    *((_QWORD *)v17 + 35) = 0;
    v26 = (unsigned __int8 *)v17 + 292;
    v27 = __ldxr((unsigned __int8 *)v17 + 292);
    if (v27 == 1)
    {
      if (!__stlxr(0, v26))
        goto LABEL_36;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  }
LABEL_36:
  v28 = __ldxr(v6);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v6))
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

void WebCore::MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode(WebCore::MediaStreamAudioSourceNode *this)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::MultiChannelResampler *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WebCore::MediaStream *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  bmalloc::api *v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 22);
  v23 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v2 + 8))(v2, &v23);
  v4 = (unsigned int *)v23;
  v23 = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  *((_BYTE *)this + 32) = 0;
  v7 = (WebCore::MultiChannelResampler *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v7)
  {
    WebCore::MultiChannelResampler::~MultiChannelResampler(v7, v3);
    WTF::fastFree(v8, v9);
  }
  v10 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v21 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v21 = off_1E335A100;
      *((_QWORD *)v21 + 1) = v11;
      v23 = v21;
      WTF::ensureOnMainThread();
      v22 = v23;
      v23 = 0;
      if (v22)
        (*(void (**)(WTF *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  v14 = (WebCore::MediaStream *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v14);
      bmalloc::api::isoDeallocate(v19, v20);
    }
    else
    {
      --*((_DWORD *)v14 + 22);
    }
  }
  v15 = *((_QWORD *)this + 20);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 20) = 0;
  }
  WebCore::AudioNode::~AudioNode(this, v3);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode(WebCore::MediaStreamAudioSourceNode *this)
{
  WebCore::MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode((WebCore::MediaStreamAudioSourceNode *)((char *)this - 24));
}

{
  WebCore::MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode((WebCore::MediaStreamAudioSourceNode *)((char *)this - 152));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode((WebCore::MediaStreamAudioSourceNode *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode((WebCore::MediaStreamAudioSourceNode *)((char *)this - 152));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::MediaStreamAudioSourceNode::provideInput(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 176))(*(_QWORD *)(a1 + 176));
}

void `non-virtual thunk to'WebCore::MediaStreamAudioSourceNode::setFormat(WebCore::MediaStreamAudioSourceNode *this, char *a2, float a3)
{
  WebCore::MediaStreamAudioSourceNode::setFormat((WebCore::MediaStreamAudioSourceNode *)((char *)this - 152), a2, a3);
}

void WebCore::MediaStreamAudioSourceNode::process(WebCore::MediaStreamAudioSourceNode *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t j;
  uint64_t v12;
  void **v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  void **v19;
  _QWORD *v20;

  if (*((_DWORD *)this + 21))
    v2 = **((_QWORD **)this + 9);
  else
    v2 = 0;
  v3 = 24;
  if (!*(_BYTE *)(v2 + 32))
    v3 = 16;
  v4 = *(_QWORD *)(v2 + v3);
  v5 = (unsigned __int8 *)this + 192;
  do
  {
    while (1)
    {
      v6 = *v5;
      if ((v6 & 1) != 0)
      {
        v16 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v16)
        {
          for (i = 0; i < v16; ++i)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * i);
            if (!*(_BYTE *)(v18 + 24))
            {
              *(_BYTE *)(v18 + 24) = 1;
              v19 = *(void ***)(v18 + 8);
              v20 = (_QWORD *)(v18 + 16);
              if (v19)
                v20 = v19 + 1;
              else
                v19 = (void **)v18;
              bzero(*v19, 4 * *v20);
              v16 = *(unsigned int *)(v4 + 28);
            }
          }
        }
        return;
      }
      v7 = __ldaxr(v5);
      if (v7 == v6)
        break;
      __clrex();
    }
  }
  while (__stxr(v6 | 1, v5));
  v8 = *((_DWORD *)this + 49);
  if (v8 && *((double *)this + 25) != 0.0 && v8 == *(_DWORD *)(v4 + 28))
  {
    if (*(_QWORD *)(v4 + 8) >= a2)
      v9 = a2;
    else
      v9 = *(_QWORD *)(v4 + 8);
    if (*((_QWORD *)this + 23))
      WebCore::MultiChannelResampler::process(*((uint64_t ***)this + 23), (WebCore::AudioBus *)v4, v9);
    else
      (***((void (****)(_QWORD, uint64_t, unint64_t))this + 22))(*((_QWORD *)this + 22), v4, v9);
  }
  else
  {
    v10 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v10)
    {
      for (j = 0; j < v10; ++j)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * j);
        if (!*(_BYTE *)(v12 + 24))
        {
          *(_BYTE *)(v12 + 24) = 1;
          v13 = *(void ***)(v12 + 8);
          v14 = (_QWORD *)(v12 + 16);
          if (v13)
            v14 = v13 + 1;
          else
            v13 = (void **)v12;
          bzero(*v13, 4 * *v14);
          v10 = *(unsigned int *)(v4 + 28);
        }
      }
    }
  }
  v15 = __ldxr(v5);
  if (v15 == 1)
  {
    if (!__stlxr(0, v5))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
}

void WebCore::OfflineAudioCompletionEvent::~OfflineAudioCompletionEvent(WebCore::OfflineAudioCompletionEvent *this, void *a2)
{
  WTF **v3;

  v3 = (WTF **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  WebCore::Event::~Event(this, a2);
}

{
  WTF **v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

size_t WebCore::OfflineAudioContext::OfflineAudioContext(uint64_t a1, WebCore::Document *a2, unsigned int *a3)
{
  WebCore::BaseAudioContext *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  float v11;
  void *v12;
  uint64_t v13;
  void *v14;
  WebCore::AudioDestinationNode *v15;
  WebCore::AudioBus *v16;
  WebCore::AudioBus *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  size_t result;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  void *v59;
  unsigned int v60;
  BOOL v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  _OWORD v65[7];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD __src[7];
  size_t __n[2];
  _BYTE v77[25];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v6 = WebCore::BaseAudioContext::BaseAudioContext((WebCore::BaseAudioContext *)a1, a2);
  v7 = 0;
  *(_QWORD *)v6 = &off_1E336B498;
  *((_QWORD *)v6 + 4) = &unk_1E336B560;
  *((_QWORD *)v6 + 7) = &unk_1E336B5D8;
  v8 = (void *)*a3;
  v9 = *((_QWORD *)a3 + 1);
  if (v9)
    v10 = ((_DWORD)v8 - 1) > 0x1F;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *((float *)a3 + 4);
    if (v11 >= 3000.0 && v11 <= 384000.0)
    {
      v7 = WTF::fastMalloc((WTF *)0x28);
      if (!WebCore::AudioBuffer::AudioBuffer((unint64_t *)v7, v8, v9, 0, v11)[1])
      {
        WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v7, v12);
        v7 = 0;
      }
    }
  }
  v13 = bmalloc::api::isoAllocate();
  v14 = (void *)*a3;
  v15 = WebCore::AudioDestinationNode::AudioDestinationNode((WebCore::AudioDestinationNode *)v13, (WebCore::BaseAudioContext *)a1, *((float *)a3 + 4));
  *(_QWORD *)v15 = off_1E336B618;
  *((_QWORD *)v15 + 3) = &unk_1E336B760;
  *((_DWORD *)v15 + 41) = (_DWORD)v14;
  *((_QWORD *)v15 + 21) = v7;
  if (v14 <= 0x20)
  {
    v17 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    v16 = WebCore::AudioBus::AudioBus(v17, v14, 0x80uLL, 1);
    v7 = *(_QWORD *)(v13 + 168);
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(v13 + 176) = v16;
  *(_QWORD *)(v13 + 184) = 0;
  if (v7)
  {
    v18 = *(unsigned int **)(v7 + 16);
    if (v18)
      v19 = v18 + 2;
    else
      v19 = 0;
    if (v18)
      v20 = (uint64_t)&v18[2 * *v18 + 2];
    else
      v20 = 0;
    if (v19 == (unsigned int *)v20)
    {
LABEL_28:
      v26 = *(_QWORD *)(v7 + 8);
      goto LABEL_39;
    }
    if (*MEMORY[0x1E0CC10F0])
    {
      while (1)
      {
        v27 = *(_QWORD *)(*(_QWORD *)v19 + 32);
        if (!v27)
          break;
        v28 = *(_QWORD *)(v27 + 16);
        if (!v28)
          break;
        v29 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v29)
        {
          v30 = v28 & 0x3FFFFFFFFLL;
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v30 + v29 == 0)
            break;
        }
        v19 += 2;
        if (v19 == (unsigned int *)v20)
          goto LABEL_28;
      }
    }
    else
    {
      while (1)
      {
        v21 = *(_QWORD *)(*(_QWORD *)v19 + 32);
        if (!v21)
          break;
        v22 = *(_QWORD *)(v21 + 16);
        if (!v22)
          break;
        v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        v24 = v22 & 0x3FFFFFFFFLL;
        if (v23 && v24 + v23 == 0)
          break;
        v19 += 2;
        if (v19 == (unsigned int *)v20)
          goto LABEL_28;
      }
    }
  }
  v26 = 0;
LABEL_39:
  *(_QWORD *)(v13 + 192) = v26;
  *(_QWORD *)(v13 + 200) = 0;
  *(_BYTE *)(v13 + 208) = 0;
  *(_DWORD *)(v13 + 136) = (_DWORD)v14;
  *(_QWORD *)(v13 + 140) = 2;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = v13;
  v32 = *((_QWORD *)a3 + 1);
  *(_DWORD *)(a1 + 416) = v32;
  *(_BYTE *)(a1 + 420) = 0;
  v33 = *(_QWORD *)(v13 + 168);
  if (v33)
  {
    if (*(_BYTE *)(a1 + 384))
      *(float *)(v33 + 36) = *(float *)(v33 + 36) + 0.001;
    return a1;
  }
  v34 = *a3;
  WTF::numberToString();
  result = strlen((const char *)v65);
  v36 = 0;
  HIDWORD(v66) = result;
  v37 = v34;
  do
  {
    ++v36;
    v10 = v37 > 9;
    v37 /= 0xAu;
  }
  while (v10);
  v38 = 0;
  v39 = v32;
  do
  {
    ++v38;
    v10 = v39 > 9;
    v39 /= 0xAuLL;
  }
  while (v10);
  if ((v38 & 0x80000000) == 0)
  {
    v40 = __OFADD__(v38, 1);
    v41 = v38 + 1;
    if (!v40)
    {
      v40 = __OFADD__(v41, 17);
      v42 = v41 + 17;
      v43 = v40;
      if ((result & 0x80000000) == 0 && !v43)
      {
        v40 = __OFADD__((_DWORD)result, v42);
        v44 = result + v42;
        if (!v40)
        {
          v40 = __OFADD__(v44, 30);
          v45 = v44 + 30;
          v46 = v40;
          if ((v36 & 0x80000000) == 0 && !v46)
          {
            v40 = __OFADD__(v36, v45);
            v47 = v36 + v45;
            if (!v40)
            {
              v48 = (v47 + 46);
              if (!__OFADD__(v47, 46))
              {
                v71 = v65[4];
                v72 = v65[5];
                v73 = v65[6];
                v74 = v66;
                v67 = v65[0];
                v68 = v65[1];
                v69 = v65[2];
                v70 = v65[3];
                if (v47 == -46)
                {
                  v64 = MEMORY[0x1E0CBEF70];
                  *MEMORY[0x1E0CBEF70] += 2;
                  *(_QWORD *)&__src[0] = v64;
LABEL_80:
                  WebCore::Document::addConsoleMessage(a2, 1, 1, (WTF::StringImpl **)__src, 0);
                  v63 = *(WTF::StringImpl **)&__src[0];
                  *(_QWORD *)&__src[0] = 0;
                  if (v63)
                  {
                    if (*(_DWORD *)v63 == 2)
                      WTF::StringImpl::destroy(v63, v62);
                    else
                      *(_DWORD *)v63 -= 2;
                  }
                  return a1;
                }
                if ((v48 & 0x80000000) == 0)
                {
                  result = WTF::tryFastCompactMalloc((WTF *)(v48 + 20));
                  v49 = *(_QWORD *)&__src[0];
                  if (*(_QWORD *)&__src[0])
                  {
                    v50 = 0;
                    *(_OWORD *)(*(_QWORD *)&__src[0] + 20) = *(_OWORD *)"Failed to construct internal AudioBuffer with ";
                    *(_DWORD *)v49 = 2;
                    *(_DWORD *)(v49 + 4) = v48;
                    *(_QWORD *)(v49 + 8) = v49 + 20;
                    *(_DWORD *)(v49 + 16) = 4;
                    qmemcpy((void *)(v49 + 36), "uct internal AudioBuffer with ", 30);
                    v51 = v34;
                    do
                    {
                      *((_BYTE *)__src + v50-- + 12) = (v51 % 0xA) | 0x30;
                      v10 = v51 > 9;
                      v51 /= 0xAu;
                    }
                    while (v10);
                    if (v50 + 14 <= 13)
                      memcpy((void *)(v49 + 66), (char *)__src + v50 + 13, -v50);
                    v52 = 0;
                    do
                    {
                      ++v52;
                      v10 = v34 > 9;
                      v34 /= 0xAu;
                    }
                    while (v10);
                    v53 = v49 + 66 + v52;
                    qmemcpy((void *)v53, " channel(s), a sample rate of ", 30);
                    v54 = (_BYTE *)(v53 + 30);
                    __src[4] = v71;
                    __src[5] = v72;
                    __src[6] = v73;
                    *(_OWORD *)__n = v74;
                    __src[0] = v67;
                    __src[1] = v68;
                    __src[2] = v69;
                    __src[3] = v70;
                    v55 = HIDWORD(v74);
                    if (HIDWORD(v74))
                    {
                      if (HIDWORD(v74) == 1)
                        *v54 = __src[0];
                      else
                        memcpy((void *)(v53 + 30), __src, HIDWORD(v74));
                    }
                    v56 = 0;
                    v57 = &v54[v55];
                    *(_OWORD *)v57 = *(_OWORD *)" and a length of ";
                    v57[16] = 32;
                    v58 = v32;
                    do
                    {
                      v77[v56-- + 24] = (v58 % 0xA) | 0x30;
                      v10 = v58 > 9;
                      v58 /= 0xAuLL;
                    }
                    while (v10);
                    v59 = v57 + 17;
                    if (v56 + 26 <= 25)
                      memcpy(v59, &v77[v56 + 25], -v56);
                    v60 = 0;
                    do
                    {
                      ++v60;
                      v61 = v32 >= 0xA;
                      v32 /= 0xAuLL;
                    }
                    while (v61);
                    *((_BYTE *)v59 + v60) = 46;
                    *(_QWORD *)&__src[0] = v49;
                    goto LABEL_80;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::OfflineAudioContext::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v5;
  WebCore::Document *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  int v10;

  if (*(_BYTE *)(a1 + 274)
    || (*(_DWORD *)a2 - 33) <= 0xFFFFFFDF
    || !*(_QWORD *)(a2 + 8)
    || (v5 = *(float *)(a2 + 16), v5 < 3000.0)
    || v5 > 384000.0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 6;
    v10 = 1;
  }
  else
  {
    v6 = (WebCore::Document *)(a1 - 192);
    v7 = bmalloc::api::isoAllocate();
    v8 = (_QWORD *)WebCore::OfflineAudioContext::OfflineAudioContext(v7, v6, (unsigned int *)a2);
    result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded(v8);
    v10 = 0;
    *(_QWORD *)a3 = v7;
  }
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

_BYTE *WebCore::OfflineAudioContext::lazyInitialize(WebCore::OfflineAudioContext *this, void *a2)
{
  uint64_t v3;

  if (!*((_BYTE *)this + 379) && *((_BYTE *)this + 376) != 3 && !*((_BYTE *)this + 380) && !*((_BYTE *)this + 381))
  {
    v3 = (*(uint64_t (**)(WebCore::OfflineAudioContext *))(*(_QWORD *)this + 80))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
    *((_BYTE *)this + 380) = 1;
  }
  return WebCore::OfflineAudioContext::increaseNoiseMultiplierIfNeeded(this, a2);
}

_BYTE *WebCore::OfflineAudioContext::increaseNoiseMultiplierIfNeeded(_BYTE *this, void *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::AudioNode **v8;
  uint64_t v9;
  WebCore::AudioNode *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  WebCore::AudioNode *v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  WebCore::AudioNode *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t (**v31)();
  WTF *v32;
  int v33;
  int v34;
  WebCore::AudioNode *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;

  if (!this[384])
    return this;
  v2 = this;
  v3 = *(_BYTE **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3)
  {
    this = (_BYTE *)WTF::Thread::initializeCurrentTLS((WTF::Thread *)this);
    v3 = this;
  }
  if (v3 == *((_BYTE **)v2 + 35))
  {
    v5 = *((_DWORD *)v2 + 72) + 1;
    goto LABEL_11;
  }
  this = v2 + 292;
  if (__ldaxr(v2 + 292))
  {
    __clrex();
LABEL_9:
    this = (_BYTE *)MEMORY[0x19AEA534C]();
    goto LABEL_10;
  }
  if (__stxr(1u, this))
    goto LABEL_9;
LABEL_10:
  *((_QWORD *)v2 + 35) = v3;
  v5 = 1;
LABEL_11:
  *((_DWORD *)v2 + 72) = v5;
  v6 = *(_QWORD *)(*((_QWORD *)v2 + 49) + 168);
  if (v6)
  {
    ++*(_DWORD *)v6;
    v36 = (WTF *)&v38;
    v37 = 1;
    v7 = *((unsigned int *)v2 + 31);
    if ((_DWORD)v7)
    {
      v8 = (WebCore::AudioNode **)*((_QWORD *)v2 + 14);
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
          WebCore::AudioNode::incrementConnectionCount(*v8);
        v35 = v10;
        LODWORD(v11) = HIDWORD(v37);
        if (HIDWORD(v37) == (_DWORD)v37)
        {
          v12 = (uint64_t *)WTF::Vector<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v36, (void *)(HIDWORD(v37) + 1), (unint64_t)&v35);
          v11 = HIDWORD(v37);
          v13 = v36;
          v14 = *v12;
          *v12 = 0;
          *((_QWORD *)v13 + v11) = v14;
        }
        else
        {
          v35 = 0;
          *((_QWORD *)v36 + HIDWORD(v37)) = v10;
        }
        HIDWORD(v37) = v11 + 1;
        v15 = v35;
        v35 = 0;
        if (v15)
          WebCore::AudioNode::decrementConnectionCount(v15);
        ++v8;
        v9 -= 8;
      }
      while (v9);
      v16 = HIDWORD(v37);
      if (HIDWORD(v37))
      {
        while (1)
        {
          v17 = v16 - 1;
          v18 = (unsigned int *)*((_QWORD *)v36 + v16 - 1);
          *((_QWORD *)v36 + v16 - 1) = 0;
          v19 = (WebCore::AudioNode *)*((_QWORD *)v36 + v16 - 1);
          *((_QWORD *)v36 + v16 - 1) = 0;
          if (v19)
            WebCore::AudioNode::decrementConnectionCount(v19);
          HIDWORD(v37) = v17;
          *(float *)(v6 + 36) = (*(float (**)(unsigned int *))(*(_QWORD *)v18 + 224))(v18)
                              + *(float *)(v6 + 36);
          v20 = v18[21];
          if ((_DWORD)v20)
            break;
LABEL_54:
          WebCore::AudioNode::decrementConnectionCount((WebCore::AudioNode *)v18);
          v16 = HIDWORD(v37);
          if (!HIDWORD(v37))
            goto LABEL_55;
        }
        v21 = 0;
        while (1)
        {
          if (v21 < v20)
          {
            v22 = *(_QWORD *)(*((_QWORD *)v18 + 9) + 8 * v21);
            if (v22)
              break;
          }
LABEL_53:
          if (++v21 >= v20)
            goto LABEL_54;
        }
        v23 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
        *v23 = off_1E336B888;
        v23[1] = (uint64_t (**)())&v36;
        v24 = *(_QWORD *)(v22 + 40);
        if (v24)
        {
          v25 = *(unsigned int *)(v24 - 4);
          v26 = (_QWORD *)(v24 + 16 * v25);
          if (*(_DWORD *)(v24 - 12))
          {
            v27 = *(_QWORD **)(v22 + 40);
            if ((_DWORD)v25)
            {
              v28 = 16 * v25;
              v27 = *(_QWORD **)(v22 + 40);
              while ((unint64_t)(*v27 + 1) <= 1)
              {
                v27 += 2;
                v28 -= 16;
                if (!v28)
                {
                  v27 = v26;
                  goto LABEL_36;
                }
              }
            }
            goto LABEL_36;
          }
          v27 = (_QWORD *)(v24 + 16 * v25);
        }
        else
        {
          v27 = 0;
          v25 = 0;
        }
        v26 = (_QWORD *)(v24 + 16 * v25);
        if (!v24)
        {
          v29 = 0;
          goto LABEL_41;
        }
LABEL_36:
        v29 = (_QWORD *)(v24 + 16 * *(unsigned int *)(v24 - 4));
LABEL_41:
        if (v29 == v27)
        {
          v31 = off_1E336B888;
        }
        else
        {
          do
          {
            if (v27[1])
              ((void (*)(uint64_t (***)()))(*v23)[2])(v23);
            v30 = v27 + 2;
            v27 = v26;
            if (v30 != v26)
            {
              v27 = v30;
              while ((unint64_t)(*v27 + 1) <= 1)
              {
                v27 += 2;
                if (v27 == v26)
                {
                  v27 = v26;
                  break;
                }
              }
            }
          }
          while (v27 != v29);
          v31 = *v23;
        }
        ((void (*)(uint64_t (***)()))v31[1])(v23);
        v20 = v18[21];
        goto LABEL_53;
      }
    }
LABEL_55:
    v32 = v36;
    if (&v38 != (uint64_t *)v36)
    {
      if (v36)
      {
        v36 = 0;
        LODWORD(v37) = 0;
        WTF::fastFree(v32, a2);
      }
    }
    this = WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v6, a2);
  }
  v33 = *((_DWORD *)v2 + 72) - 1;
  *((_DWORD *)v2 + 72) = v33;
  if (!v33)
  {
    *((_QWORD *)v2 + 35) = 0;
    this = v2 + 292;
    v34 = __ldxr(v2 + 292);
    if (v34 == 1)
    {
      if (!__stlxr(0, this))
        return this;
    }
    else
    {
      __clrex();
    }
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)this);
  }
  return this;
}

_BYTE *WebCore::OfflineAudioContext::uninitialize(_BYTE *this)
{
  _BYTE *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned __int8 v8[8];
  WTF::StringImpl *v9;
  objc_class *v10;

  if (this[380])
  {
    v1 = this;
    this = WebCore::BaseAudioContext::uninitialize((WebCore::BaseAudioContext *)this);
    v2 = (_DWORD *)*((_QWORD *)v1 + 50);
    *((_QWORD *)v1 + 50) = 0;
    if (v2)
    {
      v3 = *((_QWORD *)v1 + 1);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (!*(_BYTE *)(v4 + 180))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v10 = 0;
            v8[0] = 8;
            if (v7)
              *(_DWORD *)v7 += 2;
            v9 = v7;
            WebCore::DeferredPromise::reject((uint64_t)v2, v8, 0, &v10);
            v6 = v9;
            v9 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, v5);
              else
                *(_DWORD *)v6 -= 2;
            }
            this = v7;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                this = (_BYTE *)WTF::StringImpl::destroy(v7, v5);
              else
                *(_DWORD *)v7 -= 2;
            }
          }
        }
      }
      if (v2[4] == 1)
        return (_BYTE *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
      else
        --v2[4];
    }
  }
  return this;
}

WTF::StringImpl *WebCore::OfflineAudioContext::startRendering(WebCore::OfflineAudioContext *this, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  objc_class *v25;

  if (*((_BYTE *)this + 379))
  {
    v3 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = 0;
    LOBYTE(v23) = 8;
    if (v22)
      *(_DWORD *)v22 += 2;
    v24 = v22;
    WebCore::DeferredPromise::reject(v3, (unsigned __int8 *)&v23, 0, &v25);
    v5 = v24;
    v24 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = v22;
    if (!v22)
      return result;
LABEL_16:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    *(_DWORD *)result -= 2;
    return result;
  }
  if (*((_BYTE *)this + 420))
  {
    v8 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = 0;
    LOBYTE(v23) = 8;
    if (v21)
      *(_DWORD *)v21 += 2;
    v24 = v21;
    WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v23, 0, &v25);
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v4);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = v21;
    if (v21)
      goto LABEL_16;
  }
  else if (*(_QWORD *)(*((_QWORD *)this + 49) + 168))
  {
    if (*((_BYTE *)this + 376) != 3 && !*((_BYTE *)this + 380) && !*((_BYTE *)this + 381))
    {
      v10 = (*(uint64_t (**)(WebCore::OfflineAudioContext *))(*(_QWORD *)this + 80))(this);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
      *((_BYTE *)this + 380) = 1;
    }
    WebCore::OfflineAudioContext::increaseNoiseMultiplierIfNeeded(this, a2);
    v11 = *((_QWORD *)this + 49);
    v12 = *a2;
    *a2 = 0;
    v13 = WTF::fastMalloc((WTF *)0x10);
    v14 = v13;
    *(_DWORD *)v13 = 1;
    v15 = (unsigned int *)((char *)this + 24);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    *(_QWORD *)(v13 + 8) = this;
    ++*((_QWORD *)this + 2);
    v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v17 = &off_1E336B8B0;
    *((_QWORD *)v17 + 1) = this;
    *((_QWORD *)v17 + 2) = v12;
    *((_QWORD *)v17 + 3) = v14;
    v23 = v17;
    WebCore::OfflineAudioDestinationNode::startRendering(v11, (uint64_t *)&v23);
    result = v23;
    if (v23)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
  }
  else
  {
    v18 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = 0;
    LOBYTE(v23) = 6;
    if (v20)
      *(_DWORD *)v20 += 2;
    v24 = v20;
    WebCore::DeferredPromise::reject(v18, (unsigned __int8 *)&v23, 0, &v25);
    v19 = v24;
    v24 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v4);
      else
        *(_DWORD *)v19 -= 2;
    }
    result = v20;
    if (v20)
      goto LABEL_16;
  }
  return result;
}

uint64_t WebCore::OfflineAudioContext::destination(WebCore::OfflineAudioContext *this)
{
  return *((_QWORD *)this + 49);
}

{
  return *((_QWORD *)this + 49);
}

WTF::StringImpl *WebCore::OfflineAudioDestinationNode::startRendering(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  WTF::Thread *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::Thread *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::Thread *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::Thread *v41;
  WTF::StringImpl *v42;
  const char *v43;
  uint64_t v44;

  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v41 = (WTF::Thread *)"AudioNode";
  v42 = (WTF::StringImpl *)10;
  v43 = "startRendering";
  v44 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v41);
  if (!*(_QWORD *)(a1 + 168) || *(_BYTE *)(a1 + 208))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v41) = 8;
    LOBYTE(v43) = 1;
LABEL_6:
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::Thread **))(*(_QWORD *)v6 + 16))(v6, &v41);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if ((_BYTE)v43)
    {
      result = v42;
      v42 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  *(_BYTE *)(a1 + 208) = 1;
  v9 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v9 == -1)
    goto LABEL_49;
  v41 = (WTF::Thread *)&v40;
  v10 = (unsigned int *)(((uint64_t (*)(WTF::Thread **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v41, a1 + 40)+ 24);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v12 == -1)
  {
LABEL_49:
    v39 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::OfflineAudioContext::suspendRendering(v39);
  }
  v41 = (WTF::Thread *)&v40;
  v13 = (_QWORD *)((uint64_t (*)(WTF::Thread **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v41, a1 + 40);
  if (((*(uint64_t (**)(_QWORD *))(*v13 + 72))(v13) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195559F7CLL);
  }
  v14 = v13[13];
  if (!*(_DWORD *)(v14 + 68) || (v15 = **(_QWORD **)(v14 + 56)) == 0)
  {
    v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v26 = &off_1E336B9B0;
    *((_QWORD *)v26 + 1) = a1;
    *((_QWORD *)v26 + 2) = a1;
    v40 = v26;
    WTF::Thread::create();
    v27 = v41;
    v41 = 0;
    v28 = *(unsigned int **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v27;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::Thread::~Thread((WTF::Thread *)v28);
        WTF::fastFree(v35, v36);
      }
      v31 = (unsigned int *)v41;
      v41 = 0;
      if (v31)
      {
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          WTF::Thread::~Thread((WTF::Thread *)v31);
          WTF::fastFree(v37, v38);
        }
      }
    }
    v34 = v40;
    v40 = 0;
    if (v34)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v34 + 8))(v34);
    LOBYTE(v41) = 0;
    LOBYTE(v43) = 0;
    goto LABEL_6;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195559FC4);
  }
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = (WTF::Thread *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v18 = &off_1E336B938;
  *((_QWORD *)v18 + 1) = a1;
  *((_QWORD *)v18 + 2) = a1;
  v40 = 0;
  v41 = v18;
  LOBYTE(v42) = 0;
  (*(void (**)(_QWORD, WTF::Thread **, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v15 + 40) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 48), &v41, &v40);
  v20 = v40;
  v40 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v41;
  v41 = 0;
  if (v21)
    (*(void (**)(WTF::Thread *))(*(_QWORD *)v21 + 8))(v21);
  LOBYTE(v41) = 0;
  LOBYTE(v43) = 0;
  v22 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::Thread **))(*(_QWORD *)v22 + 16))(v22, &v41);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if ((_BYTE)v43)
  {
    result = v42;
    v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  do
  {
    v24 = __ldaxr(v16);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v16));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

WTF::StringImpl *WebCore::OfflineAudioContext::suspendRendering(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  float v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int *v32;
  int v33;
  int *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unsigned __int8 v53[8];
  WTF::StringImpl *v54;
  objc_class *v55;

  if (*(_BYTE *)(a1 + 379))
  {
    v4 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v55 = 0;
    v53[0] = 8;
    if (v52)
      *(_DWORD *)v52 += 2;
    v54 = v52;
    WebCore::DeferredPromise::reject(v4, v53, 0, &v55);
    v6 = v54;
    v54 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = v52;
    if (!v52)
      return result;
LABEL_35:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    *(_DWORD *)result -= 2;
    return result;
  }
  if (a3 >= 0.0)
  {
    v12 = (float)*(unsigned int *)(a1 + 416);
    if ((float)(v12 / *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + 160)) <= a3)
    {
      v20 = *a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v55 = 0;
      v53[0] = 8;
      if (v50)
        *(_DWORD *)v50 += 2;
      v54 = v50;
      WebCore::DeferredPromise::reject(v20, v53, 0, &v55);
      v21 = v54;
      v54 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v5);
        else
          *(_DWORD *)v21 -= 2;
      }
      result = v50;
      if (v50)
        goto LABEL_35;
      return result;
    }
    v13 = round(*(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + 160) * a3 * 1024.0)
        * 0.0009765625;
    v14 = (vcvtad_u64_f64(v13) + 127) & 0xFFFFFFFFFFFFFF80;
    if (round(v13) >= 1.84467441e19)
      v15 = 0;
    else
      v15 = v14;
    v16 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v17 = atomic_load(v16 + 19);
    if (v15 < v17)
    {
      v18 = *a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v55 = 0;
      v53[0] = 8;
      if (v49)
        *(_DWORD *)v49 += 2;
      v54 = v49;
      WebCore::DeferredPromise::reject(v18, v53, 0, &v55);
      v19 = v54;
      v54 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v5);
        else
          *(_DWORD *)v19 -= 2;
      }
      result = v49;
      if (v49)
        goto LABEL_35;
      return result;
    }
    v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v22)
      v22 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)v16);
    if (v22 == *(_QWORD *)(a1 + 280))
    {
      v24 = *(_DWORD *)(a1 + 288) + 1;
LABEL_50:
      *(_DWORD *)(a1 + 288) = v24;
      v25 = (uint64_t *)(a1 + 408);
      v26 = *a2;
      v27 = *(_QWORD *)(a1 + 408);
      if (v27
        || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 408), 8u), (v27 = *v25) != 0))
      {
        v28 = *(_DWORD *)(v27 - 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = 9 * ((~((_DWORD)v15 << 15) + v15) ^ ((~((_DWORD)v15 << 15) + v15) >> 10));
      v30 = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
      v31 = v28 & (v30 ^ HIWORD(v30));
      v32 = (int *)(v27 + 16 * v31);
      v33 = *v32;
      if (*v32 != -1)
      {
        v34 = 0;
        v35 = 1;
        while (v33 != (_DWORD)v15)
        {
          if (v33 == -2)
            v34 = v32;
          v31 = (v31 + v35) & v28;
          v32 = (int *)(v27 + 16 * v31);
          v33 = *v32;
          ++v35;
          if (*v32 == -1)
          {
            if (v34)
            {
              *v34 = -1;
              *((_QWORD *)v34 + 1) = 0;
              --*(_DWORD *)(*v25 - 16);
              v32 = v34;
            }
            goto LABEL_61;
          }
        }
        v38 = *a2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v55 = 0;
        v53[0] = 8;
        if (v48)
          *(_DWORD *)v48 += 2;
        v54 = v48;
        WebCore::DeferredPromise::reject(v38, v53, 0, &v55);
        v40 = v54;
        v54 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v39);
          else
            *(_DWORD *)v40 -= 2;
        }
        result = v48;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v48, v39);
          else
            *(_DWORD *)v48 -= 2;
        }
LABEL_88:
        v46 = *(_DWORD *)(a1 + 288) - 1;
        *(_DWORD *)(a1 + 288) = v46;
        if (v46)
          return result;
        *(_QWORD *)(a1 + 280) = 0;
        result = (WTF::StringImpl *)(a1 + 292);
        v47 = __ldxr((unsigned __int8 *)(a1 + 292));
        if (v47 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)result))
            return result;
        }
        else
        {
          __clrex();
        }
        return (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
      }
LABEL_61:
      *v32 = v15;
      if (v26)
        ++*(_DWORD *)(v26 + 16);
      result = (WTF::StringImpl *)*((_QWORD *)v32 + 1);
      *((_QWORD *)v32 + 1) = v26;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 4);
      }
      v36 = *v25;
      if (*v25)
        v37 = *(_DWORD *)(v36 - 12) + 1;
      else
        v37 = 1;
      *(_DWORD *)(v36 - 12) = v37;
      v41 = *v25;
      if (*v25)
        v42 = *(_DWORD *)(v41 - 12);
      else
        v42 = 0;
      v43 = (*(_DWORD *)(v41 - 16) + v42);
      v44 = *(unsigned int *)(v41 - 4);
      if (v44 > 0x400)
      {
        if (v44 > 2 * v43)
          goto LABEL_88;
      }
      else
      {
        if (3 * v44 > 4 * v43)
          goto LABEL_88;
        if (!(_DWORD)v44)
        {
          v45 = 8;
          goto LABEL_87;
        }
      }
      v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
LABEL_87:
      result = (WTF::StringImpl *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 408), v45);
      goto LABEL_88;
    }
    if (__ldaxr((unsigned __int8 *)(a1 + 292)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)(a1 + 292)))
    {
LABEL_49:
      *(_QWORD *)(a1 + 280) = v22;
      v24 = 1;
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C]();
    goto LABEL_49;
  }
  v9 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v55 = 0;
  v53[0] = 8;
  if (v51)
    *(_DWORD *)v51 += 2;
  v54 = v51;
  WebCore::DeferredPromise::reject(v9, v53, 0, &v55);
  v10 = v54;
  v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v51;
  if (v51)
    goto LABEL_35;
  return result;
}

uint64_t WebCore::OfflineAudioContext::resumeRendering(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  objc_class *v24;

  if (*(_BYTE *)(result + 420))
  {
    v2 = result;
    v3 = *(unsigned __int8 *)(result + 376);
    if (v3 == 1)
    {
      v9 = *a2;
      v10 = *(_QWORD *)(*a2 + 24);
      if (v10 && *(_QWORD *)v10 && (*(_BYTE *)(v10 + 8) & 3) == 0)
      {
        v11 = *(_QWORD *)(v9 + 32);
        if (!v11 || (*(_BYTE *)(v11 + 8) & 3) != 0)
          v12 = 0;
        else
          v12 = *(uint64_t **)v11;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v9, v12, 0, (objc_class *)0xA);
        return MEMORY[0x19AEA32A0](&v22);
      }
    }
    else
    {
      if (v3 == 3)
      {
        v4 = *a2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v24 = 0;
        LOBYTE(v22) = 8;
        if (v20)
          *(_DWORD *)v20 += 2;
        v23 = v20;
        WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v22, 0, &v24);
        v6 = v23;
        v23 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v5);
          else
            *(_DWORD *)v6 -= 2;
        }
        result = (uint64_t)v20;
        if (!v20)
          return result;
LABEL_17:
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
        *(_DWORD *)result -= 2;
        return result;
      }
      v13 = *(_QWORD *)(result + 392);
      v14 = *a2;
      *a2 = 0;
      v15 = WTF::fastMalloc((WTF *)0x10);
      v16 = v15;
      *(_DWORD *)v15 = 1;
      v17 = (unsigned int *)(v2 + 24);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      *(_QWORD *)(v15 + 8) = v2;
      ++*(_QWORD *)(v2 + 16);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v19 = &off_1E336B8D8;
      v19[1] = v2;
      v19[2] = v14;
      v19[3] = v16;
      v22 = v19;
      WebCore::OfflineAudioDestinationNode::startRendering(v13, (uint64_t *)&v22);
      result = (uint64_t)v22;
      if (v22)
        return (*(uint64_t (**)(_QWORD *))(*v22 + 8))(v22);
    }
  }
  else
  {
    v7 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = 0;
    LOBYTE(v22) = 8;
    if (v21)
      *(_DWORD *)v21 += 2;
    v23 = v21;
    WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)&v22, 0, &v24);
    v8 = v23;
    v23 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = (uint64_t)v21;
    if (v21)
      goto LABEL_17;
  }
  return result;
}

BOOL WebCore::OfflineAudioContext::shouldSuspend(WebCore::OfflineAudioContext *this)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL8 v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2)
    v2 = WTF::Thread::initializeCurrentTLS(this);
  if (v2 == *((_QWORD *)this + 35))
  {
    v4 = *((_DWORD *)this + 72) + 1;
    goto LABEL_10;
  }
  if (__ldaxr((unsigned __int8 *)this + 292))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C]();
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)this + 292))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 35) = v2;
  v4 = 1;
LABEL_10:
  *((_DWORD *)this + 72) = v4;
  v5 = atomic_load((unint64_t *)((*(uint64_t (**)(WebCore::OfflineAudioContext *))(*(_QWORD *)this
                                                                                                  + 88))(this)
                                      + 152));
  v6 = *((_QWORD *)this + 51);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = 9 * ((~(v5 << 15) + v5) ^ ((~(v5 << 15) + v5) >> 10));
    v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
    v10 = v7 & (v9 ^ HIWORD(v9));
    v11 = *(_DWORD *)(v6 + 16 * v10);
    if (v11 == v5)
    {
      v12 = 1;
    }
    else
    {
      v13 = 1;
      do
      {
        v12 = v11 != -1;
        if (v11 == -1)
          break;
        v10 = (v10 + v13) & v7;
        v11 = *(_DWORD *)(v6 + 16 * v10);
        ++v13;
      }
      while (v11 != v5);
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = *((_DWORD *)this + 72) - 1;
  *((_DWORD *)this + 72) = v14;
  if (!v14)
  {
    *((_QWORD *)this + 35) = 0;
    v15 = (unsigned __int8 *)this + 292;
    v16 = __ldxr((unsigned __int8 *)this + 292);
    if (v16 == 1)
    {
      if (!__stlxr(0, v15))
        return v12;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  }
  return v12;
}

WTF::Thread *WebCore::OfflineAudioContext::finishedRendering(WebCore::OfflineAudioContext *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  void *v10;
  WTF **v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF::Thread *result;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WebCore *v30;
  uint64_t v31[2];
  const char *v32;
  uint64_t v33;
  char v34;

  v4 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  v31[0] = (uint64_t)"BaseAudioContext";
  v31[1] = 17;
  v32 = "finishedRendering";
  v33 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v31);
  v6 = WTF::fastMalloc((WTF *)0x10);
  v7 = (WTF *)v6;
  *(_DWORD *)v6 = 1;
  v8 = (unsigned int *)((char *)this + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(v6 + 8) = this;
  ++*((_QWORD *)this + 2);
  WebCore::BaseAudioContext::setState((uint64_t)this, (void *)3);
  if (!*((_BYTE *)this + 379))
  {
    v11 = *(WTF ***)(*((_QWORD *)this + 49) + 168);
    if (v11)
      ++*(_DWORD *)v11;
    if (a2)
    {
      ++*(_DWORD *)v11;
      v12 = (WebCore *)bmalloc::api::isoAllocate();
      v13 = (uint64_t)v12;
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v12 = *(WebCore **)(v14 + 96)) == 0)
        v12 = (WebCore *)WebCore::threadGlobalDataSlow(v12);
      v15 = *((_QWORD *)v12 + 5);
      if (!v15)
      {
        v30 = v12;
        v12 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
        v15 = *((_QWORD *)v30 + 5);
        v8 = (unsigned int *)((char *)this + 24);
      }
      WTF::MonotonicTime::now(v12);
      *(_QWORD *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 16) = 1;
      *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 20) & 0xFFC00000 | 0x128202 | (*(_QWORD *)(v15 + 424) != 0);
      v17 = *(_DWORD **)(v15 + 424);
      if (v17)
        *v17 += 2;
      *(_QWORD *)(v13 + 24) = v17;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = v16;
      *(_QWORD *)v13 = off_1E336B3D0;
      *(_QWORD *)(v13 + 64) = 0;
      *(_QWORD *)(v13 + 72) = v11;
      v31[0] = v13;
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(this, (uint64_t)this + 32, 9, v31);
      if (v31[0])
      {
        if (*(_DWORD *)(v31[0] + 16) == 1)
          (*(void (**)(void))(*(_QWORD *)v31[0] + 8))();
        else
          --*(_DWORD *)(v31[0] + 16);
      }
      v31[0] = (uint64_t)v11;
      LODWORD(v32) = 0;
      WebCore::OfflineAudioContext::settleRenderingPromise(this, (uint64_t)v31);
      if ((_DWORD)v32 != -1)
        ((void (*)(char *, uint64_t *))off_1E336B7E0[v32])(&v34, v31);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v31[0]) = 8;
      LODWORD(v32) = 1;
      WebCore::OfflineAudioContext::settleRenderingPromise(this, (uint64_t)v31);
      if ((_DWORD)v32 != -1)
        ((void (*)(char *, uint64_t *))off_1E336B7E0[v32])(&v34, v31);
      if (v11)
        WTF::RefCounted<WebCore::AudioBuffer>::deref(v11, v10);
    }
  }
  if (*(_DWORD *)v7 == 1)
  {
    v26 = *((_QWORD *)v7 + 1);
    --*(_QWORD *)(v26 + 16);
    *((_QWORD *)v7 + 1) = 0;
    v27 = (unsigned int *)(v26 + 24);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, (unsigned int *)(v26 + 24));
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
    }
    WTF::fastFree(v7, v10);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  WebCore::OfflineAudioContext::uninitialize(this);
  do
    v19 = __ldaxr(v8);
  while (__stlxr(v19 + 1, v8));
  do
  {
    v20 = *((_QWORD *)this + 16);
    v21 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    v22 = (WTF *)*((_QWORD *)this + 22);
    if (v22)
    {
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = 0;
      WTF::fastFree(v22, v18);
    }
    *((_QWORD *)this + 22) = v20;
    *((_QWORD *)this + 23) = v21;
    result = WebCore::BaseAudioContext::deleteMarkedNodes(this);
  }
  while (*((_DWORD *)this + 47));
  do
  {
    v24 = __ldaxr(v8);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v8));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)this + 6);
    return (WTF::Thread *)(*(uint64_t (**)(WebCore::OfflineAudioContext *))(*(_QWORD *)this + 16))(this);
  }
  return result;
}

WTF::StringImpl *WebCore::OfflineAudioContext::settleRenderingPromise(WTF::StringImpl *result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  unsigned __int8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebCore::JSDOMGlobalObject *v7;
  void *v8;
  WebCore::OfflineAudioContext *v9;
  unsigned __int8 v10[8];
  WTF::StringImpl *v11;
  objc_class *v12;

  v2 = (_DWORD *)*((_QWORD *)result + 50);
  *((_QWORD *)result + 50) = 0;
  if (v2)
  {
    v3 = *(_DWORD *)(a2 + 16);
    if (!v3)
    {
      v7 = *(WebCore::JSDOMGlobalObject **)a2;
      *(_QWORD *)a2 = 0;
      WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::AudioBuffer>>((uint64_t)v2, v7);
      result = (WTF::StringImpl *)WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v7, v8);
      goto LABEL_13;
    }
    if (v3 != 1)
    {
      v9 = (WebCore::OfflineAudioContext *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::OfflineAudioContext::virtualHasPendingActivity(v9);
    }
    v4 = *(_BYTE *)a2;
    v5 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v12 = 0;
    v10[0] = v4;
    if (v5)
      *(_DWORD *)v5 += 2;
    v11 = v5;
    WebCore::DeferredPromise::reject((uint64_t)v2, v10, 0, &v12);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        if (v5)
        {
LABEL_10:
          if (*(_DWORD *)v5 == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
          else
            *(_DWORD *)v5 -= 2;
        }
LABEL_13:
        if (v2[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
        --v2[4];
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (v5)
      goto LABEL_10;
    goto LABEL_13;
  }
  return result;
}

BOOL WebCore::OfflineAudioContext::virtualHasPendingActivity(WebCore::OfflineAudioContext *this)
{
  return *((_BYTE *)this + 376) == 1;
}

void WebCore::OfflineAudioDestinationNode::~OfflineAudioDestinationNode(WebCore::OfflineAudioDestinationNode *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF **v9;
  WTF *v10;
  void *v11;
  unsigned int *v12;

  WebCore::OfflineAudioDestinationNode::uninitialize(this);
  v3 = (unsigned int *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::Thread::~Thread((WTF::Thread *)v3);
      WTF::fastFree(v10, v11);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v12 = v6;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v12, v2);
    }
  }
  v9 = (WTF **)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v9)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v9, v2);
  *(_QWORD *)this = off_1E3368500;
  *((_QWORD *)this + 3) = &unk_1E3368648;
  *((_BYTE *)this + 32) = 0;
  WebCore::AudioNode::~AudioNode(this, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::OfflineAudioDestinationNode::~OfflineAudioDestinationNode(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::OfflineAudioDestinationNode::uninitialize(WebCore::OfflineAudioDestinationNode *this)
{
  WTF::Thread *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  WebCore::OfflineAudioDestinationNode *v20;
  WTF::StringImpl *v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  int v25;

  if (*((_BYTE *)this + 32))
  {
    if (*((_BYTE *)this + 208))
    {
      v2 = (WTF::Thread *)*((_QWORD *)this + 23);
      if (v2)
      {
        WTF::Thread::waitForCompletion(v2);
        v3 = (unsigned int *)*((_QWORD *)this + 23);
        *((_QWORD *)this + 23) = 0;
        if (v3)
        {
          do
          {
            v4 = __ldaxr(v3);
            v5 = v4 - 1;
          }
          while (__stlxr(v5, v3));
          if (!v5)
          {
            atomic_store(1u, v3);
            WTF::Thread::~Thread((WTF::Thread *)v3);
            WTF::fastFree(v18, v19);
          }
        }
      }
      v6 = *((unsigned int *)this + 12);
      if ((_DWORD)v6 == -1)
      {
        v20 = (WebCore::OfflineAudioDestinationNode *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::OfflineAudioDestinationNode::~OfflineAudioDestinationNode(v20);
        return;
      }
      v24 = (uint64_t)&v21;
      v7 = (_QWORD *)((uint64_t (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v24, (char *)this + 40);
      if (((*(uint64_t (**)(_QWORD *))(*v7 + 72))(v7) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19555B080);
      }
      v8 = v7[13];
      if (*(_DWORD *)(v8 + 68))
      {
        v9 = **(_QWORD **)(v8 + 56);
        if (v9)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19555B0B4);
          }
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          v22 = 0;
          v23 = 0;
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v12 = off_1E336B910;
          v12[1] = &v22;
          v24 = (uint64_t)v12;
          LOBYTE(v25) = 0;
          v21 = 0;
          (*(void (**)(_QWORD, uint64_t *, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v9 + 40) + 48)
                                                                        + 32))(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 48), &v24, &v21);
          v14 = v21;
          v21 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v24;
          v24 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          v24 = 0x7FF0000000000000;
          v25 = 0;
          WTF::BinarySemaphore::waitUntil();
          do
          {
            v16 = __ldaxr(v10);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v10));
          if (!v17)
          {
            atomic_store(1u, (unsigned int *)(v9 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          }
        }
      }
    }
    *((_BYTE *)this + 32) = 0;
  }
}

void `non-virtual thunk to'WebCore::OfflineAudioDestinationNode::~OfflineAudioDestinationNode(WebCore::OfflineAudioDestinationNode *this)
{
  WebCore::OfflineAudioDestinationNode::~OfflineAudioDestinationNode((WebCore::OfflineAudioDestinationNode *)((char *)this - 24));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::OfflineAudioDestinationNode::~OfflineAudioDestinationNode((WebCore::OfflineAudioDestinationNode *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::OfflineAudioDestinationNode::initialize(uint64_t this)
{
  if (!*(_BYTE *)(this + 32))
    *(_BYTE *)(this + 32) = 1;
  return this;
}

uint64_t WebCore::OfflineAudioDestinationNode::renderOnAudioThread(WebCore::OfflineAudioDestinationNode *this)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::OfflineAudioContext *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  WebCore::OfflineAudioContext *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;

  if (!*((_QWORD *)this + 22))
    return 0;
  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2 == -1)
  {
LABEL_58:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x19555B44CLL);
  }
  *(_QWORD *)&v30 = &v31;
  v3 = (_BYTE *)((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v30, (char *)this + 40);
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 72))(v3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19555B46CLL);
  }
  if (!v3[380])
  {
    __break(0xC471u);
    JUMPOUT(0x19555B48CLL);
  }
  v4 = *((_QWORD *)this + 22);
  v5 = *(_DWORD **)(*((_QWORD *)this + 21) + 16);
  v6 = v5 ? *v5 : 0;
  if (*(_DWORD *)(v4 + 28) != v6 || *(_QWORD *)(v4 + 8) < 0x80uLL)
    return 0;
  if (v5)
  {
    if (*((_QWORD *)this + 24))
    {
      v7 = *v5;
      if (!(_DWORD)v7)
        goto LABEL_45;
      v8 = MEMORY[0x1E0CC10F8];
LABEL_14:
      v9 = *((unsigned int *)this + 12);
      if ((_DWORD)v9 == -1)
        goto LABEL_58;
      *(_QWORD *)&v30 = &v31;
      v10 = (WebCore::OfflineAudioContext *)((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v30, (char *)this + 40);
      if (!(*(unsigned int (**)(WebCore::OfflineAudioContext *))(*(_QWORD *)v10 + 72))(v10))
        goto LABEL_59;
      if (WebCore::OfflineAudioContext::shouldSuspend(v10))
        return 1;
      v11 = *((_QWORD *)this + 22);
      v30 = 0uLL;
      WebCore::AudioDestinationNode::renderQuantum((uint64_t)this, v11, 128, &v30);
      v12 = 0;
      if (*((_QWORD *)this + 24) >= 0x80uLL)
        v13 = 128;
      else
        v13 = *((_QWORD *)this + 24);
      while (1)
      {
        v14 = *((_QWORD *)this + 22);
        if (v12 >= *(unsigned int *)(v14 + 28))
          goto LABEL_59;
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v12);
        v16 = *(const void **)v15;
        if (!*(_QWORD *)v15)
          v16 = **(const void ***)(v15 + 8);
        WebCore::AudioBuffer::channelData(*((_QWORD *)this + 21), v12, &v30);
        v17 = *(_QWORD *)(v30 + 32);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 16);
          if (v18)
          {
            v19 = *(_QWORD *)(v8 + 56);
            if (!v19 || !*(_BYTE *)(v8 + 34) && *MEMORY[0x1E0CC10F0])
            {
              v20 = *(_QWORD *)(v30 + 24);
              goto LABEL_34;
            }
            if ((v18 & 0x3FFFFFFFFLL) + v19)
            {
              v20 = *(_QWORD *)(v30 + 24);
              if (v20 && (*(_BYTE *)(v8 + 34) || !*MEMORY[0x1E0CC10F0]))
                v20 = (v20 & 0x3FFFFFFFFLL) + v19;
              goto LABEL_34;
            }
          }
        }
        v20 = 0;
LABEL_34:
        if (*(_DWORD *)v30 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v30;
        memcpy((void *)(v20 + 4 * *((_QWORD *)this + 25)), v16, 4 * v13);
        if (v7 == ++v12)
        {
          v21 = *((_QWORD *)this + 25) + v13;
          result = 2;
          v23 = *((_QWORD *)this + 24) - v13;
          *((_QWORD *)this + 24) = v23;
          *((_QWORD *)this + 25) = v21;
          if (!v23)
            return result;
          goto LABEL_14;
        }
      }
    }
    return 2;
  }
  if (!*((_QWORD *)this + 24))
    return 2;
  do
  {
LABEL_45:
    v24 = *((unsigned int *)this + 12);
    if ((_DWORD)v24 == -1)
      goto LABEL_58;
    *(_QWORD *)&v30 = &v31;
    v25 = (WebCore::OfflineAudioContext *)((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v24])(&v30, (char *)this + 40);
    if (((*(uint64_t (**)(WebCore::OfflineAudioContext *))(*(_QWORD *)v25 + 72))(v25) & 1) == 0)
      goto LABEL_59;
    if (WebCore::OfflineAudioContext::shouldSuspend(v25))
      return 1;
    v26 = *((_QWORD *)this + 22);
    v30 = 0uLL;
    WebCore::AudioDestinationNode::renderQuantum((uint64_t)this, v26, 128, &v30);
    v27 = *((_QWORD *)this + 24);
    v28 = *((_QWORD *)this + 25);
    if (v27 >= 0x80)
      v29 = 128;
    else
      v29 = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v27 - v29;
    *((_QWORD *)this + 25) = v28 + v29;
    result = 2;
  }
  while (v27 >= 0x81);
  return result;
}

double WebCore::MediaElementAudioSourceNode::tailTime(WebCore::MediaElementAudioSourceNode *this)
{
  return 0.0;
}

double WebCore::MediaElementAudioSourceNode::latencyTime(WebCore::MediaElementAudioSourceNode *this)
{
  return 0.0;
}

uint64_t WebCore::MediaElementAudioSourceNode::requiresTailProcessing(WebCore::MediaElementAudioSourceNode *this)
{
  return 0;
}

uint64_t WebCore::MediaElementAudioSourceNode::propagatesSilence(WebCore::MediaElementAudioSourceNode *this)
{
  return 0;
}

double WebCore::MediaStreamAudioDestinationNode::tailTime(WebCore::MediaStreamAudioDestinationNode *this)
{
  return 0.0;
}

double WebCore::MediaStreamAudioDestinationNode::latencyTime(WebCore::MediaStreamAudioDestinationNode *this)
{
  return 0.0;
}

uint64_t WebCore::MediaStreamAudioDestinationNode::requiresTailProcessing(WebCore::MediaStreamAudioDestinationNode *this)
{
  return 0;
}

uint64_t WebCore::MediaStreamAudioDestinationNode::propagatesSilence(WebCore::MediaStreamAudioDestinationNode *this)
{
  return 0;
}

uint64_t WebCore::MediaStreamAudioSource::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 304);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::MediaStreamAudioSource::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaStreamAudioSource,(WTF::DestructionThread)2>(this[38]);
}

uint64_t WebCore::MediaStreamAudioSource::controlBlock(WebCore::MediaStreamAudioSource *this)
{
  return *((_QWORD *)this + 38);
}

uint64_t WebCore::MediaStreamAudioSource::isCaptureSource(WebCore::MediaStreamAudioSource *this)
{
  return 0;
}

double WebCore::MediaStreamAudioSourceNode::tailTime(WebCore::MediaStreamAudioSourceNode *this)
{
  return 0.0;
}

double WebCore::MediaStreamAudioSourceNode::latencyTime(WebCore::MediaStreamAudioSourceNode *this)
{
  return 0.0;
}

uint64_t WebCore::MediaStreamAudioSourceNode::requiresTailProcessing(WebCore::MediaStreamAudioSourceNode *this)
{
  return 0;
}

uint64_t WebCore::MediaStreamAudioSourceNode::propagatesSilence(WebCore::MediaStreamAudioSourceNode *this)
{
  return 0;
}

void WebCore::OfflineAudioContext::~OfflineAudioContext(WebCore::OfflineAudioContext *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::OfflineAudioContext::~OfflineAudioContext(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  WebCore::OfflineAudioDestinationNode *v8;
  bmalloc::api *v9;
  void *v10;

  v3 = *((_QWORD *)this + 51);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_DWORD **)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (v6[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
            else
              --v6[4];
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = (WebCore::OfflineAudioDestinationNode *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v8)
  {
    WebCore::OfflineAudioDestinationNode::~OfflineAudioDestinationNode(v8);
    bmalloc::api::isoDeallocate(v9, v10);
  }
  WebCore::BaseAudioContext::~BaseAudioContext(this, a2);
}

uint64_t WebCore::OfflineAudioContext::isOfflineContext(WebCore::OfflineAudioContext *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::OfflineAudioContext::~OfflineAudioContext(WebCore::OfflineAudioContext *this, void *a2)
{
  WebCore::OfflineAudioContext::~OfflineAudioContext((WebCore::OfflineAudioContext *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::OfflineAudioContext::~OfflineAudioContext((WebCore::OfflineAudioContext *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::OfflineAudioContext::~OfflineAudioContext((WebCore::OfflineAudioContext *)((char *)this - 56), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::OfflineAudioContext::~OfflineAudioContext((WebCore::OfflineAudioContext *)((char *)this - 56), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::OfflineAudioDestinationNode::requiresTailProcessing(WebCore::OfflineAudioDestinationNode *this)
{
  return 0;
}

uint64_t WebCore::OfflineAudioDestinationNode::maxChannelCount(WebCore::OfflineAudioDestinationNode *this)
{
  return *((unsigned int *)this + 41);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaElementAudioSourceNode::*)(WebCore::AudioBus *,unsigned long),WebCore::MediaElementAudioSourceNode*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,void,WebCore::AudioBus *,unsigned long>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaStreamAudioSourceNode::*)(WebCore::AudioBus *,unsigned long),WebCore::MediaStreamAudioSourceNode*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,void,WebCore::AudioBus *,unsigned long>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaStreamAudioSource,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E336B800;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

WebCore::MediaStreamAudioSource *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaStreamAudioSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::MediaStreamAudioSource *result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(WebCore::MediaStreamAudioSource **)(a1 + 16);
  if (result)
  {
    WebCore::MediaStreamAudioSource::~MediaStreamAudioSource(result, a2);
    result = (WebCore::MediaStreamAudioSource *)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (WebCore::MediaStreamAudioSource *)WTF::fastFree(v4, a2);
  return result;
}

unint64_t WTF::Vector<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int *v12;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return result;
  v6 = result;
  v7 = *(WTF **)result;
  v8 = result[3];
  if (v5 >= 2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v5));
    v9 = result;
    v6[2] = v5;
    *(_QWORD *)v6 = result;
    if (!(_DWORD)v8)
      goto LABEL_17;
    goto LABEL_13;
  }
  v9 = result + 4;
  *(_QWORD *)result = result + 4;
  result[2] = 1;
  if ((_DWORD)v8)
  {
LABEL_13:
    v10 = 8 * v8;
    v11 = (unsigned int **)v7;
    do
    {
      v12 = *v11;
      *v11 = 0;
      *(_QWORD *)v9 = v12;
      result = *v11;
      *v11 = 0;
      if (result)
        result = (unsigned int *)WebCore::AudioNode::decrementConnectionCount((WebCore::AudioNode *)result);
      v9 += 2;
      ++v11;
      v10 -= 8;
    }
    while (v10);
  }
LABEL_17:
  if (v6 + 4 != (unsigned int *)v7 && v7)
  {
    if (*(WTF **)v6 == v7)
    {
      *(_QWORD *)v6 = 0;
      v6[2] = 0;
    }
    return (unsigned int *)WTF::fastFree(v7, a2);
  }
  return result;
}

WTF::Thread *WTF::Detail::CallableWrapper<WebCore::OfflineAudioContext::increaseNoiseMultiplierIfNeeded(void)::$_0,void,WebCore::AudioNode &>::call(uint64_t a1, WebCore::AudioNode *this)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::Thread *result;
  int v8;
  uint64_t v9;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = *((unsigned int *)v3 + 3);
  if ((_DWORD)v4 == *((_DWORD *)v3 + 2))
  {
    WTF::Vector<WTF::RefPtr<WebCore::AudioNode,WTF::RawPtrTraits<WebCore::AudioNode>,WebCore::AudioNodeConnectionRefDerefTraits<WebCore::AudioNode>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(unsigned int **)(a1 + 8), (void *)(v4 + 1));
    v5 = *((unsigned int *)v3 + 3);
    v6 = *v3;
    result = WebCore::AudioNode::incrementConnectionCount(this);
    v8 = *((_DWORD *)v3 + 3);
    *(_QWORD *)(v6 + 8 * v5) = this;
  }
  else
  {
    v9 = *v3;
    result = WebCore::AudioNode::incrementConnectionCount(this);
    *(_QWORD *)(v9 + 8 * v4) = this;
    v8 = *((_DWORD *)v3 + 3);
  }
  *((_DWORD *)v3 + 3) = v8 + 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::OfflineAudioContext::startRendering(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *a1 = &off_1E336B8B0;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v6 + 24));
        v10 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        v3 = v10;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioContext::startRendering(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E336B8B0;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v6 + 24));
        v10 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        v3 = v10;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::OfflineAudioContext::startRendering(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned __int8 v10[8];
  WTF::StringImpl *v11;
  objc_class *v12;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_BYTE *)a2;
    v4 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v12 = 0;
    v10[0] = v3;
    if (v4)
      *(_DWORD *)v4 += 2;
    v11 = v4;
    WebCore::DeferredPromise::reject(v2, v10, 0, &v12);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v4)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v4)
      return result;
LABEL_8:
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v5);
    *(_DWORD *)v4 -= 2;
    return result;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v9 = *(_DWORD **)(v8 + 400);
  *(_QWORD *)(v8 + 400) = v7;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  *(_BYTE *)(v8 + 420) = 1;
  return (WTF::StringImpl *)WebCore::BaseAudioContext::setState(v8, (void *)1);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 24);
    do
    {
      *((_DWORD *)v10 - 2) = -1;
      *v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (int *)(v4 + 16 * v11);
      v13 = *v12;
      if (*v12 != -2)
      {
        if (v13 == -1)
        {
          v14 = v4 + 16 * v11;
          v15 = *(_DWORD **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            if (v15[4] == 1)
              goto LABEL_27;
            --v15[4];
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            v21 = v20 & v17;
            v20 = ++v18 + v21;
          }
          while (*(_DWORD *)(v16 + 16 * v21) != -1);
          v22 = v16 + 16 * v21;
          v23 = *(_DWORD **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
          {
            if (v23[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[4];
          }
          *(_DWORD *)v22 = *v12;
          v24 = v4 + 16 * v11;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v25;
          v15 = *(_DWORD **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v15)
            goto LABEL_25;
          if (v15[4] == 1)
          {
LABEL_27:
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
            goto LABEL_25;
          }
          --v15[4];
        }
      }
LABEL_25:
      if (++v11 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::OfflineAudioContext::resumeRendering(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *a1 = &off_1E336B8D8;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v6 + 24));
        v10 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        v3 = v10;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioContext::resumeRendering(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E336B8D8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v6 + 24));
        v10 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        v3 = v10;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::OfflineAudioContext::resumeRendering(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;
  objc_class *v14;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_BYTE *)a2;
    v5 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v14 = 0;
    v12[0] = v4;
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    WebCore::DeferredPromise::reject(v3, v12, 0, &v14);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        if (!v5)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      return result;
LABEL_8:
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
    *(_DWORD *)v5 -= 2;
    return result;
  }
  result = (WTF::StringImpl *)WebCore::BaseAudioContext::setState(*(_QWORD *)(a1 + 8), (void *)1);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
  {
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(uint64_t **)v10;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v8, v11, 0, (objc_class *)0xA);
    return (WTF::StringImpl *)MEMORY[0x19AEA32A0](v12);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::uninitialize(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  char v10;
  char *v11;

  *a1 = &off_1E336B938;
  v2 = a1[2];
  a1[2] = 0;
  if (!v2)
    return (uint64_t)a1;
  v3 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v3 != -1)
  {
    v11 = &v10;
    v4 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v11, v2 + 40);
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
    return (uint64_t)a1;
  }
  v9 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(v9);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  char *v12;

  *(_QWORD *)this = &off_1E336B938;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v4 != -1)
  {
    v12 = &v11;
    v5 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v12, v3 + 40);
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
    return WTF::fastFree(this, a2);
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,WebCore::ScriptExecutionContext &>::call(v10);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_1,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  unint64_t *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *(unint64_t **)(a1 + 8);
  v3 = WebCore::OfflineAudioDestinationNode::renderOnAudioThread((WebCore::OfflineAudioDestinationNode *)v2);
  v4 = atomic_load(v2 + 19);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = &off_1E336B960;
  *(_QWORD *)(v6 + 8) = v2;
  *(_DWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v5;
  v8 = v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  char v10;
  char *v11;

  *a1 = &off_1E336B960;
  v2 = a1[4];
  a1[4] = 0;
  if (!v2)
    return (uint64_t)a1;
  v3 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v3 != -1)
  {
    v11 = &v10;
    v4 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v11, v2 + 40);
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
    return (uint64_t)a1;
  }
  v9 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v9);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  char *v12;

  *(_QWORD *)this = &off_1E336B960;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v4 != -1)
  {
    v12 = &v11;
    v5 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v12, v3 + 40);
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
    return WTF::fastFree(this, a2);
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(v10);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char *v12;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2 == -1)
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v10);
  }
  else
  {
    v12 = &v11;
    v4 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v12, v1 + 40);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19555C600);
    }
    v6 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    v7 = *(_DWORD *)(a1 + 16);
    v8 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v8 = &off_1E336B988;
    *(_QWORD *)(v8 + 8) = v1;
    *(_QWORD *)(v8 + 16) = v5;
    *(_DWORD *)(v8 + 24) = v7;
    *(_QWORD *)(v8 + 32) = v6;
    v12 = (char *)v8;
    WebCore::BaseAudioContext::postTask(v4, (uint64_t *)&v12);
    result = (uint64_t)v12;
    if (v12)
      return (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  char v10;
  char *v11;

  *a1 = &off_1E336B988;
  v2 = a1[2];
  a1[2] = 0;
  if (!v2)
    return (uint64_t)a1;
  v3 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v3 != -1)
  {
    v11 = &v10;
    v4 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v11, v2 + 40);
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
    return (uint64_t)a1;
  }
  v9 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v9);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  char *v12;

  *(_QWORD *)this = &off_1E336B988;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v4 != -1)
  {
    v12 = &v11;
    v5 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v12, v3 + 40);
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
    return WTF::fastFree(this, a2);
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(v10);
}

WTF::Thread *WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(WTF::Thread *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  WebCore::OfflineAudioContext *v4;
  uint64_t v5;
  WebCore::OfflineAudioContext *v6;
  uint64_t v7;
  WTF::Thread *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::Thread *v11;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  char v36;
  char *v37;

  v1 = *((_QWORD *)result + 1);
  *(_BYTE *)(v1 + 208) = 0;
  v2 = *((_DWORD *)result + 6);
  if (v2 != 2)
  {
    if (v2 != 1)
    {
      if (v2)
        return result;
      v3 = *(unsigned int *)(v1 + 48);
      if ((_DWORD)v3 != -1)
      {
        v37 = &v36;
        v4 = (WebCore::OfflineAudioContext *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v37, v1 + 40);
        if (((*(uint64_t (**)(WebCore::OfflineAudioContext *))(*(_QWORD *)v4 + 72))(v4) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19555CAECLL);
        }
        return WebCore::OfflineAudioContext::finishedRendering(v4, 0);
      }
LABEL_66:
      v35 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::Thread *)WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::~CallableWrapper(v35);
    }
    v7 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v7 == -1)
      goto LABEL_66;
    v8 = result;
    v37 = &v36;
    v9 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v37, v1 + 40);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19555CB2CLL);
    }
    v10 = *((_QWORD *)v8 + 4);
    result = (WTF::Thread *)WebCore::BaseAudioContext::setState(v9, 0);
    v11 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11)
    {
      result = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(result);
      v11 = result;
    }
    if (v11 == *(WTF::Thread **)(v9 + 280))
    {
      v13 = *(_DWORD *)(v9 + 288) + 1;
LABEL_22:
      *(_DWORD *)(v9 + 288) = v13;
      v14 = *(_QWORD *)(v9 + 408);
      if (!v14)
        goto LABEL_30;
      v15 = *(_DWORD *)(v14 - 8);
      v16 = 9 * ((~((_DWORD)v10 << 15) + v10) ^ ((~((_DWORD)v10 << 15) + v10) >> 10));
      v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
      v18 = v15 & (v17 ^ HIWORD(v17));
      v19 = *(_DWORD *)(v14 + 16 * v18);
      if (v19 != (_DWORD)v10)
      {
        v20 = 1;
        while (v19 != -1)
        {
          v18 = ((_DWORD)v18 + v20) & v15;
          v19 = *(_DWORD *)(v14 + 16 * v18);
          ++v20;
          if (v19 == (_DWORD)v10)
            goto LABEL_29;
        }
        v18 = *(unsigned int *)(v14 - 4);
      }
LABEL_29:
      if (v18 != *(_DWORD *)(v14 - 4))
      {
        result = (WTF::Thread *)(v9 + 408);
        v24 = v14 + 16 * v18;
        v21 = *(_QWORD *)(v24 + 8);
        *(_QWORD *)(v24 + 8) = 0;
        v25 = *(_QWORD *)(v9 + 408);
        if (!v25 || (v25 += 16 * *(unsigned int *)(v25 - 4), v25 != v24))
        {
          if (v25 != v24)
          {
            *(_DWORD *)v24 = -2;
            *(_QWORD *)(v24 + 8) = 0;
            ++*(_DWORD *)(*(_QWORD *)result - 16);
            v26 = *(_QWORD *)result;
            v27 = *(_QWORD *)result ? *(_DWORD *)(v26 - 12) - 1 : -1;
            *(_DWORD *)(v26 - 12) = v27;
            v31 = *(_QWORD *)result;
            if (*(_QWORD *)result)
            {
              v32 = 6 * *(_DWORD *)(v31 - 12);
              v33 = *(_DWORD *)(v31 - 4);
              if (v32 < v33 && v33 >= 9)
                result = (WTF::Thread *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)result, v33 >> 1);
            }
          }
        }
      }
      else
      {
LABEL_30:
        v21 = 0;
      }
      v22 = *(_DWORD *)(v9 + 288) - 1;
      *(_DWORD *)(v9 + 288) = v22;
      if (v22)
        goto LABEL_42;
      *(_QWORD *)(v9 + 280) = 0;
      result = (WTF::Thread *)(v9 + 292);
      v23 = __ldxr((unsigned __int8 *)(v9 + 292));
      if (v23 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)result))
        {
LABEL_42:
          if (v21)
          {
            v28 = *(_QWORD *)(v21 + 24);
            if (v28 && *(_QWORD *)v28 && (*(_BYTE *)(v28 + 8) & 3) == 0)
            {
              v29 = *(_QWORD *)(v21 + 32);
              if (!v29 || (*(_BYTE *)(v29 + 8) & 3) != 0)
                v30 = 0;
              else
                v30 = *(uint64_t **)v29;
              JSC::JSLockHolder::JSLockHolder();
              WebCore::DeferredPromise::callFunction(v21, v30, 0, (objc_class *)0xA);
              result = (WTF::Thread *)MEMORY[0x19AEA32A0](&v37);
            }
            if (*(_DWORD *)(v21 + 16) == 1)
              return (WTF::Thread *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
            else
              --*(_DWORD *)(v21 + 16);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (WTF::Thread *)WTF::Lock::unlockSlow(result);
      goto LABEL_42;
    }
    result = (WTF::Thread *)(v9 + 292);
    if (__ldaxr((unsigned __int8 *)(v9 + 292)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)result))
    {
LABEL_21:
      *(_QWORD *)(v9 + 280) = v11;
      v13 = 1;
      goto LABEL_22;
    }
    result = (WTF::Thread *)MEMORY[0x19AEA534C]();
    goto LABEL_21;
  }
  v5 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_66;
  v37 = &v36;
  v6 = (WebCore::OfflineAudioContext *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v37, v1 + 40);
  if (((*(uint64_t (**)(WebCore::OfflineAudioContext *))(*(_QWORD *)v6 + 72))(v6) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19555CB0CLL);
  }
  return WebCore::OfflineAudioContext::finishedRendering(v6, 1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  char v10;
  char *v11;

  *a1 = &off_1E336B9B0;
  v2 = a1[2];
  a1[2] = 0;
  if (!v2)
    return (uint64_t)a1;
  v3 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v3 != -1)
  {
    v11 = &v10;
    v4 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v11, v2 + 40);
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
    return (uint64_t)a1;
  }
  v9 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::~CallableWrapper(v9);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  char *v12;

  *(_QWORD *)this = &off_1E336B9B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v4 != -1)
  {
    v12 = &v11;
    v5 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v12, v3 + 40);
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
    return WTF::fastFree(this, a2);
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::call(v10);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OfflineAudioDestinationNode::startRendering(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  unint64_t *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *(unint64_t **)(a1 + 8);
  v3 = WebCore::OfflineAudioDestinationNode::renderOnAudioThread((WebCore::OfflineAudioDestinationNode *)v2);
  v4 = atomic_load(v2 + 19);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = &off_1E336B960;
  *(_QWORD *)(v6 + 8) = v2;
  *(_DWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v5;
  v8 = v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

WTF::StringImpl *WebCore::OscillatorNode::create@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  float v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _OWORD *v20;
  void *v21;
  _OWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  char v32;
  _BYTE v33[8];
  WTF::StringImpl *v34;
  unsigned __int8 v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char v38;

  if (*(_BYTE *)(a2 + 24) == 4 && *(_QWORD *)(a2 + 40) == 0)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    v7 = bmalloc::api::isoAllocate();
    v8 = (_QWORD *)WebCore::AudioScheduledSourceNode::AudioScheduledSourceNode(v7, (uint64_t)a1, 1);
    *v8 = off_1E336BFA0;
    v8[3] = &unk_1E336C0D8;
    v8[19] = &unk_1E336C118;
    v9 = v8 + 19;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = *(float *)(a2 + 28);
    v11 = *(float *)((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) + 160) * -0.5;
    v12 = *(float *)((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) + 160) * 0.5;
    v13 = WTF::fastMalloc((WTF *)0xA0);
    *(_QWORD *)(v7 + 216) = WebCore::AudioParam::AudioParam(v13, a1, (_DWORD **)&v36, 0, 1, v10, v11, v12);
    v15 = v36;
    v36 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = *(float *)(a2 + 32);
    v17 = WTF::fastMalloc((WTF *)0xA0);
    *(_QWORD *)(v7 + 224) = WebCore::AudioParam::AudioParam(v17, a1, (_DWORD **)&v36, 0, 1, v16, -153600.0, 153600.0);
    v19 = v36;
    v36 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    *(_BYTE *)(v7 + 232) = 1;
    *(_QWORD *)(v7 + 240) = 0;
    *(_BYTE *)(v7 + 248) = 0;
    *(_QWORD *)(v7 + 256) = 0;
    *(_QWORD *)(v7 + 264) = 0;
    WTF::fastAlignedFree(0, v18);
    v20 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
    *(_QWORD *)(v7 + 256) = v20;
    *(_QWORD *)(v7 + 264) = 128;
    *v20 = 0u;
    v20[1] = 0u;
    v20[2] = 0u;
    v20[3] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    v20[10] = 0u;
    v20[11] = 0u;
    v20[12] = 0u;
    v20[13] = 0u;
    v20[14] = 0u;
    v20[15] = 0u;
    v20[16] = 0u;
    v20[17] = 0u;
    v20[18] = 0u;
    v20[19] = 0u;
    v20[20] = 0u;
    v20[21] = 0u;
    v20[22] = 0u;
    v20[23] = 0u;
    v20[24] = 0u;
    v20[25] = 0u;
    v20[26] = 0u;
    v20[27] = 0u;
    v20[28] = 0u;
    v20[29] = 0u;
    v20[30] = 0u;
    v20[31] = 0u;
    *(_QWORD *)(v7 + 272) = 0;
    *(_QWORD *)(v7 + 280) = 0;
    WTF::fastAlignedFree(0, v21);
    v22 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
    *(_QWORD *)(v7 + 272) = v22;
    *(_QWORD *)(v7 + 280) = 128;
    *v22 = 0u;
    v22[1] = 0u;
    v22[2] = 0u;
    v22[3] = 0u;
    v22[4] = 0u;
    v22[5] = 0u;
    v22[6] = 0u;
    v22[7] = 0u;
    v22[8] = 0u;
    v22[9] = 0u;
    v22[10] = 0u;
    v22[11] = 0u;
    v22[12] = 0u;
    v22[13] = 0u;
    v22[14] = 0u;
    v22[15] = 0u;
    v22[16] = 0u;
    v22[17] = 0u;
    v22[18] = 0u;
    v22[19] = 0u;
    v22[20] = 0u;
    v22[21] = 0u;
    v22[22] = 0u;
    v22[23] = 0u;
    v22[24] = 0u;
    v22[25] = 0u;
    v22[26] = 0u;
    v22[27] = 0u;
    v22[28] = 0u;
    v22[29] = 0u;
    v22[30] = 0u;
    v22[31] = 0u;
    *(_QWORD *)(v7 + 288) = 0;
    WebCore::AudioNode::addOutput((WebCore::AudioNode *)v7, (void *)1);
    *(_BYTE *)(v7 + 32) = 1;
    WebCore::ActiveDOMObject::suspendIfNeeded(v9);
    v36 = (WTF::StringImpl *)2;
    LODWORD(v37) = 0;
    WebCore::AudioNode::handleAudioNodeOptions(v7, (unsigned int *)a2, (unsigned int *)&v36, (uint64_t)v33);
    if (v35)
      goto LABEL_12;
    v25 = *(_QWORD *)(a2 + 40);
    if (v25)
    {
      result = WebCore::OscillatorNode::setPeriodicWave((WTF::StringImpl *)v7, v25);
      v27 = v35;
      *(_QWORD *)a3 = v7;
      *(_DWORD *)(a3 + 16) = 0;
      if (v27)
      {
        result = v34;
        v34 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      WebCore::OscillatorNode::setTypeForBindings(v7, *(unsigned __int8 *)(a2 + 24), &v30);
      LOBYTE(v36) = 0;
      v38 = 0;
      if (v32)
      {
        LOBYTE(v36) = v30;
        v28 = v31;
        v31 = 0;
        v37 = v28;
        v38 = 1;
      }
      result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v36, (uint64_t)v33);
      if (v38)
      {
        result = v37;
        v37 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (v32)
      {
        result = v31;
        v31 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (v35)
      {
LABEL_12:
        v23 = v34;
        *(_BYTE *)a3 = v33[0];
        *(_QWORD *)(a3 + 8) = v23;
        *(_DWORD *)(a3 + 16) = 1;
        return WebCore::AudioNode::deref((WebCore::AudioNode *)v7);
      }
      *(_QWORD *)a3 = v7;
      *(_DWORD *)(a3 + 16) = 0;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::OscillatorNode::setPeriodicWave(WTF::StringImpl *result, uint64_t a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  WTF::String *v10;
  WTF::String *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::String *v30;
  WTF::String *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t v55;
  int v56;
  uint64_t v57;
  WTF ***v58;
  uint64_t v59;
  WTF **v60;
  void *v61;
  WTF *v62;
  _DWORD *v63;
  uint64_t v64;
  _QWORD v65[4];
  WTF::Logger *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  __int128 buf;
  int v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  uint64_t v94;

  v2 = (_DWORD *)a2;
  v3 = result;
  v94 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 15);
  v5 = *((_QWORD *)result + 16);
  v65[0] = "AudioNode";
  v65[1] = 10;
  v65[2] = "setPeriodicWave";
  v65[3] = v5;
  v6 = *(float *)(a2 + 4);
  if (v6 <= 88200.0)
    v7 = 4096;
  else
    v7 = 0x4000;
  if (v6 <= 24000.0)
    v8 = 2048;
  else
    v8 = v7;
  if (*(_BYTE *)(v4 + 12))
  {
    v9 = *(float *)(a2 + 16);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v65);
    v10 = (WTF::String *)WTF::String::String((WTF::String *)&v73, "sample rate = ");
    WTF::String::number(v10, v6);
    WTF::String::String((WTF::String *)&v71, ", wave size = ");
    WTF::String::number((WTF::String *)v8);
    v11 = (WTF::String *)WTF::String::String((WTF::String *)&v69, ", rate scale = ");
    WTF::String::number(v11, v9);
    v66 = v73;
    v80 = v72;
    *(_QWORD *)&buf = v74;
    v78 = v70;
    v79 = v71;
    v76 = v68;
    v77 = v69;
    result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v66, (uint64_t *)&v80, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, &v75);
    if (!v75)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v68;
    v68 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v69;
    v69 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v70;
    v70 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v71;
    v71 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v72;
    v72 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v73;
    v73 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v74;
    v74 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = qword_1ECE7C4A0;
    v21 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v22 = v66 ? (char *)v66 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v21 = (uint64_t)v66;
      v66 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = WTF::fastFree((WTF *)v21, (void *)a2);
        else
          --*(_DWORD *)v21;
      }
    }
    if (WebCore::LogMedia)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v63 = v2;
            v26 = WTF::Logger::observers((WTF::Logger *)v21);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v64 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v65);
                v82 = 0;
                v30 = (WTF::String *)WTF::String::String((WTF::String *)&v83, "sample rate = ");
                v84 = 0;
                WTF::String::number(v30, v6);
                v86 = 0;
                WTF::String::String((WTF::String *)&v87, ", wave size = ");
                v88 = 0;
                WTF::String::number((WTF::String *)v8);
                v90 = 0;
                v31 = (WTF::String *)WTF::String::String((WTF::String *)&v91, ", rate scale = ");
                v92 = 0;
                WTF::String::number(v31, v9);
                v66 = 0;
                v67 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v67) = 7;
                v66 = v32;
                v33 = HIDWORD(v67);
                *((_DWORD *)v32 + 4 * HIDWORD(v67)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = v82;
                v35 = v83;
                if (v83)
                  *(_DWORD *)v83 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v84;
                v36 = v85;
                if (v85)
                  *(_DWORD *)v85 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v86;
                v37 = v87;
                if (v87)
                  *(_DWORD *)v87 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v88;
                v38 = v89;
                if (v89)
                  *(_DWORD *)v89 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v90;
                v39 = v91;
                if (v91)
                  *(_DWORD *)v91 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v92;
                v40 = v93;
                if (v93)
                  *(_DWORD *)v93 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                HIDWORD(v67) = v33 + 7;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, &WebCore::LogMedia, 0, &v66);
                v41 = v66;
                if (HIDWORD(v67))
                {
                  v42 = 16 * HIDWORD(v67);
                  v43 = (WTF::StringImpl **)((char *)v66 + 8);
                  do
                  {
                    v44 = *v43;
                    *v43 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)a2);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v43 += 2;
                    v42 -= 16;
                  }
                  while (v42);
                  v41 = v66;
                }
                if (v41)
                {
                  v66 = 0;
                  LODWORD(v67) = 0;
                  WTF::fastFree(v41, (void *)a2);
                }
                v45 = v93;
                v93 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v91;
                v91 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v89;
                v89 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v87;
                v87 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v85;
                v85 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v83;
                v83 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v64);
            }
            v52 = __ldxr(v23);
            if (v52 == 1)
            {
              v2 = v63;
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
              v2 = v63;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v75;
    v75 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v53 = (unsigned __int8 *)v3 + 248;
  if (__ldaxr((unsigned __int8 *)v3 + 248))
  {
    __clrex();
  }
  else if (!__stxr(1u, v53))
  {
    goto LABEL_112;
  }
  result = (WTF::StringImpl *)MEMORY[0x19AEA534C]((char *)v3 + 248);
LABEL_112:
  ++*v2;
  v55 = *((_QWORD *)v3 + 36);
  *((_QWORD *)v3 + 36) = v2;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      v57 = *(unsigned int *)(v55 + 36);
      if ((_DWORD)v57)
      {
        v58 = *(WTF ****)(v55 + 24);
        v59 = 8 * v57;
        do
        {
          v60 = *v58;
          *v58 = 0;
          if (v60)
          {
            WTF::fastAlignedFree(*v60, (void *)a2);
            WTF::fastFree((WTF *)v60, v61);
          }
          ++v58;
          v59 -= 8;
        }
        while (v59);
      }
      v62 = *(WTF **)(v55 + 24);
      if (v62)
      {
        *(_QWORD *)(v55 + 24) = 0;
        *(_DWORD *)(v55 + 32) = 0;
        WTF::fastFree(v62, (void *)a2);
      }
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v55, (void *)a2);
    }
    else
    {
      --*(_DWORD *)v55;
    }
  }
  *((_BYTE *)v3 + 209) = 4;
  v56 = __ldxr(v53);
  if (v56 != 1)
  {
    __clrex();
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::StringImpl *)((char *)v3 + 248));
  }
  if (__stlxr(0, v53))
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::StringImpl *)((char *)v3 + 248));
  return result;
}

void WebCore::OscillatorNode::setTypeForBindings(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WebCore::OscillatorNode *v10;
  _QWORD v11[4];
  unsigned __int8 v12;
  char v13;

  v12 = a2;
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v11[0] = "AudioNode";
  v11[1] = 10;
  v11[2] = "setTypeForBindings";
  v11[3] = v6;
  if (*(_BYTE *)(v5 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::OscillatorType>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11, &v12);
    a2 = v12;
  }
  if (a2 == 4)
  {
    if (*(_BYTE *)(a1 + 209) == 4)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      *((_BYTE *)a3 + 16) = 1;
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v7 == -1)
    {
      v10 = (WebCore::OscillatorNode *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::OscillatorNode::~OscillatorNode(v10);
    }
    else
    {
      v11[0] = &v13;
      v8 = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(v11, a1 + 40);
      v9 = WebCore::BaseAudioContext::periodicWave(v8, v12);
      WebCore::OscillatorNode::setPeriodicWave((WTF::StringImpl *)a1, v9);
      *(_BYTE *)(a1 + 209) = v12;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
    }
  }
}

void WebCore::OscillatorNode::~OscillatorNode(WebCore::OscillatorNode *this, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  WebCore::AudioParam *v6;
  WebCore::AudioParam *v7;
  void *v8;
  uint64_t v9;
  WTF ***v10;
  uint64_t v11;
  WTF **v12;
  void *v13;
  WTF *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;

  *((_BYTE *)this + 32) = 0;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *(unsigned int *)(v3 + 36);
      if ((_DWORD)v9)
      {
        v10 = *(WTF ****)(v3 + 24);
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            WTF::fastAlignedFree(*v12, a2);
            WTF::fastFree((WTF *)v12, v13);
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v14 = *(WTF **)(v3 + 24);
      if (v14)
      {
        *(_QWORD *)(v3 + 24) = 0;
        *(_DWORD *)(v3 + 32) = 0;
        WTF::fastFree(v14, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WTF::fastAlignedFree(*((WTF **)this + 34), a2);
  WTF::fastAlignedFree(*((WTF **)this + 32), v4);
  v6 = (WebCore::AudioParam *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v6, v5);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*((_DWORD *)v6 + 16);
    }
  }
  v7 = (WebCore::AudioParam *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v7, v5);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*((_DWORD *)v7 + 16);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::OscillatorNode *)((char *)this + 152), v5);
  WebCore::AudioNode::~AudioNode(this, v8);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::OscillatorNode::~OscillatorNode(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::OscillatorNode::~OscillatorNode(WebCore::OscillatorNode *this, void *a2)
{
  WebCore::OscillatorNode::~OscillatorNode((WebCore::OscillatorNode *)((char *)this - 24), a2);
}

{
  WebCore::OscillatorNode::~OscillatorNode((WebCore::OscillatorNode *)((char *)this - 152), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::OscillatorNode::~OscillatorNode((WebCore::OscillatorNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::OscillatorNode::~OscillatorNode((WebCore::OscillatorNode *)((char *)this - 152), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

float WebCore::doInterpolation(WebCore *this, double a2, float a3, uint64_t a4, float a5, const float *a6, const float *a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  double v30;
  unsigned int v31;
  double v32;
  double v33;
  double v34;
  double v35;

  v7 = a2;
  if (a3 >= 0.3)
  {
    v23 = v7 + 1;
    v24 = v7 & this;
    v25 = v23 & this;
    v26 = a2;
    v27 = (float)(v26 - (float)v24);
    v22 = v27 * a6[v25] + (1.0 - v27) * a6[v24];
    v21 = v27 * *(float *)(a4 + 4 * v25) + (1.0 - v27) * *(float *)(a4 + 4 * v24);
  }
  else if (a3 >= 0.16)
  {
    v28 = (v7 - 1) & this;
    v29 = v7 & this;
    v30 = (double)v7;
    v31 = (v7 + 1) & this;
    v32 = a2 - v30;
    v33 = v32 * 0.5 * (v32 + -1.0);
    v34 = 1.0 - v32 * v32;
    v35 = v32 * 0.5 * (v32 + 1.0);
    v21 = v33 * *(float *)(a4 + 4 * v28) + 0.0 + v34 * *(float *)(a4 + 4 * v29) + v35 * *(float *)(a4 + 4 * v31);
    v22 = v33 * a6[v28] + 0.0 + v34 * a6[v29] + v35 * a6[v31];
  }
  else
  {
    v8 = (v7 - 2) & this;
    v9 = (v7 - 1) & this;
    v10 = (v7 + 1) & this;
    v11 = (v7 + 2) & this;
    v12 = a2 - (double)v7;
    v13 = v12 * v12 + -1.0;
    v14 = v12 * v13;
    v15 = (v12 + -2.0) * (v12 * v13) / 24.0;
    v16 = v12 * v12 + -4.0;
    v17 = -(v12 * (v12 + -1.0)) * v16 / 6.0;
    v18 = v13 * v16 * 0.25;
    v19 = -(v12 * (v12 + 1.0)) * v16 / 6.0;
    v20 = (v12 + 2.0) * v14 / 24.0;
    v21 = v15 * *(float *)(a4 + 4 * v8)
        + 0.0
        + v17 * *(float *)(a4 + 4 * v9)
        + v18 * *(float *)(a4 + 4 * (v7 & this))
        + v19 * *(float *)(a4 + 4 * v10)
        + v20 * *(float *)(a4 + 4 * v11);
    v22 = v15 * a6[v8] + 0.0 + v17 * a6[v9] + v18 * a6[v7 & this] + v19 * a6[v10] + v20 * a6[v11];
  }
  return v21 * a5 + (float)(1.0 - a5) * v22;
}

void WebCore::OscillatorNode::process(WebCore::OscillatorNode *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  float v19;
  WebCore::AudioParam *v20;
  unint64_t v21;
  unint64_t k;
  uint64_t v23;
  void **v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  void **v28;
  _QWORD *v29;
  float *v30;
  _BOOL4 hasSampleAccurateValues;
  uint64_t v32;
  int v33;
  float v34;
  _BOOL4 v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float *v42;
  unint64_t v43;
  float v44;
  int v45;
  float v46;
  WebCore::AudioParam *v47;
  float v48;
  WebCore::AudioParam *v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  float *v63;
  int v64;
  uint64_t v65;
  float v66;
  unsigned int v67;
  float *v68;
  double v69;
  float v70;
  unsigned int v71;
  WebCore *v72;
  unsigned int v73;
  double v74;
  float v75;
  float v76;
  float v77;
  float v78;
  const float *v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  float v83;
  int v84;
  unsigned int v85;
  WebCore::AudioParam *v86;
  float v87;
  WebCore::AudioParam *v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  const float *v98;
  float v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  double v104;
  WebCore *v105;
  uint64_t v106;
  uint64_t v107;
  const float *v108;
  float v109;
  float v110;
  float v111;
  double v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  unint64_t j;
  uint64_t v119;
  void **v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  float *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char *__B;

  if (*((_DWORD *)this + 21))
    v4 = **((_QWORD **)this + 9);
  else
    v4 = 0;
  v5 = 24;
  if (!*(_BYTE *)(v4 + 32))
    v5 = 16;
  v6 = *(_QWORD *)(v4 + v5);
  if (!*((_BYTE *)this + 32))
  {
    v10 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v10)
    {
      for (i = 0; i < v10; ++i)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * i);
        if (!*(_BYTE *)(v12 + 24))
        {
          *(_BYTE *)(v12 + 24) = 1;
          v13 = *(void ***)(v12 + 8);
          v14 = (_QWORD *)(v12 + 16);
          if (v13)
            v14 = v13 + 1;
          else
            v13 = (void **)v12;
          bzero(*v13, 4 * *v14);
          v10 = *(unsigned int *)(v6 + 28);
        }
      }
    }
    return;
  }
  if (!*(_DWORD *)(v6 + 28) || *((_QWORD *)this + 33) < a2)
    return;
  v7 = (unsigned __int8 *)this + 248;
  do
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 & 1) != 0)
      {
        v117 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v117)
        {
          for (j = 0; j < v117; ++j)
          {
            v119 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * j);
            if (!*(_BYTE *)(v119 + 24))
            {
              *(_BYTE *)(v119 + 24) = 1;
              v120 = *(void ***)(v119 + 8);
              v121 = (_QWORD *)(v119 + 16);
              if (v120)
                v121 = v120 + 1;
              else
                v120 = (void **)v119;
              bzero(*v120, 4 * *v121);
              v117 = *(unsigned int *)(v6 + 28);
            }
          }
        }
        return;
      }
      v9 = __ldaxr(v7);
      if (v9 == v8)
        break;
      __clrex();
    }
  }
  while (__stxr(v8 | 1, v7));
  if (!*((_QWORD *)this + 36))
  {
    v21 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v21)
    {
      for (k = 0; k < v21; ++k)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * k);
        if (!*(_BYTE *)(v23 + 24))
        {
          *(_BYTE *)(v23 + 24) = 1;
          v24 = *(void ***)(v23 + 8);
          v25 = (_QWORD *)(v23 + 16);
          if (v24)
            v25 = v24 + 1;
          else
            v24 = (void **)v23;
          bzero(*v24, 4 * *v25);
          v21 = *(unsigned int *)(v6 + 28);
        }
      }
    }
    goto LABEL_139;
  }
  v133 = 0;
  v134 = 0;
  v132 = 0.0;
  WebCore::AudioScheduledSourceNode::updateSchedulingInfo((uint64_t)this, a2, v6, &v134, &v133, &v132);
  v15 = *(unsigned int *)(v6 + 28);
  if (!v133)
  {
    if (*(_DWORD *)(v6 + 28))
    {
      v26 = 0;
      do
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v26);
        if (!*(_BYTE *)(v27 + 24))
        {
          *(_BYTE *)(v27 + 24) = 1;
          v28 = *(void ***)(v27 + 8);
          v29 = (_QWORD *)(v27 + 16);
          if (v28)
            v29 = v28 + 1;
          else
            v28 = (void **)v27;
          bzero(*v28, 4 * *v29);
          v15 = *(unsigned int *)(v6 + 28);
        }
        ++v26;
      }
      while (v26 < v15);
    }
    goto LABEL_139;
  }
  if (!*(_DWORD *)(v6 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x19555E884);
  }
  v16 = **(uint64_t ***)(v6 + 16);
  *((_BYTE *)v16 + 24) = 0;
  v17 = *v16;
  if (!*v16)
    v17 = *(_QWORD *)v16[1];
  v18 = *((double *)this + 30);
  v19 = *(float *)(*((_QWORD *)this + 36) + 16);
  if (*((_QWORD *)this + 33) < a2 || *((_QWORD *)this + 35) < a2)
    goto LABEL_69;
  if (*((_BYTE *)this + 232))
  {
    *((_BYTE *)this + 232) = 0;
    v20 = (WebCore::AudioParam *)*((_QWORD *)this + 27);
    *((_DWORD *)v20 + 27) = *((_DWORD *)v20 + 22);
    *(_DWORD *)(*((_QWORD *)this + 28) + 108) = *(_DWORD *)(*((_QWORD *)this + 28) + 88);
  }
  else
  {
    v20 = (WebCore::AudioParam *)*((_QWORD *)this + 27);
  }
  v30 = (float *)*((_QWORD *)this + 32);
  hasSampleAccurateValues = WebCore::AudioParam::hasSampleAccurateValues(v20);
  v32 = *((_QWORD *)this + 27);
  if (hasSampleAccurateValues && !*(_BYTE *)(v32 + 104))
  {
    v122 = *(_QWORD *)(v32 + 8);
    if (v122 && (v123 = *(_QWORD *)(v122 + 8)) != 0)
    {
      v124 = atomic_load((unint64_t *)(v123 + 240));
      v125 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v125)
        v125 = WTF::Thread::initializeCurrentTLS(0);
      v33 = 1;
      if ((_DWORD)a2 && v30)
      {
        v34 = v19;
        if (v125 != v124)
          goto LABEL_55;
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v32, v30, a2, *(_BYTE *)(v32 + 104) == 0);
      }
    }
    else
    {
      v33 = 1;
    }
    v34 = v19;
    goto LABEL_55;
  }
  LODWORD(__B) = 0;
  WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v32, (float *)&__B, 1u, 0);
  v33 = 0;
  v34 = v19 * *(float *)&__B;
LABEL_55:
  v35 = WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 28));
  v36 = *((_QWORD *)this + 28);
  if (v35 && !*(_BYTE *)(v36 + 104))
  {
    v126 = v30;
    if (v33)
      v126 = (float *)*((_QWORD *)this + 34);
    v127 = *(_QWORD *)(v36 + 8);
    if (!v127)
      goto LABEL_172;
    v128 = *(_QWORD *)(v127 + 8);
    if (!v128)
      goto LABEL_172;
    v129 = atomic_load((unint64_t *)(v128 + 240));
    v130 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v130)
      v130 = WTF::Thread::initializeCurrentTLS(0);
    if ((_DWORD)a2 && v126 && v130 == v129)
    {
      WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v36, v126, a2, *(_BYTE *)(v36 + 104) == 0);
      LODWORD(__B) = 979006478;
      vDSP_vsmul(v126, 1, (const float *)&__B, v126, 1, a2);
    }
    else
    {
LABEL_172:
      LODWORD(__B) = 979006478;
      vDSP_vsmul(v126, 1, (const float *)&__B, v126, 1, a2);
      if (!a2)
        goto LABEL_175;
    }
    v131 = 0;
    do
    {
      v126[v131] = exp2f(v126[v131]);
      ++v131;
    }
    while (a2 > v131);
LABEL_175:
    if ((v33 & 1) != 0)
      vDSP_vmul(v126, 1, v30, 1, v30, 1, a2);
LABEL_59:
    v38 = *((unsigned int *)this + 12);
    if ((_DWORD)v38 != -1)
    {
      __B = &v135;
      v39 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v38])(&__B, (char *)this + 40);
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 88))(v39);
      if (a2)
      {
        v41 = *(float *)(v40 + 160) * 0.5;
        v42 = v30;
        v43 = a2;
        do
        {
          if (*v42 > (float)-v41)
            v44 = *v42;
          else
            v44 = -v41;
          if (*v42 >= v41)
            v44 = v41;
          *v42++ = v44;
          --v43;
        }
        while (v43);
      }
      *(float *)&__B = v34;
      v45 = 1;
      vDSP_vsmul(v30, 1, (const float *)&__B, v30, 1, a2);
      v46 = 0.0;
      goto LABEL_86;
    }
    goto LABEL_179;
  }
  LODWORD(__B) = 0;
  WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v36, (float *)&__B, 1u, 0);
  v37 = exp2f(*(float *)&__B / 1200.0);
  if (v33)
  {
    v34 = v34 * v37;
    goto LABEL_59;
  }
LABEL_69:
  v47 = (WebCore::AudioParam *)*((_QWORD *)this + 27);
  LODWORD(__B) = 0;
  WebCore::AudioParam::calculateFinalValues(v47, (float *)&__B, 1u, 0);
  v48 = *(float *)&__B;
  v49 = (WebCore::AudioParam *)*((_QWORD *)this + 28);
  LODWORD(__B) = 0;
  WebCore::AudioParam::calculateFinalValues(v49, (float *)&__B, 1u, 0);
  v50 = *((unsigned int *)this + 12);
  if ((_DWORD)v50 == -1)
    goto LABEL_179;
  v51 = v48 * exp2f(*(float *)&__B / 1200.0);
  __B = &v135;
  v52 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v50])(&__B, (char *)this + 40);
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 88))(v52);
  v54 = 0.5;
  v55 = *(float *)(v53 + 160) * 0.5;
  v56 = -v55;
  if (v51 > (float)-v55)
    v56 = v51;
  if (v51 >= v55)
    v56 = *(float *)(v53 + 160) * 0.5;
  v46 = v56;
  v57 = *((_QWORD *)this + 36);
  if (v56 != 0.0)
    v54 = fabsf(v56) / *(float *)(v57 + 12);
  v58 = (float)((float)(log2f(v54) * 1200.0) / 400.0) + 1.0;
  if (v58 < 0.0)
    v58 = 0.0;
  v59 = *(_DWORD *)(v57 + 8) - 1;
  if (v58 > (float)v59)
    v58 = (float)v59;
  v60 = v58;
  if (v59 <= v58)
    v61 = v58;
  else
    v61 = v60 + 1;
  v62 = *(_DWORD *)(v57 + 36);
  if (v62 <= v61)
  {
    __break(0xC471u);
    JUMPOUT(0x19555E88CLL);
  }
  if (v62 <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x19555E894);
  }
  v45 = 0;
LABEL_86:
  v63 = (float *)(v17 + 4 * v134);
  v64 = v133;
  if (v132 <= 0.0)
  {
    if (v132 < 0.0)
      v18 = -(v132 * v46) * v19;
  }
  else
  {
    ++v63;
    v64 = v133 - 1;
    v18 = v18 + (1.0 - v132) * v46 * v19;
  }
  v65 = *((_QWORD *)this + 36);
  if (!v45)
  {
    v83 = *(float *)(v65 + 4);
    if (v83 <= 88200.0)
      v84 = 4096;
    else
      v84 = 0x4000;
    if (v83 <= 24000.0)
      v85 = 2048;
    else
      v85 = v84;
    v86 = (WebCore::AudioParam *)*((_QWORD *)this + 27);
    LODWORD(__B) = 0;
    WebCore::AudioParam::calculateFinalValues(v86, (float *)&__B, 1u, 0);
    v87 = *(float *)&__B;
    v88 = (WebCore::AudioParam *)*((_QWORD *)this + 28);
    LODWORD(__B) = 0;
    WebCore::AudioParam::calculateFinalValues(v88, (float *)&__B, 1u, 0);
    v89 = *((unsigned int *)this + 12);
    if ((_DWORD)v89 != -1)
    {
      v90 = v87 * exp2f(*(float *)&__B / 1200.0);
      __B = &v135;
      v91 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v89])(&__B, (char *)this + 40);
      v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 88))(v91);
      v93 = 0.5;
      v94 = *(float *)(v92 + 160) * 0.5;
      v95 = -v94;
      if (v90 > (float)-v94)
        v95 = v90;
      if (v90 >= v94)
        v95 = *(float *)(v92 + 160) * 0.5;
      v96 = v95;
      v97 = *((_QWORD *)this + 36);
      if (v95 != 0.0)
        v93 = fabsf(v95) / *(float *)(v97 + 12);
      v99 = (float)((float)(log2f(v93) * 1200.0) / 400.0) + 1.0;
      if (v99 < 0.0)
        v99 = 0.0;
      v100 = *(_DWORD *)(v97 + 8) - 1;
      if (v99 > (float)v100)
        v99 = (float)v100;
      v101 = v99;
      if (v100 <= v99)
        v102 = v99;
      else
        v102 = v101 + 1;
      v103 = *(_DWORD *)(v97 + 36);
      if (v103 <= v102)
      {
        __break(0xC471u);
        JUMPOUT(0x19555E89CLL);
      }
      if (v103 <= v101)
        goto LABEL_186;
      if (v64 >= 1)
      {
        v104 = (double)v85;
        v105 = (WebCore *)(v85 - 1);
        v106 = *(_QWORD *)(v97 + 24);
        v107 = **(_QWORD **)(v106 + 8 * v102);
        v108 = **(const float ***)(v106 + 8 * v101);
        v109 = v99 - (float)v101;
        v110 = v96 * *(float *)(v97 + 16);
        v111 = fabsf(v110);
        v112 = v110;
        do
        {
          *v63++ = WebCore::doInterpolation(v105, v18, v111, v107, v109, v108, v98);
          v18 = v18 + v112 - floor(1.0 / v104 * (v18 + v112)) * v104;
          --v64;
        }
        while (v64);
      }
      goto LABEL_136;
    }
LABEL_179:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_186;
  }
  v66 = *(float *)(v65 + 4);
  if (v66 <= 88200.0)
    v67 = 4096;
  else
    v67 = 0x4000;
  if (v66 <= 24000.0)
    v67 = 2048;
  if (v64 >= 1)
  {
    v68 = (float *)*((_QWORD *)this + 32);
    v69 = (double)v67;
    v70 = 1.0 / *(float *)(v65 + 16);
    v71 = *(_DWORD *)(v65 + 8) - 1;
    v72 = (WebCore *)(v67 - 1);
    v73 = *(_DWORD *)(v65 + 36);
    v74 = 1.0 / (double)v67;
    while (1)
    {
      v75 = *v68++;
      v76 = v75;
      v77 = v70 * v75;
      v78 = 0.5;
      if ((float)(v70 * v75) != 0.0)
        v78 = fabsf(v77) / *(float *)(v65 + 12);
      v80 = (float)((float)(log2f(v78) * 1200.0) / 400.0) + 1.0;
      if (v80 < 0.0)
        v80 = 0.0;
      if (v80 > (float)v71)
        v80 = (float)v71;
      v81 = v80;
      v82 = v71 <= v80 ? v80 : v81 + 1;
      if (v73 <= v82)
        break;
      if (v73 <= v81)
      {
        __break(0xC471u);
        JUMPOUT(0x19555E87CLL);
      }
      *v63++ = WebCore::doInterpolation(v72, v18, fabsf(v76), **(_QWORD **)(*(_QWORD *)(v65 + 24) + 8 * v82), v80 - (float)v81, **(const float ***)(*(_QWORD *)(v65 + 24) + 8 * v81), v79);
      v18 = v18 + v76 - floor(v74 * (v18 + v76)) * v69;
      if (!--v64)
        goto LABEL_136;
    }
LABEL_186:
    __break(0xC471u);
    JUMPOUT(0x19555E874);
  }
LABEL_136:
  *((double *)this + 30) = v18;
  v113 = *(unsigned int *)(v6 + 28);
  if ((_DWORD)v113)
  {
    v114 = *(uint64_t **)(v6 + 16);
    do
    {
      v115 = *v114++;
      *(_BYTE *)(v115 + 24) = 0;
      --v113;
    }
    while (v113);
  }
LABEL_139:
  v116 = __ldxr(v7);
  if (v116 == 1)
  {
    if (!__stlxr(0, v7))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
}

BOOL WebCore::OscillatorNode::propagatesSilence(WebCore::OscillatorNode *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;

  v2 = (unsigned int *)((char *)this + 176);
  v3 = atomic_load((unsigned int *)this + 44);
  if (v3 != 2)
  {
    v4 = atomic_load(v2);
    if (v4 != 1)
      return 1;
  }
  v5 = atomic_load(v2);
  if (v5 == 3)
    return 1;
  v7 = (unsigned __int8 *)this + 248;
  do
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 & 1) != 0)
        return 0;
      v9 = __ldaxr(v7);
      if (v9 == v8)
        break;
      __clrex();
    }
  }
  while (__stxr(v8 | 1, v7));
  v6 = *((_QWORD *)this + 36) == 0;
  v10 = __ldxr(v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, v7))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v6;
}

void WebCore::PannerNode::create(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  WebCore::HRTFDatabaseLoader *v27;
  uint64_t v28;
  WebCore::HRTFPanner *v29;
  float v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  float v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  float v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  float v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  float v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  float v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unsigned __int8 *v54;
  int v55;
  int v57;
  double v58;
  int v60;
  double v61;
  int v63;
  double v64;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  double v71;
  int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  double v78;
  int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  double v85;
  int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  _DWORD *v91;
  WebCore::PannerNode *v92;
  char v93;
  char v94;
  char v95;
  char v96;
  WTF::StringImpl *v97;
  char v98;
  char v99;
  char v100;
  char v101;
  _DWORD *v102[2];
  char v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  const char *v106;
  unint64_t v107;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_QWORD *)v6 = off_1E3368A80;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = &unk_1E3368BA8;
  *(_BYTE *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 36) = 8;
  v8 = v6 + 40;
  v9 = a1 + 6;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(v6 + 40) = a1;
  *(_DWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v6 + 88) = _Q0;
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)(v6 + 108) = 0;
  v16 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_QWORD *)(v7 + 120) = v16;
  v19 = *((_QWORD *)a1 + 9);
  v20 = *((_QWORD *)a1 + 10) + 1;
  *((_QWORD *)a1 + 10) = v20;
  v21 = v19 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v20;
  *(_QWORD *)(v7 + 128) = v21;
  *(_QWORD *)(v7 + 136) = 2;
  *(_DWORD *)(v7 + 144) = 0;
  v104 = (WTF::StringImpl *)"AudioNode";
  v105 = (WTF::StringImpl *)10;
  v106 = "AudioNode";
  v107 = v21;
  if (*(_BYTE *)(v16 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v104);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
  *(_QWORD *)v7 = off_1E336C170;
  *(_QWORD *)(v7 + 24) = &unk_1E336C298;
  v22 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 88))(a1);
  WebCore::HRTFDatabaseLoader::createAndLoadAsynchronouslyIfNecessary(*(float *)(v22 + 160), (uint64_t *)(v7 + 152));
  v23 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v7 + 160) = v23;
  v24 = *(unsigned int *)(v7 + 48);
  if ((_DWORD)v24 == -1)
  {
    v92 = (WebCore::PannerNode *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::PannerNode::~PannerNode(v92);
    return;
  }
  v104 = (WTF::StringImpl *)v102;
  v25 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v24])(&v104, v8);
  v26 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 88))(v25) + 160);
  v27 = *(WebCore::HRTFDatabaseLoader **)(v7 + 152);
  *(_QWORD *)(v7 + 168) = 0;
  if (v23 == 1)
  {
    v29 = (WebCore::HRTFPanner *)WTF::fastMalloc((WTF *)0x328);
    v28 = (uint64_t)WebCore::HRTFPanner::HRTFPanner(v29, v26, v27);
  }
  else
  {
    if (v23)
      goto LABEL_13;
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v28 + 8) = 0;
    *(_QWORD *)v28 = off_1E34077C0;
  }
  *(_QWORD *)(v7 + 168) = v28;
LABEL_13:
  *(_DWORD *)(v7 + 176) = 1;
  *(_BYTE *)(v7 + 180) = 1;
  *(_OWORD *)(v7 + 184) = xmmword_1968BCE60;
  *(_OWORD *)(v7 + 200) = xmmword_1968BCE70;
  *(_OWORD *)(v7 + 216) = xmmword_1968BCE80;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30 = *(float *)(a2 + 32);
  v31 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v7 + 232) = WebCore::AudioParam::AudioParam(v31, a1, (_DWORD **)&v104, 0, 1, v30, -3.4028e38, 3.4028e38);
  v33 = v104;
  v104 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v104;
  v102[0] = v104;
  v35 = *(float *)(a2 + 36);
  v36 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v7 + 240) = WebCore::AudioParam::AudioParam(v36, a1, v102, 0, 1, v35, -3.4028e38, 3.4028e38);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v37);
    else
      *(_DWORD *)v34 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v38 = v104;
  v102[0] = v104;
  v39 = *(float *)(a2 + 40);
  v40 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v7 + 248) = WebCore::AudioParam::AudioParam(v40, a1, v102, 0, 1, v39, -3.4028e38, 3.4028e38);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v41);
    else
      *(_DWORD *)v38 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = v104;
  v102[0] = v104;
  v43 = *(float *)(a2 + 44);
  v44 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v7 + 256) = WebCore::AudioParam::AudioParam(v44, a1, v102, 0, 1, v43, -3.4028e38, 3.4028e38);
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v45);
    else
      *(_DWORD *)v42 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v46 = *(float *)(a2 + 48);
  v47 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v7 + 264) = WebCore::AudioParam::AudioParam(v47, a1, (_DWORD **)&v104, 0, 1, v46, -3.4028e38, 3.4028e38);
  v49 = v104;
  v104 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v48);
    else
      *(_DWORD *)v49 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v50 = *(float *)(a2 + 52);
  v51 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)(v7 + 272) = WebCore::AudioParam::AudioParam(v51, a1, (_DWORD **)&v104, 0, 1, v50, -3.4028e38, 3.4028e38);
  v53 = v104;
  v104 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  *(_BYTE *)(v7 + 280) = 0;
  *(_BYTE *)(v7 + 296) = 0;
  *(_BYTE *)(v7 + 304) = 0;
  *(_BYTE *)(v7 + 308) = 0;
  v54 = (unsigned __int8 *)(v7 + 336);
  *(_QWORD *)(v7 + 320) = 0;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  *(_BYTE *)(v7 + 336) = 0;
  v55 = *(_DWORD *)(a2 + 28);
  if (__ldaxr((unsigned __int8 *)(v7 + 336)))
  {
    __clrex();
LABEL_34:
    MEMORY[0x19AEA534C](v7 + 336);
    goto LABEL_35;
  }
  if (__stxr(1u, v54))
    goto LABEL_34;
LABEL_35:
  if (*(_DWORD *)(v7 + 176) != v55)
  {
    *(_DWORD *)(v7 + 176) = v55;
    *(_BYTE *)(v7 + 180) = 1;
    if (*(_BYTE *)(v7 + 308))
      *(_BYTE *)(v7 + 308) = 0;
  }
  v57 = __ldxr(v54);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v54))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 336));
  v58 = *(double *)(a2 + 80);
  if (__ldaxr(v54))
  {
    __clrex();
LABEL_46:
    MEMORY[0x19AEA534C](v7 + 336);
    goto LABEL_47;
  }
  if (__stxr(1u, v54))
    goto LABEL_46;
LABEL_47:
  if (*(double *)(v7 + 208) != v58)
  {
    *(double *)(v7 + 208) = v58;
    if (*(_BYTE *)(v7 + 308))
      *(_BYTE *)(v7 + 308) = 0;
  }
  v60 = __ldxr(v54);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_54;
  }
  if (__stlxr(0, v54))
LABEL_54:
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 336));
  v61 = *(double *)(a2 + 88);
  if (__ldaxr(v54))
  {
    __clrex();
LABEL_58:
    MEMORY[0x19AEA534C](v7 + 336);
    goto LABEL_59;
  }
  if (__stxr(1u, v54))
    goto LABEL_58;
LABEL_59:
  if (*(double *)(v7 + 216) != v61)
  {
    *(double *)(v7 + 216) = v61;
    if (*(_BYTE *)(v7 + 308))
      *(_BYTE *)(v7 + 308) = 0;
  }
  v63 = __ldxr(v54);
  if (v63 != 1)
  {
    __clrex();
    goto LABEL_66;
  }
  if (__stlxr(0, v54))
LABEL_66:
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 336));
  WebCore::AudioNode::addInput((WebCore::AudioNode *)v7);
  WebCore::AudioNode::addOutput((WebCore::AudioNode *)v7, (void *)2);
  *(_BYTE *)(v7 + 32) = 1;
  v104 = (WTF::StringImpl *)0x100000002;
  LODWORD(v105) = 0;
  WebCore::AudioNode::handleAudioNodeOptions(v7, (unsigned int *)a2, (unsigned int *)&v104, (uint64_t)v102);
  if (v103)
  {
LABEL_179:
    v91 = v102[1];
    *(_BYTE *)a3 = v102[0];
    *(_QWORD *)(a3 + 8) = v91;
    *(_DWORD *)(a3 + 16) = 1;
    WebCore::AudioNode::deref((WebCore::AudioNode *)v7);
    return;
  }
  v64 = *(double *)(a2 + 64);
  if (v64 <= 0.0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v93 = 32;
    v98 = 1;
    goto LABEL_88;
  }
  if (__ldaxr(v54))
  {
    __clrex();
LABEL_79:
    MEMORY[0x19AEA534C](v7 + 336);
    goto LABEL_80;
  }
  if (__stxr(1u, v54))
    goto LABEL_79;
LABEL_80:
  if (*(double *)(v7 + 192) != v64)
  {
    *(double *)(v7 + 192) = v64;
    if (*(_BYTE *)(v7 + 308))
      *(_BYTE *)(v7 + 308) = 0;
  }
  v93 = 0;
  v97 = 0;
  v98 = 0;
  v66 = __ldxr(v54);
  if (v66 != 1)
  {
    __clrex();
    goto LABEL_87;
  }
  if (__stlxr(0, v54))
LABEL_87:
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 336));
LABEL_88:
  LOBYTE(v104) = 0;
  LOBYTE(v106) = 0;
  if (v98)
  {
    LOBYTE(v104) = v93;
    v67 = v97;
    v97 = 0;
    v105 = v67;
    LOBYTE(v106) = 1;
  }
  std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v104, (uint64_t)v102);
  if ((_BYTE)v106)
  {
    v69 = v105;
    v105 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v68);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
  if (v98)
  {
    v70 = v97;
    v97 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v68);
      else
        *(_DWORD *)v70 -= 2;
    }
  }
  if (v103)
    goto LABEL_179;
  v71 = *(double *)(a2 + 56);
  if (v71 < 0.0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v94 = 32;
    v99 = 1;
    goto LABEL_113;
  }
  if (__ldaxr(v54))
  {
    __clrex();
LABEL_104:
    MEMORY[0x19AEA534C](v7 + 336);
    goto LABEL_105;
  }
  if (__stxr(1u, v54))
    goto LABEL_104;
LABEL_105:
  if (*(double *)(v7 + 184) != v71)
  {
    *(double *)(v7 + 184) = v71;
    if (*(_BYTE *)(v7 + 308))
      *(_BYTE *)(v7 + 308) = 0;
  }
  v94 = 0;
  v97 = 0;
  v99 = 0;
  v73 = __ldxr(v54);
  if (v73 != 1)
  {
    __clrex();
    goto LABEL_112;
  }
  if (__stlxr(0, v54))
LABEL_112:
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 336));
LABEL_113:
  LOBYTE(v104) = 0;
  LOBYTE(v106) = 0;
  if (v99)
  {
    LOBYTE(v104) = v94;
    v74 = v97;
    v97 = 0;
    v105 = v74;
    LOBYTE(v106) = 1;
  }
  std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v104, (uint64_t)v102);
  if ((_BYTE)v106)
  {
    v76 = v105;
    v105 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v75);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  if (v99)
  {
    v77 = v97;
    v97 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v75);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (v103)
    goto LABEL_179;
  v78 = *(double *)(a2 + 72);
  if (v78 < 0.0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v95 = 32;
    v100 = 1;
    goto LABEL_140;
  }
  if (__ldaxr(v54))
  {
    __clrex();
LABEL_131:
    MEMORY[0x19AEA534C](v7 + 336);
    goto LABEL_132;
  }
  if (__stxr(1u, v54))
    goto LABEL_131;
LABEL_132:
  if (*(double *)(v7 + 200) != v78)
  {
    *(double *)(v7 + 200) = v78;
    if (*(_BYTE *)(v7 + 308))
      *(_BYTE *)(v7 + 308) = 0;
  }
  v95 = 0;
  v97 = 0;
  v100 = 0;
  v80 = __ldxr(v54);
  if (v80 != 1)
  {
    __clrex();
    goto LABEL_139;
  }
  if (__stlxr(0, v54))
LABEL_139:
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 336));
LABEL_140:
  LOBYTE(v104) = 0;
  LOBYTE(v106) = 0;
  if (v100)
  {
    LOBYTE(v104) = v95;
    v81 = v97;
    v97 = 0;
    v105 = v81;
    LOBYTE(v106) = 1;
  }
  std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v104, (uint64_t)v102);
  if ((_BYTE)v106)
  {
    v83 = v105;
    v105 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v82);
      else
        *(_DWORD *)v83 -= 2;
    }
  }
  if (v100)
  {
    v84 = v97;
    v97 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy(v84, v82);
      else
        *(_DWORD *)v84 -= 2;
    }
  }
  if (v103)
    goto LABEL_179;
  v85 = *(double *)(a2 + 96);
  if (v85 < 0.0 || v85 > 1.0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v96 = 8;
    v101 = 1;
    goto LABEL_168;
  }
  if (__ldaxr(v54))
  {
    __clrex();
  }
  else if (!__stxr(1u, v54))
  {
    goto LABEL_160;
  }
  MEMORY[0x19AEA534C](v7 + 336);
LABEL_160:
  if (*(double *)(v7 + 224) != v85)
  {
    *(double *)(v7 + 224) = v85;
    if (*(_BYTE *)(v7 + 308))
      *(_BYTE *)(v7 + 308) = 0;
  }
  v96 = 0;
  v97 = 0;
  v101 = 0;
  v87 = __ldxr(v54);
  if (v87 == 1)
  {
    if (!__stlxr(0, v54))
      goto LABEL_168;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 336));
LABEL_168:
  LOBYTE(v104) = 0;
  LOBYTE(v106) = 0;
  if (v101)
  {
    LOBYTE(v104) = v96;
    v88 = v97;
    v97 = 0;
    v105 = v88;
    LOBYTE(v106) = 1;
  }
  std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v104, (uint64_t)v102);
  if ((_BYTE)v106)
  {
    v90 = v105;
    v105 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, v89);
      else
        *(_DWORD *)v90 -= 2;
    }
  }
  if (v101 && v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, v89);
    else
      *(_DWORD *)v97 -= 2;
  }
  if (v103)
    goto LABEL_179;
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
}

void WebCore::PannerNode::~PannerNode(WebCore::PannerNode *this, void *a2)
{
  WebCore::AudioParam *v3;
  WebCore::AudioParam *v4;
  WebCore::AudioParam *v5;
  WebCore::AudioParam *v6;
  WebCore::AudioParam *v7;
  WebCore::AudioParam *v8;
  uint64_t v9;
  WebCore::HRTFDatabaseLoader *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;

  *((_BYTE *)this + 32) = 0;
  v3 = (WebCore::AudioParam *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v3, a2);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*((_DWORD *)v3 + 16);
    }
  }
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, a2);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  v5 = (WebCore::AudioParam *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v5, a2);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*((_DWORD *)v5 + 16);
    }
  }
  v6 = (WebCore::AudioParam *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v6, a2);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*((_DWORD *)v6 + 16);
    }
  }
  v7 = (WebCore::AudioParam *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v7, a2);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*((_DWORD *)v7 + 16);
    }
  }
  v8 = (WebCore::AudioParam *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v8, a2);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*((_DWORD *)v8 + 16);
    }
  }
  v9 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (WebCore::HRTFDatabaseLoader *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::HRTFDatabaseLoader::~HRTFDatabaseLoader(v10, a2);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::PannerNode::~PannerNode(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::PannerNode::~PannerNode(WebCore::PannerNode *this, void *a2)
{
  WebCore::PannerNode::~PannerNode((WebCore::PannerNode *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::PannerNode::~PannerNode((WebCore::PannerNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::PannerNode::process(WebCore::PannerNode *this, uint64_t a2)
{
  uint64_t v2;
  vDSP_Length v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::BaseAudioContext *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::BaseAudioContext *v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::BaseAudioContext *v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WebCore::BaseAudioContext *v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::BaseAudioContext *v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::BaseAudioContext *v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  _BOOL4 v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  __n128 v92;
  unint64_t v93;
  unint64_t n;
  uint64_t v95;
  void **v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WebCore::AudioListener *v129;
  uint64_t v130;
  WebCore::AudioListener *v131;
  uint64_t v132;
  WebCore::AudioListener *v133;
  uint64_t v134;
  WebCore::AudioListener *v135;
  uint64_t v136;
  WebCore::AudioListener *v137;
  uint64_t v138;
  uint64_t v139;
  WebCore::AudioListener *v140;
  uint64_t v141;
  uint64_t v142;
  WebCore::AudioListener *v143;
  uint64_t v144;
  uint64_t v145;
  WebCore::AudioListener *v146;
  uint64_t v147;
  uint64_t v148;
  WebCore::AudioListener *v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  unsigned int v159;
  unsigned int v160;
  float v161;
  float v162;
  double v163;
  double v164;
  uint64_t v165;
  double v166;
  double v167;
  int v168;
  double v169;
  float v170;
  float v171;
  float v172;
  double v173;
  double v174;
  BOOL v175;
  double v176;
  double v177;
  unint64_t v178;
  unint64_t j;
  uint64_t v180;
  void **v181;
  _QWORD *v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 *v190;
  unint64_t v192;
  unint64_t k;
  uint64_t v194;
  void **v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t m;
  uint64_t v199;
  void **v200;
  _QWORD *v201;
  WTF::Thread *v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  WTF *v206;
  void *v207;
  int v208;
  WebCore::AudioListener *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WebCore::BaseAudioContext *v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  WebCore::BaseAudioContext *v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  WebCore::BaseAudioContext *v234;
  uint64_t v235;
  int v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  int v243;
  float v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  WebCore::BaseAudioContext *v251;
  uint64_t v252;
  float v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  WebCore::BaseAudioContext *v260;
  uint64_t v261;
  float v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WebCore::BaseAudioContext *v269;
  uint64_t v270;
  float v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  WebCore::BaseAudioContext *v278;
  uint64_t v279;
  float v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  WebCore::BaseAudioContext *v287;
  uint64_t v288;
  float v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  WebCore::BaseAudioContext *v296;
  uint64_t v297;
  uint64_t v298;
  float v299;
  uint64_t v300;
  float v301;
  float v302;
  float v303;
  double v304;
  double v305;
  double v306;
  double v307;
  int v308;
  double v309;
  double v310;
  double v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  long double v320;
  double v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  vDSP_Length v327;
  float v328;
  float v329;
  float v330;
  float v331[3];
  int v332;
  unint64_t v333;
  float v334[3];
  float v335[3];
  float __B[128];
  float v337[256];
  float *v338;
  int v339;
  float v340[128];
  float v341[128];
  float v342[128];
  float v343[128];
  float v344[128];
  float v345[128];
  uint64_t v346;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v327 = v3;
  v4 = v2;
  v346 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(v2 + 84))
    v5 = **(_QWORD **)(v2 + 72);
  else
    v5 = 0;
  v6 = 24;
  if (!*(_BYTE *)(v5 + 32))
    v6 = 16;
  v7 = *(_QWORD *)(v5 + v6);
  if (!*(_BYTE *)(v2 + 32))
    goto LABEL_22;
  if (*(_DWORD *)(v2 + 68))
  {
    v8 = **(_QWORD **)(v2 + 56);
    v9 = *(_DWORD *)(v8 + 28);
    if (!v9)
    {
LABEL_22:
      v15 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v15)
      {
        for (i = 0; i < v15; ++i)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * i);
          if (!*(_BYTE *)(v17 + 24))
          {
            *(_BYTE *)(v17 + 24) = 1;
            v18 = *(void ***)(v17 + 8);
            v19 = (_QWORD *)(v17 + 16);
            if (v18)
              v19 = v18 + 1;
            else
              v18 = (void **)v17;
            bzero(*v18, 4 * *v19);
            v15 = *(unsigned int *)(v7 + 28);
          }
        }
      }
      return;
    }
  }
  else
  {
    v9 = MEMORY[0x1C];
    if (!MEMORY[0x1C])
      goto LABEL_22;
    v8 = 0;
  }
  if (v9 == 1 && !*(_DWORD *)(*(_QWORD *)(v8 + 64) + 140))
  {
    v184 = **(_QWORD **)(v8 + 16);
    v185 = *(unsigned __int8 *)(v184 + 32);
    v186 = (uint64_t *)(v184 + 24);
    v10 = (uint64_t *)(v184 + 16);
    if (v185)
      v10 = v186;
  }
  else
  {
    v10 = (uint64_t *)(v8 + 80);
  }
  v11 = *v10;
  if (*v10)
  {
    v12 = (unsigned __int8 *)(v2 + 336);
    while (1)
    {
      v13 = *v12;
      if ((v13 & 1) != 0)
        break;
      v14 = __ldaxr(v12);
      if (v14 == v13)
      {
        if (!__stxr(v13 | 1, v12))
        {
          if (!*(_QWORD *)(v2 + 168))
          {
            v178 = *(unsigned int *)(v7 + 28);
            if ((_DWORD)v178)
            {
              for (j = 0; j < v178; ++j)
              {
                v180 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * j);
                if (!*(_BYTE *)(v180 + 24))
                {
                  *(_BYTE *)(v180 + 24) = 1;
                  v181 = *(void ***)(v180 + 8);
                  v182 = (_QWORD *)(v180 + 16);
                  if (v181)
                    v182 = v181 + 1;
                  else
                    v181 = (void **)v180;
                  bzero(*v181, 4 * *v182);
                  v178 = *(unsigned int *)(v7 + 28);
                }
              }
            }
            goto LABEL_230;
          }
          if (*(_DWORD *)(v2 + 160) != 1 || *(_QWORD *)(*(_QWORD *)(v2 + 152) + 8))
            goto LABEL_34;
          v187 = *(unsigned int *)(v2 + 48);
          if ((_DWORD)v187 == -1)
            goto LABEL_384;
          v338 = v337;
          v188 = ((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v187])(&v338, v2 + 40);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v188 + 72))(v188))
          {
            v192 = *(unsigned int *)(v7 + 28);
            if ((_DWORD)v192)
            {
              for (k = 0; k < v192; ++k)
              {
                v194 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * k);
                if (!*(_BYTE *)(v194 + 24))
                {
                  *(_BYTE *)(v194 + 24) = 1;
                  v195 = *(void ***)(v194 + 8);
                  v196 = (_QWORD *)(v194 + 16);
                  if (v195)
                    v196 = v195 + 1;
                  else
                    v195 = (void **)v194;
                  bzero(*v195, 4 * *v196);
                  v192 = *(unsigned int *)(v7 + 28);
                }
              }
            }
            goto LABEL_230;
          }
          v189 = *(_QWORD *)(v4 + 152);
          v190 = (unsigned __int8 *)(v189 + 16);
          if (__ldaxr((unsigned __int8 *)(v189 + 16)))
          {
            __clrex();
            goto LABEL_261;
          }
          if (__stxr(1u, v190))
LABEL_261:
            MEMORY[0x19AEA534C](v189 + 16);
          v202 = *(WTF::Thread **)(v189 + 24);
          if (v202)
          {
            WTF::Thread::waitForCompletion(v202);
            v203 = *(unsigned int **)(v189 + 24);
            *(_QWORD *)(v189 + 24) = 0;
            if (v203)
            {
              do
              {
                v204 = __ldaxr(v203);
                v205 = v204 - 1;
              }
              while (__stlxr(v205, v203));
              if (!v205)
              {
                atomic_store(1u, v203);
                WTF::Thread::~Thread((WTF::Thread *)v203);
                WTF::fastFree(v206, v207);
              }
            }
          }
          else
          {
            *(_QWORD *)(v189 + 24) = 0;
          }
          v208 = __ldxr(v190);
          if (v208 == 1)
          {
            if (!__stlxr(0, v190))
              goto LABEL_34;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)(v189 + 16));
LABEL_34:
          v20 = *(_QWORD *)(v4 + 232);
          v21 = *(_QWORD *)(v20 + 8);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 8);
            if (v22)
            {
              v23 = atomic_load((unint64_t *)(v22 + 240));
              v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v24)
                v24 = WTF::Thread::initializeCurrentTLS(0);
              if (v24 == v23)
              {
                v25 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8);
                v26 = v25 ? (WebCore::BaseAudioContext *)(v25 - 32) : 0;
                v27 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v20 + 112), v26, *(float *)(v20 + 88), *(float *)(v20 + 96), *(float *)(v20 + 100));
                if ((v27 & 0xFF00000000) != 0)
                  *(_DWORD *)(v20 + 88) = v27;
              }
            }
          }
          v28 = *(float *)(v20 + 88);
          v29 = *(_QWORD *)(v4 + 240);
          v30 = *(_QWORD *)(v29 + 8);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v32 = atomic_load((unint64_t *)(v31 + 240));
              v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v33)
                v33 = WTF::Thread::initializeCurrentTLS(0);
              if (v33 == v32)
              {
                v34 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8);
                v35 = v34 ? (WebCore::BaseAudioContext *)(v34 - 32) : 0;
                v36 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v29 + 112), v35, *(float *)(v29 + 88), *(float *)(v29 + 96), *(float *)(v29 + 100));
                if ((v36 & 0xFF00000000) != 0)
                  *(_DWORD *)(v29 + 88) = v36;
              }
            }
          }
          v37 = *(float *)(v29 + 88);
          v38 = *(_QWORD *)(v4 + 248);
          v39 = *(_QWORD *)(v38 + 8);
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 8);
            if (v40)
            {
              v41 = atomic_load((unint64_t *)(v40 + 240));
              v42 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v42)
                v42 = WTF::Thread::initializeCurrentTLS(0);
              if (v42 == v41)
              {
                v43 = *(_QWORD *)(*(_QWORD *)(v38 + 8) + 8);
                v44 = v43 ? (WebCore::BaseAudioContext *)(v43 - 32) : 0;
                v45 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v38 + 112), v44, *(float *)(v38 + 88), *(float *)(v38 + 96), *(float *)(v38 + 100));
                if ((v45 & 0xFF00000000) != 0)
                  *(_DWORD *)(v38 + 88) = v45;
              }
            }
          }
          v46 = *(float *)(v38 + 88);
          v47 = *(float *)(v4 + 312);
          v48 = *(float *)(v4 + 316);
          v49 = *(float *)(v4 + 320);
          *(float *)(v4 + 312) = v28;
          *(float *)(v4 + 316) = v37;
          *(float *)(v4 + 320) = v46;
          v51 = v28 == v47 && v37 == v48 && v46 == v49;
          v52 = *(_QWORD *)(v4 + 232);
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
          {
            v54 = *(_QWORD *)(v53 + 8);
            if (v54)
            {
              v55 = atomic_load((unint64_t *)(v54 + 240));
              v56 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v56)
                v56 = WTF::Thread::initializeCurrentTLS(0);
              if (v56 == v55)
              {
                v57 = *(_QWORD *)(*(_QWORD *)(v52 + 8) + 8);
                v58 = v57 ? (WebCore::BaseAudioContext *)(v57 - 32) : 0;
                v59 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v52 + 112), v58, *(float *)(v52 + 88), *(float *)(v52 + 96), *(float *)(v52 + 100));
                if ((v59 & 0xFF00000000) != 0)
                  *(_DWORD *)(v52 + 88) = v59;
              }
            }
          }
          v60 = *(float *)(v52 + 88);
          v61 = *(_QWORD *)(v4 + 240);
          v62 = *(_QWORD *)(v61 + 8);
          if (v62)
          {
            v63 = *(_QWORD *)(v62 + 8);
            if (v63)
            {
              v64 = atomic_load((unint64_t *)(v63 + 240));
              v65 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v65)
                v65 = WTF::Thread::initializeCurrentTLS(0);
              if (v65 == v64)
              {
                v66 = *(_QWORD *)(*(_QWORD *)(v61 + 8) + 8);
                v67 = v66 ? (WebCore::BaseAudioContext *)(v66 - 32) : 0;
                v68 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v61 + 112), v67, *(float *)(v61 + 88), *(float *)(v61 + 96), *(float *)(v61 + 100));
                if ((v68 & 0xFF00000000) != 0)
                  *(_DWORD *)(v61 + 88) = v68;
              }
            }
          }
          v69 = *(float *)(v61 + 88);
          v70 = *(_QWORD *)(v4 + 248);
          v71 = *(_QWORD *)(v70 + 8);
          if (v71)
          {
            v72 = *(_QWORD *)(v71 + 8);
            if (v72)
            {
              v73 = atomic_load((unint64_t *)(v72 + 240));
              v74 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v74)
                v74 = WTF::Thread::initializeCurrentTLS(0);
              if (v74 == v73)
              {
                v75 = *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8);
                v76 = v75 ? (WebCore::BaseAudioContext *)(v75 - 32) : 0;
                v77 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v70 + 112), v76, *(float *)(v70 + 88), *(float *)(v70 + 96), *(float *)(v70 + 100));
                if ((v77 & 0xFF00000000) != 0)
                  *(_DWORD *)(v70 + 88) = v77;
              }
            }
          }
          v78 = *(float *)(v70 + 88);
          v79 = *(float *)(v4 + 324);
          v80 = *(float *)(v4 + 328);
          v81 = *(float *)(v4 + 332);
          *(float *)(v4 + 324) = v60;
          *(float *)(v4 + 328) = v69;
          *(float *)(v4 + 332) = v78;
          v82 = 1;
          if (v60 == v79 && v69 == v80)
            v82 = v78 != v81;
          v83 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v83 == -1)
            goto LABEL_384;
          v338 = v337;
          v84 = *(_BYTE **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v83])(&v338, v4 + 40)+ 264);
          if ((!v51 || v84[268] || v84[269] || v84[270]) && *(_BYTE *)(v4 + 296))
            *(_BYTE *)(v4 + 296) = 0;
          if ((!v51 || v82 || v84[268]) && *(_BYTE *)(v4 + 308))
            *(_BYTE *)(v4 + 308) = 0;
          if (!WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v4 + 232))
            && !WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v4 + 240))
            && !WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v4 + 248))
            && !WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v4 + 256))
            && !WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v4 + 264))
            && !WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v4 + 272)))
          {
            v85 = *(unsigned int *)(v4 + 48);
            if ((_DWORD)v85 != -1)
            {
              v338 = v337;
              v86 = ((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v85])(&v338, v4 + 40);
              if (WebCore::AudioListener::hasSampleAccurateValues(*(WebCore::AudioParam ***)(v86 + 264)))
                goto LABEL_122;
LABEL_138:
              v89 = *(unsigned int *)(v4 + 48);
              if ((_DWORD)v89 != -1)
              {
                v338 = v337;
                v90 = ((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v89])(&v338, v4 + 40);
                if (*(_BYTE *)(v4 + 296))
                {
                  v91.n128_u64[0] = *(_QWORD *)(v4 + 280);
                  v92.n128_u64[0] = *(_QWORD *)(v4 + 288);
                }
                else
                {
                  v209 = *(WebCore::AudioListener **)(v90 + 264);
                  v210 = *(_QWORD *)(v4 + 232);
                  v211 = *(_QWORD *)(v210 + 8);
                  if (v211)
                  {
                    v212 = *(_QWORD *)(v211 + 8);
                    if (v212)
                    {
                      v213 = atomic_load((unint64_t *)(v212 + 240));
                      v214 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                      if (!v214)
                        v214 = WTF::Thread::initializeCurrentTLS(0);
                      if (v214 == v213)
                      {
                        v215 = *(_QWORD *)(*(_QWORD *)(v210 + 8) + 8);
                        v216 = v215 ? (WebCore::BaseAudioContext *)(v215 - 32) : 0;
                        v217 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v210 + 112), v216, *(float *)(v210 + 88), *(float *)(v210 + 96), *(float *)(v210 + 100));
                        if ((v217 & 0xFF00000000) != 0)
                          *(_DWORD *)(v210 + 88) = v217;
                      }
                    }
                  }
                  v218 = *(_DWORD *)(v210 + 88);
                  v219 = *(_QWORD *)(v4 + 240);
                  v220 = *(_QWORD *)(v219 + 8);
                  if (v220)
                  {
                    v221 = *(_QWORD *)(v220 + 8);
                    if (v221)
                    {
                      v222 = atomic_load((unint64_t *)(v221 + 240));
                      v223 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                      if (!v223)
                        v223 = WTF::Thread::initializeCurrentTLS(0);
                      if (v223 == v222)
                      {
                        v224 = *(_QWORD *)(*(_QWORD *)(v219 + 8) + 8);
                        v225 = v224 ? (WebCore::BaseAudioContext *)(v224 - 32) : 0;
                        v226 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v219 + 112), v225, *(float *)(v219 + 88), *(float *)(v219 + 96), *(float *)(v219 + 100));
                        if ((v226 & 0xFF00000000) != 0)
                          *(_DWORD *)(v219 + 88) = v226;
                      }
                    }
                  }
                  v227 = *(_DWORD *)(v219 + 88);
                  v228 = *(_QWORD *)(v4 + 248);
                  v229 = *(_QWORD *)(v228 + 8);
                  if (v229)
                  {
                    v230 = *(_QWORD *)(v229 + 8);
                    if (v230)
                    {
                      v231 = atomic_load((unint64_t *)(v230 + 240));
                      v232 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                      if (!v232)
                        v232 = WTF::Thread::initializeCurrentTLS(0);
                      if (v232 == v231)
                      {
                        v233 = *(_QWORD *)(*(_QWORD *)(v228 + 8) + 8);
                        v234 = v233 ? (WebCore::BaseAudioContext *)(v233 - 32) : 0;
                        v235 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v228 + 112), v234, *(float *)(v228 + 88), *(float *)(v228 + 96), *(float *)(v228 + 100));
                        if ((v235 & 0xFF00000000) != 0)
                          *(_DWORD *)(v228 + 88) = v235;
                      }
                    }
                  }
                  v236 = *(_DWORD *)(v228 + 88);
                  v338 = (float *)__PAIR64__(v227, v218);
                  v339 = v236;
                  v337[0] = WebCore::AudioListener::position(v209);
                  v337[1] = v237;
                  v337[2] = v238;
                  v345[0] = WebCore::AudioListener::orientation(v209);
                  v345[1] = v239;
                  v345[2] = v240;
                  v344[0] = WebCore::AudioListener::upVector(v209);
                  v344[1] = v241;
                  v344[2] = v242;
                  v91.n128_f64[0] = WebCore::PannerNode::calculateAzimuthElevation((float *)&v338, v337, v345, v344);
                  v243 = *(unsigned __int8 *)(v4 + 296);
                  *(_QWORD *)(v4 + 280) = v91.n128_u64[0];
                  *(_QWORD *)(v4 + 288) = v92.n128_u64[0];
                  if (!v243)
                    *(_BYTE *)(v4 + 296) = 1;
                }
                (*(void (**)(_QWORD, uint64_t, uint64_t, vDSP_Length, __n128, __n128))(**(_QWORD **)(v4 + 168)
                                                                                              + 16))(*(_QWORD *)(v4 + 168), v11, v7, v327, v91, v92);
                if (*(_BYTE *)(v4 + 308))
                {
                  v244 = *(float *)(v4 + 304);
                  goto LABEL_383;
                }
                v245 = *(_QWORD *)(v4 + 232);
                v246 = *(_QWORD *)(v245 + 8);
                if (v246)
                {
                  v247 = *(_QWORD *)(v246 + 8);
                  if (v247)
                  {
                    v248 = atomic_load((unint64_t *)(v247 + 240));
                    v249 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v249)
                      v249 = WTF::Thread::initializeCurrentTLS(0);
                    if (v249 == v248)
                    {
                      v250 = *(_QWORD *)(*(_QWORD *)(v245 + 8) + 8);
                      v251 = v250 ? (WebCore::BaseAudioContext *)(v250 - 32) : 0;
                      v252 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v245 + 112), v251, *(float *)(v245 + 88), *(float *)(v245 + 96), *(float *)(v245 + 100));
                      if ((v252 & 0xFF00000000) != 0)
                        *(_DWORD *)(v245 + 88) = v252;
                    }
                  }
                }
                v253 = *(float *)(v245 + 88);
                v254 = *(_QWORD *)(v4 + 240);
                v255 = *(_QWORD *)(v254 + 8);
                if (v255)
                {
                  v256 = *(_QWORD *)(v255 + 8);
                  if (v256)
                  {
                    v257 = atomic_load((unint64_t *)(v256 + 240));
                    v258 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v258)
                      v258 = WTF::Thread::initializeCurrentTLS(0);
                    if (v258 == v257)
                    {
                      v259 = *(_QWORD *)(*(_QWORD *)(v254 + 8) + 8);
                      v260 = v259 ? (WebCore::BaseAudioContext *)(v259 - 32) : 0;
                      v261 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v254 + 112), v260, *(float *)(v254 + 88), *(float *)(v254 + 96), *(float *)(v254 + 100));
                      if ((v261 & 0xFF00000000) != 0)
                        *(_DWORD *)(v254 + 88) = v261;
                    }
                  }
                }
                v262 = *(float *)(v254 + 88);
                v263 = *(_QWORD *)(v4 + 248);
                v264 = *(_QWORD *)(v263 + 8);
                if (v264)
                {
                  v265 = *(_QWORD *)(v264 + 8);
                  if (v265)
                  {
                    v266 = atomic_load((unint64_t *)(v265 + 240));
                    v267 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v267)
                      v267 = WTF::Thread::initializeCurrentTLS(0);
                    if (v267 == v266)
                    {
                      v268 = *(_QWORD *)(*(_QWORD *)(v263 + 8) + 8);
                      v269 = v268 ? (WebCore::BaseAudioContext *)(v268 - 32) : 0;
                      v270 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v263 + 112), v269, *(float *)(v263 + 88), *(float *)(v263 + 96), *(float *)(v263 + 100));
                      if ((v270 & 0xFF00000000) != 0)
                        *(_DWORD *)(v263 + 88) = v270;
                    }
                  }
                }
                v271 = *(float *)(v263 + 88);
                v272 = *(_QWORD *)(v4 + 256);
                v273 = *(_QWORD *)(v272 + 8);
                if (v273)
                {
                  v274 = *(_QWORD *)(v273 + 8);
                  if (v274)
                  {
                    v275 = atomic_load((unint64_t *)(v274 + 240));
                    v276 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v276)
                      v276 = WTF::Thread::initializeCurrentTLS(0);
                    if (v276 == v275)
                    {
                      v277 = *(_QWORD *)(*(_QWORD *)(v272 + 8) + 8);
                      v278 = v277 ? (WebCore::BaseAudioContext *)(v277 - 32) : 0;
                      v279 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v272 + 112), v278, *(float *)(v272 + 88), *(float *)(v272 + 96), *(float *)(v272 + 100));
                      if ((v279 & 0xFF00000000) != 0)
                        *(_DWORD *)(v272 + 88) = v279;
                    }
                  }
                }
                v280 = *(float *)(v272 + 88);
                v281 = *(_QWORD *)(v4 + 264);
                v282 = *(_QWORD *)(v281 + 8);
                if (v282)
                {
                  v283 = *(_QWORD *)(v282 + 8);
                  if (v283)
                  {
                    v284 = atomic_load((unint64_t *)(v283 + 240));
                    v285 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v285)
                      v285 = WTF::Thread::initializeCurrentTLS(0);
                    if (v285 == v284)
                    {
                      v286 = *(_QWORD *)(*(_QWORD *)(v281 + 8) + 8);
                      v287 = v286 ? (WebCore::BaseAudioContext *)(v286 - 32) : 0;
                      v288 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v281 + 112), v287, *(float *)(v281 + 88), *(float *)(v281 + 96), *(float *)(v281 + 100));
                      if ((v288 & 0xFF00000000) != 0)
                        *(_DWORD *)(v281 + 88) = v288;
                    }
                  }
                }
                v289 = *(float *)(v281 + 88);
                v290 = *(_QWORD *)(v4 + 272);
                v291 = *(_QWORD *)(v290 + 8);
                if (v291)
                {
                  v292 = *(_QWORD *)(v291 + 8);
                  if (v292)
                  {
                    v293 = atomic_load((unint64_t *)(v292 + 240));
                    v294 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v294)
                      v294 = WTF::Thread::initializeCurrentTLS(0);
                    if (v294 == v293)
                    {
                      v295 = *(_QWORD *)(*(_QWORD *)(v290 + 8) + 8);
                      v296 = v295 ? (WebCore::BaseAudioContext *)(v295 - 32) : 0;
                      v297 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v290 + 112), v296, *(float *)(v290 + 88), *(float *)(v290 + 96), *(float *)(v290 + 100));
                      if ((v297 & 0xFF00000000) != 0)
                        *(_DWORD *)(v290 + 88) = v297;
                    }
                  }
                }
                v298 = *(unsigned int *)(v4 + 48);
                if ((_DWORD)v298 != -1)
                {
                  v299 = *(float *)(v290 + 88);
                  v338 = v337;
                  v300 = ((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v298])(&v338, v4 + 40);
                  v301 = WebCore::AudioListener::position(*(WebCore::AudioListener **)(v300 + 264));
                  v306 = sqrtf((float)((float)((float)(v262 - v302) * (float)(v262 - v302))+ (float)((float)(v253 - v301) * (float)(v253 - v301)))+ (float)((float)(v271 - v303) * (float)(v271 - v303)));
                  v307 = *(double *)(v4 + 192);
                  if (v307 < v306)
                    v306 = *(double *)(v4 + 192);
                  if (*(_BYTE *)(v4 + 180) && v306 < *(double *)(v4 + 184))
                    v306 = *(double *)(v4 + 184);
                  v308 = *(_DWORD *)(v4 + 176);
                  if (v308 == 2)
                  {
                    v312 = v301;
                    v313 = v302;
                    v330 = v299;
                    v314 = v289;
                    v315 = v271;
                    v316 = v262;
                    v317 = v280;
                    v318 = v253;
                    v319 = v303;
                    v320 = pow(v306 / *(double *)(v4 + 184), -*(double *)(v4 + 200));
                    v303 = v319;
                    v253 = v318;
                    v280 = v317;
                    v262 = v316;
                    v271 = v315;
                    v289 = v314;
                    v299 = v330;
                    v302 = v313;
                    v309 = v320;
                    v301 = v312;
                  }
                  else if (v308 == 1)
                  {
                    v309 = *(double *)(v4 + 184)
                         / (*(double *)(v4 + 184) + *(double *)(v4 + 200) * (v306 - *(double *)(v4 + 184)));
                  }
                  else
                  {
                    v309 = 0.0;
                    if (!v308)
                    {
                      v310 = *(double *)(v4 + 200);
                      v311 = 0.0;
                      if (v310 >= 0.0)
                      {
                        v311 = 1.0;
                        if (v310 <= 1.0)
                          v311 = *(double *)(v4 + 200);
                      }
                      v304 = *(double *)(v4 + 184);
                      v309 = 1.0 - v311 * (v306 - v304) / (v307 - v304);
                    }
                  }
                  WebCore::ConeEffect::gain((double *)(v4 + 208), v253, v262, v271, v280, v289, v299, v304, v305, v301, v302, v303);
                  v244 = v309 * v321;
                  *(float *)(v4 + 304) = v244;
                  *(_BYTE *)(v4 + 308) = 1;
LABEL_383:
                  WebCore::AudioBus::copyWithGainFrom((WebCore::AudioBus *)v7, (const WebCore::AudioBus *)v7, v244);
LABEL_230:
                  v183 = __ldxr(v12);
                  if (v183 == 1)
                  {
                    if (!__stlxr(0, v12))
                      return;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v12);
                  return;
                }
              }
            }
            goto LABEL_384;
          }
LABEL_122:
          if (*(_BYTE *)(*(_QWORD *)(v4 + 232) + 104)
            && *(_BYTE *)(*(_QWORD *)(v4 + 240) + 104)
            && *(_BYTE *)(*(_QWORD *)(v4 + 248) + 104)
            && *(_BYTE *)(*(_QWORD *)(v4 + 256) + 104)
            && *(_BYTE *)(*(_QWORD *)(v4 + 264) + 104)
            && *(_BYTE *)(*(_QWORD *)(v4 + 272) + 104))
          {
            v87 = *(unsigned int *)(v4 + 48);
            if ((_DWORD)v87 == -1)
              goto LABEL_384;
            v338 = v337;
            v88 = *(_QWORD **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v87])(&v338, v4 + 40)+ 264);
            if (*(_BYTE *)(v88[1] + 104)
              && *(_BYTE *)(v88[2] + 104)
              && *(_BYTE *)(v88[3] + 104)
              && *(_BYTE *)(v88[4] + 104)
              && *(_BYTE *)(v88[5] + 104)
              && *(_BYTE *)(v88[6] + 104)
              && *(_BYTE *)(v88[7] + 104)
              && *(_BYTE *)(v88[8] + 104)
              && *(_BYTE *)(v88[9] + 104))
            {
              goto LABEL_138;
            }
          }
          v98 = *(_QWORD *)(v4 + 232);
          v99 = *(_QWORD *)(v98 + 8);
          if (v99)
          {
            v100 = *(_QWORD *)(v99 + 8);
            if (v100)
            {
              v101 = atomic_load((unint64_t *)(v100 + 240));
              v102 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v102)
                v102 = WTF::Thread::initializeCurrentTLS(0);
              if ((_DWORD)v327 && v102 == v101)
                WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v98, v345, v327, *(_BYTE *)(v98 + 104) == 0);
            }
          }
          v103 = *(_QWORD *)(v4 + 240);
          v104 = *(_QWORD *)(v103 + 8);
          if (v104)
          {
            v105 = *(_QWORD *)(v104 + 8);
            if (v105)
            {
              v106 = atomic_load((unint64_t *)(v105 + 240));
              v107 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v107)
                v107 = WTF::Thread::initializeCurrentTLS(0);
              if ((_DWORD)v327 && v107 == v106)
                WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v103, v344, v327, *(_BYTE *)(v103 + 104) == 0);
            }
          }
          v108 = *(_QWORD *)(v4 + 248);
          v109 = *(_QWORD *)(v108 + 8);
          if (v109)
          {
            v110 = *(_QWORD *)(v109 + 8);
            if (v110)
            {
              v111 = atomic_load((unint64_t *)(v110 + 240));
              v112 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v112)
                v112 = WTF::Thread::initializeCurrentTLS(0);
              if ((_DWORD)v327 && v112 == v111)
                WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v108, v343, v327, *(_BYTE *)(v108 + 104) == 0);
            }
          }
          v113 = *(_QWORD *)(v4 + 256);
          v114 = *(_QWORD *)(v113 + 8);
          if (v114)
          {
            v115 = *(_QWORD *)(v114 + 8);
            if (v115)
            {
              v116 = atomic_load((unint64_t *)(v115 + 240));
              v117 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v117)
                v117 = WTF::Thread::initializeCurrentTLS(0);
              if ((_DWORD)v327 && v117 == v116)
                WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v113, v342, v327, *(_BYTE *)(v113 + 104) == 0);
            }
          }
          v118 = *(_QWORD *)(v4 + 264);
          v119 = *(_QWORD *)(v118 + 8);
          if (v119)
          {
            v120 = *(_QWORD *)(v119 + 8);
            if (v120)
            {
              v121 = atomic_load((unint64_t *)(v120 + 240));
              v122 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v122)
                v122 = WTF::Thread::initializeCurrentTLS(0);
              if ((_DWORD)v327 && v122 == v121)
                WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v118, v341, v327, *(_BYTE *)(v118 + 104) == 0);
            }
          }
          v123 = *(_QWORD *)(v4 + 272);
          v124 = *(_QWORD *)(v123 + 8);
          if (v124)
          {
            v125 = *(_QWORD *)(v124 + 8);
            if (v125)
            {
              v126 = atomic_load((unint64_t *)(v125 + 240));
              v127 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v127)
                v127 = WTF::Thread::initializeCurrentTLS(0);
              if ((_DWORD)v327 && v127 == v126)
                WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v123, v340, v327, *(_BYTE *)(v123 + 104) == 0);
            }
          }
          v128 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v128 == -1)
            goto LABEL_384;
          v338 = v337;
          v129 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v128])(&v338, v4 + 40)+ 264);
          WebCore::AudioListener::updateValuesIfNeeded(v129, 0x80u);
          v130 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v130 == -1)
            goto LABEL_384;
          v326 = *((_QWORD *)v129 + 11);
          v338 = v337;
          v131 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v130])(&v338, v4 + 40)+ 264);
          WebCore::AudioListener::updateValuesIfNeeded(v131, 0x80u);
          v132 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v132 == -1)
            goto LABEL_384;
          v325 = *((_QWORD *)v131 + 13);
          v338 = v337;
          v133 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v132])(&v338, v4 + 40)+ 264);
          WebCore::AudioListener::updateValuesIfNeeded(v133, 0x80u);
          v134 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v134 == -1)
            goto LABEL_384;
          v324 = *((_QWORD *)v133 + 15);
          v338 = v337;
          v135 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v134])(&v338, v4 + 40)+ 264);
          WebCore::AudioListener::updateValuesIfNeeded(v135, 0x80u);
          v136 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v136 == -1)
            goto LABEL_384;
          v323 = *((_QWORD *)v135 + 17);
          v338 = v337;
          v137 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v136])(&v338, v4 + 40)+ 264);
          WebCore::AudioListener::updateValuesIfNeeded(v137, 0x80u);
          v138 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v138 == -1)
            goto LABEL_384;
          v139 = *((_QWORD *)v137 + 19);
          v338 = v337;
          v140 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v138])(&v338, v4 + 40)+ 264);
          WebCore::AudioListener::updateValuesIfNeeded(v140, 0x80u);
          v141 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v141 == -1)
            goto LABEL_384;
          v322 = v11;
          v142 = *((_QWORD *)v140 + 21);
          v338 = v337;
          v143 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v141])(&v338, v4 + 40)+ 264);
          WebCore::AudioListener::updateValuesIfNeeded(v143, 0x80u);
          v144 = *(unsigned int *)(v4 + 48);
          if ((_DWORD)v144 == -1
            || (v145 = *((_QWORD *)v143 + 23),
                v338 = v337,
                v146 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v144])(&v338, v4 + 40)+ 264), WebCore::AudioListener::updateValuesIfNeeded(v146, 0x80u), v147 = *(unsigned int *)(v4 + 48), (_DWORD)v147 == -1))
          {
LABEL_384:
            std::__throw_bad_variant_access[abi:sn180100]();
          }
          v148 = *((_QWORD *)v146 + 25);
          v338 = v337;
          v149 = *(WebCore::AudioListener **)(((uint64_t (*)(float **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v147])(&v338, v4 + 40)+ 264);
          WebCore::AudioListener::updateValuesIfNeeded(v149, 0x80u);
          if (!v327)
          {
LABEL_221:
            (*(void (**)(_QWORD, float **, float *, uint64_t, uint64_t, vDSP_Length))(**(_QWORD **)(v4 + 168)
                                                                                             + 24))(*(_QWORD *)(v4 + 168), &v338, v337, v322, v7, v327);
            WebCore::AudioBus::copyWithSampleAccurateGainValuesFrom(v7, v7, __B, v327);
            goto LABEL_230;
          }
          v150 = 0;
          v151 = *((_QWORD *)v149 + 27);
          while (2)
          {
            v153 = v344[v150];
            v154 = v343[v150];
            v335[0] = v345[v150];
            v152 = v335[0];
            v335[1] = v153;
            v155 = v341[v150];
            v328 = v340[v150];
            v329 = v342[v150];
            v156 = *(float *)(v326 + 4 * v150);
            v157 = *(float *)(v325 + 4 * v150);
            v335[2] = v154;
            v158 = *(float *)(v324 + 4 * v150);
            v334[0] = v156;
            v334[1] = v157;
            v334[2] = v158;
            v159 = *(_DWORD *)(v139 + 4 * v150);
            v160 = *(_DWORD *)(v142 + 4 * v150);
            v332 = *(_DWORD *)(v323 + 4 * v150);
            v333 = __PAIR64__(v160, v159);
            v161 = *(float *)(v148 + 4 * v150);
            v162 = *(float *)(v151 + 4 * v150);
            v331[0] = *(float *)(v145 + 4 * v150);
            v331[1] = v161;
            v331[2] = v162;
            *(double *)&(&v338)[v150] = WebCore::PannerNode::calculateAzimuthElevation(v335, v334, (float *)&v332, v331);
            *(_QWORD *)&v337[2 * v150] = v165;
            v166 = sqrtf((float)((float)((float)(v153 - v157) * (float)(v153 - v157))+ (float)((float)(v152 - v156) * (float)(v152 - v156)))+ (float)((float)(v154 - v158) * (float)(v154 - v158)));
            v167 = *(double *)(v4 + 192);
            if (v167 < v166)
              v166 = *(double *)(v4 + 192);
            if (*(_BYTE *)(v4 + 180) && v166 < *(double *)(v4 + 184))
              v166 = *(double *)(v4 + 184);
            v168 = *(_DWORD *)(v4 + 176);
            if (v168 == 2)
            {
              v169 = pow(v166 / *(double *)(v4 + 184), -*(double *)(v4 + 200));
            }
            else
            {
              if (v168 != 1)
              {
                v169 = 0.0;
                v171 = v328;
                v170 = v329;
                v172 = v155;
                if (!v168)
                {
                  v173 = *(double *)(v4 + 200);
                  v163 = 1.0;
                  if (v173 <= 1.0)
                    v174 = *(double *)(v4 + 200);
                  else
                    v174 = 1.0;
                  v175 = v173 < 0.0;
                  v176 = 0.0;
                  if (!v175)
                    v176 = v174;
                  v164 = *(double *)(v4 + 184);
                  v169 = 1.0 - v176 * (v166 - v164) / (v167 - v164);
                }
LABEL_220:
                WebCore::ConeEffect::gain((double *)(v4 + 208), v152, v153, v154, v170, v172, v171, v163, v164, v156, v157, v158);
                *(float *)&v177 = v169 * v177;
                __B[v150++] = *(float *)&v177;
                if (v327 == v150)
                  goto LABEL_221;
                continue;
              }
              v169 = *(double *)(v4 + 184)
                   / (*(double *)(v4 + 184) + *(double *)(v4 + 200) * (v166 - *(double *)(v4 + 184)));
            }
            break;
          }
          v171 = v328;
          v170 = v329;
          v172 = v155;
          goto LABEL_220;
        }
      }
      else
      {
        __clrex();
      }
    }
    v197 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v197)
    {
      for (m = 0; m < v197; ++m)
      {
        v199 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * m);
        if (!*(_BYTE *)(v199 + 24))
        {
          *(_BYTE *)(v199 + 24) = 1;
          v200 = *(void ***)(v199 + 8);
          v201 = (_QWORD *)(v199 + 16);
          if (v200)
            v201 = v200 + 1;
          else
            v200 = (void **)v199;
          bzero(*v200, 4 * *v201);
          v197 = *(unsigned int *)(v7 + 28);
        }
      }
    }
  }
  else
  {
    v93 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v93)
    {
      for (n = 0; n < v93; ++n)
      {
        v95 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * n);
        if (!*(_BYTE *)(v95 + 24))
        {
          *(_BYTE *)(v95 + 24) = 1;
          v96 = *(void ***)(v95 + 8);
          v97 = (_QWORD *)(v95 + 16);
          if (v96)
            v97 = v96 + 1;
          else
            v96 = (void **)v95;
          bzero(*v96, 4 * *v97);
          v93 = *(unsigned int *)(v7 + 28);
        }
      }
    }
  }
}

void WebCore::PannerNode::processOnlyAudioParams(WebCore::PannerNode *this, unsigned int a2)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  char *v41;
  float v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)this + 336;
  while (1)
  {
    v5 = *v4;
    if ((v5 & 1) != 0)
      break;
    v6 = __ldaxr(v4);
    if (v6 == v5)
    {
      if (!__stxr(v5 | 1, v4))
      {
        v7 = *((_QWORD *)this + 29);
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            v10 = atomic_load((unint64_t *)(v9 + 240));
            v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v11)
              v11 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v11 == v10)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v7, v42, a2, *(_BYTE *)(v7 + 104) == 0);
          }
        }
        v12 = *((_QWORD *)this + 30);
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            v15 = atomic_load((unint64_t *)(v14 + 240));
            v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v16)
              v16 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v16 == v15)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v12, v42, a2, *(_BYTE *)(v12 + 104) == 0);
          }
        }
        v17 = *((_QWORD *)this + 31);
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            v20 = atomic_load((unint64_t *)(v19 + 240));
            v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v21)
              v21 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v21 == v20)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v17, v42, a2, *(_BYTE *)(v17 + 104) == 0);
          }
        }
        v22 = *((_QWORD *)this + 32);
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 8);
          if (v24)
          {
            v25 = atomic_load((unint64_t *)(v24 + 240));
            v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v26)
              v26 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v26 == v25)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v22, v42, a2, *(_BYTE *)(v22 + 104) == 0);
          }
        }
        v27 = *((_QWORD *)this + 33);
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            v30 = atomic_load((unint64_t *)(v29 + 240));
            v31 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v31)
              v31 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v31 == v30)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v27, v42, a2, *(_BYTE *)(v27 + 104) == 0);
          }
        }
        v32 = *((_QWORD *)this + 34);
        v33 = *(_QWORD *)(v32 + 8);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (v34)
          {
            v35 = atomic_load((unint64_t *)(v34 + 240));
            v36 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v36)
              v36 = WTF::Thread::initializeCurrentTLS(0);
            if (a2 && v36 == v35)
              WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v32, v42, a2, *(_BYTE *)(v32 + 104) == 0);
          }
        }
        v37 = *((unsigned int *)this + 12);
        if ((_DWORD)v37 == -1)
          std::__throw_bad_variant_access[abi:sn180100]();
        v41 = &v40;
        v38 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v37])(&v41, (char *)this + 40);
        WebCore::AudioListener::updateValuesIfNeeded(*(WebCore::AudioListener **)(v38 + 264), a2);
        v39 = __ldxr(v4);
        if (v39 == 1)
        {
          if (!__stlxr(0, v4))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v4);
        return;
      }
    }
    else
    {
      __clrex();
    }
  }
}

double WebCore::PannerNode::calculateAzimuthElevation(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;

  v4 = *a1 - *a2;
  v5 = a1[1] - a2[1];
  v6 = a1[2] - a2[2];
  if (v4 == 0.0 && v5 == 0.0 && v6 == 0.0)
    return 0.0;
  v7 = sqrtf((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
  if (v7 != 0.0)
  {
    v4 = v4 / v7;
    v5 = v5 / v7;
    v6 = v6 / v7;
  }
  v9 = a4[1];
  v8 = a4[2];
  v11 = a3[1];
  v10 = a3[2];
  v12 = *a3;
  v13 = (float)(v11 * v8) - (float)(v10 * v9);
  v14 = (float)(v10 * *a4) - (float)(*a3 * v8);
  v15 = (float)(*a3 * v9) - (float)(v11 * *a4);
  v16 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v15 * v15));
  v17 = v16 == 0.0;
  v18 = v13 / v16;
  v19 = v14 / v16;
  v20 = v15 / v16;
  if (v17)
  {
    v21 = v14;
  }
  else
  {
    v15 = v20;
    v21 = v19;
  }
  if (v17)
    v18 = v13;
  v22 = sqrtf((float)((float)(v11 * v11) + (float)(v12 * v12)) + (float)(v10 * v10));
  v23 = v22 == 0.0;
  v24 = v12 / v22;
  v25 = v11 / v22;
  v26 = v10 / v22;
  if (v23)
    v27 = a3[2];
  else
    v27 = v26;
  if (v23)
    v28 = a3[1];
  else
    v28 = v25;
  if (v23)
    v29 = *a3;
  else
    v29 = v24;
  v30 = (float)(v21 * v27) - (float)(v15 * v28);
  v31 = (float)(v15 * v29) - (float)(v18 * v27);
  v32 = (float)(v18 * v28) - (float)(v21 * v29);
  v33 = (float)((float)(v5 * v31) + (float)(v4 * v30)) + (float)(v6 * v32);
  v34 = v4 - (float)(v30 * v33);
  v35 = v5 - (float)(v31 * v33);
  v36 = v6 - (float)(v32 * v33);
  v37 = sqrtf((float)((float)(v35 * v35) + (float)(v34 * v34)) + (float)(v36 * v36));
  if (v37 != 0.0)
  {
    v34 = v34 / v37;
    v35 = v35 / v37;
    v36 = v36 / v37;
  }
  v38 = (float)((float)(v21 * v35) + (float)(v34 * v18)) + (float)(v36 * v15);
  v39 = 1.0;
  if (v38 <= 1.0)
    v39 = (float)((float)(v21 * v35) + (float)(v34 * v18)) + (float)(v36 * v15);
  if (v38 >= -1.0)
    v40 = v39;
  else
    v40 = -1.0;
  v41 = (float)(acosf(v40) * 57.296);
  if (fabs(v41) == INFINITY)
    v41 = 0.0;
  if ((float)((float)((float)(v28 * v35) + (float)(v34 * v29)) + (float)(v36 * v27)) < 0.0)
    v41 = 360.0 - v41;
  v42 = v41 > 270.0 || v41 < 0.0;
  v43 = 450.0;
  if (!v42)
    v43 = 90.0;
  v44 = v43 - v41;
  acosf(v33);
  return v44;
}

uint64_t WebCore::PannerNode::setPanningModelForBindings(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::HRTFDatabaseLoader *v9;
  float v10;
  WebCore::HRTFPanner *v11;
  uint64_t v12;
  int v13;
  WebCore::PannerNode *v14;
  float v15;
  float v16;
  float v17;
  char v18;
  char *v19;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 336);
  if (__ldaxr((unsigned __int8 *)(result + 336)))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result + 336);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(v3 + 168) || *(_DWORD *)(v3 + 160) != a2)
  {
    v6 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v6 == -1)
    {
      v14 = (WebCore::PannerNode *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::PannerNode::setPosition(v14, v15, v16, v17);
    }
    v19 = &v18;
    v7 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v19, v3 + 40);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
    if (a2 == 1)
    {
      v9 = *(WebCore::HRTFDatabaseLoader **)(v3 + 152);
      v10 = *(float *)(v8 + 160);
      v11 = (WebCore::HRTFPanner *)WTF::fastMalloc((WTF *)0x328);
      result = (uint64_t)WebCore::HRTFPanner::HRTFPanner(v11, v10, v9);
    }
    else if (a2)
    {
      result = 0;
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)(result + 8) = 0;
      *(_QWORD *)result = off_1E34077C0;
    }
    v12 = *(_QWORD *)(v3 + 168);
    *(_QWORD *)(v3 + 168) = result;
    if (v12)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *(_DWORD *)(v3 + 160) = a2;
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::PannerNode::setPosition@<X0>(WebCore::PannerNode *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, uint64_t a5@<X8>)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  WebCore::PannerNode *v24;
  float v25;
  float v26;
  float v27;
  _BYTE v28[16];
  int v29;
  char v30[8];
  uint64_t v31;
  int v32;
  _QWORD v33[2];
  int v34;
  char v35;

  v10 = (unsigned __int8 *)this + 336;
  if (__ldaxr((unsigned __int8 *)this + 336))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 336);
LABEL_5:
  v12 = *((unsigned int *)this + 12);
  if ((_DWORD)v12 == -1)
    goto LABEL_29;
  v33[0] = v30;
  v13 = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(v33, (char *)this + 40);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  v15 = atomic_load((unint64_t *)(v14 + 152));
  v16 = (double)v15 / *(float *)(v14 + 160);
  WebCore::AudioParam::setValueAtTime(*((WTF **)this + 29), a2, v16, (uint64_t)v30);
  v17 = v32;
  if (v32)
    goto LABEL_21;
  WebCore::AudioParam::setValueAtTime(*((WTF **)this + 30), a3, v16, (uint64_t)v28);
  LOBYTE(v33[0]) = 0;
  v34 = -1;
  v18 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, _QWORD *, _BYTE *))off_1E336BEE0[v29])(&v35, v33, v28);
    v34 = v18;
  }
  std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v33, (uint64_t)v30);
  if (v34 != -1)
    ((void (*)(char *, _QWORD *))off_1E336BED0[v34])(&v35, v33);
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E336BED0[v29])(v33, v28);
  v17 = v32;
  if (v32)
    goto LABEL_21;
  WebCore::AudioParam::setValueAtTime(*((WTF **)this + 31), a4, v16, (uint64_t)v28);
  LOBYTE(v33[0]) = 0;
  v34 = -1;
  v19 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, _QWORD *, _BYTE *))off_1E336BEE0[v29])(&v35, v33, v28);
    v34 = v19;
  }
  std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v33, (uint64_t)v30);
  if (v34 != -1)
    ((void (*)(char *, _QWORD *))off_1E336BED0[v34])(&v35, v33);
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E336BED0[v29])(v33, v28);
  v17 = v32;
  if (v32)
  {
LABEL_21:
    if (v17 == 1)
    {
      v20 = v31;
      v31 = 0;
      *(_BYTE *)a5 = v30[0];
      *(_QWORD *)(a5 + 8) = v20;
      v21 = 1;
      *(_BYTE *)(a5 + 16) = 1;
      goto LABEL_23;
    }
LABEL_29:
    v24 = (WebCore::PannerNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::PannerNode::setOrientation(v24, v25, v26, v27);
  }
  v21 = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
LABEL_23:
  result = ((uint64_t (*)(_QWORD *, char *))off_1E336BED0[v21])(v33, v30);
  v23 = __ldxr(v10);
  if (v23 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  if (__stlxr(0, v10))
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  return result;
}

uint64_t WebCore::PannerNode::setOrientation@<X0>(WebCore::PannerNode *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, uint64_t a5@<X8>)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  WebCore::PannerNode *v24;
  unsigned int v25;
  _BYTE v26[16];
  int v27;
  char v28[8];
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  int v32;
  char v33;

  v10 = (unsigned __int8 *)this + 336;
  if (__ldaxr((unsigned __int8 *)this + 336))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 336);
LABEL_5:
  v12 = *((unsigned int *)this + 12);
  if ((_DWORD)v12 == -1)
    goto LABEL_29;
  v31[0] = v28;
  v13 = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(v31, (char *)this + 40);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  v15 = atomic_load((unint64_t *)(v14 + 152));
  v16 = (double)v15 / *(float *)(v14 + 160);
  WebCore::AudioParam::setValueAtTime(*((WTF **)this + 32), a2, v16, (uint64_t)v28);
  v17 = v30;
  if (v30)
    goto LABEL_21;
  WebCore::AudioParam::setValueAtTime(*((WTF **)this + 33), a3, v16, (uint64_t)v26);
  LOBYTE(v31[0]) = 0;
  v32 = -1;
  v18 = v27;
  if (v27 != -1)
  {
    ((void (*)(char *, _QWORD *, _BYTE *))off_1E336BEE0[v27])(&v33, v31, v26);
    v32 = v18;
  }
  std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v31, (uint64_t)v28);
  if (v32 != -1)
    ((void (*)(char *, _QWORD *))off_1E336BED0[v32])(&v33, v31);
  if (v27 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E336BED0[v27])(v31, v26);
  v17 = v30;
  if (v30)
    goto LABEL_21;
  WebCore::AudioParam::setValueAtTime(*((WTF **)this + 34), a4, v16, (uint64_t)v26);
  LOBYTE(v31[0]) = 0;
  v32 = -1;
  v19 = v27;
  if (v27 != -1)
  {
    ((void (*)(char *, _QWORD *, _BYTE *))off_1E336BEE0[v27])(&v33, v31, v26);
    v32 = v19;
  }
  std::__variant_detail::__impl<WebCore::AudioParam *,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v31, (uint64_t)v28);
  if (v32 != -1)
    ((void (*)(char *, _QWORD *))off_1E336BED0[v32])(&v33, v31);
  if (v27 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E336BED0[v27])(v31, v26);
  v17 = v30;
  if (v30)
  {
LABEL_21:
    if (v17 == 1)
    {
      v20 = v29;
      v29 = 0;
      *(_BYTE *)a5 = v28[0];
      *(_QWORD *)(a5 + 8) = v20;
      v21 = 1;
      *(_BYTE *)(a5 + 16) = 1;
      goto LABEL_23;
    }
LABEL_29:
    v24 = (WebCore::PannerNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::PannerNode::setChannelCount(v24, v25);
  }
  v21 = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
LABEL_23:
  result = ((uint64_t (*)(_QWORD *, char *))off_1E336BED0[v21])(v31, v28);
  v23 = __ldxr(v10);
  if (v23 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  if (__stlxr(0, v10))
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  return result;
}

WTF::Thread *WebCore::PannerNode::setChannelCount@<X0>(WebCore::PannerNode *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;

  if (a2 < 3)
    return WebCore::AudioNode::setChannelCount(this, a2, (_QWORD *)a3);
  result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t WebCore::PannerNode::setChannelCountMode@<X0>(uint64_t a1@<X0>, WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  if ((_DWORD)a2)
    return WebCore::AudioNode::setChannelCountMode(a1, a2, (_QWORD *)a3);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t WebCore::PannerNode::requiresTailProcessing(WebCore::PannerNode *this)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = (unsigned __int8 *)this + 336;
  do
  {
    while (1)
    {
      v2 = *v1;
      if ((v2 & 1) != 0)
        return 1;
      v3 = __ldaxr(v1);
      if (v3 == v2)
        break;
      __clrex();
    }
  }
  while (__stxr(v2 | 1, v1));
  v4 = *((_QWORD *)this + 21);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  else
    v5 = 1;
  v6 = __ldxr(v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, v1))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return v5;
}

double WebCore::PannerNode::tailTime(WebCore::PannerNode *this)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  double v5;
  int v6;

  v1 = (unsigned __int8 *)this + 336;
  do
  {
    while (1)
    {
      v2 = *v1;
      if ((v2 & 1) != 0)
        return INFINITY;
      v3 = __ldaxr(v1);
      if (v3 == v2)
        break;
      __clrex();
    }
  }
  while (__stxr(v2 | 1, v1));
  v4 = *((_QWORD *)this + 21);
  if (v4)
    v5 = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  else
    v5 = 0.0;
  v6 = __ldxr(v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, v1))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return v5;
}

double WebCore::PannerNode::latencyTime(WebCore::PannerNode *this)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  double v5;
  int v6;

  v1 = (unsigned __int8 *)this + 336;
  do
  {
    while (1)
    {
      v2 = *v1;
      if ((v2 & 1) != 0)
        return INFINITY;
      v3 = __ldaxr(v1);
      if (v3 == v2)
        break;
      __clrex();
    }
  }
  while (__stxr(v2 | 1, v1));
  v4 = *((_QWORD *)this + 21);
  if (v4)
    v5 = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  else
    v5 = 0.0;
  v6 = __ldxr(v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, v1))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return v5;
}

uint64_t WebCore::PeriodicWave::createBandLimitedTables(uint64_t result, const float *a2, const float *a3, unsigned int a4, char a5)
{
  uint64_t v5;
  float v6;
  unsigned int v7;
  vDSP_Length v8;
  vDSP_Length v9;
  void **v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  void *v17;
  float v18;
  void *v19;
  OpaqueFFTSetup *v20;
  char **v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  uint64_t v30;
  void *v31;
  WTF **v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  WTF **v42;
  void *v43;
  DSPComplex *v44;
  void *v45;
  void *v46;
  unsigned int v48;
  unsigned int v49;
  WTF **__B;
  unsigned int __N;
  unsigned int __N_4;
  FFTSetup v55;
  DSPSplitComplex v56;
  WTF *v57;
  vDSP_Length v58;
  float *__C;
  vDSP_Length v60;

  v5 = result;
  v6 = *(float *)(result + 4);
  if (v6 <= 88200.0)
    v7 = 4096;
  else
    v7 = 0x4000;
  if (v6 <= 24000.0)
    v8 = 2048;
  else
    v8 = v7;
  v49 = v8 >> 1;
  if (v8 >> 1 >= a4)
    v9 = a4;
  else
    v9 = v8 >> 1;
  v10 = (void **)(result + 24);
  v11 = *(unsigned int *)(result + 8);
  if (*(_DWORD *)(result + 32) < v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      goto LABEL_52;
    }
    v12 = *v10;
    v13 = *(unsigned int *)(result + 36);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(v5 + 32) = v11;
    *(_QWORD *)(v5 + 24) = v14;
    result = (uint64_t)memcpy(v14, v12, 8 * v13);
    if (v12)
    {
      if (*v10 == v12)
      {
        *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 32) = 0;
      }
      result = WTF::fastFree((WTF *)v12, v15);
    }
    LODWORD(v11) = *(_DWORD *)(v5 + 8);
  }
  if ((_DWORD)v11)
  {
    v16 = 0;
    v48 = log2((double)v8);
    v18 = 0.5;
    while (1)
    {
      v57 = 0;
      v58 = 0;
      WTF::fastAlignedFree(0, v17);
      v57 = (WTF *)WTF::fastAlignedMalloc((WTF *)0x20);
      v58 = v8;
      bzero(v57, 4 * v8);
      __C = 0;
      v60 = 0;
      WTF::fastAlignedFree(0, v19);
      __C = (float *)WTF::fastAlignedMalloc((WTF *)0x20);
      v60 = v8;
      bzero(__C, 4 * v8);
      __N = v8;
      __N_4 = v48;
      WebCore::FFTFrame::fftSetupForSize((WebCore::FFTFrame *)v8);
      v55 = v20;
      v56.realp = (float *)v57;
      v56.imagp = __C;
      if (v58 < v9)
        break;
      if (v60 < v9)
      {
        __break(0xC471u);
        JUMPOUT(0x195561F30);
      }
      v21 = (char **)v10;
      *(float *)&__B = (float)v8;
      vDSP_vsmul(a2, 1, (const float *)&__B, (float *)v57, 1, v9);
      *(float *)&__B = -(float)v8;
      vDSP_vsmul(a3, 1, (const float *)&__B, __C, 1, v9);
      v22 = exp2((float)((float)((float)v16 * -400.0) / 1200.0));
      v23 = *(float *)(v5 + 4);
      v24 = 2048.0;
      if (v23 > 88200.0)
        v24 = 8192.0;
      v25 = v23 > 24000.0;
      v26 = 1024.0;
      if (v25)
        v26 = v24;
      v27 = (float)(v26 * v22);
      if (v27 + 1 < v9)
        v28 = v27 + 1;
      else
        v28 = v9;
      if (v49 > v28)
      {
        bzero((char *)v57 + 4 * v28, 4 * (v49 - v28));
        bzero(&__C[v28], 4 * (v49 - v28));
      }
      *(_DWORD *)v57 = 0;
      *__C = 0.0;
      v29 = *(float *)(v5 + 4);
      if (v29 <= 88200.0)
        v30 = 4096;
      else
        v30 = 0x4000;
      v32 = (WTF **)WTF::fastMalloc((WTF *)0x10);
      *v32 = 0;
      v32[1] = 0;
      if (v29 <= 24000.0)
        v33 = 2048;
      else
        v33 = v30;
      WTF::fastAlignedFree(0, v31);
      v34 = (WTF *)WTF::fastAlignedMalloc((WTF *)0x20);
      *v32 = v34;
      v32[1] = (WTF *)v33;
      bzero(v34, 4 * v33);
      __B = v32;
      v36 = *(unsigned int *)(v5 + 36);
      v10 = (void **)v21;
      if ((_DWORD)v36 == *(_DWORD *)(v5 + 32))
      {
        v37 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v36 + 1, (unint64_t)&__B);
        v36 = *(unsigned int *)(v5 + 36);
        v38 = *(_QWORD *)(v5 + 24);
        v39 = *(_QWORD *)v37;
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v38 + 8 * v36) = v39;
      }
      else
      {
        v40 = *v21;
        __B = 0;
        *(_QWORD *)&v40[8 * v36] = v32;
      }
      v41 = v36 + 1;
      *(_DWORD *)(v5 + 36) = v41;
      v42 = __B;
      __B = 0;
      if (v42)
      {
        WTF::fastAlignedFree(*v42, v35);
        WTF::fastFree((WTF *)v42, v43);
        v41 = *(_DWORD *)(v5 + 36);
      }
      if (v16 >= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x195561F38);
      }
      v44 = **(DSPComplex ***)&(*v21)[8 * v16];
      vDSP_fft_zrip(v55, &v56, 1, __N_4, -1);
      vDSP_ztoc(&v56, 1, v44, 2, (unint64_t)__N >> 1);
      *(float *)&__B = 1.0 / (float)__N;
      vDSP_vsmul((const float *)v44, 1, (const float *)&__B, (float *)v44, 1, __N);
      if (!v16 && (a5 & 1) == 0)
      {
        LODWORD(__B) = 0;
        vDSP_maxmgv((const float *)v44, 1, (float *)&__B, v8);
        if (*(float *)&__B != 0.0)
          v18 = 1.0 / *(float *)&__B;
      }
      *(float *)&__B = v18;
      vDSP_vsmul((const float *)v44, 1, (const float *)&__B, (float *)v44, 1, v8);
      WTF::fastAlignedFree((WTF *)__C, v45);
      result = WTF::fastAlignedFree(v57, v46);
      if (++v16 >= *(unsigned int *)(v5 + 8))
        return result;
    }
    __break(0xC471u);
LABEL_52:
    JUMPOUT(0x195561F10);
  }
  return result;
}

WTF *WebCore::PeriodicWave::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unsigned int v7;
  WTF *v8;
  int v9;
  WTF *v10;
  unint64_t v11;
  void *v12;
  int v13;
  WTF *v14;
  size_t v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  size_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  WTF *v32;
  WTF *result;
  int v34;
  WTF *v35;
  unint64_t v36;
  WTF *v37;
  unint64_t v38;

  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  if (!*(_BYTE *)(a2 + 24))
  {
    if (*(_BYTE *)(a2 + 48))
    {
      v11 = *(unsigned int *)(a2 + 44);
      if (v11 >= 2)
      {
        v16 = *(_DWORD *)(a2 + 40);
        v17 = *(WTF **)(a2 + 32);
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = 0;
        v35 = v17;
        v36 = __PAIR64__(v11, v16);
        WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v37, v11);
        v18 = HIDWORD(v38);
        v19 = v37;
        if (HIDWORD(v38))
          bzero(v37, 4 * HIDWORD(v38));
        if ((_DWORD)v18 != (_DWORD)v11)
          bzero((char *)v19 + 4 * v18, 4 * (v11 - v18));
        HIDWORD(v38) = v11;
        goto LABEL_29;
      }
      goto LABEL_10;
    }
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v37, 2uLL);
    v13 = HIDWORD(v38);
    v14 = v37;
    if (HIDWORD(v38))
    {
      v15 = 4 * HIDWORD(v38);
      bzero(v37, v15);
      if (v13 == 2)
        goto LABEL_25;
    }
    else
    {
      v15 = 0;
    }
    bzero((char *)v14 + v15, 8 - v15);
LABEL_25:
    HIDWORD(v38) = 2;
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v35, 2uLL);
    v24 = v35;
    if (HIDWORD(v36))
    {
      v25 = 4 * HIDWORD(v36);
      v34 = HIDWORD(v36);
      bzero(v35, v25);
      if (v34 == 2)
        goto LABEL_28;
    }
    else
    {
      v25 = 0;
    }
    bzero((char *)v24 + v25, 8 - v25);
LABEL_28:
    HIDWORD(v36) = 2;
    *((_DWORD *)v24 + 1) = 1065353216;
    goto LABEL_29;
  }
  v6 = *(unsigned int *)(a2 + 20);
  if (!*(_BYTE *)(a2 + 48))
  {
    if (v6 >= 2)
    {
      v20 = *(_DWORD *)(a2 + 16);
      v21 = *(WTF **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v37 = v21;
      v38 = __PAIR64__(v6, v20);
      WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v35, v6);
      v22 = HIDWORD(v36);
      v23 = v35;
      if (HIDWORD(v36))
        bzero(v35, 4 * HIDWORD(v36));
      if ((_DWORD)v22 != (_DWORD)v6)
        bzero((char *)v23 + 4 * v22, 4 * (v6 - v22));
      goto LABEL_22;
    }
LABEL_10:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_43;
  }
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 44) || v6 < 2)
    goto LABEL_10;
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(WTF **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v37 = v8;
  *(_QWORD *)(a2 + 16) = 0;
  v38 = __PAIR64__(v6, v7);
  v9 = *(_DWORD *)(a2 + 40);
  v10 = *(WTF **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v35 = v10;
  *(_QWORD *)(a2 + 40) = 0;
  LODWORD(v36) = v9;
LABEL_22:
  HIDWORD(v36) = v6;
LABEL_29:
  if (!HIDWORD(v38))
  {
    __break(0xC471u);
    JUMPOUT(0x1955622F8);
  }
  *(_DWORD *)v37 = 0;
  if (!HIDWORD(v36))
  {
    __break(0xC471u);
    JUMPOUT(0x195562300);
  }
  *(_DWORD *)v35 = 0;
  v26 = WTF::fastMalloc((WTF *)0x28);
  v27 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + 160);
  *(_DWORD *)v26 = 1;
  *(float *)(v26 + 4) = v27;
  v28 = 4096.0;
  if (v27 > 88200.0)
    v28 = 16384.0;
  v29 = 8192.0;
  if (v27 <= 88200.0)
    v29 = 2048.0;
  if (v27 <= 24000.0)
    v30 = 2048.0;
  else
    v30 = v28;
  if (v27 <= 24000.0)
    v31 = 1024.0;
  else
    v31 = v29;
  *(_DWORD *)(v26 + 8) = ((float)(log2f(v30) * 3.0) + 0.5);
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(float *)(v26 + 12) = (float)(v27 * 0.5) / v31;
  *(float *)(v26 + 16) = v30 / v27;
  WebCore::PeriodicWave::createBandLimitedTables(v26, (const float *)v37, (const float *)v35, HIDWORD(v38), *(_BYTE *)a2);
  *(_QWORD *)a3 = v26;
  v32 = v35;
  *(_DWORD *)(a3 + 16) = 0;
  if (v32)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree(v32, v12);
  }
LABEL_43:
  result = v37;
  if (v37)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

uint64_t WebCore::PeriodicWave::generateBasicWaveform(uint64_t a1, void *a2)
{
  int v2;
  float v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t i;
  float v16;
  uint64_t j;
  int v18;
  uint64_t k;
  float v20;
  float v21;
  float v22;
  int v23;
  void *v24;
  void *v25;

  v2 = (int)a2;
  v4 = *(float *)(a1 + 4);
  if (v4 <= 88200.0)
    v5 = 2048;
  else
    v5 = 0x2000;
  if (v4 <= 24000.0)
    v6 = 1024;
  else
    v6 = v5;
  WTF::fastAlignedFree(0, a2);
  v7 = (_DWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  bzero(v7, (4 * v6));
  WTF::fastAlignedFree(0, v8);
  v9 = (_DWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  bzero(v9, (4 * v6));
  *v7 = 0;
  *v9 = 0;
  switch(v2)
  {
    case 0:
      v10 = 0;
      do
      {
        if (v10)
          v11 = 0.0;
        else
          v11 = 1.0;
        v7[v10 + 1] = 0;
        *(float *)&v9[++v10] = v11;
      }
      while (v6 - 1 != v10);
      break;
    case 1:
      for (i = 1; i != v6; ++i)
      {
        v16 = (float)(2.0 / (float)((float)i * 3.1416))
            + (float)(2.0 / (float)((float)i * 3.1416));
        if ((i & 1) == 0)
          v16 = 0.0;
        v7[i] = 0;
        *(float *)&v9[i] = v16;
      }
      break;
    case 2:
      for (j = 1; j != v6; ++j)
      {
        if ((j & 1) != 0)
          v18 = 1;
        else
          v18 = -1;
        v7[j] = 0;
        *(float *)&v9[j] = (float)(2.0 / (float)((float)j * 3.1416)) * (float)v18;
      }
      break;
    case 3:
      for (k = 1; k != v6; ++k)
      {
        v20 = 0.0;
        if ((k & 1) != 0)
        {
          v21 = (float)(2.0 / (float)((float)k * 3.1416))
              * (float)(2.0 / (float)((float)k * 3.1416));
          v22 = v21 + v21;
          if ((((_BYTE)k - 1) & 2) != 0)
            v23 = -1;
          else
            v23 = 1;
          v20 = v22 * (float)v23;
        }
        v7[k] = 0;
        *(float *)&v9[k] = v20;
      }
      break;
    default:
      v12 = v6 - 1;
      v13 = v9 + 1;
      v14 = v7 + 1;
      do
      {
        *v14++ = 0;
        *v13++ = 0;
        --v12;
      }
      while (v12);
      break;
  }
  WebCore::PeriodicWave::createBandLimitedTables(a1, (const float *)v7, (const float *)v9, v6, 0);
  WTF::fastAlignedFree((WTF *)v9, v24);
  return WTF::fastAlignedFree((WTF *)v7, v25);
}

void WebCore::RealtimeAnalyser::RealtimeAnalyser(uint64_t a1, void *a2)
{
  char v2;
  void *v4;
  WebCore::AudioBus *v5;
  WebCore::AudioBus *v6;
  WTF ***v7;
  void *v8;
  void *v9;
  WTF **v10;
  void *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  unsigned int v17;
  uint64_t v18;
  FFTSetup fftsetup;
  int v20;
  WTF *v21;
  WTF **v22;
  void *v23;
  void *v24;
  void *v25;

  v2 = (char)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E336B9D8;
  WTF::fastAlignedFree(0, a2);
  v4 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0x10000;
  bzero(v4, 0x40000uLL);
  *(_DWORD *)(a1 + 24) = 0;
  v5 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
  v6 = WebCore::AudioBus::AudioBus(v5, (void *)1, 0x80uLL, 1);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (WTF ***)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = 2048;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  WTF::fastAlignedFree(0, v8);
  v9 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = 1024;
  bzero(v9, 0x1000uLL);
  *(_OWORD *)(a1 + 72) = xmmword_1968DF040;
  *(_QWORD *)(a1 + 88) = 0xC03E000000000000;
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 97) = v2;
  v10 = (WTF **)WTF::fastMalloc((WTF *)0x40);
  v10[4] = 0;
  v10[5] = 0;
  WTF::fastAlignedFree(0, v11);
  v12 = (WTF *)WTF::fastAlignedMalloc((WTF *)0x20);
  v10[4] = v12;
  v10[5] = (WTF *)2048;
  bzero(v12, 0x2000uLL);
  v10[6] = 0;
  v10[7] = 0;
  WTF::fastAlignedFree(0, v13);
  v14 = (WTF *)WTF::fastAlignedMalloc((WTF *)0x20);
  v10[6] = v14;
  v10[7] = (WTF *)2048;
  bzero(v14, 0x2000uLL);
  *v10 = (WTF *)0xB00000800;
  if (__ldaxr(WebCore::fftSetupsLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::fftSetupsLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::fftSetupsLock);
LABEL_5:
  {
    v17 = dword_1EE2F86E4;
  }
  else
  {
    WebCore::fftSetups(void)::fftSetups = 0;
    *(_QWORD *)&dword_1EE2F86E0 = 0x1800000000;
    v25 = (void *)WTF::fastMalloc((WTF *)0xC0);
    dword_1EE2F86E0 = 24;
    WebCore::fftSetups(void)::fftSetups = (uint64_t)v25;
    v17 = dword_1EE2F86E4;
    if (dword_1EE2F86E4)
      bzero(v25, 8 * dword_1EE2F86E4);
  }
  if (v17 <= 0xB)
  {
    __break(0xC471u);
    return;
  }
  v18 = WebCore::fftSetups(void)::fftSetups;
  fftsetup = *(FFTSetup *)(WebCore::fftSetups(void)::fftSetups + 88);
  if (!fftsetup)
  {
    fftsetup = vDSP_create_fftsetup(0xBuLL, 0);
    *(_QWORD *)(v18 + 88) = fftsetup;
  }
  v20 = __ldxr(WebCore::fftSetupsLock);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::fftSetupsLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::fftSetupsLock);
  v21 = v10[4];
  v10[1] = fftsetup;
  v10[2] = v21;
  v10[3] = v10[6];
  v22 = *v7;
  *v7 = v10;
  if (v22)
  {
    WTF::fastAlignedFree(v22[6], v15);
    WTF::fastAlignedFree(v22[4], v23);
    WTF::fastFree((WTF *)v22, v24);
  }
}

void WebCore::RealtimeAnalyser::~RealtimeAnalyser(WTF **this, void *a2)
{
  void *v3;
  WTF **v4;
  void *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;

  *this = (WTF *)off_1E336B9D8;
  WTF::fastAlignedFree(this[7], a2);
  v4 = (WTF **)this[6];
  this[6] = 0;
  if (v4)
  {
    WTF::fastAlignedFree(v4[6], v3);
    WTF::fastAlignedFree(v4[4], v5);
    WTF::fastFree((WTF *)v4, v6);
  }
  v7 = (unsigned int *)this[4];
  this[4] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v10 = v7;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v10, v3);
    }
  }
  WTF::fastAlignedFree(this[1], v3);
}

{
  void *v3;
  WTF **v4;
  void *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  unsigned int *v11;

  *this = (WTF *)off_1E336B9D8;
  WTF::fastAlignedFree(this[7], a2);
  v4 = (WTF **)this[6];
  this[6] = 0;
  if (v4)
  {
    WTF::fastAlignedFree(v4[6], v3);
    WTF::fastAlignedFree(v4[4], v5);
    WTF::fastFree((WTF *)v4, v6);
  }
  v7 = (unsigned int *)this[4];
  this[4] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = v7;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v11, v3);
    }
  }
  WTF::fastAlignedFree(this[1], v3);
  WTF::fastFree((WTF *)this, v10);
}

uint64_t WebCore::RealtimeAnalyser::setFftSize(WebCore::RealtimeAnalyser *this, unint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WebCore::FFTFrame *v7;
  WebCore::FFTFrame *v8;
  void *v9;
  WTF **v10;
  void *v11;
  void *v12;
  unint64_t v13;
  void *v14;

  v4 = 1 << log2((double)a2);
  v5 = a2 - 32 < 0x7FE1 && v4 == a2;
  v6 = v5;
  if (v5 && *((_QWORD *)this + 5) != a2)
  {
    v7 = (WebCore::FFTFrame *)WTF::fastMalloc((WTF *)0x40);
    v8 = WebCore::FFTFrame::FFTFrame(v7, (void *)a2);
    v10 = (WTF **)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v8;
    if (v10)
    {
      WTF::fastAlignedFree(v10[6], v9);
      WTF::fastAlignedFree(v10[4], v11);
      WTF::fastFree((WTF *)v10, v12);
    }
    v13 = a2 >> 1;
    if (a2 >> 1 != *((_QWORD *)this + 8))
    {
      WTF::fastAlignedFree(*((WTF **)this + 7), v9);
      v14 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
      *((_QWORD *)this + 7) = v14;
      *((_QWORD *)this + 8) = v13;
      bzero(v14, 4 * v13);
    }
    *((_QWORD *)this + 5) = a2;
  }
  return v6;
}

void WebCore::RealtimeAnalyser::writeInput(WebCore::RealtimeAnalyser *this, WebCore::AudioBus *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  void **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  unsigned int v19;

  if (a2 && *((_DWORD *)a2 + 7) && *(_QWORD *)(**((_QWORD **)a2 + 2) + 16) >= a3)
  {
    v6 = *((unsigned int *)this + 6);
    v7 = *((_QWORD *)this + 2);
    if (v7 > v6 && v6 + a3 <= v7)
    {
      v9 = *((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 4);
      v11 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v11)
      {
        for (i = 0; i < v11; ++i)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * i);
          if (!*(_BYTE *)(v13 + 24))
          {
            *(_BYTE *)(v13 + 24) = 1;
            v14 = *(void ***)(v13 + 8);
            v15 = (_QWORD *)(v13 + 16);
            if (v14)
              v15 = v14 + 1;
            else
              v14 = (void **)v13;
            bzero(*v14, 4 * *v15);
            v11 = *(unsigned int *)(v10 + 28);
          }
        }
        v10 = *((_QWORD *)this + 4);
      }
      WebCore::AudioBus::sumFrom(v10, (uint64_t)a2, 0);
      v16 = *((_QWORD *)this + 4);
      if (*(_DWORD *)(v16 + 28))
      {
        v17 = **(_QWORD **)(v16 + 16);
        v18 = *(const void **)v17;
        if (!*(_QWORD *)v17)
          v18 = **(const void ***)(v17 + 8);
        memcpy((void *)(v9 + 4 * v6), v18, 4 * a3);
        v19 = *((_DWORD *)this + 6) + a3;
        if (HIWORD(v19))
          v19 = 0;
        *((_DWORD *)this + 6) = v19;
        *((_BYTE *)this + 96) = 1;
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
}

uint64_t WebCore::RealtimeAnalyser::doFFTAnalysisIfNecessary(uint64_t this, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  DSPComplex *v4;
  const void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  long double v11;
  float v12;
  void *v13;
  uint64_t v14;
  WebCore::AudioUtilities *v15;
  float *v16;
  float *v17;
  double v18;
  double v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float v23;
  long double v24;
  float v25;
  float v26;

  if (!*(_BYTE *)(this + 96))
    return this;
  v2 = this;
  *(_BYTE *)(this + 96) = 0;
  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    if (v3 >> 62)
    {
      __break(0xC471u);
      return this;
    }
    WTF::fastAlignedFree(0, a2);
    v4 = (DSPComplex *)WTF::fastAlignedMalloc((WTF *)0x20);
    bzero(v4, 4 * v3);
  }
  else
  {
    v4 = 0;
  }
  v5 = *(const void **)(v2 + 8);
  v6 = *(unsigned int *)(v2 + 24);
  v7 = (uint64_t)v5 + 4 * v6 + -4 * v3;
  if (v3 > v6)
  {
    memcpy(v4, (const void *)(v7 + 0x40000), 4 * (v3 - v6));
    memcpy((char *)v4 + 4 * v3 + -4 * v6, v5, 4 * v6);
    goto LABEL_10;
  }
  memcpy(v4, (const void *)v7, 4 * v3);
  if (v3)
  {
LABEL_10:
    v8 = 0;
    v9 = (double)v3;
    do
    {
      v10 = (double)v8 / v9;
      v11 = cos(v10 * 6.28318531) * -0.5 + 0.42;
      v12 = v11 + cos(v10 * 12.5663706) * 0.08;
      *(&v4->real + v8) = *(&v4->real + v8) * v12;
      ++v8;
    }
    while (v3 > v8);
    goto LABEL_12;
  }
  v9 = 0.0;
LABEL_12:
  WebCore::FFTFrame::doFFT(*(WebCore::FFTFrame **)(v2 + 48), v4);
  v14 = *(_QWORD *)(v2 + 48);
  v15 = *(WebCore::AudioUtilities **)(v2 + 56);
  v16 = *(float **)(v14 + 48);
  *v16 = 0.0;
  v17 = *(float **)(v2 + 64);
  if (v17)
  {
    v18 = 1.0 / v9;
    v19 = fmin(fmax(*(double *)(v2 + 72), 0.0), 1.0);
    v20 = *(float **)(v14 + 32);
    v21 = (float *)v15;
    v22 = *(_QWORD *)(v2 + 64);
    do
    {
      v23 = *v20++;
      v24 = v23;
      v25 = *v16++;
      v26 = (1.0 - v19) * (v18 * hypot(v24, v25)) + v19 * *v21;
      *v21++ = v26;
      --v22;
    }
    while (v22);
  }
  if (*(_BYTE *)(v2 + 97))
    WebCore::AudioUtilities::applyNoise(v15, v17, 0.25);
  return WTF::fastAlignedFree((WTF *)v4, v13);
}

void WebCore::RealtimeAnalyser::getFloatFrequencyData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  vDSP_Length v10;
  vDSP_Length v11;
  const float *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float __B;

  WebCore::RealtimeAnalyser::doFFTAnalysisIfNecessary(a1, (void *)a2);
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
  {
    v11 = 0;
    v15 = 0;
    v12 = *(const float **)(a1 + 56);
    goto LABEL_40;
  }
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5
    || (v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v5 & 0x3FFFFFFFFLL) + v6))
  {
LABEL_31:
    v8 = 0;
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 6);
  if ((v7 & 3) != 0)
  {
    if (*(_BYTE *)(v4 + 64) && (v21 = *(_QWORD *)(v4 + 32)) != 0)
    {
      v16 = atomic_load((unint64_t *)(v21 + 32));
      v7 = *(_BYTE *)(a2 + 6);
    }
    else
    {
      v16 = *(_QWORD *)(v4 + 48);
    }
    v17 = *(_QWORD *)(a2 + 8);
    if ((v7 & 4) == 0)
    {
      v18 = *(_QWORD *)(a2 + 16) + v17 <= v16 && v16 >= v17;
      if (v18)
        v8 = 0;
      else
        v8 = *(_QWORD *)(a2 + 16);
      goto LABEL_8;
    }
    v18 = v16 >= v17;
    v19 = v16 - v17;
    if (!v18)
    {
      if ((*(_BYTE *)(a2 + 4) - 4) > 7u)
        LOBYTE(v20) = 0;
      else
        v20 = qword_1968DF058[(char)(*(_BYTE *)(a2 + 4) - 4)];
      v8 = (-1 << v20) & v19;
      goto LABEL_8;
    }
    goto LABEL_31;
  }
  v8 = *(_QWORD *)(a2 + 16);
LABEL_8:
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v8 >> 2;
  if (v10 >= *(_QWORD *)(a1 + 64))
    v11 = *(_QWORD *)(a1 + 64);
  else
    v11 = v10;
  v12 = *(const float **)(a1 + 56);
  if (!v9)
    goto LABEL_34;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    goto LABEL_34;
  v14 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v14 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v15 = *(float **)(a2 + 24);
    goto LABEL_40;
  }
  if ((v13 & 0x3FFFFFFFFLL) + v14)
  {
    v15 = *(float **)(a2 + 24);
    if (v15 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
      v15 = (float *)(((unint64_t)v15 & 0x3FFFFFFFFLL) + v14);
  }
  else
  {
LABEL_34:
    v15 = 0;
  }
LABEL_40:
  __B = 1.0;
  vDSP_vdbcon(v12, 1, &__B, v15, 1, v11, 1u);
}

void WebCore::RealtimeAnalyser::getByteFrequencyData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;

  WebCore::RealtimeAnalyser::doFFTAnalysisIfNecessary(a1, (void *)a2);
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
    goto LABEL_8;
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    goto LABEL_34;
  v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v6 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v5 & 0x3FFFFFFFFLL) + v6))
    goto LABEL_34;
  v7 = *(_BYTE *)(a2 + 6);
  if ((v7 & 3) == 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v4 + 64) && (v24 = *(_QWORD *)(v4 + 32)) != 0)
  {
    v17 = atomic_load((unint64_t *)(v24 + 32));
    v7 = *(_BYTE *)(a2 + 6);
  }
  else
  {
    v17 = *(_QWORD *)(v4 + 48);
  }
  v18 = *(_QWORD *)(a2 + 8);
  if ((v7 & 4) == 0)
  {
    v19 = *(_QWORD *)(a2 + 16) + v18 <= v17 && v17 >= v18;
    if (v19)
      v4 = 0;
    else
      v4 = *(_QWORD *)(a2 + 16);
    goto LABEL_8;
  }
  v19 = v17 >= v18;
  v20 = v17 - v18;
  if (v19)
  {
LABEL_34:
    v4 = 0;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(a2 + 4) - 4) > 7u)
    LOBYTE(v21) = 0;
  else
    v21 = qword_1968DF058[(char)(*(_BYTE *)(a2 + 4) - 4)];
  v4 = (-1 << v21) & v20;
LABEL_8:
  if (v4 >= *(_QWORD *)(a1 + 64))
    v8 = *(_QWORD *)(a1 + 64);
  else
    v8 = v4;
  if (!v8)
    return;
  v10 = *(double *)(a1 + 80);
  v9 = *(double *)(a1 + 88);
  v11 = 1.0;
  if (v9 != v10)
    v11 = 1.0 / (v9 - v10);
  v12 = *(float **)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 32);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 16)) == 0)
  {
LABEL_37:
    v16 = 0;
    goto LABEL_42;
  }
  v15 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v15 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    if ((v14 & 0x3FFFFFFFFLL) + v15)
    {
      v16 = *(_QWORD *)(a2 + 24);
      if (v16 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
        v16 = (v16 & 0x3FFFFFFFFLL) + v15;
      goto LABEL_42;
    }
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(a2 + 24);
  do
  {
LABEL_42:
    v22 = v10;
    if (*v12 != 0.0)
      v22 = (float)(log10f(*v12) * 20.0);
    v23 = v11 * ((v22 - v10) * 255.0);
    if (v23 < 0.0)
      v23 = 0.0;
    if (v23 > 255.0)
      v23 = 255.0;
    *(_BYTE *)v16++ = (int)v23;
    ++v12;
    --v8;
  }
  while (v8);
}

float WebCore::RealtimeAnalyser::getFloatTimeDomainData(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float result;
  uint64_t v20;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
    goto LABEL_8;
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    goto LABEL_33;
  v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v4 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v3 & 0x3FFFFFFFFLL) + v4))
    goto LABEL_33;
  v5 = *(_BYTE *)(a2 + 6);
  if ((v5 & 3) == 0)
  {
    v2 = *(_QWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v2 + 64) && (v20 = *(_QWORD *)(v2 + 32)) != 0)
  {
    v13 = atomic_load((unint64_t *)(v20 + 32));
    v5 = *(_BYTE *)(a2 + 6);
  }
  else
  {
    v13 = *(_QWORD *)(v2 + 48);
  }
  v14 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) == 0)
  {
    v15 = *(_QWORD *)(a2 + 16) + v14 <= v13 && v13 >= v14;
    if (v15)
      v2 = 0;
    else
      v2 = *(_QWORD *)(a2 + 16);
    goto LABEL_8;
  }
  v15 = v13 >= v14;
  v16 = v13 - v14;
  if (v15)
  {
LABEL_33:
    v2 = 0;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(a2 + 4) - 4) > 7u)
    LOBYTE(v17) = 0;
  else
    v17 = qword_1968DF058[(char)(*(_BYTE *)(a2 + 4) - 4)];
  v2 = (-1 << v17) & v16;
LABEL_8:
  v6 = v2 >> 2;
  v7 = *(_QWORD *)(a1 + 40);
  if (v6 >= v7)
    v6 = *(_QWORD *)(a1 + 40);
  if (v6 && !(v7 >> 16) && *(_QWORD *)(a1 + 16) == 0x10000)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a2 + 32);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v11 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v12 = *(_QWORD *)(a2 + 24);
LABEL_41:
          v18 = *(unsigned int *)(a1 + 24) - v7;
          do
          {
            result = *(float *)(v8 + 4 * (unsigned __int16)v18);
            *(float *)v12 = result;
            v12 += 4;
            ++v18;
            --v6;
          }
          while (v6);
          return result;
        }
        if ((v10 & 0x3FFFFFFFFLL) + v11)
        {
          v12 = *(_QWORD *)(a2 + 24);
          if (v12 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v12 = (v12 & 0x3FFFFFFFFLL) + v11;
          goto LABEL_41;
        }
      }
    }
    v12 = 0;
    goto LABEL_41;
  }
  return result;
}

uint64_t WebCore::RealtimeAnalyser::getByteTimeDomainData(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  double v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
    goto LABEL_8;
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    goto LABEL_33;
  v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v4 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v3 & 0x3FFFFFFFFLL) + v4))
    goto LABEL_33;
  v5 = *(_BYTE *)(a2 + 6);
  if ((v5 & 3) == 0)
  {
    v2 = *(_QWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v2 + 64) && (v20 = *(_QWORD *)(v2 + 32)) != 0)
  {
    v12 = atomic_load((unint64_t *)(v20 + 32));
    v5 = *(_BYTE *)(a2 + 6);
  }
  else
  {
    v12 = *(_QWORD *)(v2 + 48);
  }
  v13 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) == 0)
  {
    v14 = *(_QWORD *)(a2 + 16) + v13 <= v12 && v12 >= v13;
    if (v14)
      v2 = 0;
    else
      v2 = *(_QWORD *)(a2 + 16);
    goto LABEL_8;
  }
  v14 = v12 >= v13;
  v15 = v12 - v13;
  if (v14)
  {
LABEL_33:
    v2 = 0;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(a2 + 4) - 4) > 7u)
    LOBYTE(v16) = 0;
  else
    v16 = qword_1968DF058[(char)(*(_BYTE *)(a2 + 4) - 4)];
  v2 = (-1 << v16) & v15;
LABEL_8:
  v6 = *(_QWORD *)(result + 40);
  if (v2 >= v6)
    v2 = *(_QWORD *)(result + 40);
  if (v2 && !(v6 >> 16) && *(_QWORD *)(result + 16) == 0x10000)
  {
    v7 = *(_QWORD *)(result + 8);
    v8 = *(_QWORD *)(a2 + 32);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v10 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v11 = *(_QWORD *)(a2 + 24);
LABEL_41:
          v17 = *(_DWORD *)(result + 24) - v6;
          do
          {
            v18 = (float)(*(float *)(v7 + 4 * (unsigned __int16)v17) + 1.0) * 128.0;
            if (v18 <= 0.0)
              v18 = 0.0;
            v19 = v18;
            if (v19 > 255.0)
              v19 = 255.0;
            *(_BYTE *)v11++ = (int)v19;
            LOWORD(v17) = v17 + 1;
            --v2;
          }
          while (v2);
          return result;
        }
        if ((v9 & 0x3FFFFFFFFLL) + v10)
        {
          v11 = *(_QWORD *)(a2 + 24);
          if (v11 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v11 = (v11 & 0x3FFFFFFFFLL) + v10;
          goto LABEL_41;
        }
      }
    }
    v11 = 0;
    goto LABEL_41;
  }
  return result;
}

WebCore::ScriptProcessorNode *WebCore::ScriptProcessorNode::ScriptProcessorNode(WebCore::ScriptProcessorNode *this, WebCore::BaseAudioContext *a2, unint64_t a3, void *a4, void *a5)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::AudioBus *v29;
  WebCore::AudioBus *v30;
  _QWORD v32[4];
  uint64_t v33;

  *(_QWORD *)this = off_1E3368A80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E3368BA8;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 6;
  v10 = (unsigned int *)((char *)a2 + 24);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 5) = a2;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  *((_DWORD *)this + 26) = 1;
  *(_QWORD *)((char *)this + 108) = 0;
  v17 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 112))(a2);
  v18 = (unsigned int *)(v17 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *((_QWORD *)this + 15) = v17;
  v20 = *((_QWORD *)a2 + 9);
  v21 = *((_QWORD *)a2 + 10) + 1;
  *((_QWORD *)a2 + 10) = v21;
  v22 = v20 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v21;
  *((_QWORD *)this + 16) = v22;
  *((_QWORD *)this + 17) = 2;
  *((_DWORD *)this + 36) = 0;
  v32[0] = "AudioNode";
  v32[1] = 10;
  v32[2] = "AudioNode";
  v32[3] = v22;
  if (*(_BYTE *)(v17 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v32);
  (*(void (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 136))(a2);
  v23 = *((_QWORD *)a2 + 1);
  if (v23 && (v24 = *(_QWORD *)(v23 + 8)) != 0)
  {
    if (*(_BYTE *)(v24 + 178))
    {
      v25 = v24 - 96;
    }
    else
    {
      v26 = v24 - 288;
      v27 = *(_QWORD *)(v24 + 416);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
          v26 = v28;
      }
      v25 = v26 + 192;
    }
  }
  else
  {
    v25 = 0;
  }
  *((_QWORD *)this + 19) = &off_1E33A18C0;
  *((_QWORD *)this + 20) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ScriptProcessorNode *)((char *)this + 152), (WebCore::ScriptExecutionContext *)v25);
  *((_QWORD *)this + 19) = &off_1E33A0540;
  *((_QWORD *)this + 21) = 0;
  if (v25)
  {
    if (*(_BYTE *)(v25 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195563744);
    }
    v33 = (uint64_t)this + 152;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v25 + 128), &v33, (uint64_t)v32);
  }
  *(_QWORD *)this = off_1E336B9F8;
  *((_QWORD *)this + 3) = &unk_1E336BB28;
  *((_QWORD *)this + 19) = &unk_1E336BB68;
  *((_DWORD *)this + 44) = 0;
  *((_WORD *)this + 90) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 29) = a3;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 61) = (_DWORD)a4;
  *((_DWORD *)this + 62) = (_DWORD)a5;
  if (a4 <= 0x20)
  {
    v30 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    v29 = WebCore::AudioBus::AudioBus(v30, a4, 0x80uLL, 0);
    a3 = *((_QWORD *)this + 29);
  }
  else
  {
    v29 = 0;
  }
  *((_QWORD *)this + 32) = v29;
  *((_BYTE *)this + 264) = 0;
  if (a3 <= 0x7F)
    *((_QWORD *)this + 29) = 128;
  *((_DWORD *)this + 34) = (_DWORD)a4;
  *(_QWORD *)((char *)this + 140) = 2;
  WebCore::AudioNode::addInput(this);
  WebCore::AudioNode::addOutput(this, a5);
  WebCore::ScriptProcessorNode::initialize(this);
  return this;
}

void WebCore::ScriptProcessorNode::initialize(WebCore::ScriptProcessorNode *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  float v5;
  void *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  WTF **v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  WTF **v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  WTF **v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  WTF **v26;
  WebCore::ScriptProcessorNode *v27;
  char v28;
  char *v29;

  if (*((_BYTE *)this + 32))
    return;
  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2 == -1)
  {
    v27 = (WebCore::ScriptProcessorNode *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ScriptProcessorNode::~ScriptProcessorNode(v27);
    return;
  }
  v29 = &v28;
  v3 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v29, (char *)this + 40);
  v5 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) + 160);
  v6 = (void *)*((unsigned int *)this + 61);
  if (!(_DWORD)v6)
    goto LABEL_12;
  v7 = 0;
  if (v6 <= 0x20 && v5 >= 3000.0)
  {
    v8 = *((_QWORD *)this + 29);
    if (v5 <= 384000.0 && v8 != 0)
    {
      v10 = (unint64_t *)WTF::fastMalloc((WTF *)0x28);
      v7 = WebCore::AudioBuffer::AudioBuffer(v10, v6, v8, 1, v5);
      if (!v7[1])
      {
        WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v7, v4);
LABEL_12:
        v7 = 0;
      }
    }
  }
  v11 = (WTF **)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v7;
  if (v11)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v11, v4);
  v12 = (void *)*((unsigned int *)this + 62);
  if (!(_DWORD)v12)
    goto LABEL_22;
  v13 = 0;
  if (v5 >= 3000.0 && v5 <= 384000.0 && v12 <= 0x20)
  {
    v14 = *((_QWORD *)this + 29);
    if (v14)
    {
      v15 = (unint64_t *)WTF::fastMalloc((WTF *)0x28);
      v13 = WebCore::AudioBuffer::AudioBuffer(v15, v12, v14, 1, v5);
      if (!v13[1])
      {
        WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v13, v4);
LABEL_22:
        v13 = 0;
      }
    }
  }
  v16 = (WTF **)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v13;
  if (v16)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v16, v4);
  v17 = (void *)*((unsigned int *)this + 61);
  if (!(_DWORD)v17)
    goto LABEL_32;
  v18 = 0;
  if (v5 >= 3000.0 && v5 <= 384000.0 && v17 <= 0x20)
  {
    v19 = *((_QWORD *)this + 29);
    if (v19)
    {
      v20 = (unint64_t *)WTF::fastMalloc((WTF *)0x28);
      v18 = WebCore::AudioBuffer::AudioBuffer(v20, v17, v19, 1, v5);
      if (!v18[1])
      {
        WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v18, v4);
LABEL_32:
        v18 = 0;
      }
    }
  }
  v21 = (WTF **)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v18;
  if (v21)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v21, v4);
  v22 = (void *)*((unsigned int *)this + 62);
  if (!(_DWORD)v22)
    goto LABEL_42;
  v23 = 0;
  if (v5 >= 3000.0 && v5 <= 384000.0 && v22 <= 0x20)
  {
    v24 = *((_QWORD *)this + 29);
    if (v24)
    {
      v25 = (unint64_t *)WTF::fastMalloc((WTF *)0x28);
      v23 = WebCore::AudioBuffer::AudioBuffer(v25, v22, v24, 1, v5);
      if (!v23[1])
      {
        WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v23, v4);
LABEL_42:
        v23 = 0;
      }
    }
  }
  v26 = (WTF **)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v23;
  if (v26)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v26, v4);
  *((_BYTE *)this + 32) = 1;
}

void WebCore::ScriptProcessorNode::~ScriptProcessorNode(WebCore::ScriptProcessorNode *this, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF **v7;
  WTF **v8;
  WTF **v9;
  WTF **v10;
  WTF **v11;
  WTF **v12;
  void *v13;
  unsigned int *v14;

  WebCore::ScriptProcessorNode::uninitialize((uint64_t)this, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v14 = v4;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v14, v3);
    }
  }
  v7 = (WTF **)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v7)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v7, v3);
  v8 = (WTF **)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v8)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v8, v3);
  v9 = (WTF **)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v9)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v9, v3);
  v10 = (WTF **)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v10)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v10, v3);
  v11 = (WTF **)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v11)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v11, v3);
  v12 = (WTF **)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v12)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v12, v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ScriptProcessorNode *)((char *)this + 152), v3);
  WebCore::AudioNode::~AudioNode(this, v13);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ScriptProcessorNode::~ScriptProcessorNode(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::ScriptProcessorNode::uninitialize(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  WTF **v5;
  WTF **v6;
  int v7;
  unsigned __int8 *v8;
  WTF **v10;
  int v11;

  if (*(_BYTE *)(this + 32))
  {
    v2 = this;
    v3 = (unsigned __int8 *)(this + 180);
    if (__ldaxr((unsigned __int8 *)(this + 180)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](this + 180);
LABEL_6:
    v5 = *(WTF ***)(v2 + 184);
    *(_QWORD *)(v2 + 184) = 0;
    if (v5)
      WTF::RefCounted<WebCore::AudioBuffer>::deref(v5, a2);
    v6 = *(WTF ***)(v2 + 200);
    *(_QWORD *)(v2 + 200) = 0;
    if (v6)
      WTF::RefCounted<WebCore::AudioBuffer>::deref(v6, a2);
    v7 = __ldxr(v3);
    if (v7 == 1)
    {
      if (!__stlxr(0, v3))
      {
LABEL_15:
        v8 = (unsigned __int8 *)(v2 + 181);
        if (__ldaxr((unsigned __int8 *)(v2 + 181)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v8))
        {
          goto LABEL_19;
        }
        MEMORY[0x19AEA534C](v2 + 181);
LABEL_19:
        v10 = *(WTF ***)(v2 + 192);
        *(_QWORD *)(v2 + 192) = 0;
        if (v10)
          WTF::RefCounted<WebCore::AudioBuffer>::deref(v10, a2);
        this = *(_QWORD *)(v2 + 208);
        *(_QWORD *)(v2 + 208) = 0;
        if (this)
          this = (uint64_t)WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)this, a2);
        v11 = __ldxr(v8);
        if (v11 == 1)
        {
          if (!__stlxr(0, v8))
            goto LABEL_28;
        }
        else
        {
          __clrex();
        }
        this = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 181));
LABEL_28:
        *(_BYTE *)(v2 + 32) = 0;
        return this;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_15;
  }
  return this;
}

void `non-virtual thunk to'WebCore::ScriptProcessorNode::~ScriptProcessorNode(WebCore::ScriptProcessorNode *this, void *a2)
{
  WebCore::ScriptProcessorNode::~ScriptProcessorNode((WebCore::ScriptProcessorNode *)((char *)this - 24), a2);
}

{
  WebCore::ScriptProcessorNode::~ScriptProcessorNode((WebCore::ScriptProcessorNode *)((char *)this - 152), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ScriptProcessorNode::~ScriptProcessorNode((WebCore::ScriptProcessorNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ScriptProcessorNode::~ScriptProcessorNode((WebCore::ScriptProcessorNode *)((char *)this - 152), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF **WebCore::ScriptProcessorNode::createOutputBufferForJS(WebCore::ScriptProcessorNode *this, WebCore::AudioBuffer *a2, const WebCore::AudioBuffer *a3)
{
  WebCore::AudioBuffer *v6;
  WTF **result;
  uint64_t v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t *v15;

  v6 = (WebCore::AudioBuffer *)*((_QWORD *)a2 + 28);
  if (v6 && (result = (WTF **)WebCore::AudioBuffer::topologyMatches(v6, a3), (result & 1) != 0))
  {
    v8 = *((_QWORD *)a2 + 28);
    v9 = *(unsigned int **)(v8 + 16);
    if (v9)
      v10 = (uint64_t *)(v9 + 2);
    else
      v10 = 0;
    if (v9)
      v11 = (uint64_t)&v9[2 * *v9 + 2];
    else
      v11 = 0;
    while (v10 != (uint64_t *)v11)
    {
      v13 = *v10++;
      result = (WTF **)JSC::GenericTypedArrayView<JSC::Float32Adaptor>::zeroFill(v13);
    }
    *(_DWORD *)(v8 + 36) = 0;
  }
  else
  {
    WebCore::AudioBuffer::clone((uint64_t)a3, 0, &v15);
    result = (WTF **)*((_QWORD *)a2 + 28);
    *((_QWORD *)a2 + 28) = v15;
    if (result)
      result = WTF::RefCounted<WebCore::AudioBuffer>::deref(result, v12);
  }
  v14 = (_DWORD *)*((_QWORD *)a2 + 28);
  if (v14)
    ++*v14;
  *(_QWORD *)this = v14;
  return result;
}

void WebCore::ScriptProcessorNode::process(WebCore::ScriptProcessorNode *this, unint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  WebCore::AudioBuffer *v4;
  unint64_t k;
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  unsigned int *v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  _BOOL4 v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF **v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  void **v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t i;
  uint64_t v64;
  void **v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char *v87;

  if (*((_DWORD *)this + 17))
    v9 = **((_QWORD **)this + 7);
  else
    v9 = 0;
  if (*(_DWORD *)(v9 + 28) == 1 && !*(_DWORD *)(*(_QWORD *)(v9 + 64) + 140))
  {
    v27 = **(_QWORD **)(v9 + 16);
    v28 = *(unsigned __int8 *)(v27 + 32);
    v29 = (uint64_t *)(v27 + 24);
    v10 = (uint64_t *)(v27 + 16);
    if (v28)
      v10 = v29;
  }
  else
  {
    v10 = (uint64_t *)(v9 + 80);
  }
  if (*((_DWORD *)this + 21))
    v11 = **((_QWORD **)this + 9);
  else
    v11 = 0;
  v12 = 24;
  if (!*(_BYTE *)(v11 + 32))
    v12 = 16;
  v13 = *((unsigned int *)this + 44);
  if (v13 >= 2)
  {
    __break(1u);
    goto LABEL_116;
  }
  v14 = *v10;
  v3 = *(_QWORD *)(v11 + v12);
  v2 = (unsigned __int8 *)this + v13 + 180;
  do
  {
    while (1)
    {
      v15 = *v2;
      if ((v15 & 1) != 0)
      {
        v62 = *(unsigned int *)(v3 + 28);
        if ((_DWORD)v62)
        {
          for (i = 0; i < v62; ++i)
          {
            v64 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * i);
            if (!*(_BYTE *)(v64 + 24))
            {
              *(_BYTE *)(v64 + 24) = 1;
              v65 = *(void ***)(v64 + 8);
              v66 = (_QWORD *)(v64 + 16);
              if (v65)
                v66 = v65 + 1;
              else
                v65 = (void **)v64;
              bzero(*v65, 4 * *v66);
              v62 = *(unsigned int *)(v3 + 28);
            }
          }
        }
        return;
      }
      v16 = __ldaxr(v2);
      if (v16 == v15)
        break;
      __clrex();
    }
  }
  while (__stxr(v15 | 1, v2));
  v17 = (char *)this + 8 * v13;
  k = *((_QWORD *)v17 + 23);
  v4 = (WebCore::AudioBuffer *)*((_QWORD *)v17 + 25);
  v6 = *(unsigned int *)(*((_QWORD *)this + 32) + 28);
  if (!v4)
    goto LABEL_42;
  v18 = (unsigned int *)*((_QWORD *)v4 + 2);
  if (v18)
    v19 = v18 + 2;
  else
    v19 = 0;
  if (v18)
    v18 += 2 * *v18 + 2;
  v20 = *((_QWORD *)this + 29);
  if (v19 == v18)
  {
LABEL_34:
    j = *((_QWORD *)v4 + 1);
    goto LABEL_39;
  }
  if (*MEMORY[0x1E0CC10F0])
    goto LABEL_117;
  while (1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v19 + 32);
    if (!v21)
      break;
    v22 = *(_QWORD *)(v21 + 16);
    if (!v22)
      break;
    v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    v24 = v22 & 0x3FFFFFFFFLL;
    if (v23 && v24 + v23 == 0)
      break;
    v19 += 2;
    if (v19 == v18)
      goto LABEL_34;
  }
  for (j = 0; ; j = 0)
  {
LABEL_39:
    if (v20 == j)
    {
      v30 = *((unsigned int *)this + 60) + a2 <= v20;
      if (!(_DWORD)v6)
        goto LABEL_63;
    }
    else
    {
LABEL_42:
      v30 = 0;
      if (!(_DWORD)v6)
        goto LABEL_63;
    }
    if (!k)
      v30 = 0;
    if (!v30)
      goto LABEL_109;
    v31 = *(unsigned int **)(k + 16);
    if (v31)
      v32 = v31 + 2;
    else
      v32 = 0;
    if (v31)
      v31 += 2 * *v31 + 2;
    if (v32 == v31)
    {
LABEL_60:
      v38 = *(_QWORD *)(k + 8);
    }
    else if (*MEMORY[0x1E0CC10F0])
    {
      while (1)
      {
        v75 = *(_QWORD *)(*(_QWORD *)v32 + 32);
        if (!v75)
          break;
        v76 = *(_QWORD *)(v75 + 16);
        if (!v76)
          break;
        v77 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v77)
        {
          v78 = v76 & 0x3FFFFFFFFLL;
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v78 + v77 == 0)
            break;
        }
        v32 += 2;
        if (v32 == v31)
          goto LABEL_60;
      }
      v38 = 0;
    }
    else
    {
      while (1)
      {
        v33 = *(_QWORD *)(*(_QWORD *)v32 + 32);
        if (!v33)
          break;
        v34 = *(_QWORD *)(v33 + 16);
        if (!v34)
          break;
        v35 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        v36 = v34 & 0x3FFFFFFFFLL;
        if (v35 && v36 + v35 == 0)
          break;
        v32 += 2;
        if (v32 == v31)
          goto LABEL_60;
      }
      v38 = 0;
    }
    v30 = *((_QWORD *)this + 29) == v38;
LABEL_63:
    if (!a2)
      goto LABEL_109;
    if (!v30)
      goto LABEL_109;
    v39 = *((_QWORD *)this + 29);
    if (v39 < a2)
      goto LABEL_109;
    if (v39 % a2)
      goto LABEL_109;
    if ((_DWORD)v6 != *((_DWORD *)this + 61))
      goto LABEL_109;
    v40 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v40 != *((_DWORD *)this + 62))
      goto LABEL_109;
    v82 = v3;
    if ((_DWORD)v6)
    {
      v80 = v14;
      v81 = v13;
      v41 = 0;
      v84 = v6;
      v85 = k;
      v83 = *(unsigned int *)(v3 + 28);
      do
      {
        v42 = *((_QWORD *)this + 32);
        v43 = WebCore::AudioBuffer::rawChannelData((WebCore::AudioBuffer *)k, v41);
        if (v41 < *(unsigned int *)(v42 + 28))
        {
          v45 = v43;
          v46 = a2;
          v47 = *((unsigned int *)this + 60);
          v48 = *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * v41);
          v49 = *(WTF ***)(v48 + 8);
          *(_QWORD *)(v48 + 8) = 0;
          if (v49)
          {
            WTF::fastAlignedFree(*v49, v44);
            WTF::fastFree((WTF *)v49, v50);
          }
          *(_QWORD *)v48 = v45 + 4 * v47;
          a2 = v46;
          *(_QWORD *)(v48 + 16) = v46;
          *(_BYTE *)(v48 + 24) = 0;
          *(_QWORD *)(v42 + 8) = v46;
          v6 = v84;
          k = v85;
          v40 = v83;
        }
        ++v41;
      }
      while (v6 != v41);
      v6 = *((_QWORD *)this + 32);
      v13 = v81;
      if (v80 != v6)
      {
        v51 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v51)
        {
          for (k = 0; k < v51; ++k)
          {
            v52 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * k);
            if (!*(_BYTE *)(v52 + 24))
            {
              *(_BYTE *)(v52 + 24) = 1;
              v53 = *(void ***)(v52 + 8);
              v54 = (_QWORD *)(v52 + 16);
              if (v53)
                v54 = v53 + 1;
              else
                v53 = (void **)v52;
              bzero(*v53, 4 * *v54);
              v51 = *(unsigned int *)(v6 + 28);
            }
          }
        }
        WebCore::AudioBus::sumFrom(v6, v80, 0);
      }
    }
    v3 = v82;
    if ((_DWORD)v40)
    {
      k = 0;
      v6 = 4 * a2;
      do
      {
        if (k >= *(unsigned int *)(v82 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x195564284);
        }
        v55 = *(_QWORD *)(*(_QWORD *)(v82 + 16) + 8 * k);
        *(_BYTE *)(v55 + 24) = 0;
        v56 = *(void **)v55;
        if (!*(_QWORD *)v55)
          v56 = **(void ***)(v55 + 8);
        v57 = WebCore::AudioBuffer::rawChannelData(v4, k);
        memcpy(v56, (const void *)(v57 + 4 * *((unsigned int *)this + 60)), 4 * a2);
        ++k;
      }
      while (v40 != k);
    }
    v58 = (*((unsigned int *)this + 60) + a2) % *((_QWORD *)this + 29);
    *((_DWORD *)this + 60) = v58;
    if (v58)
      goto LABEL_109;
    v59 = *((unsigned int *)this + 12);
    if ((_DWORD)v59 != -1)
      break;
LABEL_116:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_117:
    while (1)
    {
      v70 = *(_QWORD *)(*(_QWORD *)v19 + 32);
      if (!v70)
        break;
      v71 = *(_QWORD *)(v70 + 16);
      if (!v71)
        break;
      v72 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v72)
      {
        v73 = v71 & 0x3FFFFFFFFLL;
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v73 + v72 == 0)
          break;
      }
      v19 += 2;
      if (v19 == v18)
        goto LABEL_34;
    }
  }
  v87 = &v86;
  v60 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v59])(&v87, (char *)this + 40);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 72))(v60))
  {
    WebCore::AudioNode::ref(this);
    v61 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v61 = &off_1E336BF30;
    *(_QWORD *)(v61 + 8) = this;
    *(_DWORD *)(v61 + 16) = v13;
    *(_QWORD *)(v61 + 24) = this;
    v87 = (char *)v61;
    WTF::callOnMainThreadAndWait();
  }
  else
  {
    WebCore::AudioNode::ref(this);
    v67 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v67 = &off_1E336BF58;
    *(_QWORD *)(v67 + 8) = this;
    *(_DWORD *)(v67 + 16) = v13;
    *(_QWORD *)(v67 + 24) = this;
    v87 = (char *)v67;
    WTF::callOnMainThread();
  }
  v68 = v87;
  v87 = 0;
  if (v68)
    (*(void (**)(char *))(*(_QWORD *)v68 + 8))(v68);
  *((_DWORD *)this + 44) = (*((_DWORD *)this + 44) & 1) == 0;
LABEL_109:
  v69 = __ldxr(v2);
  if (v69 == 1)
  {
    if (!__stlxr(0, v2))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
}

uint64_t WebCore::ScriptProcessorNode::fireProcessEvent(uint64_t this, unsigned int a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WebCore::AudioBuffer *v6;
  uint64_t v7;
  char v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::AudioBuffer *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  WebCore::AudioBuffer *v20;
  void *v21;
  WTF **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  _DWORD *v28;
  void *v29;
  unsigned int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  double v39;
  char v40;
  WebCore::AudioBuffer *v41;

  if (a2 >= 2)
  {
    __break(1u);
LABEL_42:
    v34 = v8;
    v35 = this;
    v39 = a3;
    this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
    a3 = v39;
    v25 = *(_QWORD *)(v35 + 40);
    v8 = v34;
    goto LABEL_21;
  }
  v4 = this;
  v10 = this + 8 * a2;
  v3 = *(_QWORD *)(v10 + 200);
  if (!v3)
    return this;
  v11 = *(unsigned int *)(this + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_43;
  v12 = *(WebCore::AudioBuffer **)(v10 + 184);
  v41 = (WebCore::AudioBuffer *)&v40;
  this = ((uint64_t (*)(WebCore::AudioBuffer **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v41, this + 40);
  if (*(_BYTE *)(this + 379))
    return this;
  v13 = *(unsigned int *)(v4 + 48);
  if ((_DWORD)v13 == -1
    || (v41 = (WebCore::AudioBuffer *)&v40,
        v14 = ((uint64_t (*)(WebCore::AudioBuffer **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v41, v4 + 40), v15 = atomic_load((unint64_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) + 152)), v16 = *(unsigned int *)(v4 + 48), (_DWORD)v16 == -1))
  {
LABEL_43:
    v36 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ScriptProcessorNode::setChannelCount(v36, v37, v38);
  }
  v17 = *(_QWORD *)(v4 + 232);
  v41 = (WebCore::AudioBuffer *)&v40;
  v18 = ((uint64_t (*)(WebCore::AudioBuffer **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v16])(&v41, v4 + 40);
  v19 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 88))(v18) + 160);
  if (!v12)
    goto LABEL_14;
  v20 = *(WebCore::AudioBuffer **)(v4 + 216);
  if (!v20 || !WebCore::AudioBuffer::copyTo(v12, v20))
  {
    WebCore::AudioBuffer::clone((uint64_t)v12, 1, (unint64_t **)&v41);
    v22 = *(WTF ***)(v4 + 216);
    *(_QWORD *)(v4 + 216) = v41;
    if (v22)
      WTF::RefCounted<WebCore::AudioBuffer>::deref(v22, v21);
  }
  v5 = *(WTF ***)(v4 + 216);
  if (v5)
  {
    ++*(_DWORD *)v5;
    WebCore::ScriptProcessorNode::createOutputBufferForJS((WebCore::ScriptProcessorNode *)&v41, (WebCore::AudioBuffer *)v4, (const WebCore::AudioBuffer *)v3);
    v8 = 0;
    ++*(_DWORD *)v5;
  }
  else
  {
LABEL_14:
    WebCore::ScriptProcessorNode::createOutputBufferForJS((WebCore::ScriptProcessorNode *)&v41, (WebCore::AudioBuffer *)v4, (const WebCore::AudioBuffer *)v3);
    v5 = 0;
    v8 = 1;
  }
  v6 = v41;
  if (v41)
    ++*(_DWORD *)v41;
  v23 = v17 + v15;
  this = bmalloc::api::isoAllocate();
  v7 = this;
  v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v24 || (this = *(_QWORD *)(v24 + 96)) == 0)
    this = WebCore::threadGlobalDataSlow((WebCore *)this);
  a3 = (double)v23;
  v9 = v19;
  v25 = *(_QWORD *)(this + 40);
  if (!v25)
    goto LABEL_42;
LABEL_21:
  v26 = a3 / v9;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 16) = 1;
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x120202 | (*(_QWORD *)(v25 + 160) != 0);
  v28 = *(_DWORD **)(v25 + 160);
  if (v28)
    *v28 += 2;
  *(_QWORD *)(v7 + 24) = v28;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v27;
  *(_QWORD *)v7 = off_1E3368D28;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(double *)(v7 + 88) = v26;
  WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v4, (WebCore::Event *)v7);
  if (*(_DWORD *)(v7 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  else
    --*(_DWORD *)(v7 + 16);
  this = WebCore::AudioBuffer::copyTo(v6, (WebCore::AudioBuffer *)v3);
  if ((this & 1) == 0)
  {
    v30 = *(unsigned int **)(v3 + 16);
    if (v30)
      v31 = (uint64_t *)(v30 + 2);
    else
      v31 = 0;
    if (v30)
      v32 = (uint64_t)&v30[2 * *v30 + 2];
    else
      v32 = 0;
    while (v31 != (uint64_t *)v32)
    {
      v33 = *v31++;
      this = JSC::GenericTypedArrayView<JSC::Float32Adaptor>::zeroFill(v33);
    }
    *(_DWORD *)(v3 + 36) = 0;
  }
  if (v6)
    this = (uint64_t)WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v6, v29);
  if ((v8 & 1) == 0)
    return (uint64_t)WTF::RefCounted<WebCore::AudioBuffer>::deref(v5, v29);
  return this;
}

uint64_t WebCore::ScriptProcessorNode::setChannelCount@<X0>(uint64_t this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char v4;

  if (*(_DWORD *)(this + 136) == a2)
  {
    v4 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 1;
  }
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 16) = v4;
  return this;
}

uint64_t WebCore::ScriptProcessorNode::setChannelCountMode@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char v4;
  char v5;

  if (*(_DWORD *)(result + 140) == a2)
  {
    v4 = 0;
    v5 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 1;
    v4 = 6;
  }
  *(_BYTE *)a3 = v4;
  *((_BYTE *)a3 + 16) = v5;
  return result;
}

double WebCore::ScriptProcessorNode::tailTime(WebCore::ScriptProcessorNode *this)
{
  return INFINITY;
}

double WebCore::ScriptProcessorNode::latencyTime(WebCore::ScriptProcessorNode *this)
{
  return INFINITY;
}

uint64_t WebCore::ScriptProcessorNode::requiresTailProcessing(WebCore::ScriptProcessorNode *this)
{
  return 1;
}

WebCore::EventNames **WebCore::ScriptProcessorNode::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 160);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 264) = v6;
  return this;
}

uint64_t WebCore::ScriptProcessorNode::virtualHasPendingActivity(WebCore::ScriptProcessorNode *this)
{
  uint64_t v1;
  WebCore::ScriptProcessorNode *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::ScriptProcessorNode *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v6 = &v5;
    return *(_BYTE *)(((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, (char *)this + 40)+ 376) != 3&& *((_BYTE *)this + 264) != 0;
  }
}

WebCore::StereoPannerNode *`non-virtual thunk to'WebCore::ScriptProcessorNode::virtualHasPendingActivity(WebCore::ScriptProcessorNode *this)
{
  uint64_t v1;
  WebCore::StereoPannerNode *v4;
  WebCore::BaseAudioContext *v5;
  float v6;
  char v7;
  char *v8;

  v1 = *((unsigned int *)this - 26);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::StereoPannerNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StereoPannerNode::StereoPannerNode(v4, v5, v6);
  }
  else
  {
    v8 = &v7;
    if (*(_BYTE *)(((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v8, (char *)this - 112)+ 376) == 3)return 0;
    else
      return (WebCore::StereoPannerNode *)(*((_BYTE *)this + 112) != 0);
  }
}

WebCore::StereoPannerNode *WebCore::StereoPannerNode::StereoPannerNode(WebCore::StereoPannerNode *this, WebCore::BaseAudioContext *a2, float a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _OWORD *v22;
  WTF::StringImpl *v24[4];

  *(_QWORD *)this = off_1E3368A80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E3368BA8;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 18;
  v6 = (unsigned int *)((char *)a2 + 24);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *((_QWORD *)this + 5) = a2;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  *((_DWORD *)this + 26) = 1;
  *(_QWORD *)((char *)this + 108) = 0;
  v13 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 112))(a2);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *((_QWORD *)this + 15) = v13;
  v16 = *((_QWORD *)a2 + 9);
  v17 = *((_QWORD *)a2 + 10) + 1;
  *((_QWORD *)a2 + 10) = v17;
  v18 = (WTF::StringImpl *)(v16 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v17);
  *((_QWORD *)this + 16) = v18;
  *((_QWORD *)this + 17) = 2;
  *((_DWORD *)this + 36) = 0;
  v24[0] = (WTF::StringImpl *)"AudioNode";
  v24[1] = (WTF::StringImpl *)10;
  v24[2] = (WTF::StringImpl *)"AudioNode";
  v24[3] = v18;
  if (*(_BYTE *)(v13 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v24);
  (*(void (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 136))(a2);
  *(_QWORD *)this = off_1E336BBC0;
  *((_QWORD *)this + 3) = &unk_1E336BCE8;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 19) = WebCore::AudioParam::AudioParam(v19, a2, (_DWORD **)v24, 0, 1, a3, -1.0, 1.0);
  v21 = v24[0];
  v24[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  WTF::fastAlignedFree(0, v20);
  v22 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 20) = v22;
  *((_QWORD *)this + 21) = 128;
  *v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[8] = 0u;
  v22[9] = 0u;
  v22[10] = 0u;
  v22[11] = 0u;
  v22[12] = 0u;
  v22[13] = 0u;
  v22[14] = 0u;
  v22[15] = 0u;
  v22[16] = 0u;
  v22[17] = 0u;
  v22[18] = 0u;
  v22[19] = 0u;
  v22[20] = 0u;
  v22[21] = 0u;
  v22[22] = 0u;
  v22[23] = 0u;
  v22[24] = 0u;
  v22[25] = 0u;
  v22[26] = 0u;
  v22[27] = 0u;
  v22[28] = 0u;
  v22[29] = 0u;
  v22[30] = 0u;
  v22[31] = 0u;
  WebCore::AudioNode::addInput(this);
  WebCore::AudioNode::addOutput(this, (void *)2);
  *((_BYTE *)this + 32) = 1;
  return this;
}

void WebCore::StereoPannerNode::~StereoPannerNode(WebCore::StereoPannerNode *this, void *a2)
{
  void *v3;
  WebCore::AudioParam *v4;
  WTF *v5;
  void *v6;

  *((_BYTE *)this + 32) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 20), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::AudioNode::~AudioNode(this, v3);
}

{
  void *v3;
  WebCore::AudioParam *v4;
  bmalloc::api *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *((_BYTE *)this + 32) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 20), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::AudioNode::~AudioNode(this, v3);
  bmalloc::api::isoDeallocate(v5, v6);
}

void `non-virtual thunk to'WebCore::StereoPannerNode::~StereoPannerNode(WebCore::StereoPannerNode *this, void *a2)
{
  void *v3;
  WebCore::AudioParam *v4;
  WTF *v5;
  void *v6;

  *((_BYTE *)this + 8) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 17), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::AudioNode::~AudioNode((WebCore::StereoPannerNode *)((char *)this - 24), v3);
}

{
  void *v3;
  WebCore::AudioParam *v4;
  bmalloc::api *v5;
  void *v6;
  WTF *v7;
  void *v8;

  *((_BYTE *)this + 8) = 0;
  WTF::fastAlignedFree(*((WTF **)this + 17), a2);
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, v3);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  WebCore::AudioNode::~AudioNode((WebCore::StereoPannerNode *)((char *)this - 24), v3);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::StereoPannerNode::process(WebCore::StereoPannerNode *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  _BOOL4 hasSampleAccurateValues;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t j;
  uint64_t v23;
  void **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::BaseAudioContext *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float v41;

  if (*((_DWORD *)this + 21))
    v4 = **((_QWORD **)this + 9);
  else
    v4 = 0;
  v5 = 24;
  if (!*(_BYTE *)(v4 + 32))
    v5 = 16;
  v6 = *(_QWORD *)(v4 + v5);
  if (!*((_BYTE *)this + 32))
    goto LABEL_20;
  if (*((_DWORD *)this + 17))
  {
    v7 = **((_QWORD **)this + 7);
    v8 = *(_DWORD *)(v7 + 28);
    if (!v8)
    {
LABEL_20:
      v16 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v16)
      {
        for (i = 0; i < v16; ++i)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * i);
          if (!*(_BYTE *)(v18 + 24))
          {
            *(_BYTE *)(v18 + 24) = 1;
            v19 = *(void ***)(v18 + 8);
            v20 = (_QWORD *)(v18 + 16);
            if (v19)
              v20 = v19 + 1;
            else
              v19 = (void **)v18;
            bzero(*v19, 4 * *v20);
            v16 = *(unsigned int *)(v6 + 28);
          }
        }
      }
      return;
    }
  }
  else
  {
    v8 = MEMORY[0x1C];
    if (!MEMORY[0x1C])
      goto LABEL_20;
    v7 = 0;
  }
  if (v8 == 1 && !*(_DWORD *)(*(_QWORD *)(v7 + 64) + 140))
  {
    v33 = **(_QWORD **)(v7 + 16);
    v34 = *(unsigned __int8 *)(v33 + 32);
    v35 = (uint64_t *)(v33 + 24);
    v9 = (uint64_t *)(v33 + 16);
    if (v34)
      v9 = v35;
  }
  else
  {
    v9 = (uint64_t *)(v7 + 80);
  }
  v10 = *v9;
  if (*v9)
  {
    hasSampleAccurateValues = WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 19));
    v12 = *((_QWORD *)this + 19);
    if (hasSampleAccurateValues && !*(_BYTE *)(v12 + 104))
    {
      v36 = (float *)*((_QWORD *)this + 20);
      v37 = *(_QWORD *)(v12 + 8);
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 8);
        if (v38)
        {
          v39 = atomic_load((unint64_t *)(v38 + 240));
          v40 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v40)
            v40 = WTF::Thread::initializeCurrentTLS(0);
          if ((_DWORD)a2 && v36 && v40 == v39)
            WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v12, v36, a2, *(_BYTE *)(v12 + 104) == 0);
        }
      }
      WebCore::StereoPanner::panWithSampleAccurateValues(v10, v6, v36, a2);
    }
    else
    {
      v13 = WebCore::AudioParam::hasSampleAccurateValues(*((WebCore::AudioParam **)this + 19));
      v14 = *((_QWORD *)this + 19);
      if (v13)
      {
        v41 = 0.0;
        WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v14, &v41, 1u, 0);
        v15 = v41;
      }
      else
      {
        v26 = *(_QWORD *)(v14 + 8);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 8);
          if (v27)
          {
            v28 = atomic_load((unint64_t *)(v27 + 240));
            v29 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v29)
              v29 = WTF::Thread::initializeCurrentTLS(0);
            if (v29 == v28)
            {
              v30 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8);
              v31 = v30 ? (WebCore::BaseAudioContext *)(v30 - 32) : 0;
              v32 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v14 + 112), v31, *(float *)(v14 + 88), *(float *)(v14 + 96), *(float *)(v14 + 100));
              if ((v32 & 0xFF00000000) != 0)
                *(_DWORD *)(v14 + 88) = v32;
            }
          }
        }
        v15 = *(float *)(v14 + 88);
      }
      WebCore::StereoPanner::panToTargetValue(v10, v6, a2, v15);
    }
  }
  else
  {
    v21 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v21)
    {
      for (j = 0; j < v21; ++j)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * j);
        if (!*(_BYTE *)(v23 + 24))
        {
          *(_BYTE *)(v23 + 24) = 1;
          v24 = *(void ***)(v23 + 8);
          v25 = (_QWORD *)(v23 + 16);
          if (v24)
            v25 = v24 + 1;
          else
            v24 = (void **)v23;
          bzero(*v24, 4 * *v25);
          v21 = *(unsigned int *)(v6 + 28);
        }
      }
    }
  }
}

void WebCore::StereoPannerNode::processOnlyAudioParams(WebCore::StereoPannerNode *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  float v8[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 19);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = atomic_load((unint64_t *)(v4 + 240));
      v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v7)
        v7 = WTF::Thread::initializeCurrentTLS(0);
      if (a2)
      {
        if (v7 == v6)
          WebCore::AudioParam::calculateFinalValues((WebCore::AudioParam *)v2, v8, a2, *(_BYTE *)(v2 + 104) == 0);
      }
    }
  }
}

WTF::Thread *WebCore::StereoPannerNode::setChannelCount@<X0>(WebCore::StereoPannerNode *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::Thread *result;

  if (a2 < 3)
    return WebCore::AudioNode::setChannelCount(this, a2, (_QWORD *)a3);
  result = (WTF::Thread *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t WebCore::StereoPannerNode::setChannelCountMode@<X0>(uint64_t a1@<X0>, WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  if ((_DWORD)a2)
    return WebCore::AudioNode::setChannelCountMode(a1, a2, (_QWORD *)a3);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 6;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

WebCore::DownSampler *WebCore::WaveShaperDSPKernel::lazyInitializeOversampling(WebCore::DownSampler *this)
{
  WebCore::DownSampler *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  WTF **v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  WTF **v12;
  void *v13;
  WebCore::UpSampler *v14;
  WebCore::UpSampler *v15;
  void *v16;
  WTF **v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  WebCore::DownSampler *v22;
  WebCore::DownSampler *v23;
  void *v24;
  WTF **v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  WebCore::UpSampler *v30;
  WebCore::UpSampler *v31;
  void *v32;
  WTF **v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  WebCore::DownSampler *v38;
  void *v39;
  WTF **v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  if (!*((_QWORD *)this + 3))
  {
    v1 = this;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = 0;
    v2[1] = 0;
    WTF::fastAlignedFree(0, v3);
    v4 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *v2 = v4;
    v2[1] = 256;
    bzero(v4, 0x400uLL);
    v6 = (WTF **)*((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = v2;
    if (v6)
    {
      WTF::fastAlignedFree(*v6, v5);
      WTF::fastFree((WTF *)v6, v7);
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = 0;
    v8[1] = 0;
    WTF::fastAlignedFree(0, v9);
    v10 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *v8 = v10;
    v8[1] = 512;
    bzero(v10, 0x800uLL);
    v12 = (WTF **)*((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = v8;
    if (v12)
    {
      WTF::fastAlignedFree(*v12, v11);
      WTF::fastFree((WTF *)v12, v13);
    }
    v14 = (WebCore::UpSampler *)WTF::fastMalloc((WTF *)0x50);
    v15 = WebCore::UpSampler::UpSampler(v14, 0x80uLL);
    v17 = (WTF **)*((_QWORD *)v1 + 5);
    *((_QWORD *)v1 + 5) = v15;
    if (v17)
    {
      WTF::fastAlignedFree(v17[8], v16);
      WTF::fastAlignedFree(v17[6], v18);
      WTF::fastAlignedFree(v17[4], v19);
      WTF::fastAlignedFree(v17[1], v20);
      WTF::fastFree((WTF *)v17, v21);
    }
    v22 = (WebCore::DownSampler *)WTF::fastMalloc((WTF *)0x50);
    v23 = WebCore::DownSampler::DownSampler(v22, 0x100uLL);
    v25 = (WTF **)*((_QWORD *)v1 + 6);
    *((_QWORD *)v1 + 6) = v23;
    if (v25)
    {
      WTF::fastAlignedFree(v25[8], v24);
      WTF::fastAlignedFree(v25[6], v26);
      WTF::fastAlignedFree(v25[4], v27);
      WTF::fastAlignedFree(v25[1], v28);
      WTF::fastFree((WTF *)v25, v29);
    }
    v30 = (WebCore::UpSampler *)WTF::fastMalloc((WTF *)0x50);
    v31 = WebCore::UpSampler::UpSampler(v30, 0x100uLL);
    v33 = (WTF **)*((_QWORD *)v1 + 7);
    *((_QWORD *)v1 + 7) = v31;
    if (v33)
    {
      WTF::fastAlignedFree(v33[8], v32);
      WTF::fastAlignedFree(v33[6], v34);
      WTF::fastAlignedFree(v33[4], v35);
      WTF::fastAlignedFree(v33[1], v36);
      WTF::fastFree((WTF *)v33, v37);
    }
    v38 = (WebCore::DownSampler *)WTF::fastMalloc((WTF *)0x50);
    this = WebCore::DownSampler::DownSampler(v38, 0x200uLL);
    v40 = (WTF **)*((_QWORD *)v1 + 8);
    *((_QWORD *)v1 + 8) = this;
    if (v40)
    {
      WTF::fastAlignedFree(v40[8], v39);
      WTF::fastAlignedFree(v40[6], v41);
      WTF::fastAlignedFree(v40[4], v42);
      WTF::fastAlignedFree(v40[1], v43);
      return (WebCore::DownSampler *)WTF::fastFree((WTF *)v40, v44);
    }
  }
  return this;
}

_QWORD *WebCore::WaveShaperDSPKernel::process(_QWORD *this, const float *a2, float *a3, unint64_t a4)
{
  _QWORD *v5;
  int v6;
  float *v7;

  v5 = this;
  v6 = *(_DWORD *)(this[1] + 56);
  switch(v6)
  {
    case 2:
      return WebCore::WaveShaperDSPKernel::processCurve4x(this, a2, a3, a4);
    case 1:
      if (a4 == 128)
      {
        v7 = *(float **)this[3];
        WebCore::UpSampler::process((_QWORD *)this[5], a2, v7, 0x80uLL);
        WebCore::WaveShaperDSPKernel::processCurve(v5, v7, v7, 0x100uLL);
        return WebCore::DownSampler::process((_QWORD *)v5[6], v7, a3, 0x100uLL);
      }
      break;
    case 0:
      return WebCore::WaveShaperDSPKernel::processCurve(this, a2, a3, a4);
  }
  return this;
}

_QWORD *WebCore::WaveShaperDSPKernel::processCurve(_QWORD *this, const float *a2, float *__dst, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = *(_QWORD *)(this[1] + 48);
  if (!v4)
    return memcpy(__dst, a2, 4 * a4);
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
    return memcpy(__dst, a2, 4 * a4);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return memcpy(__dst, a2, 4 * a4);
  v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v7 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v9 = *(float **)(v4 + 24);
    goto LABEL_15;
  }
  v8 = v6 & 0x3FFFFFFFFLL;
  if ((v6 & 0x3FFFFFFFFLL) + v7)
  {
    v9 = *(float **)(v4 + 24);
    if (v9)
    {
      if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        goto LABEL_15;
      v9 = (float *)(((unint64_t)v9 & 0x3FFFFFFFFLL) + v7);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = -v7;
  if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
  {
    if (v8 == v10)
      return memcpy(__dst, a2, 4 * a4);
  }
  else
  {
    if (*MEMORY[0x1E0CC10F0])
      v27 = 0;
    else
      v27 = v8 == v10;
    if (v27)
      return memcpy(__dst, a2, 4 * a4);
  }
LABEL_15:
  v11 = *(_BYTE *)(v4 + 6);
  if ((v11 & 3) == 0)
  {
    v12 = *(_QWORD *)(v4 + 16);
    goto LABEL_17;
  }
  if (*(_BYTE *)(v5 + 64) && (v28 = *(_QWORD *)(v5 + 32)) != 0)
  {
    v21 = atomic_load((unint64_t *)(v28 + 32));
    v11 = *(_BYTE *)(v4 + 6);
  }
  else
  {
    v21 = *(_QWORD *)(v5 + 48);
  }
  v22 = *(_QWORD *)(v4 + 8);
  if ((v11 & 4) != 0)
  {
    v23 = v21 >= v22;
    v24 = v21 - v22;
    if (!v23)
    {
      v25 = *(_BYTE *)(v4 + 4) - 4;
      if (v25 > 7u)
        LOBYTE(v26) = 0;
      else
        v26 = qword_1968DF058[(char)v25];
      v12 = (-1 << v26) & v24;
      goto LABEL_17;
    }
    return memcpy(__dst, a2, 4 * a4);
  }
  v12 = *(_QWORD *)(v4 + 16);
  v23 = v12 + v22 <= v21 && v21 >= v22;
  if (v23)
    v12 = 0;
LABEL_17:
  v13 = v12 >> 2;
  if (v9)
    v14 = (_DWORD)v13 == 0;
  else
    v14 = 1;
  if (v14)
    return memcpy(__dst, a2, 4 * a4);
  if (a4)
  {
    v15 = 0;
    v16 = v13 - 1;
    do
    {
      v17 = (float)((float)v16 * 0.5) * (float)(a2[v15] + 1.0);
      if (v17 >= 0.0)
      {
        if (v17 >= (float)v16)
        {
          v18 = v9[v16];
        }
        else
        {
          v19 = floorf(v17);
          v20 = vcvtms_u32_f32(v17);
          v18 = (float)((float)(v17 - v19) * v9[v20 + 1]) + (float)((float)(1.0 - (float)(v17 - v19)) * v9[v20]);
        }
      }
      else
      {
        v18 = *v9;
      }
      __dst[v15++] = v18;
    }
    while (a4 > v15);
  }
  return this;
}

_QWORD *WebCore::WaveShaperDSPKernel::processCurve4x(_QWORD *this, const float *a2, float *a3, uint64_t a4)
{
  uint64_t v5;
  float *v6;
  float *v7;

  if (a4 == 128)
  {
    v5 = (uint64_t)this;
    v6 = *(float **)this[3];
    v7 = *(float **)this[4];
    WebCore::UpSampler::process((_QWORD *)this[5], a2, v6, 0x80uLL);
    WebCore::UpSampler::process(*(_QWORD **)(v5 + 56), v6, v7, 0x100uLL);
    WebCore::WaveShaperDSPKernel::processCurve((_QWORD *)v5, v7, v7, 0x200uLL);
    WebCore::DownSampler::process(*(_QWORD **)(v5 + 64), v7, v6, 0x200uLL);
    return WebCore::DownSampler::process(*(_QWORD **)(v5 + 48), v6, a3, 0x100uLL);
  }
  return this;
}

void WebCore::WaveShaperDSPKernel::reset(WebCore::WaveShaperDSPKernel *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    bzero(*(void **)(v1 + 32), 4 * *(_QWORD *)(v1 + 40));
    bzero(*(void **)(v1 + 64), 4 * *(_QWORD *)(v1 + 72));
    v3 = *((_QWORD *)this + 6);
    bzero(*(void **)(v3 + 32), 4 * *(_QWORD *)(v3 + 40));
    bzero(*(void **)(v3 + 64), 4 * *(_QWORD *)(v3 + 72));
    v4 = *((_QWORD *)this + 7);
    bzero(*(void **)(v4 + 32), 4 * *(_QWORD *)(v4 + 40));
    bzero(*(void **)(v4 + 64), 4 * *(_QWORD *)(v4 + 72));
    v5 = *((_QWORD *)this + 8);
    bzero(*(void **)(v5 + 32), 4 * *(_QWORD *)(v5 + 40));
    bzero(*(void **)(v5 + 64), 4 * *(_QWORD *)(v5 + 72));
  }
}

double WebCore::WaveShaperDSPKernel::latencyTime(WebCore::WaveShaperDSPKernel *this)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  double v8;
  int v9;

  v1 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 60);
  do
  {
    while (1)
    {
      v2 = *v1;
      if ((v2 & 1) != 0)
        return INFINITY;
      v3 = __ldaxr(v1);
      if (v3 == v2)
        break;
      __clrex();
    }
  }
  while (__stxr(v2 | 1, v1));
  v4 = *((_QWORD *)this + 1);
  v5 = (unsigned __int8 *)(v4 + 60);
  v6 = *(_DWORD *)(v4 + 56);
  if (v6 == 2)
  {
    v7 = (*(_QWORD *)(*((_QWORD *)this + 6) + 16) >> 1)
       + (*(_QWORD *)(*((_QWORD *)this + 5) + 16) >> 1)
       + (((*(_QWORD *)(*((_QWORD *)this + 8) + 16) >> 1) + (*(_QWORD *)(*((_QWORD *)this + 7) + 16) >> 1)) >> 1);
  }
  else if (v6 == 1)
  {
    v7 = (*(_QWORD *)(*((_QWORD *)this + 6) + 16) >> 1) + (*(_QWORD *)(*((_QWORD *)this + 5) + 16) >> 1);
  }
  else
  {
    v7 = 0;
  }
  v8 = (double)v7 / *((float *)this + 4);
  v9 = __ldxr(v5);
  if (v9 == 1)
  {
    if (!__stlxr(0, v5))
      return v8;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return v8;
}

uint64_t WebCore::WaveShaperDSPKernel::requiresTailProcessing(WebCore::WaveShaperDSPKernel *this)
{
  return 1;
}

uint64_t WebCore::WaveShaperNode::create@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t result;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _BYTE v39[8];
  WTF::StringImpl *v40;
  char v41;
  _BYTE v42[8];
  WTF::StringImpl *v43;
  char v44;
  _DWORD *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  const char *v48;
  unint64_t v49;

  v45 = 0;
  if (!*(_BYTE *)(a2 + 40))
  {
    v12 = 0;
    goto LABEL_17;
  }
  v6 = *(const void **)(a2 + 24);
  v7 = *(unsigned int *)(a2 + 36);
  JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(v7, &v46);
  if (!v46)
  {
    v45 = 0;
LABEL_29:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_30;
  }
  v8 = *(_QWORD *)(v46 + 32);
  if (!v8)
    goto LABEL_13;
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    goto LABEL_13;
  v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v10 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v11 = *(_QWORD *)(v46 + 24);
    goto LABEL_16;
  }
  if (!((v9 & 0x3FFFFFFFFLL) + v10))
  {
LABEL_13:
    v11 = 0;
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v46 + 24);
  if (v11 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    v11 = (v11 & 0x3FFFFFFFFLL) + v10;
LABEL_16:
  memcpy((void *)v11, v6, 4 * v7);
  v12 = v46;
  v45 = (_DWORD *)v46;
  if (!v46)
    goto LABEL_29;
LABEL_17:
  v13 = bmalloc::api::isoAllocate();
  v14 = v13;
  *(_QWORD *)v13 = off_1E3368A80;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = &unk_1E3368BA8;
  *(_BYTE *)(v13 + 32) = 0;
  *(_DWORD *)(v13 + 36) = 16;
  v15 = a1 + 6;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(v13 + 40) = a1;
  *(_DWORD *)(v13 + 48) = 0;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v13 + 88) = _Q0;
  *(_DWORD *)(v13 + 104) = 1;
  *(_QWORD *)(v13 + 108) = 0;
  v22 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 112))(a1);
  v23 = (unsigned int *)(v22 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  *(_QWORD *)(v14 + 120) = v22;
  v25 = *((_QWORD *)a1 + 9);
  v26 = *((_QWORD *)a1 + 10) + 1;
  *((_QWORD *)a1 + 10) = v26;
  v27 = v25 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v26;
  *(_QWORD *)(v14 + 128) = v27;
  *(_QWORD *)(v14 + 136) = 2;
  *(_DWORD *)(v14 + 144) = 0;
  v46 = (uint64_t)"AudioNode";
  v47 = (WTF::StringImpl *)10;
  v48 = "AudioNode";
  v49 = v27;
  if (*(_BYTE *)(v22 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v46);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
  *(_QWORD *)v14 = off_1E3368918;
  *(_QWORD *)(v14 + 24) = &unk_1E3368A40;
  *(_QWORD *)(v14 + 152) = 0;
  WebCore::AudioNode::addInput((WebCore::AudioNode *)v14);
  WebCore::AudioNode::addOutput((WebCore::AudioNode *)v14, (void *)1);
  *(_QWORD *)v14 = off_1E336BD78;
  *(_QWORD *)(v14 + 24) = &unk_1E336BEA0;
  v28 = *(_DWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 88))(a1) + 160);
  v29 = WTF::fastMalloc((WTF *)0x40);
  *(_BYTE *)(v29 + 8) = 0;
  *(_DWORD *)(v29 + 12) = 1;
  *(_DWORD *)(v29 + 16) = v28;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_BYTE *)(v29 + 40) = 1;
  *(_QWORD *)v29 = off_1E336C2D8;
  *(_QWORD *)(v29 + 48) = 0;
  *(_DWORD *)(v29 + 56) = 0;
  *(_BYTE *)(v29 + 60) = 0;
  v30 = *(_QWORD *)(v14 + 152);
  *(_QWORD *)(v14 + 152) = v29;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (!*(_BYTE *)(v14 + 32))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 152) + 16))(*(_QWORD *)(v14 + 152));
    *(_BYTE *)(v14 + 32) = 1;
  }
  v46 = 2;
  LODWORD(v47) = 0;
  WebCore::AudioNode::handleAudioNodeOptions(v14, (unsigned int *)a2, (unsigned int *)&v46, (uint64_t)v42);
  if (v44)
    goto LABEL_28;
  if (!v12)
    goto LABEL_46;
  WebCore::WaveShaperNode::setCurveForBindings((_QWORD *)v14, &v45, (uint64_t)v39);
  LOBYTE(v46) = 0;
  LOBYTE(v48) = 0;
  if (v41)
  {
    LOBYTE(v46) = v39[0];
    v33 = v40;
    v40 = 0;
    v47 = v33;
    LOBYTE(v48) = 1;
  }
  std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v46, (uint64_t)v42);
  if ((_BYTE)v48)
  {
    v35 = v47;
    v47 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  if (v41)
  {
    v36 = v40;
    v40 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v34);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  if (v44)
  {
LABEL_28:
    v31 = v43;
    *(_BYTE *)a3 = v42[0];
    *(_QWORD *)(a3 + 8) = v31;
    *(_DWORD *)(a3 + 16) = 1;
    WebCore::AudioNode::deref((WebCore::AudioNode *)v14);
  }
  else
  {
LABEL_46:
    WebCore::WaveShaperNode::setOversampleForBindings(v14, *(_DWORD *)(a2 + 48));
    *(_QWORD *)a3 = v14;
    *(_DWORD *)(a3 + 16) = 0;
    if (v44)
    {
      v38 = v43;
      v43 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v37);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
  }
LABEL_30:
  result = (uint64_t)v45;
  if (v45)
  {
    if (*v45 == 1)
      return JSC::ArrayBufferView::operator delete();
    else
      --*v45;
  }
  return result;
}

_DWORD *WebCore::WaveShaperNode::setCurveForBindings@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  _DWORD *result;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[4];

  v6 = a1[15];
  v7 = a1[16];
  v51[0] = (uint64_t)"AudioNode";
  v51[1] = 10;
  v51[2] = (uint64_t)"setCurveForBindings";
  v51[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    v8 = WebCore::LogMedia && byte_1ECE7C490 >= 4u;
    if (v8)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 4, (WTF::Logger::LogSiteIdentifier *)v51);
  }
  v9 = (_DWORD *)*a2;
  if (!*a2)
    goto LABEL_30;
  v10 = *((_QWORD *)v9 + 4);
  if (!v10)
    goto LABEL_17;
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    goto LABEL_17;
  v12 = MEMORY[0x1E0CC10F8];
  v13 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v13)
  {
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v11 & 0x3FFFFFFFFLL) + v13))
      goto LABEL_17;
  }
  v14 = *((_BYTE *)v9 + 6);
  if ((v14 & 3) != 0)
  {
    if (*(_BYTE *)(v10 + 64) && (v49 = *(_QWORD *)(v10 + 32)) != 0)
    {
      v26 = atomic_load((unint64_t *)(v49 + 32));
      v14 = *((_BYTE *)v9 + 6);
    }
    else
    {
      v26 = *(_QWORD *)(v10 + 48);
    }
    v27 = *((_QWORD *)v9 + 1);
    if ((v14 & 4) != 0)
    {
      v8 = v26 >= v27;
      v29 = v26 - v27;
      if (v8)
        goto LABEL_17;
      v30 = *((_BYTE *)v9 + 4) - 4;
      if (v30 > 7u)
        LOBYTE(v31) = 0;
      else
        v31 = qword_1968DF058[(char)v30];
      v15 = (-1 << v31) & v29;
    }
    else
    {
      v15 = *((_QWORD *)v9 + 2);
      if (v26 >= v27 && v15 + v27 <= v26)
        goto LABEL_17;
    }
  }
  else
  {
    v15 = *((_QWORD *)v9 + 2);
  }
  if (v15 <= 7)
  {
LABEL_17:
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v17 = (_DWORD *)*a2;
  if (!*a2)
  {
LABEL_30:
    v25 = 0;
    goto LABEL_81;
  }
  v18 = *((_QWORD *)v17 + 4);
  if (!v18 || (v19 = *(_QWORD *)(v18 + 16)) == 0)
  {
    v22 = 0;
    goto LABEL_29;
  }
  v20 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v20 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    v21 = v19 & 0x3FFFFFFFFLL;
    if (v21 + v20)
    {
      v22 = *((_QWORD *)v17 + 3);
      if (v22)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
          goto LABEL_49;
        v22 = (v22 & 0x3FFFFFFFFLL) + v20;
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = -v20;
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && v21 == v23)
      goto LABEL_29;
    goto LABEL_49;
  }
  v22 = *((_QWORD *)v17 + 3);
LABEL_49:
  v32 = *((_BYTE *)v17 + 6);
  if ((v32 & 3) == 0)
  {
    v24 = *((_QWORD *)v17 + 2);
    goto LABEL_51;
  }
  if (*(_BYTE *)(v18 + 64) && (v50 = *(_QWORD *)(v18 + 32)) != 0)
  {
    v37 = atomic_load((unint64_t *)(v50 + 32));
    v32 = *((_BYTE *)v17 + 6);
  }
  else
  {
    v37 = *(_QWORD *)(v18 + 48);
  }
  v38 = *((_QWORD *)v17 + 1);
  if ((v32 & 4) == 0)
  {
    v39 = *((_QWORD *)v17 + 2);
    if (v39 + v38 <= v37 && v37 >= v38)
      v24 = 0;
    else
      v24 = v39;
    goto LABEL_51;
  }
  v8 = v37 >= v38;
  v41 = v37 - v38;
  if (!v8)
  {
    v42 = *((_BYTE *)v17 + 4) - 4;
    if (v42 > 7u)
      LOBYTE(v43) = 0;
    else
      v43 = qword_1968DF058[(char)v42];
    v24 = (-1 << v43) & v41;
    goto LABEL_51;
  }
LABEL_29:
  v24 = 0;
LABEL_51:
  JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(v24 >> 2, v51);
  if (!v51[0])
  {
LABEL_99:
    __break(0xC471u);
    JUMPOUT(0x195565F14);
  }
  v33 = *(_QWORD *)(v51[0] + 32);
  if (!v33)
    goto LABEL_74;
  v34 = *(_QWORD *)(v33 + 16);
  if (!v34)
    goto LABEL_74;
  v35 = *(_QWORD *)(v12 + 56);
  if (!v35 || !*(_BYTE *)(v12 + 34) && *MEMORY[0x1E0CC10F0])
  {
    v36 = *(_QWORD *)(v51[0] + 24);
    goto LABEL_77;
  }
  if (!((v34 & 0x3FFFFFFFFLL) + v35))
  {
LABEL_74:
    v36 = 0;
    goto LABEL_77;
  }
  v36 = *(_QWORD *)(v51[0] + 24);
  if (v36 && (*(_BYTE *)(v12 + 34) || !*MEMORY[0x1E0CC10F0]))
    v36 = (v36 & 0x3FFFFFFFFLL) + v35;
LABEL_77:
  memcpy((void *)v36, (const void *)v22, v24 & 0xFFFFFFFFFFFFFFFCLL);
  v25 = (_DWORD *)v51[0];
  if (!v51[0])
    goto LABEL_99;
  v44 = (_DWORD *)*a2;
  *a2 = v51[0];
  if (v44)
  {
    if (*v44 == 1)
    {
      JSC::ArrayBufferView::operator delete();
      v25 = (_DWORD *)*a2;
    }
    else
    {
      --*v44;
    }
  }
LABEL_81:
  v45 = a1[19];
  v46 = (unsigned __int8 *)(v45 + 60);
  if (__ldaxr((unsigned __int8 *)(v45 + 60)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v46))
  {
    goto LABEL_85;
  }
  MEMORY[0x19AEA534C](v45 + 60);
LABEL_85:
  if (v25)
    ++*v25;
  result = *(_DWORD **)(v45 + 48);
  *(_QWORD *)(v45 + 48) = v25;
  if (result)
  {
    if (*result == 1)
      result = (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  v48 = __ldxr(v46);
  if (v48 == 1)
  {
    if (!__stlxr(0, v46))
      goto LABEL_95;
  }
  else
  {
    __clrex();
  }
  result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)(v45 + 60));
LABEL_95:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

WTF::Thread *WebCore::WaveShaperNode::setOversampleForBindings(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::Thread *result;
  WTF::Thread *v8;
  WTF::Thread *v9;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v16;
  WebCore::DownSampler **v17;
  uint64_t v18;
  WebCore::DownSampler *v19;
  int v20;
  int v21;
  int v22;
  WebCore::WaveShaperNode *v23;
  _QWORD v24[4];
  int v25;
  char v26;

  v25 = a2;
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  v24[0] = "AudioNode";
  v24[1] = 10;
  v24[2] = "setOversampleForBindings";
  v24[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::OverSampleType>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v24, &v25);
  }
  v6 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v6 == -1)
  {
    v23 = (WebCore::WaveShaperNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::Thread *)WebCore::WaveShaperNode::curveForBindings(v23);
  }
  v24[0] = &v26;
  result = (WTF::Thread *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(v24, a1 + 40);
  v8 = result;
  v9 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
  {
    result = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(result);
    v9 = result;
  }
  if (v9 == *((WTF::Thread **)v8 + 35))
  {
    v11 = *((_DWORD *)v8 + 72) + 1;
    goto LABEL_18;
  }
  result = (WTF::Thread *)((char *)v8 + 292);
  if (__ldaxr((unsigned __int8 *)v8 + 292))
  {
    __clrex();
LABEL_16:
    result = (WTF::Thread *)MEMORY[0x19AEA534C]();
    goto LABEL_17;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_16;
LABEL_17:
  *((_QWORD *)v8 + 35) = v9;
  v11 = 1;
LABEL_18:
  *((_DWORD *)v8 + 72) = v11;
  v12 = *(_QWORD *)(a1 + 152);
  if (v25 == 2)
    v13 = 2;
  else
    v13 = v25 == 1;
  v14 = (unsigned __int8 *)(v12 + 60);
  if (__ldaxr((unsigned __int8 *)(v12 + 60)))
  {
    __clrex();
LABEL_24:
    result = (WTF::Thread *)MEMORY[0x19AEA534C](v12 + 60);
    goto LABEL_25;
  }
  if (__stxr(1u, v14))
    goto LABEL_24;
LABEL_25:
  *(_DWORD *)(v12 + 56) = v13;
  if (v13)
  {
    v16 = *(unsigned int *)(v12 + 36);
    if ((_DWORD)v16)
    {
      v17 = *(WebCore::DownSampler ***)(v12 + 24);
      v18 = 8 * v16;
      do
      {
        v19 = *v17++;
        result = WebCore::WaveShaperDSPKernel::lazyInitializeOversampling(v19);
        v18 -= 8;
      }
      while (v18);
    }
  }
  v20 = __ldxr(v14);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v14))
LABEL_33:
    result = (WTF::Thread *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
  v21 = *((_DWORD *)v8 + 72) - 1;
  *((_DWORD *)v8 + 72) = v21;
  if (!v21)
  {
    *((_QWORD *)v8 + 35) = 0;
    result = (WTF::Thread *)((char *)v8 + 292);
    v22 = __ldxr((unsigned __int8 *)v8 + 292);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)result))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Thread *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

_QWORD *WebCore::WaveShaperNode::curveForBindings@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(this[19] + 48);
  if (!v3)
  {
    *a2 = 0;
    return this;
  }
  ++*(_DWORD *)v3;
  v4 = *(_QWORD *)(v3 + 32);
  v5 = MEMORY[0x1E0CC10F8];
  if (!v4 || (v6 = *(_QWORD *)(v4 + 16)) == 0)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v7 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    v8 = v6 & 0x3FFFFFFFFLL;
    if (v8 + v7)
    {
      v9 = *(_QWORD *)(v3 + 24);
      if (v9)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
          goto LABEL_17;
        v9 = (v9 & 0x3FFFFFFFFLL) + v7;
      }
    }
    else
    {
      v9 = 0;
    }
    v10 = -v7;
    if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
    {
      if (v8 == v10)
        goto LABEL_12;
    }
    else
    {
      if (*MEMORY[0x1E0CC10F0])
        v22 = 0;
      else
        v22 = v8 == v10;
      if (v22)
        goto LABEL_12;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v3 + 24);
  }
LABEL_17:
  v12 = *(_BYTE *)(v3 + 6);
  if ((v12 & 3) == 0)
  {
    v11 = *(_QWORD *)(v3 + 16);
    goto LABEL_19;
  }
  if (*(_BYTE *)(v4 + 64) && (v23 = *(_QWORD *)(v4 + 32)) != 0)
  {
    v17 = atomic_load((unint64_t *)(v23 + 32));
    v12 = *(_BYTE *)(v3 + 6);
  }
  else
  {
    v17 = *(_QWORD *)(v4 + 48);
  }
  v18 = *(_QWORD *)(v3 + 8);
  if ((v12 & 4) == 0)
  {
    v19 = *(_QWORD *)(v3 + 16) + v18 <= v17 && v17 >= v18;
    if (v19)
      v11 = 0;
    else
      v11 = *(_QWORD *)(v3 + 16);
    goto LABEL_19;
  }
  v19 = v17 >= v18;
  v20 = v17 - v18;
  if (!v19)
  {
    if ((*(_BYTE *)(v3 + 4) - 4) > 7u)
      LOBYTE(v21) = 0;
    else
      v21 = qword_1968DF058[(char)(*(_BYTE *)(v3 + 4) - 4)];
    v11 = (-1 << v21) & v20;
    goto LABEL_19;
  }
LABEL_12:
  v11 = 0;
LABEL_19:
  JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(v11 >> 2, &v24);
  if (!v24)
  {
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x195566380);
  }
  v13 = *(_QWORD *)(v24 + 32);
  if (!v13)
    goto LABEL_42;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_42;
  v15 = *(_QWORD *)(v5 + 56);
  if (!v15 || !*(_BYTE *)(v5 + 34) && *MEMORY[0x1E0CC10F0])
  {
    v16 = *(_QWORD *)(v24 + 24);
    goto LABEL_45;
  }
  if (!((v14 & 0x3FFFFFFFFLL) + v15))
  {
LABEL_42:
    v16 = 0;
    goto LABEL_45;
  }
  v16 = *(_QWORD *)(v24 + 24);
  if (v16 && (*(_BYTE *)(v5 + 34) || !*MEMORY[0x1E0CC10F0]))
    v16 = (v16 & 0x3FFFFFFFFLL) + v15;
LABEL_45:
  this = memcpy((void *)v16, (const void *)v9, v11 & 0xFFFFFFFFFFFFFFFCLL);
  if (!v24)
    goto LABEL_50;
  *a2 = v24;
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)JSC::ArrayBufferView::operator delete();
  --*(_DWORD *)v3;
  return this;
}

BOOL WebCore::WaveShaperNode::propagatesSilence(WebCore::WaveShaperNode *this)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  _BOOL8 v12;
  int v13;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (unsigned __int8 *)(*((_QWORD *)this + 19) + 60);
  do
  {
    while (1)
    {
      v2 = *v1;
      if ((v2 & 1) != 0)
        return 0;
      v3 = __ldaxr(v1);
      if (v3 == v2)
        break;
      __clrex();
    }
  }
  while (__stxr(v2 | 1, v1));
  v4 = *((_QWORD *)this + 19);
  v5 = (unsigned __int8 *)(v4 + 60);
  v6 = *(_QWORD *)(v4 + 48);
  if (!v6)
  {
    v12 = 1;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7
    || (v8 = *(_QWORD *)(v7 + 16)) == 0
    || (v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v8 & 0x3FFFFFFFFLL) + v9))
  {
LABEL_36:
    v11 = 0;
    goto LABEL_15;
  }
  v10 = *(_BYTE *)(v6 + 6);
  if ((v10 & 3) != 0)
  {
    if (*(_BYTE *)(v7 + 64) && (v21 = *(_QWORD *)(v7 + 32)) != 0)
    {
      v15 = atomic_load((unint64_t *)(v21 + 32));
      v10 = *(_BYTE *)(v6 + 6);
    }
    else
    {
      v15 = *(_QWORD *)(v7 + 48);
    }
    v16 = *(_QWORD *)(v6 + 8);
    if ((v10 & 4) == 0)
    {
      v11 = *(_QWORD *)(v6 + 16);
      v17 = v11 + v16 <= v15 && v15 >= v16;
      if (v17)
        v11 = 0;
      goto LABEL_15;
    }
    v17 = v15 >= v16;
    v18 = v15 - v16;
    if (!v17)
    {
      v19 = *(_BYTE *)(v6 + 4) - 4;
      if (v19 > 7u)
        LOBYTE(v20) = 0;
      else
        v20 = qword_1968DF058[(char)v19];
      v11 = (-1 << v20) & v18;
      goto LABEL_15;
    }
    goto LABEL_36;
  }
  v11 = *(_QWORD *)(v6 + 16);
LABEL_15:
  v12 = v11 < 4;
LABEL_17:
  v13 = __ldxr(v5);
  if (v13 == 1)
  {
    if (!__stlxr(0, v5))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return v12;
}

double WebCore::OscillatorNode::tailTime(WebCore::OscillatorNode *this)
{
  return 0.0;
}

double WebCore::OscillatorNode::latencyTime(WebCore::OscillatorNode *this)
{
  return 0.0;
}

float WebCore::OscillatorNode::noiseInjectionMultiplier(WebCore::OscillatorNode *this)
{
  return 0.01;
}

WTF::Thread *`non-virtual thunk to'WebCore::ScriptProcessorNode::ref(WebCore::ScriptProcessorNode *this)
{
  return WebCore::AudioNode::ref((WebCore::ScriptProcessorNode *)((char *)this - 152));
}

WTF::Thread *`non-virtual thunk to'WebCore::ScriptProcessorNode::deref(WebCore::ScriptProcessorNode *this)
{
  return WebCore::AudioNode::deref((WebCore::ScriptProcessorNode *)((char *)this - 152));
}

double WebCore::StereoPannerNode::tailTime(WebCore::StereoPannerNode *this)
{
  return 0.0;
}

double WebCore::StereoPannerNode::latencyTime(WebCore::StereoPannerNode *this)
{
  return 0.0;
}

uint64_t WebCore::StereoPannerNode::requiresTailProcessing(WebCore::StereoPannerNode *this)
{
  return 0;
}

void WebCore::WaveShaperDSPKernel::~WaveShaperDSPKernel(WebCore::WaveShaperDSPKernel *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::WaveShaperDSPKernel::~WaveShaperDSPKernel(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  WTF **v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  WTF **v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  WTF **v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  WTF **v23;
  void *v24;
  WTF **v25;
  void *v26;

  v3 = (WTF **)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    WTF::fastAlignedFree(v3[8], a2);
    WTF::fastAlignedFree(v3[6], v4);
    WTF::fastAlignedFree(v3[4], v5);
    WTF::fastAlignedFree(v3[1], v6);
    WTF::fastFree((WTF *)v3, v7);
  }
  v8 = (WTF **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    WTF::fastAlignedFree(v8[8], a2);
    WTF::fastAlignedFree(v8[6], v9);
    WTF::fastAlignedFree(v8[4], v10);
    WTF::fastAlignedFree(v8[1], v11);
    WTF::fastFree((WTF *)v8, v12);
  }
  v13 = (WTF **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    WTF::fastAlignedFree(v13[8], a2);
    WTF::fastAlignedFree(v13[6], v14);
    WTF::fastAlignedFree(v13[4], v15);
    WTF::fastAlignedFree(v13[1], v16);
    WTF::fastFree((WTF *)v13, v17);
  }
  v18 = (WTF **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v18)
  {
    WTF::fastAlignedFree(v18[8], a2);
    WTF::fastAlignedFree(v18[6], v19);
    WTF::fastAlignedFree(v18[4], v20);
    WTF::fastAlignedFree(v18[1], v21);
    WTF::fastFree((WTF *)v18, v22);
  }
  v23 = (WTF **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v23)
  {
    WTF::fastAlignedFree(*v23, a2);
    WTF::fastFree((WTF *)v23, v24);
  }
  v25 = (WTF **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
  {
    WTF::fastAlignedFree(*v25, a2);
    WTF::fastFree((WTF *)v25, v26);
  }
}

double WebCore::WaveShaperDSPKernel::tailTime(WebCore::WaveShaperDSPKernel *this)
{
  return 0.0;
}

void WebCore::WaveShaperNode::~WaveShaperNode(WebCore::WaveShaperNode *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::WaveShaperNode::~WaveShaperNode(WebCore::WaveShaperNode *this, void *a2)
{
  uint64_t v3;
  WebCore::AudioNode *v4;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::WaveShaperNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
}

{
  uint64_t v3;
  WebCore::AudioNode *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::WaveShaperNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::OscillatorType>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned __int8 *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint8_t buf[4];
  _BYTE v47[12];
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  result = WTF::Logger::LogSiteIdentifier::toString(this);
  v8 = *a4;
  {
    WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::OscillatorType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_0::operator() const(void)::impl;
    unk_1EE2F48E0 = &WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_1::operator() const(void)::impl;
    qword_1EE2F48E8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_2::operator() const(void)::impl;
    unk_1EE2F48F0 = &WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F48F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_4::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::OscillatorType)::values[v8];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (!v44)
  {
    v10 = 0;
    if (v9)
      goto LABEL_7;
LABEL_80:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)v44 + 1);
  if (!v9)
    goto LABEL_80;
LABEL_7:
  v11 = *(_DWORD *)(v9 + 4);
LABEL_8:
  if ((v11 | v10) < 0 || (result = (v10 + v11), __OFADD__(v10, v11)))
  {
    v45 = 0;
    goto LABEL_85;
  }
  if (v44)
  {
    v12 = *((_DWORD *)v44 + 4);
    v13 = (v12 >> 2) & 1;
    if (!v9 || (v12 & 4) == 0)
    {
LABEL_14:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v44, v9, &v45);
      if (v45)
      {
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
          else
            *(_DWORD *)v9 -= 2;
        }
        goto LABEL_18;
      }
LABEL_85:
      __break(0xC471u);
      return result;
    }
LABEL_13:
    v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
    goto LABEL_14;
  }
  if (v9)
    goto LABEL_13;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, 0, 0, &v45);
  if (!v45)
    goto LABEL_85;
LABEL_18:
  v15 = v44;
  v44 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v47 = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v28 = *a4;
              v48 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::OscillatorType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_0::operator() const(void)::impl;
                unk_1EE2F48E0 = &WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F48E8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_2::operator() const(void)::impl;
                unk_1EE2F48F0 = &WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_4::operator() const(void)::impl += 2;
                qword_1EE2F48F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OscillatorType)::$_4::operator() const(void)::impl;
              }
              v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::OscillatorType)::values[v28];
              if (v29)
                *(_DWORD *)v29 += 2;
              v49 = v29;
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = *(_DWORD *)buf;
              v32 = *(_QWORD *)&v47[4];
              if (*(_QWORD *)&v47[4])
                **(_DWORD **)&v47[4] += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v48;
              v33 = v49;
              if (v49)
                *(_DWORD *)v49 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v49;
              v49 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = *(WTF::StringImpl **)&v47[4];
              *(_QWORD *)&v47[4] = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptProcessorNode::process(unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WebCore::AudioNode *v2;

  *a1 = &off_1E336BF30;
  v2 = (WebCore::AudioNode *)a1[3];
  a1[3] = 0;
  if (v2)
    WebCore::AudioNode::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptProcessorNode::process(unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::AudioNode *v3;

  *(_QWORD *)this = &off_1E336BF30;
  v3 = (WebCore::AudioNode *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WebCore::AudioNode::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptProcessorNode::process(unsigned long)::$_0,void>::call(uint64_t a1, double a2)
{
  return WebCore::ScriptProcessorNode::fireProcessEvent(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptProcessorNode::process(unsigned long)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  WebCore::AudioNode *v2;

  *a1 = &off_1E336BF58;
  v2 = (WebCore::AudioNode *)a1[3];
  a1[3] = 0;
  if (v2)
    WebCore::AudioNode::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptProcessorNode::process(unsigned long)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::AudioNode *v3;

  *(_QWORD *)this = &off_1E336BF58;
  v3 = (WebCore::AudioNode *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WebCore::AudioNode::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptProcessorNode::process(unsigned long)::$_1,void>::call(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;

  v2 = *(unsigned int *)(result + 16);
  if (v2 >= 2)
  {
    __break(1u);
    return result;
  }
  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = (unsigned __int8 *)(v4 + v2 + 180);
  if (__ldaxr(v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_6;
  }
  a2 = MEMORY[0x19AEA534C](v5);
LABEL_6:
  result = WebCore::ScriptProcessorNode::fireProcessEvent(v4, *(_DWORD *)(v3 + 16), a2);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::OverSampleType>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, int *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint8_t buf[4];
  _BYTE v47[12];
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  result = WTF::Logger::LogSiteIdentifier::toString(this);
  v8 = *a4;
  {
    WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::OverSampleType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_0::operator() const(void)::impl;
    unk_1EE2F4910 = &WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4918 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_2::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::OverSampleType)::values[v8];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (!v44)
  {
    v10 = 0;
    if (v9)
      goto LABEL_7;
LABEL_80:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)v44 + 1);
  if (!v9)
    goto LABEL_80;
LABEL_7:
  v11 = *(_DWORD *)(v9 + 4);
LABEL_8:
  if ((v11 | v10) < 0 || (result = (v10 + v11), __OFADD__(v10, v11)))
  {
    v45 = 0;
    goto LABEL_85;
  }
  if (v44)
  {
    v12 = *((_DWORD *)v44 + 4);
    v13 = (v12 >> 2) & 1;
    if (!v9 || (v12 & 4) == 0)
    {
LABEL_14:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v44, v9, &v45);
      if (v45)
      {
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
          else
            *(_DWORD *)v9 -= 2;
        }
        goto LABEL_18;
      }
LABEL_85:
      __break(0xC471u);
      return result;
    }
LABEL_13:
    v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
    goto LABEL_14;
  }
  if (v9)
    goto LABEL_13;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, 0, 0, &v45);
  if (!v45)
    goto LABEL_85;
LABEL_18:
  v15 = v44;
  v44 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v47 = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v28 = *a4;
              v48 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::OverSampleType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_0::operator() const(void)::impl;
                unk_1EE2F4910 = &WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_2::operator() const(void)::impl += 2;
                qword_1EE2F4918 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::OverSampleType)::$_2::operator() const(void)::impl;
              }
              v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::OverSampleType)::values[v28];
              if (v29)
                *(_DWORD *)v29 += 2;
              v49 = v29;
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = *(_DWORD *)buf;
              v32 = *(_QWORD *)&v47[4];
              if (*(_QWORD *)&v47[4])
                **(_DWORD **)&v47[4] += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v48;
              v33 = v49;
              if (v49)
                *(_DWORD *)v49 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v49;
              v49 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = *(WTF::StringImpl **)&v47[4];
              *(_QWORD *)&v47[4] = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::WaveShaperProcessor::~WaveShaperProcessor(WebCore::WaveShaperProcessor *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if (*((_BYTE *)this + 8))
  {
    if (*((_DWORD *)this + 8))
    {
      v3 = *((unsigned int *)this + 9);
      if ((_DWORD)v3)
      {
        v4 = (uint64_t *)*((_QWORD *)this + 3);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          ++v4;
          v5 -= 8;
        }
        while (v5);
        *((_DWORD *)this + 9) = 0;
      }
      v7 = (WTF *)*((_QWORD *)this + 3);
      if (v7)
      {
        *((_QWORD *)this + 3) = 0;
        *((_DWORD *)this + 8) = 0;
        WTF::fastFree(v7, a2);
      }
    }
    *((_BYTE *)this + 8) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*v8 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v8;
  }
  *(_QWORD *)this = off_1E3407510;
  v9 = *((unsigned int *)this + 9);
  v10 = (WTF *)*((_QWORD *)this + 3);
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
    v10 = (WTF *)*((_QWORD *)this + 3);
  }
  if (v10)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v10, a2);
  }
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if (*((_BYTE *)this + 8))
  {
    if (*((_DWORD *)this + 8))
    {
      v3 = *((unsigned int *)this + 9);
      if ((_DWORD)v3)
      {
        v4 = (uint64_t *)*((_QWORD *)this + 3);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          ++v4;
          v5 -= 8;
        }
        while (v5);
        *((_DWORD *)this + 9) = 0;
      }
      v7 = (WTF *)*((_QWORD *)this + 3);
      if (v7)
      {
        *((_QWORD *)this + 3) = 0;
        *((_DWORD *)this + 8) = 0;
        WTF::fastFree(v7, a2);
      }
    }
    *((_BYTE *)this + 8) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*v8 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v8;
  }
  *(_QWORD *)this = off_1E3407510;
  v9 = *((unsigned int *)this + 9);
  v10 = (WTF *)*((_QWORD *)this + 3);
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
    v10 = (WTF *)*((_QWORD *)this + 3);
  }
  if (v10)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WaveShaperProcessor::createKernel@<X0>(WebCore::WaveShaperProcessor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x48);
  v5 = result;
  *(_DWORD *)(result + 16) = *((_DWORD *)this + 4);
  *(_QWORD *)result = off_1E336BD28;
  *(_QWORD *)(result + 8) = this;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  if (*((_DWORD *)this + 14))
    result = (uint64_t)WebCore::WaveShaperDSPKernel::lazyInitializeOversampling((WebCore::DownSampler *)result);
  *a2 = v5;
  return result;
}

void WebCore::WaveShaperProcessor::process(WebCore::WaveShaperProcessor *this, const WebCore::AudioBus *a2, WebCore::AudioBus *a3, unint64_t a4)
{
  int v6;
  unsigned __int8 *v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t j;
  uint64_t v14;
  void **v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  const float *v19;
  _QWORD *v20;
  uint64_t v21;
  float *v22;
  int v23;
  unint64_t v24;
  unint64_t i;
  uint64_t v26;
  void **v27;
  _QWORD *v28;

  if (*((_BYTE *)this + 8))
  {
    v6 = *((_DWORD *)a2 + 7);
    if (v6 == *((_DWORD *)a3 + 7) && *((_DWORD *)this + 9) == v6)
    {
      v9 = (unsigned __int8 *)this + 60;
      do
      {
        while (1)
        {
          v10 = *v9;
          if ((v10 & 1) != 0)
          {
            v24 = *((unsigned int *)a3 + 7);
            if ((_DWORD)v24)
            {
              for (i = 0; i < v24; ++i)
              {
                v26 = *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * i);
                if (!*(_BYTE *)(v26 + 24))
                {
                  *(_BYTE *)(v26 + 24) = 1;
                  v27 = *(void ***)(v26 + 8);
                  v28 = (_QWORD *)(v26 + 16);
                  if (v27)
                    v28 = v27 + 1;
                  else
                    v27 = (void **)v26;
                  bzero(*v27, 4 * *v28);
                  v24 = *((unsigned int *)a3 + 7);
                }
              }
            }
            return;
          }
          v11 = __ldaxr(v9);
          if (v11 == v10)
            break;
          __clrex();
        }
      }
      while (__stxr(v10 | 1, v9));
      if (*((_DWORD *)this + 9))
      {
        v17 = 0;
        do
        {
          if (*((_DWORD *)a2 + 7) <= v17)
            goto LABEL_42;
          v18 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v17);
          v19 = *(const float **)v18;
          if (!*(_QWORD *)v18)
            v19 = **(const float ***)(v18 + 8);
          if (*((_DWORD *)a3 + 7) <= v17)
          {
LABEL_42:
            __break(0xC471u);
            JUMPOUT(0x1955678CCLL);
          }
          v20 = *(_QWORD **)(*((_QWORD *)this + 3) + 8 * v17);
          v21 = *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * v17);
          *(_BYTE *)(v21 + 24) = 0;
          v22 = *(float **)v21;
          if (!*(_QWORD *)v21)
            v22 = **(float ***)(v21 + 8);
          WebCore::WaveShaperDSPKernel::process(v20, v19, v22, a4);
          ++v17;
        }
        while (v17 < *((unsigned int *)this + 9));
      }
      v23 = __ldxr(v9);
      if (v23 == 1)
      {
        if (!__stlxr(0, v9))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WebCore::WaveShaperProcessor *)((char *)this + 60));
    }
  }
  else
  {
    v12 = *((unsigned int *)a3 + 7);
    if ((_DWORD)v12)
    {
      for (j = 0; j < v12; ++j)
      {
        v14 = *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * j);
        if (!*(_BYTE *)(v14 + 24))
        {
          *(_BYTE *)(v14 + 24) = 1;
          v15 = *(void ***)(v14 + 8);
          v16 = (_QWORD *)(v14 + 16);
          if (v15)
            v16 = v15 + 1;
          else
            v15 = (void **)v14;
          bzero(*v15, 4 * *v16);
          v12 = *((unsigned int *)a3 + 7);
        }
      }
    }
  }
}

void WebCore::AuthenticatorResponse::setExtensions(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 24) = *a2;
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>>(a1 + 32, (uint64_t)(a2 + 2));
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>>(a1 + 64, (uint64_t)(a2 + 10));
}

uint64_t *WebCore::AuthenticatorAssertionResponse::create@<X0>(uint64_t a1@<X3>, char a2@<W4>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_DWORD *)(a1 + 12))
  {
    JSC::ArrayBuffer::create();
    v5 = v13;
    v13 = 0;
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v13);
  }
  else
  {
    v5 = 0;
  }
  JSC::ArrayBuffer::create();
  JSC::ArrayBuffer::create();
  JSC::ArrayBuffer::create();
  v6 = WTF::fastMalloc((WTF *)0xD8);
  *(_DWORD *)(v6 + 8) = 1;
  v7 = v13;
  v13 = 0;
  *(_QWORD *)(v6 + 16) = v7;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 96) = 0;
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_BYTE *)(v6 + 112) = a2;
  *(_QWORD *)v6 = off_1E336C350;
  v9 = v11;
  v8 = v12;
  v11 = 0;
  v12 = 0;
  *(_QWORD *)(v6 + 120) = v8;
  *(_QWORD *)(v6 + 128) = v9;
  *(_QWORD *)(v6 + 136) = v5;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_QWORD *)(v6 + 208) = 0;
  *a3 = v6;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v11);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v12);
  return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v13);
}

uint64_t WebCore::AuthenticatorAssertionResponse::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, const void *a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = WTF::fastMalloc((WTF *)0xD8);
  v13 = (_QWORD *)result;
  *(_DWORD *)(result + 8) = 1;
  v14 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v14;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 96) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_BYTE *)(result + 112) = a5;
  *(_QWORD *)result = off_1E336C350;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 136) = v15;
  v16 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 144) = v16;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = a4;
  if (a4)
    result = (uint64_t)CFRetain(a4);
  v13[24] = 0;
  v13[25] = 0;
  v13[26] = 0;
  *a6 = v13;
  return result;
}

uint64_t *WebCore::AuthenticatorAssertionResponse::setAuthenticatorData(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  BOOL v4;
  uint64_t v6;
  void *v7;
  WTF **v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;

  JSC::ArrayBuffer::create();
  v2 = v11;
  v11 = 0;
  v3 = *(_QWORD **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v2;
  if (v3)
  {
    v4 = *(_DWORD *)v3 == 2;
    *(_DWORD *)v3 -= 2;
    if (v4)
    {
      v6 = v3[10];
      if (v6)
      {
        *(_QWORD *)(v6 + 8) = 3;
        v3[10] = 0;
      }
      if ((v3[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v3 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v3 + 2));
      v8 = (WTF **)v3[1];
      if ((v8 & 1) == 0 && v8)
      {
        v10 = (WTF *)v3[1];
        v9 = *v8;
        if (*v8)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v9, v7);
        }
        WTF::fastFree(v10, v7);
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v11);
}

uint64_t WebCore::AuthenticatorAssertionResponse::data@<X0>(WebCore::AuthenticatorAssertionResponse *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t result;
  _DWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _DWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  void *v19;
  WTF **v20;
  WTF *v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = a2 + 16;
  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_QWORD *)(a2 + 152) = 0;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *v5 += 2;
  v28 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v28);
  result = std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs const&,void>(v4, (uint64_t)this + 24);
  *(_BYTE *)a2 = 0;
  v7 = (_DWORD *)*((_QWORD *)this + 15);
  if (v7)
    *v7 += 2;
  v8 = *(_QWORD **)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v7;
  if (v8)
  {
    v9 = *(_DWORD *)v8 == 2;
    *(_DWORD *)v8 -= 2;
    if (v9)
    {
      v14 = v8[10];
      if (v14)
      {
        *(_QWORD *)(v14 + 8) = 3;
        v8[10] = 0;
      }
      if ((v8[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v8 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v8 + 2));
      v16 = (WTF **)v8[1];
      if ((v16 & 1) == 0 && v16)
      {
        v26 = (WTF *)v8[1];
        v17 = *v16;
        if (*v16)
        {
          *(_QWORD *)v26 = 0;
          *((_DWORD *)v26 + 2) = 0;
          WTF::fastFree(v17, v15);
        }
        WTF::fastFree(v26, v15);
      }
      result = WTF::fastFree((WTF *)v8, v15);
    }
  }
  v10 = (_DWORD *)*((_QWORD *)this + 16);
  if (v10)
    *v10 += 2;
  v11 = *(_QWORD **)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v10;
  if (v11)
  {
    v9 = *(_DWORD *)v11 == 2;
    *(_DWORD *)v11 -= 2;
    if (v9)
    {
      v18 = v11[10];
      if (v18)
      {
        *(_QWORD *)(v18 + 8) = 3;
        v11[10] = 0;
      }
      if ((v11[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v11 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v11 + 2));
      v20 = (WTF **)v11[1];
      if ((v20 & 1) == 0 && v20)
      {
        v27 = (WTF *)v11[1];
        v21 = *v20;
        if (*v20)
        {
          *(_QWORD *)v27 = 0;
          *((_DWORD *)v27 + 2) = 0;
          WTF::fastFree(v21, v19);
        }
        WTF::fastFree(v27, v19);
      }
      result = WTF::fastFree((WTF *)v11, v19);
    }
  }
  v12 = (_DWORD *)*((_QWORD *)this + 17);
  if (v12)
    *v12 += 2;
  v13 = *(_QWORD **)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v12;
  if (v13)
  {
    v9 = *(_DWORD *)v13 == 2;
    *(_DWORD *)v13 -= 2;
    if (v9)
    {
      v22 = v13[10];
      if (v22)
      {
        *(_QWORD *)(v22 + 8) = 3;
        v13[10] = 0;
      }
      if ((v13[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v13 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v13 + 2));
      v24 = (WTF *)v13[1];
      if ((v24 & 1) == 0 && v24)
      {
        v25 = *(WTF **)v24;
        if (*(_QWORD *)v24)
        {
          *(_QWORD *)v24 = 0;
          *((_DWORD *)v24 + 2) = 0;
          WTF::fastFree(v25, v23);
        }
        WTF::fastFree(v24, v23);
      }
      return WTF::fastFree((WTF *)v13, v23);
    }
  }
  return result;
}

uint64_t WebCore::AuthenticatorResponse::data@<X0>(WebCore::AuthenticatorResponse *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_QWORD *)(a2 + 152) = 0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = a2 + 16;
  *v3 += 2;
  v6 = 0;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v6);
  return std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs const&,void>(v4, (uint64_t)this + 24);
}

uint64_t *WebCore::AuthenticatorAttestationResponse::create@<X0>(char a1@<W2>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  JSC::ArrayBuffer::create();
  JSC::ArrayBuffer::create();
  v6 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v6 + 8) = 1;
  v7 = v12;
  v12 = 0;
  *(_QWORD *)(v6 + 16) = v7;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 96) = 0;
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_BYTE *)(v6 + 112) = a1;
  *(_QWORD *)v6 = off_1E336C380;
  v8 = v11;
  v11 = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 120) = v8;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 128) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v6 + 136) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(v6 + 140) = v9;
  *a3 = v6;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v11);
  return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v12);
}

void *WebCore::AuthenticatorAttestationResponse::data@<X0>(WebCore::AuthenticatorAttestationResponse *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  BOOL v8;
  void *result;
  void *v10;
  WTF **v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  size_t v17;
  void *v18;
  void *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  WTF **v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = a2 + 16;
  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_QWORD *)(a2 + 152) = 0;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *v5 += 2;
  v27 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v27);
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs const&,void>(v4, (uint64_t)this + 24);
  *(_BYTE *)a2 = 1;
  v6 = (_DWORD *)*((_QWORD *)this + 15);
  *v6 += 2;
  v27 = 0;
  v7 = *(_QWORD **)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v6;
  if (v7)
  {
    v8 = *(_DWORD *)v7 == 2;
    *(_DWORD *)v7 -= 2;
    if (v8)
    {
      v22 = v7[10];
      if (v22)
      {
        *(_QWORD *)(v22 + 8) = 3;
        v7[10] = 0;
      }
      if ((v7[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v7 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v7 + 2));
      v24 = (WTF **)v7[1];
      if ((v24 & 1) == 0 && v24)
      {
        v26 = (WTF *)v7[1];
        v25 = *v24;
        if (*v24)
        {
          *(_QWORD *)v26 = 0;
          *((_DWORD *)v26 + 2) = 0;
          WTF::fastFree(v25, v23);
        }
        WTF::fastFree(v26, v23);
      }
      WTF::fastFree((WTF *)v7, v23);
    }
  }
  result = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v27);
  v11 = (WTF **)(a2 + 144);
  if ((WebCore::AuthenticatorAttestationResponse *)((char *)this + 128) != (WebCore::AuthenticatorAttestationResponse *)(a2 + 144))
  {
    v12 = *(_DWORD *)(a2 + 156);
    v13 = *((_DWORD *)this + 35);
    if (v12 <= v13)
    {
      v14 = *(_DWORD *)(a2 + 152);
      if (v13 > v14)
      {
        if (v14)
        {
          if (v12)
            *(_DWORD *)(a2 + 156) = 0;
          v15 = *v11;
          if (*v11)
          {
            *(_QWORD *)(a2 + 144) = 0;
            *(_DWORD *)(a2 + 152) = 0;
            WTF::fastFree(v15, v10);
            v14 = *(_DWORD *)(a2 + 152);
            v13 = *((_DWORD *)this + 35);
          }
        }
        if (v14 < v13)
        {
          v16 = *(WTF **)(a2 + 144);
          v17 = *(unsigned int *)(a2 + 156);
          v18 = (void *)WTF::fastMalloc((WTF *)v13);
          *(_DWORD *)(a2 + 152) = v13;
          *(_QWORD *)(a2 + 144) = v18;
          memcpy(v18, v16, v17);
          if (v16)
          {
            if (*v11 == v16)
            {
              *(_QWORD *)(a2 + 144) = 0;
              *(_DWORD *)(a2 + 152) = 0;
            }
            WTF::fastFree(v16, v19);
          }
        }
      }
      v13 = *(_DWORD *)(a2 + 156);
    }
    else
    {
      *(_DWORD *)(a2 + 156) = v13;
    }
    v20 = *v11;
    if (v13)
    {
      memmove(v20, *((const void **)this + 16), v13);
      v21 = *(unsigned int *)(a2 + 156);
      v20 = *(WTF **)(a2 + 144);
    }
    else
    {
      v21 = 0;
    }
    result = memcpy((char *)v20 + v21, (const void *)(*((_QWORD *)this + 16) + v21), *((unsigned int *)this + 35) - v21);
    *(_DWORD *)(a2 + 156) = *((_DWORD *)this + 35);
  }
  return result;
}

uint64_t WebCore::AuthenticatorAttestationResponse::getAuthenticatorData@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *i;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  int v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  void *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  _DWORD v38[4];
  _QWORD v39[2];
  char v40;

  v3 = *(_QWORD *)(this + 120);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v5)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v4 = (v4 & 0x3FFFFFFFFLL) + v5;
    }
  }
  if (*(_BYTE *)(v3 + 64))
  {
    v10 = *(_QWORD *)(v3 + 32);
    if (v10)
    {
      v6 = *(WTF **)(v10 + 32);
      if (!v6)
        goto LABEL_13;
LABEL_7:
      if ((unint64_t)v6 >> 32)
      {
        __break(0xC471u);
        return this;
      }
      v7 = WTF::fastMalloc(v6);
      v8 = (WTF *)v7;
      for (i = 0; i != v6; i = (WTF *)((char *)i + 1))
        *((_BYTE *)i + v7) = *((_BYTE *)i + v4);
      goto LABEL_14;
    }
  }
  v6 = *(WTF **)(v3 + 48);
  if (v6)
    goto LABEL_7;
LABEL_13:
  v8 = 0;
LABEL_14:
  v36 = v8;
  v37 = (WTF::StringImpl *)v6;
  this = cbor::CBORReader::read(&v36, 0, 0x10u, (uint64_t)v38);
  if (v8)
    this = WTF::fastFree(v8, v11);
  if (!v40 || v38[0] != 5)
    goto LABEL_58;
  WTF::String::String((WTF::String *)&v37, "authData");
  LODWORD(v36) = 3;
  v14 = v39[0];
  if (!v39[0])
  {
LABEL_57:
    this = cbor::CBORValue::internalCleanup((uint64_t)&v36, v12);
LABEL_58:
    *a2 = 0;
    goto LABEL_59;
  }
  v15 = v39;
  do
  {
    v16 = (uint64_t *)v14;
    v17 = v15;
    v18 = *(_DWORD *)(v14 + 32);
    v19 = v18 < (int)v36;
    if (v18 != (_DWORD)v36)
      goto LABEL_25;
    if (v18 == 3)
    {
      v22 = (WTF *)v16[5];
      if (v22)
        v23 = *((_DWORD *)v22 + 1);
      else
        v23 = 0;
      v12 = v37;
      if (v37)
        v24 = *((_DWORD *)v37 + 1);
      else
        v24 = 0;
      if (v23 == v24)
      {
        if ((WTF::codePointCompare(v22, v37, v13) & 0x80000000) != 0)
          goto LABEL_27;
      }
      else if (v23 < v24)
      {
LABEL_27:
        v20 = v16 + 1;
        v21 = 1;
        v15 = v17;
        goto LABEL_30;
      }
    }
    else
    {
      if (v18 != 1)
      {
        if (v18)
          goto LABEL_29;
        v19 = v16[5] < (uint64_t)v37;
LABEL_25:
        if (v19)
          goto LABEL_27;
        goto LABEL_29;
      }
      if (v16[5] > (uint64_t)v37)
        goto LABEL_27;
    }
LABEL_29:
    v21 = 0;
    v20 = v16;
    v15 = v16;
LABEL_30:
    v14 = *v20;
  }
  while (v14);
  if (v15 == v39)
    goto LABEL_57;
  if (v21)
    v25 = v17;
  else
    v25 = v16;
  v26 = *((_DWORD *)v25 + 8);
  v27 = (int)v36 < v26;
  if ((_DWORD)v36 != v26)
  {
LABEL_55:
    if (!v27)
      goto LABEL_76;
    goto LABEL_57;
  }
  switch((_DWORD)v36)
  {
    case 3:
      if (v37)
        v29 = *((_DWORD *)v37 + 1);
      else
        v29 = 0;
      if (v21)
        v30 = v17;
      else
        v30 = v16;
      v12 = (WTF::StringImpl *)v30[5];
      if (v12)
        v31 = *((_DWORD *)v12 + 1);
      else
        v31 = 0;
      if (v29 == v31)
      {
        if ((WTF::codePointCompare(v37, v12, v13) & 0x80000000) == 0)
          break;
      }
      else if (v29 >= v31)
      {
        break;
      }
      goto LABEL_57;
    case 1:
      if (v21)
        v32 = v17;
      else
        v32 = v16;
      if ((uint64_t)v37 <= v32[5])
        break;
      goto LABEL_57;
    case 0:
      if (v21)
        v28 = v17;
      else
        v28 = v16;
      v27 = (uint64_t)v37 < v28[5];
      goto LABEL_55;
  }
LABEL_76:
  this = cbor::CBORValue::internalCleanup((uint64_t)&v36, v12);
  if (v21)
    v33 = v17;
  else
    v33 = v16;
  if (*((_DWORD *)v33 + 16) != 2)
    goto LABEL_58;
  if (v21)
    v34 = v17;
  else
    v34 = v16;
  if (*((_DWORD *)v34 + 21))
  {
    if (!v21)
      v17 = v16;
    v35 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)v34 + 21));
    memcpy(v35, (const void *)v17[9], *((unsigned int *)v34 + 21));
  }
  else
  {
    v35 = 0;
  }
  this = JSC::ArrayBuffer::tryCreate();
  if (v35)
    this = WTF::fastFree((WTF *)v35, v11);
LABEL_59:
  if (v40)
    return cbor::CBORValue::internalCleanup((uint64_t)v38, (WTF::StringImpl *)v11);
  return this;
}

uint64_t WebCore::AuthenticatorAttestationResponse::getPublicKeyAlgorithm(WebCore::AuthenticatorAttestationResponse *this)
{
  _DWORD *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  _DWORD v22[4];
  _QWORD v23[2];
  char v24;

  v1 = (_DWORD *)*((_QWORD *)this + 15);
  *v1 += 2;
  v21 = v1;
  WebCore::coseKeyForAttestationObject(v22, (uint64_t)v1);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v21);
  if (!v24)
    return 0;
  if (v22[0] != 5)
  {
    v11 = 0;
LABEL_28:
    cbor::CBORValue::internalCleanup((uint64_t)v22, v2);
    return v11;
  }
  v20 = (WTF::StringImpl *)3;
  v19 = 0;
  v3 = v23[0];
  if (!v23[0])
    goto LABEL_25;
  v4 = v23;
  do
  {
    v5 = (uint64_t *)v3;
    v6 = v4;
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 < v19;
    if (v7 == v19)
      v8 = v5[5] < (uint64_t)v20;
    if (v8)
    {
      v10 = v5 + 1;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v10 = v5;
      v4 = v5;
    }
    v3 = *v10;
  }
  while (v3);
  if (v4 == v23)
    goto LABEL_25;
  if (v9)
    v12 = v6;
  else
    v12 = v5;
  v13 = *((_DWORD *)v12 + 8);
  v14 = v19 < v13;
  if (v19 == v13)
  {
    if (v9)
      v15 = v6;
    else
      v15 = v5;
    v14 = (uint64_t)v20 < v15[5];
  }
  if (v14)
  {
LABEL_25:
    cbor::CBORValue::internalCleanup((uint64_t)&v19, v2);
LABEL_26:
    v11 = 0;
    goto LABEL_27;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v19, v2);
  if (v9)
    v17 = v6;
  else
    v17 = v5;
  if (*((_DWORD *)v17 + 16) > 1u)
    goto LABEL_26;
  if (v9)
    v18 = v6;
  else
    v18 = v5;
  v11 = v18[9];
LABEL_27:
  if (v24)
    goto LABEL_28;
  return v11;
}

uint64_t WebCore::coseKeyForAttestationObject(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *i;
  uint64_t v9;
  uint64_t result;
  void *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  int v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  void *v41;
  unsigned int v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  _DWORD v47[4];
  _QWORD v48[2];
  char v49;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v4)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v3 = (v3 & 0x3FFFFFFFFLL) + v4;
    }
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v9 = *(_QWORD *)(a2 + 32);
    if (v9)
    {
      v5 = *(WTF **)(v9 + 32);
      if (!v5)
        goto LABEL_13;
LABEL_7:
      if ((unint64_t)v5 >> 32)
      {
        __break(0xC471u);
        goto LABEL_102;
      }
      v6 = WTF::fastMalloc(v5);
      v7 = (WTF *)v6;
      for (i = 0; i != v5; i = (WTF *)((char *)i + 1))
        *((_BYTE *)i + v6) = *((_BYTE *)i + v3);
      goto LABEL_14;
    }
  }
  v5 = *(WTF **)(a2 + 48);
  if (v5)
    goto LABEL_7;
LABEL_13:
  v7 = 0;
LABEL_14:
  v45 = (uint64_t)v7;
  v46 = (WTF::StringImpl *)v5;
  result = cbor::CBORReader::read(&v45, 0, 0x10u, (uint64_t)v47);
  if (v7)
    result = WTF::fastFree(v7, v11);
  if (!v49 || v47[0] != 5)
    goto LABEL_58;
  WTF::String::String((WTF::String *)&v46, "authData");
  LODWORD(v45) = 3;
  v14 = v48[0];
  if (!v48[0])
  {
LABEL_57:
    result = cbor::CBORValue::internalCleanup((uint64_t)&v45, v12);
LABEL_58:
    *a1 = 0;
    a1[32] = 0;
    goto LABEL_59;
  }
  v15 = v48;
  do
  {
    v16 = (uint64_t *)v14;
    v17 = v15;
    v18 = *(_DWORD *)(v14 + 32);
    v19 = v18 < (int)v45;
    if (v18 != (_DWORD)v45)
      goto LABEL_25;
    if (v18 == 3)
    {
      v22 = (WTF *)v16[5];
      if (v22)
        v23 = *((_DWORD *)v22 + 1);
      else
        v23 = 0;
      v12 = v46;
      if (v46)
        v24 = *((_DWORD *)v46 + 1);
      else
        v24 = 0;
      if (v23 == v24)
      {
        if ((WTF::codePointCompare(v22, v46, v13) & 0x80000000) != 0)
          goto LABEL_27;
      }
      else if (v23 < v24)
      {
LABEL_27:
        v20 = v16 + 1;
        v21 = 1;
        v15 = v17;
        goto LABEL_30;
      }
    }
    else
    {
      if (v18 != 1)
      {
        if (v18)
          goto LABEL_29;
        v19 = v16[5] < (uint64_t)v46;
LABEL_25:
        if (v19)
          goto LABEL_27;
        goto LABEL_29;
      }
      if (v16[5] > (uint64_t)v46)
        goto LABEL_27;
    }
LABEL_29:
    v21 = 0;
    v20 = v16;
    v15 = v16;
LABEL_30:
    v14 = *v20;
  }
  while (v14);
  if (v15 == v48)
    goto LABEL_57;
  if (v21)
    v25 = v17;
  else
    v25 = v16;
  v26 = *((_DWORD *)v25 + 8);
  v27 = (int)v45 < v26;
  if ((_DWORD)v45 != v26)
  {
LABEL_55:
    if (!v27)
      goto LABEL_66;
    goto LABEL_57;
  }
  switch((_DWORD)v45)
  {
    case 3:
      if (v46)
        v42 = *((_DWORD *)v46 + 1);
      else
        v42 = 0;
      if (v21)
        v43 = v17;
      else
        v43 = v16;
      v12 = (WTF::StringImpl *)v43[5];
      if (v12)
        v44 = *((_DWORD *)v12 + 1);
      else
        v44 = 0;
      if (v42 == v44)
      {
        if ((WTF::codePointCompare(v46, v12, v13) & 0x80000000) == 0)
          break;
      }
      else if (v42 >= v44)
      {
        break;
      }
      goto LABEL_57;
    case 1:
      if (v21)
        v29 = v17;
      else
        v29 = v16;
      if ((uint64_t)v46 <= v29[5])
        break;
      goto LABEL_57;
    case 0:
      if (v21)
        v28 = v17;
      else
        v28 = v16;
      v27 = (uint64_t)v46 < v28[5];
      goto LABEL_55;
  }
LABEL_66:
  result = cbor::CBORValue::internalCleanup((uint64_t)&v45, v12);
  if (v21)
    v30 = v17;
  else
    v30 = v16;
  if (*((_DWORD *)v30 + 16) != 2)
    goto LABEL_58;
  v31 = v21 ? v17 : v16;
  v32 = *((unsigned int *)v31 + 21);
  if (!(_DWORD)v32)
    goto LABEL_58;
  if (!v21)
    v17 = v16;
  v33 = WTF::fastMalloc((WTF *)*((unsigned int *)v31 + 21));
  memcpy((void *)v33, (const void *)v17[9], *((unsigned int *)v31 + 21));
  if (v32 < 0x37 || (v35 = __rev16(*(unsigned __int16 *)(v33 + 53)) + 55, v35 >= v32))
  {
    *a1 = 0;
    a1[32] = 0;
    goto LABEL_93;
  }
  v36 = v33 + v35;
  v37 = (WTF *)(v32 - v35);
  if ((v32 - v35) >> 32)
  {
    __break(0xC471u);
LABEL_102:
    JUMPOUT(0x195568ABCLL);
  }
  v38 = WTF::fastMalloc(v37);
  v39 = (WTF *)v38;
  v40 = 0;
  do
  {
    *(_BYTE *)(v38 + v40) = *((_BYTE *)v40 + v36);
    v40 = (WTF *)((char *)v40 + 1);
  }
  while (v37 != v40);
  v45 = v38;
  v46 = (WTF::StringImpl *)v40;
  cbor::CBORReader::read(&v45, 0, 0x10u, (uint64_t)a1);
  WTF::fastFree(v39, v41);
LABEL_93:
  result = WTF::fastFree((WTF *)v33, v34);
LABEL_59:
  if (v49)
    return cbor::CBORValue::internalCleanup((uint64_t)v47, (WTF::StringImpl *)v11);
  return result;
}

char *WebCore::AuthenticatorAttestationResponse::getPublicKey@<X0>(WebCore::AuthenticatorAttestationResponse *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  char *result;
  WTF::StringImpl *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  uint64_t *v53;
  int v54;
  uint64_t *v55;
  int v56;
  uint64_t *v57;
  void *v58;
  uint64_t *v59;
  WTF *v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  int v66;
  uint64_t *v67;
  int v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  int v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  WTF *v78;
  WTF *v79;
  WTF::StringImpl *v80;
  WTF *v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  char **v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF *v91;
  int v92;
  int v93;
  void *v94;
  int v95;
  int v96;
  WTF *v97;
  WTF::StringImpl *v98;
  _DWORD *v99;
  _DWORD v100[4];
  _QWORD v101[2];
  char v102;

  v3 = (_DWORD *)*((_QWORD *)this + 15);
  *v3 += 2;
  v99 = v3;
  WebCore::coseKeyForAttestationObject(v100, (uint64_t)v3);
  result = (char *)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v99);
  if (v102)
    v6 = v100[0] == 5;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_66;
  v98 = (WTF::StringImpl *)3;
  LODWORD(v97) = 0;
  v7 = v101[0];
  if (!v101[0])
    goto LABEL_65;
  v8 = v101;
  do
  {
    v9 = (uint64_t *)v7;
    v10 = v8;
    v11 = *(_DWORD *)(v7 + 32);
    v12 = v11 < (int)v97;
    if (v11 == (_DWORD)v97)
      v12 = v9[5] < (uint64_t)v98;
    if (v12)
    {
      v14 = v9 + 1;
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v14 = v9;
      v8 = v9;
    }
    v7 = *v14;
  }
  while (v7);
  if (v8 == v101)
    goto LABEL_65;
  if (v13)
    v15 = v10;
  else
    v15 = v9;
  v16 = *((_DWORD *)v15 + 8);
  v17 = (int)v97 < v16;
  if ((_DWORD)v97 == v16)
  {
    if (v13)
      v18 = v10;
    else
      v18 = v9;
    v17 = (uint64_t)v98 < v18[5];
  }
  if (v17)
    goto LABEL_65;
  result = (char *)cbor::CBORValue::internalCleanup((uint64_t)&v97, v5);
  v19 = v13 ? v10 : v9;
  if (*((_DWORD *)v19 + 16) >= 2u)
    goto LABEL_66;
  if (v13)
    v20 = v10;
  else
    v20 = v9;
  v21 = v20[9];
  v98 = (WTF::StringImpl *)1;
  LODWORD(v97) = 0;
  v22 = v101[0];
  if (!v101[0])
    goto LABEL_65;
  v23 = v101;
  do
  {
    v24 = (uint64_t *)v22;
    v25 = v23;
    v26 = *(_DWORD *)(v22 + 32);
    v27 = v26 < (int)v97;
    if (v26 == (_DWORD)v97)
      v27 = v24[5] < (uint64_t)v98;
    if (v27)
    {
      v29 = v24 + 1;
      v28 = 1;
    }
    else
    {
      v28 = 0;
      v29 = v24;
      v23 = v24;
    }
    v22 = *v29;
  }
  while (v22);
  if (v23 == v101)
    goto LABEL_65;
  if (v28)
    v30 = v25;
  else
    v30 = v24;
  v31 = *((_DWORD *)v30 + 8);
  v32 = (int)v97 < v31;
  if ((_DWORD)v97 == v31)
  {
    if (v28)
      v33 = v25;
    else
      v33 = v24;
    v32 = (uint64_t)v98 < v33[5];
  }
  if (v32)
    goto LABEL_65;
  result = (char *)cbor::CBORValue::internalCleanup((uint64_t)&v97, v5);
  v34 = v28 ? v25 : v24;
  if (*((_DWORD *)v34 + 16) >= 2u)
  {
LABEL_66:
    *a2 = 0;
    goto LABEL_67;
  }
  if (v28)
    v35 = v25;
  else
    v35 = v24;
  v36 = v35[9];
  v98 = (WTF::StringImpl *)-1;
  LODWORD(v97) = 1;
  v37 = v101[0];
  if (!v101[0])
  {
LABEL_76:
    result = (char *)cbor::CBORValue::internalCleanup((uint64_t)&v97, v5);
    goto LABEL_77;
  }
  v38 = v101;
  do
  {
    v39 = (uint64_t *)v37;
    v40 = v38;
    v41 = *(_DWORD *)(v37 + 32);
    if (v41 == (_DWORD)v97)
    {
      if (v39[5] > (uint64_t)v98)
      {
LABEL_60:
        v42 = v39 + 1;
        v43 = 1;
        goto LABEL_63;
      }
    }
    else if (v41 < (int)v97)
    {
      goto LABEL_60;
    }
    v43 = 0;
    v42 = v39;
    v38 = v39;
LABEL_63:
    v37 = *v42;
  }
  while (v37);
  if (v38 == v101)
    goto LABEL_76;
  if (v43)
    v44 = v40;
  else
    v44 = v39;
  v45 = *((_DWORD *)v44 + 8);
  if ((_DWORD)v97 == v45)
  {
    if (v43)
      v69 = v40;
    else
      v69 = v39;
    if ((uint64_t)v98 <= v69[5])
      goto LABEL_121;
    goto LABEL_76;
  }
  if ((int)v97 < v45)
    goto LABEL_76;
LABEL_121:
  result = (char *)cbor::CBORValue::internalCleanup((uint64_t)&v97, v5);
  if (v43)
    v70 = v40;
  else
    v70 = v39;
  if (*((_DWORD *)v70 + 16) <= 1u)
  {
    v47 = 0;
    if (v43)
      v71 = v40;
    else
      v71 = v39;
    v46 = v71[9];
    goto LABEL_78;
  }
LABEL_77:
  v46 = 0;
  v47 = 1;
LABEL_78:
  if (v21 != -7)
    goto LABEL_66;
  if (v36 != 2)
    v47 = 1;
  if ((v47 & 1) != 0 || v46 != 1)
    goto LABEL_66;
  v98 = (WTF::StringImpl *)-2;
  LODWORD(v97) = 1;
  v48 = v101[0];
  if (!v101[0])
    goto LABEL_65;
  v49 = v101;
  while (2)
  {
    v50 = (uint64_t *)v48;
    v51 = v49;
    v52 = *(_DWORD *)(v48 + 32);
    if (v52 == (_DWORD)v97)
    {
      if (v50[5] <= (uint64_t)v98)
        goto LABEL_89;
LABEL_87:
      v53 = v50 + 1;
      v54 = 1;
    }
    else
    {
      if (v52 < (int)v97)
        goto LABEL_87;
LABEL_89:
      v54 = 0;
      v53 = v50;
      v49 = v50;
    }
    v48 = *v53;
    if (v48)
      continue;
    break;
  }
  if (v49 == v101)
    goto LABEL_65;
  if (v54)
    v55 = v51;
  else
    v55 = v50;
  v56 = *((_DWORD *)v55 + 8);
  if ((_DWORD)v97 != v56)
  {
    if ((int)v97 >= v56)
      goto LABEL_97;
LABEL_65:
    result = (char *)cbor::CBORValue::internalCleanup((uint64_t)&v97, v5);
    goto LABEL_66;
  }
  if (v54)
    v74 = v51;
  else
    v74 = v50;
  if ((uint64_t)v98 > v74[5])
    goto LABEL_65;
LABEL_97:
  result = (char *)cbor::CBORValue::internalCleanup((uint64_t)&v97, v5);
  if (v54)
    v57 = v51;
  else
    v57 = v50;
  if (*((_DWORD *)v57 + 16) != 2)
    goto LABEL_66;
  v58 = 0;
  if (v54)
    v59 = v51;
  else
    v59 = v50;
  v60 = (WTF *)*((unsigned int *)v59 + 21);
  v94 = 0;
  v95 = 0;
  v96 = (int)v60;
  if ((_DWORD)v60)
  {
    if (!v54)
      v51 = v50;
    v61 = (int)v60;
    v58 = (void *)WTF::fastMalloc(v60);
    v95 = v61;
    v94 = v58;
    memcpy(v58, (const void *)v51[9], *((unsigned int *)v59 + 21));
  }
  v98 = (WTF::StringImpl *)-3;
  LODWORD(v97) = 1;
  v62 = v101[0];
  if (!v101[0])
    goto LABEL_135;
  v63 = v101;
  while (2)
  {
    v64 = (uint64_t *)v62;
    v65 = v63;
    v66 = *(_DWORD *)(v62 + 32);
    if (v66 == (_DWORD)v97)
    {
      if (v64[5] <= (uint64_t)v98)
        goto LABEL_114;
LABEL_112:
      v67 = v64 + 1;
      v68 = 1;
    }
    else
    {
      if (v66 < (int)v97)
        goto LABEL_112;
LABEL_114:
      v68 = 0;
      v67 = v64;
      v63 = v64;
    }
    v62 = *v67;
    if (v62)
      continue;
    break;
  }
  if (v63 == v101)
    goto LABEL_135;
  if (v68)
    v72 = v65;
  else
    v72 = v64;
  v73 = *((_DWORD *)v72 + 8);
  if ((_DWORD)v97 == v73)
  {
    if (v68)
      v75 = v65;
    else
      v75 = v64;
    if ((uint64_t)v98 <= v75[5])
      goto LABEL_147;
LABEL_135:
    result = (char *)cbor::CBORValue::internalCleanup((uint64_t)&v97, v5);
    goto LABEL_136;
  }
  if ((int)v97 < v73)
    goto LABEL_135;
LABEL_147:
  result = (char *)cbor::CBORValue::internalCleanup((uint64_t)&v97, v5);
  if (v68)
    v76 = v65;
  else
    v76 = v64;
  if (*((_DWORD *)v76 + 16) != 2)
  {
LABEL_136:
    *a2 = 0;
    if (v58)
      goto LABEL_137;
    goto LABEL_67;
  }
  if (v68)
    v77 = v65;
  else
    v77 = v64;
  v78 = (WTF *)*((unsigned int *)v77 + 21);
  v91 = 0;
  v92 = 0;
  v93 = (int)v78;
  if ((_DWORD)v78)
  {
    if (v68)
      v64 = v65;
    v92 = (int)v78;
    v91 = (WTF *)WTF::fastMalloc(v78);
    memcpy(v91, (const void *)v64[9], *((unsigned int *)v77 + 21));
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::encodeRawPublicKey((uint64_t)&v94, (uint64_t)&v91, (char **)&v97);
  WebCore::CryptoKeyEC::importRaw(6, &v89, (uint64_t)&v97, 1, 32, &v90);
  v79 = v97;
  if (v97)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree(v79, v5);
  }
  v80 = v89;
  v89 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v5);
    else
      *(_DWORD *)v80 -= 2;
  }
  if (!v90)
  {
    *a2 = 0;
    goto LABEL_174;
  }
  if (*(_BYTE *)(v90 + 13))
    goto LABEL_181;
  WebCore::CryptoKeyEC::platformExportSpki(v90, (uint64_t)&v97);
  v81 = v97;
  if (!HIDWORD(v98))
  {
    if (v97)
    {
      v97 = 0;
      LODWORD(v98) = 0;
      WTF::fastFree(v81, (void *)HIDWORD(v98));
    }
LABEL_181:
    v86 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::encodeRawPublicKey(v86, v87, v88);
  }
  JSC::ArrayBuffer::tryCreate();
  if (v81)
    WTF::fastFree(v81, v5);
  v82 = (unsigned int *)v90;
  v90 = 0;
  if (v82)
  {
    v83 = v82 + 2;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v82 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v82 + 8))(v82);
    }
  }
LABEL_174:
  result = (char *)v91;
  if (v91)
    result = (char *)WTF::fastFree(v91, v5);
  v58 = v94;
  if (v94)
LABEL_137:
    result = (char *)WTF::fastFree((WTF *)v58, v5);
LABEL_67:
  if (v102)
    return (char *)cbor::CBORValue::internalCleanup((uint64_t)v100, v5);
  return result;
}

char *WebCore::encodeRawPublicKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  unint64_t v4;
  char *result;
  size_t v8;
  size_t v9;
  char *v10;
  const void *v11;
  unint64_t v12;
  size_t v13;
  const void *v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;

  v4 = *(unsigned int *)(a1 + 12) + (unint64_t)*(unsigned int *)(a2 + 12) + 1;
  if (HIDWORD(v4))
    goto LABEL_33;
  result = (char *)WTF::fastMalloc((WTF *)(*(unsigned int *)(a1 + 12) + (unint64_t)*(unsigned int *)(a2 + 12) + 1));
  *a3 = result;
  *result = 4;
  v8 = 1;
  *((_DWORD *)a3 + 2) = v4;
  *((_DWORD *)a3 + 3) = 1;
  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = result;
    v11 = *(const void **)a1;
    v12 = v9 + 1;
    if (v4 <= v9)
    {
      v18 = v4 + (v4 >> 2);
      if (v18 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 16;
      if (v19 <= v12)
        v20 = v9 + 1;
      else
        v20 = v19;
      if (HIDWORD(v20))
      {
        __break(0xC471u);
        JUMPOUT(0x195569754);
      }
      v22 = (char *)WTF::fastMalloc((WTF *)v20);
      *((_DWORD *)a3 + 2) = v20;
      *a3 = v22;
      *v22 = *v10;
      if (v22 == v10)
      {
        v22 = 0;
        *a3 = 0;
        *((_DWORD *)a3 + 2) = 0;
      }
      WTF::fastFree((WTF *)v10, v21);
      v10 = v22;
    }
    result = (char *)memcpy(v10 + 1, v11, v9);
    *((_DWORD *)a3 + 3) = v12;
    v8 = (v9 + 1);
  }
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(const void **)a2;
    v15 = v8 + v13;
    v16 = *((unsigned int *)a3 + 2);
    v17 = *a3;
    if (v8 + v13 <= v16)
    {
LABEL_7:
      result = (char *)memcpy(&v17[v8], v14, v13);
      *((_DWORD *)a3 + 3) = v15;
      return result;
    }
    v23 = v16 + (v16 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v15)
      v25 = v8 + v13;
    else
      v25 = v24;
    if (!HIDWORD(v25))
    {
      v26 = (char *)WTF::fastMalloc((WTF *)v25);
      *((_DWORD *)a3 + 2) = v25;
      *a3 = v26;
      memcpy(v26, v17, v8);
      if (v17)
      {
        if (v26 == v17)
        {
          v26 = 0;
          *a3 = 0;
          *((_DWORD *)a3 + 2) = 0;
        }
        WTF::fastFree((WTF *)v17, v27);
      }
      v17 = v26;
      goto LABEL_7;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x19556974CLL);
  }
  return result;
}

uint64_t WebCore::AuthenticatorCoordinator::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::AuthenticatorCoordinator::create(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, uint64_t a4, uint64_t **a5, uint64_t *a6)
{
  _DWORD **v6;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  unsigned __int8 **v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 *v33;
  __int128 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl **v36;
  unsigned int *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  char v43;
  unsigned int *v44;
  uint64_t v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  unsigned int v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  _DWORD **v75;
  uint64_t *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  void *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  WTF::StringImpl *v91[2];
  char v92[8];
  uint64_t v93;
  uint64_t v94[4];
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  _DWORD **v99;
  uint64_t *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  _BYTE v103[48];
  _BYTE v104[80];
  objc_class *v105;
  WTF::StringImpl *v106;
  objc_class *v107;

  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 24), (WTF::StringImpl *)a2);
  v14 = v13;
  v15 = a2[66];
  if (v15)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = 0;
  if (!a3[312])
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_119;
  }
  if ((_DWORD)a4 != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = *a6;
    v20 = 31;
    goto LABEL_11;
  }
  v17 = *((unsigned int *)a3 + 18);
  if ((_DWORD)v17 == -1)
    goto LABEL_119;
  a4 = (uint64_t)(a3 + 64);
  v6 = (_DWORD **)&v101;
  v91[0] = (WTF::StringImpl *)&v101;
  if (((uint64_t (*)(WTF::StringImpl **, unsigned __int8 *))off_1E336C3F8[v17])(v91, a3 + 64))
  {
    v18 = *((unsigned int *)a3 + 18);
    if ((_DWORD)v18 != -1)
    {
      v91[0] = (WTF::StringImpl *)&v101;
      if ((unint64_t)((uint64_t (*)(WTF::StringImpl **, unsigned __int8 *))off_1E336C3F8[v18])(v91, a3 + 64) >= 0x41)goto LABEL_9;
      if (WTF::URL::hostIsIPAddress())
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = *a6;
        v20 = 14;
        goto LABEL_11;
      }
      if (!a3[40])
      {
        v25 = (_DWORD *)v14[5];
        if (v25)
          *v25 += 2;
        *((_QWORD *)a3 + 4) = v25;
        a3[40] = 1;
      }
      v26 = (unsigned __int8 **)(a3 + 104);
      v27 = *((unsigned int *)a3 + 29);
      if ((_DWORD)v27)
      {
        v28 = *v26;
        while (1)
        {
          v29 = *v28;
          v28 += 16;
          if (v29)
            break;
          if (!--v27)
            goto LABEL_41;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = *a6;
        v20 = 6;
        goto LABEL_11;
      }
      LOBYTE(v91[0]) = 0;
      v91[1] = (WTF::StringImpl *)-7;
      if (*((_DWORD *)a3 + 28))
        *(_OWORD *)*v26 = *(_OWORD *)v91;
      else
        *(_OWORD *)(*((_QWORD *)a3 + 13) + 16 * *((unsigned int *)a3 + 29)) = *(_OWORD *)WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3 + 13, 1uLL, (unint64_t)v91);
      v30 = *((_DWORD *)a3 + 28);
      v31 = (*((_DWORD *)a3 + 29) + 1);
      *((_DWORD *)a3 + 29) = v31;
      LOBYTE(v91[0]) = 0;
      v91[1] = (WTF::StringImpl *)-257;
      if ((_DWORD)v31 == v30)
      {
        v32 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3 + 13, v31 + 1, (unint64_t)v91);
        v31 = *((unsigned int *)a3 + 29);
        v33 = (unsigned __int8 *)*((_QWORD *)a3 + 13);
        v34 = *(_OWORD *)v32;
      }
      else
      {
        v33 = *v26;
        v34 = *(_OWORD *)v91;
      }
      *(_OWORD *)&v33[16 * v31] = v34;
      ++*((_DWORD *)a3 + 29);
LABEL_41:
      v35 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *(_DWORD *)v35 += 2;
      v101 = v35;
      LOBYTE(v102) = 0;
      v103[0] = 0;
      v103[40] = 0;
      v104[0] = 0;
      v104[72] = 0;
      v36 = (WTF::StringImpl **)(a3 + 160);
      LOBYTE(v91[0]) = 0;
      v96 = 0;
      if (!a3[304])
        goto LABEL_55;
      v14 = (uint64_t *)v103;
      WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs((uint64_t)v91, (uint64_t)(a3 + 160));
      v96 = 1;
      LOBYTE(v102) = v91[1];
      v37 = (unsigned int *)std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false> const&>((uint64_t)v103, (uint64_t)v92);
      if (!v96)
      {
        __break(1u);
        goto LABEL_117;
      }
      std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false> const&>((uint64_t)v104, (uint64_t)&v95);
      if (v96)
        WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs((WebCore::AuthenticationExtensionsClientInputs *)v91);
      if (a3[304])
      {
        v40 = v101;
        if (v101)
          *(_DWORD *)v101 += 2;
        v41 = *v36;
        *v36 = v40;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v39);
          else
            *(_DWORD *)v41 -= 2;
        }
        a3[168] = v102;
        std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false> const&>((uint64_t)(a3 + 176), (uint64_t)v103);
        std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false> const&>((uint64_t)(a3 + 224), (uint64_t)v104);
        if (!a3[304])
          goto LABEL_59;
      }
      else
      {
LABEL_55:
        WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs((uint64_t)(a3 + 160), (uint64_t)&v101);
        a3[304] = 1;
      }
      if (a3[216] && a3[185] | a3[208])
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v42 = *a6;
        v43 = 31;
        goto LABEL_95;
      }
LABEL_59:
      if (*(_QWORD *)(a1 + 8))
      {
        v44 = (unsigned int *)*((_QWORD *)a3 + 1);
        if (v44)
        {
          v45 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
            goto LABEL_123;
          v45 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v45 = 1;
          *(_QWORD *)(v45 + 8) = a1;
          v47 = *(unsigned int **)a1;
          *(_QWORD *)a1 = v45;
          if (!v47)
            goto LABEL_123;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v47);
            WTF::fastFree((WTF *)v47, v46);
          }
          v45 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
          {
LABEL_123:
            do
              v50 = __ldaxr((unsigned int *)v45);
            while (__stlxr(v50 + 1, (unsigned int *)v45));
          }
          v51 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v51 = &off_1E336C4A8;
          *((_QWORD *)v51 + 1) = v45;
          v52 = v44[38] + 1;
          v44[38] = v52;
          LODWORD(v91[0]) = v52;
          v91[1] = v51;
          v53 = v44[15];
          if ((_DWORD)v53 == v44[14])
          {
            v54 = WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44 + 12, v53 + 1, (unint64_t)v91);
            v55 = v44[15];
            v56 = *((_QWORD *)v44 + 6) + 16 * v55;
            *(_DWORD *)v56 = *v54;
            v57 = *((_QWORD *)v54 + 1);
            *((_QWORD *)v54 + 1) = 0;
            *(_QWORD *)(v56 + 8) = v57;
            v58 = v91[1];
            v44[15] = v55 + 1;
            v91[1] = 0;
            if (v58)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v58 + 8))(v58);
          }
          else
          {
            v90 = *((_QWORD *)v44 + 6) + 16 * v53;
            *(_DWORD *)v90 = v52;
            *(_QWORD *)(v90 + 8) = v51;
            v44[15] = v53 + 1;
          }
        }
        v14 = (uint64_t *)(a3 + 16);
        a4 = *(_QWORD *)a1;
        if (*(_QWORD *)a1
          || (a4 = WTF::fastCompactMalloc((WTF *)0x10),
              *(_DWORD *)a4 = 1,
              *(_QWORD *)(a4 + 8) = a1,
              v37 = *(unsigned int **)a1,
              *(_QWORD *)a1 = a4,
              !v37))
        {
          do
LABEL_76:
            v61 = __ldaxr((unsigned int *)a4);
          while (__stlxr(v61 + 1, (unsigned int *)a4));
LABEL_77:
          v6 = (_DWORD **)*a6;
          *a6 = 0;
          a6 = *a5;
          *a5 = 0;
          if (!*(_BYTE *)(a1 + 16))
          {
            v82 = *(_QWORD *)(a1 + 8);
            v83 = *a3;
            v84 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v84 = &off_1E336C4F8;
            *((_QWORD *)v84 + 1) = a4;
            *((_QWORD *)v84 + 2) = v6;
            *((_QWORD *)v84 + 3) = a6;
            v91[0] = v84;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v82 + 16))(v82, v16, v14, v83, v91);
            v85 = v91[0];
            v91[0] = 0;
            if (v85)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v85 + 8))(v85);
            goto LABEL_103;
          }
          v62 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
            goto LABEL_124;
          v62 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v62 = 1;
          *(_QWORD *)(v62 + 8) = a1;
          v64 = *(unsigned int **)a1;
          *(_QWORD *)a1 = v62;
          if (!v64)
            goto LABEL_124;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
          {
            atomic_store(1u, v64);
            WTF::fastFree((WTF *)v64, v63);
          }
          v62 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
          {
LABEL_124:
            do
              v67 = __ldaxr((unsigned int *)v62);
            while (__stlxr(v67 + 1, (unsigned int *)v62));
          }
          v91[0] = (WTF::StringImpl *)v62;
          v68 = *(WTF::StringImpl **)(v16 + 16);
          if (v68)
            goto LABEL_86;
          v68 = (WTF::StringImpl *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v68 = 1;
          *((_QWORD *)v68 + 1) = v16;
          v87 = *(unsigned int **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = v68;
          if (!v87)
            goto LABEL_86;
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (v89)
          {
LABEL_113:
            v68 = *(WTF::StringImpl **)(v16 + 16);
            if (!v68)
            {
LABEL_87:
              v91[1] = v68;
              v92[0] = *a3;
              v70 = *((_QWORD *)a3 + 1);
              *((_QWORD *)a3 + 1) = 0;
              v93 = v70;
              LOBYTE(v94[0]) = 0;
              v97 = 0;
              if (a3[312])
              {
                WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((uint64_t)v94, v14);
                v97 = 1;
              }
              v98 = a4;
              v99 = v6;
              v100 = a6;
              v72 = WTF::fastMalloc((WTF *)0x170);
              *(_QWORD *)v72 = off_1E336C520;
              *(WTF::StringImpl **)(v72 + 8) = v91[0];
              v73 = v91[1];
              v91[0] = 0;
              v91[1] = 0;
              *(_QWORD *)(v72 + 16) = v73;
              *(_BYTE *)(v72 + 24) = v92[0];
              v74 = v93;
              v93 = 0;
              *(_QWORD *)(v72 + 32) = v74;
              *(_BYTE *)(v72 + 40) = 0;
              *(_BYTE *)(v72 + 336) = 0;
              if (v97)
              {
                WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(v72 + 40, v94);
                *(_BYTE *)(v72 + 336) = 1;
              }
              *(_QWORD *)(v72 + 344) = v98;
              v75 = v99;
              v98 = 0;
              v99 = 0;
              *(_QWORD *)(v72 + 352) = v75;
              v76 = v100;
              v100 = 0;
              *(_QWORD *)(v72 + 360) = v76;
              v77 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 24) = v72;
              if (v77)
                (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
              WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WebAuthn::Scope::RawPtrTraits<WTF::RefPtr>,WebAuthn::Scope::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_3::~$_3((uint64_t)v91, v71);
LABEL_103:
              WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs((WebCore::AuthenticationExtensionsClientInputs *)&v101);
              return;
            }
            do
LABEL_86:
              v69 = __ldaxr((unsigned int *)v68);
            while (__stlxr(v69 + 1, (unsigned int *)v68));
            goto LABEL_87;
          }
LABEL_120:
          atomic_store(1u, v87);
          WTF::fastFree((WTF *)v87, v86);
          goto LABEL_113;
        }
        do
        {
          v59 = __ldaxr(v37);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v37));
        if (v60)
        {
LABEL_75:
          a4 = *(_QWORD *)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_77;
          goto LABEL_76;
        }
LABEL_117:
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v38);
        goto LABEL_75;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v42 = *a6;
      v43 = 24;
LABEL_95:
      LOBYTE(v105) = v43;
      v107 = 0;
      LOBYTE(v91[0]) = v43;
      v78 = v106;
      if (v106)
        *(_DWORD *)v106 += 2;
      v91[1] = v78;
      WebCore::DeferredPromise::reject(v42, (unsigned __int8 *)v91, 0, &v107);
      v80 = v91[1];
      v91[1] = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v79);
        else
          *(_DWORD *)v80 -= 2;
      }
      v81 = v106;
      v106 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v79);
        else
          *(_DWORD *)v81 -= 2;
      }
      goto LABEL_103;
    }
LABEL_119:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_120;
  }
LABEL_9:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = *a6;
  v20 = 33;
LABEL_11:
  LOBYTE(v101) = v20;
  v105 = 0;
  LOBYTE(v91[0]) = v20;
  v21 = v102;
  if (v102)
    *(_DWORD *)v102 += 2;
  v91[1] = v21;
  WebCore::DeferredPromise::reject(v19, (unsigned __int8 *)v91, 0, &v105);
  v23 = v91[1];
  v91[1] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v102;
  v102 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
}

uint64_t WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WebAuthn::Scope::RawPtrTraits<WTF::RefPtr>,WebAuthn::Scope::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_3::~$_3(uint64_t a1, void *a2)
{
  WebCore::AbortSignal *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::AbortSignal *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  bmalloc::api *v16;
  void *v17;
  bmalloc::api *v18;
  void *v19;

  v3 = *(WebCore::AbortSignal **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v16, v17);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = *(_DWORD **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = *(unsigned int **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  if (*(_BYTE *)(a1 + 328))
    WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)(a1 + 32), a2);
  v8 = *(WebCore::AbortSignal **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v8, a2);
      bmalloc::api::isoDeallocate(v18, v19);
    }
    else
    {
      --*((_DWORD *)v8 + 6);
    }
  }
  v9 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::AuthenticatorCoordinator::discoverFromExternalSource(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, int *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  char v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  const WTF::StringImpl *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  void *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *result;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  void *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  char v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  char v125;
  uint64_t v126;
  char v127[8];
  int v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  unsigned __int8 v132;
  _BYTE v133[144];
  char v134;
  __int16 v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  int v140;
  _BYTE v141[24];
  int v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 24), (WTF::StringImpl *)a2);
  v11 = v10;
  v12 = a2[66];
  if (!v12)
  {
    v13 = 0;
    goto LABEL_163;
  }
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
  {
LABEL_163:
    v16 = 1;
    goto LABEL_6;
  }
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = 0;
LABEL_6:
  if (!a3[232])
    std::__throw_bad_optional_access[abi:sn180100]();
  if (*a4 != 1 && (WebCore::PermissionsPolicy::isFeatureEnabled(0xEu, a2, 0) & 1) == 0)
    goto LABEL_25;
  if (WTF::URL::hostIsIPAddress())
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = *a5;
    v19 = 14;
    goto LABEL_121;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)a3 + 5);
  if (!v20 || !*((_DWORD *)v20 + 1))
  {
    v21 = *(_DWORD **)(v11 + 40);
    if (v21)
      *v21 += 2;
    *((_QWORD *)a3 + 5) = v21;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v22 = (WTF::StringImpl **)(a3 + 72);
  if (!a3[216])
    goto LABEL_65;
  v23 = *v22;
  if (*v22)
  {
    if (!*((_DWORD *)v23 + 1))
    {
LABEL_25:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v18 = *a5;
      v19 = 31;
      goto LABEL_121;
    }
    *(_DWORD *)v23 += 2;
    v120 = v23;
    MEMORY[0x19AEA52D4](&v123, &v120, 0);
    v25 = v120;
    v120 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if ((v124 & 1) == 0)
      goto LABEL_24;
    v27 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v27 == -1)
      goto LABEL_200;
    v120 = (WTF::StringImpl *)&v122;
    v116 = v11 + 8;
    v117 = (WTF::StringImpl **)(a3 + 72);
    v28 = *(_QWORD *)((uint64_t (*)(WTF::StringImpl **))off_1E336C448[v27])(&v120);
    if (v28)
    {
      v29 = *(unsigned __int8 **)(v28 + 8);
      v30 = *(_DWORD *)(v28 + 4);
      v31 = ((unint64_t)*(unsigned int *)(v28 + 16) >> 2) & 1;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v31 = 1;
    }
    v32 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)&v123);
    if (!WTF::operator==(v29, v30 | (v31 << 32), v32, v33))
    {
      v26 = 0;
      v22 = (WTF::StringImpl **)(a3 + 72);
      goto LABEL_50;
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v122, (const WTF::URL *)&v123);
    v34 = *(unsigned int *)(v11 + 32);
    v22 = (WTF::StringImpl **)(a3 + 72);
    if ((_DWORD)v34 == -1)
      goto LABEL_200;
    v120 = (WTF::StringImpl *)&v118;
    v35 = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E336C458[v34])(&v120, v116);
    WebCore::RegistrableDomain::uncheckedCreateFromHost(v35, &v118);
    if ((WTF::equal(v122, v118, v36) & 1) != 0)
    {
LABEL_35:
      v37 = 0;
      goto LABEL_41;
    }
    v38 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v38 == -1)
    {
LABEL_200:
      v114 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2::~$_2(v114, v115);
    }
    v120 = (WTF::StringImpl *)&v119;
    v39 = *(_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E336C458[v38])(&v120, v116);
    if (!v39)
      goto LABEL_40;
    if (*(_DWORD *)(v39 + 4) != 10)
      goto LABEL_168;
    v111 = *(_QWORD *)(v39 + 8);
    if ((*(_BYTE *)(v39 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v111 & 0xDF) == 0x47
        && (*(_BYTE *)(v111 + 1) & 0xDF) == 0x4F
        && (*(_BYTE *)(v111 + 2) & 0xDF) == 0x4F
        && (*(_BYTE *)(v111 + 3) & 0xDF) == 0x47
        && (*(_BYTE *)(v111 + 4) & 0xDF) == 0x4C
        && (*(_BYTE *)(v111 + 5) & 0xDF) == 0x45
        && (*(_BYTE *)(v111 + 6) & 0xDF) == 0xE
        && (*(_BYTE *)(v111 + 7) & 0xDF) == 0x43
        && (*(_BYTE *)(v111 + 8) & 0xDF) == 0x4F)
      {
        v112 = *(unsigned __int8 *)(v111 + 9);
        goto LABEL_184;
      }
    }
    else if ((*(_WORD *)v111 & 0xFFDF) == 0x47
           && (*(_WORD *)(v111 + 2) & 0xFFDF) == 0x4F
           && (*(_WORD *)(v111 + 4) & 0xFFDF) == 0x4F
           && (*(_WORD *)(v111 + 6) & 0xFFDF) == 0x47
           && (*(_WORD *)(v111 + 8) & 0xFFDF) == 0x4C
           && (*(_WORD *)(v111 + 10) & 0xFFDF) == 0x45
           && (*(_WORD *)(v111 + 12) & 0xFFDF) == 0xE
           && (*(_WORD *)(v111 + 14) & 0xFFDF) == 0x43
           && (*(_WORD *)(v111 + 16) & 0xFFDF) == 0x4F)
    {
      v112 = *(unsigned __int16 *)(v111 + 18);
LABEL_184:
      if ((v112 & 0xFFFFFFDF) == 0x4D)
        goto LABEL_169;
    }
LABEL_168:
    if (!WTF::StringImpl::endsWithIgnoringASCIICase())
    {
LABEL_40:
      v37 = 1;
      goto LABEL_41;
    }
LABEL_169:
    if ((MEMORY[0x19AEA53F4](*v117, "https://www.gstatic.com/securitykey/origins.json", 48) & 1) != 0)
      goto LABEL_35;
    v37 = MEMORY[0x19AEA53F4](*v117, "https://www.gstatic.com/securitykey/a/google.com/origins.json", 61) ^ 1;
LABEL_41:
    v40 = v118;
    v118 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v24);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v122;
    v122 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy(v41, v24);
        if ((v37 & 1) == 0)
        {
LABEL_48:
          v26 = *v117;
          if (*v117)
            *(_DWORD *)v26 += 2;
LABEL_50:
          v42 = v123;
          v123 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
            {
              v42 = (WTF::StringImpl *)WTF::StringImpl::destroy(v42, v24);
              if (v26)
              {
LABEL_54:
                if (!a3[216])
                {
                  __break(1u);
                  goto LABEL_188;
                }
                *(_DWORD *)v26 += 2;
                v43 = *v22;
                *v22 = v26;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v24);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v24);
                else
                  *(_DWORD *)v26 -= 2;
                if (!a3[216])
                  goto LABEL_65;
                goto LABEL_61;
              }
LABEL_141:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v104 = v123;
              v105 = *a5;
              v120 = 0;
              LOBYTE(v123) = 14;
              if (v104)
                *(_DWORD *)v104 += 2;
              v124 = v104;
              WebCore::DeferredPromise::reject(v105, (unsigned __int8 *)&v123, 0, &v120);
              result = v124;
              v124 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                {
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v96);
                  if (!v104)
                    goto LABEL_129;
LABEL_147:
                  if (*(_DWORD *)v104 != 2)
                  {
                    *(_DWORD *)v104 -= 2;
                    goto LABEL_129;
                  }
                  result = v104;
LABEL_161:
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v96);
                  goto LABEL_129;
                }
                *(_DWORD *)result -= 2;
              }
              if (!v104)
                goto LABEL_129;
              goto LABEL_147;
            }
            *(_DWORD *)v42 -= 2;
          }
          if (v26)
            goto LABEL_54;
          goto LABEL_141;
        }
LABEL_24:
        v26 = 0;
        goto LABEL_50;
      }
      *(_DWORD *)v41 -= 2;
    }
    if ((v37 & 1) == 0)
      goto LABEL_48;
    goto LABEL_24;
  }
LABEL_61:
  if (a3[128])
  {
    v44 = *((_QWORD *)a3 + 11);
    if (v44)
    {
      if (*(_DWORD *)(v44 + 4))
        goto LABEL_25;
    }
    if (a3[97] && a3[120])
      goto LABEL_25;
  }
LABEL_65:
  if (*(_QWORD *)(a1 + 8))
  {
    v45 = (unsigned int *)*((_QWORD *)a3 + 1);
    if (v45)
    {
      v46 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        goto LABEL_203;
      v46 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = a1;
      v48 = *(unsigned int **)a1;
      *(_QWORD *)a1 = v46;
      if (!v48)
        goto LABEL_203;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v48);
        WTF::fastFree((WTF *)v48, v47);
      }
      v46 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
LABEL_203:
        do
          v51 = __ldaxr((unsigned int *)v46);
        while (__stlxr(v51 + 1, (unsigned int *)v46));
      }
      v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v52 = &off_1E336C548;
      *((_QWORD *)v52 + 1) = v46;
      v53 = v45[38] + 1;
      v45[38] = v53;
      LODWORD(v123) = v53;
      v124 = v52;
      v54 = v45[15];
      if ((_DWORD)v54 == v45[14])
      {
        v55 = WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 12, v54 + 1, (unint64_t)&v123);
        v56 = v45[15];
        v57 = *((_QWORD *)v45 + 6) + 16 * v56;
        *(_DWORD *)v57 = *v55;
        v58 = *((_QWORD *)v55 + 1);
        *((_QWORD *)v55 + 1) = 0;
        *(_QWORD *)(v57 + 8) = v58;
        v59 = v124;
        v45[15] = v56 + 1;
        v124 = 0;
        if (v59)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v59 + 8))(v59);
      }
      else
      {
        v113 = *((_QWORD *)v45 + 6) + 16 * v54;
        *(_DWORD *)v113 = v53;
        *(_QWORD *)(v113 + 8) = v52;
        v45[15] = v54 + 1;
      }
    }
    v117 = (WTF::StringImpl **)(a3 + 16);
    v60 = *(_QWORD *)a1;
    if (*(_QWORD *)a1
      || (v60 = WTF::fastCompactMalloc((WTF *)0x10),
          *(_DWORD *)v60 = 1,
          *(_QWORD *)(v60 + 8) = a1,
          v42 = *(WTF::StringImpl **)a1,
          *(_QWORD *)a1 = v60,
          !v42))
    {
      do
LABEL_82:
        v63 = __ldaxr((unsigned int *)v60);
      while (__stlxr(v63 + 1, (unsigned int *)v60));
LABEL_83:
      v64 = *a5;
      *a5 = 0;
      v65 = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = 0;
      if (*(_BYTE *)(a1 + 16))
      {
        v66 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          goto LABEL_204;
        v66 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v66 = 1;
        *(_QWORD *)(v66 + 8) = a1;
        v68 = *(unsigned int **)a1;
        *(_QWORD *)a1 = v66;
        if (!v68)
          goto LABEL_204;
        do
        {
          v69 = __ldaxr(v68);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v68));
        if (!v70)
        {
          atomic_store(1u, v68);
          WTF::fastFree((WTF *)v68, v67);
        }
        v66 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
LABEL_204:
          do
            v71 = __ldaxr((unsigned int *)v66);
          while (__stlxr(v71 + 1, (unsigned int *)v66));
        }
        v123 = (WTF::StringImpl *)v66;
        v72 = *(_QWORD *)(v13 + 16);
        if (v72)
          goto LABEL_205;
        v72 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v72 = 1;
        *(_QWORD *)(v72 + 8) = v13;
        v107 = *(unsigned int **)(v13 + 16);
        *(_QWORD *)(v13 + 16) = v72;
        if (!v107)
          goto LABEL_205;
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          atomic_store(1u, v107);
          WTF::fastFree((WTF *)v107, v106);
        }
        v72 = *(_QWORD *)(v13 + 16);
        if (v72)
        {
LABEL_205:
          do
            v73 = __ldaxr((unsigned int *)v72);
          while (__stlxr(v73 + 1, (unsigned int *)v72));
        }
        v124 = (WTF::StringImpl *)v72;
        v125 = *a3;
        v74 = *((_QWORD *)a3 + 1);
        *((_QWORD *)a3 + 1) = 0;
        v126 = v74;
        v127[0] = 0;
        v136 = 0;
        if (a3[232])
        {
          v75 = (uint64_t)v22;
          v128 = -1;
          v76 = *((unsigned int *)a3 + 6);
          if ((_DWORD)v76 != -1)
          {
            ((void (*)(WTF::StringImpl **, char *, WTF::StringImpl **))off_1E336C438[v76])(&v120, v127, v117);
            v128 = v76;
          }
          v129 = *((_QWORD *)a3 + 4);
          v77 = *(_OWORD *)(a3 + 40);
          *((_QWORD *)a3 + 5) = 0;
          *((_QWORD *)a3 + 6) = 0;
          v130 = v77;
          *(_QWORD *)&v77 = *((_QWORD *)a3 + 7);
          *((_QWORD *)a3 + 7) = 0;
          v131 = v77;
          v132 = a3[64];
          v133[0] = 0;
          v134 = 0;
          if (a3[216])
          {
            WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs((uint64_t)v133, v75);
            v134 = 1;
          }
          v135 = *((_WORD *)a3 + 112);
          v136 = 1;
        }
        LOBYTE(v137) = 0;
        v139 = 0;
        if (a3[256])
        {
          v137 = *((_QWORD *)a3 + 30);
          v78 = *((_QWORD *)a3 + 31);
          *((_QWORD *)a3 + 30) = 0;
          *((_QWORD *)a3 + 31) = 0;
          v138 = v78;
          v139 = 1;
        }
        v140 = *a4;
        v141[0] = 0;
        v143 = 0;
        if (*((_BYTE *)a4 + 40))
        {
          v142 = -1;
          v79 = a4[8];
          if ((_DWORD)v79 != -1)
          {
            ((void (*)(WTF::StringImpl **, _BYTE *, int *))off_1E336C478[v79])(&v120, v141, a4 + 2);
            v142 = v79;
          }
          v143 = 1;
        }
        v144 = v60;
        v145 = v64;
        v146 = v65;
        v80 = WTF::fastMalloc((WTF *)0x168);
        v81 = v80;
        *(_QWORD *)v80 = off_1E336C5C0;
        *(_QWORD *)(v80 + 8) = v123;
        v82 = v124;
        v123 = 0;
        v124 = 0;
        *(_QWORD *)(v80 + 16) = v82;
        *(_BYTE *)(v80 + 24) = v125;
        v83 = v126;
        v126 = 0;
        *(_QWORD *)(v80 + 32) = v83;
        *(_BYTE *)(v80 + 40) = 0;
        v84 = (void *)(v80 + 40);
        *(_BYTE *)(v80 + 256) = 0;
        if (v136)
        {
          *(_DWORD *)(v80 + 48) = -1;
          v85 = v128;
          if (v128 != -1)
          {
            ((void (*)(WTF::StringImpl **, void *, char *))off_1E336C438[v128])(&v120, v84, v127);
            *(_DWORD *)(v81 + 48) = v85;
          }
          v86 = v129;
          *(_BYTE *)(v81 + 96) = 0;
          *(_QWORD *)(v81 + 56) = v86;
          *(_QWORD *)(v81 + 64) = v130;
          v87 = *((_QWORD *)&v130 + 1);
          v130 = 0uLL;
          *(_QWORD *)(v81 + 72) = v87;
          v88 = v131;
          v131 = 0;
          *(_QWORD *)(v81 + 80) = v88;
          *(_BYTE *)(v81 + 88) = v132;
          *(_BYTE *)(v81 + 240) = 0;
          if (v134)
          {
            WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(v81 + 96, (uint64_t)v133);
            *(_BYTE *)(v81 + 240) = 1;
          }
          *(_WORD *)(v81 + 248) = v135;
          *(_BYTE *)(v81 + 256) = 1;
        }
        *(_BYTE *)(v81 + 264) = 0;
        *(_BYTE *)(v81 + 280) = 0;
        if (v139)
        {
          *(_QWORD *)(v81 + 264) = v137;
          v89 = v138;
          v137 = 0;
          v138 = 0;
          *(_QWORD *)(v81 + 272) = v89;
          *(_BYTE *)(v81 + 280) = 1;
        }
        *(_DWORD *)(v81 + 288) = v140;
        *(_BYTE *)(v81 + 296) = 0;
        *(_BYTE *)(v81 + 328) = 0;
        if (v143)
        {
          *(_DWORD *)(v81 + 320) = -1;
          v90 = v142;
          if (v142 != -1)
          {
            ((void (*)(WTF::StringImpl **, uint64_t, _BYTE *))off_1E336C478[v142])(&v120, v81 + 296, v141);
            *(_DWORD *)(v81 + 320) = v90;
          }
          *(_BYTE *)(v81 + 328) = 1;
        }
        *(_QWORD *)(v81 + 336) = v144;
        v91 = v145;
        v144 = 0;
        v145 = 0;
        *(_QWORD *)(v81 + 344) = v91;
        v92 = v146;
        v146 = 0;
        *(_QWORD *)(v81 + 352) = v92;
        v93 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v81;
        if (v93)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v93 + 8))(v93, v84);
        result = (WTF::StringImpl *)WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2::~$_2((uint64_t)&v123, v84);
      }
      else
      {
        v101 = *(_QWORD *)(a1 + 8);
        v102 = *a3;
        v103 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v103 = &off_1E336C598;
        *((_QWORD *)v103 + 1) = v60;
        *((_QWORD *)v103 + 2) = v64;
        *((_QWORD *)v103 + 3) = v65;
        v123 = v103;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, int *, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v13, v117, v102, a4, &v123);
        result = v123;
        v123 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      }
      goto LABEL_129;
    }
    do
    {
      v61 = __ldaxr((unsigned int *)v42);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, (unsigned int *)v42));
    if (v62)
    {
LABEL_81:
      v60 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_83;
      goto LABEL_82;
    }
LABEL_188:
    atomic_store(1u, (unsigned int *)v42);
    WTF::fastFree(v42, v24);
    goto LABEL_81;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = *a5;
  v19 = 24;
LABEL_121:
  LOBYTE(v120) = v19;
  v122 = 0;
  LOBYTE(v123) = v19;
  v95 = v121;
  if (v121)
    *(_DWORD *)v121 += 2;
  v124 = v95;
  WebCore::DeferredPromise::reject(v18, (unsigned __int8 *)&v123, 0, &v122);
  v97 = v124;
  v124 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, v96);
    else
      *(_DWORD *)v97 -= 2;
  }
  result = v121;
  v121 = 0;
  if (!result)
    goto LABEL_129;
  if (*(_DWORD *)result == 2)
    goto LABEL_161;
  *(_DWORD *)result -= 2;
LABEL_129:
  if ((v16 & 1) == 0)
  {
    v98 = (unsigned int *)(v13 + 8);
    do
    {
      v99 = __ldaxr(v98);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v98));
    if (!v100)
    {
      atomic_store(1u, v98);
      v110 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v110 = off_1E31FE290;
      *((_QWORD *)v110 + 1) = v98;
      v123 = v110;
      WTF::ensureOnMainThread();
      result = v123;
      v123 = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2::~$_2(uint64_t a1, void *a2)
{
  WebCore::AbortSignal *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WebCore::AbortSignal *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  bmalloc::api *v26;
  void *v27;
  bmalloc::api *v28;
  void *v29;
  char v30;

  v3 = *(WebCore::AbortSignal **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v26, v27);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = *(_DWORD **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = *(unsigned int **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  if (*(_BYTE *)(a1 + 320))
  {
    v8 = *(unsigned int *)(a1 + 312);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))off_1E336C468[v8])(&v30, a1 + 288);
    *(_DWORD *)(a1 + 312) = -1;
  }
  if (*(_BYTE *)(a1 + 272))
  {
    v9 = *(unsigned int *)(a1 + 268);
    v10 = *(WTF **)(a1 + 256);
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      v12 = (uint64_t *)((char *)v10 + 8);
      do
      {
        v13 = *v12;
        if (*v12)
        {
          v14 = (uint64_t *)(v13 - 16);
          v15 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v16 = *(uint64_t **)(v13 - 8);
          if (v16)
          {
            v17 = *v14;
            *v16 = *v14;
            *(_QWORD *)(v17 + 8) = v16;
            *v14 = 0;
            v14[1] = 0;
          }
          *v14 = *(_QWORD *)(v15 + 40);
          *(_QWORD *)(v15 + 40) = v14;
          *v12 = 0;
        }
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
      v10 = *(WTF **)(a1 + 256);
    }
    if (v10)
    {
      *(_QWORD *)(a1 + 256) = 0;
      *(_DWORD *)(a1 + 264) = 0;
      WTF::fastFree(v10, a2);
    }
  }
  if (*(_BYTE *)(a1 + 248))
    WebCore::PublicKeyCredentialRequestOptions::~PublicKeyCredentialRequestOptions((WebCore::PublicKeyCredentialRequestOptions *)(a1 + 32), a2);
  v18 = *(WebCore::AbortSignal **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v18, a2);
      bmalloc::api::isoDeallocate(v28, v29);
    }
    else
    {
      --*((_DWORD *)v18 + 6);
    }
  }
  v19 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, a2);
    }
  }
  v22 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  return a1;
}

uint64_t WebCore::AuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  objc_class *v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *a3;
    *a3 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 192), (WTF::StringImpl *)a2);
    v7 = v6;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E336C5E8;
    v8[1] = v4;
    v14 = v8;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v5 + 40))(v5, v7, &v14);
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = *a3;
    v16 = 0;
    LOBYTE(v14) = 24;
    if (v13)
      *(_DWORD *)v13 += 2;
    v15 = v13;
    WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v14, 0, &v16);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = (uint64_t)v13;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::AuthenticatorCoordinator::isConditionalMediationAvailable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  objc_class *v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *a3;
    *a3 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 192), (WTF::StringImpl *)a2);
    v7 = v6;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E336C610;
    v8[1] = v4;
    v14 = v8;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v5 + 32))(v5, v7, &v14);
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = *a3;
    v16 = 0;
    LOBYTE(v14) = 24;
    if (v13)
      *(_DWORD *)v13 += 2;
    v15 = v13;
    WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v14, 0, &v16);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = (uint64_t)v13;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::AuthenticatorCoordinator::getClientCapabilities(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  objc_class *v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *a3;
    *a3 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 192), (WTF::StringImpl *)a2);
    v7 = v6;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E336C638;
    v8[1] = v4;
    v14 = v8;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v5 + 48))(v5, v7, &v14);
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = *a3;
    v16 = 0;
    LOBYTE(v14) = 24;
    if (v13)
      *(_DWORD *)v13 += 2;
    v15 = v13;
    WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v14, 0, &v16);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = (uint64_t)v13;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::AuthenticatorResponse::tryCreate(uint64_t *result, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  if (!*(_BYTE *)a2)
  {
    v10 = *(_QWORD *)(a2 + 120);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 128);
      if (v11)
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_OWORD *)(a2 + 120) = 0u;
        v8 = WTF::fastMalloc((WTF *)0xD8);
        *(_DWORD *)(v8 + 8) = 1;
        v15 = 0;
        *(_QWORD *)(v8 + 16) = v4;
        *(_BYTE *)(v8 + 32) = 0;
        *(_BYTE *)(v8 + 56) = 0;
        *(_BYTE *)(v8 + 64) = 0;
        *(_BYTE *)(v8 + 96) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 104) = 0;
        *(_BYTE *)(v8 + 112) = a3;
        *(_QWORD *)v8 = off_1E336C350;
        v13 = 0;
        v14 = 0;
        *(_QWORD *)(v8 + 120) = v10;
        *(_QWORD *)(v8 + 128) = v11;
        v12 = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a2 + 136) = 0;
        *(_QWORD *)(v8 + 136) = v12;
        *(_QWORD *)(v8 + 144) = 0;
        *(_OWORD *)(v8 + 152) = 0u;
        *(_OWORD *)(v8 + 176) = 0u;
        *(_OWORD *)(v8 + 192) = 0u;
        *(_QWORD *)(v8 + 208) = 0;
        if (*(_BYTE *)(a2 + 96))
        {
          *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 16);
          std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>>(v8 + 32, a2 + 24);
          std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>>(v8 + 64, a2 + 56);
        }
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v13);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v14);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v15);
        goto LABEL_11;
      }
    }
LABEL_12:
    v8 = 0;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(a2 + 112);
  if (!v7)
    goto LABEL_12;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v8 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v8 + 8) = 1;
  v15 = 0;
  *(_QWORD *)(v8 + 16) = v4;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_BYTE *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 96) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 112) = a3;
  *(_QWORD *)v8 = off_1E336C380;
  v14 = 0;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 120) = v7;
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(v8 + 128) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_DWORD *)(v8 + 136) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a2 + 156) = 0;
  *(_DWORD *)(v8 + 140) = v9;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v14);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v15);
  if (*(_BYTE *)(a2 + 96))
  {
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 16);
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>>(v8 + 32, a2 + 24);
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>>(v8 + 64, a2 + 56);
  }
LABEL_11:
  v15 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  WebCore::AuthenticatorResponse::setClientDataJSON(v8, &v15);
  result = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v15);
LABEL_13:
  *v3 = v8;
  return result;
}

uint64_t WebCore::AuthenticatorResponse::setClientDataJSON(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  WTF **v7;
  WTF *v8;
  WTF *v9;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD **)(result + 104);
  *(_QWORD *)(result + 104) = v2;
  if (v3)
  {
    v4 = *(_DWORD *)v3 == 2;
    *(_DWORD *)v3 -= 2;
    if (v4)
    {
      v5 = v3[10];
      if (v5)
      {
        *(_QWORD *)(v5 + 8) = 3;
        v3[10] = 0;
      }
      if ((v3[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v3 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v3 + 2));
      v7 = (WTF **)v3[1];
      if ((v7 & 1) == 0 && v7)
      {
        v9 = (WTF *)v3[1];
        v8 = *v7;
        if (*v7)
        {
          *(_QWORD *)v9 = 0;
          *((_DWORD *)v9 + 2) = 0;
          WTF::fastFree(v8, v6);
        }
        WTF::fastFree(v9, v6);
      }
      return WTF::fastFree((WTF *)v3, v6);
    }
  }
  return result;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs const&,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  _WORD *v5;
  _DWORD *v6;
  WTF *v7;
  BOOL v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  WebCore::AuthenticationExtensionsClientOutputs::PRFValues *v13;
  _DWORD *v14;
  WTF *v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  WTF *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v27;
  void *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;

  v4 = *(unsigned __int8 *)(a1 + 80);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = (_WORD *)(a1 + 8);
  if (v4)
  {
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
    {
      if (*(_BYTE *)(a1 + 32))
      {
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
        v6 = *(_DWORD **)(a2 + 16);
        if (v6)
          *v6 += 2;
        v7 = *(WTF **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v6;
        if (v7)
        {
          v8 = *(_DWORD *)v7 == 2;
          *(_DWORD *)v7 -= 2;
          if (v8)
          {
            v35 = v7;
            v27 = *((_QWORD *)v7 + 10);
            if (v27)
            {
              *(_QWORD *)(v27 + 8) = 3;
              *((_QWORD *)v35 + 10) = 0;
            }
            if ((*((_BYTE *)v35 + 72) & 1) == 0)
              JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v35 + 72));
            JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v35 + 16));
            v29 = (WTF *)*((_QWORD *)v35 + 1);
            if ((v29 & 1) == 0 && v29)
            {
              v30 = *(WTF **)v29;
              if (*(_QWORD *)v29)
              {
                *(_QWORD *)v29 = 0;
                *((_DWORD *)v29 + 2) = 0;
                WTF::fastFree(v30, v28);
              }
              WTF::fastFree(v29, v28);
            }
            WTF::fastFree(v35, v28);
          }
        }
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      }
    }
    else if (*(_BYTE *)(a1 + 32))
    {
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::reset[abi:sn180100]((uint64_t)v5);
    }
    else
    {
      *v5 = *(_WORD *)(a2 + 8);
      v12 = *(_DWORD **)(a2 + 16);
      if (v12)
        *v12 += 2;
      *(_QWORD *)(a1 + 16) = v12;
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = 1;
    }
    if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
    {
      if (*(_BYTE *)(a1 + 72))
      {
        *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
        v13 = (WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(a1 + 48);
        if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
        {
          if (*(_BYTE *)(a1 + 64))
          {
            v14 = *(_DWORD **)(a2 + 48);
            if (v14)
              *v14 += 2;
            v15 = *(WTF **)v13;
            *(_QWORD *)v13 = v14;
            if (v15)
            {
              v8 = *(_DWORD *)v15 == 2;
              *(_DWORD *)v15 -= 2;
              if (v8)
              {
                v36 = v15;
                v31 = *((_QWORD *)v15 + 10);
                if (v31)
                {
                  *(_QWORD *)(v31 + 8) = 3;
                  *((_QWORD *)v36 + 10) = 0;
                }
                if ((*((_BYTE *)v36 + 72) & 1) == 0)
                  JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v36 + 72));
                JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v36 + 16));
                v33 = (WTF *)*((_QWORD *)v36 + 1);
                if ((v33 & 1) == 0 && v33)
                {
                  v34 = *(WTF **)v33;
                  if (*(_QWORD *)v33)
                  {
                    *(_QWORD *)v33 = 0;
                    *((_DWORD *)v33 + 2) = 0;
                    WTF::fastFree(v34, v32);
                  }
                  WTF::fastFree(v33, v32);
                }
                WTF::fastFree(v36, v32);
              }
            }
            v16 = *(_DWORD **)(a2 + 56);
            if (v16)
              *v16 += 2;
            v17 = *(_QWORD **)(a1 + 56);
            *(_QWORD *)(a1 + 56) = v16;
            if (v17)
            {
              v8 = *(_DWORD *)v17 == 2;
              *(_DWORD *)v17 -= 2;
              if (v8)
              {
                v18 = v17[10];
                if (v18)
                {
                  *(_QWORD *)(v18 + 8) = 3;
                  v17[10] = 0;
                }
                if ((v17[9] & 1) == 0)
                  JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v17 + 9));
                JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v17 + 2));
                v20 = (WTF *)v17[1];
                if ((v20 & 1) == 0 && v20)
                {
                  v21 = *(WTF **)v20;
                  if (*(_QWORD *)v20)
                  {
                    *(_QWORD *)v20 = 0;
                    *((_DWORD *)v20 + 2) = 0;
                    WTF::fastFree(v21, v19);
                  }
                  WTF::fastFree(v20, v19);
                }
                WTF::fastFree((WTF *)v17, v19);
              }
            }
          }
        }
        else if (*(_BYTE *)(a1 + 64))
        {
          WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues(v13);
          *(_BYTE *)(a1 + 64) = 0;
        }
        else
        {
          v24 = *(_DWORD **)(a2 + 48);
          if (v24)
            *v24 += 2;
          *(_QWORD *)v13 = v24;
          v25 = *(_DWORD **)(a2 + 56);
          if (v25)
            *v25 += 2;
          *(_QWORD *)(a1 + 56) = v25;
          *(_BYTE *)(a1 + 64) = 1;
        }
      }
    }
    else if (*(_BYTE *)(a1 + 72))
    {
      if (*(_BYTE *)(a1 + 64))
        WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(a1 + 48));
      *(_BYTE *)(a1 + 72) = 0;
    }
    else
    {
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 64) = 0;
      if (*(_BYTE *)(a2 + 64))
      {
        v22 = *(_DWORD **)(a2 + 48);
        if (v22)
          *v22 += 2;
        *(_QWORD *)(a1 + 48) = v22;
        v23 = *(_DWORD **)(a2 + 56);
        if (v23)
          *v23 += 2;
        *(_QWORD *)(a1 + 56) = v23;
        *(_BYTE *)(a1 + 64) = 1;
      }
      *(_BYTE *)(a1 + 72) = 1;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      *v5 = *(_WORD *)(a2 + 8);
      v9 = *(_DWORD **)(a2 + 16);
      if (v9)
        *v9 += 2;
      *(_QWORD *)(a1 + 16) = v9;
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = 1;
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    if (*(_BYTE *)(a2 + 72))
    {
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 64) = 0;
      if (*(_BYTE *)(a2 + 64))
      {
        v10 = *(_DWORD **)(a2 + 48);
        if (v10)
          *v10 += 2;
        *(_QWORD *)(a1 + 48) = v10;
        v11 = *(_DWORD **)(a2 + 56);
        if (v11)
          *v11 += 2;
        *(_QWORD *)(a1 + 56) = v11;
        *(_BYTE *)(a1 + 64) = 1;
      }
      *(_BYTE *)(a1 + 72) = 1;
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

uint64_t WebCore::AuthenticatorResponse::rawId(WebCore::AuthenticatorResponse *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::AuthenticatorResponse::extensions@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  *(_DWORD *)a2 = *(_DWORD *)(this + 24);
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (*(_BYTE *)(this + 56))
  {
    *(_WORD *)(a2 + 8) = *(_WORD *)(this + 32);
    v2 = *(_DWORD **)(this + 40);
    if (v2)
      *v2 += 2;
    *(_QWORD *)(a2 + 16) = v2;
    *(_WORD *)(a2 + 24) = *(_WORD *)(this + 48);
    *(_BYTE *)(a2 + 32) = 1;
  }
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(this + 96))
  {
    *(_WORD *)(a2 + 40) = *(_WORD *)(this + 64);
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 64) = 0;
    if (*(_BYTE *)(this + 88))
    {
      v3 = *(_DWORD **)(this + 72);
      if (v3)
        *v3 += 2;
      *(_QWORD *)(a2 + 48) = v3;
      v4 = *(_DWORD **)(this + 80);
      if (v4)
        *v4 += 2;
      *(_QWORD *)(a2 + 56) = v4;
      *(_BYTE *)(a2 + 64) = 1;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  return this;
}

uint64_t WebCore::AuthenticatorResponse::attachment(WebCore::AuthenticatorResponse *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t WebCore::PublicKeyCredential::PublicKeyCredential(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v8;

  WTF::base64EncodeToString();
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3354720;
  if (v8)
  {
    v5 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = 0x100000001;
    if (v5)
      *(_DWORD *)v8 = v5;
    else
      WTF::StringImpl::destroy(v8, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0x100000001;
  }
  *(_QWORD *)a1 = off_1E336C3E0;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

char *WebCore::convertBytesToVector@<X0>(char *this@<X0>, WTF *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v3;
  char *v5;
  char v6;

  v3 = a2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = (_DWORD)a2;
  if (a2)
  {
    if ((unint64_t)a2 >> 32)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = this;
      this = (char *)WTF::fastMalloc(a2);
      *(_DWORD *)(a3 + 8) = (_DWORD)v3;
      *(_QWORD *)a3 = this;
      do
      {
        v6 = *v5++;
        *this++ = v6;
        v3 = (WTF *)((char *)v3 - 1);
      }
      while (v3);
    }
  }
  return this;
}

WTF *WebCore::produceRpIdHash@<X0>(unsigned __int8 **a1@<X8>)
{
  WTF *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  WTF *result;
  unsigned int *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;

  PAL::CryptoDigest::create(2, (uint64_t *)&v12);
  WTF::String::utf8();
  v4 = v12;
  if (v11)
  {
    v5 = (char *)v11 + 16;
    v6 = *((_QWORD *)v11 + 1);
  }
  else
  {
    LODWORD(v6) = 0;
    v5 = 0;
  }
  PAL::CryptoDigest::addBytes((uint64_t)v12, v5, v6);
  PAL::CryptoDigest::computeHash((uint64_t)v4, a1);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      result = (WTF *)WTF::fastFree(result, v7);
      if (!v4)
        return result;
      goto LABEL_7;
    }
    --*(_DWORD *)result;
  }
  if (!v4)
    return result;
LABEL_7:
  v9 = *(unsigned int **)v4;
  *(_QWORD *)v4 = 0;
  if (v9)
  {
    v10 = v9[4];
    if ((_DWORD)v10 != -1)
      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v10])(&v11, v9 + 2);
    v9[4] = -1;
    WTF::fastFree((WTF *)v9, v7);
  }
  return (WTF *)WTF::fastFree(v4, v7);
}

uint64_t WebCore::encodeES256PublicKeyAsCBOR@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  WTF *v47;
  size_t v48;
  void *v49;
  void *v50;
  uint64_t result;
  WTF *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WTF **v58;
  WTF *v59;
  uint64_t v60;
  char v61;
  WTF **v62;

  v59 = 0;
  v60 = 0;
  v58 = &v59;
  v55 = 2;
  v54 = 0;
  v53 = 1;
  LODWORD(v52) = 0;
  v62 = &v52;
  v6 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v58, (cbor::CBORValue *)&v52, (uint64_t)&std::piecewise_construct, (uint64_t *)&v62, (uint64_t)&v61);
  cbor::CBORValue::internalCleanup(v6 + 64, v7);
  *(_DWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 2;
  cbor::CBORValue::internalCleanup((uint64_t)&v52, v8);
  cbor::CBORValue::internalCleanup((uint64_t)&v54, v9);
  v55 = -7;
  v54 = 1;
  v53 = 3;
  LODWORD(v52) = 0;
  v62 = &v52;
  v10 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v58, (cbor::CBORValue *)&v52, (uint64_t)&std::piecewise_construct, (uint64_t *)&v62, (uint64_t)&v61);
  cbor::CBORValue::internalCleanup(v10 + 64, v11);
  v13 = v54;
  *(_DWORD *)(v10 + 64) = v54;
  switch(v13)
  {
    case 0:
    case 1:
      v14 = v55;
      goto LABEL_7;
    case 2:
    case 4:
      *(_QWORD *)(v10 + 72) = v55;
      v15 = v56;
      v55 = 0;
      v56 = 0;
      *(_QWORD *)(v10 + 80) = v15;
      break;
    case 3:
      v14 = v55;
      v55 = 0;
      goto LABEL_7;
    case 5:
      v17 = v55;
      v16 = v56;
      *(_QWORD *)(v10 + 80) = v56;
      v14 = v10 + 80;
      *(_QWORD *)(v10 + 72) = v17;
      v18 = v57;
      *(_QWORD *)(v10 + 88) = v57;
      if (v18)
      {
        *((_QWORD *)v16 + 2) = v14;
        v55 = (uint64_t)&v56;
        v56 = 0;
        v57 = 0;
      }
      else
      {
LABEL_7:
        *(_QWORD *)(v10 + 72) = v14;
      }
      break;
    case 7:
      *(_DWORD *)(v10 + 72) = v55;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v52, v12);
  cbor::CBORValue::internalCleanup((uint64_t)&v54, v19);
  v55 = 1;
  v54 = 0;
  v53 = -1;
  LODWORD(v52) = 1;
  v62 = &v52;
  v20 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v58, (cbor::CBORValue *)&v52, (uint64_t)&std::piecewise_construct, (uint64_t *)&v62, (uint64_t)&v61);
  cbor::CBORValue::internalCleanup(v20 + 64, v21);
  v23 = v54;
  *(_DWORD *)(v20 + 64) = v54;
  switch(v23)
  {
    case 0:
    case 1:
      v24 = v55;
      goto LABEL_15;
    case 2:
    case 4:
      *(_QWORD *)(v20 + 72) = v55;
      v25 = v56;
      v55 = 0;
      v56 = 0;
      *(_QWORD *)(v20 + 80) = v25;
      break;
    case 3:
      v24 = v55;
      v55 = 0;
      goto LABEL_15;
    case 5:
      v27 = v55;
      v26 = v56;
      *(_QWORD *)(v20 + 80) = v56;
      v24 = v20 + 80;
      *(_QWORD *)(v20 + 72) = v27;
      v28 = v57;
      *(_QWORD *)(v20 + 88) = v57;
      if (v28)
      {
        *((_QWORD *)v26 + 2) = v24;
        v55 = (uint64_t)&v56;
        v56 = 0;
        v57 = 0;
      }
      else
      {
LABEL_15:
        *(_QWORD *)(v20 + 72) = v24;
      }
      break;
    case 7:
      *(_DWORD *)(v20 + 72) = v55;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v52, v22);
  cbor::CBORValue::internalCleanup((uint64_t)&v54, v29);
  v30 = *a1;
  *a1 = 0;
  v31 = *((_DWORD *)a1 + 2);
  v32 = *((_DWORD *)a1 + 3);
  v54 = 2;
  LODWORD(v56) = v31;
  a1[1] = 0;
  v53 = -2;
  LODWORD(v52) = 1;
  v62 = &v52;
  v33 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v58, (cbor::CBORValue *)&v52, (uint64_t)&std::piecewise_construct, (uint64_t *)&v62, (uint64_t)&v61);
  cbor::CBORValue::internalCleanup(v33 + 64, v34);
  *(_DWORD *)(v33 + 64) = 2;
  v55 = 0;
  *(_QWORD *)(v33 + 72) = v30;
  v35 = (int)v56;
  v56 = 0;
  *(_DWORD *)(v33 + 80) = v35;
  *(_DWORD *)(v33 + 84) = v32;
  cbor::CBORValue::internalCleanup((uint64_t)&v52, v36);
  cbor::CBORValue::internalCleanup((uint64_t)&v54, v37);
  v38 = *a2;
  *a2 = 0;
  v39 = *((_DWORD *)a2 + 2);
  LODWORD(v30) = *((_DWORD *)a2 + 3);
  v54 = 2;
  LODWORD(v56) = v39;
  a2[1] = 0;
  v53 = -3;
  LODWORD(v52) = 1;
  v62 = &v52;
  v40 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v58, (cbor::CBORValue *)&v52, (uint64_t)&std::piecewise_construct, (uint64_t *)&v62, (uint64_t)&v61);
  cbor::CBORValue::internalCleanup(v40 + 64, v41);
  *(_DWORD *)(v40 + 64) = 2;
  v55 = 0;
  *(_QWORD *)(v40 + 72) = v38;
  v42 = (int)v56;
  v56 = 0;
  *(_DWORD *)(v40 + 80) = v42;
  *(_DWORD *)(v40 + 84) = v30;
  cbor::CBORValue::internalCleanup((uint64_t)&v52, v43);
  cbor::CBORValue::internalCleanup((uint64_t)&v54, v44);
  v54 = 5;
  v55 = (uint64_t)v58;
  v56 = v59;
  v57 = v60;
  if (v60)
  {
    *((_QWORD *)v59 + 2) = &v56;
    v58 = &v59;
    v59 = 0;
    v60 = 0;
  }
  else
  {
    v55 = (uint64_t)&v56;
  }
  v52 = 0;
  v53 = 0;
  v62 = &v52;
  v45 = cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)&v62, (const cbor::CBORValue *)&v54, 16);
  v47 = v52;
  if ((v45 & 1) != 0)
  {
    v48 = HIDWORD(v53);
    cbor::CBORValue::internalCleanup((uint64_t)&v54, v46);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v48;
    if ((_DWORD)v48)
    {
      v50 = (void *)WTF::fastMalloc((WTF *)v48);
      *(_DWORD *)(a3 + 8) = v48;
      *(_QWORD *)a3 = v50;
      memcpy(v50, v47, v48);
    }
    if (v47)
      WTF::fastFree(v47, v49);
    return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v58, v59);
  }
  else
  {
    if (v52)
    {
      v52 = 0;
      LODWORD(v53) = 0;
      WTF::fastFree(v47, v46);
    }
    result = cbor::CBORValue::internalCleanup((uint64_t)&v54, v46);
    __break(1u);
  }
  return result;
}

uint64_t WebCore::buildAttestedCredentialData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5;
  uint64_t result;
  size_t v10;
  WTF *v11;
  const void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  size_t v28;
  size_t v29;
  const void *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  size_t v34;
  const void *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  void *v52;

  a4[1] = 0;
  v5 = *(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a3 + 12) + 18;
  if (HIDWORD(v5))
    goto LABEL_76;
  result = WTF::fastMalloc((WTF *)(*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a3 + 12) + 18));
  *((_DWORD *)a4 + 2) = v5;
  *a4 = result;
  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10)
  {
    v11 = (WTF *)result;
    v12 = *(const void **)a1;
    if (v5 < v10)
    {
      v39 = v5 + (v5 >> 2);
      if (v39 + 1 > v10)
        v40 = v39 + 1;
      else
        v40 = v10;
      if (HIDWORD(v40))
      {
        __break(0xC471u);
        JUMPOUT(0x19556C6D4);
      }
      v42 = WTF::fastMalloc((WTF *)v40);
      *((_DWORD *)a4 + 2) = v40;
      *a4 = v42;
      if ((WTF *)v42 == v11)
      {
        v42 = 0;
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
      }
      WTF::fastFree(v11, v41);
      v11 = (WTF *)v42;
    }
    result = (uint64_t)memcpy(v11, v12, v10);
    *((_DWORD *)a4 + 3) = v10;
    LODWORD(v5) = *((_DWORD *)a4 + 2);
  }
  v13 = *(_DWORD *)(a2 + 12);
  if ((_DWORD)v10 == (_DWORD)v5)
  {
    v14 = v10 + (v10 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v10 + 1)
      v16 = v10 + 1;
    else
      v16 = v15;
    if (HIDWORD(v16))
    {
      __break(0xC471u);
      JUMPOUT(0x19556C6C4);
    }
    v17 = (char *)*a4;
    v18 = (char *)WTF::fastMalloc((WTF *)v16);
    *((_DWORD *)a4 + 2) = v16;
    *a4 = (uint64_t)v18;
    result = (uint64_t)memcpy(v18, v17, v10);
    if (v17)
    {
      if (v18 == v17)
      {
        v18 = 0;
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
      }
      result = WTF::fastFree((WTF *)v17, v19);
    }
    v18[v10] = BYTE1(v13);
    LODWORD(v5) = *((_DWORD *)a4 + 2);
  }
  else
  {
    *(_BYTE *)(*a4 + v10) = BYTE1(v13);
  }
  v20 = (v10 + 1);
  v21 = *(_DWORD *)(a2 + 12);
  if ((_DWORD)v20 == (_DWORD)v5)
  {
    v22 = v20 + (v20 >> 2);
    if (v22 >= 0x10)
      v23 = v22 + 1;
    else
      v23 = 16;
    if (v23 <= v20 + 1)
      v24 = v20 + 1;
    else
      v24 = v23;
    if (HIDWORD(v24))
    {
      __break(0xC471u);
      JUMPOUT(0x19556C6CCLL);
    }
    v25 = (char *)*a4;
    v26 = (char *)WTF::fastMalloc((WTF *)v24);
    *((_DWORD *)a4 + 2) = v24;
    *a4 = (uint64_t)v26;
    result = (uint64_t)memcpy(v26, v25, (v10 + 1));
    if (v25)
    {
      if (v26 == v25)
      {
        v26 = 0;
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
      }
      result = WTF::fastFree((WTF *)v25, v27);
    }
  }
  else
  {
    v26 = (char *)*a4;
  }
  v26[v20] = v21;
  v28 = (v10 + 2);
  *((_DWORD *)a4 + 3) = v28;
  v29 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v29)
  {
    v30 = *(const void **)a2;
    v31 = v29 + v28;
    v32 = *((unsigned int *)a4 + 2);
    v33 = (char *)*a4;
    if (v31 > v32)
    {
      v43 = v32 + (v32 >> 2);
      if (v43 >= 0x10)
        v44 = v43 + 1;
      else
        v44 = 16;
      if (v44 <= v31)
        v45 = v29 + v28;
      else
        v45 = v44;
      if (HIDWORD(v45))
      {
        __break(0xC471u);
        JUMPOUT(0x19556C6DCLL);
      }
      v46 = (char *)WTF::fastMalloc((WTF *)v45);
      *((_DWORD *)a4 + 2) = v45;
      *a4 = (uint64_t)v46;
      memcpy(v46, v33, v28);
      if (v33)
      {
        if (v46 == v33)
        {
          v46 = 0;
          *a4 = 0;
          *((_DWORD *)a4 + 2) = 0;
        }
        WTF::fastFree((WTF *)v33, v47);
      }
      v33 = v46;
    }
    result = (uint64_t)memcpy(&v33[v28], v30, v29);
    *((_DWORD *)a4 + 3) = v31;
  }
  else
  {
    LODWORD(v31) = v28;
  }
  v34 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v34)
  {
    v35 = *(const void **)a3;
    v36 = v34 + v31;
    v37 = *((unsigned int *)a4 + 2);
    v38 = (char *)*a4;
    if (v36 <= v37)
    {
LABEL_37:
      result = (uint64_t)memcpy(&v38[v31], v35, v34);
      *((_DWORD *)a4 + 3) = v36;
      return result;
    }
    v48 = v37 + (v37 >> 2);
    if (v48 >= 0x10)
      v49 = v48 + 1;
    else
      v49 = 16;
    if (v49 <= v36)
      v50 = v34 + v31;
    else
      v50 = v49;
    if (!HIDWORD(v50))
    {
      v51 = (char *)WTF::fastMalloc((WTF *)v50);
      *((_DWORD *)a4 + 2) = v50;
      *a4 = (uint64_t)v51;
      memcpy(v51, v38, v31);
      if (v38)
      {
        if (v51 == v38)
        {
          v51 = 0;
          *a4 = 0;
          *((_DWORD *)a4 + 2) = 0;
        }
        WTF::fastFree((WTF *)v38, v52);
      }
      v38 = v51;
      goto LABEL_37;
    }
LABEL_76:
    __break(0xC471u);
    JUMPOUT(0x19556C6BCLL);
  }
  return result;
}

uint64_t WebCore::buildUserEntityMap@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, _DWORD **a3@<X2>, _QWORD *a4@<X8>)
{
  void *v7;
  int v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _DWORD v25[8];
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _DWORD *v30;

  v7 = 0;
  a4[2] = 0;
  a4[1] = 0;
  *a4 = a4 + 1;
  v26 = 2;
  v8 = *(_DWORD *)(a1 + 12);
  if (v8)
  {
    v7 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 12));
    memcpy(v7, *(const void **)a1, *(unsigned int *)(a1 + 12));
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25[0] = 3;
  v30 = v25;
  v10 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a4, (cbor::CBORValue *)v25, (uint64_t)&std::piecewise_construct, (uint64_t *)&v30, (uint64_t)&v29);
  cbor::CBORValue::internalCleanup(v10 + 64, v11);
  *(_DWORD *)(v10 + 64) = 2;
  v27 = 0;
  v28 = 0;
  *(_QWORD *)(v10 + 72) = v7;
  *(_DWORD *)(v10 + 80) = v8;
  *(_DWORD *)(v10 + 84) = v8;
  cbor::CBORValue::internalCleanup((uint64_t)v25, v12);
  cbor::CBORValue::internalCleanup((uint64_t)&v26, v13);
  v26 = 3;
  v14 = *a2;
  if (*a2)
    *v14 += 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25[0] = 3;
  v30 = v25;
  v15 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a4, (cbor::CBORValue *)v25, (uint64_t)&std::piecewise_construct, (uint64_t *)&v30, (uint64_t)&v29);
  cbor::CBORValue::internalCleanup(v15 + 64, v16);
  *(_DWORD *)(v15 + 64) = 3;
  v27 = 0;
  *(_QWORD *)(v15 + 72) = v14;
  cbor::CBORValue::internalCleanup((uint64_t)v25, v17);
  cbor::CBORValue::internalCleanup((uint64_t)&v26, v18);
  v26 = 3;
  v19 = *a3;
  if (v19)
    *v19 += 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25[0] = 3;
  v30 = v25;
  v20 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a4, (cbor::CBORValue *)v25, (uint64_t)&std::piecewise_construct, (uint64_t *)&v30, (uint64_t)&v29);
  cbor::CBORValue::internalCleanup(v20 + 64, v21);
  *(_DWORD *)(v20 + 64) = 3;
  v27 = 0;
  *(_QWORD *)(v20 + 72) = v19;
  cbor::CBORValue::internalCleanup((uint64_t)v25, v22);
  return cbor::CBORValue::internalCleanup((uint64_t)&v26, v23);
}

uint64_t WebCore::buildCredentialDescriptor@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  int v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int *v17;

  v3 = 0;
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v13 = 2;
  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    v3 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 12));
    memcpy(v3, *(const void **)a1, *(unsigned int *)(a1 + 12));
  }
  WTF::String::String((WTF::String *)&v12, "id");
  v11 = 3;
  v17 = &v11;
  v6 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a2, (cbor::CBORValue *)&v11, (uint64_t)&std::piecewise_construct, (uint64_t *)&v17, (uint64_t)&v16);
  cbor::CBORValue::internalCleanup(v6 + 64, v7);
  *(_DWORD *)(v6 + 64) = 2;
  v14 = 0;
  v15 = 0;
  *(_QWORD *)(v6 + 72) = v3;
  *(_DWORD *)(v6 + 80) = v4;
  *(_DWORD *)(v6 + 84) = v4;
  cbor::CBORValue::internalCleanup((uint64_t)&v11, v8);
  return cbor::CBORValue::internalCleanup((uint64_t)&v13, v9);
}

WTF *WebCore::buildAuthData@<X0>(char a1@<W1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  WTF *result;
  unsigned int v16;
  WTF *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char v21;
  int v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  void *v28;
  void *v29;
  _BYTE *v30;
  int v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  void *v37;
  void *v38;
  _BYTE *v39;
  int v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  void *v46;
  void *v47;
  _BYTE *v48;
  int v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  void *v55;
  void *v56;
  _BYTE *v57;
  size_t v58;
  size_t v59;
  const void *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  void *v73;
  void *v74;
  WTF *v75;
  unsigned int v76;
  char v77;

  v77 = a1;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v5 = *(unsigned int *)(a3 + 12);
  if (v5 >= 0xFFFFFFDB)
  {
    __break(0xC471u);
    goto LABEL_102;
  }
  v8 = v5 + 37;
  v9 = WTF::fastMalloc((WTF *)(v5 + 37));
  *(_DWORD *)(a4 + 8) = v8;
  *(_QWORD *)a4 = v9;
  WebCore::produceRpIdHash((unsigned __int8 **)&v75);
  v11 = v76;
  v12 = *(unsigned int *)(a4 + 8);
  v13 = *(unsigned int *)(a4 + 12);
  v14 = v76 + v13;
  if (v14 > v12)
  {
    v64 = v12 + (v12 >> 2);
    if (v64 >= 0x10)
      v65 = v64 + 1;
    else
      v65 = 16;
    if (v65 <= v14)
      v66 = v76 + v13;
    else
      v66 = v65;
    if (HIDWORD(v66))
    {
      __break(0xC471u);
      JUMPOUT(0x19556CE54);
    }
    v67 = *(void **)a4;
    v68 = (void *)WTF::fastMalloc((WTF *)v66);
    *(_DWORD *)(a4 + 8) = v66;
    *(_QWORD *)a4 = v68;
    memcpy(v68, v67, v13);
    if (v67)
    {
      if (*(void **)a4 == v67)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v67, v10);
    }
  }
  result = v75;
  if ((_DWORD)v11)
  {
    v16 = *(_DWORD *)(a4 + 12);
    v17 = v75;
    do
    {
      v18 = *(_BYTE *)v17;
      v17 = (WTF *)((char *)v17 + 1);
      *(_BYTE *)(*(_QWORD *)a4 + v16) = v18;
      v16 = *(_DWORD *)(a4 + 12) + 1;
      *(_DWORD *)(a4 + 12) = v16;
      --v11;
    }
    while (v11);
  }
  if (result)
    result = (WTF *)WTF::fastFree(result, v10);
  v19 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v19 == *(_DWORD *)(a4 + 8))
  {
    result = (WTF *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, (WTF *)(v19 + 1), (unint64_t)&v77);
    v19 = *(unsigned int *)(a4 + 12);
    v20 = *(char **)a4;
    v21 = *(_BYTE *)result;
  }
  else
  {
    v20 = *(char **)a4;
    v21 = v77;
  }
  v20[v19] = v21;
  v22 = *(_DWORD *)(a4 + 8);
  v23 = (*(_DWORD *)(a4 + 12) + 1);
  *(_DWORD *)(a4 + 12) = v23;
  if ((_DWORD)v23 == v22)
  {
    v24 = v23 + (v23 >> 2);
    if (v24 >= 0x10)
      v25 = v24 + 1;
    else
      v25 = 16;
    if (v25 <= v23 + 1)
      v26 = v23 + 1;
    else
      v26 = v25;
    if (HIDWORD(v26))
    {
      __break(0xC471u);
      JUMPOUT(0x19556CE34);
    }
    v27 = *(char **)a4;
    v28 = (void *)WTF::fastMalloc((WTF *)v26);
    *(_DWORD *)(a4 + 8) = v26;
    *(_QWORD *)a4 = v28;
    result = (WTF *)memcpy(v28, v27, v23);
    if (v27)
    {
      if (*(char **)a4 == v27)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      result = (WTF *)WTF::fastFree((WTF *)v27, v29);
    }
    v30 = (_BYTE *)(*(_QWORD *)a4 + *(unsigned int *)(a4 + 12));
  }
  else
  {
    v30 = (_BYTE *)(*(_QWORD *)a4 + v23);
  }
  *v30 = HIBYTE(a2);
  v31 = *(_DWORD *)(a4 + 8);
  v32 = (*(_DWORD *)(a4 + 12) + 1);
  *(_DWORD *)(a4 + 12) = v32;
  if ((_DWORD)v32 == v31)
  {
    v33 = v32 + (v32 >> 2);
    if (v33 >= 0x10)
      v34 = v33 + 1;
    else
      v34 = 16;
    if (v34 <= v32 + 1)
      v35 = v32 + 1;
    else
      v35 = v34;
    if (HIDWORD(v35))
    {
      __break(0xC471u);
      JUMPOUT(0x19556CE3CLL);
    }
    v36 = *(char **)a4;
    v37 = (void *)WTF::fastMalloc((WTF *)v35);
    *(_DWORD *)(a4 + 8) = v35;
    *(_QWORD *)a4 = v37;
    result = (WTF *)memcpy(v37, v36, v32);
    if (v36)
    {
      if (*(char **)a4 == v36)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      result = (WTF *)WTF::fastFree((WTF *)v36, v38);
    }
    v39 = (_BYTE *)(*(_QWORD *)a4 + *(unsigned int *)(a4 + 12));
  }
  else
  {
    v39 = (_BYTE *)(*(_QWORD *)a4 + v32);
  }
  *v39 = BYTE2(a2);
  v40 = *(_DWORD *)(a4 + 8);
  v41 = (*(_DWORD *)(a4 + 12) + 1);
  *(_DWORD *)(a4 + 12) = v41;
  if ((_DWORD)v41 == v40)
  {
    v42 = v41 + (v41 >> 2);
    if (v42 >= 0x10)
      v43 = v42 + 1;
    else
      v43 = 16;
    if (v43 <= v41 + 1)
      v44 = v41 + 1;
    else
      v44 = v43;
    if (HIDWORD(v44))
    {
      __break(0xC471u);
      JUMPOUT(0x19556CE44);
    }
    v45 = *(char **)a4;
    v46 = (void *)WTF::fastMalloc((WTF *)v44);
    *(_DWORD *)(a4 + 8) = v44;
    *(_QWORD *)a4 = v46;
    result = (WTF *)memcpy(v46, v45, v41);
    if (v45)
    {
      if (*(char **)a4 == v45)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      result = (WTF *)WTF::fastFree((WTF *)v45, v47);
    }
    v48 = (_BYTE *)(*(_QWORD *)a4 + *(unsigned int *)(a4 + 12));
  }
  else
  {
    v48 = (_BYTE *)(*(_QWORD *)a4 + v41);
  }
  *v48 = BYTE1(a2);
  v49 = *(_DWORD *)(a4 + 8);
  v50 = (*(_DWORD *)(a4 + 12) + 1);
  *(_DWORD *)(a4 + 12) = v50;
  if ((_DWORD)v50 == v49)
  {
    v51 = v50 + (v50 >> 2);
    if (v51 >= 0x10)
      v52 = v51 + 1;
    else
      v52 = 16;
    if (v52 <= v50 + 1)
      v53 = v50 + 1;
    else
      v53 = v52;
    if (HIDWORD(v53))
    {
      __break(0xC471u);
      JUMPOUT(0x19556CE4CLL);
    }
    v54 = *(char **)a4;
    v55 = (void *)WTF::fastMalloc((WTF *)v53);
    *(_DWORD *)(a4 + 8) = v53;
    *(_QWORD *)a4 = v55;
    result = (WTF *)memcpy(v55, v54, v50);
    if (v54)
    {
      if (*(char **)a4 == v54)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      result = (WTF *)WTF::fastFree((WTF *)v54, v56);
    }
    v57 = (_BYTE *)(*(_QWORD *)a4 + *(unsigned int *)(a4 + 12));
  }
  else
  {
    v57 = (_BYTE *)(*(_QWORD *)a4 + v50);
  }
  *v57 = a2;
  v58 = (*(_DWORD *)(a4 + 12) + 1);
  *(_DWORD *)(a4 + 12) = v58;
  v59 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v59)
  {
    v60 = *(const void **)a3;
    v61 = v59 + v58;
    v62 = *(unsigned int *)(a4 + 8);
    if (v61 <= v62)
    {
LABEL_69:
      v63 = *(unsigned int *)(a4 + 12);
      if (v61 < v63)
      {
        __break(0xC471u);
        JUMPOUT(0x19556CE2CLL);
      }
      result = (WTF *)memcpy((void *)(*(_QWORD *)a4 + v63), v60, v59);
      *(_DWORD *)(a4 + 12) = v61;
      return result;
    }
    v69 = v62 + (v62 >> 2);
    if (v69 >= 0x10)
      v70 = v69 + 1;
    else
      v70 = 16;
    if (v70 <= v61)
      v71 = v59 + v58;
    else
      v71 = v70;
    if (!HIDWORD(v71))
    {
      v72 = *(char **)a4;
      v73 = (void *)WTF::fastMalloc((WTF *)v71);
      *(_DWORD *)(a4 + 8) = v71;
      *(_QWORD *)a4 = v73;
      memcpy(v73, v72, v58);
      if (v72)
      {
        if (*(char **)a4 == v72)
        {
          *(_QWORD *)a4 = 0;
          *(_DWORD *)(a4 + 8) = 0;
        }
        WTF::fastFree((WTF *)v72, v74);
      }
      goto LABEL_69;
    }
    __break(0xC471u);
LABEL_102:
    JUMPOUT(0x19556CE24);
  }
  return result;
}

uint64_t WebCore::buildAttestationMap@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v42;
  int v43;
  _BYTE v44[24];
  WTF::StringImpl *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int *v50;

  a6[2] = 0;
  a6[1] = 0;
  *a6 = a6 + 1;
  if (*a4)
    goto LABEL_11;
  if (*((_DWORD *)a1 + 3) >= 0x35u && a5 != 0)
  {
    v11 = *a1;
    *(_QWORD *)(v11 + 45) = 0;
    *(_QWORD *)(v11 + 37) = 0;
  }
  WTF::String::String((WTF::String *)&v45, "none");
  v13 = v45;
  v45 = 0;
  v14 = *a2;
  *a2 = v13;
  if (v14)
  {
    v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v12);
      v14 = v45;
      v45 = 0;
      if (!v14)
        goto LABEL_10;
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v42);
        goto LABEL_10;
      }
    }
    *(_DWORD *)v14 = v15;
  }
LABEL_10:
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(a3, *(WTF **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
LABEL_11:
  v16 = *a1;
  *a1 = 0;
  v17 = *((_DWORD *)a1 + 2);
  v18 = *((_DWORD *)a1 + 3);
  LODWORD(v45) = 2;
  LODWORD(v47) = v17;
  a1[1] = 0;
  WTF::String::String((WTF::String *)v44, "authData");
  v43 = 3;
  v50 = &v43;
  v19 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a6, (cbor::CBORValue *)&v43, (uint64_t)&std::piecewise_construct, (uint64_t *)&v50, (uint64_t)&v49);
  cbor::CBORValue::internalCleanup(v19 + 64, v20);
  *(_DWORD *)(v19 + 64) = 2;
  v46 = 0;
  *(_QWORD *)(v19 + 72) = v16;
  v21 = v47;
  v47 = 0;
  *(_DWORD *)(v19 + 80) = v21;
  *(_DWORD *)(v19 + 84) = v18;
  cbor::CBORValue::internalCleanup((uint64_t)&v43, v22);
  cbor::CBORValue::internalCleanup((uint64_t)&v45, v23);
  LODWORD(v45) = 3;
  v24 = *a2;
  *a2 = 0;
  WTF::String::String((WTF::String *)v44, "fmt");
  v43 = 3;
  v50 = &v43;
  v25 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a6, (cbor::CBORValue *)&v43, (uint64_t)&std::piecewise_construct, (uint64_t *)&v50, (uint64_t)&v49);
  cbor::CBORValue::internalCleanup(v25 + 64, v26);
  *(_DWORD *)(v25 + 64) = 3;
  v46 = 0;
  *(_QWORD *)(v25 + 72) = v24;
  cbor::CBORValue::internalCleanup((uint64_t)&v43, v27);
  cbor::CBORValue::internalCleanup((uint64_t)&v45, v28);
  LODWORD(v45) = 5;
  v29 = (_QWORD *)(a3 + 8);
  v30 = *(_QWORD *)(a3 + 8);
  v46 = *(uint64_t **)a3;
  v47 = v30;
  v48 = *(_QWORD *)(a3 + 16);
  if (v48)
  {
    *(_QWORD *)(v30 + 16) = &v47;
    *(_QWORD *)a3 = v29;
    *v29 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v46 = &v47;
  }
  WTF::String::String((WTF::String *)v44, "attStmt");
  v43 = 3;
  v50 = &v43;
  v31 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a6, (cbor::CBORValue *)&v43, (uint64_t)&std::piecewise_construct, (uint64_t *)&v50, (uint64_t)&v49);
  cbor::CBORValue::internalCleanup(v31 + 64, v32);
  v34 = (int)v45;
  *(_DWORD *)(v31 + 64) = (_DWORD)v45;
  switch(v34)
  {
    case 0:
    case 1:
      v35 = v46;
      goto LABEL_20;
    case 2:
    case 4:
      *(_QWORD *)(v31 + 72) = v46;
      v36 = v47;
      v46 = 0;
      v47 = 0;
      *(_QWORD *)(v31 + 80) = v36;
      break;
    case 3:
      v35 = v46;
      v46 = 0;
      goto LABEL_20;
    case 5:
      v38 = v46;
      v37 = v47;
      *(_QWORD *)(v31 + 80) = v47;
      v35 = (uint64_t *)(v31 + 80);
      *(_QWORD *)(v31 + 72) = v38;
      v39 = v48;
      *(_QWORD *)(v31 + 88) = v48;
      if (v39)
      {
        *(_QWORD *)(v37 + 16) = v35;
        v46 = &v47;
        v47 = 0;
        v48 = 0;
      }
      else
      {
LABEL_20:
        *(_QWORD *)(v31 + 72) = v35;
      }
      break;
    case 7:
      *(_DWORD *)(v31 + 72) = (_DWORD)v46;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v43, v33);
  return cbor::CBORValue::internalCleanup((uint64_t)&v45, v40);
}

uint64_t WebCore::buildAttestationObject@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  char v7;
  WTF::StringImpl *v8;
  void *v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t result;
  int v14;
  WTF **v15;
  _QWORD v16[2];
  WTF **v17;
  WTF *v18;
  uint64_t v19;
  void **v20;
  void *v21;
  uint64_t v22;

  WebCore::buildAttestationMap(a1, a2, a3, a4, a5, &v17);
  v14 = 5;
  v15 = v17;
  v16[0] = v18;
  v16[1] = v19;
  if (v19)
  {
    *((_QWORD *)v18 + 2) = v16;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v15 = (WTF **)v16;
  }
  v21 = 0;
  v22 = 0;
  v20 = &v21;
  v7 = cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)&v20, (const cbor::CBORValue *)&v14, 16);
  v9 = v21;
  if ((v7 & 1) != 0)
  {
    v10 = HIDWORD(v22);
    cbor::CBORValue::internalCleanup((uint64_t)&v14, v8);
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 12) = v10;
    if ((_DWORD)v10)
    {
      v12 = (void *)WTF::fastMalloc((WTF *)v10);
      *(_DWORD *)(a6 + 8) = v10;
      *(_QWORD *)a6 = v12;
      memcpy(v12, v9, v10);
    }
    if (v9)
      WTF::fastFree((WTF *)v9, v11);
    return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v17, v18);
  }
  else
  {
    if (v21)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      WTF::fastFree((WTF *)v9, v8);
    }
    result = cbor::CBORValue::internalCleanup((uint64_t)&v14, v8);
    __break(1u);
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::buildClientDataJson(WTF::JSONImpl::Object *a1, uint64_t a2, uint64_t a3, int a4, WTF::JSONImpl::Value *a5)
{
  WTF::JSONImpl::Value *v9;
  uint64_t *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::JSONImpl::Value *v20;
  uint64_t v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::JSONImpl::Value *v31;
  const WTF::String *v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::JSONImpl::Value *v41;
  const WTF::String *v42;
  WTF::StringImpl *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::JSONImpl::Value *v50;
  WTF::StringImpl *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  void *v58;
  WTF *v59;
  WTF::StringImpl *v60;
  WTF::JSONImpl::Value *result;
  _DWORD **v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD **v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD **v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD **v71;
  uint64_t v72;
  _DWORD *v73;
  _DWORD **v74;
  uint64_t v75;
  _DWORD *v76;
  WebCore *v77;
  const JSC::ArrayBuffer *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::JSONImpl::Value *v81;
  WTF::StringImpl *v82;
  WTF *v83[2];
  char v84;

  WTF::JSONImpl::Object::create(a1);
  v9 = v81;
  v10 = (uint64_t *)((char *)v81 + 16);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v80 = v83[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v79 = v83[0];
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v79, v11);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v10, &v80, (const WTF::StringImpl *)&v82, (uint64_t)v83);
  if (v84)
  {
    v13 = (uint64_t *)((char *)v9 + 24);
    v14 = *((unsigned int *)v9 + 9);
    if ((_DWORD)v14 == *((_DWORD *)v9 + 8))
    {
      v68 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v80);
      v14 = *((unsigned int *)v9 + 9);
      v69 = *((_QWORD *)v9 + 3);
      v70 = *v68;
      if (*v68)
        *v70 += 2;
      *(_QWORD *)(v69 + 8 * v14) = v70;
    }
    else
    {
      v15 = *v13;
      v16 = v80;
      if (v80)
        *(_DWORD *)v80 += 2;
      *(_QWORD *)(v15 + 8 * v14) = v16;
    }
    *((_DWORD *)v9 + 9) = v14 + 1;
  }
  v17 = v82;
  v82 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v17;
  }
  v18 = v79;
  v79 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v80;
  v80 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v81;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v80 = v83[0];
  v21 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v21 == -1)
  {
    v77 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::JSONImpl::Value *)WebCore::buildClientDataJsonHash(v77, v78);
  }
  else
  {
    v83[0] = (WTF *)&v82;
    ((void (*)(WTF **, uint64_t))off_1E336C488[v21])(v83, a2);
    WTF::base64EncodeToString();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v79, v22);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v20 + 2, &v80, (const WTF::StringImpl *)&v82, (uint64_t)v83);
    if (v84)
    {
      v24 = (uint64_t *)((char *)v20 + 24);
      v25 = *((unsigned int *)v20 + 9);
      if ((_DWORD)v25 == *((_DWORD *)v20 + 8))
      {
        v62 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v80);
        v25 = *((unsigned int *)v20 + 9);
        v63 = *((_QWORD *)v20 + 3);
        v64 = *v62;
        if (*v62)
          *v64 += 2;
        *(_QWORD *)(v63 + 8 * v25) = v64;
      }
      else
      {
        v26 = *v24;
        v27 = v80;
        if (v80)
          *(_DWORD *)v80 += 2;
        *(_QWORD *)(v26 + 8 * v25) = v27;
      }
      *((_DWORD *)v20 + 9) = v25 + 1;
    }
    v28 = v82;
    v82 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v28;
    }
    v29 = v79;
    v79 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v23);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v80;
    v80 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v23);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v81;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v80 = v83[0];
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(a3 + 8), &v79);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v79, v32);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v31 + 2, &v80, (const WTF::StringImpl *)&v82, (uint64_t)v83);
    if (v84)
    {
      v34 = (uint64_t *)((char *)v31 + 24);
      v35 = *((unsigned int *)v31 + 9);
      if ((_DWORD)v35 == *((_DWORD *)v31 + 8))
      {
        v65 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v80);
        v35 = *((unsigned int *)v31 + 9);
        v66 = *((_QWORD *)v31 + 3);
        v67 = *v65;
        if (*v65)
          *v67 += 2;
        *(_QWORD *)(v66 + 8 * v35) = v67;
      }
      else
      {
        v36 = *v34;
        v37 = v80;
        if (v80)
          *(_DWORD *)v80 += 2;
        *(_QWORD *)(v36 + 8 * v35) = v37;
      }
      *((_DWORD *)v31 + 9) = v35 + 1;
    }
    v38 = v82;
    v82 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v38;
    }
    v39 = v79;
    v79 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v33);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v80;
    v80 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v33);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (*(_QWORD *)a5)
    {
      v41 = v81;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v80 = v83[0];
      WTF::JSONImpl::Value::create(a5, v42);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v41 + 2, &v80, (const WTF::StringImpl *)&v82, (uint64_t)v83);
      if (v84)
      {
        v44 = (uint64_t *)((char *)v41 + 24);
        v45 = *((unsigned int *)v41 + 9);
        if ((_DWORD)v45 == *((_DWORD *)v41 + 8))
        {
          v71 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v80);
          v45 = *((unsigned int *)v41 + 9);
          v72 = *((_QWORD *)v41 + 3);
          v73 = *v71;
          if (*v71)
            *v73 += 2;
          *(_QWORD *)(v72 + 8 * v45) = v73;
        }
        else
        {
          v46 = *v44;
          v47 = v80;
          if (v80)
            *(_DWORD *)v80 += 2;
          *(_QWORD *)(v46 + 8 * v45) = v47;
        }
        *((_DWORD *)v41 + 9) = v45 + 1;
      }
      v48 = v82;
      v82 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v48;
      }
      v49 = v80;
      v80 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v43);
        else
          *(_DWORD *)v49 -= 2;
      }
    }
    if (a4 != 1)
    {
      v50 = v81;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v80 = v83[0];
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v50 + 2, &v80, (const WTF::StringImpl *)&v82, (uint64_t)v83);
      if (v84)
      {
        v52 = (uint64_t *)((char *)v50 + 24);
        v53 = *((unsigned int *)v50 + 9);
        if ((_DWORD)v53 == *((_DWORD *)v50 + 8))
        {
          v74 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v80);
          v53 = *((unsigned int *)v50 + 9);
          v75 = *((_QWORD *)v50 + 3);
          v76 = *v74;
          if (*v74)
            *v76 += 2;
          *(_QWORD *)(v75 + 8 * v53) = v76;
        }
        else
        {
          v54 = *v52;
          v55 = v80;
          if (v80)
            *(_DWORD *)v80 += 2;
          *(_QWORD *)(v54 + 8 * v53) = v55;
        }
        *((_DWORD *)v50 + 9) = v53 + 1;
      }
      v56 = v82;
      v82 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v56;
      }
      v57 = v80;
      v80 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v51);
        else
          *(_DWORD *)v57 -= 2;
      }
    }
    WTF::JSONImpl::Value::toJSONString(v81);
    WTF::String::utf8();
    JSC::ArrayBuffer::create();
    v59 = v83[0];
    v83[0] = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1)
        WTF::fastFree(v59, v58);
      else
        --*(_DWORD *)v59;
    }
    v60 = v82;
    v82 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v58);
      else
        *(_DWORD *)v60 -= 2;
    }
    result = v81;
    v81 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::buildClientDataJsonHash@<X0>(WebCore *this@<X0>, unsigned __int8 **a2@<X8>)
{
  WTF *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  char v15;

  PAL::CryptoDigest::create(2, (uint64_t *)&v14);
  v5 = v14;
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v7)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v6 = (v6 & 0x3FFFFFFFFLL) + v7;
    }
  }
  if (*((_BYTE *)this + 64) && (v13 = *((_QWORD *)this + 4)) != 0)
    v8 = *(_QWORD *)(v13 + 32);
  else
    v8 = *((_QWORD *)this + 6);
  PAL::CryptoDigest::addBytes((uint64_t)v14, (const void *)v6, v8);
  result = PAL::CryptoDigest::computeHash((uint64_t)v5, a2);
  if (v5)
  {
    v11 = *(unsigned int **)v5;
    *(_QWORD *)v5 = 0;
    if (v11)
    {
      v12 = v11[4];
      if ((_DWORD)v12 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v12])(&v15, v11 + 2);
      v11[4] = -1;
      WTF::fastFree((WTF *)v11, v10);
    }
    return WTF::fastFree(v5, v10);
  }
  return result;
}

uint64_t WebCore::toString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    default:
      v2 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *v2 += 2;
      *a2 = v2;
      break;
  }
  return result;
}

uint64_t WebCore::convertStringToAuthenticatorTransport(WebCore *this, const WTF::String *a2)
{
  int v3;
  int v4;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "usb", 3) & 1) != 0)
  {
    v3 = 0;
LABEL_5:
    v4 = 1;
    return v3 | (v4 << 8);
  }
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "nfc", 3) & 1) != 0)
  {
    v3 = 1;
    goto LABEL_5;
  }
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "ble", 3) & 1) != 0)
  {
    v4 = 1;
    v3 = 2;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "internal", 8) & 1) != 0)
  {
    v4 = 1;
    v3 = 3;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "cable", 5) & 1) != 0)
  {
    v4 = 1;
    v3 = 4;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "hybrid", 6) & 1) != 0)
  {
    v4 = 1;
    v3 = 5;
  }
  else
  {
    v4 = MEMORY[0x19AEA53F4](*(_QWORD *)this, "smart-card", 10);
    if (v4)
      v3 = 6;
    else
      v3 = 0;
  }
  return v3 | (v4 << 8);
}

uint64_t apdu::ApduCommand::createFromMessage@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint8x8_t v2;
  uint64_t v4;
  uint64_t v5;
  __int32 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(unsigned int *)(result + 12);
  if ((v4 - 65545) < 0xFFFEFFFB)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  v5 = result;
  v6 = *(__int32 **)result;
  v2.i32[0] = **(_DWORD **)result;
  v22 = 0;
  v23 = 0;
  if ((v4 - 5) < 2)
    goto LABEL_14;
  if ((_DWORD)v4 == 4)
  {
    v7 = 0;
  }
  else
  {
    if ((_DWORD)v4 == 7)
    {
      v7 = *((unsigned __int8 *)v6 + 4);
      if (!*((_BYTE *)v6 + 4))
      {
        v8 = __rev16(*(unsigned __int16 *)((char *)v6 + 5));
        if (!(_DWORD)v8)
          v8 = 0x10000;
        goto LABEL_12;
      }
LABEL_14:
      v11 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_15;
    }
    if (*((_BYTE *)v6 + 4))
      goto LABEL_14;
    v12 = __rev16(*(unsigned __int16 *)((char *)v6 + 5));
    v13 = v12 + 7;
    if (v12 + 7 != v4)
    {
      if (v12 + 9 == v4)
      {
        result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v22, (WTF *)(v4 - 9));
        v17 = v4 - 9;
        if (v4 != 9)
        {
          v18 = (char *)v6 + 7;
          v19 = HIDWORD(v23);
          do
          {
            v20 = *v18++;
            *(_BYTE *)(v22 + v19) = v20;
            v19 = ++HIDWORD(v23);
            --v17;
          }
          while (v17);
        }
        v21 = *(unsigned int *)(v5 + 12);
        if (v13 >= v21 || v12 + 8 >= v21)
        {
          __break(0xC471u);
          JUMPOUT(0x19556DDD4);
        }
        v8 = 0x10000;
        if (*(unsigned __int8 *)(*(_QWORD *)v5 + v12 + 8) | (*(unsigned __int8 *)(*(_QWORD *)v5 + v13) << 8))
          v8 = *(unsigned __int8 *)(*(_QWORD *)v5 + v12 + 8) | (*(unsigned __int8 *)(*(_QWORD *)v5 + v13) << 8);
        v7 = HIDWORD(v23);
        goto LABEL_12;
      }
      goto LABEL_14;
    }
    v14 = v4 - 7;
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v22, (WTF *)(v4 - 7));
    v15 = (char *)v6 + 7;
    v7 = HIDWORD(v23);
    do
    {
      v16 = *v15++;
      *(_BYTE *)(v22 + v7) = v16;
      v7 = ++HIDWORD(v23);
      --v14;
    }
    while (v14);
  }
  v8 = 0;
LABEL_12:
  v9 = v22;
  v10 = v23;
  *(_DWORD *)a2 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 28) = v7;
  v11 = 1;
LABEL_15:
  *(_BYTE *)(a2 + 32) = v11;
  return result;
}

uint64_t apdu::ApduCommand::ApduCommand(uint64_t result, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;

  *(_BYTE *)result = a2;
  *(_BYTE *)(result + 1) = a3;
  *(_BYTE *)(result + 2) = a4;
  *(_BYTE *)(result + 3) = a5;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = a6;
  v7 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 16) = v7;
  LODWORD(v7) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_DWORD *)(result + 28) = v7;
  return result;
}

{
  uint64_t v7;

  *(_BYTE *)result = a2;
  *(_BYTE *)(result + 1) = a3;
  *(_BYTE *)(result + 2) = a4;
  *(_BYTE *)(result + 3) = a5;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = a6;
  v7 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 16) = v7;
  LODWORD(v7) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_DWORD *)(result + 28) = v7;
  return result;
}

WTF *apdu::ApduCommand::getEncodedCommand@<X0>(apdu::ApduCommand *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  WTF *result;
  WTF *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  char v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _BYTE *v26;
  int v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  _BYTE *v35;

  v4 = *(_DWORD *)this;
  result = (WTF *)WTF::fastMalloc((WTF *)4);
  v6 = result;
  *(_DWORD *)(a2 + 8) = 4;
  *(_QWORD *)a2 = result;
  *(_DWORD *)result = v4;
  *(_DWORD *)(a2 + 12) = 4;
  v7 = *((_DWORD *)this + 7);
  if (v7)
  {
    v9 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(a2 + 8) = 16;
    *(_QWORD *)a2 = v9;
    *(_DWORD *)v9 = *(_DWORD *)v6;
    if ((WTF *)v9 == v6)
    {
      v9 = 0;
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    WTF::fastFree(v6, v8);
    *(_BYTE *)(v9 + 4) = 0;
    if (v7 >= 0xFFFF)
      v10 = 0xFFFFLL;
    else
      v10 = v7;
    *(_BYTE *)(v9 + 5) = BYTE1(v10);
    *(_BYTE *)(v9 + 6) = v10;
    v11 = (char *)*((_QWORD *)this + 2);
    *(_DWORD *)(a2 + 12) = 7;
    result = (WTF *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v10 + 7));
    v12 = *(_DWORD *)(a2 + 12);
    do
    {
      v13 = *v11++;
      *(_BYTE *)(*(_QWORD *)a2 + v12) = v13;
      v12 = *(_DWORD *)(a2 + 12) + 1;
      *(_DWORD *)(a2 + 12) = v12;
      --v10;
    }
    while (v10);
  }
  else if (*((_QWORD *)this + 1))
  {
    v15 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(a2 + 8) = 16;
    *(_QWORD *)a2 = v15;
    *(_DWORD *)v15 = *(_DWORD *)v6;
    if ((WTF *)v15 == v6)
    {
      v15 = 0;
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    result = (WTF *)WTF::fastFree(v6, v14);
    *(_BYTE *)(v15 + 4) = 0;
    v12 = 5;
    *(_DWORD *)(a2 + 12) = 5;
  }
  else
  {
    v12 = 4;
  }
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    if (v16 >= 0x10000)
      LOWORD(v17) = 0;
    else
      v17 = *((_QWORD *)this + 1);
    v18 = v12;
    if (v12 == *(_DWORD *)(a2 + 8))
    {
      v19 = v12 + 1;
      v20 = v18 + (v18 >> 2);
      if (v20 >= 0x10)
        v21 = v20 + 1;
      else
        v21 = 16;
      if (v21 <= v19)
        v22 = v18 + 1;
      else
        v22 = v21;
      if (HIDWORD(v22))
        goto LABEL_49;
      v23 = *(void **)a2;
      v24 = (void *)WTF::fastMalloc((WTF *)v22);
      *(_DWORD *)(a2 + 8) = v22;
      *(_QWORD *)a2 = v24;
      result = (WTF *)memcpy(v24, v23, v18);
      if (v23)
      {
        if (*(void **)a2 == v23)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        result = (WTF *)WTF::fastFree((WTF *)v23, v25);
      }
      v26 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
    }
    else
    {
      v26 = (_BYTE *)(*(_QWORD *)a2 + v12);
    }
    *v26 = BYTE1(v17);
    v27 = *(_DWORD *)(a2 + 8);
    v28 = (*(_DWORD *)(a2 + 12) + 1);
    *(_DWORD *)(a2 + 12) = v28;
    if ((_DWORD)v28 != v27)
    {
      v35 = (_BYTE *)(*(_QWORD *)a2 + v28);
LABEL_47:
      *v35 = v17;
      ++*(_DWORD *)(a2 + 12);
      return result;
    }
    v29 = v28 + (v28 >> 2);
    if (v29 >= 0x10)
      v30 = v29 + 1;
    else
      v30 = 16;
    if (v30 <= v28 + 1)
      v31 = v28 + 1;
    else
      v31 = v30;
    if (!HIDWORD(v31))
    {
      v32 = *(void **)a2;
      v33 = (void *)WTF::fastMalloc((WTF *)v31);
      *(_DWORD *)(a2 + 8) = v31;
      *(_QWORD *)a2 = v33;
      result = (WTF *)memcpy(v33, v32, v28);
      if (v32)
      {
        if (*(void **)a2 == v32)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        result = (WTF *)WTF::fastFree((WTF *)v32, v34);
      }
      v35 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
      goto LABEL_47;
    }
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x19556E0F8);
  }
  return result;
}

void WebCore::AuthenticatorAssertionResponse::~AuthenticatorAssertionResponse(WebCore::AuthenticatorAssertionResponse *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AuthenticatorAssertionResponse::~AuthenticatorAssertionResponse(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  _QWORD *v4;
  BOOL v5;
  const void *v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  void *v19;
  WTF **v20;
  WTF *v21;
  uint64_t v22;
  void *v23;
  WTF **v24;
  WTF *v25;
  uint64_t v26;
  void *v27;
  WTF **v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;

  *(_QWORD *)this = off_1E336C350;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
  {
    v5 = *(_DWORD *)v4 == 2;
    *(_DWORD *)v4 -= 2;
    if (v5)
    {
      v14 = v4[10];
      if (v14)
      {
        *(_QWORD *)(v14 + 8) = 3;
        v4[10] = 0;
      }
      if ((v4[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v4 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v4 + 2));
      v16 = (WTF **)v4[1];
      if ((v16 & 1) == 0 && v16)
      {
        v30 = (WTF *)v4[1];
        v17 = *v16;
        if (*v16)
        {
          *(_QWORD *)v30 = 0;
          *((_DWORD *)v30 + 2) = 0;
          WTF::fastFree(v17, v15);
        }
        WTF::fastFree(v30, v15);
      }
      WTF::fastFree((WTF *)v4, v15);
    }
  }
  v6 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (_QWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v11)
  {
    v5 = *(_DWORD *)v11 == 2;
    *(_DWORD *)v11 -= 2;
    if (v5)
    {
      v18 = v11[10];
      if (v18)
      {
        *(_QWORD *)(v18 + 8) = 3;
        v11[10] = 0;
      }
      if ((v11[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v11 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v11 + 2));
      v20 = (WTF **)v11[1];
      if ((v20 & 1) == 0 && v20)
      {
        v31 = (WTF *)v11[1];
        v21 = *v20;
        if (*v20)
        {
          *(_QWORD *)v31 = 0;
          *((_DWORD *)v31 + 2) = 0;
          WTF::fastFree(v21, v19);
        }
        WTF::fastFree(v31, v19);
      }
      WTF::fastFree((WTF *)v11, v19);
    }
  }
  v12 = (_QWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v12)
  {
    v5 = *(_DWORD *)v12 == 2;
    *(_DWORD *)v12 -= 2;
    if (v5)
    {
      v22 = v12[10];
      if (v22)
      {
        *(_QWORD *)(v22 + 8) = 3;
        v12[10] = 0;
      }
      if ((v12[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v12 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v12 + 2));
      v24 = (WTF **)v12[1];
      if ((v24 & 1) == 0 && v24)
      {
        v32 = (WTF *)v12[1];
        v25 = *v24;
        if (*v24)
        {
          *(_QWORD *)v32 = 0;
          *((_DWORD *)v32 + 2) = 0;
          WTF::fastFree(v25, v23);
        }
        WTF::fastFree(v32, v23);
      }
      WTF::fastFree((WTF *)v12, v23);
    }
  }
  v13 = (_QWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v13)
  {
    v5 = *(_DWORD *)v13 == 2;
    *(_DWORD *)v13 -= 2;
    if (v5)
    {
      v26 = v13[10];
      if (v26)
      {
        *(_QWORD *)(v26 + 8) = 3;
        v13[10] = 0;
      }
      if ((v13[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v13 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v13 + 2));
      v28 = (WTF **)v13[1];
      if ((v28 & 1) == 0 && v28)
      {
        v33 = (WTF *)v13[1];
        v29 = *v28;
        if (*v28)
        {
          *(_QWORD *)v33 = 0;
          *((_DWORD *)v33 + 2) = 0;
          WTF::fastFree(v29, v27);
        }
        WTF::fastFree(v33, v27);
      }
      WTF::fastFree((WTF *)v13, v27);
    }
  }
  WebCore::AuthenticatorResponse::~AuthenticatorResponse(this);
}

uint64_t WebCore::AuthenticatorAssertionResponse::type(WebCore::AuthenticatorAssertionResponse *this)
{
  return 0;
}

void WebCore::AuthenticatorAttestationResponse::~AuthenticatorAttestationResponse(WebCore::AuthenticatorAttestationResponse *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E336C380;
  v3 = (WTF *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)this + 15);
  WebCore::AuthenticatorResponse::~AuthenticatorResponse(this);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E336C380;
  v3 = (WTF *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)this + 15);
  WebCore::AuthenticatorResponse::~AuthenticatorResponse(this);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::AuthenticatorAttestationResponse::type(WebCore::AuthenticatorAttestationResponse *this)
{
  return 1;
}

void WebCore::PublicKeyCredential::~PublicKeyCredential(WebCore::PublicKeyCredential *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E3354720;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E3354720;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PublicKeyCredential::credentialType(WebCore::PublicKeyCredential *this)
{
  return 1;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *this)
{
  int v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= (unint64_t)this)
    return 1;
  v2 = (int)this;
  if (!((unint64_t)this >> 32))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc(this);
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v2 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v16 = result;
  *(_DWORD *)(result + 12) = v2;
  if (!(_DWORD)v2)
    return v16;
  if (v2 < 0x5555556)
  {
    v4 = 48 * v2;
    v5 = WTF::fastMalloc((WTF *)(48 * v2));
    *(_DWORD *)(v16 + 8) = (v4 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v16 = v5;
    v6 = *((_DWORD *)a2 + 3);
    if (v6)
    {
      v7 = v5;
      v8 = 0;
      v9 = *a2;
      v10 = v9 + 48 * v6;
      do
      {
        v11 = v9 + v8;
        v12 = *(_DWORD **)(v9 + v8);
        if (v12)
          *v12 += 2;
        v13 = v7 + v8;
        *(_QWORD *)v13 = v12;
        *(_BYTE *)(v7 + v8 + 8) = 0;
        *(_DWORD *)(v13 + 16) = -1;
        v14 = *(unsigned int *)(v11 + 16);
        if ((_DWORD)v14 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1E336C418[v14])(&v17, v7 + v8 + 8, v9 + v8 + 8);
          *(_DWORD *)(v13 + 16) = v14;
        }
        *(_BYTE *)(v13 + 24) = 0;
        *(_BYTE *)(v13 + 40) = 0;
        if (*(_BYTE *)(v11 + 40))
        {
          *(_DWORD *)(v7 + v8 + 32) = -1;
          v15 = *(unsigned int *)(v9 + v8 + 32);
          if ((_DWORD)v15 != -1)
          {
            ((void (*)(char *, uint64_t, uint64_t))off_1E336C418[v15])(&v18, v13 + 24, v9 + v8 + 24);
            *(_DWORD *)(v7 + v8 + 32) = v15;
          }
          *(_BYTE *)(v13 + 40) = 1;
        }
        v8 += 48;
      }
      while (v11 + 48 != v10);
    }
    return v16;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  __int16 v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = result;
  if (*(unsigned __int8 *)(result + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(result + 40))
      return WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=(result, a2);
  }
  else if (*(_BYTE *)(result + 40))
  {
    if (*(_BYTE *)(result + 32))
    {
      v3 = *(unsigned int *)(result + 24);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E336C408[v3])(&v7, result + 16);
      *(_DWORD *)(v2 + 24) = -1;
    }
    result = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 40) = 0;
  }
  else
  {
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    *(_QWORD *)result = v4;
    v5 = *(_WORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 0;
    *(_WORD *)(result + 8) = v5;
    *(_BYTE *)(result + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      *(_DWORD *)(result + 24) = -1;
      v6 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v6 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E336C418[v6])(&v8, result + 16, a2 + 16);
        *(_DWORD *)(v2 + 24) = v6;
      }
      *(_BYTE *)(v2 + 32) = 1;
    }
    *(_BYTE *)(v2 + 40) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;

  v2 = a2;
  v3 = result;
  if (*(unsigned __int8 *)(result + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(result + 72))
    {
      if (*(unsigned __int8 *)(result + 40) == *(unsigned __int8 *)(a2 + 40))
      {
        if (*(_BYTE *)(result + 40))
          result = WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=(result, a2);
      }
      else if (*(_BYTE *)(result + 40))
      {
        if (*(_BYTE *)(result + 32))
        {
          v8 = *(unsigned int *)(result + 24);
          if ((_DWORD)v8 != -1)
            result = ((uint64_t (*)(char *, uint64_t))off_1E336C408[v8])(&v57, result + 16);
          *(_DWORD *)(v3 + 24) = -1;
        }
        v9 = *(unsigned int *)(v3 + 8);
        if ((_DWORD)v9 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E336C408[v9])(&v58, v3);
        *(_DWORD *)(v3 + 8) = -1;
        *(_BYTE *)(v3 + 40) = 0;
      }
      else
      {
        *(_BYTE *)result = 0;
        *(_DWORD *)(result + 8) = -1;
        v10 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v10 != -1)
        {
          result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E336C418[v10])(&v59, result, a2);
          *(_DWORD *)(v3 + 8) = v10;
        }
        *(_BYTE *)(v3 + 16) = 0;
        a2 = v3 + 16;
        *(_BYTE *)(v3 + 32) = 0;
        if (*(_BYTE *)(v2 + 32))
        {
          *(_DWORD *)(v3 + 24) = -1;
          v11 = *(unsigned int *)(v2 + 24);
          if ((_DWORD)v11 != -1)
          {
            result = ((uint64_t (*)(char *))off_1E336C418[v11])(&v60);
            *(_DWORD *)(v3 + 24) = v11;
          }
          *(_BYTE *)(v3 + 32) = 1;
        }
        *(_BYTE *)(v3 + 40) = 1;
      }
      v12 = (uint64_t *)(v3 + 48);
      v13 = (uint64_t *)(v2 + 48);
      if (*(unsigned __int8 *)(v3 + 64) == *(unsigned __int8 *)(v2 + 64))
      {
        if (v2 != v3 && *(_BYTE *)(v3 + 64))
        {
          v14 = *(unsigned int *)(v3 + 60);
          v15 = *(unsigned int *)(v2 + 60);
          if (v14 <= v15)
          {
            v23 = *(_DWORD *)(v3 + 56);
            if (v15 > v23)
            {
              if (v23)
              {
                if ((_DWORD)v14)
                {
                  v24 = 0;
                  v25 = *v12;
                  v26 = 48 * v14;
                  do
                  {
                    v27 = v25 + v24;
                    if (*(_BYTE *)(v25 + v24 + 40))
                    {
                      v28 = *(unsigned int *)(v27 + 32);
                      if ((_DWORD)v28 != -1)
                        ((void (*)(char *, uint64_t))off_1E336C408[v28])(&v65, v27 + 24);
                      *(_DWORD *)(v27 + 32) = -1;
                    }
                    v29 = *(unsigned int *)(v27 + 16);
                    if ((_DWORD)v29 != -1)
                      ((void (*)(char *, uint64_t))off_1E336C408[v29])(&v66, v27 + 8);
                    *(_DWORD *)(v27 + 16) = -1;
                    v30 = *(WTF::StringImpl **)v27;
                    *(_QWORD *)v27 = 0;
                    if (v30)
                    {
                      if (*(_DWORD *)v30 == 2)
                        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
                      else
                        *(_DWORD *)v30 -= 2;
                    }
                    v24 += 48;
                  }
                  while (v26 != v24);
                  *(_DWORD *)(v3 + 60) = 0;
                }
                result = *v12;
                if (*v12)
                {
                  *(_QWORD *)(v3 + 48) = 0;
                  *(_DWORD *)(v3 + 56) = 0;
                  result = WTF::fastFree((WTF *)result, (void *)a2);
                }
              }
              v31 = *(unsigned int *)(v2 + 60);
              if (*(_DWORD *)(v3 + 56) < v31)
              {
                if (v31 >= 0x5555556)
                {
                  __break(0xC471u);
                  return result;
                }
                v32 = (WTF::StringImpl *)*v12;
                v33 = (WTF::StringImpl *)(*v12 + 48 * *(unsigned int *)(v3 + 60));
                v34 = 48 * v31;
                v35 = WTF::fastMalloc((WTF *)(48 * v31));
                *(_DWORD *)(v3 + 56) = (v34 & 0xFFFFFFF0) / 0x30;
                *(_QWORD *)(v3 + 48) = v35;
                result = (uint64_t)WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::move(v32, v33, v35);
                if (v32)
                {
                  if ((WTF::StringImpl *)*v12 == v32)
                  {
                    *(_QWORD *)(v3 + 48) = 0;
                    *(_DWORD *)(v3 + 56) = 0;
                  }
                  result = WTF::fastFree(v32, (void *)a2);
                }
              }
            }
            v15 = *(unsigned int *)(v3 + 60);
          }
          else
          {
            v16 = *v12;
            v17 = 48 * v15;
            v18 = 48 * v14;
            do
            {
              v19 = v16 + v17;
              if (*(_BYTE *)(v16 + v17 + 40))
              {
                v20 = *(unsigned int *)(v19 + 32);
                if ((_DWORD)v20 != -1)
                  ((void (*)(char *, uint64_t))off_1E336C408[v20])(&v61, v19 + 24);
                *(_DWORD *)(v19 + 32) = -1;
              }
              v21 = *(unsigned int *)(v19 + 16);
              if ((_DWORD)v21 != -1)
                ((void (*)(char *, uint64_t))off_1E336C408[v21])(&v62, v19 + 8);
              *(_DWORD *)(v19 + 16) = -1;
              result = *(_QWORD *)v19;
              *(_QWORD *)v19 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)result -= 2;
              }
              v18 -= 48;
              v16 += 48;
            }
            while (v17 != v18);
            *(_DWORD *)(v3 + 60) = v15;
            v13 = (uint64_t *)(v2 + 48);
          }
          v36 = *v13;
          v37 = *v12;
          if ((_DWORD)v15)
          {
            v38 = v37 + 8;
            v39 = 48 * v15;
            v40 = v36 + 8;
            do
            {
              v41 = *(_DWORD **)(v40 - 8);
              if (v41)
                *v41 += 2;
              v42 = *(WTF::StringImpl **)(v38 - 8);
              *(_QWORD *)(v38 - 8) = v41;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v42 -= 2;
              }
              result = WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=(v38, v40);
              v38 += 48;
              v40 += 48;
              v39 -= 48;
            }
            while (v39);
            v36 = *v13;
            v43 = *(_DWORD *)(v3 + 60);
            v37 = *(_QWORD *)(v3 + 48);
          }
          else
          {
            v43 = 0;
          }
          v44 = *(_DWORD *)(v2 + 60);
          if (v43 != v44)
          {
            v52 = v2;
            v45 = v36 + 48 * v44;
            v46 = 48 * v43;
            do
            {
              v47 = v36 + v46;
              v48 = *(_DWORD **)(v36 + v46);
              if (v48)
                *v48 += 2;
              v49 = v37 + v46;
              *(_QWORD *)v49 = v48;
              *(_BYTE *)(v37 + v46 + 8) = 0;
              *(_DWORD *)(v49 + 16) = -1;
              v50 = *(unsigned int *)(v47 + 16);
              if ((_DWORD)v50 != -1)
              {
                result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E336C418[v50])(&v63, v37 + v46 + 8, v36 + v46 + 8);
                *(_DWORD *)(v49 + 16) = v50;
              }
              *(_BYTE *)(v49 + 24) = 0;
              *(_BYTE *)(v49 + 40) = 0;
              if (*(_BYTE *)(v47 + 40))
              {
                *(_DWORD *)(v37 + v46 + 32) = -1;
                v51 = *(unsigned int *)(v36 + v46 + 32);
                if ((_DWORD)v51 != -1)
                {
                  result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E336C418[v51])(&v64, v49 + 24, v36 + v46 + 24);
                  *(_DWORD *)(v37 + v46 + 32) = v51;
                }
                *(_BYTE *)(v49 + 40) = 1;
              }
              v37 += 48;
              v36 += 48;
            }
            while (v47 + 48 != v45);
            v43 = *(_DWORD *)(v52 + 60);
          }
          *(_DWORD *)(v3 + 60) = v43;
        }
      }
      else
      {
        v22 = v3 + 48;
        if (*(_BYTE *)(v3 + 64))
        {
          result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22);
          *(_BYTE *)(v3 + 64) = 0;
        }
        else
        {
          result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v22, (uint64_t *)(v2 + 48));
          *(_BYTE *)(v3 + 64) = 1;
        }
      }
    }
  }
  else if (*(_BYTE *)(result + 72))
  {
    if (*(_BYTE *)(result + 64))
      result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result + 48);
    if (*(_BYTE *)(v3 + 40))
    {
      if (*(_BYTE *)(v3 + 32))
      {
        v4 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v4 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E336C408[v4])(&v53, v3 + 16);
        *(_DWORD *)(v3 + 24) = -1;
      }
      v5 = *(unsigned int *)(v3 + 8);
      if ((_DWORD)v5 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E336C408[v5])(&v54, v3);
      *(_DWORD *)(v3 + 8) = -1;
    }
    *(_BYTE *)(v3 + 72) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      *(_DWORD *)(result + 8) = -1;
      v6 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v6 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E336C418[v6])(&v55, result, a2);
        *(_DWORD *)(v3 + 8) = v6;
      }
      *(_BYTE *)(v3 + 16) = 0;
      *(_BYTE *)(v3 + 32) = 0;
      if (*(_BYTE *)(v2 + 32))
      {
        *(_DWORD *)(v3 + 24) = -1;
        v7 = *(unsigned int *)(v2 + 24);
        if ((_DWORD)v7 != -1)
        {
          ((void (*)(char *))off_1E336C418[v7])(&v56);
          *(_DWORD *)(v3 + 24) = v7;
        }
        *(_BYTE *)(v3 + 32) = 1;
      }
      *(_BYTE *)(v3 + 40) = 1;
    }
    *(_BYTE *)(v3 + 48) = 0;
    result = v3 + 48;
    *(_BYTE *)(v3 + 64) = 0;
    if (*(_BYTE *)(v2 + 64))
    {
      result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result, (uint64_t *)(v2 + 48));
      *(_BYTE *)(v3 + 64) = 1;
    }
    *(_BYTE *)(v3 + 72) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return MEMORY[0x1E0CBF738];
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::reset[abi:sn180100](uint64_t result)
{
  _QWORD *v1;
  BOOL v2;
  uint64_t v3;
  void *v4;
  WTF **v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 24))
  {
    v1 = *(_QWORD **)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    if (v1)
    {
      v2 = *(_DWORD *)v1 == 2;
      *(_DWORD *)v1 -= 2;
      if (v2)
      {
        v8 = result;
        v3 = v1[10];
        if (v3)
        {
          *(_QWORD *)(v3 + 8) = 3;
          v1[10] = 0;
        }
        if ((v1[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v1 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v1 + 2));
        v5 = (WTF **)v1[1];
        if ((v5 & 1) == 0 && v5)
        {
          v7 = (WTF *)v1[1];
          v6 = *v5;
          if (*v5)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v6, v4);
          }
          WTF::fastFree(v7, v4);
        }
        WTF::fastFree((WTF *)v1, v4);
        result = v8;
      }
    }
    *(_BYTE *)(result + 24) = 0;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;

  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      *(_WORD *)result = *(_WORD *)a2;
      v2 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v3 = *(WTF **)(result + 8);
      *(_QWORD *)(result + 8) = v2;
      if (v3)
      {
        v4 = *(_DWORD *)v3 == 2;
        *(_DWORD *)v3 -= 2;
        if (v4)
        {
          v10 = result;
          v11 = a2;
          v12 = v3;
          v6 = *((_QWORD *)v3 + 10);
          if (v6)
          {
            *(_QWORD *)(v6 + 8) = 3;
            *((_QWORD *)v12 + 10) = 0;
          }
          if ((*((_BYTE *)v12 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v12 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v12 + 16));
          v8 = (WTF *)*((_QWORD *)v12 + 1);
          if ((v8 & 1) == 0 && v8)
          {
            v9 = *(WTF **)v8;
            if (*(_QWORD *)v8)
            {
              *(_QWORD *)v8 = 0;
              *((_DWORD *)v8 + 2) = 0;
              WTF::fastFree(v9, v7);
            }
            WTF::fastFree(v8, v7);
          }
          WTF::fastFree(v12, v7);
          result = v10;
          a2 = v11;
        }
      }
      *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    return std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::reset[abi:sn180100](result);
  }
  else
  {
    *(_WORD *)result = *(_WORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v5;
    *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>>(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientOutputs::PRFValues *v3;
  uint64_t v4;
  WTF *v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;

  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v3 = (WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(a1 + 8);
      if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
      {
        if (*(_BYTE *)(a1 + 24))
        {
          v4 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          v5 = *(WTF **)v3;
          *(_QWORD *)v3 = v4;
          if (v5)
          {
            v6 = *(_DWORD *)v5 == 2;
            *(_DWORD *)v5 -= 2;
            if (v6)
            {
              v22 = a2;
              v23 = v5;
              v18 = *((_QWORD *)v5 + 10);
              if (v18)
              {
                *(_QWORD *)(v18 + 8) = 3;
                *((_QWORD *)v23 + 10) = 0;
              }
              if ((*((_BYTE *)v23 + 72) & 1) == 0)
                JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v23 + 72));
              JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v23 + 16));
              v20 = (WTF *)*((_QWORD *)v23 + 1);
              if ((v20 & 1) == 0 && v20)
              {
                v21 = *(WTF **)v20;
                if (*(_QWORD *)v20)
                {
                  *(_QWORD *)v20 = 0;
                  *((_DWORD *)v20 + 2) = 0;
                  WTF::fastFree(v21, v19);
                }
                WTF::fastFree(v20, v19);
              }
              WTF::fastFree(v23, v19);
              a2 = v22;
            }
          }
          v7 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = 0;
          v8 = *(_QWORD **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v7;
          if (v8)
          {
            v6 = *(_DWORD *)v8 == 2;
            *(_DWORD *)v8 -= 2;
            if (v6)
            {
              v9 = v8;
              v10 = v8[10];
              if (v10)
              {
                *(_QWORD *)(v10 + 8) = 3;
                v9[10] = 0;
              }
              if ((v9[9] & 1) == 0)
                JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v9 + 9));
              JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v9 + 2));
              v12 = (WTF *)v9[1];
              if ((v12 & 1) == 0 && v12)
              {
                v13 = *(WTF **)v12;
                if (*(_QWORD *)v12)
                {
                  *(_QWORD *)v12 = 0;
                  *((_DWORD *)v12 + 2) = 0;
                  WTF::fastFree(v13, v11);
                }
                WTF::fastFree(v12, v11);
              }
              WTF::fastFree((WTF *)v9, v11);
            }
          }
        }
      }
      else if (*(_BYTE *)(a1 + 24))
      {
        WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues(v3);
        *(_BYTE *)(a1 + 24) = 0;
      }
      else
      {
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a1 + 8) = v16;
        v17 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a1 + 16) = v17;
        *(_BYTE *)(a1 + 24) = 1;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 24))
      WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(a1 + 8));
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    if (*(_BYTE *)(a2 + 24))
    {
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a1 + 8) = v14;
      v15 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a1 + 16) = v15;
      *(_BYTE *)(a1 + 24) = 1;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
}

void WebCore::AuthenticatorResponse::~AuthenticatorResponse(WebCore::AuthenticatorResponse *this)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;

  *(_QWORD *)this = off_1E336C3B0;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      WTF::fastFree((WTF *)v2, v5);
    }
  }
  if (*((_BYTE *)this + 96) && *((_BYTE *)this + 88))
    WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticatorResponse *)((char *)this + 72));
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 32);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)this + 2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1,void,JSC::JSValue>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336C4A8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1,void,JSC::JSValue>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336C4A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1,void,JSC::JSValue>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = result[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_BYTE *)(v2 + 16) = 1;
      v3 = *(_QWORD *)(v2 + 8);
      result[1] = 0;
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v4 = &off_1E336C4D0;
      v4[1] = v1;
      v5 = v4;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 56))(v3, &v5);
      result = v5;
      v5 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1::operator()(JSC::JSValue)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336C4D0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1::operator()(JSC::JSValue)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336C4D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1::operator()(JSC::JSValue)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_BYTE *)(v2 + 16) = 0;
      v3 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2,void,WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::AbortSignal *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E336C4F8;
  v3 = (WebCore::AbortSignal *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2,void,WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::AbortSignal *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E336C4F8;
  v3 = (WebCore::AbortSignal *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

objc_class *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2,void,WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&>::call(uint64_t a1, uint64_t a2, char a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  objc_class *result;
  _DWORD *v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  objc_class *v16;
  WTF::StringImpl *v17;
  objc_class *v18;
  objc_class *v19;
  WTF::StringImpl *v20;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 && *(_BYTE *)(v6 + 156))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *(_QWORD *)(a1 + 16);
    LOBYTE(v16) = 16;
    v18 = 0;
    LOBYTE(v19) = 16;
    v8 = v17;
    if (v17)
      *(_DWORD *)v17 += 2;
    v20 = v8;
    WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)&v19, 0, &v18);
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (objc_class *)WTF::StringImpl::destroy(result, v9);
    }
    return result;
  }
  WebCore::AuthenticatorResponse::tryCreate((uint64_t *)&v19, a2, a3);
  if (v19)
  {
    v16 = v19;
    v12 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
    WebCore::PublicKeyCredential::PublicKeyCredential((uint64_t)v12, (uint64_t *)&v16);
    WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>>(*(_QWORD *)(a1 + 16), (uint64_t)v12);
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
    result = v16;
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1)
        return (objc_class *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 8))();
      else
        --*((_DWORD *)v16 + 2);
    }
    return result;
  }
  v13 = *a4;
  v14 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
  v15 = *(_QWORD *)(a1 + 16);
  if (v14)
    *(_DWORD *)v14 += 4;
  v16 = 0;
  LOBYTE(v19) = v13;
  v20 = v14;
  WebCore::DeferredPromise::reject(v15, (unsigned __int8 *)&v19, 0, &v16);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (objc_class *)WTF::StringImpl::destroy(result, v9);
      if (!v14)
        return result;
      goto LABEL_23;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v14)
    return result;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    result = v14;
    return (objc_class *)WTF::StringImpl::destroy(result, v9);
  }
  *(_DWORD *)v14 -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_3,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E336C520;
  WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WebAuthn::Scope::RawPtrTraits<WTF::RefPtr>,WebAuthn::Scope::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_3::~$_3((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_3,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E336C520;
  WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WebAuthn::Scope::RawPtrTraits<WTF::RefPtr>,WebAuthn::Scope::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_3::~$_3((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::create(WebCore::Document const&,WebCore::CredentialCreationOptions &&,WebAuthn::Scope,WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_3,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[2];
  _DWORD *v48;
  char v49;
  _DWORD *v50;
  _DWORD *v51;
  _BYTE v52[8];
  int v53;
  _DWORD *v54;
  _BYTE v55[8];
  int v56;
  void *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  char v65;
  _BYTE v66[144];
  char v67;
  _QWORD v68[2];

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return;
  if (!*(_QWORD *)(v2 + 8))
    return;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return;
  if (!*(_BYTE *)(a1 + 336))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_54;
  }
  v5 = *(_DWORD **)(a1 + 40);
  if (v5)
    *v5 += 2;
  v47[0] = v5;
  v6 = *(_DWORD **)(a1 + 48);
  if (v6)
    *v6 += 2;
  v47[1] = v6;
  LOBYTE(v48) = 0;
  v49 = 0;
  if (*(_BYTE *)(a1 + 64))
  {
    v7 = *(_DWORD **)(a1 + 56);
    if (v7)
      *v7 += 2;
    v48 = v7;
    v49 = 1;
  }
  v8 = *(_DWORD **)(a1 + 72);
  if (v8)
    *v8 += 2;
  v50 = v8;
  v9 = *(_DWORD **)(a1 + 80);
  if (v9)
    *v9 += 2;
  v51 = v9;
  v52[0] = 0;
  v53 = -1;
  v10 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E336C418[v10])(v68, v52, a1 + 88);
    v53 = v10;
  }
  v11 = *(_DWORD **)(a1 + 104);
  if (v11)
    *v11 += 2;
  v54 = v11;
  v55[0] = 0;
  v56 = -1;
  v12 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E336C418[v12])(v68, v55, a1 + 112);
    v56 = v12;
  }
  v13 = *(unsigned int *)(a1 + 140);
  v57 = 0;
  v58 = 0;
  v59 = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 28)
      goto LABEL_54;
    v14 = (void *)WTF::fastMalloc((WTF *)(16 * v13));
    v58 = v13;
    v57 = v14;
    memcpy(v14, *(const void **)(a1 + 128), 16 * *(unsigned int *)(a1 + 140));
  }
  v15 = *(_QWORD *)(a1 + 144);
  v16 = *(unsigned int *)(a1 + 164);
  v61 = 0;
  v62 = 0;
  v60 = v15;
  v63 = v16;
  if ((_DWORD)v16)
  {
    if (v16 < 0x6666667)
    {
      v17 = 40 * v16;
      v18 = WTF::fastMalloc((WTF *)(40 * v16));
      v62 = (v17 & 0xFFFFFFF8) / 0x28;
      v61 = v18;
      v19 = *(unsigned int *)(a1 + 164);
      if ((_DWORD)v19)
      {
        v20 = v18;
        v21 = 0;
        v22 = *(_QWORD *)(a1 + 152);
        v23 = 40 * v19;
        do
        {
          v24 = v22 + v21;
          v25 = v20 + v21;
          *(_BYTE *)v25 = *(_BYTE *)(v22 + v21);
          *(_BYTE *)(v20 + v21 + 8) = 0;
          a2 = (void *)(v20 + v21 + 8);
          *(_DWORD *)(v25 + 16) = -1;
          v26 = *(unsigned int *)(v22 + v21 + 16);
          if ((_DWORD)v26 != -1)
          {
            ((void (*)(_QWORD *, void *, uint64_t))off_1E336C418[v26])(v68, a2, v24 + 8);
            *(_DWORD *)(v25 + 16) = v26;
          }
          v27 = (WTF *)*(unsigned int *)(v24 + 36);
          *(_QWORD *)(v25 + 24) = 0;
          *(_QWORD *)(v25 + 32) = 0;
          v28 = v25 + 24;
          *(_DWORD *)(v28 + 12) = (_DWORD)v27;
          if ((_DWORD)v27)
          {
            v29 = (void *)WTF::fastMalloc(v27);
            *(_DWORD *)(v20 + v21 + 32) = (_DWORD)v27;
            *(_QWORD *)v28 = v29;
            memcpy(v29, *(const void **)(v22 + v21 + 24), *(unsigned int *)(v24 + 36));
          }
          v21 += 40;
        }
        while (v23 != v21);
      }
      goto LABEL_36;
    }
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x195570180);
  }
LABEL_36:
  v64 = *(_QWORD *)(a1 + 168);
  v65 = *(_BYTE *)(a1 + 176);
  v66[0] = 0;
  v67 = 0;
  if (*(_BYTE *)(a1 + 328))
  {
    WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs((uint64_t)v66, a1 + 184);
    v67 = 1;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 8);
    if (v31)
    {
      v32 = (unsigned int *)(v31 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
      v34 = *(_QWORD *)(a1 + 16);
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8);
      if (v34)
        v36 = *(_QWORD *)(v34 + 8);
      else
        v36 = 0;
      v37 = *(unsigned __int8 *)(a1 + 24);
      v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v38 = &off_1E336C4F8;
      v39 = *(_QWORD *)(a1 + 344);
      *(_QWORD *)(a1 + 344) = 0;
      v38[1] = v39;
      v40 = *(_QWORD *)(a1 + 352);
      *(_QWORD *)(a1 + 352) = 0;
      v38[2] = v40;
      v41 = *(_QWORD *)(a1 + 360);
      *(_QWORD *)(a1 + 360) = 0;
      v38[3] = v41;
      v68[0] = v38;
      (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)v35 + 16))(v35, v36, v47, v37, v68);
      v42 = v68[0];
      v68[0] = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      do
      {
        v43 = __ldaxr(v32);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v32));
      if (!v44)
      {
        atomic_store(1u, v32);
        v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v45 = off_1E31FE290;
        v45[1] = v32;
        v68[0] = v45;
        WTF::ensureOnMainThread();
        v46 = v68[0];
        v68[0] = 0;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      }
    }
  }
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)v47, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_0,void,JSC::JSValue>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336C548;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_0,void,JSC::JSValue>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336C548;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_0,void,JSC::JSValue>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = result[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_BYTE *)(v2 + 16) = 1;
      v3 = *(_QWORD *)(v2 + 8);
      result[1] = 0;
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v4 = &off_1E336C570;
      v4[1] = v1;
      v5 = v4;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 56))(v3, &v5);
      result = v5;
      v5 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_0::operator()(JSC::JSValue)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336C570;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_0::operator()(JSC::JSValue)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336C570;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_0::operator()(JSC::JSValue)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_BYTE *)(v2 + 16) = 0;
      v3 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1,void,WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::AbortSignal *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E336C598;
  v3 = (WebCore::AbortSignal *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1,void,WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::AbortSignal *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v9;
  void *v10;

  *(_QWORD *)this = &off_1E336C598;
  v3 = (WebCore::AbortSignal *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

objc_class *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_1,void,WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&>::call(uint64_t a1, uint64_t a2, char a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  objc_class *result;
  _DWORD *v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  objc_class *v16;
  WTF::StringImpl *v17;
  objc_class *v18;
  objc_class *v19;
  WTF::StringImpl *v20;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 && *(_BYTE *)(v6 + 156))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *(_QWORD *)(a1 + 16);
    LOBYTE(v16) = 16;
    v18 = 0;
    LOBYTE(v19) = 16;
    v8 = v17;
    if (v17)
      *(_DWORD *)v17 += 2;
    v20 = v8;
    WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)&v19, 0, &v18);
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (objc_class *)WTF::StringImpl::destroy(result, v9);
    }
    return result;
  }
  WebCore::AuthenticatorResponse::tryCreate((uint64_t *)&v19, a2, a3);
  if (v19)
  {
    v16 = v19;
    v12 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
    WebCore::PublicKeyCredential::PublicKeyCredential((uint64_t)v12, (uint64_t *)&v16);
    WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>>(*(_QWORD *)(a1 + 16), (uint64_t)v12);
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
    result = v16;
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1)
        return (objc_class *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 8))();
      else
        --*((_DWORD *)v16 + 2);
    }
    return result;
  }
  v13 = *a4;
  v14 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
  v15 = *(_QWORD *)(a1 + 16);
  if (v14)
    *(_DWORD *)v14 += 4;
  v16 = 0;
  LOBYTE(v19) = v13;
  v20 = v14;
  WebCore::DeferredPromise::reject(v15, (unsigned __int8 *)&v19, 0, &v16);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (objc_class *)WTF::StringImpl::destroy(result, v9);
      if (!v14)
        return result;
      goto LABEL_23;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v14)
    return result;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    result = v14;
    return (objc_class *)WTF::StringImpl::destroy(result, v9);
  }
  *(_DWORD *)v14 -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E336C5C0;
  WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2::~$_2((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E336C5C0;
  WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2::~$_2((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::discoverFromExternalSource(WebCore::Document const&,WebCore::CredentialRequestOptions &&,std::pair<WebAuthn::Scope,WebCore::CredentialRequestOptions &&::optional<WebCore::SecurityOriginData>> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>> &&)::$_2,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE v38[8];
  int v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  char v45;
  _BYTE v46[144];
  char v47;
  __int16 v48;
  _QWORD v49[2];

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return;
  if (!*(_QWORD *)(v2 + 8))
    return;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return;
  if (!*(_BYTE *)(a1 + 256))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_37;
  }
  v38[0] = 0;
  v39 = -1;
  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E336C418[v5])(v49, v38, a1 + 40);
    v39 = v5;
  }
  v6 = *(_DWORD **)(a1 + 64);
  v40 = *(_QWORD *)(a1 + 56);
  if (v6)
    *v6 += 2;
  v7 = *(unsigned int *)(a1 + 84);
  v42 = 0;
  v43 = 0;
  v41 = v6;
  v44 = v7;
  if (!(_DWORD)v7)
    goto LABEL_19;
  if (v7 >= 0x6666667)
  {
LABEL_37:
    __break(0xC471u);
    return;
  }
  v8 = 40 * v7;
  v9 = WTF::fastMalloc((WTF *)(40 * v7));
  v43 = (v8 & 0xFFFFFFF8) / 0x28;
  v42 = v9;
  v10 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v10)
  {
    v11 = v9;
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 72);
    v14 = 40 * v10;
    do
    {
      v15 = v13 + v12;
      v16 = v11 + v12;
      *(_BYTE *)v16 = *(_BYTE *)(v13 + v12);
      *(_BYTE *)(v11 + v12 + 8) = 0;
      a2 = (void *)(v11 + v12 + 8);
      *(_DWORD *)(v16 + 16) = -1;
      v17 = *(unsigned int *)(v13 + v12 + 16);
      if ((_DWORD)v17 != -1)
      {
        ((void (*)(_QWORD *, void *, uint64_t))off_1E336C418[v17])(v49, a2, v15 + 8);
        *(_DWORD *)(v16 + 16) = v17;
      }
      v18 = (WTF *)*(unsigned int *)(v15 + 36);
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      v19 = v16 + 24;
      *(_DWORD *)(v19 + 12) = (_DWORD)v18;
      if ((_DWORD)v18)
      {
        v20 = (void *)WTF::fastMalloc(v18);
        *(_DWORD *)(v11 + v12 + 32) = (_DWORD)v18;
        *(_QWORD *)v19 = v20;
        memcpy(v20, *(const void **)(v13 + v12 + 24), *(unsigned int *)(v15 + 36));
      }
      v12 += 40;
    }
    while (v14 != v12);
  }
LABEL_19:
  v45 = *(_BYTE *)(a1 + 88);
  v46[0] = 0;
  v47 = 0;
  if (*(_BYTE *)(a1 + 240))
  {
    WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs((uint64_t)v46, a1 + 96);
    v47 = 1;
  }
  v48 = *(_WORD *)(a1 + 248);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v25 = *(_QWORD *)(a1 + 16);
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8);
      if (v25)
        v27 = *(_QWORD *)(v25 + 8);
      else
        v27 = 0;
      v28 = *(unsigned __int8 *)(a1 + 24);
      v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v29 = &off_1E336C598;
      v30 = *(_QWORD *)(a1 + 336);
      *(_QWORD *)(a1 + 336) = 0;
      v29[1] = v30;
      v31 = *(_QWORD *)(a1 + 344);
      *(_QWORD *)(a1 + 344) = 0;
      v29[2] = v31;
      v32 = *(_QWORD *)(a1 + 352);
      *(_QWORD *)(a1 + 352) = 0;
      v29[3] = v32;
      v49[0] = v29;
      (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v26 + 24))(v26, v27, v38, v28, a1 + 288, v49);
      v33 = v49[0];
      v49[0] = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      do
      {
        v34 = __ldaxr(v23);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v23));
      if (!v35)
      {
        atomic_store(1u, v23);
        v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v36 = off_1E31FE290;
        v36[1] = v23;
        v49[0] = v36;
        WTF::ensureOnMainThread();
        v37 = v49[0];
        v49[0] = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
    }
  }
  WebCore::PublicKeyCredentialRequestOptions::~PublicKeyCredentialRequestOptions((WebCore::PublicKeyCredentialRequestOptions *)v38, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E336C5E8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336C5E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::isConditionalMediationAvailable(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E336C610;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::isConditionalMediationAvailable(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336C610;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::isConditionalMediationAvailable(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::getClientCapabilities(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLRecord<WebCore::IDLDOMString,WebCore::IDLBoolean>> &&)::$_0,void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E336C638;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::getClientCapabilities(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLRecord<WebCore::IDLDOMString,WebCore::IDLBoolean>> &&)::$_0,void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336C638;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::AuthenticatorCoordinator::getClientCapabilities(WebCore::Document const&,WebCore::DOMPromiseDeferred<WebCore::IDLRecord<WebCore::IDLDOMString,WebCore::IDLBoolean>> &&)::$_0,void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  JSC::VM *v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  WebCore::JSDOMGlobalObject *v20;
  uint64_t v21;
  WTF *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t *v32;
  char v33[8];
  _QWORD v34[2];
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(WTF **)a2;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *((_QWORD *)result + 1);
  v5 = *(_QWORD *)(v4 + 24);
  if (v5 && *(_QWORD *)v5 && (*(_BYTE *)(v5 + 8) & 3) == 0)
  {
    v6 = *(_QWORD *)(v4 + 32);
    if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
      v7 = 0;
    else
      v7 = *(uint64_t **)v6;
    v29 = v7[7];
    MEMORY[0x19AEA3294](v33);
    v8 = (JSC::VM *)v7[7];
    v9 = JSC::StructureCache::emptyObjectStructureForPrototype();
    v10 = 8 * *(unsigned __int8 *)(v9 + 14);
    v11 = JSC::allocateCell<JSC::JSFinalObject>((uint64_t)v8, v10 + 16);
    v12 = *(_DWORD *)(v9 + 8);
    *(_DWORD *)v11 = v9 >> 4;
    *(_DWORD *)(v11 + 4) = v12;
    *(_QWORD *)(v11 + 8) = 0;
    bzero((void *)(v11 + 16), v10);
    if (*((_BYTE *)v8 + 755))
      __dmb(0xAu);
    v31 = v2;
    v32 = v7;
    v30 = v3;
    if ((_DWORD)v3)
    {
      v14 = 16 * v3;
      v15 = (char *)v2 + 8;
      do
      {
        if (*v15)
          v16 = 7;
        else
          v16 = 6;
        v17 = (WTF::StringImpl *)*((_QWORD *)v15 - 1);
        if (v17)
        {
          if ((*((_BYTE *)v17 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v17 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v17 = (WTF::StringImpl *)v34[0];
          }
        }
        v18 = *(_DWORD *)v17;
        *(_DWORD *)v17 += 2;
        if (v18)
          *(_DWORD *)v17 = v18;
        else
          WTF::StringImpl::destroy(v17, v13);
        v34[0] = 0;
        v34[1] = v11;
        v35 = -1;
        v36 = 0x1000000;
        v37 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, v8, (unint64_t)v17, v16, 0, (uint64_t)v34);
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v13);
        else
          *(_DWORD *)v17 -= 2;
        v15 += 16;
        v14 -= 16;
      }
      while (v14);
    }
    v19 = *(_QWORD *)(v29 + 16);
    if (v19)
    {
      v20 = (WebCore::JSDOMGlobalObject *)v32;
    }
    else
    {
      v20 = (WebCore::JSDOMGlobalObject *)v32;
      WebCore::DeferredPromise::callFunction(v4, v32, 0, (objc_class *)v11);
      v19 = *(_QWORD *)(v29 + 16);
      if (!v19)
      {
LABEL_28:
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v33);
        v3 = v30;
        v2 = v31;
        goto LABEL_29;
      }
    }
    v23 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v20);
    if (!(*(unsigned int (**)(_QWORD *))(*v23 + 64))(v23))
    {
LABEL_42:
      WebCore::reportException(v20, v19, 0, 0, 0);
      goto LABEL_28;
    }
    v24 = v23[43];
    if (*(_QWORD *)(v29 + 24) == v19)
    {
LABEL_56:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_42;
    }
    if (!v24)
      goto LABEL_42;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_50:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_55:
        v20 = (WebCore::JSDOMGlobalObject *)v32;
        if (!v27)
          goto LABEL_42;
        goto LABEL_56;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_55;
  }
LABEL_29:
  if ((_DWORD)v3)
  {
    v21 = 16 * v3;
    v22 = v2;
    do
    {
      result = *(WTF::StringImpl **)v22;
      *(_QWORD *)v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v22 = (WTF *)((char *)v22 + 16);
      v21 -= 16;
    }
    while (v21);
  }
  if (v2)
    return (WTF::StringImpl *)WTF::fastFree(v2, (void *)a2);
  return result;
}

uint64_t apdu::ApduResponse::createFromMessage@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  WTF *v8;

  v3 = *(unsigned int *)(result + 12);
  if (v3 <= 1)
  {
    v4 = 0;
    *(_BYTE *)a2 = 0;
LABEL_8:
    *(_BYTE *)(a2 + 24) = v4;
    return result;
  }
  v5 = *(_QWORD *)result;
  v6 = (WTF *)(v3 - 2);
  v7 = *(unsigned __int16 *)(*(_QWORD *)result + v3 - 2);
  if (v3 == 2)
  {
    result = 0;
    LODWORD(v8) = 0;
LABEL_7:
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = (_DWORD)v6;
    *(_DWORD *)(a2 + 12) = (_DWORD)v8;
    *(_WORD *)(a2 + 16) = bswap32(v7) >> 16;
    v4 = 1;
    goto LABEL_8;
  }
  if (!((unint64_t)v6 >> 32))
  {
    result = WTF::fastMalloc(v6);
    v8 = 0;
    do
    {
      *(_BYTE *)(result + v8) = *((_BYTE *)v8 + v5);
      v8 = (WTF *)((char *)v8 + 1);
    }
    while (v6 != v8);
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t apdu::ApduResponse::ApduResponse(uint64_t result, uint64_t *a2, __int16 a3)
{
  uint64_t v3;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v3;
  *(_WORD *)(result + 16) = a3;
  return result;
}

{
  uint64_t v3;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v3;
  *(_WORD *)(result + 16) = a3;
  return result;
}

uint64_t apdu::ApduResponse::getEncodedResponse@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  WTF *v4;
  void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int16 v10;
  void *v11;
  uint64_t result;
  void *v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;

  v4 = (WTF *)*((unsigned int *)this + 3);
  *(_DWORD *)(a2 + 12) = (_DWORD)v4;
  if ((_DWORD)v4)
  {
    v5 = (void *)WTF::fastMalloc(v4);
    memcpy(v5, *this, *((unsigned int *)this + 3));
    v6 = (size_t)v4;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= v6 + 1)
    v9 = v6 + 1;
  else
    v9 = v8;
  if (HIDWORD(v9))
    goto LABEL_29;
  v10 = *((_WORD *)this + 8);
  v11 = (void *)WTF::fastMalloc((WTF *)v9);
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)a2 = v11;
  result = (uint64_t)memcpy(v11, v5, v6);
  if (v5)
  {
    if (v11 == v5)
    {
      v11 = 0;
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    result = WTF::fastFree((WTF *)v5, v13);
  }
  *((_BYTE *)v11 + v6) = HIBYTE(v10);
  v14 = ((_DWORD)v4 + 1);
  v15 = *((_WORD *)this + 8);
  if ((_DWORD)v14 != *(_DWORD *)(a2 + 8))
  {
    v20 = *(void **)a2;
    goto LABEL_28;
  }
  v16 = v14 + (v14 >> 2);
  v17 = v16 >= 0x10 ? v16 + 1 : 16;
  v18 = v17 <= v14 + 1 ? v14 + 1 : v17;
  if (HIDWORD(v18))
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x19557124CLL);
  }
  v19 = *(void **)a2;
  v20 = (void *)WTF::fastMalloc((WTF *)v18);
  *(_DWORD *)(a2 + 8) = v18;
  *(_QWORD *)a2 = v20;
  result = (uint64_t)memcpy(v20, v19, ((_DWORD)v4 + 1));
  if (v19)
  {
    if (v20 == v19)
    {
      v20 = 0;
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    result = WTF::fastFree((WTF *)v19, v21);
  }
LABEL_28:
  *((_BYTE *)v20 + v14) = v15;
  *(_DWORD *)(a2 + 12) = (_DWORD)v4 + 2;
  return result;
}

uint64_t cbor::CBORReader::read@<X0>(_QWORD *a1@<X0>, int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;

  v6 = *a1;
  v22 = a1;
  v23 = v6;
  v24 = 0;
  result = cbor::CBORReader::decodeCBOR((uint64_t)&v17, &v22, a3);
  v9 = v21;
  if (!v21 || v23 == *v22 + v22[1])
  {
    v10 = v24;
    if (!a2)
      goto LABEL_7;
    goto LABEL_6;
  }
  v10 = 7;
  if (a2)
LABEL_6:
    *a2 = v10;
LABEL_7:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 32) = 0;
  if (!v10)
  {
    if (!v9)
      return result;
    v11 = v17;
    *(_DWORD *)a4 = v17;
    switch(v11)
    {
      case 0:
      case 1:
        v12 = v18;
        goto LABEL_17;
      case 2:
      case 4:
        *(_QWORD *)(a4 + 8) = v18;
        v13 = v19;
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(a4 + 16) = v13;
        break;
      case 3:
        v12 = v18;
        v18 = 0;
        goto LABEL_17;
      case 5:
        v15 = v18;
        v14 = v19;
        *(_QWORD *)(a4 + 16) = v19;
        v12 = (uint64_t *)(a4 + 16);
        *(_QWORD *)(a4 + 8) = v15;
        v16 = v20;
        *(_QWORD *)(a4 + 24) = v20;
        if (v16)
        {
          *(_QWORD *)(v14 + 16) = v12;
          v18 = &v19;
          v19 = 0;
          v20 = 0;
        }
        else
        {
LABEL_17:
          *(_QWORD *)(a4 + 8) = v12;
        }
        break;
      case 7:
        *(_DWORD *)(a4 + 8) = (_DWORD)v18;
        break;
      default:
        break;
    }
    *(_BYTE *)(a4 + 32) = 1;
    return cbor::CBORValue::internalCleanup((uint64_t)&v17, v8);
  }
  if (v9)
    return cbor::CBORValue::internalCleanup((uint64_t)&v17, v8);
  return result;
}

uint64_t cbor::CBORReader::decodeCBOR(uint64_t this, _DWORD *a2, unsigned int a3)
{
  size_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  char v15;
  unint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v19;
  BOOL v20;
  const WTF::StringImpl *v22;
  WTF *v23;
  WTF **v24;
  WTF *v25;
  int v26;
  BOOL v27;
  WTF *v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  char v53;
  BOOL v54;
  unint64_t v55;
  unsigned __int8 *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int *v60;
  int v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char **v67;
  WTF *v68;
  char *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  uint64_t *v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  WTF::StringImpl *v77;
  WTF *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  int v81;
  WTF **v82;
  WTF *v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  WTF *v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  WTF::StringImpl *v98;
  WTF *v99;
  WTF *v100;
  uint64_t v101;
  char v102;
  WTF **v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;

  v4 = a2;
  v5 = this;
  if (a3 >= 0x11)
  {
    v6 = 5;
LABEL_118:
    a2[4] = v6;
    *(_BYTE *)this = 0;
    *(_BYTE *)(this + 32) = 0;
    return this;
  }
  v7 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v8 = **(_QWORD **)a2;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v10 = v8 + v9;
  if ((unsigned __int8 *)(v8 + v9) == v7)
    goto LABEL_117;
  v11 = v7 + 1;
  *((_QWORD *)a2 + 1) = v7 + 1;
  v12 = *v7;
  v13 = v12 & 0x1F;
  v14 = v12 & 0x1F;
  if (v14 > 0x17)
  {
    if (v14 - 24 > 3)
    {
      v6 = 2;
      goto LABEL_118;
    }
    v16 = (0x8040201u >> (8 * (v14 - 24))) & 0xF;
    if (v10 - (uint64_t)v11 >= v16)
    {
      v17 = 0;
      v13 = 0;
      do
      {
        v18 = v11++;
        *((_QWORD *)a2 + 1) = v11;
        v13 = *v18 | (v13 << 8);
        ++v17;
      }
      while (v17 < v16);
      if ((((_BYTE)v14 - 24) & 0xF) == 0 && v13 < 0x18
        || !(v13 >> ((4 * ((0x8040201u >> (8 * (v14 - 24))) & 0xF)) & 0x38)))
      {
        v6 = 10;
        goto LABEL_118;
      }
      goto LABEL_5;
    }
LABEL_117:
    v6 = 3;
    goto LABEL_118;
  }
LABEL_5:
  switch(v12 >> 5)
  {
    case 0u:
      if ((v13 & 0x8000000000000000) != 0)
      {
        v15 = 0;
        a2[4] = 13;
        *(_BYTE *)this = 0;
      }
      else
      {
        v86 = v13;
        v85 = 0;
        *(_DWORD *)this = 0;
        *(_QWORD *)(this + 8) = v13;
        this = cbor::CBORValue::internalCleanup((uint64_t)&v85, (WTF::StringImpl *)a2);
        v15 = 1;
      }
      *(_BYTE *)(v5 + 32) = v15;
      return this;
    case 1u:
      if ((v13 & 0x8000000000000000) != 0)
      {
        v53 = 0;
        a2[4] = 13;
        *(_BYTE *)this = 0;
      }
      else
      {
        v86 = ~v13;
        v53 = 1;
        v85 = 1;
        *(_DWORD *)this = 1;
        *(_QWORD *)(this + 8) = ~v13;
        this = cbor::CBORValue::internalCleanup((uint64_t)&v85, (WTF::StringImpl *)a2);
      }
      *(_BYTE *)(v5 + 32) = v53;
      return this;
    case 2u:
      if (v10 - (uint64_t)v11 < v13)
        goto LABEL_117;
      v3 = v9 - (_QWORD)&v11[-v8];
      if (v9 < (unint64_t)&v11[-v8])
        goto LABEL_184;
      if (v13 != -1)
      {
        v54 = v3 >= v13;
        v3 = v13;
        if (!v54)
          goto LABEL_184;
      }
      if (!v3)
        goto LABEL_186;
      if (v3 <= 0x10)
        v55 = 16;
      else
        v55 = v3;
      if (HIDWORD(v55))
      {
        __break(0xC471u);
        JUMPOUT(0x195571E28);
      }
      v56 = v11;
      v57 = (void *)WTF::fastMalloc((WTF *)v55);
      memcpy(v57, v56, v3);
      v11 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      goto LABEL_115;
    case 3u:
      if (v10 - (uint64_t)v11 < v13)
        goto LABEL_117;
      v71 = &v11[-v8];
      if (v9 < (unint64_t)v71 || v13 != -1 && v9 - (unint64_t)v71 < v13)
      {
LABEL_184:
        __break(1u);
        goto LABEL_185;
      }
      WTF::String::fromUTF8();
      *((_QWORD *)v4 + 1) += v13;
      this = (uint64_t)v98;
      if (!v13 || v98 && *((_DWORD *)v98 + 1))
      {
        v85 = 3;
        v98 = 0;
        *(_DWORD *)v5 = 3;
        v86 = 0;
        *(_QWORD *)(v5 + 8) = this;
        *(_BYTE *)(v5 + 32) = 1;
        cbor::CBORValue::internalCleanup((uint64_t)&v85, v72);
        this = (uint64_t)v98;
      }
      else
      {
        v4[4] = 6;
        *(_BYTE *)v5 = 0;
        *(_BYTE *)(v5 + 32) = 0;
      }
      v98 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)this, v72);
        else
          *(_DWORD *)this -= 2;
      }
      return this;
    case 4u:
      v98 = 0;
      v99 = 0;
      if (v13)
      {
        do
        {
          cbor::CBORReader::decodeCBOR((cbor::CBORReader *)&v85, (int)v4);
          if (!(_BYTE)v89)
          {
            *(_BYTE *)v5 = 0;
            *(_BYTE *)(v5 + 32) = 0;
            goto LABEL_158;
          }
          v58 = HIDWORD(v99);
          if (HIDWORD(v99) == (_DWORD)v99)
          {
            WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,cbor::CBORValue>((uint64_t)&v98, (unint64_t)&v85);
          }
          else
          {
            v59 = v98;
            v60 = (int *)((char *)v98 + 32 * HIDWORD(v99));
            v61 = v85;
            *v60 = v85;
            switch(v61)
            {
              case 0:
              case 1:
                v62 = v86;
                v63 = (char *)v59 + 32 * v58;
                goto LABEL_131;
              case 2:
              case 4:
                v64 = (char *)v59 + 32 * v58;
                *((_QWORD *)v64 + 1) = 0;
                *((_QWORD *)v64 + 2) = 0;
                v65 = v86;
                v86 = 0;
                *((_QWORD *)v64 + 1) = v65;
                LODWORD(v65) = (_DWORD)v87;
                LODWORD(v87) = 0;
                *((_DWORD *)v64 + 4) = v65;
                LODWORD(v64) = HIDWORD(v87);
                HIDWORD(v87) = 0;
                v60[5] = (int)v64;
                break;
              case 3:
                v62 = v86;
                v63 = (char *)v59 + 32 * v58;
                v86 = 0;
LABEL_131:
                *((_QWORD *)v63 + 1) = v62;
                break;
              case 5:
                v66 = (char *)v59 + 32 * v58;
                *((_QWORD *)v66 + 1) = v86;
                v67 = (char **)(v66 + 8);
                v68 = v87;
                *((_QWORD *)v66 + 2) = v87;
                v69 = v66 + 16;
                v70 = v88;
                *((_QWORD *)v69 + 1) = v88;
                if (v70)
                {
                  *((_QWORD *)v68 + 2) = v69;
                  v86 = (unint64_t)&v87;
                  v87 = 0;
                  v88 = 0;
                }
                else
                {
                  *v67 = v69;
                }
                break;
              case 7:
                *((_DWORD *)v59 + 8 * v58 + 2) = v86;
                break;
              default:
                break;
            }
            ++HIDWORD(v99);
          }
          if ((_BYTE)v89)
            cbor::CBORValue::internalCleanup((uint64_t)&v85, (WTF::StringImpl *)a2);
          --v13;
        }
        while (v13);
        v77 = v98;
        v78 = v99;
      }
      else
      {
        v77 = 0;
        v78 = 0;
      }
      v85 = 4;
      v98 = 0;
      v99 = 0;
      *(_DWORD *)v5 = 4;
      v86 = 0;
      v87 = 0;
      *(_QWORD *)(v5 + 8) = v77;
      *(_QWORD *)(v5 + 16) = v78;
      *(_BYTE *)(v5 + 32) = 1;
      cbor::CBORValue::internalCleanup((uint64_t)&v85, (WTF::StringImpl *)a2);
LABEL_158:
      if (HIDWORD(v99))
      {
        v79 = v98;
        v80 = 32 * HIDWORD(v99);
        do
        {
          cbor::CBORValue::internalCleanup((uint64_t)v79, (WTF::StringImpl *)a2);
          v79 = (WTF::StringImpl *)((char *)v79 + 32);
          v80 -= 32;
        }
        while (v80);
      }
      this = (uint64_t)v98;
      if (v98)
      {
        v98 = 0;
        LODWORD(v99) = 0;
        return WTF::fastFree((WTF *)this, a2);
      }
      return this;
    case 5u:
      v104 = 0;
      v105 = 0;
      v103 = &v104;
      if (!v13)
      {
        v73 = 0;
        v85 = 5;
        v87 = 0;
        v88 = 0;
LABEL_148:
        v86 = (unint64_t)&v87;
        *(_DWORD *)v5 = 5;
        v74 = (uint64_t *)(v5 + 8);
        *(_QWORD *)(v5 + 16) = v73;
        v75 = v5 + 16;
        *(_QWORD *)(v5 + 24) = 0;
LABEL_149:
        *v74 = v75;
LABEL_150:
        *(_BYTE *)(v5 + 32) = 1;
        v76 = (WTF::StringImpl **)&v85;
        goto LABEL_175;
      }
      LODWORD(v3) = a3 - 1;
      while (2)
      {
        cbor::CBORReader::decodeCBOR((cbor::CBORReader *)&v98, (int)v4);
        cbor::CBORReader::decodeCBOR((cbor::CBORReader *)&v93, (int)v4);
        v19 = v97;
        if (v102)
          v20 = v97 == 0;
        else
          v20 = 1;
        if (v20)
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 32) = 0;
          goto LABEL_171;
        }
        if (v98 > 3 || (_DWORD)v98 == 2)
        {
          v4[4] = 4;
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 32) = 0;
          goto LABEL_172;
        }
        if (&v104 != (WTF **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v103, (cbor::CBORValue *)&v98))
        {
          v81 = 8;
LABEL_170:
          v4[4] = v81;
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 32) = 0;
          v19 = v97;
LABEL_171:
          if (!v19)
          {
LABEL_173:
            if (!v102)
              return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v103, v104);
            v76 = &v98;
LABEL_175:
            cbor::CBORValue::internalCleanup((uint64_t)v76, (WTF::StringImpl *)a2);
            return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v103, v104);
          }
LABEL_172:
          cbor::CBORValue::internalCleanup((uint64_t)&v93, (WTF::StringImpl *)a2);
          goto LABEL_173;
        }
        if (!v102)
          break;
        if (!v105)
          goto LABEL_41;
        v23 = v104;
        v24 = &v104;
        if (v104)
        {
          do
          {
            v25 = v23;
            v23 = (WTF *)*((_QWORD *)v23 + 1);
          }
          while (v23);
        }
        else
        {
          do
          {
            v25 = v24[2];
            v20 = *(_QWORD *)v25 == (_QWORD)v24;
            v24 = (WTF **)v25;
          }
          while (v20);
        }
        v26 = *((_DWORD *)v25 + 8);
        v27 = (int)v98 < v26;
        if ((_DWORD)v98 != v26)
          goto LABEL_40;
        if ((_DWORD)v98 == 3)
        {
          if (v99)
            v30 = *((_DWORD *)v99 + 1);
          else
            v30 = 0;
          a2 = (_DWORD *)*((_QWORD *)v25 + 5);
          if (a2)
            v31 = a2[1];
          else
            v31 = 0;
          if (v30 == v31)
          {
            if ((WTF::codePointCompare(v99, (const WTF::StringImpl *)a2, v22) & 0x80000000) == 0)
            {
              if (!v102)
                break;
              goto LABEL_41;
            }
            goto LABEL_169;
          }
          if (v30 < v31)
          {
LABEL_169:
            v81 = 9;
            goto LABEL_170;
          }
        }
        else
        {
          if ((_DWORD)v98 != 1)
          {
            if ((_DWORD)v98)
              goto LABEL_41;
            v27 = (uint64_t)v99 < *((_QWORD *)v25 + 5);
LABEL_40:
            if (!v27)
              goto LABEL_41;
            goto LABEL_169;
          }
          if ((uint64_t)v99 > *((_QWORD *)v25 + 5))
            goto LABEL_169;
        }
LABEL_41:
        if (v97)
        {
          v85 = (int)v98;
          switch((int)v98)
          {
            case 0:
            case 1:
              v28 = v99;
              goto LABEL_60;
            case 2:
            case 4:
              v86 = (unint64_t)v99;
              v29 = v100;
              v99 = 0;
              v100 = 0;
              v87 = v29;
              goto LABEL_61;
            case 3:
              v28 = v99;
              v99 = 0;
              goto LABEL_60;
            case 5:
              v86 = (unint64_t)v99;
              v87 = v100;
              v88 = v101;
              if (v101)
              {
                *((_QWORD *)v100 + 2) = &v87;
                v99 = (WTF *)&v100;
                v100 = 0;
                v101 = 0;
              }
              else
              {
                v28 = (WTF *)&v87;
LABEL_60:
                v86 = (unint64_t)v28;
              }
LABEL_61:
              v89 = v93;
              switch(v93)
              {
                case 0:
                case 1:
                  v32 = v94;
                  goto LABEL_69;
                case 2:
                case 4:
                  v90 = v94;
                  v33 = v95;
                  v94 = 0;
                  v95 = 0;
                  v91 = v33;
                  goto LABEL_70;
                case 3:
                  v32 = v94;
                  v94 = 0;
                  goto LABEL_69;
                case 5:
                  v90 = v94;
                  v91 = v95;
                  v92 = v96;
                  if (v96)
                  {
                    *(_QWORD *)(v95 + 16) = &v91;
                    v94 = &v95;
                    v95 = 0;
                    v96 = 0;
                  }
                  else
                  {
                    v32 = &v91;
LABEL_69:
                    v90 = v32;
                  }
LABEL_70:
                  v34 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v103, (uint64_t)&v106, (cbor::CBORValue *)&v85);
                  if (!*v34)
                  {
                    v36 = v34;
                    v37 = WTF::fastMalloc((WTF *)0x60);
                    v38 = v37;
                    v39 = v85;
                    *(_DWORD *)(v37 + 32) = v85;
                    switch(v39)
                    {
                      case 0:
                      case 1:
                        v40 = v86;
                        goto LABEL_78;
                      case 2:
                      case 4:
                        *(_QWORD *)(v37 + 40) = v86;
                        v41 = v87;
                        v86 = 0;
                        v87 = 0;
                        *(_QWORD *)(v37 + 48) = v41;
                        break;
                      case 3:
                        v40 = v86;
                        v86 = 0;
                        goto LABEL_78;
                      case 5:
                        v43 = v86;
                        v42 = v87;
                        *(_QWORD *)(v37 + 48) = v87;
                        v40 = v37 + 48;
                        *(_QWORD *)(v37 + 40) = v43;
                        v44 = v88;
                        *(_QWORD *)(v37 + 56) = v88;
                        if (v44)
                        {
                          *((_QWORD *)v42 + 2) = v40;
                          v86 = (unint64_t)&v87;
                          v87 = 0;
                          v88 = 0;
                        }
                        else
                        {
LABEL_78:
                          *(_QWORD *)(v37 + 40) = v40;
                        }
                        break;
                      case 7:
                        *(_DWORD *)(v37 + 40) = v86;
                        break;
                      default:
                        break;
                    }
                    v45 = v89;
                    *(_DWORD *)(v37 + 64) = v89;
                    switch(v45)
                    {
                      case 0:
                      case 1:
                        v46 = v90;
                        goto LABEL_86;
                      case 2:
                      case 4:
                        *(_QWORD *)(v37 + 72) = v90;
                        v47 = v91;
                        v90 = 0;
                        v91 = 0;
                        *(_QWORD *)(v37 + 80) = v47;
                        break;
                      case 3:
                        v46 = v90;
                        v90 = 0;
                        goto LABEL_86;
                      case 5:
                        v49 = v90;
                        v48 = v91;
                        *(_QWORD *)(v37 + 80) = v91;
                        v46 = (uint64_t *)(v37 + 80);
                        *(_QWORD *)(v37 + 72) = v49;
                        v50 = v92;
                        *(_QWORD *)(v37 + 88) = v92;
                        if (v50)
                        {
                          *(_QWORD *)(v48 + 16) = v46;
                          v90 = &v91;
                          v91 = 0;
                          v92 = 0;
                        }
                        else
                        {
LABEL_86:
                          *(_QWORD *)(v37 + 72) = v46;
                        }
                        break;
                      case 7:
                        *(_DWORD *)(v37 + 72) = (_DWORD)v90;
                        break;
                      default:
                        break;
                    }
                    v51 = v106;
                    *(_QWORD *)v37 = 0;
                    *(_QWORD *)(v37 + 8) = 0;
                    *(_QWORD *)(v37 + 16) = v51;
                    *v36 = v37;
                    if (*v103)
                    {
                      v103 = (WTF **)*v103;
                      v38 = *v36;
                    }
                    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v104, v38);
                    ++v105;
                  }
                  cbor::CBORValue::internalCleanup((uint64_t)&v89, v35);
                  cbor::CBORValue::internalCleanup((uint64_t)&v85, v52);
                  if (v97)
                    cbor::CBORValue::internalCleanup((uint64_t)&v93, (WTF::StringImpl *)a2);
                  if (v102)
                    cbor::CBORValue::internalCleanup((uint64_t)&v98, (WTF::StringImpl *)a2);
                  if (--v13)
                    continue;
                  v82 = v103;
                  v73 = v104;
                  v85 = 5;
                  v86 = (unint64_t)v103;
                  v87 = v104;
                  v88 = v105;
                  if (!v105)
                    goto LABEL_148;
                  *((_QWORD *)v104 + 2) = &v87;
                  v103 = &v104;
                  v104 = 0;
                  v105 = 0;
                  v83 = v87;
                  v84 = v88;
                  *(_DWORD *)v5 = 5;
                  *(_QWORD *)(v5 + 8) = v82;
                  v74 = (uint64_t *)(v5 + 8);
                  *(_QWORD *)(v5 + 16) = v83;
                  v75 = v5 + 16;
                  *(_QWORD *)(v5 + 24) = v84;
                  if (!v84)
                    goto LABEL_149;
                  *((_QWORD *)v83 + 2) = v75;
                  v86 = (unint64_t)&v87;
                  v87 = 0;
                  v88 = 0;
                  break;
                case 7:
                  LODWORD(v90) = (_DWORD)v94;
                  goto LABEL_70;
                default:
                  goto LABEL_70;
              }
              break;
            case 7:
              LODWORD(v86) = (_DWORD)v99;
              goto LABEL_61;
            default:
              goto LABEL_61;
          }
          goto LABEL_150;
        }
        break;
      }
LABEL_185:
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_186:
      v57 = 0;
      LODWORD(v55) = 0;
LABEL_115:
      *((_QWORD *)v4 + 1) = &v11[v13];
      v85 = 2;
      *(_DWORD *)v5 = 2;
      v86 = 0;
      v87 = 0;
      *(_QWORD *)(v5 + 8) = v57;
      *(_DWORD *)(v5 + 16) = v55;
      *(_DWORD *)(v5 + 20) = v3;
LABEL_140:
      *(_BYTE *)(v5 + 32) = 1;
      return cbor::CBORValue::internalCleanup((uint64_t)&v85, (WTF::StringImpl *)a2);
    case 7u:
      if (v14 - 25 <= 2)
      {
        v6 = 12;
        goto LABEL_118;
      }
      if ((v13 & 0xFFFFFFFC) == 0x14)
      {
        v85 = 7;
        LODWORD(v86) = v13;
        *(_DWORD *)this = 7;
        *(_DWORD *)(this + 8) = v13;
        goto LABEL_140;
      }
      v6 = 11;
      goto LABEL_118;
    default:
      v6 = 1;
      goto LABEL_118;
  }
}

uint64_t cbor::CBORValue::CBORValue(uint64_t this, unint64_t a2)
{
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)this = a2 >> 63;
  return this;
}

{
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)this = a2 >> 63;
  return this;
}

void cbor::CBORValue::~CBORValue(cbor::CBORValue *this, WTF::StringImpl *a2)
{
  cbor::CBORValue::internalCleanup((uint64_t)this, a2);
}

{
  cbor::CBORValue::internalCleanup((uint64_t)this, a2);
}

_DWORD *cbor::CBORValue::CBORValue(_DWORD *result, int a2)
{
  *result = 7;
  result[2] = a2;
  return result;
}

{
  *result = 7;
  result[2] = a2;
  return result;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_DWORD *)result = 3;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v2;
  return result;
}

{
  uint64_t v2;

  *(_DWORD *)result = 2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 20) = v2;
  return result;
}

{
  uint64_t v2;

  *(_DWORD *)result = 4;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 20) = v2;
  return result;
}

{
  uint64_t v2;

  *(_DWORD *)result = 2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 20) = v2;
  return result;
}

{
  uint64_t v2;

  *(_DWORD *)result = 3;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v2;
  return result;
}

{
  uint64_t v2;

  *(_DWORD *)result = 4;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 20) = v2;
  return result;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)result = 5;
  *(_QWORD *)(result + 8) = *a2;
  v2 = a2 + 1;
  v3 = a2[1];
  *(_QWORD *)(result + 16) = v3;
  v4 = result + 16;
  v5 = a2[2];
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *a2 = v2;
    *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)result = 5;
  *(_QWORD *)(result + 8) = *a2;
  v2 = a2 + 1;
  v3 = a2[1];
  *(_QWORD *)(result + 16) = v3;
  v4 = result + 16;
  v5 = a2[2];
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *a2 = v2;
    *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

_DWORD *cbor::CBORValue::CBORValue(_DWORD *this)
{
  *this = -1;
  return this;
}

{
  *this = -1;
  return this;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *(_DWORD *)result = *a2;
  switch(v2)
  {
    case 0:
    case 1:
      v3 = *((_QWORD *)a2 + 1);
      goto LABEL_5;
    case 2:
    case 4:
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      v4 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(_QWORD *)(result + 8) = v4;
      LODWORD(v4) = a2[4];
      a2[4] = 0;
      *(_DWORD *)(result + 16) = v4;
      LODWORD(v4) = a2[5];
      a2[5] = 0;
      *(_DWORD *)(result + 20) = v4;
      break;
    case 3:
      v3 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
LABEL_5:
      *(_QWORD *)(result + 8) = v3;
      break;
    case 5:
      *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
      v5 = a2 + 4;
      v6 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(result + 16) = v6;
      v7 = result + 16;
      v8 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(result + 24) = v8;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = v7;
        *((_QWORD *)a2 + 1) = v5;
        *v5 = 0;
        *((_QWORD *)a2 + 3) = 0;
      }
      else
      {
        *(_QWORD *)(result + 8) = v7;
      }
      break;
    case 7:
      *(_DWORD *)(result + 8) = a2[2];
      break;
    default:
      return result;
  }
  return result;
}

{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *(_DWORD *)result = *a2;
  switch(v2)
  {
    case 0:
    case 1:
      v3 = *((_QWORD *)a2 + 1);
      goto LABEL_5;
    case 2:
    case 4:
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      v4 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(_QWORD *)(result + 8) = v4;
      LODWORD(v4) = a2[4];
      a2[4] = 0;
      *(_DWORD *)(result + 16) = v4;
      LODWORD(v4) = a2[5];
      a2[5] = 0;
      *(_DWORD *)(result + 20) = v4;
      break;
    case 3:
      v3 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
LABEL_5:
      *(_QWORD *)(result + 8) = v3;
      break;
    case 5:
      *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
      v5 = a2 + 4;
      v6 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(result + 16) = v6;
      v7 = result + 16;
      v8 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(result + 24) = v8;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = v7;
        *((_QWORD *)a2 + 1) = v5;
        *v5 = 0;
        *((_QWORD *)a2 + 3) = 0;
      }
      else
      {
        *(_QWORD *)(result + 8) = v7;
      }
      break;
    case 7:
      *(_DWORD *)(result + 8) = a2[2];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t cbor::CBORValue::internalMoveConstructFrom(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *(_DWORD *)result = *a2;
  switch(v2)
  {
    case 0:
    case 1:
      v3 = *((_QWORD *)a2 + 1);
      goto LABEL_5;
    case 2:
    case 4:
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      v4 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(_QWORD *)(result + 8) = v4;
      LODWORD(v4) = a2[4];
      a2[4] = 0;
      *(_DWORD *)(result + 16) = v4;
      LODWORD(v4) = a2[5];
      a2[5] = 0;
      *(_DWORD *)(result + 20) = v4;
      break;
    case 3:
      v3 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
LABEL_5:
      *(_QWORD *)(result + 8) = v3;
      break;
    case 5:
      *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
      v5 = a2 + 4;
      v6 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(result + 16) = v6;
      v7 = result + 16;
      v8 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(result + 24) = v8;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = v7;
        *((_QWORD *)a2 + 1) = v5;
        *v5 = 0;
        *((_QWORD *)a2 + 3) = 0;
      }
      else
      {
        *(_QWORD *)(result + 8) = v7;
      }
      break;
    case 7:
      *(_DWORD *)(result + 8) = a2[2];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t result, int a2)
{
  *(_DWORD *)result = a2;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      goto LABEL_3;
    case 2:
    case 4:
      *(_QWORD *)(result + 16) = 0;
LABEL_3:
      *(_QWORD *)(result + 8) = 0;
      break;
    case 5:
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = result + 16;
      break;
    case 7:
      *(_DWORD *)(result + 8) = 23;
      break;
    default:
      return result;
  }
  return result;
}

{
  *(_DWORD *)result = a2;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      goto LABEL_3;
    case 2:
    case 4:
      *(_QWORD *)(result + 16) = 0;
LABEL_3:
      *(_QWORD *)(result + 8) = 0;
      break;
    case 5:
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = result + 16;
      break;
    case 7:
      *(_DWORD *)(result + 8) = 23;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t this, int a2)
{
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)this = (unint64_t)a2 >> 63;
  return this;
}

{
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)this = (unint64_t)a2 >> 63;
  return this;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  void *v5;

  *(_DWORD *)a1 = 2;
  v3 = (WTF *)*(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = (_DWORD)v3;
  if ((_DWORD)v3)
  {
    v5 = (void *)WTF::fastMalloc(v3);
    *(_DWORD *)(a1 + 16) = (_DWORD)v3;
    *(_QWORD *)(a1 + 8) = v5;
    memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  return a1;
}

{
  WTF *v3;
  void *v5;

  *(_DWORD *)a1 = 2;
  v3 = (WTF *)*(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = (_DWORD)v3;
  if ((_DWORD)v3)
  {
    v5 = (void *)WTF::fastMalloc(v3);
    *(_DWORD *)(a1 + 16) = (_DWORD)v3;
    *(_QWORD *)(a1 + 8) = v5;
    memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  return a1;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  WTF *v6;
  WTF *v7;
  char *v8;
  _BYTE *v9;
  char v10;
  char v11;
  char *v12;

  *(_DWORD *)a1 = 2;
  v2 = (_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v12 = &v11;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_2[v3])(&v12);
    v7 = v6;
    *v2 = 0;
    v2[1] = 0;
    *(_DWORD *)(a1 + 20) = (_DWORD)v6;
    if (!v6)
      return a1;
    if (!((unint64_t)v6 >> 32))
    {
      v8 = (char *)result;
      v9 = (_BYTE *)WTF::fastMalloc(v6);
      *(_DWORD *)(a1 + 16) = (_DWORD)v7;
      *(_QWORD *)(a1 + 8) = v9;
      do
      {
        v10 = *v8++;
        *v9++ = v10;
        v7 = (WTF *)((char *)v7 - 1);
      }
      while (v7);
      return a1;
    }
  }
  __break(0xC471u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  WTF *v6;
  WTF *v7;
  char *v8;
  _BYTE *v9;
  char v10;
  char v11;
  char *v12;

  *(_DWORD *)a1 = 2;
  v2 = (_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v12 = &v11;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_2[v3])(&v12);
    v7 = v6;
    *v2 = 0;
    v2[1] = 0;
    *(_DWORD *)(a1 + 20) = (_DWORD)v6;
    if (!v6)
      return a1;
    if (!((unint64_t)v6 >> 32))
    {
      v8 = (char *)result;
      v9 = (_BYTE *)WTF::fastMalloc(v6);
      *(_DWORD *)(a1 + 16) = (_DWORD)v7;
      *(_QWORD *)(a1 + 8) = v9;
      do
      {
        v10 = *v8++;
        *v9++ = v10;
        v7 = (WTF *)((char *)v7 - 1);
      }
      while (v7);
      return a1;
    }
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)a1 = 4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195572890);
    }
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = v5;
      v7 = 0;
      v8 = 0;
      do
      {
        cbor::CBORValue::clone(&v18, (cbor::CBORValue *)(*(_QWORD *)a2 + v7));
        v10 = v18;
        *(_DWORD *)(v6 + v7) = v18;
        switch(v10)
        {
          case 0:
          case 1:
            *(_QWORD *)(v6 + v7 + 8) = v19;
            break;
          case 2:
          case 4:
            v11 = v6 + v7;
            *(_QWORD *)(v11 + 16) = 0;
            v12 = v19;
            v19 = 0;
            *(_QWORD *)(v11 + 8) = v12;
            LODWORD(v12) = v20;
            LODWORD(v20) = 0;
            *(_DWORD *)(v11 + 16) = (_DWORD)v12;
            LODWORD(v12) = HIDWORD(v20);
            HIDWORD(v20) = 0;
            *(_DWORD *)(v11 + 20) = (_DWORD)v12;
            break;
          case 3:
            v13 = v6 + v7;
            v15 = (uint64_t)v19;
            v19 = 0;
            goto LABEL_12;
          case 5:
            v13 = v6 + v7;
            *(_QWORD *)(v13 + 8) = v19;
            v14 = v20;
            *(_QWORD *)(v6 + v7 + 16) = v20;
            v15 = v6 + v7 + 16;
            v16 = v21;
            *(_QWORD *)(v13 + 24) = v21;
            if (v16)
            {
              *(_QWORD *)(v14 + 16) = v15;
              v19 = &v20;
              v20 = 0;
              v21 = 0;
            }
            else
            {
LABEL_12:
              *(_QWORD *)(v13 + 8) = v15;
            }
            break;
          case 7:
            *(_DWORD *)(v6 + v7 + 8) = (_DWORD)v19;
            break;
          default:
            break;
        }
        *(_DWORD *)(a1 + 20) = ++v8;
        cbor::CBORValue::internalCleanup((uint64_t)&v18, v9);
        v7 += 32;
      }
      while (v8 < *(unsigned int *)(a2 + 12));
    }
  }
  return a1;
}

cbor::CBORValue *cbor::CBORValue::CBORValue(cbor::CBORValue *this, const char *a2)
{
  uint64_t v4;

  WTF::String::String((WTF::String *)&v4, a2);
  *(_DWORD *)this = 3;
  *((_QWORD *)this + 1) = v4;
  return this;
}

{
  uint64_t v4;

  WTF::String::String((WTF::String *)&v4, a2);
  *(_DWORD *)this = 3;
  *((_QWORD *)this + 1) = v4;
  return this;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  if (a3)
  {
    if (a3 == 1)
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v6;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

{
  uint64_t v4;
  uint64_t v6;

  if (a3)
  {
    if (a3 == 1)
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v6;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t this, const WTF::String *a2)
{
  _DWORD *v2;

  *(_DWORD *)this = 3;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 8) = v2;
  return this;
}

{
  _DWORD *v2;

  *(_DWORD *)this = 3;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 8) = v2;
  return this;
}

uint64_t cbor::CBORValue::CBORValue(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  _QWORD *v21;
  _QWORD *v22;
  WTF *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27[4];
  uint64_t v28;
  WTF::StringImpl *v29;
  _QWORD *v30;

  *(_DWORD *)a1 = 5;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = a1 + 16;
  v4 = (_QWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      cbor::CBORValue::clone(&v28, v6 + 4);
      cbor::CBORValue::clone(v27, v6 + 8);
      v9 = *v3;
      if (*v4 == v3)
      {
        v12 = v3;
        goto LABEL_15;
      }
      v10 = (_QWORD *)*v3;
      v11 = v3;
      if (v9)
      {
        do
        {
          v12 = v10;
          v10 = (_QWORD *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v11[2];
          v13 = *v12 == (_QWORD)v11;
          v11 = v12;
        }
        while (v13);
      }
      v14 = *((_DWORD *)v12 + 8);
      v15 = v14 < (int)v28;
      if (v14 != (_DWORD)v28)
        goto LABEL_12;
      if (v14 == 3)
      {
        v23 = (WTF *)v12[5];
        if (v23)
          v24 = *((_DWORD *)v23 + 1);
        else
          v24 = 0;
        v7 = v29;
        if (v29)
          v25 = *((_DWORD *)v29 + 1);
        else
          v25 = 0;
        if (v24 == v25)
        {
          if ((WTF::codePointCompare(v23, v29, v8) & 0x80000000) != 0)
          {
            v9 = *v3;
LABEL_15:
            if (v9)
            {
              v30 = v12;
              v16 = v12 + 1;
            }
            else
            {
              v30 = v3;
              v16 = v3;
            }
            goto LABEL_18;
          }
        }
        else if (v24 < v25)
        {
          goto LABEL_15;
        }
      }
      else
      {
        if (v14 != 1)
        {
          if (v14)
            goto LABEL_13;
          v15 = v12[5] < (uint64_t)v29;
LABEL_12:
          if (v15)
            goto LABEL_15;
          goto LABEL_13;
        }
        if (v12[5] > (uint64_t)v29)
          goto LABEL_15;
      }
LABEL_13:
      v16 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)v4, (uint64_t)&v30, (cbor::CBORValue *)&v28);
LABEL_18:
      if (!*v16)
      {
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
        std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v17 + 4), (int *)&v28, (int *)v27);
        v18 = v30;
        *v17 = 0;
        v17[1] = 0;
        v17[2] = v18;
        *v16 = v17;
        v19 = (_QWORD *)**v4;
        if (v19)
        {
          *v4 = v19;
          v17 = (_QWORD *)*v16;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(a1 + 16), (uint64_t)v17);
        ++*(_QWORD *)(a1 + 24);
      }
      cbor::CBORValue::internalCleanup((uint64_t)v27, v7);
      cbor::CBORValue::internalCleanup((uint64_t)&v28, v20);
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v6[2];
          v13 = *v22 == (_QWORD)v6;
          v6 = v22;
        }
        while (!v13);
      }
      v6 = v22;
    }
    while (v22 != v5);
  }
  return a1;
}

uint64_t *cbor::CBORValue::clone@<X0>(uint64_t *__return_ptr a1@<X8>, uint64_t *this@<X0>)
{
  uint64_t *v3;
  unint64_t v4;
  WTF *v5;
  void *v6;
  _DWORD *v7;
  int v8;

  v3 = this;
  switch(*(_DWORD *)this)
  {
    case 0:
    case 1:
      v4 = this[1];
      a1[1] = v4;
      *(_DWORD *)a1 = v4 >> 63;
      break;
    case 2:
      *(_DWORD *)a1 = 2;
      v5 = (WTF *)*((unsigned int *)this + 5);
      a1[1] = 0;
      a1[2] = 0;
      *((_DWORD *)a1 + 5) = (_DWORD)v5;
      if ((_DWORD)v5)
      {
        v6 = (void *)WTF::fastMalloc(v5);
        *((_DWORD *)a1 + 4) = (_DWORD)v5;
        a1[1] = (uint64_t)v6;
        this = (uint64_t *)memcpy(v6, (const void *)v3[1], *((unsigned int *)v3 + 5));
      }
      break;
    case 3:
      *(_DWORD *)a1 = 3;
      v7 = (_DWORD *)this[1];
      if (v7)
        *v7 += 2;
      a1[1] = (uint64_t)v7;
      break;
    case 4:
      this = (uint64_t *)cbor::CBORValue::CBORValue((uint64_t)a1, (uint64_t)(this + 1));
      break;
    case 5:
      this = (uint64_t *)cbor::CBORValue::CBORValue(a1, this + 1);
      break;
    case 7:
      v8 = *((_DWORD *)this + 2);
      *(_DWORD *)a1 = 7;
      *((_DWORD *)a1 + 2) = v8;
      break;
    default:
      *(_DWORD *)a1 = -1;
      break;
  }
  return this;
}

_DWORD *cbor::CBORValue::CBORValue(_DWORD *this, int a2)
{
  int v2;

  *this = 7;
  if (a2)
    v2 = 21;
  else
    v2 = 20;
  this[2] = v2;
  return this;
}

{
  int v2;

  *this = 7;
  if (a2)
    v2 = 21;
  else
    v2 = 20;
  this[2] = v2;
  return this;
}

uint64_t cbor::CBORValue::operator=(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  cbor::CBORValue::internalCleanup(a1, (WTF::StringImpl *)a2);
  v4 = *a2;
  *(_DWORD *)a1 = *a2;
  switch(v4)
  {
    case 0:
    case 1:
      v5 = *((_QWORD *)a2 + 1);
      goto LABEL_5;
    case 2:
    case 4:
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v6 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v6;
      LODWORD(v6) = a2[4];
      a2[4] = 0;
      *(_DWORD *)(a1 + 16) = v6;
      LODWORD(v6) = a2[5];
      a2[5] = 0;
      *(_DWORD *)(a1 + 20) = v6;
      break;
    case 3:
      v5 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
LABEL_5:
      *(_QWORD *)(a1 + 8) = v5;
      break;
    case 5:
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      v7 = a2 + 4;
      v8 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 16) = v8;
      v9 = a1 + 16;
      v10 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v10;
      if (v10)
      {
        *(_QWORD *)(v8 + 16) = v9;
        *((_QWORD *)a2 + 1) = v7;
        *v7 = 0;
        *((_QWORD *)a2 + 3) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = v9;
      }
      break;
    case 7:
      *(_DWORD *)(a1 + 8) = a2[2];
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t cbor::CBORValue::internalCleanup(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  cbor::CBORValue *v4;
  uint64_t v5;

  v2 = this;
  switch(*(_DWORD *)this)
  {
    case 2:
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        goto LABEL_13;
      }
      break;
    case 3:
      this = *(_QWORD *)(this + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      break;
    case 4:
      v3 = *(unsigned int *)(this + 20);
      v4 = *(cbor::CBORValue **)(this + 8);
      if ((_DWORD)v3)
      {
        v5 = 32 * v3;
        do
        {
          this = cbor::CBORValue::internalCleanup(v4);
          v4 = (cbor::CBORValue *)((char *)v4 + 32);
          v5 -= 32;
        }
        while (v5);
        v4 = *(cbor::CBORValue **)(v2 + 8);
      }
      if (v4)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        this = (uint64_t)v4;
LABEL_13:
        this = WTF::fastFree((WTF *)this, a2);
      }
      break;
    case 5:
      this = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(this + 8, *(WTF **)(this + 16));
      break;
    default:
      break;
  }
  *(_DWORD *)v2 = -1;
  return this;
}

uint64_t cbor::CBORValue::getInteger(cbor::CBORValue *this)
{
  return (uint64_t)this + 8;
}

uint64_t cbor::CBORValue::getUnsigned(cbor::CBORValue *this)
{
  return (uint64_t)this + 8;
}

uint64_t cbor::CBORValue::getNegative(cbor::CBORValue *this)
{
  return (uint64_t)this + 8;
}

uint64_t cbor::CBORValue::getString(cbor::CBORValue *this)
{
  return (uint64_t)this + 8;
}

uint64_t cbor::CBORValue::getByteString(cbor::CBORValue *this)
{
  return (uint64_t)this + 8;
}

uint64_t cbor::CBORValue::getArray(cbor::CBORValue *this)
{
  return (uint64_t)this + 8;
}

uint64_t cbor::CBORValue::getMap(cbor::CBORValue *this)
{
  return (uint64_t)this + 8;
}

uint64_t cbor::CBORValue::getSimpleValue(cbor::CBORValue *this)
{
  return *((unsigned int *)this + 2);
}

BOOL cbor::CBORValue::getBool(cbor::CBORValue *this)
{
  return *((_DWORD *)this + 2) == 21;
}

WTF *cbor::CBORWriter::write@<X0>(cbor::CBORWriter *this@<X0>, const cbor::CBORValue *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  void *v5;
  WTF **v6;
  WTF *v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = &v7;
  result = (WTF *)cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)&v6, this, (int)a2);
  if ((_DWORD)result)
  {
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    result = v7;
    *(_BYTE *)(a3 + 16) = 0;
    if (result)
    {
      v7 = 0;
      LODWORD(v8) = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

uint64_t cbor::CBORWriter::encodeCBOR(cbor::CBORWriter *this, const cbor::CBORValue *a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const cbor::CBORValue *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const cbor::CBORValue *v23;
  const cbor::CBORValue *v24;
  const cbor::CBORValue *v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  const void *v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  WTF *v43;
  size_t v44;
  uint64_t v45;
  size_t v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  WTF *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  char *v66;
  WTF *v67;
  char v68;

  if (a3 < 0)
    return 0;
  result = 0;
  switch(*(_DWORD *)a2)
  {
    case 0xFFFFFFFF:
      v7 = *(_QWORD *)this;
      LOBYTE(v67) = 64;
      v8 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
        *(_BYTE *)(*(_QWORD *)v7 + *(unsigned int *)(v7 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v7, (WTF *)(v8 + 1), (unint64_t)&v67);
      else
        *(_BYTE *)(*(_QWORD *)v7 + v8) = 64;
      ++*(_DWORD *)(v7 + 12);
      if (!*(_DWORD *)(*(_QWORD *)this + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x195572FFCLL);
      }
      goto LABEL_52;
    case 0:
      v17 = *((_QWORD *)a2 + 1);
      v18 = *(_QWORD *)this;
      LOBYTE(v67) = 0;
      v19 = *(unsigned int *)(v18 + 12);
      if ((_DWORD)v19 != *(_DWORD *)(v18 + 8))
      {
        *(_BYTE *)(*(_QWORD *)v18 + v19) = 0;
        goto LABEL_33;
      }
      v62 = (WTF *)(v19 + 1);
      goto LABEL_81;
    case 1:
      v17 = ~*((_QWORD *)a2 + 1);
      v18 = *(_QWORD *)this;
      v27 = 32;
      goto LABEL_31;
    case 2:
      v29 = *((unsigned int *)a2 + 5);
      v30 = *(_QWORD *)this;
      LOBYTE(v67) = 64;
      v31 = *(unsigned int *)(v30 + 12);
      if ((_DWORD)v31 == *(_DWORD *)(v30 + 8))
        *(_BYTE *)(*(_QWORD *)v30 + *(unsigned int *)(v30 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v30, (WTF *)(v31 + 1), (unint64_t)&v67);
      else
        *(_BYTE *)(*(_QWORD *)v30 + v31) = 64;
      ++*(_DWORD *)(v30 + 12);
      cbor::CBORWriter::setUint((uint64_t)this, v29);
      v32 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)this;
        v34 = (const void *)*((_QWORD *)a2 + 1);
        v35 = *(unsigned int *)(v33 + 8);
        v36 = *(unsigned int *)(v33 + 12);
        v37 = v36 + v32;
        if (v36 + v32 > v35)
        {
          v50 = v35 + (v35 >> 2);
          if (v50 >= 0x10)
            v51 = v50 + 1;
          else
            v51 = 16;
          if (v51 <= v37)
            v52 = v36 + v32;
          else
            v52 = v51;
          if (HIDWORD(v52))
          {
            __break(0xC471u);
            JUMPOUT(0x1955734F8);
          }
          v53 = *(void **)v33;
          v54 = (void *)WTF::fastMalloc((WTF *)v52);
          *(_DWORD *)(v33 + 8) = v52;
          *(_QWORD *)v33 = v54;
          memcpy(v54, v53, v36);
          if (v53)
          {
            if (*(void **)v33 == v53)
            {
              *(_QWORD *)v33 = 0;
              *(_DWORD *)(v33 + 8) = 0;
            }
            WTF::fastFree((WTF *)v53, v55);
          }
        }
        v38 = *(unsigned int *)(v33 + 12);
        if (v37 < v38)
        {
          __break(0xC471u);
          JUMPOUT(0x1955734E0);
        }
        memcpy((void *)(*(_QWORD *)v33 + v38), v34, v32);
        *(_DWORD *)(v33 + 12) = v37;
      }
      goto LABEL_52;
    case 3:
      WTF::String::utf8();
      if (v67)
        v39 = *((_QWORD *)v67 + 1);
      else
        v39 = 0;
      v40 = *(_QWORD *)this;
      v68 = 96;
      v41 = *(unsigned int *)(v40 + 12);
      if ((_DWORD)v41 == *(_DWORD *)(v40 + 8))
        *(_BYTE *)(*(_QWORD *)v40 + *(unsigned int *)(v40 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v40, (WTF *)(v41 + 1), (unint64_t)&v68);
      else
        *(_BYTE *)(*(_QWORD *)v40 + v41) = 96;
      ++*(_DWORD *)(v40 + 12);
      cbor::CBORWriter::setUint((uint64_t)this, v39);
      v43 = v67;
      if (!v67)
        goto LABEL_52;
      v44 = *((_QWORD *)v67 + 1);
      if (!v44)
      {
        v67 = 0;
LABEL_50:
        if (*(_DWORD *)v43 == 1)
          WTF::fastFree(v43, v42);
        else
          --*(_DWORD *)v43;
        goto LABEL_52;
      }
      v45 = *(_QWORD *)this;
      v46 = *(unsigned int *)(*(_QWORD *)this + 8);
      v47 = *(unsigned int *)(*(_QWORD *)this + 12);
      v48 = v44 + v47;
      if (v44 + v47 > v46)
      {
        v56 = v46 + (v46 >> 2);
        if (v56 >= 0x10)
          v57 = v56 + 1;
        else
          v57 = 16;
        if (v57 <= v48)
          v58 = v44 + v47;
        else
          v58 = v57;
        if (HIDWORD(v58))
        {
          __break(0xC471u);
          JUMPOUT(0x195573500);
        }
        v59 = *(void **)v45;
        v60 = (void *)WTF::fastMalloc((WTF *)v58);
        *(_DWORD *)(v45 + 8) = v58;
        *(_QWORD *)v45 = v60;
        memcpy(v60, v59, v47);
        if (v59)
        {
          if (*(void **)v45 == v59)
          {
            *(_QWORD *)v45 = 0;
            *(_DWORD *)(v45 + 8) = 0;
          }
          WTF::fastFree((WTF *)v59, v61);
        }
      }
      v49 = *(unsigned int *)(v45 + 12);
      if (v48 < v49)
      {
        __break(0xC471u);
        JUMPOUT(0x1955734F0);
      }
      memcpy((void *)(*(_QWORD *)v45 + v49), (char *)v43 + 16, v44);
      *(_DWORD *)(v45 + 12) = v48;
      v43 = v67;
      v67 = 0;
      if (v43)
        goto LABEL_50;
LABEL_52:
      result = 1;
      break;
    case 4:
      v9 = *((unsigned int *)a2 + 5);
      v10 = *(_QWORD *)this;
      LOBYTE(v67) = 0x80;
      v11 = *(unsigned int *)(v10 + 12);
      if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
      {
        v63 = v9;
        v64 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v10, (WTF *)(v11 + 1), (unint64_t)&v67);
        v9 = v63;
        *(_BYTE *)(*(_QWORD *)v10 + *(unsigned int *)(v10 + 12)) = *v64;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v10 + v11) = 0x80;
      }
      ++*(_DWORD *)(v10 + 12);
      cbor::CBORWriter::setUint((uint64_t)this, v9);
      v12 = *((unsigned int *)a2 + 5);
      if (!(_DWORD)v12)
        goto LABEL_52;
      v13 = (const cbor::CBORValue *)*((_QWORD *)a2 + 1);
      v14 = a3 - 1;
      v15 = 32 * v12 - 32;
      do
      {
        result = cbor::CBORWriter::encodeCBOR(this, v13, v14);
        if (!(_DWORD)result)
          break;
        v13 = (const cbor::CBORValue *)((char *)v13 + 32);
        v16 = v15;
        v15 -= 32;
      }
      while (v16);
      return result;
    case 5:
      v20 = *((_QWORD *)a2 + 3);
      v21 = *(_QWORD *)this;
      LOBYTE(v67) = -96;
      v22 = *(unsigned int *)(v21 + 12);
      if ((_DWORD)v22 == *(_DWORD *)(v21 + 8))
      {
        v65 = v20;
        v66 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v21, (WTF *)(v22 + 1), (unint64_t)&v67);
        v20 = v65;
        *(_BYTE *)(*(_QWORD *)v21 + *(unsigned int *)(v21 + 12)) = *v66;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v21 + v22) = -96;
      }
      ++*(_DWORD *)(v21 + 12);
      cbor::CBORWriter::setUint((uint64_t)this, v20);
      v23 = (const cbor::CBORValue *)*((_QWORD *)a2 + 1);
      if (v23 == (const cbor::CBORValue *)((char *)a2 + 16))
        goto LABEL_52;
      do
      {
        result = cbor::CBORWriter::encodeCBOR(this, (const cbor::CBORValue *)((char *)v23 + 32), a3 - 1);
        if (!(_DWORD)result)
          break;
        result = cbor::CBORWriter::encodeCBOR(this, (const cbor::CBORValue *)((char *)v23 + 64), a3 - 1);
        if (!(_DWORD)result)
          break;
        v24 = (const cbor::CBORValue *)*((_QWORD *)v23 + 1);
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = *(const cbor::CBORValue **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (const cbor::CBORValue *)*((_QWORD *)v23 + 2);
            v26 = *(_QWORD *)v25 == (_QWORD)v23;
            v23 = v25;
          }
          while (!v26);
        }
        result = 1;
        v23 = v25;
      }
      while (v25 != (const cbor::CBORValue *)((char *)a2 + 16));
      return result;
    case 7:
      v17 = *((int *)a2 + 2);
      v18 = *(_QWORD *)this;
      v27 = -32;
LABEL_31:
      LOBYTE(v67) = v27;
      v28 = *(unsigned int *)(v18 + 12);
      if ((_DWORD)v28 == *(_DWORD *)(v18 + 8))
      {
        v62 = (WTF *)(v28 + 1);
LABEL_81:
        *(_BYTE *)(*(_QWORD *)v18 + *(unsigned int *)(v18 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, v62, (unint64_t)&v67);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v18 + v28) = v27;
      }
LABEL_33:
      ++*(_DWORD *)(v18 + 12);
      cbor::CBORWriter::setUint((uint64_t)this, v17);
      goto LABEL_52;
    default:
      return result;
  }
  return result;
}

uint64_t cbor::CBORWriter::setUint(uint64_t this, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE *v19;

  v3 = this;
  if (a2 >= 0x18)
  {
    if (a2 >= 0x100)
    {
      if (a2 >= 0x10000)
      {
        v4 = *(_QWORD **)this;
        v5 = *(_DWORD *)(*(_QWORD *)this + 12);
        if (HIDWORD(a2))
        {
          if (!v5)
          {
LABEL_38:
            __break(0xC471u);
            JUMPOUT(0x1955736D0);
          }
          v7 = 27;
          v6 = 7;
        }
        else
        {
          if (!v5)
          {
            __break(0xC471u);
            JUMPOUT(0x1955736F0);
          }
          v7 = 26;
          v6 = 3;
        }
      }
      else
      {
        v4 = *(_QWORD **)this;
        v5 = *(_DWORD *)(*(_QWORD *)this + 12);
        if (!v5)
        {
          __break(0xC471u);
          JUMPOUT(0x1955736E8);
        }
        v7 = 25;
        v6 = 1;
      }
    }
    else
    {
      v4 = *(_QWORD **)this;
      v5 = *(_DWORD *)(*(_QWORD *)this + 12);
      if (!v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1955736E0);
      }
      v6 = 0;
      v7 = 24;
    }
    *(_BYTE *)(*v4 + v5 - 1) |= v7;
    v9 = v6 + 1;
    for (i = 8 * v6; ; i -= 8)
    {
      v11 = *(_QWORD *)v3;
      v12 = *(unsigned int *)(*(_QWORD *)v3 + 12);
      if ((_DWORD)v12 == *(_DWORD *)(*(_QWORD *)v3 + 8))
      {
        v13 = v12 + (v12 >> 2);
        if (v13 >= 0x10)
          v14 = v13 + 1;
        else
          v14 = 16;
        if (v14 <= v12 + 1)
          v15 = v12 + 1;
        else
          v15 = v14;
        if (HIDWORD(v15))
          goto LABEL_38;
        v16 = *(void **)v11;
        v17 = (void *)WTF::fastMalloc((WTF *)v15);
        *(_DWORD *)(v11 + 8) = v15;
        *(_QWORD *)v11 = v17;
        this = (uint64_t)memcpy(v17, v16, v12);
        if (v16)
        {
          if (*(void **)v11 == v16)
          {
            *(_QWORD *)v11 = 0;
            *(_DWORD *)(v11 + 8) = 0;
          }
          this = WTF::fastFree((WTF *)v16, v18);
        }
        v19 = (_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12));
      }
      else
      {
        v19 = (_BYTE *)(*(_QWORD *)v11 + v12);
      }
      *v19 = a2 >> (i & 0xF8);
      ++*(_DWORD *)(v11 + 12);
      if (v9-- <= 1)
        return this;
    }
  }
  v8 = *(unsigned int *)(*(_QWORD *)this + 12);
  if (!(_DWORD)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1955736D8);
  }
  *(_BYTE *)(v8 + **(_QWORD **)this - 1) |= a2;
  return this;
}

uint64_t fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse(uint64_t result, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)result = *a2;
  v3 = a2 + 1;
  v4 = a2[1];
  *(_QWORD *)(result + 8) = v4;
  v5 = result + 8;
  v6 = a2[2];
  *(_QWORD *)(result + 16) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *a2 = v3;
    *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)result = v5;
  }
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 36) = v7;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_WORD *)(result + 96) = 256;
  *(_DWORD *)(result + 100) = 2;
  *(_BYTE *)(result + 104) = 1;
  *(_DWORD *)(result + 108) = 2;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 140) = 0;
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)result = *a2;
  v3 = a2 + 1;
  v4 = a2[1];
  *(_QWORD *)(result + 8) = v4;
  v5 = result + 8;
  v6 = a2[2];
  *(_QWORD *)(result + 16) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *a2 = v3;
    *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)result = v5;
  }
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 36) = v7;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_WORD *)(result + 96) = 256;
  *(_DWORD *)(result + 100) = 2;
  *(_BYTE *)(result + 104) = 1;
  *(_DWORD *)(result + 108) = 2;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 140) = 0;
  return result;
}

uint64_t fido::AuthenticatorGetInfoResponse::setMaxMsgSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  *(_BYTE *)(this + 44) = 1;
  return this;
}

uint64_t fido::AuthenticatorGetInfoResponse::setPinProtocols(uint64_t a1, _DWORD *a2)
{
  WTF **v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (WTF **)(a1 + 48);
  if (*(_BYTE *)(a1 + 64))
  {
    v5 = *v4;
    if (*v4)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v5, a2);
    }
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a1 + 48) = v6;
    LODWORD(v6) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 56) = v6;
    LODWORD(v6) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 60) = v6;
  }
  else
  {
    *v4 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a1 + 48) = v7;
    LODWORD(v7) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 56) = v7;
    LODWORD(v7) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 60) = v7;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

uint64_t fido::AuthenticatorGetInfoResponse::setExtensions(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v4 = (WTF::StringImpl ***)(a1 + 72);
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v5)
    {
      v10 = *v4;
      v11 = 8 * v5;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    v6 = (WTF *)*v4;
    if (*v4)
    {
      *(_QWORD *)(a1 + 72) = 0;
      *(_DWORD *)(a1 + 80) = 0;
      WTF::fastFree(v6, a2);
    }
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a1 + 72) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 80) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 84) = v7;
  }
  else
  {
    *v4 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a1 + 72) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 80) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 84) = v8;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

__n128 fido::AuthenticatorGetInfoResponse::setOptions(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[6] = *a2;
  return result;
}

uint64_t fido::AuthenticatorGetInfoResponse::setTransports(uint64_t a1, _DWORD *a2)
{
  WTF **v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (WTF **)(a1 + 112);
  if (*(_BYTE *)(a1 + 128))
  {
    v5 = *v4;
    if (*v4)
    {
      *(_QWORD *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 120) = 0;
      WTF::fastFree(v5, a2);
    }
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a1 + 112) = v6;
    LODWORD(v6) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 120) = v6;
    LODWORD(v6) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 124) = v6;
  }
  else
  {
    *v4 = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a1 + 112) = v7;
    LODWORD(v7) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 120) = v7;
    LODWORD(v7) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 124) = v7;
    *(_BYTE *)(a1 + 128) = 1;
  }
  return a1;
}

uint64_t fido::AuthenticatorGetInfoResponse::setRemainingDiscoverableCredentials(uint64_t this, int a2)
{
  *(_DWORD *)(this + 136) = a2;
  *(_BYTE *)(this + 140) = 1;
  return this;
}

uint64_t fido::encodeAsCBOR@<X0>(fido **this@<X0>, uint64_t a2@<X8>)
{
  fido *v3;
  fido **v4;
  WTF *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  fido *v17;
  fido **v18;
  BOOL v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  fido *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  fido *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF *v43;
  void *v44;
  _QWORD *v45;
  WTF::StringImpl *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  _QWORD *v51;
  WTF::StringImpl *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  WTF::StringImpl *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  WTF::StringImpl *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  WTF *v80;
  uint64_t i;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  WTF::StringImpl *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  void *v95;
  _QWORD *v96;
  WTF::StringImpl *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  char v102;
  void *v103;
  WTF *v104;
  size_t v105;
  void *v106;
  void *v107;
  uint64_t v109;
  WTF::StringImpl **v110;
  WTF::StringImpl *v111;
  fido **v114;
  _QWORD v115[2];
  int v116;
  int v117;
  WTF *v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  WTF **v122;
  WTF *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[3];

  v123 = 0;
  v124 = 0;
  v122 = &v123;
  v4 = this + 1;
  v3 = *this;
  if (*this != (fido *)(this + 1))
  {
    v5 = 0;
    LODWORD(v6) = 0;
    v7 = 0;
    v114 = this + 1;
    while (1)
    {
      if (v7 == (_DWORD)v6)
      {
        v8 = v6;
        v9 = ((unint64_t)v6 >> 2) + v6;
        if (v9 >= 0x10)
          v10 = v9 + 1;
        else
          v10 = 16;
        if (v10 <= (unint64_t)v6 + 1)
          v6 = v6 + 1;
        else
          v6 = v10;
        if (v6 >> 27)
          goto LABEL_122;
        v11 = WTF::fastMalloc((WTF *)(32 * v6));
        WTF::VectorMover<false,cbor::CBORValue>::move((uint64_t)v5, (WTF *)((char *)v5 + 32 * v8), v11);
        if (v5)
        {
          if ((WTF *)v11 == v5)
          {
            v11 = 0;
            LODWORD(v6) = 0;
          }
          WTF::fastFree(v5, v12);
        }
        v5 = (WTF *)v11;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v13 = v125;
        v14 = v11 + 32 * v8;
        *(_DWORD *)v14 = 3;
        *(_QWORD *)(v14 + 8) = v13;
        v4 = v114;
      }
      else
      {
        v15 = (char *)v5 + 32 * v7;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v16 = v125;
        *(_DWORD *)v15 = 3;
        *((_QWORD *)v15 + 1) = v16;
      }
      v17 = (fido *)*((_QWORD *)v3 + 1);
      if (v17)
      {
        do
        {
          v18 = (fido **)v17;
          v17 = *(fido **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (fido **)*((_QWORD *)v3 + 2);
          v19 = *v18 == v3;
          v3 = (fido *)v18;
        }
        while (!v19);
      }
      ++v7;
      v3 = (fido *)v18;
      if (v18 == v4)
        goto LABEL_25;
    }
  }
  v7 = 0;
  LODWORD(v6) = 0;
  v5 = 0;
LABEL_25:
  v126 = 1;
  LODWORD(v125) = 0;
  LODWORD(v118) = 4;
  v119 = (uint64_t)v5;
  v120 = v6;
  v121 = v7;
  v20 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v122, (uint64_t)v115, (cbor::CBORValue *)&v125);
  v22 = (fido *)this;
  if (!*v20)
  {
    v23 = v20;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v24 + 4), (int *)&v125, (int *)&v118);
    v25 = v115[0];
    *v24 = 0;
    v24[1] = 0;
    v24[2] = v25;
    *v23 = v24;
    if (*v122)
    {
      v122 = (WTF **)*v122;
      v24 = (_QWORD *)*v23;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v123, (uint64_t)v24);
    ++v124;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v118, v21);
  cbor::CBORValue::internalCleanup((uint64_t)&v125, v26);
  if (*((_BYTE *)this + 88))
  {
    v119 = 2;
    LODWORD(v118) = 0;
    v27 = *((unsigned int *)this + 21);
    if ((_DWORD)v27)
    {
      if (v27 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1955744DCLL);
      }
      v29 = WTF::fastMalloc((WTF *)(32 * v27));
      v30 = *((unsigned int *)this + 21);
      if ((_DWORD)v30)
      {
        v31 = 0;
        v32 = 0;
        v33 = this[9];
        v34 = 32 * v30;
        do
        {
          LODWORD(v125) = 3;
          v35 = (_DWORD *)*((_QWORD *)v33 + v32);
          if (v35)
            *v35 += 2;
          v36 = v29 + v31;
          *(_DWORD *)v36 = 3;
          v126 = 0;
          *(_QWORD *)(v36 + 8) = v35;
          ++v32;
          cbor::CBORValue::internalCleanup((uint64_t)&v125, v28);
          v31 += 32;
        }
        while (v34 != v31);
        v22 = (fido *)this;
      }
      else
      {
        LODWORD(v32) = 0;
      }
    }
    else
    {
      LODWORD(v32) = 0;
      v29 = 0;
    }
    LODWORD(v125) = 4;
    v126 = v29;
    v127[0] = __PAIR64__(v32, v27);
    v37 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v122, (uint64_t)v115, (cbor::CBORValue *)&v118);
    if (!*v37)
    {
      v39 = v37;
      v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
      std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v40 + 4), (int *)&v118, (int *)&v125);
      v41 = v115[0];
      *v40 = 0;
      v40[1] = 0;
      v40[2] = v41;
      *v39 = v40;
      if (*v122)
      {
        v122 = (WTF **)*v122;
        v40 = (_QWORD *)*v39;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v123, (uint64_t)v40);
      ++v124;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v125, v38);
    cbor::CBORValue::internalCleanup((uint64_t)&v118, v42);
  }
  v126 = 3;
  LODWORD(v125) = 0;
  LODWORD(v118) = 2;
  v43 = (WTF *)*((unsigned int *)v22 + 9);
  v119 = 0;
  v120 = 0;
  v121 = v43;
  if ((_DWORD)v43)
  {
    v44 = (void *)WTF::fastMalloc(v43);
    v120 = (int)v43;
    v119 = (uint64_t)v44;
    memcpy(v44, *((const void **)v22 + 3), *((unsigned int *)v22 + 9));
  }
  v45 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v122, (uint64_t)v115, (cbor::CBORValue *)&v125);
  if (!*v45)
  {
    v47 = v45;
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v48 + 4), (int *)&v125, (int *)&v118);
    v49 = v115[0];
    *v48 = 0;
    v48[1] = 0;
    v48[2] = v49;
    *v47 = v48;
    if (*v122)
    {
      v122 = (WTF **)*v122;
      v48 = (_QWORD *)*v47;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v123, (uint64_t)v48);
    ++v124;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v118, v46);
  cbor::CBORValue::internalCleanup((uint64_t)&v125, v50);
  v126 = 4;
  LODWORD(v125) = 0;
  fido::convertToCBOR((fido *)((char *)v22 + 96), (uint64_t)&v118);
  v51 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v122, (uint64_t)v115, (cbor::CBORValue *)&v125);
  if (!*v51)
  {
    v53 = v51;
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v54 + 4), (int *)&v125, (int *)&v118);
    v55 = v115[0];
    *v54 = 0;
    v54[1] = 0;
    v54[2] = v55;
    *v53 = v54;
    if (*v122)
    {
      v122 = (WTF **)*v122;
      v54 = (_QWORD *)*v53;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v123, (uint64_t)v54);
    ++v124;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v118, v52);
  cbor::CBORValue::internalCleanup((uint64_t)&v125, v56);
  if (*((_BYTE *)v22 + 44))
  {
    v126 = 5;
    LODWORD(v125) = 0;
    v119 = *((unsigned int *)v22 + 10);
    LODWORD(v118) = 0;
    v57 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v122, (uint64_t)v115, (cbor::CBORValue *)&v125);
    if (!*v57)
    {
      v59 = v57;
      v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
      std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v60 + 4), (int *)&v125, (int *)&v118);
      v61 = v115[0];
      *v60 = 0;
      v60[1] = 0;
      v60[2] = v61;
      *v59 = v60;
      if (*v122)
      {
        v122 = (WTF **)*v122;
        v60 = (_QWORD *)*v59;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v123, (uint64_t)v60);
      ++v124;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v118, v58);
    cbor::CBORValue::internalCleanup((uint64_t)&v125, v62);
  }
  if (*((_BYTE *)v22 + 64))
  {
    v119 = 6;
    LODWORD(v118) = 0;
    v63 = *((unsigned int *)v22 + 15);
    if ((_DWORD)v63)
    {
      if (v63 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1955744E4);
      }
      v64 = WTF::fastMalloc((WTF *)(32 * v63));
      v66 = v64;
      v67 = *((unsigned int *)v22 + 15);
      if ((_DWORD)v67)
      {
        v68 = 0;
        v69 = *((_QWORD *)v22 + 6);
        v70 = (uint64_t *)(v64 + 8);
        do
        {
          v71 = *(unsigned __int8 *)(v69 + v68);
          v126 = v71;
          LODWORD(v125) = 0;
          *((_DWORD *)v70 - 2) = 0;
          *v70 = v71;
          v70 += 4;
          ++v68;
          cbor::CBORValue::internalCleanup((uint64_t)&v125, v65);
        }
        while (v67 != v68);
      }
      else
      {
        LODWORD(v68) = 0;
      }
    }
    else
    {
      LODWORD(v68) = 0;
      v66 = 0;
    }
    LODWORD(v125) = 4;
    v126 = v66;
    v127[0] = __PAIR64__(v68, v63);
    v72 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v122, (uint64_t)v115, (cbor::CBORValue *)&v118);
    if (!*v72)
    {
      v74 = v72;
      v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
      std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v75 + 4), (int *)&v118, (int *)&v125);
      v76 = v115[0];
      *v75 = 0;
      v75[1] = 0;
      v75[2] = v76;
      *v74 = v75;
      if (*v122)
      {
        v122 = (WTF **)*v122;
        v75 = (_QWORD *)*v74;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v123, (uint64_t)v75);
      ++v124;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v125, v73);
    cbor::CBORValue::internalCleanup((uint64_t)&v118, v77);
  }
  if (*((_BYTE *)v22 + 128))
  {
    v78 = *((unsigned int *)v22 + 31);
    if ((_DWORD)v78)
    {
      v79 = (unsigned __int8 *)WTF::fastMalloc((WTF *)*((unsigned int *)v22 + 31));
      memcpy(v79, *((const void **)v22 + 14), *((unsigned int *)v22 + 31));
      v119 = 7;
      LODWORD(v118) = 0;
      if (v78 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1955744ECLL);
      }
      v80 = (WTF *)WTF::fastMalloc((WTF *)(8 * v78));
      for (i = 0; i != v78; ++i)
      {
        WebCore::toString(v79[i], &v125);
        *((_QWORD *)v80 + i) = v125;
      }
      if (v78 >> 27)
      {
        __break(0xC471u);
        goto LABEL_127;
      }
      v83 = WTF::fastMalloc((WTF *)(32 * v78));
      v84 = 0;
      v85 = 0;
      do
      {
        LODWORD(v125) = 3;
        v86 = (_DWORD *)*((_QWORD *)v80 + v85);
        if (v86)
          *v86 += 2;
        v87 = v83 + v84;
        *(_DWORD *)v87 = 3;
        v126 = 0;
        *(_QWORD *)(v87 + 8) = v86;
        ++v85;
        cbor::CBORValue::internalCleanup((uint64_t)&v125, v82);
        v84 += 32;
      }
      while (32 * v78 != v84);
      v88 = v78;
      v22 = (fido *)this;
    }
    else
    {
      v88 = 0;
      v80 = 0;
      v79 = 0;
      LODWORD(v85) = 0;
      v83 = 0;
      v119 = 7;
      LODWORD(v118) = 0;
    }
    LODWORD(v115[0]) = 4;
    v115[1] = v83;
    v116 = v78;
    v117 = v85;
    v89 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v122, (uint64_t)&v125, (cbor::CBORValue *)&v118);
    if (!*v89)
    {
      v91 = v89;
      v92 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
      std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v92 + 4), (int *)&v118, (int *)v115);
      v93 = v125;
      *v92 = 0;
      v92[1] = 0;
      v92[2] = v93;
      *v91 = v92;
      if (*v122)
      {
        v122 = (WTF **)*v122;
        v92 = (_QWORD *)*v91;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v123, (uint64_t)v92);
      ++v124;
      v22 = (fido *)this;
    }
    cbor::CBORValue::internalCleanup((uint64_t)v115, v90);
    if ((_DWORD)v78)
    {
      v109 = 8 * v88;
      v110 = (WTF::StringImpl **)v80;
      do
      {
        v111 = *v110;
        *v110 = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 2)
            WTF::StringImpl::destroy(v111, v94);
          else
            *(_DWORD *)v111 -= 2;
        }
        ++v110;
        v109 -= 8;
      }
      while (v109);
    }
    if (v80)
      WTF::fastFree(v80, v94);
    cbor::CBORValue::internalCleanup((uint64_t)&v118, v94);
    if (v79)
      WTF::fastFree((WTF *)v79, v95);
  }
  if (!*((_BYTE *)v22 + 140))
    goto LABEL_103;
  v126 = 8;
  LODWORD(v125) = 0;
  if (!*((_BYTE *)v22 + 44))
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  v119 = *((unsigned int *)v22 + 10);
  LODWORD(v118) = 0;
  v96 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v122, (uint64_t)v115, (cbor::CBORValue *)&v125);
  if (!*v96)
  {
    v98 = v96;
    v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v99 + 4), (int *)&v125, (int *)&v118);
    v100 = v115[0];
    *v99 = 0;
    v99[1] = 0;
    v99[2] = v100;
    *v98 = v99;
    if (*v122)
    {
      v122 = (WTF **)*v122;
      v99 = (_QWORD *)*v98;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v123, (uint64_t)v99);
    ++v124;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v118, v97);
  cbor::CBORValue::internalCleanup((uint64_t)&v125, v101);
LABEL_103:
  LODWORD(v125) = 5;
  v126 = (uint64_t)v122;
  v127[0] = v123;
  v127[1] = v124;
  if (v124)
  {
    *((_QWORD *)v123 + 2) = v127;
    v122 = &v123;
    v123 = 0;
    v124 = 0;
  }
  else
  {
    v126 = (uint64_t)v127;
  }
  v118 = 0;
  v119 = 0;
  v115[0] = &v118;
  v102 = cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)v115, (const cbor::CBORValue *)&v125, 16);
  v104 = v118;
  if ((v102 & 1) == 0)
  {
    if (v118)
    {
      v118 = 0;
      LODWORD(v119) = 0;
      WTF::fastFree(v104, v103);
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v125, (WTF::StringImpl *)v103);
    __break(1u);
LABEL_122:
    __break(0xC471u);
LABEL_128:
    JUMPOUT(0x1955744D4);
  }
  v105 = HIDWORD(v119);
  cbor::CBORValue::internalCleanup((uint64_t)&v125, (WTF::StringImpl *)v103);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v105;
  if ((_DWORD)v105)
  {
    v107 = (void *)WTF::fastMalloc((WTF *)v105);
    *(_DWORD *)(a2 + 8) = v105;
    *(_QWORD *)a2 = v107;
    memcpy(v107, v104, v105);
  }
  if (v104)
    WTF::fastFree(v104, v106);
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v122, v123);
}

uint64_t fido::convertToCBOR@<X0>(fido *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  _QWORD *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  int v48;
  _QWORD v49[4];
  uint64_t *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v50 = (uint64_t *)&v51;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LODWORD(v49[0]) = 3;
  if (*((_BYTE *)this + 1))
    v5 = 20;
  else
    v5 = 21;
  v47 = 7;
  v48 = v5;
  v6 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v50, (uint64_t)&v53, (cbor::CBORValue *)v49);
  if (!*v6)
  {
    v8 = v6;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v9 + 4), (int *)v49, &v47);
    v10 = v53;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v10;
    *v8 = v9;
    if (*v50)
    {
      v50 = (uint64_t *)*v50;
      v9 = (_QWORD *)*v8;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v51, (uint64_t)v9);
    ++v52;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v47, v7);
  cbor::CBORValue::internalCleanup((uint64_t)v49, v11);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = v49[0];
  LODWORD(v49[0]) = 3;
  v49[1] = v12;
  if (*((_BYTE *)this + 8))
    v13 = 21;
  else
    v13 = 20;
  v47 = 7;
  v48 = v13;
  v14 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v50, (uint64_t)&v53, (cbor::CBORValue *)v49);
  if (!*v14)
  {
    v16 = v14;
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v17 + 4), (int *)v49, &v47);
    v18 = v53;
    *v17 = 0;
    v17[1] = 0;
    v17[2] = v18;
    *v16 = v17;
    if (*v50)
    {
      v50 = (uint64_t *)*v50;
      v17 = (_QWORD *)*v16;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v51, (uint64_t)v17);
    ++v52;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v47, v15);
  cbor::CBORValue::internalCleanup((uint64_t)v49, v19);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LODWORD(v49[0]) = 3;
  if (*(_BYTE *)this)
    v20 = 21;
  else
    v20 = 20;
  v47 = 7;
  v48 = v20;
  v21 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v50, (uint64_t)&v53, (cbor::CBORValue *)v49);
  if (!*v21)
  {
    v23 = v21;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v24 + 4), (int *)v49, &v47);
    v25 = v53;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = v25;
    *v23 = v24;
    if (*v50)
    {
      v50 = (uint64_t *)*v50;
      v24 = (_QWORD *)*v23;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v51, (uint64_t)v24);
    ++v52;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v47, v22);
  cbor::CBORValue::internalCleanup((uint64_t)v49, v26);
  v27 = *((_DWORD *)this + 1);
  if (v27 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LODWORD(v49[0]) = 3;
    v28 = 20;
  }
  else
  {
    if (v27)
      goto LABEL_31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LODWORD(v49[0]) = 3;
    v28 = 21;
  }
  v47 = 7;
  v48 = v28;
  v29 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v50, (uint64_t)&v53, (cbor::CBORValue *)v49);
  if (!*v29)
  {
    v31 = v29;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v32 + 4), (int *)v49, &v47);
    v33 = v53;
    *v32 = 0;
    v32[1] = 0;
    v32[2] = v33;
    *v31 = v32;
    if (*v50)
    {
      v50 = (uint64_t *)*v50;
      v32 = (_QWORD *)*v31;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v51, (uint64_t)v32);
    ++v52;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v47, v30);
  cbor::CBORValue::internalCleanup((uint64_t)v49, v34);
LABEL_31:
  v35 = *((_DWORD *)this + 3);
  if (v35 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LODWORD(v49[0]) = 3;
    v36 = 20;
  }
  else
  {
    if (v35)
      goto LABEL_40;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LODWORD(v49[0]) = 3;
    v36 = 21;
  }
  v47 = 7;
  v48 = v36;
  v37 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v50, (uint64_t)&v53, (cbor::CBORValue *)v49);
  if (!*v37)
  {
    v39 = v37;
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v40 + 4), (int *)v49, &v47);
    v41 = v53;
    *v40 = 0;
    v40[1] = 0;
    v40[2] = v41;
    *v39 = v40;
    if (*v50)
    {
      v50 = (uint64_t *)*v50;
      v40 = (_QWORD *)*v39;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v51, (uint64_t)v40);
    ++v52;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v47, v38);
  cbor::CBORValue::internalCleanup((uint64_t)v49, v42);
LABEL_40:
  *(_DWORD *)a2 = 5;
  v43 = v51;
  *(_QWORD *)(a2 + 8) = v50;
  *(_QWORD *)(a2 + 16) = v43;
  v44 = a2 + 16;
  v45 = v52;
  *(_QWORD *)(a2 + 24) = v52;
  if (v45)
  {
    *((_QWORD *)v43 + 2) = v44;
    v50 = (uint64_t *)&v51;
    v51 = 0;
    v52 = 0;
    v43 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v44;
  }
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v50, v43);
}

uint64_t fido::AuthenticatorSupportedOptions::setResidentKeyAvailability(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1) = a2;
  return result;
}

uint64_t fido::AuthenticatorSupportedOptions::setUserVerificationAvailability(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t fido::AuthenticatorSupportedOptions::setUserPresenceRequired(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t fido::AuthenticatorSupportedOptions::setClientPinAvailability(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

_BYTE *fido::AuthenticatorSupportedOptions::setIsPlatformDevice(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t fido::encodeMakeCredentialRequestAsCBOR@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, int *a6@<X5>, uint64_t a7@<X8>)
{
  WTF *v10;
  uint64_t **v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  WTF *v22;
  WTF *v23;
  unint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  _QWORD *v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t **v37;
  WTF::StringImpl *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  unint64_t v45;
  _DWORD *v46;
  _QWORD *v47;
  WTF::StringImpl *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  _DWORD *v54;
  _QWORD *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  _QWORD *v66;
  WTF::StringImpl *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  char *v77;
  _BYTE *v78;
  char v79;
  _QWORD *v80;
  WTF::StringImpl *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t *v84;
  WTF::StringImpl *v85;
  _DWORD *v86;
  _QWORD *v87;
  WTF::StringImpl *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t *v91;
  WTF::StringImpl *v92;
  WTF *v93;
  uint64_t **v94;
  WTF::StringImpl *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  unint64_t v102;
  _DWORD *v103;
  _QWORD *v104;
  WTF::StringImpl *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  WTF *v111;
  unint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  WTF::StringImpl *v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  _QWORD *v128;
  WTF::StringImpl *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF *v134;
  WTF::StringImpl *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  WTF *v140;
  uint64_t **v141;
  WTF::StringImpl *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  int v148;
  unint64_t v149;
  WTF *v150;
  WTF *v151;
  unint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  int v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t **v168;
  WTF *v169;
  uint64_t *v170;
  uint64_t v171;
  WTF *v172;
  uint64_t **v173;
  WTF::StringImpl *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  int v180;
  unint64_t v181;
  WTF *v182;
  WTF *v183;
  unint64_t v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  WTF *v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  uint64_t **v197;
  WTF::StringImpl *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  int v204;
  unint64_t v205;
  WTF *v206;
  WTF *v207;
  unint64_t v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  uint64_t **v212;
  WTF::StringImpl *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  WTF::StringImpl *v218;
  int v219;
  unint64_t v220;
  int v221;
  int v222;
  WTF *v223;
  unint64_t v224;
  uint64_t v225;
  WTF::StringImpl *v226;
  uint64_t **v227;
  WTF::StringImpl *v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  int v234;
  unint64_t v235;
  WTF *v236;
  WTF *v237;
  unint64_t v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  WTF **v243;
  char v244;
  unint64_t v245;
  uint64_t **v246;
  WTF::StringImpl *v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  WTF::StringImpl *v252;
  int v253;
  unint64_t v254;
  uint64_t **v255;
  WTF::StringImpl *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  WTF *v262;
  WTF *v263;
  unint64_t v264;
  uint64_t v265;
  WTF::StringImpl *v266;
  unint64_t v267;
  uint64_t **v268;
  WTF::StringImpl *v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  WTF::StringImpl *v274;
  int v275;
  unint64_t v276;
  WTF *v277;
  WTF *v278;
  unint64_t v279;
  uint64_t v280;
  WTF::StringImpl *v281;
  WTF ***v282;
  WTF::StringImpl *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  WTF::StringImpl *v287;
  int v288;
  unint64_t v289;
  WTF *v290;
  WTF *v291;
  unint64_t v292;
  uint64_t v293;
  WTF::StringImpl *v294;
  WTF *v295;
  uint64_t **v296;
  WTF::StringImpl *v297;
  uint64_t *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  WTF::StringImpl *v302;
  int v303;
  unint64_t v304;
  WTF *v305;
  WTF *v306;
  unint64_t v307;
  uint64_t v308;
  WTF::StringImpl *v309;
  WTF ***v310;
  WTF::StringImpl *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  WTF::StringImpl *v315;
  int v316;
  unint64_t v317;
  WTF *v318;
  WTF *v319;
  unint64_t v320;
  uint64_t v321;
  WTF::StringImpl *v322;
  int v323;
  void *v324;
  char v325;
  WTF *v326;
  WTF *v327;
  void *v328;
  size_t v329;
  unint64_t v330;
  unint64_t v331;
  WTF *v332;
  void *v333;
  WTF *v334;
  char *v336;
  int v337;
  uint64_t v340;
  uint64_t *v342;
  WTF *v343;
  uint64_t v344;
  WTF::StringImpl *v345;
  unint64_t v346;
  WTF *v347;
  uint64_t v348;
  char v349;
  char v350;
  uint64_t *v351;
  WTF *v352;
  uint64_t v353;
  WTF **v354;
  WTF *v355;
  WTF *v356;
  uint64_t *v357;
  uint64_t v358;
  WTF *v359;
  WTF *v360;
  WTF *v361;
  unint64_t v362;
  WTF *v363;
  uint64_t v364;
  char v365;
  uint64_t **v366;
  uint64_t **v367;
  uint64_t *v368;
  WTF *v369;
  WTF *v370;

  v355 = 0;
  v356 = 0;
  v354 = &v355;
  LODWORD(v345) = 2;
  v10 = (WTF *)*(unsigned int *)(a1 + 12);
  v346 = 0;
  LODWORD(v347) = 0;
  HIDWORD(v347) = (_DWORD)v10;
  if ((_DWORD)v10)
  {
    LODWORD(v347) = (_DWORD)v10;
    v346 = WTF::fastMalloc(v10);
    memcpy((void *)v346, *(const void **)a1, *(unsigned int *)(a1 + 12));
  }
  v362 = 1;
  LODWORD(v361) = 0;
  v351 = (uint64_t *)&v361;
  v12 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v368, (cbor::CBORValue *)&v361);
  v14 = *v12;
  v15 = a2;
  if (!*v12)
  {
    v16 = (uint64_t *)v12;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v351, (uint64_t)&v342, &v357);
    v17 = v368;
    v18 = (uint64_t)v357;
    *v357 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = v17;
    *v16 = v18;
    if (*v354)
    {
      v354 = (WTF **)*v354;
      v18 = *v16;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v18);
    v14 = v357;
    v356 = (WTF *)((char *)v356 + 1);
  }
  cbor::CBORValue::internalCleanup((uint64_t)(v14 + 8), v13);
  v20 = (int)v345;
  *((_DWORD *)v14 + 16) = (_DWORD)v345;
  switch(v20)
  {
    case 0:
    case 1:
      v21 = v346;
      goto LABEL_14;
    case 2:
    case 4:
      v14[9] = v346;
      v22 = v347;
      v346 = 0;
      v347 = 0;
      v14[10] = (uint64_t)v22;
      break;
    case 3:
      v21 = v346;
      v346 = 0;
      goto LABEL_14;
    case 5:
      v24 = v346;
      v23 = v347;
      v14[10] = (uint64_t)v347;
      v21 = (unint64_t)(v14 + 10);
      v14[9] = v24;
      v25 = v348;
      v14[11] = v348;
      if (v25)
      {
        *((_QWORD *)v23 + 2) = v21;
        v346 = (unint64_t)&v347;
        v347 = 0;
        v348 = 0;
      }
      else
      {
LABEL_14:
        v14[9] = v21;
      }
      break;
    case 7:
      *((_DWORD *)v14 + 18) = v346;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v361, v19);
  cbor::CBORValue::internalCleanup((uint64_t)&v345, v26);
  v358 = 0;
  v359 = 0;
  v357 = &v358;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LODWORD(v345) = 3;
  LODWORD(v361) = 3;
  v27 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v27 += 2;
  v362 = (unint64_t)v27;
  v28 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v357, (uint64_t)&v368, (cbor::CBORValue *)&v345);
  if (!*v28)
  {
    v30 = v28;
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v31 + 4), (int *)&v345, (int *)&v361);
    v32 = v368;
    *v31 = 0;
    v31[1] = 0;
    v31[2] = v32;
    *v30 = v31;
    if (*v357)
    {
      v357 = (uint64_t *)*v357;
      v31 = (_QWORD *)*v30;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v358, (uint64_t)v31);
    v359 = (WTF *)((char *)v359 + 1);
    v15 = a2;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v361, v29);
  cbor::CBORValue::internalCleanup((uint64_t)&v345, v33);
  v34 = *(_QWORD *)(v15 + 8);
  if (v34 && *(_DWORD *)(v34 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LODWORD(v345) = 3;
    LODWORD(v361) = 3;
    v46 = *(_DWORD **)(v15 + 8);
    if (v46)
      *v46 += 2;
    v362 = (unint64_t)v46;
    v47 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v357, (uint64_t)&v368, (cbor::CBORValue *)&v345);
    if (!*v47)
    {
      v49 = v47;
      v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
      std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v50 + 4), (int *)&v345, (int *)&v361);
      v51 = v368;
      *v50 = 0;
      v50[1] = 0;
      v50[2] = v51;
      *v49 = v50;
      if (*v357)
      {
        v357 = (uint64_t *)*v357;
        v50 = (_QWORD *)*v49;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v358, (uint64_t)v50);
      v359 = (WTF *)((char *)v359 + 1);
      v15 = a2;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v361, v48);
    cbor::CBORValue::internalCleanup((uint64_t)&v345, v52);
  }
  if (*(_BYTE *)(v15 + 24))
  {
    v35 = *(_QWORD *)(v15 + 16);
    if (v35)
    {
      if (*(_DWORD *)(v35 + 4))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LODWORD(v345) = 3;
        if (!*(_BYTE *)(v15 + 24))
          goto LABEL_346;
        LODWORD(v361) = 3;
        v54 = *(_DWORD **)(v15 + 16);
        if (v54)
          *v54 += 2;
        v362 = (unint64_t)v54;
        v55 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v357, (uint64_t)&v368, (cbor::CBORValue *)&v345);
        if (!*v55)
        {
          v57 = v55;
          v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
          std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v58 + 4), (int *)&v345, (int *)&v361);
          v59 = v368;
          *v58 = 0;
          v58[1] = 0;
          v58[2] = v59;
          *v57 = v58;
          if (*v357)
          {
            v357 = (uint64_t *)*v357;
            v58 = (_QWORD *)*v57;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v358, (uint64_t)v58);
          v359 = (WTF *)((char *)v359 + 1);
          v15 = a2;
        }
        cbor::CBORValue::internalCleanup((uint64_t)&v361, v56);
        cbor::CBORValue::internalCleanup((uint64_t)&v345, v60);
      }
    }
  }
  LODWORD(v345) = 5;
  v36 = (WTF *)v358;
  v346 = (unint64_t)v357;
  v347 = (WTF *)v358;
  v348 = (uint64_t)v359;
  if (v359)
  {
    *(_QWORD *)(v358 + 16) = &v347;
    v357 = &v358;
    v358 = 0;
    v359 = 0;
    v36 = 0;
  }
  else
  {
    v346 = (unint64_t)&v347;
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v357, v36);
  v362 = 2;
  LODWORD(v361) = 0;
  v351 = (uint64_t *)&v361;
  v37 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v368, (cbor::CBORValue *)&v361);
  v39 = *v37;
  if (!*v37)
  {
    v40 = (uint64_t *)v37;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v351, (uint64_t)&v342, &v357);
    v41 = v368;
    v42 = (uint64_t)v357;
    *v357 = 0;
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v42 + 16) = v41;
    *v40 = v42;
    if (*v354)
    {
      v354 = (WTF **)*v354;
      v42 = *v40;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v42);
    v39 = v357;
    v356 = (WTF *)((char *)v356 + 1);
  }
  cbor::CBORValue::internalCleanup((uint64_t)(v39 + 8), v38);
  v44 = (int)v345;
  *((_DWORD *)v39 + 16) = (_DWORD)v345;
  switch(v44)
  {
    case 0:
    case 1:
      v45 = v346;
      goto LABEL_55;
    case 2:
    case 4:
      v39[9] = v346;
      v53 = v347;
      v346 = 0;
      v347 = 0;
      v39[10] = (uint64_t)v53;
      break;
    case 3:
      v45 = v346;
      v346 = 0;
      goto LABEL_55;
    case 5:
      v62 = v346;
      v61 = v347;
      v39[10] = (uint64_t)v347;
      v45 = (unint64_t)(v39 + 10);
      v39[9] = v62;
      v63 = v348;
      v39[11] = v348;
      if (v63)
      {
        *((_QWORD *)v61 + 2) = v45;
        v346 = (unint64_t)&v347;
        v347 = 0;
        v348 = 0;
      }
      else
      {
LABEL_55:
        v39[9] = v45;
      }
      break;
    case 7:
      *((_DWORD *)v39 + 18) = v346;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v361, v43);
  cbor::CBORValue::internalCleanup((uint64_t)&v345, v64);
  v358 = 0;
  v359 = 0;
  v357 = &v358;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LODWORD(v345) = 3;
  LODWORD(v361) = 3;
  v65 = *(_DWORD **)(v15 + 32);
  if (v65)
    *v65 += 2;
  v362 = (unint64_t)v65;
  v66 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v357, (uint64_t)&v368, (cbor::CBORValue *)&v345);
  if (!*v66)
  {
    v68 = v66;
    v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v69 + 4), (int *)&v345, (int *)&v361);
    v70 = v368;
    *v69 = 0;
    v69[1] = 0;
    v69[2] = v70;
    *v68 = v69;
    if (*v357)
    {
      v357 = (uint64_t *)*v357;
      v69 = (_QWORD *)*v68;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v358, (uint64_t)v69);
    v359 = (WTF *)((char *)v359 + 1);
    v15 = a2;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v361, v67);
  cbor::CBORValue::internalCleanup((uint64_t)&v345, v71);
  v72 = *(_QWORD *)(v15 + 40);
  if (v72 && *(_DWORD *)(v72 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LODWORD(v345) = 3;
    LODWORD(v361) = 3;
    v103 = *(_DWORD **)(v15 + 40);
    if (v103)
      *v103 += 2;
    v362 = (unint64_t)v103;
    v104 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v357, (uint64_t)&v368, (cbor::CBORValue *)&v345);
    if (!*v104)
    {
      v106 = v104;
      v107 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
      std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v107 + 4), (int *)&v345, (int *)&v361);
      v108 = v368;
      *v107 = 0;
      v107[1] = 0;
      v107[2] = v108;
      *v106 = v107;
      if (*v357)
      {
        v357 = (uint64_t *)*v357;
        v107 = (_QWORD *)*v106;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v358, (uint64_t)v107);
      v359 = (WTF *)((char *)v359 + 1);
      v15 = a2;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v361, v105);
    cbor::CBORValue::internalCleanup((uint64_t)&v345, v109);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LODWORD(v345) = 3;
  LODWORD(v361) = 2;
  v73 = *(unsigned int *)(v15 + 56);
  if ((_DWORD)v73 == -1)
    goto LABEL_347;
  v368 = (uint64_t *)&v351;
  v74 = ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_2[v73])(&v368, v15 + 48);
  v76 = v75;
  v362 = 0;
  LODWORD(v363) = 0;
  HIDWORD(v363) = (_DWORD)v75;
  if (v75)
  {
    if ((unint64_t)v75 >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x195576B00);
    }
    v77 = (char *)v74;
    v78 = (_BYTE *)WTF::fastMalloc(v75);
    LODWORD(v363) = (_DWORD)v76;
    v362 = (unint64_t)v78;
    do
    {
      v79 = *v77++;
      *v78++ = v79;
      v76 = (WTF *)((char *)v76 - 1);
    }
    while (v76);
  }
  v80 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v357, (uint64_t)&v368, (cbor::CBORValue *)&v345);
  if (!*v80)
  {
    v82 = v80;
    v83 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v83 + 4), (int *)&v345, (int *)&v361);
    v84 = v368;
    *v83 = 0;
    v83[1] = 0;
    v83[2] = v84;
    *v82 = v83;
    if (*v357)
    {
      v357 = (uint64_t *)*v357;
      v83 = (_QWORD *)*v82;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v358, (uint64_t)v83);
    v359 = (WTF *)((char *)v359 + 1);
    v15 = a2;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v361, v81);
  cbor::CBORValue::internalCleanup((uint64_t)&v345, v85);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LODWORD(v345) = 3;
  LODWORD(v361) = 3;
  v86 = *(_DWORD **)(v15 + 64);
  if (v86)
    *v86 += 2;
  v362 = (unint64_t)v86;
  v87 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v357, (uint64_t)&v368, (cbor::CBORValue *)&v345);
  if (!*v87)
  {
    v89 = v87;
    v90 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v90 + 4), (int *)&v345, (int *)&v361);
    v91 = v368;
    *v90 = 0;
    v90[1] = 0;
    v90[2] = v91;
    *v89 = v90;
    if (*v357)
    {
      v357 = (uint64_t *)*v357;
      v90 = (_QWORD *)*v89;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v358, (uint64_t)v90);
    v359 = (WTF *)((char *)v359 + 1);
    v15 = a2;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v361, v88);
  cbor::CBORValue::internalCleanup((uint64_t)&v345, v92);
  LODWORD(v345) = 5;
  v93 = (WTF *)v358;
  v346 = (unint64_t)v357;
  v347 = (WTF *)v358;
  v348 = (uint64_t)v359;
  if (v359)
  {
    *(_QWORD *)(v358 + 16) = &v347;
    v357 = &v358;
    v358 = 0;
    v359 = 0;
    v93 = 0;
  }
  else
  {
    v346 = (unint64_t)&v347;
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v357, v93);
  v362 = 3;
  LODWORD(v361) = 0;
  v351 = (uint64_t *)&v361;
  v94 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v368, (cbor::CBORValue *)&v361);
  v96 = *v94;
  if (!*v94)
  {
    v97 = (uint64_t *)v94;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v351, (uint64_t)&v342, &v357);
    v98 = v368;
    v99 = (uint64_t)v357;
    *v357 = 0;
    *(_QWORD *)(v99 + 8) = 0;
    *(_QWORD *)(v99 + 16) = v98;
    *v97 = v99;
    if (*v354)
    {
      v354 = (WTF **)*v354;
      v99 = *v97;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v99);
    v96 = v357;
    v356 = (WTF *)((char *)v356 + 1);
  }
  cbor::CBORValue::internalCleanup((uint64_t)(v96 + 8), v95);
  v101 = (int)v345;
  *((_DWORD *)v96 + 16) = (_DWORD)v345;
  switch(v101)
  {
    case 0:
    case 1:
      v102 = v346;
      goto LABEL_100;
    case 2:
    case 4:
      v96[9] = v346;
      v110 = v347;
      v346 = 0;
      v347 = 0;
      v96[10] = (uint64_t)v110;
      break;
    case 3:
      v102 = v346;
      v346 = 0;
      goto LABEL_100;
    case 5:
      v112 = v346;
      v111 = v347;
      v96[10] = (uint64_t)v347;
      v102 = (unint64_t)(v96 + 10);
      v96[9] = v112;
      v113 = v348;
      v96[11] = v348;
      if (v113)
      {
        *((_QWORD *)v111 + 2) = v102;
        v346 = (unint64_t)&v347;
        v347 = 0;
        v348 = 0;
      }
      else
      {
LABEL_100:
        v96[9] = v102;
      }
      break;
    case 7:
      *((_DWORD *)v96 + 18) = v346;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v361, v100);
  cbor::CBORValue::internalCleanup((uint64_t)&v345, v114);
  v115 = *(unsigned int *)(v15 + 100);
  v340 = a5;
  if ((_DWORD)v115)
  {
    if (v115 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195576AF8);
    }
    v116 = (char *)WTF::fastMalloc((WTF *)(32 * v115));
    if (*(_DWORD *)(v15 + 100))
    {
      v337 = v115;
      v117 = 0;
      v336 = v116;
      v118 = v116 + 16;
      v119 = 8;
      do
      {
        v120 = *(_QWORD *)(v15 + 88);
        v369 = 0;
        v370 = 0;
        v368 = (uint64_t *)&v369;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LODWORD(v345) = 3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v121 = (unint64_t)v361;
        LODWORD(v361) = 3;
        v362 = v121;
        v122 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v368, (uint64_t)&v351, (cbor::CBORValue *)&v345);
        if (!*v122)
        {
          v124 = v122;
          v125 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
          std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v125 + 4), (int *)&v345, (int *)&v361);
          v126 = (uint64_t)v351;
          *v125 = 0;
          v125[1] = 0;
          v125[2] = v126;
          *v124 = v125;
          if (*v368)
          {
            v368 = (uint64_t *)*v368;
            v125 = (_QWORD *)*v124;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v369, (uint64_t)v125);
          v370 = (WTF *)((char *)v370 + 1);
        }
        cbor::CBORValue::internalCleanup((uint64_t)&v361, v123);
        cbor::CBORValue::internalCleanup((uint64_t)&v345, v127);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LODWORD(v345) = 3;
        v362 = *(_QWORD *)(v120 + v119);
        LODWORD(v361) = v362 >> 63;
        v128 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v368, (uint64_t)&v351, (cbor::CBORValue *)&v345);
        if (!*v128)
        {
          v130 = v128;
          v131 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
          std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>((uint64_t)(v131 + 4), (int *)&v345, (int *)&v361);
          v132 = (uint64_t)v351;
          *v131 = 0;
          v131[1] = 0;
          v131[2] = v132;
          *v130 = v131;
          if (*v368)
          {
            v368 = (uint64_t *)*v368;
            v131 = (_QWORD *)*v130;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v369, (uint64_t)v131);
          v370 = (WTF *)((char *)v370 + 1);
        }
        cbor::CBORValue::internalCleanup((uint64_t)&v361, v129);
        cbor::CBORValue::internalCleanup((uint64_t)&v345, v133);
        LODWORD(v357) = 5;
        v134 = v369;
        v358 = (uint64_t)v368;
        v359 = v369;
        v360 = v370;
        if (v370)
        {
          *((_QWORD *)v369 + 2) = &v359;
          v368 = (uint64_t *)&v369;
          v369 = 0;
          v370 = 0;
          v134 = 0;
        }
        else
        {
          v358 = (uint64_t)&v359;
        }
        v15 = a2;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v368, v134);
        v136 = (int)v357;
        *((_DWORD *)v118 - 4) = (_DWORD)v357;
        switch(v136)
        {
          case 0:
          case 1:
            v137 = v358;
            goto LABEL_123;
          case 2:
          case 4:
            *(_QWORD *)v118 = 0;
            v138 = v358;
            v358 = 0;
            *((_QWORD *)v118 - 1) = v138;
            LODWORD(v138) = (_DWORD)v359;
            LODWORD(v359) = 0;
            *(_DWORD *)v118 = v138;
            LODWORD(v138) = HIDWORD(v359);
            HIDWORD(v359) = 0;
            *((_DWORD *)v118 + 1) = v138;
            break;
          case 3:
            v137 = v358;
            v358 = 0;
LABEL_123:
            *((_QWORD *)v118 - 1) = v137;
            break;
          case 5:
            *((_QWORD *)v118 - 1) = v358;
            v139 = v359;
            *(_QWORD *)v118 = v359;
            v140 = v360;
            *((_QWORD *)v118 + 1) = v360;
            if (v140)
            {
              *((_QWORD *)v139 + 2) = v118;
              v358 = (uint64_t)&v359;
              v359 = 0;
              v360 = 0;
            }
            else
            {
              *((_QWORD *)v118 - 1) = v118;
            }
            break;
          case 7:
            *((_DWORD *)v118 - 2) = v358;
            break;
          default:
            break;
        }
        ++v117;
        cbor::CBORValue::internalCleanup((uint64_t)&v357, v135);
        v118 += 32;
        v119 += 16;
      }
      while (v117 < *(unsigned int *)(a2 + 100));
      v116 = v336;
      LODWORD(v115) = v337;
    }
    else
    {
      LODWORD(v117) = 0;
    }
  }
  else
  {
    LODWORD(v117) = 0;
    v116 = 0;
  }
  LODWORD(v345) = 4;
  v346 = (unint64_t)v116;
  v347 = (WTF *)__PAIR64__(v117, v115);
  v362 = 4;
  LODWORD(v361) = 0;
  v351 = (uint64_t *)&v361;
  v141 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v368, (cbor::CBORValue *)&v361);
  v143 = *v141;
  if (!*v141)
  {
    v144 = (uint64_t *)v141;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v351, (uint64_t)&v342, &v357);
    v145 = v368;
    v146 = (uint64_t)v357;
    *v357 = 0;
    *(_QWORD *)(v146 + 8) = 0;
    *(_QWORD *)(v146 + 16) = v145;
    *v144 = v146;
    if (*v354)
    {
      v354 = (WTF **)*v354;
      v146 = *v144;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v146);
    v143 = v357;
    v356 = (WTF *)((char *)v356 + 1);
  }
  cbor::CBORValue::internalCleanup((uint64_t)(v143 + 8), v142);
  v148 = (int)v345;
  *((_DWORD *)v143 + 16) = (_DWORD)v345;
  switch(v148)
  {
    case 0:
    case 1:
      v149 = v346;
      goto LABEL_140;
    case 2:
    case 4:
      v143[9] = v346;
      v150 = v347;
      v346 = 0;
      v347 = 0;
      v143[10] = (uint64_t)v150;
      break;
    case 3:
      v149 = v346;
      v346 = 0;
      goto LABEL_140;
    case 5:
      v152 = v346;
      v151 = v347;
      v143[10] = (uint64_t)v347;
      v149 = (unint64_t)(v143 + 10);
      v143[9] = v152;
      v153 = v348;
      v143[11] = v348;
      if (v153)
      {
        *((_QWORD *)v151 + 2) = v149;
        v346 = (unint64_t)&v347;
        v347 = 0;
        v348 = 0;
      }
      else
      {
LABEL_140:
        v143[9] = v149;
      }
      break;
    case 7:
      *((_DWORD *)v143 + 18) = v346;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v361, v147);
  cbor::CBORValue::internalCleanup((uint64_t)&v345, v154);
  v155 = *(unsigned int *)(v15 + 124);
  if ((_DWORD)v155)
  {
    v368 = 0;
    v369 = 0;
    v156 = *(_QWORD *)(v15 + 112);
    v157 = 40 * v155;
    do
    {
      fido::convertDescriptorToCBOR((uint64_t)&v345, v156);
      v159 = HIDWORD(v369);
      if (HIDWORD(v369) == (_DWORD)v369)
      {
        WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,cbor::CBORValue>((uint64_t)&v368, (unint64_t)&v345);
      }
      else
      {
        v160 = v368;
        v161 = &v368[4 * HIDWORD(v369)];
        v162 = (int)v345;
        *(_DWORD *)v161 = (_DWORD)v345;
        switch(v162)
        {
          case 0:
          case 1:
            v163 = v346;
            v164 = &v160[4 * v159];
            goto LABEL_152;
          case 2:
          case 4:
            v165 = &v160[4 * v159];
            v165[1] = 0;
            v165[2] = 0;
            v166 = v346;
            v346 = 0;
            v165[1] = v166;
            LODWORD(v166) = (_DWORD)v347;
            LODWORD(v347) = 0;
            *((_DWORD *)v165 + 4) = v166;
            LODWORD(v165) = HIDWORD(v347);
            HIDWORD(v347) = 0;
            *((_DWORD *)v161 + 5) = (_DWORD)v165;
            break;
          case 3:
            v163 = v346;
            v164 = &v160[4 * v159];
            v346 = 0;
LABEL_152:
            v164[1] = v163;
            break;
          case 5:
            v167 = &v160[4 * v159];
            v167[1] = v346;
            v168 = (uint64_t **)(v167 + 1);
            v169 = v347;
            v167[2] = (uint64_t)v347;
            v170 = v167 + 2;
            v171 = v348;
            v170[1] = v348;
            if (v171)
            {
              *((_QWORD *)v169 + 2) = v170;
              v346 = (unint64_t)&v347;
              v347 = 0;
              v348 = 0;
            }
            else
            {
              *v168 = v170;
            }
            break;
          case 7:
            LODWORD(v160[4 * v159 + 1]) = v346;
            break;
          default:
            break;
        }
        ++HIDWORD(v369);
      }
      cbor::CBORValue::internalCleanup((uint64_t)&v345, v158);
      v156 += 40;
      v157 -= 40;
    }
    while (v157);
    LODWORD(v345) = 4;
    v346 = (unint64_t)v368;
    v172 = v369;
    v368 = 0;
    v369 = 0;
    v347 = v172;
    v362 = 5;
    LODWORD(v361) = 0;
    v342 = (uint64_t *)&v361;
    v173 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v351, (cbor::CBORValue *)&v361);
    v175 = *v173;
    if (!*v173)
    {
      v176 = (uint64_t *)v173;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v342, (uint64_t)&v367, &v357);
      v177 = (uint64_t)v351;
      v178 = (uint64_t)v357;
      *v357 = 0;
      *(_QWORD *)(v178 + 8) = 0;
      *(_QWORD *)(v178 + 16) = v177;
      *v176 = v178;
      if (*v354)
      {
        v354 = (WTF **)*v354;
        v178 = *v176;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v178);
      v175 = v357;
      v356 = (WTF *)((char *)v356 + 1);
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v175 + 8), v174);
    v180 = (int)v345;
    *((_DWORD *)v175 + 16) = (_DWORD)v345;
    switch(v180)
    {
      case 0:
      case 1:
        v181 = v346;
        goto LABEL_168;
      case 2:
      case 4:
        v175[9] = v346;
        v182 = v347;
        v346 = 0;
        v347 = 0;
        v175[10] = (uint64_t)v182;
        break;
      case 3:
        v181 = v346;
        v346 = 0;
        goto LABEL_168;
      case 5:
        v184 = v346;
        v183 = v347;
        v175[10] = (uint64_t)v347;
        v181 = (unint64_t)(v175 + 10);
        v175[9] = v184;
        v185 = v348;
        v175[11] = v348;
        if (v185)
        {
          *((_QWORD *)v183 + 2) = v181;
          v346 = (unint64_t)&v347;
          v347 = 0;
          v348 = 0;
        }
        else
        {
LABEL_168:
          v175[9] = v181;
        }
        break;
      case 7:
        *((_DWORD *)v175 + 18) = v346;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v361, v179);
    cbor::CBORValue::internalCleanup((uint64_t)&v345, v186);
    if (HIDWORD(v369))
    {
      v188 = (uint64_t)v368;
      v189 = 32 * HIDWORD(v369);
      do
      {
        cbor::CBORValue::internalCleanup(v188, v187);
        v188 += 32;
        v189 -= 32;
      }
      while (v189);
    }
    v190 = (WTF *)v368;
    if (v368)
    {
      v368 = 0;
      LODWORD(v369) = 0;
      WTF::fastFree(v190, v187);
    }
  }
  if (*(_DWORD *)(v340 + 12) && *(_BYTE *)(v15 + 288))
  {
    v352 = 0;
    v353 = 0;
    v351 = (uint64_t *)&v352;
    LOBYTE(v345) = 0;
    v350 = 0;
    if (!*(_BYTE *)(v15 + 200))
    {
LABEL_220:
      LODWORD(v361) = 5;
      v362 = (unint64_t)v351;
      v363 = v352;
      v364 = v353;
      if (v353)
      {
        *((_QWORD *)v352 + 2) = &v363;
        v351 = (uint64_t *)&v352;
        v352 = 0;
        v353 = 0;
      }
      else
      {
        v362 = (unint64_t)&v363;
      }
      v15 = a2;
      v358 = 6;
      LODWORD(v357) = 0;
      v367 = &v357;
      v227 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v342, (cbor::CBORValue *)&v357);
      v229 = *v227;
      if (!*v227)
      {
        v230 = (uint64_t *)v227;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v367, (uint64_t)&v366, &v368);
        v231 = (uint64_t)v342;
        v232 = (uint64_t)v368;
        *v368 = 0;
        *(_QWORD *)(v232 + 8) = 0;
        *(_QWORD *)(v232 + 16) = v231;
        *v230 = v232;
        if (*v354)
        {
          v354 = (WTF **)*v354;
          v232 = *v230;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v232);
        v356 = (WTF *)((char *)v356 + 1);
        v229 = v368;
      }
      cbor::CBORValue::internalCleanup((uint64_t)(v229 + 8), v228);
      v234 = (int)v361;
      *((_DWORD *)v229 + 16) = (_DWORD)v361;
      switch(v234)
      {
        case 0:
        case 1:
          v235 = v362;
          goto LABEL_234;
        case 2:
        case 4:
          v229[9] = v362;
          v236 = v363;
          v362 = 0;
          v363 = 0;
          v229[10] = (uint64_t)v236;
          break;
        case 3:
          v235 = v362;
          v362 = 0;
          goto LABEL_234;
        case 5:
          v238 = v362;
          v237 = v363;
          v229[10] = (uint64_t)v363;
          v235 = (unint64_t)(v229 + 10);
          v229[9] = v238;
          v239 = v364;
          v229[11] = v364;
          if (v239)
          {
            *((_QWORD *)v237 + 2) = v235;
            v362 = (unint64_t)&v363;
            v363 = 0;
            v364 = 0;
          }
          else
          {
LABEL_234:
            v229[9] = v235;
          }
          break;
        case 7:
          *((_DWORD *)v229 + 18) = v362;
          break;
        default:
          break;
      }
      cbor::CBORValue::internalCleanup((uint64_t)&v357, v233);
      cbor::CBORValue::internalCleanup((uint64_t)&v361, v240);
      if (v350)
      {
        if (v349)
        {
          if ((_DWORD)v348 != -1)
            ((void (*)(WTF **, WTF **))off_1E336C680[v348])(&v361, &v347);
          LODWORD(v348) = -1;
        }
        v242 = v345;
        v345 = 0;
        if (v242)
        {
          if (*(_DWORD *)v242 == 2)
            WTF::StringImpl::destroy(v242, v241);
          else
            *(_DWORD *)v242 -= 2;
        }
      }
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v351, v352);
      goto LABEL_244;
    }
    v191 = *(WTF::StringImpl **)(a2 + 160);
    if (v191)
      *(_DWORD *)v191 += 2;
    v345 = v191;
    LOWORD(v346) = *(_WORD *)(a2 + 168);
    LOBYTE(v347) = 0;
    v349 = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      LODWORD(v348) = -1;
      v192 = *(unsigned int *)(a2 + 184);
      if ((_DWORD)v192 != -1)
      {
        ((void (*)(WTF **, WTF **, uint64_t))off_1E336C690[v192])(&v361, &v347, a2 + 176);
        LODWORD(v348) = v192;
        v193 = *(_DWORD *)(v340 + 12);
        v349 = 1;
        v350 = 1;
        if (!v193)
          goto LABEL_220;
LABEL_185:
        v194 = 0;
        while ((MEMORY[0x19AEA53F4](*(_QWORD *)(*(_QWORD *)v340 + 8 * v194), "largeBlob", 9) & 1) == 0)
        {
          if (++v194 >= (unint64_t)*(unsigned int *)(v340 + 12))
            goto LABEL_220;
        }
        v343 = 0;
        v344 = 0;
        v342 = (uint64_t *)&v343;
        if (!v350)
          goto LABEL_346;
        v195 = v345;
        if (v345)
        {
          LODWORD(v361) = 3;
          *(_DWORD *)v345 += 2;
          v362 = (unint64_t)v195;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v196 = (uint64_t)v357;
          LODWORD(v357) = 3;
          v358 = v196;
          v366 = &v357;
          v197 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v342, (uint64_t)&v367, (cbor::CBORValue *)&v357);
          v199 = *v197;
          if (!*v197)
          {
            v200 = (uint64_t *)v197;
            std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v342, (uint64_t)&std::piecewise_construct, (uint64_t *)&v366, (uint64_t)&v365, &v368);
            v202 = (uint64_t)v367;
            v201 = (uint64_t)v368;
            *v368 = 0;
            *(_QWORD *)(v201 + 8) = 0;
            *(_QWORD *)(v201 + 16) = v202;
            *v200 = v201;
            if (*v342)
            {
              v342 = (uint64_t *)*v342;
              v201 = *v200;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v343, v201);
            ++v344;
            v199 = v368;
          }
          cbor::CBORValue::internalCleanup((uint64_t)(v199 + 8), v198);
          v204 = (int)v361;
          *((_DWORD *)v199 + 16) = (_DWORD)v361;
          switch(v204)
          {
            case 0:
            case 1:
              v205 = v362;
              goto LABEL_203;
            case 2:
            case 4:
              v199[9] = v362;
              v206 = v363;
              v362 = 0;
              v363 = 0;
              v199[10] = (uint64_t)v206;
              break;
            case 3:
              v205 = v362;
              v362 = 0;
              goto LABEL_203;
            case 5:
              v208 = v362;
              v207 = v363;
              v199[10] = (uint64_t)v363;
              v205 = (unint64_t)(v199 + 10);
              v199[9] = v208;
              v209 = v364;
              v199[11] = v364;
              if (v209)
              {
                *((_QWORD *)v207 + 2) = v205;
                v362 = (unint64_t)&v363;
                v363 = 0;
                v364 = 0;
              }
              else
              {
LABEL_203:
                v199[9] = v205;
              }
              break;
            case 7:
              *((_DWORD *)v199 + 18) = v362;
              break;
            default:
              break;
          }
          cbor::CBORValue::internalCleanup((uint64_t)&v357, v203);
          cbor::CBORValue::internalCleanup((uint64_t)&v361, v210);
          LODWORD(v361) = 5;
          v362 = (unint64_t)v342;
          v363 = v343;
          v364 = v344;
          if (v344)
          {
            *((_QWORD *)v343 + 2) = &v363;
            v342 = (uint64_t *)&v343;
            v343 = 0;
            v344 = 0;
LABEL_207:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v211 = (uint64_t)v357;
            LODWORD(v357) = 3;
            v358 = v211;
            v366 = &v357;
            v212 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v351, (uint64_t)&v367, (cbor::CBORValue *)&v357);
            v214 = *v212;
            if (!*v212)
            {
              v215 = (uint64_t *)v212;
              std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v351, (uint64_t)&std::piecewise_construct, (uint64_t *)&v366, (uint64_t)&v365, &v368);
              v217 = (uint64_t)v367;
              v216 = (uint64_t)v368;
              *v368 = 0;
              *(_QWORD *)(v216 + 8) = 0;
              *(_QWORD *)(v216 + 16) = v217;
              *v215 = v216;
              if (*v351)
              {
                v351 = (uint64_t *)*v351;
                v216 = *v215;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v352, v216);
              ++v353;
              v214 = v368;
            }
            cbor::CBORValue::internalCleanup((uint64_t)(v214 + 8), v213);
            v219 = (int)v361;
            *((_DWORD *)v214 + 16) = (_DWORD)v361;
            switch(v219)
            {
              case 0:
              case 1:
                v220 = v362;
                goto LABEL_218;
              case 2:
              case 4:
                v214[9] = v362;
                v214[10] = 0;
                v221 = (int)v363;
                v222 = HIDWORD(v363);
                v362 = 0;
                v363 = 0;
                *((_DWORD *)v214 + 20) = v221;
                *((_DWORD *)v214 + 21) = v222;
                break;
              case 3:
                v220 = v362;
                v362 = 0;
                goto LABEL_218;
              case 5:
                v224 = v362;
                v223 = v363;
                v214[10] = (uint64_t)v363;
                v220 = (unint64_t)(v214 + 10);
                v214[9] = v224;
                v225 = v364;
                v214[11] = v364;
                if (v225)
                {
                  *((_QWORD *)v223 + 2) = v220;
                  v362 = (unint64_t)&v363;
                  v363 = 0;
                  v364 = 0;
                }
                else
                {
LABEL_218:
                  v214[9] = v220;
                }
                break;
              case 7:
                *((_DWORD *)v214 + 18) = v362;
                break;
              default:
                break;
            }
            cbor::CBORValue::internalCleanup((uint64_t)&v357, v218);
            cbor::CBORValue::internalCleanup((uint64_t)&v361, v226);
            std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v342, v343);
            goto LABEL_220;
          }
        }
        else
        {
          LODWORD(v361) = 5;
          v363 = 0;
          v364 = 0;
        }
        v362 = (unint64_t)&v363;
        goto LABEL_207;
      }
      v349 = 1;
    }
    v350 = 1;
    goto LABEL_185;
  }
LABEL_244:
  v243 = &v369;
  v369 = 0;
  v370 = 0;
  v368 = (uint64_t *)&v369;
  if (!*(_BYTE *)(v15 + 134))
    goto LABEL_285;
  if (*(_BYTE *)(v15 + 131))
  {
    v244 = a4;
    if (*(_BYTE *)(v15 + 130) != 1)
      v244 = 1;
    if (*(_BYTE *)(v15 + 130) && (v244 & 1) != 0)
      goto LABEL_269;
    LODWORD(v345) = 7;
    LODWORD(v346) = 21;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v245 = (unint64_t)v361;
    LODWORD(v361) = 3;
    v362 = v245;
    v342 = (uint64_t *)&v361;
    v246 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v368, (uint64_t)&v351, (cbor::CBORValue *)&v361);
    v248 = *v246;
    if (!*v246)
    {
      v249 = (uint64_t *)v246;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v368, (uint64_t)&std::piecewise_construct, (uint64_t *)&v342, (uint64_t)&v367, &v357);
      v250 = (uint64_t)v351;
      v251 = (uint64_t)v357;
      *v357 = 0;
      *(_QWORD *)(v251 + 8) = 0;
      *(_QWORD *)(v251 + 16) = v250;
      *v249 = v251;
      if (*v368)
      {
        v368 = (uint64_t *)*v368;
        v251 = *v249;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v369, v251);
      v370 = (WTF *)((char *)v370 + 1);
      v248 = v357;
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v248 + 8), v247);
    v253 = (int)v345;
    *((_DWORD *)v248 + 16) = (_DWORD)v345;
    switch(v253)
    {
      case 0:
      case 1:
        goto LABEL_261;
      case 2:
      case 4:
        goto LABEL_262;
      case 3:
        goto LABEL_266;
      case 5:
        goto LABEL_263;
      case 7:
        goto LABEL_265;
      default:
        goto LABEL_268;
    }
    goto LABEL_268;
  }
  if (*(_BYTE *)(v15 + 132))
  {
    LODWORD(v345) = 7;
    LODWORD(v346) = 21;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v254 = (unint64_t)v361;
    LODWORD(v361) = 3;
    v362 = v254;
    v342 = (uint64_t *)&v361;
    v255 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v368, (uint64_t)&v351, (cbor::CBORValue *)&v361);
    v248 = *v255;
    if (!*v255)
    {
      v257 = (uint64_t *)v255;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v368, (uint64_t)&std::piecewise_construct, (uint64_t *)&v342, (uint64_t)&v367, &v357);
      v258 = (uint64_t)v351;
      v259 = (uint64_t)v357;
      *v357 = 0;
      *(_QWORD *)(v259 + 8) = 0;
      *(_QWORD *)(v259 + 16) = v258;
      *v257 = v259;
      if (*v368)
      {
        v368 = (uint64_t *)*v368;
        v259 = *v257;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v369, v259);
      v370 = (WTF *)((char *)v370 + 1);
      v248 = v357;
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v248 + 8), v256);
    v260 = (int)v345;
    *((_DWORD *)v248 + 16) = (_DWORD)v345;
    switch(v260)
    {
      case 0:
      case 1:
LABEL_261:
        v261 = v346;
        goto LABEL_267;
      case 2:
      case 4:
LABEL_262:
        v248[9] = v346;
        v262 = v347;
        v346 = 0;
        v347 = 0;
        v248[10] = (uint64_t)v262;
        break;
      case 3:
LABEL_266:
        v261 = v346;
        v346 = 0;
        goto LABEL_267;
      case 5:
LABEL_263:
        v264 = v346;
        v263 = v347;
        v248[10] = (uint64_t)v347;
        v261 = (unint64_t)(v248 + 10);
        v248[9] = v264;
        v265 = v348;
        v248[11] = v348;
        if (v265)
        {
          *((_QWORD *)v263 + 2) = v261;
          v346 = (unint64_t)&v347;
          v347 = 0;
          v348 = 0;
        }
        else
        {
LABEL_267:
          v248[9] = v261;
        }
        break;
      case 7:
LABEL_265:
        *((_DWORD *)v248 + 18) = v346;
        break;
      default:
        break;
    }
LABEL_268:
    cbor::CBORValue::internalCleanup((uint64_t)&v361, v252);
    cbor::CBORValue::internalCleanup((uint64_t)&v345, v266);
  }
LABEL_269:
  if (!*(_BYTE *)(v15 + 134))
    goto LABEL_346;
  if (!a3 && *(unsigned __int8 *)(v15 + 133) <= 1u)
  {
    LODWORD(v345) = 7;
    LODWORD(v346) = 21;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v267 = (unint64_t)v361;
    LODWORD(v361) = 3;
    v362 = v267;
    v342 = (uint64_t *)&v361;
    v268 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v368, (uint64_t)&v351, (cbor::CBORValue *)&v361);
    v270 = *v268;
    if (!*v268)
    {
      v271 = (uint64_t *)v268;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v368, (uint64_t)&std::piecewise_construct, (uint64_t *)&v342, (uint64_t)&v367, &v357);
      v272 = (uint64_t)v351;
      v273 = (uint64_t)v357;
      *v357 = 0;
      *(_QWORD *)(v273 + 8) = 0;
      *(_QWORD *)(v273 + 16) = v272;
      *v271 = v273;
      if (*v368)
      {
        v368 = (uint64_t *)*v368;
        v273 = *v271;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v369, v273);
      v370 = (WTF *)((char *)v370 + 1);
      v270 = v357;
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v270 + 8), v269);
    v275 = (int)v345;
    *((_DWORD *)v270 + 16) = (_DWORD)v345;
    switch(v275)
    {
      case 0:
      case 1:
        v276 = v346;
        goto LABEL_283;
      case 2:
      case 4:
        v270[9] = v346;
        v277 = v347;
        v346 = 0;
        v347 = 0;
        v270[10] = (uint64_t)v277;
        break;
      case 3:
        v276 = v346;
        v346 = 0;
        goto LABEL_283;
      case 5:
        v279 = v346;
        v278 = v347;
        v270[10] = (uint64_t)v347;
        v276 = (unint64_t)(v270 + 10);
        v270[9] = v279;
        v280 = v348;
        v270[11] = v348;
        if (v280)
        {
          *((_QWORD *)v278 + 2) = v276;
          v346 = (unint64_t)&v347;
          v347 = 0;
          v348 = 0;
        }
        else
        {
LABEL_283:
          v270[9] = v276;
        }
        break;
      case 7:
        *((_DWORD *)v270 + 18) = v346;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v361, v274);
    cbor::CBORValue::internalCleanup((uint64_t)&v345, v281);
  }
LABEL_285:
  if (v370)
  {
    LODWORD(v345) = 5;
    v346 = (unint64_t)v368;
    v347 = v369;
    v348 = (uint64_t)v370;
    *((_QWORD *)v369 + 2) = &v347;
    v368 = (uint64_t *)&v369;
    v369 = 0;
    v370 = 0;
    v362 = 7;
    LODWORD(v361) = 0;
    v342 = (uint64_t *)&v361;
    v282 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v351, (cbor::CBORValue *)&v361);
    v243 = *v282;
    if (!*v282)
    {
      v284 = (uint64_t *)v282;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v342, (uint64_t)&v367, &v357);
      v285 = (uint64_t)v351;
      v286 = (uint64_t)v357;
      *v357 = 0;
      *(_QWORD *)(v286 + 8) = 0;
      *(_QWORD *)(v286 + 16) = v285;
      *v284 = v286;
      if (*v354)
      {
        v354 = (WTF **)*v354;
        v286 = *v284;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v286);
      v243 = (WTF **)v357;
      v356 = (WTF *)((char *)v356 + 1);
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v243 + 8), v283);
    v288 = (int)v345;
    *((_DWORD *)v243 + 16) = (_DWORD)v345;
    switch(v288)
    {
      case 0:
      case 1:
        v289 = v346;
        goto LABEL_297;
      case 2:
      case 4:
        v243[9] = (WTF *)v346;
        v290 = v347;
        v346 = 0;
        v347 = 0;
        v243[10] = v290;
        break;
      case 3:
        v289 = v346;
        v346 = 0;
        goto LABEL_297;
      case 5:
        v292 = v346;
        v291 = v347;
        v243[10] = v347;
        v289 = (unint64_t)(v243 + 10);
        v243[9] = (WTF *)v292;
        v293 = v348;
        v243[11] = (WTF *)v348;
        if (v293)
        {
          *((_QWORD *)v291 + 2) = v289;
          v346 = (unint64_t)&v347;
          v347 = 0;
          v348 = 0;
        }
        else
        {
LABEL_297:
          v243[9] = (WTF *)v289;
        }
        break;
      case 7:
        *((_DWORD *)v243 + 18) = v346;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v361, v287);
    cbor::CBORValue::internalCleanup((uint64_t)&v345, v294);
  }
  if (*((_BYTE *)a6 + 24))
  {
    LODWORD(v345) = 2;
    v346 = *((_QWORD *)a6 + 1);
    v295 = (WTF *)*((_QWORD *)a6 + 2);
    *((_QWORD *)a6 + 1) = 0;
    *((_QWORD *)a6 + 2) = 0;
    v347 = v295;
    v362 = 8;
    LODWORD(v361) = 0;
    v342 = (uint64_t *)&v361;
    v296 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v351, (cbor::CBORValue *)&v361);
    v298 = *v296;
    if (!*v296)
    {
      v299 = (uint64_t *)v296;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v342, (uint64_t)&v367, &v357);
      v300 = (uint64_t)v351;
      v301 = (uint64_t)v357;
      *v357 = 0;
      *(_QWORD *)(v301 + 8) = 0;
      *(_QWORD *)(v301 + 16) = v300;
      *v299 = v301;
      if (*v354)
      {
        v354 = (WTF **)*v354;
        v301 = *v299;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v301);
      v298 = v357;
      v356 = (WTF *)((char *)v356 + 1);
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v298 + 8), v297);
    v303 = (int)v345;
    *((_DWORD *)v298 + 16) = (_DWORD)v345;
    switch(v303)
    {
      case 0:
      case 1:
        v304 = v346;
        goto LABEL_311;
      case 2:
      case 4:
        v298[9] = v346;
        v305 = v347;
        v346 = 0;
        v347 = 0;
        v298[10] = (uint64_t)v305;
        break;
      case 3:
        v304 = v346;
        v346 = 0;
        goto LABEL_311;
      case 5:
        v307 = v346;
        v306 = v347;
        v298[10] = (uint64_t)v347;
        v304 = (unint64_t)(v298 + 10);
        v298[9] = v307;
        v308 = v348;
        v298[11] = v348;
        if (v308)
        {
          *((_QWORD *)v306 + 2) = v304;
          v346 = (unint64_t)&v347;
          v347 = 0;
          v348 = 0;
        }
        else
        {
LABEL_311:
          v298[9] = v304;
        }
        break;
      case 7:
        *((_DWORD *)v298 + 18) = v346;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v361, v302);
    cbor::CBORValue::internalCleanup((uint64_t)&v345, v309);
    if (!*((_BYTE *)a6 + 24))
      goto LABEL_346;
    v346 = *a6;
    LODWORD(v345) = v346 >> 63;
    v362 = 9;
    LODWORD(v361) = 0;
    v342 = (uint64_t *)&v361;
    v310 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v354, (uint64_t)&v351, (cbor::CBORValue *)&v361);
    v243 = *v310;
    if (!*v310)
    {
      v312 = (uint64_t *)v310;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v354, (uint64_t)&std::piecewise_construct, (uint64_t *)&v342, (uint64_t)&v367, &v357);
      v313 = (uint64_t)v351;
      v314 = (uint64_t)v357;
      *v357 = 0;
      *(_QWORD *)(v314 + 8) = 0;
      *(_QWORD *)(v314 + 16) = v313;
      *v312 = v314;
      if (*v354)
      {
        v354 = (WTF **)*v354;
        v314 = *v312;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v355, v314);
      v243 = (WTF **)v357;
      v356 = (WTF *)((char *)v356 + 1);
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v243 + 8), v311);
    v316 = (int)v345;
    *((_DWORD *)v243 + 16) = (_DWORD)v345;
    switch(v316)
    {
      case 0:
      case 1:
        v317 = v346;
        goto LABEL_324;
      case 2:
      case 4:
        v243[9] = (WTF *)v346;
        v318 = v347;
        v346 = 0;
        v347 = 0;
        v243[10] = v318;
        break;
      case 3:
        v317 = v346;
        v346 = 0;
        goto LABEL_324;
      case 5:
        v320 = v346;
        v319 = v347;
        v243[10] = v347;
        v317 = (unint64_t)(v243 + 10);
        v243[9] = (WTF *)v320;
        v321 = v348;
        v243[11] = (WTF *)v348;
        if (v321)
        {
          *((_QWORD *)v319 + 2) = v317;
          v346 = (unint64_t)&v347;
          v347 = 0;
          v348 = 0;
        }
        else
        {
LABEL_324:
          v243[9] = (WTF *)v317;
        }
        break;
      case 7:
        *((_DWORD *)v243 + 18) = v346;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v361, v315);
    cbor::CBORValue::internalCleanup((uint64_t)&v345, v322);
  }
  LODWORD(v345) = 5;
  v346 = (unint64_t)v354;
  v347 = v355;
  v348 = (uint64_t)v356;
  if (v356)
  {
    *((_QWORD *)v355 + 2) = &v347;
    v354 = &v355;
    v355 = 0;
    v356 = 0;
  }
  else
  {
    v346 = (unint64_t)&v347;
  }
  v361 = 0;
  v362 = 0;
  v357 = (uint64_t *)&v361;
  v323 = cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)&v357, (const cbor::CBORValue *)&v345, 16);
  v325 = v323;
  v326 = v361;
  if (v323)
  {
    LODWORD(v243) = HIDWORD(v362);
  }
  else if (v361)
  {
    v361 = 0;
    LODWORD(v362) = 0;
    WTF::fastFree(v326, v324);
    v326 = 0;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v345, (WTF::StringImpl *)v324);
  v327 = (WTF *)WTF::fastMalloc((WTF *)1);
  *(_QWORD *)a7 = v327;
  *(_BYTE *)v327 = 1;
  *(_QWORD *)(a7 + 8) = 0x100000001;
  if ((v325 & 1) == 0)
  {
LABEL_346:
    __break(1u);
LABEL_347:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_348;
  }
  if (!(_DWORD)v243)
    goto LABEL_342;
  v329 = v243;
  v330 = v243 + 1;
  if (v330 > 0x10)
    v331 = v243 + 1;
  else
    v331 = 16;
  if (HIDWORD(v331))
  {
LABEL_348:
    __break(0xC471u);
    JUMPOUT(0x195576AF0);
  }
  v332 = v327;
  v334 = (WTF *)WTF::fastMalloc((WTF *)v331);
  *(_DWORD *)(a7 + 8) = v331;
  *(_QWORD *)a7 = v334;
  *(_BYTE *)v334 = *(_BYTE *)v332;
  if (v334 == v332)
  {
    v334 = 0;
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
  }
  WTF::fastFree(v332, v333);
  memcpy((char *)v334 + 1, v326, v329);
  *(_DWORD *)(a7 + 12) = v330;
LABEL_342:
  if (v326)
    WTF::fastFree(v326, v328);
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v368, v369);
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v354, v355);
}

uint64_t fido::convertDescriptorToCBOR(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  char *v22;
  uint64_t *v23;
  char v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[4];
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  WTF *v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  _QWORD v53[3];
  uint64_t v54;

  v49 = 0;
  v50 = 0;
  v48 = (uint64_t *)&v49;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v44 = 3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LODWORD(v43[0]) = 3;
  v52 = v43;
  v4 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v48, (uint64_t)&v54, (cbor::CBORValue *)v43);
  v6 = *v4;
  if (!*v4)
  {
    v7 = v4;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v48, (uint64_t)&std::piecewise_construct, (uint64_t *)&v52, (uint64_t)&v51, v53);
    v8 = v54;
    v9 = v53[0];
    *(_QWORD *)v53[0] = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = v8;
    *v7 = v9;
    if (*v48)
    {
      v48 = (uint64_t *)*v48;
      v9 = *v7;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v49, v9);
    ++v50;
    v6 = v53[0];
  }
  cbor::CBORValue::internalCleanup(v6 + 64, v5);
  v11 = v44;
  *(_DWORD *)(v6 + 64) = v44;
  switch(v11)
  {
    case 0:
    case 1:
      v12 = v45;
      goto LABEL_12;
    case 2:
    case 4:
      *(_QWORD *)(v6 + 72) = v45;
      v13 = v46;
      v45 = 0;
      v46 = 0;
      *(_QWORD *)(v6 + 80) = v13;
      break;
    case 3:
      v12 = v45;
      v45 = 0;
      goto LABEL_12;
    case 5:
      v15 = v45;
      v14 = v46;
      *(_QWORD *)(v6 + 80) = v46;
      v12 = (uint64_t *)(v6 + 80);
      *(_QWORD *)(v6 + 72) = v15;
      v16 = v47;
      *(_QWORD *)(v6 + 88) = v47;
      if (v16)
      {
        *(_QWORD *)(v14 + 16) = v12;
        v45 = &v46;
        v46 = 0;
        v47 = 0;
      }
      else
      {
LABEL_12:
        *(_QWORD *)(v6 + 72) = v12;
      }
      break;
    case 7:
      *(_DWORD *)(v6 + 72) = (_DWORD)v45;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)v43, v10);
  cbor::CBORValue::internalCleanup((uint64_t)&v44, v17);
  v44 = 2;
  v18 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v18 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_35;
  }
  v43[0] = v53;
  v19 = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_2[v18])(v43, a2 + 8);
  v21 = v20;
  v45 = 0;
  LODWORD(v46) = 0;
  HIDWORD(v46) = (_DWORD)v20;
  if (!v20)
    goto LABEL_18;
  if ((unint64_t)v20 >> 32)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1955770BCLL);
  }
  v22 = (char *)v19;
  v23 = (uint64_t *)WTF::fastMalloc(v20);
  LODWORD(v46) = (_DWORD)v21;
  v45 = v23;
  do
  {
    v24 = *v22++;
    *(_BYTE *)v23 = v24;
    v23 = (uint64_t *)((char *)v23 + 1);
    v21 = (WTF *)((char *)v21 - 1);
  }
  while (v21);
LABEL_18:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LODWORD(v43[0]) = 3;
  v52 = v43;
  v25 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v48, (uint64_t)&v54, (cbor::CBORValue *)v43);
  v27 = *v25;
  if (!*v25)
  {
    v28 = v25;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v48, (uint64_t)&std::piecewise_construct, (uint64_t *)&v52, (uint64_t)&v51, v53);
    v29 = v54;
    v30 = v53[0];
    *(_QWORD *)v53[0] = 0;
    *(_QWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v30 + 16) = v29;
    *v28 = v30;
    if (*v48)
    {
      v48 = (uint64_t *)*v48;
      v30 = *v28;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v49, v30);
    ++v50;
    v27 = v53[0];
  }
  cbor::CBORValue::internalCleanup(v27 + 64, v26);
  v32 = v44;
  *(_DWORD *)(v27 + 64) = v44;
  switch(v32)
  {
    case 0:
    case 1:
      v33 = v45;
      goto LABEL_29;
    case 2:
    case 4:
      *(_QWORD *)(v27 + 72) = v45;
      v34 = v46;
      v45 = 0;
      v46 = 0;
      *(_QWORD *)(v27 + 80) = v34;
      break;
    case 3:
      v33 = v45;
      v45 = 0;
      goto LABEL_29;
    case 5:
      v36 = v45;
      v35 = v46;
      *(_QWORD *)(v27 + 80) = v46;
      v33 = (uint64_t *)(v27 + 80);
      *(_QWORD *)(v27 + 72) = v36;
      v37 = v47;
      *(_QWORD *)(v27 + 88) = v47;
      if (v37)
      {
        *(_QWORD *)(v35 + 16) = v33;
        v45 = &v46;
        v46 = 0;
        v47 = 0;
      }
      else
      {
LABEL_29:
        *(_QWORD *)(v27 + 72) = v33;
      }
      break;
    case 7:
      *(_DWORD *)(v27 + 72) = (_DWORD)v45;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)v43, v31);
  cbor::CBORValue::internalCleanup((uint64_t)&v44, v38);
  *(_DWORD *)a1 = 5;
  v39 = v49;
  *(_QWORD *)(a1 + 8) = v48;
  *(_QWORD *)(a1 + 16) = v39;
  v40 = a1 + 16;
  v41 = v50;
  *(_QWORD *)(a1 + 24) = v50;
  if (v41)
  {
    *((_QWORD *)v39 + 2) = v40;
    v48 = (uint64_t *)&v49;
    v49 = 0;
    v50 = 0;
    v39 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v40;
  }
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v48, v39);
}

uint64_t fido::encodeGetAssertionRequestAsCBOR@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  WTF **v12;
  WTF ***v13;
  WTF::StringImpl *v14;
  WTF **v15;
  uint64_t *v16;
  WTF **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;
  WTF **v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF **v28;
  WTF ***v29;
  WTF::StringImpl *v30;
  WTF **v31;
  uint64_t *v32;
  WTF **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF **v37;
  WTF *v38;
  WTF *v39;
  WTF **v40;
  WTF *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF **v48;
  _DWORD *v49;
  int v50;
  WTF **v51;
  WTF **v52;
  WTF **v53;
  WTF **v54;
  WTF **v55;
  WTF ***v56;
  WTF *v57;
  WTF **v58;
  WTF *v59;
  WTF *v60;
  WTF ***v61;
  WTF::StringImpl *v62;
  WTF **v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  int v68;
  WTF **v69;
  WTF *v70;
  WTF *v71;
  WTF **v72;
  WTF *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  WTF **v84;
  WTF ***v85;
  WTF::StringImpl *v86;
  WTF **v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  int v92;
  uint64_t v93;
  WTF *v94;
  WTF *v95;
  uint64_t v96;
  WTF *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF *v100;
  WTF *v101;
  char *v102;
  _BYTE *v103;
  char v104;
  WTF **v105;
  WTF ***v106;
  WTF::StringImpl *v107;
  WTF **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  int v113;
  uint64_t v114;
  WTF *v115;
  WTF *v116;
  uint64_t v117;
  WTF *v118;
  WTF::StringImpl *v119;
  WTF **v120;
  WTF ***v121;
  WTF::StringImpl *v122;
  WTF **v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  int v128;
  uint64_t v129;
  WTF *v130;
  WTF *v131;
  uint64_t v132;
  WTF *v133;
  WTF::StringImpl *v134;
  WTF ***v135;
  WTF::StringImpl *v136;
  WTF **v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  int v142;
  uint64_t v143;
  WTF *v144;
  WTF *v145;
  uint64_t v146;
  WTF *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF **v151;
  WTF *v152;
  WTF ***v153;
  WTF::StringImpl *v154;
  WTF **v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  int v160;
  WTF **v161;
  WTF *v162;
  WTF *v163;
  WTF **v164;
  WTF *v165;
  WTF::StringImpl *v166;
  WTF *v167;
  WTF ***v168;
  WTF::StringImpl *v169;
  WTF **v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  int v175;
  WTF **v176;
  WTF *v177;
  WTF *v178;
  WTF **v179;
  WTF *v180;
  WTF::StringImpl *v181;
  WTF ***v182;
  WTF::StringImpl *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  int v188;
  WTF *v189;
  WTF *v190;
  WTF *v191;
  WTF *v192;
  WTF *v193;
  WTF::StringImpl *v194;
  WTF *v195;
  WTF ***v196;
  WTF::StringImpl *v197;
  WTF **v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  WTF::StringImpl *v202;
  int v203;
  WTF **v204;
  WTF *v205;
  WTF *v206;
  WTF **v207;
  WTF *v208;
  WTF::StringImpl *v209;
  WTF ***v210;
  WTF::StringImpl *v211;
  WTF **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  int v217;
  WTF **v218;
  WTF *v219;
  WTF *v220;
  WTF **v221;
  WTF *v222;
  WTF::StringImpl *v223;
  int v224;
  void *v225;
  char v226;
  WTF *v227;
  WTF *v228;
  void *v229;
  size_t v230;
  unint64_t v231;
  unint64_t v232;
  WTF *v233;
  void *v234;
  WTF *v235;
  WTF **v237;
  uint64_t v238;
  WTF **v239;
  WTF *v240;
  WTF *v241;
  WTF::StringImpl *v242;
  WTF **v243;
  WTF *v244;
  WTF *v245;
  char v246;
  char v247;
  WTF **v248;
  WTF *v249;
  WTF *v250;
  WTF *v251;
  uint64_t v252;
  WTF *v253;
  WTF *v254;
  WTF **v255;
  WTF *v256;
  WTF *v257;
  char v258;
  WTF ***v259;
  WTF ***v260;
  WTF **v261;
  WTF *v262;
  WTF *v263;

  v256 = 0;
  v257 = 0;
  v255 = &v256;
  LODWORD(v242) = 3;
  v12 = *(WTF ***)(a2 + 24);
  if (v12)
    *(_DWORD *)v12 += 2;
  v243 = v12;
  v252 = 1;
  LODWORD(v251) = 0;
  v248 = &v251;
  v13 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v255, (uint64_t)&v261, (cbor::CBORValue *)&v251);
  v15 = *v13;
  if (!*v13)
  {
    v16 = (uint64_t *)v13;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v255, (uint64_t)&std::piecewise_construct, (uint64_t *)&v248, (uint64_t)&v239, &v237);
    v17 = v261;
    v18 = (uint64_t)v237;
    *v237 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = v17;
    *v16 = v18;
    if (*v255)
    {
      v255 = (WTF **)*v255;
      v18 = *v16;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v256, v18);
    v257 = (WTF *)((char *)v257 + 1);
    v15 = v237;
  }
  cbor::CBORValue::internalCleanup((uint64_t)(v15 + 8), v14);
  v20 = (int)v242;
  *((_DWORD *)v15 + 16) = (_DWORD)v242;
  switch(v20)
  {
    case 0:
    case 1:
      v21 = v243;
      goto LABEL_14;
    case 2:
    case 4:
      v15[9] = (WTF *)v243;
      v22 = v244;
      v243 = 0;
      v244 = 0;
      v15[10] = v22;
      break;
    case 3:
      v21 = v243;
      v243 = 0;
      goto LABEL_14;
    case 5:
      v24 = v243;
      v23 = v244;
      v15[10] = v244;
      v21 = v15 + 10;
      v15[9] = (WTF *)v24;
      v25 = v245;
      v15[11] = v245;
      if (v25)
      {
        *((_QWORD *)v23 + 2) = v21;
        v243 = &v244;
        v244 = 0;
        v245 = 0;
      }
      else
      {
LABEL_14:
        v15[9] = (WTF *)v21;
      }
      break;
    case 7:
      *((_DWORD *)v15 + 18) = (_DWORD)v243;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v251, v19);
  cbor::CBORValue::internalCleanup((uint64_t)&v242, v26);
  LODWORD(v242) = 2;
  v27 = (WTF *)*(unsigned int *)(a1 + 12);
  v243 = 0;
  LODWORD(v244) = 0;
  HIDWORD(v244) = (_DWORD)v27;
  if ((_DWORD)v27)
  {
    v28 = (WTF **)WTF::fastMalloc(v27);
    LODWORD(v244) = (_DWORD)v27;
    v243 = v28;
    memcpy(v28, *(const void **)a1, *(unsigned int *)(a1 + 12));
  }
  v252 = 2;
  LODWORD(v251) = 0;
  v248 = &v251;
  v29 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v255, (uint64_t)&v261, (cbor::CBORValue *)&v251);
  v31 = *v29;
  if (!*v29)
  {
    v32 = (uint64_t *)v29;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v255, (uint64_t)&std::piecewise_construct, (uint64_t *)&v248, (uint64_t)&v239, &v237);
    v33 = v261;
    v34 = (uint64_t)v237;
    *v237 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 16) = v33;
    *v32 = v34;
    if (*v255)
    {
      v255 = (WTF **)*v255;
      v34 = *v32;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v256, v34);
    v257 = (WTF *)((char *)v257 + 1);
    v31 = v237;
  }
  cbor::CBORValue::internalCleanup((uint64_t)(v31 + 8), v30);
  v36 = (int)v242;
  *((_DWORD *)v31 + 16) = (_DWORD)v242;
  switch(v36)
  {
    case 0:
    case 1:
      v37 = v243;
      goto LABEL_28;
    case 2:
    case 4:
      v31[9] = (WTF *)v243;
      v38 = v244;
      v243 = 0;
      v244 = 0;
      v31[10] = v38;
      break;
    case 3:
      v37 = v243;
      v243 = 0;
      goto LABEL_28;
    case 5:
      v40 = v243;
      v39 = v244;
      v31[10] = v244;
      v37 = v31 + 10;
      v31[9] = (WTF *)v40;
      v41 = v245;
      v31[11] = v245;
      if (v41)
      {
        *((_QWORD *)v39 + 2) = v37;
        v243 = &v244;
        v244 = 0;
        v245 = 0;
      }
      else
      {
LABEL_28:
        v31[9] = (WTF *)v37;
      }
      break;
    case 7:
      *((_DWORD *)v31 + 18) = (_DWORD)v243;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v251, v35);
  cbor::CBORValue::internalCleanup((uint64_t)&v242, v42);
  v43 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v43)
  {
    v261 = 0;
    v262 = 0;
    v44 = *(_QWORD *)(a2 + 32);
    v45 = 40 * v43;
    do
    {
      fido::convertDescriptorToCBOR((uint64_t)&v242, v44);
      v47 = HIDWORD(v262);
      if (HIDWORD(v262) == (_DWORD)v262)
      {
        WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,cbor::CBORValue>((uint64_t)&v261, (unint64_t)&v242);
      }
      else
      {
        v48 = v261;
        v49 = &v261[4 * HIDWORD(v262)];
        v50 = (int)v242;
        *v49 = (_DWORD)v242;
        switch(v50)
        {
          case 0:
          case 1:
            v51 = v243;
            v52 = &v48[4 * v47];
            goto LABEL_40;
          case 2:
          case 4:
            v53 = &v48[4 * v47];
            v53[1] = 0;
            v53[2] = 0;
            v54 = v243;
            v243 = 0;
            v53[1] = (WTF *)v54;
            LODWORD(v54) = (_DWORD)v244;
            LODWORD(v244) = 0;
            *((_DWORD *)v53 + 4) = (_DWORD)v54;
            LODWORD(v53) = HIDWORD(v244);
            HIDWORD(v244) = 0;
            v49[5] = (_DWORD)v53;
            break;
          case 3:
            v51 = v243;
            v52 = &v48[4 * v47];
            v243 = 0;
LABEL_40:
            v52[1] = (WTF *)v51;
            break;
          case 5:
            v55 = &v48[4 * v47];
            v55[1] = (WTF *)v243;
            v56 = (WTF ***)(v55 + 1);
            v57 = v244;
            v55[2] = v244;
            v58 = v55 + 2;
            v59 = v245;
            v58[1] = v245;
            if (v59)
            {
              *((_QWORD *)v57 + 2) = v58;
              v243 = &v244;
              v244 = 0;
              v245 = 0;
            }
            else
            {
              *v56 = v58;
            }
            break;
          case 7:
            LODWORD(v48[4 * v47 + 1]) = (_DWORD)v243;
            break;
          default:
            break;
        }
        ++HIDWORD(v262);
      }
      cbor::CBORValue::internalCleanup((uint64_t)&v242, v46);
      v44 += 40;
      v45 -= 40;
    }
    while (v45);
    LODWORD(v242) = 4;
    v243 = v261;
    v60 = v262;
    v261 = 0;
    v262 = 0;
    v244 = v60;
    v252 = 3;
    LODWORD(v251) = 0;
    v239 = &v251;
    v61 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v255, (uint64_t)&v248, (cbor::CBORValue *)&v251);
    v63 = *v61;
    if (!*v61)
    {
      v64 = (uint64_t *)v61;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v255, (uint64_t)&std::piecewise_construct, (uint64_t *)&v239, (uint64_t)&v260, &v237);
      v65 = (uint64_t)v248;
      v66 = (uint64_t)v237;
      *v237 = 0;
      *(_QWORD *)(v66 + 8) = 0;
      *(_QWORD *)(v66 + 16) = v65;
      *v64 = v66;
      if (*v255)
      {
        v255 = (WTF **)*v255;
        v66 = *v64;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v256, v66);
      v257 = (WTF *)((char *)v257 + 1);
      v63 = v237;
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v63 + 8), v62);
    v68 = (int)v242;
    *((_DWORD *)v63 + 16) = (_DWORD)v242;
    switch(v68)
    {
      case 0:
      case 1:
        v69 = v243;
        goto LABEL_56;
      case 2:
      case 4:
        v63[9] = (WTF *)v243;
        v70 = v244;
        v243 = 0;
        v244 = 0;
        v63[10] = v70;
        break;
      case 3:
        v69 = v243;
        v243 = 0;
        goto LABEL_56;
      case 5:
        v72 = v243;
        v71 = v244;
        v63[10] = v244;
        v69 = v63 + 10;
        v63[9] = (WTF *)v72;
        v73 = v245;
        v63[11] = v245;
        if (v73)
        {
          *((_QWORD *)v71 + 2) = v69;
          v243 = &v244;
          v244 = 0;
          v245 = 0;
        }
        else
        {
LABEL_56:
          v63[9] = (WTF *)v69;
        }
        break;
      case 7:
        *((_DWORD *)v63 + 18) = (_DWORD)v243;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v251, v67);
    cbor::CBORValue::internalCleanup((uint64_t)&v242, v74);
    if (HIDWORD(v262))
    {
      v76 = (uint64_t)v261;
      v77 = 32 * HIDWORD(v262);
      do
      {
        cbor::CBORValue::internalCleanup(v76, v75);
        v76 += 32;
        v77 -= 32;
      }
      while (v77);
    }
    v78 = (WTF *)v261;
    if (v261)
    {
      v261 = 0;
      LODWORD(v262) = 0;
      WTF::fastFree(v78, v75);
    }
  }
  if (*(_DWORD *)(a4 + 12) && *(_BYTE *)(a2 + 200))
  {
    v249 = 0;
    v250 = 0;
    v248 = &v249;
    LOBYTE(v242) = 0;
    v247 = 0;
    if (!*(_BYTE *)(a2 + 112))
    {
LABEL_130:
      LODWORD(v251) = 5;
      v252 = (uint64_t)v248;
      v253 = v249;
      v254 = v250;
      if (v250)
      {
        *((_QWORD *)v249 + 2) = &v253;
        v248 = &v249;
        v249 = 0;
        v250 = 0;
      }
      else
      {
        v252 = (uint64_t)&v253;
      }
      v238 = 4;
      LODWORD(v237) = 0;
      v260 = &v237;
      v135 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v255, (uint64_t)&v239, (cbor::CBORValue *)&v237);
      v137 = *v135;
      if (!*v135)
      {
        v138 = (uint64_t *)v135;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v255, (uint64_t)&std::piecewise_construct, (uint64_t *)&v260, (uint64_t)&v259, &v261);
        v139 = (uint64_t)v239;
        v140 = (uint64_t)v261;
        *v261 = 0;
        *(_QWORD *)(v140 + 8) = 0;
        *(_QWORD *)(v140 + 16) = v139;
        *v138 = v140;
        if (*v255)
        {
          v255 = (WTF **)*v255;
          v140 = *v138;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v256, v140);
        v257 = (WTF *)((char *)v257 + 1);
        v137 = v261;
      }
      cbor::CBORValue::internalCleanup((uint64_t)(v137 + 8), v136);
      v142 = (int)v251;
      *((_DWORD *)v137 + 16) = (_DWORD)v251;
      switch(v142)
      {
        case 0:
        case 1:
          v143 = v252;
          goto LABEL_144;
        case 2:
        case 4:
          v137[9] = (WTF *)v252;
          v144 = v253;
          v252 = 0;
          v253 = 0;
          v137[10] = v144;
          break;
        case 3:
          v143 = v252;
          v252 = 0;
          goto LABEL_144;
        case 5:
          v146 = v252;
          v145 = v253;
          v137[10] = v253;
          v143 = (uint64_t)(v137 + 10);
          v137[9] = (WTF *)v146;
          v147 = v254;
          v137[11] = v254;
          if (v147)
          {
            *((_QWORD *)v145 + 2) = v143;
            v252 = (uint64_t)&v253;
            v253 = 0;
            v254 = 0;
          }
          else
          {
LABEL_144:
            v137[9] = (WTF *)v143;
          }
          break;
        case 7:
          *((_DWORD *)v137 + 18) = v252;
          break;
        default:
          break;
      }
      cbor::CBORValue::internalCleanup((uint64_t)&v237, v141);
      cbor::CBORValue::internalCleanup((uint64_t)&v251, v148);
      if (v247)
      {
        if (v246)
        {
          if ((_DWORD)v245 != -1)
            ((void (*)(WTF **, WTF **))off_1E336C680[v245])(&v251, &v244);
          LODWORD(v245) = -1;
        }
        v150 = v242;
        v242 = 0;
        if (v150)
        {
          if (*(_DWORD *)v150 == 2)
            WTF::StringImpl::destroy(v150, v149);
          else
            *(_DWORD *)v150 -= 2;
        }
      }
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v248, v249);
      goto LABEL_154;
    }
    v79 = *(WTF::StringImpl **)(a2 + 72);
    if (v79)
      *(_DWORD *)v79 += 2;
    v242 = v79;
    LOWORD(v243) = *(_WORD *)(a2 + 80);
    LOBYTE(v244) = 0;
    v246 = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      LODWORD(v245) = -1;
      v80 = *(unsigned int *)(a2 + 96);
      if ((_DWORD)v80 != -1)
      {
        ((void (*)(WTF **, WTF **, uint64_t))off_1E336C690[v80])(&v251, &v244, a2 + 88);
        LODWORD(v245) = v80;
        v81 = *(_DWORD *)(a4 + 12);
        v246 = 1;
        v247 = 1;
        if (!v81)
          goto LABEL_130;
LABEL_73:
        v82 = 0;
        while ((MEMORY[0x19AEA53F4](*(_QWORD *)(*(_QWORD *)a4 + 8 * v82), "largeBlob", 9) & 1) == 0)
        {
          if (++v82 >= (unint64_t)*(unsigned int *)(a4 + 12))
            goto LABEL_130;
        }
        v240 = 0;
        v241 = 0;
        v239 = &v240;
        if (!v247)
          goto LABEL_242;
        if (BYTE1(v243))
        {
          if ((_BYTE)v243)
            v83 = 21;
          else
            v83 = 20;
          LODWORD(v251) = 7;
          LODWORD(v252) = v83;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v84 = v237;
          LODWORD(v237) = 3;
          v238 = (uint64_t)v84;
          v259 = &v237;
          v85 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v239, (uint64_t)&v260, (cbor::CBORValue *)&v237);
          v87 = *v85;
          if (!*v85)
          {
            v88 = (uint64_t *)v85;
            std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v239, (uint64_t)&std::piecewise_construct, (uint64_t *)&v259, (uint64_t)&v258, &v261);
            v90 = (uint64_t)v260;
            v89 = (uint64_t)v261;
            *v261 = 0;
            *(_QWORD *)(v89 + 8) = 0;
            *(_QWORD *)(v89 + 16) = v90;
            *v88 = v89;
            if (*v239)
            {
              v239 = (WTF **)*v239;
              v89 = *v88;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v240, v89);
            v241 = (WTF *)((char *)v241 + 1);
            v87 = v261;
          }
          cbor::CBORValue::internalCleanup((uint64_t)(v87 + 8), v86);
          v92 = (int)v251;
          *((_DWORD *)v87 + 16) = (_DWORD)v251;
          switch(v92)
          {
            case 0:
            case 1:
              v93 = v252;
              goto LABEL_93;
            case 2:
            case 4:
              v87[9] = (WTF *)v252;
              v94 = v253;
              v252 = 0;
              v253 = 0;
              v87[10] = v94;
              break;
            case 3:
              v93 = v252;
              v252 = 0;
              goto LABEL_93;
            case 5:
              v96 = v252;
              v95 = v253;
              v87[10] = v253;
              v93 = (uint64_t)(v87 + 10);
              v87[9] = (WTF *)v96;
              v97 = v254;
              v87[11] = v254;
              if (v97)
              {
                *((_QWORD *)v95 + 2) = v93;
                v252 = (uint64_t)&v253;
                v253 = 0;
                v254 = 0;
              }
              else
              {
LABEL_93:
                v87[9] = (WTF *)v93;
              }
              break;
            case 7:
              *((_DWORD *)v87 + 18) = v252;
              break;
            default:
              break;
          }
          cbor::CBORValue::internalCleanup((uint64_t)&v237, v91);
          cbor::CBORValue::internalCleanup((uint64_t)&v251, v98);
          if (!v247)
            goto LABEL_242;
        }
        if (v246)
        {
          LODWORD(v251) = 2;
          if ((_DWORD)v245 == -1)
          {
LABEL_243:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_244;
          }
          v237 = (WTF **)&v261;
          v99 = ((uint64_t (*)(WTF ***, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_2[v245])(&v237, &v244);
          v101 = v100;
          v252 = 0;
          LODWORD(v253) = 0;
          HIDWORD(v253) = (_DWORD)v100;
          if (v100)
          {
            if ((unint64_t)v100 >> 32)
            {
              __break(0xC471u);
              JUMPOUT(0x1955786DCLL);
            }
            v102 = (char *)v99;
            v103 = (_BYTE *)WTF::fastMalloc(v100);
            LODWORD(v253) = (_DWORD)v101;
            v252 = (uint64_t)v103;
            do
            {
              v104 = *v102++;
              *v103++ = v104;
              v101 = (WTF *)((char *)v101 - 1);
            }
            while (v101);
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v105 = v237;
          LODWORD(v237) = 3;
          v238 = (uint64_t)v105;
          v259 = &v237;
          v106 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v239, (uint64_t)&v260, (cbor::CBORValue *)&v237);
          v108 = *v106;
          if (!*v106)
          {
            v109 = (uint64_t *)v106;
            std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v239, (uint64_t)&std::piecewise_construct, (uint64_t *)&v259, (uint64_t)&v258, &v261);
            v111 = (uint64_t)v260;
            v110 = (uint64_t)v261;
            *v261 = 0;
            *(_QWORD *)(v110 + 8) = 0;
            *(_QWORD *)(v110 + 16) = v111;
            *v109 = v110;
            if (*v239)
            {
              v239 = (WTF **)*v239;
              v110 = *v109;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v240, v110);
            v241 = (WTF *)((char *)v241 + 1);
            v108 = v261;
          }
          cbor::CBORValue::internalCleanup((uint64_t)(v108 + 8), v107);
          v113 = (int)v251;
          *((_DWORD *)v108 + 16) = (_DWORD)v251;
          switch(v113)
          {
            case 0:
            case 1:
              v114 = v252;
              goto LABEL_112;
            case 2:
            case 4:
              v108[9] = (WTF *)v252;
              v115 = v253;
              v252 = 0;
              v253 = 0;
              v108[10] = v115;
              break;
            case 3:
              v114 = v252;
              v252 = 0;
              goto LABEL_112;
            case 5:
              v117 = v252;
              v116 = v253;
              v108[10] = v253;
              v114 = (uint64_t)(v108 + 10);
              v108[9] = (WTF *)v117;
              v118 = v254;
              v108[11] = v254;
              if (v118)
              {
                *((_QWORD *)v116 + 2) = v114;
                v252 = (uint64_t)&v253;
                v253 = 0;
                v254 = 0;
              }
              else
              {
LABEL_112:
                v108[9] = (WTF *)v114;
              }
              break;
            case 7:
              *((_DWORD *)v108 + 18) = v252;
              break;
            default:
              break;
          }
          cbor::CBORValue::internalCleanup((uint64_t)&v237, v112);
          cbor::CBORValue::internalCleanup((uint64_t)&v251, v119);
        }
        LODWORD(v251) = 5;
        v252 = (uint64_t)v239;
        v253 = v240;
        v254 = v241;
        if (v241)
        {
          *((_QWORD *)v240 + 2) = &v253;
          v239 = &v240;
          v240 = 0;
          v241 = 0;
        }
        else
        {
          v252 = (uint64_t)&v253;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v120 = v237;
        LODWORD(v237) = 3;
        v238 = (uint64_t)v120;
        v259 = &v237;
        v121 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v248, (uint64_t)&v260, (cbor::CBORValue *)&v237);
        v123 = *v121;
        if (!*v121)
        {
          v124 = (uint64_t *)v121;
          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v248, (uint64_t)&std::piecewise_construct, (uint64_t *)&v259, (uint64_t)&v258, &v261);
          v126 = (uint64_t)v260;
          v125 = (uint64_t)v261;
          *v261 = 0;
          *(_QWORD *)(v125 + 8) = 0;
          *(_QWORD *)(v125 + 16) = v126;
          *v124 = v125;
          if (*v248)
          {
            v248 = (WTF **)*v248;
            v125 = *v124;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v249, v125);
          v250 = (WTF *)((char *)v250 + 1);
          v123 = v261;
        }
        cbor::CBORValue::internalCleanup((uint64_t)(v123 + 8), v122);
        v128 = (int)v251;
        *((_DWORD *)v123 + 16) = (_DWORD)v251;
        switch(v128)
        {
          case 0:
          case 1:
            v129 = v252;
            goto LABEL_128;
          case 2:
          case 4:
            v123[9] = (WTF *)v252;
            v130 = v253;
            v252 = 0;
            v253 = 0;
            v123[10] = v130;
            break;
          case 3:
            v129 = v252;
            v252 = 0;
            goto LABEL_128;
          case 5:
            v132 = v252;
            v131 = v253;
            v123[10] = v253;
            v129 = (uint64_t)(v123 + 10);
            v123[9] = (WTF *)v132;
            v133 = v254;
            v123[11] = v254;
            if (v133)
            {
              *((_QWORD *)v131 + 2) = v129;
              v252 = (uint64_t)&v253;
              v253 = 0;
              v254 = 0;
            }
            else
            {
LABEL_128:
              v123[9] = (WTF *)v129;
            }
            break;
          case 7:
            *((_DWORD *)v123 + 18) = v252;
            break;
          default:
            break;
        }
        cbor::CBORValue::internalCleanup((uint64_t)&v237, v127);
        cbor::CBORValue::internalCleanup((uint64_t)&v251, v134);
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v239, v240);
        goto LABEL_130;
      }
      v246 = 1;
    }
    v247 = 1;
    goto LABEL_73;
  }
LABEL_154:
  v262 = 0;
  v263 = 0;
  v151 = &v262;
  v261 = &v262;
  if (!a3 && *(unsigned __int8 *)(a2 + 48) <= 1u)
  {
    LODWORD(v242) = 7;
    LODWORD(v243) = 21;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v152 = v251;
    LODWORD(v251) = 3;
    v252 = (uint64_t)v152;
    v239 = &v251;
    v153 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v261, (uint64_t)&v248, (cbor::CBORValue *)&v251);
    v155 = *v153;
    if (!*v153)
    {
      v156 = (uint64_t *)v153;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v261, (uint64_t)&std::piecewise_construct, (uint64_t *)&v239, (uint64_t)&v260, &v237);
      v157 = (uint64_t)v248;
      v158 = (uint64_t)v237;
      *v237 = 0;
      *(_QWORD *)(v158 + 8) = 0;
      *(_QWORD *)(v158 + 16) = v157;
      *v156 = v158;
      if (*v261)
      {
        v261 = (WTF **)*v261;
        v158 = *v156;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v262, v158);
      v263 = (WTF *)((char *)v263 + 1);
      v155 = v237;
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v155 + 8), v154);
    v160 = (int)v242;
    *((_DWORD *)v155 + 16) = (_DWORD)v242;
    switch(v160)
    {
      case 0:
      case 1:
        v161 = v243;
        goto LABEL_167;
      case 2:
      case 4:
        v155[9] = (WTF *)v243;
        v162 = v244;
        v243 = 0;
        v244 = 0;
        v155[10] = v162;
        break;
      case 3:
        v161 = v243;
        v243 = 0;
        goto LABEL_167;
      case 5:
        v164 = v243;
        v163 = v244;
        v155[10] = v244;
        v161 = v155 + 10;
        v155[9] = (WTF *)v164;
        v165 = v245;
        v155[11] = v245;
        if (v165)
        {
          *((_QWORD *)v163 + 2) = v161;
          v243 = &v244;
          v244 = 0;
          v245 = 0;
        }
        else
        {
LABEL_167:
          v155[9] = (WTF *)v161;
        }
        break;
      case 7:
        *((_DWORD *)v155 + 18) = (_DWORD)v243;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v251, v159);
    cbor::CBORValue::internalCleanup((uint64_t)&v242, v166);
  }
  LODWORD(v242) = 7;
  LODWORD(v243) = 21;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v167 = v251;
  LODWORD(v251) = 3;
  v252 = (uint64_t)v167;
  v239 = &v251;
  v168 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v261, (uint64_t)&v248, (cbor::CBORValue *)&v251);
  v170 = *v168;
  if (!*v168)
  {
    v171 = (uint64_t *)v168;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v261, (uint64_t)&std::piecewise_construct, (uint64_t *)&v239, (uint64_t)&v260, &v237);
    v172 = (uint64_t)v248;
    v173 = (uint64_t)v237;
    *v237 = 0;
    *(_QWORD *)(v173 + 8) = 0;
    *(_QWORD *)(v173 + 16) = v172;
    *v171 = v173;
    if (*v261)
    {
      v261 = (WTF **)*v261;
      v173 = *v171;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v262, v173);
    v263 = (WTF *)((char *)v263 + 1);
    v170 = v237;
  }
  cbor::CBORValue::internalCleanup((uint64_t)(v170 + 8), v169);
  v175 = (int)v242;
  *((_DWORD *)v170 + 16) = (_DWORD)v242;
  switch(v175)
  {
    case 0:
    case 1:
      v176 = v243;
      goto LABEL_180;
    case 2:
    case 4:
      v170[9] = (WTF *)v243;
      v177 = v244;
      v243 = 0;
      v244 = 0;
      v170[10] = v177;
      break;
    case 3:
      v176 = v243;
      v243 = 0;
      goto LABEL_180;
    case 5:
      v179 = v243;
      v178 = v244;
      v170[10] = v244;
      v176 = v170 + 10;
      v170[9] = (WTF *)v179;
      v180 = v245;
      v170[11] = v245;
      if (v180)
      {
        *((_QWORD *)v178 + 2) = v176;
        v243 = &v244;
        v244 = 0;
        v245 = 0;
      }
      else
      {
LABEL_180:
        v170[9] = (WTF *)v176;
      }
      break;
    case 7:
      *((_DWORD *)v170 + 18) = (_DWORD)v243;
      break;
    default:
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v251, v174);
  cbor::CBORValue::internalCleanup((uint64_t)&v242, v181);
  if (v263)
  {
    LODWORD(v242) = 5;
    v243 = v261;
    v244 = v262;
    v245 = v263;
    *((_QWORD *)v262 + 2) = &v244;
    v261 = &v262;
    v262 = 0;
    v263 = 0;
    v252 = 5;
    LODWORD(v251) = 0;
    v239 = &v251;
    v182 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v255, (uint64_t)&v248, (cbor::CBORValue *)&v251);
    v151 = *v182;
    if (!*v182)
    {
      v184 = (uint64_t *)v182;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v255, (uint64_t)&std::piecewise_construct, (uint64_t *)&v239, (uint64_t)&v260, &v237);
      v185 = (uint64_t)v248;
      v186 = (uint64_t)v237;
      *v237 = 0;
      *(_QWORD *)(v186 + 8) = 0;
      *(_QWORD *)(v186 + 16) = v185;
      *v184 = v186;
      if (*v255)
      {
        v255 = (WTF **)*v255;
        v186 = *v184;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v256, v186);
      v257 = (WTF *)((char *)v257 + 1);
      v151 = v237;
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v151 + 8), v183);
    v188 = (int)v242;
    *((_DWORD *)v151 + 16) = (_DWORD)v242;
    switch(v188)
    {
      case 0:
      case 1:
        v189 = (WTF *)v243;
        goto LABEL_193;
      case 2:
      case 4:
        v151[9] = (WTF *)v243;
        v190 = v244;
        v243 = 0;
        v244 = 0;
        v151[10] = v190;
        break;
      case 3:
        v189 = (WTF *)v243;
        v243 = 0;
        goto LABEL_193;
      case 5:
        v192 = (WTF *)v243;
        v191 = v244;
        v151[10] = v244;
        v189 = (WTF *)(v151 + 10);
        v151[9] = v192;
        v193 = v245;
        v151[11] = v245;
        if (v193)
        {
          *((_QWORD *)v191 + 2) = v189;
          v243 = &v244;
          v244 = 0;
          v245 = 0;
        }
        else
        {
LABEL_193:
          v151[9] = v189;
        }
        break;
      case 7:
        *((_DWORD *)v151 + 18) = (_DWORD)v243;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v251, v187);
    cbor::CBORValue::internalCleanup((uint64_t)&v242, v194);
  }
  if (*((_BYTE *)a5 + 24))
  {
    LODWORD(v242) = 2;
    v243 = (WTF **)*((_QWORD *)a5 + 1);
    v195 = (WTF *)*((_QWORD *)a5 + 2);
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
    v244 = v195;
    v252 = 6;
    LODWORD(v251) = 0;
    v239 = &v251;
    v196 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v255, (uint64_t)&v248, (cbor::CBORValue *)&v251);
    v198 = *v196;
    if (!*v196)
    {
      v199 = (uint64_t *)v196;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v255, (uint64_t)&std::piecewise_construct, (uint64_t *)&v239, (uint64_t)&v260, &v237);
      v200 = (uint64_t)v248;
      v201 = (uint64_t)v237;
      *v237 = 0;
      *(_QWORD *)(v201 + 8) = 0;
      *(_QWORD *)(v201 + 16) = v200;
      *v199 = v201;
      if (*v255)
      {
        v255 = (WTF **)*v255;
        v201 = *v199;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v256, v201);
      v257 = (WTF *)((char *)v257 + 1);
      v198 = v237;
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v198 + 8), v197);
    v203 = (int)v242;
    *((_DWORD *)v198 + 16) = (_DWORD)v242;
    switch(v203)
    {
      case 0:
      case 1:
        v204 = v243;
        goto LABEL_207;
      case 2:
      case 4:
        v198[9] = (WTF *)v243;
        v205 = v244;
        v243 = 0;
        v244 = 0;
        v198[10] = v205;
        break;
      case 3:
        v204 = v243;
        v243 = 0;
        goto LABEL_207;
      case 5:
        v207 = v243;
        v206 = v244;
        v198[10] = v244;
        v204 = v198 + 10;
        v198[9] = (WTF *)v207;
        v208 = v245;
        v198[11] = v245;
        if (v208)
        {
          *((_QWORD *)v206 + 2) = v204;
          v243 = &v244;
          v244 = 0;
          v245 = 0;
        }
        else
        {
LABEL_207:
          v198[9] = (WTF *)v204;
        }
        break;
      case 7:
        *((_DWORD *)v198 + 18) = (_DWORD)v243;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v251, v202);
    cbor::CBORValue::internalCleanup((uint64_t)&v242, v209);
    if (!*((_BYTE *)a5 + 24))
      goto LABEL_242;
    v243 = (WTF **)*a5;
    LODWORD(v242) = (unint64_t)v243 >> 63;
    v252 = 7;
    LODWORD(v251) = 0;
    v239 = &v251;
    v210 = (WTF ***)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v255, (uint64_t)&v248, (cbor::CBORValue *)&v251);
    v212 = *v210;
    if (!*v210)
    {
      v213 = (uint64_t *)v210;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v255, (uint64_t)&std::piecewise_construct, (uint64_t *)&v239, (uint64_t)&v260, &v237);
      v214 = (uint64_t)v248;
      v215 = (uint64_t)v237;
      *v237 = 0;
      *(_QWORD *)(v215 + 8) = 0;
      *(_QWORD *)(v215 + 16) = v214;
      *v213 = v215;
      if (*v255)
      {
        v255 = (WTF **)*v255;
        v215 = *v213;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v256, v215);
      v257 = (WTF *)((char *)v257 + 1);
      v212 = v237;
    }
    cbor::CBORValue::internalCleanup((uint64_t)(v212 + 8), v211);
    v217 = (int)v242;
    *((_DWORD *)v212 + 16) = (_DWORD)v242;
    switch(v217)
    {
      case 0:
      case 1:
        v218 = v243;
        goto LABEL_220;
      case 2:
      case 4:
        v212[9] = (WTF *)v243;
        v219 = v244;
        v243 = 0;
        v244 = 0;
        v212[10] = v219;
        break;
      case 3:
        v218 = v243;
        v243 = 0;
        goto LABEL_220;
      case 5:
        v221 = v243;
        v220 = v244;
        v212[10] = v244;
        v218 = v212 + 10;
        v212[9] = (WTF *)v221;
        v222 = v245;
        v212[11] = v245;
        if (v222)
        {
          *((_QWORD *)v220 + 2) = v218;
          v243 = &v244;
          v244 = 0;
          v245 = 0;
        }
        else
        {
LABEL_220:
          v212[9] = (WTF *)v218;
        }
        break;
      case 7:
        *((_DWORD *)v212 + 18) = (_DWORD)v243;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v251, v216);
    cbor::CBORValue::internalCleanup((uint64_t)&v242, v223);
  }
  LODWORD(v242) = 5;
  v243 = v255;
  v244 = v256;
  v245 = v257;
  if (v257)
  {
    *((_QWORD *)v256 + 2) = &v244;
    v255 = &v256;
    v256 = 0;
    v257 = 0;
  }
  else
  {
    v243 = &v244;
  }
  v251 = 0;
  v252 = 0;
  v237 = &v251;
  v224 = cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)&v237, (const cbor::CBORValue *)&v242, 16);
  v226 = v224;
  v227 = v251;
  if (v224)
  {
    LODWORD(v151) = HIDWORD(v252);
  }
  else if (v251)
  {
    v251 = 0;
    LODWORD(v252) = 0;
    WTF::fastFree(v227, v225);
    v227 = 0;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v242, (WTF::StringImpl *)v225);
  v228 = (WTF *)WTF::fastMalloc((WTF *)1);
  *(_QWORD *)a6 = v228;
  *(_BYTE *)v228 = 2;
  *(_QWORD *)(a6 + 8) = 0x100000001;
  if ((v226 & 1) == 0)
  {
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }
  if (!(_DWORD)v151)
    goto LABEL_238;
  v230 = v151;
  v231 = v151 + 1;
  if (v231 > 0x10)
    v232 = v151 + 1;
  else
    v232 = 16;
  if (HIDWORD(v232))
  {
LABEL_244:
    __break(0xC471u);
    JUMPOUT(0x1955786D4);
  }
  v233 = v228;
  v235 = (WTF *)WTF::fastMalloc((WTF *)v232);
  *(_DWORD *)(a6 + 8) = v232;
  *(_QWORD *)a6 = v235;
  *(_BYTE *)v235 = *(_BYTE *)v233;
  if (v235 == v233)
  {
    v235 = 0;
    *(_QWORD *)a6 = 0;
    *(_DWORD *)(a6 + 8) = 0;
  }
  WTF::fastFree(v233, v234);
  memcpy((char *)v235 + 1, v227, v230);
  *(_DWORD *)(a6 + 12) = v231;
LABEL_238:
  if (v227)
    WTF::fastFree(v227, v229);
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v261, v262);
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v255, v256);
}

double fido::encodeEmptyAuthenticatorRequest@<D0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  _BYTE *v4;
  double result;

  v4 = (_BYTE *)WTF::fastMalloc((WTF *)1);
  *a2 = v4;
  *v4 = a1;
  *(_QWORD *)&result = 0x100000001;
  a2[1] = 0x100000001;
  return result;
}

uint64_t fido::decodeResponseMap@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *(unsigned int *)(result + 12);
  if (v3 >= 2
    && ((v4 = *(_QWORD *)result,
         v5 = **(unsigned __int8 **)result,
         result = fido::isCtapDeviceResponseCode(v5),
         (_DWORD)result)
      ? (v6 = v5 == 0)
      : (v6 = 0),
        v6))
  {
    v7 = (WTF *)(v3 - 1);
    v8 = v4 + 1;
    v9 = WTF::fastMalloc(v7);
    v10 = (WTF *)v9;
    v11 = 0;
    do
    {
      *((_BYTE *)v11 + v9) = *((_BYTE *)v11 + v8);
      v11 = (WTF *)((char *)v11 + 1);
    }
    while (v7 != v11);
    v16[0] = v9;
    v16[1] = v7;
    cbor::CBORReader::read(v16, 0, 0x10u, (uint64_t)&v17);
    if (v21)
    {
      if (v17 == 5)
      {
        *(_DWORD *)a2 = 5;
        v13 = v19;
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = v13;
        v14 = a2 + 16;
        v15 = v20;
        *(_QWORD *)(a2 + 24) = v20;
        if (v15)
        {
          *(_QWORD *)(v13 + 16) = v14;
          v18 = &v19;
          v19 = 0;
          v20 = 0;
        }
        else
        {
          *(_QWORD *)(a2 + 8) = v14;
        }
        *(_BYTE *)(a2 + 32) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
      }
      cbor::CBORValue::internalCleanup((uint64_t)&v17, v12);
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
    }
    return WTF::fastFree(v10, v12);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t fido::getResponseCode(unsigned __int8 **a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = 18;
  if (*((_DWORD *)a1 + 3))
  {
    v2 = **a1;
    if (fido::isCtapDeviceResponseCode(v2))
      return v2;
    else
      return 18;
  }
  return v1;
}

uint64_t fido::readCTAPMakeCredentialResponse@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, _BYTE *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF *v21;
  BOOL v22;
  char *v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  int v31;
  WTF **v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  void *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  WTF **v51;
  WTF::StringImpl *v52;
  WTF *v53;
  uint64_t *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF **v64;
  WTF::StringImpl *v65;
  WTF *v66;
  uint64_t *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  void *v83;
  WTF **v84;
  WTF *v85;
  _QWORD v86[2];
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *__src;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[8];
  uint64_t v102;
  _BYTE v103[16];
  char v104;
  char v105;
  uint64_t *v106;
  WTF *v107;
  uint64_t v108;
  WTF::StringImpl *v109[2];

  result = fido::decodeResponseMap(a1, (uint64_t)v101);
  if (!v104)
  {
    *a5 = 0;
    return result;
  }
  v98 = 1;
  LODWORD(v97) = 0;
  v10 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v102, (cbor::CBORValue *)&v97);
  result = cbor::CBORValue::internalCleanup((uint64_t)&v97, v11);
  if (v103 == (_BYTE *)v10 || (v14 = *(_DWORD *)(v10 + 64), v13 = (uint64_t *)(v10 + 64), v14 != 3))
  {
    *a5 = 0;
  }
  else
  {
    cbor::CBORValue::clone(&v97, v13);
    __src = (void *)2;
    LODWORD(v94) = 0;
    v15 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v102, (cbor::CBORValue *)&v94);
    cbor::CBORValue::internalCleanup((uint64_t)&v94, v16);
    if (v103 == (_BYTE *)v15 || (v19 = *(_DWORD *)(v15 + 64), v18 = (uint64_t *)(v15 + 64), v19 != 2))
    {
      *a5 = 0;
    }
    else
    {
      cbor::CBORValue::clone(&v94, v18);
      if (DWORD1(v96) < 0x37
        || ((v21 = (WTF *)__rev16(*(unsigned __int16 *)((char *)__src + 53)), (unint64_t)v21 + 55 <= DWORD1(v96))
          ? (v22 = v21 == 0)
          : (v22 = 1),
            v22))
      {
        *a5 = 0;
      }
      else
      {
        v23 = (char *)__src + 55;
        v24 = WTF::fastMalloc(v21);
        v26 = (WTF *)v24;
        v27 = 0;
        do
        {
          *((_BYTE *)v27 + v24) = *((_BYTE *)v27 + (_QWORD)v23);
          v27 = (WTF *)((char *)v27 + 1);
        }
        while (v21 != v27);
        if (v27
          && (v91 = 3,
              LODWORD(v90) = 0,
              v28 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v102, (cbor::CBORValue *)&v90), cbor::CBORValue::internalCleanup((uint64_t)&v90, v29), v103 != (_BYTE *)v28)&& (v31 = *(_DWORD *)(v28 + 64), v30 = (uint64_t *)(v28 + 64), v31 == 5))
        {
          cbor::CBORValue::clone(&v90, v30);
          if (*a4)
          {
            v88 = 0;
            v89 = 0;
            v87 = (WTF *)&v88;
            WTF::String::String((WTF::String *)&v107, "authData");
            LODWORD(v84) = 3;
            v85 = v107;
            v106 = (uint64_t *)&v84;
            v32 = (WTF **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v87, (uint64_t)v109, (cbor::CBORValue *)&v84);
            v34 = *v32;
            if (!*v32)
            {
              v35 = (uint64_t *)v32;
              std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v106, (uint64_t)&v105, &v107);
              v36 = v109[0];
              v37 = (uint64_t)v107;
              *(_QWORD *)v107 = 0;
              *(_QWORD *)(v37 + 8) = 0;
              *(_QWORD *)(v37 + 16) = v36;
              *v35 = v37;
              if (*(_QWORD *)v87)
              {
                v87 = *(WTF **)v87;
                v37 = *v35;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v88, v37);
              ++v89;
              v34 = v107;
            }
            cbor::CBORValue::internalCleanup((uint64_t)v34 + 64, v33);
            v39 = v94;
            *((_DWORD *)v34 + 16) = v94;
            switch(v39)
            {
              case 0:
              case 1:
                v40 = __src;
                goto LABEL_48;
              case 2:
              case 4:
                *((_QWORD *)v34 + 9) = __src;
                v47 = v96;
                __src = 0;
                *(_QWORD *)&v96 = 0;
                *((_QWORD *)v34 + 10) = v47;
                break;
              case 3:
                v40 = __src;
                __src = 0;
                goto LABEL_48;
              case 5:
                v49 = __src;
                v48 = v96;
                *((_QWORD *)v34 + 10) = v96;
                v40 = (char *)v34 + 80;
                *((_QWORD *)v34 + 9) = v49;
                v50 = *((_QWORD *)&v96 + 1);
                *((_QWORD *)v34 + 11) = *((_QWORD *)&v96 + 1);
                if (v50)
                {
                  *(_QWORD *)(v48 + 16) = v40;
                  __src = &v96;
                  v96 = 0uLL;
                }
                else
                {
LABEL_48:
                  *((_QWORD *)v34 + 9) = v40;
                }
                break;
              case 7:
                *((_DWORD *)v34 + 18) = (_DWORD)__src;
                break;
              default:
                break;
            }
            cbor::CBORValue::internalCleanup((uint64_t)&v84, v38);
            WTF::String::String((WTF::String *)&v107, "fmt");
            LODWORD(v84) = 3;
            v85 = v107;
            v106 = (uint64_t *)&v84;
            v51 = (WTF **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v87, (uint64_t)v109, (cbor::CBORValue *)&v84);
            v53 = *v51;
            if (!*v51)
            {
              v54 = (uint64_t *)v51;
              std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v106, (uint64_t)&v105, &v107);
              v55 = v109[0];
              v56 = (uint64_t)v107;
              *(_QWORD *)v107 = 0;
              *(_QWORD *)(v56 + 8) = 0;
              *(_QWORD *)(v56 + 16) = v55;
              *v54 = v56;
              if (*(_QWORD *)v87)
              {
                v87 = *(WTF **)v87;
                v56 = *v54;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v88, v56);
              ++v89;
              v53 = v107;
            }
            cbor::CBORValue::internalCleanup((uint64_t)v53 + 64, v52);
            v58 = v97;
            *((_DWORD *)v53 + 16) = v97;
            switch(v58)
            {
              case 0:
              case 1:
                v59 = (char *)v98;
                goto LABEL_60;
              case 2:
              case 4:
                *((_QWORD *)v53 + 9) = v98;
                v60 = v99;
                v98 = 0;
                v99 = 0;
                *((_QWORD *)v53 + 10) = v60;
                break;
              case 3:
                v59 = (char *)v98;
                v98 = 0;
                goto LABEL_60;
              case 5:
                v62 = v98;
                v61 = v99;
                *((_QWORD *)v53 + 10) = v99;
                v59 = (char *)v53 + 80;
                *((_QWORD *)v53 + 9) = v62;
                v63 = v100;
                *((_QWORD *)v53 + 11) = v100;
                if (v63)
                {
                  *(_QWORD *)(v61 + 16) = v59;
                  v98 = (uint64_t)&v99;
                  v99 = 0;
                  v100 = 0;
                }
                else
                {
LABEL_60:
                  *((_QWORD *)v53 + 9) = v59;
                }
                break;
              case 7:
                *((_DWORD *)v53 + 18) = v98;
                break;
              default:
                break;
            }
            cbor::CBORValue::internalCleanup((uint64_t)&v84, v57);
            WTF::String::String((WTF::String *)&v85, "attStmt");
            LODWORD(v84) = 3;
            v106 = (uint64_t *)&v84;
            v64 = (WTF **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)&v87, (uint64_t)v109, (cbor::CBORValue *)&v84);
            v66 = *v64;
            if (!*v64)
            {
              v67 = (uint64_t *)v64;
              std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v106, (uint64_t)&v105, &v107);
              v68 = v109[0];
              v69 = (uint64_t)v107;
              *(_QWORD *)v107 = 0;
              *(_QWORD *)(v69 + 8) = 0;
              *(_QWORD *)(v69 + 16) = v68;
              *v67 = v69;
              if (*(_QWORD *)v87)
              {
                v87 = *(WTF **)v87;
                v69 = *v67;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v88, v69);
              ++v89;
              v66 = v107;
            }
            cbor::CBORValue::internalCleanup((uint64_t)v66 + 64, v65);
            v71 = v90;
            *((_DWORD *)v66 + 16) = v90;
            switch(v71)
            {
              case 0:
              case 1:
                v72 = (char *)v91;
                goto LABEL_72;
              case 2:
              case 4:
                *((_QWORD *)v66 + 9) = v91;
                v73 = v92;
                v91 = 0;
                v92 = 0;
                *((_QWORD *)v66 + 10) = v73;
                break;
              case 3:
                v72 = (char *)v91;
                v91 = 0;
                goto LABEL_72;
              case 5:
                v75 = v91;
                v74 = v92;
                *((_QWORD *)v66 + 10) = v92;
                v72 = (char *)v66 + 80;
                *((_QWORD *)v66 + 9) = v75;
                v76 = v93;
                *((_QWORD *)v66 + 11) = v93;
                if (v76)
                {
                  *(_QWORD *)(v74 + 16) = v72;
                  v91 = (uint64_t)&v92;
                  v92 = 0;
                  v93 = 0;
                }
                else
                {
LABEL_72:
                  *((_QWORD *)v66 + 9) = v72;
                }
                break;
              case 7:
                *((_DWORD *)v66 + 18) = v91;
                break;
              default:
                break;
            }
            cbor::CBORValue::internalCleanup((uint64_t)&v84, v70);
            LODWORD(v84) = 5;
            v85 = v87;
            v86[0] = v88;
            v86[1] = v89;
            if (v89)
            {
              *((_QWORD *)v88 + 2) = v86;
              v87 = (WTF *)&v88;
              v88 = 0;
              v89 = 0;
            }
            else
            {
              v85 = (WTF *)v86;
            }
            v107 = 0;
            v108 = 0;
            v109[0] = (WTF::StringImpl *)&v107;
            v78 = cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)v109, (const cbor::CBORValue *)&v84, 16);
            v42 = v107;
            if ((v78 & 1) != 0)
            {
              v46 = 1;
            }
            else
            {
              if (v107)
              {
                v107 = 0;
                LODWORD(v108) = 0;
                WTF::fastFree(v42, v77);
              }
              v46 = 0;
              v42 = 0;
            }
            cbor::CBORValue::internalCleanup((uint64_t)&v84, (WTF::StringImpl *)v77);
            result = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v87, v88);
            if ((v78 & 1) == 0)
            {
              __break(1u);
              return result;
            }
          }
          else
          {
            v87 = 0;
            LODWORD(v88) = 0;
            HIDWORD(v88) = DWORD1(v96);
            if (DWORD1(v96))
            {
              LODWORD(v88) = DWORD1(v96);
              v87 = (WTF *)WTF::fastMalloc((WTF *)DWORD1(v96));
              memcpy(v87, __src, DWORD1(v96));
            }
            v41 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
              *(_DWORD *)v41 += 2;
            v109[0] = v41;
            v85 = 0;
            v86[0] = 0;
            v84 = &v85;
            WebCore::buildAttestationObject((uint64_t *)&v87, v109, (uint64_t)&v84, a4, 1, (uint64_t)&v107);
            v42 = v107;
            v107 = 0;
            LODWORD(v108) = 0;
            std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v84, v85);
            v44 = v109[0];
            v109[0] = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v43);
              else
                *(_DWORD *)v44 -= 2;
            }
            v45 = v87;
            if (v87)
            {
              v87 = 0;
              LODWORD(v88) = 0;
              WTF::fastFree(v45, v43);
            }
            v46 = 1;
          }
          JSC::ArrayBuffer::create();
          JSC::ArrayBuffer::create();
          v79 = WTF::fastMalloc((WTF *)0x90);
          *(_DWORD *)(v79 + 8) = 1;
          v80 = (uint64_t)v84;
          v84 = 0;
          *(_QWORD *)(v79 + 16) = v80;
          *(_BYTE *)(v79 + 32) = 0;
          *(_BYTE *)(v79 + 56) = 0;
          *(_BYTE *)(v79 + 64) = 0;
          *(_BYTE *)(v79 + 96) = 0;
          *(_DWORD *)(v79 + 24) = 0;
          *(_QWORD *)(v79 + 104) = 0;
          *(_BYTE *)(v79 + 112) = a2;
          *(_QWORD *)v79 = off_1E336C380;
          v81 = v107;
          v107 = 0;
          *(_QWORD *)(v79 + 128) = 0;
          *(_QWORD *)(v79 + 136) = 0;
          *(_QWORD *)(v79 + 120) = v81;
          v82 = *a3;
          *a3 = 0;
          *(_QWORD *)(v79 + 128) = v82;
          LODWORD(v82) = *((_DWORD *)a3 + 2);
          *((_DWORD *)a3 + 2) = 0;
          *(_DWORD *)(v79 + 136) = v82;
          LODWORD(v82) = *((_DWORD *)a3 + 3);
          *((_DWORD *)a3 + 3) = 0;
          *(_DWORD *)(v79 + 140) = v82;
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v107);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v84);
          *a5 = v79;
          if (v46 && v42)
            WTF::fastFree(v42, v83);
          cbor::CBORValue::internalCleanup((uint64_t)&v90, (WTF::StringImpl *)v83);
        }
        else
        {
          *a5 = 0;
        }
        WTF::fastFree(v26, v25);
      }
      cbor::CBORValue::internalCleanup((uint64_t)&v94, v20);
    }
    result = cbor::CBORValue::internalCleanup((uint64_t)&v97, v17);
  }
  if (v104)
    return cbor::CBORValue::internalCleanup((uint64_t)v101, v12);
  return result;
}

uint64_t fido::readCTAPGetAssertionResponse@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[8];
  uint64_t v37;
  _BYTE v38[16];
  char v39;

  result = fido::decodeResponseMap(a1, (uint64_t)v36);
  if (!v39)
  {
    *a3 = 0;
    return result;
  }
  v35 = 1;
  LODWORD(v34) = 0;
  v6 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v37, (cbor::CBORValue *)&v34);
  result = cbor::CBORValue::internalCleanup((uint64_t)&v34, v7);
  if (v38 != (_BYTE *)v6 && *(_DWORD *)(v6 + 64) == 5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v34;
    LODWORD(v34) = 3;
    v35 = v9;
    v10 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v6 + 72, (cbor::CBORValue *)&v34);
    result = cbor::CBORValue::internalCleanup((uint64_t)&v34, v11);
    if (v6 + 80 != v10 && *(_DWORD *)(v10 + 64) == 2)
    {
      v35 = 2;
      LODWORD(v34) = 0;
      v12 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v37, (cbor::CBORValue *)&v34);
      result = cbor::CBORValue::internalCleanup((uint64_t)&v34, v13);
      if (v38 != (_BYTE *)v12 && *(_DWORD *)(v12 + 64) == 2)
      {
        v35 = 3;
        LODWORD(v34) = 0;
        v14 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v37, (cbor::CBORValue *)&v34);
        result = cbor::CBORValue::internalCleanup((uint64_t)&v34, v15);
        if (v38 != (_BYTE *)v14 && *(_DWORD *)(v14 + 64) == 2)
        {
          v35 = 4;
          LODWORD(v34) = 0;
          v16 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v37, (cbor::CBORValue *)&v34);
          cbor::CBORValue::internalCleanup((uint64_t)&v34, v17);
          if (v38 == (_BYTE *)v16 || *(_DWORD *)(v16 + 64) != 5)
          {
            v34 = 0;
            v35 = 0;
            WebCore::AuthenticatorAssertionResponse::create((uint64_t)&v34, a2, &v33);
            v22 = v33;
            goto LABEL_34;
          }
          v18 = v16 + 72;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          LODWORD(v34) = 3;
          v19 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v16 + 72, (cbor::CBORValue *)&v34);
          result = cbor::CBORValue::internalCleanup((uint64_t)&v34, v20);
          v21 = v16 + 80;
          if (v21 != v19 && *(_DWORD *)(v19 + 64) == 2)
          {
            WebCore::AuthenticatorAssertionResponse::create(v19 + 72, a2, &v34);
            v22 = v34;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            LODWORD(v34) = 3;
            v23 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v18, (cbor::CBORValue *)&v34);
            result = cbor::CBORValue::internalCleanup((uint64_t)&v34, v24);
            if (v21 != v23)
            {
              if (*(_DWORD *)(v23 + 64) != 3)
                goto LABEL_38;
              v25 = *(_DWORD **)(v23 + 72);
              if (v25)
                *v25 += 2;
              v26 = *(WTF::StringImpl **)(v22 + 144);
              *(_QWORD *)(v22 + 144) = v25;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v8);
                else
                  *(_DWORD *)v26 -= 2;
              }
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            LODWORD(v34) = 3;
            v27 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v18, (cbor::CBORValue *)&v34);
            result = cbor::CBORValue::internalCleanup((uint64_t)&v34, v28);
            if (v21 != v27)
            {
              if (*(_DWORD *)(v27 + 64) == 3)
              {
                v29 = *(_DWORD **)(v27 + 72);
                if (v29)
                  *v29 += 2;
                v30 = *(WTF::StringImpl **)(v22 + 152);
                *(_QWORD *)(v22 + 152) = v29;
                if (v30)
                {
                  if (*(_DWORD *)v30 == 2)
                    WTF::StringImpl::destroy(v30, v8);
                  else
                    *(_DWORD *)v30 -= 2;
                }
                goto LABEL_34;
              }
LABEL_38:
              *a3 = 0;
              if (v22)
              {
                if (*(_DWORD *)(v22 + 8) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
                else
                  --*(_DWORD *)(v22 + 8);
              }
              goto LABEL_29;
            }
LABEL_34:
            v35 = 5;
            LODWORD(v34) = 0;
            v31 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v37, (cbor::CBORValue *)&v34);
            result = cbor::CBORValue::internalCleanup((uint64_t)&v34, v32);
            if (v38 != (_BYTE *)v31 && !*(_DWORD *)(v31 + 64))
              *(_QWORD *)(v22 + 176) = *(_QWORD *)(v31 + 72);
            *a3 = v22;
            goto LABEL_29;
          }
        }
      }
    }
  }
  *a3 = 0;
LABEL_29:
  if (v39)
    return cbor::CBORValue::internalCleanup((uint64_t)v36, v8);
  return result;
}

uint64_t fido::readCTAPGetInfoResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  WTF **v12;
  WTF **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  _DWORD **v29;
  _DWORD *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  WTF *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  BOOL v46;
  WTF *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  BOOL v51;
  WTF *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  int v59;
  WTF *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  int v63;
  int v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  WTF *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  unsigned __int16 v86;
  int v87;
  char *v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  BOOL v108;
  unsigned __int16 v109;
  WTF *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  unint64_t v119;
  char v120;
  WTF *v121;
  unint64_t v122;
  char v123;
  __int128 v124;
  WTF *v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  WTF **v129;
  WTF *v130;
  uint64_t v131;
  char v132[8];
  uint64_t v133;
  _BYTE v134[16];
  char v135;

  result = fido::decodeResponseMap(a1, (uint64_t)v132);
  if (!v135
    || (v113 = 1,
        LODWORD(v112) = 0,
        v5 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v133, (cbor::CBORValue *)&v112), result = cbor::CBORValue::internalCleanup((uint64_t)&v112, v6), v134 == (_BYTE *)v5)|| *(_DWORD *)(v5 + 64) != 4)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 144) = 0;
    goto LABEL_30;
  }
  v130 = 0;
  v131 = 0;
  v129 = &v130;
  v7 = *(unsigned int *)(v5 + 84);
  if (!(_DWORD)v7)
  {
LABEL_33:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 144) = 0;
    goto LABEL_35;
  }
  v8 = *(_QWORD *)(v5 + 72);
  v9 = v8 + 32 * v7;
  while (1)
  {
    if (*(_DWORD *)v8 != 3)
      goto LABEL_33;
    if ((MEMORY[0x19AEA53F4](*(_QWORD *)(v8 + 8), "FIDO_2_0", 8) & 1) != 0)
    {
      v10 = 0;
      goto LABEL_11;
    }
    if (MEMORY[0x19AEA53F4](*(_QWORD *)(v8 + 8), "U2F_V2", 6))
      break;
LABEL_22:
    v8 += 32;
    if (v8 == v9)
    {
      if (!v131)
        goto LABEL_33;
      v113 = 3;
      LODWORD(v112) = 0;
      v17 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v133, (cbor::CBORValue *)&v112);
      cbor::CBORValue::internalCleanup((uint64_t)&v112, v18);
      if (v134 == (_BYTE *)v17 || *(_DWORD *)(v17 + 64) != 2 || *(_DWORD *)(v17 + 84) != 16)
        goto LABEL_33;
      v19 = (void *)WTF::fastMalloc((WTF *)0x10);
      memcpy(v19, *(const void **)(v17 + 72), *(unsigned int *)(v17 + 84));
      v112 = (uint64_t *)v129;
      v113 = (uint64_t)v130;
      v114 = v131;
      if (v131)
      {
        *((_QWORD *)v130 + 2) = &v113;
        v129 = &v130;
        v130 = 0;
        v131 = 0;
      }
      else
      {
        v112 = &v113;
      }
      v115 = (WTF *)v19;
      v116 = 0x1000000010;
      LOBYTE(v117) = 0;
      BYTE4(v117) = 0;
      LOBYTE(v118) = 0;
      v120 = 0;
      LOBYTE(v121) = 0;
      v123 = 0;
      LOWORD(v124) = 256;
      DWORD1(v124) = 2;
      BYTE8(v124) = 1;
      HIDWORD(v124) = 2;
      LOBYTE(v125) = 0;
      v127 = 0;
      LOBYTE(v128) = 0;
      BYTE4(v128) = 0;
      v111 = 2;
      LODWORD(v110) = 0;
      v20 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v133, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v21);
      if (v134 == (_BYTE *)v20)
        goto LABEL_61;
      if (*(_DWORD *)(v20 + 64) != 4)
        goto LABEL_119;
      v110 = 0;
      v111 = 0;
      v23 = *(unsigned int *)(v20 + 84);
      if ((_DWORD)v23)
      {
        v24 = 0;
        LODWORD(v25) = 0;
        v26 = 32 * v23;
        v27 = (_QWORD *)(*(_QWORD *)(v20 + 72) + 8);
        while (*((_DWORD *)v27 - 2) == 3)
        {
          if ((_DWORD)v25 == (_DWORD)v111)
          {
            v29 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, v25 + 1, (unint64_t)v27);
            v25 = HIDWORD(v111);
            v24 = v110;
            v30 = *v29;
            if (*v29)
              *v30 += 2;
            *((_QWORD *)v24 + v25) = v30;
          }
          else
          {
            v28 = (_DWORD *)*v27;
            if (*v27)
              *v28 += 2;
            *((_QWORD *)v24 + v25) = v28;
          }
          LODWORD(v25) = v25 + 1;
          HIDWORD(v111) = v25;
          v27 += 4;
          v26 -= 32;
          if (!v26)
            goto LABEL_52;
        }
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 144) = 0;
        if ((_DWORD)v25)
        {
          v106 = 8 * v25;
          do
          {
            v107 = *(WTF::StringImpl **)v24;
            *(_QWORD *)v24 = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
                WTF::StringImpl::destroy(v107, v22);
              else
                *(_DWORD *)v107 -= 2;
            }
            v24 = (WTF *)((char *)v24 + 8);
            v106 -= 8;
          }
          while (v106);
          v24 = v110;
        }
        if (v24)
        {
          v110 = 0;
          LODWORD(v111) = 0;
          v32 = v24;
          goto LABEL_127;
        }
        goto LABEL_150;
      }
      LODWORD(v25) = 0;
LABEL_52:
      if (v123)
      {
        if (HIDWORD(v122))
        {
          v52 = v121;
          v53 = 8 * HIDWORD(v122);
          do
          {
            v54 = *(WTF::StringImpl **)v52;
            *(_QWORD *)v52 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                WTF::StringImpl::destroy(v54, v22);
              else
                *(_DWORD *)v54 -= 2;
            }
            v52 = (WTF *)((char *)v52 + 8);
            v53 -= 8;
          }
          while (v53);
        }
        v31 = v121;
        if (v121)
        {
          v121 = 0;
          LODWORD(v122) = 0;
          WTF::fastFree(v31, v22);
        }
        v121 = v110;
        v122 = v111;
      }
      else
      {
        v121 = v110;
        v122 = __PAIR64__(v25, v111);
        v123 = 1;
      }
LABEL_61:
      v111 = 4;
      LODWORD(v110) = 0;
      v33 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v133, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v34);
      if (v134 == (_BYTE *)v33)
        goto LABEL_95;
      if (*(_DWORD *)(v33 + 64) != 5)
        goto LABEL_119;
      v35 = v33 + 72;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v36 = v110;
      LODWORD(v110) = 3;
      v111 = (uint64_t)v36;
      v37 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v33 + 72, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v38);
      v39 = v33 + 80;
      if (v33 + 80 != v37)
      {
        if (*(_DWORD *)(v37 + 64) == 7)
        {
          v40 = *(_DWORD *)(v37 + 72);
          if ((v40 & 0xFFFFFFFE) == 0x14)
          {
            v41 = v40 == 21;
            goto LABEL_68;
          }
        }
LABEL_149:
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 144) = 0;
        goto LABEL_150;
      }
      v41 = 0;
LABEL_68:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v42 = v110;
      LODWORD(v110) = 3;
      v111 = (uint64_t)v42;
      v43 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v33 + 72, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v44);
      if (v39 == v43)
      {
        v46 = 1;
      }
      else
      {
        if (*(_DWORD *)(v43 + 64) != 7)
          goto LABEL_149;
        v45 = *(_DWORD *)(v43 + 72);
        if ((v45 & 0xFFFFFFFE) != 0x14)
          goto LABEL_149;
        v46 = v45 != 21;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v47 = v110;
      LODWORD(v110) = 3;
      v111 = (uint64_t)v47;
      v48 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v35, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v49);
      if (v39 == v48)
      {
        v51 = 1;
      }
      else
      {
        if (*(_DWORD *)(v48 + 64) != 7)
          goto LABEL_149;
        v50 = *(_DWORD *)(v48 + 72);
        if ((v50 & 0xFFFFFFFE) != 0x14)
          goto LABEL_149;
        v51 = v50 == 21;
      }
      v108 = v51;
      v55 = 2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v56 = v110;
      LODWORD(v110) = 3;
      v111 = (uint64_t)v56;
      v57 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v35, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v58);
      if (v39 != v57)
      {
        if (*(_DWORD *)(v57 + 64) != 7)
          goto LABEL_149;
        v59 = *(_DWORD *)(v57 + 72);
        if ((v59 & 0xFFFFFFFE) != 0x14)
          goto LABEL_149;
        v55 = v59 != 21;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v60 = v110;
      LODWORD(v110) = 3;
      v111 = (uint64_t)v60;
      v61 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v35, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v62);
      if (v39 == v61)
      {
        v64 = 2;
      }
      else
      {
        if (*(_DWORD *)(v61 + 64) != 7)
          goto LABEL_149;
        v63 = *(_DWORD *)(v61 + 72);
        if ((v63 & 0xFFFFFFFE) != 0x14)
          goto LABEL_149;
        v64 = v63 != 21;
      }
      LOBYTE(v124) = v41;
      BYTE1(v124) = v46;
      DWORD1(v124) = v55;
      BYTE8(v124) = v108;
      HIDWORD(v124) = v64;
LABEL_95:
      v111 = 5;
      LODWORD(v110) = 0;
      v65 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v133, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v66);
      if (v134 != (_BYTE *)v65)
      {
        if (!*(_DWORD *)(v65 + 64))
        {
          LODWORD(v117) = *(_QWORD *)(v65 + 72);
          BYTE4(v117) = 1;
          goto LABEL_98;
        }
LABEL_119:
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 144) = 0;
        goto LABEL_150;
      }
LABEL_98:
      v111 = 6;
      LODWORD(v110) = 0;
      v67 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v133, (cbor::CBORValue *)&v110);
      result = cbor::CBORValue::internalCleanup((uint64_t)&v110, v68);
      if (v134 != (_BYTE *)v67)
      {
        if (*(_DWORD *)(v67 + 64) != 4)
          goto LABEL_119;
        v69 = *(unsigned int *)(v67 + 84);
        if ((_DWORD)v69)
        {
          v70 = v67;
          v71 = 0;
          v72 = 0;
          v73 = 0;
          v74 = 32 * v69;
          v75 = (_QWORD *)(*(_QWORD *)(v70 + 72) + 8);
          while (!*((_DWORD *)v75 - 2))
          {
            if (v71 == v72)
            {
              v76 = v71 + (v71 >> 2);
              if (v76 >= 0x10)
                v77 = v76 + 1;
              else
                v77 = 16;
              if (v77 <= v71 + 1)
                v72 = v71 + 1;
              else
                v72 = v77;
              if (HIDWORD(v72))
              {
                __break(0xC471u);
                return result;
              }
              v78 = (void *)WTF::fastMalloc((WTF *)v72);
              v72 = v72;
              result = (uint64_t)memcpy(v78, v73, v71);
              if (v73)
              {
                if (v78 == v73)
                {
                  v78 = 0;
                  v72 = 0;
                }
                result = WTF::fastFree((WTF *)v73, v22);
              }
              v73 = v78;
              *((_BYTE *)v78 + v71++) = *v75;
            }
            else
            {
              *((_BYTE *)v73 + v71++) = *v75;
            }
            v75 += 4;
            v74 -= 32;
            if (!v74)
              goto LABEL_121;
          }
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 144) = 0;
          if (!v73)
            goto LABEL_150;
          v32 = (WTF *)v73;
LABEL_127:
          WTF::fastFree(v32, v22);
LABEL_150:
          if (v127)
          {
            v93 = v125;
            if (v125)
            {
              v125 = 0;
              LODWORD(v126) = 0;
              WTF::fastFree(v93, v22);
            }
          }
          if (v123)
          {
            v94 = v121;
            if (HIDWORD(v122))
            {
              v104 = 8 * HIDWORD(v122);
              do
              {
                v105 = *(WTF::StringImpl **)v94;
                *(_QWORD *)v94 = 0;
                if (v105)
                {
                  if (*(_DWORD *)v105 == 2)
                    WTF::StringImpl::destroy(v105, v22);
                  else
                    *(_DWORD *)v105 -= 2;
                }
                v94 = (WTF *)((char *)v94 + 8);
                v104 -= 8;
              }
              while (v104);
              v94 = v121;
              if (!v121)
                goto LABEL_156;
            }
            else if (!v121)
            {
              goto LABEL_156;
            }
            v121 = 0;
            LODWORD(v122) = 0;
            WTF::fastFree(v94, v22);
          }
LABEL_156:
          if (v120)
          {
            v95 = v118;
            if (v118)
            {
              v118 = 0;
              LODWORD(v119) = 0;
              WTF::fastFree(v95, v22);
            }
          }
          v96 = v115;
          if (v115)
          {
            v115 = 0;
            LODWORD(v116) = 0;
            WTF::fastFree(v96, v22);
          }
          std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((WTF *)v113);
          goto LABEL_35;
        }
        v73 = 0;
        LODWORD(v72) = 0;
        LODWORD(v71) = 0;
LABEL_121:
        if (v120)
        {
          v79 = v118;
          if (v118)
          {
            v118 = 0;
            LODWORD(v119) = 0;
            WTF::fastFree(v79, v22);
          }
          v118 = (WTF *)v73;
          v119 = __PAIR64__(v71, v72);
        }
        else
        {
          v118 = (WTF *)v73;
          v119 = __PAIR64__(v71, v72);
          v120 = 1;
        }
      }
      v111 = 9;
      LODWORD(v110) = 0;
      v80 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v133, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v81);
      if (v134 != (_BYTE *)v80)
      {
        if (*(_DWORD *)(v80 + 64) != 4)
          goto LABEL_149;
        v110 = 0;
        v111 = 0;
        v82 = *(unsigned int *)(v80 + 84);
        if ((_DWORD)v82)
        {
          v83 = *(_DWORD **)(v80 + 72);
          v84 = &v83[8 * v82];
          while (*v83 == 3)
          {
            v85 = v83 + 2;
            v86 = WebCore::convertStringToAuthenticatorTransport((WebCore *)(v83 + 2), v22);
            v109 = v86;
            if (v86 >= 0x100u)
            {
              v87 = HIDWORD(v111);
              if (HIDWORD(v111) == (_DWORD)v111)
              {
                v88 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v110, (WTF *)(HIDWORD(v111) + 1), (unint64_t)&v109);
                v87 = HIDWORD(v111);
                *((_BYTE *)v110 + HIDWORD(v111)) = *v88;
              }
              else
              {
                *((_BYTE *)v110 + HIDWORD(v111)) = v86;
              }
              HIDWORD(v111) = v87 + 1;
            }
            v83 = v85 + 6;
            if (v85 + 6 == v84)
              goto LABEL_140;
          }
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 144) = 0;
          v90 = v110;
          if (v110)
          {
            v110 = 0;
            LODWORD(v111) = 0;
            WTF::fastFree(v90, v22);
          }
          goto LABEL_150;
        }
LABEL_140:
        if (v127)
        {
          v89 = v125;
          if (v125)
          {
            v125 = 0;
            LODWORD(v126) = 0;
            WTF::fastFree(v89, v22);
          }
          v125 = v110;
          v126 = v111;
        }
        else
        {
          v125 = v110;
          v126 = v111;
          v127 = 1;
        }
      }
      v111 = 20;
      LODWORD(v110) = 0;
      v91 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>((uint64_t)&v133, (cbor::CBORValue *)&v110);
      cbor::CBORValue::internalCleanup((uint64_t)&v110, v92);
      if (v134 != (_BYTE *)v91)
      {
        if (*(_DWORD *)(v91 + 64))
          goto LABEL_149;
        LODWORD(v128) = *(_QWORD *)(v91 + 72);
        BYTE4(v128) = 1;
      }
      v97 = v113;
      *(_QWORD *)a2 = v112;
      *(_QWORD *)(a2 + 8) = v97;
      v98 = a2 + 8;
      v99 = v114;
      *(_QWORD *)(a2 + 16) = v114;
      if (v99)
      {
        *(_QWORD *)(v97 + 16) = v98;
        v112 = &v113;
        v113 = 0;
        v114 = 0;
      }
      else
      {
        *(_QWORD *)a2 = v98;
      }
      *(_QWORD *)(a2 + 24) = v115;
      v100 = v116;
      v115 = 0;
      v116 = 0;
      *(_QWORD *)(a2 + 32) = v100;
      *(_QWORD *)(a2 + 40) = v117;
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 64) = 0;
      if (v120)
      {
        *(_QWORD *)(a2 + 48) = v118;
        v101 = v119;
        v118 = 0;
        v119 = 0;
        *(_QWORD *)(a2 + 56) = v101;
        *(_BYTE *)(a2 + 64) = 1;
      }
      *(_BYTE *)(a2 + 72) = 0;
      *(_BYTE *)(a2 + 88) = 0;
      if (v123)
      {
        *(_QWORD *)(a2 + 72) = v121;
        v102 = v122;
        v121 = 0;
        v122 = 0;
        *(_QWORD *)(a2 + 80) = v102;
        *(_BYTE *)(a2 + 88) = 1;
      }
      *(_OWORD *)(a2 + 96) = v124;
      *(_BYTE *)(a2 + 112) = 0;
      *(_BYTE *)(a2 + 128) = 0;
      if (v127)
      {
        *(_QWORD *)(a2 + 112) = v125;
        v103 = v126;
        v125 = 0;
        v126 = 0;
        *(_QWORD *)(a2 + 120) = v103;
        *(_BYTE *)(a2 + 128) = 1;
      }
      *(_QWORD *)(a2 + 136) = v128;
      *(_BYTE *)(a2 + 144) = 1;
      goto LABEL_150;
    }
  }
  v10 = 1;
LABEL_11:
  v11 = v130;
  v12 = &v130;
  v13 = &v130;
  if (!v130)
  {
LABEL_18:
    v15 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v15 + 28) = v10;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = v13;
    *v12 = (WTF *)v15;
    if (*v129)
    {
      v129 = (WTF **)*v129;
      v16 = (uint64_t)*v12;
    }
    else
    {
      v16 = v15;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v130, v16);
    ++v131;
    goto LABEL_22;
  }
  while (1)
  {
    while (1)
    {
      v13 = (WTF **)v11;
      v14 = *((_DWORD *)v11 + 7);
      if (v10 >= v14)
        break;
      v11 = *v13;
      v12 = v13;
      if (!*v13)
        goto LABEL_18;
    }
    if (v14 >= v10)
      break;
    v11 = v13[1];
    if (!v11)
    {
      v12 = v13 + 1;
      goto LABEL_18;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 144) = 0;
LABEL_35:
  result = (uint64_t)std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(v130);
LABEL_30:
  if (v135)
    return cbor::CBORValue::internalCleanup((uint64_t)v132, v4);
  return result;
}

char *WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,cbor::CBORValue>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = (_DWORD *)(*(_QWORD *)a1 + 32 * v4);
  v7 = *(_DWORD *)result;
  *v6 = *(_DWORD *)result;
  switch(v7)
  {
    case 0:
    case 1:
      v8 = *((_QWORD *)result + 1);
      v9 = v5 + 32 * v4;
      goto LABEL_5;
    case 2:
    case 4:
      v10 = v5 + 32 * v4;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      v11 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = 0;
      *(_QWORD *)(v10 + 8) = v11;
      LODWORD(v11) = *((_DWORD *)result + 4);
      *((_DWORD *)result + 4) = 0;
      *(_DWORD *)(v10 + 16) = v11;
      LODWORD(v10) = *((_DWORD *)result + 5);
      *((_DWORD *)result + 5) = 0;
      v6[5] = v10;
      break;
    case 3:
      v8 = *((_QWORD *)result + 1);
      v9 = v5 + 32 * v4;
      *((_QWORD *)result + 1) = 0;
LABEL_5:
      *(_QWORD *)(v9 + 8) = v8;
      break;
    case 5:
      v12 = v5 + 32 * v4;
      *(_QWORD *)(v12 + 8) = *((_QWORD *)result + 1);
      v13 = (_QWORD *)(v12 + 8);
      v14 = result + 16;
      v15 = *((_QWORD *)result + 2);
      *(_QWORD *)(v12 + 16) = v15;
      v16 = v12 + 16;
      v17 = *((_QWORD *)result + 3);
      *(_QWORD *)(v16 + 8) = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 16) = v16;
        *((_QWORD *)result + 1) = v14;
        *v14 = 0;
        *((_QWORD *)result + 3) = 0;
      }
      else
      {
        *v13 = v16;
      }
      break;
    case 7:
      *(_DWORD *)(v5 + 32 * v4 + 8) = *((_DWORD *)result + 2);
      break;
    default:
      break;
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

char *WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19557A48CLL);
      }
      v18 = (WTF *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,cbor::CBORValue>::move((uint64_t)v5, v18, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19557A494);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,cbor::CBORValue>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return (char *)v3;
}

uint64_t WTF::VectorMover<false,cbor::CBORValue>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((WTF::StringImpl *)result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(v5 + v6);
      *(_DWORD *)(a3 + v6) = v7;
      switch(v7)
      {
        case 0:
        case 1:
          *(_QWORD *)(a3 + v6 + 8) = *(_QWORD *)(v5 + v6 + 8);
          break;
        case 2:
        case 4:
          v8 = a3 + v6;
          v9 = v5 + v6;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          v10 = *(_QWORD *)(v5 + v6 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v8 + 8) = v10;
          LODWORD(v10) = *(_DWORD *)(v5 + v6 + 16);
          *(_DWORD *)(v9 + 16) = 0;
          *(_DWORD *)(v8 + 16) = v10;
          LODWORD(v10) = *(_DWORD *)(v5 + v6 + 20);
          *(_DWORD *)(v9 + 20) = 0;
          *(_DWORD *)(v8 + 20) = v10;
          break;
        case 3:
          v16 = *(_QWORD *)(v5 + v6 + 8);
          *(_QWORD *)(v5 + v6 + 8) = 0;
          *(_QWORD *)(a3 + v6 + 8) = v16;
          break;
        case 5:
          v11 = a3 + v6;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v5 + v6 + 8);
          v12 = (uint64_t *)(v5 + v6 + 16);
          v13 = *v12;
          *(_QWORD *)(a3 + v6 + 16) = *v12;
          v14 = a3 + v6 + 16;
          v15 = *(_QWORD *)(v5 + v6 + 24);
          *(_QWORD *)(v11 + 24) = v15;
          if (v15)
          {
            *(_QWORD *)(v13 + 16) = v14;
            *(_QWORD *)(v5 + v6 + 8) = v12;
            *v12 = 0;
            *(_QWORD *)(v5 + v6 + 24) = 0;
          }
          else
          {
            *(_QWORD *)(v11 + 8) = v14;
          }
          break;
        case 7:
          *(_DWORD *)(a3 + v6 + 8) = *(_DWORD *)(v5 + v6 + 8);
          break;
        default:
          break;
      }
      result = cbor::CBORValue::internalCleanup(v5 + v6, a2);
      v6 += 32;
    }
    while ((WTF::StringImpl *)(v5 + v6) != a2);
  }
  return result;
}

uint64_t std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue,cbor::CBORValue,0>(uint64_t result, int *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  *(_DWORD *)result = *a2;
  switch(v3)
  {
    case 0:
    case 1:
      v4 = *((_QWORD *)a2 + 1);
      goto LABEL_5;
    case 2:
    case 4:
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      v5 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(_QWORD *)(result + 8) = v5;
      LODWORD(v5) = a2[4];
      a2[4] = 0;
      *(_DWORD *)(result + 16) = v5;
      LODWORD(v5) = a2[5];
      a2[5] = 0;
      *(_DWORD *)(result + 20) = v5;
      break;
    case 3:
      v4 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
LABEL_5:
      *(_QWORD *)(result + 8) = v4;
      break;
    case 5:
      *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
      v6 = a2 + 4;
      v7 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(result + 16) = v7;
      v8 = result + 16;
      v9 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(result + 24) = v9;
      if (v9)
      {
        *(_QWORD *)(v7 + 16) = v8;
        *((_QWORD *)a2 + 1) = v6;
        *v6 = 0;
        *((_QWORD *)a2 + 3) = 0;
      }
      else
      {
        *(_QWORD *)(result + 8) = v8;
      }
      break;
    case 7:
      *(_DWORD *)(result + 8) = a2[2];
      break;
    default:
      break;
  }
  v10 = *a3;
  *(_DWORD *)(result + 32) = *a3;
  switch(v10)
  {
    case 0:
    case 1:
      v11 = *((_QWORD *)a3 + 1);
      goto LABEL_14;
    case 2:
    case 4:
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      v12 = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = 0;
      *(_QWORD *)(result + 40) = v12;
      LODWORD(v12) = a3[4];
      a3[4] = 0;
      *(_DWORD *)(result + 48) = v12;
      LODWORD(v12) = a3[5];
      a3[5] = 0;
      *(_DWORD *)(result + 52) = v12;
      break;
    case 3:
      v11 = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = 0;
LABEL_14:
      *(_QWORD *)(result + 40) = v11;
      break;
    case 5:
      *(_QWORD *)(result + 40) = *((_QWORD *)a3 + 1);
      v13 = a3 + 4;
      v14 = *((_QWORD *)a3 + 2);
      *(_QWORD *)(result + 48) = v14;
      v15 = result + 48;
      v16 = *((_QWORD *)a3 + 3);
      *(_QWORD *)(result + 56) = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 16) = v15;
        *((_QWORD *)a3 + 1) = v13;
        *v13 = 0;
        *((_QWORD *)a3 + 3) = 0;
      }
      else
      {
        *(_QWORD *)(result + 40) = v15;
      }
      break;
    case 7:
      *(_DWORD *)(result + 40) = a3[2];
      break;
    default:
      return result;
  }
  return result;
}

WTF *std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(WTF *result)
{
  WTF *v1;
  void *v2;

  if (result)
  {
    v1 = result;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(*(_QWORD *)result);
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(*((_QWORD *)v1 + 1));
    return (WTF *)WTF::fastFree(v1, v2);
  }
  return result;
}

BOOL fido::isCtapDeviceResponseCode(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 > 0x3A || ((1 << a1) & 0x7FFFFFE03FF0C7FLL) == 0)
    && (a1 - 223 > 0x20 || ((1 << (a1 + 33)) & 0x100030003) == 0))
  {
    return a1 == 127;
  }
  return result;
}

double fido::FidoHidMessage::create@<D0>(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  double result;
  int v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = *((_DWORD *)a3 + 3);
  if (v5 >> 1 < 0xEDD)
  {
    switch(a2)
    {
      case 3:
      case 16:
        if (!v5)
          goto LABEL_2;
        break;
      case 4:
        if (v5 != 1 || **a3 >= 0xBu)
          goto LABEL_2;
        break;
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        break;
      case 6:
        if (v5 != 8)
          goto LABEL_2;
        break;
      case 8:
      case 17:
        if (v5)
          goto LABEL_2;
        break;
      default:
        if ((a2 == 59 || a2 == 63) && v5 != 1)
          goto LABEL_2;
        break;
    }
    fido::FidoHidMessage::FidoHidMessage((uint64_t)&v7, a1, a2, (uint64_t *)a3);
    *(_DWORD *)a4 = v7;
    *(_BYTE *)(a4 + 4) = v8;
    result = *(double *)&v9;
    *(_OWORD *)(a4 + 8) = v9;
    *(_QWORD *)(a4 + 24) = v10;
    *(_QWORD *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 32) = v11;
    *(_QWORD *)(a4 + 40) = v12;
    *(_BYTE *)(a4 + 48) = 1;
  }
  else
  {
LABEL_2:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 48) = 0;
  }
  return result;
}

_DWORD *fido::FidoHidMessage::createFromSerializedData@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  char v14;
  uint64_t v15;

  v3 = result[3];
  if ((v3 - 65) <= 0xFFFFFFC5
    || v3 != 64
    || ((v4 = *(_QWORD *)result, v5 = *(_BYTE *)(*(_QWORD *)result + 4) & 0x7F, v5 <= 0x3F)
      ? (v6 = ((1 << v5) & 0x880000000003015ALL) == 0)
      : (v6 = 1),
        v6))
  {
    v14 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v7 = bswap32(*(_DWORD *)v4);
    v8 = __rev16(*(unsigned __int16 *)(v4 + 5));
    if (v8 >= 0x39)
      v9 = 57;
    else
      v9 = v8;
    if ((_DWORD)v9)
    {
      v10 = v4 + 7;
      v11 = WTF::fastMalloc((WTF *)v9);
      v12 = v11;
      for (i = 0; i != v9; ++i)
        *(_BYTE *)(v11 + i) = *(_BYTE *)(v10 + i);
    }
    else
    {
      v12 = 0;
    }
    v15 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v15 + 16) = v9;
    *(_DWORD *)(v15 + 20) = v9;
    *(_DWORD *)(v15 + 24) = v7;
    *(_QWORD *)v15 = off_1E336C6D8;
    *(_QWORD *)(v15 + 8) = v12;
    *(_BYTE *)(v15 + 28) = v5;
    *(_WORD *)(v15 + 30) = v8;
    result = (_DWORD *)WTF::fastMalloc((WTF *)0x80);
    *(_QWORD *)result = v15;
    *(_DWORD *)a2 = v7;
    *(_BYTE *)(a2 + 4) = v5;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    v14 = 1;
    *(_QWORD *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 24) = result;
    *(_DWORD *)(a2 + 32) = 16;
    *(_QWORD *)(a2 + 40) = v8 - v9;
  }
  *(_BYTE *)(a2 + 48) = v14;
  return result;
}

uint64_t fido::FidoHidInitPacket::createFromSerializedData@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;

  result = 0;
  if (a2 && a1[3] == 64)
  {
    v6 = *(_QWORD *)a1;
    v7 = *(_BYTE *)(*(_QWORD *)a1 + 4) & 0x7F;
    if (v7 > 0x3F || ((1 << v7) & 0x880000000003015ALL) == 0)
    {
      result = 0;
    }
    else
    {
      v9 = bswap32(*(_DWORD *)v6);
      v10 = __rev16(*(unsigned __int16 *)(v6 + 5));
      if (v10 >= 0x39)
        v11 = 57;
      else
        v11 = v10;
      *a2 = v10 - v11;
      if ((_DWORD)v11)
      {
        v12 = v6 + 7;
        v13 = WTF::fastMalloc((WTF *)v11);
        v14 = v13;
        for (i = 0; i != v11; ++i)
          *(_BYTE *)(v13 + i) = *(_BYTE *)(v12 + i);
      }
      else
      {
        v14 = 0;
      }
      result = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(result + 16) = v11;
      *(_DWORD *)(result + 20) = v11;
      *(_DWORD *)(result + 24) = v9;
      *(_QWORD *)result = off_1E336C6D8;
      *(_QWORD *)(result + 8) = v14;
      *(_BYTE *)(result + 28) = v7;
      *(_WORD *)(result + 30) = v10;
    }
  }
  *a3 = result;
  return result;
}

uint64_t fido::FidoHidMessage::FidoHidMessage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 40) = a3;
  v4 = *a2;
  *(_DWORD *)a1 = *(_DWORD *)(*a2 + 24);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v4 + 28);
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(a1 + 8, a2);
  return a1;
}

{
  uint64_t v4;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 40) = a3;
  v4 = *a2;
  *(_DWORD *)a1 = *(_DWORD *)(*a2 + 24);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v4 + 28);
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(a1 + 8, a2);
  return a1;
}

BOOL fido::FidoHidMessage::messageComplete(fido::FidoHidMessage *this)
{
  return *((_QWORD *)this + 5) == 0;
}

char *fido::FidoHidMessage::getMessagePayload@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = (uint64_t)this;
    v6 = 0;
    v7 = *((unsigned int *)this + 8);
    v8 = *((_QWORD *)this + 1);
    do
    {
      v9 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v8) + 20);
      v8 += v7 + 1;
      do
        v8 -= v7;
      while (v8 >= v7);
      v6 = (WTF *)((char *)v6 + v9);
    }
    while (v3 != v8);
    if (v6)
    {
      if ((unint64_t)v6 >> 32)
      {
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x19557ACF4);
      }
      this = (char *)WTF::fastMalloc(v6);
      v10 = this;
      *(_DWORD *)(a2 + 8) = (_DWORD)v6;
      *(_QWORD *)a2 = this;
      v2 = *(_QWORD *)(v4 + 8);
      v3 = *(_QWORD *)(v4 + 16);
    }
    else
    {
      v10 = 0;
    }
    if (v2 != v3)
    {
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v2);
        v13 = *(unsigned int *)(v12 + 20);
        if ((_DWORD)v13)
        {
          v14 = *(const void **)(v12 + 8);
          v15 = v13 + v11;
          v16 = *(unsigned int *)(a2 + 8);
          if (v13 + v11 > v16)
          {
            v18 = v16 + (v16 >> 2);
            if (v18 >= 0x10)
              v19 = v18 + 1;
            else
              v19 = 16;
            if (v19 <= v15)
              v20 = v13 + v11;
            else
              v20 = v19;
            if (HIDWORD(v20))
              goto LABEL_32;
            v21 = (char *)WTF::fastMalloc((WTF *)v20);
            *(_DWORD *)(a2 + 8) = v20;
            v22 = v21;
            *(_QWORD *)a2 = v21;
            memcpy(v21, v10, v11);
            if (v10)
            {
              if (v22 == v10)
              {
                v22 = 0;
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
              }
              WTF::fastFree((WTF *)v10, v23);
            }
            v10 = v22;
          }
          this = (char *)memcpy(&v10[v11], v14, v13);
          v11 = (v13 + v11);
          *(_DWORD *)(a2 + 12) = v15;
        }
        v17 = *(unsigned int *)(v4 + 32);
        v2 += v17 + 1;
        do
          v2 -= v17;
        while (v2 >= v17);
      }
      while (v3 != v2);
    }
  }
  return this;
}

uint64_t fido::FidoHidMessage::popNextPacket@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(this + 8);
  if (v2 == *(_QWORD *)(this + 16))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v3 = this;
    v4 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    v5 = *(_QWORD *)(v3 + 8);
    if (v5 == *(_QWORD *)(v3 + 16))
    {
      this = 512;
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)(v3 + 24);
      this = *(_QWORD *)(v6 + 8 * v5);
      *(_QWORD *)(v6 + 8 * v5) = 0;
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        v5 = *(_QWORD *)(v3 + 8);
      }
      if (v5 == *(unsigned int *)(v3 + 32) - 1)
        v7 = 0;
      else
        v7 = v5 + 1;
      *(_QWORD *)(v3 + 8) = v7;
    }
  }
  return this;
}

uint64_t fido::FidoHidMessage::addContinuationPacket(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _BOOL8 v11;
  uint64_t v12;
  void (**v13)(fido::FidoHidContinuationPacket *__hidden);
  void (***v15)(fido::FidoHidContinuationPacket *__hidden);

  if (*(_DWORD *)(a2 + 12) != 64)
    return 0;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = bswap32(**(_DWORD **)a2);
  v5 = *(_BYTE *)(*(_QWORD *)a2 + 4);
  if (v3 >= 0x3B)
    v6 = 59;
  else
    v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = *(_QWORD *)a2 + 5;
    v8 = WTF::fastMalloc((WTF *)v6);
    v9 = v8;
    for (i = 0; i != v6; ++i)
      *(_BYTE *)(v8 + i) = *(_BYTE *)(v7 + i);
  }
  else
  {
    v9 = 0;
  }
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v12 + 16) = v6;
  *(_DWORD *)(v12 + 20) = v6;
  *(_DWORD *)(v12 + 24) = v4;
  v13 = off_1E336C700;
  *(_QWORD *)v12 = off_1E336C700;
  *(_QWORD *)(v12 + 8) = v9;
  *(_BYTE *)(v12 + 28) = v5;
  v15 = (void (***)(fido::FidoHidContinuationPacket *__hidden))v12;
  v11 = *(_DWORD *)a1 == v4;
  if (*(_DWORD *)a1 == v4)
  {
    *(_QWORD *)(a1 + 40) = v3 - v6;
    WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(a1 + 8, (uint64_t *)&v15);
    if (!v15)
      return 1;
    v13 = *v15;
  }
  ((void (*)(void))v13[1])();
  return v11;
}

uint64_t fido::FidoHidContinuationPacket::createFromSerializedData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;

  result = 0;
  if (a2 && *(_DWORD *)(a1 + 12) == 64)
  {
    v6 = *(unsigned int **)a1;
    v7 = bswap32(**(_DWORD **)a1);
    v8 = *(_BYTE *)(*(_QWORD *)a1 + 4);
    if ((unint64_t)*a2 >= 0x3B)
      v9 = 59;
    else
      v9 = *a2;
    *a2 -= v9;
    if (v9)
    {
      v10 = (char *)v6 + 5;
      v11 = WTF::fastMalloc((WTF *)v9);
      v12 = v11;
      for (i = 0; i != v9; ++i)
        *(_BYTE *)(v11 + i) = v10[i];
    }
    else
    {
      v12 = 0;
    }
    result = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(result + 16) = v9;
    *(_DWORD *)(result + 20) = v9;
    *(_DWORD *)(result + 24) = v7;
    *(_QWORD *)result = off_1E336C700;
    *(_QWORD *)(result + 8) = v12;
    *(_BYTE *)(result + 28) = v8;
  }
  *a3 = result;
  return result;
}

unint64_t fido::FidoHidMessage::numPackets(fido::FidoHidMessage *this)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v1 > v2)
    v2 += *((unsigned int *)this + 8);
  return v2 - v1;
}

uint64_t fido::FidoHidMessage::FidoHidMessage(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;

  v6 = a2;
  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *((_DWORD *)a4 + 3);
  if (v8 >= 0x39)
    v9 = 57;
  else
    v9 = v8;
  if ((_DWORD)v9)
  {
    v10 = *a4;
    v11 = WTF::fastMalloc((WTF *)v9);
    v12 = v11;
    for (i = 0; i != v9; ++i)
      *(_BYTE *)(v11 + i) = *(_BYTE *)(v10 + i);
    v8 = *((_DWORD *)a4 + 3);
  }
  else
  {
    v12 = 0;
  }
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 16) = v9;
  *(_DWORD *)(v14 + 20) = v9;
  *(_DWORD *)(v14 + 24) = v6;
  *(_QWORD *)v14 = off_1E336C6D8;
  *(_QWORD *)(v14 + 8) = v12;
  *(_BYTE *)(v14 + 28) = a3;
  *(_WORD *)(v14 + 30) = v8;
  v29 = v14;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(v7, &v29);
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v15 = *((unsigned int *)a4 + 3);
  if (v9 < v15)
  {
    v16 = 0;
    v17 = -(uint64_t)v9;
    do
    {
      if (v15 - v9 >= 0x3B)
        v18 = 59;
      else
        v18 = v15 - v9;
      if (v18)
      {
        v19 = v7;
        v20 = v6;
        v21 = *a4 + v9;
        v22 = WTF::fastMalloc((WTF *)v18);
        v23 = v22;
        v24 = 0;
        v25 = v15 + v17;
        if (v15 + v17 >= 0x3B)
          v25 = 59;
        do
        {
          *(_BYTE *)(v22 + v24) = *(_BYTE *)(v21 + v24);
          ++v24;
        }
        while (v25 != v24);
        v6 = v20;
        v7 = v19;
      }
      else
      {
        v23 = 0;
      }
      v26 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v26 + 16) = v18;
      *(_DWORD *)(v26 + 20) = v18;
      *(_DWORD *)(v26 + 24) = v6;
      *(_QWORD *)v26 = off_1E336C700;
      *(_QWORD *)(v26 + 8) = v23;
      *(_BYTE *)(v26 + 28) = v16;
      v29 = v26;
      WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(v7, &v29);
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      ++v16;
      v9 += 59;
      v15 = *((unsigned int *)a4 + 3);
      v17 -= 59;
    }
    while (v9 < v15);
  }
  return a1;
}

uint64_t fido::FidoHidPacket::FidoHidPacket(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E336C6B0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 20) = v3;
  *(_DWORD *)(result + 24) = a3;
  return result;
}

uint64_t fido::FidoHidInitPacket::FidoHidInitPacket(uint64_t result, int a2, char a3, uint64_t *a4, __int16 a5)
{
  uint64_t v5;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(result + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_DWORD *)(result + 24) = a2;
  *(_QWORD *)result = off_1E336C6D8;
  *(_BYTE *)(result + 28) = a3;
  *(_WORD *)(result + 30) = a5;
  return result;
}

{
  uint64_t v5;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(result + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_DWORD *)(result + 24) = a2;
  *(_QWORD *)result = off_1E336C6D8;
  *(_BYTE *)(result + 28) = a3;
  *(_WORD *)(result + 30) = a5;
  return result;
}

void fido::FidoHidInitPacket::getSerializedData(fido::FidoHidInitPacket *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  size_t v7;
  void *v8;
  void *v9;
  _BYTE *v10;
  int v11;
  size_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  _BYTE *v20;
  int v21;
  size_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  _BYTE *v30;
  int v31;
  size_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  _BYTE *v40;
  int v41;
  size_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  _BYTE *v50;
  int v51;
  size_t v52;
  __int16 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  _BYTE *v60;
  int v61;
  size_t v62;
  __int16 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  _BYTE *v70;
  size_t v71;
  size_t v72;
  const void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  size_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  void *v90;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = WTF::fastMalloc((WTF *)0x40);
  v5 = (void *)v4;
  *(_DWORD *)(a2 + 8) = 64;
  *(_QWORD *)a2 = v4;
  v6 = *((_DWORD *)this + 6);
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7 == 64)
  {
    v8 = (void *)WTF::fastMalloc((WTF *)0x51);
    *(_DWORD *)(a2 + 8) = 81;
    *(_QWORD *)a2 = v8;
    memcpy(v8, v5, v7);
    if (*(void **)a2 == v5)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    WTF::fastFree((WTF *)v5, v9);
    v10 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v10 = (_BYTE *)(v4 + v7);
  }
  *v10 = HIBYTE(v6);
  v11 = *(_DWORD *)(a2 + 8);
  v12 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v12;
  v13 = *((_DWORD *)this + 6);
  if ((_DWORD)v12 == v11)
  {
    v14 = v12 + (v12 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v12 + 1)
      v16 = v12 + 1;
    else
      v16 = v15;
    if (HIDWORD(v16))
    {
      __break(0xC471u);
      JUMPOUT(0x19557B808);
    }
    v17 = *(void **)a2;
    v18 = (void *)WTF::fastMalloc((WTF *)v16);
    *(_DWORD *)(a2 + 8) = v16;
    *(_QWORD *)a2 = v18;
    memcpy(v18, v17, v12);
    if (v17)
    {
      if (*(void **)a2 == v17)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v17, v19);
    }
    v20 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v20 = (_BYTE *)(*(_QWORD *)a2 + v12);
  }
  *v20 = BYTE2(v13);
  v21 = *(_DWORD *)(a2 + 8);
  v22 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v22;
  v23 = *((_DWORD *)this + 6);
  if ((_DWORD)v22 == v21)
  {
    v24 = v22 + (v22 >> 2);
    if (v24 >= 0x10)
      v25 = v24 + 1;
    else
      v25 = 16;
    if (v25 <= v22 + 1)
      v26 = v22 + 1;
    else
      v26 = v25;
    if (HIDWORD(v26))
    {
      __break(0xC471u);
      JUMPOUT(0x19557B810);
    }
    v27 = *(void **)a2;
    v28 = (void *)WTF::fastMalloc((WTF *)v26);
    *(_DWORD *)(a2 + 8) = v26;
    *(_QWORD *)a2 = v28;
    memcpy(v28, v27, v22);
    if (v27)
    {
      if (*(void **)a2 == v27)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v27, v29);
    }
    v30 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v30 = (_BYTE *)(*(_QWORD *)a2 + v22);
  }
  *v30 = BYTE1(v23);
  v31 = *(_DWORD *)(a2 + 8);
  v32 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v32;
  v33 = *((_DWORD *)this + 6);
  if ((_DWORD)v32 == v31)
  {
    v34 = v32 + (v32 >> 2);
    if (v34 >= 0x10)
      v35 = v34 + 1;
    else
      v35 = 16;
    if (v35 <= v32 + 1)
      v36 = v32 + 1;
    else
      v36 = v35;
    if (HIDWORD(v36))
    {
      __break(0xC471u);
      JUMPOUT(0x19557B818);
    }
    v37 = *(void **)a2;
    v38 = (void *)WTF::fastMalloc((WTF *)v36);
    *(_DWORD *)(a2 + 8) = v36;
    *(_QWORD *)a2 = v38;
    memcpy(v38, v37, v32);
    if (v37)
    {
      if (*(void **)a2 == v37)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v37, v39);
    }
    v40 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v40 = (_BYTE *)(*(_QWORD *)a2 + v32);
  }
  *v40 = v33;
  v41 = *(_DWORD *)(a2 + 8);
  v42 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v42;
  v43 = *((_BYTE *)this + 28);
  if ((_DWORD)v42 == v41)
  {
    v44 = v42 + (v42 >> 2);
    if (v44 >= 0x10)
      v45 = v44 + 1;
    else
      v45 = 16;
    if (v45 <= v42 + 1)
      v46 = v42 + 1;
    else
      v46 = v45;
    if (HIDWORD(v46))
    {
      __break(0xC471u);
      JUMPOUT(0x19557B820);
    }
    v47 = *(void **)a2;
    v48 = (void *)WTF::fastMalloc((WTF *)v46);
    *(_DWORD *)(a2 + 8) = v46;
    *(_QWORD *)a2 = v48;
    memcpy(v48, v47, v42);
    if (v47)
    {
      if (*(void **)a2 == v47)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v47, v49);
    }
    v50 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v50 = (_BYTE *)(*(_QWORD *)a2 + v42);
  }
  *v50 = v43 | 0x80;
  v51 = *(_DWORD *)(a2 + 8);
  v52 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v52;
  v53 = *((_WORD *)this + 15);
  if ((_DWORD)v52 == v51)
  {
    v54 = v52 + (v52 >> 2);
    if (v54 >= 0x10)
      v55 = v54 + 1;
    else
      v55 = 16;
    if (v55 <= v52 + 1)
      v56 = v52 + 1;
    else
      v56 = v55;
    if (HIDWORD(v56))
    {
      __break(0xC471u);
      JUMPOUT(0x19557B828);
    }
    v57 = *(void **)a2;
    v58 = (void *)WTF::fastMalloc((WTF *)v56);
    *(_DWORD *)(a2 + 8) = v56;
    *(_QWORD *)a2 = v58;
    memcpy(v58, v57, v52);
    if (v57)
    {
      if (*(void **)a2 == v57)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v57, v59);
    }
    v60 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v60 = (_BYTE *)(*(_QWORD *)a2 + v52);
  }
  *v60 = HIBYTE(v53);
  v61 = *(_DWORD *)(a2 + 8);
  v62 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v62;
  v63 = *((_WORD *)this + 15);
  if ((_DWORD)v62 == v61)
  {
    v64 = v62 + (v62 >> 2);
    if (v64 >= 0x10)
      v65 = v64 + 1;
    else
      v65 = 16;
    if (v65 <= v62 + 1)
      v66 = v62 + 1;
    else
      v66 = v65;
    if (HIDWORD(v66))
    {
      __break(0xC471u);
      JUMPOUT(0x19557B830);
    }
    v67 = *(void **)a2;
    v68 = (void *)WTF::fastMalloc((WTF *)v66);
    *(_DWORD *)(a2 + 8) = v66;
    *(_QWORD *)a2 = v68;
    memcpy(v68, v67, v62);
    if (v67)
    {
      if (*(void **)a2 == v67)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v67, v69);
    }
    v70 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v70 = (_BYTE *)(*(_QWORD *)a2 + v62);
  }
  *v70 = v63;
  v71 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v71;
  v72 = *((unsigned int *)this + 5);
  if ((_DWORD)v72)
  {
    v73 = (const void *)*((_QWORD *)this + 1);
    v74 = v72 + v71;
    v75 = *(unsigned int *)(a2 + 8);
    if (v74 > v75)
    {
      v85 = v75 + (v75 >> 2);
      if (v85 >= 0x10)
        v86 = v85 + 1;
      else
        v86 = 16;
      if (v86 <= v74)
        v87 = v72 + v71;
      else
        v87 = v86;
      if (HIDWORD(v87))
        goto LABEL_123;
      v88 = *(void **)a2;
      v89 = (void *)WTF::fastMalloc((WTF *)v87);
      *(_DWORD *)(a2 + 8) = v87;
      *(_QWORD *)a2 = v89;
      memcpy(v89, v88, v71);
      if (v88)
      {
        if (*(void **)a2 == v88)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v88, v90);
      }
    }
    v76 = *(unsigned int *)(a2 + 12);
    if (v74 >= v76)
    {
      memcpy((void *)(*(_QWORD *)a2 + v76), v73, v72);
      *(_DWORD *)(a2 + 12) = v74;
      LODWORD(v71) = v72 + v71;
      goto LABEL_94;
    }
LABEL_123:
    __break(0xC471u);
    JUMPOUT(0x19557B800);
  }
LABEL_94:
  v77 = v71;
  v78 = *(unsigned int *)(a2 + 8);
  if (v78 <= 0x3F)
  {
    v79 = v78 + (v78 >> 2);
    v80 = 63;
    if (v79 > 0x3F)
      v80 = v79;
    if (v79 >= 0x10)
      v81 = v80 + 1;
    else
      v81 = 64;
    v82 = *(void **)a2;
    v83 = (void *)WTF::fastMalloc((WTF *)v81);
    *(_DWORD *)(a2 + 8) = v81;
    *(_QWORD *)a2 = v83;
    memcpy(v83, v82, v77);
    if (v82)
    {
      if (*(void **)a2 == v82)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v82, v84);
    }
  }
  *(_DWORD *)(a2 + 12) = 64;
  bzero((void *)(*(_QWORD *)a2 + v77), 64 - v77);
}

uint64_t fido::FidoHidContinuationPacket::FidoHidContinuationPacket(uint64_t result, int a2, char a3, uint64_t *a4)
{
  uint64_t v4;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v4 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(result + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(result + 20) = v4;
  *(_DWORD *)(result + 24) = a2;
  *(_QWORD *)result = off_1E336C700;
  *(_BYTE *)(result + 28) = a3;
  return result;
}

{
  uint64_t v4;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v4 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(result + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(result + 20) = v4;
  *(_DWORD *)(result + 24) = a2;
  *(_QWORD *)result = off_1E336C700;
  *(_BYTE *)(result + 28) = a3;
  return result;
}

void fido::FidoHidContinuationPacket::getSerializedData(fido::FidoHidContinuationPacket *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  const void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;

  v4 = (_BYTE *)WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)a2 = v4;
  *v4 = *((_BYTE *)this + 27);
  v4[1] = *((_WORD *)this + 13);
  v4[2] = BYTE1(*((_DWORD *)this + 6));
  v4[3] = *((_DWORD *)this + 6);
  v4[4] = *((_BYTE *)this + 28);
  v5 = (const void *)*((_QWORD *)this + 1);
  v6 = *((unsigned int *)this + 5);
  *(_QWORD *)(a2 + 8) = 0x500000040;
  if (!(_DWORD)v6)
  {
    v9 = 5;
LABEL_14:
    *(_DWORD *)(a2 + 12) = 64;
    bzero(&v4[v9], 64 - v9);
    return;
  }
  v7 = v6 + 5;
  if (v6 < 0x3C)
  {
LABEL_3:
    memcpy(v4 + 5, v5, v6);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = (v6 + 5);
    if (v8 <= 0x3F)
    {
      v10 = v8 + (v8 >> 2);
      v11 = 63;
      if (v10 > 0x3F)
        v11 = v10;
      if (v10 >= 0x10)
        v12 = v11 + 1;
      else
        v12 = 64;
      v13 = (_BYTE *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(a2 + 8) = v12;
      *(_QWORD *)a2 = v13;
      memcpy(v13, v4, v7);
      if (v4)
      {
        if (v13 == v4)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v4, v14);
        v4 = *(_BYTE **)a2;
      }
      else
      {
        v4 = v13;
      }
    }
    goto LABEL_14;
  }
  if (v7 <= 0x51)
    v15 = 81;
  else
    v15 = v6 + 5;
  if (!HIDWORD(v15))
  {
    v17 = WTF::fastMalloc((WTF *)v15);
    *(_DWORD *)(a2 + 8) = v15;
    *(_QWORD *)a2 = v17;
    v18 = v4[4];
    *(_DWORD *)v17 = *(_DWORD *)v4;
    *(_BYTE *)(v17 + 4) = v18;
    if ((_BYTE *)v17 == v4)
    {
      v17 = 0;
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    WTF::fastFree((WTF *)v4, v16);
    v4 = (_BYTE *)v17;
    goto LABEL_3;
  }
  __break(0xC471u);
}

WTF *fido::pin::validateAndConvertToUTF8@<X0>(WTF *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  WTF *v5;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4) > 3u && (WTF::String::utf8(), (this = v5) != 0))
  {
    if ((unint64_t)(*((_QWORD *)v5 + 1) - 64) >= 0xFFFFFFFFFFFFFFC4)
    {
      *(_QWORD *)a2 = v5;
      *(_BYTE *)(a2 + 8) = 1;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      if (*(_DWORD *)v5 == 1)
        return (WTF *)WTF::fastFree(v5, v4);
      else
        --*(_DWORD *)v5;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return this;
}

unint64_t fido::pin::RetriesResponse::parse(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  WTF::StringImpl *v20;
  _BYTE v21[16];
  _QWORD v22[2];
  char v23;

  fido::decodeResponseMap(a1, (uint64_t)v21);
  if (!v23)
  {
    LOBYTE(v15) = 0;
    return v15 | (unint64_t)(v1 << 8);
  }
  v20 = (WTF::StringImpl *)3;
  v19 = 0;
  v3 = v22[0];
  if (!v22[0])
    goto LABEL_21;
  v4 = v22;
  do
  {
    v5 = (uint64_t *)v3;
    v6 = v4;
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 < v19;
    if (v7 == v19)
      v8 = v5[5] < (uint64_t)v20;
    if (v8)
    {
      v9 = v5 + 1;
      v1 = 1;
    }
    else
    {
      v1 = 0;
      v9 = v5;
      v4 = v5;
    }
    v3 = *v9;
  }
  while (v3);
  if (v4 == v22)
    goto LABEL_21;
  if ((_DWORD)v1)
    v10 = v6;
  else
    v10 = v5;
  v11 = *((_DWORD *)v10 + 8);
  v12 = v19 < v11;
  if (v19 == v11)
  {
    if ((_DWORD)v1)
      v13 = v6;
    else
      v13 = v5;
    v12 = (uint64_t)v20 < v13[5];
  }
  if (v12)
  {
LABEL_21:
    cbor::CBORValue::internalCleanup((uint64_t)&v19, v2);
  }
  else
  {
    cbor::CBORValue::internalCleanup((uint64_t)&v19, v2);
    if ((_DWORD)v1)
      v17 = v6;
    else
      v17 = v5;
    if (!*((_DWORD *)v17 + 16))
    {
      if ((_DWORD)v1)
        v18 = v6;
      else
        v18 = v5;
      v15 = v18[9];
      v1 = v15 >> 8;
      goto LABEL_23;
    }
  }
  LOBYTE(v15) = 0;
LABEL_23:
  if (v23)
    cbor::CBORValue::internalCleanup((uint64_t)v21, v14);
  return v15 | (unint64_t)(v1 << 8);
}

void fido::pin::KeyAgreementResponse::~KeyAgreementResponse(unsigned int **this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

_QWORD *fido::pin::KeyAgreementResponse::KeyAgreementResponse(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

unsigned int **fido::pin::KeyAgreementResponse::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t fido::pin::KeyAgreementResponse::parse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  WTF::StringImpl *v20;
  _BYTE v21[16];
  _QWORD v22[2];
  char v23;

  result = fido::decodeResponseMap(a1, (uint64_t)v21);
  if (!v23)
    goto LABEL_22;
  v20 = (WTF::StringImpl *)1;
  v19 = 0;
  v5 = v22[0];
  if (!v22[0])
    goto LABEL_21;
  v6 = v22;
  do
  {
    v7 = (uint64_t *)v5;
    v8 = v6;
    v9 = *(_DWORD *)(v5 + 32);
    v10 = v9 < v19;
    if (v9 == v19)
      v10 = v7[5] < (uint64_t)v20;
    if (v10)
    {
      v12 = v7 + 1;
      v11 = 1;
    }
    else
    {
      v11 = 0;
      v12 = v7;
      v6 = v7;
    }
    v5 = *v12;
  }
  while (v5);
  if (v6 == v22)
    goto LABEL_21;
  if (v11)
    v13 = v8;
  else
    v13 = v7;
  v14 = *((_DWORD *)v13 + 8);
  v15 = v19 < v14;
  if (v19 == v14)
  {
    if (v11)
      v16 = v8;
    else
      v16 = v7;
    v15 = (uint64_t)v20 < v16[5];
  }
  if (v15)
  {
LABEL_21:
    result = cbor::CBORValue::internalCleanup((uint64_t)&v19, v4);
LABEL_22:
    *a2 = 0;
    a2[8] = 0;
    goto LABEL_23;
  }
  result = cbor::CBORValue::internalCleanup((uint64_t)&v19, v4);
  if (v11)
    v17 = v8;
  else
    v17 = v7;
  if (*((_DWORD *)v17 + 16) != 5)
    goto LABEL_22;
  if (v11)
    v18 = v8;
  else
    v18 = v7;
  result = (uint64_t)fido::pin::KeyAgreementResponse::parseFromCOSE((uint64_t)(v18 + 9), a2);
LABEL_23:
  if (v23)
    return cbor::CBORValue::internalCleanup((uint64_t)v21, v4);
  return result;
}

WTF::StringImpl *fido::pin::KeyAgreementResponse::parseFromCOSE@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  int v10;
  int v11;
  WTF::StringImpl *result;
  const WTF::StringImpl *v13;
  uint64_t *v14;
  _QWORD *v15;
  int v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  const WTF::StringImpl *v22;
  uint64_t *v23;
  _QWORD *v24;
  int v25;
  WTF *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  _QWORD *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  WTF::StringImpl *v40;
  uint64_t *v41;
  _QWORD *v42;
  int v43;
  int v44;
  BOOL v45;
  void *v46;
  WTF *v47;
  char v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF *v51;
  WTF::StringImpl *v52;

  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)v5 = xmmword_1968DF1C0;
  *(_OWORD *)(v5 + 16) = xmmword_1968DF1D0;
  *(_OWORD *)(v5 + 32) = xmmword_1968DF1E0;
  v8 = *(uint64_t **)(a1 + 8);
  v7 = (_QWORD *)(a1 + 8);
  v6 = v8;
  v52 = (WTF::StringImpl *)1;
  LODWORD(v51) = 0;
  if (!v8)
    goto LABEL_14;
  v9 = v7;
  do
  {
    v10 = *((_DWORD *)v6 + 8);
    if (v10)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_5;
    }
    else if (v6[5] > 0)
    {
LABEL_5:
      v9 = v6;
      goto LABEL_8;
    }
    ++v6;
LABEL_8:
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  if (v9 == v7)
    goto LABEL_14;
  v11 = *((_DWORD *)v9 + 8);
  if (v11)
  {
    if (v11 <= 0)
      goto LABEL_16;
    goto LABEL_14;
  }
  if ((uint64_t)v9[5] >= 2)
    goto LABEL_14;
LABEL_16:
  cbor::CBORValue::internalCleanup((uint64_t)&v51, v4);
  if (*((_DWORD *)v9 + 16) > 1u || v9[9] != *(_QWORD *)(v5 + 8))
    goto LABEL_15;
  v52 = *(WTF::StringImpl **)(v5 + 16);
  LODWORD(v51) = (unint64_t)v52 >> 63;
  v14 = (uint64_t *)*v7;
  if (!*v7)
    goto LABEL_14;
  v15 = v7;
  while (2)
  {
    v16 = *((_DWORD *)v14 + 8);
    if (v16 == (_DWORD)v51)
    {
      if (v16)
      {
        if (v16 == 1)
        {
          if (v14[5] > (uint64_t)v52)
            goto LABEL_32;
        }
        else if (v16 == 3)
        {
          v17 = (WTF *)v14[5];
          if (v17)
            v18 = *((_DWORD *)v17 + 1);
          else
            v18 = 0;
          v4 = v52;
          if (v52)
            v19 = *((_DWORD *)v52 + 1);
          else
            v19 = 0;
          if (v18 == v19)
          {
            if ((WTF::codePointCompare(v17, v52, v13) & 0x80000000) != 0)
            {
LABEL_32:
              ++v14;
              goto LABEL_35;
            }
          }
          else if (v18 < v19)
          {
            goto LABEL_32;
          }
        }
      }
      else if (v14[5] < (uint64_t)v52)
      {
        goto LABEL_32;
      }
    }
    else if (v16 < (int)v51)
    {
      goto LABEL_32;
    }
    v15 = v14;
LABEL_35:
    v14 = (uint64_t *)*v14;
    if (v14)
      continue;
    break;
  }
  if (v15 == v7)
    goto LABEL_14;
  v20 = *((_DWORD *)v15 + 8);
  v21 = (int)v51 < v20;
  if ((_DWORD)v51 != v20)
    goto LABEL_49;
  switch((_DWORD)v51)
  {
    case 3:
      if (v52)
        v29 = *((_DWORD *)v52 + 1);
      else
        v29 = 0;
      v4 = (WTF::StringImpl *)v15[5];
      if (v4)
        v30 = *((_DWORD *)v4 + 1);
      else
        v30 = 0;
      if (v29 == v30)
      {
        if ((WTF::codePointCompare(v52, v4, v13) & 0x80000000) == 0)
          break;
      }
      else if (v29 >= v30)
      {
        break;
      }
      goto LABEL_14;
    case 1:
      if ((uint64_t)v52 <= v15[5])
        break;
      goto LABEL_14;
    case 0:
      v21 = (uint64_t)v52 < v15[5];
LABEL_49:
      if (v21)
        goto LABEL_14;
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v51, v4);
  if (*((_DWORD *)v15 + 16) > 1u || v15[9] != *(_QWORD *)(v5 + 24))
    goto LABEL_15;
  v52 = *(WTF::StringImpl **)(v5 + 32);
  LODWORD(v51) = (unint64_t)v52 >> 63;
  v23 = (uint64_t *)*v7;
  if (!*v7)
    goto LABEL_14;
  v24 = v7;
  while (2)
  {
    v25 = *((_DWORD *)v23 + 8);
    if (v25 == (_DWORD)v51)
    {
      if (v25)
      {
        if (v25 == 1)
        {
          if (v23[5] > (uint64_t)v52)
            goto LABEL_66;
        }
        else if (v25 == 3)
        {
          v26 = (WTF *)v23[5];
          if (v26)
            v27 = *((_DWORD *)v26 + 1);
          else
            v27 = 0;
          v4 = v52;
          if (v52)
            v28 = *((_DWORD *)v52 + 1);
          else
            v28 = 0;
          if (v27 == v28)
          {
            if ((WTF::codePointCompare(v26, v52, v22) & 0x80000000) != 0)
            {
LABEL_66:
              ++v23;
              goto LABEL_71;
            }
          }
          else if (v27 < v28)
          {
            goto LABEL_66;
          }
        }
      }
      else if (v23[5] < (uint64_t)v52)
      {
        goto LABEL_66;
      }
    }
    else if (v25 < (int)v51)
    {
      goto LABEL_66;
    }
    v24 = v23;
LABEL_71:
    v23 = (uint64_t *)*v23;
    if (v23)
      continue;
    break;
  }
  if (v24 == v7)
  {
LABEL_14:
    cbor::CBORValue::internalCleanup((uint64_t)&v51, v4);
    goto LABEL_15;
  }
  v31 = *((_DWORD *)v24 + 8);
  v32 = (int)v51 < v31;
  if ((_DWORD)v51 != v31)
    goto LABEL_92;
  switch((_DWORD)v51)
  {
    case 3:
      if (v52)
        v37 = *((_DWORD *)v52 + 1);
      else
        v37 = 0;
      v4 = (WTF::StringImpl *)v24[5];
      if (v4)
        v38 = *((_DWORD *)v4 + 1);
      else
        v38 = 0;
      if (v37 == v38)
      {
        if ((WTF::codePointCompare(v52, v4, v22) & 0x80000000) == 0)
          break;
      }
      else if (v37 >= v38)
      {
        break;
      }
      goto LABEL_14;
    case 1:
      if ((uint64_t)v52 <= v24[5])
        break;
      goto LABEL_14;
    case 0:
      v32 = (uint64_t)v52 < v24[5];
LABEL_92:
      if (v32)
        goto LABEL_14;
      break;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v51, v4);
  if (*((_DWORD *)v24 + 16) > 1u || v24[9] != *(_QWORD *)(v5 + 40))
  {
LABEL_15:
    *a2 = 0;
    a2[8] = 0;
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v5, v4);
  }
  WTF::fastFree((WTF *)v5, v4);
  v52 = (WTF::StringImpl *)-2;
  LODWORD(v51) = 1;
  v34 = (uint64_t *)*v7;
  if (!*v7)
    goto LABEL_118;
  v35 = v7;
  while (2)
  {
    v36 = *((_DWORD *)v34 + 8);
    if (v36 == (_DWORD)v51)
    {
      if (v34[5] <= (uint64_t)v52)
        goto LABEL_101;
LABEL_99:
      ++v34;
    }
    else
    {
      if (v36 < (int)v51)
        goto LABEL_99;
LABEL_101:
      v35 = v34;
    }
    v34 = (uint64_t *)*v34;
    if (v34)
      continue;
    break;
  }
  if (v35 == v7)
    goto LABEL_118;
  v39 = *((_DWORD *)v35 + 8);
  if ((_DWORD)v51 == v39)
  {
    if ((uint64_t)v52 > v35[5])
LABEL_118:
      v35 = v7;
  }
  else if ((int)v51 < v39)
  {
    goto LABEL_118;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v51, v33);
  v52 = (WTF::StringImpl *)-3;
  LODWORD(v51) = 1;
  v41 = (uint64_t *)*v7;
  if (!*v7)
    goto LABEL_131;
  v42 = v7;
  while (2)
  {
    v43 = *((_DWORD *)v41 + 8);
    if (v43 == 1)
    {
      if (v41[5] > (uint64_t)v52)
        goto LABEL_123;
LABEL_125:
      v42 = v41;
    }
    else
    {
      if (v43 >= 1)
        goto LABEL_125;
LABEL_123:
      ++v41;
    }
    v41 = (uint64_t *)*v41;
    if (v41)
      continue;
    break;
  }
  if (v42 == v7)
    goto LABEL_131;
  v44 = *((_DWORD *)v42 + 8);
  v45 = v44 <= 1;
  if (v44 == 1)
    v45 = (uint64_t)v52 <= v42[5];
  if (!v45)
LABEL_131:
    v42 = v7;
  result = (WTF::StringImpl *)cbor::CBORValue::internalCleanup((uint64_t)&v51, v40);
  if (v35 == v7 || v42 == v7 || *((_DWORD *)v35 + 16) != 2 || *((_DWORD *)v42 + 16) != 2)
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::encodeRawPublicKey((uint64_t)(v35 + 9), (uint64_t)(v42 + 9), (char **)&v51);
    WebCore::CryptoKeyEC::importRaw(6, &v49, (uint64_t)&v51, 1, 32, &v50);
    v47 = v51;
    if (v51)
    {
      v51 = 0;
      LODWORD(v52) = 0;
      WTF::fastFree(v47, v46);
    }
    result = v49;
    v49 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v46);
      else
        *(_DWORD *)result -= 2;
    }
    v48 = v50;
    if (v50)
    {
      *(_QWORD *)a2 = v50;
      v48 = 1;
    }
    else
    {
      *a2 = 0;
    }
    a2[8] = v48;
  }
  return result;
}

uint64_t fido::pin::encodeCOSEPublicKey@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int *v50;

  if (*(_DWORD *)(result + 12) <= 0x20u)
    goto LABEL_21;
  v3 = result;
  v4 = *(_BYTE **)result;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)result = v4[1];
  *(_BYTE *)(result + 1) = v4[2];
  *(_BYTE *)(result + 2) = v4[3];
  *(_BYTE *)(result + 3) = v4[4];
  *(_BYTE *)(result + 4) = v4[5];
  *(_BYTE *)(result + 5) = v4[6];
  *(_BYTE *)(result + 6) = v4[7];
  *(_BYTE *)(result + 7) = v4[8];
  *(_BYTE *)(result + 8) = v4[9];
  *(_BYTE *)(result + 9) = v4[10];
  *(_BYTE *)(result + 10) = v4[11];
  *(_BYTE *)(result + 11) = v4[12];
  *(_BYTE *)(result + 12) = v4[13];
  *(_BYTE *)(result + 13) = v4[14];
  *(_BYTE *)(result + 14) = v4[15];
  *(_BYTE *)(result + 15) = v4[16];
  *(_BYTE *)(result + 16) = v4[17];
  *(_BYTE *)(result + 17) = v4[18];
  *(_BYTE *)(result + 18) = v4[19];
  *(_BYTE *)(result + 19) = v4[20];
  *(_BYTE *)(result + 20) = v4[21];
  *(_BYTE *)(result + 21) = v4[22];
  *(_BYTE *)(result + 22) = v4[23];
  *(_BYTE *)(result + 23) = v4[24];
  *(_BYTE *)(result + 24) = v4[25];
  *(_BYTE *)(result + 25) = v4[26];
  *(_BYTE *)(result + 26) = v4[27];
  *(_BYTE *)(result + 27) = v4[28];
  *(_BYTE *)(result + 28) = v4[29];
  *(_BYTE *)(result + 29) = v4[30];
  *(_BYTE *)(result + 30) = v4[31];
  *(_BYTE *)(result + 31) = v4[32];
  v5 = *(unsigned int *)(v3 + 12);
  if (v5 <= 0x20 || (unint64_t)(v5 - 33) <= 0x1F)
  {
LABEL_21:
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = *(_BYTE **)v3;
    v8 = (_BYTE *)WTF::fastMalloc((WTF *)0x20);
    *v8 = v7[33];
    v8[1] = v7[34];
    v8[2] = v7[35];
    v8[3] = v7[36];
    v8[4] = v7[37];
    v8[5] = v7[38];
    v8[6] = v7[39];
    v8[7] = v7[40];
    v8[8] = v7[41];
    v8[9] = v7[42];
    v8[10] = v7[43];
    v8[11] = v7[44];
    v8[12] = v7[45];
    v8[13] = v7[46];
    v8[14] = v7[47];
    v8[15] = v7[48];
    v8[16] = v7[49];
    v8[17] = v7[50];
    v8[18] = v7[51];
    v8[19] = v7[52];
    v8[20] = v7[53];
    v8[21] = v7[54];
    v8[22] = v7[55];
    v8[23] = v7[56];
    v8[24] = v7[57];
    v8[25] = v7[58];
    v8[26] = v7[59];
    v8[27] = v7[60];
    v8[28] = v7[61];
    v8[29] = v7[62];
    v8[30] = v7[63];
    v8[31] = v7[64];
    a2[2] = 0;
    a2[1] = 0;
    *a2 = a2 + 1;
    v46 = 2;
    v45 = 0;
    v44 = 1;
    v43 = 0;
    v50 = &v43;
    v9 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a2, (cbor::CBORValue *)&v43, (uint64_t)&std::piecewise_construct, (uint64_t *)&v50, (uint64_t)&v49);
    cbor::CBORValue::internalCleanup(v9 + 64, v10);
    v12 = v45;
    *(_DWORD *)(v9 + 64) = v45;
    switch(v12)
    {
      case 0:
      case 1:
        v13 = v46;
        goto LABEL_10;
      case 2:
      case 4:
        *(_QWORD *)(v9 + 72) = v46;
        v14 = v47;
        v46 = 0;
        v47 = 0;
        *(_QWORD *)(v9 + 80) = v14;
        break;
      case 3:
        v13 = v46;
        v46 = 0;
        goto LABEL_10;
      case 5:
        v16 = v46;
        v15 = v47;
        *(_QWORD *)(v9 + 80) = v47;
        v13 = v9 + 80;
        *(_QWORD *)(v9 + 72) = v16;
        v17 = v48;
        *(_QWORD *)(v9 + 88) = v48;
        if (v17)
        {
          *(_QWORD *)(v15 + 16) = v13;
          v46 = (uint64_t)&v47;
          v47 = 0;
          v48 = 0;
        }
        else
        {
LABEL_10:
          *(_QWORD *)(v9 + 72) = v13;
        }
        break;
      case 7:
        *(_DWORD *)(v9 + 72) = v46;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v43, v11);
    cbor::CBORValue::internalCleanup((uint64_t)&v45, v18);
    v46 = -25;
    v45 = 1;
    v44 = 3;
    v43 = 0;
    v50 = &v43;
    v19 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a2, (cbor::CBORValue *)&v43, (uint64_t)&std::piecewise_construct, (uint64_t *)&v50, (uint64_t)&v49);
    cbor::CBORValue::internalCleanup(v19 + 64, v20);
    v22 = v45;
    *(_DWORD *)(v19 + 64) = v45;
    switch(v22)
    {
      case 0:
      case 1:
        v23 = v46;
        goto LABEL_18;
      case 2:
      case 4:
        *(_QWORD *)(v19 + 72) = v46;
        v24 = v47;
        v46 = 0;
        v47 = 0;
        *(_QWORD *)(v19 + 80) = v24;
        break;
      case 3:
        v23 = v46;
        v46 = 0;
        goto LABEL_18;
      case 5:
        v26 = v46;
        v25 = v47;
        *(_QWORD *)(v19 + 80) = v47;
        v23 = v19 + 80;
        *(_QWORD *)(v19 + 72) = v26;
        v27 = v48;
        *(_QWORD *)(v19 + 88) = v48;
        if (v27)
        {
          *(_QWORD *)(v25 + 16) = v23;
          v46 = (uint64_t)&v47;
          v47 = 0;
          v48 = 0;
        }
        else
        {
LABEL_18:
          *(_QWORD *)(v19 + 72) = v23;
        }
        break;
      case 7:
        *(_DWORD *)(v19 + 72) = v46;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v43, v21);
    cbor::CBORValue::internalCleanup((uint64_t)&v45, v28);
    v46 = 1;
    v45 = 0;
    v44 = -1;
    v43 = 1;
    v50 = &v43;
    v29 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a2, (cbor::CBORValue *)&v43, (uint64_t)&std::piecewise_construct, (uint64_t *)&v50, (uint64_t)&v49);
    cbor::CBORValue::internalCleanup(v29 + 64, v30);
    *(_DWORD *)(v29 + 64) = 0;
    *(_QWORD *)(v29 + 72) = 1;
    cbor::CBORValue::internalCleanup((uint64_t)&v43, v31);
    cbor::CBORValue::internalCleanup((uint64_t)&v45, v32);
    v45 = 2;
    LODWORD(v47) = 32;
    v44 = -2;
    v43 = 1;
    v50 = &v43;
    v33 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a2, (cbor::CBORValue *)&v43, (uint64_t)&std::piecewise_construct, (uint64_t *)&v50, (uint64_t)&v49);
    cbor::CBORValue::internalCleanup(v33 + 64, v34);
    *(_DWORD *)(v33 + 64) = 2;
    v46 = 0;
    *(_QWORD *)(v33 + 72) = v6;
    v35 = v47;
    v47 = 0;
    *(_DWORD *)(v33 + 80) = v35;
    *(_DWORD *)(v33 + 84) = 32;
    cbor::CBORValue::internalCleanup((uint64_t)&v43, v36);
    cbor::CBORValue::internalCleanup((uint64_t)&v45, v37);
    v45 = 2;
    LODWORD(v47) = 32;
    v44 = -3;
    v43 = 1;
    v50 = &v43;
    v38 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a2, (cbor::CBORValue *)&v43, (uint64_t)&std::piecewise_construct, (uint64_t *)&v50, (uint64_t)&v49);
    cbor::CBORValue::internalCleanup(v38 + 64, v39);
    *(_DWORD *)(v38 + 64) = 2;
    v46 = 0;
    *(_QWORD *)(v38 + 72) = v8;
    v40 = v47;
    v47 = 0;
    *(_DWORD *)(v38 + 80) = v40;
    *(_DWORD *)(v38 + 84) = 32;
    cbor::CBORValue::internalCleanup((uint64_t)&v43, v41);
    return cbor::CBORValue::internalCleanup((uint64_t)&v45, v42);
  }
  return result;
}

uint64_t fido::pin::TokenResponse::parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  void (**v33)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden);
  WTF::StringImpl *v34[2];
  __int128 v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  unint64_t v39;
  int v40;
  _BYTE v41[16];
  _QWORD v42[2];
  char v43;
  WTF *v44;
  unint64_t v45;
  unsigned int v46;
  char v47;

  result = fido::decodeResponseMap(a2, (uint64_t)v41);
  if (!v43)
    goto LABEL_22;
  v34[0] = (WTF::StringImpl *)2;
  LODWORD(v33) = 0;
  v7 = v42[0];
  if (!v42[0])
    goto LABEL_21;
  v8 = v42;
  do
  {
    v9 = (uint64_t *)v7;
    v10 = v8;
    v11 = *(_DWORD *)(v7 + 32);
    v12 = v11 < (int)v33;
    if (v11 == (_DWORD)v33)
      v12 = v9[5] < (uint64_t)v34[0];
    if (v12)
    {
      v14 = v9 + 1;
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v14 = v9;
      v8 = v9;
    }
    v7 = *v14;
  }
  while (v7);
  if (v8 == v42)
    goto LABEL_21;
  if (v13)
    v15 = v10;
  else
    v15 = v9;
  v16 = *((_DWORD *)v15 + 8);
  v17 = (int)v33 < v16;
  if ((_DWORD)v33 == v16)
  {
    if (v13)
      v18 = v10;
    else
      v18 = v9;
    v17 = (uint64_t)v34[0] < v18[5];
  }
  if (v17)
  {
LABEL_21:
    result = cbor::CBORValue::internalCleanup((uint64_t)&v33, v6);
LABEL_22:
    *a3 = 0;
    a3[8] = 0;
    goto LABEL_23;
  }
  result = cbor::CBORValue::internalCleanup((uint64_t)&v33, v6);
  if (v13)
    v19 = v10;
  else
    v19 = v9;
  if (*((_DWORD *)v19 + 16) != 2)
    goto LABEL_22;
  if (v13)
    v20 = v10;
  else
    v20 = v9;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  v33 = off_1E3223378;
  v21 = (uint64_t)(v20 + 9);
  v36 = 0;
  v37 = 0;
  v22 = WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector((WebCore::CryptoAlgorithmAesCbcCfbParams *)&v33);
  WebCore::transformAESCBC((uint64_t)&v44, 1u, *v22, *(const void **)(a1 + 24), *(unsigned int *)(a1 + 36), v21, 0);
  v23 = v46;
  if (v46)
  {
    if (v46 != 1)
    {
      v32 = std::__throw_bad_variant_access[abi:sn180100]();
      return fido::pin::TokenResponse::pinAuth(v32);
    }
    v24 = v45;
    v45 = 0;
    LOBYTE(v38) = (_BYTE)v44;
    v39 = v24;
    v40 = 1;
    v25 = HIDWORD(v24);
  }
  else
  {
    v26 = v44;
    LODWORD(v24) = v45;
    LODWORD(v25) = HIDWORD(v45);
    v44 = 0;
    v45 = 0;
    v38 = v26;
    v39 = __PAIR64__(v25, v24);
    v40 = 0;
  }
  ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v46])(&v47, &v44);
  v28 = v36;
  if (v36)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    WTF::fastFree(v28, v27);
  }
  if (DWORD2(v35) != -1)
    ((void (*)(WTF **, __int128 *))off_1E336C718[DWORD2(v35)])(&v44, &v35);
  DWORD2(v35) = -1;
  v29 = v34[0];
  v33 = off_1E3226840;
  v34[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v27);
      if ((_DWORD)v23)
        goto LABEL_45;
LABEL_47:
      v30 = v38;
      v38 = 0;
      v39 = 0;
      if ((_DWORD)v25)
      {
        v31 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(v31 + 8) = 1;
        *(_WORD *)(v31 + 12) = 524;
        *(_BYTE *)(v31 + 14) = 1;
        *(_DWORD *)(v31 + 16) = 4;
        *(_QWORD *)v31 = off_1E33973D0;
        *(_BYTE *)(v31 + 20) = 15;
        *(_QWORD *)(v31 + 24) = v30;
        *(_DWORD *)(v31 + 32) = v24;
        *(_DWORD *)(v31 + 36) = v25;
        *(_QWORD *)a3 = v31;
        a3[8] = 1;
      }
      else
      {
        *(_QWORD *)a3 = 0;
        a3[8] = 1;
        if (v30)
          WTF::fastFree(v30, v27);
      }
      goto LABEL_51;
    }
    *(_DWORD *)v29 -= 2;
  }
  if (!(_DWORD)v23)
    goto LABEL_47;
LABEL_45:
  *a3 = 0;
  a3[8] = 0;
LABEL_51:
  result = ((uint64_t (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF **))off_1E336C728[v23])(&v33, &v38);
LABEL_23:
  if (v43)
    return cbor::CBORValue::internalCleanup((uint64_t)v41, v6);
  return result;
}

void fido::pin::TokenResponse::pinAuth(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  const void *v7;
  CCHmacAlgorithm v8;
  WTF *v9;
  void *v10;
  fido::pin::TokenResponse *v11;

  v4 = *a1;
  v5 = *(unsigned __int8 *)(*a1 + 20) - 13;
  if (v5 >= 5)
  {
    v11 = (fido::pin::TokenResponse *)std::__throw_bad_variant_access[abi:sn180100]();
    fido::pin::TokenResponse::token(v11);
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 12);
    v7 = *(const void **)a2;
    v8 = dword_1968DF178[(char)v5];
    v9 = (WTF *)qword_1968DF190[(char)v5];
    v10 = (void *)WTF::fastMalloc(v9);
    CCHmac(v8, *(const void **)(v4 + 24), *(unsigned int *)(v4 + 36), v7, v6, v10);
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 8) = (_DWORD)v9;
    *(_DWORD *)(a3 + 12) = 16;
  }
}

uint64_t fido::pin::TokenResponse::token(fido::pin::TokenResponse *this)
{
  return *(_QWORD *)this + 24;
}

WTF *fido::pin::encodeAsCBOR@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = 0;
  return fido::pin::encodePinCommand(a1, 1u, &v2);
}

{
  uint64_t v2;

  v2 = 0;
  return fido::pin::encodePinCommand(a1, 2u, &v2);
}

WTF *fido::pin::encodePinCommand(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  int *v9;
  WTF **v10;
  WTF **v11;
  int v12;
  int v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;
  const WTF::StringImpl *v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  WTF **v34;
  WTF **v35;
  int v36;
  int v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  void *v51;
  int v52;
  void *v53;
  char v54;
  WTF *v55;
  WTF *result;
  void *v57;
  size_t v58;
  unint64_t v59;
  unint64_t v60;
  WTF *v61;
  void *v62;
  WTF *v63;
  int v64;
  WTF **v65;
  _QWORD v66[2];
  WTF **v67;
  WTF **v68;
  uint64_t v69;
  WTF **v70;
  WTF *v71;
  uint64_t v72;

  v68 = 0;
  v69 = 0;
  v67 = (WTF **)&v68;
  v8 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v8 + 32) = 0;
  v9 = (int *)(v8 + 32);
  *(_QWORD *)(v8 + 40) = 1;
  *(_DWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 1;
  v10 = (WTF **)&v68;
  v11 = (WTF **)&v68;
  if (!v68)
    goto LABEL_50;
  v12 = 0;
  v11 = v68;
  v10 = (WTF **)&v68;
  while (1)
  {
    v13 = *((_DWORD *)v11 + 8);
    if (v12 == v13)
    {
      if (v12 != 3)
      {
        if (v12 == 1)
        {
          v17 = *(_QWORD *)(v8 + 40);
          v18 = v11[5];
          if (v17 > (uint64_t)v18)
            goto LABEL_10;
          goto LABEL_30;
        }
        if (!v12)
        {
          v14 = *(_QWORD *)(v8 + 40);
          v15 = v11[5];
          if (v14 < (uint64_t)v15)
            goto LABEL_10;
          goto LABEL_26;
        }
        goto LABEL_22;
      }
      v19 = *(WTF **)(v8 + 40);
      if (v19)
        v20 = *((_DWORD *)v19 + 1);
      else
        v20 = 0;
      v6 = v11[5];
      if (v6)
        v21 = *((_DWORD *)v6 + 1);
      else
        v21 = 0;
      if (v20 != v21)
      {
        if (v20 < v21)
        {
LABEL_10:
          v16 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_50;
          goto LABEL_43;
        }
        goto LABEL_34;
      }
      if ((WTF::codePointCompare(v19, v6, v7) & 0x80000000) != 0)
        goto LABEL_10;
      v13 = *((_DWORD *)v11 + 8);
      v12 = *v9;
    }
    else if (v12 < v13)
    {
      goto LABEL_10;
    }
    v22 = v13 < v12;
    if (v13 != v12)
      goto LABEL_27;
LABEL_22:
    if (v12 != 3)
    {
      if (v12 != 1)
      {
        if (v12)
          break;
        v15 = v11[5];
        v14 = *(_QWORD *)(v8 + 40);
LABEL_26:
        v22 = (uint64_t)v15 < v14;
LABEL_27:
        if (!v22)
          break;
        goto LABEL_42;
      }
      v18 = v11[5];
      v17 = *(_QWORD *)(v8 + 40);
LABEL_30:
      if ((uint64_t)v18 <= v17)
        break;
      goto LABEL_42;
    }
    v6 = v11[5];
LABEL_34:
    if (v6)
      v23 = *((_DWORD *)v6 + 1);
    else
      v23 = 0;
    v24 = *(_QWORD *)(v8 + 40);
    if (v24)
      v25 = *(_DWORD *)(v24 + 4);
    else
      v25 = 0;
    if (v23 == v25)
    {
      if ((WTF::codePointCompare(v6, *(const WTF::StringImpl **)(v8 + 40), v7) & 0x80000000) == 0)
        break;
      goto LABEL_42;
    }
    if (v23 >= v25)
      break;
LABEL_42:
    v10 = v11 + 1;
    v16 = v11[1];
    if (!v16)
      goto LABEL_50;
LABEL_43:
    v12 = *v9;
    v11 = (WTF **)v16;
  }
  if (*v10)
  {
    cbor::CBORValue::internalCleanup(v8 + 64, v6);
    cbor::CBORValue::internalCleanup((uint64_t)v9, v26);
    WTF::fastFree((WTF *)v8, v27);
    goto LABEL_53;
  }
LABEL_50:
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = v11;
  *v10 = (WTF *)v8;
  if (*v67)
  {
    v67 = (WTF **)*v67;
    v8 = (uint64_t)*v10;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v68, v8);
  ++v69;
LABEL_53:
  v28 = a2;
  v31 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v31 + 32) = 0;
  v32 = (int *)(v31 + 32);
  *(_QWORD *)(v31 + 40) = 2;
  *(_DWORD *)(v31 + 64) = 0;
  v33 = v31 + 64;
  *(_QWORD *)(v31 + 72) = v28;
  v34 = (WTF **)&v68;
  v35 = (WTF **)&v68;
  if (!v68)
    goto LABEL_102;
  v36 = 0;
  v35 = v68;
  v34 = (WTF **)&v68;
  while (2)
  {
    v37 = *((_DWORD *)v35 + 8);
    if (v36 != v37)
    {
      if (v36 < v37)
        goto LABEL_62;
      goto LABEL_73;
    }
    switch(v36)
    {
      case 3:
        v43 = *(WTF **)(v31 + 40);
        if (v43)
          v44 = *((_DWORD *)v43 + 1);
        else
          v44 = 0;
        v29 = v35[5];
        if (v29)
          v45 = *((_DWORD *)v29 + 1);
        else
          v45 = 0;
        if (v44 != v45)
        {
          if (v44 < v45)
            goto LABEL_62;
          goto LABEL_86;
        }
        if ((WTF::codePointCompare(v43, v29, v30) & 0x80000000) != 0)
          goto LABEL_62;
        v37 = *((_DWORD *)v35 + 8);
        v36 = *v32;
LABEL_73:
        v46 = v37 < v36;
        if (v37 == v36)
          break;
LABEL_79:
        if (!v46)
          goto LABEL_100;
        goto LABEL_94;
      case 1:
        v41 = *(_QWORD *)(v31 + 40);
        v42 = v35[5];
        if (v41 > (uint64_t)v42)
          goto LABEL_62;
        goto LABEL_82;
      case 0:
        v38 = *(_QWORD *)(v31 + 40);
        v39 = v35[5];
        if (v38 >= (uint64_t)v39)
          goto LABEL_78;
LABEL_62:
        v40 = *v35;
        v34 = v35;
        if (!*v35)
          goto LABEL_102;
LABEL_95:
        v36 = *v32;
        v35 = (WTF **)v40;
        continue;
    }
    break;
  }
  if (v36 != 3)
  {
    if (v36 != 1)
    {
      if (v36)
        goto LABEL_100;
      v39 = v35[5];
      v38 = *(_QWORD *)(v31 + 40);
LABEL_78:
      v46 = (uint64_t)v39 < v38;
      goto LABEL_79;
    }
    v42 = v35[5];
    v41 = *(_QWORD *)(v31 + 40);
LABEL_82:
    if ((uint64_t)v42 <= v41)
      goto LABEL_100;
    goto LABEL_94;
  }
  v29 = v35[5];
LABEL_86:
  if (v29)
    v47 = *((_DWORD *)v29 + 1);
  else
    v47 = 0;
  v48 = *(_QWORD *)(v31 + 40);
  if (v48)
    v49 = *(_DWORD *)(v48 + 4);
  else
    v49 = 0;
  if (v47 == v49)
  {
    if ((WTF::codePointCompare(v29, *(const WTF::StringImpl **)(v31 + 40), v30) & 0x80000000) == 0)
      goto LABEL_100;
    goto LABEL_94;
  }
  if (v47 < v49)
  {
LABEL_94:
    v34 = v35 + 1;
    v40 = v35[1];
    if (!v40)
      goto LABEL_102;
    goto LABEL_95;
  }
LABEL_100:
  if (*v34)
  {
    cbor::CBORValue::internalCleanup(v33, v29);
    cbor::CBORValue::internalCleanup((uint64_t)v32, v50);
    WTF::fastFree((WTF *)v31, v51);
    goto LABEL_105;
  }
LABEL_102:
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = v35;
  *v34 = (WTF *)v31;
  if (*v67)
  {
    v67 = (WTF **)*v67;
    v31 = (uint64_t)*v34;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v68, v31);
  ++v69;
LABEL_105:
  if (*a3)
    (*(void (**)(_QWORD, WTF ***))(*(_QWORD *)*a3 + 16))(*a3, &v67);
  v64 = 5;
  v65 = v67;
  v66[0] = v68;
  v66[1] = v69;
  if (v69)
  {
    v68[2] = (WTF *)v66;
    v67 = (WTF **)&v68;
    v68 = 0;
    v69 = 0;
  }
  else
  {
    v65 = (WTF **)v66;
  }
  v71 = 0;
  v72 = 0;
  v70 = &v71;
  v52 = cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)&v70, (const cbor::CBORValue *)&v64, 16);
  v54 = v52;
  v55 = v71;
  if (v52)
  {
    LODWORD(v33) = HIDWORD(v72);
  }
  else if (v71)
  {
    v71 = 0;
    LODWORD(v72) = 0;
    WTF::fastFree(v55, v53);
    v55 = 0;
  }
  cbor::CBORValue::internalCleanup((uint64_t)&v64, (WTF::StringImpl *)v53);
  result = (WTF *)WTF::fastMalloc((WTF *)1);
  *(_QWORD *)a1 = result;
  *(_BYTE *)result = 6;
  *(_QWORD *)(a1 + 8) = 0x100000001;
  if ((v54 & 1) == 0)
  {
    __break(1u);
LABEL_127:
    __break(0xC471u);
    return result;
  }
  if (!(_DWORD)v33)
    goto LABEL_123;
  v58 = v33;
  v59 = v33 + 1;
  if (v59 > 0x10)
    v60 = v33 + 1;
  else
    v60 = 16;
  if (HIDWORD(v60))
    goto LABEL_127;
  v61 = result;
  v63 = (WTF *)WTF::fastMalloc((WTF *)v60);
  *(_DWORD *)(a1 + 8) = v60;
  *(_QWORD *)a1 = v63;
  *(_BYTE *)v63 = *(_BYTE *)v61;
  if (v63 == v61)
  {
    v63 = 0;
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  WTF::fastFree(v61, v62);
  memcpy((char *)v63 + 1, v55, v58);
  *(_DWORD *)(a1 + 12) = v59;
LABEL_123:
  if (v55)
    WTF::fastFree(v55, v57);
  return (WTF *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v67, (WTF *)v68);
}

uint64_t fido::pin::TokenRequest::tryCreate@<X0>(fido::pin::TokenRequest *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t result;
  void *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  WTF *v24;
  WTF *v25;
  void *v26;
  void *v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  WTF *v34;
  WTF **v35;
  uint64_t v36;
  WTF *v37;
  int v38;
  uint64_t v39;
  void *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  WTF **v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WTF **v64;
  WTF *v65;
  uint64_t v66;
  WTF *v67;
  int v68;
  int v69;
  int v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoKeyEC::generatePair(6, &v56, 1, 32, (uint64_t)&v74);
  v10 = v56;
  v56 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (!v76)
  {
    v4 = v74;
    v5 = v75;
    v74 = 0;
    v75 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) != 1)
      goto LABEL_81;
    v11 = *(int *)(v5 + 32);
    v12 = 0.0;
    if (v11 <= 2)
      v12 = dbl_1968DF160[v11];
    v13 = vcvtpd_u64_f64(v12);
    if (v13)
    {
      if (HIDWORD(v13))
      {
        __break(0xC471u);
        JUMPOUT(0x19557DCC8);
      }
      v6 = (WTF *)WTF::fastMalloc((WTF *)v13);
    }
    else
    {
      v6 = 0;
    }
    v56 = (WTF::StringImpl *)v13;
    result = CCECCryptorComputeSharedSecret();
    if ((_DWORD)result)
    {
      if (v6)
        result = WTF::fastFree(v6, v15);
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 48) = 0;
      goto LABEL_60;
    }
    PAL::CryptoDigest::create(2, (uint64_t *)&v73);
    v16 = v73;
    PAL::CryptoDigest::addBytes((uint64_t)v73, v6, v13);
    PAL::CryptoDigest::computeHash((uint64_t)v16, (unsigned __int8 **)&v71);
    v17 = HIDWORD(v72);
    v18 = 8 * HIDWORD(v72);
    if (v18 == 128 || v18 == 256 || v18 == 192)
    {
      v19 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v19 + 8) = 1;
      *(_WORD *)(v19 + 12) = 520;
      *(_BYTE *)(v19 + 14) = 1;
      *(_DWORD *)(v19 + 16) = 3;
      *(_QWORD *)v19 = off_1E3397370;
      *(_QWORD *)(v19 + 24) = v71;
      v20 = v72;
      v71 = 0;
      v72 = 0;
      *(_DWORD *)(v19 + 32) = v20;
      *(_DWORD *)(v19 + 36) = v17;
    }
    else
    {
      v19 = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19557DC8CLL);
    }
    if (*(_BYTE *)(v4 + 13))
      goto LABEL_77;
    v21 = *(int *)(v4 + 32);
    v22 = 0.0;
    if (v21 <= 2)
      v22 = dbl_1968DF160[v21];
    v23 = vcvtpd_u64_f64(v22);
    if ((v23 >> 31))
    {
LABEL_81:
      __break(0xC471u);
      JUMPOUT(0x19557DC28);
    }
    v24 = (WTF *)((2 * v23) | 1);
    v25 = (WTF *)WTF::fastMalloc(v24);
    v56 = v24;
    if (!CCECCryptorExportKey() && v56 == v24)
    {
      v67 = v25;
      v68 = (int)v24;
      v69 = (int)v24;
      v70 = 0;
      fido::pin::encodeCOSEPublicKey((uint64_t)&v67, &v64);
      PAL::CryptoDigest::create(2, (uint64_t *)&v56);
      v28 = v56;
      v73 = v56;
      if (v16)
      {
        v29 = *(unsigned int **)v16;
        *(_QWORD *)v16 = 0;
        if (v29)
        {
          v30 = v29[4];
          if ((_DWORD)v30 != -1)
            ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v30])(&v62, v29 + 2);
          v29[4] = -1;
          WTF::fastFree((WTF *)v29, v27);
        }
        WTF::fastFree(v16, v27);
      }
      v31 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v32 = (const void *)(v31 + 16);
        v33 = *(_QWORD *)(v31 + 8);
      }
      else
      {
        LODWORD(v33) = 0;
        v32 = 0;
      }
      PAL::CryptoDigest::addBytes((uint64_t)v28, v32, v33);
      PAL::CryptoDigest::computeHash((uint64_t)v28, (unsigned __int8 **)&v62);
      v35 = v64;
      v34 = v65;
      v57 = v64;
      v58 = v65;
      v36 = v66;
      v59 = v66;
      if (v66)
      {
        *((_QWORD *)v65 + 2) = &v58;
        v64 = &v65;
        v65 = 0;
        v66 = 0;
      }
      else
      {
        v57 = &v58;
        v35 = &v58;
      }
      v37 = v62;
      v38 = v63;
      v62 = 0;
      v63 = 0;
      v56 = 0;
      *(_QWORD *)a2 = v19;
      *(_QWORD *)(a2 + 8) = v35;
      *(_QWORD *)(a2 + 16) = v34;
      v39 = a2 + 16;
      *(_QWORD *)(a2 + 24) = v36;
      if (v36)
      {
        *((_QWORD *)v34 + 2) = v39;
        v57 = &v58;
        v58 = 0;
        v59 = 0;
        v34 = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = v39;
      }
      v60 = 0;
      v61 = 0;
      *(_QWORD *)(a2 + 32) = v37;
      *(_DWORD *)(a2 + 40) = v38;
      *(_DWORD *)(a2 + 44) = 16;
      *(_BYTE *)(a2 + 48) = 1;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v57, v34);
      v41 = (unsigned int *)v56;
      v56 = 0;
      if (!v41)
        goto LABEL_46;
      v42 = v41 + 2;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_46;
      goto LABEL_78;
    }
    WTF::fastFree(v25, v26);
  }
LABEL_77:
  v41 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_78:
  atomic_store(1u, v41 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
LABEL_46:
  v45 = v62;
  if (v62)
  {
    v62 = 0;
    WTF::fastFree(v45, v40);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v64, v65);
  if (v70 != -1)
    ((void (*)(WTF::StringImpl **, WTF **))off_1E336C728[v70])(&v56, &v67);
  result = (uint64_t)v71;
  if (v71)
    result = WTF::fastFree(v71, v46);
  v47 = v73;
  if (v73)
  {
    v48 = *(unsigned int **)v73;
    *(_QWORD *)v73 = 0;
    if (v48)
    {
      v49 = v48[4];
      if ((_DWORD)v49 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v49])(&v56, v48 + 2);
      v48[4] = -1;
      WTF::fastFree((WTF *)v48, v46);
    }
    result = WTF::fastFree(v47, v46);
  }
  if (v6)
    result = WTF::fastFree(v6, v46);
LABEL_60:
  v50 = (unsigned int *)(v5 + 8);
  do
  {
    v51 = __ldaxr(v50);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, v50));
  if (v52)
  {
    if (!v4)
      goto LABEL_68;
  }
  else
  {
    atomic_store(1u, (unsigned int *)(v5 + 8));
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (!v4)
      goto LABEL_68;
  }
  v53 = (unsigned int *)(v4 + 8);
  do
  {
    v54 = __ldaxr(v53);
    v55 = v54 - 1;
  }
  while (__stlxr(v55, v53));
  if (!v55)
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
LABEL_68:
  if (v76 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E336C738[v76])(&v56, &v74);
  return result;
}

uint64_t fido::pin::TokenRequest::sharedKey(fido::pin::TokenRequest *this)
{
  return *(_QWORD *)this;
}

uint64_t fido::pin::SetPinRequest::sharedKey(fido::pin::SetPinRequest *this)
{
  return *(_QWORD *)this;
}

unsigned __int8 *fido::pin::SetPinRequest::tryCreate@<X0>(unsigned __int8 *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v8;
  void *v9;
  WTF *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  double v14;
  WTF *v15;
  void *v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  WTF *v24;
  void *v25;
  void *v26;
  WTF *v27;
  size_t v28;
  unsigned int v29;
  int v30;
  _BYTE *v31;
  int v33;
  void **v34;
  void *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  uint64_t v39;
  const void *v40;
  size_t v41;
  CCHmacAlgorithm v42;
  WTF *v43;
  void *v44;
  int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v58;
  WTF *v59;
  unsigned int *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  unsigned int *v73;
  const WTF::String *v74;
  WTF *v75;
  WTF::StringImpl *v76[2];
  __int128 v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  _QWORD v81[2];
  int v82;
  const void *v83;
  uint64_t v84;
  int v85;
  WTF *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF *v89;
  uint64_t v90;
  WTF *v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned __int8 *v95;
  uint64_t v96;
  const WTF::String *v97;
  unsigned int *v98;
  uint64_t v99;
  int v100;

  if (!*(_QWORD *)this)
    goto LABEL_7;
  if (*(_DWORD *)(*(_QWORD *)this + 4) < 4u)
    goto LABEL_7;
  v8 = this;
  this = (unsigned __int8 *)WTF::String::utf8();
  v10 = v75;
  if (!v75)
    goto LABEL_7;
  if ((unint64_t)(*((_QWORD *)v75 + 1) - 64) <= 0xFFFFFFFFFFFFFFC3)
  {
    v75 = 0;
    if (*(_DWORD *)v10 == 1)
      this = (unsigned __int8 *)WTF::fastFree(v10, v9);
    else
      --*(_DWORD *)v10;
LABEL_7:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 64) = 0;
    return this;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (unsigned int *)v75;
  v91 = v75;
  WebCore::CryptoKeyEC::generatePair(6, &v91, 1, 32, (uint64_t)&v98);
  if (*(_DWORD *)v75 == 2)
    WTF::StringImpl::destroy(v75, v12);
  else
    *(_DWORD *)v75 -= 2;
  if (v100)
    goto LABEL_126;
  v11 = v98;
  v4 = v99;
  v98 = 0;
  v99 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) != 1)
  {
    __break(0xC471u);
    goto LABEL_133;
  }
  v13 = *(int *)(v4 + 32);
  v14 = 0.0;
  if (v13 <= 2)
    v14 = dbl_1968DF160[v13];
  v5 = vcvtpd_u64_f64(v14);
  if (v5)
  {
    if (HIDWORD(v5))
    {
      __break(0xC471u);
      JUMPOUT(0x19557E5D8);
    }
    v15 = (WTF *)WTF::fastMalloc((WTF *)v5);
  }
  else
  {
    v15 = 0;
  }
  v75 = (WTF *)v5;
  this = (unsigned __int8 *)CCECCryptorComputeSharedSecret();
  if ((_DWORD)this)
  {
    if (v15)
      this = (unsigned __int8 *)WTF::fastFree(v15, v16);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 64) = 0;
    goto LABEL_95;
  }
  PAL::CryptoDigest::create(2, (uint64_t *)&v97);
  a2 = v97;
  PAL::CryptoDigest::addBytes((uint64_t)v97, v15, v5);
  PAL::CryptoDigest::computeHash((uint64_t)a2, &v95);
  v17 = HIDWORD(v96);
  if (HIDWORD(v96))
  {
    v5 = WTF::fastMalloc((WTF *)HIDWORD(v96));
    memcpy((void *)v5, v95, v17);
    v19 = 8 * v17;
    if (8 * v17 == 128 || v19 == 256 || v19 == 192)
    {
      v20 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v20 + 8) = 1;
      *(_WORD *)(v20 + 12) = 520;
      *(_BYTE *)(v20 + 14) = 1;
      *(_DWORD *)(v20 + 16) = 3;
      *(_QWORD *)v20 = off_1E3397370;
      *(_QWORD *)(v20 + 24) = v5;
      *(_DWORD *)(v20 + 32) = v17;
      *(_DWORD *)(v20 + 36) = v17;
      goto LABEL_31;
    }
    WTF::fastFree((WTF *)v5, v18);
  }
  v20 = 0;
LABEL_31:
  if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19557E588);
  }
  if (*((_BYTE *)v11 + 13))
    goto LABEL_126;
  v21 = (int)v11[8];
  v22 = 0.0;
  if (v21 <= 2)
    v22 = dbl_1968DF160[v21];
  v74 = v15;
  v23 = vcvtpd_u64_f64(v22);
  if ((v23 >> 31))
  {
    __break(0xC471u);
    JUMPOUT(0x19557E5E0);
  }
  v5 = (2 * v23) | 1;
  v24 = (WTF *)WTF::fastMalloc((WTF *)v5);
  v75 = (WTF *)v5;
  if (CCECCryptorExportKey() || v75 != (WTF *)v5)
  {
    WTF::fastFree(v24, v25);
    goto LABEL_126;
  }
  v91 = v24;
  v92 = v5;
  v93 = v5;
  v94 = 0;
  fido::pin::encodeCOSEPublicKey((uint64_t)&v91, &v88);
  v87 = 64;
  v86 = (WTF *)WTF::fastMalloc((WTF *)0x40);
  WTF::String::utf8();
  v27 = v75;
  v73 = v11;
  v28 = *((_QWORD *)v75 + 1);
  if (!v28)
  {
    v75 = 0;
    goto LABEL_42;
  }
  a2 = (const WTF::String *)(v28 + HIDWORD(v87));
  if ((unint64_t)a2 > v87)
  {
    v72 = v20;
    v68 = v87 + ((unint64_t)v87 >> 2);
    if (v68 >= 0x10)
      v69 = v68 + 1;
    else
      v69 = 16;
    if (v69 <= (unint64_t)a2)
      v70 = v28 + HIDWORD(v87);
    else
      v70 = v69;
    if (!HIDWORD(v70))
    {
      v11 = (unsigned int *)v86;
      LODWORD(v87) = v70;
      v86 = (WTF *)WTF::fastMalloc((WTF *)v70);
      memcpy(v86, v11, HIDWORD(v87));
      v20 = v72;
      if (v11)
      {
        if (v86 == (WTF *)v11)
        {
          v86 = 0;
          LODWORD(v87) = 0;
        }
        WTF::fastFree((WTF *)v11, v71);
      }
      goto LABEL_40;
    }
    __break(0xC471u);
LABEL_133:
    JUMPOUT(0x19557E524);
  }
LABEL_40:
  if ((unint64_t)a2 < HIDWORD(v87))
  {
    __break(0xC471u);
    JUMPOUT(0x19557E5F0);
  }
  memcpy((char *)v86 + HIDWORD(v87), (char *)v75 + 16, v28);
  HIDWORD(v87) += v28;
  v27 = v75;
  v75 = 0;
LABEL_42:
  if (*(_DWORD *)v27 == 1)
    WTF::fastFree(v27, v26);
  else
    --*(_DWORD *)v27;
  v29 = HIDWORD(v87);
  if (SHIDWORD(v87) <= 63)
  {
    v30 = HIDWORD(v87) - 64;
    do
    {
      if (v29 == (_DWORD)v87)
      {
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v86, (WTF *)(v29 + 1));
        v31 = (char *)v86 + HIDWORD(v87);
      }
      else
      {
        v31 = (char *)v86 + v29;
      }
      *v31 = 0;
      v29 = ++HIDWORD(v87);
    }
    while (!__CFADD__(v30++, 1));
  }
  if ((_DWORD)v17)
  {
    v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x28);
    *((_DWORD *)v8 + 2) = 1;
    *((_WORD *)v8 + 6) = 524;
    v8[14] = 1;
    *((_DWORD *)v8 + 4) = 4;
    *(_QWORD *)v8 = off_1E33973D0;
    v8[20] = 15;
    *((_QWORD *)v8 + 3) = v95;
    v33 = v96;
    v95 = 0;
    v96 = 0;
    *((_DWORD *)v8 + 8) = v33;
    *((_DWORD *)v8 + 9) = v17;
  }
  else
  {
    v8 = 0;
  }
  *(_OWORD *)v76 = 0u;
  v77 = 0u;
  v75 = (WTF *)off_1E3223378;
  v5 = (unint64_t)&v75;
  v78 = 0;
  v79 = 0;
  v34 = WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector((WebCore::CryptoAlgorithmAesCbcCfbParams *)&v75);
  WebCore::transformAESCBC((uint64_t)&v83, 0, *v34, *(const void **)(v20 + 24), *(unsigned int *)(v20 + 36), (uint64_t)&v86, 0);
  v36 = v78;
  if (v78)
  {
    v78 = 0;
    LODWORD(v79) = 0;
    WTF::fastFree(v36, v35);
  }
  if (DWORD2(v77) != -1)
    ((void (*)(_QWORD *, __int128 *))off_1E336C718[DWORD2(v77)])(v81, &v77);
  DWORD2(v77) = -1;
  v37 = v76[0];
  v75 = (WTF *)off_1E3226840;
  v76[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (!v85)
  {
    v38 = v8[20] - 13;
    if (v38 < 5)
    {
      v39 = v20;
      v40 = v83;
      v41 = HIDWORD(v84);
      v42 = dword_1968DF178[(char)v38];
      v43 = (WTF *)qword_1968DF190[(char)v38];
      v44 = (void *)WTF::fastMalloc(v43);
      CCHmac(v42, *((const void **)v8 + 3), *((unsigned int *)v8 + 9), v40, v41, v44);
      v82 = 0;
      v45 = v84;
      v83 = 0;
      v84 = 0;
      v81[1] = 0;
      v81[0] = 0;
      v47 = (WTF::StringImpl **)v88;
      v46 = v89;
      v76[0] = v88;
      v76[1] = v89;
      v48 = v90;
      *(_QWORD *)&v77 = v90;
      if (v90)
      {
        *((_QWORD *)v89 + 2) = &v76[1];
        v88 = (WTF::StringImpl *)&v89;
        v89 = 0;
        v90 = 0;
        v46 = v76[1];
        v48 = v77;
      }
      else
      {
        v76[0] = (WTF::StringImpl *)&v76[1];
        v47 = &v76[1];
      }
      v79 = v44;
      v80 = 0;
      *((_QWORD *)&v77 + 1) = v40;
      v78 = 0;
      v75 = 0;
      *(_QWORD *)a3 = v39;
      *(_QWORD *)(a3 + 8) = v47;
      *(_QWORD *)(a3 + 16) = v46;
      v49 = a3 + 16;
      *(_QWORD *)(a3 + 24) = v48;
      if (v48)
      {
        *((_QWORD *)v46 + 2) = v49;
        v76[0] = (WTF::StringImpl *)&v76[1];
        v76[1] = 0;
        *(_QWORD *)&v77 = 0;
        v40 = (const void *)*((_QWORD *)&v77 + 1);
        v44 = v79;
        v46 = 0;
      }
      else
      {
        *(_QWORD *)(a3 + 8) = v49;
      }
      v11 = v73;
      *(_QWORD *)(a3 + 32) = v40;
      *(_DWORD *)(a3 + 40) = v45;
      *(_DWORD *)(a3 + 44) = v41;
      *((_QWORD *)&v77 + 1) = 0;
      v79 = 0;
      *(_QWORD *)(a3 + 48) = v44;
      *(_DWORD *)(a3 + 56) = (_DWORD)v43;
      *(_DWORD *)(a3 + 60) = (_DWORD)v43;
      *(_BYTE *)(a3 + 64) = 1;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)v76, v46);
      a2 = v74;
      v51 = (unsigned int *)v75;
      v75 = 0;
      if (v51)
      {
        v52 = v51 + 2;
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          atomic_store(1u, v51 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
        }
      }
      v5 = (unint64_t)off_1E336C728;
      if (v82 != -1)
        ((void (*)(WTF **, _QWORD *))off_1E336C728[v82])(&v75, v81);
      if (v85 != -1)
        ((void (*)(WTF **, const void **))off_1E336C728[v85])(&v75, &v83);
      v55 = (unsigned int *)(v8 + 8);
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (v57)
        goto LABEL_81;
      goto LABEL_127;
    }
  }
LABEL_126:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_127:
  atomic_store(1u, (unsigned int *)v8 + 2);
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 8))(v8);
LABEL_81:
  v58 = v86;
  if (v86)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree(v58, v50);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v88, v89);
  if (v94 != -1)
    (*(void (**)(WTF **, WTF **))(v5 + 8 * v94))(&v75, &v91);
  this = v95;
  if (v95)
    this = (unsigned __int8 *)WTF::fastFree((WTF *)v95, v16);
  v59 = v97;
  if (v97)
  {
    v60 = *(unsigned int **)v97;
    *(_QWORD *)v97 = 0;
    if (v60)
    {
      v61 = v60[4];
      if ((_DWORD)v61 != -1)
        ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v61])(&v75, v60 + 2);
      v60[4] = -1;
      WTF::fastFree((WTF *)v60, v16);
    }
    this = (unsigned __int8 *)WTF::fastFree(v59, v16);
  }
  if (a2)
    this = (unsigned __int8 *)WTF::fastFree(a2, v16);
LABEL_95:
  v62 = (unsigned int *)(v4 + 8);
  do
  {
    v63 = __ldaxr(v62);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, v62));
  if (v64)
  {
    if (v11)
    {
LABEL_99:
      v65 = v11 + 2;
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        atomic_store(1u, v11 + 2);
        this = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  else
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v11)
      goto LABEL_99;
  }
  if (v100 != -1)
    this = (unsigned __int8 *)((uint64_t (*)(WTF **, unsigned int **))off_1E336C738[v100])(&v75, &v98);
  if (*(_DWORD *)v10 == 1)
    return (unsigned __int8 *)WTF::fastFree(v10, v16);
  --*(_DWORD *)v10;
  return this;
}

uint64_t fido::pin::encodeAsCBOR@<X0>(fido::pin *this@<X0>, uint64_t a2@<X8>)
{
  char *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  fido::pin *v22;
  const fido::pin::SetPinRequest *v23;
  uint64_t v24;
  void (**v25)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden);
  WTF::StringImpl *v26[2];
  WTF *v27[2];
  WTF *v28;
  uint64_t v29;
  _QWORD v30[2];
  int v31;
  char v32;

  *(_OWORD *)v26 = 0u;
  *(_OWORD *)v27 = 0u;
  v25 = off_1E3223378;
  v28 = 0;
  v29 = 0;
  v5 = (char *)this + 32;
  v6 = *(_QWORD *)this;
  v7 = WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector((WebCore::CryptoAlgorithmAesCbcCfbParams *)&v25);
  WebCore::transformAESCBC((uint64_t)v30, 0, *v7, *(const void **)(v6 + 24), *(unsigned int *)(v6 + 36), (uint64_t)v5, 0);
  v9 = v28;
  if (v28)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v9, v8);
  }
  if (LODWORD(v27[1]) != -1)
    ((void (*)(char *, WTF **))off_1E336C718[LODWORD(v27[1])])(&v32, v27);
  LODWORD(v27[1]) = -1;
  v10 = v26[0];
  v25 = off_1E3226840;
  v26[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (_QWORD *)((char *)this + 16);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  v25 = (void (**)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden))*((_QWORD *)this + 1);
  v26[0] = v12;
  v26[1] = *((WTF::StringImpl **)this + 3);
  if (v26[1])
  {
    *((_QWORD *)v12 + 2) = v26;
    *((_QWORD *)this + 1) = v11;
    *v11 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    v25 = (void (**)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden))v26;
  }
  if (v31)
  {
    v22 = (fido::pin *)std::__throw_bad_variant_access[abi:sn180100]();
    return fido::pin::encodeAsCBOR(v22, v23);
  }
  else
  {
    v27[0] = (WTF *)v30[0];
    v27[1] = (WTF *)v30[1];
    v13 = WTF::fastMalloc((WTF *)0x30);
    v14 = v13;
    *(_QWORD *)v13 = off_1E336C778;
    *(_QWORD *)(v13 + 8) = v25;
    v15 = v26[0];
    *(WTF::StringImpl **)(v13 + 16) = v26[0];
    v16 = v13 + 16;
    v17 = v26[1];
    *(WTF::StringImpl **)(v13 + 24) = v26[1];
    if (v17)
    {
      *((_QWORD *)v15 + 2) = v16;
      v25 = (void (**)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden))v26;
      v26[0] = 0;
      v26[1] = 0;
    }
    else
    {
      *(_QWORD *)(v13 + 8) = v16;
    }
    *(WTF **)(v13 + 32) = v27[0];
    v18 = v27[1];
    v27[0] = 0;
    v27[1] = 0;
    *(_QWORD *)(v13 + 40) = v18;
    v24 = v13;
    fido::pin::encodePinCommand(a2, 5u, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v20 = v27[0];
    if (v27[0])
    {
      v27[0] = 0;
      LODWORD(v27[1]) = 0;
      WTF::fastFree(v20, v19);
    }
    return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v25, v26[0]);
  }
}

{
  _QWORD *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  _QWORD *v11;
  _QWORD *v12;
  WTF *v13;
  _QWORD *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  WTF **v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  _QWORD *v31;

  v5 = (_QWORD *)((char *)this + 16);
  v6 = (WTF *)*((_QWORD *)this + 2);
  v24 = (WTF **)*((_QWORD *)this + 1);
  v25 = v6;
  v26 = *((_QWORD *)this + 3);
  if (v26)
  {
    *((_QWORD *)v6 + 2) = &v25;
    *((_QWORD *)this + 1) = v5;
    *v5 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    v24 = &v25;
  }
  v7 = (WTF *)*((unsigned int *)this + 11);
  v27 = 0;
  LODWORD(v28) = 0;
  HIDWORD(v28) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (WTF *)WTF::fastMalloc(v7);
    LODWORD(v28) = (_DWORD)v7;
    v27 = v8;
    memcpy(v8, *((const void **)this + 4), *((unsigned int *)this + 11));
  }
  v9 = (WTF *)*((unsigned int *)this + 15);
  v29 = 0;
  LODWORD(v30) = 0;
  HIDWORD(v30) = (_DWORD)v9;
  if ((_DWORD)v9)
  {
    v10 = (WTF *)WTF::fastMalloc(v9);
    LODWORD(v30) = (_DWORD)v9;
    v29 = v10;
    memcpy(v10, *((const void **)this + 6), *((unsigned int *)this + 15));
  }
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  v12 = v11;
  *v11 = off_1E336C7A0;
  v11[1] = v24;
  v13 = v25;
  v11[2] = v25;
  v14 = v11 + 2;
  v15 = v26;
  v11[3] = v26;
  if (v15)
  {
    *((_QWORD *)v13 + 2) = v14;
    v24 = &v25;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v11[1] = v14;
  }
  v16 = v27;
  v27 = 0;
  v11[4] = v16;
  v17 = v28;
  v28 = 0;
  v11[5] = v17;
  v18 = v29;
  v29 = 0;
  v11[6] = v18;
  v19 = v30;
  v30 = 0;
  v11[7] = v19;
  v31 = v11;
  fido::pin::encodePinCommand(a2, 3u, &v31);
  (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v21 = v29;
  if (v29)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    WTF::fastFree(v21, v20);
  }
  v22 = v27;
  if (v27)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v22, v20);
  }
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v24, v25);
}

BOOL fido::isConvertibleToU2fRegisterCommand(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;

  if (*(_BYTE *)(a1 + 134))
  {
    if (!*(_BYTE *)(a1 + 133) || *(_BYTE *)(a1 + 132) != 0)
      return 0;
  }
  v2 = *(unsigned int *)(a1 + 100);
  if (!(_DWORD)v2)
    return 0;
  v3 = v2 - 1;
  v4 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
    result = v5 == -7;
  }
  while (v5 != -7 && v3-- != 0);
  return result;
}

BOOL fido::isConvertibleToU2fSignCommand(uint64_t a1)
{
  BOOL v1;

  if (*(_BYTE *)(a1 + 48))
    v1 = *(_DWORD *)(a1 + 44) == 0;
  else
    v1 = 1;
  return !v1;
}

WTF *fido::convertToU2fRegisterCommand@<X0>(WTF *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  BOOL v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (uint64_t)result;
  if ((!*(_BYTE *)(a2 + 134) || (*(_BYTE *)(a2 + 133) ? (v5 = *(_BYTE *)(a2 + 132) == 0) : (v5 = 0), v5))
    && (v6 = *(unsigned int *)(a2 + 100), (_DWORD)v6))
  {
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 2;
      if (v8 == -7)
        break;
      if (!--v6)
        goto LABEL_11;
    }
    if (*(_BYTE *)(a2 + 24))
    {
      WebCore::produceRpIdHash((unsigned __int8 **)&v11);
      *(_QWORD *)a3 = v13;
      v10 = v14;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(a3 + 8) = v10;
      *(_BYTE *)(a3 + 16) = 1;
      result = v11;
      if (v11)
      {
        v11 = 0;
        v12 = 0;
        return (WTF *)WTF::fastFree(result, v9);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
LABEL_11:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

WTF *fido::`anonymous namespace'::constructU2fRegisterCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF *result;
  WTF *v7;
  size_t v8;
  const void *v9;
  unint64_t v10;
  size_t v11;
  const void *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  void *v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  int v26;

  result = (WTF *)WTF::fastMalloc((WTF *)0x40);
  v7 = result;
  v8 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v8)
  {
    v9 = *(const void **)a3;
    if (v8 >= 0x41)
    {
      if (v8 <= 0x51)
        v10 = 81;
      else
        v10 = *(unsigned int *)(a3 + 12);
      v15 = WTF::fastMalloc((WTF *)v10);
      if ((WTF *)v15 == v7)
        v17 = 0;
      else
        v17 = (WTF *)v15;
      if ((WTF *)v15 == v7)
        LODWORD(v10) = 0;
      WTF::fastFree(v7, v16);
      v7 = v17;
    }
    else
    {
      LODWORD(v10) = 64;
    }
    result = (WTF *)memcpy(v7, v9, v8);
  }
  else
  {
    LODWORD(v10) = 64;
  }
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(const void **)a2;
    v13 = v11 + v8;
    if (v11 + v8 > v10)
    {
      v18 = v10 + ((unint64_t)v10 >> 2);
      if (v18 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 16;
      if (v19 <= v13)
        v10 = v11 + v8;
      else
        v10 = v19;
      if (HIDWORD(v10))
      {
        __break(0xC471u);
        return result;
      }
      v20 = (WTF *)WTF::fastMalloc((WTF *)v10);
      memcpy(v20, v7, v8);
      if (v7)
      {
        if (v20 == v7)
        {
          v20 = 0;
          LODWORD(v10) = 0;
        }
        WTF::fastFree(v7, v21);
      }
      v7 = v20;
    }
    memcpy((char *)v7 + v8, v12, v11);
  }
  else
  {
    LODWORD(v13) = v8;
  }
  v22 = 196864;
  v25 = v10;
  v26 = v13;
  v23 = 0x10000;
  v24 = v7;
  apdu::ApduCommand::getEncodedCommand((apdu::ApduCommand *)&v22, a1);
  result = v24;
  if (v24)
  {
    v24 = 0;
    v25 = 0;
    return (WTF *)WTF::fastFree(result, v14);
  }
  return result;
}

WTF *fido::convertToU2fCheckOnlySignCommand@<X0>(WTF *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  void *v7;
  WTF *v8;
  int v9;

  if (*a3)
  {
    *a4 = 0;
    a4[16] = 0;
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    v6 = (uint64_t)result;
    WebCore::produceRpIdHash((unsigned __int8 **)&v8);
    result = v8;
    if (v8)
    {
      v8 = 0;
      v9 = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF *fido::`anonymous namespace'::constructU2fSignCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  WTF *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  const void *v19;
  WTF *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  const void *v27;
  size_t v28;
  unint64_t v29;
  char v30;
  int v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  WTF *v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  WTF *v50;
  WTF *v51;
  void *v52;
  char *v53;
  _QWORD v54[2];
  _QWORD v55[2];
  WTF *v56;
  int v57;
  int v58;
  WTF *v59;
  uint64_t v60;

  v5 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_67;
  v55[0] = &v59;
  result = (WTF *)((uint64_t (*)(_QWORD *, uint64_t))off_1E336C748[v5])(v55, a4);
  if ((unint64_t)result >= 0x100)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return result;
  }
  v59 = 0;
  v60 = 0;
  v12 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v12 == -1)
    goto LABEL_67;
  v55[0] = v54;
  v13 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E336C748[v12])(v55, a4);
  v14 = v13 + 65;
  if (v13 == -65)
  {
    v15 = 0;
  }
  else
  {
    if (HIDWORD(v14))
      goto LABEL_72;
    v15 = (WTF *)WTF::fastMalloc((WTF *)(v13 + 65));
    LODWORD(v60) = v14;
    v59 = v15;
  }
  v16 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v16)
  {
    v17 = *(const void **)a3;
    if (v14 < v16)
    {
      v35 = v14 + (v14 >> 2);
      if (v35 >= 0x10)
        v36 = v35 + 1;
      else
        v36 = 16;
      if (v36 <= v16)
        v37 = v16;
      else
        v37 = v36;
      if (HIDWORD(v37))
      {
        __break(0xC471u);
        JUMPOUT(0x19557F0A8);
      }
      v38 = (WTF *)WTF::fastMalloc((WTF *)v37);
      v40 = v38;
      LODWORD(v60) = v37;
      v59 = v38;
      if (v15)
      {
        if (v38 == v15)
        {
          v40 = 0;
          v59 = 0;
          LODWORD(v60) = 0;
        }
        WTF::fastFree(v15, v39);
      }
      v15 = v40;
    }
    memcpy(v15, v17, v16);
    HIDWORD(v60) = v16;
  }
  v18 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v18)
  {
    v19 = *(const void **)a2;
    v20 = v59;
    if (v18 + v16 > v60)
    {
      v41 = v60 + ((unint64_t)v60 >> 2);
      if (v41 >= 0x10)
        v42 = v41 + 1;
      else
        v42 = 16;
      if (v42 <= v18 + v16)
        v43 = v18 + v16;
      else
        v43 = v42;
      if (HIDWORD(v43))
      {
        __break(0xC471u);
        JUMPOUT(0x19557F0B0);
      }
      v44 = (WTF *)WTF::fastMalloc((WTF *)v43);
      LODWORD(v60) = v43;
      v45 = v44;
      v59 = v44;
      memcpy(v44, v20, v16);
      if (v20)
      {
        if (v45 == v20)
        {
          v45 = 0;
          v59 = 0;
          LODWORD(v60) = 0;
        }
        WTF::fastFree(v20, v46);
      }
      v20 = v45;
    }
    memcpy((char *)v20 + v16, v19, v18);
    HIDWORD(v60) = v18 + v16;
    LODWORD(v16) = v18 + v16;
  }
  v21 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v21 == -1)
    goto LABEL_67;
  v55[0] = v54;
  v22 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E336C748[v21])(v55, a4);
  LOBYTE(v55[0]) = v22;
  if ((_DWORD)v16 == (_DWORD)v60)
  {
    v53 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v59, (WTF *)(v16 + 1), (unint64_t)v55);
    *((_BYTE *)v59 + HIDWORD(v60)) = *v53;
    LODWORD(v16) = HIDWORD(v60);
  }
  else
  {
    *((_BYTE *)v59 + v16) = v22;
  }
  HIDWORD(v60) = v16 + 1;
  v23 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v23 == -1)
  {
LABEL_67:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_72;
  }
  v55[0] = v54;
  v24 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E336C758[v23])(v55, a4);
  v26 = HIDWORD(v60);
  if (v25)
  {
    v27 = (const void *)v24;
    v28 = v25;
    v29 = v25 + HIDWORD(v60);
    if (v29 <= v60)
    {
LABEL_20:
      if (v29 < HIDWORD(v60))
      {
        __break(0xC471u);
        JUMPOUT(0x19557F0A0);
      }
      memcpy((char *)v59 + HIDWORD(v60), v27, v28);
      LODWORD(v26) = v29;
      goto LABEL_22;
    }
    v47 = v60 + ((unint64_t)v60 >> 2);
    if (v47 >= 0x10)
      v48 = v47 + 1;
    else
      v48 = 16;
    if (v48 <= v29)
      v49 = v25 + HIDWORD(v60);
    else
      v49 = v48;
    if (!HIDWORD(v49))
    {
      v50 = v59;
      v51 = (WTF *)WTF::fastMalloc((WTF *)v49);
      LODWORD(v60) = v49;
      v59 = v51;
      memcpy(v51, v50, v26);
      if (v50)
      {
        if (v59 == v50)
        {
          v59 = 0;
          LODWORD(v60) = 0;
        }
        WTF::fastFree(v50, v52);
      }
      goto LABEL_20;
    }
LABEL_72:
    __break(0xC471u);
    JUMPOUT(0x19557F098);
  }
LABEL_22:
  LODWORD(v55[0]) = 512;
  if (a5)
    v30 = 7;
  else
    v30 = 3;
  BYTE2(v55[0]) = v30;
  v31 = v60;
  v32 = v59;
  v59 = 0;
  v60 = 0;
  v57 = v31;
  v58 = v26;
  v55[1] = 0x10000;
  v56 = v32;
  apdu::ApduCommand::getEncodedCommand((apdu::ApduCommand *)v55, (uint64_t)v54);
  *(_QWORD *)a1 = v54[0];
  *(_QWORD *)(a1 + 8) = v54[1];
  *(_BYTE *)(a1 + 16) = 1;
  v34 = v56;
  if (v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree(v34, v33);
  }
  result = v59;
  if (v59)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    return (WTF *)WTF::fastFree(result, v33);
  }
  return result;
}

WTF *fido::convertToU2fSignCommand@<X0>(WTF *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _BYTE *a5@<X8>)
{
  BOOL v6;
  uint64_t v8;
  void *v9;
  WTF *v10;
  int v11;

  if (*(_BYTE *)(a2 + 48))
    v6 = *(_DWORD *)(a2 + 44) == 0;
  else
    v6 = 1;
  if (v6)
  {
    *a5 = 0;
    a5[16] = 0;
  }
  else
  {
    v8 = (uint64_t)result;
    if ((a4 & 1) != 0 && !*(_BYTE *)(a2 + 200))
    {
      __break(1u);
    }
    else
    {
      WebCore::produceRpIdHash((unsigned __int8 **)&v10);
      result = v10;
      if (v10)
      {
        v10 = 0;
        v11 = 0;
        return (WTF *)WTF::fastFree(result, v9);
      }
    }
  }
  return result;
}

uint64_t fido::constructBogusU2fRegistrationCommand@<X0>(uint64_t a1@<X8>)
{
  WTF *v3;
  __int128 v4;
  WTF *v5;
  __int128 v6;
  void *v7;
  void *v8;
  _QWORD v10[2];
  _QWORD v11[2];

  v3 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  v11[1] = 0x2000000020;
  v11[0] = v3;
  *(_QWORD *)&v4 = 0x4141414141414141;
  *((_QWORD *)&v4 + 1) = 0x4141414141414141;
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  v10[1] = 0x2000000020;
  v10[0] = v5;
  *(_QWORD *)&v6 = 0x4242424242424242;
  *((_QWORD *)&v6 + 1) = 0x4242424242424242;
  *(_OWORD *)v5 = v6;
  *((_OWORD *)v5 + 1) = v6;
  WTF::fastFree(v5, v7);
  return WTF::fastFree(v3, v8);
}

WTF *fido::readU2fRegisterResponse@<X0>(unsigned int *a1@<X1>, char a2@<W2>, uint64_t *a3@<X3>, _BYTE *a4@<X4>, uint64_t *a5@<X8>)
{
  unsigned int v6;
  _BYTE *v8;
  BOOL v9;
  WTF *result;
  WTF *v14;
  uint64_t v15;
  _BYTE *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  unint64_t v20;
  uint64_t v21;
  WTF *v22;
  char *v23;
  WTF *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *i;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  WTF *v54;
  void *v55;
  WTF *j;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  uint64_t v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  char *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF *v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char **v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF *v107;
  uint64_t v108;
  void *v109;
  WTF *v110;
  WTF *v111;
  _BYTE *v112;
  char v113;
  WTF **v114;
  WTF *v115;
  uint64_t v116;
  WTF *v117;
  int v118;
  WTF *v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132[2];

  v6 = a1[3];
  if (v6 < 2 || ((v8 = *(_BYTE **)a1, v6 >= 0x42) ? (v9 = *(_BYTE *)(*(_QWORD *)a1 + 1) == 4) : (v9 = 0), !v9))
  {
    v121 = 0;
    v122 = 0;
LABEL_7:
    *a5 = 0;
    goto LABEL_8;
  }
  v14 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  v128 = 0x2000000020;
  v127 = v14;
  *(_BYTE *)v14 = v8[2];
  *((_BYTE *)v14 + 1) = v8[3];
  *((_BYTE *)v14 + 2) = v8[4];
  *((_BYTE *)v14 + 3) = v8[5];
  *((_BYTE *)v14 + 4) = v8[6];
  *((_BYTE *)v14 + 5) = v8[7];
  *((_BYTE *)v14 + 6) = v8[8];
  *((_BYTE *)v14 + 7) = v8[9];
  *((_BYTE *)v14 + 8) = v8[10];
  *((_BYTE *)v14 + 9) = v8[11];
  *((_BYTE *)v14 + 10) = v8[12];
  *((_BYTE *)v14 + 11) = v8[13];
  *((_BYTE *)v14 + 12) = v8[14];
  *((_BYTE *)v14 + 13) = v8[15];
  *((_BYTE *)v14 + 14) = v8[16];
  *((_BYTE *)v14 + 15) = v8[17];
  *((_BYTE *)v14 + 16) = v8[18];
  *((_BYTE *)v14 + 17) = v8[19];
  *((_BYTE *)v14 + 18) = v8[20];
  *((_BYTE *)v14 + 19) = v8[21];
  *((_BYTE *)v14 + 20) = v8[22];
  *((_BYTE *)v14 + 21) = v8[23];
  *((_BYTE *)v14 + 22) = v8[24];
  *((_BYTE *)v14 + 23) = v8[25];
  *((_BYTE *)v14 + 24) = v8[26];
  *((_BYTE *)v14 + 25) = v8[27];
  *((_BYTE *)v14 + 26) = v8[28];
  *((_BYTE *)v14 + 27) = v8[29];
  *((_BYTE *)v14 + 28) = v8[30];
  *((_BYTE *)v14 + 29) = v8[31];
  *((_BYTE *)v14 + 30) = v8[32];
  *((_BYTE *)v14 + 31) = v8[33];
  v15 = a1[3];
  if (v15 <= 0x21 || (unint64_t)(v15 - 34) <= 0x1F)
    goto LABEL_130;
  v16 = *(_BYTE **)a1;
  v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  v126 = 0x2000000020;
  v125 = v17;
  *(_BYTE *)v17 = v16[34];
  *((_BYTE *)v17 + 1) = v16[35];
  *((_BYTE *)v17 + 2) = v16[36];
  *((_BYTE *)v17 + 3) = v16[37];
  *((_BYTE *)v17 + 4) = v16[38];
  *((_BYTE *)v17 + 5) = v16[39];
  *((_BYTE *)v17 + 6) = v16[40];
  *((_BYTE *)v17 + 7) = v16[41];
  *((_BYTE *)v17 + 8) = v16[42];
  *((_BYTE *)v17 + 9) = v16[43];
  *((_BYTE *)v17 + 10) = v16[44];
  *((_BYTE *)v17 + 11) = v16[45];
  *((_BYTE *)v17 + 12) = v16[46];
  *((_BYTE *)v17 + 13) = v16[47];
  *((_BYTE *)v17 + 14) = v16[48];
  *((_BYTE *)v17 + 15) = v16[49];
  *((_BYTE *)v17 + 16) = v16[50];
  *((_BYTE *)v17 + 17) = v16[51];
  *((_BYTE *)v17 + 18) = v16[52];
  *((_BYTE *)v17 + 19) = v16[53];
  *((_BYTE *)v17 + 20) = v16[54];
  *((_BYTE *)v17 + 21) = v16[55];
  *((_BYTE *)v17 + 22) = v16[56];
  *((_BYTE *)v17 + 23) = v16[57];
  *((_BYTE *)v17 + 24) = v16[58];
  *((_BYTE *)v17 + 25) = v16[59];
  *((_BYTE *)v17 + 26) = v16[60];
  *((_BYTE *)v17 + 27) = v16[61];
  *((_BYTE *)v17 + 28) = v16[62];
  *((_BYTE *)v17 + 29) = v16[63];
  *((_BYTE *)v17 + 30) = v16[64];
  *((_BYTE *)v17 + 31) = v16[65];
  WebCore::encodeES256PublicKeyAsCBOR((uint64_t *)&v127, (uint64_t *)&v125, (uint64_t)&v121);
  v18 = v125;
  if (v125)
  {
    v125 = 0;
    LODWORD(v126) = 0;
    WTF::fastFree(v18, a1);
  }
  v19 = v127;
  if (v127)
  {
    v127 = 0;
    LODWORD(v128) = 0;
    WTF::fastFree(v19, a1);
  }
  if (!HIDWORD(v122))
    goto LABEL_7;
  v20 = a1[3];
  if (v20 < 0x43)
    goto LABEL_28;
  v21 = *(_QWORD *)a1;
  v22 = (WTF *)*(unsigned __int8 *)(*(_QWORD *)a1 + 66);
  if ((unint64_t)v22 + 67 > v20)
    goto LABEL_28;
  if (v20 - 67 < (unint64_t)v22)
    goto LABEL_130;
  HIDWORD(v128) = *(unsigned __int8 *)(*(_QWORD *)a1 + 66);
  if ((_DWORD)v22)
  {
    v23 = (char *)(v21 + 67);
    v24 = (WTF *)WTF::fastMalloc(v22);
    LODWORD(v128) = (_DWORD)v22;
    v127 = v24;
    do
    {
      v25 = *v23++;
      *(_BYTE *)v24 = v25;
      v24 = (WTF *)((char *)v24 + 1);
      v22 = (WTF *)((char *)v22 - 1);
    }
    while (v22);
    HIDWORD(v126) = 16;
    v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    LODWORD(v126) = 16;
    v125 = v26;
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    WebCore::buildAttestedCredentialData((uint64_t)&v125, (uint64_t)&v127, (uint64_t)&v121, (uint64_t *)&v119);
    v27 = v125;
    if (v125)
    {
      v125 = 0;
      LODWORD(v126) = 0;
      WTF::fastFree(v27, a1);
    }
    v28 = v127;
    if (v127)
    {
      v127 = 0;
      LODWORD(v128) = 0;
      WTF::fastFree(v28, a1);
    }
  }
  else
  {
LABEL_28:
    v119 = 0;
    v120 = 0;
  }
  if (HIDWORD(v120))
  {
    v29 = a1[3];
    if (v29 < 0x43)
      goto LABEL_37;
    v30 = *(unsigned __int8 *)(*(_QWORD *)a1 + 66);
    if (v30 + 67 > v29)
      goto LABEL_37;
    if (v29 - 67 < v30)
      goto LABEL_130;
    if (*(_BYTE *)(*(_QWORD *)a1 + 66))
    {
      v31 = *(_QWORD *)a1 + 67;
      v32 = WTF::fastMalloc((WTF *)*(unsigned __int8 *)(*(_QWORD *)a1 + 66));
      v33 = (WTF *)v32;
      v34 = 0;
      do
      {
        *(_BYTE *)(v32 + v34) = *(_BYTE *)(v31 + v34);
        ++v34;
      }
      while (v30 != v34);
    }
    else
    {
LABEL_37:
      v33 = 0;
      v30 = 0;
    }
    WebCore::buildAuthData(65, 0, (uint64_t)&v119, (uint64_t)&v117);
    v36 = v30 + 67;
    v37 = a1[3];
    if (v37 <= v30 + 67
      || (v38 = *(_QWORD *)a1, *(_BYTE *)(*(_QWORD *)a1 + v36) != 48)
      || (v39 = v30 + 68, v30 + 68 >= v37)
      || ((v40 = *(unsigned __int8 *)(v38 + v39), (v40 & 0x80u) == 0) ? (v41 = 1) : (v41 = v40 - 127),
          (v42 = v41 + v39, v41 <= 8) ? (v43 = v42 > v37) : (v43 = 1),
          v43))
    {
      v44 = 0;
    }
    else
    {
      v63 = v41 - 1;
      if (v41 != 1)
      {
        if (v30 + 69 <= v37)
          v64 = a1[3];
        else
          v64 = v30 + 69;
        if (v64 - v30 - 69 <= v41 - 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19557FCE0);
        }
        v40 = 0;
        v65 = 8 * v41 - 16;
        v66 = (unsigned __int8 *)(v38 + v30 + 69);
        do
        {
          v67 = *v66++;
          v40 += v67 << v65;
          v65 -= 8;
          --v63;
        }
        while (v63);
      }
      v44 = v41 + v40 + 1;
    }
    if (__CFADD__(v44, v36) || !v44 || v44 + v36 > v37)
    {
      v115 = 0;
      v116 = 0;
      v114 = &v115;
      goto LABEL_120;
    }
    v45 = v37 - v36;
    if (v37 >= v36)
    {
      v113 = a2;
      v112 = a4;
      if (v44 == -1)
      {
        if (!v45)
        {
          v49 = 0;
          goto LABEL_65;
        }
      }
      else
      {
        v46 = v45 >= v44;
        v45 = v44;
        if (!v46)
          goto LABEL_130;
      }
      if (HIDWORD(v45))
      {
LABEL_131:
        __break(0xC471u);
        JUMPOUT(0x19557FCD0);
      }
      v47 = *(_QWORD *)a1 + v36;
      v48 = WTF::fastMalloc((WTF *)v45);
      v49 = (WTF *)v48;
      for (i = 0; i != (WTF *)v45; i = (WTF *)((char *)i + 1))
        *((_BYTE *)i + v48) = *((_BYTE *)i + v47);
      v37 = a1[3];
LABEL_65:
      v51 = v44 + v36;
      v46 = v37 >= v44 + v36;
      v52 = v37 - (v44 + v36);
      if (!v46)
        goto LABEL_130;
      if (v52)
      {
        if (HIDWORD(v52))
        {
          __break(0xC471u);
          JUMPOUT(0x19557FCD8);
        }
        v53 = *(_QWORD *)a1 + v51;
        v54 = (WTF *)WTF::fastMalloc((WTF *)v52);
        for (j = 0; j != (WTF *)v52; j = (WTF *)((char *)j + 1))
          *((_BYTE *)j + (_QWORD)v54) = *((_BYTE *)j + v53);
        v115 = 0;
        v116 = 0;
        v114 = &v115;
        if ((_DWORD)v52)
        {
          LODWORD(v127) = 2;
          v128 = (uint64_t)v54;
          LODWORD(v129) = v52;
          HIDWORD(v129) = v52;
          WTF::String::String((WTF::String *)&v123, "sig");
          LODWORD(v125) = 3;
          v126 = (uint64_t)v123;
          v123 = (WTF *)&v125;
          v57 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v114, (cbor::CBORValue *)&v125, (uint64_t)&std::piecewise_construct, (uint64_t *)&v123, (uint64_t)v132);
          cbor::CBORValue::internalCleanup(v57 + 64, v58);
          v60 = (int)v127;
          *(_DWORD *)(v57 + 64) = (_DWORD)v127;
          switch(v60)
          {
            case 0:
            case 1:
              v61 = v128;
              goto LABEL_91;
            case 2:
            case 4:
              *(_QWORD *)(v57 + 72) = v128;
              v68 = v129;
              v128 = 0;
              v129 = 0;
              *(_QWORD *)(v57 + 80) = v68;
              break;
            case 3:
              v61 = v128;
              v128 = 0;
              goto LABEL_91;
            case 5:
              v70 = v128;
              v69 = v129;
              *(_QWORD *)(v57 + 80) = v129;
              v61 = v57 + 80;
              *(_QWORD *)(v57 + 72) = v70;
              v71 = v130;
              *(_QWORD *)(v57 + 88) = v130;
              if (v71)
              {
                *(_QWORD *)(v69 + 16) = v61;
                v128 = (uint64_t)&v129;
                v129 = 0;
                v130 = 0;
              }
              else
              {
LABEL_91:
                *(_QWORD *)(v57 + 72) = v61;
              }
              break;
            case 7:
              *(_DWORD *)(v57 + 72) = v128;
              break;
            default:
              break;
          }
          cbor::CBORValue::internalCleanup((uint64_t)&v125, v59);
          cbor::CBORValue::internalCleanup((uint64_t)&v127, v72);
          v123 = 0;
          v124 = 0;
          LODWORD(v127) = 2;
          v128 = (uint64_t)v49;
          LODWORD(v129) = v45;
          HIDWORD(v129) = v45;
          v73 = WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v123, 1uLL, (unint64_t)&v127);
          v75 = HIDWORD(v124);
          v76 = v123;
          v77 = (_DWORD *)((char *)v123 + 32 * HIDWORD(v124));
          v78 = *(_DWORD *)v73;
          *v77 = *(_DWORD *)v73;
          switch(v78)
          {
            case 0:
            case 1:
              v79 = *((_QWORD *)v73 + 1);
              v80 = (char *)v76 + 32 * v75;
              goto LABEL_99;
            case 2:
            case 4:
              v81 = (char *)v76 + 32 * v75;
              *((_QWORD *)v81 + 1) = 0;
              *((_QWORD *)v81 + 2) = 0;
              v82 = *((_QWORD *)v73 + 1);
              *((_QWORD *)v73 + 1) = 0;
              *((_QWORD *)v81 + 1) = v82;
              LODWORD(v82) = *((_DWORD *)v73 + 4);
              *((_DWORD *)v73 + 4) = 0;
              *((_DWORD *)v81 + 4) = v82;
              LODWORD(v81) = *((_DWORD *)v73 + 5);
              *((_DWORD *)v73 + 5) = 0;
              v77[5] = (_DWORD)v81;
              break;
            case 3:
              v79 = *((_QWORD *)v73 + 1);
              v80 = (char *)v76 + 32 * v75;
              *((_QWORD *)v73 + 1) = 0;
LABEL_99:
              *((_QWORD *)v80 + 1) = v79;
              break;
            case 5:
              v83 = (char *)v76 + 32 * v75;
              *((_QWORD *)v83 + 1) = *((_QWORD *)v73 + 1);
              v84 = (char **)(v83 + 8);
              v85 = v73 + 16;
              v86 = *((_QWORD *)v73 + 2);
              *((_QWORD *)v83 + 2) = v86;
              v87 = v83 + 16;
              v88 = *((_QWORD *)v73 + 3);
              *((_QWORD *)v87 + 1) = v88;
              if (v88)
              {
                *(_QWORD *)(v86 + 16) = v87;
                *((_QWORD *)v73 + 1) = v85;
                *v85 = 0;
                *((_QWORD *)v73 + 3) = 0;
              }
              else
              {
                *v84 = v87;
              }
              break;
            case 7:
              *((_DWORD *)v76 + 8 * v75 + 2) = *((_DWORD *)v73 + 2);
              break;
            default:
              break;
          }
          ++HIDWORD(v124);
          cbor::CBORValue::internalCleanup((uint64_t)&v127, v74);
          LODWORD(v127) = 4;
          v128 = (uint64_t)v123;
          v89 = v124;
          v123 = 0;
          v124 = 0;
          v129 = v89;
          WTF::String::String((WTF::String *)v132, "x5c");
          LODWORD(v125) = 3;
          v126 = v132[0];
          v132[0] = (uint64_t)&v125;
          v90 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v114, (cbor::CBORValue *)&v125, (uint64_t)&std::piecewise_construct, v132, (uint64_t)&v131);
          cbor::CBORValue::internalCleanup(v90 + 64, v91);
          v93 = (int)v127;
          *(_DWORD *)(v90 + 64) = (_DWORD)v127;
          switch(v93)
          {
            case 0:
            case 1:
              v94 = v128;
              goto LABEL_107;
            case 2:
            case 4:
              *(_QWORD *)(v90 + 72) = v128;
              v95 = v129;
              v128 = 0;
              v129 = 0;
              *(_QWORD *)(v90 + 80) = v95;
              break;
            case 3:
              v94 = v128;
              v128 = 0;
              goto LABEL_107;
            case 5:
              v97 = v128;
              v96 = v129;
              *(_QWORD *)(v90 + 80) = v129;
              v94 = v90 + 80;
              *(_QWORD *)(v90 + 72) = v97;
              v98 = v130;
              *(_QWORD *)(v90 + 88) = v130;
              if (v98)
              {
                *(_QWORD *)(v96 + 16) = v94;
                v128 = (uint64_t)&v129;
                v129 = 0;
                v130 = 0;
              }
              else
              {
LABEL_107:
                *(_QWORD *)(v90 + 72) = v94;
              }
              break;
            case 7:
              *(_DWORD *)(v90 + 72) = v128;
              break;
            default:
              break;
          }
          cbor::CBORValue::internalCleanup((uint64_t)&v125, v92);
          cbor::CBORValue::internalCleanup((uint64_t)&v127, v99);
          if (HIDWORD(v124))
          {
            v100 = v123;
            v101 = 32 * HIDWORD(v124);
            do
            {
              cbor::CBORValue::internalCleanup((uint64_t)v100, v35);
              v100 = (WTF *)((char *)v100 + 32);
              v101 -= 32;
            }
            while (v101);
          }
          v62 = v123;
          if (!v123)
          {
LABEL_114:
            if (v116)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WebCore::buildAttestationObject((uint64_t *)&v117, &v125, (uint64_t)&v114, v112, 0, (uint64_t)&v127);
              v103 = v125;
              v125 = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                  WTF::StringImpl::destroy(v103, v102);
                else
                  *(_DWORD *)v103 -= 2;
              }
              JSC::ArrayBuffer::create();
              v104 = v127;
              JSC::ArrayBuffer::create();
              v105 = WTF::fastMalloc((WTF *)0x90);
              *(_DWORD *)(v105 + 8) = 1;
              v106 = v125;
              v125 = 0;
              *(_QWORD *)(v105 + 16) = v106;
              *(_BYTE *)(v105 + 32) = 0;
              *(_BYTE *)(v105 + 56) = 0;
              *(_BYTE *)(v105 + 64) = 0;
              *(_BYTE *)(v105 + 96) = 0;
              *(_DWORD *)(v105 + 24) = 0;
              *(_QWORD *)(v105 + 104) = 0;
              *(_BYTE *)(v105 + 112) = v113;
              *(_QWORD *)v105 = off_1E336C380;
              v107 = v123;
              v123 = 0;
              *(_QWORD *)(v105 + 128) = 0;
              *(_QWORD *)(v105 + 136) = 0;
              *(_QWORD *)(v105 + 120) = v107;
              v108 = *a3;
              *a3 = 0;
              *(_QWORD *)(v105 + 128) = v108;
              LODWORD(v108) = *((_DWORD *)a3 + 2);
              *((_DWORD *)a3 + 2) = 0;
              *(_DWORD *)(v105 + 136) = v108;
              LODWORD(v108) = *((_DWORD *)a3 + 3);
              *((_DWORD *)a3 + 3) = 0;
              *(_DWORD *)(v105 + 140) = v108;
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v123);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v125);
              *a5 = v105;
              if (v104)
                WTF::fastFree(v104, v109);
              goto LABEL_121;
            }
LABEL_120:
            *a5 = 0;
LABEL_121:
            std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v114, v115);
            v110 = v117;
            if (v117)
            {
              v117 = 0;
              v118 = 0;
              WTF::fastFree(v110, a1);
            }
            if (v33)
              WTF::fastFree(v33, a1);
            goto LABEL_125;
          }
          v123 = 0;
          LODWORD(v124) = 0;
LABEL_113:
          WTF::fastFree(v62, v35);
          goto LABEL_114;
        }
        WTF::fastFree(v54, v55);
      }
      else
      {
        v115 = 0;
        v116 = 0;
        v114 = &v115;
      }
      if (!v49)
        goto LABEL_114;
      v62 = v49;
      goto LABEL_113;
    }
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  *a5 = 0;
LABEL_125:
  v111 = v119;
  if (v119)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree(v111, a1);
  }
LABEL_8:
  result = v121;
  if (v121)
  {
    v121 = 0;
    LODWORD(v122) = 0;
    return (WTF *)WTF::fastFree(result, a1);
  }
  return result;
}

WTF *fido::readU2fSignResponse@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  WTF *result;
  char v10;
  int v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  int v37;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_25;
  v36 = (WTF *)&v34;
  result = (WTF *)((uint64_t (*)(WTF **))off_1E336C748[v5])(&v36);
  if (!result || *(_DWORD *)(a2 + 12) <= 5u)
  {
    *a4 = 0;
    return result;
  }
  v10 = **(_BYTE **)a2;
  v11 = bswap32(*(_DWORD *)(*(_QWORD *)a2 + 1));
  v34 = 0;
  v35 = 0;
  WebCore::buildAuthData(v10, v11, (uint64_t)&v34, (uint64_t)&v36);
  v13 = v34;
  if (v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    WTF::fastFree(v13, v12);
  }
  v14 = *(unsigned int *)(a2 + 12);
  if (v14 <= 4)
  {
    __break(1u);
LABEL_25:
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_26;
  }
  v15 = 0;
  v16 = *(char **)a2;
  v34 = 0;
  LODWORD(v35) = 0;
  v17 = v14 - 5;
  HIDWORD(v35) = v14 - 5;
  if (v14 != 5)
  {
    v18 = v16 + 5;
    v19 = (WTF *)WTF::fastMalloc((WTF *)(v14 - 5));
    v15 = v19;
    v20 = 0;
    LODWORD(v35) = v17;
    v34 = v19;
    do
    {
      *((_BYTE *)v19 + v20) = v18[v20];
      ++v20;
    }
    while (v17 != v20);
  }
  v21 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v21 == -1)
    goto LABEL_25;
  v31 = v29;
  result = (WTF *)((uint64_t (*)(_QWORD **, uint64_t))off_1E336C758[v21])(&v31, a1);
  v23 = v22;
  v24 = 0;
  v31 = 0;
  v32 = 0;
  v33 = (int)v22;
  if (!v22)
    goto LABEL_16;
  if ((unint64_t)v22 >> 32)
  {
LABEL_26:
    __break(0xC471u);
    return result;
  }
  v25 = result;
  v26 = WTF::fastMalloc(v22);
  v24 = (WTF *)v26;
  v27 = 0;
  v32 = (int)v23;
  v31 = (_QWORD *)v26;
  do
  {
    *((_BYTE *)v27 + v26) = *((_BYTE *)v27 + (_QWORD)v25);
    v27 = (WTF *)((char *)v27 + 1);
  }
  while (v23 != v27);
LABEL_16:
  v29[0] = 0;
  v29[1] = 0;
  WebCore::AuthenticatorAssertionResponse::create((uint64_t)v29, a3, &v30);
  *a4 = v30;
  if (!v24)
  {
    if (!v15)
      goto LABEL_19;
    goto LABEL_18;
  }
  WTF::fastFree(v24, v28);
  if (v15)
LABEL_18:
    WTF::fastFree(v15, v28);
LABEL_19:
  result = v36;
  if (v36)
  {
    v36 = 0;
    v37 = 0;
    return (WTF *)WTF::fastFree(result, v28);
  }
  return result;
}

void fido::FidoHidInitPacket::~FidoHidInitPacket(fido::FidoHidInitPacket *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E336C6B0;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E336C6B0;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

void fido::FidoHidContinuationPacket::~FidoHidContinuationPacket(fido::FidoHidContinuationPacket *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E336C6B0;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E336C6B0;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13CryptoKeyPairENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = a2[1];
  a2[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  result = *a2;
  *a2 = 0;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13CryptoKeyPairENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!HIDWORD(v5))
  {
    v6 = result;
    v7 = *(void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)v5);
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, v8);
    if (v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<fido::pin::encodeAsCBOR(fido::pin::TokenRequest const&)::$_0,void,std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>> *>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = off_1E336C778;
  v3 = *(WTF **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(a1 + 8, *(WTF **)(a1 + 16));
  return a1;
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E336C778;
  v3 = *(WTF **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(a1 + 8, *(WTF **)(a1 + 16));
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<fido::pin::encodeAsCBOR(fido::pin::TokenRequest const&)::$_0,void,std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>> *>::call(uint64_t a1, uint64_t **a2)
{
  uint64_t v5;

  v5 = 3;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_impl<long long,std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>>(a2, &v5, (_QWORD *)(a1 + 8));
  v5 = 6;
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_impl<long long,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v5, (uint64_t *)(a1 + 32));
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_impl<long long,std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>>(uint64_t **a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF **v18;
  WTF *v19;
  int v20;
  int v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  WTF *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  void *v30;
  uint64_t result;
  uint64_t *v32;

  v6 = WTF::fastMalloc((WTF *)0x60);
  v9 = (WTF *)v6;
  v10 = *a2;
  *(_DWORD *)(v6 + 32) = (unint64_t)*a2 >> 63;
  v11 = (int *)(v6 + 32);
  *(_DWORD *)(v6 + 64) = 5;
  v12 = v6 + 64;
  *(_QWORD *)(v6 + 40) = v10;
  *(_QWORD *)(v6 + 72) = *a3;
  v13 = a3 + 1;
  v14 = a3[1];
  *(_QWORD *)(v6 + 80) = v14;
  v15 = v6 + 80;
  v16 = a3[2];
  *(_QWORD *)(v6 + 88) = v16;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    *a3 = v13;
    *v13 = 0;
    a3[2] = 0;
  }
  else
  {
    *(_QWORD *)(v6 + 72) = v15;
  }
  v18 = (WTF **)(a1 + 1);
  v17 = (WTF *)a1[1];
  if (!v17)
  {
    v19 = (WTF *)(a1 + 1);
    goto LABEL_49;
  }
  while (1)
  {
    while (1)
    {
      v19 = v17;
      v20 = *v11;
      v21 = *((_DWORD *)v19 + 8);
      if (*v11 != v21)
        break;
      if (v20 == 3)
      {
        v22 = (WTF *)*((_QWORD *)v9 + 5);
        if (v22)
          v23 = *((_DWORD *)v22 + 1);
        else
          v23 = 0;
        v7 = (const WTF::StringImpl *)*((_QWORD *)v19 + 5);
        if (v7)
          v24 = *((_DWORD *)v7 + 1);
        else
          v24 = 0;
        if (v23 != v24)
        {
          if (v23 < v24)
            goto LABEL_12;
          goto LABEL_32;
        }
        if ((WTF::codePointCompare(v22, v7, v8) & 0x80000000) != 0)
          goto LABEL_12;
        v21 = *((_DWORD *)v19 + 8);
        v20 = *v11;
        goto LABEL_21;
      }
      if (v20 == 1)
      {
        if (*((_QWORD *)v9 + 5) > *((_QWORD *)v19 + 5))
          goto LABEL_12;
        goto LABEL_29;
      }
      if (v20)
        goto LABEL_22;
      if (*((_QWORD *)v9 + 5) >= *((_QWORD *)v19 + 5))
        goto LABEL_25;
LABEL_12:
      v17 = *(WTF **)v19;
      v18 = (WTF **)v19;
      if (!*(_QWORD *)v19)
        goto LABEL_49;
    }
    if (v20 < v21)
      goto LABEL_12;
LABEL_21:
    v25 = v21 < v20;
    if (v21 != v20)
      goto LABEL_26;
LABEL_22:
    if (v20 != 3)
    {
      if (v20 != 1)
      {
        if (v20)
          goto LABEL_47;
LABEL_25:
        v25 = *((_QWORD *)v19 + 5) < *((_QWORD *)v9 + 5);
LABEL_26:
        if (!v25)
          goto LABEL_47;
        goto LABEL_40;
      }
LABEL_29:
      if (*((_QWORD *)v19 + 5) <= *((_QWORD *)v9 + 5))
        goto LABEL_47;
      goto LABEL_40;
    }
LABEL_32:
    v26 = (WTF *)*((_QWORD *)v19 + 5);
    v27 = v26 ? *((_DWORD *)v26 + 1) : 0;
    v7 = (const WTF::StringImpl *)*((_QWORD *)v9 + 5);
    v28 = v7 ? *((_DWORD *)v7 + 1) : 0;
    if (v27 != v28)
      break;
    if ((WTF::codePointCompare(v26, v7, v8) & 0x80000000) == 0)
      goto LABEL_47;
LABEL_40:
    v18 = (WTF **)((char *)v19 + 8);
    v17 = (WTF *)*((_QWORD *)v19 + 1);
    if (!v17)
      goto LABEL_49;
  }
  if (v27 < v28)
    goto LABEL_40;
LABEL_47:
  if (*v18)
  {
    cbor::CBORValue::internalCleanup(v12, v7);
    cbor::CBORValue::internalCleanup((uint64_t)v11, v29);
    return WTF::fastFree(v9, v30);
  }
LABEL_49:
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v19;
  *v18 = v9;
  v32 = (uint64_t *)**a1;
  if (v32)
  {
    *a1 = v32;
    v9 = *v18;
  }
  result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)a1[1], (uint64_t)v9);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_impl<long long,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  void *v25;
  uint64_t result;
  uint64_t *v27;

  v8 = WTF::fastMalloc((WTF *)0x60);
  v9 = *a2;
  v10 = (unint64_t)*a2 >> 63;
  *(_DWORD *)(v8 + 32) = v10;
  v11 = (_DWORD *)(v8 + 32);
  *(_QWORD *)(v8 + 40) = v9;
  *(_DWORD *)(v8 + 64) = 2;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 72) = v12;
  LODWORD(v12) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v8 + 80) = v12;
  LODWORD(v12) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v8 + 84) = v12;
  v13 = (uint64_t *)(a1 + 1);
  v14 = (uint64_t)a1[1];
  if (!v14)
  {
    v14 = (uint64_t)(a1 + 1);
    goto LABEL_46;
  }
  while (1)
  {
    v15 = *(_DWORD *)(v14 + 32);
    if ((_DWORD)v10 == v15)
    {
      if ((_DWORD)v10 != 3)
      {
        if ((_DWORD)v10 == 1)
        {
          if (*(_QWORD *)(v8 + 40) > *(_QWORD *)(v14 + 40))
            goto LABEL_9;
LABEL_26:
          if (*(_QWORD *)(v14 + 40) <= *(_QWORD *)(v8 + 40))
            break;
          goto LABEL_37;
        }
        if (!(_DWORD)v10)
        {
          if (*(_QWORD *)(v8 + 40) < *(_QWORD *)(v14 + 40))
            goto LABEL_9;
LABEL_22:
          v20 = *(_QWORD *)(v14 + 40) < *(_QWORD *)(v8 + 40);
LABEL_23:
          if (!v20)
            break;
          goto LABEL_37;
        }
        goto LABEL_19;
      }
      v17 = *(WTF **)(v8 + 40);
      if (v17)
        v18 = *((_DWORD *)v17 + 1);
      else
        v18 = 0;
      v6 = *(const WTF::StringImpl **)(v14 + 40);
      if (v6)
        v19 = *((_DWORD *)v6 + 1);
      else
        v19 = 0;
      if (v18 != v19)
      {
        if (v18 < v19)
        {
LABEL_9:
          v16 = *(_QWORD *)v14;
          v13 = (uint64_t *)v14;
          if (!*(_QWORD *)v14)
            goto LABEL_46;
          goto LABEL_38;
        }
        goto LABEL_29;
      }
      if ((WTF::codePointCompare(v17, v6, v7) & 0x80000000) != 0)
        goto LABEL_9;
      v15 = *(_DWORD *)(v14 + 32);
      LODWORD(v10) = *v11;
    }
    else if ((int)v10 < v15)
    {
      goto LABEL_9;
    }
    v20 = v15 < (int)v10;
    if (v15 != (_DWORD)v10)
      goto LABEL_23;
LABEL_19:
    if ((_DWORD)v10 != 3)
    {
      if ((_DWORD)v10 == 1)
        goto LABEL_26;
      if ((_DWORD)v10)
        break;
      goto LABEL_22;
    }
LABEL_29:
    v21 = *(WTF **)(v14 + 40);
    if (v21)
      v22 = *((_DWORD *)v21 + 1);
    else
      v22 = 0;
    v6 = *(const WTF::StringImpl **)(v8 + 40);
    if (v6)
      v23 = *((_DWORD *)v6 + 1);
    else
      v23 = 0;
    if (v22 == v23)
    {
      if ((WTF::codePointCompare(v21, v6, v7) & 0x80000000) == 0)
        break;
      goto LABEL_37;
    }
    if (v22 >= v23)
      break;
LABEL_37:
    v13 = (uint64_t *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 8);
    if (!v16)
      goto LABEL_46;
LABEL_38:
    LODWORD(v10) = *v11;
    v14 = v16;
  }
  if (*v13)
  {
    cbor::CBORValue::internalCleanup(v8 + 64, v6);
    cbor::CBORValue::internalCleanup((uint64_t)v11, v24);
    return WTF::fastFree((WTF *)v8, v25);
  }
LABEL_46:
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = v14;
  *v13 = v8;
  v27 = (uint64_t *)**a1;
  if (v27)
  {
    *a1 = v27;
    v8 = *v13;
  }
  result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)a1[1], v8);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<fido::pin::encodeAsCBOR(fido::pin::SetPinRequest const&)::$_0,void,std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>> *>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)a1 = off_1E336C7A0;
  v3 = *(WTF **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(a1 + 8, *(WTF **)(a1 + 16));
  return a1;
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E336C7A0;
  v3 = *(WTF **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(a1 + 8, *(WTF **)(a1 + 16));
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<fido::pin::encodeAsCBOR(fido::pin::SetPinRequest const&)::$_0,void,std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>> *>::call(_QWORD *a1, uint64_t **a2)
{
  uint64_t v5;

  v5 = 3;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_impl<long long,std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>>(a2, &v5, a1 + 1);
  v5 = 5;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_impl<long long,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v5, a1 + 4);
  v5 = 7;
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_impl<long long,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v5, a1 + 6);
}

uint64_t WebCore::WebCodecsAudioData::create@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  char *v14;

  if (*((float *)a1 + 1) <= 0.0)
    goto LABEL_9;
  v4 = *((_QWORD *)a1 + 4);
  if (!v4)
    goto LABEL_9;
  v5 = *((_QWORD *)a1 + 5);
  if (!v5 || !is_mul_ok(v4, v5))
    goto LABEL_9;
  v6 = *a1;
  if (v6 < 8)
  {
    v7 = v4 * v5;
    v8 = qword_1968DF288[v6];
    if (!is_mul_ok(v7, v8))
    {
LABEL_9:
      v10 = 33;
LABEL_10:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = v10;
      *(_DWORD *)(a2 + 16) = 1;
      return result;
    }
    v9 = a1[6];
    if ((_DWORD)v9 != -1)
    {
      v14 = &v13;
      if (((uint64_t (*)(char **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource6lengthEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v9])(&v14, a1 + 4) < v7 * v8)goto LABEL_9;
      v12 = a1[6];
      if ((_DWORD)v12 != -1)
      {
        v14 = &v13;
        ((void (*)(char **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_3[v12])(&v14, a1 + 4);
        v10 = 6;
        goto LABEL_10;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  result = 93;
  __break(0xC471u);
  return result;
}

void WebCore::WebCodecsAudioData::~WebCodecsAudioData(WebCore::WebCodecsAudioData *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;

  *(_QWORD *)this = &off_1E336C7C8;
  if (!*((_BYTE *)this + 32))
  {
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v9 = off_1E336CC60;
        v11 = v9;
        v12 = 0;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)(v8 - 96) + 336))(v8 - 96, &v11);
        v10 = v11;
        v11 = 0;
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      }
    }
  }
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  *(_QWORD *)this = &off_1E336C7C8;
  if (!*((_BYTE *)this + 32))
  {
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v11 = off_1E336CC60;
        v13 = v11;
        v14 = 0;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)(v10 - 96) + 336))(v10 - 96, &v13);
        v12 = v13;
        v13 = 0;
        if (v12)
          (*(void (**)(_QWORD *))(*v12 + 8))(v12);
      }
    }
  }
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v7, v8);
}

uint64_t WebCore::WebCodecsAudioData::allocationSize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;

  if (*(_BYTE *)(a1 + 32))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  WebCore::computeCopyElementCount(a1, a2, (uint64_t)&v12);
  v7 = v14;
  if (!v14)
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
    {
LABEL_16:
      __break(1u);
LABEL_17:
      result = 93;
      __break(0xC471u);
      return result;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (*(_BYTE *)(a2 + 44))
      v11 = *(_DWORD *)(a2 + 40);
    else
      v11 = v10;
    if (v11 >= 8)
      goto LABEL_17;
    if (!v14)
    {
      *(_QWORD *)a3 = v12 * qword_1968DF288[v11];
      goto LABEL_13;
    }
LABEL_15:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_16;
  }
  if (v14 != 1)
    goto LABEL_15;
  v8 = v13;
  v13 = 0;
  *(_BYTE *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v8;
LABEL_13:
  *(_DWORD *)(a3 + 16) = v7;
  return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJmN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v15, &v12);
}

unint64_t WebCore::computeCopyElementCount@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;

  v4 = *(unsigned int **)(a1 + 24);
  if (!v4)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 12;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v7 = v4 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  if (*(_BYTE *)(a2 + 44))
    v10 = *(_DWORD *)(a2 + 40);
  else
    v10 = v9;
  if (v10 < 4)
  {
    if (*(_QWORD *)a2)
      goto LABEL_24;
    v12 = 0;
    v11 = 1;
  }
  else
  {
    if (v10 - 4 > 3)
    {
      result = 74;
      __break(0xC471u);
      return result;
    }
    v11 = 0;
    v12 = *(_QWORD *)a2;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
    v13 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v13 + 32))(v13);
  if (v12 >= v13)
    goto LABEL_24;
  if (*(_BYTE *)(a2 + 44))
  {
    if (v10 != 7 && *(_DWORD *)(a2 + 40) != v10)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v20 = 6;
LABEL_25:
      *(_BYTE *)a3 = v20;
      v16 = 1;
      goto LABEL_26;
    }
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 40))(result);
    result = *(_QWORD *)(a1 + 24);
    if (result)
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 32))(result);
  }
  else
  {
    v15 = 0;
  }
  if ((v21 = v15 / result, *(_BYTE *)(a2 + 16)) && (v22 = *(_QWORD *)(a2 + 8), v23 = v21 >= v22, v21 -= v22, !v23)
    || *(_BYTE *)(a2 + 32) && (v24 = *(_QWORD *)(a2 + 24) > v21, v21 = *(_QWORD *)(a2 + 24), v24))
  {
LABEL_24:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = 32;
    goto LABEL_25;
  }
  if (v11)
  {
    result = *(_QWORD *)(a1 + 24);
    if (result)
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 32))(result);
    if (is_mul_ok(v21, result))
    {
      v16 = 0;
      *(_QWORD *)a3 = v21 * result;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  v16 = 0;
  *(_QWORD *)a3 = v21;
LABEL_26:
  *(_DWORD *)(a3 + 16) = v16;
  do
  {
    v17 = __ldaxr(v7);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v7));
  if (!v18)
  {
    atomic_store(1u, v4 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebCore::WebCodecsAudioData::copyTo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char *v21;

  if (*(_BYTE *)(a1 + 32))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 8;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  result = WebCore::computeCopyElementCount(a1, a3, (uint64_t)&v17);
  if (v19)
  {
    if (v19 == 1)
    {
      v9 = v18;
      v18 = 0;
      *(_BYTE *)a4 = v17;
      *(_QWORD *)(a4 + 8) = v9;
LABEL_16:
      *(_BYTE *)(a4 + 16) = 1;
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    result = 93;
    __break(0xC471u);
    return result;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  if (*(_BYTE *)(a3 + 44))
    v12 = *(_DWORD *)(a3 + 40);
  else
    v12 = v11;
  if (v12 >= 8)
    goto LABEL_25;
  if (v19)
    goto LABEL_23;
  v13 = qword_1968DF288[v12];
  if (!is_mul_ok(v17, v13))
    goto LABEL_15;
  v14 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v14 == -1)
    goto LABEL_23;
  v15 = v17 * v13;
  v21 = &v20;
  if (v15 > ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource6lengthEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v14])(&v21, a2))
  {
LABEL_15:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 32;
    goto LABEL_16;
  }
  v16 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v16 == -1)
  {
LABEL_23:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_24;
  }
  v21 = &v20;
  result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore12BufferSource11mutableSpanEvEUlRT_E_EEJRNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_0[v16])(&v21, a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
LABEL_19:
  if (v19 != -1)
    return ((uint64_t (*)(char **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJmN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v19])(&v21, &v17);
  return result;
}

unsigned int *WebCore::WebCodecsAudioData::close(WebCore::WebCodecsAudioData *this)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *((_BYTE *)this + 32) = 1;
  return result;
}

_QWORD *WebCore::WebCodecsAudioDecoder::create@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v6 = bmalloc::api::isoAllocate();
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_19689B170;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v6 + 24) = v7;
  if (!*(_BYTE *)(a1 + 274))
  {
    v8 = a1 - 192;
    v9 = *(_QWORD *)(a1 + 512);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    a1 = v8 + 192;
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v6 = &off_1E33A0540;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195581290);
  }
  v14 = v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v14, (uint64_t)&v13);
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E336C7F0;
  *(_QWORD *)(v6 + 32) = &unk_1E336C868;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v6 + 80) = v11;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_BYTE *)(v6 + 104) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 137) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_WORD *)(v6 + 192) = 0;
  *a3 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6);
}

void WebCore::WebCodecsAudioDecoder::~WebCodecsAudioDecoder(WebCore::WebCodecsAudioDecoder *this, void *a2)
{
  WebCore::EventTarget *v3;
  unint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD **v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  void *v28;
  _DWORD **v29;
  uint64_t v30;
  _DWORD *v31;

  *(_QWORD *)this = &off_1E336C7F0;
  *((_QWORD *)this + 4) = &unk_1E336C868;
  v3 = (WebCore::WebCodecsAudioDecoder *)((char *)this + 32);
  v4 = *((_QWORD *)this + 20);
  v5 = *((_QWORD *)this + 21);
  v6 = (WTF *)*((_QWORD *)this + 22);
  if (v4 <= v5)
  {
    if (v4 == v5)
      goto LABEL_20;
    v13 = (uint64_t *)((char *)v6 + 8 * v4);
    v14 = 8 * v5 - 8 * v4;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  else
  {
    if (v5)
    {
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        v6 = (WTF *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
      v6 = (WTF *)*((_QWORD *)this + 22);
      v4 = *((_QWORD *)this + 20);
    }
    v9 = *((unsigned int *)this + 46);
    if (v4 != v9)
    {
      v10 = (uint64_t *)((char *)v6 + 8 * v4);
      v11 = 8 * v9 - 8 * v4;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 22);
LABEL_20:
  if (v6)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v6, a2);
  }
  v16 = *((_QWORD *)this + 14);
  v17 = *((_QWORD *)this + 15);
  v18 = (WTF *)*((_QWORD *)this + 16);
  if (v16 <= v17)
  {
    if (v16 == v17)
      goto LABEL_41;
    v21 = (_DWORD **)((char *)v18 + 8 * v16);
    v22 = 8 * v17 - 8 * v16;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        if (v23[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
        else
          --v23[4];
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  else
  {
    if (v17)
    {
      v19 = 8 * v17;
      do
      {
        v20 = *(_DWORD **)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (v20[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
          else
            --v20[4];
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
      v18 = (WTF *)*((_QWORD *)this + 16);
      v16 = *((_QWORD *)this + 14);
    }
    v24 = *((unsigned int *)this + 34);
    if (v16 != v24)
    {
      v29 = (_DWORD **)((char *)v18 + 8 * v16);
      v30 = 8 * v24 - 8 * v16;
      do
      {
        v31 = *v29;
        *v29 = 0;
        if (v31)
        {
          if (v31[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
          else
            --v31[4];
        }
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
  }
  v18 = (WTF *)*((_QWORD *)this + 16);
LABEL_41:
  if (v18)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v18, a2);
  }
  v25 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v26)
  {
    if (v26[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
    else
      --v26[4];
  }
  v27 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v27)
  {
    if (v27[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
    else
      --v27[4];
  }
  WebCore::EventTarget::~EventTarget(v3, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v28);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebCodecsAudioDecoder::~WebCodecsAudioDecoder(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::WebCodecsAudioDecoder::~WebCodecsAudioDecoder(WebCore::WebCodecsAudioDecoder *this, void *a2)
{
  WebCore::WebCodecsAudioDecoder::~WebCodecsAudioDecoder((WebCore::WebCodecsAudioDecoder *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebCodecsAudioDecoder::~WebCodecsAudioDecoder((WebCore::WebCodecsAudioDecoder *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::WebCodecsAudioDecoder::configure@<X0>(uint64_t a1@<X0>, _BOOL8 *a2@<X2>, uint64_t a3@<X8>)
{
  const WTF::StringView *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  char isCodecSupported;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  char v25;
  uint64_t v26;
  char v27;
  WTF::StringImpl *v28[2];
  char v29[8];
  int v30;
  char v31;
  __int128 v32;
  _OWORD v33[3];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!WebCore::isValidDecoderConfig(*a2))
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = 33;
LABEL_31:
    *(_BYTE *)a3 = v25;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  if (*(_DWORD *)(a1 + 56) == 2 || (v7 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v7 + 8))
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = 8;
    goto LABEL_31;
  }
  LOBYTE(v8) = 1;
  *(_DWORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 152) = 1;
  v28[0] = 0;
  v9 = *a2;
  if (*a2)
  {
    v10 = *(unsigned __int8 *)(v9 + 16);
    v11 = *(WTF::StringImpl **)(v9 + 8);
    LODWORD(v9) = *(_DWORD *)(v9 + 4);
    v28[0] = v11;
    v8 = (v10 >> 2) & 1;
  }
  LODWORD(v28[1]) = v9;
  BYTE4(v28[1]) = v8;
  isCodecSupported = WebCore::AudioDecoder::isCodecSupported((const char **)v28, v6);
  v13 = (WTF::StringImpl *)*a2;
  *a2 = 0;
  v28[0] = (WTF::StringImpl *)a1;
  v28[1] = v13;
  v29[0] = 0;
  v31 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v30 = -1;
    v14 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(uint64_t *, char *, _BOOL8 *))off_1E336CBF0[v14])(&v26, v29, a2 + 1);
      v30 = v14;
    }
    v31 = 1;
  }
  v32 = *((_OWORD *)a2 + 2);
  LOBYTE(v33[0]) = isCodecSupported;
  v15 = *(_QWORD *)(a1 + 8);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
      v15 = v16 - 96;
    else
      v15 = 0;
  }
  v17 = *(_OWORD *)(v15 + 240);
  *(_OWORD *)((char *)v33 + 8) = *(_OWORD *)(v15 + 224);
  *(_OWORD *)((char *)&v33[1] + 8) = v17;
  v18 = WTF::fastMalloc((WTF *)0x70);
  v19 = v18;
  *(_QWORD *)v18 = &off_1E336CC98;
  v20 = *(_OWORD *)v28;
  v28[1] = 0;
  *(_OWORD *)(v18 + 16) = v20;
  *(_BYTE *)(v18 + 32) = 0;
  *(_BYTE *)(v18 + 48) = 0;
  if (v31)
  {
    *(_DWORD *)(v18 + 40) = -1;
    v21 = v30;
    if (v30 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, char *))off_1E336CBF0[v30])(&v26, v18 + 32, v29);
      *(_DWORD *)(v19 + 40) = v21;
    }
    *(_BYTE *)(v19 + 48) = 1;
  }
  *(_OWORD *)(v19 + 56) = v32;
  v22 = v33[1];
  *(_OWORD *)(v19 + 72) = v33[0];
  *(_OWORD *)(v19 + 88) = v22;
  v26 = v19;
  WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v26);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v31)
  {
    if (v30 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v30])(&v27, v29);
    v30 = -1;
  }
  result = v28[1];
  v28[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

BOOL WebCore::isValidDecoderConfig(_BOOL8 result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;

  if (!result)
  {
LABEL_30:
    LODWORD(v3) = 0;
    return (_DWORD)v3 != 0;
  }
  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned int *)(result + 4);
  LODWORD(v3) = *(_DWORD *)(result + 4);
  if (((*(_DWORD *)(result + 16) >> 2) & 1) != 0)
  {
    if ((_DWORD)v2)
    {
      v4 = 0;
      while (1)
      {
        v5 = *(unsigned __int8 *)(v1 + v4);
        v6 = v5 > 0x20;
        v7 = (1 << v5) & 0x100003600;
        if (v6 || v7 == 0)
          break;
        if (v2 == ++v4)
          goto LABEL_30;
      }
      if ((_DWORD)v2 != 1)
      {
        v9 = (v2 - 1);
        while (v9 < v2)
        {
          v10 = *(unsigned __int8 *)(v1 + v9);
          v6 = v10 > 0x20;
          v11 = (1 << v10) & 0x100003600;
          if (!v6 && v11 != 0)
          {
            if ((_DWORD)--v9)
              continue;
          }
          if (!(_DWORD)v4 && (_DWORD)v9 == (_DWORD)v2 - 1)
            return (_DWORD)v3 != 0;
          goto LABEL_21;
        }
        goto LABEL_47;
      }
      if ((_DWORD)v4)
      {
        LODWORD(v9) = 0;
LABEL_21:
        v3 = (v9 - v4 + 1);
        if (v2 - v4 < v3)
          goto LABEL_47;
      }
    }
    return (_DWORD)v3 != 0;
  }
  if (!(_DWORD)v2)
    return (_DWORD)v3 != 0;
  v13 = 0;
  while (1)
  {
    v14 = *(unsigned __int16 *)(v1 + 2 * v13);
    v6 = v14 > 0x20;
    v15 = (1 << v14) & 0x100003600;
    if (v6 || v15 == 0)
      break;
    if (v2 == ++v13)
      goto LABEL_30;
  }
  if ((_DWORD)v2 != 1)
  {
    v17 = (v2 - 1);
    while (v17 < v2)
    {
      v18 = *(unsigned __int16 *)(v1 + 2 * v17);
      v6 = v18 > 0x20;
      v19 = (1 << v18) & 0x100003600;
      if (!v6 && v19 != 0)
      {
        if ((_DWORD)--v17)
          continue;
      }
      if ((_DWORD)v13 || (_DWORD)v17 != (_DWORD)v2 - 1)
        goto LABEL_46;
      return (_DWORD)v3 != 0;
    }
    goto LABEL_47;
  }
  if (!(_DWORD)v13)
    return (_DWORD)v3 != 0;
  LODWORD(v17) = 0;
LABEL_46:
  v3 = (v17 - v13 + 1);
  if (v2 - v13 >= v3)
    return (_DWORD)v3 != 0;
LABEL_47:
  __break(1u);
  return result;
}

uint64_t WebCore::WebCodecsAudioDecoder::scriptExecutionContext(WebCore::WebCodecsAudioDecoder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result;
  v5 = (uint64_t *)(result + 160);
  v4 = *(_QWORD *)(result + 160);
  if (*(_BYTE *)(result + 192))
  {
    v6 = *(_QWORD *)(result + 168);
    if (v4)
    {
      if (v6 + 1 != v4)
        goto LABEL_16;
    }
    else
    {
      v8 = *(unsigned int *)(result + 184);
      if (v6)
      {
        if (v6 != v8 - 1)
          goto LABEL_16;
      }
      else if ((_DWORD)v8)
      {
        v6 = 0;
LABEL_16:
        v9 = *(_QWORD *)(v3 + 176);
        v10 = *a2;
        *a2 = 0;
        *(_QWORD *)(v9 + 8 * v6) = v10;
        if (v6 == *(unsigned int *)(v3 + 184) - 1)
          v11 = 0;
        else
          v11 = v6 + 1;
        *(_QWORD *)(v3 + 168) = v11;
        return result;
      }
    }
    result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(result + 160);
    v6 = *(_QWORD *)(v3 + 168);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(result + 168);
  if (v4 == v7)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  if (v4)
  {
    if (v7 + 1 == v4)
      goto LABEL_27;
LABEL_26:
    v13 = 1;
    goto LABEL_28;
  }
  v12 = *(unsigned int *)(result + 184);
  if (v7)
  {
    if (v7 == v12 - 1)
      goto LABEL_27;
    goto LABEL_26;
  }
  if ((_DWORD)v12)
  {
    v7 = 0;
    goto LABEL_26;
  }
LABEL_27:
  result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(result + 160);
  v7 = *(_QWORD *)(v3 + 168);
  v13 = *(_BYTE *)(v3 + 192) == 0;
LABEL_28:
  v14 = *(_QWORD *)(v3 + 176);
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)(v14 + 8 * v7) = v15;
  if (v7 == *(unsigned int *)(v3 + 184) - 1)
    v16 = 0;
  else
    v16 = v7 + 1;
  *(_QWORD *)(v3 + 168) = v16;
  if (v13)
  {
    do
    {
      v17 = *(_QWORD *)(v3 + 160);
      if (v17 == *(_QWORD *)(v3 + 168))
        break;
      v18 = *(_QWORD *)(v3 + 176);
      v19 = *(_QWORD *)(v18 + 8 * v17);
      *(_QWORD *)(v18 + 8 * v17) = 0;
      v20 = *(_QWORD *)(v3 + 176);
      v21 = *(_QWORD *)(v20 + 8 * v17);
      *(_QWORD *)(v20 + 8 * v17) = 0;
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v17 = *v5;
      }
      v22 = v17 == *(unsigned int *)(v3 + 184) - 1 ? 0 : v17 + 1;
      *(_QWORD *)(v3 + 160) = v22;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    while (!*(_BYTE *)(v3 + 192));
  }
  return result;
}

uint64_t WebCore::WebCodecsAudioDecoder::decode@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*(_DWORD *)(a1 + 56) != 1)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 8;
    goto LABEL_6;
  }
  v5 = *a2;
  if (*(_BYTE *)(a1 + 152))
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 8))
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = 26;
LABEL_6:
      *(_BYTE *)a3 = v7;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    *(_BYTE *)(a1 + 152) = 0;
  }
  ++*(_QWORD *)(a1 + 64);
  *a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E336CD88;
  v8[1] = a1;
  v8[2] = v5;
  v9 = v8;
  WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v9);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WebCore::WebCodecsAudioDecoder::flush@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _DWORD *v10;

  if (*(_DWORD *)(a1 + 56) == 1)
  {
    *(_BYTE *)(a1 + 152) = 1;
    v5 = *a2;
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(*a2 + 16) + 1;
    v10 = (_DWORD *)v5;
    WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(a1 + 112, (uint64_t *)&v10);
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (v6[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      else
        --v6[4];
    }
    *(_BYTE *)(a1 + 193) = 1;
    v7 = *(_QWORD *)(a1 + 144);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = off_1E336CDD8;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v10);
    result = (uint64_t)v10;
    if (v10)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::WebCodecsAudioDecoder::resetDecoder@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t (**v26)();
  WTF::StringImpl *v27;
  objc_class *v28;

  if (*(_DWORD *)(a1 + 56) == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  *(_DWORD *)(a1 + 56) = 0;
  result = *(WTF::StringImpl **)(a1 + 96);
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 32))(result);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(WTF **)(a1 + 176);
  if (v7 > v8)
  {
    if (v8)
    {
      v10 = 8 * v8;
      do
      {
        result = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
      }
      while (v10);
      v9 = *(WTF **)(a1 + 176);
      v7 = *(_QWORD *)(a1 + 160);
    }
    v11 = *(unsigned int *)(a1 + 184);
    if (v7 != v11)
    {
      v12 = (WTF::StringImpl **)((char *)v9 + 8 * v7);
      v13 = 8 * v11 - 8 * v7;
      do
      {
        result = *v12;
        *v12 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
LABEL_23:
    v9 = *(WTF **)(a1 + 176);
    goto LABEL_24;
  }
  if (v7 != v8)
  {
    v14 = (WTF::StringImpl **)((char *)v9 + 8 * v7);
    v15 = 8 * v8 - 8 * v7;
    do
    {
      result = *v14;
      *v14 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      ++v14;
      v15 -= 8;
    }
    while (v15);
    goto LABEL_23;
  }
LABEL_24:
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    result = (WTF::StringImpl *)WTF::fastFree(v9, a2);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 64) = 0;
    if (!*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 104) = 1;
      v16 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v16 = off_1E336CEF0;
      *(_QWORD *)(v16 + 8) = a1;
      v26 = (uint64_t (**)())v16;
      WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioDecoder>((uint64_t (**)())a1, &v26);
      result = (WTF::StringImpl *)v26;
      if (v26)
        result = (WTF::StringImpl *)(*((uint64_t (**)(uint64_t (**)()))*v26 + 1))(v26);
    }
  }
  ++*(_QWORD *)(a1 + 144);
  while (1)
  {
    v17 = *(_QWORD *)(a1 + 112);
    if (v17 == *(_QWORD *)(a1 + 120))
      break;
    v18 = *(_QWORD *)(a1 + 128);
    v19 = *(_DWORD **)(v18 + 8 * v17);
    *(_QWORD *)(v18 + 8 * v17) = 0;
    v20 = *(_QWORD *)(a1 + 128);
    v21 = *(_DWORD **)(v20 + 8 * v17);
    *(_QWORD *)(v20 + 8 * v17) = 0;
    if (v21)
    {
      if (v21[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
        v17 = *(_QWORD *)(a1 + 112);
      }
      else
      {
        --v21[4];
      }
    }
    if (v17 == *(unsigned int *)(a1 + 136) - 1)
      v22 = 0;
    else
      v22 = v17 + 1;
    *(_QWORD *)(a1 + 112) = v22;
    v23 = *(_BYTE *)a2;
    v24 = (WTF::StringImpl *)a2[1];
    if (v24)
      *(_DWORD *)v24 += 4;
    v27 = v24;
    v28 = 0;
    LOBYTE(v26) = v23;
    WebCore::DeferredPromise::reject((uint64_t)v19, (unsigned __int8 *)&v26, 0, &v28);
    result = v27;
    v27 = 0;
    if (!result)
      goto LABEL_43;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_43:
      if (v24)
        goto LABEL_44;
      goto LABEL_46;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    if (v24)
    {
LABEL_44:
      if (*(_DWORD *)v24 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
LABEL_46:
    if (v19)
    {
      if (v19[4] == 1)
        result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      else
        --v19[4];
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *WebCore::WebCodecsAudioDecoder::closeDecoder@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  char v12;

  result = WebCore::WebCodecsAudioDecoder::resetDecoder(a1, a2, (uint64_t)v10);
  if (v12)
  {
    *(_BYTE *)a3 = v10[0];
    *(_QWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 56) = 2;
    result = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (*a2 != 16)
    {
      v8 = *(_QWORD *)(a1 + 88);
      WebCore::DOMException::create(a2, (uint64_t *)&v9);
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v8 + 40))(v8, v9);
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v12)
    {
      result = v11;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unint64_t WebCore::WebCodecsAudioDecoder::isConfigSupported(uint64_t a1, _BOOL8 *a2, uint64_t *a3)
{
  const WTF::StringView *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  char isCodecSupported;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  unint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF::StringImpl *v39;
  objc_class *v40;
  int v41;
  char v42;
  WTF::StringImpl *v43[2];
  __int128 v44;
  WTF::StringImpl *v45;
  __int128 v46;
  char v47;
  __int128 v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!WebCore::isValidDecoderConfig(*a2))
  {
    v24 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v40 = 0;
    LOBYTE(v43[0]) = 33;
    if (v39)
      *(_DWORD *)v39 += 2;
    v43[1] = v39;
    WebCore::DeferredPromise::reject(v24, (unsigned __int8 *)v43, 0, &v40);
    v26 = v43[1];
    v43[1] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    result = (unint64_t)v39;
    if (v39)
      goto LABEL_50;
    return result;
  }
  v43[0] = 0;
  LODWORD(v43[1]) = 0;
  LOBYTE(v7) = 1;
  BYTE4(v43[1]) = 1;
  v8 = *a2;
  if (*a2)
  {
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = *(WTF::StringImpl **)(v8 + 8);
    LODWORD(v8) = *(_DWORD *)(v8 + 4);
    v43[0] = v10;
    v7 = (v9 >> 2) & 1;
  }
  LODWORD(v43[1]) = v8;
  BYTE4(v43[1]) = v7;
  isCodecSupported = WebCore::AudioDecoder::isCodecSupported((const char **)v43, v6);
  v12 = *a3;
  if ((isCodecSupported & 1) == 0)
  {
    LOWORD(v43[0]) = 256;
    v27 = (WTF::StringImpl *)*a2;
    *a2 = 0;
    v43[1] = v27;
    LOBYTE(v44) = 0;
    LOBYTE(v45) = 0;
    if (*((_BYTE *)a2 + 24))
    {
      DWORD2(v44) = -1;
      v28 = *((unsigned int *)a2 + 4);
      if ((_DWORD)v28 != -1)
      {
        ((void (*)(objc_class **, __int128 *, _BOOL8 *))off_1E336CBF0[v28])(&v40, &v44, a2 + 1);
        DWORD2(v44) = v28;
      }
      LOBYTE(v45) = 1;
    }
    v46 = *((_OWORD *)a2 + 2);
    v47 = 1;
    result = WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsAudioDecoderSupport>>(v12, (uint64_t)v43);
    if (v47)
    {
      if ((_BYTE)v45)
      {
        if (DWORD2(v44) != -1)
          ((void (*)(objc_class **, __int128 *))off_1E336CBE0[DWORD2(v44)])(&v40, &v44);
        DWORD2(v44) = -1;
      }
      result = (unint64_t)v43[1];
      v43[1] = 0;
      if (result)
        goto LABEL_50;
    }
    return result;
  }
  WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::add((uint64_t *)(a1 + 264), a3, (uint64_t)v43);
  if (*((_BYTE *)a2 + 24))
  {
    v13 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v13 != -1)
    {
      v43[0] = (WTF::StringImpl *)&v40;
      v14 = ((uint64_t (*)(WTF::StringImpl **, _BOOL8 *))off_1E336CC00[v13])(v43, a2 + 1);
      if (!*((_BYTE *)a2 + 24))
        goto LABEL_56;
      v15 = *((unsigned int *)a2 + 4);
      if ((_DWORD)v15 != -1)
      {
        v16 = v14;
        v43[0] = (WTF::StringImpl *)&v40;
        result = ((uint64_t (*)(WTF::StringImpl **, _BOOL8 *))off_1E336CC10[v15])(v43, a2 + 1);
        v18 = result;
        if (result)
        {
          if (HIDWORD(result))
          {
LABEL_58:
            __break(0xC471u);
            return result;
          }
          v19 = WTF::fastMalloc((WTF *)result);
          v20 = (WTF *)v19;
          v21 = 0;
          do
          {
            *(_BYTE *)(v19 + v21) = *(_BYTE *)(v16 + v21);
            ++v21;
          }
          while (v18 != v21);
        }
        else
        {
          v20 = 0;
        }
        if (!*((_BYTE *)a2 + 24))
          goto LABEL_37;
        v22 = *((unsigned int *)a2 + 4);
        if ((_DWORD)v22 != -1)
        {
          v43[0] = (WTF::StringImpl *)&v40;
          ((void (*)(WTF::StringImpl **, _BOOL8 *))off_1E336CC00[v22])(v43, a2 + 1);
          if (*((_BYTE *)a2 + 24))
          {
            v23 = *((unsigned int *)a2 + 4);
            if ((_DWORD)v23 != -1)
            {
              v43[0] = (WTF::StringImpl *)&v40;
              ((void (*)(WTF::StringImpl **, _BOOL8 *))off_1E336CC10[v23])(v43, a2 + 1);
              goto LABEL_37;
            }
            goto LABEL_57;
          }
LABEL_56:
          __break(1u);
        }
      }
    }
LABEL_57:
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_58;
  }
  v20 = 0;
  LODWORD(v18) = 0;
LABEL_37:
  v29 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)v43 = *(_OWORD *)(a1 + 224);
  v44 = v29;
  WTF::String::isolatedCopy();
  LOBYTE(v46) = 0;
  v47 = 0;
  v48 = *((_OWORD *)a2 + 2);
  v49 = v20;
  LODWORD(v50) = v18;
  HIDWORD(v50) = v18;
  v51 = v12;
  v30 = WTF::fastMalloc((WTF *)0x80);
  v31 = v30;
  *(_QWORD *)v30 = &off_1E336CE28;
  v32 = v44;
  *(_OWORD *)(v30 + 16) = *(_OWORD *)v43;
  *(_OWORD *)(v30 + 32) = v32;
  v33 = v45;
  v45 = 0;
  *(_QWORD *)(v30 + 48) = v33;
  *(_BYTE *)(v30 + 56) = 0;
  *(_BYTE *)(v30 + 72) = 0;
  if (v47)
  {
    *(_DWORD *)(v30 + 64) = -1;
    v34 = DWORD2(v46);
    if (DWORD2(v46) != -1)
    {
      ((void (*)(objc_class **, uint64_t, __int128 *))off_1E336CBF0[DWORD2(v46)])(&v40, v30 + 56, &v46);
      *(_DWORD *)(v31 + 64) = v34;
    }
    *(_BYTE *)(v31 + 72) = 1;
  }
  *(_OWORD *)(v31 + 80) = v48;
  *(_QWORD *)(v31 + 96) = v49;
  v35 = v50;
  v49 = 0;
  v50 = 0;
  *(_QWORD *)(v31 + 104) = v35;
  *(_QWORD *)(v31 + 112) = v51;
  v36 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v36 = off_1E336CE78;
  v37 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v37 = off_1E336CEA0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v41 = 1;
  (*(void (**)(uint64_t, objc_class **))(*(_QWORD *)v31 + 16))(v31, &v40);
  if (v41 != -1)
    ((void (*)(char *, objc_class **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12AudioDecoderEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v41])(&v42, &v40);
  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v38 = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v38, v25);
  }
  if (v47)
  {
    if (DWORD2(v46) != -1)
      ((void (*)(objc_class **, __int128 *))off_1E336CBE0[DWORD2(v46)])(&v40, &v46);
    DWORD2(v46) = -1;
  }
  result = (unint64_t)v45;
  v45 = 0;
  if (result)
  {
LABEL_50:
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

