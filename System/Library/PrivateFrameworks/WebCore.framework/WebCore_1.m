BOOL WebCore::RenderLayerBacking::canIssueSetNeedsDisplay(WebCore::RenderLayerBacking *this)
{
  uint64_t v3;

  if (*((_BYTE *)this + 290))
    return *((_BYTE *)this + 291) != 0;
  v3 = *((_QWORD *)this + 1);
  return ((*(_BYTE *)(v3 + 24) & 1) == 0
       || *(_BYTE *)(WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944))
                   + 198)
       || *(_DWORD *)(WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 1944))
                    + 216) == 2)
      && *((_BYTE *)this + 291) != 0;
}

void WebCore::RenderTableCell::localRectsForRepaint(WebCore::RenderTableCell *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  int v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  int v30;
  char *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int *v35;
  int v36;
  BOOL v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  WebCore::RenderTableCell *v63;
  WebCore::RenderTableCell *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  WebCore::RenderTableCell *v74;
  WebCore::RenderTableCell *v75;
  int v76;
  int v77;
  BOOL v78;
  float v79;
  float v80;
  WebCore::RenderTable *v81;
  WebCore::RenderTableCell *v82;
  WebCore::RenderTableCell *v83;
  int v84;
  int v85;
  WebCore::RenderTable *v86;
  WebCore::RenderTableCell *v87;
  WebCore::RenderTableCell *v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;

  v6 = *((_QWORD *)this + 4);
  if (!v6)
    goto LABEL_7;
  v7 = *(_QWORD *)(v6 + 8);
  if (*(_BYTE *)(v7 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1941141F8);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8);
  if (*(_BYTE *)(v8 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194114218);
  }
  v9 = *(unsigned __int8 **)(*(_QWORD *)(v8 + 32) + 8);
  v10 = v9[46];
  if (v10 != 35 && v10 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1941143B0);
  }
  if ((v9[124] & 4) == 0 || (v9[328] & 8) != 0)
  {
LABEL_7:
    WebCore::RenderBox::localRectsForRepaint((uint64_t)this, a2, a3);
    return;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  if ((*(_BYTE *)(v11 + 52) & 0xF) != 0)
  {
    v13 = *(float *)(v11 + 48);
    v12 = *(float *)(v11 + 56);
    if ((*(_BYTE *)(v11 + 52) & 0x10) == 0)
      goto LABEL_11;
    v78 = v13 < 3.0;
    v79 = v13 + -3.0;
    if (v13 < 3.0)
      v13 = 3.0;
    v80 = 0.0;
    if (!v78)
      v80 = v79;
LABEL_113:
    if (v80 < 0.0)
      v80 = 0.0;
    v12 = v12 + v80;
    goto LABEL_11;
  }
  v12 = *(float *)(v11 + 56);
  v13 = 0.0;
  if ((*(_BYTE *)(v11 + 52) & 0x10) != 0)
  {
    v80 = -3.0;
    goto LABEL_113;
  }
LABEL_11:
  v14 = *(_DWORD *)(v7 + 120);
  v15 = fmaxf(v13 + v12, 0.0) * 64.0;
  if (v15 >= 2147483650.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v15 <= -2147483650.0)
  {
    v16 = 0x80000000;
  }
  else
  {
    v16 = (int)v15;
  }
  v17 = WebCore::RenderTableCell::borderHalfLeft(this, 1);
  if (v17 <= v16)
    v18 = v16;
  else
    v18 = v17;
  v19 = WebCore::RenderTableCell::borderHalfRight(this, 1);
  if (v19 <= v16)
    v20 = v16;
  else
    v20 = v19;
  v21 = WebCore::RenderTableCell::borderHalfTop(this, 1);
  if (v21 <= v16)
    v22 = v16;
  else
    v22 = v21;
  v23 = WebCore::RenderTableCell::borderHalfBottom(this, 1);
  if (v23 <= v16)
    v24 = v16;
  else
    v24 = v23;
  v25 = (v14 & 0x4000000) == 0 || v20 == 0;
  if (((v18 == 0) | ((v14 & 0x4000000u) >> 26)) != 1 || !v25)
  {
    v81 = (WebCore::RenderTable *)WebCore::RenderTableCell::table(this);
    v82 = (WebCore::RenderTableCell *)WebCore::RenderTable::cellBefore(v81, this);
    if (v82)
    {
      v83 = v82;
      v84 = WebCore::RenderTableCell::borderHalfTop(v82, 1);
      if (v22 <= v84)
        v22 = v84;
      v85 = WebCore::RenderTableCell::borderHalfBottom(v83, 1);
      if (v24 <= v85)
        v24 = v85;
    }
  }
  v26 = (v14 & 0x4000000) == 0 || v18 == 0;
  v27 = (v14 & 0x4000000) == 0 && v20 != 0;
  if (!v26 || v27)
  {
    v86 = (WebCore::RenderTable *)WebCore::RenderTableCell::table(this);
    v87 = (WebCore::RenderTableCell *)WebCore::RenderTable::cellAfter(v86, this);
    if (v87)
    {
      v88 = v87;
      v89 = WebCore::RenderTableCell::borderHalfTop(v87, 1);
      if (v22 <= v89)
        v22 = v89;
      v90 = WebCore::RenderTableCell::borderHalfBottom(v88, 1);
      if (v24 <= v90)
        v24 = v90;
    }
  }
  if (v22)
  {
    v56 = *((_QWORD *)this + 4);
    if (!v56)
      goto LABEL_118;
    v57 = *(_QWORD *)(v56 + 8);
    if (!v57)
      goto LABEL_118;
    if (*(_BYTE *)(v57 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1941142D0);
    }
    v58 = *(_QWORD *)(v57 + 32);
    if (!v58)
      goto LABEL_118;
    v59 = *(_QWORD *)(v58 + 8);
    if (!v59)
      goto LABEL_118;
    if (*(_BYTE *)(v59 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x194114310);
    }
    v60 = *(_QWORD *)(v59 + 32);
    if (v60)
    {
      v61 = *(unsigned __int8 **)(v60 + 8);
      if (v61)
      {
        v62 = v61[46];
        if (v62 != 35 && v62 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x1941143F0);
        }
      }
    }
    else
    {
LABEL_118:
      v61 = 0;
    }
    v63 = (WebCore::RenderTableCell *)WebCore::RenderTable::cellAbove((WebCore::RenderTable *)v61, this);
    if (v63)
    {
      v64 = v63;
      v65 = WebCore::RenderTableCell::borderHalfLeft(v63, 1);
      if (v18 <= v65)
        v18 = v65;
      v66 = WebCore::RenderTableCell::borderHalfRight(v64, 1);
      if (v20 <= v66)
        v20 = v66;
    }
  }
  if (v24)
  {
    v67 = *((_QWORD *)this + 4);
    if (!v67)
      goto LABEL_119;
    v68 = *(_QWORD *)(v67 + 8);
    if (!v68)
      goto LABEL_119;
    if (*(_BYTE *)(v68 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1941142F0);
    }
    v69 = *(_QWORD *)(v68 + 32);
    if (!v69)
      goto LABEL_119;
    v70 = *(_QWORD *)(v69 + 8);
    if (!v70)
      goto LABEL_119;
    if (*(_BYTE *)(v70 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x194114330);
    }
    v71 = *(_QWORD *)(v70 + 32);
    if (v71)
    {
      v72 = *(unsigned __int8 **)(v71 + 8);
      if (v72)
      {
        v73 = v72[46];
        if (v73 != 35 && v73 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x194114410);
        }
      }
    }
    else
    {
LABEL_119:
      v72 = 0;
    }
    v74 = (WebCore::RenderTableCell *)WebCore::RenderTable::cellBelow((WebCore::RenderTable *)v72, this);
    if (v74)
    {
      v75 = v74;
      v76 = WebCore::RenderTableCell::borderHalfLeft(v74, 1);
      if (v18 <= v76)
        v18 = v76;
      v77 = WebCore::RenderTableCell::borderHalfRight(v75, 1);
      if (v20 <= v77)
        v20 = v77;
    }
  }
  v28 = *((_QWORD *)this + 24);
  if (v28)
  {
    v91 = *(_QWORD *)(v28 + 20);
    if ((_DWORD)v91 == 0x80000000)
      v30 = 0x7FFFFFFF;
    else
      v30 = -(int)v91;
    if (v18 > v30)
      v30 = v18;
    v92 = HIDWORD(v91);
    if ((_DWORD)v92 == 0x80000000)
      v29 = 0x7FFFFFFF;
    else
      v29 = -(int)v92;
  }
  else
  {
    v29 = 0;
    v30 = v18 & ~(v18 >> 31);
  }
  if (v22 > v29)
    v29 = v22;
  v31 = (char *)this + 160;
  v32 = *((_DWORD *)this + 40);
  v33 = v32 + v20;
  if (__OFADD__(v32, v20))
    v33 = (v32 >> 31) + 0x7FFFFFFF;
  if (v28)
  {
    v34 = *(_DWORD *)(v28 + 20);
    v35 = (int *)(v28 + 28);
  }
  else
  {
    v34 = 0;
    v35 = (int *)((char *)this + 160);
  }
  v36 = *v35;
  v37 = __OFADD__(v34, v36);
  v38 = v34 + v36;
  if (v37)
    v38 = (v34 >> 31) + 0x7FFFFFFF;
  if (v33 <= v38)
    v33 = v38;
  v37 = __OFADD__(v30, v33);
  v39 = v30 + v33;
  if (v37)
    v39 = (v30 >> 31) + 0x7FFFFFFF;
  v40 = *((_DWORD *)this + 41);
  v41 = v40 + v24;
  if (__OFADD__(v40, v24))
    v41 = (v40 >> 31) + 0x7FFFFFFF;
  if (v28)
  {
    v42 = *(_DWORD *)(v28 + 24);
    v31 = (char *)(v28 + 28);
  }
  else
  {
    v42 = 0;
  }
  v43 = *((_DWORD *)v31 + 1);
  v37 = __OFADD__(v42, v43);
  v44 = v42 + v43;
  if (v37)
    v44 = (v42 >> 31) + 0x7FFFFFFF;
  if (v41 > v44)
    v44 = v41;
  v37 = __OFADD__(v29, v44);
  v45 = (v29 + v44);
  if (v37)
    v45 = (v29 >> 31) + 0x7FFFFFFF;
  v46 = -v30;
  v47 = v39;
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  v49 = *(unsigned int *)(v48 + 508);
  if ((_DWORD)v49 && (v49 = *(_QWORD *)(*(_QWORD *)(v48 + 496) + 8 * v49 - 8)) != 0)
  {
    v50 = *(_DWORD *)(v49 + 64);
    LODWORD(v49) = *(_DWORD *)(v49 + 68);
  }
  else
  {
    v50 = 0;
  }
  v51 = -v29;
  v37 = __OFADD__(v46, v50);
  v52 = v46 + v50;
  if (v37)
    v52 = (v46 >> 31) + 0x7FFFFFFF;
  v53 = v47 | (v45 << 32);
  v54 = v51 + v49;
  if (__OFADD__(v51, (_DWORD)v49))
    v54 = (v51 >> 31) + 0x7FFFFFFF;
  *(_QWORD *)a3 = v52 | (unint64_t)(v54 << 32);
  *(_QWORD *)(a3 + 8) = v53;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (a2)
  {
    *(_QWORD *)(a3 + 16) = WebCore::RenderBox::localOutlineBoundsRepaintRect(this);
    *(_QWORD *)(a3 + 24) = v55;
    *(_BYTE *)(a3 + 32) = 1;
  }
}

uint64_t WebCore::RenderInline::computeVisibleRectsInContainer@<X0>(uint64_t this@<X0>, WebCore::RenderLayerModelObject *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const WebCore::RenderElement *v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const WebCore::RenderElement *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  BOOL v26;

  v8 = this;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  if (!*(_DWORD *)(v10 + 492))
  {
    v11 = *(unsigned int *)(v10 + 508);
    if ((_DWORD)v11)
    {
      if (!a2 && *(_QWORD *)(*(_QWORD *)(v10 + 496) + 8 * v11 - 8) && (a4 & 0x100000000) == 0)
      {
        this = (uint64_t)WebCore::RenderInline::computeVisibleRectsUsingPaintOffset((unsigned int *)a5, (const WebCore::RenderObject::RepaintRects *)this, a3);
LABEL_16:
        *(_BYTE *)(a5 + 36) = 1;
        return this;
      }
    }
  }
  if (a2 == (WebCore::RenderLayerModelObject *)this
    || (v26 = 0, (this = WebCore::RenderObject::container((WebCore::RenderObject *)this, a2, &v26)) == 0))
  {
    v14 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a3;
    *(_OWORD *)(a5 + 16) = v14;
    v15 = *(_DWORD *)(a3 + 32);
LABEL_15:
    *(_DWORD *)(a5 + 32) = v15;
    goto LABEL_16;
  }
  v12 = (const WebCore::RenderElement *)this;
  v13 = *(_OWORD *)(a3 + 16);
  v23 = *(_OWORD *)a3;
  v24 = v13;
  v25 = *(_DWORD *)(a3 + 32);
  if ((*(_QWORD *)(v8 + 96) & 0x280000) == 0x80000)
  {
    v16 = *(_QWORD *)(v8 + 144);
    if (v16)
    {
      v17 = this;
      WebCore::RenderObject::RepaintRects::move((uint64_t)&v23, *(_QWORD *)(v16 + 148));
      v12 = (const WebCore::RenderElement *)v17;
    }
  }
  if ((*((_BYTE *)v12 + 22) & 1) != 0)
  {
    if ((*((_BYTE *)v12 + 45) & 0x10) == 0)
    {
      this = 96;
      __break(0xC471u);
      return this;
    }
    v18 = v12;
    this = (*(uint64_t (**)(const WebCore::RenderElement *, __int128 *, WebCore::RenderLayerModelObject *, uint64_t))(*(_QWORD *)v12 + 816))(v12, &v23, a2, a4 | 0x400000000);
    v12 = v18;
    if ((this & 1) == 0)
    {
      if ((a4 & 0x100000000) != 0)
      {
        *(_BYTE *)a5 = 0;
        *(_BYTE *)(a5 + 36) = 0;
        return this;
      }
      goto LABEL_29;
    }
  }
  if (v26)
  {
    v19 = WebCore::RenderObject::offsetFromAncestorContainer(a2, v12);
    v20 = -(int)v19;
    if ((v19 & 0xFFFFFFFF00000000) == 0x8000000000000000)
      v21 = 0x7FFFFFFF00000000;
    else
      v21 = -(uint64_t)(v19 & 0xFFFFFFFF00000000);
    if ((_DWORD)v19 == 0x80000000)
      v20 = 0x7FFFFFFFLL;
    this = WebCore::RenderObject::RepaintRects::move((uint64_t)&v23, v21 | v20);
LABEL_29:
    v22 = v24;
    *(_OWORD *)a5 = v23;
    *(_OWORD *)(a5 + 16) = v22;
    v15 = v25;
    goto LABEL_15;
  }
  return (*(uint64_t (**)(const WebCore::RenderElement *, __int128 *, WebCore::RenderLayerModelObject *, uint64_t))(*(_QWORD *)v12 + 472))(v12, &v23, a2, a4);
}

uint64_t WebCore::RenderBox::computeVisibleRectsUsingPaintOffset@<X0>(uint64_t this@<X0>, const WebCore::RenderObject::RepaintRects *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  const WebCore::TransformationMatrix *v44;
  float v45;
  const WebCore::TransformationMatrix *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::RenderObject::RepaintRects *v51;
  WebCore::RenderObject::RepaintRects *v52;

  v3 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v3;
  *(_DWORD *)(a3 + 32) = *((_DWORD *)a2 + 8);
  v4 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8);
  v5 = *(_QWORD *)(*((_QWORD *)v4 + 243) + 248);
  v6 = *(unsigned int *)(v5 + 508);
  if ((_DWORD)v6)
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 496) + 8 * v6 - 8);
  else
    v7 = 0;
  if ((*(_BYTE *)(this + 21) & 0x80) != 0 && *(_QWORD *)(*(_QWORD *)(this + 144) + 200))
  {
    v49 = this;
    v51 = (WebCore::RenderObject::RepaintRects *)a3;
    v48 = v7;
    v44 = *(const WebCore::TransformationMatrix **)(*(_QWORD *)(this + 144) + 200);
    v45 = WebCore::Document::deviceScaleFactor(v4);
    v46 = v44;
    v7 = v48;
    WebCore::RenderObject::RepaintRects::transform((uint64_t)v51, v46, v45);
    this = v49;
    a3 = (uint64_t)v51;
  }
  if ((*(_QWORD *)(this + 96) & 0x280000) == 0x80000)
  {
    v47 = *(_QWORD *)(this + 144);
    if (v47)
    {
      v50 = this;
      v52 = (WebCore::RenderObject::RepaintRects *)a3;
      WebCore::RenderObject::RepaintRects::move(a3, *(_QWORD *)(v47 + 148));
      this = v50;
      a3 = (uint64_t)v52;
    }
  }
  v9 = *(_DWORD *)(this + 152);
  v8 = *(_DWORD *)(this + 156);
  v10 = *(_DWORD *)(a3 + 4);
  v11 = *(_DWORD *)a3 + v9;
  if (__OFADD__(*(_DWORD *)a3, v9))
    v11 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  v12 = __OFADD__(v10, v8);
  v13 = v10 + v8;
  v14 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v14 = v13;
  v15 = *(unsigned __int8 *)(a3 + 32);
  if (*(_BYTE *)(a3 + 32))
  {
    v16 = *(_DWORD *)(a3 + 16);
    v12 = __OFADD__(v16, v9);
    v17 = v16 + v9;
    if (v12)
      v17 = (v16 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a3 + 16) = v17;
    v18 = *(_DWORD *)(a3 + 20);
    v12 = __OFADD__(v18, v8);
    v19 = v18 + v8;
    if (v12)
      v19 = (v18 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a3 + 20) = v19;
  }
  v21 = *(_DWORD *)(v7 + 48);
  v20 = *(_DWORD *)(v7 + 52);
  v12 = __OFADD__(v11, v21);
  v22 = v11 + v21;
  v23 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v23 = v22;
  if (__OFADD__(v14, v20))
    v24 = (v14 >> 31) + 0x7FFFFFFF;
  else
    v24 = v14 + v20;
  *(_DWORD *)a3 = v23;
  *(_DWORD *)(a3 + 4) = v24;
  if (v15)
  {
    v25 = *(_DWORD *)(a3 + 16);
    v26 = v25 + v21;
    if (__OFADD__(v25, v21))
      v26 = (v25 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a3 + 16) = v26;
    v27 = *(_DWORD *)(a3 + 20);
    v28 = v27 + v20;
    if (__OFADD__(v27, v20))
      v28 = (v27 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a3 + 20) = v28;
  }
  if ((*(_BYTE *)v7 & 1) != 0)
  {
    v30 = *(_DWORD *)(v7 + 32);
    v29 = *(_DWORD *)(v7 + 36);
    v31 = *(_QWORD *)(v7 + 40);
    if (v23 <= v30)
      v32 = *(_DWORD *)(v7 + 32);
    else
      v32 = v23;
    if ((int)v24 <= (int)v29)
      v33 = v29;
    else
      v33 = v24;
    v34 = *(_DWORD *)(a3 + 8);
    v12 = __OFADD__(v23, v34);
    v35 = v23 + v34;
    if (v12)
      v35 = (v23 >> 31) + 0x7FFFFFFF;
    v36 = v30 + v31;
    if (__OFADD__(v30, (_DWORD)v31))
      v36 = (v30 >> 31) + 0x7FFFFFFF;
    if (v36 >= v35)
      v36 = v35;
    v37 = *(_DWORD *)(a3 + 12);
    v12 = __OFADD__(v24, v37);
    v38 = v24 + v37;
    if (v12)
      v38 = (v24 >> 31) + 0x7FFFFFFF;
    v39 = v29 + HIDWORD(v31);
    if (__OFADD__(v29, HIDWORD(v31)))
      v39 = (v29 >> 31) + 0x7FFFFFFF;
    if (v39 >= v38)
      v39 = v38;
    if (v32 >= v36 || (int)v33 >= v39)
    {
      v36 = 0;
      v39 = 0;
      v32 = 0;
      v33 = 0;
    }
    v40 = v32 | (unint64_t)(v33 << 32);
    v12 = __OFSUB__(v36, v32);
    LODWORD(v41) = v36 - v32;
    v42 = (v36 >> 31) + 0x7FFFFFFF;
    if (v12)
      v41 = v42;
    else
      v41 = v41;
    v12 = __OFSUB__(v39, (_DWORD)v33);
    LODWORD(v33) = v39 - v33;
    v43 = (v39 >> 31) + 0x7FFFFFFF;
    if (v12)
      v33 = v43;
    else
      v33 = v33;
    *(_QWORD *)a3 = v40;
    *(_QWORD *)(a3 + 8) = v41 | (v33 << 32);
  }
  return this;
}

uint64_t WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdate(uint64_t this)
{
  int v1;

  *(_DWORD *)(this + 12) |= 8u;
  if ((*(_BYTE *)(this + 24) & 4) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
LABEL_4:
      do
      {
        v1 = *(_DWORD *)(this + 12);
        if ((v1 & 1) != 0)
          break;
        *(_DWORD *)(this + 12) = v1 | 1;
        if ((*(_BYTE *)(this + 24) & 4) == 0)
        {
          while (1)
          {
            this = *(_QWORD *)(this + 40);
            if (!this)
              return this;
            if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        this = *(_QWORD *)(this + 40);
LABEL_9:
        ;
      }
      while (this);
    }
  }
  else
  {
    while (1)
    {
      this = *(_QWORD *)(this + 40);
      if (!this)
        break;
      if ((*(_BYTE *)(this + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return this;
}

uint64_t PAL::MCProfileConnectionFunction(PAL *this)
{
  return qword_1ECE7E438;
}

uint64_t WebCore::IOSApplication::isIMDb(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81746 == 1)
    return byte_1ECE81745 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81745 = IsEqualTo;
  byte_1ECE81746 = 1;
  return result;
}

void sub_194114A00(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isMobileSafari(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isMobileSafari(void)::isMobileSafari != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isMobileSafari(void)::isMobileSafari = IsEqualTo;
  return result;
}

void sub_194114ACC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::RenderBoxModelObject::hasAutoHeightOrContainingBlockWithAutoHeight(WebCore::RenderBoxModelObject *this, const WebCore::RenderBox *a2)
{
  WebCore::RenderBoxModelObject *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  char v9;
  unsigned int v10;
  void *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  WebCore::RenderObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  char v38;
  char v39;
  char v40;
  int v41;
  unsigned __int8 v42;
  char v43;
  char v44;

  if (this)
  {
    if ((*((_BYTE *)this + 45) & 4) != 0)
      v3 = this;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v5 = (unsigned int *)(v4 + 4);
  v6 = (unsigned int *)(v4 + 12);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v7 = v6;
  else
    v7 = v5;
  v44 = 0;
  v42 = *((_BYTE *)v7 + 4);
  v8 = v42;
  v9 = *((_BYTE *)v7 + 5);
  v43 = v9;
  v10 = v42 - 2;
  if (v10 >= 9)
  {
    if (v42 == 11)
    {
      v11 = (void *)*v7;
      v41 = *v7;
      WebCore::Length::ref(&v41);
      v40 = 0;
      v38 = 11;
      v39 = v9;
      goto LABEL_54;
    }
    v11 = 0;
  }
  else
  {
    v11 = (void *)*v7;
  }
  v40 = 0;
  v38 = v42;
  v39 = v9;
  if (v10 < 9)
  {
    v12 = v11;
    goto LABEL_14;
  }
  v12 = 0;
  if (v42 == 11)
  {
LABEL_54:
    v37 = (int)v11;
    WebCore::Length::ref(&v37);
    v12 = (unint64_t)v11;
    goto LABEL_15;
  }
LABEL_14:
  if ((v42 & 0xF7) == 3)
  {
LABEL_15:
    if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
      goto LABEL_16;
    v20 = this;
    while (1)
    {
      v20 = WebCore::RenderObject::containingBlock(v20);
      if (!v20)
        goto LABEL_16;
      if ((*((_BYTE *)v20 + 45) & 1) == 0)
        goto LABEL_47;
      v27 = *((_BYTE *)v20 + 52) & 7;
      if (v27 == 1)
        break;
      if (v27 == 3)
      {
        v28 = 8;
LABEL_72:
        if ((*((_BYTE *)v20 + 53) & v28) != 0)
          goto LABEL_47;
      }
      if (*((_BYTE *)v20 + 46) == 49)
      {
LABEL_47:
        v13 = 0;
        v21 = *((unsigned __int8 *)v20 + 46);
        if (v21 != 49 && v21 != 37)
        {
          if ((*((_DWORD *)v20 + 5) & 0x1800000) == 0x1000000
            && ((v22 = (unsigned __int16)*((_DWORD *)v20 + 31) >> 13, (v22 - 1) > 4)
              ? (v23 = 0)
              : (v23 = qword_1969FC6C8[v22 - 1]),
                v24 = *(_QWORD *)(*((_QWORD *)v20 + 11) + 24) + 8,
                *(_BYTE *)(v24 + 8 * v23 + 4)))
          {
            v25 = ((unsigned __int16)*((_DWORD *)v20 + 31) >> 13) - 1;
            if (v25 > 4)
              v26 = 2;
            else
              v26 = qword_1969FC6F0[v25];
            if (*(_BYTE *)(v24 + 8 * v26 + 4))
              v13 = 0;
            else
              v13 = (char *)v20;
          }
          else
          {
            v13 = (char *)v20;
          }
        }
        goto LABEL_17;
      }
    }
    v28 = 16;
    goto LABEL_72;
  }
LABEL_16:
  v13 = 0;
LABEL_17:
  if (v8 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
  }
  if ((v8 & 0xFFFFFFF7) == 3 && v13)
  {
    if (!v3)
    {
      LOBYTE(v14) = 1;
      goto LABEL_90;
    }
    WebCore::RenderBlock::addPercentHeightDescendant((WebCore::RenderBlock *)v13, v3);
  }
  else if (!v3)
  {
    LOBYTE(v14) = 1;
    goto LABEL_26;
  }
  v14 = *((_QWORD *)v3 + 4);
  if (v14)
  {
    v14 = *(_QWORD *)(v14 + 8);
    if (v14)
    {
      if ((*(char *)(v14 + 45) & 0x80000000) == 0 || (*((_BYTE *)v3 + 21) & 4) != 0)
        goto LABEL_111;
      v17 = *((_QWORD *)this + 4);
      if (v17)
        v18 = *(char **)(v17 + 8);
      else
        v18 = 0;
      if ((v18[45] & 0x80000000) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194114EE0);
      }
      if ((WebCore::RenderFlexibleBox::usedChildOverridingLogicalHeightForPercentageResolution((WebCore::RenderFlexibleBox *)v18, v3) & 0xFF00000000) != 0)goto LABEL_28;
      v14 = *((_QWORD *)v3 + 4);
      if (v14)
      {
        v14 = *(_QWORD *)(v14 + 8);
        if (v14)
        {
LABEL_111:
          if (*(_BYTE *)(v14 + 46) == 12 && (*((_BYTE *)v3 + 21) & 4) == 0)
          {
            v19 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(v3);
            if ((_BYTE)a2)
              goto LABEL_97;
          }
          LOBYTE(v14) = 0;
        }
      }
    }
  }
LABEL_26:
  if (v8)
  {
    if (!v13)
    {
LABEL_28:
      v15 = 0;
      goto LABEL_29;
    }
LABEL_90:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) == 2
      && (v13[45] & 0x80000000) == 0
      && v13[46] != 5)
    {
      goto LABEL_28;
    }
    if ((v14 & 1) != 0 || (v19 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(v3), !(_BYTE)a2))
    {
      v34 = (unint64_t)WebCore::RenderBlock::availableLogicalHeightForPercentageComputation((WebCore::RenderBlock *)v13, a2) >> 32 == 0;
      goto LABEL_94;
    }
LABEL_97:
    v34 = (v19 & 0xFF00000000) == 0;
LABEL_94:
    v15 = v34;
LABEL_29:
    if (v8 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
    }
    return v15;
  }
  if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
    return 1;
  v29 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v30 = (v29 - 1) > 4 ? 0 : qword_1969FC6C8[v29 - 1];
  v31 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 8;
  if (!*(_BYTE *)(v31 + 8 * v30 + 4))
    return 1;
  v32 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v32 > 4)
    v33 = 2;
  else
    v33 = qword_1969FC6F0[v32];
  v35 = *(unsigned __int8 *)(v31 + 8 * v33 + 4);
  v15 = v35 == 0;
  if (v35)
    v36 = v13 == 0;
  else
    v36 = 1;
  if (!v36)
    goto LABEL_90;
  return v15;
}

uint64_t WebCore::RenderReplaced::computeReplacedLogicalHeight(WebCore::RenderBoxModelObject *this, const WebCore::RenderBox *a2)
{
  const WebCore::RenderBox *v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  int shouldApplySizeContainment;
  int shouldApplySizeOrInlineSizeContainment;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  double v39;
  double v40;
  int v41;
  int v42;
  double v43;
  double v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  signed int v51;
  double v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  float32x2_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 v61;
  char v62;
  char v63;

  v2 = a2;
  v4 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v5 = *((_QWORD *)this + 11);
  v6 = *(_QWORD *)(v5 + 8);
  if (v4 <= 3)
  {
    v57 = *(unsigned __int8 *)(v6 + 8);
    if (v57 == 4)
      goto LABEL_95;
    if (!*(_BYTE *)(v6 + 8))
      goto LABEL_12;
    if ((v57 & 0xFFFFFFF7) == 3)
    {
LABEL_52:
      if (WebCore::RenderBoxModelObject::hasAutoHeightOrContainingBlockWithAutoHeight(this, a2))
        goto LABEL_12;
      v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      v4 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
      goto LABEL_3;
    }
    v48 = v6 + 4;
  }
  else
  {
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 4)
      goto LABEL_3;
    if (!*(_BYTE *)(v6 + 16))
    {
LABEL_12:
      v12 = (unsigned __int8 *)(*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1672))(this);
      v58 = 0;
      v59 = 0;
      WebCore::RenderReplaced::computeIntrinsicSizesConstrainedByTransferredMinMaxSizes(this, (WebCore::RenderBox *)v12, &v58, (float32_t *)&v59);
      v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      v15 = v14 + 12;
      v16 = v14 + 4;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
        v15 = v16;
      v17 = *(unsigned __int8 *)(v15 + 4);
      v18 = v58.f32[1];
      if (v58.f32[1] > 0.0)
        shouldApplySizeContainment = 1;
      else
        shouldApplySizeContainment = WebCore::RenderElement::shouldApplySizeContainment(this);
      if (v58.f32[0] > 0.0)
        shouldApplySizeOrInlineSizeContainment = 1;
      else
        shouldApplySizeOrInlineSizeContainment = WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this);
      if (*(float *)&v59 > 0.0
        && *((float *)&v59 + 1) > 0.0
        && (v49 = *((_QWORD *)this + 4)) != 0
        && (v50 = *(_QWORD *)(v49 + 8)) != 0
        && (*(char *)(v50 + 45) < 0 && (*((_BYTE *)this + 21) & 4) == 0
         || *(_BYTE *)(v50 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
        && ((shouldApplySizeContainment & shouldApplySizeOrInlineSizeContainment & 1) != 0
         || (shouldApplySizeContainment | shouldApplySizeOrInlineSizeContainment) == 1
         && v12
         && ((v54 = v12[46], v54 == 103) || v54 == 83))
        && (v55 = WebCore::RenderBox::overridingLogicalWidth(this), (v55 & 0xFF00000000) != 0))
      {
        v56 = WebCore::RenderBox::overridingContentLogicalWidth((uint64_t)this, v55);
        v43 = (double)v56 * 0.015625 * (*((float *)&v59 + 1) / *(float *)&v59);
      }
      else
      {
        if (v17)
          v21 = 0;
        else
          v21 = shouldApplySizeContainment;
        if (v21 != 1)
        {
          v13.n128_u32[0] = v59;
          if (*(float *)&v59 > 0.0)
          {
            v13.n128_u32[0] = HIDWORD(v59);
            if (*((float *)&v59 + 1) > 0.0)
            {
              if (((unint64_t)v2 & 0xFF00000000) == 0)
                LODWORD(v2) = WebCore::RenderBox::contentLogicalWidth(this);
              v22 = 0;
              v23 = *((_QWORD *)this + 11);
              if ((*(_DWORD *)(*(_QWORD *)(v23 + 32) + 148) & 0x60) != 0x40
                && ((*(_DWORD *)(*(_QWORD *)(v23 + 32) + 148) >> 5) & 3u) - 3 >= 0xFFFFFFFE)
              {
                v22 = (*(unsigned __int8 *)(*(_QWORD *)(v23 + 8) + 68) >> 2) & 1;
              }
              v24 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1064))(this);
              v25 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1072))(this);
              v26 = v24 + v25;
              if (__OFADD__(v24, v25))
                v26 = (v24 >> 31) + 0x7FFFFFFF;
              v27 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 976))(this);
              v28 = v26 + v27;
              if (__OFADD__(v26, v27))
                v28 = (v26 >> 31) + 0x7FFFFFFF;
              v29 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 984))(this);
              v30 = v28 + v29;
              if (__OFADD__(v28, v29))
                v30 = (v28 >> 31) + 0x7FFFFFFF;
              v31 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1048))(this);
              v32 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 960))(this);
              v33 = v31 + v32;
              if (__OFADD__(v31, v32))
                v33 = (v31 >> 31) + 0x7FFFFFFF;
              v34 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1056))(this);
              v35 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 968))(this);
              v36 = v34 + v35;
              if (__OFADD__(v34, v35))
                v36 = (v34 >> 31) + 0x7FFFFFFF;
              v37 = __OFADD__(v33, v36);
              v38 = v33 + v36;
              if (v37)
                v38 = (v33 >> 31) + 0x7FFFFFFF;
              v39 = *((float *)&v59 + 1) / *(float *)&v59;
              if (v22)
              {
                v51 = (_DWORD)v2 + v30;
                if (__OFADD__((_DWORD)v2, v30))
                  v51 = (v2 >> 31) + 0x7FFFFFFF;
                v52 = v39 * ((double)v51 * 0.015625) * 64.0;
                if (v52 >= 2147483650.0)
                {
                  v53 = 0x7FFFFFFF;
                }
                else if (v52 <= -2147483650.0)
                {
                  v53 = 0x80000000;
                }
                else
                {
                  v53 = (int)v52;
                }
                v37 = __OFSUB__(v53, v38);
                v41 = v53 - v38;
                if (v37)
                  v41 = (v53 >> 31) + 0x7FFFFFFF;
              }
              else
              {
                v40 = (double)(int)v2 * 0.015625 * v39 * 64.0;
                if (v40 >= 2147483650.0)
                {
                  v41 = 0x7FFFFFFF;
                }
                else if (v40 <= -2147483650.0)
                {
                  v41 = 0x80000000;
                }
                else
                {
                  v41 = (int)v40;
                }
              }
              v42 = v41;
              return WebCore::RenderBox::computeReplacedLogicalHeightRespectingMinMaxHeight((unint64_t)this, v42);
            }
          }
          if (!shouldApplySizeContainment)
          {
            v45 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
            v46 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *, __n128))(*(_QWORD *)this + 1320))(this, v13);
            v47 = HIDWORD(v46);
            if (v45 < 4)
              LODWORD(v47) = v46;
            v42 = v47;
            return WebCore::RenderBox::computeReplacedLogicalHeightRespectingMinMaxHeight((unint64_t)this, v42);
          }
        }
        v43 = v18;
      }
      v44 = v43 * 64.0;
      if (v44 >= 2147483650.0)
      {
        v42 = 0x7FFFFFFF;
      }
      else if (v44 <= -2147483650.0)
      {
        v42 = 0x80000000;
      }
      else
      {
        v42 = (int)v44;
      }
      return WebCore::RenderBox::computeReplacedLogicalHeightRespectingMinMaxHeight((unint64_t)this, v42);
    }
    if ((v7 & 0xFFFFFFF7) == 3)
      goto LABEL_52;
    v48 = v6 + 12;
  }
  if (*(unsigned __int8 *)(v48 + 4) - 7 > 3
    || ((*(_DWORD *)(*(_QWORD *)(v5 + 32) + 148) >> 5) & 3u) - 3 > 0xFFFFFFFD)
  {
    goto LABEL_12;
  }
LABEL_3:
  if (v4 < 4)
  {
LABEL_95:
    v8 = v6 + 4;
    goto LABEL_5;
  }
  v8 = v6 + 12;
LABEL_5:
  v60 = 0;
  v63 = 0;
  v61 = *(_BYTE *)(v8 + 4);
  v62 = *(_BYTE *)(v8 + 5);
  if (v61 - 2 >= 9)
  {
    if (v61 == 11)
    {
      v60 = *(_DWORD *)v8;
      WebCore::Length::ref((int *)&v60);
    }
  }
  else
  {
    v63 = *(_BYTE *)(v8 + 6);
    v60 = *(_DWORD *)v8;
  }
  v9 = WebCore::RenderBox::computeReplacedLogicalHeightUsing(this, 0, (unsigned __int8 *)&v60);
  v10 = WebCore::RenderBox::computeReplacedLogicalHeightRespectingMinMaxHeight((unint64_t)this, v9);
  if (v61 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v60);
  }
  return v10;
}

uint64_t WebCore::RenderBox::computeReplacedLogicalHeightRespectingMinMaxHeight(unint64_t a1, int a2)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  void *v12;
  int v13;
  uint64_t v14;
  const WebCore::Length *v15;
  const WebCore::Length *v16;
  const WebCore::Length *v17;
  int v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;

  if (WebCore::RenderBox::replacedMinMaxLogicalHeightComputesAsNone(a1, 1))
  {
    v4 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v15 = (const WebCore::Length *)(v14 + 20);
    v16 = (const WebCore::Length *)(v14 + 36);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      v17 = v16;
    else
      v17 = v15;
    WebCore::Length::Length((WebCore::Length *)&v22, v17);
    v4 = WebCore::RenderBox::computeReplacedLogicalHeightUsing((WebCore::RenderObject *)a1, 1, (unsigned __int8 *)&v22);
    if (v23 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
    }
  }
  v5 = WebCore::RenderBox::replacedMinMaxLogicalHeightComputesAsNone(a1, 2);
  v6 = a2;
  if (!v5)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v10 = (unsigned int *)(v9 + 28);
    v11 = (unsigned int *)(v9 + 44);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      v10 = v11;
    v18 = 0;
    v21 = 0;
    v19 = *((_BYTE *)v10 + 4);
    v20 = *((_BYTE *)v10 + 5);
    if (v19 - 2 >= 9)
    {
      if (v19 == 11)
      {
        v12 = (void *)*v10;
        v18 = *v10;
        WebCore::Length::ref(&v18);
        v13 = WebCore::RenderBox::computeReplacedLogicalHeightUsing((WebCore::RenderObject *)a1, 2, (unsigned __int8 *)&v18);
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v12);
        v6 = v13;
        goto LABEL_4;
      }
    }
    else
    {
      v21 = *((_BYTE *)v10 + 6);
      v18 = *v10;
    }
    v6 = WebCore::RenderBox::computeReplacedLogicalHeightUsing((WebCore::RenderObject *)a1, 2, (unsigned __int8 *)&v18);
  }
LABEL_4:
  if (v6 >= a2)
    v7 = a2;
  else
    v7 = v6;
  if ((int)v4 <= (int)v7)
    return v7;
  else
    return v4;
}

BOOL WebCore::RenderBox::replacedMinMaxLogicalHeightComputesAsNone(unint64_t this, int a2)
{
  WebCore::RenderBox *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  int v9;
  unsigned int v10;
  void *v11;
  float v12;
  int v13;
  int v14;
  float v16;
  _BOOL8 v17;
  char v19;
  unint64_t v20;
  WebCore::RenderBoxModelObject *v21;
  const WebCore::RenderBox *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  char v32;
  char v33;
  char v34;
  float v35;
  unsigned __int8 v36;
  char v37;
  char v38;

  v3 = (WebCore::RenderBox *)this;
  v4 = *(unsigned int **)(*(_QWORD *)(this + 88) + 8);
  v5 = v4 + 7;
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 >= 4)
    v5 = v4 + 11;
  v6 = v4 + 5;
  v7 = v4 + 9;
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
    v7 = v6;
  if (a2 == 1)
    v5 = v7;
  v38 = 0;
  v36 = *((_BYTE *)v5 + 4);
  v8 = v36;
  v9 = *((unsigned __int8 *)v5 + 5);
  v37 = *((_BYTE *)v5 + 5);
  v10 = v36 - 2;
  if (v10 >= 9)
  {
    if (v36 != 11)
    {
      v11 = 0;
      v13 = 1;
      v12 = 0.0;
      goto LABEL_13;
    }
    v11 = (void *)*v5;
    v35 = *(float *)v5;
    this = (unint64_t)WebCore::Length::ref((int *)&v35);
  }
  else
  {
    if (*((_BYTE *)v5 + 6))
    {
      v13 = 0;
      v12 = *(float *)v5;
      v11 = (void *)*v5;
      goto LABEL_13;
    }
    v11 = (void *)*v5;
  }
  v12 = *(float *)&v11;
  v13 = 1;
LABEL_13:
  if (a2 == 1)
    v14 = 0;
  else
    v14 = 13;
  if (v8 == v14 && v9 == 0)
  {
    if (a2 != 1)
      goto LABEL_25;
    v16 = (float)SLODWORD(v12);
    if (!v13)
      v16 = v12;
    if (v16 == 0.0)
    {
LABEL_25:
      v17 = 1;
      goto LABEL_26;
    }
  }
  if ((v8 & 0xFFFFFFF7) == 3)
  {
    this = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(v3);
    if (v19)
    {
      v17 = (this & 0xFF00000000) == 0;
      goto LABEL_26;
    }
  }
  v34 = 0;
  v32 = v8;
  v33 = v9;
  if (v10 >= 9)
  {
    v20 = 0;
    if (v8 == 11)
    {
      v31 = (int)v11;
      this = (unint64_t)WebCore::Length::ref(&v31);
      v20 = (unint64_t)v11;
      goto LABEL_36;
    }
  }
  else if (v13)
  {
    v20 = v11;
  }
  else
  {
    v20 = LODWORD(v12);
  }
  if ((v8 & 0xF7) != 3)
    goto LABEL_37;
LABEL_36:
  if ((*((_DWORD *)v3 + 5) & 0x1800000) != 0x1000000)
  {
    this = (unint64_t)v3;
    while (1)
    {
      this = (unint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)this);
      if (!this)
        goto LABEL_37;
      if ((*(_BYTE *)(this + 45) & 1) == 0)
        goto LABEL_51;
      v29 = *(_BYTE *)(this + 52) & 7;
      if (v29 == 1)
        break;
      if (v29 == 3)
      {
        v30 = 8;
LABEL_68:
        if ((*(_BYTE *)(this + 53) & v30) != 0)
          goto LABEL_51;
      }
      if (*(_BYTE *)(this + 46) == 49)
      {
LABEL_51:
        v21 = 0;
        v23 = *(unsigned __int8 *)(this + 46);
        if (v23 != 49 && v23 != 37)
        {
          if ((*(_DWORD *)(this + 20) & 0x1800000) == 0x1000000
            && ((v24 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13, (v24 - 1) > 4)
              ? (v25 = 0)
              : (v25 = qword_1969FC6C8[v24 - 1]),
                v26 = *(_QWORD *)(*(_QWORD *)(this + 88) + 24) + 8,
                *(_BYTE *)(v26 + 8 * v25 + 4)))
          {
            v27 = ((unsigned __int16)*(_DWORD *)(this + 124) >> 13) - 1;
            if (v27 > 4)
              v28 = 2;
            else
              v28 = qword_1969FC6F0[v27];
            if (*(_BYTE *)(v26 + 8 * v28 + 4))
              v21 = 0;
            else
              v21 = (WebCore::RenderBoxModelObject *)this;
          }
          else
          {
            v21 = (WebCore::RenderBoxModelObject *)this;
          }
        }
        goto LABEL_38;
      }
    }
    v30 = 16;
    goto LABEL_68;
  }
LABEL_37:
  v21 = 0;
LABEL_38:
  if (v8 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    this = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v20);
  }
  v17 = v21
     && !WebCore::CocoaApplication::isIBooks((WebCore::CocoaApplication *)this)
     && WebCore::RenderBoxModelObject::hasAutoHeightOrContainingBlockWithAutoHeight(v21, v22);
LABEL_26:
  if (v8 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
  }
  return v17;
}

uint64_t WebCore::RealtimeMediaSourceCenter::shouldInterruptAudioOnPageVisibilityChange(WebCore::RealtimeMediaSourceCenter *this)
{
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "objectForInfoDictionaryKey:", CFSTR("UIBackgroundModes"));
  if (!v1)
    return 1;
  v2 = (void *)v1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 1;
  v3 = objc_msgSend(v2, "count");
  if (v3 < 1)
    return 1;
  v4 = 0;
  v5 = v3 - 1;
  do
  {
    v6 = objc_msgSend((id)objc_msgSend(v2, "objectAtIndex:", v4), "isEqual:", CFSTR("audio"));
    if ((v6 & 1) != 0)
      break;
  }
  while (v5 != v4++);
  return v6 ^ 1u;
}

BOOL WebCore::CocoaApplication::isIBooks(WebCore::CocoaApplication *this)
{
  _BOOL8 result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  uint64_t IsEqualTo;
  WTF::StringImpl *v6;
  const WTF::String *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;

    return WebCore::CocoaApplication::isIBooks(void)::isIBooks != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v10;
  v9 = v10;
  if ((WebCore::applicationBundleIsEqualTo(&v9, v3) & 1) != 0)
  {
    IsEqualTo = 1;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v10;
    v8 = v10;
    IsEqualTo = WebCore::applicationBundleIsEqualTo(&v8, v7);
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::CocoaApplication::isIBooks(void)::isIBooks = IsEqualTo;
  return result;
}

void sub_194115CC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::applicationBundleIsEqualTo(const WTF::StringImpl **this, const WTF::String *a2)
{
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  WebCore::applicationBundleIdentifier(a2, &v8);
  v5 = WTF::equal(v8, *this, v3);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

void sub_194115D7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::applicationBundleIdentifier@<X0>(WTF::StringImpl *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  int v4;

  if ((byte_1ECE81781 & 1) != 0)
  {
    result = (WTF::StringImpl *)qword_1ECE81790;
    if (qword_1ECE81790)
      goto LABEL_3;
  }
  else
  {
    qword_1ECE81790 = 0;
    byte_1ECE81781 = 1;
  }
  if ((byte_1ECE81782 & 1) == 0)
  {
    qword_1ECE81798 = 0;
    byte_1ECE81782 = 1;
    goto LABEL_9;
  }
  result = (WTF::StringImpl *)qword_1ECE81798;
  if (!qword_1ECE81798)
  {
LABEL_9:
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
    JUMPOUT(0x19AEA5508);
  }
LABEL_3:
  v4 = *(_DWORD *)result + 2;
  *(_DWORD *)result = v4;
  *(_DWORD *)result = v4 + 2;
  *a2 = result;
  if (!v4)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a1);
  *(_DWORD *)result = v4;
  return result;
}

uint64_t WebCore::RenderBox::adjustContentBoxLogicalHeightForBoxSizing(_QWORD *a1, uint64_t a2)
{
  int v2;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;

  if ((a2 & 0xFF00000000) == 0)
    return 0;
  v2 = a2;
  if ((*(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 68) & 4) != 0)
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 1048))(a1);
    v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1);
    if (__OFADD__(v5, v6))
      v7 = (v5 >> 31) + 0x7FFFFFFF;
    else
      v7 = v5 + v6;
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 1056))(a1);
    v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 968))(a1);
    v10 = v8 + v9;
    if (__OFADD__(v8, v9))
      v10 = (v8 >> 31) + 0x7FFFFFFF;
    v11 = __OFADD__(v7, v10);
    v12 = v7 + v10;
    if (v11)
      v12 = (v7 >> 31) + 0x7FFFFFFF;
    v11 = __OFSUB__(v2, v12);
    v13 = v2 - v12;
    if (v11)
      v2 = (v2 >> 31) + 0x7FFFFFFF;
    else
      v2 = v13;
  }
  return v2 & ~(v2 >> 31);
}

WTF::StringImpl *WebCore::SettingsBase::initializeDefaultFontFamilies(WebCore::SettingsBase *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SettingsBase::setStandardFontFamily((uint64_t)this, &v19, 74);
  v3 = v19;
  v19 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v19;
  WebCore::SettingsBase::setStandardFontFamily((uint64_t)this, &v18, 73);
  v5 = v18;
  v18 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v19;
  WebCore::SettingsBase::setStandardFontFamily((uint64_t)this, &v18, 54);
  v7 = v18;
  v18 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v19;
  WebCore::SettingsBase::setStandardFontFamily((uint64_t)this, &v18, 18);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v19;
  WebCore::SettingsBase::setStandardFontFamily((uint64_t)this, &v18, 0);
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SettingsBase::setFixedFontFamily((uint64_t)this, &v19, 0);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SettingsBase::setSerifFontFamily((uint64_t)this, &v19, 0);
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SettingsBase::setSansSerifFontFamily((uint64_t)this, &v19, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1941161D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::String::String(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  if (a3)
  {
    if (a3 == 1)
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v6;
    }
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebCore *WebCore::SettingsBase::setStandardFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  uint64_t *v6;
  WebCore *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::Page *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (uint64_t *)(**(uint64_t (***)(uint64_t))a1)(a1);
  result = (WebCore *)WebCore::setGenericFontFamilyForScript(v6, a2, a3);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
      v10 = *(WebCore::Page **)(v9 + 8);
    else
      v10 = 0;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
      v12 = WebCore::threadGlobalDataSlow(result);
    v13 = *(_QWORD *)(v12 + 80);
    if (!v13)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v12);
      v13 = *(_QWORD *)(v12 + 80);
    }
    result = *(WebCore **)(v13 + 80);
    if (result)
    {
      *(_QWORD *)(v13 + 80) = 0;
      result = (WebCore *)WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::deallocateTable(result, v8);
    }
    if (v10)
      return (WebCore *)WebCore::Page::setNeedsRecalcStyleInAllFrames(v10);
  }
  return result;
}

uint64_t WebCore::setGenericFontFamilyForScript(uint64_t *a1, const WTF::StringImpl **a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v26;
  int v27;
  _QWORD v28[3];

  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    v27 = a3;
    v26 = 0;
    WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(a1, (WTF::StringImpl *)&v27, (uint64_t *)&v26, (uint64_t)v28);
    v12 = v28[0];
    v13 = v26;
    v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v15 = WTF::equal(*(WTF **)(v12 + 8), *a2, v11);
    if ((v15 & 1) == 0)
    {
      v16 = *a2;
      if (*a2)
        *(_DWORD *)v16 += 2;
      v17 = *(WTF::StringImpl **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    return v15 ^ 1u;
  }
  else
  {
    v4 = *a1;
    if (!*a1)
      return 0;
    v5 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(*a1, a3);
    if (!v5 || v5 == v4 + 16 * *(unsigned int *)(v4 - 4))
    {
      return 0;
    }
    else
    {
      v18 = v5;
      *(_DWORD *)v5 = -3;
      v19 = *(WTF::StringImpl **)(v5 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v6);
        else
          *(_DWORD *)v19 -= 2;
      }
      ++*(_DWORD *)(*a1 - 16);
      v20 = *a1;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 12) - 1;
      else
        v21 = -1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *a1;
      if (*a1)
      {
        v23 = 6 * *(_DWORD *)(v22 - 12);
        v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9)
          WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::rehash(a1, v24 >> 1, 0);
      }
      return 1;
    }
  }
}

uint64_t *WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_DWORD *)a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (WTF::StringImpl *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -2)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v25 = 0;
        v24 = v8 + 16 * v28;
        goto LABEL_15;
      }
      if (v16 == -3)
        v26 = v15;
      v14 = (v14 + v27) & v10;
      v15 = (WTF::StringImpl *)(v8 + 16 * v14);
      v16 = *(_DWORD *)v15;
      ++v27;
    }
    while (*(_DWORD *)v15 != -2);
    if (v26)
    {
      *(_DWORD *)v26 = -2;
      *((_QWORD *)v26 + 1) = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *(_DWORD *)a2;
      v15 = v26;
    }
  }
  *(_DWORD *)v15 = v11;
  v17 = *a3;
  *a3 = 0;
  result = (uint64_t *)*((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v17;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v18 = *v6;
  if (*v6)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_14;
LABEL_17:
    result = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::expand(v6, v15);
    v15 = (WTF::StringImpl *)result;
    v20 = *v6;
    if (*v6)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_14;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_17;
LABEL_14:
  v24 = v20 + 16 * v23;
  v25 = 1;
LABEL_15:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

uint64_t WebCore::Settings::fontGenericFamilies(WebCore::Settings *this)
{
  return (uint64_t)this + 256;
}

{
  return (uint64_t)this + 256;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v12 - 2) = -2;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v15 = v7;
    v13 = 0;
    v16 = v15;
    v17 = (WTF::StringImpl *)v6;
    do
    {
      if (*(_DWORD *)v17 != -3)
      {
        if (*(_DWORD *)v17 == -2)
        {
          WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>::~KeyValuePair((uint64_t)v17, v10);
        }
        else
        {
          v18 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::reinsert(*a1, v17);
          WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>::~KeyValuePair((uint64_t)v17, v19);
          if (v17 == a3)
            v13 = v18;
        }
      }
      v17 = (WTF::StringImpl *)((char *)v17 + 16);
      --v16;
    }
    while (v16);
    goto LABEL_17;
  }
  v13 = 0;
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_BYTE *WebCore::invalidateAfterGenericFamilyChange(WebCore *this, WebCore::Page *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *result;

  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow(this);
  v5 = *(_QWORD *)(v4 + 80);
  if (!v5)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v4);
    v5 = *(_QWORD *)(v4 + 80);
  }
  result = *(_BYTE **)(v5 + 80);
  if (result)
  {
    *(_QWORD *)(v5 + 80) = 0;
    result = (_BYTE *)WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::deallocateTable(result, a2);
  }
  if (this)
    return (_BYTE *)WebCore::Page::setNeedsRecalcStyleInAllFrames(this);
  return result;
}

_BYTE *WebCore::SettingsBase::setSansSerifFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  uint64_t v6;
  _BYTE *result;
  WebCore::Page *v8;
  uint64_t v9;
  WebCore *v10;

  v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  result = (_BYTE *)WebCore::FontGenericFamilies::setSansSerifFontFamily(v6, a2, a3);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
      v10 = *(WebCore **)(v9 + 8);
    else
      v10 = 0;
    return WebCore::invalidateAfterGenericFamilyChange(v10, v8);
  }
  return result;
}

uint64_t WebCore::FontGenericFamilies::setSansSerifFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  return WebCore::setGenericFontFamilyForScript((uint64_t *)(a1 + 24), a2, a3);
}

_BYTE *WebCore::SettingsBase::setSerifFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  uint64_t v6;
  _BYTE *result;
  WebCore::Page *v8;
  uint64_t v9;
  WebCore *v10;

  v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  result = (_BYTE *)WebCore::FontGenericFamilies::setSerifFontFamily(v6, a2, a3);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
      v10 = *(WebCore **)(v9 + 8);
    else
      v10 = 0;
    return WebCore::invalidateAfterGenericFamilyChange(v10, v8);
  }
  return result;
}

uint64_t WebCore::FontGenericFamilies::setSerifFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  return WebCore::setGenericFontFamilyForScript((uint64_t *)(a1 + 8), a2, a3);
}

_BYTE *WebCore::SettingsBase::setFixedFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  uint64_t v6;
  _BYTE *result;
  WebCore::Page *v8;
  uint64_t v9;
  WebCore *v10;

  v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  result = (_BYTE *)WebCore::FontGenericFamilies::setFixedFontFamily(v6, a2, a3);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
      v10 = *(WebCore **)(v9 + 8);
    else
      v10 = 0;
    return WebCore::invalidateAfterGenericFamilyChange(v10, v8);
  }
  return result;
}

uint64_t WebCore::FontGenericFamilies::setFixedFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  return WebCore::setGenericFontFamilyForScript((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t WebCore::RenderBox::overridingLogicalWidth(WebCore::RenderBox *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (uint64_t *)WebCore::gOverridingLogicalWidthMap;
  if (!WebCore::gOverridingLogicalWidthMap)
    goto LABEL_18;
  ++*(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = *v1;
    if (*v1)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      for (i = 1; ; ++i)
      {
        v10 = *(_QWORD *)(v3 + 16 * v8);
        if (!v10)
        {
          v12 = *(unsigned int *)(v3 - 4);
          v13 = v3 + 16 * v12;
          v14 = v13;
          goto LABEL_13;
        }
        if (v10 != -1 && v10 == v2)
          break;
        v8 = (v8 + i) & v4;
      }
      v13 = v3 + 16 * v8;
      v12 = *(unsigned int *)(v3 - 4);
      v14 = v3 + 16 * v12;
LABEL_13:
      v22 = v13;
      v15 = v3 + 16 * v12;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v22 = 0;
      v23 = 0;
    }
LABEL_14:
    while (v13 != v15 && !*(_QWORD *)(*(_QWORD *)v13 + 8))
    {
      v20 = v13 + 16;
      v22 = v20;
      v13 = v14;
      if (v20 != v14)
      {
        v13 = v20;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 16;
          v22 = v13;
          if (v13 == v14)
          {
            v13 = v14;
            goto LABEL_14;
          }
        }
      }
    }
  }
  else
  {
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v21, v1);
    v3 = *(_QWORD *)WebCore::gOverridingLogicalWidthMap;
  }
  if (v3)
    v3 += 16 * *(unsigned int *)(v3 - 4);
  if (v22 != v3)
  {
    v18 = *(_DWORD *)(v22 + 8) & 0xFFFFFF00;
    v17 = *(_DWORD *)(v22 + 8);
    v16 = 0x100000000;
  }
  else
  {
LABEL_18:
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  return v16 | v18 | v17;
}

uint64_t WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth(WebCore::RenderBoxModelObject *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;

  v2 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1064))(this);
  v3 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 + v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 984))(this);
  if (__OFADD__(v6, v7))
    return (v6 >> 31) + 0x7FFFFFFF;
  else
    return v6 + v7;
}

WTF::StringImpl *PAL::defaultTextEncodingNameForSystemLanguage@<X0>(PAL *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  CFStringEncoding v3;
  CFStringRef v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = PAL::webDefaultCFStringEncoding(this);
  v4 = CFStringConvertEncodingToIANACharSetName(v3);
  result = (WTF::StringImpl *)MEMORY[0x19AEA5508](a2, v4);
  v6 = *a2;
  if (!*a2 || *((_DWORD *)v6 + 1) != 5)
    return result;
  v7 = *((_QWORD *)v6 + 1);
  if ((*((_BYTE *)v6 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v7 & 0xDF) == 0x43
      && (*(_BYTE *)(v7 + 1) & 0xDF) == 0x50
      && (*(_BYTE *)(v7 + 2) & 0xDF) == 0x19
      && (*(_BYTE *)(v7 + 3) & 0xDF) == 0x14)
    {
      v8 = *(unsigned __int8 *)(v7 + 4);
      goto LABEL_14;
    }
  }
  else if ((*(_WORD *)v7 & 0xFFDF) == 0x43
         && (*(_WORD *)(v7 + 2) & 0xFFDF) == 0x50
         && (*(_WORD *)(v7 + 4) & 0xFFDF) == 0x19
         && (*(_WORD *)(v7 + 6) & 0xFFDF) == 0x14)
  {
    v8 = *(unsigned __int16 *)(v7 + 8);
LABEL_14:
    if ((v8 & 0xFFFFFFDF) == 0x19)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v13;
      result = *a2;
      *a2 = v13;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
          v6 = *a2;
        }
        else
        {
          *(_DWORD *)result -= 2;
        }
      }
      if (!v6 || *((_DWORD *)v6 + 1) != 5)
        return result;
    }
  }
  v10 = *((_QWORD *)v6 + 1);
  if ((*((_BYTE *)v6 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v10 & 0xDF) != 0x43
      || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x50
      || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x18
      || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x17)
    {
      return result;
    }
    v11 = *(unsigned __int8 *)(v10 + 4);
  }
  else
  {
    if ((*(_WORD *)v10 & 0xFFDF) != 0x43
      || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x50
      || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x18
      || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x17)
    {
      return result;
    }
    v11 = *(unsigned __int16 *)(v10 + 8);
  }
  if ((v11 & 0xFFFFFFDF) == 0x14)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = *a2;
    *a2 = v13;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t PAL::webDefaultCFStringEncoding(PAL *this)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
  if (!objc_msgSend(v1, "count"))
    return 513;
  v2 = (void *)MEMORY[0x1E0CB34D0];
  v6[0] = objc_msgSend(v1, "firstObject");
  v3 = (void *)objc_msgSend(v2, "preferredLocalizationsFromArray:forPreferences:", &unk_1E349D5A0, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1));
  if (!objc_msgSend(v3, "count"))
    return 513;
  v4 = (void *)objc_msgSend(v3, "firstObject");
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR("zh-Hans")) & 1) != 0)
    return 2352;
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR("zh-Hant")) & 1) != 0)
    return 2563;
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR("zh-HK")) & 1) != 0)
    return 2566;
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR("ja")) & 1) != 0)
    return 2561;
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR("ko")) & 1) != 0)
    return 2368;
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("ru")))
    return 1282;
  return 513;
}

uint64_t WebCore::scheme(WebCore *this, NSURLProtectionSpace *a2)
{
  void *v2;

  v2 = (void *)-[WebCore authenticationMethod](this, "authenticationMethod");
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B38]) & 1) != 0)
    return 1;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B48]) & 1) != 0)
    return 2;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B50]) & 1) != 0)
    return 3;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B40]) & 1) != 0)
    return 4;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B58]) & 1) != 0)
    return 5;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B60]) & 1) != 0)
    return 6;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B30]) & 1) != 0)
    return 7;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B70]) & 1) != 0)
    return 8;
  if (objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0C92B68]))
    return 9;
  return 100;
}

uint64_t WebCore::copyTimingData@<X0>(WebCore *this@<X0>, NSURLSessionTaskMetrics *a2@<X1>, const WebCore::NetworkLoadMetrics *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v13;

  v7 = (void *)-[WebCore transactionMetrics](this, "transactionMetrics", a3);
  v8 = (void *)objc_msgSend(v7, "lastObject");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v7, "firstObject"), "fetchStartDate"), "timeIntervalSince1970");
  if (v9 == 0.0)
  {
    v11 = 0.0;
  }
  else
  {
    v13 = v9;
    WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v13);
    v11 = v10;
  }
  return WebCore::packageTimingData(a4, (void *)objc_msgSend(v8, "fetchStartDate"), (void *)objc_msgSend(v8, "domainLookupStartDate"), (void *)objc_msgSend(v8, "domainLookupEndDate"), (void *)objc_msgSend(v8, "connectStartDate"), (void *)objc_msgSend(v8, "secureConnectionStartDate"), (void *)objc_msgSend(v8, "connectEndDate"), (void *)objc_msgSend(v8, "requestStartDate"), v11, (void *)objc_msgSend(v8, "responseStartDate"), objc_msgSend(v8, "isReusedConnection"), (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "response"), "URL"), "scheme"), -[WebCore redirectCount](this, "redirectCount"), (BYTE2(a2[12].super.isa) & 0x40) != 0, BYTE2(a2[12].super.isa) >> 7);
}

uint64_t WebCore::packageTimingData(uint64_t *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, double a9, void *a10, char a11, void *a12, __int16 a13, char a14, char a15)
{
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t result;
  double v40;
  double v41;
  char v42;
  char v43;
  double v44;

  *a1 = 0;
  v24 = WTF::fastMalloc((WTF *)0x88);
  *(_OWORD *)(v24 + 16) = 0u;
  *(_DWORD *)v24 = 1;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 92) = 0u;
  *(_QWORD *)(v24 + 112) = -1;
  *(_QWORD *)(v24 + 120) = -1;
  *(_QWORD *)(v24 + 128) = 0;
  *a1 = v24;
  *(double *)(v24 + 8) = a9;
  objc_msgSend(a2, "timeIntervalSince1970");
  if (v25 == 0.0)
  {
    v26 = 0;
  }
  else
  {
    v44 = v25;
    WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v44);
  }
  *(_QWORD *)(v24 + 16) = v26;
  objc_msgSend(a3, "timeIntervalSince1970");
  if (v27 == 0.0)
  {
    v28 = 0;
  }
  else
  {
    v44 = v27;
    WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v44);
  }
  *(_QWORD *)(v24 + 24) = v28;
  objc_msgSend(a4, "timeIntervalSince1970");
  if (v29 == 0.0)
  {
    v30 = 0;
  }
  else
  {
    v44 = v29;
    WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v44);
  }
  *(_QWORD *)(v24 + 32) = v30;
  objc_msgSend(a5, "timeIntervalSince1970");
  if (v31 == 0.0)
  {
    v32 = 0;
  }
  else
  {
    v44 = v31;
    WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v44);
  }
  *(_QWORD *)(v24 + 40) = v32;
  if (a11 && objc_msgSend(a12, "isEqualToString:", CFSTR("https")))
  {
    *(_QWORD *)(v24 + 48) = 0xBFF0000000000000;
  }
  else
  {
    objc_msgSend(a6, "timeIntervalSince1970");
    if (v33 == 0.0)
    {
      v34 = 0;
    }
    else
    {
      v44 = v33;
      WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v44);
    }
    *(_QWORD *)(v24 + 48) = v34;
  }
  objc_msgSend(a7, "timeIntervalSince1970");
  if (v35 == 0.0)
  {
    v36 = 0;
  }
  else
  {
    v44 = v35;
    WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v44);
  }
  *(_QWORD *)(v24 + 56) = v36;
  objc_msgSend(a8, "timeIntervalSince1970");
  if (v37 == 0.0)
  {
    v38 = 0;
  }
  else
  {
    v44 = v37;
    WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v44);
  }
  *(_QWORD *)(v24 + 64) = v38;
  result = objc_msgSend(a10, "timeIntervalSince1970");
  if (v40 == 0.0)
  {
    v41 = 0.0;
  }
  else
  {
    v44 = v40;
    result = WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v44);
  }
  if (*(double *)(v24 + 64) >= v41)
    v41 = *(double *)(v24 + 64);
  *(double *)(v24 + 72) = v41;
  *(_WORD *)(v24 + 104) = a13;
  if (a14)
    v42 = 64;
  else
    v42 = 0;
  if (a15)
    v43 = 0x80;
  else
    v43 = 0;
  *(_BYTE *)(v24 + 106) = (v43 | v42) & 0xC0 | *(_BYTE *)(v24 + 106) & 0x3F;
  return result;
}

void sub_1941174A4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF *v2;
  _QWORD *v3;

  *v3 = 0;
  WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t WebCore::Cookie::Cookie(WebCore::Cookie *this, NSHTTPCookie *a2)
{
  id v4;
  double v5;
  char isKindOfClass;
  double v7;
  NSDate *v8;
  double v9;
  double v10;
  int64x2_t v11;
  NSArray *v12;
  unint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString *v17;
  NSString *v18;
  char v19;

  MEMORY[0x19AEA5508](this, -[NSHTTPCookie name](a2, "name"));
  MEMORY[0x19AEA5508]((char *)this + 8, -[NSHTTPCookie value](a2, "value"));
  MEMORY[0x19AEA5508]((char *)this + 16, -[NSHTTPCookie domain](a2, "domain"));
  MEMORY[0x19AEA5508]((char *)this + 24, -[NSHTTPCookie path](a2, "path", (char *)this + 16));
  v4 = -[NSDictionary objectForKeyedSubscript:](-[NSHTTPCookie properties](a2, "properties"), "objectForKeyedSubscript:", CFSTR("Created"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_opt_class(), isKindOfClass = objc_opt_isKindOfClass(), v5 = 0.0, (isKindOfClass & 1) != 0))
  {
    objc_msgSend(v4, "doubleValue", v5);
    v5 = (v7 + 978307200.0) * 1000.0;
  }
  *((double *)this + 4) = v5;
  v8 = -[NSHTTPCookie expiresDate](a2, "expiresDate");
  if (v8)
  {
    -[NSDate timeIntervalSince1970](v8, "timeIntervalSince1970");
    v10 = v9 * 1000.0;
    v11 = vdupq_n_s64(1uLL);
    *(double *)v11.i64 = v10;
  }
  else
  {
    v11 = 0uLL;
  }
  *(int64x2_t *)((char *)this + 40) = v11;
  *((_BYTE *)this + 56) = -[NSHTTPCookie isHTTPOnly](a2, "isHTTPOnly");
  *((_BYTE *)this + 57) = -[NSHTTPCookie isSecure](a2, "isSecure");
  *((_BYTE *)this + 58) = -[NSHTTPCookie isSessionOnly](a2, "isSessionOnly");
  MEMORY[0x19AEA5508]((char *)this + 64, -[NSHTTPCookie comment](a2, "comment"));
  MEMORY[0x19AEA52E0]((char *)this + 72, -[NSHTTPCookie commentURL](a2, "commentURL"));
  v12 = -[NSHTTPCookie portList](a2, "portList");
  result = -[NSArray count](v12, "count");
  v14 = result;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  if (result)
  {
    if (result >> 31)
    {
      __break(0xC471u);
      return result;
    }
    v15 = WTF::fastMalloc((WTF *)(2 * result));
    v16 = 0;
    *((_DWORD *)this + 30) = v14;
    *((_QWORD *)this + 14) = v15;
    do
    {
      *(_WORD *)(v15 + 2 * v16) = objc_msgSend(-[NSArray objectAtIndexedSubscript:](v12, "objectAtIndexedSubscript:", v16), "unsignedShortValue");
      *((_DWORD *)this + 31) = ++v16;
    }
    while (v14 != v16);
  }
  *((_BYTE *)this + 128) = 0;
  v17 = -[NSHTTPCookie sameSitePolicy](a2, "sameSitePolicy");
  v18 = v17;
  if (v17)
  {
    if (-[NSString isEqualToString:](v17, "isEqualToString:", *MEMORY[0x1E0C92AF0]))
    {
      v19 = 1;
    }
    else if (-[NSString isEqualToString:](v18, "isEqualToString:", *MEMORY[0x1E0C92B00]))
    {
      v19 = 2;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = 0;
  }
  *((_BYTE *)this + 128) = v19;
  return (unint64_t)this;
}

void sub_194117764(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, WTF::StringImpl **a10)
{
  uint64_t v10;
  WTF **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v16 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 112) = 0;
    *(_DWORD *)(v10 + 120) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = *v14;
  *v14 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *v13;
  *v13 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *v12;
  *v12 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *a9;
  *a9 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *a10;
  *a10 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(WTF::StringImpl **)v10;
  *(_QWORD *)v10 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::NetworkStorageSession::httpCookiesForURL(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  uint64_t Default;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, CFTypeRef);
  void *v23;
  uint64_t *v24;
  uint64_t v25;

  Default = a3;
  v25 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (*(_BYTE *)(a2 + 40))
    {
      __break(0xC471u);
      JUMPOUT(0x194117B0CLL);
    }
    Default = _CFHTTPCookieStorageGetDefault();
  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C08]), "_initWithCFHTTPCookieStorage:", Default);
  LOBYTE(v17) = 0;
  v18 = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v12 = a5[3];
    if (a5[3])
    {
      if (_MergedGlobals_136 == 1)
      {
        v13 = qword_1ECE81EE0;
      }
      else
      {
        v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", &stru_1E3487BC0);
        qword_1ECE81EE0 = v13;
        _MergedGlobals_136 = 1;
      }
      if (*a5)
        v14 = a6;
      else
        v14 = v13;
      v19[1] = CFSTR("_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation");
      v20 = v14;
      v19[0] = CFSTR("_kCFHTTPCookiePolicyPropertySiteForCookies");
      v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a5[1], v17);
      v15 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v20, v19, 2);
      v16 = v15;
      if (v15)
        CFRetain(v15);
    }
    else
    {
      v16 = 0;
    }
    v20 = MEMORY[0x1E0C809B0];
    v21 = 3321888768;
    v22 = ___ZZN7WebCoreL13cookiesForURLEP19NSHTTPCookieStorageP5NSURLS3_RKNSt3__18optionalINS_12SameSiteInfoEEEP8NSStringENK3__0cvU13block_pointerFvP7NSArrayEEv_block_invoke;
    v23 = &__block_descriptor_40_e8_32c118_ZTSKZN7WebCoreL13cookiesForURLEP19NSHTTPCookieStorageP5NSURLS3_RKNSt3__18optionalINS_12SameSiteInfoEEEP8NSStringE3__0_e17_v16__0__NSArray_8l;
    v24 = &v17;
    objc_msgSend(v11, "_getCookiesForURL:mainDocumentURL:partition:policyProperties:completionHandler:", a6, a4, 0, v16, objc_msgSend((id)objc_msgSend(&v20, "copy", v17), "autorelease"));
    if (v12 && v16)
      CFRelease(v16);
  }
  else
  {
    v20 = MEMORY[0x1E0C809B0];
    v21 = 3321888768;
    v22 = ___ZZN7WebCoreL13cookiesForURLEP19NSHTTPCookieStorageP5NSURLS3_RKNSt3__18optionalINS_12SameSiteInfoEEEP8NSStringENK3__0cvU13block_pointerFvP7NSArrayEEv_block_invoke;
    v23 = &__block_descriptor_40_e8_32c118_ZTSKZN7WebCoreL13cookiesForURLEP19NSHTTPCookieStorageP5NSURLS3_RKNSt3__18optionalINS_12SameSiteInfoEEEP8NSStringE3__0_e17_v16__0__NSArray_8l;
    v24 = &v17;
    objc_msgSend(v11, "_getCookiesForURL:mainDocumentURL:partition:completionHandler:", a6, a4, 0, objc_msgSend((id)objc_msgSend(&v20, "copy"), "autorelease"));
  }
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x194117AECLL);
  }
  *a1 = v17;
  if (v11)
    CFRelease(v11);
}

void sub_194117B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  const void *v10;

  if (a10 && cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::$_0::operator()(_QWORD *a1)
{
  _BYTE v3[24];

  *a1 = 0;
  a1[1] = 0;
  *(_QWORD *)((char *)a1 + 13) = 0;
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity((uint64_t)a1, 0x2Eu);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::accept_charsetAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::acceptAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::alignAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::alinkAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::axisAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::bgcolorAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::charsetAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::checkedAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::clearAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::codetypeAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::colorAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::compactAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::declareAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::deferAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::dirAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::directionAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::disabledAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::enctypeAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::faceAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::frameAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::hreflangAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::http_equivAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::langAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::languageAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::linkAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::mediaAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::methodAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::multipleAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::nohrefAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::noresizeAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::noshadeAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::nowrapAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::readonlyAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::relAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::revAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::rulesAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::scopeAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::scrollingAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::selectedAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::shapeAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::targetAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::textAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::typeAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::valignAttr + 24, (uint64_t)v3);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::valuetypeAttr + 24, (uint64_t)v3);
  return WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, WebCore::HTMLNames::vlinkAttr + 24, (uint64_t)v3);
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  unsigned int v26;

  v4 = result;
  v6 = *(_DWORD *)(result + 8);
  v7 = *(unsigned int *)(result + 12);
  if (20 * v7 >= 19 * (unint64_t)v6 || *(_BYTE *)(result + 20) && v6 <= 2 * (int)v7)
  {
    if (v6)
      v26 = 2 * v6;
    else
      v26 = 8;
    result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(result, v26);
    v6 = *(_DWORD *)(v4 + 8);
  }
  v8 = v6 - 1;
  v9 = *(_DWORD *)(v4 + 16);
  v10 = *(_DWORD **)a2;
  v11 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v12 = (v9 ^ (v11 >> 8)) & (v6 - 1);
  v13 = *(_QWORD *)v4;
  v14 = (_QWORD *)(*(_QWORD *)v4 + 8 * v12);
  v15 = (_DWORD *)*v14;
  if (*v14)
  {
    v17 = 0;
    v18 = v11 >> 8;
    do
    {
      result = v15[4];
      v19 = (v12 + v6 - ((v9 ^ (result >> 8)) & v8)) & v8;
      if (v17 > v19)
      {
        v14 = (_QWORD *)(v13 + 8 * v12);
        if (v17 >= 0x80)
          *(_BYTE *)(v4 + 20) = 1;
        *v14 = 0;
        v21 = *(_DWORD **)a2;
        if (*(_QWORD *)a2)
          *v21 += 2;
        *v14 = v21;
        v22 = (v12 + 1) & v8;
        v23 = *(_QWORD *)v4;
        while (1)
        {
          v24 = (_QWORD *)(v23 + 8 * v22);
          v25 = (_DWORD *)*v24;
          if (!*v24)
            break;
          ++v19;
          result = (v22 + v6 - ((v9 ^ (v25[4] >> 8)) & v8)) & v8;
          if (v19 > result)
          {
            *v24 = v15;
            v23 = *(_QWORD *)v4;
            v15 = v25;
            v19 = result;
          }
          v22 = (v22 + 1) & v8;
        }
        *v24 = v15;
        v6 = *(_DWORD *)(v4 + 8);
        goto LABEL_6;
      }
      if (result >> 8 == v18 && v15 == v10)
      {
        v16 = 0;
        v14 = (_QWORD *)(v13 + 8 * v12);
        goto LABEL_7;
      }
      v12 = ((_DWORD)v12 + 1) & v8;
      ++v17;
      v15 = *(_DWORD **)(v13 + 8 * v12);
    }
    while (v15);
    v14 = (_QWORD *)(v13 + 8 * v12);
    if (v17 >= 0x80)
      *(_BYTE *)(v4 + 20) = 1;
    if (v10)
      goto LABEL_4;
  }
  else
  {
LABEL_4:
    *v10 += 2;
  }
  *v14 = v10;
LABEL_6:
  ++*(_DWORD *)(v4 + 12);
  v13 = *(_QWORD *)v4;
  v16 = 1;
LABEL_7:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v13 + 8 * v6;
  *(_BYTE *)(a3 + 16) = v16;
  return result;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::AtomString>,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::AtomString,WTF::AtomString,WTF::AtomString const&>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v4 = *a3;
  if (*a3)
    *(_DWORD *)v4 += 2;
  result = *a1;
  *a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::CachedResourceRequestInitiatorTypes *WebCore::CachedResourceRequestInitiatorTypes::CachedResourceRequestInitiatorTypes(WebCore::CachedResourceRequestInitiatorTypes *this)
{
  uint64_t v3;

  WTF::AtomStringImpl::add();
  *(_QWORD *)this = v3;
  WTF::AtomStringImpl::add();
  *((_QWORD *)this + 1) = v3;
  WTF::AtomStringImpl::add();
  *((_QWORD *)this + 2) = v3;
  WTF::AtomStringImpl::add();
  *((_QWORD *)this + 3) = v3;
  WTF::AtomStringImpl::add();
  *((_QWORD *)this + 4) = v3;
  WTF::AtomStringImpl::add();
  *((_QWORD *)this + 5) = v3;
  return this;
}

WebCore::InitDataRegistry *WebCore::InitDataRegistry::InitDataRegistry(WebCore::InitDataRegistry *this)
{
  _QWORD *v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _QWORD *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  _BYTE v24[24];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  WTF::AtomStringImpl::add();
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E31F7600;
  v2[1] = WebCore::sanitizeKeyids;
  v21 = v2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E31F7628;
  v3[1] = WebCore::extractKeyIDsKeyids;
  v22 = v3;
  WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::InitDataRegistry::InitDataTypeCallbacks>((uint64_t)this, (WTF::StringImpl *)&v23, (uint64_t *)&v21, (uint64_t)v24);
  v5 = v22;
  v22 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  v6 = (uint64_t)v21;
  v21 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v23;
  v23 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::AtomStringImpl::add();
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E31F7600;
  v8[1] = WebCore::InitDataRegistry::sanitizeCenc;
  v21 = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E31F7628;
  v9[1] = WebCore::InitDataRegistry::extractKeyIDsCenc;
  v22 = v9;
  WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::InitDataRegistry::InitDataTypeCallbacks>((uint64_t)this, (WTF::StringImpl *)&v23, (uint64_t *)&v21, (uint64_t)v24);
  v11 = v22;
  v22 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v12 = (uint64_t)v21;
  v21 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::AtomStringImpl::add();
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = off_1E31F7600;
  v14[1] = WebCore::sanitizeWebM;
  v21 = v14;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = off_1E31F7628;
  v15[1] = WebCore::extractKeyIDsWebM;
  v22 = v15;
  WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::InitDataRegistry::InitDataTypeCallbacks>((uint64_t)this, (WTF::StringImpl *)&v23, (uint64_t *)&v21, (uint64_t)v24);
  v17 = v22;
  v22 = 0;
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  v18 = (uint64_t)v21;
  v21 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  return this;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add(uint64_t result, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  WTF::StringImpl **v20;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  unsigned int v26;

  v5 = result;
  v7 = *(_DWORD *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  if (20 * v6 >= 19 * (unint64_t)v7 || *(_BYTE *)(a2 + 20) && v7 <= 2 * (int)v6)
  {
    if (v7)
      v26 = 2 * v7;
    else
      v26 = 8;
    result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a2, v26);
    v7 = *(_DWORD *)(a2 + 8);
  }
  v8 = v7 - 1;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  v11 = (v9 ^ (v10 >> 8)) & (v7 - 1);
  v12 = *(_QWORD *)a2;
  v13 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8 * v11);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = v10 >> 8;
    while (1)
    {
      v17 = *((_DWORD *)v14 + 4);
      v18 = (v11 + v7 - ((v9 ^ (v17 >> 8)) & v8)) & v8;
      if (v15 > v18)
        break;
      if (v14 == *(WTF::StringImpl **)a3 && v17 >> 8 == v16)
      {
        v19 = 0;
        v13 = (WTF::StringImpl **)(v12 + 8 * v11);
        goto LABEL_13;
      }
      v11 = ((_DWORD)v11 + 1) & v8;
      ++v15;
      v14 = *(WTF::StringImpl **)(v12 + 8 * v11);
      if (!v14)
      {
        v13 = (WTF::StringImpl **)(v12 + 8 * v11);
        if (v15 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        goto LABEL_11;
      }
    }
    v13 = (WTF::StringImpl **)(v12 + 8 * v11);
    if (v15 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    *v13 = 0;
    WebCore::ContentType::~ContentType(v13, (WTF::StringImpl *)a2);
    *v13 = 0;
    result = (uint64_t)WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::String>(v20, a3, (WTF::StringImpl **)a3);
    v21 = (v11 + 1) & v8;
    v22 = *(_QWORD *)a2;
    while (1)
    {
      v23 = (WTF::StringImpl **)(v22 + 8 * v21);
      v24 = *v23;
      if (!*v23)
        break;
      ++v18;
      v25 = (v21 + v7 - ((v9 ^ (*((_DWORD *)v24 + 4) >> 8)) & v8)) & v8;
      if (v18 > v25)
      {
        *v23 = v14;
        v22 = *(_QWORD *)a2;
        v14 = v24;
        v18 = v25;
      }
      v21 = (v21 + 1) & v8;
    }
    *v23 = v14;
  }
  else
  {
LABEL_11:
    result = (uint64_t)WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::String>(v13, a3, (WTF::StringImpl **)a3);
  }
  v7 = *(_DWORD *)(a2 + 8);
  ++*(_DWORD *)(a2 + 12);
  v12 = *(_QWORD *)a2;
  v19 = 1;
LABEL_13:
  *(_QWORD *)v5 = v13;
  *(_QWORD *)(v5 + 8) = v12 + 8 * v7;
  *(_BYTE *)(v5 + 16) = v19;
  return result;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::String>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v4 = *a3;
  *a3 = 0;
  result = *a1;
  *a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = WTF::fastZeroedMalloc((WTF *)(8 * a2));
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v9 = (WTF::StringImpl **)v5;
    do
    {
      if (*v9)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, v9);
      WebCore::ContentType::~ContentType(v9++, v8);
      --v4;
    }
    while (v4);
    return WTF::fastFree(v5, v8);
  }
  if (v5)
    return WTF::fastFree(v5, v8);
  return result;
}

void WebCore::ContentType::~ContentType(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  int v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  unsigned int v13;
  unsigned int v14;

  v3 = *((_DWORD *)a1 + 2);
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *a2;
  v7 = (v5 ^ (*((_DWORD *)*a2 + 4) >> 8)) & (v3 - 1);
  v8 = *a1;
  v9 = (WTF::StringImpl *)(*a1 + 8 * v7);
  v10 = *(WTF::StringImpl **)v9;
  if (*(_QWORD *)v9)
  {
    v13 = 0;
    do
    {
      v14 = (v7 + v3 - ((v5 ^ (*((_DWORD *)v10 + 4) >> 8)) & v4)) & v4;
      if (v13 > v14)
      {
        std::swap[abi:sn180100]<WTF::AtomString>(a2, v9);
        v8 = *a1;
        v13 = v14;
      }
      v7 = (v7 + 1) & v4;
      ++v13;
      v9 = (WTF::StringImpl *)(v8 + 8 * v7);
      v10 = *(WTF::StringImpl **)v9;
    }
    while (*(_QWORD *)v9);
    v6 = *a2;
  }
  *a2 = 0;
  result = *(WTF::StringImpl **)v9;
  *(_QWORD *)v9 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::PtrHashBase<WTF::AtomString *,false>::hash(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeFontFaceFontFamily@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  WTF::StringImpl *v10;

  result = WebCore::CSSPropertyParserHelpers::consumeFamilyNameRaw(this, a2, (WTF::AtomString *)&v10);
  if (!v10)
    goto LABEL_14;
  {
    WebCore::CSSValuePool::singleton(void)::pool = 0;
    unk_1ECE88B90 = 0;
    qword_1ECE88B98 = 0;
  }
  WebCore::CSSValuePool::createFontFamilyValue((WebCore::CSSValuePool *)&WebCore::CSSValuePool::singleton(void)::pool, &v10, &v9);
  v7 = v9;
  result = v10;
  v10 = 0;
  if (!result)
    goto LABEL_7;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_7:
    if (v7)
      goto LABEL_8;
LABEL_14:
    *a3 = 0;
    return result;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (!v7)
    goto LABEL_14;
LABEL_8:
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    result = (WTF::StringImpl *)WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)result = 2;
    v8 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
    *((_DWORD *)result + 2) = 1;
    *((_WORD *)result + 2) = -9728;
    *((_BYTE *)result + 6) = (v8 | 0x10000u) >> 16;
    *((_QWORD *)result + 2) = v7;
    *a3 = result;
  }
  else
  {
    *a3 = 0;
    if (*v7 == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
    else
      *v7 -= 2;
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeFontFamily@<X0>(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v5;
  WebCore::CSSParserTokenRange *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  char v15;
  unsigned int v16;
  uint64_t *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *result;
  WTF *v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  unsigned int v41;
  _BYTE v42[32];
  WTF *v43;
  uint64_t v44;
  _BYTE v45[32];
  WTF::StringImpl *v46;

  v43 = (WTF *)v45;
  v44 = 4;
  while (1)
  {
    v5 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)116,(WebCore::CSSValueID)117,(WebCore::CSSValueID)118,(WebCore::CSSValueID)119,(WebCore::CSSValueID)120,(WebCore::CSSValueID)121,(WebCore::CSSValueID)122,(WebCore::CSSValueID)123>((uint64_t)this);
    if (v5 >= 0x10000)
    {
      if ((unsigned __int16)v5 != 123)
      {
        if ((unsigned __int16)v5 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x194118EACLL);
        }
        v7 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[4 * (unsigned __int16)v5 + 3088];
        *(_DWORD *)v7 += 2;
        goto LABEL_10;
      }
      {
        WebCore::CSSValuePool::singleton(void)::pool = 0;
        unk_1ECE88B90 = 0;
        qword_1ECE88B98 = 0;
      }
      {
        if (qword_1EE2EFDB8)
          goto LABEL_61;
      }
      else
      {
        bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
      }
      WTF::AtomString::AtomString(&v39, (uint64_t)"system-ui", 0xAuLL);
      v35 = v39;
      v39 = 0;
      v36 = (WTF::StringImpl *)qword_1EE2EFDB8;
      qword_1EE2EFDB8 = (uint64_t)v35;
      if (v36)
      {
        v37 = *(_DWORD *)v36 - 2;
        if (*(_DWORD *)v36 != 2)
        {
LABEL_78:
          *(_DWORD *)v36 = v37;
          goto LABEL_61;
        }
        WTF::StringImpl::destroy(v36, v34);
        v36 = v39;
        v39 = 0;
        if (v36)
        {
          v37 = *(_DWORD *)v36 - 2;
          if (*(_DWORD *)v36 != 2)
            goto LABEL_78;
          WTF::StringImpl::destroy(v36, v38);
        }
      }
LABEL_61:
      WebCore::CSSValuePool::createFontFamilyValue((WebCore::CSSValuePool *)&WebCore::CSSValuePool::singleton(void)::pool, (WTF::StringImpl **)&qword_1EE2EFDB8, &v39);
      v7 = v39;
      if (v39)
        goto LABEL_10;
    }
    WebCore::CSSPropertyParserHelpers::consumeFamilyNameRaw((WTF::StringImpl *)this, v6, (WTF::AtomString *)&v39);
    if (!v39)
      goto LABEL_34;
    {
      WebCore::CSSValuePool::singleton(void)::pool = 0;
      unk_1ECE88B90 = 0;
      qword_1ECE88B98 = 0;
    }
    WebCore::CSSValuePool::createFontFamilyValue((WebCore::CSSValuePool *)&WebCore::CSSValuePool::singleton(void)::pool, &v39, &v46);
    v7 = v46;
    v8 = v39;
    v39 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (!v7)
    {
LABEL_34:
      v20 = 0;
      goto LABEL_35;
    }
LABEL_10:
    v39 = v7;
    LODWORD(v9) = HIDWORD(v44);
    if (HIDWORD(v44) == (_DWORD)v44)
    {
      v17 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v43, HIDWORD(v44) + 1, (unint64_t)&v39);
      v9 = HIDWORD(v44);
      v18 = v43;
      v19 = *v17;
      *v17 = 0;
      *((_QWORD *)v18 + v9) = v19;
    }
    else
    {
      v39 = 0;
      *((_QWORD *)v43 + HIDWORD(v44)) = v7;
    }
    HIDWORD(v44) = v9 + 1;
    v10 = v39;
    v39 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v6);
      else
        *(_DWORD *)v10 -= 2;
    }
    v12 = *this;
    v11 = this[1];
    if (*this >= v11)
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v12 & 0x3F) != 0x15)
      break;
    v13 = *this;
    if (*this == v11)
    {
      v15 = 1;
      {
        v14 = v11;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v14 = *this;
      }
    }
    else
    {
      v14 = (__int128 *)((char *)v13 + 24);
      *this = (__int128 *)((char *)v13 + 24);
    }
    while (1)
    {
      if (v14 < v11 || (v15 & 1) != 0)
      {
        if (v14 >= v11)
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v16 = *(_DWORD *)v14;
      }
      else
      {
        v16 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
        v15 = 1;
      }
      if ((v16 & 0x3F) != 0x10)
        break;
      v14 = (__int128 *)((char *)*this + 24);
      *this = v14;
    }
  }
  v39 = (WTF::StringImpl *)v42;
  v40 = 4;
  v26 = v43;
  if (v43 == (WTF *)v45)
  {
    v27 = HIDWORD(v44);
    memcpy(v42, v45, 8 * HIDWORD(v44));
  }
  else
  {
    v43 = (WTF *)v45;
    v39 = v26;
    v33 = v44;
    v27 = HIDWORD(v44);
    LODWORD(v44) = 4;
    v40 = v33;
  }
  HIDWORD(v44) = 0;
  v41 = v27;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v39, (uint64_t *)&v46);
  v20 = (uint64_t)v46;
  if (v41)
  {
    v30 = v39;
    v31 = 8 * v41;
    do
    {
      v32 = *(_DWORD **)v30;
      *(_QWORD *)v30 = 0;
      if (v32)
      {
        if (*v32 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v6);
        else
          *v32 -= 2;
      }
      v30 = (WTF::StringImpl *)((char *)v30 + 8);
      v31 -= 8;
    }
    while (v31);
  }
  v28 = v39;
  if (v42 != (_BYTE *)v39 && v39 != 0)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree(v28, v6);
  }
LABEL_35:
  if (HIDWORD(v44))
  {
    v23 = v43;
    v24 = 8 * HIDWORD(v44);
    do
    {
      v25 = *(_DWORD **)v23;
      *(_QWORD *)v23 = 0;
      if (v25)
      {
        if (*v25 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v6);
        else
          *v25 -= 2;
      }
      v23 = (WTF *)((char *)v23 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  result = v43;
  if (v45 != (_BYTE *)v43 && v43 != 0)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    result = (WTF *)WTF::fastFree(result, v6);
  }
  *a2 = v20;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)116,(WebCore::CSSValueID)117,(WebCore::CSSValueID)118,(WebCore::CSSValueID)119,(WebCore::CSSValueID)120,(WebCore::CSSValueID)121,(WebCore::CSSValueID)122,(WebCore::CSSValueID)123>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  if ((unsigned __int16)v9 - 116 > 7)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v7 = v15 & 0xFF00;
    v5 = v15;
    v6 = 0x10000;
  }
  return v6 | v5 | v7;
}

WTF::StringImpl *WebCore::CSSValuePool::createFontFamilyValue@<X0>(WebCore::CSSValuePool *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  WTF::StringImpl **v27;

  v6 = (uint64_t *)((char *)this + 16);
  v5 = *((_QWORD *)this + 2);
  if (v5
    && (*(_DWORD *)(v5 - 12) < 0x80u
     || (v27 = (WTF::StringImpl **)WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::random((_QWORD *)this + 2),
         WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::remove(v6, v27), (v5 = *v6) != 0))|| (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(v6, 0), (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *a2;
  v10 = *((_DWORD *)*a2 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v12 = v10 & v7;
    v13 = (WTF::StringImpl *)(v5 + 16 * v12);
    result = *(WTF::StringImpl **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      v8 = (WTF::StringImpl *)(v5 + 16 * v12);
      goto LABEL_10;
    }
    if (!result)
      break;
    if (result == v9)
      goto LABEL_28;
LABEL_10:
    v10 = i + v12;
  }
  if (v8)
  {
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    --*(_DWORD *)(*v6 - 16);
    v9 = *a2;
    v13 = v8;
  }
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)v13 = v9;
  v15 = *a2;
  if (v15)
    *(_DWORD *)v15 += 2;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 2;
  v18 = *(_BYTE *)(v17 + 6);
  *(_WORD *)(v17 + 4) = 77;
  *(_BYTE *)(v17 + 6) = v18 & 0xFC;
  *(_QWORD *)(v17 + 8) = v15;
  if (v15)
  {
    v19 = *(_DWORD *)v15;
    *(_DWORD *)v15 += 2;
    if (v19)
      *(_DWORD *)v15 = v19;
    else
      WTF::StringImpl::destroy(v15, v16);
  }
  result = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v17;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_27:
      result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(v6, v13);
      v13 = result;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_27;
  }
LABEL_28:
  v26 = (_DWORD *)*((_QWORD *)v13 + 1);
  *v26 += 2;
  *a3 = v26;
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeFamilyNameRaw@<X0>(WTF::StringImpl *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::AtomString *a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = *(__int128 **)this;
  v5 = (__int128 *)*((_QWORD *)this + 1);
  if (*(_QWORD *)this >= (unint64_t)v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v4 = *(__int128 **)this;
    }
  }
  else
  {
    v6 = *(__int128 **)this;
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0x1C)
  {
    if (v4 == v5)
    {
      v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v8 = 1;
      {
        v7 = v5;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v7 = *(__int128 **)this;
      }
    }
    else
    {
      v7 = (__int128 *)((char *)v4 + 24);
      *(_QWORD *)this = (char *)v4 + 24;
    }
    while (1)
    {
      if (v7 < v5 || (v8 & 1) != 0)
      {
        if (v7 >= v5)
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v9 = *(_DWORD *)v7;
      }
      else
      {
        v9 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
        v8 = 1;
      }
      if ((v9 & 0x3F) != 0x10)
        break;
      v7 = (__int128 *)(*(_QWORD *)this + 24);
      *(_QWORD *)this = v7;
    }
    if ((*((_BYTE *)v4 + 2) & 0x40) != 0)
      this = (WTF::StringImpl *)WTF::AtomStringImpl::add();
    else
      this = (WTF::StringImpl *)WTF::AtomStringImpl::add();
    v10 = v11;
  }
  else
  {
    if (v4 >= v5)
    {
      v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_BYTE *)v4 & 0x3F) == 0)
      return WebCore::CSSPropertyParserHelpers::concatenateFamilyName((__int128 **)this, a2, a3);
    v10 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v10 += 2;
  }
  *(_QWORD *)a3 = v10;
  return this;
}

uint64_t *WebCore::nameString(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl *v10;

  if (a1 > 0x48D)
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  {
    v9 = a1;
    bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    a1 = v9;
  }
  v1 = &WebCore::nameString(WebCore::CSSValueID)::strings[a1];
  if (!*v1)
  {
    v3 = a1;
    WTF::AtomString::AtomString(&v10, (uint64_t)*(&WebCore::valueList + 2 * a1), (unint64_t)*(&WebCore::valueList + 2 * a1 + 1));
    v5 = v10;
    v10 = 0;
    v6 = (WTF::StringImpl *)WebCore::nameString(WebCore::CSSValueID)::strings[v3];
    WebCore::nameString(WebCore::CSSValueID)::strings[v3] = (uint64_t)v5;
    if (v6)
    {
      v7 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        v6 = v10;
        v10 = 0;
        if (!v6)
          return v1;
        v7 = *(_DWORD *)v6 - 2;
        if (*(_DWORD *)v6 == 2)
        {
          WTF::StringImpl::destroy(v6, v8);
          return v1;
        }
      }
      *(_DWORD *)v6 = v7;
    }
  }
  return v1;
}

uint64_t *WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::InitDataRegistry::InitDataTypeCallbacks>@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t *result;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v29;
  uint64_t *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  unsigned int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  WTF::StringImpl *v42[3];

  v9 = *(unsigned int *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 12);
  if (10 * v8 >= (unint64_t)(9 * v9)
    || (v9 <= 2 * (int)v8 ? (v10 = *(_BYTE *)(a1 + 20) == 0) : (v10 = 1), !v10))
  {
    if ((_DWORD)v9)
      v29 = 2 * v9;
    else
      v29 = 8;
    WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v29);
    LODWORD(v9) = *(_DWORD *)(a1 + 8);
  }
  v11 = v9 - 1;
  v12 = *(_DWORD *)(a1 + 16);
  v13 = *(WTF::StringImpl **)a2;
  v14 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v15 = (v12 ^ (v14 >> 8)) & (v9 - 1);
  v16 = *(_QWORD *)a1;
  v17 = *(_QWORD *)a1 + 24 * v15;
  v18 = *(WTF::StringImpl **)v17;
  if (*(_QWORD *)v17)
  {
    v22 = v14 >> 8;
    if (v18 == v13 && *((_DWORD *)v18 + 4) >> 8 == v22)
    {
LABEL_22:
      *(_QWORD *)a4 = v17;
      *(_QWORD *)(a4 + 8) = v16 + 24 * v9;
      *(_BYTE *)(a4 + 16) = 0;
      return WebCore::InitDataRegistry::InitDataTypeCallbacks::operator=((uint64_t *)(v17 + 8), a3);
    }
    v24 = 1;
    while (1)
    {
      v15 = (v15 + 1) & v11;
      v17 = v16 + 24 * v15;
      v25 = *(WTF::StringImpl **)v17;
      if (!*(_QWORD *)v17)
        break;
      v26 = *((_DWORD *)v25 + 4);
      if (v24 > ((v15 + (_DWORD)v9 - ((v12 ^ (v26 >> 8)) & v11)) & v11))
      {
        v41 = (v15 + v9 - ((v12 ^ (v26 >> 8)) & v11)) & v11;
        if (v24 >= 0x80)
          *(_BYTE *)(a1 + 20) = 1;
        *(_QWORD *)v17 = 0;
        v42[0] = v25;
        v30 = (uint64_t *)(v16 + 24 * v15);
        v31 = (WTF::StringImpl *)v30[1];
        *++v30 = 0;
        v42[1] = v31;
        v32 = (WTF::StringImpl *)v30[1];
        v30[1] = 0;
        v42[2] = v32;
        v33 = (WTF::StringImpl **)WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>::~KeyValuePair(v17, a2);
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        WTF::GenericHashTraits<WTF::AtomString>::assignToEmpty<WTF::AtomString,WTF::AtomString const&>(v33, a2);
        WebCore::InitDataRegistry::InitDataTypeCallbacks::operator=(v30, a3);
        v34 = (v15 + 1) & v11;
        v35 = *(_QWORD *)a1;
        v36 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v34);
        v37 = *(_QWORD *)v36;
        if (*(_QWORD *)v36)
        {
          v38 = v41;
          do
          {
            ++v38;
            v39 = (v34 + v9 - ((v12 ^ (*(_DWORD *)(v37 + 16) >> 8)) & v11)) & v11;
            if (v38 > v39)
            {
              std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>(v42, v36);
              v35 = *(_QWORD *)a1;
              v38 = v39;
            }
            v34 = (v34 + 1) & v11;
            v36 = (WTF::StringImpl *)(v35 + 24 * v34);
            v37 = *(_QWORD *)v36;
          }
          while (*(_QWORD *)v36);
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>((uint64_t)v36, (WTF::StringImpl *)v42);
        result = (uint64_t *)WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>::~KeyValuePair((uint64_t)v42, v40);
        goto LABEL_9;
      }
      v27 = v26 >> 8;
      ++v24;
      if (v25 == v13 && v27 == v22)
        goto LABEL_22;
    }
    if (v24 >= 0x80)
      *(_BYTE *)(a1 + 20) = 1;
  }
  WTF::GenericHashTraits<WTF::AtomString>::assignToEmpty<WTF::AtomString,WTF::AtomString const&>((WTF::StringImpl **)v17, a2);
  result = WebCore::InitDataRegistry::InitDataTypeCallbacks::operator=((uint64_t *)(v16 + 24 * v15 + 8), a3);
LABEL_9:
  v20 = *(_DWORD *)(a1 + 8);
  ++*(_DWORD *)(a1 + 12);
  v21 = *(_QWORD *)a1 + 24 * v20;
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v21;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<WTF::AtomString>::assignToEmpty<WTF::AtomString,WTF::AtomString const&>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v3 += 2;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::InitDataRegistry::InitDataTypeCallbacks::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a2[1];
  a2[1] = 0;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::concatenateFamilyName@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::AtomString *a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  char v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  int v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  char v27;
  char v28;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v6 = *this;
  v5 = this[1];
  if (*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v7 = 0;
  while (1)
  {
    v8 = *this;
    if (*this >= v5)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v8 & 0x3F) != 0)
      break;
    v9 = v26;
    if (v26)
    {
      v28 = 32;
      if (v25 && (v26 < *((_DWORD *)v25 + 1) ? (v14 = v24 == 0) : (v14 = 0), v14))
      {
        v19 = *((_DWORD *)v25 + 4);
        v20 = *((_QWORD *)v25 + 1);
        ++v26;
        if ((v19 & 4) != 0)
          *(_BYTE *)(v20 + v9) = 32;
        else
          *(_WORD *)(v20 + 2 * v9) = 32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      v5 = this[1];
      v7 = 1;
    }
    v10 = *this;
    if (*this == v5)
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v12 = 1;
      {
        v11 = v5;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v11 = *this;
      }
    }
    else
    {
      v11 = (__int128 *)((char *)v10 + 24);
      *this = (__int128 *)((char *)v10 + 24);
    }
    while (1)
    {
      if (v11 < v5 || (v12 & 1) != 0)
      {
        if (v11 >= v5)
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v13 = *(_DWORD *)v11;
      }
      else
      {
        v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
        v12 = 1;
      }
      if ((v13 & 0x3F) != 0x10)
        break;
      v11 = (__int128 *)((char *)*this + 24);
      *this = v11;
    }
    if ((*((_BYTE *)v10 + 2) & 0x40) != 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    v5 = this[1];
  }
  if ((v7 & 1) != 0)
    goto LABEL_31;
  v15 = *(_DWORD *)v6;
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v21 = *((_DWORD *)v6 + 4);
    if (v21 < 0)
    {
      v21 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((v15 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v21;
    }
    if ((unsigned __int16)v21 - 1 < 5 || (unsigned __int16)v21 == 395)
      goto LABEL_48;
    v15 = *(_DWORD *)v6;
  }
  if ((v15 & 0x3F) != 0)
    goto LABEL_29;
  v23 = *((_DWORD *)v6 + 4);
  if (v23 < 0)
  {
    v23 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((v15 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v23;
  }
  if ((unsigned __int16)(v23 - 116) > 7u)
LABEL_29:
    v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  else
    v16 = off_1E339DDA8[(__int16)(v23 - 116)];
  if (!*v16)
  {
LABEL_31:
    WTF::StringBuilder::toAtomString((WTF::AtomString *)&v24, a3);
    goto LABEL_32;
  }
LABEL_48:
  v22 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v22 += 2;
  *(_QWORD *)a3 = v22;
LABEL_32:
  v17 = v25;
  v25 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::AtomString *WTF::StringBuilder::toAtomString@<X0>(WTF::AtomString *this@<X0>, WTF::AtomString *a2@<X8>)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;

  if (!*((_DWORD *)this + 4))
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
    if (*MEMORY[0x1E0CBF3B8])
      *v6 += 2;
    goto LABEL_13;
  }
  v3 = (uint64_t)this;
  if (WTF::StringBuilder::shouldShrinkToFit(this))
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v4 = *(WTF::AtomStringImpl **)(v3 + 8);
    }
    else
    {
      v4 = *(WTF::AtomStringImpl **)v3;
      if (!*(_QWORD *)v3)
        goto LABEL_9;
    }
    if ((*((_BYTE *)v4 + 16) & 4) == 0)
    {
      v7 = *(_DWORD *)(v3 + 16);
      if (v7 && v7 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194119EF8);
      }
      this = (WTF::AtomString *)WTF::AtomStringImpl::add();
      goto LABEL_12;
    }
LABEL_9:
    v5 = *(_DWORD *)(v3 + 16);
    if (v5 && v5 < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194119EB8);
    }
    this = (WTF::AtomString *)WTF::AtomStringImpl::add();
LABEL_12:
    v6 = v8;
LABEL_13:
    *(_QWORD *)a2 = v6;
    return this;
  }
  if (*(_QWORD *)v3)
    return WTF::AtomString::AtomString(a2, (WTF::AtomStringImpl **)v3);
  if ((*(_DWORD *)(v3 + 16) & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194119E98);
  }
  return (WTF::AtomString *)WTF::AtomStringImpl::add(*(WTF::AtomStringImpl **)(v3 + 8), 0);
}

uint64_t WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  WTF::StringImpl *v10;
  WTF *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = 24 * a2;
  v7 = (void *)WTF::fastMalloc((WTF *)v6);
  v8 = (uint64_t)v7;
  if (a2)
    bzero(v7, v6);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v8);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = v5;
    do
    {
      if (*(_QWORD *)v11)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, (uint64_t)v11);
      WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>::~KeyValuePair((uint64_t)v11, v10);
      v11 = (WTF *)((char *)v11 + 24);
      --v4;
    }
    while (v4);
    return WTF::fastFree(v5, v10);
  }
  if (v5)
    return WTF::fastFree(v5, v10);
  return result;
}

uint64_t WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::ResourceResponseBase::source(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  return (*((unsigned __int16 *)this + 116) >> 10) & 0xF;
}

uint64_t WebCore::DisplayList::FillCompositedRect::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 248))(a2, a1, a1 + 16, *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25));
}

uint64_t WebCore::NetworkStorageSession::trackingPreventionDebugLoggingEnabled(WebCore::NetworkStorageSession *this)
{
  return *((unsigned __int8 *)this + 137);
}

uint64_t WebCore::RenderIFrame::shouldComputeSizeAsReplaced(WebCore::RenderIFrame *this)
{
  return 1;
}

uint64_t WebCore::JSUserMessageHandlersNamespace::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return WebCore::JSUserMessageHandlersNamespace::legacyPlatformObjectGetOwnProperty(a1, a2, a3, a4, 0);
}

CFIndex WebCore::FragmentedSharedBuffer::create@<X0>(WebCore::FragmentedSharedBuffer *this@<X0>, CFIndex *a2@<X8>)
{
  CFIndex v5;
  CFIndex result;

  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v5 + 24;
  *(_QWORD *)(v5 + 16) = 1;
  *(_BYTE *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  result = WebCore::FragmentedSharedBuffer::append(v5, this);
  *a2 = v5;
  return result;
}

{
  CFIndex v5;
  CFIndex result;

  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v5 + 24;
  *(_QWORD *)(v5 + 16) = 1;
  *(_BYTE *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  result = WebCore::FragmentedSharedBuffer::append(v5, this);
  *a2 = v5;
  return result;
}

CFIndex WebCore::FragmentedSharedBuffer::append(CFIndex this, CFTypeRef cf)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  char v18;

  if (cf)
  {
    v3 = this;
    v4 = (_QWORD *)(this + 8);
    v5 = *(_QWORD *)(this + 48);
    v16 = v5;
    CFRetain(cf);
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = cf;
    *(_DWORD *)(v6 + 24) = 1;
    v17 = (WTF *)v6;
    v8 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
    {
      WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>((uint64_t)v4, (unint64_t)&v16);
    }
    else
    {
      v9 = (_QWORD *)(*v4 + 16 * v8);
      *v9 = v5;
      v10 = v9 + 1;
      do
        v11 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v11 + 1, (unsigned int *)v6));
      *v10 = v6;
      ++*(_DWORD *)(v3 + 20);
    }
    v12 = (unsigned int *)v17;
    v17 = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        v15 = v12[6];
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_9[v15])(&v18, v12 + 2);
        v12[6] = -1;
        WTF::fastFree((WTF *)v12, v7);
      }
    }
    this = CFDataGetLength((CFDataRef)cf);
    *(_QWORD *)(v3 + 48) += this;
  }
  return this;
}

void WebCore::CachedRawResource::updateBuffer(WebCore::CachedRawResource *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  char v18;
  void *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  void *v25;
  _DWORD *v26;
  const WebCore::SharedBuffer *v27;
  WTF::StringImpl *v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  WTF *v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const WebCore::SharedBuffer *v56;
  char v57;
  const WebCore::FragmentedSharedBuffer *v58;
  unsigned int *v59;

  if (!*((_BYTE *)this + 697))
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
      goto LABEL_59;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = this;
    v30 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (!v30)
      goto LABEL_59;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, a2);
    }
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
LABEL_59:
      do
        v5 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v5 + 1, (unsigned int *)v4));
      v59 = (unsigned int *)v4;
      v6 = *(_QWORD *)(v4 + 8);
      if (v6)
      {
        v56 = (const WebCore::SharedBuffer *)&v59;
        ++*(_DWORD *)(v6 + 548);
        v7 = *(_QWORD *)(v6 + 488);
        if (v7)
        {
          if (*(_QWORD *)(v7 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v56, (uint64_t)v46);
        }
      }
    }
    else
    {
      v59 = 0;
    }
    do
      v8 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v8 + 1, (unsigned int *)a2));
    v58 = a2;
    do
      v9 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v9 + 1, (unsigned int *)a2));
    v10 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = a2;
    if (v10)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v10);
        v33 = *(unsigned int *)(v10 + 20);
        if ((_DWORD)v33)
        {
          v34 = *(_QWORD *)(v10 + 8);
          v35 = v34 + 16 * v33;
          do
          {
            v36 = *(unsigned int **)(v34 + 8);
            *(_QWORD *)(v34 + 8) = 0;
            if (v36)
            {
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
              {
                v43 = v10;
                atomic_store(1u, v36);
                v44 = v36;
                v45 = v36[6];
                if ((_DWORD)v45 != -1)
                  ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v45])(v46, v44 + 2);
                v44[6] = -1;
                WTF::fastFree((WTF *)v44, a2);
                v10 = v43;
              }
            }
            v34 += 16;
          }
          while (v34 != v35);
        }
        v39 = *(WTF **)(v10 + 8);
        if ((WTF *)(v10 + 24) != v39 && v39 != 0)
        {
          *(_QWORD *)(v10 + 8) = 0;
          *(_DWORD *)(v10 + 16) = 0;
          v42 = v10;
          WTF::fastFree(v39, a2);
          v10 = v42;
        }
        WTF::fastFree((WTF *)v10, a2);
      }
    }
    v13 = *((_QWORD *)this + 50);
    if (v13)
      v14 = *(_DWORD *)(v13 + 400);
    else
      v14 = 0;
    v15 = *((_QWORD *)a2 + 6);
    if (v15 > v14)
    {
      v16 = v14;
      do
      {
        WebCore::FragmentedSharedBuffer::getSomeData(a2, v16, v46);
        v17 = v47;
        v18 = *((_BYTE *)this + 697);
        *((_BYTE *)this + 697) = 1;
        WebCore::SharedBufferDataView::createSharedBuffer((unsigned int **)v46, (uint64_t *)&v56);
        WebCore::CachedRawResource::notifyClientsDataWasReceived(this, v56);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v56, v19);
        *((_BYTE *)this + 697) = v18;
        v21 = (unsigned int *)v46[0];
        v46[0] = 0;
        if (v21)
        {
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v21);
            v41 = v21[6];
            if ((_DWORD)v41 != -1)
              ((void (*)(const WebCore::SharedBuffer **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v41])(&v56, v21 + 2);
            v21[6] = -1;
            WTF::fastFree((WTF *)v21, v20);
          }
        }
        v15 = *((_QWORD *)a2 + 6);
        v14 += v17;
        v16 = v14;
      }
      while (v15 > v14);
    }
    WebCore::CachedResource::setEncodedSize(this, v15);
    if ((*((_BYTE *)this + 130) & 8) != 0)
    {
      v26 = (_DWORD *)*((_QWORD *)this + 48);
      if (v26)
      {
        ++v26[4];
        *(_DWORD *)((char *)v26 + 1090) |= 8u;
        WebCore::SharedBufferBuilder::reset((WebCore::SharedBufferBuilder *)(v26 + 184), v24);
        if (v26[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
        else
          --v26[4];
      }
      WebCore::CachedRawResource::clear(this, v24);
    }
    if (*((_BYTE *)this + 688))
    {
      v27 = (const WebCore::SharedBuffer *)*((_QWORD *)this + 85);
      *((_QWORD *)this + 85) = 0;
      v56 = v27;
      v57 = 1;
      std::__optional_destruct_base<WebCore::CachedRawResource::DelayedFinishLoading,false>::reset[abi:sn180100]((uint64_t)this + 680, v24);
      v52 = 0;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      *(_OWORD *)v46 = 0u;
      v47 = 0u;
      v53 = -1;
      v54 = -1;
      v55 = 0;
      WebCore::CachedRawResource::finishLoading(this, v27, (const WebCore::NetworkLoadMetrics *)v46);
      WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v46, v28);
      std::__optional_destruct_base<WebCore::CachedRawResource::DelayedFinishLoading,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)&v56, v29);
    }
    WTF::Ref<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>>::~Ref((uint64_t *)&v58, v24);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v59, v25);
  }
}

uint64_t WebCore::FragmentedSharedBuffer::getSomeData@<X0>(WebCore::FragmentedSharedBuffer *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  char v18;

  if (*((_QWORD *)this + 6) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19411A750);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 5);
  if ((_DWORD)v4)
  {
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[2 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 2;
      v4 += ~(v4 >> 1);
      if (v8 > a2)
        v4 = v5;
      else
        v3 = v7;
    }
    while (v4);
  }
  else
  {
    v3 += 2 * v4;
  }
  v9 = (unsigned int *)*(v3 - 1);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v17 = (WTF *)v9;
  result = WebCore::SharedBufferDataView::SharedBufferDataView(a3, (uint64_t *)&v17, a2 - *(v3 - 2), 0, 0);
  v13 = (unsigned int *)v17;
  v17 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v16 = v13[6];
      if ((_DWORD)v16 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v16])(&v18, v13 + 2);
      v13[6] = -1;
      return WTF::fastFree((WTF *)v13, v12);
    }
  }
  return result;
}

uint64_t *WebCore::SharedBufferDataView::createSharedBuffer@<X0>(unsigned int **this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  uint64_t *v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t *result;
  WebCore::CachedResource *v22;
  void *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;

  v4 = *this;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *this;
  v7 = (*this)[6];
  if ((_DWORD)v7 == -1)
    goto LABEL_14;
  v24 = &v26;
  v8 = ((uint64_t (*)(uint64_t **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v24, v6 + 2);
  v9 = v6[6];
  if ((_DWORD)v9 == -1)
    goto LABEL_14;
  v10 = v8;
  v24 = &v26;
  v11 = ((uint64_t (*)(uint64_t **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v24, v6 + 2);
  v12 = (unint64_t)this[1];
  if (v11 < v12 || (v13 = this[2], v13 != (unsigned int *)-1) && v11 - v12 < (unint64_t)v13)
  {
    __break(1u);
LABEL_14:
    v22 = (WebCore::CachedResource *)std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebCore::CachedScript::script(v22, v23);
  }
  v14 = v10 + v12;
  v15 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *v15 = (uint64_t)&off_1E3406ED8;
  v15[1] = (uint64_t)v4;
  v15[2] = v14;
  v24 = v15;
  v16 = this[2];
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = off_1E3406F00;
  v17[1] = v16;
  v25 = v17;
  v18 = WTF::fastMalloc((WTF *)0x38);
  v26 = WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(v18, (uint64_t *)&v24);
  v19 = WTF::fastMalloc((WTF *)0x38);
  *a2 = WebCore::SharedBuffer::SharedBuffer(v19, &v26);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v26, v20);
  if (v25)
    (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  result = v24;
  if (v24)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v24 + 8))(v24);
  return result;
}

uint64_t WebCore::CachedScript::script(WebCore::CachedResource *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  __int16 v23;
  const char *v24;
  const WTF::String *v25;
  PAL *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  __int128 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  unsigned int v80;
  int v81;
  WTF *v82;
  void *v83;
  WTF *v84;
  void *v85;
  WTF::StringImpl *v86;
  void *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  __int16 v90;
  WTF *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  __int16 v96;
  uint64_t v97;
  WTF::StringImpl *v98[2];
  char v99;

  v3 = *((_QWORD *)this + 49);
  if (v3)
  {
    v4 = (int)a2;
    v6 = (uint64_t *)((char *)this + 392);
    do
      v7 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v7 + 1, (unsigned int *)v3));
    if (!*(_BYTE *)(v3 + 40))
    {
      WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v3, &v93);
      WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::operator=<WebCore::SharedBuffer>(v6, (uint64_t *)&v93);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v93, v87);
    }
    do
    {
      v8 = __ldaxr((unsigned int *)v3);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v3));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v3);
      v66 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v66)
      {
        v2 = *(_QWORD *)(v3 + 8);
        v67 = v2 + 16 * v66;
        do
        {
          v68 = *(unsigned int **)(v2 + 8);
          *(_QWORD *)(v2 + 8) = 0;
          if (v68)
          {
            do
            {
              v69 = __ldaxr(v68);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, v68));
            if (!v70)
            {
              atomic_store(1u, v68);
              v91 = (WTF *)v68;
              v88 = v68[6];
              if ((_DWORD)v88 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E33F8F08[v88])(&v93, (char *)v91 + 8);
              *((_DWORD *)v91 + 6) = -1;
              WTF::fastFree(v91, a2);
            }
          }
          v2 += 16;
        }
        while (v2 != v67);
      }
      v71 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v71 && v71 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v71, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    v10 = *v6;
    if (!*(_BYTE *)(v10 + 40))
    {
      __break(0xC471u);
      JUMPOUT(0x19411AEC8);
    }
    do
      v11 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v11 + 1, (unsigned int *)v10));
    v97 = v10;
    v12 = *((_DWORD *)this + 168);
    if (!v12)
    {
      v3 = *((_QWORD *)this + 85);
      if (v3)
        ++*(_DWORD *)v3;
      WTF::String::String((WTF::String *)&v92, *(const char **)(v3 + 16));
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::TextResourceDecoder::~TextResourceDecoder((WebCore::TextResourceDecoder *)v3, v19);
        WTF::fastFree(v82, v83);
      }
      else
      {
        --*(_DWORD *)v3;
      }
      if (v92)
      {
        v20 = *((_QWORD *)v92 + 1);
        v21 = *((unsigned int *)v92 + 1) | ((unint64_t)((*((_DWORD *)v92 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v20 = 0;
        v21 = 0x100000000;
      }
      v93 = (WTF::StringImpl *)&off_1E31F4A18;
      v94 = (WTF::StringImpl *)PAL::atomCanonicalTextEncodingName(v20, (const char *)v21);
      v95 = v22;
      v98[0] = v94;
      v98[1] = v22;
      if (v22 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v98))
        {
          v23 = 165;
        }
        else
        {
          v23 = 92;
        }
      }
      else
      {
        v23 = 92;
      }
      v96 = v23;
      if (PAL::TextEncoding::isNonByteBasedEncoding((PAL::TextEncoding *)&v93, (const char *)v22)
        || (v40 = *(_QWORD *)(v10 + 48)) == 0)
      {
        v3 = 0;
      }
      else
      {
        if (*(_DWORD *)(v10 + 20))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
          v42 = *(unsigned int *)(v41 + 24);
          if ((_DWORD)v42 == -1)
            goto LABEL_138;
          v98[0] = (WTF::StringImpl *)&v99;
          v43 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v42])(v98, v41 + 8);
          v40 = *(_QWORD *)(v10 + 48);
        }
        else
        {
          v43 = 0;
        }
        v44 = 0;
        v45 = v43 + v40;
        if ((v43 & 7) != 0 && v40)
        {
          v44 = 0;
          v46 = v40 - 1;
          v47 = v43 + 1;
          do
          {
            v48 = *(unsigned __int8 *)v43++;
            v44 |= v48;
            if ((v47 & 7) == 0)
              break;
            v49 = v46--;
            ++v47;
          }
          while (v49);
        }
        while (v43 < (v45 & 0xFFFFFFFFFFFFFFF8))
        {
          v50 = *(_QWORD *)v43;
          v43 += 8;
          v44 |= v50;
        }
        while (v43 != v45)
        {
          v51 = *(unsigned __int8 *)v43++;
          v44 |= v51;
        }
        v3 = (v44 & 0x8080808080808080) == 0;
      }
      v52 = v92;
      v92 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v52 -= 2;
      }
      if ((_DWORD)v3)
      {
        *((_DWORD *)this + 168) = 1;
        WebCore::CachedResource::setDecodedSize(this, 0);
        v53 = *((_QWORD *)this + 50);
        if (v53)
        {
          v54 = *(_QWORD *)(v53 + 288);
          *(_QWORD *)(v53 + 288) = v54 & 0xFDFFFFFFFFFFFFLL;
          if ((v54 & 0xFFFFFFFFFFFFLL) != 0)
            WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v53 + 256));
        }
        if (*(_DWORD *)(v10 + 20))
        {
          v55 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
          v56 = *(unsigned int *)(v55 + 24);
          if ((_DWORD)v56 == -1)
            goto LABEL_138;
          v93 = (WTF::StringImpl *)v98;
          v57 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v56])(&v93, v55 + 8);
        }
        else
        {
          v57 = 0;
        }
        v58 = -1640531527;
        v59 = *(_QWORD *)(v10 + 48);
        if (v59 >= 2)
        {
          v60 = 0;
          do
          {
            v61 = (*(unsigned __int8 *)(v57 + v60 + 1) << 11) ^ ((v58 + *(unsigned __int8 *)(v57 + v60)) << 16) ^ (v58 + *(unsigned __int8 *)(v57 + v60));
            v58 = v61 + (v61 >> 11);
            v62 = v60 + 3;
            v60 += 2;
          }
          while (v62 < v59);
        }
        if ((v59 & 1) != 0)
          v58 = ((v58 + *(unsigned __int8 *)(v59 + v57 - 1)) ^ ((v58 + *(unsigned __int8 *)(v59 + v57 - 1)) << 11))
              + (((v58 + *(unsigned __int8 *)(v59 + v57 - 1)) ^ ((v58 + *(unsigned __int8 *)(v59 + v57 - 1)) << 11)) >> 17);
        v63 = (v58 ^ (8 * v58)) + ((v58 ^ (8 * v58)) >> 5);
        v64 = (v63 ^ (4 * v63)) + ((v63 ^ (4 * v63)) >> 15);
        v65 = (v64 ^ (v64 << 10)) & 0xFFFFFF;
        if (!v65)
          v65 = 0x800000;
        *((_DWORD *)this + 166) = v65;
      }
      v12 = *((_DWORD *)this + 168);
    }
    if (v12 != 1)
    {
      LODWORD(v2) = *((unsigned __int8 *)this + 668);
      if ((_DWORD)v2 == v4 && *((_QWORD *)this + 82) != 0)
      {
LABEL_16:
        WebCore::CachedResource::restartDecodedDataDeletionTimer(this);
        v14 = *((_QWORD *)this + 82);
        if (v14)
          v15 = *(_QWORD *)(v14 + 8);
        else
          v15 = 0;
        goto LABEL_18;
      }
      if (v4)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        {
          PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
          *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v24);
          *((_QWORD *)&xmmword_1ECE86C80 + 1) = v89;
          v93 = (WTF::StringImpl *)xmmword_1ECE86C80;
          v94 = v89;
          if (v89 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
          {
            if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v93))
            {
              v90 = 165;
            }
            else
            {
              v90 = 92;
            }
          }
          else
          {
            v90 = 92;
          }
          word_1ECE86C90 = v90;
        }
        v3 = WTF::fastMalloc((WTF *)0x60);
        *(_DWORD *)v3 = 1;
        v26 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)v98, v25);
        *(_DWORD *)(v3 + 4) = (_DWORD)v26;
        if ((_DWORD)v26 == 2)
        {
          v28 = PAL::UTF8Encoding(v26);
        }
        else
        {
          v28 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
          if (!*((_QWORD *)&xmmword_1ECE86C80 + 1))
            v28 = PAL::Latin1Encoding((PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding);
        }
        *(_QWORD *)(v3 + 8) = &off_1E31F4A18;
        v29 = *(_OWORD *)(v28 + 1);
        *(_WORD *)(v3 + 32) = *((_WORD *)v28 + 12);
        *(_OWORD *)(v3 + 16) = v29;
        *(_QWORD *)(v3 + 40) = 0;
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 56) = 0;
        *(_QWORD *)(v3 + 72) = 0;
        *(_QWORD *)(v3 + 80) = 0;
        *(_QWORD *)(v3 + 64) = 0;
        *(_QWORD *)(v3 + 87) = 0;
        v30 = v98[0];
        v98[0] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v27);
          else
            *(_DWORD *)v30 -= 2;
        }
        *(_BYTE *)(v3 + 94) = 1;
        if (!*(_DWORD *)(v10 + 20))
        {
          v33 = 0;
LABEL_47:
          WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v3, v33, *(_QWORD *)(v10 + 48), &v93);
          v35 = v93;
          v93 = 0;
          v36 = (WTF::StringImpl *)*((_QWORD *)this + 82);
          *((_QWORD *)this + 82) = v35;
          if (!v36)
            goto LABEL_50;
          v37 = *(_DWORD *)v36 - 2;
          if (*(_DWORD *)v36 != 2)
            goto LABEL_49;
          WTF::StringImpl::destroy(v36, v34);
          v36 = v93;
          v93 = 0;
          if (v36)
          {
            v37 = *(_DWORD *)v36 - 2;
            if (*(_DWORD *)v36 != 2)
            {
LABEL_49:
              *(_DWORD *)v36 = v37;
              goto LABEL_50;
            }
            WTF::StringImpl::destroy(v36, v34);
          }
LABEL_50:
          if (*(_DWORD *)v3 == 1)
          {
            WebCore::TextResourceDecoder::~TextResourceDecoder((WebCore::TextResourceDecoder *)v3, v34);
            WTF::fastFree(v84, v85);
          }
          else
          {
            --*(_DWORD *)v3;
          }
          goto LABEL_52;
        }
        v31 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
        v32 = *(unsigned int *)(v31 + 24);
        if ((_DWORD)v32 != -1)
        {
          v93 = (WTF::StringImpl *)v98;
          v33 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v32])(&v93, v31 + 8);
          goto LABEL_47;
        }
      }
      else
      {
        v3 = *((_QWORD *)this + 85);
        if (!*(_DWORD *)(v10 + 20))
        {
LABEL_139:
          v75 = 0;
LABEL_109:
          WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v3, v75, *(_QWORD *)(v10 + 48), &v93);
          v77 = v93;
          v93 = 0;
          v78 = (WTF::StringImpl *)*((_QWORD *)this + 82);
          *((_QWORD *)this + 82) = v77;
          if (!v78)
            goto LABEL_52;
          v79 = *(_DWORD *)v78 - 2;
          if (*(_DWORD *)v78 != 2)
            goto LABEL_111;
          WTF::StringImpl::destroy(v78, v76);
          v78 = v93;
          v93 = 0;
          if (v78)
          {
            v79 = *(_DWORD *)v78 - 2;
            if (*(_DWORD *)v78 != 2)
            {
LABEL_111:
              *(_DWORD *)v78 = v79;
              goto LABEL_52;
            }
            WTF::StringImpl::destroy(v78, v86);
          }
LABEL_52:
          v38 = (WTF::StringImpl *)*((_QWORD *)this + 82);
          if ((_DWORD)v2 != v4 || !*((_DWORD *)this + 168))
          {
            if (v38)
            {
              v80 = *((_DWORD *)v38 + 4);
              if (v80 < 0x100)
              {
                v81 = WTF::StringImpl::hashSlowCase(v38);
                v38 = (WTF::StringImpl *)*((_QWORD *)this + 82);
              }
              else
              {
                v81 = v80 >> 8;
              }
            }
            else
            {
              v81 = 0;
            }
            *((_DWORD *)this + 166) = v81;
          }
          *((_DWORD *)this + 168) = 2;
          *((_BYTE *)this + 668) = v4;
          if (v38)
            v39 = *((_DWORD *)v38 + 1) << (((*((_DWORD *)v38 + 4) >> 2) & 1) == 0);
          else
            v39 = 0;
          WebCore::CachedResource::setDecodedSize(this, v39);
          goto LABEL_16;
        }
        v73 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
        v74 = *(unsigned int *)(v73 + 24);
        if ((_DWORD)v74 != -1)
        {
          v93 = (WTF::StringImpl *)v98;
          v75 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v74])(&v93, v73 + 8);
          goto LABEL_109;
        }
      }
LABEL_138:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_139;
    }
    if (*(_DWORD *)(v10 + 20))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
      v18 = *(unsigned int *)(v17 + 24);
      if ((_DWORD)v18 == -1)
        goto LABEL_138;
      v93 = (WTF::StringImpl *)v98;
      v15 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v93, v17 + 8);
    }
    else
    {
      v15 = 0;
    }
LABEL_18:
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v97, a2);
    return v15;
  }
  if (*MEMORY[0x1E0CBF738])
    return *(_QWORD *)(*MEMORY[0x1E0CBF738] + 8);
  else
    return 0;
}

WebCore::CachedResource::ResponseData *WebCore::CachedResource::restartDecodedDataDeletionTimer(WebCore::CachedResource *this)
{
  WebCore::CachedResource::ResponseData *result;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  WebCore::CachedResource::ResponseData *v7;
  WTF::StringImpl *v8;
  WebCore::CachedResource::ResponseData *v9;
  WTF *v10;
  void *v11;

  result = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
  if (!result)
  {
    v7 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
    result = WebCore::CachedResource::ResponseData::ResponseData(v7, this);
    v9 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = result;
    if (v9)
    {
      WebCore::CachedResource::ResponseData::~ResponseData(v9, v8);
      WTF::fastFree(v10, v11);
      result = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    }
  }
  v3 = *((_QWORD *)result + 36);
  if ((v3 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v3 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v4 = (uint64_t)result + 256;
    v5 = *((double *)result + 39);
    *((_QWORD *)result + 35) = 0;
    WTF::MonotonicTime::now(result);
    return (WebCore::CachedResource::ResponseData *)WebCore::TimerBase::setNextFireTime(v4, v5 + v6);
  }
  else
  {
    *((_QWORD *)result + 36) = v3 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
  }
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(v4, a1);
  *a2 = result;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(v4, a1);
  *a2 = result;
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  char v20;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[1] + 16))(a2[1]);
  v18 = 0;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v5 = 1;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8) = v7;
  v8 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v5 + 16) = v8;
  *(_DWORD *)(v5 + 24) = 3;
  v19 = (WTF *)v5;
  v9 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 16))
  {
    WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>((uint64_t)v4, (unint64_t)&v18);
  }
  else
  {
    v10 = (_QWORD *)(*v4 + 16 * v9);
    *v10 = 0;
    v11 = v10 + 1;
    do
      v12 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v12 + 1, (unsigned int *)v5));
    *v11 = v5;
    ++*(_DWORD *)(a1 + 20);
  }
  v13 = (unsigned int *)v19;
  v19 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v17 = v13[6];
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v17])(&v20, v13 + 2);
      v13[6] = -1;
      WTF::fastFree((WTF *)v13, v6);
    }
  }
  return a1;
}

{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  WTF *v23;
  char v24;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *((unsigned int *)a2 + 2);
  v22 = 0;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v5 = 1;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v5 + 16) = v7;
  *(_DWORD *)(v5 + 24) = 2;
  v23 = (WTF *)v5;
  v8 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 16))
  {
    v17 = (_QWORD *)WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v8 + 1, (unint64_t)&v22);
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 20));
    *v18 = *v17;
    v19 = (unsigned int **)(v18 + 1);
    v20 = (unsigned int *)v17[1];
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    *v19 = v20;
  }
  else
  {
    v9 = (_QWORD *)(*v4 + 16 * v8);
    *v9 = 0;
    v10 = v9 + 1;
    do
      v11 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v11 + 1, (unsigned int *)v5));
    *v10 = v5;
  }
  ++*(_DWORD *)(a1 + 20);
  v12 = (unsigned int *)v23;
  v23 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v16 = v12[6];
      if ((_DWORD)v16 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v16])(&v24, v12 + 2);
      v12[6] = -1;
      WTF::fastFree((WTF *)v12, v6);
    }
  }
  return a1;
}

uint64_t PAL::atomCanonicalTextEncodingName(unint64_t a1, const char *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x16_t *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint16x4_t *v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t *v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint8x8_t *v33;
  unint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint8x8_t v37;
  uint16x8_t v38;
  uint32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  unint64_t v48;
  uint8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint8x16_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint16x8_t v61;
  uint32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint32x4_t v65;
  int8x16_t v66;
  uint32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  unsigned int v72;
  uint64_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t *v76;
  uint64_t v77;
  int8x16_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned __int16 *v81;
  uint64_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint16x4_t *v85;
  unint64_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  uint16x8_t v93;
  uint32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  uint32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  uint32x4_t v104;
  int8x16_t v105;
  int8x16_t v106;
  unsigned int v107;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  _OWORD *v113;
  unint64_t v114;
  __int128 *v115;
  __int128 v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int8x16_t *v125;
  int8x16_t *v126;
  int8x16_t v127;
  int8x16_t v128;
  char v129;
  _BYTE v130[64];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    return 0;
  v2 = (int8x8_t)(a1 & 7);
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    v3 = a1 + a2;
    if ((a1 & 7) != 0)
    {
      v5 = a1 + 1;
      v4 = *(_BYTE *)a1;
      if (((a1 + 1) & 7) != 0 && a2 != 1)
      {
        v4 |= *(_BYTE *)(a1 + 1);
        v5 = a1 + 2;
        if (((a1 + 2) & 7) != 0 && a2 != 2)
        {
          v4 |= *(_BYTE *)(a1 + 2);
          v5 = a1 + 3;
          if (((a1 + 3) & 7) != 0 && a2 != 3)
          {
            v4 |= *(_BYTE *)(a1 + 3);
            v5 = a1 + 4;
            if (((a1 + 4) & 7) != 0 && a2 != 4)
            {
              v4 |= *(_BYTE *)(a1 + 4);
              v5 = a1 + 5;
              if (((a1 + 5) & 7) != 0 && a2 != 5)
              {
                v4 |= *(_BYTE *)(a1 + 5);
                v5 = a1 + 6;
                if (((a1 + 6) & 7) != 0 && a2 != 6)
                {
                  v4 |= *(_BYTE *)(a1 + 6);
                  v5 = a1 + 7;
                  if (((a1 + 7) & 7) != 0 && a2 != 7)
                  {
                    v4 |= *(_BYTE *)(a1 + 7);
                    v5 = a1 + 8;
                  }
                }
              }
            }
          }
        }
      }
      v6 = (int8x8_t)v4;
      v7 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 < (v3 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_20:
        v8 = v5 + 8;
        if (v7 > v5 + 8)
          v8 = v7;
        v9 = v8 + ~v5;
        if (v9 >= 0x18)
        {
          v21 = (v9 >> 3) + 1;
          v10 = (uint8x16_t *)(v5 + 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL));
          v22 = 0uLL;
          v23 = (int8x16_t)(unint64_t)v6;
          v24 = (int8x16_t *)(v5 + 16);
          v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v23 = vorrq_s8(v24[-1], v23);
            v22 = vorrq_s8(*v24, v22);
            v24 += 2;
            v25 -= 4;
          }
          while (v25);
          v26 = vorrq_s8(v22, v23);
          v6 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_39:
            if (v10 == (uint8x16_t *)v3)
              goto LABEL_56;
            v28 = a1 + a2 - (_QWORD)v10;
            if (v28 < 8)
            {
              v29 = (unsigned __int8 *)v10;
              goto LABEL_55;
            }
            if (v28 >= 0x10)
            {
              v30 = v28 & 0xFFFFFFFFFFFFFFF0;
              v46 = 0uLL;
              v47 = (int8x16_t)(unint64_t)v6;
              v48 = v28 & 0xFFFFFFFFFFFFFFF0;
              v49 = v10;
              v50 = 0uLL;
              v51 = 0uLL;
              v52 = 0uLL;
              v53 = 0uLL;
              v54 = 0uLL;
              v55 = 0uLL;
              do
              {
                v56 = *v49++;
                v57 = vmovl_u8(*(uint8x8_t *)v56.i8);
                v58 = vmovl_u16(*(uint16x4_t *)v57.i8);
                v59.i64[0] = v58.u32[0];
                v59.i64[1] = v58.u32[1];
                v60 = v59;
                v61 = vmovl_high_u8(v56);
                v62 = vmovl_high_u16(v61);
                v59.i64[0] = v62.u32[2];
                v59.i64[1] = v62.u32[3];
                v63 = v59;
                v59.i64[0] = v58.u32[2];
                v59.i64[1] = v58.u32[3];
                v64 = v59;
                v65 = vmovl_high_u16(v57);
                v59.i64[0] = v65.u32[0];
                v59.i64[1] = v65.u32[1];
                v66 = v59;
                v67 = vmovl_u16(*(uint16x4_t *)v61.i8);
                v59.i64[0] = v67.u32[0];
                v59.i64[1] = v67.u32[1];
                v68 = v59;
                v59.i64[0] = v62.u32[0];
                v59.i64[1] = v62.u32[1];
                v69 = v59;
                v59.i64[0] = v65.u32[2];
                v59.i64[1] = v65.u32[3];
                v70 = v59;
                v59.i64[0] = v67.u32[2];
                v59.i64[1] = v67.u32[3];
                v53 = vorrq_s8(v53, v59);
                v51 = vorrq_s8(v51, v70);
                v54 = vorrq_s8(v54, v69);
                v52 = vorrq_s8(v52, v68);
                v50 = vorrq_s8(v50, v66);
                v46 = vorrq_s8(v46, v64);
                v55 = vorrq_s8(v55, v63);
                v47 = vorrq_s8(v47, v60);
                v48 -= 16;
              }
              while (v48);
              v71 = vorrq_s8(vorrq_s8(vorrq_s8(v47, v52), vorrq_s8(v50, v54)), vorrq_s8(vorrq_s8(v46, v53), vorrq_s8(v51, v55)));
              v6 = vorr_s8(*(int8x8_t *)v71.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
              if (v28 == v30)
                goto LABEL_56;
              if ((v28 & 8) == 0)
              {
                v29 = &v10->u8[v30];
                do
                {
LABEL_55:
                  v72 = *v29++;
                  *(_QWORD *)&v6 |= v72;
                }
                while (v29 != (unsigned __int8 *)v3);
                goto LABEL_56;
              }
            }
            else
            {
              v30 = 0;
            }
            v29 = &v10->u8[v28 & 0xFFFFFFFFFFFFFFF8];
            v31 = 0uLL;
            v32 = (int8x16_t)(unint64_t)v6;
            v33 = (uint8x8_t *)&v10->i8[v30];
            v34 = v30 - (v28 & 0xFFFFFFFFFFFFFFF8);
            v35 = 0uLL;
            v36 = 0uLL;
            do
            {
              v37 = *v33++;
              v38 = vmovl_u8(v37);
              v39 = vmovl_u16(*(uint16x4_t *)v38.i8);
              v40.i64[0] = v39.u32[0];
              v40.i64[1] = v39.u32[1];
              v41 = v40;
              v40.i64[0] = v39.u32[2];
              v40.i64[1] = v39.u32[3];
              v42 = v40;
              v43 = vmovl_high_u16(v38);
              v40.i64[0] = v43.u32[0];
              v40.i64[1] = v43.u32[1];
              v44 = v40;
              v40.i64[0] = v43.u32[2];
              v40.i64[1] = v43.u32[3];
              v36 = vorrq_s8(v36, v40);
              v35 = vorrq_s8(v35, v44);
              v31 = vorrq_s8(v31, v42);
              v32 = vorrq_s8(v32, v41);
              v34 += 8;
            }
            while (v34);
            v45 = vorrq_s8(vorrq_s8(v32, v35), vorrq_s8(v31, v36));
            v6 = vorr_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
            if (v28 != (v28 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_55;
LABEL_56:
            if ((*(_QWORD *)&v6 & 0x8080808080808080) != 0)
              return 0;
            goto LABEL_71;
          }
        }
        else
        {
          v10 = (uint8x16_t *)v5;
        }
        do
        {
          v27 = v10->i64[0];
          v10 = (uint8x16_t *)((char *)v10 + 8);
          *(_QWORD *)&v6 |= v27;
        }
        while ((unint64_t)v10 < v7);
        goto LABEL_39;
      }
    }
    else
    {
      v6 = 0;
      v5 = a1;
      v7 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (a1 < (v3 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_20;
    }
    v10 = (uint8x16_t *)v5;
    goto LABEL_39;
  }
  v11 = a1 + 2 * a2;
  if ((a1 & 7) == 0)
  {
    v14 = a1;
    v17 = v11 & 0xFFFFFFFFFFFFFFF8;
    if (a1 < (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_29;
LABEL_49:
    v20 = (uint16x4_t *)v14;
    goto LABEL_62;
  }
  v2 = 0;
  v12 = 2 * a2 - 2;
  v13 = a1 + 2;
  v14 = a1;
  do
  {
    v15 = *(unsigned __int16 *)v14;
    v14 += 2;
    *(_QWORD *)&v2 |= v15;
    if ((v13 & 7) == 0)
      break;
    v16 = v12;
    v12 -= 2;
    v13 += 2;
  }
  while (v16);
  v17 = v11 & 0xFFFFFFFFFFFFFFF8;
  if (v14 >= (v11 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_49;
LABEL_29:
  v18 = v14 + 8;
  if (v17 > v14 + 8)
    v18 = v17;
  v19 = v18 + ~v14;
  if (v19 < 0x18)
  {
    v20 = (uint16x4_t *)v14;
    do
    {
LABEL_61:
      v79 = (uint64_t)*v20++;
      *(_QWORD *)&v2 |= v79;
    }
    while ((unint64_t)v20 < v17);
    goto LABEL_62;
  }
  v73 = (v19 >> 3) + 1;
  v20 = (uint16x4_t *)(v14 + 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL));
  v74 = 0uLL;
  v75 = (int8x16_t)(unint64_t)v2;
  v76 = (int8x16_t *)(v14 + 16);
  v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v75 = vorrq_s8(v76[-1], v75);
    v74 = vorrq_s8(*v76, v74);
    v76 += 2;
    v77 -= 4;
  }
  while (v77);
  v78 = vorrq_s8(v74, v75);
  v2 = vorr_s8(*(int8x8_t *)v78.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL));
  if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_61;
LABEL_62:
  if (v20 == (uint16x4_t *)v11)
    goto LABEL_69;
  v80 = a1 + 2 * a2 - (_QWORD)v20 - 2;
  if (v80 < 0x1E)
  {
    v81 = (unsigned __int16 *)v20;
    do
    {
LABEL_68:
      v107 = *v81++;
      *(_QWORD *)&v2 |= v107;
    }
    while (v81 != (unsigned __int16 *)v11);
    goto LABEL_69;
  }
  v82 = (v80 >> 1) + 1;
  v83 = 0uLL;
  v84 = (int8x16_t)(unint64_t)v2;
  v81 = (unsigned __int16 *)v20 + (v82 & 0xFFFFFFFFFFFFFFF0);
  v85 = v20 + 2;
  v86 = v82 & 0xFFFFFFFFFFFFFFF0;
  v87 = 0uLL;
  v88 = 0uLL;
  v89 = 0uLL;
  v90 = 0uLL;
  v91 = 0uLL;
  v92 = 0uLL;
  do
  {
    v93 = *(uint16x8_t *)v85[-2].i8;
    v94 = vmovl_u16(*(uint16x4_t *)v93.i8);
    v95.i64[0] = v94.u32[0];
    v95.i64[1] = v94.u32[1];
    v96 = v95;
    v95.i64[0] = v94.u32[2];
    v95.i64[1] = v94.u32[3];
    v97 = v95;
    v98 = vmovl_high_u16(v93);
    v95.i64[0] = v98.u32[0];
    v95.i64[1] = v98.u32[1];
    v99 = v95;
    v95.i64[0] = v98.u32[2];
    v95.i64[1] = v98.u32[3];
    v100 = v95;
    v101 = vmovl_u16(*v85);
    v95.i64[0] = v101.u32[0];
    v95.i64[1] = v101.u32[1];
    v102 = v95;
    v95.i64[0] = v101.u32[2];
    v95.i64[1] = v101.u32[3];
    v103 = v95;
    v104 = vmovl_high_u16(*(uint16x8_t *)v85->i8);
    v95.i64[0] = v104.u32[0];
    v95.i64[1] = v104.u32[1];
    v105 = v95;
    v95.i64[0] = v104.u32[2];
    v95.i64[1] = v104.u32[3];
    v88 = vorrq_s8(v88, v100);
    v87 = vorrq_s8(v87, v99);
    v83 = vorrq_s8(v83, v97);
    v84 = vorrq_s8(v84, v96);
    v92 = vorrq_s8(v92, v95);
    v91 = vorrq_s8(v91, v105);
    v90 = vorrq_s8(v90, v103);
    v89 = vorrq_s8(v89, v102);
    v85 += 4;
    v86 -= 16;
  }
  while (v86);
  v106 = vorrq_s8(vorrq_s8(vorrq_s8(v89, v84), vorrq_s8(v91, v87)), vorrq_s8(vorrq_s8(v90, v83), vorrq_s8(v92, v88)));
  v2 = vorr_s8(*(int8x8_t *)v106.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
  if (v82 != (v82 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_68;
LABEL_69:
  if ((*(_QWORD *)&v2 & 0xFF80FF80FF80FF80) != 0)
    return 0;
LABEL_71:
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    v109 = 0;
    if ((unint64_t)a2 - 1 >= 0x3F)
      v110 = 63;
    else
      v110 = a2 - 1;
    if (v110 < 0x10)
    {
      v111 = (char *)a1;
    }
    else
    {
      v111 = (char *)a1;
      if ((unint64_t)&v130[-a1] >= 0x10)
      {
        v112 = (v110 + 1) & 0xF;
        if (!v112)
          v112 = 16;
        v109 = v110 + 1 - v112;
        v111 = (char *)(a1 + v109);
        v113 = v130;
        v114 = v109;
        v115 = (__int128 *)a1;
        do
        {
          v116 = *v115++;
          *v113++ = v116;
          v114 -= 16;
        }
        while (v114);
      }
    }
    while (v109 != 63)
    {
      v121 = *v111++;
      v122 = v109 + 1;
      v130[v109++] = v121;
      if (v111 == (char *)(a1 + a2))
        goto LABEL_101;
    }
  }
  else
  {
    v117 = (a2 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v117 >= 0x3F)
      v118 = 63;
    else
      v118 = (a2 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v118 < 0x10)
      goto LABEL_90;
    if (v117 >= 0x3F)
      v117 = 63;
    if ((unint64_t)v130 >= a1 + 2 * v117 + 2 || (unint64_t)&v130[v117 + 1] <= a1)
    {
      v123 = 16;
      if (((v118 + 1) & 0xF) != 0)
        v123 = (v118 + 1) & 0xF;
      v119 = v118 + 1 - v123;
      v120 = (char *)(a1 + 2 * v119);
      v124 = ~v118 + v123;
      v125 = (int8x16_t *)v130;
      v126 = (int8x16_t *)a1;
      do
      {
        v128 = *v126;
        v127 = v126[1];
        v126 += 2;
        *v125++ = vuzp1q_s8(v128, v127);
        v124 += 16;
      }
      while (v124);
    }
    else
    {
LABEL_90:
      v119 = 0;
      v120 = (char *)a1;
    }
    while (v119 != 63)
    {
      v129 = *v120;
      v120 += 2;
      v122 = v119 + 1;
      v130[v119++] = v129;
      if (v120 == (char *)(a1 + 2 * a2))
      {
LABEL_101:
        v130[v122] = 0;
        return PAL::atomCanonicalTextEncodingName((PAL *)v130, a2);
      }
    }
  }
  return 0;
}

uint64_t PAL::atomCanonicalTextEncodingName(PAL *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  PAL *v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  char *v28;
  char **v29;
  char *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 **v33;
  int v34;
  char *v35;
  char **v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  char *v49;
  int v50;
  int v51;
  BOOL v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v60;
  WTF *v61;
  unsigned int v62;
  char *v63;
  BOOL v64;
  _OWORD *v66;
  BOOL v67;
  uint64_t *v68;
  uint64_t v69;
  WTF *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 *v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  int v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t *v90;
  uint64_t v91;
  const char **v92;
  const char *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  PAL *v111;
  int v112;
  int v113;
  BOOL v114;
  int v115;
  int v116;
  WTF *v118;
  uint64_t v119;
  char *__s2[2];

  if (!this)
    return 0;
  if (!*(_BYTE *)this)
    return 0;
  if (__ldaxr(_MergedGlobals_79))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_79))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](_MergedGlobals_79, a2);
LABEL_9:
  if (qword_1ECE7EBD8)
  {
    v5 = *(_QWORD *)qword_1ECE7EBD8;
    if (!*(_QWORD *)qword_1ECE7EBD8)
      goto LABEL_40;
  }
  else
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v6 = 0;
    qword_1ECE7EBD0 = (uint64_t)v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v7 = 0;
    qword_1ECE7EBD8 = (uint64_t)v7;
    PAL::addToTextEncodingNameMap("windows-1252", (unsigned __int8 *)0xD, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("ansi_x3.4-1968", (unsigned __int8 *)0xF, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("ascii", (unsigned __int8 *)6, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("cp1252", (unsigned __int8 *)7, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("cp819", (unsigned __int8 *)6, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("csisolatin1", (unsigned __int8 *)0xC, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("ibm819", (unsigned __int8 *)7, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("iso-8859-1", (unsigned __int8 *)0xB, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("iso-ir-100", (unsigned __int8 *)0xB, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("iso8859-1", (unsigned __int8 *)0xA, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("iso88591", (unsigned __int8 *)9, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("iso_8859-1", (unsigned __int8 *)0xB, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("iso_8859-1:1987", (unsigned __int8 *)0x10, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("l1", (unsigned __int8 *)3, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("latin1", (unsigned __int8 *)7, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("us-ascii", (unsigned __int8 *)9, "windows-1252", (unsigned __int8 *)0xD);
    PAL::addToTextEncodingNameMap("x-cp1252", (unsigned __int8 *)9, "windows-1252", (unsigned __int8 *)0xD);
    v8 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = off_1E31F4608;
    __s2[0] = v8;
    PAL::addToTextCodecMap("windows-1252", 13, (const char **)__s2);
    if (__s2[0])
      (*(void (**)(char *))(*(_QWORD *)__s2[0] + 8))(__s2[0]);
    PAL::addToTextEncodingNameMap("UTF-8", (unsigned __int8 *)6, "UTF-8", (unsigned __int8 *)6);
    PAL::addToTextEncodingNameMap("utf8", (unsigned __int8 *)5, "UTF-8", (unsigned __int8 *)6);
    PAL::addToTextEncodingNameMap("unicode-1-1-utf-8", (unsigned __int8 *)0x12, "UTF-8", (unsigned __int8 *)6);
    PAL::addToTextEncodingNameMap("unicode11utf8", (unsigned __int8 *)0xE, "UTF-8", (unsigned __int8 *)6);
    PAL::addToTextEncodingNameMap("unicode20utf8", (unsigned __int8 *)0xE, "UTF-8", (unsigned __int8 *)6);
    PAL::addToTextEncodingNameMap("x-unicode20utf8", (unsigned __int8 *)0x10, "UTF-8", (unsigned __int8 *)6);
    v9 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v9 = off_1E31F49F0;
    __s2[0] = v9;
    PAL::addToTextCodecMap("UTF-8", 6, (const char **)__s2);
    if (__s2[0])
      (*(void (**)(char *))(*(_QWORD *)__s2[0] + 8))(__s2[0]);
    PAL::addToTextEncodingNameMap("UTF-16LE", (unsigned __int8 *)9, "UTF-16LE", (unsigned __int8 *)9);
    PAL::addToTextEncodingNameMap("UTF-16BE", (unsigned __int8 *)9, "UTF-16BE", (unsigned __int8 *)9);
    PAL::addToTextEncodingNameMap("ISO-10646-UCS-2", (unsigned __int8 *)0x10, "UTF-16LE", (unsigned __int8 *)9);
    PAL::addToTextEncodingNameMap("UCS-2", (unsigned __int8 *)6, "UTF-16LE", (unsigned __int8 *)9);
    PAL::addToTextEncodingNameMap("UTF-16", (unsigned __int8 *)7, "UTF-16LE", (unsigned __int8 *)9);
    PAL::addToTextEncodingNameMap("Unicode", (unsigned __int8 *)8, "UTF-16LE", (unsigned __int8 *)9);
    PAL::addToTextEncodingNameMap("csUnicode", (unsigned __int8 *)0xA, "UTF-16LE", (unsigned __int8 *)9);
    PAL::addToTextEncodingNameMap("unicodeFEFF", (unsigned __int8 *)0xC, "UTF-16LE", (unsigned __int8 *)9);
    PAL::addToTextEncodingNameMap("unicodeFFFE", (unsigned __int8 *)0xC, "UTF-16BE", (unsigned __int8 *)9);
    v10 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v10 = off_1E31F4968;
    __s2[0] = v10;
    PAL::addToTextCodecMap("UTF-16LE", 9, (const char **)__s2);
    if (__s2[0])
      (*(void (**)(char *))(*(_QWORD *)__s2[0] + 8))(__s2[0]);
    v11 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = off_1E31F4990;
    __s2[0] = v11;
    PAL::addToTextCodecMap("UTF-16BE", 9, (const char **)__s2);
    if (__s2[0])
      (*(void (**)(char *))(*(_QWORD *)__s2[0] + 8))(__s2[0]);
    PAL::addToTextEncodingNameMap("x-user-defined", (unsigned __int8 *)0xF, "x-user-defined", (unsigned __int8 *)0xF);
    v12 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = off_1E31F4908;
    __s2[0] = v12;
    PAL::addToTextCodecMap("x-user-defined", 15, (const char **)__s2);
    if (__s2[0])
      (*(void (**)(char *))(*(_QWORD *)__s2[0] + 8))(__s2[0]);
    v5 = *(_QWORD *)qword_1ECE7EBD8;
    if (!*(_QWORD *)qword_1ECE7EBD8)
      goto LABEL_40;
  }
  v13 = *(_DWORD *)(v5 - 8);
  v14 = *(unsigned __int8 *)this;
  v15 = -1879881855;
  if (*(_BYTE *)this)
  {
    v16 = -1640531527;
    v17 = (unsigned __int8 *)this + 1;
    do
    {
      v18 = 1025 * (v16 + *(char *)(MEMORY[0x1E0CBF868] + v14));
      v16 = v18 ^ (v18 >> 6);
      v19 = *v17++;
      v14 = v19;
    }
    while (v19);
    v15 = 9 * v16;
  }
  v20 = (32769 * (v15 ^ (v15 >> 11))) & v13;
  v21 = *(unsigned __int8 **)(v5 + 32 * v20);
  if (v21)
  {
    v22 = 0;
    while (1)
    {
      if (v21 != (unsigned __int8 *)-1)
      {
        v23 = this;
        do
        {
          v24 = *v21;
          v25 = *(unsigned __int8 *)v23;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v21) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                      + *(unsigned __int8 *)v23))
            goto LABEL_29;
          v23 = (PAL *)((char *)v23 + 1);
          ++v21;
          if (v24)
            v26 = v25 == 0;
          else
            v26 = 1;
        }
        while (!v26);
        if (!(v25 | v24))
          break;
      }
LABEL_29:
      v20 = (++v22 + (_DWORD)v20) & v13;
      v21 = *(unsigned __int8 **)(v5 + 32 * v20);
      if (!v21)
        goto LABEL_40;
    }
    v4 = *(_QWORD *)(v5 + 32 * v20 + 16);
    if (v4)
    {
LABEL_175:
      v115 = __ldxr(_MergedGlobals_79);
      if (v115 == 1)
        goto LABEL_178;
      goto LABEL_176;
    }
  }
LABEL_40:
  if ((PAL::didExtendTextCodecMaps & 1) != 0)
    goto LABEL_41;
  PAL::addToTextEncodingNameMap("replacement", (unsigned __int8 *)0xC, "replacement", (unsigned __int8 *)0xC);
  PAL::addToTextEncodingNameMap("csiso2022kr", (unsigned __int8 *)0xC, "replacement", (unsigned __int8 *)0xC);
  PAL::addToTextEncodingNameMap("hz-gb-2312", (unsigned __int8 *)0xB, "replacement", (unsigned __int8 *)0xC);
  PAL::addToTextEncodingNameMap("iso-2022-cn", (unsigned __int8 *)0xC, "replacement", (unsigned __int8 *)0xC);
  PAL::addToTextEncodingNameMap("iso-2022-cn-ext", (unsigned __int8 *)0x10, "replacement", (unsigned __int8 *)0xC);
  PAL::addToTextEncodingNameMap("iso-2022-kr", (unsigned __int8 *)0xC, "replacement", (unsigned __int8 *)0xC);
  v28 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = off_1E31F4668;
  __s2[0] = v28;
  PAL::addToTextCodecMap("replacement", 12, (const char **)__s2);
  if (__s2[0])
    (*(void (**)(char *))(*(_QWORD *)__s2[0] + 8))(__s2[0]);
  v29 = &PAL::encodingNames;
  do
  {
    v30 = *v29;
    v31 = (unsigned __int8 *)v29[1];
    PAL::addToTextEncodingNameMap(*v29, v31, (unsigned __int8 *)*v29, v31);
    v32 = *((unsigned int *)v29 + 4);
    if ((_DWORD)v32)
    {
      v33 = (unsigned __int8 **)(v29[3] + 8);
      do
      {
        PAL::addToTextEncodingNameMap((char *)*(v33 - 1), *v33, (unsigned __int8 *)v30, v31);
        v33 += 2;
        --v32;
      }
      while (v32);
    }
    v29 += 4;
  }
  v34 = -1640531527;
  PAL::TextCodecICU::registerCodecs((void (*)(char *, char *, _QWORD **))PAL::addToTextCodecMap);
  PAL::TextCodecCJK::registerEncodingNames((void (*)(const char *, uint64_t, const char *, uint64_t))PAL::addToTextEncodingNameMap);
  PAL::TextCodecCJK::registerCodecs((void (*)(const char *, uint64_t, _QWORD **))PAL::addToTextCodecMap);
  PAL::TextCodecSingleByte::registerEncodingNames((void (*)(const char *, uint64_t, const char *, uint64_t))PAL::addToTextEncodingNameMap);
  PAL::TextCodecSingleByte::registerCodecs((void (*)(const char *, uint64_t, _QWORD **))PAL::addToTextCodecMap);
  if (*(_QWORD *)qword_1ECE7EBD8)
  {
    v36 = &PAL::textEncodingNameBlocklist;
    v37 = MEMORY[0x1E0CBF868];
    while (1)
    {
      v38 = *(_QWORD **)qword_1ECE7EBD8;
      if (*(_QWORD *)qword_1ECE7EBD8)
      {
        v39 = **v36;
        v40 = -1879881855;
        if (**v36)
        {
          v41 = (unsigned __int8 *)(*v36 + 1);
          v42 = -1640531527;
          do
          {
            v43 = 1025 * (v42 + *(char *)(v37 + v39));
            v42 = v43 ^ (v43 >> 6);
            v44 = *v41++;
            v39 = v44;
          }
          while (v44);
          v40 = 9 * v42;
        }
        v45 = *((_DWORD *)v38 - 2);
        v46 = (32769 * (v40 ^ (v40 >> 11))) & v45;
        v47 = (unsigned __int8 *)v38[4 * v46];
        if (v47)
        {
          v48 = 0;
          while (v47 == (unsigned __int8 *)-1)
          {
LABEL_61:
            v46 = (++v48 + (_DWORD)v46) & v45;
            v47 = (unsigned __int8 *)v38[4 * v46];
            if (!v47)
              goto LABEL_53;
          }
          v49 = *v36;
          do
          {
            v50 = *v47;
            v51 = *v49;
            if (*(unsigned __int8 *)(v37 + *v47) != *(unsigned __int8 *)(v37 + *v49))
              goto LABEL_61;
            ++v49;
            ++v47;
            if (v50)
              v52 = v51 == 0;
            else
              v52 = 1;
          }
          while (!v52);
          if (v51 | v50)
            goto LABEL_61;
          v53 = &v38[4 * v46];
          v55 = (char *)v53[2];
          v54 = (char *)v53[3];
          __s2[0] = v55;
          __s2[1] = v54;
          if (v54)
            break;
        }
      }
LABEL_53:
      v36 += 2;
        goto LABEL_157;
    }
    v118 = 0;
    v119 = 0;
    if (*((_DWORD *)v38 - 3))
    {
      v56 = *((unsigned int *)v38 - 1);
      if ((_DWORD)v56)
      {
        v57 = 32 * v56;
        v58 = v38;
        while (!*v58 || *v58 == -1)
        {
          v58 += 4;
          v57 -= 32;
          if (!v57)
            goto LABEL_138;
        }
      }
      else
      {
        v58 = v38;
      }
      v60 = &v38[4 * v56];
      if (v60 != v58)
      {
        v61 = 0;
        v62 = 0;
LABEL_85:
        v63 = (char *)v58[2];
        v35 = __s2[0];
        if (v63)
          v64 = __s2[0] == 0;
        else
          v64 = 1;
        if (v64)
        {
          if (v63 != __s2[0])
            goto LABEL_97;
        }
        else if (strcmp(v63, __s2[0]))
        {
          goto LABEL_97;
        }
        if (v62 == (_DWORD)v119)
        {
          v66 = (_OWORD *)WTF::Vector<WTF::ASCIILiteral,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v118, v62 + 1, (unint64_t)v58);
          v62 = HIDWORD(v119);
          v61 = v118;
          *((_OWORD *)v118 + HIDWORD(v119)) = *v66;
        }
        else
        {
          *((_OWORD *)v61 + v62) = *(_OWORD *)v58;
        }
        HIDWORD(v119) = ++v62;
LABEL_97:
        while (1)
        {
          v58 += 4;
          if (v58 == v60)
            break;
          if (*v58)
            v67 = *v58 == -1;
          else
            v67 = 1;
          if (!v67)
          {
            if (v58 != v60)
              goto LABEL_85;
            break;
          }
        }
        if (v62)
        {
          v68 = (uint64_t *)qword_1ECE7EBD8;
          v69 = *(_QWORD *)qword_1ECE7EBD8;
          if (*(_QWORD *)qword_1ECE7EBD8)
          {
            v70 = (WTF *)((char *)v61 + 16 * v62);
LABEL_106:
            v71 = **(unsigned __int8 **)v61;
            v72 = -1879881855;
            if (**(_BYTE **)v61)
            {
              v73 = (unsigned __int8 *)(*(_QWORD *)v61 + 1);
              v74 = -1640531527;
              do
              {
                v75 = 1025 * (v74 + *(char *)(v37 + v71));
                v74 = v75 ^ (v75 >> 6);
                v76 = *v73++;
                v71 = v76;
              }
              while (v76);
              v72 = 9 * v74;
            }
            v77 = *(_DWORD *)(v69 - 8);
            v78 = (32769 * (v72 ^ (v72 >> 11))) & v77;
            v79 = (unsigned __int8 **)(v69 + 32 * v78);
            v80 = *v79;
            if (!*v79)
              goto LABEL_135;
            v81 = 0;
            while (1)
            {
              if (v80 != (unsigned __int8 *)-1)
              {
                v82 = *(unsigned __int8 **)v61;
                do
                {
                  v83 = *v80;
                  v84 = *v82;
                  v35 = (char *)*(unsigned __int8 *)(v37 + *v80);
                  if ((_DWORD)v35 != *(unsigned __int8 *)(v37 + *v82))
                    goto LABEL_112;
                  ++v82;
                  ++v80;
                  if (v83)
                    v85 = v84 == 0;
                  else
                    v85 = 1;
                }
                while (!v85);
                if (!(v84 | v83))
                  break;
              }
LABEL_112:
              v78 = (++v81 + (_DWORD)v78) & v77;
              v79 = (unsigned __int8 **)(v69 + 32 * v78);
              v80 = *v79;
              if (!*v79)
                goto LABEL_135;
            }
            if ((unsigned __int8 **)(v69 + 32 * *(unsigned int *)(v69 - 4)) == v79)
              goto LABEL_135;
            *(_OWORD *)v79 = xmmword_196881D50;
            ++*(_DWORD *)(*v68 - 16);
            if (*v68)
            {
              --*(_DWORD *)(*v68 - 12);
              v86 = *v68;
              if (!*v68)
                goto LABEL_135;
            }
            else
            {
              MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
              v86 = *v68;
              if (!*v68)
                goto LABEL_135;
            }
            v87 = 6 * *(_DWORD *)(v86 - 12);
            v88 = *(_DWORD *)(v86 - 4);
            if (v87 < v88 && v88 >= 9)
            {
              WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>>,PAL::TextEncodingNameHash,WTF::HashMap<WTF::ASCIILiteral,WTF::ASCIILiteral,PAL::TextEncodingNameHash,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v68, v88 >> 1);
              v68 = (uint64_t *)qword_1ECE7EBD8;
            }
LABEL_135:
            while (1)
            {
              v61 = (WTF *)((char *)v61 + 16);
              if (v61 == v70)
                break;
              v69 = *v68;
              if (*v68)
                goto LABEL_106;
            }
          }
        }
      }
    }
LABEL_138:
    v90 = (uint64_t *)qword_1ECE7EBD0;
    v91 = *(_QWORD *)qword_1ECE7EBD0;
    if (*(_QWORD *)qword_1ECE7EBD0)
    {
      v92 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(*(const char ***)qword_1ECE7EBD0, (const char **)__s2);
      if (v92 && v92 != (const char **)(v91 + 24 * *(unsigned int *)(v91 - 4)))
      {
        *(_OWORD *)v92 = xmmword_196881D50;
        v94 = v92[2];
        v92[2] = 0;
        if (v94)
          (*(void (**)(const char *))(*(_QWORD *)v94 + 8))(v94);
        ++*(_DWORD *)(*v90 - 16);
        if (*v90)
        {
          --*(_DWORD *)(*v90 - 12);
          v95 = *v90;
          if (!*v90)
            goto LABEL_155;
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
          v95 = *v90;
          if (!*v90)
            goto LABEL_155;
        }
        v96 = 6 * *(_DWORD *)(v95 - 12);
        v97 = *(_DWORD *)(v95 - 4);
        if (v96 < v97 && v97 >= 9)
          WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v90, v97 >> 1);
      }
    }
LABEL_155:
    if (v118)
      WTF::fastFree(v118, v35);
    goto LABEL_53;
  }
LABEL_157:
  v99 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v99 = 0;
  PAL::japaneseEncodings = (uint64_t)v99;
  PAL::addEncodingName((uint64_t)v99, "EUC-JP");
  PAL::addEncodingName(PAL::japaneseEncodings, "ISO-2022-JP");
  PAL::addEncodingName(PAL::japaneseEncodings, "ISO-2022-JP-1");
  PAL::addEncodingName(PAL::japaneseEncodings, "ISO-2022-JP-2");
  PAL::addEncodingName(PAL::japaneseEncodings, "ISO-2022-JP-3");
  PAL::addEncodingName(PAL::japaneseEncodings, "JIS_C6226-1978");
  PAL::addEncodingName(PAL::japaneseEncodings, "JIS_X0201");
  PAL::addEncodingName(PAL::japaneseEncodings, "JIS_X0208-1983");
  PAL::addEncodingName(PAL::japaneseEncodings, "JIS_X0208-1990");
  PAL::addEncodingName(PAL::japaneseEncodings, "JIS_X0212-1990");
  PAL::addEncodingName(PAL::japaneseEncodings, "Shift_JIS");
  PAL::addEncodingName(PAL::japaneseEncodings, "Shift_JIS_X0213-2000");
  PAL::addEncodingName(PAL::japaneseEncodings, "cp932");
  PAL::addEncodingName(PAL::japaneseEncodings, "x-mac-japanese");
  v100 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v100 = 0;
  PAL::nonBackslashEncodings = (uint64_t)v100;
  PAL::addEncodingName((uint64_t)v100, "x-mac-japanese");
  PAL::addEncodingName(PAL::nonBackslashEncodings, "ISO-2022-JP");
  PAL::addEncodingName(PAL::nonBackslashEncodings, "EUC-JP");
  PAL::addEncodingName(PAL::nonBackslashEncodings, "Shift_JIS");
  PAL::addEncodingName(PAL::nonBackslashEncodings, "Shift_JIS_X0213-2000");
  PAL::didExtendTextCodecMaps = 1;
  v101 = *(_QWORD *)qword_1ECE7EBD8;
  if (!*(_QWORD *)qword_1ECE7EBD8)
    goto LABEL_177;
  v102 = *(_DWORD *)(v101 - 8);
  v103 = *(unsigned __int8 *)this;
  v104 = -1879881855;
  if (*(_BYTE *)this)
  {
    v105 = (unsigned __int8 *)this + 1;
    do
    {
      v106 = 1025 * (v34 + *(char *)(MEMORY[0x1E0CBF868] + v103));
      v34 = v106 ^ (v106 >> 6);
      v107 = *v105++;
      v103 = v107;
    }
    while (v107);
    v104 = 9 * v34;
  }
  v108 = (32769 * (v104 ^ (v104 >> 11))) & v102;
  v109 = *(unsigned __int8 **)(v101 + 32 * v108);
  if (!v109)
  {
LABEL_177:
    v4 = 0;
    v116 = __ldxr(_MergedGlobals_79);
    if (v116 == 1)
      goto LABEL_178;
LABEL_176:
    __clrex();
LABEL_179:
    WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_79);
    return v4;
  }
  v110 = 0;
  do
  {
    if (v109 != (unsigned __int8 *)-1)
    {
      v111 = this;
      while (1)
      {
        v112 = *v109;
        v113 = *(unsigned __int8 *)v111;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v109) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                     + *(unsigned __int8 *)v111))
          break;
        v111 = (PAL *)((char *)v111 + 1);
        ++v109;
        if (v112)
          v114 = v113 == 0;
        else
          v114 = 1;
        if (v114)
        {
          if (v113 | v112)
            break;
          v4 = *(_QWORD *)(v101 + 32 * v108 + 16);
          goto LABEL_175;
        }
      }
    }
    v108 = (++v110 + (_DWORD)v108) & v102;
    v109 = *(unsigned __int8 **)(v101 + 32 * v108);
  }
  while (v109);
LABEL_41:
  v4 = 0;
  v27 = __ldxr(_MergedGlobals_79);
  if (v27 != 1)
    goto LABEL_176;
LABEL_178:
  if (__stlxr(0, _MergedGlobals_79))
    goto LABEL_179;
  return v4;
}

uint64_t PAL::addToTextEncodingNameMap(char *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 **v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 **v37;
  char *v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;

  result = (uint64_t)strchr(a1, 44);
  if (result)
    return result;
  if (a1)
  {
    result = strcmp(a1, "8859_1");
    if (!(_DWORD)result)
      return result;
  }
  else if (!"8859_1")
  {
    return result;
  }
  v9 = -1640531527;
  v10 = -1879881855;
  v11 = (uint64_t *)qword_1ECE7EBD8;
  v12 = *(_QWORD *)qword_1ECE7EBD8;
  v13 = MEMORY[0x1E0CBF868];
  if (*(_QWORD *)qword_1ECE7EBD8)
  {
    v14 = *(_DWORD *)(v12 - 8);
    v15 = *a3;
    v16 = -1879881855;
    if (*a3)
    {
      v17 = a3 + 1;
      v18 = -1640531527;
      do
      {
        v19 = 1025 * (v18 + *(char *)(MEMORY[0x1E0CBF868] + v15));
        v18 = v19 ^ (v19 >> 6);
        v20 = *v17++;
        v15 = v20;
      }
      while (v20);
      v16 = 9 * v18;
    }
    v21 = (32769 * (v16 ^ (v16 >> 11))) & v14;
    v22 = *(_QWORD *)(v12 + 32 * v21);
    if (v22)
    {
      v23 = 0;
      do
      {
        if (v22 != -1)
        {
          v24 = 0;
          while (1)
          {
            v25 = *(unsigned __int8 *)(v22 + v24);
            v26 = a3[v24];
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v22 + v24)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a3[v24]))
              break;
            ++v24;
            if (v25)
              v27 = v26 == 0;
            else
              v27 = 1;
            if (v27)
            {
              if (v26 | v25)
                break;
              v28 = v12 + 32 * v21;
              if (!*(_QWORD *)(v28 + 24))
                goto LABEL_29;
              a3 = *(unsigned __int8 **)(v28 + 16);
              a4 = *(unsigned __int8 **)(v28 + 24);
              v29 = *a1;
              if (*a1)
                goto LABEL_30;
              goto LABEL_33;
            }
          }
        }
        v21 = (++v23 + (_DWORD)v21) & v14;
        v22 = *(_QWORD *)(v12 + 32 * v21);
      }
      while (v22);
    }
  }
  else
  {
    result = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>>,PAL::TextEncodingNameHash,WTF::HashMap<WTF::ASCIILiteral,WTF::ASCIILiteral,PAL::TextEncodingNameHash,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash((uint64_t *)qword_1ECE7EBD8, 8u);
    v12 = *v11;
    if (!*v11)
    {
      v14 = 0;
      v29 = *a1;
      if (!*a1)
        goto LABEL_33;
      goto LABEL_30;
    }
    v14 = *(_DWORD *)(v12 - 8);
  }
LABEL_29:
  v29 = *a1;
  if (!*a1)
    goto LABEL_33;
LABEL_30:
  v30 = (unsigned __int8 *)(a1 + 1);
  do
  {
    v31 = 1025 * (v9 + *(char *)(v13 + v29));
    v9 = v31 ^ (v31 >> 6);
    v32 = *v30++;
    v29 = v32;
  }
  while (v32);
  v10 = 9 * v9;
LABEL_33:
  v33 = (32769 * (v10 ^ (v10 >> 11))) & v14;
  v34 = (unsigned __int8 **)(v12 + 32 * v33);
  v35 = *v34;
  if (!*v34)
  {
LABEL_49:
    *v34 = (unsigned __int8 *)a1;
    v34[1] = a2;
    v34[2] = a3;
    v34[3] = a4;
    if (*v11)
    {
      ++*(_DWORD *)(*v11 - 12);
      v42 = *v11;
      if (*v11)
        goto LABEL_51;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v42 = *v11;
      if (*v11)
      {
LABEL_51:
        v43 = (*(_DWORD *)(v42 - 16) + *(_DWORD *)(v42 - 12));
        v44 = *(unsigned int *)(v42 - 4);
        if (v44 <= 0x400)
          goto LABEL_52;
        goto LABEL_57;
      }
    }
    v43 = *(unsigned int *)(v42 - 16);
    v44 = *(unsigned int *)(v42 - 4);
    if (v44 <= 0x400)
    {
LABEL_52:
      if (3 * v44 > 4 * v43)
        return result;
      if (!(_DWORD)v44)
      {
        v45 = 8;
        return WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>>,PAL::TextEncodingNameHash,WTF::HashMap<WTF::ASCIILiteral,WTF::ASCIILiteral,PAL::TextEncodingNameHash,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v11, v45);
      }
LABEL_58:
      v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v44));
      return WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>>,PAL::TextEncodingNameHash,WTF::HashMap<WTF::ASCIILiteral,WTF::ASCIILiteral,PAL::TextEncodingNameHash,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v11, v45);
    }
LABEL_57:
    if (v44 > 2 * v43)
      return result;
    goto LABEL_58;
  }
  v36 = 0;
  v37 = 0;
  while (1)
  {
    result = (uint64_t)v37;
    v37 = v34;
    if (v35 != (unsigned __int8 *)-1)
    {
      v38 = a1;
      do
      {
        v39 = *v35;
        v40 = *v38;
        if (*(unsigned __int8 *)(v13 + *v35) != *(unsigned __int8 *)(v13 + *v38))
        {
          v37 = (unsigned __int8 **)result;
          goto LABEL_36;
        }
        ++v38;
        ++v35;
        if (v39)
          v41 = v40 == 0;
        else
          v41 = 1;
      }
      while (!v41);
      v37 = (unsigned __int8 **)result;
      if (!(v40 | v39))
        return result;
    }
LABEL_36:
    v33 = (++v36 + (_DWORD)v33) & v14;
    v34 = (unsigned __int8 **)(v12 + 32 * v33);
    v35 = *v34;
    if (!*v34)
    {
      if (v37)
      {
        *(_OWORD *)v37 = 0u;
        *((_OWORD *)v37 + 1) = 0u;
        --*(_DWORD *)(*v11 - 16);
        v34 = v37;
      }
      goto LABEL_49;
    }
  }
}

void PAL::addToTextCodecMap(unsigned __int8 *a1, uint64_t a2, const char **a3)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t *v22;
  const char **v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  unsigned int v27;
  const char *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  const char **v35;
  const char *v36;
  const char **v37;
  int v38;
  int v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;

  v4 = -1640531527;
  v5 = *(_QWORD *)qword_1ECE7EBD8;
  if (*(_QWORD *)qword_1ECE7EBD8)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *a1;
    if (*a1)
    {
      v8 = a1 + 1;
      v9 = -1640531527;
      do
      {
        v10 = 1025 * (v9 + *(char *)(MEMORY[0x1E0CBF868] + v7));
        v9 = v10 ^ (v10 >> 6);
        v11 = *v8++;
        v7 = v11;
      }
      while (v11);
      v12 = (32769 * ((9 * v9) ^ ((9 * v9) >> 11))) & v6;
      v13 = *(unsigned __int8 **)(v5 + 32 * v12);
      if (!v13)
        goto LABEL_21;
    }
    else
    {
      v12 = v6 & 0xECD739E9;
      v13 = *(unsigned __int8 **)(v5 + 32 * v12);
      if (!v13)
        goto LABEL_21;
    }
    v14 = 0;
    do
    {
      if (v13 != (unsigned __int8 *)-1)
      {
        v15 = a1;
        while (1)
        {
          v16 = *v13;
          v17 = *v15;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v13) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v15))
            break;
          ++v15;
          ++v13;
          if (v16)
            v18 = v17 == 0;
          else
            v18 = 1;
          if (v18)
          {
            if (v17 | v16)
              break;
            v19 = v5 + 32 * v12;
            v20 = *(const char **)(v19 + 16);
            v21 = *(const char **)(v19 + 24);
            v22 = (uint64_t *)qword_1ECE7EBD0;
            v23 = *(const char ***)qword_1ECE7EBD0;
            if (*(_QWORD *)qword_1ECE7EBD0)
              goto LABEL_23;
            goto LABEL_22;
          }
        }
      }
      v12 = (++v14 + (_DWORD)v12) & v6;
      v13 = *(unsigned __int8 **)(v5 + 32 * v12);
    }
    while (v13);
  }
LABEL_21:
  v20 = 0;
  v21 = 0;
  v22 = (uint64_t *)qword_1ECE7EBD0;
  v23 = *(const char ***)qword_1ECE7EBD0;
  if (*(_QWORD *)qword_1ECE7EBD0)
    goto LABEL_23;
LABEL_22:
  WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v22, 8u);
  v23 = (const char **)*v22;
  if (*v22)
  {
LABEL_23:
    v24 = *((_DWORD *)v23 - 2);
    if (v21)
      goto LABEL_24;
LABEL_37:
    v34 = 0;
    v35 = v23;
    v36 = *v23;
    if (!*v23)
      goto LABEL_51;
LABEL_38:
    v37 = 0;
    if (v20)
    {
      v38 = 1;
      while (1)
      {
        if (v36 != (const char *)-1)
        {
          v35 = v37;
          if (!strcmp(v36, v20))
            break;
        }
        v37 = v35;
        v34 = (v34 + v38) & v24;
        v35 = &v23[3 * v34];
        v36 = *v35;
        ++v38;
        if (!*v35)
          goto LABEL_49;
      }
    }
    else
    {
      v39 = 1;
      while (1)
      {
        if (v36 != (const char *)-1)
        {
          v35 = v37;
          if (!v36)
            break;
        }
        v37 = v35;
        v34 = (v34 + v39) & v24;
        v35 = &v23[3 * v34];
        v36 = *v35;
        ++v39;
        if (!*v35)
        {
LABEL_49:
          if (v37)
          {
            *v37 = 0;
            v37[1] = 0;
            v37[2] = 0;
            --*(_DWORD *)(*v22 - 16);
            v35 = v37;
          }
          goto LABEL_51;
        }
      }
    }
    return;
  }
  v24 = 0;
  if (!v21)
    goto LABEL_37;
LABEL_24:
  v25 = (_DWORD)v21 - 1;
  if ((_DWORD)v21 == 1)
    goto LABEL_32;
  if ((_DWORD)v21 == 2)
  {
    v26 = v20;
LABEL_31:
    v30 = (v4 + *(unsigned __int8 *)v26) ^ ((v4 + *(unsigned __int8 *)v26) << 11);
    v4 = v30 + (v30 >> 17);
    goto LABEL_32;
  }
  v27 = v25 >> 1;
  v28 = v20;
  do
  {
    v29 = ((v4 + *(unsigned __int8 *)v28) << 16) ^ (*((unsigned __int8 *)v28 + 1) << 11) ^ (v4 + *(unsigned __int8 *)v28);
    v4 = v29 + (v29 >> 11);
    v28 += 2;
    --v27;
  }
  while (v27);
  if ((v25 & 1) != 0)
  {
    v26 = &v20[2 * (v25 >> 1)];
    goto LABEL_31;
  }
LABEL_32:
  v31 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
  v32 = (v31 ^ (4 * v31)) + ((v31 ^ (4 * v31)) >> 15);
  v33 = v32 ^ (v32 << 10);
  if (!v33)
    v33 = 0x800000;
  v34 = v33 & v24;
  v35 = &v23[3 * (v33 & v24)];
  v36 = *v35;
  if (*v35)
    goto LABEL_38;
LABEL_51:
  *v35 = v20;
  v35[1] = v21;
  v40 = *a3;
  *a3 = 0;
  v41 = v35[2];
  v35[2] = v40;
  if (v41)
    (*(void (**)(const char *))(*(_QWORD *)v41 + 8))(v41);
  if (*v22)
  {
    ++*(_DWORD *)(*v22 - 12);
    v42 = *v22;
    if (*v22)
      goto LABEL_55;
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v42 = *v22;
    if (*v22)
    {
LABEL_55:
      v43 = (*(_DWORD *)(v42 - 16) + *(_DWORD *)(v42 - 12));
      v44 = *(unsigned int *)(v42 - 4);
      if (v44 <= 0x400)
        goto LABEL_56;
LABEL_61:
      if (v44 <= 2 * v43)
        goto LABEL_63;
      return;
    }
  }
  v43 = *(unsigned int *)(v42 - 16);
  v44 = *(unsigned int *)(v42 - 4);
  if (v44 > 0x400)
    goto LABEL_61;
LABEL_56:
  if (3 * v44 <= 4 * v43)
  {
    if (!(_DWORD)v44)
    {
      v45 = 8;
LABEL_64:
      WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v22, v45);
      return;
    }
LABEL_63:
    v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v44));
    goto LABEL_64;
  }
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>>,PAL::TextEncodingNameHash,WTF::HashMap<WTF::ASCIILiteral,WTF::ASCIILiteral,PAL::TextEncodingNameHash,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)((32 * a2) | 0x10));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = MEMORY[0x1E0CBF868];
    while (1)
    {
      v11 = v4 + 32 * v9;
      v12 = *(_BYTE **)v11;
      if ((unint64_t)(*(_QWORD *)v11 + 1) >= 2)
        break;
LABEL_6:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v13 = *a1;
    if (*a1)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v15 = *v12;
      if (*v12)
        goto LABEL_10;
    }
    else
    {
      v14 = 0;
      v15 = *v12;
      if (*v12)
      {
LABEL_10:
        v16 = v12 + 1;
        v17 = -1640531527;
        do
        {
          v18 = 1025 * (v17 + *(char *)(v10 + v15));
          v17 = v18 ^ (v18 >> 6);
          v19 = *v16++;
          v15 = v19;
        }
        while (v19);
        v20 = 9 * v17;
        goto LABEL_15;
      }
    }
    v20 = -1879881855;
LABEL_15:
    v21 = 0;
    v22 = 32769 * (v20 ^ (v20 >> 11));
    do
    {
      v23 = v22 & v14;
      v22 = ++v21 + v23;
    }
    while (*(_QWORD *)(v13 + 32 * v23));
    v24 = (_OWORD *)(v13 + 32 * v23);
    v25 = *(_OWORD *)(v11 + 16);
    *v24 = *(_OWORD *)v11;
    v24[1] = v25;
    goto LABEL_6;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::create@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  *(_QWORD *)(v4 + 16) = 1;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  result = WebCore::FragmentedSharedBuffer::append(v4, a1);
  *a2 = v4;
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::append(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  char v20;

  v4 = *(_QWORD *)(a1 + 48);
  v18 = v4;
  v5 = a2[3];
  if (a2[2] > v5)
  {
    v16 = *(WTF **)a2;
    if ((_DWORD)v5)
    {
      a2[2] = v5;
      *(_QWORD *)a2 = WTF::fastRealloc(v16, (void *)v5);
    }
    else if (v16)
    {
      *(_QWORD *)a2 = 0;
      a2[2] = 0;
      WTF::fastFree(v16, a2);
    }
  }
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v8 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(result + 8) = v8;
  LODWORD(v8) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(result + 16) = v8;
  LODWORD(v8) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(result + 20) = v8;
  *(_DWORD *)(result + 24) = 0;
  v19 = (WTF *)result;
  v9 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 16))
  {
    result = WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>(a1 + 8, (unint64_t)&v18);
  }
  else
  {
    v10 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v9);
    *v10 = v4;
    v11 = v10 + 1;
    do
      v12 = __ldaxr((unsigned int *)result);
    while (__stlxr(v12 + 1, (unsigned int *)result));
    *v11 = result;
    ++*(_DWORD *)(a1 + 20);
  }
  v13 = (unsigned int *)v19;
  v19 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v17 = v13[6];
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v17])(&v20, v13 + 2);
      v13[6] = -1;
      result = WTF::fastFree((WTF *)v13, v7);
    }
  }
  *(_QWORD *)(a1 + 48) += v5;
  return result;
}

uint64_t WebCore::SharedBuffer::data(WebCore::SharedBuffer *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::DocumentWriter *v4;
  char v5;
  char *v6;

  if (!*((_DWORD *)this + 5))
    return 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v2 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::DocumentWriter *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DocumentWriter::end(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6, v1 + 8);
  }
}

uint64_t WebCore::DocumentWriter::end(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _DWORD *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = this;
  *(_BYTE *)(this + 40) = 2;
  if (*(_QWORD *)this)
    v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  else
    v2 = 0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_DWORD **)(this + 32);
  if (v5)
  {
    ++v5[2];
    this = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v5 + 48))(v5, this);
    if (v5[2] == 1)
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
    v6 = *(_DWORD **)(v1 + 32);
    if (v6)
    {
      ++v6[2];
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
      this = *(_QWORD *)(v1 + 32);
      *(_QWORD *)(v1 + 32) = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 8);
      }
    }
  }
  if (v2)
  {
    do
    {
      v7 = __ldaxr(v3);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v3));
    if (!v8)
    {
      atomic_store(1u, v3);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v3;
      v10 = (uint64_t)v9;
      WTF::ensureOnMainThread();
      this = v10;
      if (v10)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::DecodedDataDocumentParser::flush(WebCore::DecodedDataDocumentParser *this, WebCore::DocumentWriter *a2)
{
  WebCore::TextResourceDecoder *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = (WebCore::TextResourceDecoder *)WebCore::DocumentWriter::decoder(a2);
  WebCore::TextResourceDecoder::flush((uint64_t *)&v9, v4);
  result = v9;
  if (v9)
  {
    if (!*((_DWORD *)v9 + 1))
    {
      v9 = 0;
LABEL_4:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      *(_DWORD *)result -= 2;
      return result;
    }
    WebCore::DocumentWriter::reportDataReceived((unsigned int *)a2, (const char *)v5);
    v8 = v9;
    v9 = 0;
    (*(void (**)(WebCore::DecodedDataDocumentParser *, WTF::StringImpl **))(*(_QWORD *)this + 56))(this, &v8);
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = v9;
    v9 = 0;
    if (result)
      goto LABEL_4;
  }
  return result;
}

uint64_t WebCore::TextResourceDecoder::flush(WebCore::TextResourceDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  void *v5;
  uint64_t result;
  WTF *v7;
  _UNKNOWN **v8;
  uint64_t v9;
  _UNKNOWN **v10;
  int v11;
  uint64_t v12;
  _UNKNOWN **v13;
  __int128 v14;
  __int16 v15;

  v2 = *((unsigned int *)this + 21);
  if ((_DWORD)v2)
  {
    if (*((_BYTE *)this + 93))
    {
      v11 = *((_DWORD *)this + 14);
      if ((!v11 || v11 == 7 && *((_QWORD *)this + 8))
        && (!*((_BYTE *)this + 90) && (*((_DWORD *)this + 1) - 1) < 2
         || !*((_BYTE *)this + 89) && *((_DWORD *)this + 1) == 3))
      {
        v14 = 0uLL;
        v13 = &off_1E31F4A18;
        if (PAL::detectTextEncoding(*((_QWORD *)this + 9), v2, *((PAL **)this + 8), (uint64_t)&v13))
        {
          if (!*((_BYTE *)this + 94) && *((_QWORD *)&v14 + 1))
          {
            *((_OWORD *)this + 1) = v14;
            *((_WORD *)this + 16) = v15;
            v12 = *((_QWORD *)this + 5);
            *((_QWORD *)this + 5) = 0;
            if (v12)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            *((_DWORD *)this + 14) = 1;
          }
        }
      }
    }
  }
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    PAL::newTextCodec((WebCore::TextResourceDecoder *)((char *)this + 8), (const PAL::TextEncoding *)v2, &v13);
    v8 = v13;
    v13 = 0;
    v9 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = v13;
      v13 = 0;
      if (v10)
        (*((void (**)(_UNKNOWN **))*v10 + 1))(v10);
    }
    v3 = *((_QWORD *)this + 5);
  }
  v4 = *((_DWORD *)this + 1) == 2 && *((_BYTE *)this + 91) == 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _BOOL8, char *))(*(_QWORD *)v3 + 24))(v3, *((_QWORD *)this + 9), *((unsigned int *)this + 21), 1, v4, (char *)this + 92);
  if (*((_DWORD *)this + 20))
  {
    if (*((_DWORD *)this + 21))
      *((_DWORD *)this + 21) = 0;
    v7 = (WTF *)*((_QWORD *)this + 9);
    if (v7)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v7, v5);
    }
  }
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_BYTE *)this + 88) = 0;
  return result;
}

void WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (unsigned __int8 **)(v4 + 24 * v11);
      v13 = *v12;
      if (*v12 != (unsigned __int8 *)-1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
          {
            v17 = *(_DWORD *)(v16 - 8);
            v18 = v12[1];
            if (v18)
              goto LABEL_15;
LABEL_26:
            v28 = 0;
LABEL_27:
            v29 = 0;
            do
            {
              v30 = v28 & v17;
              v31 = (_QWORD *)(v16 + 24 * (v28 & v17));
              v28 = ++v29 + (v28 & v17);
            }
            while (*v31);
            v32 = v16 + 24 * v30;
            v35 = *(_QWORD *)(v32 + 16);
            v34 = (_QWORD *)(v32 + 16);
            v33 = v35;
            *v34 = 0;
            if (v35)
              (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            *(_OWORD *)v31 = *(_OWORD *)v12;
            v36 = v4 + 24 * v11;
            v37 = *(_QWORD *)(v36 + 16);
            *(_QWORD *)(v36 + 16) = 0;
            *v34 = v37;
            v15 = *(_QWORD *)(v36 + 16);
            *(_QWORD *)(v36 + 16) = 0;
            if (!v15)
              goto LABEL_8;
LABEL_12:
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            goto LABEL_8;
          }
          v17 = 0;
          v18 = v12[1];
          if (!v18)
            goto LABEL_26;
LABEL_15:
          v19 = -1640531527;
          v20 = (_DWORD)v18 - 1;
          if (v20)
          {
            if (v20 == 1)
              goto LABEL_21;
            v21 = v20 >> 1;
            v22 = *v12;
            do
            {
              v23 = v19 + *v22;
              v24 = (v23 << 16) ^ (v22[1] << 11);
              v19 = (v24 ^ v23) + ((v24 ^ v23) >> 11);
              v22 += 2;
              --v21;
            }
            while (v21);
            if ((v20 & 1) != 0)
            {
              v13 += 2 * (v20 >> 1);
LABEL_21:
              v25 = (v19 + *v13) ^ ((v19 + *v13) << 11);
              v19 = v25 + (v25 >> 17);
            }
          }
          v26 = (v19 ^ (8 * v19)) + ((v19 ^ (8 * v19)) >> 5);
          v27 = (v26 ^ (4 * v26)) + ((v26 ^ (4 * v26)) >> 15);
          v28 = v27 ^ (v27 << 10);
          if (!v28)
            v28 = 0x800000;
          goto LABEL_27;
        }
        v14 = v4 + 24 * v11;
        v15 = *(_QWORD *)(v14 + 16);
        *(_QWORD *)(v14 + 16) = 0;
        if (v15)
          goto LABEL_12;
      }
LABEL_8:
      if (++v11 == v5)
        goto LABEL_34;
    }
  }
  if (v4)
LABEL_34:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::cachedSystemHasAC(WebCore *this)
{
  return (unsigned __int16)WebCore::hasAC;
}

int32x2_t *WebCore::IntRect::intersect(int32x2_t *this, int32x2_t *a2)
{
  int32x2_t v2;
  int32x2_t v3;
  int32x2_t v4;

  v2 = vmax_s32(*this, *a2);
  v3 = vmin_s32(vadd_s32(a2[1], *a2), vadd_s32(this[1], *this));
  v4 = vcgt_s32(v3, v2);
  if ((v4.i32[0] & v4.i32[1] & 1) == 0)
  {
    v3 = 0;
    v2 = 0;
  }
  *this = v2;
  this[1] = vsub_s32(v3, v2);
  return this;
}

uint64_t *WebCore::CrossOriginAccessControlCheckDisabler::singleton(WebCore::CrossOriginAccessControlCheckDisabler *this)
{
  {
    WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler = (uint64_t)&off_1E33F3298;
    unk_1ECE90770 = 1;
  }
  return &WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler;
}

void WebCore::SelectorCompiler::compileSelector(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  WebCore *v3;
  const WebCore::CSSSelector *v4;
  int **v5;
  void *v6;
  _QWORD v7[862];

  v2 = (_BYTE *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = (int **)v2;
  v7[861] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
  {
    WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)v7, v3, v4);
    *(_BYTE *)v5 = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)v7, v5 + 1);
    WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)v7, v6);
  }
  else
  {
    *v2 = 1;
  }
}

uint32x2_t WebCore::SelectorCompiler::computeBacktrackingMemoryRequirements(uint32x2_t *this, WebCore::SelectorCompiler::SelectorFragmentList *a2)
{
  char v2;
  const WebCore::SelectorCompiler::SelectorFragment *v4;
  uint32x2_t result;
  unsigned __int32 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  __int128 v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint32x2_t *v22;
  uint32x2_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  __int128 v29;
  int v30;
  uint32x2_t *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint32x2_t v40[3];
  __int128 v41;
  unsigned int v42;
  unsigned int v43;

  v2 = (char)a2;
  this[250] = (uint32x2_t)6;
  this[251].i8[4] = WebCore::SelectorCompiler::hasAnyCombinators<4ul>(this);
  v6 = this[1].u32[1];
  if (v6)
  {
    v7 = (uint64_t)*this;
    v8 = *(_QWORD *)this + 496 * v6;
    do
    {
      v10 = WebCore::SelectorCompiler::minimumRegisterRequirements(v7, v4);
      if ((v2 & 1) != 0)
        v11 = 1;
      else
        v11 = (*(unsigned __int8 *)(v7 + 28) >> 6) & 1;
      v12 = *(_DWORD *)(v7 + 428);
      if (v12)
      {
        v13 = 0;
        v22 = *(uint32x2_t **)(v7 + 416);
        v23 = &v22[252 * v12];
        v14 = 0uLL;
        do
        {
          *(_OWORD *)v40[0].i8 = v14;
          WebCore::SelectorCompiler::computeBacktrackingMemoryRequirements((WebCore::SelectorCompiler *)v22, (WebCore::SelectorCompiler::SelectorFragmentList *)v11, v9);
          v13 = v13 || v22[251].i8[4] != 0;
          *((uint32x2_t *)&v14 + 1) = v40[1];
          *(uint32x2_t *)&v14 = vmax_u32(v40[0], v22[250]);
          v22 += 252;
        }
        while (v22 != v23);
      }
      else
      {
        v13 = 0;
        *(_QWORD *)&v14 = 0;
      }
      v15 = v14;
      if (v10 <= v14)
        v16 = v14;
      else
        v16 = v10;
      v43 = v16;
      v42 = DWORD1(v14);
      if (v14 <= 6)
        v15 = 6;
      *(_DWORD *)(v7 + 432) = v15;
      *(_DWORD *)(v7 + 436) = DWORD1(v14);
      *(_BYTE *)(v7 + 440) = v13;
      v17 = *(unsigned int *)(v7 + 460);
      if ((_DWORD)v17)
      {
        v24 = DWORD1(v14);
        v25 = *(_QWORD *)(v7 + 448);
        v26 = v25 + 32 * v17;
        do
        {
          v27 = *(_DWORD *)(v25 + 12);
          if (v27)
          {
            v28 = 0;
            v31 = *(uint32x2_t **)v25;
            v37 = *(_QWORD *)v25 + 2016 * v27;
            v38 = v26;
            v29 = 0uLL;
            do
            {
              v39 = v28;
              v41 = v29;
              WebCore::SelectorCompiler::computeBacktrackingMemoryRequirements((WebCore::SelectorCompiler *)v31, (WebCore::SelectorCompiler::SelectorFragmentList *)v11, v9);
              v28 = v39 || v31[251].i8[4] != 0;
              *((_QWORD *)&v32 + 1) = *((_QWORD *)&v41 + 1);
              *(uint32x2_t *)&v32 = vmax_u32(*(uint32x2_t *)&v41, v31[250]);
              v29 = v32;
              v31 += 252;
              v26 = v38;
            }
            while (v31 != (uint32x2_t *)v37);
          }
          else
          {
            v28 = 0;
            *(_QWORD *)&v29 = 0;
          }
          v30 = v29;
          if (v16 <= v29)
            v16 = v29;
          if (v24 <= DWORD1(v29))
            v24 = DWORD1(v29);
          if (v29 <= 6)
            v30 = 6;
          *(_DWORD *)(v25 + 16) = v30;
          *(_DWORD *)(v25 + 20) = DWORD1(v29);
          *(_BYTE *)(v25 + 24) = v28;
          v25 += 32;
        }
        while (v25 != v26);
        v42 = v24;
        v43 = v16;
      }
      v18 = *(unsigned int *)(v7 + 364);
      if ((_DWORD)v18)
      {
        v33 = 40 * v18;
        v34 = *(_QWORD *)(v7 + 352) + 8;
        do
        {
          WebCore::SelectorCompiler::computeBacktrackingMemoryRequirements(v34, (WebCore::SelectorCompiler::SelectorList *)&v43, &v42, (WebCore::SelectorCompiler::SelectorFragmentList *)v11);
          v34 += 40;
          v33 -= 40;
        }
        while (v33);
      }
      v19 = *(unsigned int *)(v7 + 412);
      if ((_DWORD)v19)
      {
        v35 = 40 * v19;
        v36 = *(_QWORD *)(v7 + 400) + 8;
        do
        {
          WebCore::SelectorCompiler::computeBacktrackingMemoryRequirements(v36, (WebCore::SelectorCompiler::SelectorList *)&v43, &v42, (WebCore::SelectorCompiler::SelectorFragmentList *)v11);
          v36 += 40;
          v35 -= 40;
        }
        while (v35);
      }
      v20 = *(_BYTE *)(v7 + 28);
      if ((v20 & 0x40) != 0)
      {
        if ((v2 & 1) != 0)
          ++v42;
        else
          ++v43;
      }
      if (v20 < 0)
        v21 = v42 + 1;
      else
        v21 = v42;
      result = vmax_u32(this[250], (uint32x2_t)__PAIR64__(v21, v43));
      this[250] = result;
      v7 += 496;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t WebCore::SelectorCompiler::minimumRegisterRequirements(uint64_t a1, const WebCore::SelectorCompiler::SelectorFragment *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SelectorCompiler *v14;
  uint64_t v15;
  unsigned int v16;

  v2 = *(unsigned int *)(a1 + 252);
  if ((_DWORD)v2)
  {
    v6 = 0;
    v7 = (_DWORD *)(*(_QWORD *)(a1 + 240) + 8);
    LODWORD(v3) = 5;
    do
    {
      if (++v6 < v2)
        v8 = 8;
      else
        v8 = 6;
      v9 = *((_QWORD *)v7 - 1);
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 32);
      if (*(_QWORD *)(v10 + 16) != WebCore::starAtomData && *(_QWORD *)(v10 + 32)
        || *v7 && (*v7 != 2 || (*(_DWORD *)v9 & 0x1F0) == 0x40))
      {
        v8 |= 1u;
      }
      if (v3 <= v8)
        v3 = v8;
      else
        v3 = v3;
      v7 += 4;
    }
    while (v2 != v6);
  }
  else
  {
    v3 = 5;
  }
  if (*(_DWORD *)(a1 + 332) | *(_DWORD *)(a1 + 364) || *(_DWORD *)(a1 + 380) | *(_DWORD *)(a1 + 412))
  {
    if (v3 <= 6)
      v3 = 6;
    else
      v3 = v3;
  }
  v4 = *(unsigned int *)(a1 + 476);
  if ((_DWORD)v4)
  {
    v11 = *(_QWORD *)(a1 + 464);
    v12 = v11 + 16 * v4;
    do
    {
      v13 = *(unsigned int *)(v11 + 12);
      if ((_DWORD)v13)
      {
        v14 = *(WebCore::SelectorCompiler **)v11;
        v15 = 496 * v13;
        do
        {
          v16 = WebCore::SelectorCompiler::minimumRegisterRequirements(v14, a2);
          if (v3 <= v16)
            v3 = v16;
          else
            v3 = v3;
          v14 = (WebCore::SelectorCompiler *)((char *)v14 + 496);
          v15 -= 496;
        }
        while (v15);
      }
      v11 += 16;
    }
    while (v11 != v12);
  }
  return v3;
}

BOOL WebCore::SelectorCompiler::hasAnyCombinators<4ul>(_DWORD *a1)
{
  int v1;
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = a1[3];
  if (v1 != 1)
    return v1 != 0;
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 428);
  if ((_DWORD)v5)
  {
    v9 = *(_QWORD *)(v4 + 416);
    v10 = 2016 * v5;
    do
    {
      if ((WebCore::SelectorCompiler::hasAnyCombinators<4ul>(v9) & 1) != 0)
        return 1;
      v9 += 2016;
      v10 -= 2016;
    }
    while (v10);
    if (!a1[3])
      goto LABEL_43;
    v4 = *(_QWORD *)a1;
  }
  v6 = *(unsigned int *)(v4 + 460);
  if (!(_DWORD)v6)
  {
LABEL_6:
    v7 = *(_DWORD *)(v4 + 364);
    if (!v7)
      goto LABEL_7;
    v16 = *(_QWORD *)(v4 + 352);
    v17 = v16 + 40 * v7;
    do
    {
      v18 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v18)
      {
        v22 = *(_QWORD *)(v16 + 8);
        v23 = 2016 * v18;
        do
        {
          v24 = v16;
          if ((WebCore::SelectorCompiler::hasAnyCombinators<4ul>(v22) & 1) != 0)
            return 1;
          v22 += 2016;
          v23 -= 2016;
          v16 = v24;
        }
        while (v23);
      }
      v16 += 40;
    }
    while (v16 != v17);
    if (a1[3])
    {
      v4 = *(_QWORD *)a1;
LABEL_7:
      v8 = *(_DWORD *)(v4 + 412);
      if (!v8)
        return 0;
      v19 = *(_QWORD *)(v4 + 400);
      v20 = v19 + 40 * v8;
      while (1)
      {
        v21 = *(unsigned int *)(v19 + 20);
        if ((_DWORD)v21)
          break;
LABEL_30:
        result = 0;
        v19 += 40;
        if (v19 == v20)
          return result;
      }
      v25 = *(_QWORD *)(v19 + 8);
      v26 = 2016 * v21;
      while (1)
      {
        v27 = v20;
        if ((WebCore::SelectorCompiler::hasAnyCombinators<4ul>(v25) & 1) != 0)
          return 1;
        v25 += 2016;
        v26 -= 2016;
        v20 = v27;
        if (!v26)
          goto LABEL_30;
      }
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x19411E200);
  }
  v11 = *(uint64_t **)(v4 + 448);
  v12 = &v11[4 * v6];
  while (1)
  {
    v13 = *((unsigned int *)v11 + 3);
    if ((_DWORD)v13)
      break;
LABEL_16:
    v11 += 4;
    if (v11 == v12)
    {
      if (!a1[3])
      {
        __break(0xC471u);
        JUMPOUT(0x19411E208);
      }
      v4 = *(_QWORD *)a1;
      goto LABEL_6;
    }
  }
  v14 = *v11;
  v15 = 2016 * v13;
  while ((WebCore::SelectorCompiler::hasAnyCombinators<4ul>(v14) & 1) == 0)
  {
    v14 += 2016;
    v15 -= 2016;
    if (!v15)
      goto LABEL_16;
  }
  return 1;
}

uint64_t WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  __int128 v16;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v13 = 24 * v9;
      v14 = v5;
      do
      {
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_BYTE *)(v11 + 16) = -1;
        v15 = (*(unsigned __int8 *)(v11 + 19) << 16) | 0xF0000;
        *(_WORD *)(v11 + 17) = 65;
        *(_BYTE *)(v11 + 19) = BYTE2(v15);
        *(_WORD *)(v11 + 20) &= 0xFC00u;
        v16 = *(_OWORD *)v14;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v11 = v16;
        v11 += 24;
        v14 = (WTF *)((char *)v14 + 24);
        v13 -= 24;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

WebCore::DisplayList::FillRectWithGradient *WebCore::DisplayList::FillRectWithGradient::FillRectWithGradient(WebCore::DisplayList::FillRectWithGradient *this, const WebCore::FloatRect *a2, WebCore::Gradient *a3)
{
  uint64_t v5;
  int v7;

  *(_OWORD *)this = *(_OWORD *)a2;
  v5 = *((_QWORD *)a3 + 1);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_10:
  *((_QWORD *)this + 2) = a3;
  return this;
}

{
  uint64_t v5;
  int v7;

  *(_OWORD *)this = *(_OWORD *)a2;
  v5 = *((_QWORD *)a3 + 1);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_3;
LABEL_4:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_9:
  *((_QWORD *)this + 2) = a3;
  return this;
}

uint64_t WebCore::DatabaseManager::setIsAvailable(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t WTF::switchOn<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>> &,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &&)::$_0,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_1,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_2,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_3,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_4,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_5,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_6>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  WebCore::XMLHttpRequest *v11;
  const WTF::String *v12;
  _QWORD v13[7];
  _QWORD *v14;

  v13[0] = a3;
  v13[1] = a4;
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a8;
  v13[6] = a9;
  v9 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v9 == -1)
  {
    v11 = (WebCore::XMLHttpRequest *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::XMLHttpRequest::send(v11, v12);
  }
  else
  {
    v14 = v13;
    return ((uint64_t (*)(_QWORD **))off_1E3483F40[v9])(&v14);
  }
}

void WebCore::XMLHttpRequest::send(WebCore::XMLHttpRequest *this, const WTF::String *a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF::String *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WebCore::FormData *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  char v22;
  char v23;

  WebCore::XMLHttpRequest::prepareToSend((WebCore::XMLHttpRequest *)&v20, (uint64_t)a2);
  if (v23)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    if (v22)
    {
      *(_BYTE *)this = (_BYTE)v20;
      v17 = v21;
      v21 = 0;
      *((_QWORD *)this + 1) = v17;
      *((_BYTE *)this + 16) = 1;
    }
    std::optional<WebCore::ExceptionOr<void>>::~optional((uint64_t)&v20, v6);
  }
  else
  {
    std::optional<WebCore::ExceptionOr<void>>::~optional((uint64_t)&v20, v6);
    if (*a3
      && (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 21), "GET", 3) & 1) == 0
      && (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 21), "HEAD", 4) & 1) == 0)
    {
      v7 = WebCore::HTTPHeaderMap::get((unsigned int *)a2 + 44, 26, &v19);
      if (v19)
      {
        v9 = &v19;
        WebCore::replaceCharsetInMediaTypeIfNeeded(&v19, v8);
      }
      else
      {
        v9 = (WTF::StringImpl **)WebCore::HTTPHeaderValues::textPlainContentType((WebCore::HTTPHeaderValues *)v7);
      }
      WebCore::HTTPHeaderMap::set((const WTF::String *)((char *)a2 + 176), (WTF::StringImpl *)0x1A, v9);
      v10 = *a3;
      if (*a3)
      {
        v11 = *(_QWORD *)(v10 + 8);
        v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v11 = 0;
        v12 = 0x100000000;
      }
      PAL::TextCodecUTF8::encodeUTF8(v11, v12, (uint64_t)&v20);
      WebCore::FormData::create((uint64_t *)&v20, &v18);
      v14 = (WebCore::FormData *)*((_QWORD *)a2 + 26);
      *((_QWORD *)a2 + 26) = v18;
      if (v14)
        WTF::RefCounted<WebCore::FormData>::deref(v14, v13);
      v15 = v20;
      if (v20)
      {
        v20 = 0;
        LODWORD(v21) = 0;
        WTF::fastFree(v15, v13);
      }
      if (*((_QWORD *)a2 + 11))
        *(_BYTE *)(*((_QWORD *)a2 + 26) + 32) = 1;
      v16 = v19;
      v19 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v13);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    WebCore::XMLHttpRequest::createRequest(this, (uint64_t)a2);
  }
}

unsigned int *WebCore::HTTPHeaderMap::get@<X0>(unsigned int *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _DWORD **v5;
  _DWORD *v6;

  v3 = result[3];
  if (!(_DWORD)v3)
  {
LABEL_5:
    v6 = 0;
LABEL_6:
    *a3 = v6;
    return result;
  }
  v4 = 0;
  v5 = (_DWORD **)(*(_QWORD *)result + 8);
  while (*((unsigned __int16 *)v5 - 4) != a2)
  {
    ++v4;
    v5 += 2;
    if (v3 == v4)
      goto LABEL_5;
  }
  if (v4 < v3)
  {
    v6 = *v5;
    if (*v5)
      *v6 += 2;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

PAL *PAL::TextEncoding::encodeForURLParsing@<X0>(PAL *result@<X0>, const PAL::TextEncoding *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  BOOL v4;
  PAL *v7;

  if (*((_QWORD *)result + 2))
    v4 = a3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    PAL::newTextCodec(result, a2, &v7);
    (*(void (**)(PAL *, const PAL::TextEncoding *, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2, a3, 1);
    result = v7;
    v7 = 0;
    if (result)
      return (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF *PAL::decodeURLEscapeSequencesAsData(uint64_t a1, char *a2, unint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v19;
  int v21;
  int v23;
  unsigned int v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  WTF *v31;
  WTF *result;
  unsigned int v33;
  char v34;
  unsigned int v35;
  char *v36;
  WTF *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  unsigned int v51;
  size_t v52;
  size_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  int16x8_t v57;
  int8x16_t v58;
  char *v59;
  unint64_t v60;
  int16x8_t v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  _BYTE v67[512];
  uint64_t v68;

  v6 = 0;
  LODWORD(v7) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = a3;
  v64 = a3 & 0xFF00000000;
LABEL_2:
  LODWORD(v9) = v7;
LABEL_3:
  if (v64)
  {
    if (a3 > v6)
    {
      v10 = v8 - v6;
      v11 = 16;
      if (v10 < 0x10)
        v11 = v8 - v6;
      if (v11)
      {
        v12 = v11;
        v13 = &a2[v6];
        while (*v13 != 37)
        {
          ++v13;
          if (!--v12)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        if (v10 < 0x11)
          goto LABEL_150;
        v13 = (char *)memchr(&a2[v6 + v11], 37, v10 - v11);
        if (!v13)
          goto LABEL_150;
      }
      v14 = v13 - a2;
      goto LABEL_14;
    }
    goto LABEL_150;
  }
  if (v8 > v6)
  {
    v15 = (unint64_t)&a2[2 * v8];
    v10 = (unint64_t)&a2[2 * v6];
    v11 = v15 - v10;
    if ((uint64_t)(v15 - v10) > -2)
    {
      if (v11 <= 0x3E)
        goto LABEL_167;
      if (v10 + 14 >= v15)
      {
        v59 = &a2[2 * v6];
LABEL_171:
        if ((unint64_t)v59 >= v15)
          goto LABEL_150;
        v10 = v15 - 16;
        v61.i64[0] = 0x25002500250025;
        v61.i64[1] = 0x25002500250025;
        v58 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v15 - 16), v61);
        v61.i16[0] = vmaxvq_u16((uint16x8_t)v58);
        if (!v61.i32[0])
          goto LABEL_150;
      }
      else
      {
        while (1)
        {
          v57.i64[0] = 0x25002500250025;
          v57.i64[1] = 0x25002500250025;
          v58 = (int8x16_t)vceqq_s16(*(int16x8_t *)v10, v57);
          v57.i16[0] = vmaxvq_u16((uint16x8_t)v58);
          if (v57.i32[0])
            break;
          v59 = (char *)(v10 + 16);
          v60 = v10 + 30;
          v10 += 16;
          if (v60 >= v15)
            goto LABEL_171;
        }
      }
      v11 = vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v58));
      v10 += 2 * v11;
      goto LABEL_174;
    }
    goto LABEL_166;
  }
  while (1)
  {
LABEL_150:
    LODWORD(v7) = 0;
    LODWORD(v14) = -1;
    while (2)
    {
      v63 = 1;
LABEL_60:
      {
        PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
        *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", a2);
        *((_QWORD *)&xmmword_1ECE86C80 + 1) = a2;
        v65 = (WTF *)xmmword_1ECE86C80;
        v66 = (uint64_t)a2;
        if (a2 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
        {
          if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v65))
          {
            v62 = 165;
          }
          else
          {
            v62 = 92;
          }
        }
        else
        {
          v62 = 92;
        }
        word_1ECE86C90 = v62;
      }
      if (a3 <= v9)
      {
LABEL_71:
        v28 = 0;
        v65 = 0;
        v66 = 0;
        goto LABEL_72;
      }
      v24 = v14 - v9;
      if ((int)a3 - (int)v9 <= (v14 - v9))
      {
        v26 = a2;
        v25 = a3;
        if (!(_DWORD)v9)
          goto LABEL_66;
        v24 = a3 - v9;
      }
      v15 = v9;
      v25 = v24;
      v10 = v8 - v9;
      v11 = v64;
      if (v64)
      {
        if (v10 < v25)
          goto LABEL_166;
        v26 = &a2[v9];
        v25 |= 0x100000000uLL;
      }
      else
      {
        if (v10 < v25)
          goto LABEL_166;
        v26 = &a2[2 * v9];
      }
LABEL_66:
      if (!(_DWORD)v25 || !*((_QWORD *)&xmmword_1ECE86C80 + 1))
        goto LABEL_71;
      PAL::newTextCodec((PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, (const PAL::TextEncoding *)a2, &v68);
      (*(void (**)(WTF **__return_ptr, uint64_t, char *, unint64_t, uint64_t))(*(_QWORD *)v68 + 32))(&v65, v68, v26, v25, 1);
      v27 = v68;
      v68 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      v28 = HIDWORD(v66);
LABEL_72:
      v29 = *(unsigned int *)(a1 + 8);
      v30 = *(unsigned int *)(a1 + 12);
      v31 = (WTF *)(v28 + v30);
      if (v28 + v30 > v29)
      {
        v46 = v29 + (v29 >> 2);
        if (v46 >= 0x10)
          v47 = v46 + 1;
        else
          v47 = 16;
        if (v47 <= (unint64_t)v31)
          v48 = (unint64_t)v31;
        else
          v48 = v47;
        if (HIDWORD(v48))
          goto LABEL_184;
        v49 = *(void **)a1;
        v50 = (void *)WTF::fastMalloc((WTF *)v48);
        *(_DWORD *)(a1 + 8) = v48;
        *(_QWORD *)a1 = v50;
        memcpy(v50, v49, v30);
        if (v49)
        {
          if (*(void **)a1 == v49)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v49, a2);
        }
        v28 = HIDWORD(v66);
      }
      result = v65;
      if (v28)
      {
        v33 = *(_DWORD *)(a1 + 12);
        do
        {
          v34 = *(_BYTE *)result;
          result = (WTF *)((char *)result + 1);
          *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
          v33 = *(_DWORD *)(a1 + 12) + 1;
          *(_DWORD *)(a1 + 12) = v33;
          --v28;
        }
        while (v28);
        result = v65;
      }
      if (result)
      {
        v65 = 0;
        LODWORD(v66) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      if ((v63 & 1) != 0)
        return result;
      if (a3 <= v14)
      {
        v45 = v67;
        v65 = (WTF *)v67;
        LODWORD(v66) = 512;
        v37 = (WTF *)v67;
        goto LABEL_143;
      }
      v35 = v7 - v14;
      if ((int)a3 - (int)v14 <= (v7 - v14))
      {
        v36 = a2;
        v9 = a3;
        if (!(_DWORD)v14)
          goto LABEL_85;
        v35 = a3 - v14;
      }
      v15 = v14;
      v9 = v35;
      v10 = v8 - v14;
      v11 = v64;
      if (v64)
      {
        if (v10 >= v9)
        {
          v36 = &a2[v14];
          v9 |= 0x100000000uLL;
LABEL_85:
          v37 = (WTF *)v67;
          v65 = (WTF *)v67;
          v66 = 512;
          if (v9 >= 0x201uLL)
          {
            if (v9 <= 0x281uLL)
              v56 = 641;
            else
              v56 = v9;
            v37 = (WTF *)WTF::fastMalloc((WTF *)v56);
            LODWORD(v66) = v56;
            v65 = v37;
          }
          HIDWORD(v66) = v9;
          if (!(_DWORD)v9)
          {
            LODWORD(v45) = (_DWORD)v37;
            goto LABEL_143;
          }
          v15 = v9;
          while (1)
          {
            v10 = v9 & 0xFF00000000;
            if ((v9 & 0xFF00000000) != 0)
            {
              v11 = *v36;
              if ((_DWORD)v11 != 37)
              {
                *(_BYTE *)v37 = v11;
                if (v15 < 2)
                  goto LABEL_141;
                v10 = (v15 - 1);
                v15 = v15 - 1;
                if (v15 < v10)
                  break;
                ++v36;
                v9 = v10 | 0x100000000;
                goto LABEL_111;
              }
              if (v15 <= 2)
                break;
              v43 = v36[1];
              if (v43 >= 0x41)
                v44 = 9;
              else
                v44 = 0;
              v40 = v44 + v43;
              v41 = v36[2];
            }
            else
            {
              v11 = *(unsigned __int16 *)v36;
              if ((_DWORD)v11 != 37)
              {
                *(_BYTE *)v37 = v11;
                v9 = (v15 - 1);
                if (v15 <= 1)
                  goto LABEL_141;
                v15 = v15 - 1;
                if (v15 < v9)
                  break;
                v36 += 2;
                goto LABEL_111;
              }
              if (v15 <= 2)
                break;
              v38 = *((unsigned __int16 *)v36 + 1);
              if (v38 >= 0x41)
                v39 = 9;
              else
                v39 = 0;
              v40 = v39 + v38;
              v41 = *((unsigned __int16 *)v36 + 2);
            }
            if (v41 >= 0x41)
              v42 = ((_BYTE)v41 + 9) & 0xF;
            else
              v42 = v41 - 48;
            v11 = v42 | (16 * v40);
            *(_BYTE *)v37 = v11;
            if (v15 < 4)
            {
LABEL_141:
              LODWORD(v37) = (_DWORD)v37 + 1;
LABEL_142:
              LODWORD(v45) = (_DWORD)v37;
              v37 = v65;
LABEL_143:
              v51 = (_DWORD)v45 - (_DWORD)v37;
              HIDWORD(v66) = v51;
              if (!v51)
                goto LABEL_146;
              v52 = v51;
              v53 = *(unsigned int *)(a1 + 12);
              v54 = v52 + v53;
              if (v52 + v53 <= *(unsigned int *)(a1 + 8))
                goto LABEL_145;
              v55 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(a1, (WTF *)(v52 + v53), (uint64_t)v37);
              v53 = *(unsigned int *)(a1 + 12);
              if (v54 < v53)
              {
LABEL_184:
                __break(0xC471u);
                JUMPOUT(0x19411EF2CLL);
              }
              v37 = (WTF *)v55;
LABEL_145:
              memcpy((void *)(*(_QWORD *)a1 + v53), v37, v52);
              *(_DWORD *)(a1 + 12) = v54;
              v37 = v65;
LABEL_146:
              if (v67 != (_BYTE *)v37)
              {
                if (v37)
                {
                  v65 = 0;
                  LODWORD(v66) = 0;
                  WTF::fastFree(v37, a2);
                }
              }
              goto LABEL_2;
            }
            v9 = (v15 - 3);
            v15 = v15 - 3;
            if (v10)
            {
              if (v15 < v9)
                break;
              v36 += 3;
              v9 |= 0x100000000uLL;
            }
            else
            {
              if (v15 < v9)
                break;
              v36 += 6;
            }
LABEL_111:
            v37 = (WTF *)((char *)v37 + 1);
            v15 = v9;
            if (!(_DWORD)v9)
              goto LABEL_142;
          }
        }
      }
      else if (v10 >= v9)
      {
        v36 = &a2[2 * v14];
        goto LABEL_85;
      }
LABEL_166:
      __break(1u);
LABEL_167:
      while (*(_WORD *)v10 != 37)
      {
        v10 += 2;
        LODWORD(v14) = -1;
        v11 -= 2;
        if (!v11)
        {
          v63 = 1;
          LODWORD(v7) = 0;
          goto LABEL_60;
        }
      }
LABEL_174:
      if (v10 != v15)
      {
        v14 = (uint64_t)(v10 - (_QWORD)a2) >> 1;
LABEL_14:
        if (v14 == -1)
        {
          LODWORD(v7) = 0;
          continue;
        }
        if (v14 < v8)
        {
          v15 = v64;
          if (!v64)
          {
            v7 = v14;
            while (a3 > v7)
            {
              v10 = *(unsigned __int16 *)&a2[2 * v7];
              if ((_DWORD)v10 == 37)
              {
                if (v8 - v7 < 3)
                  goto LABEL_38;
                v15 = (v7 + 1);
                if (v15 >= a3)
                  goto LABEL_166;
                v16 = *(unsigned __int16 *)&a2[2 * v15];
                v10 = (v16 - 48);
                v17 = (v16 | 0x20) - 97;
                if (v10 >= 0xA && v17 > 5)
                  goto LABEL_38;
                v15 = (v7 + 2);
                if (v15 >= a3)
                  goto LABEL_166;
                v19 = *(unsigned __int16 *)&a2[2 * v15];
                v10 = (v19 - 48);
                if (v10 >= 0xA && (v19 | 0x20u) - 97 > 5)
                  goto LABEL_38;
                v15 = 0;
                v7 += 3;
              }
              else
              {
                if (v10 < 0x40)
                  goto LABEL_38;
                if (v10 > 0x7F || (int)v15 > 1)
                  goto LABEL_38;
                ++v7;
                v15 = (v15 + 1);
              }
              if (v7 >= v8)
                goto LABEL_38;
            }
            goto LABEL_166;
          }
          v15 = 0;
          v7 = v14;
          while (1)
          {
            if (a3 <= v7)
              goto LABEL_166;
            v10 = a2[v7];
            if ((_DWORD)v10 == 37)
            {
              if (v8 - v7 < 3)
                goto LABEL_38;
              v15 = v7;
              v10 = v7 + 1;
              if (v10 >= a3)
                goto LABEL_166;
              v21 = a2[v10];
              v11 = (v21 - 48);
              v10 = (v21 | 0x20u) - 97;
              if (v11 >= 0xA && v10 >= 6)
                goto LABEL_38;
              v15 = v7 + 2;
              if (v15 >= a3)
                goto LABEL_166;
              v23 = a2[v15];
              v10 = (v23 - 48);
              if (v10 >= 0xA && (v23 | 0x20u) - 97 >= 6)
              {
LABEL_38:
                if (v7 != v14)
                {
                  v63 = 0;
                  v6 = v7;
                  goto LABEL_60;
                }
                break;
              }
              v15 = 0;
              v7 += 3;
            }
            else
            {
              if (v10 < 0x40 || (v10 & 0x80) != 0 || (int)v15 > 1)
                goto LABEL_38;
              ++v7;
              v15 = (v15 + 1);
            }
            if (v7 >= v8)
              goto LABEL_38;
          }
        }
        v6 = v14 + 1;
        goto LABEL_3;
      }
      break;
    }
  }
}

_QWORD *PAL::newTextCodec@<X0>(PAL *this@<X0>, const PAL::TextEncoding *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  BOOL v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  _QWORD *result;
  int v17;
  const char *v18;
  int v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (__ldaxr(_MergedGlobals_79))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_79))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](_MergedGlobals_79, a2);
LABEL_5:
  v6 = *((_QWORD *)this + 2);
  if (!v6)
  {
    v15 = qword_1EE2D4380;
    if (!os_log_type_enabled((os_log_t)qword_1EE2D4380, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    LOWORD(v20) = 0;
    v12 = "Trying to create new text codec with invalid (null) encoding name. Will default to UTF-8.";
    v13 = v15;
    v14 = 2;
    goto LABEL_26;
  }
  v7 = *((_QWORD *)this + 1);
  *(_QWORD *)&v20 = v7;
  *((_QWORD *)&v20 + 1) = v6;
  v8 = *(_QWORD *)qword_1ECE7EBD0;
  if (!*(_QWORD *)qword_1ECE7EBD0
    || ((v9 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(*(const char ***)qword_1ECE7EBD0, (const char **)&v20)) != 0? (v10 = v9 == (const char **)(v8 + 24 * *(unsigned int *)(v8 - 4))): (v10 = 1), v10))
  {
    v11 = qword_1EE2D4380;
    if (!os_log_type_enabled((os_log_t)qword_1EE2D4380, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    LODWORD(v20) = 136446210;
    *(_QWORD *)((char *)&v20 + 4) = v7;
    v12 = "Can't find codec for valid encoding %{public}s. Will default to UTF-8.";
    goto LABEL_14;
  }
  v18 = v9[2];
  if (v18)
  {
    result = (_QWORD *)(*(uint64_t (**)(const char *))(*(_QWORD *)v18 + 16))(v18);
    v19 = __ldxr(_MergedGlobals_79);
    if (v19 != 1)
      goto LABEL_21;
    goto LABEL_17;
  }
  v11 = qword_1EE2D4380;
  if (os_log_type_enabled((os_log_t)qword_1EE2D4380, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v20) = 136446210;
    *(_QWORD *)((char *)&v20 + 4) = v7;
    v12 = "Codec for encoding %{public}s is null. Will default to UTF-8";
LABEL_14:
    v13 = v11;
    v14 = 12;
LABEL_26:
    _os_log_error_impl(&dword_1940B8000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v20, v14);
  }
LABEL_16:
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  result[1] = 0;
  result[2] = 0;
  *result = off_1E31F49B8;
  *a3 = result;
  v17 = __ldxr(_MergedGlobals_79);
  if (v17 != 1)
  {
LABEL_21:
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_79);
  }
LABEL_17:
  if (__stlxr(0, _MergedGlobals_79))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_79);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<PAL::TextCodecUTF8::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_0,std::unique_ptr<PAL::TextCodec>>::call@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  result[1] = 0;
  result[2] = 0;
  *result = off_1E31F49B8;
  *a1 = result;
  return result;
}

uint64_t PAL::TextCodecUTF8::encodeUTF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v4 = (unsigned __int16 *)result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = a2;
  if (!(_DWORD)a2)
  {
    result = 0;
    v8 = a2 & 0xFF00000000;
    v9 = v4;
    if ((a2 & 0xFF00000000) == 0)
      v9 = v4;
    if (v9 != v4)
      goto LABEL_6;
LABEL_15:
    *(_DWORD *)(a3 + 12) = 0;
    return result;
  }
  if (a2 >= 0x55555556uLL)
  {
    __break(0xC471u);
    return result;
  }
  v7 = 3 * a2;
  result = WTF::fastMalloc((WTF *)(3 * a2));
  *(_DWORD *)(a3 + 8) = v7;
  *(_QWORD *)a3 = result;
  v8 = a2 & 0xFF00000000;
  v9 = (unsigned __int16 *)((char *)v4 + v6);
  if ((a2 & 0xFF00000000) == 0)
    v9 = &v4[v6];
  if (v9 == v4)
    goto LABEL_15;
LABEL_6:
  if (!v8)
  {
    while (1)
    {
      v13 = *v4;
      if ((v13 & 0xF800) != 0xD800)
        break;
      if ((char *)v9 - (char *)v4 == 2)
        goto LABEL_29;
      if ((v13 & 0x400) != 0)
        goto LABEL_29;
      v14 = v4[1];
      if ((v14 & 0xFC00) != 0xDC00)
        goto LABEL_29;
      v13 = v14 + (v13 << 10) - 56613888;
      v15 = v8 + 1;
      *(_BYTE *)(result + v8) = (v13 >> 18) | 0xF0;
      v16 = (v13 >> 12) & 0x3F | 0xFFFFFF80;
      v17 = 2;
LABEL_30:
      v8 += v17;
      *(_BYTE *)(result + v15) = v16;
      v19 = (v13 >> 6) & 0x3F | 0xFFFFFF80;
LABEL_31:
      *(_BYTE *)(result + v8) = v19;
      v20 = v8 + 1;
      v8 += 2;
      *(_BYTE *)(result + v20) = v13 & 0x3F | 0x80;
      if ((char *)v9 - (char *)v4 != 2)
      {
LABEL_32:
        v12 = 1;
        if ((*v4 & 0xFC00) == 0xD800)
        {
          if ((v4[1] & 0xFC00) == 0xDC00)
            v12 = 2;
          else
            v12 = 1;
        }
        goto LABEL_18;
      }
LABEL_17:
      v12 = 1;
LABEL_18:
      v4 += v12;
      if (v4 == v9)
        goto LABEL_11;
    }
    if (v13 < 0x80)
    {
      v18 = v8++;
      *(_BYTE *)(result + v18) = v13;
      if ((char *)v9 - (char *)v4 != 2)
        goto LABEL_32;
      goto LABEL_17;
    }
    if (v13 <= 0x7FF)
    {
      v19 = (v13 >> 6) | 0xFFFFFFC0;
      goto LABEL_31;
    }
LABEL_29:
    v16 = (v13 >> 12) | 0xFFFFFFE0;
    v17 = 1;
    v15 = v8;
    goto LABEL_30;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(char *)v4;
      if (v11 < 0)
        break;
      LODWORD(v8) = v10 + 1;
      *(_BYTE *)(result + v10) = v11;
      v4 = (unsigned __int16 *)((char *)v4 + 1);
      ++v10;
      if (v4 == v9)
        goto LABEL_11;
    }
    LODWORD(v8) = v10 + 2;
    *(_BYTE *)(v10 + result + 1) = v11 & 0x3F | 0x80;
    *(_BYTE *)(result + v10) = (v11 >> 6) | 0xC0;
    v4 = (unsigned __int16 *)((char *)v4 + 1);
    v10 += 2;
  }
  while (v4 != v9);
LABEL_11:
  *(_DWORD *)(a3 + 12) = v8;
  return result;
}

uint64_t PAL::TextCodecUTF8::encode@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return PAL::TextCodecUTF8::encodeUTF8(a1, a2, a3);
}

_QWORD *WTF::Detail::CallableWrapper<PAL::TextCodecLatin1::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_0,std::unique_ptr<PAL::TextCodec>>::call@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *result = off_1E31F45D0;
  *a1 = result;
  return result;
}

unint64_t PAL::TextCodecLatin1::encode@<X0>(unsigned __int16 *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  __int16 v17;
  uint8x8_t *v18;
  _OWORD *v19;
  int8x16_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint8x16_t v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x8_t *v30;
  uint8x8_t *v31;
  unint64_t v32;
  int8x16_t v33;
  unint64_t v34;
  uint8x8_t v35;
  int8x8_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  __int16 v39;
  unsigned __int16 *v40;
  const char *v41;
  unsigned int v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  char *v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  _OWORD *v65;
  unint64_t v66;
  __int128 *v67;
  __int128 v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int8x16_t v77;
  unint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int16x8_t *v87;
  int8x8_t *v88;
  unint64_t v89;
  int8x16_t v90;
  unint64_t v91;
  int16x8_t v92;
  int8x8_t v93;
  char v94;
  char __str[16];
  _QWORD v96[3];

  v96[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 12) = a2;
  v8 = a2;
  if (!(_DWORD)a2)
    return 0;
  result = WTF::fastMalloc((WTF *)a2);
  *(_DWORD *)(a4 + 8) = a2;
  *(_QWORD *)a4 = result;
  v11 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (v8 < 8 || result < (unint64_t)&a1[v8] && result + v8 > (unint64_t)a1)
    {
      v14 = 0;
      LOWORD(v12) = 0;
      goto LABEL_13;
    }
    if (v8 >= 0x20)
    {
      v14 = v8 - (a2 & 0x1F);
      v75 = (int8x16_t *)(a1 + 16);
      v76 = (int8x16_t *)(result + 16);
      v77 = 0uLL;
      v78 = v14;
      v79 = 0uLL;
      v80 = 0uLL;
      v81 = 0uLL;
      do
      {
        v83 = v75[-2];
        v82 = v75[-1];
        v85 = *v75;
        v84 = v75[1];
        v75 += 4;
        v76[-1] = vuzp1q_s8(v83, v82);
        *v76 = vuzp1q_s8(v85, v84);
        v79 = vorrq_s8(v82, v79);
        v77 = vorrq_s8(v83, v77);
        v81 = vorrq_s8(v84, v81);
        v80 = vorrq_s8(v85, v80);
        v76 += 2;
        v78 -= 32;
      }
      while (v78);
      v86 = vorrq_s8(vorrq_s8(v80, v77), vorrq_s8(v81, v79));
      *(int8x8_t *)v86.i8 = vorr_s8(*(int8x8_t *)v86.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL));
      LOWORD(v12) = v86.i16[0] | v86.i16[2] | ((v86.i32[0] | v86.i32[1]) >> 16);
      if ((a2 & 0x1F) == 0)
        goto LABEL_26;
      if ((a2 & 0x1Fu) < 8uLL)
      {
        result += v14;
LABEL_13:
        v15 = v8 - v14;
        v16 = &a1[v14];
        do
        {
          v17 = *v16++;
          *(_BYTE *)result++ = v17;
          LOWORD(v12) = v17 | v12;
          --v15;
        }
        while (v15);
        goto LABEL_26;
      }
    }
    else
    {
      LOWORD(v12) = 0;
      v14 = 0;
    }
    v87 = (int16x8_t *)&a1[v14];
    v88 = (int8x8_t *)(result + v14);
    v89 = v14 + (a2 & 7);
    v14 = v8 - (a2 & 7);
    result += v14;
    v90 = (int8x16_t)(unsigned __int16)v12;
    v91 = v89 - v8;
    do
    {
      v92 = *v87++;
      *v88++ = vmovn_s16(v92);
      v90 = vorrq_s8((int8x16_t)v92, v90);
      v91 += 8;
    }
    while (v91);
    v93 = vorr_s8(*(int8x8_t *)v90.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
    v12 = v93.i16[0] | v93.i16[2] | ((v93.i32[0] | v93.i32[1]) >> 16);
    if ((a2 & 7) == 0)
      goto LABEL_26;
    goto LABEL_13;
  }
  LOWORD(v12) = 0;
  v13 = 0;
  if (v8 >= 8 && result - (unint64_t)a1 >= 0x20)
  {
    if (v8 < 0x20)
    {
      LOWORD(v12) = 0;
      v13 = 0;
      goto LABEL_21;
    }
    v13 = v8 - (a2 & 0x1F);
    v18 = (uint8x8_t *)(a1 + 8);
    v19 = (_OWORD *)(result + 16);
    v20 = 0uLL;
    v21 = v13;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    do
    {
      v25 = *(uint8x16_t *)v18[-2].i8;
      v26 = *(_OWORD *)v18->i8;
      v27 = (int8x16_t)vmovl_u8(*v18);
      v28 = (int8x16_t)vmovl_high_u8(*(uint8x16_t *)v18->i8);
      *(v19 - 1) = v25;
      *v19 = v26;
      v22 = vorrq_s8(v22, (int8x16_t)vmovl_high_u8(v25));
      v20 = vorrq_s8(v20, (int8x16_t)vmovl_u8(*(uint8x8_t *)v25.i8));
      v24 = vorrq_s8(v24, v28);
      v23 = vorrq_s8(v23, v27);
      v18 += 4;
      v19 += 2;
      v21 -= 32;
    }
    while (v21);
    v29 = vorrq_s8(vorrq_s8(v23, v20), vorrq_s8(v24, v22));
    *(int8x8_t *)v29.i8 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
    LOWORD(v12) = v29.i16[0] | v29.i16[2] | ((v29.i32[0] | v29.i32[1]) >> 16);
    if ((a2 & 0x1F) == 0)
      goto LABEL_26;
    if ((a2 & 0x1Fu) >= 8uLL)
    {
LABEL_21:
      v30 = (uint8x8_t *)((char *)a1 + v13);
      v31 = (uint8x8_t *)(result + v13);
      v32 = v13 + (a2 & 7);
      v13 = v8 - (a2 & 7);
      result += v13;
      v33 = (int8x16_t)(unsigned __int16)v12;
      v34 = v32 - v8;
      do
      {
        v35 = *v30++;
        *v31++ = v35;
        v33 = vorrq_s8(v33, (int8x16_t)vmovl_u8(v35));
        v34 += 8;
      }
      while (v34);
      v36 = vorr_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
      v12 = v36.i16[0] | v36.i16[2] | ((v36.i32[0] | v36.i32[1]) >> 16);
      if ((a2 & 7) == 0)
        goto LABEL_26;
      goto LABEL_24;
    }
    result += v13;
  }
LABEL_24:
  v37 = v8 - v13;
  v38 = (unsigned __int8 *)a1 + v13;
  do
  {
    v39 = *v38++;
    *(_BYTE *)result++ = v39;
    LOWORD(v12) = v12 | v39;
    --v37;
  }
  while (v37);
LABEL_26:
  if ((unsigned __int16)v12 >= 0x80u)
  {
    result = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
      result = WTF::fastFree((WTF *)result, v10);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v40 = v11 ? (unsigned __int16 *)((char *)a1 + v8) : &a1[v8];
    if (v40 != a1)
    {
      if (a3)
        v41 = "%%26%%23%u%%3B";
      else
        v41 = "&#%u;";
      while (!v11)
      {
        v42 = *a1;
        if ((v42 & 0xF800) != 0xD800)
          goto LABEL_64;
        if ((char *)v40 - (char *)a1 != 2 && (v42 & 0x400) == 0)
        {
          v43 = a1[1];
          v44 = (v43 & 0xFC00) == 56320;
          v45 = v43 + (v42 << 10) - 56613888;
          if (v44)
            v42 = v45;
        }
LABEL_45:
        v94 = -96;
        if (v42 >> 11 == 27)
          v46 = 65533;
        else
          v46 = v42;
        result = snprintf(__str, 0x20uLL, v41, v46);
        if ((_DWORD)result)
        {
          v47 = (int)result;
          v48 = *(unsigned int *)(a4 + 8);
          v49 = *(unsigned int *)(a4 + 12);
          v50 = v49 + (int)result;
          if (v50 > v48)
          {
            v51 = v41;
            v52 = v48 + (v48 >> 2);
            if (v52 >= 0x10)
              v53 = v52 + 1;
            else
              v53 = 16;
            if (v53 <= v50)
              v54 = v49 + (int)result;
            else
              v54 = v53;
            if (HIDWORD(v54))
            {
LABEL_175:
              __break(0xC471u);
              JUMPOUT(0x19411FDD8);
            }
            v55 = *(void **)a4;
            v56 = (void *)WTF::fastMalloc((WTF *)v54);
            *(_DWORD *)(a4 + 8) = v54;
            *(_QWORD *)a4 = v56;
            result = (unint64_t)memcpy(v56, v55, v49);
            v41 = v51;
            if (v55)
            {
              if (*(void **)a4 == v55)
              {
                *(_QWORD *)a4 = 0;
                *(_DWORD *)(a4 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v55, v57);
            }
          }
          v58 = *(unsigned int *)(a4 + 12);
          if (v50 < v58)
            goto LABEL_175;
          v59 = *(_QWORD *)a4;
          v60 = (_BYTE *)(*(_QWORD *)a4 + v58);
          if (v47 < 8)
          {
            v61 = __str;
            goto LABEL_160;
          }
          v61 = __str;
          if ((unint64_t)(v60 - __str) < 0x20)
            goto LABEL_160;
          if (v47 >= 0x20)
          {
            v64 = v47 & 0xFFFFFFFFFFFFFFE0;
            v65 = (_OWORD *)(v59 + v58 + 16);
            v66 = v47 & 0xFFFFFFFFFFFFFFE0;
            v67 = (__int128 *)v96;
            do
            {
              v68 = *v67;
              *(v65 - 1) = *(v67 - 1);
              *v65 = v68;
              v67 += 2;
              v65 += 2;
              v66 -= 32;
            }
            while (v66);
            if (v64 == v47)
              goto LABEL_161;
            if ((v47 & 0x18) == 0)
            {
              v61 = &__str[v64];
              v60 += v64;
              do
              {
LABEL_160:
                v74 = *v61++;
                *v60++ = v74;
              }
              while (v61 != &__str[v47]);
              goto LABEL_161;
            }
          }
          else
          {
            v64 = 0;
          }
          v60 += v47 & 0xFFFFFFFFFFFFFFF8;
          v61 = &__str[v47 & 0xFFFFFFFFFFFFFFF8];
          v69 = &__str[v64];
          v70 = (_QWORD *)(v59 + v64 + v58);
          v71 = v64 - (v47 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v72 = *(_QWORD *)v69;
            v69 += 8;
            *v70++ = v72;
            v71 += 8;
          }
          while (v71);
          if ((v47 & 0xFFFFFFFFFFFFFFF8) != v47)
            goto LABEL_160;
LABEL_161:
          *(_DWORD *)(a4 + 12) = v50;
          if (!v11)
            goto LABEL_149;
LABEL_36:
          a1 = (unsigned __int16 *)((char *)a1 + 1);
          if (a1 == v40)
            return result;
        }
        else
        {
LABEL_148:
          if (v11)
            goto LABEL_36;
LABEL_149:
          if ((char *)v40 - (char *)a1 == 2)
          {
            if (++a1 == v40)
              return result;
          }
          else
          {
            v73 = 1;
            if ((*a1 & 0xFC00) == 0xD800)
            {
              v73 = 1;
              if ((a1[1] & 0xFC00) == 0xDC00)
                v73 = 2;
            }
            a1 += v73;
            if (a1 == v40)
              return result;
          }
        }
      }
      v42 = *(unsigned __int8 *)a1;
LABEL_64:
      v94 = v42;
      if (v42 <= 0xFF)
      {
        v62 = v42;
        if ((v42 & 0xE0) != 0x80)
        {
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 == *(_DWORD *)(a4 + 8))
            goto LABEL_67;
LABEL_146:
          *(_BYTE *)(*(_QWORD *)a4 + v63) = v62;
LABEL_147:
          ++*(_DWORD *)(a4 + 12);
          goto LABEL_148;
        }
      }
      if ((int)v42 <= 731)
      {
        switch(v42)
        {
          case 0x152u:
            v62 = -116;
            v94 = -116;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          case 0x153u:
            v62 = -100;
            v94 = -100;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          case 0x154u:
          case 0x155u:
          case 0x156u:
          case 0x157u:
          case 0x158u:
          case 0x159u:
          case 0x15Au:
          case 0x15Bu:
          case 0x15Cu:
          case 0x15Du:
          case 0x15Eu:
          case 0x15Fu:
          case 0x162u:
          case 0x163u:
          case 0x164u:
          case 0x165u:
          case 0x166u:
          case 0x167u:
          case 0x168u:
          case 0x169u:
          case 0x16Au:
          case 0x16Bu:
          case 0x16Cu:
          case 0x16Du:
          case 0x16Eu:
          case 0x16Fu:
          case 0x170u:
          case 0x171u:
          case 0x172u:
          case 0x173u:
          case 0x174u:
          case 0x175u:
          case 0x176u:
          case 0x177u:
          case 0x179u:
          case 0x17Au:
          case 0x17Bu:
          case 0x17Cu:
          case 0x17Fu:
          case 0x180u:
          case 0x181u:
          case 0x182u:
          case 0x183u:
          case 0x184u:
          case 0x185u:
          case 0x186u:
          case 0x187u:
          case 0x188u:
          case 0x189u:
          case 0x18Au:
          case 0x18Bu:
          case 0x18Cu:
          case 0x18Du:
          case 0x18Eu:
          case 0x18Fu:
          case 0x190u:
          case 0x191u:
            goto LABEL_45;
          case 0x160u:
            v62 = -118;
            v94 = -118;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          case 0x161u:
            v62 = -102;
            v94 = -102;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          case 0x178u:
            v62 = -97;
            v94 = -97;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          case 0x17Du:
            v62 = -114;
            v94 = -114;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          case 0x17Eu:
            v62 = -98;
            v94 = -98;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          case 0x192u:
            v62 = -125;
            v94 = -125;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          default:
            switch(v42)
            {
              case 0x81u:
                v62 = -127;
                v94 = -127;
                v63 = *(unsigned int *)(a4 + 12);
                if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
                  goto LABEL_146;
                goto LABEL_67;
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Eu:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Cu:
                goto LABEL_45;
              case 0x8Du:
                v62 = -115;
                v94 = -115;
                v63 = *(unsigned int *)(a4 + 12);
                if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
                  goto LABEL_146;
                goto LABEL_67;
              case 0x8Fu:
                v62 = -113;
                v94 = -113;
                v63 = *(unsigned int *)(a4 + 12);
                if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
                  goto LABEL_146;
                goto LABEL_67;
              case 0x90u:
                v62 = -112;
                v94 = -112;
                v63 = *(unsigned int *)(a4 + 12);
                if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
                  goto LABEL_146;
                goto LABEL_67;
              case 0x9Du:
                v62 = -99;
                v94 = -99;
                v63 = *(unsigned int *)(a4 + 12);
                if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
                  goto LABEL_146;
                goto LABEL_67;
              default:
                if (v42 != 710)
                  goto LABEL_45;
                v62 = -120;
                v94 = -120;
                v63 = *(unsigned int *)(a4 + 12);
                if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
                  goto LABEL_146;
                goto LABEL_67;
            }
        }
      }
      v62 = 0x80;
      switch(v42)
      {
        case 0x2013u:
          v62 = -106;
          v94 = -106;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x2014u:
          v62 = -105;
          v94 = -105;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x2015u:
        case 0x2016u:
        case 0x2017u:
        case 0x201Bu:
        case 0x201Fu:
        case 0x2023u:
        case 0x2024u:
        case 0x2025u:
        case 0x2027u:
        case 0x2028u:
        case 0x2029u:
        case 0x202Au:
        case 0x202Bu:
        case 0x202Cu:
        case 0x202Du:
        case 0x202Eu:
        case 0x202Fu:
        case 0x2031u:
        case 0x2032u:
        case 0x2033u:
        case 0x2034u:
        case 0x2035u:
        case 0x2036u:
        case 0x2037u:
        case 0x2038u:
        case 0x203Bu:
        case 0x203Cu:
        case 0x203Du:
        case 0x203Eu:
        case 0x203Fu:
        case 0x2040u:
        case 0x2041u:
        case 0x2042u:
        case 0x2043u:
        case 0x2044u:
        case 0x2045u:
        case 0x2046u:
        case 0x2047u:
        case 0x2048u:
        case 0x2049u:
        case 0x204Au:
        case 0x204Bu:
        case 0x204Cu:
        case 0x204Du:
        case 0x204Eu:
        case 0x204Fu:
        case 0x2050u:
        case 0x2051u:
        case 0x2052u:
        case 0x2053u:
        case 0x2054u:
        case 0x2055u:
        case 0x2056u:
        case 0x2057u:
        case 0x2058u:
        case 0x2059u:
        case 0x205Au:
        case 0x205Bu:
        case 0x205Cu:
        case 0x205Du:
        case 0x205Eu:
        case 0x205Fu:
        case 0x2060u:
        case 0x2061u:
        case 0x2062u:
        case 0x2063u:
        case 0x2064u:
        case 0x2065u:
        case 0x2066u:
        case 0x2067u:
        case 0x2068u:
        case 0x2069u:
        case 0x206Au:
        case 0x206Bu:
        case 0x206Cu:
        case 0x206Du:
        case 0x206Eu:
        case 0x206Fu:
        case 0x2070u:
        case 0x2071u:
        case 0x2072u:
        case 0x2073u:
        case 0x2074u:
        case 0x2075u:
        case 0x2076u:
        case 0x2077u:
        case 0x2078u:
        case 0x2079u:
        case 0x207Au:
        case 0x207Bu:
        case 0x207Cu:
        case 0x207Du:
        case 0x207Eu:
        case 0x207Fu:
        case 0x2080u:
        case 0x2081u:
        case 0x2082u:
        case 0x2083u:
        case 0x2084u:
        case 0x2085u:
        case 0x2086u:
        case 0x2087u:
        case 0x2088u:
        case 0x2089u:
        case 0x208Au:
        case 0x208Bu:
        case 0x208Cu:
        case 0x208Du:
        case 0x208Eu:
        case 0x208Fu:
        case 0x2090u:
        case 0x2091u:
        case 0x2092u:
        case 0x2093u:
        case 0x2094u:
        case 0x2095u:
        case 0x2096u:
        case 0x2097u:
        case 0x2098u:
        case 0x2099u:
        case 0x209Au:
        case 0x209Bu:
        case 0x209Cu:
        case 0x209Du:
        case 0x209Eu:
        case 0x209Fu:
        case 0x20A0u:
        case 0x20A1u:
        case 0x20A2u:
        case 0x20A3u:
        case 0x20A4u:
        case 0x20A5u:
        case 0x20A6u:
        case 0x20A7u:
        case 0x20A8u:
        case 0x20A9u:
        case 0x20AAu:
        case 0x20ABu:
          goto LABEL_45;
        case 0x2018u:
          v62 = -111;
          v94 = -111;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x2019u:
          v62 = -110;
          v94 = -110;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x201Au:
          v62 = -126;
          v94 = -126;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x201Cu:
          v62 = -109;
          v94 = -109;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x201Du:
          v62 = -108;
          v94 = -108;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x201Eu:
          v62 = -124;
          v94 = -124;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x2020u:
          v62 = -122;
          v94 = -122;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x2021u:
          v62 = -121;
          v94 = -121;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x2022u:
          v62 = -107;
          v94 = -107;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x2026u:
          v62 = -123;
          goto LABEL_145;
        case 0x2030u:
          v62 = -119;
          v94 = -119;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x2039u:
          v62 = -117;
          v94 = -117;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x203Au:
          v62 = -101;
          v94 = -101;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        case 0x20ACu:
LABEL_145:
          v94 = v62;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
            goto LABEL_146;
          goto LABEL_67;
        default:
          if (v42 == 732)
          {
            v62 = -104;
            v94 = -104;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
            goto LABEL_67;
          }
          if (v42 == 8482)
          {
            v62 = -103;
            v94 = -103;
            v63 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v63 != *(_DWORD *)(a4 + 8))
              goto LABEL_146;
LABEL_67:
            result = (unint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, (WTF *)(v63 + 1), (unint64_t)&v94);
            *(_BYTE *)(*(_QWORD *)a4 + *(unsigned int *)(a4 + 12)) = *(_BYTE *)result;
            goto LABEL_147;
          }
          break;
      }
      goto LABEL_45;
    }
  }
  return result;
}

void WebCore::replaceCharsetInMediaTypeIfNeeded(WTF::StringImpl **this, WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[5];
  char v15;

  WebCore::ParsedContentType::create(this, (WTF::StringImpl *)1, (uint64_t)v14);
  if (v15)
  {
    WebCore::ParsedContentType::charset((WebCore::ParsedContentType *)v14, &v13);
    v4 = v13;
    if (!v13)
      goto LABEL_3;
    if (*((_DWORD *)v13 + 1))
    {
      if (!v15)
        goto LABEL_31;
      WebCore::ParsedContentType::charset((WebCore::ParsedContentType *)v14, &v12);
      v5 = WTF::equalIgnoringASCIICase((uint64_t *)&v12, "UTF-8");
      v6 = v12;
      v12 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v3);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = v13;
      v13 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v3);
        else
          *(_DWORD *)v7 -= 2;
      }
      if (v5)
        goto LABEL_3;
      if (!v15)
        goto LABEL_31;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::ParsedContentType::setCharset((uint64_t)v14, &v13);
      v9 = v13;
      v13 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (!v15)
      {
LABEL_31:
        __break(1u);
        return;
      }
      WebCore::ParsedContentType::serialize(v14, &v13);
      v10 = v13;
      v13 = 0;
      v4 = *this;
      *this = v10;
      if (!v4)
        goto LABEL_3;
      v11 = *(_DWORD *)v4 - 2;
      if (*(_DWORD *)v4 != 2)
      {
LABEL_22:
        *(_DWORD *)v4 = v11;
        goto LABEL_3;
      }
      WTF::StringImpl::destroy(v4, v3);
      v4 = v13;
      v13 = 0;
      if (!v4)
      {
LABEL_3:
        if (v15)
          WebCore::ParsedContentType::~ParsedContentType((WebCore::ParsedContentType *)v14, v3);
        return;
      }
    }
    else
    {
      v13 = 0;
    }
    v11 = *(_DWORD *)v4 - 2;
    if (*(_DWORD *)v4 != 2)
      goto LABEL_22;
    WTF::StringImpl::destroy(v4, v3);
    goto LABEL_3;
  }
}

uint64_t WebCore::FormData::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = bmalloc::api::isoAllocate();
  *(_DWORD *)v4 = 1;
  *(_BYTE *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 0;
  *a2 = v4;
  *(_QWORD *)(v4 + 8) = 0;
  return WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4 + 8, a1);
}

uint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)v8 = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v8 + 8) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(v8 + 12) = v9;
  *(_DWORD *)(v8 + 40) = 0;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x194120118);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_QWORD *)result + 48 * *(unsigned int *)(result + 12);
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::FormDataElement>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::FormDataElement>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (result != a2)
  {
    v12 = v3;
    v13 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 40) = -1;
      v8 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v8 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E341D7A8[v8])(&v10, a3, v7);
        *(_DWORD *)(a3 + 40) = v8;
        v9 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v9 != -1)
          result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v9])(&v11, v7);
      }
      *(_DWORD *)(v7 + 40) = -1;
      a3 += 48;
      v7 += 48;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WebCore::RenderBox::computePreferredLogicalWidths(uint64_t result, const WebCore::RenderBox *a2, uint64_t a3, int a4)
{
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  signed int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int8x8_t v23;

  v7 = (int32x2_t *)result;
  v8 = *(_QWORD *)(*(_QWORD *)(result + 88) + 8);
  v9 = v8 + 12;
  v10 = v8 + 4;
  if (((*(_DWORD *)(result + 124) >> 13) & 6u) - 2 >= 4)
    v9 = v10;
  if (*(_BYTE *)(v9 + 4) != 4)
  {
    result = WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio((WebCore::RenderBox *)result, a2);
    if ((_DWORD)result)
    {
      result = WebCore::RenderBox::computeMinMaxLogicalWidthFromAspectRatio((WebCore::RenderBox *)v7);
      v19 = result - a4;
      if (__OFSUB__((_DWORD)result, a4))
        v19 = (result >> 31) + 0x7FFFFFFF;
      v20 = v19 & ~(v19 >> 31);
      v21 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
      if (!__OFSUB__(HIDWORD(result), a4))
        v21 = HIDWORD(result) - a4;
      v22 = v21 & ~(v21 >> 31);
      if (v22 < v20)
      {
        __break(1u);
        return result;
      }
      v23 = (int8x8_t)vdup_n_s32(v20);
      v7[23] = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v23, v7[23]), v23, (int8x8_t)vmin_s32(vdup_n_s32(v22), v7[23]));
    }
  }
  if (*(_BYTE *)(a3 + 4) == 4)
  {
    result = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(v7, a3);
    v7[23] = vmin_s32(vdup_n_s32(result), v7[23]);
  }
  if (*((_BYTE *)a2 + 4) == 4)
  {
    v18 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v18 = (float)*(int *)a2;
    if (v18 > 0.0)
    {
      result = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(v7, (uint64_t)a2);
      v7[23] = vmax_s32(v7[23], vdup_n_s32(result));
    }
  }
  v11 = v7[23].u32[0];
  v12 = v7[23].u32[1];
  v13 = __OFADD__(v11, a4);
  v14 = v11 + a4;
  v15 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v15 = v14;
  v13 = __OFADD__(v12, a4);
  v16 = v12 + a4;
  v17 = (v12 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v17 = v16;
  v7[23].i32[0] = v15;
  v7[23].i32[1] = v17;
  return result;
}

uint64_t WebCore::RenderBlock::adjustContentBoxLogicalHeightForBoxSizing(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;

  if ((a2 & 0xFF00000000) == 0)
    return 0;
  v2 = a2;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 68) & 4) != 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    if (__OFADD__(v8, v9))
      v10 = (v8 >> 31) + 0x7FFFFFFF;
    else
      v10 = v8 + v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      v13 = (v11 >> 31) + 0x7FFFFFFF;
    v5 = __OFADD__(v10, v13);
    v14 = v10 + v13;
    if (v5)
      v14 = (v10 >> 31) + 0x7FFFFFFF;
    v5 = __OFSUB__(v2, v14);
    v6 = v2 - v14;
    if (v5)
      v6 = (v2 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    if ((*(_WORD *)(a1 + 69) & 0x400) != 0
      && (v15 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, a1)) != 0)
    {
      v4 = *(_DWORD *)(v15 + 8);
    }
    else
    {
      v4 = 0;
    }
    v5 = __OFSUB__(v2, v4);
    v6 = v2 - v4;
    if (v5)
      v6 = (v2 >> 31) + 0x7FFFFFFF;
  }
  return v6 & ~(v6 >> 31);
}

unint64_t WebCore::RenderBox::computeLogicalHeight@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  int *v5;
  int v6;
  unint64_t v7;
  int v8;
  const WebCore::RenderBox *v9;
  unint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  float v20;
  double v21;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  float v29;
  double v30;
  uint64_t v32;
  int v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  WebCore::RenderBox *v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  const WebCore::RenderBoxModelObject *v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  char v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int i;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  int j;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  char v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  int v117;
  void *v118;
  int v119;
  void *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  float *v124;
  float *v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  void *v136;
  int v137;
  void *v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  WebCore::WillChangeData *v159;
  uint64_t v160;
  char v161;
  int v162;
  char v163;
  char v164;
  uint64_t v165;
  int v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t *v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned __int8 *v182;
  int v183;
  unsigned __int8 *v184;
  int v185;
  int *v186;
  int v187;
  uint64_t v188;
  int *v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  float v204;
  float v205;
  uint64_t *v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t *v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int v229;
  int v230;
  int v231;
  uint64_t *v232;
  float v233;
  float v234;
  float v235;
  double v236;
  unsigned int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unsigned __int8 v253;
  int v254;
  char v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  char v262;
  int v263;
  char v264;
  float v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  int v272;
  const WebCore::RenderBoxModelObject *v273;
  float v274;
  int v275;
  int v276;
  int v277;
  unsigned int v278;
  int v279;
  float v280;
  double v281;
  int v282;
  float v283;
  double v284;
  int v285;
  float v286;
  double v287;
  unsigned int v288;
  unsigned int v289;
  int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  float v301;
  float v302;
  float v304;
  float v306;
  uint64_t v308;
  uint64_t (*v309)(void);
  int v310;
  unint64_t v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  float v315;
  double v316;
  BOOL v317;
  float v318;
  double v319;
  WebCore::RenderBox *v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  WebCore::RenderObject *v325;
  unsigned int v326;
  WebCore::RenderObject *v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int *v331;
  int v332;
  void *v333;
  BOOL v334;
  uint64_t v335;
  unsigned int *v336;
  int v337;
  void *v338;
  unint64_t v339;
  unsigned int v340;
  int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  int v345;
  int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  int v350;
  unsigned int v351;
  int v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  double *v356;
  double *v357;
  int v358;
  int v359;
  int *v360;
  int v361;
  char v362;
  double v363;
  double v364;
  int v366;
  unsigned __int8 *v367;
  uint64_t *v368;
  int v369;
  unsigned int v370;
  _BOOL4 v371;
  unsigned int v372;
  unsigned int v373;
  int v374;
  int *v375;
  int *v376;
  int v377;
  int v378;
  double v379;
  unsigned int v381;
  uint64_t *v382;
  uint64_t v383;
  unsigned int *v384;
  int v385;
  int v386;
  void *v387;
  unint64_t v388;
  unsigned __int8 v389;
  uint64_t v390;
  unsigned int v391;
  int v392;
  unsigned int v393;
  int v394;
  unsigned int v395;
  int v396;
  int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  int v401;
  unsigned int v402;
  int v403;
  unsigned int v404;
  uint64_t v405;
  uint64_t v406;
  double *v407;
  double *v408;
  int v409;
  int v410;
  int *v411;
  int v412;
  char v413;
  double v414;
  double v415;
  int v417;
  int v418;
  float v419;
  double v420;
  float v421;
  double v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  unsigned int v436;
  int v437;
  unsigned int v438;
  unsigned int v439;
  BOOL v440;
  int v441;
  int v442;
  int v443;
  int v444;
  double v445;
  unsigned int v447;
  uint64_t v448;
  uint64_t v449;
  float v450;
  double v451;
  unsigned int v452;
  int v453;
  unsigned int v454;
  uint64_t v455;
  float v456;
  double v457;
  int v458;
  unsigned int v459;
  int v460;
  int v461;
  unsigned int v462;
  unsigned int v463;
  float v464;
  float v465;
  float v467;
  uint64_t v469;
  _DWORD *v470;
  uint64_t v471;
  int v472;
  unsigned int v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  unsigned int v477;
  int v478;
  unsigned int v479;
  unsigned int v480;
  int v481;
  unsigned int v482;
  unsigned int v483;
  int v484;
  int v485;
  int v486;
  unint64_t v487;
  int v488;
  unint64_t v489;
  int v490;
  int v491;
  unsigned int v492;
  uint64_t v493;
  uint64_t v494;
  double *v495;
  double *v496;
  unsigned int v497;
  int v498;
  int *v499;
  unsigned int v500;
  int v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  int v509;
  const WebCore::Length *v510;
  int v511;
  unsigned int v512;
  unsigned int v513;
  int v514;
  int v515;
  int v516;
  unsigned int v517;
  int v518;
  int v519;
  uint64_t *v520;
  int shouldFlipBeforeAfterMargins;
  int v522;
  int *v523;
  int *v524;
  WTF *v525;
  int v526;
  unsigned int v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  int v531;
  unsigned int v532;
  unsigned int v533;
  unsigned int v534;
  unsigned int v535;
  int *v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned __int8 *v548;
  int v549;
  float v550;
  double v551;
  float v552;
  int v553;
  unsigned int v554;
  int v555;
  int v556;
  WTF *v557;
  uint64_t v558;
  uint64_t v559;
  unsigned int v560;
  float v561;
  unsigned int v562[2];
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  float v568;
  unsigned int v569;
  signed int v570;
  int v571;
  int v572;
  int *v573;
  int v574;
  WebCore::RenderBox *v575;
  unsigned int v577[2];
  char v578;
  unsigned int v579[2];
  unsigned int v580;
  __int16 v581;
  char v582;
  unsigned int v583;
  __int16 v584;
  char v585;
  unsigned int v586;
  unsigned __int8 v587;
  char v588;
  char v589;
  int v590;
  __int16 v591;
  char v592;
  unsigned int v593;
  unsigned __int8 v594;
  char v595;
  char v596;
  unsigned int v597;
  char v598;
  unsigned int v599;
  char v600;
  unsigned int v601;
  char v602;
  unsigned int v603;
  char v604;
  unsigned int v605;
  char v606;
  unsigned int v607;
  __int16 v608;
  char v609;
  unsigned int v610;
  __int16 v611;
  char v612;
  unsigned int v613;
  unsigned __int8 v614;
  char v615;
  char v616;
  int v617;
  __int16 v618;
  char v619;
  unsigned int v620;
  unsigned __int8 v621;
  char v622;
  char v623;
  float v624;
  unsigned __int8 v625;
  char v626;
  char v627;
  unsigned int v628;
  unsigned __int8 v629;
  __int16 v630;
  __int128 v631;
  unint64_t *v632;
  uint64_t v633;
  unint64_t v634;
  _QWORD v635[2];

  v4 = a2;
  *(_QWORD *)(a4 + 8) = 0;
  v5 = (int *)(a4 + 8);
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)a4 = a2;
  *(_DWORD *)(a4 + 4) = a3;
  v6 = *(unsigned __int8 *)(result + 46);
  if (v6 == 37)
    return result;
  v7 = result;
  v8 = *(_DWORD *)(result + 20);
  if ((v8 & 3) == 0)
    return result;
  memset(v579, 0, 7);
  if ((v8 & 0x1800000) != 0x1000000)
  {
    result = (unint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)result);
    v10 = result;
    v11 = ((*(_BYTE *)(result + 21) & 0x10) == 0) ^ ((*(_BYTE *)(v7 + 21) & 0x10) == 0);
    if (v11)
    {
LABEL_32:
      v33 = *(unsigned __int8 *)(v7 + 46);
      if (v33 == 63 || v33 == 35)
      {
        if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 148) >> 5) & 3u) - 1 > 1
          || (v33 - 36) < 5
          || (result = WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets((WebCore *)v7, v9), (result & 1) != 0))
        {
LABEL_35:
          if (v11)
          {
            v369 = *(_DWORD *)(v7 + 124);
            v370 = (unsigned __int16)v369 >> 13;
            v371 = v370 < 6;
            v372 = v370 == 1;
            switch((unsigned __int16)*(_DWORD *)(v10 + 124) >> 13)
            {
              case 2:
              case 3:
              case 4:
              case 5:
                break;
              default:
                v372 = v371 & (0x28u >> ((unsigned __int16)v369 >> 13));
                break;
            }
            v373 = v372 ^ ((*(_DWORD *)(v10 + 120) & 0x4000000u) >> 26);
            v374 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1144))(v7);
            if (v373)
              v375 = (int *)(a4 + 12);
            else
              v375 = v5;
            if (v373)
              v376 = v5;
            else
              v376 = (int *)(a4 + 12);
            result = (unint64_t)WebCore::RenderBox::computeInlineDirectionMargins((int *)v7, (_QWORD *)v10, v374, 0, v4, v375, v376);
          }
          goto LABEL_36;
        }
        v329 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8);
        v330 = (unsigned int *)(v329 + 4);
        v331 = (unsigned int *)(v329 + 12);
        if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 >= 4)
          v330 = v331;
        BYTE2(v577[1]) = 0;
        LOBYTE(v577[1]) = *((_BYTE *)v330 + 4);
        v332 = LOBYTE(v577[1]);
        BYTE1(v577[1]) = *((_BYTE *)v330 + 5);
        if (LOBYTE(v577[1]) - 2 >= 9)
        {
          if (!LOBYTE(v577[1]))
            goto LABEL_673;
          v333 = 0;
          if (LOBYTE(v577[1]) == 11)
          {
            v333 = (void *)*v330;
            v577[0] = *v330;
            result = (unint64_t)WebCore::Length::ref((int *)v577);
            goto LABEL_642;
          }
        }
        else
        {
          v333 = (void *)*v330;
        }
        if (LOBYTE(v577[1]) - 7 < 4)
          goto LABEL_673;
LABEL_642:
        if ((v332 & 0xFFFFFFF7) != 3 || (*(_DWORD *)(v7 + 20) & 0x1800000) == 0x1000000)
        {
          if (v332 != 11)
            goto LABEL_35;
          v334 = 0;
        }
        else
        {
          LODWORD(v631) = 100;
          WORD2(v631) = 3;
          BYTE6(v631) = 0;
          result = WebCore::RenderBox::computePercentageLogicalHeight(v7, (WebCore::Length *)&v631, 1);
          v334 = HIDWORD(result) == 0;
          if (v332 != 11)
          {
            if (HIDWORD(result))
              goto LABEL_35;
LABEL_673:
            v340 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1016))(v7);
            v341 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1024))(v7);
            v342 = v340 + v341;
            if (__OFADD__(v340, v341))
              v342 = (v340 >> 31) + 0x7FFFFFFF;
            v343 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 944))(v7);
            v344 = v342 + v343;
            if (__OFADD__(v342, v343))
              v344 = (v342 >> 31) + 0x7FFFFFFF;
            v345 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 952))(v7);
            v346 = v344 + v345;
            if (__OFADD__(v344, v345))
              v346 = (v344 >> 31) + 0x7FFFFFFF;
            v347 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1000))(v7);
            v348 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1008))(v7);
            v349 = v347 + v348;
            if (__OFADD__(v347, v348))
              v349 = (v347 >> 31) + 0x7FFFFFFF;
            v350 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 928))(v7);
            v351 = v349 + v350;
            if (__OFADD__(v349, v350))
              v351 = (v349 >> 31) + 0x7FFFFFFF;
            result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 936))(v7);
            v352 = v351 + result;
            if (__OFADD__(v351, (_DWORD)result))
              v352 = (v351 >> 31) + 0x7FFFFFFF;
            v353 = ((*(_DWORD *)(v7 + 124) >> 13) & 6) - 2;
            v354 = *(_QWORD *)(v7 + 88);
            v355 = *(_QWORD *)(v354 + 32);
            v356 = (double *)(v355 + 112);
            if (v353 >= 4)
              v357 = (double *)(v355 + 112);
            else
              v357 = (double *)(v355 + 104);
            if (v353 >= 4)
              v356 = (double *)(v355 + 104);
            v358 = *(_DWORD *)(v355 + 148) & 0x60;
            if (v358 == 64)
              LOBYTE(v359) = 0;
            else
              v359 = (*(unsigned __int8 *)(*(_QWORD *)(v354 + 8) + 68) >> 2) & 1;
            v152 = v353 >= 4;
            v360 = (int *)(v7 + 164);
            if (v152)
              v360 = (int *)(v7 + 160);
            v361 = *v360;
            v72 = v358 == 32;
            v362 = v359 ^ 1;
            if (!v72)
              v362 = 1;
            v363 = *v356 / *v357;
            if ((v362 & 1) == 0 && (*(_BYTE *)(v7 + 52) & 7) != 3)
            {
              v364 = (double)v361 * 0.015625 / v363 * 64.0;
              if (v364 < 2147483650.0 && v364 > -2147483650.0)
                goto LABEL_703;
              if (v364 >= 2147483650.0)
              {
                v366 = 0x7FFFFFFF;
              }
              else
              {
                if (v364 > -2147483650.0)
                {
LABEL_703:
                  v366 = (int)v364;
                  goto LABEL_704;
                }
                v366 = 0x80000000;
              }
LABEL_704:
              if (v366 <= v352)
                v4 = v352;
              else
                v4 = v366;
LABEL_744:
              *(_DWORD *)a4 = v4;
              goto LABEL_35;
            }
            v440 = __OFSUB__(v361, v346);
            v377 = v361 - v346;
            v378 = (v361 >> 31) + 0x7FFFFFFF;
            if (!v440)
              v378 = v377;
            v379 = (double)v378 * 0.015625 / v363 * 64.0;
            if (v379 < 2147483650.0 && v379 > -2147483650.0)
              goto LABEL_741;
            if (v379 >= 2147483650.0)
            {
              v381 = 0x7FFFFFFF;
            }
            else
            {
              if (v379 > -2147483650.0)
              {
LABEL_741:
                v381 = (int)v379;
                goto LABEL_742;
              }
              v381 = 0x80000000;
            }
LABEL_742:
            v4 = v381 + v352;
            if (__OFADD__(v381, v352))
              v4 = (v381 >> 31) + 0x7FFFFFFF;
            goto LABEL_744;
          }
        }
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v333);
        if (!v334)
          goto LABEL_35;
        goto LABEL_673;
      }
      v55 = *(_QWORD *)(v7 + 32);
      if (v55)
      {
        v56 = *(_QWORD *)(v55 + 8);
        v57 = *(_BYTE *)(v56 + 46) == 5
           && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 88) + 32) + 8) + 16) & 0x20) == 0;
      }
      else
      {
        v57 = 0;
        v56 = MEMORY[8];
      }
      v58 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 88) + 32) + 8) + 16);
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1616))(v7);
      v59 = result;
      if ((_DWORD)result && v57)
        v59 = (v58 & 7) != 0;
      v60 = *(_QWORD *)(v7 + 32);
      if (v60)
        v61 = *(_QWORD *)(v60 + 8);
      else
        v61 = 0;
      if ((*(char *)(v61 + 45) & 0x80000000) == 0
        && *(_BYTE *)(v61 + 46) != 5
        && *(_BYTE *)(*(_QWORD *)(v60 + 8) + 46) != 12)
      {
        goto LABEL_88;
      }
      v62 = (uint64_t *)WebCore::gOverridingLogicalHeightMap;
      if (!WebCore::gOverridingLogicalHeightMap)
        goto LABEL_88;
      ++*(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8);
      v63 = *(_QWORD *)(v7 + 8);
      if (v63 && *(_QWORD *)(v63 + 8))
      {
        v64 = *v62;
        if (*v62)
        {
          v65 = *(_DWORD *)(v64 - 8);
          v66 = (~(v63 << 32) + v63) ^ ((unint64_t)(~(v63 << 32) + v63) >> 22);
          v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
          v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
          v69 = v65 & ((v68 >> 31) ^ v68);
          for (i = 1; ; ++i)
          {
            v71 = *(_QWORD *)(v64 + 16 * v69);
            if (!v71)
            {
              v73 = *(unsigned int *)(v64 - 4);
              v74 = v64 + 16 * v73;
              v75 = v74;
              goto LABEL_83;
            }
            v72 = v71 != -1 && v71 == v63;
            if (v72)
              break;
            v69 = (v69 + i) & v65;
          }
          v74 = v64 + 16 * v69;
          v73 = *(unsigned int *)(v64 - 4);
          v75 = v64 + 16 * v73;
LABEL_83:
          *((_QWORD *)&v631 + 1) = v74;
          v76 = v64 + 16 * v73;
        }
        else
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          *((_QWORD *)&v631 + 1) = 0;
          v632 = 0;
        }
        v633 = v76;
        while (v74 != v76)
        {
          if (*(_QWORD *)(*(_QWORD *)v74 + 8))
            break;
          v558 = v74 + 16;
          *((_QWORD *)&v631 + 1) = v74 + 16;
          v74 = v75;
          if (v558 != v75)
          {
            v74 = v558;
            while ((unint64_t)(*(_QWORD *)v74 + 1) <= 1)
            {
              v74 += 16;
              *((_QWORD *)&v631 + 1) = v74;
              if (v74 == v75)
              {
                v74 = v75;
                break;
              }
            }
          }
        }
      }
      else
      {
        result = WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v631, v62);
        v64 = *(_QWORD *)WebCore::gOverridingLogicalHeightMap;
      }
      if (v64)
        v64 += 16 * *(unsigned int *)(v64 - 4);
      if (*((_QWORD *)&v631 + 1) != v64)
      {
        v233 = (float)*(int *)(*((_QWORD *)&v631 + 1) + 8);
      }
      else
      {
LABEL_88:
        if (!v59)
        {
          v62 = (uint64_t *)WebCore::gOverridingLogicalHeightLengthMap;
          if (!WebCore::gOverridingLogicalHeightLengthMap)
            goto LABEL_104;
          ++*(_DWORD *)(WebCore::gOverridingLogicalHeightLengthMap + 8);
          v77 = *(_QWORD *)(v7 + 8);
          if (v77 && *(_QWORD *)(v77 + 8))
          {
            v78 = *v62;
            if (!*v62)
            {
              v91 = 0;
              *((_QWORD *)&v631 + 1) = 0;
              v632 = 0;
              goto LABEL_103;
            }
            v79 = *(_DWORD *)(v78 - 8);
            v80 = (~(v77 << 32) + v77) ^ ((unint64_t)(~(v77 << 32) + v77) >> 22);
            v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
            v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
            v83 = v79 & ((v82 >> 31) ^ v82);
            for (j = 1; ; ++j)
            {
              v85 = *(_QWORD *)(v78 + 16 * v83);
              if (!v85)
              {
                v87 = *(unsigned int *)(v78 - 4);
                v88 = v78 + 16 * v87;
                v89 = v88;
                goto LABEL_101;
              }
              if (v85 != -1 && v85 == v77)
                break;
              v83 = (v83 + j) & v79;
            }
            v88 = v78 + 16 * v83;
            v87 = *(unsigned int *)(v78 - 4);
            v89 = v78 + 16 * v87;
LABEL_101:
            *((_QWORD *)&v631 + 1) = v88;
            v90 = v78 + 16 * v87;
            if (v88 == v90)
              goto LABEL_102;
            if (!*(_QWORD *)(*(_QWORD *)v88 + 8))
            {
              while (1)
              {
                v559 = v88 + 16;
                v88 = v89;
                if (v559 != v89)
                {
                  v88 = v559;
                  while ((unint64_t)(*(_QWORD *)v88 + 1) <= 1)
                  {
                    v88 += 16;
                    if (v88 == v89)
                    {
                      v88 = v89;
                      break;
                    }
                  }
                }
                if (v88 == v90)
                  break;
                if (*(_QWORD *)(*(_QWORD *)v88 + 8))
                  goto LABEL_573;
              }
              v88 = v90;
            }
LABEL_573:
            *((_QWORD *)&v631 + 1) = v88;
          }
          else
          {
            result = WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v631, v62);
            v78 = *(_QWORD *)WebCore::gOverridingLogicalHeightLengthMap;
          }
          if (v78)
          {
LABEL_102:
            v91 = v78 + 16 * *(unsigned int *)(v78 - 4);
            goto LABEL_103;
          }
          v91 = 0;
LABEL_103:
          if (*((_QWORD *)&v631 + 1) != v91)
          {
            v577[0] = 0;
            BYTE2(v577[1]) = 0;
            LOBYTE(v577[1]) = *(_BYTE *)(*((_QWORD *)&v631 + 1) + 12);
            v95 = LOBYTE(v577[1]);
            BYTE1(v577[1]) = *(_BYTE *)(*((_QWORD *)&v631 + 1) + 13);
            if (LOBYTE(v577[1]) - 2 >= 9)
            {
              if (LOBYTE(v577[1]) == 11)
              {
                v577[0] = *(_DWORD *)(*((_QWORD *)&v631 + 1) + 8);
                result = (unint64_t)WebCore::Length::ref((int *)v577);
              }
            }
            else
            {
              BYTE2(v577[1]) = *(_BYTE *)(*((_QWORD *)&v631 + 1) + 14);
              v577[0] = *(_DWORD *)(*((_QWORD *)&v631 + 1) + 8);
            }
            v94 = 1;
            v578 = 1;
            v93 = v577;
            goto LABEL_108;
          }
LABEL_104:
          LOBYTE(v577[0]) = 0;
          v578 = 0;
          v92 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8);
          if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 < 4)
            v93 = (unsigned int *)(v92 + 4);
          else
            v93 = (unsigned int *)(v92 + 12);
          if (v579 == v93)
            goto LABEL_289;
          v94 = 0;
          v95 = 0;
LABEL_108:
          if (LOBYTE(v579[1]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v579[0]);
          }
          LOWORD(v579[1]) = *((_WORD *)v93 + 2);
          if (LOBYTE(v579[1]) <= 0xDu)
          {
            if (((1 << SLOBYTE(v579[1])) & 0x7FC) != 0)
            {
              BYTE2(v579[1]) = *((_BYTE *)v93 + 6);
              v579[0] = *v93;
            }
            else if (((1 << SLOBYTE(v579[1])) & 0x3003) != 0)
            {
              v579[0] = 0;
            }
            else
            {
              v579[0] = *v93;
              result = (unint64_t)WebCore::Length::ref((int *)v579);
            }
          }
          v167 = v94 ^ 1;
          if (v95 != 11)
            v167 = 1;
          if ((v167 & 1) == 0)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v577[0]);
          }
LABEL_289:
          if (!LOBYTE(v579[1]))
          {
            v168 = *(_QWORD *)(v7 + 32);
            if (v168)
            {
              v169 = *(_QWORD *)(v168 + 8);
              if (*(_BYTE *)(v169 + 46) == 5
                && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v169 + 88) + 32) + 8) + 16) & 0x20) == 0
                && *(_BYTE *)(v169 + 200))
              {
                if ((*(_BYTE *)(v169 + 45) & 4) != 0)
                  v321 = (WebCore::RenderBox *)v169;
                else
                  v321 = 0;
LABEL_612:
                v322 = WebCore::RenderBox::contentLogicalHeight(v321);
                v323 = (unsigned __int16)*(_DWORD *)(v7 + 124) >> 13;
                if ((v323 - 1) > 4)
                  v324 = 0;
                else
                  v324 = qword_1969FC6C8[v323 - 1];
                v526 = *(_DWORD *)(v7 + 168 + 4 * v324);
                v527 = v322 - v526;
                if (__OFSUB__(v322, v526))
                  v527 = (v322 >> 31) + 0x7FFFFFFF;
                v528 = ((unsigned __int16)*(_DWORD *)(v7 + 124) >> 13) - 1;
                if (v528 > 4)
                  v529 = 2;
                else
                  v529 = qword_1969FC6F0[v528];
                v530 = *(_DWORD *)(v7 + 168 + 4 * v529);
                v440 = __OFSUB__(v527, v530);
                v531 = v527 - v530;
                if (v440)
                  v531 = (v527 >> 31) + 0x7FFFFFFF;
                *(float *)&v631 = (float)v531 * 0.015625;
                WORD2(v631) = 4;
                BYTE6(v631) = 1;
                result = (unint64_t)WebCore::Length::operator=(v579, (unsigned int *)&v631);
                if (BYTE4(v631) == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v631);
                }
                goto LABEL_404;
              }
            }
            else if (MEMORY[0x2E] == 5
                   && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(MEMORY[0x58] + 32) + 8) + 16) & 0x20) == 0
                   && MEMORY[0xC8])
            {
              v321 = 0;
              goto LABEL_612;
            }
          }
          if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 148) >> 5) & 3u) - 1 > 1)
            goto LABEL_293;
          if (*(unsigned __int8 *)(v7 + 46) - 36 < 5)
            goto LABEL_293;
          result = WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets((WebCore *)v7, (const WebCore::RenderBox *)v62);
          if ((result & 1) != 0)
            goto LABEL_293;
          v335 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8);
          if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 < 4)
            v336 = (unsigned int *)(v335 + 4);
          else
            v336 = (unsigned int *)(v335 + 12);
          BYTE2(v577[1]) = 0;
          LOBYTE(v577[1]) = *((_BYTE *)v336 + 4);
          v337 = LOBYTE(v577[1]);
          BYTE1(v577[1]) = *((_BYTE *)v336 + 5);
          if (LOBYTE(v577[1]) - 2 >= 9)
          {
            if (!LOBYTE(v577[1]))
              goto LABEL_812;
            v338 = 0;
            if (LOBYTE(v577[1]) == 11)
            {
              v338 = (void *)*v336;
              v577[0] = *v336;
              result = (unint64_t)WebCore::Length::ref((int *)v577);
              goto LABEL_662;
            }
          }
          else
          {
            v338 = (void *)*v336;
          }
          if (LOBYTE(v577[1]) - 7 >= 4)
          {
LABEL_662:
            if ((v337 & 0xFFFFFFF7) != 3 || (*(_DWORD *)(v7 + 20) & 0x1800000) == 0x1000000)
            {
              if (v337 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v338);
              }
            }
            else
            {
              LODWORD(v631) = 100;
              WORD2(v631) = 3;
              BYTE6(v631) = 0;
              result = WebCore::RenderBox::computePercentageLogicalHeight(v7, (WebCore::Length *)&v631, 1);
              v339 = HIDWORD(result);
              if (v337 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v338);
              }
              if (!v339)
                goto LABEL_812;
            }
LABEL_293:
            if (v4 == 0x7FFFFFFF)
            {
              LOBYTE(v176) = 0;
              v177 = 0;
            }
            else
            {
              v170 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1048))(v7);
              v171 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 960))(v7);
              v172 = v170 + v171;
              if (__OFADD__(v170, v171))
                v172 = (v170 >> 31) + 0x7FFFFFFF;
              v173 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1056))(v7);
              result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 968))(v7);
              v174 = v173 + result;
              if (__OFADD__(v173, (_DWORD)result))
                v174 = (v173 >> 31) + 0x7FFFFFFF;
              v440 = __OFADD__(v172, v174);
              v175 = v172 + v174;
              if (v440)
                v175 = (v172 >> 31) + 0x7FFFFFFF;
              v440 = __OFSUB__(v4, v175);
              v176 = v4 - v175;
              if (v440)
                v176 = (v4 >> 31) + 0x7FFFFFFF;
              v177 = v176 >> 8;
            }
            v178 = (uint64_t *)(v176 | (unint64_t)(v177 << 8));
            if ((*(_BYTE *)(v7 + 52) & 7) == 3)
              goto LABEL_305;
            v179 = LOBYTE(v579[1]);
            if (!LOBYTE(v579[1]))
              goto LABEL_305;
            v216 = LOBYTE(v579[1]) - 5;
            v217 = (uint64_t *)(v176 | (unint64_t)(v177 << 8));
            if (v216 >= 6)
            {
              if (LOBYTE(v579[1]) == 4)
              {
                v318 = *(float *)v579;
                if (!BYTE2(v579[1]))
                  v318 = (float)(int)v579[0];
                v319 = v318 * 64.0;
                if (v319 >= 2147483650.0 || v319 <= -2147483650.0)
                {
                  if (v319 >= 2147483650.0)
                  {
                    LODWORD(result) = 0x7FFFFFFF;
                  }
                  else if (v319 <= -2147483650.0)
                  {
                    LODWORD(result) = 0x80000000;
                  }
                  else
                  {
                    LODWORD(result) = (int)v319;
                  }
                }
                else
                {
                  LODWORD(result) = (int)v319;
                }
                v227 = result & 0xFFFFFF00;
                goto LABEL_600;
              }
              if ((v579[1] & 0xF7) != 3)
              {
                v180 = v4;
LABEL_306:
                v181 = ((*(_DWORD *)(v7 + 124) >> 13) & 6) - 2;
                v182 = *(unsigned __int8 **)(*(_QWORD *)(v7 + 88) + 8);
                if (v181 <= 3)
                {
                  if (v182[32] == 13)
                  {
                    v572 = 0;
                    v183 = 0;
                    goto LABEL_1212;
                  }
                  v367 = v182 + 28;
                }
                else
                {
                  if (v182[48] == 13)
                  {
                    v183 = 0;
                    v572 = 0;
                    goto LABEL_309;
                  }
                  v367 = v182 + 44;
                }
                v368 = v178;
                result = WebCore::RenderBox::computeLogicalHeightUsing((WebCore::RenderBox *)v7, 2, v367, (unint64_t)v178 | ((unint64_t)(v4 != 0x7FFFFFFF) << 32));
                v178 = v368;
                v183 = result;
                v572 = BYTE4(result);
                v182 = *(unsigned __int8 **)(*(_QWORD *)(v7 + 88) + 8);
                v181 = ((*(_DWORD *)(v7 + 124) >> 13) & 6) - 2;
LABEL_309:
                if (v181 >= 4)
                {
                  v184 = v182 + 36;
LABEL_311:
                  LODWORD(v635[0]) = 0;
                  BYTE6(v635[0]) = 0;
                  BYTE4(v635[0]) = v184[4];
                  v185 = BYTE4(v635[0]);
                  BYTE5(v635[0]) = v184[5];
                  if (BYTE4(v635[0]) > 0xDu)
                    goto LABEL_1213;
                  if (((1 << SBYTE4(v635[0])) & 0x7FC) != 0)
                  {
                    BYTE6(v635[0]) = v184[6];
                    v569 = 0;
                    LODWORD(v635[0]) = *(_DWORD *)v184;
                    goto LABEL_321;
                  }
                  if (((1 << SBYTE4(v635[0])) & 0x3003) == 0)
                  {
                    LODWORD(v635[0]) = *(_DWORD *)v184;
                    v382 = v178;
                    result = (unint64_t)WebCore::Length::ref((int *)v635);
                    v178 = v382;
                    v185 = BYTE4(v635[0]);
                  }
                  if (v185)
                  {
LABEL_1213:
                    v569 = 0;
LABEL_321:
                    if ((v185 - 7) <= 1)
                    {
                      v520 = v178;
                      *(_DWORD *)((char *)&v631 + 3) = 0;
                      LODWORD(v631) = 0;
                      result = (unint64_t)WebCore::Length::operator=((unsigned int *)v635, (unsigned int *)&v631);
                      if (BYTE4(v631) == 11)
                      {
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v631);
                      }
                      v178 = v520;
                    }
                    if ((*(_BYTE *)(v7 + 52) & 7) == 3)
                    {
                      v189 = v5;
                      v190 = v11;
                      v192 = 1;
                      result = WebCore::RenderBox::replacedMinMaxLogicalHeightComputesAsNone(v7, 1);
                      if ((result & 1) != 0)
                      {
                        LOBYTE(v191) = 0;
                        v193 = 0;
                      }
                      else
                      {
                        WebCore::Length::Length((WebCore::Length *)&v631, (const WebCore::Length *)v635);
                        v532 = WebCore::RenderBox::computeReplacedLogicalHeightUsing((WebCore::RenderObject *)v7, 1, (unsigned __int8 *)&v631);
                        result = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight((WebCore::RenderBoxModelObject *)v7);
                        v191 = v532 + result;
                        if (__OFADD__(v532, (_DWORD)result))
                          v191 = (v532 >> 31) + 0x7FFFFFFF;
                        v193 = v191 >> 8;
                        if (BYTE4(v631) == 11)
                        {
                          {
                            WebCore::calculationValues(void)::map = 1;
                            qword_1ECE90C98 = 0;
                          }
                          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v631);
                        }
                        v192 = 0;
                      }
                      goto LABEL_333;
                    }
                    v187 = BYTE4(v635[0]);
                    if (!BYTE4(v635[0]))
                    {
                      if (v4 == 0x7FFFFFFF)
                      {
LABEL_328:
                        v189 = v5;
LABEL_329:
                        v190 = v11;
LABEL_330:
                        LODWORD(v188) = 0;
LABEL_331:
                        LOBYTE(result) = 0;
LABEL_332:
                        result = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v7 + 1264))(v7, result | v188);
                        LOBYTE(v191) = result;
                        v192 = 0;
                        v193 = result >> 8;
LABEL_333:
                        v194 = v191 | (v193 << 8);
                        if (!v572)
                          v183 = 0x7FFFFFFF;
                        LODWORD(v631) = v183;
                        if (v192)
                          v195 = 0;
                        else
                          v195 = v194;
                        v577[0] = v195;
                        if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 148) >> 5) & 3u) - 1 <= 1)
                        {
                          result = WebCore::RenderBox::constrainLogicalMinMaxSizesByAspectRatio(v7, (int *)v577, (int *)&v631, v180, v569, 1);
                          v183 = v631;
                          v195 = v577[0];
                        }
                        v11 = v190;
                        v5 = v189;
                        if (BYTE4(v635[0]) == 11)
                        {
                          {
                            WebCore::calculationValues(void)::map = 1;
                            qword_1ECE90C98 = 0;
                          }
                          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v635[0]));
                        }
                        if (v183 >= v180)
                          v196 = v180;
                        else
                          v196 = v183;
                        if (v196 > v195)
                          v195 = v196;
                        goto LABEL_346;
                      }
                      v188 = *(_QWORD *)(v7 + 32);
                      if (!v188)
                      {
                        v189 = v5;
                        v190 = v11;
                        goto LABEL_331;
                      }
                      result = *(_QWORD *)(v188 + 8);
                      if (result)
                      {
                        if ((*(char *)(result + 45) & 0x80000000) == 0)
                          goto LABEL_328;
                        v189 = v5;
                        if ((*(_DWORD *)(v7 + 20) & 0x400) != 0)
                          goto LABEL_329;
                        v190 = v11;
                        v229 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 88) + 32) + 16)
                                                  + 20);
                        v230 = (v229 >> 1) & 1;
                        v231 = (v229 & 2) == 0;
                        if ((*(_BYTE *)(result + 21) & 0x10) != 0)
                          v231 = v230;
                        if (v231 != (*(_DWORD *)(v7 + 20) & 0x1000u) >> 12)
                          goto LABEL_330;
                        v232 = v178;
                        LODWORD(result) = WebCore::RenderFlexibleBox::shouldApplyMinSizeAutoForChild((WebCore::RenderFlexibleBox *)result, (const WebCore::RenderBox *)v7);
                        if ((_DWORD)result)
                        {
                          LODWORD(result) = (*(uint64_t (**)(unint64_t, uint64_t *))(*(_QWORD *)v7 + 1280))(v7, v232);
LABEL_400:
                          LODWORD(v188) = result & 0xFFFFFF00;
                          goto LABEL_332;
                        }
                      }
                      else
                      {
                        v189 = v5;
                        v190 = v11;
                      }
                      LODWORD(v188) = 0;
                      goto LABEL_332;
                    }
                    v564 = v180;
                    if (BYTE4(v635[0]) - 5 >= 6)
                    {
                      v189 = v5;
                      if (BYTE4(v635[0]) == 4)
                      {
                        v315 = *(float *)v635;
                        if (!BYTE6(v635[0]))
                          v315 = (float)SLODWORD(v635[0]);
                        v316 = v315 * 64.0;
                        v317 = v316 >= 2147483650.0 || v316 <= -2147483650.0;
                        v190 = v11;
                        if (v317)
                        {
                          if (v316 >= 2147483650.0)
                          {
                            LODWORD(result) = 0x7FFFFFFF;
                          }
                          else if (v316 <= -2147483650.0)
                          {
                            LODWORD(result) = 0x80000000;
                          }
                          else
                          {
                            LODWORD(result) = (int)v316;
                          }
                        }
                        else
                        {
                          LODWORD(result) = (int)v316;
                        }
                        goto LABEL_400;
                      }
                      v190 = v11;
                      if ((BYTE4(v635[0]) & 0xF7) != 3)
                      {
LABEL_380:
                        LOBYTE(v191) = 0;
                        v193 = 0;
                        v192 = 1;
                        goto LABEL_333;
                      }
                      result = WebCore::RenderBox::computePercentageLogicalHeight(v7, (WebCore::Length *)v635, 1);
                      LODWORD(v188) = result & 0xFFFFFF00;
                      v215 = result & 0x100000000;
LABEL_379:
                      if ((v215 & 0x100000000) != 0)
                        goto LABEL_332;
                      goto LABEL_380;
                    }
                    v560 = BYTE4(v635[0]) - 5;
                    v206 = v178;
                    v189 = v5;
                    v190 = v11;
                    v207 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1048))(v7);
                    v208 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 960))(v7);
                    v209 = v207 + v208;
                    if (__OFADD__(v207, v208))
                      v209 = (v207 >> 31) + 0x7FFFFFFF;
                    v210 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1056))(v7);
                    v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 968))(v7);
                    v212 = v210 + v211;
                    if (__OFADD__(v210, v211))
                      v212 = (v210 >> 31) + 0x7FFFFFFF;
                    v213 = v209 + v212;
                    if (__OFADD__(v209, v212))
                      v213 = (v209 >> 31) + 0x7FFFFFFF;
                    if ((v187 - 7) < 2 || v187 == 10 || v560 <= 1)
                    {
                      if (v4 == 0x7FFFFFFF)
                      {
                        v215 = 0;
                        LOBYTE(v214) = 0;
                        LODWORD(v188) = 0;
                        goto LABEL_378;
                      }
                      v214 = (*(uint64_t (**)(unint64_t, uint64_t *))(*(_QWORD *)v7 + 1280))(v7, v206);
                    }
                    else
                    {
                      if (v187 != 9)
                      {
                        LOBYTE(v214) = 0;
                        LODWORD(v188) = 0;
                        goto LABEL_377;
                      }
                      v325 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7);
                      v326 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v325 + 1344))(v325, 0);
                      v214 = v326 - v213;
                      if (__OFSUB__(v326, v213))
                        v214 = (v326 >> 31) + 0x7FFFFFFF;
                    }
                    LODWORD(v188) = v214 & 0xFFFFFF00;
LABEL_377:
                    v215 = 0x100000000;
LABEL_378:
                    v180 = v564;
                    result = v188 | v214;
                    goto LABEL_379;
                  }
                  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 148) >> 5) & 3u) - 1 > 1)
                  {
                    v186 = v5;
LABEL_319:
                    v569 = 0;
LABEL_320:
                    v185 = BYTE4(v635[0]);
                    v5 = v186;
                    goto LABEL_321;
                  }
                  *(_QWORD *)v562 = v178;
                  if (*(unsigned __int8 *)(v7 + 46) - 36 < 5
                    || (result = WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets((WebCore *)v7, (const WebCore::RenderBox *)v62), (result & 1) != 0))
                  {
                    v186 = v5;
                    v569 = 0;
                    goto LABEL_962;
                  }
                  v383 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8);
                  v186 = v5;
                  if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 < 4)
                    v384 = (unsigned int *)(v383 + 4);
                  else
                    v384 = (unsigned int *)(v383 + 12);
                  v566 = v11;
                  BYTE2(v577[1]) = 0;
                  LOBYTE(v577[1]) = *((_BYTE *)v384 + 4);
                  v385 = LOBYTE(v577[1]);
                  BYTE1(v577[1]) = *((_BYTE *)v384 + 5);
                  v386 = v180;
                  if (LOBYTE(v577[1]) - 2 >= 9)
                  {
                    if (!LOBYTE(v577[1]))
                      goto LABEL_952;
                    v387 = 0;
                    if (LOBYTE(v577[1]) == 11)
                    {
                      v387 = (void *)*v384;
                      v577[0] = *v384;
                      result = (unint64_t)WebCore::Length::ref((int *)v577);
                      goto LABEL_802;
                    }
                  }
                  else
                  {
                    v387 = (void *)*v384;
                  }
                  if (LOBYTE(v577[1]) - 7 >= 4)
                  {
LABEL_802:
                    if ((v385 & 0xFFFFFFF7) != 3 || (*(_DWORD *)(v7 + 20) & 0x1800000) == 0x1000000)
                    {
                      if (v385 == 11)
                      {
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v387);
                      }
                      v569 = 0;
                    }
                    else
                    {
                      LODWORD(v631) = 100;
                      WORD2(v631) = 3;
                      BYTE6(v631) = 0;
                      result = WebCore::RenderBox::computePercentageLogicalHeight(v7, (WebCore::Length *)&v631, 1);
                      v388 = HIDWORD(result);
                      if (v385 == 11)
                      {
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v387);
                      }
                      v569 = 0;
                      if (!v388)
                      {
                        v11 = v566;
                        v180 = v386;
                        v178 = *(uint64_t **)v562;
                        if (v4 == 0x7FFFFFFF)
                          goto LABEL_320;
                        goto LABEL_953;
                      }
                    }
                    v11 = v566;
                    v180 = v386;
                    goto LABEL_962;
                  }
LABEL_952:
                  v11 = v566;
                  v178 = *(uint64_t **)v562;
                  if (v4 == 0x7FFFFFFF)
                    goto LABEL_319;
LABEL_953:
                  if ((*(_BYTE *)(v7 + 52) & 7) != 3)
                  {
                    v487 = *(_QWORD *)(v7 + 96);
                    v488 = *(_DWORD *)(v7 + 20);
                    if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 < 4)
                    {
                      if ((v488 & 0x80000) != 0)
                        goto LABEL_954;
                      v489 = v487 >> 10;
                    }
                    else
                    {
                      if ((v488 & 0x80000) != 0)
                        goto LABEL_954;
                      v489 = v487 >> 13;
                    }
                    if ((v489 & 7) == 0)
                    {
                      v490 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth((WebCore::RenderBoxModelObject *)v7);
                      v491 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight((WebCore::RenderBoxModelObject *)v7);
                      v492 = ((*(_DWORD *)(v7 + 124) >> 13) & 6) - 2;
                      v493 = *(_QWORD *)(v7 + 88);
                      v494 = *(_QWORD *)(v493 + 32);
                      v495 = (double *)(v494 + 112);
                      if (v492 >= 4)
                        v496 = (double *)(v494 + 112);
                      else
                        v496 = (double *)(v494 + 104);
                      if (v492 >= 4)
                        v495 = (double *)(v494 + 104);
                      v497 = *(_DWORD *)(v494 + 148);
                      if ((v497 & 0x60) == 0x40)
                        v498 = 0;
                      else
                        v498 = (*(unsigned __int8 *)(*(_QWORD *)(v493 + 8) + 68) >> 2) & 1;
                      if (v492 < 4)
                        v499 = (int *)(v7 + 164);
                      else
                        v499 = (int *)(v7 + 160);
                      v500 = WebCore::RenderBox::blockSizeFromAspectRatio(v490, v491, v498, *v499, (v497 >> 5) & 3, (*(_BYTE *)(v7 + 52) & 7) == 3, *v495 / *v496);
                      v501 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight((WebCore::RenderBoxModelObject *)v7);
                      v502 = v500 - v501;
                      if (__OFSUB__(v500, v501))
                        v502 = (v500 >> 31) + 0x7FFFFFFF;
                      v503 = *(unsigned int *)(v7 + 64);
                      if (v503 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32))
                      {
                        v504 = *(_QWORD *)((v503 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32)) + 8);
                        v505 = v502 <= (int)v562[0] ? v562[0] : v502;
                        if (v504)
                          v502 = v505;
                      }
                      *(float *)&v631 = (float)v502 * 0.015625;
                      WORD2(v631) = 4;
                      BYTE6(v631) = 1;
                      result = (unint64_t)WebCore::Length::operator=((unsigned int *)v635, (unsigned int *)&v631);
                      if (BYTE4(v631) == 11)
                      {
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v631);
                      }
                      v569 = 1;
                      goto LABEL_955;
                    }
                  }
LABEL_954:
                  v569 = 0;
LABEL_955:
                  v11 = v566;
LABEL_962:
                  v178 = *(uint64_t **)v562;
                  goto LABEL_320;
                }
LABEL_1212:
                v184 = v182 + 20;
                goto LABEL_311;
              }
              result = WebCore::RenderBox::computePercentageLogicalHeight(v7, (WebCore::Length *)v579, 1);
              v227 = result & 0xFFFFFF00;
              v228 = result & 0x100000000;
            }
            else
            {
              v573 = v5;
              v218 = v11;
              v219 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1048))(v7);
              v220 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 960))(v7);
              v221 = v219 + v220;
              if (__OFADD__(v219, v220))
                v221 = (v219 >> 31) + 0x7FFFFFFF;
              v222 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1056))(v7);
              v223 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 968))(v7);
              v224 = v222 + v223;
              if (__OFADD__(v222, v223))
                v224 = (v222 >> 31) + 0x7FFFFFFF;
              v62 = v217;
              v225 = v221 + v224;
              if (__OFADD__(v221, v224))
                v225 = (v221 >> 31) + 0x7FFFFFFF;
              v11 = v218;
              if ((v179 - 7) < 2 || v179 == 10 || v216 <= 1)
              {
                if (v4 == 0x7FFFFFFF)
                {
                  v228 = 0;
                  LOBYTE(v226) = 0;
                  v227 = 0;
                }
                else
                {
                  v226 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1280))(v7);
                  v227 = v226 & 0xFFFFFF00;
                  v228 = 0x100000000;
                }
              }
              else
              {
                if (v179 == 9)
                {
                  v327 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7);
                  v328 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v327 + 1344))(v327, 0);
                  v226 = v328 - v225;
                  if (__OFSUB__(v328, v225))
                    v226 = (v328 >> 31) + 0x7FFFFFFF;
                  v227 = v226 & 0xFFFFFF00;
                }
                else
                {
                  LOBYTE(v226) = 0;
                  v227 = 0;
                }
                v228 = 0x100000000;
                v11 = v218;
              }
              v5 = v573;
              result = v227 | v226;
            }
            if ((v228 & 0x100000000) == 0)
            {
              v178 = v217;
LABEL_305:
              v180 = v4;
              goto LABEL_306;
            }
LABEL_600:
            result = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v7 + 1264))(v7, result | v227);
            v178 = v217;
            v180 = result;
            goto LABEL_306;
          }
LABEL_812:
          v567 = v11;
          if (v4 == 0x7FFFFFFF)
          {
            v389 = 0;
            v390 = 0;
            goto LABEL_814;
          }
          v448 = *(_QWORD *)(v7 + 88);
          if ((*(_BYTE *)(*(_QWORD *)(v448 + 8) + 68) & 4) != 0)
          {
            v390 = v4 >> 8;
            v389 = v4;
            goto LABEL_814;
          }
          switch((unsigned __int16)*(_DWORD *)(v7 + 124) >> 13)
          {
            case 1:
              v450 = WebCore::RenderStyle::borderBottomWidth((WebCore::RenderStyle *)(v7 + 80));
              break;
            case 2:
            case 4:
              v450 = WebCore::RenderStyle::borderLeftWidth((WebCore::RenderStyle *)(v7 + 80));
              break;
            case 3:
            case 5:
              v450 = WebCore::RenderStyle::borderRightWidth((WebCore::RenderStyle *)(v7 + 80));
              break;
            default:
              v449 = *(_QWORD *)(v448 + 24);
              v450 = 0.0;
              if ((*(_BYTE *)(v449 + 172) & 0xE) != 0)
              {
                v508 = *(_QWORD *)(v449 + 200);
                if (*(_BYTE *)(v508 + 5) && *(_BYTE *)(v508 + 52) == 4)
                {
                  if (*(_BYTE *)(v508 + 54))
                    v450 = *(float *)(v508 + 48);
                  else
                    v450 = (float)*(int *)(v508 + 48);
                }
                else
                {
                  v450 = *(float *)(v449 + 168);
                }
              }
              break;
          }
          v451 = v450 * 64.0;
          if (v451 < 2147483650.0 && v451 > -2147483650.0)
            goto LABEL_930;
          if (v451 >= 2147483650.0)
          {
            v452 = 0x7FFFFFFF;
            goto LABEL_931;
          }
          if (v451 > -2147483650.0)
LABEL_930:
            v452 = (int)v451;
          else
            v452 = 0x80000000;
LABEL_931:
          v453 = WebCore::RenderBoxModelObject::paddingBefore((WebCore::RenderBoxModelObject *)v7);
          v454 = v452 + v453;
          if (__OFADD__(v452, v453))
            v454 = (v452 >> 31) + 0x7FFFFFFF;
          switch((unsigned __int16)*(_DWORD *)(v7 + 124) >> 13)
          {
            case 1:
              v456 = WebCore::RenderStyle::borderTopWidth((WebCore::RenderStyle *)(v7 + 80));
              break;
            case 2:
            case 4:
              v456 = WebCore::RenderStyle::borderRightWidth((WebCore::RenderStyle *)(v7 + 80));
              break;
            case 3:
            case 5:
              v456 = WebCore::RenderStyle::borderLeftWidth((WebCore::RenderStyle *)(v7 + 80));
              break;
            default:
              v455 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
              v456 = 0.0;
              if ((*(_BYTE *)(v455 + 196) & 0xE) != 0)
              {
                v506 = *(_QWORD *)(v455 + 200);
                if (*(_BYTE *)(v506 + 5) && *(_BYTE *)(v506 + 68) == 4)
                {
                  if (*(_BYTE *)(v506 + 70))
                    v456 = *(float *)(v506 + 64);
                  else
                    v456 = (float)*(int *)(v506 + 64);
                }
                else
                {
                  v456 = *(float *)(v455 + 192);
                }
              }
              break;
          }
          v457 = v456 * 64.0;
          if (v457 < 2147483650.0 && v457 > -2147483650.0)
            goto LABEL_937;
          if (v457 >= 2147483650.0)
          {
            v458 = 0x7FFFFFFF;
            goto LABEL_938;
          }
          if (v457 > -2147483650.0)
LABEL_937:
            v458 = (int)v457;
          else
            v458 = 0x80000000;
LABEL_938:
          v459 = v454 + v458;
          if (__OFADD__(v454, v458))
            v459 = (v454 >> 31) + 0x7FFFFFFF;
          v460 = WebCore::RenderBoxModelObject::paddingAfter((WebCore::RenderBoxModelObject *)v7);
          v461 = v459 + v460;
          if (__OFADD__(v459, v460))
            v461 = (v459 >> 31) + 0x7FFFFFFF;
          v440 = __OFSUB__(v4, v461);
          v462 = v4 - v461;
          if (v440)
            v462 = (v4 >> 31) + 0x7FFFFFFF;
          v390 = v462 >> 8;
          v389 = v462;
LABEL_814:
          v391 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1016))(v7);
          v392 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1024))(v7);
          v393 = v391 + v392;
          if (__OFADD__(v391, v392))
            v393 = (v391 >> 31) + 0x7FFFFFFF;
          v394 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 944))(v7);
          v395 = v393 + v394;
          if (__OFADD__(v393, v394))
            v395 = (v393 >> 31) + 0x7FFFFFFF;
          v396 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 952))(v7);
          v397 = v395 + v396;
          if (__OFADD__(v395, v396))
            v397 = (v395 >> 31) + 0x7FFFFFFF;
          v398 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1000))(v7);
          v399 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1008))(v7);
          v400 = v398 + v399;
          if (__OFADD__(v398, v399))
            v400 = (v398 >> 31) + 0x7FFFFFFF;
          v401 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 928))(v7);
          v402 = v400 + v401;
          if (__OFADD__(v400, v401))
            v402 = (v400 >> 31) + 0x7FFFFFFF;
          result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 936))(v7);
          v403 = v402 + result;
          if (__OFADD__(v402, (_DWORD)result))
            v403 = (v402 >> 31) + 0x7FFFFFFF;
          v404 = ((*(_DWORD *)(v7 + 124) >> 13) & 6) - 2;
          v405 = *(_QWORD *)(v7 + 88);
          v406 = *(_QWORD *)(v405 + 32);
          v407 = (double *)(v406 + 112);
          if (v404 >= 4)
            v408 = (double *)(v406 + 112);
          else
            v408 = (double *)(v406 + 104);
          if (v404 >= 4)
            v407 = (double *)(v406 + 104);
          v409 = *(_DWORD *)(v406 + 148) & 0x60;
          if (v409 == 64)
            LOBYTE(v410) = 0;
          else
            v410 = (*(unsigned __int8 *)(*(_QWORD *)(v405 + 8) + 68) >> 2) & 1;
          v152 = v404 >= 4;
          v411 = (int *)(v7 + 164);
          if (v152)
            v411 = (int *)(v7 + 160);
          v412 = *v411;
          v72 = v409 == 32;
          v413 = v410 ^ 1;
          if (!v72)
            v413 = 1;
          v414 = *v407 / *v408;
          if ((v413 & 1) == 0 && (*(_BYTE *)(v7 + 52) & 7) != 3)
          {
            v415 = (double)v412 * 0.015625 / v414 * 64.0;
            if (v415 < 2147483650.0 && v415 > -2147483650.0)
              goto LABEL_844;
            if (v415 >= 2147483650.0)
            {
              v417 = 0x7FFFFFFF;
            }
            else
            {
              if (v415 > -2147483650.0)
              {
LABEL_844:
                v417 = (int)v415;
                goto LABEL_845;
              }
              v417 = 0x80000000;
            }
LABEL_845:
            if (v417 <= v403)
              v180 = v403;
            else
              v180 = v417;
LABEL_924:
            v178 = (uint64_t *)(v389 | (unint64_t)(v390 << 8));
            v11 = v567;
            goto LABEL_306;
          }
          v440 = __OFSUB__(v412, v397);
          v443 = v412 - v397;
          v444 = (v412 >> 31) + 0x7FFFFFFF;
          if (!v440)
            v444 = v443;
          v445 = (double)v444 * 0.015625 / v414 * 64.0;
          if (v445 < 2147483650.0 && v445 > -2147483650.0)
            goto LABEL_921;
          if (v445 >= 2147483650.0)
          {
            v447 = 0x7FFFFFFF;
          }
          else
          {
            if (v445 > -2147483650.0)
            {
LABEL_921:
              v447 = (int)v445;
              goto LABEL_922;
            }
            v447 = 0x80000000;
          }
LABEL_922:
          v180 = v447 + v403;
          if (__OFADD__(v447, v403))
            v180 = (v447 >> 31) + 0x7FFFFFFF;
          goto LABEL_924;
        }
        v238 = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v7 + 1336))(v7, 0);
        v239 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1048))(v7);
        v240 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 960))(v7);
        if (__OFADD__(v239, v240))
          v241 = (v239 >> 31) + 0x7FFFFFFF;
        else
          v241 = v239 + v240;
        v242 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1056))(v7);
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 968))(v7);
        v243 = v242 + result;
        if (__OFADD__(v242, (_DWORD)result))
          v243 = (v242 >> 31) + 0x7FFFFFFF;
        v440 = __OFADD__(v241, v243);
        v244 = v241 + v243;
        if (v440)
          v244 = (v241 >> 31) + 0x7FFFFFFF;
        v440 = __OFADD__(v238, v244);
        v245 = v238 + v244;
        if (v440)
          v245 = (v238 >> 31) + 0x7FFFFFFF;
        v233 = (float)v245;
      }
      v234 = v233 * 0.015625;
      if (LOBYTE(v579[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v579[0]);
      }
      LOWORD(v579[1]) = 4;
      BYTE2(v579[1]) = 1;
      *(float *)v579 = v234;
LABEL_404:
      v235 = *(float *)v579;
      if (!BYTE2(v579[1]))
        v235 = (float)(int)v579[0];
      v236 = v235 * 64.0;
      if (v236 < 2147483650.0 && v236 > -2147483650.0)
        goto LABEL_410;
      if (v236 >= 2147483650.0)
      {
        v195 = 0x7FFFFFFF;
      }
      else
      {
        if (v236 > -2147483650.0)
        {
LABEL_410:
          v195 = (int)v236;
          goto LABEL_346;
        }
        v195 = 0x80000000;
      }
LABEL_346:
      *(_DWORD *)a4 = v195;
      if (v11)
      {
        shouldFlipBeforeAfterMargins = WebCore::shouldFlipBeforeAfterMargins((WebCore *)*(unsigned int *)(v10 + 120), (const WebCore::RenderStyle *)*(unsigned int *)(v10 + 124), (const WebCore::RenderStyle *)*(unsigned int *)(v7 + 124));
        v522 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1144))(v7);
        if (shouldFlipBeforeAfterMargins)
          v523 = (int *)(a4 + 12);
        else
          v523 = v5;
        if (shouldFlipBeforeAfterMargins)
          v524 = v5;
        else
          v524 = (int *)(a4 + 12);
        result = (unint64_t)WebCore::RenderBox::computeInlineDirectionMargins((int *)v7, (_QWORD *)v10, v522, 0, v195, v523, v524);
      }
      goto LABEL_237;
    }
    v12 = ((unsigned __int16)*(_DWORD *)(v7 + 124) ^ (unsigned __int16)*(_DWORD *)(result + 124)) & 0xE000;
    v13 = (int *)(a4 + 12);
    v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1144))(v7);
    if (!v12)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 461) & 1) != 0
        && (*(unsigned int (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 1584))(v10, 1, v7))
      {
        v23 = *(_QWORD *)(v7 + 32);
        if (!v23)
          goto LABEL_18;
        v23 = *(_QWORD *)(v23 + 8);
        if (!v23)
          goto LABEL_18;
        if (*(_BYTE *)(v23 + 46) == 12 && (*(_BYTE *)(v7 + 21) & 4) == 0)
        {
          v525 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v7, v9);
          LODWORD(v23) = 0;
          *((_BYTE *)v525 + 2) |= 1u;
          goto LABEL_18;
        }
        goto LABEL_604;
      }
      v15 = ((unsigned __int16)*(_DWORD *)(v10 + 124) >> 13) - 1;
      if (v15 > 4)
        v16 = 0;
      else
        v16 = qword_1969FC6C8[v15];
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24) + 40;
      v18 = (unsigned __int8 *)(v17 + 8 * v16);
      v19 = v18[4];
      switch(v19)
      {
        case 4:
          v20 = *(float *)v18;
          if (!v18[6])
            v20 = (float)*(int *)v18;
          break;
        case 3:
          v205 = *(float *)v18;
          if (!*(_BYTE *)(v17 + 8 * v16 + 6))
            v205 = (float)*(int *)v18;
          v20 = (float)((float)((float)v14 * 0.015625) * v205) / 100.0;
          break;
        case 11:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v18, (float)v14 * 0.015625);
          break;
        default:
LABEL_604:
          LODWORD(v23) = 0;
          goto LABEL_18;
      }
      v21 = v20 * 64.0;
      if (v21 < 2147483650.0 && v21 > -2147483650.0)
        goto LABEL_17;
      if (v21 >= 2147483650.0)
      {
        LODWORD(v23) = 0x7FFFFFFF;
        goto LABEL_18;
      }
      if (v21 <= -2147483650.0)
        LODWORD(v23) = 0x80000000;
      else
LABEL_17:
        LODWORD(v23) = (int)v21;
LABEL_18:
      v24 = (int *)(a4 + 12);
      v13 = v5;
LABEL_19:
      *v13 = v23;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 461) & 2) != 0)
      {
        result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 1584))(v10, 2, v7);
        if ((_DWORD)result)
        {
          v32 = *(_QWORD *)(v7 + 32);
          if (!v32)
            goto LABEL_31;
          v32 = *(_QWORD *)(v32 + 8);
          if (!v32)
            goto LABEL_31;
          if (*(_BYTE *)(v32 + 46) == 12 && (*(_BYTE *)(v7 + 21) & 4) == 0)
          {
            result = (unint64_t)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v7, v9);
            LODWORD(v32) = 0;
            *(_BYTE *)(result + 2) |= 2u;
            goto LABEL_31;
          }
          goto LABEL_602;
        }
      }
      v25 = ((unsigned __int16)*(_DWORD *)(v10 + 124) >> 13) - 1;
      if (v25 > 4)
        v26 = 2;
      else
        v26 = qword_1969FC6F0[v25];
      v27 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24) + 40;
      result = v27 + 8 * v26;
      v28 = *(unsigned __int8 *)(result + 4);
      switch(v28)
      {
        case 4:
          v29 = *(float *)result;
          if (!*(_BYTE *)(result + 6))
            v29 = (float)*(int *)result;
          break;
        case 3:
          v204 = *(float *)result;
          if (!*(_BYTE *)(v27 + 8 * v26 + 6))
            v204 = (float)*(int *)result;
          v29 = (float)((float)((float)v14 * 0.015625) * v204) / 100.0;
          break;
        case 11:
          result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)result, (float)v14 * 0.015625);
          break;
        default:
LABEL_602:
          LODWORD(v32) = 0;
          goto LABEL_31;
      }
      v30 = v29 * 64.0;
      if (v30 < 2147483650.0 && v30 > -2147483650.0)
        goto LABEL_30;
      if (v30 >= 2147483650.0)
      {
        LODWORD(v32) = 0x7FFFFFFF;
        goto LABEL_31;
      }
      if (v30 <= -2147483650.0)
        LODWORD(v32) = 0x80000000;
      else
LABEL_30:
        LODWORD(v32) = (int)v30;
LABEL_31:
      *v24 = v32;
      goto LABEL_32;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 461) & 1) != 0
      && (*(unsigned int (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 1584))(v10, 1, v7))
    {
      v23 = *(_QWORD *)(v7 + 32);
      if (!v23)
        goto LABEL_1271;
      v23 = *(_QWORD *)(v23 + 8);
      if (!v23)
        goto LABEL_1271;
      if (*(_BYTE *)(v23 + 46) == 12 && (*(_BYTE *)(v7 + 21) & 4) == 0)
      {
        v557 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v7, v9);
        LODWORD(v23) = 0;
        *((_BYTE *)v557 + 2) |= 1u;
        goto LABEL_1271;
      }
LABEL_1307:
      LODWORD(v23) = 0;
LABEL_1271:
      v24 = v5;
      goto LABEL_19;
    }
    v545 = ((unsigned __int16)*(_DWORD *)(v10 + 124) >> 13) - 1;
    if (v545 > 4)
      v546 = 0;
    else
      v546 = qword_1969FC6C8[v545];
    v547 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24) + 40;
    v548 = (unsigned __int8 *)(v547 + 8 * v546);
    v549 = v548[4];
    switch(v549)
    {
      case 4:
        v550 = *(float *)v548;
        if (!v548[6])
          v550 = (float)*(int *)v548;
        break;
      case 3:
        v552 = *(float *)v548;
        if (!*(_BYTE *)(v547 + 8 * v546 + 6))
          v552 = (float)*(int *)v548;
        v550 = (float)((float)((float)v14 * 0.015625) * v552) / 100.0;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v548, (float)v14 * 0.015625);
        break;
      default:
        goto LABEL_1307;
    }
    v551 = v550 * 64.0;
    if (v551 >= 2147483650.0)
    {
      LODWORD(v23) = 0x7FFFFFFF;
    }
    else if (v551 <= -2147483650.0)
    {
      LODWORD(v23) = 0x80000000;
    }
    else
    {
      LODWORD(v23) = (int)v551;
    }
    goto LABEL_1271;
  }
  *(_QWORD *)v577 = 0;
  v635[0] = 0;
  v35 = *(_BYTE *)(result + 45);
  if ((v35 & 2) != 0 || v6 == 17)
    goto LABEL_48;
  v634 = result;
  *(_QWORD *)&v631 = v635;
  *((_QWORD *)&v631 + 1) = v577;
  v632 = &v634;
  if ((v35 & 1) == 0)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8);
    if (v36)
    {
      if ((*(_WORD *)(v36 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194123388);
      }
      if ((*(_BYTE *)(v36 + 23) & 0x20) != 0)
        goto LABEL_1192;
    }
  }
  v37 = *(_QWORD *)(result + 96);
  if ((v37 & 0xF80000000000) == 0x480000000000)
  {
LABEL_1192:
    WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v631);
    v40 = *(WebCore::RenderBox **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v634 + 24) + 8) + 40) + 8)
                                 + 1944);
    goto LABEL_50;
  }
  v38 = (v37 >> 19) & 7;
  if (v38 <= 3 && v38 != 2)
  {
LABEL_48:
    v39 = *(_QWORD *)(result + 32);
    if (v39)
    {
      v40 = *(WebCore::RenderBox **)(v39 + 8);
LABEL_50:
      v575 = v40;
      goto LABEL_51;
    }
    goto LABEL_898;
  }
  v155 = *(_QWORD *)(result + 32);
  if (v155)
  {
    v156 = *(_QWORD *)(v155 + 8);
    if (v156)
      ++*(_DWORD *)(v156 + 16);
  }
  else
  {
    v156 = 0;
  }
  if (v38 != 2)
  {
    if (v156)
    {
      while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v156))
      {
        if ((*(_BYTE *)(v156 + 45) & 1) == 0)
        {
          v428 = *(_QWORD *)(*(_QWORD *)(v156 + 24) + 8);
          if (v428)
          {
            if ((*(_WORD *)(v428 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19412434CLL);
            }
            if ((*(_BYTE *)(v428 + 23) & 0x20) != 0)
              goto LABEL_1177;
          }
        }
        if ((*(_QWORD *)(v156 + 96) & 0xF80000000000) == 0x480000000000)
        {
LABEL_1177:
          WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v631);
          v575 = *(WebCore::RenderBox **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v634 + 24) + 8) + 40) + 8)
                                        + 1944);
          goto LABEL_1103;
        }
        if (v635[0] && v156 == *(_QWORD *)v577)
          *(_BYTE *)v635[0] = 1;
        v429 = *(_QWORD *)(v156 + 32);
        if (!v429)
        {
          v507 = *(_DWORD *)(v156 + 16);
          if (!v507)
          {
LABEL_1120:
            __break(0xC471u);
            JUMPOUT(0x194124318);
          }
          v575 = 0;
          goto LABEL_1104;
        }
        v430 = *(_QWORD *)(v429 + 8);
        if (v430)
          ++*(_DWORD *)(v430 + 16);
        v431 = *(_DWORD *)(v156 + 16);
        if (!v431)
          goto LABEL_1120;
        v575 = 0;
        *(_DWORD *)(v156 + 16) = v431 - 1;
        v156 = v430;
        if (!v430)
          goto LABEL_51;
      }
      goto LABEL_1102;
    }
LABEL_898:
    v575 = 0;
    goto LABEL_51;
  }
  if (!v156)
    goto LABEL_898;
  while (1)
  {
    v157 = *(unsigned __int8 *)(v156 + 46);
    if (v157 == 49 || (*(_BYTE *)(v156 + 98) & 0x38) != 0)
      break;
    if (((*(_BYTE *)(v156 + 45) & 0x40) != 0 || (v157 - 36) <= 4 && v157 != 38)
      && (*(_BYTE *)(v156 + 22) & 2) != 0)
    {
      break;
    }
    v158 = *(_QWORD *)(*(_QWORD *)(v156 + 88) + 40);
    if (*(_DWORD *)(*(_QWORD *)(v158 + 72) + 20))
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v156 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v156 + 24) + 8))
        break;
    }
    if ((*(_BYTE *)(v156 + 45) & 0x40) != 0)
    {
      v159 = *(WebCore::WillChangeData **)(v158 + 200);
      if (v159)
      {
        if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v159, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v156 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v156 + 24) + 8)) & 1) != 0)goto LABEL_1275;
        v157 = *(unsigned __int8 *)(v156 + 46);
      }
    }
    if (v157 == 67 || v157 == 90)
      break;
    v160 = *(_QWORD *)(*(_QWORD *)(v156 + 88) + 40);
    v161 = *(_BYTE *)(v160 + 462);
    v162 = *(_BYTE *)(v160 + 642) & 3;
    v163 = v161 | 0x19;
    if (v162 == 1)
      v161 |= 0x15u;
    if (v162 == 2)
      v164 = v163;
    else
      v164 = v161;
    if ((v164 & 3) != 0
      && ((*(_BYTE *)(v156 + 20) & 1) != 0
       || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v156))
      && (*(_QWORD *)(v156 + 96) & 0x1FLL) != 0x19)
    {
      if (*(unsigned __int8 *)(v156 + 46) - 36 > 4)
      {
LABEL_1275:
        v575 = (WebCore::RenderBox *)v156;
        goto LABEL_1103;
      }
      if ((*(_BYTE *)(v156 + 52) & 7) == 1)
        break;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v156 + 88) + 40) + 636) & 0xC0000) != 0
      && ((*(_BYTE *)(v156 + 20) & 1) != 0
       || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v156))
      && (*(_QWORD *)(v156 + 96) & 0x1FLL) != 0x19)
    {
      v519 = *(unsigned __int8 *)(v156 + 46);
      if ((v519 - 36) <= 4)
      {
        if (v519 == 36)
          break;
      }
      else if (v519 != 63 && v519 != 35)
      {
        break;
      }
    }
    if (v635[0] && v156 == *(_QWORD *)v577)
      *(_BYTE *)v635[0] = 1;
    v165 = *(_QWORD *)(v156 + 32);
    if (v165)
    {
      v165 = *(_QWORD *)(v165 + 8);
      if (v165)
        ++*(_DWORD *)(v165 + 16);
    }
    v166 = *(_DWORD *)(v156 + 16);
    if (!v166)
    {
      __break(0xC471u);
      JUMPOUT(0x1941239D8);
    }
    v575 = 0;
    *(_DWORD *)(v156 + 16) = v166 - 1;
    v156 = v165;
    if (!v165)
      goto LABEL_51;
  }
LABEL_1102:
  v575 = (WebCore::RenderBox *)v156;
LABEL_1103:
  v507 = *(_DWORD *)(v156 + 16);
  if (!v507)
  {
    __break(0xC471u);
    JUMPOUT(0x1941241B8);
  }
LABEL_1104:
  *(_DWORD *)(v156 + 16) = v507 - 1;
LABEL_51:
  if ((v8 & 2) == 0)
  {
    if ((*((_BYTE *)v575 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194123498);
    }
    v41 = WebCore::RenderBox::containingBlockLogicalHeightForPositioned((WebCore::RenderBox *)v7, v575, 1);
    v42 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1048))(v7);
    v43 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 960))(v7);
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      v44 = (v42 >> 31) + 0x7FFFFFFF;
    v45 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1056))(v7);
    v46 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 968))(v7);
    v49 = v45 + v46;
    if (__OFADD__(v45, v46))
      v49 = (v45 >> 31) + 0x7FFFFFFF;
    v50 = v44 + v49;
    if (__OFADD__(v44, v49))
      v50 = (v44 >> 31) + 0x7FFFFFFF;
    v51 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
    v52 = *(_DWORD *)(v7 + 124);
    v53 = ((unsigned __int16)v52 >> 13) - 1;
    if (v53 > 4)
      v54 = 0;
    else
      v54 = qword_1969FC6C8[v53];
    v96 = v52 >> 13;
    v97 = v51 + 40 + 8 * v54;
    v577[0] = 0;
    *(_WORD *)((char *)&v577[1] + 1) = 0;
    LOWORD(v577[1]) = *(_WORD *)(v97 + 4);
    if (LOBYTE(v577[1]) <= 0xDu)
    {
      if (((1 << SLOBYTE(v577[1])) & 0x7FC) != 0)
      {
        v98 = *(unsigned __int8 *)(v51 + 40 + 8 * v54 + 6);
        BYTE2(v577[1]) = v98;
        if (v98)
          v48 = *(_DWORD *)v97;
        v577[0] = *(_DWORD *)v97;
      }
      else if (((1 << SLOBYTE(v577[1])) & 0x3003) != 0)
      {
        v577[0] = 0;
      }
      else
      {
        v577[0] = *(_DWORD *)v97;
        WebCore::Length::ref((int *)v577);
        v51 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
        v96 = *(_DWORD *)(v7 + 124) >> 13;
      }
    }
    v99 = (v96 & 7) - 1;
    if (v99 > 4)
      v100 = 2;
    else
      v100 = qword_1969FC6F0[v99];
    v101 = v51 + 40 + 8 * v100;
    LODWORD(v635[0]) = 0;
    *(_WORD *)((char *)v635 + 5) = 0;
    WORD2(v635[0]) = *(_WORD *)(v101 + 4);
    if (BYTE4(v635[0]) <= 0xDu)
    {
      if (((1 << SBYTE4(v635[0])) & 0x7FC) != 0)
      {
        v102 = *(unsigned __int8 *)(v51 + 40 + 8 * v100 + 6);
        BYTE6(v635[0]) = v102;
        if (v102)
          v48 = *(_DWORD *)v101;
        LODWORD(v635[0]) = *(_DWORD *)v101;
      }
      else if (((1 << SBYTE4(v635[0])) & 0x3003) != 0)
      {
        LODWORD(v635[0]) = 0;
      }
      else
      {
        LODWORD(v635[0]) = *(_DWORD *)v101;
        WebCore::Length::ref((int *)v635);
        v51 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
        v96 = *(_DWORD *)(v7 + 124) >> 13;
      }
    }
    v103 = (v96 & 7) - 1;
    if (v103 > 4)
      v104 = 0;
    else
      v104 = qword_1969FC6C8[v103];
    v105 = v51 + 8 + 8 * v104;
    LODWORD(v634) = 0;
    *(_WORD *)((char *)&v634 + 5) = 0;
    WORD2(v634) = *(_WORD *)(v105 + 4);
    if (BYTE4(v634) <= 0xDu)
    {
      if (((1 << SBYTE4(v634)) & 0x7FC) != 0)
      {
        v106 = *(unsigned __int8 *)(v51 + 8 + 8 * v104 + 6);
        BYTE6(v634) = v106;
        if (v106)
          v48 = *(_DWORD *)v105;
        LODWORD(v634) = *(_DWORD *)v105;
      }
      else if (((1 << SBYTE4(v634)) & 0x3003) != 0)
      {
        LODWORD(v634) = 0;
      }
      else
      {
        LODWORD(v634) = *(_DWORD *)v105;
        WebCore::Length::ref((int *)&v634);
        v51 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
        v96 = *(_DWORD *)(v7 + 124) >> 13;
      }
    }
    v107 = (v96 & 7) - 1;
    if (v107 > 4)
      v108 = 2;
    else
      v108 = qword_1969FC6F0[v107];
    v109 = v51 + 8;
    v110 = v51 + 8 + 8 * v108;
    *(float *)&v628 = 0.0;
    v630 = 0;
    v629 = *(_BYTE *)(v110 + 4);
    LOBYTE(v630) = *(_BYTE *)(v110 + 5);
    if (v629 <= 0xDu)
    {
      if (((1 << v629) & 0x7FC) != 0)
      {
        v111 = *(unsigned __int8 *)(v109 + 8 * v108 + 6);
        HIBYTE(v630) = v111;
        if (v111)
          v48 = *(_DWORD *)v110;
        v628 = *(unsigned int *)v110;
      }
      else if (((1 << v629) & 0x3003) != 0)
      {
        *(float *)&v628 = 0.0;
      }
      else
      {
        v628 = *(unsigned int *)v110;
        WebCore::Length::ref((int *)&v628);
      }
    }
    WebCore::computeBlockStaticDistance((WebCore *)&v634, (WebCore::Length *)&v628, (WebCore::Length *)v7, v575, v47, *(float *)&v48);
    v112 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8);
    if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 < 4)
      v113 = v112 + 4;
    else
      v113 = v112 + 12;
    v114 = *(_DWORD *)a4;
    v620 = 0;
    v623 = 0;
    v621 = *(_BYTE *)(v113 + 4);
    v622 = *(_BYTE *)(v113 + 5);
    if (v621 - 2 >= 9)
    {
      if (v621 == 11)
      {
        v620 = *(_DWORD *)v113;
        WebCore::Length::ref((int *)&v620);
      }
    }
    else
    {
      v623 = *(_BYTE *)(v113 + 6);
      v620 = *(_DWORD *)v113;
    }
    v617 = 0;
    v619 = 0;
    v618 = WORD2(v634);
    v115 = BYTE4(v634);
    if (BYTE4(v634) - 2 >= 9)
    {
      v116 = 0;
      if (BYTE4(v634) == 11)
      {
        v116 = v634;
        v617 = v634;
        WebCore::Length::ref(&v617);
      }
    }
    else
    {
      v619 = BYTE6(v634);
      if (BYTE6(v634))
      {
        v617 = v634;
        v116 = v634;
      }
      else
      {
        v116 = v634;
        v617 = v634;
      }
    }
    v613 = 0;
    v616 = 0;
    v614 = v629;
    v117 = v629;
    v615 = v630;
    if (v629 - 2 >= 9)
    {
      v118 = 0;
      if (v629 == 11)
      {
        v118 = (void *)v628;
        v613 = v628;
        WebCore::Length::ref((int *)&v613);
      }
    }
    else
    {
      v616 = HIBYTE(v630);
      if (HIBYTE(v630))
      {
        v613 = v628;
        v118 = (void *)v628;
      }
      else
      {
        v118 = (void *)v628;
        v613 = v628;
      }
    }
    v610 = 0;
    v612 = 0;
    v119 = LOBYTE(v577[1]);
    v611 = v577[1];
    if (LOBYTE(v577[1]) - 2 >= 9)
    {
      v120 = 0;
      if (LOBYTE(v577[1]) == 11)
      {
        v120 = (void *)v577[0];
        v610 = v577[0];
        WebCore::Length::ref((int *)&v610);
      }
    }
    else
    {
      v612 = BYTE2(v577[1]);
      if (BYTE2(v577[1]))
      {
        v610 = v577[0];
        v120 = (void *)v577[0];
      }
      else
      {
        v120 = (void *)v577[0];
        v610 = v577[0];
      }
    }
    v607 = 0;
    v609 = 0;
    v608 = WORD2(v635[0]);
    if (BYTE4(v635[0]) - 2 >= 9)
    {
      if (BYTE4(v635[0]) == 11)
      {
        v607 = v635[0];
        WebCore::Length::ref((int *)&v607);
      }
    }
    else
    {
      v609 = BYTE6(v635[0]);
      v607 = v635[0];
    }
    v571 = v50;
    result = WebCore::RenderBox::computePositionedLogicalHeightUsing((WebCore::RenderBox *)v7, 0, &v620, (uint64_t *)v575, v41, v50, v114, (unsigned __int8 *)&v617, (unsigned __int8 *)&v613, (WebCore::Length *)&v610, (unsigned __int8 *)&v607, (_DWORD *)a4);
    if (v608 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v607);
    }
    if (v119 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v120);
    }
    if (v117 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v118);
    }
    if (v115 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v116);
    }
    if (v621 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v620);
    }
    v121 = *(_DWORD *)(v7 + 124);
    v122 = ((v121 >> 13) & 6) - 2;
    v123 = *(_QWORD *)(v7 + 88);
    v124 = *(float **)(v123 + 8);
    if (v122 <= 3)
    {
      v509 = v114;
      if (*((_BYTE *)v124 + 32) == 13)
        goto LABEL_1204;
      v631 = 0uLL;
      v510 = (const WebCore::Length *)(v124 + 7);
    }
    else
    {
      if (*((_BYTE *)v124 + 48) == 13)
      {
LABEL_185:
        if (v122 >= 4)
        {
          v125 = v124 + 9;
          goto LABEL_187;
        }
        v509 = v114;
LABEL_1204:
        v125 = v124 + 5;
        v114 = v509;
LABEL_187:
        v624 = 0.0;
        v627 = 0;
        v625 = *((_BYTE *)v125 + 4);
        v126 = v625;
        v626 = *((_BYTE *)v125 + 5);
        if (v625 - 2 >= 9)
        {
          if (!v625)
          {
            v568 = 0.0;
            goto LABEL_194;
          }
          v568 = 0.0;
          if (v625 == 11)
          {
            v568 = *v125;
            v624 = *v125;
            WebCore::Length::ref((int *)&v624);
            v121 = *(_DWORD *)(v7 + 124);
            v123 = *(_QWORD *)(v7 + 88);
            goto LABEL_194;
          }
        }
        else
        {
          v627 = *((_BYTE *)v125 + 6);
          if (v627)
          {
            v624 = *v125;
            v568 = v624;
            if (v624 != 0.0)
              goto LABEL_194;
          }
          else
          {
            v624 = *v125;
            v568 = v624;
            if (v624 != 0.0)
              goto LABEL_194;
            v568 = 0.0;
          }
        }
        if (v625 - 7 >= 4)
        {
          v140 = *(_DWORD *)a4;
          v139 = v50;
LABEL_229:
          v142 = v140 + v139;
          if (__OFADD__(v140, v139))
            v142 = (v140 >> 31) + 0x7FFFFFFF;
          *(_DWORD *)a4 = v142;
          if ((*(_BYTE *)(v7 + 23) & 0x10) != 0)
          {
            result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 648))(v7);
            if (result)
            {
              if (((*(_BYTE *)(v7 + 21) & 0x10) == 0) != ((*((_BYTE *)v575 + 21) & 0x10) == 0)
                && (*((_BYTE *)v575 + 45) & 0x40) != 0)
              {
                ++*((_DWORD *)v575 + 4);
                v534 = *(_DWORD *)(a4 + 4);
                v535 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v575 + 1288))(v575);
                if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 < 4)
                  v536 = (int *)(v7 + 156);
                else
                  v536 = (int *)(v7 + 152);
                v537 = *v536;
                v440 = __OFSUB__(v535, v537);
                v538 = v535 - v537;
                if (v440)
                  v538 = (v535 >> 31) + 0x7FFFFFFF;
                result = WebCore::RenderBlock::fragmentAtBlockOffset(v575, v538);
                if (result)
                {
                  result = WebCore::RenderFragmentContainer::renderBoxFragmentInfo((WebCore::RenderFragmentContainer *)result, v575);
                  if (result)
                  {
                    v539 = v534 + *(_DWORD *)result;
                    if (__OFADD__(v534, *(_DWORD *)result))
                      v539 = (v534 >> 31) + 0x7FFFFFFF;
                    *(_DWORD *)(a4 + 4) = v539;
                  }
                }
                v540 = *((_DWORD *)v575 + 4);
                if (!v540)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194125144);
                }
                *((_DWORD *)v575 + 4) = v540 - 1;
              }
            }
          }
          if (v126 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v568));
          }
          if (v629 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v628);
          }
          if (BYTE4(v634) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v634);
          }
          if (BYTE4(v635[0]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v635[0]));
          }
          if (LOBYTE(v577[1]) != 11)
            goto LABEL_237;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v311 = v577[0];
LABEL_776:
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v311);
          goto LABEL_237;
        }
LABEL_194:
        v632 = 0;
        v631 = 0uLL;
        v127 = ((v121 >> 13) & 6) - 2;
        v128 = *(_QWORD *)(v123 + 8);
        if (v127 < 4)
          v129 = v128 + 20;
        else
          v129 = v128 + 36;
        v593 = 0;
        v596 = 0;
        v594 = *(_BYTE *)(v129 + 4);
        v595 = *(_BYTE *)(v129 + 5);
        if (v594 - 2 >= 9)
        {
          if (v594 == 11)
          {
            v593 = *(_DWORD *)v129;
            WebCore::Length::ref((int *)&v593);
          }
        }
        else
        {
          v596 = *(_BYTE *)(v129 + 6);
          v593 = *(_DWORD *)v129;
        }
        v590 = 0;
        v592 = 0;
        v591 = WORD2(v634);
        v130 = BYTE4(v634);
        if (BYTE4(v634) - 2 >= 9)
        {
          v131 = 0;
          if (BYTE4(v634) == 11)
          {
            v131 = v634;
            v590 = v634;
            WebCore::Length::ref(&v590);
          }
        }
        else
        {
          v592 = BYTE6(v634);
          if (BYTE6(v634))
          {
            v590 = v634;
            v131 = v634;
          }
          else
          {
            v131 = v634;
            v590 = v634;
          }
        }
        v132 = v50;
        v586 = 0;
        v589 = 0;
        v587 = v629;
        v133 = v629;
        v588 = v630;
        v563 = v131;
        v134 = v41;
        if (v629 - 2 >= 9)
        {
          v135 = v114;
          v136 = 0;
          if (v629 == 11)
          {
            v136 = (void *)v628;
            v586 = v628;
            WebCore::Length::ref((int *)&v586);
          }
        }
        else
        {
          v589 = HIBYTE(v630);
          v135 = v114;
          if (HIBYTE(v630))
          {
            v586 = v628;
            v136 = (void *)v628;
          }
          else
          {
            v136 = (void *)v628;
            v586 = v628;
          }
        }
        v583 = 0;
        v585 = 0;
        v137 = LOBYTE(v577[1]);
        v584 = v577[1];
        if (LOBYTE(v577[1]) - 2 >= 9)
        {
          v138 = 0;
          if (LOBYTE(v577[1]) == 11)
          {
            v138 = (void *)v577[0];
            v583 = v577[0];
            WebCore::Length::ref((int *)&v583);
          }
        }
        else
        {
          v585 = BYTE2(v577[1]);
          if (BYTE2(v577[1]))
          {
            v583 = v577[0];
            v138 = (void *)v577[0];
          }
          else
          {
            v138 = (void *)v577[0];
            v583 = v577[0];
          }
        }
        v580 = 0;
        v582 = 0;
        v581 = WORD2(v635[0]);
        if (BYTE4(v635[0]) - 2 >= 9)
        {
          if (BYTE4(v635[0]) == 11)
          {
            v580 = v635[0];
            WebCore::Length::ref((int *)&v580);
          }
        }
        else
        {
          v582 = BYTE6(v635[0]);
          v580 = v635[0];
        }
        result = WebCore::RenderBox::computePositionedLogicalHeightUsing((WebCore::RenderBox *)v7, (const WebCore::RenderBox *)1, &v593, (uint64_t *)v575, v134, v132, v135, (unsigned __int8 *)&v590, (unsigned __int8 *)&v586, (WebCore::Length *)&v583, (unsigned __int8 *)&v580, &v631);
        v139 = v571;
        if (v581 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v580);
        }
        if (v137 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v138);
        }
        if (v133 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v136);
        }
        if (v130 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v563);
        }
        if (v594 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v593);
        }
        v140 = *(_DWORD *)a4;
        v141 = v631;
        if (*(_DWORD *)a4 < (int)v631)
        {
          *(_QWORD *)(a4 + 4) = *(_QWORD *)((char *)&v631 + 4);
          *(_DWORD *)(a4 + 12) = HIDWORD(v631);
          v140 = v141;
        }
        goto LABEL_229;
      }
      v509 = v114;
      v631 = 0uLL;
      v510 = (const WebCore::Length *)(v124 + 11);
    }
    v632 = 0;
    WebCore::Length::Length((WebCore::Length *)&v605, v510);
    WebCore::Length::Length((WebCore::Length *)&v603, (const WebCore::Length *)&v634);
    WebCore::Length::Length((WebCore::Length *)&v601, (const WebCore::Length *)&v628);
    WebCore::Length::Length((WebCore::Length *)&v599, (const WebCore::Length *)v577);
    WebCore::Length::Length((WebCore::Length *)&v597, (const WebCore::Length *)v635);
    result = WebCore::RenderBox::computePositionedLogicalHeightUsing((WebCore::RenderBox *)v7, (const WebCore::RenderBox *)2, &v605, (uint64_t *)v575, v41, v50, v509, (unsigned __int8 *)&v603, (unsigned __int8 *)&v601, (WebCore::Length *)&v599, (unsigned __int8 *)&v597, &v631);
    if (v598 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v597);
    }
    if (v600 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v599);
    }
    if (v602 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v601);
    }
    if (v604 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v603);
    }
    if (v606 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v605);
    }
    if (*(_DWORD *)a4 > (int)v631)
      *(_OWORD *)a4 = v631;
    v121 = *(_DWORD *)(v7 + 124);
    v123 = *(_QWORD *)(v7 + 88);
    v124 = *(float **)(v123 + 8);
    v122 = ((v121 >> 13) & 6) - 2;
    v114 = v509;
    goto LABEL_185;
  }
  if ((*((_BYTE *)v575 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194123B24);
  }
  v197 = WebCore::RenderBox::containingBlockLogicalHeightForPositioned((WebCore::RenderBox *)v7, v575, 1);
  v570 = WebCore::RenderBox::containingBlockLogicalWidthForPositioned((WebCore::RenderBox *)v7, v575, 0, 0);
  v198 = 0;
  v199 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
  v200 = *(_DWORD *)(v7 + 124);
  v201 = ((unsigned __int16)v200 >> 13) - 1;
  if (v201 <= 4)
    v198 = qword_1969FC6C8[v201];
  v202 = v200 >> 13;
  v203 = v199 + 40 + 8 * v198;
  LODWORD(v631) = 0;
  *(_WORD *)((char *)&v631 + 5) = 0;
  WORD2(v631) = *(_WORD *)(v203 + 4);
  if (BYTE4(v631) <= 0xDu)
  {
    if (((1 << SBYTE4(v631)) & 0x7FC) != 0)
    {
      BYTE6(v631) = *(_BYTE *)(v199 + 40 + 8 * v198 + 6);
      LODWORD(v631) = *(_DWORD *)v203;
    }
    else if (((1 << SBYTE4(v631)) & 0x3003) != 0)
    {
      LODWORD(v631) = 0;
    }
    else
    {
      LODWORD(v631) = *(_DWORD *)v203;
      WebCore::Length::ref((int *)&v631);
      v199 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
      v202 = *(_DWORD *)(v7 + 124) >> 13;
    }
  }
  v246 = (v202 & 7) - 1;
  if (v246 > 4)
    v247 = 2;
  else
    v247 = qword_1969FC6F0[v246];
  v248 = v199 + 40 + 8 * v247;
  v577[0] = 0;
  *(_WORD *)((char *)&v577[1] + 1) = 0;
  LOWORD(v577[1]) = *(_WORD *)(v248 + 4);
  if (LOBYTE(v577[1]) <= 0xDu)
  {
    if (((1 << SLOBYTE(v577[1])) & 0x7FC) != 0)
    {
      BYTE2(v577[1]) = *(_BYTE *)(v199 + 40 + 8 * v247 + 6);
      v577[0] = *(_DWORD *)v248;
    }
    else if (((1 << SLOBYTE(v577[1])) & 0x3003) != 0)
    {
      v577[0] = 0;
    }
    else
    {
      v577[0] = *(_DWORD *)v248;
      WebCore::Length::ref((int *)v577);
      v199 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
      v202 = *(_DWORD *)(v7 + 124) >> 13;
    }
  }
  v249 = (v202 & 7) - 1;
  if (v249 > 4)
    v250 = 0;
  else
    v250 = qword_1969FC6C8[v249];
  v251 = v199 + 8 + 8 * v250;
  LODWORD(v635[0]) = 0;
  *(_WORD *)((char *)v635 + 5) = 0;
  BYTE4(v635[0]) = *(_BYTE *)(v251 + 4);
  v252 = BYTE4(v635[0]);
  v253 = *(_BYTE *)(v251 + 5);
  BYTE5(v635[0]) = v253;
  if (BYTE4(v635[0]) > 0xDu)
  {
    *(float *)&v256 = 0.0;
    v255 = 0;
  }
  else if (((1 << SBYTE4(v635[0])) & 0x7FC) != 0)
  {
    v254 = *(unsigned __int8 *)(v199 + 8 + 8 * v250 + 6);
    BYTE6(v635[0]) = v254;
    if (v254)
    {
      LODWORD(v635[0]) = *(_DWORD *)v251;
      v256 = v635[0];
      v255 = 1;
    }
    else
    {
      v255 = 0;
      v256 = *(unsigned int *)v251;
      LODWORD(v635[0]) = *(_DWORD *)v251;
    }
  }
  else if (((1 << SBYTE4(v635[0])) & 0x3003) != 0)
  {
    *(float *)&v256 = 0.0;
    v255 = 0;
    LODWORD(v635[0]) = 0;
  }
  else
  {
    LODWORD(v635[0]) = *(_DWORD *)v251;
    v463 = v635[0];
    WebCore::Length::ref((int *)v635);
    v256 = v463;
    v255 = 0;
    v199 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
    v202 = *(_DWORD *)(v7 + 124) >> 13;
  }
  v257 = (v202 & 7) - 1;
  v574 = v197;
  if (v257 > 4)
    v258 = 2;
  else
    v258 = qword_1969FC6F0[v257];
  v259 = v199 + 8;
  v260 = v199 + 8 + 8 * v258;
  LODWORD(v634) = 0;
  *(_WORD *)((char *)&v634 + 5) = 0;
  BYTE4(v634) = *(_BYTE *)(v260 + 4);
  v261 = BYTE4(v634);
  v262 = *(_BYTE *)(v260 + 5);
  BYTE5(v634) = v262;
  v565 = v256;
  if (BYTE4(v634) > 0xDu)
  {
    v265 = 0.0;
    v264 = 0;
  }
  else if (((1 << SBYTE4(v634)) & 0x7FC) != 0)
  {
    v263 = *(unsigned __int8 *)(v259 + 8 * v258 + 6);
    BYTE6(v634) = v263;
    if (v263)
    {
      LODWORD(v634) = *(_DWORD *)v260;
      v265 = *(float *)&v634;
      v264 = 1;
    }
    else
    {
      v264 = 0;
      v265 = *(float *)v260;
      LODWORD(v634) = *(_DWORD *)v260;
    }
  }
  else if (((1 << SBYTE4(v634)) & 0x3003) != 0)
  {
    v265 = 0.0;
    v264 = 0;
    LODWORD(v634) = 0;
  }
  else
  {
    LODWORD(v634) = *(_DWORD *)v260;
    v464 = *(float *)&v634;
    WebCore::Length::ref((int *)&v634);
    v265 = v464;
    v256 = v565;
    v264 = 0;
  }
  *(float *)&v628 = 0.0;
  v629 = v252;
  v630 = v253;
  if ((v252 - 2) >= 9)
  {
    if (v252 == 11)
    {
      v628 = v256;
      v301 = v265;
      WebCore::Length::ref((int *)&v628);
      v265 = v301;
    }
  }
  else
  {
    HIBYTE(v630) = v255;
    v628 = v256;
  }
  v624 = 0.0;
  v627 = 0;
  v625 = v261;
  v626 = v262;
  v561 = v265;
  if ((v261 - 2) >= 9)
  {
    if (v261 == 11)
    {
      v624 = v265;
      WebCore::Length::ref((int *)&v624);
    }
  }
  else
  {
    v627 = v264;
    v624 = v265;
  }
  v266 = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v7 + 1336))(v7, 0);
  v267 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1048))(v7);
  v268 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 960))(v7);
  v269 = v267 + v268;
  v270 = v574;
  if (__OFADD__(v267, v268))
    v269 = (v267 >> 31) + 0x7FFFFFFF;
  v271 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1056))(v7);
  v272 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 968))(v7);
  v275 = v271 + v272;
  if (__OFADD__(v271, v272))
    v275 = (v271 >> 31) + 0x7FFFFFFF;
  v440 = __OFADD__(v269, v275);
  v276 = v269 + v275;
  if (v440)
    v276 = (v269 >> 31) + 0x7FFFFFFF;
  v440 = __OFADD__(v266, v276);
  v277 = v266 + v276;
  if (v440)
    v277 = (v266 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a4 = v277;
  v278 = v574 - v277;
  if (__OFSUB__(v574, v277))
    v278 = (v574 >> 31) + 0x7FFFFFFF;
  WebCore::computeBlockStaticDistance((WebCore *)&v628, (WebCore::Length *)&v624, (WebCore::Length *)v7, v575, v273, v274);
  v279 = BYTE4(v631);
  if (v629 && v625)
  {
    v418 = LOBYTE(v577[1]);
    if (BYTE4(v631))
    {
      v541 = v570;
      v282 = WebCore::valueForLength((unsigned __int8 *)&v631, v570);
      *v5 = v282;
      if (v418)
        goto LABEL_1194;
      v288 = WebCore::valueForLength((unsigned __int8 *)&v628, v574);
      v553 = WebCore::valueForLength((unsigned __int8 *)&v624, v574);
      v554 = v288 + v553;
      if (__OFADD__(v288, v553))
        v554 = (v288 >> 31) + 0x7FFFFFFF;
      v555 = v554 + v282;
      if (__OFADD__(v554, v282))
        v555 = (v554 >> 31) + 0x7FFFFFFF;
      v556 = v278 - v555;
      if (__OFSUB__(v278, v555))
        v556 = (v278 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(a4 + 12) = v556;
LABEL_877:
      v270 = v574;
      goto LABEL_492;
    }
    if (LOBYTE(v577[1]))
    {
      v515 = WebCore::valueForLength((unsigned __int8 *)v577, v570);
      *(_DWORD *)(a4 + 12) = v515;
      v288 = WebCore::valueForLength((unsigned __int8 *)&v628, v574);
      v516 = WebCore::valueForLength((unsigned __int8 *)&v624, v574);
      v517 = v288 + v516;
      if (__OFADD__(v288, v516))
        v517 = (v288 >> 31) + 0x7FFFFFFF;
      v518 = v517 + v515;
      if (__OFADD__(v517, v515))
        v518 = (v517 >> 31) + 0x7FFFFFFF;
      v282 = v278 - v518;
      if (__OFSUB__(v278, v518))
        v282 = (v278 >> 31) + 0x7FFFFFFF;
      *v5 = v282;
      goto LABEL_877;
    }
    if (v629 == 4)
    {
      v419 = *(float *)&v628;
      if (!HIBYTE(v630))
        v419 = (float)(int)v628;
LABEL_858:
      v420 = v419 * 64.0;
      if (v420 < 2147483650.0 && v420 > -2147483650.0)
      {
LABEL_860:
        v288 = (int)v420;
LABEL_861:
        if (v625 != 4)
        {
          v423 = 0;
          switch(v625)
          {
            case 0u:
            case 1u:
            case 9u:
              v423 = v574;
              goto LABEL_867;
            case 3u:
              v465 = v624;
              if (!v627)
                v465 = (float)SLODWORD(v624);
              v422 = (float)((float)((float)((float)v574 * 0.015625) * v465) / 100.0) * 64.0;
              if (v422 < 2147483650.0 && v422 > -2147483650.0)
                goto LABEL_866;
              if (v422 >= 2147483650.0)
                goto LABEL_1388;
              goto LABEL_1348;
            case 0xBu:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v624, (float)v574 * 0.015625);
              goto LABEL_864;
            default:
              goto LABEL_867;
          }
        }
        v421 = v624;
        if (!v627)
          v421 = (float)SLODWORD(v624);
LABEL_864:
        v422 = v421 * 64.0;
        if (v422 < 2147483650.0 && v422 > -2147483650.0)
          goto LABEL_866;
        if (v422 >= 2147483650.0)
        {
LABEL_1388:
          v423 = 0x7FFFFFFF;
          goto LABEL_867;
        }
LABEL_1348:
        if (v422 > -2147483650.0)
LABEL_866:
          v423 = (int)v422;
        else
          v423 = 0x80000000;
LABEL_867:
        v440 = __OFADD__(v288, v423);
        v424 = v288 + v423;
        if (v440)
          v424 = (v288 >> 31) + 0x7FFFFFFF;
        v440 = __OFSUB__(v278, v424);
        v425 = v278 - v424;
        if (v440)
          v425 = (v278 >> 31) + 0x7FFFFFFF;
        if (v425 >= 0)
          v426 = v425;
        else
          v426 = v425 + 1;
        v282 = v426 >> 1;
        *v5 = v426 >> 1;
        v440 = __OFSUB__(v425, v426 >> 1);
        v427 = v425 - (v426 >> 1);
        if (v440)
          v427 = (v425 >> 31) + 0x7FFFFFFF;
        *(_DWORD *)(a4 + 12) = v427;
        goto LABEL_877;
      }
      if (v420 < 2147483650.0)
      {
LABEL_1345:
        if (v420 <= -2147483650.0)
        {
          v288 = 0x80000000;
          goto LABEL_861;
        }
        goto LABEL_860;
      }
LABEL_1387:
      v288 = 0x7FFFFFFF;
      goto LABEL_861;
    }
    v288 = 0;
    if (v629 > 8u)
    {
      if (v629 == 11)
      {
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v628, (float)v574 * 0.015625);
        goto LABEL_858;
      }
      if (v629 != 9)
        goto LABEL_861;
    }
    else
    {
      if (v629 == 3)
      {
        v467 = *(float *)&v628;
        if (!HIBYTE(v630))
          v467 = (float)(int)v628;
        v420 = (float)((float)((float)((float)v574 * 0.015625) * v467) / 100.0) * 64.0;
        if (v420 < 2147483650.0 && v420 > -2147483650.0)
          goto LABEL_860;
        if (v420 < 2147483650.0)
          goto LABEL_1345;
        goto LABEL_1387;
      }
      if (v629 != 1)
        goto LABEL_861;
    }
    v288 = v574;
    goto LABEL_861;
  }
  if (!BYTE4(v631))
  {
    v279 = 4;
    BYTE4(v631) = 4;
    LODWORD(v631) = 0;
    BYTE6(v631) = 0;
  }
  if (!LOBYTE(v577[1]))
  {
    LOBYTE(v577[1]) = 4;
    v577[0] = 0;
    BYTE2(v577[1]) = 0;
  }
  if (!v629)
  {
    v282 = WebCore::valueForLength((unsigned __int8 *)&v631, v570);
    *(_DWORD *)(a4 + 8) = v282;
    v511 = WebCore::valueForLength((unsigned __int8 *)v577, v570);
    *(_DWORD *)(a4 + 12) = v511;
    v512 = WebCore::valueForLength((unsigned __int8 *)&v624, v574);
    v513 = v512 + v282;
    if (__OFADD__(v512, v282))
      v513 = (v512 >> 31) + 0x7FFFFFFF;
    v514 = v513 + v511;
    if (__OFADD__(v513, v511))
      v514 = (v513 >> 31) + 0x7FFFFFFF;
    v288 = v278 - v514;
    if (__OFSUB__(v278, v514))
      v288 = (v278 >> 31) + 0x7FFFFFFF;
    goto LABEL_877;
  }
  if (!v625)
  {
    if (v279 == 4)
    {
      v280 = *(float *)&v631;
      if (!BYTE6(v631))
        v280 = (float)(int)v631;
LABEL_477:
      v281 = v280 * 64.0;
      if (v281 < 2147483650.0 && v281 > -2147483650.0)
      {
LABEL_479:
        v282 = (int)v281;
LABEL_480:
        *v5 = v282;
        if (LOBYTE(v577[1]) != 4)
        {
          v285 = 0;
          switch(LOBYTE(v577[1]))
          {
            case 0:
            case 1:
            case 9:
              v285 = v570;
              goto LABEL_486;
            case 3:
              v302 = *(float *)v577;
              if (!BYTE2(v577[1]))
                v302 = (float)(int)v577[0];
              v284 = (float)((float)((float)((float)v570 * 0.015625) * v302) / 100.0) * 64.0;
              if (v284 < 2147483650.0 && v284 > -2147483650.0)
                goto LABEL_485;
              if (v284 >= 2147483650.0)
                goto LABEL_1372;
              goto LABEL_1290;
            case 0xB:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v577, (float)v570 * 0.015625);
              goto LABEL_483;
            default:
              goto LABEL_486;
          }
        }
        v283 = *(float *)v577;
        if (!BYTE2(v577[1]))
          v283 = (float)(int)v577[0];
LABEL_483:
        v284 = v283 * 64.0;
        if (v284 >= 2147483650.0 || v284 <= -2147483650.0)
        {
          if (v284 >= 2147483650.0)
          {
LABEL_1372:
            v285 = 0x7FFFFFFF;
          }
          else
          {
LABEL_1290:
            if (v284 <= -2147483650.0)
              v285 = 0x80000000;
            else
              v285 = (int)v284;
          }
          v270 = v574;
        }
        else
        {
LABEL_485:
          v285 = (int)v284;
        }
LABEL_486:
        *(_DWORD *)(a4 + 12) = v285;
        if (v629 != 4)
        {
          v288 = 0;
          switch(v629)
          {
            case 0u:
            case 1u:
            case 9u:
              v288 = v270;
              goto LABEL_492;
            case 3u:
              v304 = *(float *)&v628;
              if (!HIBYTE(v630))
                v304 = (float)(int)v628;
              v287 = (float)((float)((float)((float)v270 * 0.015625) * v304) / 100.0) * 64.0;
              if (v287 < 2147483650.0 && v287 > -2147483650.0)
                goto LABEL_491;
              if (v287 >= 2147483650.0)
                goto LABEL_1373;
              goto LABEL_1294;
            case 0xBu:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v628, (float)v270 * 0.015625);
              goto LABEL_489;
            default:
              goto LABEL_492;
          }
        }
        v286 = *(float *)&v628;
        if (!HIBYTE(v630))
          v286 = (float)(int)v628;
LABEL_489:
        v287 = v286 * 64.0;
        if (v287 < 2147483650.0 && v287 > -2147483650.0)
        {
LABEL_491:
          v288 = (int)v287;
          goto LABEL_492;
        }
        if (v287 >= 2147483650.0)
        {
LABEL_1373:
          v288 = 0x7FFFFFFF;
        }
        else
        {
LABEL_1294:
          if (v287 <= -2147483650.0)
            v288 = 0x80000000;
          else
            v288 = (int)v287;
        }
        goto LABEL_877;
      }
      if (v281 < 2147483650.0)
        goto LABEL_1286;
      goto LABEL_1371;
    }
    v282 = 0;
    if (v279 > 8)
    {
      if (v279 == 11)
      {
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v631, (float)v570 * 0.015625);
        goto LABEL_477;
      }
      if (v279 != 9)
        goto LABEL_480;
    }
    else
    {
      if (v279 == 3)
      {
        v306 = *(float *)&v631;
        if (!BYTE6(v631))
          v306 = (float)(int)v631;
        v281 = (float)((float)((float)((float)v570 * 0.015625) * v306) / 100.0) * 64.0;
        if (v281 < 2147483650.0 && v281 > -2147483650.0)
          goto LABEL_479;
        if (v281 < 2147483650.0)
        {
LABEL_1286:
          if (v281 <= -2147483650.0)
            v282 = 0x80000000;
          else
            v282 = (int)v281;
          goto LABEL_1288;
        }
LABEL_1371:
        v282 = 0x7FFFFFFF;
LABEL_1288:
        v270 = v574;
        goto LABEL_480;
      }
      if (v279 != 1)
        goto LABEL_480;
    }
    v282 = v570;
    goto LABEL_480;
  }
  v541 = v570;
  v282 = WebCore::valueForLength((unsigned __int8 *)&v631, v570);
  *v5 = v282;
LABEL_1194:
  *(_DWORD *)(a4 + 12) = WebCore::valueForLength((unsigned __int8 *)v577, v541);
  v270 = v574;
  v288 = WebCore::valueForLength((unsigned __int8 *)&v628, v574);
LABEL_492:
  v289 = v288 + v282;
  if (__OFADD__(v288, v282))
    v289 = (v288 >> 31) + 0x7FFFFFFF;
  v290 = *(_DWORD *)a4;
  v291 = *(_DWORD *)(v7 + 20);
  v292 = *(_DWORD *)(v7 + 124);
  v293 = (unsigned __int16)v292 >> 13;
  v542 = 2;
  switch((unsigned __int16)v292 >> 13)
  {
    case 1:
    case 2:
      v542 = (unsigned __int16)v292 >> 13;
      break;
    case 3:
    case 5:
      v542 = 3;
      break;
    case 4:
      break;
    default:
      v542 = 0;
      break;
  }
  v294 = (unsigned __int16)*((_DWORD *)v575 + 31) >> 13;
  v543 = 2;
  switch((unsigned __int16)*((_DWORD *)v575 + 31) >> 13)
  {
    case 1:
    case 2:
      v543 = (unsigned __int16)*((_DWORD *)v575 + 31) >> 13;
      break;
    case 3:
    case 5:
      v543 = 3;
      break;
    case 4:
      break;
    default:
      v543 = 0;
      break;
  }
  if (!v252
    || !v261
    || ((v312 = ((v292 >> 13) & 6) - 2, v313 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8), v312 < 4)
      ? (v314 = v313 + 4)
      : (v314 = v313 + 12),
        !*(_BYTE *)(v314 + 4)))
  {
    if (v261 | v252)
    {
      if (((*(_DWORD *)(v7 + 20) & 0x1000) == 0) != ((*((_BYTE *)v575 + 21) & 0x10) == 0))
      {
        if (v293 > 5)
          goto LABEL_557;
        v270 = v574;
        if (((1 << v293) & 0x2A) == 0)
          goto LABEL_557;
        goto LABEL_1163;
      }
    }
    else
    {
      v295 = *(_QWORD *)(v7 + 32);
      if (v295)
      {
        v296 = *(_QWORD *)(v295 + 8);
        if (v296)
        {
          if ((WebCore::RenderBox *)v296 != v575 && (*(_BYTE *)(v296 + 45) & 0x40) != 0 && *(_BYTE *)(v296 + 46) != 12)
          {
            v297 = *(_DWORD *)(v296 + 124);
            v298 = (unsigned __int16)v297 >> 13;
            if (v298 <= 5 && ((1 << v298) & 0x2A) != 0)
            {
              v299 = *(_QWORD *)(v296 + 32);
              if (!v299 || (v300 = *(_QWORD *)(v299 + 8)) == 0 || ((*(_DWORD *)(v300 + 124) ^ v297) & 0xE000) != 0)
              {
                if (__OFSUB__(v289, v290))
                  v289 = (v289 >> 31) + 0x7FFFFFFF;
                else
                  v289 -= v290;
              }
              v270 = v574;
            }
          }
        }
      }
    }
    if (((v542 & 0xFFFFFFFD) != 1) ^ ((v543 & 0xFFFFFFFD) == 1) | ((*(_DWORD *)(v7 + 20) & 0x1000) == 0) ^ ((*((_BYTE *)v575 + 21) & 0x10) == 0))
      goto LABEL_557;
LABEL_1163:
    v440 = __OFSUB__(v270, v290);
    v533 = v270 - v290;
    if (v440)
      v533 = (v574 >> 31) + 0x7FFFFFFF;
    v440 = __OFSUB__(v533, v289);
    v289 = v533 - v289;
    if (v440)
      v289 = (v533 >> 31) + 0x7FFFFFFF;
  }
LABEL_557:
  if (v294 > 5
    || ((1 << v294) & 0x2A) == 0
    || ((*(_DWORD *)(v7 + 20) & 0x1000) == 0) != ((*((_BYTE *)v575 + 21) & 0x10) == 0))
  {
    v308 = *(_QWORD *)v575;
    if ((v291 & 0x1000) != 0)
      v309 = *(uint64_t (**)(void))(v308 + 1016);
    else
      v309 = *(uint64_t (**)(void))(v308 + 1000);
  }
  else
  {
    v544 = *(_QWORD *)v575;
    if ((v291 & 0x1000) != 0)
      v309 = *(uint64_t (**)(void))(v544 + 1024);
    else
      v309 = *(uint64_t (**)(void))(v544 + 1008);
  }
  result = v309();
  v310 = v289 + result;
  if (__OFADD__(v289, (_DWORD)result))
    v310 = (v289 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(a4 + 4) = v310;
  if (v625 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v624));
  }
  if (v629 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v628);
  }
  if (v261 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v561));
  }
  if (v252 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v565);
  }
  if (LOBYTE(v577[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v577[0]);
  }
  if (BYTE4(v631) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v311 = v631;
    goto LABEL_776;
  }
LABEL_237:
  v143 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
  v144 = *(_QWORD *)(*(_QWORD *)(v143 + 40) + 8);
  if (*(_BYTE *)(v144 + 3384) == 2)
  {
    v432 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8);
    v433 = v432 + 4;
    v434 = v432 + 12;
    if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 >= 4)
      v433 = v434;
    if (!*(_BYTE *)(v433 + 4))
    {
      v435 = *(_DWORD *)(v7 + 20);
      if ((v435 & 0x800) == 0
        && (v435 & 0x1800000) != 0x1000000
        && (*(_QWORD *)(v144 + 1272) == v143
         || (*(_BYTE *)(v7 + 45) & 1) == 0
         && (*(_WORD *)(v143 + 28) & 0x10) != 0
         && *(_QWORD *)(*(_QWORD *)(v143 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)))
      {
        result = WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio((WebCore::RenderBox *)v7, (const WebCore::RenderBox *)v62);
        if ((result & 1) == 0 && (*(_BYTE *)(v7 + 20) & 1) != 0)
        {
LABEL_910:
          v436 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1248))(v7);
          v437 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 1256))(v7);
          if (__OFADD__(v436, v437))
            v438 = (v436 >> 31) + 0x7FFFFFFF;
          else
            v438 = v436 + v437;
          result = WebCore::RenderView::pageOrViewLogicalHeight(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8)
                                                                                                  + 40)
                                                                                      + 8)
                                                                          + 1944));
          v439 = result;
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8))
          {
            v440 = __OFSUB__((_DWORD)result, v438);
            v441 = result - v438;
            v442 = (result >> 31) + 0x7FFFFFFF;
          }
          else
          {
            v469 = 0;
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8) + 45) & 4) != 0)
              v470 = *(_DWORD **)(*(_QWORD *)(v7 + 32) + 8);
            else
              v470 = 0;
            v471 = (unsigned __int16)v470[31] >> 13;
            if ((v471 - 1) <= 4)
              v469 = qword_1969FC6C8[v471 - 1];
            v472 = v470[v469 + 42];
            v440 = __OFADD__(v438, v472);
            v473 = v438 + v472;
            if (v440)
              v473 = (v438 >> 31) + 0x7FFFFFFF;
            v474 = ((unsigned __int16)v470[31] >> 13) - 1;
            if (v474 > 4)
              v475 = 2;
            else
              v475 = qword_1969FC6F0[v474];
            v476 = v470[v475 + 42];
            v440 = __OFADD__(v473, v476);
            v477 = v473 + v476;
            v478 = (v473 >> 31) + 0x7FFFFFFF;
            if (v440)
              v479 = v478;
            else
              v479 = v477;
            v480 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v470 + 1048))(v470);
            v481 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v470 + 960))(v470);
            if (__OFADD__(v480, v481))
              v482 = (v480 >> 31) + 0x7FFFFFFF;
            else
              v482 = v480 + v481;
            v483 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v470 + 1056))(v470);
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v470 + 968))(v470);
            v484 = v483 + result;
            if (__OFADD__(v483, (_DWORD)result))
              v484 = (v483 >> 31) + 0x7FFFFFFF;
            v440 = __OFADD__(v482, v484);
            v485 = v482 + v484;
            if (v440)
              v485 = (v482 >> 31) + 0x7FFFFFFF;
            v440 = __OFADD__(v479, v485);
            v486 = v479 + v485;
            if (v440)
              v486 = (v479 >> 31) + 0x7FFFFFFF;
            v440 = __OFSUB__(v439, v486);
            v441 = v439 - v486;
            v442 = (v439 >> 31) + 0x7FFFFFFF;
          }
          if (v440)
            v441 = v442;
          if (*(_DWORD *)a4 > v441)
            v441 = *(_DWORD *)a4;
          *(_DWORD *)a4 = v441;
          goto LABEL_36;
        }
      }
    }
  }
  v145 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
  v146 = *(_QWORD *)(*(_QWORD *)(v145 + 40) + 8);
  if (!*(_BYTE *)(v146 + 3382))
  {
LABEL_36:
    v34 = LOBYTE(v579[1]);
    goto LABEL_37;
  }
  v34 = LOBYTE(v579[1]);
  if ((v579[1] & 0xF7) == 3)
  {
    if ((*(_BYTE *)(v7 + 20) & 1) == 0)
      goto LABEL_36;
    v147 = *(_QWORD *)(v146 + 1272);
    if (v147 != v145)
    {
      v148 = *(_QWORD *)(v147 + 64) & 0xFFFFFFFFFFFFLL;
      if (v148 && (*(_BYTE *)(v148 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194123BACLL);
      }
      if ((*(_BYTE *)(v7 + 45) & 1) != 0
        || (*(_WORD *)(v145 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v145 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        goto LABEL_36;
      }
      v149 = *(_QWORD *)(v7 + 32);
      if (v149)
        v149 = *(_QWORD *)(v149 + 8);
      if (v149 != v148)
        goto LABEL_36;
      v150 = ((*(_DWORD *)(v148 + 124) >> 13) & 6) - 2;
      v151 = *(_QWORD *)(*(_QWORD *)(v148 + 88) + 8);
      v152 = v150 >= 4;
      v153 = v151 + 4;
      v154 = v151 + 12;
      if (!v152)
        v154 = v153;
      if ((*(_BYTE *)(v154 + 4) & 0xF7) != 3)
        goto LABEL_36;
    }
    goto LABEL_910;
  }
LABEL_37:
  if (v34 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v579[0]);
  }
  return result;
}

BOOL WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio(WebCore::RenderBox *this, const WebCore::RenderBox *a2)
{
  _BOOL8 v2;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  void *v9;
  int v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  int v15;
  __int16 v16;
  char v17;

  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 > 1
    || *((unsigned __int8 *)this + 46) - 36 < 5
    || WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets(this, a2))
  {
    return 0;
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v6 = (unsigned int *)(v5 + 4);
  v7 = (unsigned int *)(v5 + 12);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v6 = v7;
  v14 = 0;
  v12 = *((_BYTE *)v6 + 4);
  v8 = v12;
  v13 = *((_BYTE *)v6 + 5);
  if (v12 - 2 < 9)
  {
    v9 = (void *)*v6;
LABEL_10:
    if (v12 - 7 < 4)
      return 1;
    goto LABEL_15;
  }
  if (!v12)
    return 1;
  v9 = 0;
  if (v12 != 11)
    goto LABEL_10;
  v9 = (void *)*v6;
  v11 = *v6;
  WebCore::Length::ref(&v11);
LABEL_15:
  if ((v8 & 0xFFFFFFF7) != 3 || (*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
  {
    v2 = 0;
  }
  else
  {
    v15 = 100;
    v16 = 3;
    v17 = 0;
    v2 = (unint64_t)WebCore::RenderBox::computePercentageLogicalHeight(this, &v15, 1) >> 32 == 0;
  }
  if (v8 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v9);
  }
  return v2;
}

uint64_t WebCore::RenderBox::shouldComputeSizeAsReplaced(WebCore::RenderBox *this)
{
  if ((*((_BYTE *)this + 20) & 2) != 0)
    return (*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 160))(this) ^ 1;
  else
    return 0;
}

uint64_t WebCore::RenderBlock::adjustBorderBoxLogicalHeightForBoxSizing(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  v10 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v10)
    v11 = (v6 >> 31) + 0x7FFFFFFF;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 68) & 4) != 0)
  {
    if (v11 <= (int)a2)
      return a2;
    else
      return v11;
  }
  else
  {
    v10 = __OFADD__(a2, v11);
    v13 = a2 + v11;
    if (v10)
      v14 = (a2 >> 31) + 0x7FFFFFFF;
    else
      v14 = v13;
    if ((*(_WORD *)(a1 + 69) & 0x400) != 0
      && (v17 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, a1)) != 0)
    {
      v15 = *(_DWORD *)(v17 + 8);
    }
    else
    {
      v15 = 0;
    }
    v10 = __OFSUB__(v14, v15);
    v16 = v14 - v15;
    if (v10)
      return (v14 >> 31) + 0x7FFFFFFF;
    else
      return v16;
  }
}

uint64_t WebCore::RenderBlock::borderBefore(WebCore::RenderBlock *this)
{
  WebCore::RenderBlock *v1;
  int v2;
  uint64_t v3;
  float v4;
  double v5;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  WebCore::RenderStyle *v15;
  unsigned int v16;

  v1 = this;
  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  v15 = (WebCore::RenderBlock *)((char *)this + 80);
  switch(v2)
  {
    case 0:
      v4 = WebCore::RenderStyle::borderBottomWidth(v15);
      goto LABEL_25;
    case 1:
    case 3:
      v4 = WebCore::RenderStyle::borderLeftWidth(v15);
      goto LABEL_25;
    case 2:
    case 4:
      v4 = WebCore::RenderStyle::borderRightWidth(v15);
LABEL_25:
      v1 = this;
      break;
    default:
      v3 = *(_QWORD *)(*((_QWORD *)v1 + 11) + 24);
      v4 = 0.0;
      if ((*(_BYTE *)(v3 + 172) & 0xE) != 0)
      {
        v13 = *(_QWORD *)(v3 + 200);
        if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 52) == 4)
        {
          if (*(_BYTE *)(v13 + 54))
            v4 = *(float *)(v13 + 48);
          else
            v4 = (float)*(int *)(v13 + 48);
        }
        else
        {
          v4 = *(float *)(v3 + 168);
        }
      }
      break;
  }
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 >= 2147483650.0)
    {
      v7 = 0x7FFFFFFF;
    }
    else if (v5 > -2147483650.0)
    {
      v7 = (int)v5;
    }
    else
    {
      v7 = 0x80000000;
    }
  }
  else
  {
    v7 = (int)v5;
  }
  if ((*(_WORD *)((_BYTE *)v1 + 69) & 0x400) != 0)
  {
    v16 = v7;
    v14 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)v1);
    if (v14)
      v8 = *(_DWORD *)(v14 + 8);
    else
      v8 = 0;
    v7 = v16;
  }
  else
  {
    v8 = 0;
  }
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  v11 = (v7 >> 31) + 0x7FFFFFFF;
  if (v9)
    return v11;
  else
    return v10;
}

uint64_t WebCore::RenderBoxModelObject::paddingAfter(WebCore::RenderBoxModelObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  double v9;
  float v12;
  float v13;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;

  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v2 > 4)
    v3 = 2;
  else
    v3 = qword_1969F1FB8[v2];
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 72;
  v5 = (unsigned __int8 *)(v4 + 8 * v3);
  v6 = v5[4];
  if ((v6 & 0xFFFFFFF7) == 3)
  {
    v19 = v3;
    v20 = (unsigned __int8 *)(v4 + 8 * v3);
    v18 = v4;
    v15 = v5 + 4;
    v16 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v4 = v18;
    v3 = v19;
    v17 = v16;
    v5 = v20;
    v6 = *v15;
    v7 = (float)v17 * 0.015625;
  }
  else
  {
    v7 = 0.0;
  }
  if (v6 == 4)
  {
    v8 = *(float *)v5;
    if (!*(_BYTE *)(v4 + 8 * v3 + 6))
      v8 = (float)*(int *)v5;
    v9 = v8 * 64.0;
    if (v9 < 2147483650.0 && v9 > -2147483650.0)
      return (int)v9;
    if (v9 < 2147483650.0)
      goto LABEL_30;
  }
  else
  {
    if (v6 == 3)
    {
      v12 = *(float *)v5;
      if (!*(_BYTE *)(v4 + 8 * v3 + 6))
        v12 = (float)*(int *)v5;
      v13 = (float)(v7 * v12) / 100.0;
    }
    else
    {
      if (v6 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v5, v7);
    }
    v9 = v13 * 64.0;
    if (v9 < 2147483650.0 && v9 > -2147483650.0)
      return (int)v9;
    if (v9 < 2147483650.0)
    {
LABEL_30:
      if (v9 <= -2147483650.0)
        return 0x80000000;
      return (int)v9;
    }
  }
  return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderBoxModelObject::borderAfter(WebCore::RenderBoxModelObject *this)
{
  int v1;
  uint64_t v2;
  float v3;
  double v4;
  BOOL v5;
  BOOL v6;
  uint64_t v8;
  WebCore::RenderStyle *v9;

  v1 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  v9 = (WebCore::RenderBoxModelObject *)((char *)this + 80);
  switch(v1)
  {
    case 0:
      v3 = WebCore::RenderStyle::borderTopWidth(v9);
      break;
    case 1:
    case 3:
      v3 = WebCore::RenderStyle::borderRightWidth(v9);
      break;
    case 2:
    case 4:
      v3 = WebCore::RenderStyle::borderLeftWidth(v9);
      break;
    default:
      v2 = *(_QWORD *)(*((_QWORD *)v9 + 11) + 24);
      v3 = 0.0;
      if ((*(_BYTE *)(v2 + 196) & 0xE) != 0)
      {
        v8 = *(_QWORD *)(v2 + 200);
        if (*(_BYTE *)(v8 + 5) && *(_BYTE *)(v8 + 68) == 4)
        {
          if (*(_BYTE *)(v8 + 70))
            v3 = *(float *)(v8 + 64);
          else
            v3 = (float)*(int *)(v8 + 64);
        }
        else
        {
          v3 = *(float *)(v2 + 192);
        }
      }
      break;
  }
  v4 = v3 * 64.0;
  if (v4 < 2147483650.0)
  {
    v5 = v4 == -2147483650.0;
    v6 = v4 < -2147483650.0;
  }
  else
  {
    v5 = 1;
    v6 = 0;
  }
  if (!v6 && !v5)
    return (int)v4;
  if (v4 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v4 > -2147483650.0)
    return (int)v4;
  return 0x80000000;
}

uint64_t WebCore::RenderBoxModelObject::paddingBefore(WebCore::RenderBoxModelObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  double v9;
  float v12;
  float v13;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;

  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v2 > 4)
    v3 = 0;
  else
    v3 = qword_1969F1F90[v2];
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 72;
  v5 = (unsigned __int8 *)(v4 + 8 * v3);
  v6 = v5[4];
  if ((v6 & 0xFFFFFFF7) == 3)
  {
    v19 = v3;
    v20 = (unsigned __int8 *)(v4 + 8 * v3);
    v18 = v4;
    v15 = v5 + 4;
    v16 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v4 = v18;
    v3 = v19;
    v17 = v16;
    v5 = v20;
    v6 = *v15;
    v7 = (float)v17 * 0.015625;
  }
  else
  {
    v7 = 0.0;
  }
  if (v6 == 4)
  {
    v8 = *(float *)v5;
    if (!*(_BYTE *)(v4 + 8 * v3 + 6))
      v8 = (float)*(int *)v5;
    v9 = v8 * 64.0;
    if (v9 < 2147483650.0 && v9 > -2147483650.0)
      return (int)v9;
    if (v9 < 2147483650.0)
      goto LABEL_30;
  }
  else
  {
    if (v6 == 3)
    {
      v12 = *(float *)v5;
      if (!*(_BYTE *)(v4 + 8 * v3 + 6))
        v12 = (float)*(int *)v5;
      v13 = (float)(v7 * v12) / 100.0;
    }
    else
    {
      if (v6 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v5, v7);
    }
    v9 = v13 * 64.0;
    if (v9 < 2147483650.0 && v9 > -2147483650.0)
      return (int)v9;
    if (v9 < 2147483650.0)
    {
LABEL_30:
      if (v9 <= -2147483650.0)
        return 0x80000000;
      return (int)v9;
    }
  }
  return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderObject::isInlineBlockOrInlineTable(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderBlockFlow::collapsedMarginBefore(WebCore::RenderBlockFlow *this)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v1 = (unsigned int *)*((_QWORD *)this + 28);
  if (v1)
  {
    v4 = *v1;
    v7 = v1[1];
  }
  else
  {
    v2 = 3;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
        v3 = (char *)this + 168;
        v4 = *((_DWORD *)this + 44) & ~(*((int *)this + 44) >> 31);
LABEL_18:
        v5 = 2;
        goto LABEL_6;
      case 2:
      case 4:
        goto LABEL_4;
      case 3:
      case 5:
        v2 = 1;
        goto LABEL_4;
      default:
        v2 = 0;
LABEL_4:
        v3 = (char *)this + 168;
        v4 = *((_DWORD *)this + v2 + 42) & ~(*((int *)this + v2 + 42) >> 31);
        v5 = 3;
        switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
        {
          case 1:
            goto LABEL_18;
          case 2:
          case 4:
            break;
          case 3:
          case 5:
            v5 = 1;
            break;
          default:
            v5 = 0;
            break;
        }
LABEL_6:
        v6 = *(_DWORD *)&v3[4 * v5];
        if (v6 == 0x80000000)
          v7 = 0x7FFFFFFF;
        else
          v7 = -v6 & ~(-v6 >> 31);
        break;
    }
  }
  v8 = __OFSUB__(v4, v7);
  v9 = v4 - v7;
  v10 = (v4 >> 31) + 0x7FFFFFFF;
  if (v8)
    return v10;
  else
    return v9;
}

uint64_t WebCore::RenderBlockFlow::collapsedMarginAfter(WebCore::RenderBlockFlow *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v13;

  v1 = *((_QWORD *)this + 28);
  if (v1)
  {
    v5 = *(_DWORD *)(v1 + 8);
    v8 = *(_DWORD *)(v1 + 12);
  }
  else
  {
    v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
    v3 = 3;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
        v13 = *((_DWORD *)this + 42);
        v4 = (char *)this + 168;
        v5 = v13 & ~(v13 >> 31);
LABEL_18:
        v6 = 0;
        goto LABEL_6;
      case 2:
      case 4:
        v3 = 1;
        goto LABEL_4;
      case 3:
      case 5:
        goto LABEL_4;
      default:
        v3 = 2;
LABEL_4:
        v4 = (char *)this + 168;
        v5 = *(_DWORD *)&v4[4 * v3] & ~(*(int *)&v4[4 * v3] >> 31);
        v6 = 3;
        switch(v2)
        {
          case 0:
            goto LABEL_18;
          case 1:
          case 3:
            v6 = 1;
            break;
          case 2:
          case 4:
            break;
          default:
            v6 = 2;
            break;
        }
LABEL_6:
        v7 = *(_DWORD *)&v4[4 * v6];
        if (v7 == 0x80000000)
          v8 = 0x7FFFFFFF;
        else
          v8 = -v7 & ~(-v7 >> 31);
        break;
    }
  }
  v9 = __OFSUB__(v5, v8);
  v10 = v5 - v8;
  v11 = (v5 >> 31) + 0x7FFFFFFF;
  if (v9)
    return v11;
  else
    return v10;
}

float WebCore::computeBlockStaticDistance(WebCore *this, WebCore::Length *a2, WebCore::Length *a3, const WebCore::RenderBox *a4, const WebCore::RenderBoxModelObject *a5, float result)
{
  WebCore *v6;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  const WebCore::RenderBox *v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v24;
  uint64_t (**v25)(const WebCore::RenderBox *);
  int v26;
  double v27;
  unsigned int v28;
  uint64_t v29;
  const WebCore::RenderBox *v30;
  int *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  WebCore::WillChangeData *v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  const WebCore::RenderBox *v63;
  int *v64;
  int v65;
  unsigned int v66;
  int v67;
  const WebCore::RenderBox *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  const WebCore::RenderBox *v81;
  uint64_t v82;
  _QWORD *v84[3];
  const WebCore::RenderBox *v85;
  _BYTE *v86;
  uint64_t v87;

  if (!*((_BYTE *)this + 4))
  {
    v6 = a2;
    if (!*((_BYTE *)a2 + 4))
    {
      v9 = *((_QWORD *)a3 + 4);
      if (v9)
        v10 = *(_QWORD *)(v9 + 8);
      else
        v10 = 0;
      v11 = (*((_BYTE *)a3 + 21) & 0x10) == 0;
      v82 = v10;
      v12 = (*(_BYTE *)(v10 + 21) & 0x10) == 0;
      v13 = *((_QWORD *)a3 + 18);
      v14 = (unsigned int *)(v13 + 152);
      v15 = (unsigned int *)(v13 + 148);
      if (v11 == v12)
        v15 = v14;
      v16 = *v15;
      if (v9)
      {
        v17 = *(const WebCore::RenderBox **)(v9 + 8);
        v18 = !v17 || v17 == a4;
        if (!v18 && (*((_BYTE *)v17 + 45) & 0x40) != 0 && *((_BYTE *)v17 + 46) != 12)
        {
          v19 = *((_DWORD *)v17 + 31);
          v20 = (unsigned __int16)v19 >> 13;
          v21 = v20 > 5;
          v22 = (1 << v20) & 0x2A;
          if (!v21 && v22 != 0)
          {
            v69 = *((_QWORD *)v17 + 4);
            if (!v69 || (v70 = *(_QWORD *)(v69 + 8)) == 0 || ((*(_DWORD *)(v70 + 124) ^ v19) & 0xE000) != 0)
            {
              if ((*(_BYTE *)(v82 + 45) & 4) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1941269E0);
              }
              v71 = *(_DWORD *)(v82 + 124);
              v72 = (unsigned __int16)v71 >> 13;
              if (v72 <= 5 && ((1 << v72) & 0x2A) != 0)
              {
                v73 = ((v71 >> 13) & 6) - 2 >= 4;
                v74 = (unsigned int *)(v82 + 160);
                if (v73)
                  v74 = (unsigned int *)(v82 + 164);
                v75 = *v74;
                v33 = __OFSUB__(v75, v16);
                v76 = v75 - v16;
                v77 = (v75 >> 31) + 0x7FFFFFFF;
                if (v33)
                  v16 = v77;
                else
                  v16 = v76;
              }
            }
          }
        }
      }
      v24 = v11 ^ v12;
      if (v11 != v12)
      {
        v59 = 1016;
        if (((*((_DWORD *)a4 + 31) >> 13) & 6u) - 2 < 4)
          v59 = 1000;
        v25 = (uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a4 + v59);
      }
      else
      {
        v25 = (uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a4 + 1048);
      }
      v26 = (*v25)(a4);
      if (__OFSUB__(v16, v26))
        v28 = (v16 >> 31) + 0x7FFFFFFF;
      else
        v28 = v16 - v26;
      v29 = *((_QWORD *)a3 + 4);
      if (v29)
      {
        v30 = *(const WebCore::RenderBox **)(v29 + 8);
        if (v30)
        {
          if (v30 != a4)
          {
            if (!v24)
            {
              while (1)
              {
                if ((*((_BYTE *)v30 + 45) & 4) != 0)
                {
                  if (*((_BYTE *)v30 + 46) != 39)
                  {
                    v31 = (int *)((char *)v30 + 152);
                    if (((*((_DWORD *)v30 + 31) >> 13) & 6u) - 2 >= 4)
                      v31 = (int *)((char *)v30 + 156);
                    v32 = *v31;
                    v33 = __OFADD__(v28, v32);
                    v34 = v28 + v32;
                    if (v33)
                      v28 = (v28 >> 31) + 0x7FFFFFFF;
                    else
                      v28 = v34;
                  }
                  v35 = *((_DWORD *)v30 + 5);
                  if ((v35 & 0x800000) != 0)
                  {
                    v81 = v30;
                    v60 = WebCore::RenderBoxModelObject::offsetForInFlowPosition(v30, v27);
                    v30 = v81;
                    v61 = HIDWORD(v60);
                    if ((v35 & 0x1000) != 0)
                      LODWORD(v61) = v60;
                    v33 = __OFADD__(v28, (_DWORD)v61);
                    v62 = v28 + v61;
                    if (v33)
                      v28 = (v28 >> 31) + 0x7FFFFFFF;
                    else
                      v28 = v62;
                  }
                }
                v86 = 0;
                v87 = 0;
                v36 = *((_BYTE *)v30 + 45);
                if ((v36 & 2) != 0 || *((_BYTE *)v30 + 46) == 17)
                {
                  v30 = (const WebCore::RenderBox *)*((_QWORD *)v30 + 4);
                  if (!v30)
                    goto LABEL_84;
LABEL_46:
                  v30 = (const WebCore::RenderBox *)*((_QWORD *)v30 + 1);
                  goto LABEL_47;
                }
                v84[2] = &v85;
                v85 = v30;
                v84[0] = &v86;
                v84[1] = &v87;
                if ((v36 & 1) == 0)
                {
                  v37 = *(_QWORD *)(*((_QWORD *)v30 + 3) + 8);
                  if (v37)
                  {
                    if ((*(_WORD *)(v37 + 28) & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19412655CLL);
                    }
                    if ((*(_BYTE *)(v37 + 23) & 0x20) != 0)
                      goto LABEL_145;
                  }
                }
                v38 = *((_QWORD *)v30 + 12);
                if ((v38 & 0xF80000000000) == 0x480000000000)
                {
LABEL_145:
                  WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v84);
                  v30 = *(const WebCore::RenderBox **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v85 + 3) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944);
                }
                else
                {
                  v39 = (v38 >> 19) & 7;
                  if (v39 <= 3 && v39 != 2)
                  {
                    v30 = (const WebCore::RenderBox *)*((_QWORD *)v30 + 4);
                    if (!v30)
                      goto LABEL_47;
                    goto LABEL_46;
                  }
                  v40 = *((_QWORD *)v30 + 4);
                  if (v40)
                  {
                    v41 = *(_QWORD *)(v40 + 8);
                    if (v41)
                      ++*(_DWORD *)(v41 + 16);
                  }
                  else
                  {
                    v41 = 0;
                  }
                  if (v39 == 2)
                  {
                    if (v41)
                    {
                      while (1)
                      {
                        v42 = *(unsigned __int8 *)(v41 + 46);
                        if (v42 == 49 || (*(_BYTE *)(v41 + 98) & 0x38) != 0)
                          break;
                        if (((*(_BYTE *)(v41 + 45) & 0x40) != 0 || (v42 - 36) <= 4 && v42 != 38)
                          && (*(_BYTE *)(v41 + 22) & 2) != 0)
                        {
                          break;
                        }
                        v43 = *(_QWORD *)(*(_QWORD *)(v41 + 88) + 40);
                        if (*(_DWORD *)(*(_QWORD *)(v43 + 72) + 20))
                        {
                          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8) + 40) + 8)
                                         + 1272) != *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8))
                            break;
                        }
                        if ((*(_BYTE *)(v41 + 45) & 0x40) != 0)
                        {
                          v44 = *(WebCore::WillChangeData **)(v43 + 200);
                          if (v44)
                          {
                            if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v44, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8) + 40)+ 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8)) & 1) != 0)goto LABEL_157;
                            v42 = *(unsigned __int8 *)(v41 + 46);
                          }
                        }
                        if (v42 == 67 || v42 == 90)
                          break;
                        v45 = *(_QWORD *)(*(_QWORD *)(v41 + 88) + 40);
                        v46 = *(_BYTE *)(v45 + 462);
                        v47 = *(_BYTE *)(v45 + 642) & 3;
                        v48 = v46 | 0x19;
                        if (v47 == 1)
                          v46 |= 0x15u;
                        v49 = v47 == 2 ? v48 : v46;
                        if ((v49 & 3) != 0
                          && ((*(_BYTE *)(v41 + 20) & 1) != 0
                           || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v41))
                          && (*(_QWORD *)(v41 + 96) & 0x1FLL) != 0x19)
                        {
                          if (*(unsigned __int8 *)(v41 + 46) - 36 > 4)
                            goto LABEL_157;
                          if ((*(_BYTE *)(v41 + 52) & 7) == 1)
                            break;
                        }
                        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 40) + 636) & 0xC0000) != 0
                          && ((*(_BYTE *)(v41 + 20) & 1) != 0
                           || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v41))
                          && (*(_QWORD *)(v41 + 96) & 0x1FLL) != 0x19)
                        {
                          v58 = *(unsigned __int8 *)(v41 + 46);
                          if ((v58 - 36) <= 4)
                          {
                            if (v58 == 36)
                              break;
                          }
                          else if (v58 != 63 && v58 != 35)
                          {
                            break;
                          }
                        }
                        if (v86 && v41 == v87)
                          *v86 = 1;
                        v50 = *(_QWORD *)(v41 + 32);
                        if (v50)
                        {
                          v51 = *(_QWORD *)(v50 + 8);
                          if (v51)
                            ++*(_DWORD *)(v51 + 16);
                        }
                        else
                        {
                          v51 = 0;
                        }
                        v52 = *(_DWORD *)(v41 + 16);
                        if (!v52)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19412661CLL);
                        }
                        v30 = 0;
                        *(_DWORD *)(v41 + 16) = v52 - 1;
                        v41 = v51;
                        if (!v51)
                          goto LABEL_47;
                      }
                      v30 = (const WebCore::RenderBox *)v41;
LABEL_81:
                      v53 = *(_DWORD *)(v41 + 16);
                      if (!v53)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19412663CLL);
                      }
LABEL_82:
                      *(_DWORD *)(v41 + 16) = v53 - 1;
                      goto LABEL_47;
                    }
                  }
                  else if (v41)
                  {
                    while (1)
                    {
                      if (WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v41))
                      {
LABEL_157:
                        v30 = (const WebCore::RenderBox *)v41;
                        goto LABEL_81;
                      }
                      if ((*(_BYTE *)(v41 + 45) & 1) == 0)
                      {
                        v54 = *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8);
                        if (v54)
                        {
                          if ((*(_WORD *)(v54 + 28) & 8) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1941266E4);
                          }
                          if ((*(_BYTE *)(v54 + 23) & 0x20) != 0)
                            goto LABEL_144;
                        }
                      }
                      if ((*(_QWORD *)(v41 + 96) & 0xF80000000000) == 0x480000000000)
                      {
LABEL_144:
                        WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v84);
                        v30 = *(const WebCore::RenderBox **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v85 + 3)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8)
                                                           + 1944);
                        goto LABEL_81;
                      }
                      if (v86 && v41 == v87)
                        *v86 = 1;
                      v55 = *(_QWORD *)(v41 + 32);
                      if (!v55)
                        break;
                      v56 = *(_QWORD *)(v55 + 8);
                      if (v56)
                        ++*(_DWORD *)(v56 + 16);
                      v57 = *(_DWORD *)(v41 + 16);
                      if (!v57)
                        goto LABEL_121;
                      v30 = 0;
                      *(_DWORD *)(v41 + 16) = v57 - 1;
                      v41 = v56;
                      if (!v56)
                        goto LABEL_47;
                    }
                    v53 = *(_DWORD *)(v41 + 16);
                    if (!v53)
                    {
LABEL_121:
                      __break(0xC471u);
                      JUMPOUT(0x1941266C4);
                    }
                    v30 = 0;
                    goto LABEL_82;
                  }
                  v30 = 0;
                }
LABEL_47:
                if (!v30 || v30 == a4)
                  goto LABEL_84;
              }
            }
            do
            {
              v63 = v30;
              if ((*((_BYTE *)v30 + 45) & 4) != 0)
              {
                if (*((_BYTE *)v30 + 46) != 39)
                {
                  v64 = (int *)((char *)v30 + 152);
                  if (((*((_DWORD *)v63 + 31) >> 13) & 6u) - 2 < 4)
                    v64 = (int *)((char *)v63 + 156);
                  v65 = *v64;
                  v33 = __OFADD__(v28, v65);
                  v66 = v28 + v65;
                  if (v33)
                    v28 = (v28 >> 31) + 0x7FFFFFFF;
                  else
                    v28 = v66;
                }
                v67 = *((_DWORD *)v63 + 5);
                if ((v67 & 0x800000) != 0)
                {
                  v78 = WebCore::RenderBoxModelObject::offsetForInFlowPosition(v63, v27);
                  v79 = HIDWORD(v78);
                  if ((v67 & 0x1000) != 0)
                    LODWORD(v79) = v78;
                  v33 = __OFADD__(v28, (_DWORD)v79);
                  v80 = v28 + v79;
                  if (v33)
                    v28 = (v28 >> 31) + 0x7FFFFFFF;
                  else
                    v28 = v80;
                }
              }
              v68 = (const WebCore::RenderBox *)WebCore::RenderObject::container(v63);
              if (!v68)
                break;
              v30 = v68;
            }
            while (v68 != a4);
          }
        }
      }
LABEL_84:
      if ((v24 & 1) == 0 || (*(_BYTE *)(v82 + 123) & 4) == 0)
        v6 = this;
      *((_BYTE *)v6 + 4) = 4;
      result = (float)(int)v28 * 0.015625;
      *(float *)v6 = result;
      *((_BYTE *)v6 + 6) = 1;
    }
  }
  return result;
}

unint64_t WebCore::ImageBuffer::calculateBackendSize(float a1, float a2, float a3)
{
  unint64_t v3;
  unsigned int v4;
  float v5;
  float v6;
  BOOL v7;
  BOOL v8;

  v3 = 0;
  v4 = 0;
  v5 = ceilf(a1 * a3);
  if (v5 > 0.0)
  {
    v6 = ceilf(a2 * a3);
    if (v6 > 0.0)
    {
      v7 = v5 > -2147500000.0 && v5 < 2147500000.0;
      if (v7 && (v6 > -2147500000.0 ? (v8 = v6 < 2147500000.0) : (v8 = 0), v8))
      {
        v4 = (int)v5;
        if (v5 >= 2147500000.0)
          v4 = 0x7FFFFFFF;
        if (v6 >= 2147500000.0)
          v3 = 0x7FFFFFFF00000000;
        else
          v3 = (unint64_t)(int)v6 << 32;
      }
      else
      {
        v4 = 0;
        v3 = 0;
      }
    }
  }
  return v3 | v4;
}

float WebCore::screenScaleFactor(WebCore *this, UIScreen *a2)
{
  double v2;

  if (!this)
    this = (WebCore *)objc_msgSend((id)PAL::getUIScreenClass(0), "mainScreen");
  -[WebCore scale](this, "scale");
  return v2;
}

BOOL WebCore::ResourceRequestBase::hasHTTPHeaderField(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  int v5;
  _BOOL8 result;

  v2 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(unsigned __int16 **)(a1 + 96);
  v4 = v2 - 1;
  do
  {
    v5 = *v3;
    v3 += 8;
    result = v5 == a2;
  }
  while (v5 != a2 && v4-- != 0);
  return result;
}

WebCore::ResourceRequest *WebCore::ResourceRequestBase::httpBody@<X0>(WebCore::ResourceRequest *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char v4;
  _DWORD *v5;

  v2 = (uint64_t)this;
  v4 = *((_BYTE *)this + 184);
  if ((v4 & 1) == 0)
  {
    this = (WebCore::ResourceRequest *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v4 = *(_BYTE *)(v2 + 184) | 1;
    *(_BYTE *)(v2 + 184) = v4;
  }
  if ((v4 & 4) == 0)
  {
    this = (WebCore::ResourceRequest *)WebCore::ResourceRequest::doUpdateResourceHTTPBody((WebCore::ResourceRequest *)v2);
    *(_BYTE *)(v2 + 184) |= 4u;
  }
  v5 = *(_DWORD **)(v2 + 168);
  if (v5)
    ++*v5;
  *a2 = v5;
  return this;
}

WebCore::FormData **WebCore::ResourceRequest::doUpdateResourceHTTPBody(WebCore::ResourceRequest *this)
{
  void *v2;
  WebCore::FormData **result;
  NSInputStream *v4;
  void *v5;
  WebCore::FormData *v6;
  WebCore::FormData *v7;
  WebCore::FormData *v8;

  v2 = (void *)objc_msgSend(*((id *)this + 24), "HTTPBody");
  if (v2)
  {
    WebCore::FormData::create((_BYTE *)objc_msgSend(v2, "bytes"), objc_msgSend(v2, "length"), (uint64_t *)&v8);
    v6 = v8;
    v8 = 0;
    v7 = (WebCore::FormData *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v6;
    if (v7)
      WTF::RefCounted<WebCore::FormData>::deref(v7, v5);
    return WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::~Ref(&v8, v5);
  }
  else
  {
    result = (WebCore::FormData **)objc_msgSend(*((id *)this + 24), "HTTPBodyStream");
    if (result)
    {
      result = (WebCore::FormData **)WebCore::httpBodyFromStream((WebCore *)result, v4);
      if (result)
        return WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::operator=((WebCore::FormData **)this + 21, (WebCore::FormData *)result);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  const WTF::String *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 8 * v11);
      if (*v13)
      {
        if (*v13 != (WTF::StringImpl *)-1)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v6 + 8 * v11), v10);
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v14 + 8 * v18));
          v19 = (WTF::StringImpl **)(v14 + 8 * v18);
          *v19 = 0;
          v20 = *v13;
          *v13 = 0;
          *v19 = v20;
          v21 = *v13;
          *v13 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v10);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (v13 == a3)
            v12 = v19;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF *WebCore::FontCascadeFonts::glyphDataForVariant(uint64_t a1, WebCore::FontCascadeFonts *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF *result;
  int v19;
  char v20;
  void *v21;
  WTF *v22;
  WebCore::Font *v23;
  int v24;
  WTF *v25;
  WTF *v26;
  unsigned __int32 v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  WebCore::FontCascadeFonts *v33;
  unsigned int v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  int v52;
  int v53;
  int v54;
  char v55;
  WebCore::Font *v56;
  WebCore::Font *v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  int v61;
  WTF *v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  __int16 v66;
  char v67;
  WTF *v68;
  WTF *v69;
  unsigned __int16 v70;
  char v71;
  WTF *v72;

  v66 = 0;
  v67 = 0;
  v68 = 0;
  v14 = *((_QWORD *)a2 + 14);
  if (v14)
  {
    v15 = *(_QWORD *)(a4 + 168);
    if (*(_DWORD *)(v15 + 4))
    {
      v16 = 0;
      v17 = 8;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, a4, v15 + v17);
        ++v16;
        v15 = *(_QWORD *)(a4 + 168);
        v17 += 8;
      }
      while (v16 < *(unsigned int *)(v15 + 4));
    }
  }
  result = (WTF *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(a2, (const WebCore::FontCascadeDescription *)a4, a7);
  if (!*((_DWORD *)result + 3))
  {
    v19 = 0;
LABEL_18:
    v26 = v68;
    if (v68 && *((_QWORD *)v68 + 1))
    {
      *(_WORD *)a1 = v66;
      *(_BYTE *)(a1 + 2) = v67;
      *(_QWORD *)(a1 + 8) = v26;
      return result;
    }
    if ((_DWORD)a3 == 63743)
    {
      v31 = v19 == 2;
      v32 = a1;
      v33 = a2;
      v34 = 63743;
    }
    else
    {
      v27 = ublock_getCode(a3) - 78;
      if (v27 <= 0x20 && ((1 << v27) & 0x180000001) != 0)
      {
        v28 = *((_QWORD *)a2 + 13);
        if (v28 && *(_QWORD *)(v28 + 8))
          goto LABEL_25;
        v39 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(a2, (const WebCore::FontCascadeDescription *)a4, 0);
        WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v39, 1, (uint64_t)&v70);
        if (!v72 || (v40 = *((_QWORD *)v72 + 1)) == 0)
        {
          v41 = 0;
          goto LABEL_58;
        }
        v41 = *(_QWORD *)(v40 + 8);
        if (!v41)
        {
          v41 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v41 = 1;
          *(_QWORD *)(v41 + 8) = v40;
          v64 = *(WTF **)(v40 + 8);
          *(_QWORD *)(v40 + 8) = v41;
          if (v64)
          {
            if (*(_DWORD *)v64 == 1)
            {
              WTF::fastFree(v64, v21);
              v41 = *(_QWORD *)(v40 + 8);
              if (!v41)
              {
LABEL_58:
                v42 = (WTF *)*((_QWORD *)a2 + 13);
                *((_QWORD *)a2 + 13) = v41;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 1)
                    WTF::fastFree(v42, v21);
                  else
                    --*(_DWORD *)v42;
                }
                v43 = v72;
                v72 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 1)
                    WTF::fastFree(v43, v21);
                  else
                    --*(_DWORD *)v43;
                }
                v44 = *((_QWORD *)a2 + 13);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 8);
                  if (v45)
                  {
                    if ((*(_BYTE *)(v45 + 256) & 2) != 0)
                    {
                      v46 = 1;
                      while (1)
                      {
                        v47 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(a2, (const WebCore::FontCascadeDescription *)a4, v46);
                        if (!*(_DWORD *)(v47 + 12))
                          break;
                        WebCore::FontRanges::glyphDataForCharacter(0x20u, v47, 0, (uint64_t)&v70);
                        if (v72)
                          v48 = *((_QWORD *)v72 + 1);
                        else
                          v48 = 0;
                        WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v69, v48);
                        v49 = v72;
                        v72 = 0;
                        if (v49)
                        {
                          if (*(_DWORD *)v49 == 1)
                            WTF::fastFree(v49, v21);
                          else
                            --*(_DWORD *)v49;
                        }
                        v29 = v69;
                        if (v69)
                        {
                          v50 = *((_QWORD *)v69 + 1);
                          if (!v50 || (*(_BYTE *)(v50 + 256) & 2) != 0)
                          {
                            v53 = 0;
                            v69 = 0;
                          }
                          else
                          {
                            v69 = 0;
                            v51 = (WTF *)*((_QWORD *)a2 + 13);
                            *((_QWORD *)a2 + 13) = v29;
                            if (!v51)
                              goto LABEL_27;
                            v52 = *(_DWORD *)v51 - 1;
                            if (*(_DWORD *)v51 != 1)
                              goto LABEL_120;
                            WTF::fastFree(v51, v21);
                            v29 = v69;
                            v69 = 0;
                            if (!v29)
                              goto LABEL_25;
                            v53 = 2;
                          }
                          if (*(_DWORD *)v29 == 1)
                            WTF::fastFree(v29, v21);
                          else
                            --*(_DWORD *)v29;
                        }
                        else
                        {
                          v53 = 0;
                        }
                        ++v46;
                        if (v53)
                          goto LABEL_25;
                      }
                    }
                    goto LABEL_25;
                  }
                }
                if (!v39[3])
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412748CLL);
                }
                v29 = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v39 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v39 + 8), 1);
                if (!v29)
                  goto LABEL_118;
                v63 = v29;
                v29 = (WTF *)*((_QWORD *)v29 + 1);
                if (!v29)
                {
                  v29 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v29 = 1;
                  *((_QWORD *)v29 + 1) = v63;
                  v65 = (WTF *)*((_QWORD *)v63 + 1);
                  *((_QWORD *)v63 + 1) = v29;
                  if (v65)
                  {
                    if (*(_DWORD *)v65 == 1)
                    {
                      WTF::fastFree(v65, v21);
                      v29 = (WTF *)*((_QWORD *)v63 + 1);
                      if (!v29)
                        goto LABEL_118;
                    }
                    else
                    {
                      --*(_DWORD *)v65;
                    }
                  }
                }
                ++*(_DWORD *)v29;
LABEL_118:
                v51 = (WTF *)*((_QWORD *)a2 + 13);
                *((_QWORD *)a2 + 13) = v29;
                if (!v51)
                {
LABEL_26:
                  if (v29)
                  {
LABEL_27:
                    v30 = *((_QWORD *)v29 + 1);
                    *(_WORD *)a1 = 0;
                    *(_BYTE *)(a1 + 2) = 0;
                    if (v30)
                    {
                      v29 = *(WTF **)(v30 + 8);
                      if (!v29)
                      {
                        v29 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v29 = 1;
                        *((_QWORD *)v29 + 1) = v30;
                        v62 = *(WTF **)(v30 + 8);
                        *(_QWORD *)(v30 + 8) = v29;
                        if (v62)
                        {
                          if (*(_DWORD *)v62 == 1)
                          {
                            WTF::fastFree(v62, v21);
                            v29 = *(WTF **)(v30 + 8);
                            if (!v29)
                              goto LABEL_29;
                          }
                          else
                          {
                            --*(_DWORD *)v62;
                          }
                        }
                      }
                      ++*(_DWORD *)v29;
                    }
                    else
                    {
                      v29 = 0;
                    }
                  }
                  else
                  {
                    *(_WORD *)a1 = 0;
                    *(_BYTE *)(a1 + 2) = 0;
                  }
LABEL_29:
                  *(_QWORD *)(a1 + 8) = v29;
                  goto LABEL_30;
                }
                v52 = *(_DWORD *)v51 - 1;
                if (*(_DWORD *)v51 == 1)
                  WTF::fastFree(v51, v21);
                else
LABEL_120:
                  *(_DWORD *)v51 = v52;
LABEL_25:
                v29 = (WTF *)*((_QWORD *)a2 + 13);
                goto LABEL_26;
              }
            }
            else
            {
              --*(_DWORD *)v64;
            }
          }
        }
        ++*(_DWORD *)v41;
        goto LABEL_58;
      }
      v31 = v19 == 2;
      v32 = a1;
      v33 = a2;
      v34 = a3;
    }
    WebCore::FontCascadeFonts::glyphDataForSystemFallback(v32, v33, v34, (WebCore::FontCascadeDescription *)a4, a5, a6, v31);
    goto LABEL_30;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    WebCore::FontRanges::glyphDataForCharacter(a3, (uint64_t)result, v20 & 1, (uint64_t)&v70);
    v22 = v72;
    if (!v72)
      goto LABEL_14;
    v23 = (WebCore::Font *)*((_QWORD *)v72 + 1);
    if (!v23)
    {
      v24 = 1;
      goto LABEL_10;
    }
    v35 = (_DWORD)a6 == 2 && v71 == 0;
    v36 = v35;
    v37 = v71 == 1 && (_DWORD)a6 == 1;
    v24 = 1;
    if (!v37 && !v36)
      break;
LABEL_10:
    v25 = v72;
    v72 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        WTF::fastFree(v25, v21);
      else
        --*(_DWORD *)v25;
    }
    if (!v24)
      goto LABEL_30;
LABEL_14:
    a7 = (a7 + 1);
    result = (WTF *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(a2, (const WebCore::FontCascadeDescription *)a4, a7);
    if (!*((_DWORD *)result + 3))
      goto LABEL_18;
  }
  if ((*((_BYTE *)v23 + 256) & 2) != 0)
  {
    if ((*((_BYTE *)v23 + 256) & 4) != 0)
      v54 = 2;
    else
      v54 = 1;
    if (!v19)
      v19 = v54;
    v55 = (char)v68;
    if (v68)
      v55 = *((_QWORD *)v68 + 1) != 0;
    v20 = 0;
    if ((v55 & 1) == 0 && v70)
    {
      WebCore::GlyphData::operator=((uint64_t)&v66, &v70);
      v20 = 0;
    }
    goto LABEL_10;
  }
  if (v19 == 2 && (*((_BYTE *)v23 + 256) & 4) == 0)
  {
    v58 = WebCore::Font::invisibleFont(v23);
    WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v69, v58);
    v59 = v69;
    v69 = 0;
    v60 = v72;
    v72 = v59;
    if (v60)
    {
      v61 = *(_DWORD *)v60 - 1;
      if (*(_DWORD *)v60 == 1)
      {
        WTF::fastFree(v60, v21);
        v60 = v69;
        v69 = 0;
        if (!v60)
          goto LABEL_114;
        v61 = *(_DWORD *)v60 - 1;
        if (*(_DWORD *)v60 == 1)
        {
          WTF::fastFree(v60, v21);
          goto LABEL_114;
        }
      }
      *(_DWORD *)v60 = v61;
    }
LABEL_114:
    v22 = v72;
  }
  if (a5 == 1)
  {
    if (!v22)
      goto LABEL_54;
    v38 = *((_QWORD *)v22 + 1);
    if (!*(_BYTE *)(v38 + 100) || (*(_BYTE *)(v38 + 256) & 8) != 0)
      goto LABEL_54;
    if (WebCore::FontCascade::isCJKIdeographOrSymbol(a3))
    {
      v22 = v72;
      if ((*(_BYTE *)(*((_QWORD *)v72 + 1) + 344) & 8) != 0)
        goto LABEL_54;
      WebCore::FontCascadeFonts::glyphDataForVariant(a1, a2, a3, a4, 4, a6, a7);
    }
    else
    {
      WebCore::glyphDataForNonCJKCharacterWithGlyphOrientation(a1, a3, (*(_DWORD *)(a4 + 160) & 2) != 0, &v70);
    }
    goto LABEL_104;
  }
  if (v22)
    v56 = (WebCore::Font *)*((_QWORD *)v22 + 1);
  else
    v56 = 0;
  v57 = WebCore::Font::variantFont(v56, (const WebCore::FontDescription *)a4, a5);
  if (v57)
  {
    WebCore::Font::glyphDataForCharacter(v57, a3, a1);
LABEL_104:
    v24 = 0;
    goto LABEL_10;
  }
  v22 = v72;
LABEL_54:
  *(_WORD *)a1 = v70;
  *(_BYTE *)(a1 + 2) = v71;
  *(_QWORD *)(a1 + 8) = v22;
LABEL_30:
  result = v68;
  v68 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v21);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::FontCascadeFonts::realizeFallbackRangesAt(WebCore::FontCascadeFonts *this, const WebCore::FontCascadeDescription *a2, unsigned int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  _QWORD *v19;
  WTF *v20;
  int v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  void *v25;
  WTF::StringImpl *v26;
  WebCore::FontCache *v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  _QWORD *v37;
  WTF *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  void *v43;
  WebCore::Font *v44;
  WTF *v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  WTF **v62;
  WTF::StringImpl *v63;
  WTF *v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t v67;

  v4 = (uint64_t *)((char *)this + 8);
  v5 = *((unsigned int *)this + 5);
  if (v5 > a3)
    return *v4 + 40 * a3;
  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  v64 = (WTF *)v66;
  v65 = 1;
  if ((_DWORD)v5 == *((_DWORD *)this + 4))
  {
    v48 = WTF::Vector<WebCore::FontRanges,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((_DWORD *)this + 2, v5 + 1, (unint64_t)&v64);
    v49 = *((_DWORD *)this + 5);
    v50 = *((_QWORD *)this + 1);
    v51 = v50 + 40 * v49;
    v52 = *(unsigned int *)(v48 + 12);
    v53 = (_QWORD *)(v51 + 16);
    *(_QWORD *)v51 = v51 + 16;
    *(_DWORD *)(v51 + 8) = 1;
    *(_DWORD *)(v51 + 12) = v52;
    if (v52 >= 2)
    {
      v61 = v48;
      if (v52 >> 28)
      {
LABEL_74:
        __break(0xC471u);
        JUMPOUT(0x194127A64);
      }
      v53 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v52));
      *(_DWORD *)(v51 + 8) = v52;
      *(_QWORD *)v51 = v53;
      v48 = v61;
    }
    v54 = *(unsigned int *)(v48 + 12);
    if ((_DWORD)v54)
    {
      v58 = *(_QWORD **)v48;
      v59 = *(_QWORD *)v48 + 16 * v54;
      do
      {
        *v53 = *v58;
        v60 = v58[1];
        ++*(_DWORD *)(v60 + 8);
        v53[1] = v60;
        v58 += 2;
        v53 += 2;
      }
      while (v58 != (_QWORD *)v59);
    }
    *(_BYTE *)(v50 + 40 * v49 + 32) = *(_BYTE *)(v48 + 32);
    LODWORD(v5) = *((_DWORD *)this + 5);
  }
  else
  {
    v10 = *v4;
    v11 = (_QWORD *)(*v4 + 40 * v5);
    v12 = v11 + 2;
    *v11 = v11 + 2;
    v11[1] = 1;
    if (HIDWORD(v65))
    {
      v55 = v64;
      v56 = (WTF *)((char *)v64 + 16 * HIDWORD(v65));
      do
      {
        *v12 = *(_QWORD *)v55;
        v57 = *((_QWORD *)v55 + 1);
        ++*(_DWORD *)(v57 + 8);
        v12[1] = v57;
        v55 = (WTF *)((char *)v55 + 16);
        v12 += 2;
      }
      while (v55 != v56);
    }
    *(_BYTE *)(v10 + 40 * v5 + 32) = 0;
  }
  *((_DWORD *)this + 5) = v5 + 1;
  WebCore::FontRanges::~FontRanges(&v64, a2);
  v13 = *((unsigned int *)this + 5);
  if (!(_DWORD)v13)
    goto LABEL_74;
  v14 = v13 - 1;
  v15 = *v4;
  v6 = *v4 + 40 * (v13 - 1);
  if (a3)
  {
    v33 = *((_DWORD *)this + 16);
    if (v33 < WebCore::FontCascadeDescription::effectiveFamilyCount(a2))
    {
      WebCore::realizeNextFallback((WebCore *)&v64, a2, (unsigned int *)this + 16, *((WebCore::FontSelector **)this + 14));
      v35 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v35)
        WTF::VectorTypeOperations<WebCore::FontRanges::Range>::destruct(*(_DWORD **)v6, (_DWORD *)(*(_QWORD *)v6 + 16 * v35));
      v37 = (_QWORD *)(v6 + 16);
      v36 = *(WTF **)v6;
      if (*(_QWORD *)v6 != v6 + 16)
      {
        if (v36)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          WTF::fastFree(v36, v34);
        }
        *(_QWORD *)v6 = v37;
      }
      v38 = v64;
      if (v64 == (WTF *)v66)
      {
        if (HIDWORD(v65))
        {
          v45 = (WTF *)((char *)v64 + 16 * HIDWORD(v65));
          do
          {
            *v37 = *(_QWORD *)v38;
            v46 = *((_QWORD *)v38 + 1);
            *((_QWORD *)v38 + 1) = 0;
            v37[1] = v46;
            v47 = (_DWORD *)*((_QWORD *)v38 + 1);
            *((_QWORD *)v38 + 1) = 0;
            if (v47)
            {
              if (v47[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
              else
                --v47[2];
            }
            v38 = (WTF *)((char *)v38 + 16);
            v37 += 2;
          }
          while (v38 != v45);
        }
        v39 = v65;
      }
      else
      {
        v64 = (WTF *)v66;
        *(_QWORD *)v6 = v38;
        v39 = v65;
        LODWORD(v65) = 1;
      }
      *(_DWORD *)(v6 + 8) = v39;
      v40 = HIDWORD(v65);
      HIDWORD(v65) = 0;
      *(_DWORD *)(v6 + 12) = v40;
      *(_BYTE *)(v15 + 40 * v14 + 32) = v67;
      WebCore::FontRanges::~FontRanges(&v64, v34);
    }
    if (!*(_DWORD *)(v6 + 12))
    {
      if (*((_QWORD *)this + 14))
      {
        v41 = *((_DWORD *)this + 16);
        v42 = v41 - WebCore::FontCascadeDescription::effectiveFamilyCount(a2);
        if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 32))(*((_QWORD *)this + 14)) != v42)
        {
          ++*((_DWORD *)this + 16);
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, const WebCore::FontCascadeDescription *, uint64_t))(**((_QWORD **)this + 14) + 24))(&v63, *((_QWORD *)this + 14), a2, v42);
          WebCore::FontRanges::FontRanges((uint64_t)&v64, (uint64_t *)&v63);
          WebCore::FontRanges::operator=(v6, &v64);
          WebCore::FontRanges::~FontRanges(&v64, v43);
          v44 = v63;
          v63 = 0;
          if (v44)
            WTF::RefCounted<WebCore::Font>::deref(v44);
        }
      }
    }
  }
  else
  {
    WebCore::realizeNextFallback((WebCore *)&v64, a2, (unsigned int *)this + 16, *((WebCore::FontSelector **)this + 14));
    v17 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v17)
      WTF::VectorTypeOperations<WebCore::FontRanges::Range>::destruct(*(_DWORD **)v6, (_DWORD *)(*(_QWORD *)v6 + 16 * v17));
    v19 = (_QWORD *)(v6 + 16);
    v18 = *(WTF **)v6;
    if (*(_QWORD *)v6 != v6 + 16)
    {
      if (v18)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
        WTF::fastFree(v18, v16);
      }
      *(_QWORD *)v6 = v19;
    }
    v20 = v64;
    if (v64 == (WTF *)v66)
    {
      if (HIDWORD(v65))
      {
        v30 = (WTF *)((char *)v64 + 16 * HIDWORD(v65));
        do
        {
          *v19 = *(_QWORD *)v20;
          v31 = *((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          v19[1] = v31;
          v32 = (_DWORD *)*((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          if (v32)
          {
            if (v32[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
            else
              --v32[2];
          }
          v20 = (WTF *)((char *)v20 + 16);
          v19 += 2;
        }
        while (v20 != v30);
      }
      v21 = v65;
    }
    else
    {
      v64 = (WTF *)v66;
      *(_QWORD *)v6 = v20;
      v21 = v65;
      LODWORD(v65) = 1;
    }
    *(_DWORD *)(v6 + 8) = v21;
    v22 = HIDWORD(v65);
    HIDWORD(v65) = 0;
    *(_DWORD *)(v6 + 12) = v22;
    *(_BYTE *)(v15 + 40 * v14 + 32) = v67;
    WebCore::FontRanges::~FontRanges(&v64, v16);
    if (!*(_DWORD *)(v6 + 12))
    {
      v24 = *((_QWORD *)this + 14);
      if (!v24)
        goto LABEL_22;
      if (HIDWORD(qword_1EE2F9BE8) <= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x194127A6CLL);
      }
      WTF::AtomStringImpl::add();
      (*(void (**)(WTF **__return_ptr, uint64_t, const WebCore::FontCascadeDescription *, WTF::StringImpl **))(*(_QWORD *)v24 + 16))(&v64, v24, a2, &v63);
      WebCore::FontRanges::operator=(v6, &v64);
      WebCore::FontRanges::~FontRanges(&v64, v25);
      v23 = v63;
      v63 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v26);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (!*(_DWORD *)(v6 + 12))
      {
LABEL_22:
        v27 = (WebCore::FontCache *)WebCore::FontCache::forCurrentThread(v23);
        WebCore::FontCache::lastResortFallbackFont(v27, a2, &v62);
        v28 = (WTF::StringImpl *)v62;
        v62 = 0;
        v63 = v28;
        WebCore::FontRanges::FontRanges((uint64_t)&v64, (uint64_t *)&v63);
        WebCore::FontRanges::operator=(v6, &v64);
        WebCore::FontRanges::~FontRanges(&v64, v29);
        if (v63)
          WTF::RefCounted<WebCore::Font>::deref(v63);
        WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::~Ref(&v62);
      }
    }
  }
  return v6;
}

void WebCore::CSSFontSelector::opportunisticallyStartFontDataURLLoading(WebCore::CSSFontSelector *this, const WebCore::FontCascadeDescription *a2, const WTF::AtomString *a3)
{
  WebCore::CSSSegmentedFontFace *v3;
  uint64_t v4;
  WebCore::CSSFontFace **v5;
  uint64_t v6;
  WebCore::CSSFontFace *v7;

  v3 = WebCore::CSSFontFaceSet::fontFace(*((_QWORD *)this + 12), *((_QWORD *)a2 + 18), a3);
  if (v3)
  {
    v4 = *((unsigned int *)v3 + 11);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::CSSFontFace **)*((_QWORD *)v3 + 4);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        WebCore::CSSFontFace::opportunisticallyStartFontDataURLLoading(v7);
        v6 -= 8;
      }
      while (v6);
    }
  }
}

WebCore::CSSSegmentedFontFace *WebCore::CSSFontFaceSet::fontFace(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash *this)
{
  uint64_t v4;
  WebCore::CSSSegmentedFontFace *v5;
  WebCore::CSSSegmentedFontFace *result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  void *v12;
  WebCore::CSSSegmentedFontFace **v13;
  WebCore::CSSSegmentedFontFace *v14;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL4 v33;
  uint64_t v34;
  _QWORD *v35;
  WebCore::CSSFontFace *v36;
  int v37;
  WebCore::CSSFontFace *v38;
  WTF *v39;
  uint64_t v40;
  WebCore::CSSFontFace *v41;
  WebCore::CSSSegmentedFontFace *v42;
  WTF *v43;
  WTF *v44;
  WebCore::CSSFontFace *v48;
  uint64_t v49;
  char v50;
  WTF *v51;
  int v52;
  WTF *v53;
  uint64_t v54;
  _BYTE v55[256];

  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 0;
  v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v4, this);
  v8 = a1;
  v9 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    v10 = v7;
    if (!v9)
      goto LABEL_6;
    v26 = *(_DWORD *)(v9 - 4);
  }
  else
  {
    if (!v9)
      return 0;
    v26 = *(_DWORD *)(v9 - 4);
    v10 = (uint64_t *)(v9 + 24 * v26);
  }
  if (v10 == (uint64_t *)(v9 + 24 * v26))
    return 0;
LABEL_6:
  v49 = 0;
  WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>((uint64_t)&v53, (uint64_t *)(a1 + 56), this, &v49);
  v11 = (uint64_t *)((char *)v53 + 8);
  WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>::~HashMap(&v49, v12);
  v49 = a2;
  v50 = 1;
  WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>::add<decltype(nullptr)>((WebCore::CSSSegmentedFontFace *)&v53, v11, (unsigned __int16 *)&v49);
  v13 = (WebCore::CSSSegmentedFontFace **)((char *)v53 + 16);
  v5 = (WebCore::CSSSegmentedFontFace *)*((_QWORD *)v53 + 2);
  if (v5)
    return v5;
  v14 = (WebCore::CSSSegmentedFontFace *)WTF::fastMalloc((WTF *)0x38);
  WebCore::CSSSegmentedFontFace::CSSSegmentedFontFace(v14);
  v53 = v15;
  WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>::operator=<WebCore::CSSSegmentedFontFace>(v13, &v53);
  result = (WebCore::CSSSegmentedFontFace *)WTF::Ref<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>::~Ref(&v53, v16);
  v53 = (WTF *)v55;
  v54 = 32;
  v17 = *((_DWORD *)v10 + 5);
  v18 = a2 << 16 >> 48;
  v19 = (v17 - 1);
  if (v17 - 1 < 0)
  {
LABEL_31:
    v27 = WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find((uint64_t **)(v8 + 48), this);
    v29 = *(uint64_t **)(v8 + 48);
    if (v29)
      v29 += 3 * *((unsigned int *)v29 - 1);
    if (v29 != v27)
    {
      v30 = *((unsigned int *)v27 + 5);
      if ((_DWORD)v30)
      {
        v31 = (_QWORD *)v27[1];
        v33 = (a2 & 0xFF000000000000) == 0 || (int)v18 < 56;
        v34 = 8 * v30;
        do
        {
          v35 = v31;
          v36 = (WebCore::CSSFontFace *)*v31;
          if (*(_BYTE *)(*v31 + 138) != 4
            && (!v33 || (__int16)WebCore::CSSFontFace::fontSelectionCapabilities(v36) <= 55))
          {
            v37 = HIDWORD(v54);
            if (HIDWORD(v54) == (_DWORD)v54)
            {
              WTF::Vector<std::reference_wrapper<WebCore::CSSFontFace>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>> &>((uint64_t)&v53, v35);
            }
            else
            {
              *((_QWORD *)v53 + HIDWORD(v54)) = v36;
              HIDWORD(v54) = v37 + 1;
            }
          }
          v31 = v35 + 1;
          v34 -= 8;
        }
        while (v34);
      }
    }
    if (HIDWORD(v54))
    {
      WTF::Vector<std::reference_wrapper<WebCore::CSSFontFace>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_0>(&v51, (uint64_t)&v53);
      WebCore::FontSelectionAlgorithm::FontSelectionAlgorithm((uint64_t)&v49, a2, (__int16 **)&v51, 0, 0);
      std::stable_sort[abi:sn180100]<std::reference_wrapper<WebCore::CSSFontFace> *,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1>((uint64_t)v53, (uint64_t *)v53 + HIDWORD(v54), (__int16 *)&v49);
      if (HIDWORD(v54))
      {
        v38 = 0;
        v39 = v53;
        v40 = 8 * HIDWORD(v54);
        do
        {
          v41 = *(WebCore::CSSFontFace **)v39;
          if (*(WebCore::CSSFontFace **)v39 != v38)
          {
            v42 = *v13;
            ++*((_DWORD *)v41 + 2);
            v48 = v41;
            WebCore::CSSSegmentedFontFace::appendFontFace((uint64_t)v42, (char *)&v48);
            WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>::~Ref(&v48);
            v38 = v41;
          }
          v39 = (WTF *)((char *)v39 + 8);
          v40 -= 8;
        }
        while (v40);
      }
      v43 = v51;
      if (v51)
      {
        v51 = 0;
        v52 = 0;
        WTF::fastFree(v43, v28);
      }
    }
    v5 = *v13;
    v44 = v53;
    if (v55 != (_BYTE *)v53 && v53 != 0)
    {
      v53 = 0;
      LODWORD(v54) = 0;
      WTF::fastFree(v44, v28);
    }
    return v5;
  }
  v20 = v10;
  v21 = (a2 & 0xFF000000000000) == 0 || (int)v18 < 56;
  v22 = v21;
  v23 = v22;
  while (v19 < *((unsigned int *)v20 + 5))
  {
    v24 = *(_QWORD *)(v20[1] + 8 * v19);
    if (*(_BYTE *)(v24 + 138) != 4)
    {
      if (!v22
        || (result = (WebCore::CSSSegmentedFontFace *)WebCore::CSSFontFace::fontSelectionCapabilities(*(WebCore::CSSFontFace **)(v20[1] + 8 * v19)),
            v22 = v23,
            v20 = v10,
            (__int16)result <= 55))
      {
        v25 = HIDWORD(v54);
        if (HIDWORD(v54) == (_DWORD)v54)
        {
          result = (WebCore::CSSSegmentedFontFace *)WTF::Vector<std::reference_wrapper<WebCore::CSSFontFace>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSFontFace&>((uint64_t)&v53, v24);
        }
        else
        {
          *((_QWORD *)v53 + HIDWORD(v54)) = v24;
          HIDWORD(v54) = v25 + 1;
        }
        v20 = v10;
        v22 = v23;
      }
    }
    v21 = (uint64_t)v19-- <= 0;
    if (v21)
      goto LABEL_31;
  }
  __break(0xC471u);
  return result;
}

WebCore::RegistrableDomain *WebCore::RegistrableDomain::RegistrableDomain(WebCore::RegistrableDomain *this, const WTF::URL *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  uint64_t v9[2];

  WTF::URL::host(a2);
  if ((v3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::RegistrableDomain::registrableDomainFromHost((WebCore::RegistrableDomain *)&v8, v9);
  if (v9[0] && *(_DWORD *)(v9[0] + 4))
  {
    *(_QWORD *)this = v9[0];
    v9[0] = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = (WTF::StringImpl *)v9[0];
    *(_QWORD *)this = v9[1];
    v9[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

uint64_t WebCore::ContentSecurityPolicySourceList::isValidSourceForExtensionMode(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  int v16;
  int v17;
  char v18;
  char **v19;
  char *v20;

  v2 = *(unsigned __int8 *)(a1 + 72);
  if (!*(_BYTE *)(a1 + 72))
    return 1;
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      v5 = *(_QWORD *)(a1 + 64);
      v6 = qword_1EE2E40F8 ? qword_1EE2E40F8 - 1 : 0;
      if ((MEMORY[0x19AEA53F4](v5, WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc, v6) & 1) != 0
        || (qword_1EE2E4118 ? (v7 = qword_1EE2E4118 - 1) : (v7 = 0),
            MEMORY[0x19AEA53F4](*(_QWORD *)(a1 + 64), WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc, v7)))
      {
        if (*((_BYTE *)a2 + 32))
        {
          v8 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
          if (v8 != -1)
          {
            v20 = &v18;
            v19 = &v20;
            std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
          }
          if ((WebCore::PublicSuffixStore::platformIsPublicSuffix((uint64_t)&WebCore::PublicSuffixStore::singleton(void)::store, a2[2], a2[3]) & 1) != 0)return 0;
        }
        v9 = *a2;
        v10 = a2[1];
        if ((_DWORD)v10 == 4)
        {
          if ((v10 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)v9 & 0xDF) != 0x42
              || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x4C
              || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x4F)
            {
              return 0;
            }
            v15 = *(unsigned __int8 *)(v9 + 3);
          }
          else
          {
            if ((*(_WORD *)v9 & 0xFFDF) != 0x42
              || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x4F)
            {
              return 0;
            }
            v15 = *(unsigned __int16 *)(v9 + 6);
          }
          if ((v15 & 0xFFFFFFDF) != 0x42)
            return 0;
        }
        else
        {
          if ((_DWORD)v10 != 5)
            return 0;
          if ((v10 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)v9 & 0xDF) != 0x48
              || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x54
              || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x54
              || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x50)
            {
              return 0;
            }
            v11 = *(unsigned __int8 *)(v9 + 4);
          }
          else
          {
            if ((*(_WORD *)v9 & 0xFFDF) != 0x48
              || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x54
              || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x54
              || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x50)
            {
              return 0;
            }
            v11 = *(unsigned __int16 *)(v9 + 8);
          }
          if ((v11 & 0xFFFFFFDF) != 0x53 || !*((_DWORD *)a2 + 6))
            return 0;
        }
      }
    }
    return 1;
  }
  if (!WebCore::isRestrictedDirectiveForMode((_QWORD *)(a1 + 64), 2))
    return 1;
  v12 = *a2;
  v13 = a2[1];
  if ((_DWORD)v13 == 5)
  {
    if ((v13 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v12 & 0xDF) != 0x48
        || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x54
        || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x54
        || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x50)
      {
        return 0;
      }
      v16 = *(unsigned __int8 *)(v12 + 4);
    }
    else
    {
      if ((*(_WORD *)v12 & 0xFFDF) != 0x48
        || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x54
        || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x54
        || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x50)
      {
        return 0;
      }
      v16 = *(unsigned __int16 *)(v12 + 8);
    }
    if ((v16 & 0xFFFFFFDF) != 0x53)
      return 0;
  }
  else
  {
    if ((_DWORD)v13 != 4)
      return 0;
    if ((v13 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v12 & 0xDF) != 0x48
        || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x54
        || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x54)
      {
        return 0;
      }
      v17 = *(unsigned __int8 *)(v12 + 3);
    }
    else
    {
      if ((*(_WORD *)v12 & 0xFFDF) != 0x48
        || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x54
        || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x54)
      {
        return 0;
      }
      v17 = *(unsigned __int16 *)(v12 + 6);
    }
    if ((v17 & 0xFFFFFFDF) != 0x50)
      return 0;
  }
  result = WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress(a2[2], a2[3]);
  if ((_DWORD)result)
    return 1;
  return result;
}

BOOL WTF::String::containsOnlyASCII(WTF::String *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(unsigned int *)(v1 + 4);
  v5 = (v2 & 7) == 0 || v3 == 0;
  if ((*(_BYTE *)(v1 + 16) & 4) != 0)
  {
    v6 = v2 + v3;
    if (v5)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = v3 - 1;
      v9 = v2 + 1;
      do
      {
        v10 = *(unsigned __int8 *)v2++;
        v7 |= v10;
        if ((v9 & 7) == 0)
          break;
        v11 = v8--;
        ++v9;
      }
      while (v11);
    }
    while (v2 < (v6 & 0xFFFFFFFFFFFFFFF8))
    {
      v12 = *(_QWORD *)v2;
      v2 += 8;
      v7 |= v12;
    }
    while (v2 != v6)
    {
      v13 = *(unsigned __int8 *)v2++;
      v7 |= v13;
    }
    v14 = v7 & 0x8080808080808080;
  }
  else
  {
    v16 = v2 + 2 * v3;
    if (v5)
    {
      v17 = 0;
    }
    else
    {
      v17 = 0;
      v18 = 2 * v3 - 2;
      v19 = v2 + 2;
      do
      {
        v20 = *(unsigned __int16 *)v2;
        v2 += 2;
        v17 |= v20;
        if ((v19 & 7) == 0)
          break;
        v21 = v18;
        v18 -= 2;
        v19 += 2;
      }
      while (v21);
    }
    while (v2 < (v16 & 0xFFFFFFFFFFFFFFF8))
    {
      v22 = *(_QWORD *)v2;
      v2 += 8;
      v17 |= v22;
    }
    while (v2 != v16)
    {
      v23 = *(unsigned __int16 *)v2;
      v2 += 2;
      v17 |= v23;
    }
    v14 = v17 & 0xFF80FF80FF80FF80;
  }
  return v14 == 0;
}

uint64_t WebCore::FontRanges::glyphDataForCharacter@<X0>(unsigned int c@<W1>, uint64_t result@<X0>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  WebCore::Font *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v6 = result;
  if (*(_BYTE *)(result + 32)
    && (result = ublock_getCode(c), (result - 78) <= 0x20)
    && ((1 << (result - 78)) & 0x180000001) != 0
    || (v8 = *(unsigned int *)(v6 + 12), !(_DWORD)v8))
  {
LABEL_22:
    *(_WORD *)a4 = 0;
    *(_BYTE *)(a4 + 2) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return result;
  }
  v9 = 0;
  v10 = *(_QWORD *)v6;
  v11 = 16 * v8;
  v12 = (_QWORD *)(v10 + 8);
  while (1)
  {
    if (*((_DWORD *)v12 - 2) <= c && *((_DWORD *)v12 - 1) >= c)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v12 + 16))(*v12, a3 & 1);
      if (result)
      {
        if ((*(_BYTE *)(result + 256) & 2) != 0)
        {
          a3 = 0;
          if (!v9)
            v9 = (WebCore::Font *)result;
          goto LABEL_12;
        }
        WebCore::Font::glyphDataForCharacter((WebCore::Font *)result, c, (uint64_t)&v22);
        result = (uint64_t)v23;
        if (v23)
          break;
      }
    }
LABEL_12:
    v12 += 2;
    v11 -= 16;
    if (!v11)
    {
      if (!v9)
        goto LABEL_22;
      result = WebCore::Font::glyphDataForCharacter(v9, c, a4);
      v15 = *(_QWORD *)(a4 + 8);
      if (!v15 || !*(_QWORD *)(v15 + 8))
      {
        WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>(&v22, (uint64_t)v9);
        v17 = v22;
        v22 = 0;
        result = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(a4 + 8) = v17;
        if (result)
        {
          v18 = *(_DWORD *)result - 1;
          if (*(_DWORD *)result == 1)
          {
            WTF::fastFree((WTF *)result, v16);
            result = v22;
            v22 = 0;
            if (!result)
              return result;
            goto LABEL_33;
          }
LABEL_34:
          *(_DWORD *)result = v18;
          return result;
        }
      }
      return result;
    }
  }
  v14 = *((_QWORD *)v23 + 1);
  if (!v14)
  {
    v23 = 0;
    if (*(_DWORD *)result == 1)
      result = WTF::fastFree((WTF *)result, v13);
    else
      --*(_DWORD *)result;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(v14 + 256) & 4) != 0 || !v9 || (*((_BYTE *)v9 + 256) & 4) == 0)
  {
    *(_WORD *)a4 = v22;
    *(_BYTE *)(a4 + 2) = BYTE2(v22);
    *(_QWORD *)(a4 + 8) = result;
    return result;
  }
  v20 = v22;
  v21 = WebCore::Font::invisibleFont(*((WebCore::Font **)v23 + 1));
  WebCore::GlyphData::GlyphData(a4, v20, v21, 0);
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
  {
LABEL_33:
    v18 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result != 1)
      goto LABEL_34;
    return WTF::fastFree((WTF *)result, v19);
  }
  return result;
}

uint64_t WebCore::CSSFontAccessor::font(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  WebCore::FontFeatureValues *v6;
  WebCore::FontFeatureValues *v7;
  WTF **v8;
  WTF *v10;
  void *v11;
  WebCore::Font *v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::FontFeatureValues *v15;
  WebCore::Font *v16;

  if (*(_BYTE *)(a1 + 24))
  {
    if (!a2)
      return *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 32);
    if (*(unsigned __int8 *)(v3 + 138) > 2u)
      return *(_QWORD *)(a1 + 16);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
  }
  v4 = *(unsigned __int8 *)(a1 + 248);
  v5 = *(unsigned __int8 *)(a1 + 249);
  v6 = *(WebCore::FontFeatureValues **)(a1 + 208);
  if (v6)
    ++*((_DWORD *)v6 + 2);
  v15 = v6;
  WebCore::CSSFontFace::font(v3, (WTF::StringImpl *)(a1 + 40), v4 != 0, v5 != 0, a2, a1 + 216, &v15, (uint64_t *)&v16);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
      (*(void (**)(WebCore::FontFeatureValues *))(*(_QWORD *)v7 + 8))(v7);
    else
      --*((_DWORD *)v7 + 2);
  }
  v8 = (WTF **)v16;
  if (!*(_BYTE *)(a1 + 24))
  {
    if (v16)
      ++*(_DWORD *)v16;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = 1;
  }
  v16 = 0;
  if (!v8)
    return *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
    return *(_QWORD *)(a1 + 16);
  }
  WebCore::Font::~Font(v8);
  WTF::fastFree(v10, v11);
  if (*(_BYTE *)(a1 + 24))
    return *(_QWORD *)(a1 + 16);
  v12 = (WebCore::Font *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::Font::glyphDataForCharacter(v12, v13, v14);
}

uint64_t WebCore::Font::glyphDataForCharacter@<X0>(WebCore::Font *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t result;
  void *v6;
  WTF *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;

  v3 = a2;
  result = WebCore::Font::glyphPage(a1, (void *)(a2 >> 4));
  if (!result)
  {
    *(_WORD *)a3 = 0;
    *(_BYTE *)(a3 + 2) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  v7 = (WTF *)result;
  ++*(_DWORD *)result;
  v8 = *(_WORD *)(result + 2 * (v3 & 0xF) + 16);
  v9 = (*(_DWORD *)(result + 48) >> (v3 & 0xF)) & 1;
  if (!v8)
  {
    result = 0;
    *(_WORD *)a3 = 0;
LABEL_14:
    *(_BYTE *)(a3 + 2) = v9;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(result + 8);
  if (!v10)
  {
    result = 0;
    *(_WORD *)a3 = v8;
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(v10 + 8);
  *(_WORD *)a3 = v8;
  *(_BYTE *)(a3 + 2) = v9;
  if (!v11)
  {
    result = 0;
    goto LABEL_6;
  }
  result = *(_QWORD *)(v11 + 8);
  if (result)
    goto LABEL_18;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v11;
  v13 = *(WTF **)(v11 + 8);
  *(_QWORD *)(v11 + 8) = result;
  if (!v13)
    goto LABEL_18;
  if (*(_DWORD *)v13 != 1)
  {
    --*(_DWORD *)v13;
LABEL_18:
    ++*(_DWORD *)result;
    goto LABEL_6;
  }
  WTF::fastFree(v13, v6);
  result = *(_QWORD *)(v11 + 8);
  if (result)
    goto LABEL_18;
LABEL_6:
  *(_QWORD *)(a3 + 8) = result;
  if (*(_DWORD *)v7 == 1)
  {
    --WebCore::GlyphPage::s_count;
    v12 = (WTF *)*((_QWORD *)v7 + 1);
    *((_QWORD *)v7 + 1) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v6);
      else
        --*(_DWORD *)v12;
    }
    return WTF::fastFree(v7, v6);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  return result;
}

void WebCore::CSSFontFace::opportunisticallyStartFontDataURLLoading(WebCore::CSSFontFace *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*((_DWORD *)this + 23))
  {
    v1 = **((_QWORD **)this + 10);
    if (!*(_DWORD *)(v1 + 88))
    {
      v2 = *(_QWORD *)(v1 + 40);
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
        if (WTF::URL::protocolIs())
        {
          v3 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 16))(*(_QWORD *)(v1 + 40));
          if (!v3 || !(*(_DWORD *)(v3 + 4) >> 20))
            WebCore::CSSFontFaceSource::load((WebCore::CSSFontFaceSource *)v1, 0);
        }
      }
    }
  }
}

void WebCore::CSSFontFace::font(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, WebCore::FontFeatureValues **a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  WebCore::Document *v32;
  WebCore::Document *v33;
  WebCore::FontFeatureValues *v34;
  WebCore::FontFeatureValues *v35;
  void *v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  double v41;
  unint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::FontCache *v46;
  WTF **v47;
  WTF *v48;
  void *v49;
  WebCore::FontFeatureValues *v50;
  uint64_t v51[3];
  WTF *v52;
  WebCore::Font *v53;

  if (*(_BYTE *)(a1 + 138) == 4 || (v10 = *(unsigned int *)(a1 + 92), !(_DWORD)v10))
  {
LABEL_6:
    *a8 = 0;
    return;
  }
  v17 = *(_QWORD *)(a1 + 80);
  v18 = 8 * v10;
  while (*(_DWORD *)(*(_QWORD *)v17 + 88) == 3)
  {
    v17 += 8;
    v18 -= 8;
    if (!v18)
      goto LABEL_6;
  }
  ++*(_DWORD *)(a1 + 8);
  v19 = WebCore::CSSFontFace::pump(a1, a5);
  if (*(_BYTE *)(a1 + 138) == 4)
    goto LABEL_43;
  v20 = *(unsigned int *)(a1 + 92);
  if (!(_DWORD)v20)
    goto LABEL_43;
  v21 = v19;
  v22 = *(_QWORD *)(a1 + 80);
  v23 = 8 * v20;
  while (*(_DWORD *)(*(_QWORD *)v22 + 88) == 3)
  {
    v22 += 8;
    v23 -= 8;
    if (!v23)
    {
      *a8 = 0;
      if (a1)
        goto LABEL_44;
      return;
    }
  }
  if (v19 >= v20)
  {
LABEL_43:
    *a8 = 0;
    goto LABEL_44;
  }
  while (1)
  {
    v24 = *(_QWORD *)(a1 + 80);
    v25 = *(_QWORD *)(v24 + 8 * v21);
    v26 = *(_DWORD *)(v25 + 88);
    if (v26)
      goto LABEL_27;
    if ((a5 & 1) == 0 && *(_QWORD *)(v25 + 40))
      break;
    v27 = *(_QWORD *)(a1 + 112);
    if (v27
      && (v28 = *(_QWORD *)(v27 + 8)) != 0
      && (v29 = *(_QWORD *)(v28 - 24)) != 0
      && (v30 = *(_QWORD *)(v29 + 8)) != 0)
    {
      v31 = *(_BYTE *)(v30 + 178);
      v32 = (WebCore::Document *)(v30 - 288);
      if (v31)
        v33 = 0;
      else
        v33 = v32;
    }
    else
    {
      v33 = 0;
    }
    WebCore::CSSFontFaceSource::load((WebCore::CSSFontFaceSource *)v25, v33);
    v26 = *(_DWORD *)(*(_QWORD *)(v24 + 8 * v21) + 88);
LABEL_27:
    if (v26 == 2)
    {
      v34 = *a7;
      if (*a7)
        ++*((_DWORD *)v34 + 2);
      v50 = v34;
      WebCore::FontCreationContext::FontCreationContext((uint64_t)v51, a1 + 56, (__int128 *)(a1 + 120), a6, &v50, *(float *)(a1 + 76));
      v35 = v50;
      v50 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 2) == 1)
          (*(void (**)(WebCore::FontFeatureValues *))(*(_QWORD *)v35 + 8))(v35);
        else
          --*((_DWORD *)v35 + 2);
      }
      WebCore::CSSFontFaceSource::font(*(_QWORD *)(v24 + 8 * v21), a2, a3, a4, (__int16 *)v51, a8);
      v37 = *a8;
      if (!*a8)
        *a8 = 0;
      v38 = v52;
      v52 = 0;
      if (v38)
        WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)v38, v36);
      if (v37)
        goto LABEL_44;
    }
    else if (v26 <= 1)
    {
      break;
    }
    if (++v21 >= *(unsigned int *)(a1 + 92))
      goto LABEL_43;
  }
  v41 = INFINITY;
  switch(*(_BYTE *)(a1 + 143))
  {
    case 0:
      v42 = *(char *)(a1 + 72);
      if (v42 >= 5)
        goto LABEL_65;
      v41 = dbl_1969ED460[v42];
LABEL_51:
      if (*(_BYTE *)(a1 + 138) == 1)
      {
        v43 = 1;
      }
      else if (*(_BYTE *)(a1 + 138))
      {
        v43 = 0;
      }
      else
      {
        v43 = v41 != 0.0;
      }
      v44 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v44 || (v45 = *(_QWORD *)(v44 + 96)) == 0)
        v45 = WebCore::threadGlobalDataSlow((WebCore *)v25);
      v46 = *(WebCore::FontCache **)(v45 + 80);
      if (!v46)
      {
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v45);
        v46 = *(WebCore::FontCache **)(v45 + 80);
      }
      WebCore::FontCache::lastResortFallbackFont(v46, a2, (WTF ***)&v53);
      WebCore::Font::create((uint64_t)v53 + 88, 1, 1, v43, 0, 0, 0, v51);
      *a8 = v51[0];
      v47 = (WTF **)v53;
      v53 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1)
        {
          WebCore::Font::~Font(v47);
          WTF::fastFree(v48, v49);
        }
        else
        {
          --*(_DWORD *)v47;
        }
      }
      break;
    case 1:
      goto LABEL_51;
    case 2:
    case 3:
      v41 = 0.0;
      goto LABEL_51;
    default:
LABEL_65:
      __break(0xC471u);
      JUMPOUT(0x194128C48);
  }
LABEL_44:
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    WebCore::CSSFontFace::~CSSFontFace((WebCore::CSSFontFace *)a1);
    WTF::fastFree(v39, v40);
  }
  else
  {
    --*(_DWORD *)(a1 + 8);
  }
}

unint64_t WebCore::CSSFontFace::pump(uint64_t a1, int a2)
{
  int v2;
  unint64_t v3;
  uint64_t v6;
  WebCore::CSSFontFaceSource *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WebCore::Document *v14;
  WebCore::Document *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  WebCore::Document *v25;
  WebCore::Document *v26;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v2 = *(unsigned __int8 *)(a1 + 138);
  if (v2 == 4)
    return 0;
  if (*(_DWORD *)(a1 + 92))
  {
    v3 = 0;
    if ((a2 & 1) != 0)
    {
      while (2)
      {
        v6 = *(_QWORD *)(a1 + 80);
        v7 = *(WebCore::CSSFontFaceSource **)(v6 + 8 * v3);
        v8 = *((_DWORD *)v7 + 22);
        if (!v8)
        {
          if (!*(_BYTE *)(a1 + 138))
          {
            WebCore::CSSFontFace::setStatus(a1, 1);
            v7 = *(WebCore::CSSFontFaceSource **)(v6 + 8 * v3);
          }
          v9 = *(_QWORD *)(a1 + 112);
          if (v9
            && (v10 = *(_QWORD *)(v9 + 8)) != 0
            && (v11 = *(_QWORD *)(v10 - 24)) != 0
            && (v12 = *(_QWORD *)(v11 + 8)) != 0)
          {
            v13 = *(_BYTE *)(v12 + 178);
            v14 = (WebCore::Document *)(v12 - 288);
            if (v13)
              v15 = 0;
            else
              v15 = v14;
          }
          else
          {
            v15 = 0;
          }
          WebCore::CSSFontFaceSource::load(v7, v15);
          v8 = *(_DWORD *)(*(_QWORD *)(v6 + 8 * v3) + 88);
        }
        switch(v8)
        {
          case 0:
            return v3;
          case 1:
            goto LABEL_44;
          case 2:
            goto LABEL_47;
          case 3:
            if (!*(_BYTE *)(a1 + 138))
              WebCore::CSSFontFace::setStatus(a1, 1);
            goto LABEL_20;
          default:
LABEL_20:
            ++v3;
            v16 = *(unsigned int *)(a1 + 92);
            if (v3 >= v16)
              goto LABEL_37;
            continue;
        }
      }
    }
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 80);
      v18 = *(_QWORD *)(v17 + 8 * v3);
      v19 = *(_DWORD *)(v18 + 88);
      if (!v19)
      {
        if (*(_QWORD *)(v18 + 40))
          return v3;
        v20 = *(_QWORD *)(a1 + 112);
        if (v20
          && (v21 = *(_QWORD *)(v20 + 8)) != 0
          && (v22 = *(_QWORD *)(v21 - 24)) != 0
          && (v23 = *(_QWORD *)(v22 + 8)) != 0)
        {
          v24 = *(_BYTE *)(v23 + 178);
          v25 = (WebCore::Document *)(v23 - 288);
          if (v24)
            v26 = 0;
          else
            v26 = v25;
        }
        else
        {
          v26 = 0;
        }
        WebCore::CSSFontFaceSource::load((WebCore::CSSFontFaceSource *)v18, v26);
        v19 = *(_DWORD *)(*(_QWORD *)(v17 + 8 * v3) + 88);
      }
      if (!v19)
        return v3;
      if (v19 == 1)
        break;
      if (v19 == 2)
      {
LABEL_47:
        v30 = *(unsigned __int8 *)(a1 + 138);
        if (!*(_BYTE *)(a1 + 138))
        {
          WebCore::CSSFontFace::setStatus(a1, 1);
          v30 = *(unsigned __int8 *)(a1 + 138);
        }
        if ((v30 - 1) <= 1)
        {
          v28 = a1;
          v29 = 3;
          goto LABEL_51;
        }
        return v3;
      }
      ++v3;
      v16 = *(unsigned int *)(a1 + 92);
      if (v3 >= v16)
      {
LABEL_37:
        v2 = *(unsigned __int8 *)(a1 + 138);
        if ((_DWORD)v16)
          goto LABEL_40;
        goto LABEL_38;
      }
    }
LABEL_44:
    if (a2 && !*(_BYTE *)(a1 + 138))
    {
      v28 = a1;
      v29 = 1;
LABEL_51:
      WebCore::CSSFontFace::setStatus(v28, v29);
    }
  }
  else
  {
LABEL_38:
    if (!v2)
    {
      WebCore::CSSFontFace::setStatus(a1, 1);
      v2 = *(unsigned __int8 *)(a1 + 138);
    }
LABEL_40:
    if ((v2 - 1) <= 1)
      WebCore::CSSFontFace::setStatus(a1, 4);
    return *(unsigned int *)(a1 + 92);
  }
  return v3;
}

void WebCore::Font::~Font(WTF **this)
{
  WebCore::SystemFallbackFontCache *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  WebCore::Font::DerivedFonts *v6;
  WTF *v7;
  void *v8;
  WebCore::OpenTypeMathData *v9;
  unint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  WTF **v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  void *v30;
  char v31;

  v2 = (WebCore::SystemFallbackFontCache *)WebCore::SystemFallbackFontCache::forCurrentThread((WebCore::SystemFallbackFontCache *)this);
  WebCore::SystemFallbackFontCache::remove(v2, (WebCore::Font *)this);
  if (*((_BYTE *)this + 320))
  {
    v4 = (unint64_t)this[39];
    if ((v4 & 0x8000000000000000) == 0)
      WTF::fastFree((WTF *)(2 * v4), v3);
  }
  if (*((_BYTE *)this + 296))
    PAL::OTSVGTable::~OTSVGTable((PAL::OTSVGTable *)(this + 36));
  v5 = *((unsigned int *)this + 70);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, WTF **))off_1E340B6C0[v5])(&v31, this + 34);
  *((_DWORD *)this + 70) = -1;
  v6 = this[33];
  this[33] = 0;
  if (v6)
  {
    WebCore::Font::DerivedFonts::~DerivedFonts(v6);
    WTF::fastFree(v7, v8);
  }
  v9 = this[29];
  this[29] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::OpenTypeMathData::~OpenTypeMathData(v9, v3);
      WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = (unint64_t)this[28];
  if ((v10 & 0x8000000000000000) == 0)
    WTF::fastFree((WTF *)(2 * v10), v3);
  std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>>::~unique_ptr[abi:sn180100](this + 27, v3);
  v12 = this[26];
  this[26] = 0;
  if (v12)
  {
    v13 = *((_QWORD *)v12 + 33);
    if (v13)
    {
      v14 = *(unsigned int *)(v13 - 4);
      if ((_DWORD)v14)
      {
        v15 = (WTF **)(v13 + 8);
        do
        {
          if (*((_DWORD *)v15 - 2) != -1)
          {
            v16 = *v15;
            *v15 = 0;
            if (v16)
              WTF::fastFree(v16, v11);
          }
          v15 += 2;
          --v14;
        }
        while (v14);
      }
      WTF::fastFree((WTF *)(v13 - 16), v11);
    }
    WTF::fastFree(v12, v11);
  }
  v17 = this[25];
  if (v17)
  {
    v18 = *((unsigned int *)v17 - 1);
    if ((_DWORD)v18)
    {
      v19 = (WTF **)((char *)v17 + 8);
      do
      {
        if (*((_DWORD *)v19 - 2) != -1)
        {
          v20 = *v19;
          *v19 = 0;
          if (v20)
            WTF::fastFree(v20, v11);
        }
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)((char *)v17 - 16), v11);
  }
  v21 = this[15];
  if (v21)
  {
    v22 = *((unsigned int *)v21 - 1);
    if ((_DWORD)v22)
    {
      v23 = (WTF **)((char *)v21 + 8);
      do
      {
        if (*((_DWORD *)v23 - 2) != -2)
        {
          v24 = *v23;
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v25 = (WTF *)*((_QWORD *)v24 + 1);
              *((_QWORD *)v24 + 1) = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 1)
                  WTF::fastFree(v25, v11);
                else
                  --*(_DWORD *)v25;
              }
              WTF::fastFree(v24, v11);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
        }
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)((char *)v21 - 16), v11);
  }
  WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)(this + 11), (WTF::StringImpl *)v11);
  v27 = this[1];
  if (v27)
  {
    *((_QWORD *)v27 + 1) = 0;
    v28 = this[1];
    this[1] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 1)
        WTF::fastFree(v28, v26);
      else
        --*(_DWORD *)v28;
    }
  }
  else
  {
    this[1] = 0;
  }
}

void WebCore::FontPlatformData::~FontPlatformData(WebCore::FontPlatformData *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  const void *v4;
  WTF::StringImpl *v5;
  void *v6;
  const void *v7;

  v3 = (uint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (WTF::StringImpl *)v3[3];
      v3[3] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v3 + 2, a2);
      v7 = (const void *)v3[1];
      v3[1] = 0;
      if (v7)
        CFRelease(v7);
      WTF::fastFree((WTF *)v3, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v4)
    CFRelease(v4);
}

{
  uint64_t *v3;
  const void *v4;
  WTF::StringImpl *v5;
  void *v6;
  const void *v7;

  v3 = (uint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (WTF::StringImpl *)v3[3];
      v3[3] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v3 + 2, a2);
      v7 = (const void *)v3[1];
      v3[1] = 0;
      if (v7)
        CFRelease(v7);
      WTF::fastFree((WTF *)v3, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v4)
    CFRelease(v4);
}

uint64_t *WebCore::SystemFallbackFontCache::remove(WebCore::SystemFallbackFontCache *this, WebCore::Font *a2)
{
  uint64_t *result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t *v26;
  _WORD *v27;
  uint64_t *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;

  result = (uint64_t *)MEMORY[0x1E0C80A78](this, a2);
  v3 = result;
  v52 = v4;
  if (!*result)
    goto LABEL_2;
  result = (uint64_t *)WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(result, &v52);
  v5 = *v3;
  if (!result)
  {
    if (!v5)
      goto LABEL_2;
    v7 = *(unsigned int *)(v5 - 4);
    v6 = (WTF::StringImpl *)(v5 + 16 * v7);
LABEL_7:
    v5 += 16 * v7;
    if ((WTF::StringImpl *)v5 == v6)
      goto LABEL_2;
    goto LABEL_8;
  }
  v6 = (WTF::StringImpl *)result;
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    goto LABEL_7;
  }
LABEL_8:
  if ((WTF::StringImpl *)v5 != v6)
    result = WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::remove(v3, v6);
LABEL_2:
  if ((*(_BYTE *)(v52 + 344) & 0x10) != 0)
  {
    result = WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::values(v3, &v48);
    v10 = v49;
    v44 = v51;
    if (v49 != v51)
    {
      v11 = v50;
      while (1)
      {
        v12 = v10 + 1;
        v45 = &v47;
        v46 = 512;
        v13 = WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::begin(v10 + 1, v8, v9);
        v16 = (WTF::StringImpl *)v13;
        v17 = v14;
        v18 = v10[1];
        if (v18)
          v19 = (WTF::StringImpl *)(v18 + 32 * *(unsigned int *)(v18 - 4));
        else
          v19 = 0;
        if (v19 != (WTF::StringImpl *)v13)
        {
          do
          {
            if (*((_QWORD *)v16 + 3) == v52)
            {
              v20 = HIDWORD(v46);
              if (HIDWORD(v46) == (_DWORD)v46)
              {
                v21 = WTF::Vector<WebCore::CharacterFallbackMapKey,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v45, HIDWORD(v46) + 1, (unint64_t)v16);
                v22 = HIDWORD(v46);
                v23 = v45;
                v24 = *(_DWORD **)v21;
                if (*(_QWORD *)v21)
                  *v24 += 2;
                v23[3 * v22] = (uint64_t)v24;
                v25 = *(_DWORD **)(v21 + 8);
                if (v25)
                  *v25 += 2;
                v26 = &v23[3 * v22];
                v26[1] = (uint64_t)v25;
                v27 = v26 + 2;
              }
              else
              {
                v28 = v45;
                v29 = *(_DWORD **)v16;
                if (*(_QWORD *)v16)
                  *v29 += 2;
                v28[3 * v20] = (uint64_t)v29;
                v30 = (_DWORD *)*((_QWORD *)v16 + 1);
                if (v30)
                  *v30 += 2;
                v31 = &v28[3 * v20];
                v31[1] = (uint64_t)v30;
                v27 = v31 + 2;
                v21 = (unint64_t)v16;
              }
              *v27 = *(_WORD *)(v21 + 16);
              ++HIDWORD(v46);
            }
            while (1)
            {
              v16 = (WTF::StringImpl *)((char *)v16 + 32);
              if (v16 == v17)
                break;
              if (!WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::isEmptyBucket((uint64_t)v16, (uint64_t)v14, v15)&& *((_QWORD *)v16 + 1) != -1)
              {
                goto LABEL_21;
              }
            }
            v16 = v17;
LABEL_21:
            ;
          }
          while (v16 != v19);
        }
        if (HIDWORD(v46))
        {
          v32 = *v12;
          if (*v12)
            break;
        }
LABEL_54:
        result = (uint64_t *)WTF::Vector<WebCore::CharacterFallbackMapKey,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v45, v14);
        v10 += 2;
        if (v10 == v11)
        {
          v10 = v11;
        }
        else
        {
          while ((unint64_t)(*v10 + 1) <= 1)
          {
            v10 += 2;
            if (v10 == v11)
            {
              v10 = v11;
              break;
            }
          }
        }
        if (v10 == v44)
          return result;
      }
      v33 = (uint64_t)v45;
      v34 = &v45[3 * HIDWORD(v46)];
      while (1)
      {
        if (!v32)
          goto LABEL_45;
        v35 = *(_DWORD *)(v32 - 8);
        v36 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::CharacterFallbackMapKeyHash>::hash<WebCore::CharacterFallbackMapKey>(v33) & v35;
        v37 = v32 + 32 * v36;
        if (WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::isEmptyBucket(v37, v38, v39))
        {
          break;
        }
        v43 = 1;
        while (*(_QWORD *)(v37 + 8) == -1 || (WebCore::CharacterFallbackMapKeyHash::equal(v37, v33, v40) & 1) == 0)
        {
          v36 = ((_DWORD)v36 + v43) & v35;
          v37 = v32 + 32 * v36;
          ++v43;
          if (WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::isEmptyBucket(v37, (uint64_t)v14, v40))
          {
            goto LABEL_40;
          }
        }
        v41 = *v12;
        if (*v12)
        {
          v42 = *(unsigned int *)(v41 - 4);
          goto LABEL_42;
        }
LABEL_43:
        if (v41 != v37)
          WTF::HashTable<WebCore::CharacterFallbackMapKey,WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CharacterFallbackMapKey,WebCore::Font *>>,WebCore::CharacterFallbackMapKeyHash,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font *,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits>::remove(v10 + 1, v37);
LABEL_45:
        v33 += 24;
        if ((uint64_t *)v33 == v34)
          goto LABEL_54;
        v32 = *v12;
      }
LABEL_40:
      v41 = *v12;
      if (!*v12)
        goto LABEL_45;
      v42 = *(unsigned int *)(v41 - 4);
      v37 = v41 + 32 * v42;
LABEL_42:
      v41 += 32 * v42;
      if (v41 == v37)
        goto LABEL_45;
      goto LABEL_43;
    }
  }
  return result;
}

uint64_t WebCore::TrivialFontAccessor::font(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t *WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::CSSSegmentedFontFace **v5;
  WebCore::CSSSegmentedFontFace *v6;
  WTF *v7;
  void *v8;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::CSSSegmentedFontFace **)(v3 + 16);
      do
      {
        if (*((_BYTE *)v5 - 8))
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*((_DWORD *)v6 + 4) == 1)
            {
              WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v6, a2);
              WTF::fastFree(v7, v8);
            }
            else
            {
              --*((_DWORD *)v6 + 4);
            }
          }
        }
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WebCore::CSSSegmentedFontFace *WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(WebCore::CSSSegmentedFontFace *result, uint64_t *a2, unsigned __int16 *a3)
{
  WebCore::CSSSegmentedFontFace *v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  float v17;
  float v18;
  WebCore::CSSSegmentedFontFace *v19;
  int i;
  unsigned int v21;
  WebCore::CSSSegmentedFontFace *v22;
  float v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  int j;
  unsigned int v30;
  float v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  WTF *v41;
  void *v42;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (WebCore::CSSSegmentedFontFace *)WTF::HashTable<std::optional<WebCore::FontSelectionRequest>,WTF::KeyValuePair<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = ((*((unsigned __int8 *)a3 + 8) - 1640531527) ^ ((*((unsigned __int8 *)a3 + 8) - 1640531527) << 16))
     + (((*((unsigned __int8 *)a3 + 8) - 1640531527) ^ ((*((unsigned __int8 *)a3 + 8) - 1640531527) << 16)) >> 11);
  v10 = *a3;
  if (*((_BYTE *)a3 + 8))
  {
    v11 = a3[1];
    v12 = ((v9 + v10) ^ ((v9 + v10) << 16)) + (((v9 + v10) ^ ((v9 + v10) << 16)) >> 11) + v11;
    v13 = ((v12 ^ (v12 << 16)) + *((unsigned __int8 *)a3 + 6) + ((v12 ^ (v12 << 16)) >> 11)) ^ (((v12 ^ (v12 << 16)) + *((unsigned __int8 *)a3 + 6) + ((v12 ^ (v12 << 16)) >> 11)) << 16);
    v9 = v13 + (v13 >> 11);
    if (*((_BYTE *)a3 + 6))
      v9 = ((v9 + a3[2]) ^ ((v9 + a3[2]) << 16)) + (((v9 + a3[2]) ^ ((v9 + a3[2]) << 16)) >> 11);
  }
  else
  {
    LOWORD(v11) = a3[1];
  }
  v14 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
  v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  v16 = v15 ^ (v15 << 10);
  if (!v16)
    v16 = 0x800000;
  if (!*((_BYTE *)a3 + 8))
  {
    v24 = v16 & v8;
    v22 = (WebCore::CSSSegmentedFontFace *)(v6 + 24 * (v16 & v8));
    if (*((_BYTE *)v22 + 8))
    {
      v25 = 1;
      do
      {
        if ((float)((float)*(__int16 *)v22 * 0.25) == 0.0
          && (float)((float)*((__int16 *)v22 + 1) * 0.25) == 0.0
          && !*((_BYTE *)v22 + 6))
        {
          goto LABEL_47;
        }
        v24 = (v24 + v25) & v8;
        v22 = (WebCore::CSSSegmentedFontFace *)(v6 + 24 * v24);
        ++v25;
      }
      while (*((_BYTE *)v22 + 8));
    }
LABEL_30:
    if ((v7 & 1) != 0)
      v26 = 0;
    else
      v26 = *(_DWORD *)(v6 - 4);
    v27 = 0;
    v28 = v6 + 24 * v26;
    goto LABEL_68;
  }
  v17 = (float)(__int16)v10 * 0.25;
  v18 = (float)(__int16)v11 * 0.25;
  if (*((_BYTE *)a3 + 6))
  {
    v19 = 0;
    for (i = 1; ; ++i)
    {
      v21 = v16 & v8;
      v22 = (WebCore::CSSSegmentedFontFace *)(v6 + 24 * v21);
      if (*((_BYTE *)v22 + 8))
      {
        v23 = (float)*(__int16 *)v22 * 0.25;
        if (v23 == 0.0 && (float)((float)*((__int16 *)v22 + 1) * 0.25) == 0.0 && !*((_BYTE *)v22 + 6))
          goto LABEL_45;
        if (v23 == v17
          && (float)((float)*((__int16 *)v22 + 1) * 0.25) == v18
          && *((_BYTE *)v22 + 6)
          && (float)((float)*((__int16 *)v22 + 2) * 0.25) == (float)((float)(__int16)a3[2] * 0.25))
        {
          goto LABEL_30;
        }
      }
      else
      {
        v19 = (WebCore::CSSSegmentedFontFace *)(v6 + 24 * v21);
      }
      v16 = i + v21;
    }
  }
  v19 = 0;
  for (j = 1; ; ++j)
  {
    v30 = v16 & v8;
    v22 = (WebCore::CSSSegmentedFontFace *)(v6 + 24 * v30);
    if (!*((_BYTE *)v22 + 8))
    {
      v19 = (WebCore::CSSSegmentedFontFace *)(v6 + 24 * v30);
      goto LABEL_44;
    }
    v31 = (float)*(__int16 *)v22 * 0.25;
    if (v31 == 0.0 && (float)((float)*((__int16 *)v22 + 1) * 0.25) == 0.0 && !*((_BYTE *)v22 + 6))
      break;
    if (v31 == v17 && (float)((float)*((__int16 *)v22 + 1) * 0.25) == v18 && !*((_BYTE *)v22 + 6))
      goto LABEL_30;
LABEL_44:
    v16 = j + v30;
  }
LABEL_45:
  if (v19)
  {
    *(_QWORD *)v19 = 0;
    *((_WORD *)v19 + 4) = 1;
    *((_QWORD *)v19 + 2) = 0;
    --*(_DWORD *)(*a2 - 16);
    v32 = *(_QWORD *)a3;
    *((_BYTE *)v19 + 8) = *((_BYTE *)a3 + 8);
    *(_QWORD *)v19 = v32;
    *((_QWORD *)v19 + 2) = 0;
    goto LABEL_51;
  }
LABEL_47:
  result = (WebCore::CSSSegmentedFontFace *)*((_QWORD *)v22 + 2);
  v33 = *((_BYTE *)a3 + 8);
  *(_QWORD *)v22 = *(_QWORD *)a3;
  *((_BYTE *)v22 + 8) = v33;
  *((_QWORD *)v22 + 2) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
    {
      WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(result, a2);
      result = (WebCore::CSSSegmentedFontFace *)WTF::fastFree(v41, v42);
    }
    else
    {
      --*((_DWORD *)result + 4);
    }
  }
  v19 = v22;
LABEL_51:
  v34 = *a2;
  if (*a2)
    v35 = *(_DWORD *)(v34 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v34 - 12) = v35;
  v36 = *a2;
  if (*a2)
    v37 = *(_DWORD *)(v36 - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(v36 - 16) + v37);
  v39 = *(unsigned int *)(v36 - 4);
  if (v39 > 0x400)
  {
    if (v39 <= 2 * v38)
    {
LABEL_60:
      v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
      goto LABEL_63;
    }
  }
  else if (3 * v39 <= 4 * v38)
  {
    if ((_DWORD)v39)
      goto LABEL_60;
    v40 = 8;
LABEL_63:
    result = (WebCore::CSSSegmentedFontFace *)WTF::HashTable<std::optional<WebCore::FontSelectionRequest>,WTF::KeyValuePair<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits>::rehash(a2, v40, (unsigned __int16 *)v19);
    v19 = result;
    v36 = *a2;
    if (*a2)
      LODWORD(v39) = *(_DWORD *)(v36 - 4);
    else
      LODWORD(v39) = 0;
  }
  v28 = v36 + 24 * v39;
  v27 = 1;
  v22 = v19;
LABEL_68:
  *(_QWORD *)v5 = v22;
  *((_QWORD *)v5 + 1) = v28;
  *((_BYTE *)v5 + 16) = v27;
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash *this, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  void *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::CSSSegmentedFontFace **v38;
  WebCore::CSSSegmentedFontFace *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char v50;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(this, (const WTF::String *)a2);
  v12 = 0;
  v13 = 0;
  v14 = *(_QWORD *)this;
  while (1)
  {
    v15 = v10 & v9;
    v16 = v8 + 16 * (v10 & v9);
    result = *(_QWORD *)v16;
    if (*(_QWORD *)v16 == -1)
    {
      v12 = (_QWORD *)(v8 + 16 * v15);
      goto LABEL_17;
    }
    if (!result)
    {
      if (v12)
      {
        result = 0;
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v14 = *(_QWORD *)this;
        v16 = (uint64_t)v12;
      }
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)v16 = v14;
      v35 = *a4;
      *a4 = 0;
      v36 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v35;
      if (v36)
      {
        v37 = *(unsigned int *)(v36 - 4);
        if ((_DWORD)v37)
        {
          v38 = (WebCore::CSSSegmentedFontFace **)(v36 + 16);
          do
          {
            if (*((_BYTE *)v38 - 8))
            {
              v39 = *v38;
              *v38 = 0;
              if (v39)
              {
                if (*((_DWORD *)v39 + 4) == 1)
                {
                  WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v39, v11);
                  WTF::fastFree(v40, v41);
                }
                else
                {
                  --*((_DWORD *)v39 + 4);
                }
              }
            }
            v38 += 3;
            --v37;
          }
          while (v37);
        }
        result = WTF::fastFree((WTF *)(v36 - 16), v11);
      }
      v42 = *a2;
      if (*a2)
        v43 = *(_DWORD *)(v42 - 12) + 1;
      else
        v43 = 1;
      *(_DWORD *)(v42 - 12) = v43;
      v44 = *a2;
      if (*a2)
        v45 = *(_DWORD *)(v44 - 12);
      else
        v45 = 0;
      v46 = (*(_DWORD *)(v44 - 16) + v45);
      v47 = *(unsigned int *)(v44 - 4);
      if (v47 > 0x400)
      {
        if (v47 <= 2 * v46)
          goto LABEL_63;
      }
      else if (3 * v47 <= 4 * v46)
      {
        if (!(_DWORD)v47)
        {
          v48 = 8;
LABEL_65:
          result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v48, (WTF::StringImpl **)v16);
          v16 = result;
          v44 = *a2;
          if (*a2)
            v47 = *(unsigned int *)(v44 - 4);
          else
            v47 = 0;
          goto LABEL_70;
        }
LABEL_63:
        v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47));
        goto LABEL_65;
      }
LABEL_70:
      v49 = v44 + 16 * v47;
      v50 = 1;
      goto LABEL_71;
    }
    v18 = *(unsigned int *)(result + 4);
    if ((_DWORD)v18 != *(_DWORD *)(v14 + 4))
      goto LABEL_17;
    v19 = *(_DWORD *)(v14 + 16);
    v20 = *(unsigned __int8 **)(result + 8);
    v21 = *(unsigned __int8 **)(v14 + 8);
    if ((*(_BYTE *)(result + 16) & 4) != 0)
    {
      if ((v19 & 4) != 0)
      {
        if (!(_DWORD)v18)
          goto LABEL_37;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v21))
        {
          v23 = 0;
          v31 = v21 + 1;
          v32 = v20 + 1;
          while (v18 - 1 != v23)
          {
            result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[v23]);
            v11 = (void *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[v23++]);
            if ((_DWORD)result != (_DWORD)v11)
            {
LABEL_36:
              if (v23 < v18)
                goto LABEL_17;
              goto LABEL_37;
            }
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!(_DWORD)v18)
          goto LABEL_37;
        v26 = *(unsigned __int16 *)v21;
        result = (v26 - 65) < 0x1A;
        if ((v26 | (32 * (_DWORD)result)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20))
        {
          v23 = 0;
          v27 = v21 + 2;
          v28 = v20 + 1;
          while (v18 - 1 != v23)
          {
            result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v28[v23]);
            v11 = (void *)(*(unsigned __int16 *)&v27[2 * v23] | (32
                                                               * (*(unsigned __int16 *)&v27[2 * v23]
                                                                              - 65 < 0x1A)));
            ++v23;
            if ((_DWORD)v11 != (_DWORD)result)
              goto LABEL_36;
          }
          goto LABEL_37;
        }
      }
      goto LABEL_17;
    }
    if ((v19 & 4) == 0)
      break;
    if (!(_DWORD)v18)
      goto LABEL_37;
    if ((*(unsigned __int16 *)v20 | (32 * (*(unsigned __int16 *)v20 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v21))
    {
      v23 = 0;
      v29 = v21 + 1;
      v30 = v20 + 2;
      while (v18 - 1 != v23)
      {
        result = *(unsigned __int16 *)&v30[2 * v23] | (32
                                                     * (*(unsigned __int16 *)&v30[2 * v23]
                                                                    - 65 < 0x1A));
        v11 = (void *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v29[v23++]);
        if ((_DWORD)result != (_DWORD)v11)
          goto LABEL_36;
      }
      goto LABEL_37;
    }
LABEL_17:
    ++v13;
    v10 = v15 + v13;
  }
  if (!(_DWORD)v18)
    goto LABEL_37;
  v22 = *(unsigned __int16 *)v21;
  result = (v22 - 65) < 0x1A;
  if ((*(unsigned __int16 *)v20 | (32 * (*(unsigned __int16 *)v20 - 65 < 0x1A))) != (v22 | (32 * (_DWORD)result)))
    goto LABEL_17;
  v23 = 0;
  v24 = v21 + 2;
  v25 = v20 + 2;
  while (v18 - 1 != v23)
  {
    result = *(unsigned __int16 *)&v25[2 * v23] | (32
                                                 * (*(unsigned __int16 *)&v25[2 * v23] - 65 < 0x1A));
    v11 = (void *)(*(unsigned __int16 *)&v24[2 * v23] | (32
                                                       * (*(unsigned __int16 *)&v24[2 * v23]
                                                                      - 65 < 0x1A)));
    ++v23;
    if ((_DWORD)result != (_DWORD)v11)
      goto LABEL_36;
  }
LABEL_37:
  v33 = *a2;
  if (*a2)
    v34 = *(unsigned int *)(v33 - 4);
  else
    v34 = 0;
  v50 = 0;
  v49 = v33 + 16 * v34;
LABEL_71:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v49;
  *(_BYTE *)(a1 + 16) = v50;
  return result;
}

uint64_t WebCore::CachedFontLoadRequest::url(WebCore::CachedFontLoadRequest *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v1 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v1 + 160));
    *(_BYTE *)(v1 + 344) |= 1u;
  }
  return v1 + 160;
}

uint64_t WebCore::Font::invisibleFont(WebCore::Font *this)
{
  uint64_t v2;
  WebCore::Font::DerivedFonts *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  char v7;
  const void *v13;
  int v14;
  _DWORD *v15;
  int v16;
  WebCore::Font *v17;

  v2 = *((_QWORD *)this + 33);
  if (!v2)
  {
    v2 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_QWORD *)(v2 + 48) = 0;
    v3 = (WebCore::Font::DerivedFonts *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v2;
    if (v3)
    {
      WebCore::Font::DerivedFonts::~DerivedFonts(v3);
      WTF::fastFree(v4, v5);
      v2 = *((_QWORD *)this + 33);
    }
  }
  v6 = *(_QWORD *)(v2 + 48);
  if (!v6)
  {
    v7 = *((_BYTE *)this + 256);
    v6 = WTF::fastMalloc((WTF *)0x160);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 1000;
    _Q0 = vdupq_n_s32(0x7FC00000u);
    *(int32x4_t *)(v6 + 20) = _Q0;
    *(int32x4_t *)(v6 + 36) = _Q0;
    *(_QWORD *)(v6 + 52) = _Q0.i64[0];
    *(_QWORD *)(v6 + 68) = 0;
    *(_QWORD *)(v6 + 60) = 0;
    *(_DWORD *)(v6 + 76) = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(_QWORD *)(v6 + 80) = _Q0.i64[0];
    v13 = (const void *)*((_QWORD *)this + 11);
    *(_QWORD *)(v6 + 88) = v13;
    if (v13)
      CFRetain(v13);
    v14 = *((_DWORD *)this + 24);
    *(_DWORD *)(v6 + 99) = *(_DWORD *)((char *)this + 99);
    *(_DWORD *)(v6 + 96) = v14;
    v15 = (_DWORD *)*((_QWORD *)this + 13);
    if (v15)
      ++*v15;
    *(_QWORD *)(v6 + 104) = v15;
    v16 = *((_DWORD *)this + 28);
    *(_DWORD *)(v6 + 115) = *(_DWORD *)((char *)this + 115);
    *(_DWORD *)(v6 + 112) = v16;
    *(_QWORD *)(v6 + 120) = 0;
    *(_BYTE *)(v6 + 128) = 0;
    *(_QWORD *)(v6 + 200) = 0;
    *(_QWORD *)(v6 + 208) = 0;
    *(_QWORD *)(v6 + 216) = 0;
    *(_QWORD *)(v6 + 224) = 0x8000000000000000;
    *(_QWORD *)(v6 + 232) = 0;
    *(_QWORD *)(v6 + 240) = 0;
    *(_BYTE *)(v6 + 248) = 0;
    *(_BYTE *)(v6 + 256) = v7 & 1 | *(_BYTE *)(v6 + 256) & 0xF0 | 6;
    *(_QWORD *)(v6 + 264) = 0;
    *(_DWORD *)(v6 + 280) = 0;
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 296) = 0;
    *(_BYTE *)(v6 + 304) = 0;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 328) = 33686018;
    *(_DWORD *)(v6 + 340) = 0;
    *(_QWORD *)(v6 + 332) = 0;
    *(_BYTE *)(v6 + 344) = *(_BYTE *)(v6 + 344) & 0x80 | 0x20;
    WebCore::Font::platformInit((WebCore::Font *)v6);
    WebCore::Font::platformGlyphInit((WebCore::Font *)v6);
    WebCore::Font::platformCharWidthInit((WebCore::Font *)v6);
    v17 = *(WebCore::Font **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v6;
    if (v17)
    {
      WTF::RefCounted<WebCore::Font>::deref(v17);
      return *(_QWORD *)(v2 + 48);
    }
  }
  return v6;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

void WebCore::CachedFontLoadRequest::createFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  _BYTE v15[24];
  unsigned int **v16;

  v9 = *(_QWORD *)(a1 + 24);
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v14 = (unsigned int *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v16 = &v14;
  ++*(_DWORD *)(v11 + 548);
  v12 = *(_QWORD *)(v11 + 488);
  if (v12 && *(_QWORD *)(v12 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v11 + 464), (uint64_t *)&v16, (uint64_t)v15);
    v11 = *((_QWORD *)v14 + 1);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 224))(v11, a2, a3, a4, a5);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v14, v13);
}

void WebCore::Document::beginLoadingFontSoon(WebCore::Document *this, WebCore::FontLoadRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t StatusReg;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  void *v17;
  WebCore::DocumentFontLoader *v18;
  WTF *v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::CachedFont **v26;
  _BYTE v27[24];
  WebCore::CachedFont ***v28;

  if (((*(uint64_t (**)(WebCore::FontLoadRequest *))(*(_QWORD *)a2 + 72))(a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19412A254);
  }
  v4 = *((_QWORD *)a2 + 3);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    goto LABEL_30;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v5;
  v23 = *(unsigned int **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v6;
  if (!v23)
    goto LABEL_30;
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
LABEL_30:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
    v26 = (WebCore::CachedFont **)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
    v8 = 0;
    v26 = 0;
  }
  v28 = &v26;
  ++*(_DWORD *)(v8 + 548);
  v9 = *(_QWORD *)(v8 + 488);
  if (v9 && *(_QWORD *)(v9 + 8))
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), (uint64_t *)&v28, (uint64_t)v27);
  v10 = *((_QWORD *)this + 332);
  if (!v10)
  {
    v10 = WTF::fastMalloc((WTF *)0x58);
    v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    *(_QWORD *)v10 = v11;
    *(_QWORD *)(v10 + 8) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    v14 = *(unsigned int **)(StatusReg + 736);
    if (!v14)
      v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    *(_QWORD *)(v10 + 48) = v14;
    *(_QWORD *)(v10 + 8) = off_1E31F7378;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v16 = off_1E33A3B88;
    v16[1] = WebCore::DocumentFontLoader::fontLoadingTimerFired;
    v16[2] = 0;
    v16[3] = v10;
    *(_WORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 56) = v16;
    *(_QWORD *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 72) = 0;
    v18 = (WebCore::DocumentFontLoader *)*((_QWORD *)this + 332);
    *((_QWORD *)this + 332) = v10;
    if (v18)
    {
      WebCore::DocumentFontLoader::~DocumentFontLoader(v18, v17);
      WTF::fastFree(v19, v20);
      v10 = *((_QWORD *)this + 332);
    }
  }
  WebCore::DocumentFontLoader::beginLoadingFontSoon((WebCore::DocumentFontLoader *)v10, v26[1]);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v26, v21);
}

void WebCore::CSSFontFaceSource::load(WebCore::CSSFontFaceSource *this, WebCore::Document *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  JSC::ArrayBufferView *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  WebCore::CachedFont *v23;
  void *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  _DWORD *v31;
  WTF *v32;
  _DWORD *v33;
  uint64_t v34;
  WTF::Thread *v35;
  double v36;
  const WebCore::FontPlatformData *v37;
  void *v38;
  uint64_t (*v39)();
  _BOOL8 v40;
  WebCore::FontCustomPlatformData *v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF *v46;
  uint64_t *v47;
  unsigned int *v48;
  WTF::StringImpl *v49;
  void *v50;
  const void *v51;
  WTF::StringImpl *v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF *v59;
  void *v60;
  WTF::StringImpl *v61;
  void *v62;
  const void *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF *v72;
  WTF::StringImpl *v74[2];
  WTF *v75[2];
  char v76;
  _OWORD v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  _DWORD *v84;
  __int16 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  int v91;
  int v92;
  __int16 v93;
  char v94;
  WTF *v95;
  int v96;
  __int16 v97;
  char v98;
  WTF **v99;

  *((_DWORD *)this + 22) = 1;
  if (!*((_QWORD *)this + 5))
  {
    if (*((_BYTE *)this + 92))
    {
      v6 = *((_QWORD *)this + 9);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 32);
          if (v8)
          {
            if ((*(_WORD *)(v8 + 28) & 0x20) != 0
              && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::fontTag + 24))
            {
              WebCore::SVGToOTFFontConverter::SVGToOTFFontConverter((WebCore::SVGToOTFFontConverter *)v77, (const WebCore::SVGFontElement *)v8);
              if (v98 || !WebCore::SVGToOTFFontConverter::convertSVGToOTFFont((WebCore::SVGToOTFFontConverter *)v77))
              {
                WebCore::SVGToOTFFontConverter::~SVGToOTFFontConverter((WebCore::SVGToOTFFontConverter *)v77, v9);
              }
              else
              {
                v74[0] = *((WTF::StringImpl **)&v78 + 1);
                v10 = (WTF::StringImpl *)v79;
                *((_QWORD *)&v78 + 1) = 0;
                *(_QWORD *)&v79 = 0;
                v74[1] = v10;
                LOBYTE(v75[0]) = 1;
                WebCore::SVGToOTFFontConverter::~SVGToOTFFontConverter((WebCore::SVGToOTFFontConverter *)v77, v9);
                WebCore::FragmentedSharedBuffer::create(v74, (uint64_t *)v77);
                v11 = WTF::fastMalloc((WTF *)0x38);
                WebCore::SharedBuffer::SharedBuffer(v11, (uint64_t *)v77);
                WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v77, v12);
                *(_QWORD *)&v77[0] = 0;
                v14 = *((_QWORD *)this + 6);
                *((_QWORD *)this + 6) = v11;
                if (v14)
                {
                  do
                  {
                    v15 = __ldaxr((unsigned int *)v14);
                    v16 = v15 - 1;
                  }
                  while (__stlxr(v16, (unsigned int *)v14));
                  if (!v16)
                  {
                    atomic_store(1u, (unsigned int *)v14);
                    v65 = *(unsigned int *)(v14 + 20);
                    if ((_DWORD)v65)
                    {
                      v66 = *(_QWORD *)(v14 + 8);
                      v67 = v66 + 16 * v65;
                      do
                      {
                        v68 = *(unsigned int **)(v66 + 8);
                        *(_QWORD *)(v66 + 8) = 0;
                        if (v68)
                        {
                          do
                          {
                            v69 = __ldaxr(v68);
                            v70 = v69 - 1;
                          }
                          while (__stlxr(v70, v68));
                          if (!v70)
                          {
                            atomic_store(1u, v68);
                            v71 = v68[6];
                            if ((_DWORD)v71 != -1)
                              ((void (*)(WTF ***, unsigned int *))off_1E3397D28[v71])(&v99, v68 + 2);
                            v68[6] = -1;
                            WTF::fastFree((WTF *)v68, v13);
                          }
                        }
                        v66 += 16;
                      }
                      while (v66 != v67);
                    }
                    v72 = *(WTF **)(v14 + 8);
                    if ((WTF *)(v14 + 24) != v72 && v72 != 0)
                    {
                      *(_QWORD *)(v14 + 8) = 0;
                      *(_DWORD *)(v14 + 16) = 0;
                      WTF::fastFree(v72, v13);
                    }
                    WTF::fastFree((WTF *)v14, v13);
                  }
                }
                WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v77, v13);
                if (LOBYTE(v75[0]) && v74[0])
                  WTF::fastFree(v74[0], v17);
              }
              v41 = (WebCore::FontCustomPlatformData *)*((_QWORD *)this + 6);
              if (v41)
              {
                v74[0] = 0;
                WebCore::FontCustomPlatformData::create(v41, (WebCore::SharedBuffer *)v74, (uint64_t *)v77);
                v43 = (uint64_t *)*((_QWORD *)this + 10);
                *((_QWORD *)this + 10) = *(_QWORD *)&v77[0];
                if (v43)
                {
                  if (*(_DWORD *)v43 == 1)
                  {
                    v61 = (WTF::StringImpl *)v43[3];
                    v43[3] = 0;
                    if (v61)
                    {
                      if (*(_DWORD *)v61 == 2)
                        WTF::StringImpl::destroy(v61, v42);
                      else
                        *(_DWORD *)v61 -= 2;
                    }
                    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v43 + 2, v42);
                    v63 = (const void *)v43[1];
                    v43[1] = 0;
                    if (v63)
                      CFRelease(v63);
                    WTF::fastFree((WTF *)v43, v62);
                  }
                  else
                  {
                    --*(_DWORD *)v43;
                  }
                }
                v44 = v74[0];
                v74[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, v42);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                if (*((_QWORD *)this + 10))
                {
LABEL_54:
                  v45 = 2;
LABEL_71:
                  *((_DWORD *)this + 22) = v45;
                  return;
                }
              }
            }
          }
        }
      }
LABEL_70:
      v45 = 3;
      goto LABEL_71;
    }
    v18 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
    if (!v18)
    {
      v82 = 256;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      memset(v77, 0, sizeof(v77));
      v83 = 0;
      v31 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *v31 += 2;
      v84 = v31;
      v85 = 0;
      v86 = 2143289344;
      v87 = 0;
      v88 = 0;
      v89 = 26216000;
      v90 = 257;
      v92 = 57344;
      v32 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = 0x100000001;
      *((_QWORD *)v32 + 1) = 0;
      v95 = v32;
      v96 = 0;
      v97 = 0;
      v33 = (_DWORD *)*((_QWORD *)this + 2);
      if (v33)
        *v33 += 2;
      *((_QWORD *)v32 + 1) = v33;
      v91 = 1065353216;
      v94 = *(_BYTE *)(*((_QWORD *)this + 3) + 144);
      v93 = 0;
      v34 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v34 || (v32 = *(WTF **)(v34 + 96)) == 0)
        v32 = (WTF *)WebCore::threadGlobalDataSlow(v32);
      v35 = (WTF::Thread *)*((_QWORD *)v32 + 10);
      if (!v35)
      {
        v64 = v32;
        v32 = (WTF *)WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v32);
        v35 = (WTF::Thread *)*((_QWORD *)v64 + 10);
      }
      *(_OWORD *)v74 = 0u;
      *(_OWORD *)v75 = 0u;
      if ((*((_QWORD *)v35 + 4) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*((_QWORD *)v35 + 4) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *((_QWORD *)v35 + 3) = 0;
        WTF::MonotonicTime::now(v32);
        WebCore::TimerBase::setNextFireTime((uint64_t)v35, v36 + 0.0);
      }
      v37 = (const WebCore::FontPlatformData *)WebCore::FontCache::cachedFontPlatformData(v35, (WTF::StringImpl *)v77, (WebCore::FontPlatformData **)this + 2, (__int128 *)v74, 1);
      if (v37)
      {
        WebCore::FontCache::fontForPlatformData(v35, v37, &v99);
        v39 = WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::unspecifiedBoolTypeInstance;
        if (!v99)
          v39 = 0;
        v40 = v39 != 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 1)
          {
            WebCore::Font::~Font(v99);
            WTF::fastFree(v59, v60);
          }
          else
          {
            --*(_DWORD *)v99;
          }
        }
      }
      else
      {
        v40 = 0;
      }
      v46 = v75[1];
      v75[1] = 0;
      if (v46)
        WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)v46, v38);
      if (a2 && (*(_QWORD *)(*((_QWORD *)a2 + 85) + 704) & 0x4000) != 0)
      {
        {
          WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
        }
        if (WebCore::sharedObserver(void)::observer)
          v47 = (uint64_t *)WebCore::sharedObserver(void)::observer;
        else
          v47 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
        (*(void (**)(uint64_t *, WebCore::Document *, char *, _BOOL8))(*v47 + 40))(v47, a2, (char *)this + 16, v40);
      }
      v48 = (unsigned int *)v95;
      v95 = 0;
      if (v48)
      {
        if (*v48 == 1)
        {
          v55 = v48[1];
          if ((_DWORD)v55)
          {
            v56 = (WTF::StringImpl **)(v48 + 2);
            v57 = 8 * v55;
            do
            {
              v58 = *v56;
              *v56 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v58 -= 2;
              }
              ++v56;
              v57 -= 8;
            }
            while (v57);
          }
          WTF::fastFree((WTF *)v48, v38);
        }
        else
        {
          --*v48;
        }
      }
      WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v77, (WTF::StringImpl *)v38);
      if (v40)
        goto LABEL_54;
      goto LABEL_70;
    }
    v19 = (WTF *)JSC::ArrayBufferView::span(v18);
    v21 = v20;
    v22 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = v22 + 24;
    *(_QWORD *)(v22 + 16) = 1;
    *(_BYTE *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v22, v19, v21);
    *(_QWORD *)&v77[0] = v22;
    v23 = (WebCore::CachedFont *)WTF::fastMalloc((WTF *)0x38);
    v74[0] = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer((uint64_t)v23, (uint64_t *)v77);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v77, v24);
    v99 = 0;
    WebCore::CachedFont::createCustomFontData(v23, (WebCore::SharedBuffer *)&v99, (const WTF::String *)&v76, (uint64_t *)v77);
    v26 = *(_QWORD *)&v77[0];
    *(_QWORD *)&v77[0] = 0;
    v27 = (uint64_t *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v26;
    if (v27)
    {
      v28 = *(_DWORD *)v27 - 1;
      if (*(_DWORD *)v27 != 1)
      {
LABEL_22:
        *(_DWORD *)v27 = v28;
        goto LABEL_23;
      }
      v49 = (WTF::StringImpl *)v27[3];
      v27[3] = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v25);
        else
          *(_DWORD *)v49 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v27 + 2, v25);
      v51 = (const void *)v27[1];
      v27[1] = 0;
      if (v51)
        CFRelease(v51);
      WTF::fastFree((WTF *)v27, v50);
      v27 = *(uint64_t **)&v77[0];
      *(_QWORD *)&v77[0] = 0;
      if (v27)
      {
        v28 = *(_DWORD *)v27 - 1;
        if (*(_DWORD *)v27 != 1)
          goto LABEL_22;
        v52 = (WTF::StringImpl *)v27[3];
        v27[3] = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v25);
          else
            *(_DWORD *)v52 -= 2;
        }
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v27 + 2, v25);
        v54 = (const void *)v27[1];
        v27[1] = 0;
        if (v54)
          CFRelease(v54);
        WTF::fastFree((WTF *)v27, v53);
      }
    }
LABEL_23:
    v29 = (WTF::StringImpl *)v99;
    v99 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v25);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = *((_QWORD *)this + 8);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v74, v25);
    if (v30)
      goto LABEL_54;
    goto LABEL_70;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 80);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 328))(v5 - 96);
  }
}

void WebCore::ViewportConfiguration::initialScaleFromSize(WebCore::ViewportConfiguration *this, double a2, double a3, char a4)
{
  double v7;
  int v8;
  int v9;
  double v10;
  BOOL v11;
  double v12;
  BOOL v13;
  float v14;
  double v15;
  float v16;
  double v17;
  float v18;
  double v19;

  v7 = *((double *)this + 25);
  if (v7 == 1.0)
  {
    if (*((_BYTE *)this + 53) && (a4 & 1) == 0)
      return;
  }
  else if (*((_BYTE *)this + 53) || *(double *)this > 0.0)
  {
    return;
  }
  v8 = *((unsigned __int8 *)this + 232);
  if (!*((_BYTE *)this + 232)
    || !*((_BYTE *)this + 49)
    || *((float *)this + 38) != -3.0
    || ((v9 = WebCore::ViewportConfiguration::layoutHeight(this), v10 = 0.0, *((float *)this + 35) == -1.0)
      ? (v11 = *((_DWORD *)this + 29) <= v9)
      : (v11 = 1),
        v11))
  {
    if (a2 > 1920.0
      && *((_BYTE *)this + 51)
      && ((v12 = *(double *)this, *(double *)this > 0.0) ? (v13 = v12 < a2) : (v13 = 0), v13))
    {
      v10 = *((float *)this + 32) / v12;
    }
    else if (!v8 || *((double *)this + 28) == 0.0)
    {
      v10 = 0.0;
      if (a2 > 0.0)
      {
        v16 = *((float *)this + 32);
        if (*((_BYTE *)this + 235))
        {
          v17 = 820.0;
          if (a2 <= 820.0)
            v17 = a2;
          v18 = v17;
          if (v16 < v18)
            v16 = v18;
        }
        v10 = v16 / a2;
      }
    }
    else
    {
      v14 = *((float *)this + 32);
      if (v14 == 0.0 || (v15 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v15 == 0.0))
      {
        v10 = v7;
      }
      else
      {
        if (v15 < v14)
          v15 = v14;
        v10 = v7 * v14 / v15;
      }
    }
  }
  if (a3 > 0.0)
  {
    v19 = *((float *)this + 33);
    if (v10 * a3 < v19)
    {
      if (v8)
      {
        if (*((_BYTE *)this + 49))
          WebCore::ViewportConfiguration::layoutWidth(this);
      }
    }
  }
}

double WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle(uint64_t **a1, const WebCore::RenderStyle **a2)
{
  const WebCore::RenderStyle *v3;
  const WebCore::RenderStyle *v4;
  const WebCore::RenderStyle *v5;
  WebCore::RenderStyle *v6;
  WTF *v7;
  double result;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  WebCore::RenderStyle *v13;
  const WebCore::RenderStyle *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::KeyframeEffect *v17;

  v3 = *a2;
  if (!*a1 || (v4 = (const WebCore::RenderStyle *)a1[1], v4 == v3))
  {
    *a2 = 0;
    v13 = (WebCore::RenderStyle *)a1[1];
    a1[1] = (uint64_t *)v3;
    if (v13)
    {
      WebCore::RenderStyle::~RenderStyle(v13, a2);
      if (!*(_DWORD *)v12)
        goto LABEL_10;
      result = 0.0;
      *((_OWORD *)v12 + 2) = 0u;
      *((_OWORD *)v12 + 3) = 0u;
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
    }
  }
  else
  {
    a1[1] = 0;
    v5 = *a2;
    *a2 = 0;
    v6 = (WebCore::RenderStyle *)a1[1];
    a1[1] = (uint64_t *)v5;
    if (v6)
    {
      WebCore::RenderStyle::~RenderStyle(v6, a2);
      if (*(_DWORD *)v7)
      {
        result = 0.0;
        *((_OWORD *)v7 + 2) = 0u;
        *((_OWORD *)v7 + 3) = 0u;
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v7, a2);
      }
    }
    v9 = *a1;
    v10 = *((unsigned int *)*a1 + 3);
    if ((_DWORD)v10)
    {
      v14 = (const WebCore::RenderStyle *)a1[1];
      v15 = *v9;
      v16 = 8 * v10;
      do
      {
        if (*(_QWORD *)v15)
          v17 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v15 + 8);
        else
          v17 = 0;
        WebCore::KeyframeEffect::lastStyleChangeEventStyleDidChange(v17, v4, v14);
        v15 += 8;
        v16 -= 8;
      }
      while (v16);
    }
    if (v4)
    {
      WebCore::RenderStyle::~RenderStyle(v4, a2);
      if (!*(_DWORD *)v4)
      {
        v12 = v4;
LABEL_10:
        WTF::fastFree(v12, v11);
        return result;
      }
      result = 0.0;
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
    }
  }
  return result;
}

void WebCore::RenderTreeUpdater::updateElementRenderer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::RenderObject *v3;
  char v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int isVisuallyHidden;
  uint64_t v23;
  WebCore::RenderElement *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t StatusReg;
  unsigned int *v33;
  unsigned int v34;
  WebCore::ContentChangeObserver *v35;
  WTF *v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  void *v52;
  const WTF::StringImpl *v53;
  uint64_t v54;
  WebCore::RenderElement *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v60;
  BOOL v61;
  uint64_t v62;
  _BYTE *v63;
  const WebCore::Node *v64;
  int isConsideredVisible;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WebCore::RenderStyle *v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _WORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t SiblingRenderer;
  void *v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  const WebCore::Element *v99;
  void *v101;
  WebCore::RenderElement *v102;
  WebCore::RenderTable *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  unint64_t v115;
  int v116;
  BOOL v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  char v125;
  uint64_t **v126;
  uint64_t *v127;
  WebCore::RenderStyle *v128;
  WTF *v129;
  uint64_t v130;
  int v131;
  int v132;
  unsigned int v134;
  unint64_t v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  WebCore::RenderStyle *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  unsigned __int8 v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  BOOL v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  WebCore::Element *v177;
  int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  int v182;
  void *v183;
  uint64_t v184;
  WebCore::ResizeObserver *v185;
  bmalloc::api *v186;
  void *v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD *v191;
  uint64_t v192;
  _DWORD *v193;
  void *v194;
  uint64_t v195;
  uint64_t i;
  unsigned int *v197;
  unsigned int v198;
  unsigned int v199;
  WebCore::FontCascadeFonts *v200;
  int v201;
  int v202;
  unsigned int *v203;
  unsigned int *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  int v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  unsigned __int16 *v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  WTF::StringImpl **v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  const WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  char v230;
  char v231;
  WebCore::RenderStyle *v232;
  WTF *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  WebCore::RenderStyle *v241;
  WTF *v242;
  WTF *v243;
  void *v244;
  WTF *v245;
  void *v246;
  WebCore::RenderTreeBuilder *v247;
  uint64_t v248;
  WebCore::RenderObject *v249;
  uint64_t v250;
  WebCore::RenderTable *v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t *v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  BOOL v260;
  uint64_t v261;
  WebCore::AXObjectCache **v262;
  WebCore::AXObjectCache *v263;
  uint64_t v264;
  WebCore::AXObjectCache *v265;
  WebCore::RenderObject *v266;
  uint64_t v267;
  uint64_t v268;
  WebCore::SVGTextLayoutAttributes **v269;
  BOOL v270;
  WTF *v271;
  uint64_t v272;
  WebCore::RenderObject *v273;
  WebCore::RenderObject *v274;
  WebCore::RenderObject *v275;
  uint64_t v276;
  WTF *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  char *v281;
  char *v282;
  WebCore::RenderMultiColumnFlow *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  char *v287;
  unint64_t v288;
  uint64_t v289;
  WTF **v290;
  WTF *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  WTF *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v300;
  char *v301;
  WebCore::FontCascadeFonts *v302;
  char v303;
  uint64_t v304;
  int v305;
  int v306;
  uint64_t v307;
  char v308[8];
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t (*v316)(uint64_t, void *);
  WTF::StringImpl *v317;
  uint64_t v318;
  _DWORD *v319;
  _DWORD *v320;
  uint64_t v321;
  uint64_t v322;
  _DWORD *v323;
  WebCore::RenderStyle *v324[4];
  BOOL v325;
  BOOL v326;
  WebCore::RenderStyle *v327[3];
  unint64_t v328;
  uint64_t v329;

  if (!*(_QWORD *)a3)
    return;
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 3016);
  if (!v9)
  {
    v9 = WTF::fastMalloc((WTF *)0xA0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = v8;
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v31 = off_1E3403718;
    v31[1] = v9;
    *(_QWORD *)(v9 + 16) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    v33 = *(unsigned int **)(StatusReg + 736);
    if (!v33)
      v33 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    *(_QWORD *)(v9 + 16) = off_1E31F7378;
    *(_QWORD *)(v9 + 56) = v33;
    *(_QWORD *)(v9 + 64) = v31;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_DWORD *)(v9 + 120) = 0;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 144) = 0u;
    v35 = *(WebCore::ContentChangeObserver **)(v8 + 3016);
    *(_QWORD *)(v8 + 3016) = v9;
    if (v35)
    {
      WebCore::ContentChangeObserver::~ContentChangeObserver(v35, (void *)a2);
      WTF::fastFree(v36, v37);
      v9 = *(_QWORD *)(v8 + 3016);
    }
  }
  v10 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
  if (v10 && (*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19412C03CLL);
  }
  if (!*(_BYTE *)(v9 + 152)
    && !*(_BYTE *)(v9 + 158)
    && !*(_BYTE *)(v9 + 157)
    && !*(_BYTE *)(v9 + 156)
    && !*(_BYTE *)(v9 + 154)
    && ((*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    goto LABEL_40;
  }
  ++*(_DWORD *)(v9 + 112);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v13 = *(_QWORD *)(v9 + 104);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 - 8);
        v15 = (v12 + ~(v11 << 32)) ^ ((unint64_t)(v12 + ~(v11 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        v20 = *(_QWORD *)(v13 + 8 * v18);
        if (v20)
        {
          while (v20 == -1 || v20 != v12)
          {
            v18 = (v18 + v19++) & v14;
            v20 = *(_QWORD *)(v13 + 8 * v18);
            if (!v20)
              goto LABEL_15;
          }
LABEL_40:
          isVisuallyHidden = 0;
          v23 = 1;
          goto LABEL_16;
        }
      }
    }
  }
LABEL_15:
  isVisuallyHidden = WebCore::ContentChangeObserver::isVisuallyHidden((WebCore::ContentChangeObserver *)a2, (const WebCore::Node *)a2);
  v23 = 0;
LABEL_16:
  WebCore::RenderStyle::cloneIncludingPseudoElements(*(WebCore::RenderStyle **)a3, (const WebCore::RenderStyle *)a2, (uint64_t)v308);
  v25 = *(unsigned __int8 *)(a3 + 8);
  if ((*(_BYTE *)(a2 + 23) & 0x20) != 0 && v25 == 3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 239) & 0x18) == 0)
      goto LABEL_19;
    v28 = *(_QWORD *)(a2 + 64);
  }
  else
  {
    if (v25 != 5)
      goto LABEL_19;
    v28 = *(_QWORD *)(a2 + 64);
    if ((v28 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v28 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19412C0DCLL);
      }
    }
    else
    {
      if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_19;
      v139 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (!v139 || (*(_QWORD *)(v139 + 16) & 0x1FLL) != 0x12)
        goto LABEL_19;
    }
  }
  v29 = v28 & 0xFFFFFFFFFFFFLL;
  if (v29)
  {
    if ((*(_BYTE *)(v29 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19412C0FCLL);
    }
  }
  else
  {
    v140 = *(unsigned int *)(a1 + 28);
    v141 = 72 * v140;
    while (1)
    {
      v142 = v141 - 72;
      if (!v141)
        break;
      v143 = *(_QWORD *)(a1 + 16);
      v144 = *(unsigned __int8 *)(v143 + v141 - 32);
      v141 -= 72;
      if (v144)
      {
        v145 = v143 + v142;
        goto LABEL_233;
      }
    }
    if (!(_DWORD)v140)
    {
      __break(0xC471u);
      goto LABEL_586;
    }
    v145 = *(_QWORD *)(a1 + 16) + 72 * v140 - 72;
LABEL_233:
    if (!*(_BYTE *)(v145 + 40))
      goto LABEL_586;
    *(_BYTE *)(v145 + 32) = 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 32) + 148) & 2) != 0
    || (*(_QWORD *)(*(_QWORD *)a3 + 16) & 0x1FLL) != 0x1A)
  {
    v30 = 2;
  }
  else
  {
    v30 = 3;
  }
  WebCore::RenderTreeUpdater::tearDownRenderers(a2, v30);
  v119 = *(unsigned int *)(a1 + 28);
  v120 = 72 * v119;
  while (1)
  {
    v121 = v120 - 72;
    if (!v120)
      break;
    v122 = *(_QWORD *)(a1 + 16);
    v123 = *(unsigned __int8 *)(v122 + v120 - 32);
    v120 -= 72;
    if (v123)
    {
      v124 = v122 + v121;
      goto LABEL_182;
    }
  }
  if (!(_DWORD)v119)
  {
    __break(0xC471u);
    JUMPOUT(0x19412CB10);
  }
  v124 = *(_QWORD *)(a1 + 16) + 72 * v119 - 72;
LABEL_182:
  *(_BYTE *)(v124 + 48) = 1;
LABEL_19:
  v307 = v10;
  v26 = *(_QWORD *)(*(_QWORD *)a3 + 16) & 0x1FLL;
  if ((_DWORD)v26 == 18)
  {
    v27 = 0;
  }
  else
  {
    if ((_DWORD)v26 != 26)
    {
      if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v128 = *(WebCore::RenderStyle **)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
        *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38) = 0;
        if (v128)
        {
          WebCore::RenderStyle::~RenderStyle(v128, v24);
          if (*(_DWORD *)v129)
          {
            *((_OWORD *)v129 + 2) = 0u;
            *((_OWORD *)v129 + 3) = 0u;
            *(_OWORD *)v129 = 0u;
            *((_OWORD *)v129 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v129, v24);
          }
        }
      }
      v69 = ((HIDWORD(v313) >> 13) & 6) - 2;
      v70 = *(_QWORD *)(v309 + 40);
      v71 = *(unsigned int *)(v70 + 636) | ((unint64_t)(*(unsigned __int16 *)(v70 + 640) | (*(unsigned __int8 *)(v70 + 642) << 16)) << 32);
      if (v69 >= 4)
        v72 = 0x200000000000;
      else
        v72 = 0x800000000000;
      if ((v72 & v71) == 0 && (*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        *(_DWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x90) = -64;
        v71 = *(unsigned int *)(v70 + 636) | ((unint64_t)(*(unsigned __int16 *)(v70 + 640) | (*(unsigned __int8 *)(v70 + 642) << 16)) << 32);
      }
      if (v69 >= 4)
        v73 = 0x800000000000;
      else
        v73 = 0x200000000000;
      if ((v71 & v73) != 0 || (v43 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      {
        LOBYTE(v10) = 0;
        goto LABEL_58;
      }
      LOBYTE(v10) = 0;
LABEL_191:
      *(_DWORD *)(v43 + 148) = -64;
      goto LABEL_58;
    }
    v27 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 512))(a2, v308) ^ 1;
  }
  if ((_DWORD)v26 == 18)
    LODWORD(v10) = 1;
  else
    LODWORD(v10) = v27;
  if ((_DWORD)v10 == 1)
  {
    v234 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v234 = 0;
    v235 = v309;
    v309 = 0;
    *(_QWORD *)(v234 + 8) = v235;
    *(_QWORD *)(v234 + 16) = v310;
    v236 = v311;
    v311 = 0;
    *(_QWORD *)(v234 + 24) = v236;
    v237 = v312;
    v312 = 0;
    *(_QWORD *)(v234 + 32) = v237;
    *(_QWORD *)(v234 + 40) = v313;
    v238 = v314;
    v314 = 0;
    *(_QWORD *)(v234 + 48) = v238;
    v239 = v315;
    v315 = 0;
    *(_QWORD *)(v234 + 56) = v239;
    v240 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v240)
    {
      WebCore::Node::materializeRareData((WebCore::Node *)a2);
      v240 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL;
    }
    v241 = *(WebCore::RenderStyle **)(v240 + 56);
    *(_QWORD *)(v240 + 56) = v234;
    if (v241)
    {
      WebCore::RenderStyle::~RenderStyle(v241, v24);
      if (*(_DWORD *)v242)
      {
        *((_OWORD *)v242 + 2) = 0u;
        *((_OWORD *)v242 + 3) = 0u;
        *(_OWORD *)v242 = 0u;
        *((_OWORD *)v242 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v242, v24);
      }
    }
    goto LABEL_58;
  }
  if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v74 = *(WebCore::RenderStyle **)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
    *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38) = 0;
    if (v74)
    {
      WebCore::RenderStyle::~RenderStyle(v74, v24);
      if (*(_DWORD *)v75)
      {
        *((_OWORD *)v75 + 2) = 0u;
        *((_OWORD *)v75 + 3) = 0u;
        *(_OWORD *)v75 = 0u;
        *((_OWORD *)v75 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v75, v24);
      }
    }
  }
  v38 = ((HIDWORD(v313) >> 13) & 6) - 2;
  v39 = *(_QWORD *)(v309 + 40);
  v40 = *(unsigned int *)(v39 + 636) | ((unint64_t)(*(unsigned __int16 *)(v39 + 640) | (*(unsigned __int8 *)(v39 + 642) << 16)) << 32);
  if (v38 >= 4)
    v41 = 0x200000000000;
  else
    v41 = 0x800000000000;
  if ((v41 & v40) == 0 && (*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    *(_DWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x90) = -64;
    v40 = *(unsigned int *)(v39 + 636) | ((unint64_t)(*(unsigned __int16 *)(v39 + 640) | (*(unsigned __int8 *)(v39 + 642) << 16)) << 32);
  }
  if (v38 >= 4)
    v42 = 0x800000000000;
  else
    v42 = 0x200000000000;
  if ((v40 & v42) == 0)
  {
    v43 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL;
    if (v43)
      goto LABEL_191;
  }
LABEL_58:
  v44 = *(_QWORD *)(a2 + 64);
  v8 = v44 & 0xFFFFFFFFFFFFLL;
  if ((v44 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v45 = *(_BYTE *)((v44 & 0xFFFFFFFFFFFFLL) + 0x2D);
    if ((v45 & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19412C05CLL);
    }
    goto LABEL_60;
  }
  if ((v10 & 1) != 0)
    goto LABEL_89;
  if ((*(_BYTE *)(a2 + 23) & 0x20) != 0
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)WebCore::RenderTreeUpdater::renderTreePosition(a1) + 104) + 239) & 0x18) != 0)
  {
    v8 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v8)
    {
LABEL_268:
      v166 = *(_QWORD *)(*(_QWORD *)a1 + 3456);
      if (!v166)
        goto LABEL_89;
      ++*(_DWORD *)v166;
      if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v167 = *(unsigned int **)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x88);
        if (v167)
        {
          v168 = v167[3];
          if ((_DWORD)v168)
          {
            v169 = 0;
            v170 = (_QWORD *)(*(_QWORD *)v167 + 8);
            v171 = 1;
            while (1)
            {
              v172 = *(v170 - 1);
              if (v172)
              {
                if (*(_QWORD *)(v172 + 8) == v166)
                  break;
              }
              v171 = ++v169 < v168;
              ++v170;
              if (v168 == v169)
                goto LABEL_290;
            }
            *(v170 - 1) = 0;
            do
            {
              v173 = __ldaxr((unsigned int *)v172);
              v174 = v173 - 1;
            }
            while (__stlxr(v174, (unsigned int *)v172));
            if (!v174)
            {
              atomic_store(1u, (unsigned int *)v172);
              WTF::fastFree((WTF *)v172, v24);
            }
            v175 = v167[3];
            v176 = *(_QWORD *)v167 + 8 * v175;
            while (v170 != (_QWORD *)v176)
            {
              *(v170 - 1) = *v170;
              *v170++ = 0;
            }
            v167[3] = v175 - 1;
            if (v171)
              WebCore::ResizeObserver::removeObservation((WebCore::ResizeObserver *)v166, (const WebCore::Element *)a2);
          }
        }
      }
      goto LABEL_290;
    }
    v45 = *(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D);
LABEL_60:
    if ((v45 & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19412C07CLL);
    }
    if (*(_BYTE *)(a3 + 9))
    {
      LODWORD(v316) = 0;
      v188 = *(WTF::StringImpl **)(v8 + 88);
      ++*(_DWORD *)v188;
      v189 = *(_QWORD *)(v8 + 96);
      v190 = *(_DWORD **)(v8 + 104);
      v317 = v188;
      v318 = v189;
      ++*v190;
      v319 = v190;
      v191 = *(_DWORD **)(v8 + 112);
      ++*v191;
      v192 = *(_QWORD *)(v8 + 120);
      v320 = v191;
      v321 = v192;
      v322 = 0;
      v193 = *(_DWORD **)(v8 + 136);
      ++*v193;
      v323 = v193;
      WebCore::RenderElement::setStyle(v8, v308, 1);
      WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange((WebCore::RenderTreeBuilder *)(a1 + 48), (WebCore::RenderElement *)v8, (WebCore::RenderStyle *)&v316);
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v316, v194);
LABEL_88:
      if ((v10 & 1) != 0)
        goto LABEL_89;
LABEL_266:
      v165 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v165
        || (*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0
        || ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 40) + 642) << 16)) << 32)) & 0xA00000000000) == 0)
      {
        goto LABEL_268;
      }
      if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 1) != 0)
      {
        v177 = 0;
      }
      else
      {
        v177 = *(WebCore::Element **)(*(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8);
        if (v177 && (*((_WORD *)v177 + 14) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19412C16CLL);
        }
      }
      v178 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 40) + 636) >> 18) & 3;
      if (v178)
      {
        v270 = (*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1F) != 0xD
            && (*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1Eu) - 14 > 0xFFFFFFF5;
        if (!v270
          && (v178 == 2 || v177 && !WebCore::Element::isRelevantToUser(v177))
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v165 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
        {
          goto LABEL_268;
        }
      }
      v179 = *(_QWORD *)a1;
      v166 = *(_QWORD *)(*(_QWORD *)a1 + 3456);
      if (v166)
      {
LABEL_289:
        ++*(_DWORD *)v166;
        WebCore::ResizeObserver::observeInternal((unsigned int *)v166, (WebCore::Element *)a2, 1);
LABEL_290:
        if (*(_DWORD *)v166 == 1)
        {
          WebCore::ResizeObserver::~ResizeObserver((WebCore::ResizeObserver *)v166, v24);
          bmalloc::api::isoDeallocate(v186, v187);
        }
        else
        {
          --*(_DWORD *)v166;
        }
        goto LABEL_89;
      }
      v166 = bmalloc::api::isoAllocate();
      v316 = WebCore::CallbackForContainIntrinsicSize;
      LODWORD(v317) = 1;
      *(_DWORD *)v166 = 1;
      *(_QWORD *)(v166 + 8) = 0;
      v180 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v179);
      if (v180)
      {
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 + 1, v180));
        v182 = (int)v317;
        *(_BYTE *)(v166 + 24) = 0;
        v183 = (void *)(v166 + 24);
        *(_QWORD *)(v166 + 16) = v180;
        *(_DWORD *)(v166 + 32) = -1;
        if (v182 == -1)
        {
          *(_BYTE *)(v166 + 104) = 0;
          *(_OWORD *)(v166 + 88) = 0u;
          *(_OWORD *)(v166 + 72) = 0u;
          *(_OWORD *)(v166 + 56) = 0u;
          *(_OWORD *)(v166 + 40) = 0u;
          goto LABEL_297;
        }
      }
      else
      {
        *(_BYTE *)(v166 + 24) = 0;
        *(_QWORD *)(v166 + 16) = 0;
        *(_DWORD *)(v166 + 32) = -1;
        v182 = 1;
      }
      ((void (*)(WebCore::RenderStyle **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSA_ISH_EENSC_ISH_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERNS8_14ResizeObserverEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JS10_SZ_EEEDcmS12_DpOT0____fdiagonal[v182])(v324);
      *(_DWORD *)(v166 + 32) = v182;
      v184 = v317;
      *(_OWORD *)(v166 + 40) = 0u;
      *(_OWORD *)(v166 + 56) = 0u;
      *(_OWORD *)(v166 + 72) = 0u;
      *(_OWORD *)(v166 + 88) = 0u;
      *(_BYTE *)(v166 + 104) = 0;
      if ((_DWORD)v184 != -1)
        ((void (*)(WebCore::RenderStyle **, uint64_t (**)(uint64_t, void *)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSA_ISH_EENSC_ISH_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERNS8_14ResizeObserverEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSW_EEEDcOSX_DpOT0____fmatrix[v184])(v324, &v316);
LABEL_297:
      v185 = *(WebCore::ResizeObserver **)(v179 + 3456);
      *(_QWORD *)(v179 + 3456) = v166;
      if (v185)
      {
        WTF::RefCounted<WebCore::ResizeObserver>::deref(v185, v183);
        v166 = *(_QWORD *)(v179 + 3456);
        if (!v166)
        {
          WebCore::ResizeObserver::observeInternal(0, (WebCore::Element *)a2, 1);
          goto LABEL_89;
        }
      }
      goto LABEL_289;
    }
    v4 = v23;
    if (!*(_BYTE *)(a3 + 8))
    {
      v221 = *(_QWORD *)(v8 + 128);
      if (v221)
      {
        v222 = *(unsigned int *)(v221 + 12);
        if ((_DWORD)v222)
        {
          v223 = *(uint64_t **)v221;
          v224 = 8 * v222;
          v225 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
          while (1)
          {
            LODWORD(v316) = (*(_QWORD *)(*v223 + 16) >> 43) & 0x1F;
            v226 = *v225;
            if (*v225)
              *(_DWORD *)v226 += 2;
            v317 = v226;
            LOBYTE(v318) = 0;
            LOBYTE(v320) = 0;
            WebCore::RenderElement::getUncachedPseudoStyle(v8, (int *)&v316, (uint64_t)v308, (uint64_t)v308, v324);
            v229 = v317;
            v317 = 0;
            if (v229)
            {
              if (*(_DWORD *)v229 == 2)
                WTF::StringImpl::destroy(v229, v227);
              else
                *(_DWORD *)v229 -= 2;
            }
            if (!v324[0])
              break;
            WebCore::RenderStyle::operator==((uint64_t)v324[0], *v223, v228);
            v231 = v230;
            v232 = v324[0];
            v324[0] = 0;
            if ((v231 & 1) == 0)
            {
              v327[0] = v232;
              WebCore::RenderStyle::addCachedPseudoStyle((uint64_t)v308, (uint64_t *)v327);
              std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](v327, v258);
              break;
            }
            if (v232)
            {
              WebCore::RenderStyle::~RenderStyle(v232, v24);
              if (*(_DWORD *)v233)
              {
                *((_OWORD *)v233 + 2) = 0u;
                *((_OWORD *)v233 + 3) = 0u;
                *(_OWORD *)v233 = 0u;
                *((_OWORD *)v233 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v233, v24);
              }
            }
            ++v223;
            v224 -= 8;
            if (!v224)
              goto LABEL_87;
          }
          std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](v324, v227);
          WebCore::RenderTreeUpdater::updateRendererStyle(a1, (WebCore::RenderElement *)v8, (uint64_t)v308);
        }
      }
      goto LABEL_87;
    }
    LODWORD(v316) = 0;
    v46 = *(WTF::StringImpl **)(v8 + 88);
    ++*(_DWORD *)v46;
    v47 = *(_QWORD *)(v8 + 96);
    v48 = *(_DWORD **)(v8 + 104);
    v317 = v46;
    v318 = v47;
    ++*v48;
    v319 = v48;
    v49 = *(_DWORD **)(v8 + 112);
    ++*v49;
    v50 = *(_QWORD *)(v8 + 120);
    v320 = v49;
    v321 = v50;
    v322 = 0;
    v51 = *(_DWORD **)(v8 + 136);
    ++*v51;
    v323 = v51;
    WebCore::RenderElement::setStyle(v8, v308, 0);
    v54 = *(_QWORD *)(v8 + 32);
    if (!v54 || (v55 = *(WebCore::RenderElement **)(v54 + 8)) == 0)
    {
LABEL_86:
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v316, v52);
LABEL_87:
      LOBYTE(v23) = v4;
      goto LABEL_88;
    }
    v56 = v318 & 0x180000;
    v326 = (v318 & 0x180000) == 0x100000;
    v57 = *(_QWORD *)(v8 + 96) & 0xE000000;
    v58 = *(_QWORD *)(v8 + 96) & 0x180000;
    v325 = v58 == 0x100000;
    v324[0] = (WebCore::RenderStyle *)v8;
    v324[1] = (WebCore::RenderStyle *)&v326;
    v324[2] = (WebCore::RenderStyle *)&v325;
    v324[3] = (WebCore::RenderStyle *)(a1 + 48);
    if ((*((_BYTE *)v55 + 45) & 0x40) != 0)
    {
      v60 = (v318 & 0xE000000) == 0 && v57 || v56 != 0x100000 && v58 == 0x100000;
      if ((*((_BYTE *)v55 + 45) & 0x20) != 0)
        goto LABEL_76;
    }
    else
    {
      v60 = 0;
      if ((*((_BYTE *)v55 + 45) & 0x20) != 0)
        goto LABEL_76;
    }
    if ((*((_BYTE *)v55 + 52) & 7) != 1)
    {
LABEL_82:
      if (v60)
      {
        WebCore::RenderTreeBuilder::removeAnonymousWrappersForInlineChildrenIfNeeded(a1 + 48, v55);
        if (v57)
        {
          if ((*(_BYTE *)(v8 + 52) & 7) == 1)
          {
            WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange(WebCore::RenderElement &,WebCore::RenderStyle &)::$_1::operator()(v8);
            WebCore::RenderTreeBuilder::removeFloatingObjects(v247, (WebCore::RenderBlock *)v8);
            v248 = *(unsigned int *)(v8 + 40);
            if (v248 | ((unint64_t)*(unsigned __int8 *)(v8 + 44) << 32))
            {
              v249 = *(WebCore::RenderObject **)((v248 | ((unint64_t)*(unsigned __int8 *)(v8 + 44) << 32)) + 8);
              if (v249)
              {
                if (WebCore::RenderObject::isAnonymousBlock(v249))
                {
                  if ((*((_BYTE *)v55 + 45) & 8) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19412CAB0);
                  }
                  v250 = *(unsigned int *)(v8 + 40);
                  if (v250 | ((unint64_t)*(unsigned __int8 *)(v8 + 44) << 32))
                    v251 = *(WebCore::RenderTable **)((v250 | ((unint64_t)*(unsigned __int8 *)(v8 + 44) << 32))
                                                    + 8);
                  else
                    v251 = 0;
                  if ((*((_BYTE *)v251 + 45) & 8) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19412CAD0);
                  }
                  WebCore::RenderTreeBuilder::move(a1 + 48, v55, v251, (WebCore::RenderBox *)v8, 0, 0);
                }
              }
            }
          }
        }
      }
      v62 = *(_QWORD *)(v8 + 32);
      if (!v62)
        goto LABEL_86;
      v63 = *(_BYTE **)(v62 + 8);
      if (!v63)
        goto LABEL_86;
      if ((v63[23] & 0x10) == 0)
        goto LABEL_86;
      v264 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v63 + 648))(v63);
      if (!v264)
        goto LABEL_86;
      v23 = v264;
      if (*(_BYTE *)(v264 + 46) != 25)
        goto LABEL_86;
      v305 = isVisuallyHidden;
      if (v326 && !v325
        || (v266 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v8)) != 0
        && v325
        && (*((_BYTE *)v266 + 23) & 0x10) != 0
        && (*(_BYTE *)(v8 + 23) & 0x10) == 0)
      {
        WebCore::RenderObject::initializeFragmentedFlowStateOnInsertion(v8);
        WebCore::RenderTreeBuilder::MultiColumn::multiColumnDescendantInserted(*(WebCore::RenderTreeBuilder::MultiColumn **)(a1 + 88), (WebCore::RenderMultiColumnFlow *)v23, (WebCore::RenderObject *)v8);
LABEL_465:
        isVisuallyHidden = v305;
        goto LABEL_86;
      }
      if (!v326 && v325)
      {
        WebCore::RenderTreeBuilder::MultiColumn::restoreColumnSpannersForContainer(*(uint64_t ***)(a1 + 88), (const WebCore::RenderElement *)v8, (WebCore::RenderMultiColumnFlow *)v23, v267, v268, v269);
        goto LABEL_465;
      }
      v328 = 0;
      v329 = 0;
      v272 = *(unsigned int *)(v8 + 64);
      if (v272 | ((unint64_t)*(unsigned __int8 *)(v8 + 68) << 32))
      {
        v3 = *(WebCore::RenderObject **)((v272 | ((unint64_t)*(unsigned __int8 *)(v8 + 68) << 32)) + 8);
        if (v3)
        {
          if (*((_BYTE *)v3 + 46) != 27)
            goto LABEL_587;
          v273 = *(WebCore::RenderObject **)((v272 | ((unint64_t)*(unsigned __int8 *)(v8 + 68) << 32)) + 8);
          do
          {
LABEL_503:
            v274 = WebCore::RenderObject::containingBlock(v273);
            if (v274)
            {
              v275 = v274;
              v276 = (*((_BYTE *)v274 + 23) & 0x10) != 0
                   ? (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v274 + 648))(v274)
                   : 0;
              if (v276 != v23)
                WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)&v328, v275, (uint64_t)v327);
            }
            v273 = (WebCore::RenderObject *)WebCore::RenderTraversal::next<WebCore::RenderMultiColumnSpannerPlaceholder,WebCore::RenderMultiColumnSpannerPlaceholder>((uint64_t)v273, v8);
          }
          while (v273);
        }
      }
LABEL_509:
      v277 = *(WTF **)(v23 + 8);
      if (!v277)
      {
        v294 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v294 = 1;
        *(_QWORD *)(v294 + 8) = v23;
        v295 = *(WTF **)(v23 + 8);
        v277 = (WTF *)v294;
        *(_QWORD *)(v23 + 8) = v294;
        if (v295)
        {
          if (*(_DWORD *)v295 == 1)
          {
            WTF::fastFree(v295, v52);
            v277 = *(WTF **)(v23 + 8);
            if (!v277)
            {
LABEL_511:
              if (v328)
              {
                v279 = *(unsigned int *)(v328 - 4);
                v278 = (char *)(v328 + 8 * v279);
                if (*(_DWORD *)(v328 - 12))
                {
                  if (!(_DWORD)v279)
                  {
                    v293 = 0;
                    v280 = v328;
                    goto LABEL_561;
                  }
                  v292 = 8 * v279;
                  v280 = v328;
                  while ((unint64_t)(*(_QWORD *)v280 + 1) <= 1)
                  {
                    v280 += 8;
                    v292 -= 8;
                    if (!v292)
                    {
                      v280 = (unint64_t)v278;
                      break;
                    }
                  }
LABEL_514:
                  if (!v328)
                  {
                    v281 = 0;
                    goto LABEL_516;
                  }
                  v293 = *(unsigned int *)(v328 - 4);
LABEL_561:
                  v281 = (char *)(v328 + 8 * v293);
LABEL_516:
                  if (v281 != (char *)v280)
                  {
                    while (!*(_QWORD *)(*(_QWORD *)v280 + 8))
                    {
                      v301 = (char *)(v280 + 8);
                      v280 = (unint64_t)v278;
                      if (v301 != v278)
                      {
                        v280 = (unint64_t)v301;
                        while ((unint64_t)(*(_QWORD *)v280 + 1) <= 1)
                        {
                          v280 += 8;
                          if ((char *)v280 == v278)
                          {
                            v280 = (unint64_t)v278;
                            break;
                          }
                        }
                      }
                      if ((char *)v280 == v281)
                      {
                        v280 = (unint64_t)v281;
                        break;
                      }
                    }
                  }
                  if (v328)
                    v282 = (char *)(v328 + 8 * *(unsigned int *)(v328 - 4));
                  else
                    v282 = 0;
                  if ((char *)v280 == v282)
                  {
LABEL_538:
                    if (!v277)
                      goto LABEL_541;
                  }
                  else
                  {
                    if (!v277)
                      goto LABEL_541;
                    while (1)
                    {
                      v283 = (WebCore::RenderMultiColumnFlow *)*((_QWORD *)v277 + 1);
                      if (!v283)
                        break;
                      v285 = *(_QWORD *)v280;
                      v284 = (char *)(v280 + 8);
                      WebCore::RenderTreeBuilder::MultiColumn::restoreColumnSpannersForContainer(*(uint64_t ***)(a1 + 88), *(const WebCore::RenderElement **)(v285 + 8), v283, v267, v268, v269);
                      v286 = v278;
                      if (v284 != v278)
                      {
                        v286 = v284;
                        while ((unint64_t)(*(_QWORD *)v286 + 1) <= 1)
                        {
                          v286 += 8;
                          if (v286 == v278)
                          {
                            v286 = v278;
                            break;
                          }
                        }
                      }
                      v280 = (unint64_t)v281;
                      if (v286 != v281)
                      {
                        v280 = (unint64_t)v286;
                        if (!*(_QWORD *)(*(_QWORD *)v286 + 8))
                        {
                          while (1)
                          {
                            v287 = (char *)(v280 + 8);
                            v280 = (unint64_t)v278;
                            if (v287 != v278)
                            {
                              v280 = (unint64_t)v287;
                              while ((unint64_t)(*(_QWORD *)v280 + 1) <= 1)
                              {
                                v280 += 8;
                                if ((char *)v280 == v278)
                                {
                                  v280 = (unint64_t)v278;
                                  break;
                                }
                              }
                            }
                            if ((char *)v280 == v281)
                              break;
                            if (*(_QWORD *)(*(_QWORD *)v280 + 8))
                              goto LABEL_528;
                          }
                          v280 = (unint64_t)v281;
                        }
                      }
LABEL_528:
                      LODWORD(v329) = v329 + 1;
                      if ((char *)v280 == v282)
                        goto LABEL_538;
                    }
                  }
                  if (*(_DWORD *)v277 == 1)
                    WTF::fastFree(v277, v52);
                  else
                    --*(_DWORD *)v277;
LABEL_541:
                  v288 = v328;
                  if (v328)
                  {
                    v289 = *(unsigned int *)(v328 - 4);
                    if ((_DWORD)v289)
                    {
                      v290 = (WTF **)v328;
                      do
                      {
                        v291 = *v290;
                        if (*v290 != (WTF *)-1)
                        {
                          *v290 = 0;
                          if (v291)
                          {
                            if (*(_DWORD *)v291 == 1)
                              WTF::fastFree(v291, v52);
                            else
                              --*(_DWORD *)v291;
                          }
                        }
                        ++v290;
                        --v289;
                      }
                      while (v289);
                    }
                    WTF::fastFree((WTF *)(v288 - 16), v52);
                  }
                  goto LABEL_465;
                }
              }
              else
              {
                v278 = 0;
                v279 = 0;
              }
              v280 = (unint64_t)v278;
              v278 = (char *)(v328 + 8 * v279);
              goto LABEL_514;
            }
          }
          else
          {
            --*(_DWORD *)v295;
          }
        }
      }
      ++*(_DWORD *)v277;
      goto LABEL_511;
    }
LABEL_76:
    v61 = v56 != 0x100000 && (v318 & 0xE000000) == 0;
    if (!v61 && !v57 && v58 != 0x100000)
    {
      if (((*(_BYTE *)(v8 + 20) & 1) == 0) != (*((_BYTE *)v55 + 22) & 4) >> 2)
        WebCore::RenderTreeBuilder::childFlowStateChangesAndAffectsParentBlock((WebCore::RenderTreeBuilder *)(a1 + 48), (WebCore::RenderElement *)v8, v53);
      WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange(WebCore::RenderElement &,WebCore::RenderStyle &)::$_0::operator()(v324);
      goto LABEL_86;
    }
    goto LABEL_82;
  }
  if ((*(_WORD *)(a2 + 28) & 0x400) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 1040))(a2);
  v76 = *(unsigned int *)(a1 + 28);
  v77 = 72 * v76;
  while (1)
  {
    v78 = v77 - 72;
    if (!v77)
      break;
    v79 = *(_QWORD *)(a1 + 16);
    v80 = *(unsigned __int8 *)(v79 + v77 - 32);
    v77 -= 72;
    if (v80)
    {
      v81 = v79 + v78;
      goto LABEL_123;
    }
  }
  if (!(_DWORD)v76)
  {
    __break(0xC471u);
    JUMPOUT(0x19412CB18);
  }
  v81 = *(_QWORD *)(a1 + 16) + 72 * v76 - 72;
LABEL_123:
  if (!*(_BYTE *)(v81 + 40))
    goto LABEL_586;
  v82 = *(_QWORD *)(v81 + 16);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 128))(v82) & 1) == 0
    && ((~*(unsigned __int16 *)(a2 + 28) & 0x408) != 0
     || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 368))(a2)
     || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v82 + 136))(v82)))
  {
    goto LABEL_261;
  }
  if ((*(_BYTE *)(v82 + 45) & 1) == 0)
  {
    v83 = *(_WORD **)(*(_QWORD *)(v82 + 24) + 8);
    if (v83)
    {
      if ((v83[14] & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19412C11CLL);
      }
      if (!(*(unsigned int (**)(_WORD *, uint64_t))(*(_QWORD *)v83 + 968))(v83, a2))
        goto LABEL_261;
    }
  }
  if (!(*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)a2 + 512))(a2, v308))
    goto LABEL_261;
  v84 = *(unsigned int *)(a1 + 28);
  v85 = 72 * v84;
  while (1)
  {
    v86 = v85 - 72;
    if (!v85)
      break;
    v87 = *(_QWORD *)(a1 + 16);
    v88 = *(unsigned __int8 *)(v87 + v85 - 32);
    v85 -= 72;
    if (v88)
    {
      v8 = v87 + v86;
      goto LABEL_134;
    }
  }
  if (!(_DWORD)v84)
  {
    __break(0xC471u);
    JUMPOUT(0x19412CB28);
  }
  v8 = *(_QWORD *)(a1 + 16) + 72 * v84 - 72;
LABEL_134:
  if (!*(_BYTE *)(v8 + 40))
  {
LABEL_586:
    __break(1u);
LABEL_587:
    while (1)
    {
      v273 = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v3 + 112))(v3);
      if (!v273)
      {
        if (v3 == (WebCore::RenderObject *)v8)
          goto LABEL_509;
        v296 = *(unsigned int *)((char *)v3 + 47);
        if (!(v296 | ((unint64_t)*((unsigned __int8 *)v3 + 51) << 32)))
          break;
        v273 = *(WebCore::RenderObject **)((v296 | ((unint64_t)*((unsigned __int8 *)v3 + 51) << 32)) + 8);
        if (!v273)
          break;
      }
LABEL_588:
      v3 = v273;
      if (*((_BYTE *)v273 + 46) == 27)
        goto LABEL_503;
    }
    v297 = *((_QWORD *)v3 + 4);
    if (v297)
    {
      while (1)
      {
        v298 = *(_QWORD *)(v297 + 8);
        if (!v298 || v298 == v8)
          break;
        v300 = *(unsigned int *)(v298 + 47);
        if (v300 | ((unint64_t)*(unsigned __int8 *)(v298 + 51) << 32))
        {
          v273 = *(WebCore::RenderObject **)((v300 | ((unint64_t)*(unsigned __int8 *)(v298 + 51) << 32)) + 8);
          if (v273)
            goto LABEL_588;
        }
        v297 = *(_QWORD *)(v298 + 32);
        if (!v297)
          goto LABEL_509;
      }
    }
    goto LABEL_509;
  }
  if (!*(_BYTE *)(v8 + 32))
  {
    SiblingRenderer = WebCore::RenderTreePosition::nextSiblingRenderer(*(WebCore::RenderTreePosition **)(v8 + 16), (const WebCore::Node *)a2);
    if (SiblingRenderer)
    {
      v261 = SiblingRenderer;
      SiblingRenderer = *(_QWORD *)(SiblingRenderer + 8);
      if (!SiblingRenderer)
      {
        SiblingRenderer = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)SiblingRenderer = 1;
        *(_QWORD *)(SiblingRenderer + 8) = v261;
        v271 = *(WTF **)(v261 + 8);
        *(_QWORD *)(v261 + 8) = SiblingRenderer;
        if (v271)
        {
          if (*(_DWORD *)v271 == 1)
          {
            WTF::fastFree(v271, v90);
            SiblingRenderer = *(_QWORD *)(v261 + 8);
            if (!SiblingRenderer)
              goto LABEL_137;
          }
          else
          {
            --*(_DWORD *)v271;
          }
        }
      }
      ++*(_DWORD *)SiblingRenderer;
    }
LABEL_137:
    v91 = *(WTF **)(v8 + 24);
    *(_QWORD *)(v8 + 24) = SiblingRenderer;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
        WTF::fastFree(v91, v90);
      else
        --*(_DWORD *)v91;
    }
    *(_BYTE *)(v8 + 32) = 1;
    v84 = *(unsigned int *)(a1 + 28);
  }
  v92 = 72 * v84;
  while (1)
  {
    v93 = v92 - 72;
    if (!v92)
      break;
    v94 = *(_QWORD *)(a1 + 16);
    v95 = *(unsigned __int8 *)(v94 + v92 - 32);
    v92 -= 72;
    if (v95)
    {
      v96 = v94 + v93;
      goto LABEL_145;
    }
  }
  if (!(_DWORD)v84)
  {
    __break(0xC471u);
    JUMPOUT(0x19412CB30);
  }
  v96 = *(_QWORD *)(a1 + 16) + 72 * v84 - 72;
LABEL_145:
  if (!*(_BYTE *)(v96 + 40))
    goto LABEL_586;
  v97 = *(WTF::StringImpl **)(v96 + 24);
  v316 = *(uint64_t (**)(uint64_t, void *))(v96 + 16);
  if (v97)
    ++*(_DWORD *)v97;
  v317 = v97;
  LOBYTE(v318) = *(_BYTE *)(v96 + 32);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, char *, uint64_t (**)(uint64_t, void *)))(*(_QWORD *)a2 + 504))(&v328, a2, v308, &v316);
  v24 = (WebCore::RenderElement *)v328;
  if (!v328)
    goto LABEL_258;
  if (!(*(unsigned int (**)(uint64_t (*)(uint64_t, void *), unint64_t, unint64_t))(*(_QWORD *)v316 + 664))(v316, v328, v328 + 80))goto LABEL_249;
  *(_QWORD *)(a2 + 64) = v328 | ((unint64_t)*(unsigned __int16 *)(a2 + 70) << 48);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)a2);
  WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v328, (uint64_t)v24, v98, v99);
  v102 = (WebCore::RenderElement *)v328;
  v328 = 0;
  v103 = (WebCore::RenderTable *)v316;
  if (v317)
    v104 = *((_QWORD *)v317 + 1);
  else
    v104 = 0;
  v105 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 248);
  v106 = *(_QWORD *)(*(_QWORD *)(v105 + 328) + 24);
  if (!v106
    || (v107 = *(_QWORD *)(v106 + 8)) == 0
    || !*(_BYTE *)(v105 + 1375)
    || !*(_DWORD *)(v105 + 1156) && !*(_DWORD *)(v105 + 1160)
    || (*(_WORD *)(v107 + 660) & 0x80) != 0 && !*(_BYTE *)(v105 + 1377))
  {
    if ((*((_BYTE *)v102 + 45) & 2) != 0)
    {
      if ((*(_BYTE *)(*((_QWORD *)v316 + 13) + 239) & 4) == 0 && (*((_BYTE *)v316 + 120) & 0x30) == 0)
      {
        v200 = *(WebCore::FontCascadeFonts **)(*((_QWORD *)v316 + 14) + 248);
        if (v200)
        {
          v201 = *(_DWORD *)v200 + 1;
          *(_DWORD *)v200 = v201;
          v202 = *((_DWORD *)v200 + 5);
          if (v202)
          {
            v304 = v104;
            v303 = v23;
            v306 = isVisuallyHidden;
            v302 = v200;
            v203 = (unsigned int *)*((_QWORD *)v200 + 1);
            v204 = &v203[10 * v202];
            while (1)
            {
              v205 = v203[3];
              if ((_DWORD)v205)
                break;
LABEL_320:
              v203 += 10;
              if (v203 == v204)
              {
                v200 = v302;
                v201 = *(_DWORD *)v302;
                isVisuallyHidden = v306;
                LOBYTE(v23) = v303;
                v104 = v304;
                goto LABEL_327;
              }
            }
            v206 = 16 * v205;
            v207 = (_QWORD *)(*(_QWORD *)v203 + 8);
            while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v207 + 24))(*v207) & 1) == 0)
            {
              v207 += 2;
              v206 -= 16;
              if (!v206)
                goto LABEL_320;
            }
            if (*(_DWORD *)v302 == 1)
            {
              WebCore::FontCascadeFonts::~FontCascadeFonts(v302, v101);
              WTF::fastFree(v245, v246);
            }
            else
            {
              --*(_DWORD *)v302;
            }
            isVisuallyHidden = v306;
            LOBYTE(v23) = v303;
            v104 = v304;
            goto LABEL_237;
          }
LABEL_327:
          v208 = v201 - 1;
          if (v208)
          {
            *(_DWORD *)v200 = v208;
          }
          else
          {
            WebCore::FontCascadeFonts::~FontCascadeFonts(v200, v101);
            WTF::fastFree(v243, v244);
          }
        }
        v209 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 248);
        v210 = *(_DWORD *)(v209 + 1156);
        if (v210 < 0xC9 || !*(_BYTE *)(v209 + 1378))
        {
          v211 = *((_QWORD *)v102 + 13);
          if (v211)
          {
            v212 = *(unsigned __int16 **)(v211 + 8);
            v213 = *(unsigned int *)(v211 + 4);
            v214 = *(_DWORD *)(v211 + 4);
            if ((*(_BYTE *)(v211 + 16) & 4) != 0)
            {
              if (v214)
              {
                do
                {
                  v215 = *(unsigned __int8 *)v212;
                  v212 = (unsigned __int16 *)((char *)v212 + 1);
                  v216 = (1 << v215) & 0x100003600;
                  if (v215 <= 0x20 && v216 != 0)
                    --v214;
                  --v213;
                }
                while (v213);
              }
            }
            else if (v214)
            {
              v252 = 2 * v213;
              do
              {
                v253 = *v212++;
                v254 = (1 << v253) & 0x100003600;
                if (v253 <= 0x20 && v254 != 0)
                  --v214;
                v252 -= 2;
              }
              while (v252);
            }
          }
          else
          {
            v214 = 0;
          }
          *(_DWORD *)(v209 + 1156) = v214 + v210;
          ++*(_DWORD *)(v209 + 1164);
        }
      }
    }
    else
    {
      v108 = *((unsigned __int8 *)v102 + 46);
      if (v108 <= 0x66)
      {
        if (v108 != 83)
        {
          if (v108 == 13 || v108 == 7)
          {
            if ((*((_BYTE *)v102 + 52) & 7) != 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19412C76CLL);
            }
            v109 = WebCore::RenderReplaced::intrinsicSize((unint64_t)v102);
            v112 = *(_DWORD *)(v105 + 1160);
            if (v112 <= 0x400)
            {
              v113 = ((int)(v109 - (v110 & 0xFFFFFFC0) + 32) >> 6) + (int)v109 / 64;
              v114 = ((int)(HIDWORD(v109) - (v111 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v109) / 64;
              if (v113 < 0)
                v113 = -v113;
              if (v114 < 0)
                v114 = -v114;
              v115 = v114 * (unint64_t)v113;
              if ((v115 & 0xFFFFFFFF00000000) != 0)
                v116 = 0;
              else
                v116 = v115;
              v117 = __CFADD__(v116, v112);
              v118 = v116 + v112;
              if (v117)
                v118 = -1;
              if ((v115 & 0xFFFFFFFF00000000) != 0)
                v118 = -1;
              *(_DWORD *)(v105 + 1160) = v118;
            }
          }
          goto LABEL_237;
        }
LABEL_201:
        v130 = *(_QWORD *)(*((_QWORD *)v102 + 11) + 8);
        if (*(_BYTE *)(v130 + 8) == 4 && *(_BYTE *)(v130 + 16) == 4
          || (v130 = *(_QWORD *)(*((_QWORD *)v316 + 11) + 8), *(_BYTE *)(v130 + 8) == 4) && *(_BYTE *)(v130 + 16) == 4)
        {
          v131 = *(_BYTE *)(v130 + 10) ? (int)*(float *)(v130 + 4) : *(_DWORD *)(v130 + 4);
          v132 = *(_BYTE *)(v130 + 18) ? (int)*(float *)(v130 + 12) : *(_DWORD *)(v130 + 12);
          if (v132 >= 1 && v131 >= 1)
          {
            v134 = *(_DWORD *)(v105 + 1160);
            if (v134 <= 0x400)
            {
              v135 = v132 * (unint64_t)v131;
              if ((v135 & 0xFFFFFFFF00000000) != 0)
                v136 = 0;
              else
                v136 = v135;
              v117 = __CFADD__(v136, v134);
              v137 = v136 + v134;
              if (v117)
                v137 = -1;
              if ((v135 & 0xFFFFFFFF00000000) != 0)
                v138 = -1;
              else
                v138 = v137;
              *(_DWORD *)(v105 + 1160) = v138;
            }
          }
        }
        goto LABEL_237;
      }
      if (v108 == 103)
        goto LABEL_201;
    }
  }
LABEL_237:
  v324[0] = v102;
  WebCore::RenderTreeBuilder::attachInternal(a1 + 48, v103, v324, v104);
  v146 = v324[0];
  v324[0] = 0;
  if (v146)
  {
    v147 = *((_QWORD *)v146 + 4);
    if (v147 && *(_QWORD *)(v147 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19412C19CLL);
    }
    v148 = *(unsigned int *)((char *)v146 + 47);
    if (v148 | ((unint64_t)*((unsigned __int8 *)v146 + 51) << 32)
      && *(_QWORD *)((v148 | ((unint64_t)*((unsigned __int8 *)v146 + 51) << 32)) + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19412C4F8);
    }
    v149 = *((unsigned int *)v146 + 10);
    if (v149 | ((unint64_t)*((unsigned __int8 *)v146 + 44) << 32)
      && *(_QWORD *)((v149 | ((unint64_t)*((unsigned __int8 *)v146 + 44) << 32)) + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19412C520);
    }
    v150 = *((_DWORD *)v146 + 5);
    if ((v150 & 4) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19412C1BCLL);
    }
    *((_DWORD *)v146 + 5) = v150 | 4;
    (*(void (**)(WebCore::RenderStyle *))(*(_QWORD *)v146 + 640))(v146);
    if ((*((_BYTE *)v146 + 52) & 7) == 3 && (*((_BYTE *)v146 + 53) & 4) != 0 && *((_DWORD *)v146 + 56) != 1)
      --*((_DWORD *)v146 + 56);
    else
      (*(void (**)(WebCore::RenderStyle *))(*(_QWORD *)v146 + 8))(v146);
  }
  v151 = *(_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 3040))
  {
    WebCore::TextManipulationController::didAddOrCreateRendererForNode(*(_QWORD *)(*(_QWORD *)a1 + 3040), (WebCore::Node *)a2);
    v151 = *(_QWORD *)a1;
  }
  v152 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v152 & 1) == 0)
    goto LABEL_249;
  v259 = WebCore::Document::topDocument(v151);
  *(_DWORD *)(v259 + 24) += 2;
  v324[0] = (WebCore::RenderStyle *)v259;
  if (*(_QWORD *)(v259 + 1944))
    v260 = *(_BYTE *)(v259 + 3405) == 0;
  else
    v260 = 0;
  if (!v260)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v324);
    goto LABEL_249;
  }
  v262 = (WebCore::AXObjectCache **)v259;
  v263 = *(WebCore::AXObjectCache **)(v259 + 1488);
  if (v263)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v324);
LABEL_459:
    WebCore::AXObjectCache::onRendererCreated(v263, (WebCore::Element *)a2);
    goto LABEL_249;
  }
  v265 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
  v327[0] = WebCore::AXObjectCache::AXObjectCache(v265, (WebCore::Document *)v262);
  std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v262 + 186, v327);
  std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](v327);
  WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
  v263 = v262[186];
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v324);
  if (v263)
    goto LABEL_459;
LABEL_249:
  v153 = v328;
  v328 = 0;
  if (v153)
  {
    v154 = *(_QWORD *)(v153 + 32);
    if (v154 && *(_QWORD *)(v154 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19412C1DCLL);
    }
    v155 = *(unsigned int *)(v153 + 47);
    if (v155 | ((unint64_t)*(unsigned __int8 *)(v153 + 51) << 32)
      && *(_QWORD *)((v155 | ((unint64_t)*(unsigned __int8 *)(v153 + 51) << 32)) + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19412C548);
    }
    v156 = *(unsigned int *)(v153 + 40);
    if (v156 | ((unint64_t)*(unsigned __int8 *)(v153 + 44) << 32)
      && *(_QWORD *)((v156 | ((unint64_t)*(unsigned __int8 *)(v153 + 44) << 32)) + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19412C570);
    }
    v157 = *(_DWORD *)(v153 + 20);
    if ((v157 & 4) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19412C1FCLL);
    }
    *(_DWORD *)(v153 + 20) = v157 | 4;
    (*(void (**)(unint64_t))(*(_QWORD *)v153 + 640))(v153);
    if ((*(_BYTE *)(v153 + 52) & 7) == 3 && (*(_BYTE *)(v153 + 53) & 4) != 0 && *(_DWORD *)(v153 + 224) != 1)
      --*(_DWORD *)(v153 + 224);
    else
      (*(void (**)(unint64_t))(*(_QWORD *)v153 + 8))(v153);
  }
LABEL_258:
  v158 = v317;
  v317 = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 1)
      WTF::fastFree(v158, v24);
    else
      --*(_DWORD *)v158;
  }
LABEL_261:
  v159 = *(unsigned int *)(a1 + 28);
  v160 = 72 * v159;
  while (1)
  {
    v161 = v160 - 72;
    if (!v160)
      break;
    v162 = *(_QWORD *)(a1 + 16);
    v163 = *(unsigned __int8 *)(v162 + v160 - 32);
    v160 -= 72;
    if (v163)
    {
      v164 = v162 + v161;
      goto LABEL_265;
    }
  }
  if (!(_DWORD)v159)
  {
    __break(0xC471u);
    JUMPOUT(0x19412CB20);
  }
  v164 = *(_QWORD *)(a1 + 16) + 72 * v159 - 72;
LABEL_265:
  *(_BYTE *)(v164 + 48) = 1;
  if ((v10 & 1) == 0)
    goto LABEL_266;
LABEL_89:
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v308, v24);
  if ((v23 & 1) != 0
    || !WebCore::ContentChangeObserver::isConsideredActionableContent(v9, (WebCore::Element *)a2, v307 != 0))
  {
    return;
  }
  isConsideredVisible = WebCore::ContentChangeObserver::isConsideredVisible((WebCore::ContentChangeObserver *)a2, v64);
  if (isVisuallyHidden && isConsideredVisible)
  {
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v9 + 136, (_QWORD *)a2, (uint64_t)&v316);
    *(_DWORD *)(v9 + 120) = 2;
    *(_BYTE *)(v9 + 153) = 0;
    *(_BYTE *)(v9 + 155) = 0;
    *(_BYTE *)(v9 + 159) = 0;
    v67 = *(_QWORD *)(v9 + 72);
    if (v67)
    {
      *(_QWORD *)(v9 + 72) = 0;
      v195 = *(unsigned int *)(v67 - 4);
      if ((_DWORD)v195)
      {
        for (i = 0; i != v195; ++i)
        {
          v197 = *(unsigned int **)(v67 + 8 * i);
          if (v197 != (unsigned int *)-1)
          {
            *(_QWORD *)(v67 + 8 * i) = 0;
            if (v197)
            {
              do
              {
                v198 = __ldaxr(v197);
                v199 = v198 - 1;
              }
              while (__stlxr(v199, v197));
              if (!v199)
              {
                atomic_store(1u, v197);
                WTF::fastFree((WTF *)v197, v66);
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v67 - 16), v66);
      v68 = *(_QWORD *)(v9 + 72);
      *(_DWORD *)(v9 + 80) = 0;
      if (v68)
      {
        LODWORD(v68) = *(_DWORD *)(v68 - 12);
        if (v68 > 0x7FFFFFFE)
          LODWORD(v68) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v68) = 0;
      *(_DWORD *)(v9 + 80) = 0;
    }
    *(_DWORD *)(v9 + 84) = 2 * v68;
    WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)(v9 + 88), v66);
    return;
  }
  if (isVisuallyHidden)
    v125 = 1;
  else
    v125 = isConsideredVisible;
  if ((v125 & 1) != 0)
    return;
  v126 = (uint64_t **)(v9 + 136);
  if (!WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(v9 + 136, (_QWORD *)a2))return;
  v127 = *v126;
  if (!*v126 || !*((_DWORD *)v127 - 3))
    goto LABEL_189;
  v218 = *((unsigned int *)v127 - 1);
  if ((_DWORD)v218)
  {
    v219 = 8 * v218;
    v220 = *v126;
    while ((unint64_t)(*v220 + 1) <= 1)
    {
      ++v220;
      v219 -= 8;
      if (!v219)
        goto LABEL_189;
    }
  }
  else
  {
    v220 = *v126;
  }
  v256 = &v127[v218];
  if (v220 == v256)
  {
LABEL_189:
    *(_DWORD *)(v9 + 120) = 1;
    return;
  }
  v257 = *v220;
LABEL_421:
  if (!*(_QWORD *)(v257 + 8))
  {
    while (1)
    {
      if (++v220 == v256)
        goto LABEL_189;
      v257 = *v220;
      if ((unint64_t)(*v220 + 1) > 1)
      {
        if (v220 == v256)
          goto LABEL_189;
        goto LABEL_421;
      }
    }
  }
}

uint64_t WebCore::RenderTreeUpdater::commit(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t *v4;
  WebCore::RenderElement *v5;
  WebCore::RenderObject *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WebCore::Style::Update *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  WebCore::RenderText *v14;
  _QWORD *v15;
  char v16;
  WTF *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t *v35;
  WebCore::RenderStyle *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  WebCore::RenderStyle *v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t *v71;
  WebCore::RenderElement *v72;
  WebCore::RenderObject *v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  WebCore::RenderElement *v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  WTF *v110;
  WTF *v112;
  WTF *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  WTF *v119;
  WTF *v121;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  WebCore **v128;
  unsigned int *v129;
  uint64_t v130;
  WebCore *v131;
  uint64_t v132;
  uint64_t v133;
  WebCore *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  _BYTE *v139;
  uint64_t v140;
  WTF *v141;
  __int128 v142;
  char v143;
  uint64_t v144;
  WTF *v145;
  uint64_t v146;
  WebCore::SVGTextLayoutAttributes **v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF *v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  __int16 v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  WTF::StringImpl **v170;
  WTF::StringImpl *v171;
  int v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  unsigned __int8 *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  BOOL v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  unsigned __int8 *v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  _BYTE *v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  WTF *v231;
  uint64_t v232;
  uint64_t v233;
  __int16 v234;
  BOOL v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  unsigned __int8 *v249;
  uint64_t v250;
  int v251;
  WebCore::RenderObject *v252;
  WebCore::RenderObject *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  _WORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  _WORD *v265;
  uint64_t v266;
  uint64_t v267;
  __int16 v268;
  WTF **v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  BOOL v284;
  uint64_t v285;
  unsigned __int8 *v287;
  uint64_t v288;
  WTF **v289;
  WTF *v290;
  unsigned int v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  WTF::StringImpl *v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  unsigned __int8 *v313;
  uint64_t v314;
  uint64_t **v315;
  int v316;
  uint64_t v317;
  _BOOL4 v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  WTF *v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  WTF *v334;
  WTF *v336;
  WTF *v338;
  uint64_t v339;
  char *v340;
  WTF *v341;
  WTF *v343;
  BOOL v345;
  uint64_t RenderingAncestor;
  uint64_t SiblingRenderer;
  void *v348;
  WTF *v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v353;
  uint64_t v354;
  WTF::StringImpl **v355;
  WTF::StringImpl *v356;
  uint64_t v357;
  char v358;
  _BOOL4 v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  WebCore::SVGTextLayoutAttributes **v364;
  WTF *v365;
  uint64_t v366;
  WebCore::RenderObject *v367;
  uint64_t v368;
  uint64_t v369;
  WebCore::SVGTextLayoutAttributes **v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  WTF *v378;
  uint64_t v379;
  WTF **v380;
  uint64_t v381;
  void *v382;
  WebCore::RenderElement *v383;
  WebCore::RenderObject *v384;
  uint64_t v385;
  uint64_t v386;
  WebCore::SVGTextLayoutAttributes **v387;
  void *v388;
  WebCore::Style::Update *v389;
  uint64_t v390;
  void *v391;
  uint64_t v392;
  __int16 v393;
  __int128 *v394;
  uint64_t v395;
  unint64_t v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  _BYTE *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  __int128 v405;
  __int128 *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  int v414;
  unsigned __int8 *v415;
  uint64_t v416;
  int v417;
  _QWORD *v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  uint64_t v422;
  const WebCore::Element *v423;
  WebCore::RenderElement **v424;
  uint64_t v425;
  unsigned int v426;
  int v427;
  unint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  _BYTE *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  __int128 *v441;
  uint64_t v442;
  void *v443;
  WTF *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _BYTE *v449;
  WebCore::RenderObject *v450;
  WTF::StringImpl *v451;
  _QWORD *v452;
  WTF::StringImpl *v453;
  uint64_t **v454;
  uint64_t v455;
  uint64_t v456;
  WebCore::RenderObject *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  WebCore::SVGTextLayoutAttributes **v461;
  _DWORD *v462;
  WTF *v463;
  int v464;
  void *v465;
  int v466;
  BOOL v467;
  WebCore::RenderBlockFlow *v468;
  WebCore::RenderElement *v469;
  uint64_t v470;
  uint64_t v471;
  const WebCore::Element *v472;
  uint64_t v473;
  WebCore::RenderTable *v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  WebCore::RenderObject *v478;
  WTF::StringImpl *v479;
  _QWORD *CachedPseudoStyle;
  WTF::StringImpl *v481;
  void *v482;
  WebCore::RenderElement *v483;
  uint64_t v484;
  WebCore::RenderBlockFlow *v485;
  WebCore::RenderElement *v486;
  uint64_t v487;
  uint64_t v488;
  const WebCore::Element *v489;
  uint64_t v490;
  WebCore::RenderTable *v491;
  void *v492;
  WTF *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t *v497;
  WebCore::RenderTreeBuilder *v498;
  WTF **v499;
  uint64_t *v500;
  WTF *v501;
  _BYTE *v502;
  WebCore::RenderText *v503;
  WTF **v504;
  WTF *v505;
  uint64_t *v506;
  WebCore::RenderElement *v507;
  WTF *v508;
  WebCore::RenderElement *v509;
  __int16 v510;
  char v511;
  WebCore::RenderStyle *v512;
  WTF *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t *v516;
  uint64_t v517;
  _BYTE v518[256];
  int v519;
  uint64_t v520;
  WTF *v521;
  uint64_t v522;
  _BYTE v523[256];
  int v524;
  uint64_t v525;
  __int128 v526;
  uint64_t v527;
  WTF *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  char v533;
  WebCore::RenderObject *v534[2];
  uint64_t v535;
  WTF *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  char v541;
  unint64_t v542[2];

  result = MEMORY[0x1E0C80A78](a1, a2);
  if (!*(_BYTE *)(*(_QWORD *)result + 3377) || !*(_QWORD *)(*(_QWORD *)result + 1944))
    return result;
  v4 = v3;
  v5 = (WebCore::RenderElement *)result;
  kdebug_trace();
  v8 = *v4;
  *v4 = 0;
  v9 = (WebCore::Style::Update *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v8;
  if (v9)
  {
    WebCore::Style::Update::~Update(v9, v6);
    if (*(_DWORD *)v10)
    {
      *(_QWORD *)(v10 + 80) = 0;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)v10 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v10, v6);
    }
  }
  v508 = (WTF *)&v515;
  v505 = (WTF *)v523;
  v506 = (uint64_t *)v518;
  v504 = &v528;
  v11 = -1;
  v12 = 10;
  v507 = v5;
  do
  {
    while (1)
    {
      v13 = (_QWORD *)*((_QWORD *)v5 + 1);
      v14 = (WebCore::RenderText *)v13[5];
      v15 = (_QWORD *)v13[6];
      v13[6] = 0;
      v13[7] = 0;
      v13[5] = 0;
      if (!v14 || !*((_DWORD *)v14 - 3))
      {
        v16 = 0;
        goto LABEL_10;
      }
      if (v15)
        break;
      WTF::fastFree((WebCore::RenderText *)((char *)v14 - 16), v6);
    }
    v502 = v15;
    v503 = v14;
    do
    {
      v19 = (_QWORD *)*v15;
      *((_DWORD *)v19 + 6) = *(_DWORD *)(*v15 + 24) + 2;
      v20 = *((unsigned __int16 *)v19 + 14);
      if ((v20 & 0x80) != 0)
      {
        v105 = v19[25];
        if (v105)
          goto LABEL_190;
        goto LABEL_34;
      }
      if ((~v20 & 0x408) == 0 && (*(unsigned int (**)(_QWORD *))(*v19 + 368))(v19))
      {
        v447 = v19[14];
        if (v447)
        {
          v6 = *(WebCore::RenderObject **)(v447 + 8);
LABEL_804:
          v5 = v507;
          goto LABEL_191;
        }
LABEL_806:
        v22 = 0;
        v5 = v507;
        goto LABEL_36;
      }
      v6 = (WebCore::RenderObject *)v19[4];
      if (!v6)
        goto LABEL_34;
      v21 = *((_WORD *)v6 + 14);
      if ((v21 & 0x80) != 0)
      {
        v105 = *((_QWORD *)v6 + 25);
        if (v105)
        {
LABEL_190:
          v6 = *(WebCore::RenderObject **)(v105 + 8);
LABEL_191:
          if (v6)
            goto LABEL_32;
        }
LABEL_34:
        v22 = 0;
        goto LABEL_36;
      }
      if ((v21 & 8) == 0)
        goto LABEL_34;
      if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v99 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v99)
        {
          v448 = *(_QWORD *)(v99 + 224);
          if (v448)
          {
            v6 = (WebCore::RenderObject *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v448 + 16))(v448, v19);
            goto LABEL_804;
          }
          goto LABEL_806;
        }
      }
LABEL_32:
      while ((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) == 0)
      {
        if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_34;
        v100 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (!v100)
          goto LABEL_34;
        if ((*(_QWORD *)(v100 + 16) & 0x1FLL) != 0x12)
          goto LABEL_34;
        v101 = *((_QWORD *)v6 + 4);
        if (!v101)
          goto LABEL_34;
        v102 = *(_WORD *)(v101 + 28);
        if ((v102 & 0x80) != 0)
        {
          v395 = *(_QWORD *)(v101 + 200);
          if (!v395)
            goto LABEL_34;
          v101 = *(_QWORD *)(v395 + 8);
        }
        else
        {
          if ((v102 & 8) == 0)
            goto LABEL_34;
          if ((*(_QWORD *)(v101 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v124 = *(_QWORD *)((*(_QWORD *)(v101 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
            if (v124)
            {
              v475 = *(_QWORD *)(v124 + 224);
              if (!v475)
                goto LABEL_806;
              v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v475 + 16))(v475);
              v5 = v507;
            }
          }
        }
        v22 = 0;
        v6 = (WebCore::RenderObject *)v101;
        if (!v101)
          goto LABEL_36;
      }
      v22 = (uint64_t)v6;
      if ((*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19412ED44);
      }
LABEL_36:
      if (*((_DWORD *)v19 + 6) != 2)
      {
        *((_DWORD *)v19 + 6) -= 2;
LABEL_38:
        if (!v22)
          goto LABEL_24;
        goto LABEL_39;
      }
      if ((*((_WORD *)v19 + 15) & 0x400) != 0)
        goto LABEL_38;
      WebCore::Node::removedLastRef((WebCore::Node *)v19);
      if (!v22)
        goto LABEL_24;
LABEL_39:
      if ((v19[8] & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v19[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19412ED80);
        }
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)((v19[8] & 0xFFFFFFFFFFFFLL) + 0x20) + 8) + 69) & 0x20) != 0)
          goto LABEL_45;
      }
      if ((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19412EDF4);
      }
      if ((*(_QWORD *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1ELL) == 0x16)
      {
LABEL_45:
        v23 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 64);
        if (v23)
        {
          v24 = *(_DWORD *)(v23 - 8);
          v25 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = (uint64_t *)(v23 + 24 * v28);
          v30 = *v29;
          if (*v29 != v22)
          {
            v31 = 1;
            while (v30)
            {
              v28 = (v28 + v31) & v24;
              v29 = (uint64_t *)(v23 + 24 * v28);
              v30 = *v29;
              ++v31;
              if (*v29 == v22)
                goto LABEL_50;
            }
            v29 = (uint64_t *)(v23 + 24 * *(unsigned int *)(v23 - 4));
          }
LABEL_50:
          if (v29 != (uint64_t *)(v23 + 24 * *(unsigned int *)(v23 - 4)))
          {
            if (*((_BYTE *)v29 + 16) == 5)
              goto LABEL_24;
            *((_BYTE *)v29 + 16) = 5;
            goto LABEL_71;
          }
        }
        if ((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19412EFA4);
          }
          *(_DWORD *)(v22 + 24) += 2;
          v32 = *(unsigned __int16 *)(v22 + 28);
          if ((v32 & 0x80) != 0)
          {
            v125 = *(_QWORD *)(v22 + 200);
            if (!v125)
              goto LABEL_240;
          }
          else
          {
            if ((~v32 & 0x408) == 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 368))(v22))
            {
              v455 = *(_QWORD *)(v22 + 112);
              if (!v455)
                goto LABEL_833;
              v33 = *(_QWORD *)(v455 + 8);
LABEL_834:
              v5 = v507;
LABEL_63:
              if (*(_DWORD *)(v22 + 24) == 2)
              {
                if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v22);
              }
              else
              {
                *(_DWORD *)(v22 + 24) -= 2;
              }
              v35 = (uint64_t *)*((_QWORD *)v5 + 1);
              if ((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) != 0
                && (*(_BYTE *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19412EFE4);
              }
              WebCore::RenderStyle::cloneIncludingPseudoElements((WebCore::RenderStyle *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 80), v6, (uint64_t)&v526);
              v36 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
              *(_DWORD *)v36 = 0;
              v37 = *((_QWORD *)&v526 + 1);
              *((_QWORD *)&v526 + 1) = 0;
              *((_QWORD *)v36 + 1) = v37;
              *((_QWORD *)v36 + 2) = v527;
              v38 = v528;
              v528 = 0;
              *((_QWORD *)v36 + 3) = v38;
              v39 = v529;
              v529 = 0;
              *((_QWORD *)v36 + 4) = v39;
              *((_QWORD *)v36 + 5) = v530;
              v40 = v531;
              v531 = 0;
              *((_QWORD *)v36 + 6) = v40;
              v41 = v532;
              v532 = 0;
              *((_QWORD *)v36 + 7) = v41;
              v512 = v36;
              LOWORD(v513) = 5;
              BYTE2(v513) = 0;
              WebCore::Style::Update::addElement(v35, (WebCore::Node *)v22, (WebCore::Node *)v33, &v512);
              v43 = v512;
              v512 = 0;
              if (v43)
              {
                WebCore::RenderStyle::~RenderStyle(v43, v42);
                if (*(_DWORD *)v44)
                {
                  *((_OWORD *)v44 + 2) = 0u;
                  *((_OWORD *)v44 + 3) = 0u;
                  *(_OWORD *)v44 = 0u;
                  *((_OWORD *)v44 + 1) = 0u;
                }
                else
                {
                  WTF::fastFree(v44, v42);
                }
              }
              WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v526, v42);
              goto LABEL_71;
            }
            v33 = *(_QWORD *)(v22 + 32);
            if (!v33)
              goto LABEL_63;
            v34 = *(_WORD *)(v33 + 28);
            if ((v34 & 0x80) == 0)
            {
              if ((v34 & 8) != 0)
              {
                if ((*(_QWORD *)(v33 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v103 = *(_QWORD *)((*(_QWORD *)(v33 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                  if (v103)
                  {
                    v456 = *(_QWORD *)(v103 + 224);
                    if (v456)
                      v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v456 + 16))(v456, v22);
                    else
LABEL_833:
                      v33 = 0;
                    goto LABEL_834;
                  }
                }
                goto LABEL_63;
              }
LABEL_240:
              v33 = 0;
              goto LABEL_63;
            }
            v125 = *(_QWORD *)(v33 + 200);
            if (!v125)
              goto LABEL_240;
          }
          v33 = *(_QWORD *)(v125 + 8);
          goto LABEL_63;
        }
        if ((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_24;
        v106 = *(_QWORD *)((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (!v106 || (*(_QWORD *)(v106 + 16) & 0x1FLL) != 0x12)
          goto LABEL_24;
LABEL_71:
        WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v526, v22);
        LOWORD(v512) = 0;
        v513 = v508;
        v515 = 0;
        v516 = v506;
        v517 = 16;
        v519 = 0;
        v520 = 0;
        v521 = v505;
        v522 = 16;
        v524 = 0;
        v525 = -1;
        v514 = 0x100000008;
        v45 = HIDWORD(v527);
        if (!HIDWORD(v527))
        {
LABEL_840:
          __break(0xC471u);
          JUMPOUT(0x19412F814);
        }
        v46 = HIDWORD(v527) - 1;
        v47 = *((_QWORD *)&v526 + 1);
        v48 = *((_QWORD *)&v526 + 1) + 584 * v46;
        v49 = 1;
        while (2)
        {
          v50 = v513;
          v51 = *(_QWORD *)v48;
          if (*(_QWORD *)v48 == *((_QWORD *)v513 + 73 * v49 - 73)
            || (v52 = *(_DWORD *)(v48 + 280)) == 0 && !*((_DWORD *)v513 + 146 * v49 - 76))
          {
            v107 = 0;
            v108 = 584 * v49;
            do
            {
              v109 = (char *)v50 + v107;
              v110 = *(WTF **)((char *)v50 + v107 + 296);
              if ((WTF *)((char *)v50 + v107 + 312) != v110 && v110 != 0)
              {
                *((_QWORD *)v109 + 37) = 0;
                *((_DWORD *)v109 + 76) = 0;
                WTF::fastFree(v110, v6);
              }
              v112 = (WTF *)*((_QWORD *)v109 + 1);
              if (v109 + 24 != (char *)v112 && v112 != 0)
              {
                *((_QWORD *)v109 + 1) = 0;
                *(_DWORD *)((char *)v50 + v107 + 16) = 0;
                WTF::fastFree(v112, v6);
              }
              v107 += 584;
            }
            while (v108 != v107);
            v114 = v513;
            if (v508 != v513 && v513)
            {
              v513 = 0;
              LODWORD(v514) = 0;
              WTF::fastFree(v114, v6);
            }
            v115 = (WTF *)*((_QWORD *)&v526 + 1);
            if (HIDWORD(v527))
            {
              v116 = 0;
              v117 = 584 * HIDWORD(v527);
              do
              {
                v118 = (char *)v115 + v116;
                v119 = *(WTF **)((char *)v115 + v116 + 296);
                if ((WTF *)((char *)v115 + v116 + 312) != v119 && v119 != 0)
                {
                  *((_QWORD *)v118 + 37) = 0;
                  *((_DWORD *)v118 + 76) = 0;
                  WTF::fastFree(v119, v6);
                }
                v121 = (WTF *)*((_QWORD *)v118 + 1);
                if (v118 + 24 != (char *)v121 && v121 != 0)
                {
                  *((_QWORD *)v118 + 1) = 0;
                  *(_DWORD *)((char *)v115 + v116 + 16) = 0;
                  WTF::fastFree(v121, v6);
                }
                v116 += 584;
              }
              while (v117 != v116);
              v115 = (WTF *)*((_QWORD *)&v526 + 1);
            }
            v123 = v504 == (WTF **)v115 || v115 == 0;
            v5 = v507;
            if (!v123)
            {
              *((_QWORD *)&v526 + 1) = 0;
              LODWORD(v527) = 0;
              WTF::fastFree(v115, v6);
            }
            goto LABEL_24;
          }
          v53 = *(unsigned __int16 *)(v51 + 28);
          if (v51 && (v53 & 8) != 0)
          {
            v54 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 64);
            if (!v54)
              goto LABEL_106;
            v55 = *(_DWORD *)(v54 - 8);
            v56 = (~(v51 << 32) + v51) ^ ((unint64_t)(~(v51 << 32) + v51) >> 22);
            v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
            v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
            v59 = v55 & ((v58 >> 31) ^ v58);
            v60 = (uint64_t *)(v54 + 24 * v59);
            v61 = *v60;
            if (*v60 == v51)
            {
LABEL_82:
              if (v60 == (uint64_t *)(v54 + 24 * *(unsigned int *)(v54 - 4)))
                goto LABEL_106;
              if (*((_BYTE *)v60 + 16) == 5)
                goto LABEL_84;
              *((_BYTE *)v60 + 16) = 5;
              goto LABEL_124;
            }
            v62 = 1;
            while (v61)
            {
              v59 = (v59 + v62) & v55;
              v60 = (uint64_t *)(v54 + 24 * v59);
              v61 = *v60;
              ++v62;
              if (*v60 == v51)
                goto LABEL_82;
            }
LABEL_106:
            if ((*(_QWORD *)(v51 + 64) & 0xFFFFFFFFFFFFLL) == 0)
            {
              if ((*(_QWORD *)(v51 + 72) & 0xFFFFFFFFFFFFLL) != 0)
              {
                v97 = *(_QWORD *)((*(_QWORD *)(v51 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
                if (v97)
                {
                  if ((*(_QWORD *)(v97 + 16) & 0x1FLL) == 0x12)
                    goto LABEL_124;
                }
              }
LABEL_84:
              while (1)
              {
                v51 = *(_QWORD *)(v51 + 56);
                if (!v51)
                  break;
                if ((*(_WORD *)(v51 + 28) & 0xA) != 0)
                {
                  *(_QWORD *)v48 = v51;
                  goto LABEL_87;
                }
              }
              v95 = *(unsigned int *)(v48 + 20);
              if (!(_DWORD)v95)
              {
                __break(0xC471u);
                JUMPOUT(0x19412FB78);
              }
              v96 = *(_QWORD *)(v48 + 8) + 16 * v95;
              v51 = *(_QWORD *)(v96 - 16);
              *(_QWORD *)v48 = v51;
              v52 = *(_DWORD *)(v96 - 8);
              *(_DWORD *)(v48 + 280) = v52;
              *(_DWORD *)(v48 + 20) = v95 - 1;
LABEL_87:
              if (v51 == *(_QWORD *)(v47 + 584 * v46 + 288) || !v52 && !*(_DWORD *)(v47 + 584 * v46 + 568))
                WebCore::ComposedTreeIterator::traverseNextLeavingContext((uint64_t)&v526, v6);
              goto LABEL_103;
            }
            if ((*(_BYTE *)((*(_QWORD *)(v51 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19412ED04);
            }
            *(_DWORD *)(v51 + 24) += 2;
            if ((v53 & 0x80) != 0)
            {
              v104 = *(_QWORD *)(v51 + 200);
              if (!v104)
                goto LABEL_186;
              goto LABEL_188;
            }
            if ((~v53 & 0x408) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 368))(v51))
            {
              v69 = *(_QWORD *)(v51 + 32);
              if (!v69)
                goto LABEL_115;
              v70 = *(_WORD *)(v69 + 28);
              if ((v70 & 0x80) == 0)
              {
                if ((v70 & 8) != 0)
                {
                  if ((*(_QWORD *)(v69 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    v98 = *(_QWORD *)((*(_QWORD *)(v69 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                    if (v98)
                    {
                      v446 = *(_QWORD *)(v98 + 224);
                      if (v446)
                        v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v446 + 16))(v446, v51);
                      else
LABEL_800:
                        v69 = 0;
                      goto LABEL_801;
                    }
                  }
                  goto LABEL_115;
                }
LABEL_186:
                v69 = 0;
                goto LABEL_115;
              }
              v104 = *(_QWORD *)(v69 + 200);
              if (!v104)
                goto LABEL_186;
LABEL_188:
              v69 = *(_QWORD *)(v104 + 8);
              goto LABEL_115;
            }
            v445 = *(_QWORD *)(v51 + 112);
            if (!v445)
              goto LABEL_800;
            v69 = *(_QWORD *)(v445 + 8);
LABEL_801:
            v5 = v507;
LABEL_115:
            if (*(_DWORD *)(v51 + 24) == 2)
            {
              if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v51);
            }
            else
            {
              *(_DWORD *)(v51 + 24) -= 2;
            }
            v71 = (uint64_t *)*((_QWORD *)v5 + 1);
            if ((*(_QWORD *)(v51 + 64) & 0xFFFFFFFFFFFFLL) != 0
              && (*(_BYTE *)((*(_QWORD *)(v51 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19412ED24);
            }
            WebCore::RenderStyle::cloneIncludingPseudoElements((WebCore::RenderStyle *)((*(_QWORD *)(v51 + 64) & 0xFFFFFFFFFFFFLL) + 80), v6, (uint64_t)v534);
            v72 = (WebCore::RenderElement *)WTF::fastMalloc((WTF *)0x40);
            *(_DWORD *)v72 = 0;
            v73 = v534[1];
            v534[1] = 0;
            *((_QWORD *)v72 + 1) = v73;
            *((_QWORD *)v72 + 2) = v535;
            v74 = v536;
            v536 = 0;
            *((_QWORD *)v72 + 3) = v74;
            v75 = v537;
            v537 = 0;
            *((_QWORD *)v72 + 4) = v75;
            *((_QWORD *)v72 + 5) = v538;
            v76 = v539;
            v539 = 0;
            *((_QWORD *)v72 + 6) = v76;
            v77 = v540;
            v540 = 0;
            *((_QWORD *)v72 + 7) = v77;
            v509 = v72;
            v510 = 5;
            v511 = 0;
            WebCore::Style::Update::addElement(v71, (WebCore::Node *)v51, (WebCore::Node *)v69, &v509);
            v79 = v509;
            v509 = 0;
            if (v79)
            {
              WebCore::RenderStyle::~RenderStyle(v79, v78);
              if (*(_DWORD *)v80)
              {
                *((_OWORD *)v80 + 2) = 0u;
                *((_OWORD *)v80 + 3) = 0u;
                *(_OWORD *)v80 = 0u;
                *((_OWORD *)v80 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v80, v78);
              }
            }
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v534, v78);
            v45 = HIDWORD(v527);
            if (!HIDWORD(v527))
            {
              __break(0xC471u);
              JUMPOUT(0x19412FAA4);
            }
            v47 = *((_QWORD *)&v526 + 1);
LABEL_124:
            v81 = v47 + 584 * v45 - 584;
            v82 = *(_QWORD *)v81;
            v83 = *(_WORD *)(*(_QWORD *)v81 + 28);
            if (*(_QWORD *)v81)
              v84 = (v83 & 8) == 0;
            else
              v84 = 1;
            if (!v84 && (*(_QWORD *)(v82 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v6 = *(WebCore::RenderObject **)((*(_QWORD *)(v82 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
              if (v6)
              {
                WebCore::ComposedTreeIterator::traverseShadowRoot((WebCore::ComposedTreeIterator *)&v526, v6);
                goto LABEL_103;
              }
            }
            if (v45 <= 1 && !(_BYTE)v526)
            {
              if ((v83 & 4) != 0)
              {
                v85 = *(_QWORD *)(v82 + 80);
                if (v85)
                {
                  do
                  {
                    if ((*(_WORD *)(v85 + 28) & 0xA) != 0)
                    {
                      v86 = v85;
                      goto LABEL_135;
                    }
                    v86 = 0;
                    v85 = *(_QWORD *)(v85 + 56);
                  }
                  while (v85);
                  goto LABEL_135;
                }
              }
              v86 = 0;
              v82 = *(_QWORD *)(v82 + 56);
              if (v82)
              {
                while ((*(_WORD *)(v82 + 28) & 0xA) == 0)
                {
LABEL_135:
                  v82 = *(_QWORD *)(v82 + 56);
                  if (!v82)
                    goto LABEL_149;
                }
                if (v86)
                {
                  v87 = (uint64_t *)(v81 + 8);
                  v534[0] = (WebCore::RenderObject *)v82;
                  LODWORD(v534[1]) = *(_DWORD *)(v81 + 280);
                  v88 = *(unsigned int *)(v81 + 20);
                  if ((_DWORD)v88 == *(_DWORD *)(v81 + 16))
                  {
                    v406 = (__int128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)v534);
                    v88 = *(unsigned int *)(v81 + 20);
                    v89 = *(_QWORD *)(v81 + 8);
                    v90 = *v406;
                  }
                  else
                  {
                    v89 = *v87;
                    v90 = *(_OWORD *)v534;
                  }
                  *(_OWORD *)(v89 + 16 * v88) = v90;
                  ++*(_DWORD *)(v81 + 20);
                  goto LABEL_141;
                }
                *(_QWORD *)v81 = v82;
              }
              else
              {
LABEL_149:
                if (!v86)
                {
                  v93 = *(unsigned int *)(v81 + 20);
                  if (!(_DWORD)v93)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19412FB70);
                  }
                  v94 = *(_QWORD *)(v81 + 8) + 16 * v93;
                  *(_QWORD *)v81 = *(_QWORD *)(v94 - 16);
                  *(_DWORD *)(v81 + 280) = *(_DWORD *)(v94 - 8);
                  *(_DWORD *)(v81 + 20) = v93 - 1;
                  goto LABEL_103;
                }
LABEL_141:
                ++*(_DWORD *)(v81 + 280);
                *(_QWORD *)v81 = v86;
              }
              goto LABEL_103;
            }
          }
          else if (v45 <= 1 && !(_BYTE)v526)
          {
            if ((v53 & 4) != 0)
            {
              v63 = *(_QWORD *)(v51 + 80);
              if (v63)
              {
                do
                {
                  if ((*(_WORD *)(v63 + 28) & 0xA) != 0)
                  {
                    v64 = v63;
                    goto LABEL_96;
                  }
                  v64 = 0;
                  v63 = *(_QWORD *)(v63 + 56);
                }
                while (v63);
                goto LABEL_96;
              }
            }
            v64 = 0;
            v51 = *(_QWORD *)(v51 + 56);
            if (v51)
            {
              while ((*(_WORD *)(v51 + 28) & 0xA) == 0)
              {
LABEL_96:
                v51 = *(_QWORD *)(v51 + 56);
                if (!v51)
                  goto LABEL_143;
              }
              if (!v64)
              {
                *(_QWORD *)v48 = v51;
                goto LABEL_103;
              }
              v65 = (uint64_t *)(v48 + 8);
              v534[0] = (WebCore::RenderObject *)v51;
              LODWORD(v534[1]) = v52;
              v66 = *(unsigned int *)(v48 + 20);
              if ((_DWORD)v66 == *(_DWORD *)(v48 + 16))
              {
                v394 = (__int128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)v534);
                v66 = *(unsigned int *)(v48 + 20);
                v67 = *(_QWORD *)(v48 + 8);
                v68 = *v394;
              }
              else
              {
                v67 = *v65;
                v68 = *(_OWORD *)v534;
              }
              *(_OWORD *)(v67 + 16 * v66) = v68;
              ++*(_DWORD *)(v48 + 20);
              v52 = *(_DWORD *)(v48 + 280);
            }
            else
            {
LABEL_143:
              if (!v64)
              {
                v91 = *(unsigned int *)(v48 + 20);
                if (!(_DWORD)v91)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412FB80);
                }
                v92 = *(_QWORD *)(v48 + 8) + 16 * v91;
                *(_QWORD *)v48 = *(_QWORD *)(v92 - 16);
                *(_DWORD *)(v48 + 280) = *(_DWORD *)(v92 - 8);
                *(_DWORD *)(v48 + 20) = v91 - 1;
                goto LABEL_103;
              }
            }
            *(_DWORD *)(v48 + 280) = v52 + 1;
            *(_QWORD *)v48 = v64;
LABEL_103:
            v45 = HIDWORD(v527);
            if (!HIDWORD(v527))
              goto LABEL_840;
            v49 = HIDWORD(v514);
            v46 = HIDWORD(v527) - 1;
            v47 = *((_QWORD *)&v526 + 1);
            v48 = *((_QWORD *)&v526 + 1) + 584 * v46;
            if (!HIDWORD(v514))
            {
              __break(0xC471u);
              JUMPOUT(0x19412F81CLL);
            }
            continue;
          }
          break;
        }
        WebCore::ComposedTreeIterator::traverseNextInShadowTree((WebCore::ComposedTreeIterator *)&v526, v6);
        goto LABEL_103;
      }
LABEL_24:
      v15 = (_QWORD *)v15[2];
    }
    while (v15);
    v16 = 1;
    v15 = v502;
    v14 = v503;
LABEL_10:
    while (v15)
    {
      v17 = (WTF *)v15;
      v15 = (_QWORD *)v15[2];
      v18 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      if (v18)
      {
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v18);
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
      }
      WTF::fastFree(v17, v6);
    }
    if (v14)
      WTF::fastFree((WebCore::RenderText *)((char *)v14 - 16), v6);
  }
  while ((v16 & 1) != 0);
  v126 = *((_QWORD *)v5 + 1);
  v127 = *(_QWORD **)(v126 + 80);
  if (v127)
  {
    v442 = *(_QWORD *)(*(_QWORD *)v5 + 1944);
    WebCore::RenderStyle::clone(v127, (uint64_t)&v526);
    WebCore::RenderElement::setStyle(v442, &v526, 0);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v526, v443);
    v126 = *((_QWORD *)v5 + 1);
  }
  v128 = *(WebCore ***)(v126 + 24);
  if (!v128)
    goto LABEL_690;
  v129 = (unsigned int *)((char *)v5 + 16);
  v500 = &v531;
  v505 = (WTF *)&v515;
  v501 = (WTF *)v523;
  v502 = v518;
  v498 = (WebCore::RenderElement *)((char *)v5 + 48);
  v497 = &v535;
  v506 = &v537;
  v508 = (WTF *)&v539;
  v499 = &v528;
  v130 = 72;
  while (2)
  {
    v504 = v128;
    v131 = *v128;
    if (*(_QWORD *)(*((_QWORD *)*v128 + 5) + 8) == *(_QWORD *)v5)
    {
      v132 = *((_QWORD *)v131 + 8) & 0xFFFFFFFFFFFFLL;
      if (v132)
      {
        if ((*(_BYTE *)((*((_QWORD *)v131 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19412F320);
        }
        v133 = 1;
        goto LABEL_253;
      }
      RenderingAncestor = WebCore::findRenderingAncestor(*v128, v6);
      if (RenderingAncestor)
      {
        v131 = (WebCore *)RenderingAncestor;
        v132 = *(_QWORD *)(RenderingAncestor + 64) & 0xFFFFFFFFFFFFLL;
        v133 = v132;
LABEL_253:
        if ((*((_WORD *)v131 + 14) & 8) != 0)
          v134 = v131;
        else
          v134 = 0;
        v526 = (unint64_t)v134;
        if (v133 && (*(_BYTE *)(v132 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19412F340);
        }
        v527 = v132;
        v528 = 0;
        LOBYTE(v529) = 0;
        LOBYTE(v530) = 1;
        LOBYTE(v531) = 0;
        v532 = 0;
        v533 = 0;
        v135 = *((unsigned int *)v5 + 7);
        if ((_DWORD)v135 == *((_DWORD *)v5 + 6))
        {
          v428 = WTF::Vector<WebCore::RenderTreeUpdater::Parent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129, v135 + 1, (unint64_t)&v526);
          LODWORD(v135) = *((_DWORD *)v5 + 7);
          v136 = *((_QWORD *)v5 + 2);
          v429 = v136 + 72 * v135;
          *(_OWORD *)v429 = *(_OWORD *)v428;
          *(_BYTE *)(v429 + 16) = 0;
          v430 = (_QWORD *)(v429 + 16);
          *(_BYTE *)(v429 + 40) = 0;
          v431 = (_BYTE *)(v429 + 40);
          if (*(_BYTE *)(v428 + 40))
          {
            *v430 = *(_QWORD *)(v428 + 16);
            v432 = v136 + 72 * v135;
            v433 = *(_QWORD *)(v428 + 24);
            *(_QWORD *)(v428 + 24) = 0;
            *(_QWORD *)(v432 + 24) = v433;
            *(_BYTE *)(v432 + 32) = *(_BYTE *)(v428 + 32);
            *v431 = 1;
          }
          v142 = *(_OWORD *)(v428 + 48);
          v143 = *(_BYTE *)(v428 + 64);
        }
        else
        {
          v136 = *(_QWORD *)v129;
          v137 = *(_QWORD *)v129 + 72 * v135;
          *(_OWORD *)v137 = v526;
          *(_BYTE *)(v137 + 16) = 0;
          v138 = (uint64_t *)(v137 + 16);
          *(_BYTE *)(v137 + 40) = 0;
          v139 = (_BYTE *)(v137 + 40);
          if ((_BYTE)v530)
          {
            *v138 = v527;
            v140 = v136 + 72 * v135;
            v141 = v528;
            v528 = 0;
            *(_QWORD *)(v140 + 24) = v141;
            *(_BYTE *)(v140 + 32) = v529;
            *v139 = 1;
          }
          v142 = *(_OWORD *)v500;
          v143 = *((_BYTE *)v500 + 16);
        }
        v144 = v136 + 72 * v135;
        *(_BYTE *)(v144 + 64) = v143;
        *(_OWORD *)(v144 + 48) = v142;
        ++*((_DWORD *)v5 + 7);
        if ((_BYTE)v530)
        {
          v145 = v528;
          v528 = 0;
          if (v145)
          {
            if (*(_DWORD *)v145 == 1)
              WTF::fastFree(v145, v6);
            else
              --*(_DWORD *)v145;
          }
        }
        WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v526, (uint64_t)v131);
        LOWORD(v512) = 0;
        v513 = v505;
        v515 = 0;
        v516 = (uint64_t *)v502;
        v517 = 16;
        v519 = 0;
        v520 = 0;
        v521 = v501;
        v522 = 16;
        v524 = 0;
        v525 = -1;
        v514 = 0x100000008;
        BYTE1(v526) = 1;
        v148 = HIDWORD(v527);
        if (!HIDWORD(v527))
        {
LABEL_916:
          __break(0xC471u);
          JUMPOUT(0x19412FCACLL);
        }
        v149 = *((_QWORD *)&v526 + 1);
        v150 = *((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 584;
        v151 = 1;
        while (2)
        {
          v152 = v513;
          if (*(_QWORD *)v150 == *((_QWORD *)v513 + 73 * v151 - 73)
            || !*(_DWORD *)(v150 + 280) && !*((_DWORD *)v513 + 146 * v151 - 76))
          {
            v331 = *((unsigned int *)v5 + 7);
            if (!(_DWORD)v331)
            {
LABEL_582:
              v332 = 0;
              v12 = 584 * v151;
              do
              {
                v333 = (char *)v152 + v332;
                v334 = *(WTF **)((char *)v152 + v332 + 296);
                if ((WTF *)((char *)v152 + v332 + 312) != v334 && v334 != 0)
                {
                  *((_QWORD *)v333 + 37) = 0;
                  *((_DWORD *)v333 + 76) = 0;
                  WTF::fastFree(v334, v6);
                }
                v336 = (WTF *)*((_QWORD *)v333 + 1);
                if (v333 + 24 != (char *)v336 && v336 != 0)
                {
                  *((_QWORD *)v333 + 1) = 0;
                  *(_DWORD *)((char *)v152 + v332 + 16) = 0;
                  WTF::fastFree(v336, v6);
                }
                v332 += 584;
              }
              while (v12 != v332);
              v152 = v513;
LABEL_595:
              if (v505 != v152 && v152)
              {
                v513 = 0;
                LODWORD(v514) = 0;
                WTF::fastFree(v152, v6);
              }
              v338 = (WTF *)*((_QWORD *)&v526 + 1);
              if (HIDWORD(v527))
              {
                v339 = 0;
                v12 = 584 * HIDWORD(v527);
                do
                {
                  v340 = (char *)v338 + v339;
                  v341 = *(WTF **)((char *)v338 + v339 + 296);
                  if ((WTF *)((char *)v338 + v339 + 312) != v341 && v341 != 0)
                  {
                    *((_QWORD *)v340 + 37) = 0;
                    *((_DWORD *)v340 + 76) = 0;
                    WTF::fastFree(v341, v6);
                  }
                  v343 = (WTF *)*((_QWORD *)v340 + 1);
                  if (v340 + 24 != (char *)v343 && v343 != 0)
                  {
                    *((_QWORD *)v340 + 1) = 0;
                    *(_DWORD *)((char *)v338 + v339 + 16) = 0;
                    WTF::fastFree(v343, v6);
                  }
                  v339 += 584;
                }
                while (v12 != v339);
                v338 = (WTF *)*((_QWORD *)&v526 + 1);
              }
              v345 = v499 == (WTF **)v338 || v338 == 0;
              v5 = v507;
              if (!v345)
              {
                *((_QWORD *)&v526 + 1) = 0;
                LODWORD(v527) = 0;
                WTF::fastFree(v338, v6);
              }
              goto LABEL_615;
            }
            while (2)
            {
              v354 = v331 - 1;
              v355 = (WTF::StringImpl **)(*(_QWORD *)v129 + 72 * v354);
              v356 = *v355;
              if (!*v355)
                goto LABEL_666;
              v357 = *(_QWORD *)v129 + 72 * v354;
              v12 = *(_QWORD *)(v357 + 8);
              if (v12)
                WebCore::RenderTreeUpdater::GeneratedContent::updatePseudoElement(*((uint64_t **)v5 + 4), *v355, *(WebCore::RenderTreeBuilder **)(v357 + 8), 7, v146, v147);
              v11 = *((_QWORD *)v356 + 8) & 0xFFFFFFFFFFFFLL;
              if (!v11)
                goto LABEL_666;
              v358 = *(_BYTE *)((*((_QWORD *)v356 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D);
              if ((v358 & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19412F490);
              }
              v359 = v12 && *(_BYTE *)(v12 + 9);
              v360 = (_QWORD *)*((_QWORD *)v5 + 4);
              LODWORD(v503) = v359;
              if ((v358 & 1) != 0)
                goto LABEL_661;
              v361 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
              if (!v361)
                goto LABEL_661;
              if ((*(_WORD *)(v361 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19412F4B0);
              }
              if ((*(_BYTE *)(v361 + 23) & 0x20) == 0)
              {
LABEL_661:
                WebCore::RenderElement::backdropRenderer(v11, v534);
                v365 = v534[0];
                if (!v534[0])
                  goto LABEL_662;
                v482 = (void *)*((_QWORD *)v534[0] + 1);
                if (v482)
                  WebCore::RenderTreeBuilder::destroy(*v360 + 48, (uint64_t)v482, 1, v362, v363, v364);
                if (*(_DWORD *)v365 == 1)
                  WTF::fastFree(v365, v482);
                else
                  --*(_DWORD *)v365;
LABEL_903:
                v5 = v507;
LABEL_662:
                v366 = v503;
                WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(*((_QWORD **)v5 + 4), v11, v503);
                v130 = 72;
                if (*(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v356 + 5) + 8) + 1272) == v356)
                  WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementTree(*((WebCore::RenderTreeUpdater::ViewTransition **)v5 + 5), (WebCore::RenderElement *)v11, v366, v368, v369, v370);
                WebCore::RenderTreeBuilder::updateAfterDescendants((WebCore::RenderTreeBuilder::SVG **)v498, (WebCore::RenderElement *)v11, v367, v368, v369, v370);
                if (v12 && (*((_WORD *)v356 + 14) & 0x400) != 0 && *(_BYTE *)(v12 + 8) == 5)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v356 + 1048))(v356);
LABEL_666:
                v371 = *((unsigned int *)v5 + 7);
                v372 = 72 * v371;
                while (1)
                {
                  v373 = v372 - 72;
                  if (!v372)
                    break;
                  v374 = *(unsigned __int8 *)(*(_QWORD *)v129 + v372 - 32);
                  v372 -= 72;
                  if (v374)
                  {
                    v375 = *(_QWORD *)v129 + v373;
                    goto LABEL_670;
                  }
                }
                if (!*((_DWORD *)v5 + 7))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412FF7CLL);
                }
                v375 = *(_QWORD *)v129 + 72 * v371 - 72;
                v5 = v507;
                v130 = 72;
LABEL_670:
                if (v355 != (WTF::StringImpl **)v375)
                {
                  *(_BYTE *)(WebCore::RenderTreeUpdater::renderTreePosition((uint64_t)v5) + 16) = 0;
                  v371 = *((unsigned int *)v5 + 7);
                }
                if (!v371)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412FF74);
                }
                v376 = v371 - 1;
                if (*(_BYTE *)(*(_QWORD *)v129 + 72 * (v371 - 1) + 40))
                {
                  v377 = *(_QWORD *)v129 + 72 * v376;
                  v378 = *(WTF **)(v377 + 24);
                  *(_QWORD *)(v377 + 24) = 0;
                  if (v378)
                  {
                    if (*(_DWORD *)v378 == 1)
                      WTF::fastFree(v378, v6);
                    else
                      --*(_DWORD *)v378;
                  }
                }
                v331 = v376;
                *((_DWORD *)v5 + 7) = v376;
                if (!(_DWORD)v376)
                {
                  v151 = HIDWORD(v514);
                  v152 = v513;
                  if (!HIDWORD(v514))
                    goto LABEL_595;
                  goto LABEL_582;
                }
                continue;
              }
              break;
            }
            v477 = v360;
            LODWORD(v534[0]) = 9;
            v478 = (WebCore::RenderObject *)*MEMORY[0x1E0CBF2F8];
            if (*MEMORY[0x1E0CBF2F8])
              *(_DWORD *)v478 += 2;
            v534[1] = v478;
            CachedPseudoStyle = (_QWORD *)WebCore::RenderElement::getCachedPseudoStyle(v11, (uint64_t)v534, v11 + 80);
            v481 = v534[1];
            v534[1] = 0;
            if (v481)
            {
              if (*(_DWORD *)v481 == 2)
                WTF::StringImpl::destroy(v481, v479);
              else
                *(_DWORD *)v481 -= 2;
            }
            if (!CachedPseudoStyle || (CachedPseudoStyle[2] & 0x1FLL) == 0x1A)
            {
              WebCore::RenderTreeUpdater::GeneratedContent::updateBackdropRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(v11, v360);
              goto LABEL_903;
            }
            WebCore::RenderStyle::clone(CachedPseudoStyle, (uint64_t)v534);
            WebCore::RenderElement::backdropRenderer(v11, &v509);
            v483 = v509;
            if (v509)
            {
              v495 = *((_QWORD *)v509 + 1);
              if (v495)
              {
                WebCore::RenderElement::setStyle(v495, v534, v503);
                goto LABEL_921;
              }
            }
            v484 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40) + 8);
            v485 = (WebCore::RenderBlockFlow *)bmalloc::api::isoAllocate();
            WebCore::RenderBlockFlow::RenderBlockFlow((uint64_t)v485, 1, v484, v534, 0);
            WebCore::RenderElement::initializeStyle(v486, v487, v488, v489);
            WebCore::RenderElement::setBackdropRenderer((WebCore::RenderElement *)v11, v485);
            v490 = *v477 + 48;
            v491 = *(WebCore::RenderTable **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40)
                                                        + 8)
                                            + 1944);
            v542[0] = (unint64_t)v485;
            WebCore::RenderTreeBuilder::attach(v490, v491, v542);
            v492 = (void *)v542[0];
            v542[0] = 0;
            if (v492)
              WebCore::RenderObjectDeleter::operator()((uint64_t)v542, (uint64_t)v492);
            if (v483)
            {
LABEL_921:
              if (*(_DWORD *)v483 == 1)
                WTF::fastFree(v483, v492);
              else
                --*(_DWORD *)v483;
            }
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v534, v492);
            goto LABEL_903;
          }
          LODWORD(v153) = 0;
          v154 = 584 * v148;
          v155 = (_DWORD *)(v149 + 280);
          do
          {
            LODWORD(v153) = *v155 + v153;
            v155 += 146;
            v154 -= 584;
          }
          while (v154);
          v156 = *((unsigned int *)v5 + 7);
          if (v156 <= v153)
            goto LABEL_273;
          do
          {
            v319 = v156 - 1;
            v156 = *(_QWORD *)v129 + 72 * v319;
            v157 = *(WTF::StringImpl **)v156;
            if (*(_QWORD *)v156)
            {
              v320 = *(_QWORD *)v129 + 72 * v319;
              v12 = *(_QWORD *)(v320 + 8);
              if (v12)
                WebCore::RenderTreeUpdater::GeneratedContent::updatePseudoElement(*((uint64_t **)v5 + 4), *(WTF::StringImpl **)v156, *(WebCore::RenderTreeBuilder **)(v320 + 8), 7, v146, v147);
              v11 = *((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL;
              if (v11)
              {
                if ((*(_BYTE *)((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412F230);
                }
                v130 = v12 && *(_BYTE *)(v12 + 9);
                if ((*(_BYTE *)((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 1) != 0)
                  goto LABEL_1034;
                v321 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8);
                if (!v321)
                  goto LABEL_1034;
                if ((*(_WORD *)(v321 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412F250);
                }
                if ((*(_BYTE *)(v321 + 23) & 0x20) != 0)
                {
                  v503 = (WebCore::RenderText *)*((_QWORD *)v5 + 4);
                  LODWORD(v534[0]) = 9;
                  v450 = (WebCore::RenderObject *)*MEMORY[0x1E0CBF2F8];
                  if (*MEMORY[0x1E0CBF2F8])
                    *(_DWORD *)v450 += 2;
                  v534[1] = v450;
                  v452 = (_QWORD *)WebCore::RenderElement::getCachedPseudoStyle(v11, (uint64_t)v534, v11 + 80);
                  v453 = v534[1];
                  v534[1] = 0;
                  if (v453)
                  {
                    if (*(_DWORD *)v453 == 2)
                      WTF::StringImpl::destroy(v453, v451);
                    else
                      *(_DWORD *)v453 -= 2;
                  }
                  if (v452 && (v452[2] & 0x1FLL) != 0x1A)
                  {
                    WebCore::RenderStyle::clone(v452, (uint64_t)v534);
                    WebCore::RenderElement::backdropRenderer(v11, &v509);
                    v5 = v509;
                    if (v509 && (v494 = *((_QWORD *)v509 + 1)) != 0)
                    {
                      WebCore::RenderElement::setStyle(v494, v534, v130);
                    }
                    else
                    {
                      v496 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40) + 8);
                      v468 = (WebCore::RenderBlockFlow *)bmalloc::api::isoAllocate();
                      WebCore::RenderBlockFlow::RenderBlockFlow((uint64_t)v468, 1, v496, v534, 0);
                      WebCore::RenderElement::initializeStyle(v469, v470, v471, v472);
                      WebCore::RenderElement::setBackdropRenderer((WebCore::RenderElement *)v11, v468);
                      v473 = *(_QWORD *)v503 + 48;
                      v474 = *(WebCore::RenderTable **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8)
                                                                              + 40)
                                                                  + 8)
                                                      + 1944);
                      v542[0] = (unint64_t)v468;
                      WebCore::RenderTreeBuilder::attach(v473, v474, v542);
                      v6 = (WebCore::RenderObject *)v542[0];
                      v542[0] = 0;
                      if (v6)
                        WebCore::RenderObjectDeleter::operator()((uint64_t)v542, (uint64_t)v6);
                      if (!v5)
                        goto LABEL_862;
                    }
                    if (*(_DWORD *)v5 == 1)
                      goto LABEL_913;
                    --*(_DWORD *)v5;
LABEL_862:
                    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v534, v6);
                  }
                  else
                  {
                    WebCore::RenderTreeUpdater::GeneratedContent::updateBackdropRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(v11, v503);
                  }
                }
                else
                {
LABEL_1034:
                  if ((*(_BYTE *)((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x40) != 0)
                  {
                    v457 = (WebCore::RenderObject *)(*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL);
                    v503 = (WebCore::RenderText *)*((_QWORD *)v5 + 4);
                    v458 = WebCore::RenderObject::rareData(v457);
                    v462 = *(_DWORD **)(v458 + 16);
                    if (v462)
                    {
                      v463 = *(WTF **)(v458 + 16);
                      v464 = *v462 + 1;
                      *(_DWORD *)v463 = v464;
                      v465 = (void *)*((_QWORD *)v463 + 1);
                      if (v465)
                      {
                        WebCore::RenderTreeBuilder::destroy(*(_QWORD *)v503 + 48, (uint64_t)v465, 1, v459, v460, v461);
                        v464 = *(_DWORD *)v463;
                      }
                      v466 = v464 - 1;
                      if (v466)
                        *(_DWORD *)v463 = v466;
                      else
                        WTF::fastFree(v463, v465);
                    }
                  }
                }
                v5 = v507;
                WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(*((_QWORD **)v507 + 4), v11, v130);
                if (*(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v157 + 5) + 8) + 1272) == v157)
                  WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementTree(*((WebCore::RenderTreeUpdater::ViewTransition **)v5 + 5), (WebCore::RenderElement *)v11, v130, v322, v146, v147);
                v323 = *(unsigned __int8 *)(v11 + 46);
                if (v323 == 83)
                {
                  WebCore::RenderTreeBuilder::SVG::updateAfterDescendants(*((WebCore::RenderTreeBuilder::SVG **)v5 + 18), (WebCore::RenderSVGRoot *)v11, v7);
                }
                else
                {
                  if ((*(_BYTE *)(v11 + 45) & 0x40) != 0)
                  {
                    if ((*(_BYTE *)(v11 + 102) & 2) != 0)
                    {
                      v454 = (uint64_t **)*((_QWORD *)v5 + 9);
                      if (v323 == 2
                        || (v323 != 85 ? (v467 = (*(_BYTE *)(v11 + 52) & 7) == 1) : (v467 = 0),
                            v467 && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v11 + 136))(v11)))
                      {
                        v534[0] = 0;
                        v509 = 0;
                        WebCore::RenderBlock::getFirstLetter(v11, v534, &v509, 0);
                        v7 = v534[0];
                        if (v534[0] && v509 == (WebCore::RenderElement *)v11)
                        {
                          if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v534[0] + 4) + 8) + 96) & 0xF80000000000) == 0x100000000000)
                          {
                            WebCore::RenderTreeBuilder::FirstLetter::updateStyle(v454, (WebCore::RenderBlock *)v11, v534[0]);
                          }
                          else if ((*((_BYTE *)v534[0] + 45) & 2) != 0)
                          {
                            WebCore::RenderTreeBuilder::FirstLetter::createRenderers((uint64_t)v454, v534[0]);
                          }
                        }
                        v5 = v507;
                      }
                    }
                    v323 = *(unsigned __int8 *)(v11 + 46);
                  }
                  if (v323 == 19)
                    WebCore::RenderTreeBuilder::List::updateItemMarker(*((WebCore::RenderTreeBuilder::List **)v5 + 10), (WebCore::RenderListItem *)v11, (uint64_t)v7, v322, v146, v147);
                  if ((*(_BYTE *)(v11 + 52) & 7) == 1)
                  {
                    v315 = (uint64_t **)*((_QWORD *)v5 + 11);
                    v316 = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v11 + 1920))(v11, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 32) + 24) + 8));
                    v317 = *(_QWORD *)(v11 + 224);
                    v318 = !v317 || (v407 = *(_QWORD *)(v317 + 24)) == 0 || *(_QWORD *)(v407 + 8) == 0;
                    if ((v318 & v316) == 1)
                    {
                      WebCore::RenderTreeBuilder::MultiColumn::createFragmentedFlow(v315, (WebCore::RenderBlockFlow *)v11);
                    }
                    else if (((v318 | v316) & 1) == 0)
                    {
                      WebCore::RenderTreeBuilder::MultiColumn::destroyFragmentedFlow(v315, (WebCore::RenderBlockFlow *)v11);
                    }
                  }
                }
                v130 = 72;
                if (v12 && (*((_WORD *)v157 + 14) & 0x400) != 0 && *(_BYTE *)(v12 + 8) == 5)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v157 + 1048))(v157);
              }
            }
            v324 = *((unsigned int *)v5 + 7);
            v325 = 72 * v324;
            while (1)
            {
              v326 = v325 - 72;
              if (!v325)
                break;
              v327 = *(unsigned __int8 *)(*(_QWORD *)v129 + v325 - 32);
              v325 -= 72;
              if (v327)
              {
                v328 = *(_QWORD *)v129 + v326;
                goto LABEL_570;
              }
            }
            if (!*((_DWORD *)v5 + 7))
            {
              __break(0xC471u);
              JUMPOUT(0x19412FE44);
            }
            v328 = *(_QWORD *)v129 + 72 * v324 - 72;
            v5 = v507;
            v130 = 72;
LABEL_570:
            if (v156 != v328)
            {
              *(_BYTE *)(WebCore::RenderTreeUpdater::renderTreePosition((uint64_t)v5) + 16) = 0;
              v324 = *((unsigned int *)v5 + 7);
            }
            if (!v324)
            {
              __break(0xC471u);
              JUMPOUT(0x19412FE34);
            }
            v156 = v324 - 1;
            if (*(_BYTE *)(*(_QWORD *)v129 + 72 * (v324 - 1) + 40))
            {
              v329 = *(_QWORD *)v129 + 72 * v156;
              v330 = *(WTF **)(v329 + 24);
              *(_QWORD *)(v329 + 24) = 0;
              if (v330)
              {
                if (*(_DWORD *)v330 == 1)
                  WTF::fastFree(v330, v6);
                else
                  --*(_DWORD *)v330;
              }
            }
            *((_DWORD *)v5 + 7) = v156;
          }
          while (v153 < v156);
          v148 = HIDWORD(v527);
          if (!HIDWORD(v527))
          {
            __break(0xC471u);
            JUMPOUT(0x19412FE3CLL);
          }
LABEL_273:
          v157 = *(WTF::StringImpl **)(*((_QWORD *)&v526 + 1) + 584 * v148 - 584);
          if ((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) == 0)
          {
            if ((*((_WORD *)v157 + 14) & 8) != 0 && (*((_QWORD *)v157 + 9) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v158 = *(_QWORD *)((*((_QWORD *)v157 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
              if (v158)
              {
                if ((*(_QWORD *)(v158 + 16) & 0x1FLL) == 0x12)
                {
                  v449 = (_BYTE *)(WebCore::RenderTreeUpdater::renderTreePosition((uint64_t)v5) + 16);
                  goto LABEL_744;
                }
              }
            }
            goto LABEL_285;
          }
          v159 = 72 * v156;
          while (1)
          {
            v160 = v159 - 72;
            if (!v159)
              break;
            v161 = *(unsigned __int8 *)(*(_QWORD *)v129 + v159 - 32);
            v159 -= 72;
            if (v161)
            {
              v162 = *(_QWORD *)v129 + v160;
              goto LABEL_283;
            }
          }
          if (!(_DWORD)v156)
          {
            __break(0xC471u);
            JUMPOUT(0x19412FE80);
          }
          v162 = *(_QWORD *)v129 + 72 * v156 - 72;
          v5 = v507;
          v130 = 72;
LABEL_283:
          if (!*(_BYTE *)(v162 + 40))
            goto LABEL_912;
          v449 = (_BYTE *)(v162 + 32);
          if (*(_BYTE *)(v162 + 32))
          {
            v425 = *(_QWORD *)(v162 + 24);
            if (v425)
            {
              if (*(_QWORD *)(v425 + 8) == (*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL))
LABEL_744:
                *v449 = 0;
            }
          }
LABEL_285:
          v163 = *((_WORD *)v157 + 14);
          if (!v157 || (v163 & 2) == 0)
          {
            if ((v163 & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19412EFC4);
            }
            v11 = *((_QWORD *)v157 + 6);
            if ((v11 & 0x8000000000000) != 0)
            {
              *((_QWORD *)v157 + 6) = v11 & 0xFFF7FFFFFFFFFFFFLL;
              v252 = (WebCore::RenderObject *)(*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL);
              if (v252)
              {
                if ((*(_BYTE *)((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412F300);
                }
                if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v157 + 5) + 8) + 680) + 680) & 0x800000000000) != 0)
                {
                  WebCore::RenderObject::setNeedsLayout(v252, 1);
                }
                else
                {
                  v534[0] = 0;
                  v534[1] = 0;
                  WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded((uint64_t)v252, (uint64_t *)1, (uint64_t)v534);
                  v253 = v534[0];
                  if (v534[0])
                  {
                    v288 = *((unsigned int *)v534[0] - 1);
                    if ((_DWORD)v288)
                    {
                      v289 = (WTF **)v534[0];
                      do
                      {
                        v290 = *v289;
                        if (*v289 != (WTF *)-1)
                        {
                          *v289 = 0;
                          if (v290)
                          {
                            if (*(_DWORD *)v290 == 1)
                              WTF::fastFree(v290, v6);
                            else
                              --*(_DWORD *)v290;
                          }
                        }
                        ++v289;
                        --v288;
                      }
                      while (v288);
                    }
                    WTF::fastFree((WebCore::RenderObject *)((char *)v253 - 16), v6);
                    v130 = 72;
                  }
                }
              }
            }
            v164 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 64);
            if (!v164)
              goto LABEL_1035;
            v165 = *(_DWORD *)(v164 - 8);
            v166 = ((unint64_t)v157 + ~((_QWORD)v157 << 32)) ^ (((unint64_t)v157 + ~((_QWORD)v157 << 32)) >> 22);
            v167 = 9 * ((v166 + ~(v166 << 13)) ^ ((v166 + ~(v166 << 13)) >> 8));
            v168 = (v167 ^ (v167 >> 15)) + ~((v167 ^ (v167 >> 15)) << 27);
            v169 = v165 & ((v168 >> 31) ^ v168);
            v170 = (WTF::StringImpl **)(v164 + 24 * v169);
            v171 = *v170;
            if (*v170 != v157)
            {
              v172 = 1;
              while (v171)
              {
                v169 = (v169 + v172) & v165;
                v170 = (WTF::StringImpl **)(v164 + 24 * v169);
                v171 = *v170;
                ++v172;
                if (*v170 == v157)
                  goto LABEL_296;
              }
              v170 = (WTF::StringImpl **)(v164 + 24 * *(unsigned int *)(v164 - 4));
            }
LABEL_296:
            if (v170 != (WTF::StringImpl **)(v164 + 24 * *(unsigned int *)(v164 - 4)))
            {
              v12 = (uint64_t)(v170 + 1);
              WebCore::RenderTreeUpdater::updateElementRenderer((uint64_t)v5, (uint64_t)v157, (uint64_t)(v170 + 1));
              v156 = 0;
              v174 = *((_QWORD *)v157 + 8);
            }
            else
            {
LABEL_1035:
              v173 = (*((_QWORD *)v157 + 9) & 0xFFFFFFFFFFFFLL) != 0
                  && (v205 = *(_QWORD *)((*((_QWORD *)v157 + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
                  && (*(_QWORD *)(v205 + 16) & 0x1FLL) == 18;
              v12 = 0;
              v174 = *((_QWORD *)v157 + 8);
              v156 = 1;
              if ((v11 & 0x8000000000000) == 0 && !v173)
              {
                v175 = v174 & 0xFFFFFFFFFFFFLL;
                if ((v174 & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v185 = *((unsigned int *)v5 + 7);
                  v186 = 72 * v185;
                  while (1)
                  {
                    v187 = v186 - 72;
                    if (!v186)
                      break;
                    v188 = *(_QWORD *)v129;
                    v189 = *(unsigned __int8 *)(*(_QWORD *)v129 + v186 - 32);
                    v186 -= 72;
                    if (v189)
                    {
                      v190 = v188 + v187;
                      goto LABEL_327;
                    }
                  }
                  if (!(_DWORD)v185)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19412FEB0);
                  }
                  v188 = *(_QWORD *)v129;
                  v190 = *(_QWORD *)v129 + 72 * v185 - 72;
                  v5 = v507;
                  v130 = 72;
LABEL_327:
                  *(_QWORD *)(v190 + 56) = v175;
                  v191 = *(_DWORD *)(v175 + 20);
                  if ((v191 & 0x800) == 0 && (v191 & 0x1800000) != 0x1000000)
                  {
                    v192 = (unsigned __int8 *)(v188 + 72 * v185 - 32);
                    v193 = v185;
                    while (v193)
                    {
                      --v193;
                      v194 = *v192;
                      v192 -= 72;
                      if (v194)
                        goto LABEL_332;
                    }
                    if (!(_DWORD)v185)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19412FEB8);
                    }
                    v193 = v185 - 1;
                    v5 = v507;
                    v130 = 72;
LABEL_332:
                    *(_BYTE *)(v188 + 72 * v193 + 64) = 1;
                  }
                }
                if (!HIDWORD(v527))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412FDBCLL);
                }
                v176 = HIDWORD(v527) - 1;
                v177 = *((_QWORD *)&v526 + 1);
                v178 = *((_QWORD *)&v526 + 1) + 584 * v176;
                v179 = *(_QWORD *)v178;
                while (1)
                {
                  v179 = *(_QWORD *)(v179 + 56);
                  if (!v179)
                    break;
                  if ((*(_WORD *)(v179 + 28) & 0xA) != 0)
                    goto LABEL_306;
                }
                v206 = *(unsigned int *)(v178 + 20);
                if (!(_DWORD)v206)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412FE4CLL);
                }
                goto LABEL_356;
              }
            }
            v180 = v174 & 0xFFFFFFFFFFFFLL;
            if (!v180)
            {
              if ((*((_QWORD *)v157 + 9) & 0xFFFFFFFFFFFFLL) == 0)
                goto LABEL_315;
              v254 = *(_QWORD *)((*((_QWORD *)v157 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
              if (!v254 || (*(_QWORD *)(v254 + 16) & 0x1FLL) != 0x12)
                goto LABEL_315;
              v255 = *((unsigned int *)v5 + 7);
              v256 = 72 * v255;
              while (1)
              {
                v257 = v256 - 72;
                if (!v256)
                  break;
                v258 = *(unsigned __int8 *)(*(_QWORD *)v129 + v256 - 32);
                v256 -= 72;
                if (v258)
                {
                  v259 = *(_QWORD *)v129 + v257;
                  goto LABEL_427;
                }
              }
              if (!(_DWORD)v255)
              {
                __break(0xC471u);
                JUMPOUT(0x19412FE70);
              }
              v259 = *(_QWORD *)v129 + 72 * v255 - 72;
              v5 = v507;
              v130 = 72;
LABEL_427:
              if (*(_BYTE *)(v259 + 40))
              {
                v11 = *(_QWORD *)(v259 + 16);
                if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 128))(v11) & 1) == 0
                  && ((~*((unsigned __int16 *)v157 + 14) & 0x408) != 0
                   || !(*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v157 + 368))(v157)
                   || !(*(unsigned int (**)(unint64_t))(*(_QWORD *)v11 + 136))(v11)))
                {
                  goto LABEL_315;
                }
                if ((*(_BYTE *)(v11 + 45) & 1) == 0)
                {
                  v260 = *(_WORD **)(*(_QWORD *)(v11 + 24) + 8);
                  if (v260)
                  {
                    if ((v260[14] & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19412F380);
                    }
                    if (((*(uint64_t (**)(_WORD *, WTF::StringImpl *))(*(_QWORD *)v260 + 968))(v260, v157) & 1) == 0)
                      goto LABEL_315;
                  }
                }
LABEL_372:
                v534[0] = v157;
                v534[1] = (WebCore::RenderObject *)v12;
                v220 = *((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL;
                if (v220)
                {
                  if ((*(_BYTE *)((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19412F2C0);
                  }
                  v535 = *((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL;
                  v536 = 0;
                  v221 = 1;
                  v222 = v506;
                }
                else
                {
                  v221 = 0;
                  v222 = v497;
                }
                *(_BYTE *)v222 = 0;
                LOBYTE(v538) = v221;
                LOBYTE(v539) = 0;
                v540 = 0;
                v11 = (unint64_t)v534;
                v541 = 0;
                v223 = *((unsigned int *)v5 + 7);
                if ((_DWORD)v223 == *((_DWORD *)v5 + 6))
                {
                  v396 = WTF::Vector<WebCore::RenderTreeUpdater::Parent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129, v223 + 1, (unint64_t)v534);
                  v397 = *((_DWORD *)v5 + 7);
                  v398 = *((_QWORD *)v5 + 2);
                  v399 = v398 + 72 * v397;
                  *(_OWORD *)v399 = *(_OWORD *)v396;
                  *(_BYTE *)(v399 + 16) = 0;
                  v400 = (_QWORD *)(v399 + 16);
                  *(_BYTE *)(v399 + 40) = 0;
                  v401 = (_BYTE *)(v399 + 40);
                  if (*(_BYTE *)(v396 + 40))
                  {
                    *v400 = *(_QWORD *)(v396 + 16);
                    v402 = v398 + 72 * v397;
                    v403 = *(_QWORD *)(v396 + 24);
                    *(_QWORD *)(v396 + 24) = 0;
                    *(_QWORD *)(v402 + 24) = v403;
                    *(_BYTE *)(v402 + 32) = *(_BYTE *)(v396 + 32);
                    *v401 = 1;
                  }
                  v404 = v398 + 72 * v397;
                  v405 = *(_OWORD *)(v396 + 48);
                  *(_BYTE *)(v404 + 64) = *(_BYTE *)(v396 + 64);
                  *(_OWORD *)(v404 + 48) = v405;
                  v221 = v538;
                }
                else
                {
                  v224 = *(_QWORD *)v129;
                  *(_OWORD *)(v224 + 72 * v223) = *(_OWORD *)v534;
                  v225 = v224 + 72 * v223;
                  *(_BYTE *)(v225 + 16) = 0;
                  v226 = (uint64_t *)(v225 + 16);
                  *(_BYTE *)(v225 + 40) = 0;
                  v227 = (_BYTE *)(v225 + 40);
                  if (v220)
                  {
                    *v226 = v535;
                    v228 = v224 + 72 * v223;
                    v536 = 0;
                    *(_QWORD *)(v228 + 24) = 0;
                    *(_BYTE *)(v228 + 32) = v537;
                    *v227 = 1;
                  }
                  v229 = *(_OWORD *)v508;
                  v230 = v224 + 72 * v223;
                  *(_BYTE *)(v230 + 64) = *((_BYTE *)v508 + 16);
                  *(_OWORD *)(v230 + 48) = v229;
                }
                ++*((_DWORD *)v5 + 7);
                if (v221)
                {
                  v231 = v536;
                  v536 = 0;
                  if (v231)
                  {
                    if (*(_DWORD *)v231 == 1)
                      WTF::fastFree(v231, v6);
                    else
                      --*(_DWORD *)v231;
                  }
                }
                if ((v156 & 1) == 0)
                  WebCore::RenderTreeUpdater::GeneratedContent::updatePseudoElement(*((uint64_t **)v5 + 4), v157, (WebCore::RenderTreeBuilder *)v12, 6, v146, v147);
                if ((*((_QWORD *)v157 + 9) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v263 = *(_QWORD *)((*((_QWORD *)v157 + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
                  if (v263)
                  {
                    v379 = *(_QWORD *)(v263 + 64) & 0xFFFFFFFFFFFFLL;
                    if (v379)
                    {
                      v408 = *((unsigned int *)v5 + 7);
                      v409 = 72 * v408;
                      while (1)
                      {
                        v410 = v409 - 72;
                        if (!v409)
                          break;
                        v411 = *(_QWORD *)v129;
                        v412 = *(unsigned __int8 *)(*(_QWORD *)v129 + v409 - 32);
                        v409 -= 72;
                        if (v412)
                        {
                          v413 = v411 + v410;
                          goto LABEL_724;
                        }
                      }
                      if (!(_DWORD)v408)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19412FF08);
                      }
                      v411 = *(_QWORD *)v129;
                      v413 = *(_QWORD *)v129 + 72 * v408 - 72;
                      v5 = v507;
                      v130 = 72;
LABEL_724:
                      *(_QWORD *)(v413 + 56) = v379;
                      v414 = *(_DWORD *)(v379 + 20);
                      if ((v414 & 0x800) == 0 && (v414 & 0x1800000) != 0x1000000)
                      {
                        v415 = (unsigned __int8 *)(v411 + 72 * v408 - 32);
                        v416 = v408;
                        while (v416)
                        {
                          --v416;
                          v417 = *v415;
                          v415 -= 72;
                          if (v417)
                            goto LABEL_729;
                        }
                        if (!(_DWORD)v408)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19412FF54);
                        }
                        v416 = v408 - 1;
                        v5 = v507;
                        v130 = 72;
LABEL_729:
                        *(_BYTE *)(v411 + 72 * v416 + 64) = 1;
                      }
                    }
                  }
                }
                if (!HIDWORD(v527))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412FE54);
                }
                v232 = *((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 584;
                v233 = *(_QWORD *)v232;
                v234 = *(_WORD *)(*(_QWORD *)v232 + 28);
                if (*(_QWORD *)v232)
                  v235 = (v234 & 8) == 0;
                else
                  v235 = 1;
                if (!v235
                  && (*(_QWORD *)(v233 + 72) & 0xFFFFFFFFFFFFLL) != 0
                  && (v6 = *(WebCore::RenderObject **)((*(_QWORD *)(v233 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
                {
                  WebCore::ComposedTreeIterator::traverseShadowRoot((WebCore::ComposedTreeIterator *)&v526, v6);
                }
                else if (HIDWORD(v527) > 1 || (_BYTE)v526)
                {
                  WebCore::ComposedTreeIterator::traverseNextInShadowTree((WebCore::ComposedTreeIterator *)&v526, v6);
                }
                else
                {
                  if ((v234 & 4) != 0)
                  {
                    v236 = *(_QWORD *)(v233 + 80);
                    if (v236)
                    {
                      do
                      {
                        if ((*(_WORD *)(v236 + 28) & 0xA) != 0)
                        {
                          v237 = v236;
                          break;
                        }
                        v237 = 0;
                        v236 = *(_QWORD *)(v236 + 56);
                      }
                      while (v236);
                    }
                    else
                    {
                      v237 = 0;
                    }
                  }
                  else
                  {
                    v237 = 0;
                  }
                  while (1)
                  {
                    v233 = *(_QWORD *)(v233 + 56);
                    if (!v233)
                      break;
                    if ((*(_WORD *)(v233 + 28) & 0xA) != 0)
                    {
                      if (v237)
                      {
                        v238 = (uint64_t *)(*((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 576);
                        v534[0] = (WebCore::RenderObject *)v233;
                        LODWORD(v534[1]) = *(_DWORD *)(*((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 304);
                        v239 = *(unsigned int *)(*((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 564);
                        if ((_DWORD)v239 == *(_DWORD *)(*((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 568))
                        {
                          v441 = (__int128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v238, v239 + 1, (unint64_t)v534);
                          v239 = *(unsigned int *)(v232 + 20);
                          v240 = *(_QWORD *)(v232 + 8);
                          v241 = *v441;
                        }
                        else
                        {
                          v240 = *v238;
                          v241 = *(_OWORD *)v534;
                        }
                        *(_OWORD *)(v240 + 16 * v239) = v241;
                        ++*(_DWORD *)(v232 + 20);
                        goto LABEL_404;
                      }
                      *(_QWORD *)v232 = v233;
                      goto LABEL_309;
                    }
                  }
                  if (v237)
                  {
LABEL_404:
                    ++*(_DWORD *)(v232 + 280);
                    *(_QWORD *)v232 = v237;
                    goto LABEL_309;
                  }
                  v281 = *(unsigned int *)(*((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 564);
                  if (!(_DWORD)v281)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19412FED0);
                  }
                  v282 = *(_QWORD *)(*((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 576) + 16 * v281;
                  *(_QWORD *)v232 = *(_QWORD *)(v282 - 16);
                  *(_DWORD *)(v232 + 280) = *(_DWORD *)(v282 - 8);
                  *(_DWORD *)(v232 + 20) = v281 - 1;
                }
LABEL_309:
                v148 = HIDWORD(v527);
                if (!HIDWORD(v527))
                  goto LABEL_916;
                v151 = HIDWORD(v514);
                v149 = *((_QWORD *)&v526 + 1);
                v150 = *((_QWORD *)&v526 + 1) + 584 * HIDWORD(v527) - 584;
                if (!HIDWORD(v514))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412FCB4);
                }
                continue;
              }
LABEL_912:
              __break(1u);
LABEL_913:
              WTF::fastFree(v5, v6);
              goto LABEL_862;
            }
            v208 = *((unsigned int *)v5 + 7);
            v209 = 72 * v208;
            while (1)
            {
              v210 = v209 - 72;
              if (!v209)
                break;
              v211 = *(_QWORD *)v129;
              v212 = *(unsigned __int8 *)(*(_QWORD *)v129 + v209 - 32);
              v209 -= 72;
              if (v212)
              {
                v213 = v211 + v210;
                goto LABEL_361;
              }
            }
            if (!(_DWORD)v208)
            {
              __break(0xC471u);
              JUMPOUT(0x19412FEC0);
            }
            v211 = *(_QWORD *)v129;
            v213 = *(_QWORD *)v129 + 72 * v208 - 72;
            v5 = v507;
            v130 = 72;
LABEL_361:
            *(_QWORD *)(v213 + 56) = v180;
            v214 = *(_DWORD *)(v180 + 20);
            if ((v214 & 0x800) == 0 && (v214 & 0x1800000) != 0x1000000)
            {
              v215 = (unsigned __int8 *)(v211 + 72 * v208 - 32);
              v216 = v208;
              while (v216)
              {
                --v216;
                v217 = *v215;
                v215 -= 72;
                if (v217)
                  goto LABEL_366;
              }
              if (!(_DWORD)v208)
              {
                __break(0xC471u);
                JUMPOUT(0x19412FEC8);
              }
              v216 = v208 - 1;
              v5 = v507;
              v130 = 72;
LABEL_366:
              *(_BYTE *)(v211 + 72 * v216 + 64) = 1;
            }
            if ((*(_BYTE *)(v180 + 45) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19412F2E0);
            }
            if ((*((_BYTE *)v157 + 23) & 0x20) == 0)
              goto LABEL_372;
            v218 = *(_QWORD *)(v180 + 32);
            if (!v218)
              goto LABEL_372;
            v219 = *(_QWORD *)(v218 + 8);
            if (!v219 || (*(_BYTE *)(*(_QWORD *)(v219 + 104) + 239) & 0x18) == 0)
              goto LABEL_372;
LABEL_315:
            if (!HIDWORD(v527))
            {
              __break(0xC471u);
              JUMPOUT(0x19412FE5CLL);
            }
            v181 = HIDWORD(v527) - 1;
            v182 = *((_QWORD *)&v526 + 1);
            v183 = *((_QWORD *)&v526 + 1) + 584 * v181;
            v184 = *(_QWORD *)v183;
            while (1)
            {
              v184 = *(_QWORD *)(v184 + 56);
              if (!v184)
                break;
              if ((*(_WORD *)(v184 + 28) & 0xA) != 0)
              {
                *(_QWORD *)v183 = v184;
                goto LABEL_320;
              }
            }
            v261 = *(unsigned int *)(v183 + 20);
            if (!(_DWORD)v261)
            {
              __break(0xC471u);
              JUMPOUT(0x19412FE78);
            }
            v262 = *(_QWORD *)(v183 + 8) + 16 * v261;
            v184 = *(_QWORD *)(v262 - 16);
            *(_QWORD *)v183 = v184;
            *(_DWORD *)(v183 + 280) = *(_DWORD *)(v262 - 8);
            *(_DWORD *)(v183 + 20) = v261 - 1;
LABEL_320:
            if (v184 != *(_QWORD *)(v182 + 584 * v181 + 288))
            {
              if (*(_DWORD *)(v183 + 280))
                goto LABEL_309;
              v434 = v182 + 584 * v181;
              goto LABEL_731;
            }
            goto LABEL_437;
          }
          break;
        }
        v195 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 72);
        if (v195)
        {
          v291 = *(_DWORD *)(v195 - 8);
          v292 = ((unint64_t)v157 + ~((_QWORD)v157 << 32)) ^ (((unint64_t)v157 + ~((_QWORD)v157 << 32)) >> 22);
          v293 = 9 * ((v292 + ~(v292 << 13)) ^ ((v292 + ~(v292 << 13)) >> 8));
          v294 = (v293 ^ (v293 >> 15)) + ~((v293 ^ (v293 >> 15)) << 27);
          v295 = v291 & ((v294 >> 31) ^ v294);
          v296 = *(WTF::StringImpl **)(v195 + 32 * v295);
          if (v296 != v157)
          {
            v297 = 1;
            while (v296)
            {
              v295 = ((_DWORD)v295 + v297) & v291;
              v296 = *(WTF::StringImpl **)(v195 + 32 * v295);
              ++v297;
              if (v296 == v157)
                goto LABEL_503;
            }
            v295 = *(unsigned int *)(v195 - 4);
          }
LABEL_503:
          v298 = *(unsigned int *)(v195 - 4);
          v299 = v195 + 32 * v295 + 8;
          if (v295 == v298)
            v130 = 0;
          else
            v130 = v299;
        }
        else
        {
          v130 = 0;
        }
        v156 = *((unsigned int *)v5 + 7);
        if (!(_DWORD)v156)
        {
          __break(0xC471u);
          JUMPOUT(0x19412FE2CLL);
        }
        v196 = v156 - 1;
        v153 = *(_QWORD *)v129;
        v197 = *(_QWORD *)(*(_QWORD *)v129 + 72 * (v156 - 1) + 8);
        if (v197)
          v198 = *(_BYTE *)(v197 + 8) == 5;
        else
          v198 = 0;
        v199 = (unsigned __int8 *)(v153 + 72 * v156 - 32);
        v200 = v199;
        v201 = *((unsigned int *)v5 + 7);
        while (v201)
        {
          --v201;
          v202 = *v200;
          v200 -= 72;
          if (v202)
            goto LABEL_341;
        }
        v201 = v156 - 1;
LABEL_341:
        if (!*(_BYTE *)(v153 + 72 * v201 + 48))
        {
          v203 = 0;
          goto LABEL_343;
        }
        v305 = *((unsigned __int16 *)v157 + 15);
        if ((v305 & 0x100) != 0)
        {
          v203 = (v305 >> 7) & 1;
          goto LABEL_343;
        }
        v392 = *((_QWORD *)v157 + 10);
        if (v392)
        {
          v313 = *(unsigned __int8 **)(v392 + 8);
          v314 = *(unsigned int *)(v392 + 4);
          if ((*(_BYTE *)(v392 + 16) & 4) != 0)
          {
            if (!(_DWORD)v314)
              goto LABEL_707;
            while (1)
            {
              v310 = *v313;
              v284 = v310 > 0x20;
              v311 = (1 << v310) & 0x100003600;
              if (v284 || v311 == 0)
                break;
              ++v313;
              if (!--v314)
                goto LABEL_707;
            }
LABEL_768:
            v203 = 0;
            v393 = v305 & 0xFF7F;
LABEL_708:
            *((_WORD *)v157 + 15) = v393 | 0x100;
LABEL_343:
            if (v130)
              v198 = 1;
            if (!v198 && !v203)
            {
LABEL_347:
              v204 = *((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL;
              v130 = 72;
              if (v204)
              {
                v242 = *((unsigned int *)v5 + 7);
                v243 = 72 * v242;
                while (1)
                {
                  v244 = v243 - 72;
                  if (!v243)
                    break;
                  v245 = *(_QWORD *)v129;
                  v246 = *(unsigned __int8 *)(*(_QWORD *)v129 + v243 - 32);
                  v243 -= 72;
                  if (v246)
                  {
                    v247 = v245 + v244;
                    goto LABEL_409;
                  }
                }
                if (!(_DWORD)v242)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412FE90);
                }
                v245 = *(_QWORD *)v129;
                v247 = *(_QWORD *)v129 + 72 * v242 - 72;
                v5 = v507;
                v130 = 72;
LABEL_409:
                *(_QWORD *)(v247 + 56) = v204;
                v248 = *(_DWORD *)(v204 + 20);
                if ((v248 & 0x800) == 0 && (v248 & 0x1800000) != 0x1000000)
                {
                  v249 = (unsigned __int8 *)(v245 + 72 * v242 - 32);
                  v250 = v242;
                  while (v250)
                  {
                    --v250;
                    v251 = *v249;
                    v249 -= 72;
                    if (v251)
                      goto LABEL_414;
                  }
                  if (!(_DWORD)v242)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19412FE98);
                  }
                  v250 = v242 - 1;
                  v5 = v507;
                  v130 = 72;
LABEL_414:
                  *(_BYTE *)(v245 + 72 * v250 + 64) = 1;
                }
              }
              if (!HIDWORD(v527))
              {
                __break(0xC471u);
                JUMPOUT(0x19412FE24);
              }
              v176 = HIDWORD(v527) - 1;
              v177 = *((_QWORD *)&v526 + 1);
              v178 = *((_QWORD *)&v526 + 1) + 584 * v176;
              v179 = *(_QWORD *)v178;
              while (1)
              {
                v179 = *(_QWORD *)(v179 + 56);
                if (!v179)
                  break;
                if ((*(_WORD *)(v179 + 28) & 0xA) != 0)
                {
LABEL_306:
                  *(_QWORD *)v178 = v179;
                  goto LABEL_307;
                }
              }
              v206 = *(unsigned int *)(v178 + 20);
              if (!(_DWORD)v206)
              {
                __break(0xC471u);
                JUMPOUT(0x19412FE88);
              }
LABEL_356:
              v207 = *(_QWORD *)(v178 + 8) + 16 * v206;
              v179 = *(_QWORD *)(v207 - 16);
              *(_QWORD *)v178 = v179;
              *(_DWORD *)(v178 + 280) = *(_DWORD *)(v207 - 8);
              *(_DWORD *)(v178 + 20) = v206 - 1;
LABEL_307:
              if (v179 != *(_QWORD *)(v177 + 584 * v176 + 288))
              {
                if (*(_DWORD *)(v178 + 280))
                  goto LABEL_309;
                v434 = v177 + 584 * v176;
LABEL_731:
                if (*(_DWORD *)(v434 + 568))
                  goto LABEL_309;
              }
LABEL_437:
              WebCore::ComposedTreeIterator::traverseNextLeavingContext((uint64_t)&v526, v6);
              goto LABEL_309;
            }
            if ((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) != 0
              && (*(_BYTE *)((*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19412F4D0);
            }
            while (v156)
            {
              --v156;
              v264 = *v199;
              v199 -= 72;
              if (v264)
                goto LABEL_445;
            }
            v156 = v196;
            if (!*(_BYTE *)(v153 + 72 * v196 + 40))
              goto LABEL_912;
LABEL_445:
            v503 = (WebCore::RenderText *)(*((_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFLL);
            v11 = *(_QWORD *)(v153 + 72 * v156 + 16);
            if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)v11 + 128))(v11))
              goto LABEL_686;
            if ((*(_BYTE *)(v11 + 45) & 1) == 0)
            {
              v265 = *(_WORD **)(*(_QWORD *)(v11 + 24) + 8);
              if (v265)
              {
                if ((v265[14] & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19412F360);
                }
                if (!(*(unsigned int (**)(_WORD *, WTF::StringImpl *))(*(_QWORD *)v265 + 968))(v265, v157))
                {
LABEL_686:
                  v12 = 0;
                  goto LABEL_456;
                }
              }
            }
            if ((~*((unsigned __int16 *)v157 + 14) & 0x202) == 0)
            {
              v12 = 1;
              goto LABEL_456;
            }
            v266 = *((_QWORD *)v157 + 10);
            if (!v266)
              goto LABEL_523;
            v267 = *(unsigned int *)(v266 + 4);
            if (!(_DWORD)v267)
              goto LABEL_523;
            v268 = *((_WORD *)v157 + 15);
            if ((v268 & 0x100) == 0)
            {
              v287 = *(unsigned __int8 **)(v266 + 8);
              if ((*(_BYTE *)(v266 + 16) & 4) != 0)
              {
                while (1)
                {
                  v283 = *v287;
                  v284 = v283 > 0x20;
                  v285 = (1 << v283) & 0x100003600;
                  if (v284 || v285 == 0)
                    break;
                  ++v287;
                  if (!--v267)
                  {
LABEL_680:
                    *((_WORD *)v157 + 15) = v268 | 0x180;
                    goto LABEL_506;
                  }
                }
              }
              else
              {
                v309 = 2 * v267;
                while (1)
                {
                  v306 = *(unsigned __int16 *)v287;
                  v284 = v306 > 0x20;
                  v307 = (1 << v306) & 0x100003600;
                  if (v284 || v307 == 0)
                    break;
                  v287 += 2;
                  v309 -= 2;
                  if (!v309)
                    goto LABEL_680;
                }
              }
              *((_WORD *)v157 + 15) = v268 & 0xFE7F | 0x100;
              goto LABEL_455;
            }
            if ((v268 & 0x80) == 0)
              goto LABEL_455;
LABEL_506:
            v300 = *(_QWORD *)(v153 + 72 * v156 + 56);
            if (v300 && (*(_BYTE *)(v300 + 45) & 2) != 0)
            {
LABEL_455:
              v12 = 1;
              goto LABEL_456;
            }
            if ((v301 = *(unsigned __int8 *)(v11 + 46), (v301 - 11) < 0x35)
              && ((0x10000039000003uLL >> (v301 - 11)) & 1) != 0
              || (v302 = *(char *)(v11 + 45), v301 != 2) && v302 < 0)
            {
LABEL_523:
              v12 = 0;
              goto LABEL_456;
            }
            v303 = *(_DWORD *)(v11 + 120);
            v304 = (v303 >> 27) & 7;
            if ((v303 & 0x40000000) == 0 && v304 == 3)
              goto LABEL_455;
            if (!v304
              || ((v426 = v303 & 0x40000000, v12 = 1, v426) ? (v427 = 1) : (v427 = 2),
                  v304 != v427 && (v304 != 1) | (v426 >> 30) & 1))
            {
              if (v300)
              {
                if (*(_BYTE *)(v300 + 46) == 17)
                {
                  if ((*(_BYTE *)(v300 + 52) & 7) != 2)
                  {
                    v12 = 0;
                    v5 = v507;
                    goto LABEL_456;
                  }
                  v5 = v507;
                  if ((*(_BYTE *)(v300 + 53) & 1) == 0)
                    goto LABEL_523;
                }
                if ((v302 & 0x20) != 0)
                {
                  v435 = *(_DWORD *)(v300 + 20);
                  if ((v435 & 1) == 0 || (v435 & 0x1800000) == 0x1000000)
                    goto LABEL_455;
                  goto LABEL_523;
                }
              }
              else if ((v302 & 0x20) != 0)
              {
                goto LABEL_455;
              }
              if ((v302 & 0x40) != 0 && (*(_BYTE *)(v11 + 22) & 4) == 0 && (!v300 || (*(_BYTE *)(v300 + 20) & 1) != 0))
                goto LABEL_523;
              v12 = *(_BYTE *)(v153 + 72 * v156 + 64) != 0;
            }
LABEL_456:
            v269 = (WTF **)v503;
            if (v503)
            {
              if (v130)
              {
                if (*(_BYTE *)(v130 + 16))
                {
                  if (WebCore::RenderText::inlineWrapperForDisplayContents(v503))
                    goto LABEL_813;
                  if (!*(_BYTE *)(v130 + 16))
                    goto LABEL_912;
                  v5 = v507;
                  v269 = (WTF **)v503;
                  if (*(_QWORD *)(v130 + 8))
                  {
LABEL_813:
                    WebCore::RenderTreeUpdater::tearDownTextRenderer((uint64_t)v157, 0, v498, 1, v146, v147);
                    goto LABEL_457;
                  }
                }
                if ((v12 & 1) != 0)
                {
                  WebCore::RenderText::setTextWithOffset(v269, (const WTF::StringImpl **)v157 + 10, (const WTF::StringImpl *)*(unsigned int *)v130, *(_DWORD *)(v130 + 4), 0);
                  goto LABEL_347;
                }
              }
              else if ((v12 & 1) != 0)
              {
                goto LABEL_347;
              }
              WebCore::RenderTreeUpdater::tearDownTextRenderer((uint64_t)v157, 0, v498, 1, v146, v147);
              v436 = *((unsigned int *)v5 + 7);
              v437 = 72 * v436;
              while (1)
              {
                v438 = v437 - 72;
                if (!v437)
                  break;
                v439 = *(unsigned __int8 *)(*(_QWORD *)v129 + v437 - 32);
                v437 -= 72;
                if (v439)
                {
                  v440 = *(_QWORD *)v129 + v438;
                  goto LABEL_785;
                }
              }
              if (!(_DWORD)v436)
              {
                __break(0xC471u);
                JUMPOUT(0x19412FFB8);
              }
              v440 = *(_QWORD *)v129 + 72 * v436 - 72;
              v5 = v507;
LABEL_785:
              *(_BYTE *)(v440 + 48) = 1;
              goto LABEL_347;
            }
LABEL_457:
            if (!(_DWORD)v12)
              goto LABEL_347;
            v270 = *((unsigned int *)v5 + 7);
            v271 = 72 * v270;
            while (1)
            {
              v272 = v271 - 72;
              if (!v271)
                break;
              v273 = *(unsigned __int8 *)(*(_QWORD *)v129 + v271 - 32);
              v271 -= 72;
              if (v273)
              {
                v156 = *(_QWORD *)v129 + v272;
                goto LABEL_462;
              }
            }
            if (!(_DWORD)v270)
            {
              __break(0xC471u);
              JUMPOUT(0x19412FEA0);
            }
            v156 = *(_QWORD *)v129 + 72 * v270 - 72;
            v5 = v507;
LABEL_462:
            if (!*(_BYTE *)(v156 + 40))
              goto LABEL_912;
            WebCore::Text::createTextRenderer(v157, (const WebCore::RenderStyle *)(*(_QWORD *)(v156 + 16) + 80), &v509);
            if (*(_BYTE *)(v156 + 32))
            {
LABEL_464:
              v12 = (uint64_t)v509;
              if ((*(unsigned int (**)(_QWORD, WebCore::RenderElement *, uint64_t))(**(_QWORD **)(v156 + 16)
                                                                                             + 664))(*(_QWORD *)(v156 + 16), v509, *(_QWORD *)(v156 + 16) + 80))
              {
                *((_QWORD *)v157 + 8) = v12 | ((unint64_t)*((unsigned __int16 *)v157 + 35) << 48);
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  WebCore::Node::notifyInspectorOfRendererChange(v157);
                if (v130 && *(_BYTE *)(v130 + 16) && (v418 = *(_QWORD **)(v130 + 8)) != 0)
                {
                  v419 = *(_QWORD *)(*((_QWORD *)v157 + 5) + 8);
                  WebCore::RenderStyle::clone(v418, (uint64_t)v534);
                  v12 = bmalloc::api::isoAllocate();
                  WebCore::RenderInline::RenderInline(v12, 16, v419, v534);
                  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v534, v420);
                  WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v12, v421, v422, v423);
                  v534[0] = (WebCore::RenderObject *)v12;
                  WebCore::RenderTreeBuilder::attach((uint64_t)v498, *(WebCore::RenderTable **)(v156 + 16), (unint64_t *)v534);
                  if (v534[0])
                    WebCore::RenderObjectDeleter::operator()((uint64_t)v534, (uint64_t)v534[0]);
                  v11 = (unint64_t)v509;
                  WebCore::RenderText::setInlineWrapperForDisplayContents(v509, (WebCore::RenderInline *)v12);
                  v542[0] = v11;
                  WebCore::RenderTreeBuilder::attach((uint64_t)v498, (WebCore::RenderTable *)v12, v542);
                  v6 = (WebCore::RenderObject *)v542[0];
                  v5 = v507;
                  if (v542[0])
                  {
                    v424 = (WebCore::RenderElement **)v542;
                    goto LABEL_811;
                  }
                }
                else
                {
                  v534[0] = v509;
                  WebCore::RenderTreeBuilder::attach((uint64_t)v498, *(WebCore::RenderTable **)(v156 + 16), (unint64_t *)v534);
                  v6 = v534[0];
                  if (v534[0])
                    WebCore::RenderObjectDeleter::operator()((uint64_t)v534, (uint64_t)v534[0]);
                  v275 = *(_QWORD *)(*(_QWORD *)v5 + 3040);
                  if (v275)
                    WebCore::TextManipulationController::didAddOrCreateRendererForNode(v275, v157);
                }
              }
              else if (v12)
              {
                v424 = &v509;
                v6 = (WebCore::RenderObject *)v12;
LABEL_811:
                WebCore::RenderObjectDeleter::operator()((uint64_t)v424, (uint64_t)v6);
              }
              v276 = *((unsigned int *)v5 + 7);
              v277 = 72 * v276;
              while (1)
              {
                v278 = v277 - 72;
                if (!v277)
                  break;
                v279 = *(unsigned __int8 *)(*(_QWORD *)v129 + v277 - 32);
                v277 -= 72;
                if (v279)
                {
                  v280 = *(_QWORD *)v129 + v278;
                  goto LABEL_476;
                }
              }
              if (!(_DWORD)v276)
              {
                __break(0xC471u);
                JUMPOUT(0x19412FEA8);
              }
              v280 = *(_QWORD *)v129 + 72 * v276 - 72;
              v5 = v507;
LABEL_476:
              *(_BYTE *)(v280 + 48) = 1;
              goto LABEL_347;
            }
            SiblingRenderer = WebCore::RenderTreePosition::nextSiblingRenderer(*(WebCore::RenderTreePosition **)(v156 + 16), v157);
            if (!SiblingRenderer)
            {
LABEL_620:
              v349 = *(WTF **)(v156 + 24);
              *(_QWORD *)(v156 + 24) = SiblingRenderer;
              if (v349)
              {
                if (*(_DWORD *)v349 == 1)
                  WTF::fastFree(v349, v348);
                else
                  --*(_DWORD *)v349;
              }
              *(_BYTE *)(v156 + 32) = 1;
              goto LABEL_464;
            }
            v476 = SiblingRenderer;
            SiblingRenderer = *(_QWORD *)(SiblingRenderer + 8);
            if (SiblingRenderer)
              goto LABEL_883;
            SiblingRenderer = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)SiblingRenderer = 1;
            *(_QWORD *)(SiblingRenderer + 8) = v476;
            v493 = *(WTF **)(v476 + 8);
            *(_QWORD *)(v476 + 8) = SiblingRenderer;
            if (!v493)
              goto LABEL_883;
            if (*(_DWORD *)v493 != 1)
            {
              --*(_DWORD *)v493;
              goto LABEL_883;
            }
            WTF::fastFree(v493, v348);
            SiblingRenderer = *(_QWORD *)(v476 + 8);
            if (SiblingRenderer)
LABEL_883:
              ++*(_DWORD *)SiblingRenderer;
            v5 = v507;
            goto LABEL_620;
          }
          if ((_DWORD)v314)
          {
            v353 = 2 * v314;
            do
            {
              v350 = *(unsigned __int16 *)v313;
              v284 = v350 > 0x20;
              v351 = (1 << v350) & 0x100003600;
              if (v284 || v351 == 0)
                goto LABEL_768;
              v313 += 2;
              v353 -= 2;
            }
            while (v353);
          }
        }
LABEL_707:
        v393 = v305 | 0x80;
        v203 = 1;
        goto LABEL_708;
      }
    }
LABEL_615:
    v128 = (WebCore **)v504[2];
    if (v128)
      continue;
    break;
  }
LABEL_690:
  v380 = (WTF **)*((_QWORD *)v5 + 4);
  v381 = *(_QWORD *)*v380;
  if (*(_BYTE *)(*(_QWORD *)(v381 + 1944) + 408))
  {
    WebCore::RenderTreeUpdater::GeneratedContent::updateQuotesUpTo(*((_QWORD **)v5 + 4), 0, v7);
    v444 = v380[1];
    v380[1] = 0;
    if (v444)
    {
      if (*(_DWORD *)v444 == 1)
        WTF::fastFree(v444, v6);
      else
        --*(_DWORD *)v444;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)*v380 + 1944) + 408) = 0;
    v380 = (WTF **)*((_QWORD *)v507 + 4);
    v381 = *(_QWORD *)*v380;
  }
  WebCore::RenderTreeUpdater::GeneratedContent::updateCounters(void)::$_0::operator()(*(_QWORD **)(v381 + 1944), v6);
  WebCore::RenderTreeUpdater::GeneratedContent::updateCounters(void)::$_0::operator()(*(_QWORD **)(*(_QWORD *)*v380 + 1944), v382);
  v383 = v507;
  WebCore::RenderTreeBuilder::updateAfterDescendants((WebCore::RenderTreeBuilder::SVG **)v507 + 6, *(WebCore::RenderElement **)(*(_QWORD *)v507 + 1944), v384, v385, v386, v387);
  v389 = (WebCore::Style::Update *)*((_QWORD *)v383 + 1);
  *((_QWORD *)v383 + 1) = 0;
  if (v389)
  {
    WebCore::Style::Update::~Update(v389, v388);
    if (*(_DWORD *)v390)
    {
      *(_QWORD *)(v390 + 80) = 0;
      *(_OWORD *)(v390 + 48) = 0u;
      *(_OWORD *)(v390 + 64) = 0u;
      *(_OWORD *)(v390 + 16) = 0u;
      *(_OWORD *)(v390 + 32) = 0u;
      *(_OWORD *)v390 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v390, v391);
    }
  }
  return kdebug_trace();
}

void WebCore::Style::Update::~Update(WebCore::Style::Update *this, void *a2)
{
  WebCore::RenderStyle *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  WebCore::RenderStyle *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  WebCore::RenderStyle *v23;
  WTF *v24;
  uint64_t v25;

  v3 = (WebCore::RenderStyle *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    WebCore::RenderStyle::~RenderStyle(v3, a2);
    if (*(_DWORD *)v4)
    {
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v4, a2);
    }
  }
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v21 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v21)
    {
      v22 = (uint64_t *)*((_QWORD *)this + 9);
      do
      {
        if (*v22 != -1)
        {
          if (*((_BYTE *)v22 + 24))
          {
            v23 = (WebCore::RenderStyle *)v22[2];
            v22[2] = 0;
            if (v23)
            {
              WebCore::RenderStyle::~RenderStyle(v23, a2);
              if (*(_DWORD *)v24)
              {
                *((_OWORD *)v24 + 2) = 0u;
                *((_OWORD *)v24 + 3) = 0u;
                *(_OWORD *)v24 = 0u;
                *((_OWORD *)v24 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v24, a2);
              }
            }
          }
          v25 = *v22;
          *v22 = 0;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
        }
        v22 += 4;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)*((_QWORD *)this + 8);
      do
      {
        if (*v8 != -1)
        {
          v9 = (WebCore::RenderStyle *)v8[1];
          v8[1] = 0;
          if (v9)
          {
            WebCore::RenderStyle::~RenderStyle(v9, a2);
            if (*(_DWORD *)v10)
            {
              *((_OWORD *)v10 + 2) = 0u;
              *((_OWORD *)v10 + 3) = 0u;
              *(_OWORD *)v10 = 0u;
              *((_OWORD *)v10 + 1) = 0u;
            }
            else
            {
              WTF::fastFree(v10, a2);
            }
          }
          v11 = *v8;
          *v8 = 0;
          if (v11)
          {
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v11);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
          }
        }
        v8 += 3;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 6);
  while (v12)
  {
    v19 = v12;
    v12 = (WTF *)*((_QWORD *)v12 + 2);
    v20 = *(_QWORD *)v19;
    *(_QWORD *)v19 = 0;
    if (v20)
    {
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
    }
    WTF::fastFree(v19, a2);
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
    WTF::fastFree((WTF *)(v13 - 16), a2);
  v14 = (WTF *)*((_QWORD *)this + 3);
  while (v14)
  {
    v15 = v14;
    v14 = (WTF *)*((_QWORD *)v14 + 2);
    v16 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0;
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
    WTF::fastFree(v15, a2);
  }
  v17 = *((_QWORD *)this + 2);
  if (v17)
    WTF::fastFree((WTF *)(v17 - 16), a2);
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WebCore::RenderStyle *v6;
  WTF *v7;
  uint64_t v8;
  WebCore::RenderStyle *v9;
  WTF *v10;
  uint64_t v11;
  WebCore::RenderStyle *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD **v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v49;
  WTF *v50;
  uint64_t v52;
  WTF *v53;
  uint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  unsigned int *v58;
  _DWORD *v59;
  unint64_t v60;
  unsigned int *v61;
  _DWORD *v62;
  unint64_t v63;
  unsigned int *v64;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_DWORD *)(a1 + 112 * i) != -1)
      {
        v5 = a1 + 112 * i;
        v6 = *(WebCore::RenderStyle **)(v5 + 104);
        *(_QWORD *)(v5 + 104) = 0;
        if (v6)
        {
          WebCore::RenderStyle::~RenderStyle(v6, a2);
          if (*(_DWORD *)v7)
          {
            *((_OWORD *)v7 + 2) = 0u;
            *((_OWORD *)v7 + 3) = 0u;
            *(_OWORD *)v7 = 0u;
            *((_OWORD *)v7 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v7, a2);
          }
        }
        v8 = a1 + 112 * i;
        v9 = *(WebCore::RenderStyle **)(v8 + 96);
        *(_QWORD *)(v8 + 96) = 0;
        if (v9)
        {
          WebCore::RenderStyle::~RenderStyle(v9, a2);
          if (*(_DWORD *)v10)
          {
            *((_OWORD *)v10 + 2) = 0u;
            *((_OWORD *)v10 + 3) = 0u;
            *(_OWORD *)v10 = 0u;
            *((_OWORD *)v10 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v10, a2);
          }
        }
        v11 = a1 + 112 * i;
        v12 = *(WebCore::RenderStyle **)(v11 + 88);
        *(_QWORD *)(v11 + 88) = 0;
        if (v12)
        {
          WebCore::RenderStyle::~RenderStyle(v12, a2);
          if (*(_DWORD *)v13)
          {
            *((_OWORD *)v13 + 2) = 0u;
            *((_OWORD *)v13 + 3) = 0u;
            *(_OWORD *)v13 = 0u;
            *((_OWORD *)v13 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v13, a2);
          }
        }
        v14 = v5 + 8;
        v15 = *(WTF **)(v5 + 64);
        if ((WTF *)(v5 + 80) != v15 && v15 != 0)
        {
          *(_QWORD *)(v5 + 64) = 0;
          *(_DWORD *)(v5 + 72) = 0;
          WTF::fastFree(v15, a2);
        }
        v17 = *(unsigned int *)(v5 + 60);
        if ((_DWORD)v17)
        {
          v23 = *(uint64_t **)(v5 + 48);
          v24 = &v23[2 * v17];
          do
          {
            v25 = *v23;
            *v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 1)
              {
                v29 = *(unsigned int *)(v25 + 4);
                if ((v29 & 8) != 0)
                {
                  v30 = *(unsigned int *)(v25 + 28);
                  if ((_DWORD)v30)
                  {
                    v28 = 16 * v30;
                    v27 = (_DWORD **)(*(_QWORD *)(v25 + 16) + 8);
                    do
                    {
                      v26 = *v27;
                      *v27 = 0;
                      if (v26)
                      {
                        if (*v26 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, (WTF::StringImpl *)a2);
                        else
                          *v26 -= 2;
                      }
                      v27 += 2;
                      v28 -= 16;
                    }
                    while (v28);
                  }
                  v47 = *(WTF **)(v25 + 16);
                  if ((WTF *)(v25 + 32) != v47 && v47 != 0)
                  {
                    *(_QWORD *)(v25 + 16) = 0;
                    *(_DWORD *)(v25 + 24) = 0;
                    WTF::fastFree(v47, a2);
                  }
                  v49 = *(_QWORD *)(v25 + 8);
                  *(_QWORD *)(v25 + 8) = 0;
                  if (v49)
                    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
                }
                else if (v29 >= 0x10)
                {
                  v57 = 0;
                  v58 = (unsigned int *)(v25 + ((v29 >> 3) & 0x1FFFFFFE) + 8);
                  do
                  {
                    v56 = (_DWORD *)(*v58 | ((unint64_t)*((unsigned __int8 *)v58 + 4) << 32));
                    if (*v56 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, (WTF::StringImpl *)a2);
                    else
                      *v56 -= 2;
                    ++v57;
                    v58 = (unsigned int *)((char *)v58 + 5);
                  }
                  while (v57 < (unint64_t)*(unsigned int *)(v25 + 4) >> 4);
                }
                WTF::fastFree((WTF *)v25, a2);
              }
              else
              {
                --*(_DWORD *)v25;
              }
            }
            v23 += 2;
          }
          while (v23 != v24);
        }
        v18 = *(WTF **)(v14 + 40);
        if (v18)
        {
          *(_QWORD *)(v14 + 40) = 0;
          *(_DWORD *)(v14 + 48) = 0;
          WTF::fastFree(v18, a2);
        }
        v19 = *(unsigned int *)(v14 + 36);
        if ((_DWORD)v19)
        {
          v31 = *(uint64_t **)(v14 + 24);
          v32 = &v31[2 * v19];
          do
          {
            v33 = *v31;
            *v31 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
              {
                v37 = *(unsigned int *)(v33 + 4);
                if ((v37 & 8) != 0)
                {
                  v38 = *(unsigned int *)(v33 + 28);
                  if ((_DWORD)v38)
                  {
                    v36 = 16 * v38;
                    v35 = (_DWORD **)(*(_QWORD *)(v33 + 16) + 8);
                    do
                    {
                      v34 = *v35;
                      *v35 = 0;
                      if (v34)
                      {
                        if (*v34 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, (WTF::StringImpl *)a2);
                        else
                          *v34 -= 2;
                      }
                      v35 += 2;
                      v36 -= 16;
                    }
                    while (v36);
                  }
                  v50 = *(WTF **)(v33 + 16);
                  if ((WTF *)(v33 + 32) != v50 && v50 != 0)
                  {
                    *(_QWORD *)(v33 + 16) = 0;
                    *(_DWORD *)(v33 + 24) = 0;
                    WTF::fastFree(v50, a2);
                  }
                  v52 = *(_QWORD *)(v33 + 8);
                  *(_QWORD *)(v33 + 8) = 0;
                  if (v52)
                    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
                }
                else if (v37 >= 0x10)
                {
                  v60 = 0;
                  v61 = (unsigned int *)(v33 + ((v37 >> 3) & 0x1FFFFFFE) + 8);
                  do
                  {
                    v59 = (_DWORD *)(*v61 | ((unint64_t)*((unsigned __int8 *)v61 + 4) << 32));
                    if (*v59 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, (WTF::StringImpl *)a2);
                    else
                      *v59 -= 2;
                    ++v60;
                    v61 = (unsigned int *)((char *)v61 + 5);
                  }
                  while (v60 < (unint64_t)*(unsigned int *)(v33 + 4) >> 4);
                }
                WTF::fastFree((WTF *)v33, a2);
              }
              else
              {
                --*(_DWORD *)v33;
              }
            }
            v31 += 2;
          }
          while (v31 != v32);
        }
        v20 = *(WTF **)(v14 + 24);
        if (v20)
        {
          *(_QWORD *)(v14 + 24) = 0;
          *(_DWORD *)(v14 + 32) = 0;
          WTF::fastFree(v20, a2);
        }
        v21 = *(unsigned int *)(v14 + 20);
        if ((_DWORD)v21)
        {
          v39 = *(uint64_t **)(v14 + 8);
          v40 = &v39[2 * v21];
          do
          {
            v41 = *v39;
            *v39 = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 1)
              {
                v45 = *(unsigned int *)(v41 + 4);
                if ((v45 & 8) != 0)
                {
                  v46 = *(unsigned int *)(v41 + 28);
                  if ((_DWORD)v46)
                  {
                    v44 = 16 * v46;
                    v43 = (_DWORD **)(*(_QWORD *)(v41 + 16) + 8);
                    do
                    {
                      v42 = *v43;
                      *v43 = 0;
                      if (v42)
                      {
                        if (*v42 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v42, (WTF::StringImpl *)a2);
                        else
                          *v42 -= 2;
                      }
                      v43 += 2;
                      v44 -= 16;
                    }
                    while (v44);
                  }
                  v53 = *(WTF **)(v41 + 16);
                  if ((WTF *)(v41 + 32) != v53 && v53 != 0)
                  {
                    *(_QWORD *)(v41 + 16) = 0;
                    *(_DWORD *)(v41 + 24) = 0;
                    WTF::fastFree(v53, a2);
                  }
                  v55 = *(_QWORD *)(v41 + 8);
                  *(_QWORD *)(v41 + 8) = 0;
                  if (v55)
                    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
                }
                else if (v45 >= 0x10)
                {
                  v63 = 0;
                  v64 = (unsigned int *)(v41 + ((v45 >> 3) & 0x1FFFFFFE) + 8);
                  do
                  {
                    v62 = (_DWORD *)(*v64 | ((unint64_t)*((unsigned __int8 *)v64 + 4) << 32));
                    if (*v62 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, (WTF::StringImpl *)a2);
                    else
                      *v62 -= 2;
                    ++v63;
                    v64 = (unsigned int *)((char *)v64 + 5);
                  }
                  while (v63 < (unint64_t)*(unsigned int *)(v41 + 4) >> 4);
                }
                WTF::fastFree((WTF *)v41, a2);
              }
              else
              {
                --*(_DWORD *)v41;
              }
            }
            v39 += 2;
          }
          while (v39 != v40);
        }
        v22 = *(WTF **)(v14 + 8);
        if (v22)
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 16) = 0;
          WTF::fastFree(v22, a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::FontCascade::~FontCascade(WebCore::FontCascade *this, void *a2)
{
  WebCore::FontCascadeFonts *v3;
  unsigned int *v4;
  void *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  if (*((_BYTE *)this + 212) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 52));
  }
  if (*((_BYTE *)this + 204) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 50));
  }
  v4 = (unsigned int *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
  {
    if (*v4 == 1)
    {
      v8 = v4[1];
      if ((_DWORD)v8)
      {
        v9 = (WTF::StringImpl **)(v4 + 2);
        v10 = 8 * v8;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*v4;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontCascade *)((char *)this + 16), (WTF::StringImpl *)a2);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v12 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v5);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

BOOL WebCore::FontCascade::computeRequiresShaping(WebCore::FontCascade *this, WTF::StringImpl *a2)
{
  int v3;
  char v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  int v14;
  __int16 v15;
  WTF *v16;
  WTF *v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  WTF *v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  WTF *v62;
  WTF *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  WTF::StringImpl **v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF *v81;
  WTF *v82;
  WTF *v83;
  WTF *v84;
  WTF *v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  WTF *v104;
  WTF *v105;
  WTF *v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;

  v3 = *((_DWORD *)this + 44);
  v4 = *((_BYTE *)this + 180);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  if (v5)
    *(_DWORD *)v5 += 2;
  v6 = *((unsigned int *)this + 17);
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
      goto LABEL_145;
    v38 = v3;
    v39 = WTF::fastMalloc((WTF *)(8 * v6));
    v7 = (WTF *)v39;
    v40 = *((unsigned int *)this + 17);
    if ((_DWORD)v40)
    {
      v68 = 0;
      v69 = *((_QWORD *)this + 7);
      v70 = 8 * v40;
      do
      {
        v71 = *(_DWORD **)(v69 + v68);
        if (v71)
          *v71 += 2;
        *(_QWORD *)(v39 + v68) = v71;
        v68 += 8;
      }
      while (v70 != v68);
    }
    v3 = v38;
  }
  else
  {
    v7 = 0;
  }
  v8 = *((unsigned int *)this + 21);
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x194130FF0);
    }
    v41 = v7;
    v42 = v3;
    v43 = WTF::fastMalloc((WTF *)(8 * v8));
    v9 = (WTF *)v43;
    v44 = *((unsigned int *)this + 21);
    if ((_DWORD)v44)
    {
      v72 = 0;
      v73 = *((_QWORD *)this + 9);
      v74 = 8 * v44;
      v7 = v41;
      do
      {
        v75 = *(_DWORD **)(v73 + v72);
        if (v75)
          *v75 += 2;
        *(_QWORD *)(v43 + v72) = v75;
        v72 += 8;
      }
      while (v74 != v72);
      v3 = v42;
    }
    else
    {
      v3 = v42;
      v7 = v41;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  if (v12)
    *(_DWORD *)v12 += 2;
  v13 = *((unsigned __int16 *)this + 56);
  v14 = *((unsigned __int8 *)this + 182);
  v15 = *((_WORD *)this + 90);
  if (v5)
    *(_DWORD *)v5 += 2;
  if ((_DWORD)v6)
  {
    v100 = v14;
    v84 = v9;
    v92 = v7;
    v118 = v13;
    v128 = v3;
    if (v6 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x194130FF8);
    }
    v45 = WTF::fastMalloc((WTF *)(8 * v6));
    v16 = (WTF *)v45;
    v46 = 0;
    v9 = v84;
    v7 = v92;
    do
    {
      v47 = *(_DWORD **)((char *)v92 + v46);
      if (v47)
        *v47 += 2;
      *(_QWORD *)(v45 + v46) = v47;
      v46 += 8;
    }
    while (8 * v6 != v46);
    v13 = v118;
    v3 = v128;
    v14 = v100;
  }
  else
  {
    v16 = 0;
  }
  if (!(_DWORD)v8)
  {
    v17 = 0;
    goto LABEL_19;
  }
  v101 = v14;
  v85 = v9;
  v93 = v7;
  v119 = v13;
  v129 = v3;
  v78 = v16;
  if (v8 >> 29)
  {
LABEL_145:
    __break(0xC471u);
    JUMPOUT(0x194130FE8);
  }
  v48 = WTF::fastMalloc((WTF *)(8 * v8));
  v17 = (WTF *)v48;
  v49 = 0;
  v9 = v85;
  do
  {
    v50 = *(_DWORD **)((char *)v85 + v49);
    if (v50)
      *v50 += 2;
    *(_QWORD *)(v48 + v49) = v50;
    v49 += 8;
  }
  while (8 * v8 != v49);
  v13 = v119;
  v3 = v129;
  v16 = v78;
  v7 = v93;
  v14 = v101;
LABEL_19:
  if (v10)
    *(_DWORD *)v10 += 2;
  if (v11)
    *(_DWORD *)v11 += 2;
  if (v12)
  {
    v18 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    if (v18)
    {
      *(_DWORD *)v12 = v18;
    }
    else
    {
      v112 = v13;
      v122 = v3;
      v23 = v16;
      v81 = v9;
      v88 = v7;
      v104 = v17;
      v96 = v14;
      WTF::StringImpl::destroy(v12, a2);
      v14 = v96;
      v9 = v81;
      v7 = v88;
      v13 = v112;
      v3 = v122;
      v17 = v104;
      v16 = v23;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      v113 = v13;
      v123 = v3;
      v24 = v16;
      v82 = v9;
      v89 = v7;
      v105 = v17;
      v97 = v14;
      WTF::StringImpl::destroy(v11, a2);
      v14 = v97;
      v9 = v82;
      v7 = v89;
      v13 = v113;
      v3 = v123;
      v17 = v105;
      v16 = v24;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      v114 = v13;
      v124 = v3;
      v25 = v16;
      v83 = v9;
      v90 = v7;
      v106 = v17;
      v98 = v14;
      WTF::StringImpl::destroy(v10, a2);
      v14 = v98;
      v9 = v83;
      v7 = v90;
      v13 = v114;
      v3 = v124;
      v17 = v106;
      v16 = v25;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  if ((_DWORD)v8)
  {
    v51 = 8 * v8;
    v52 = (WTF::StringImpl **)v9;
    do
    {
      v53 = *v52;
      *v52 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          v120 = v13;
          v130 = v3;
          v54 = v16;
          v86 = v9;
          v94 = v7;
          v110 = v17;
          v102 = v14;
          v76 = v52;
          v79 = v51;
          WTF::StringImpl::destroy(v53, a2);
          v52 = v76;
          v51 = v79;
          v14 = v102;
          v9 = v86;
          v7 = v94;
          v13 = v120;
          v3 = v130;
          v17 = v110;
          v16 = v54;
        }
        else
        {
          *(_DWORD *)v53 -= 2;
        }
      }
      ++v52;
      v51 -= 8;
    }
    while (v51);
  }
  if (v9)
  {
    v116 = v13;
    v126 = v3;
    v35 = v16;
    v91 = v7;
    v108 = v17;
    v99 = v14;
    WTF::fastFree(v9, a2);
    v14 = v99;
    v13 = v116;
    v3 = v126;
    v17 = v108;
    v7 = v91;
    v16 = v35;
  }
  if ((_DWORD)v6)
  {
    v55 = 8 * v6;
    v56 = (WTF::StringImpl **)v7;
    do
    {
      v57 = *v56;
      *v56 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
        {
          v121 = v13;
          v131 = v3;
          v58 = v16;
          v87 = v55;
          v95 = v7;
          v111 = v17;
          v103 = v14;
          v80 = v56;
          WTF::StringImpl::destroy(v57, a2);
          v56 = v80;
          v55 = v87;
          v14 = v103;
          v13 = v121;
          v3 = v131;
          v17 = v111;
          v7 = v95;
          v16 = v58;
        }
        else
        {
          *(_DWORD *)v57 -= 2;
        }
      }
      ++v56;
      v55 -= 8;
    }
    while (v55);
  }
  if (v7)
  {
    v117 = v13;
    v127 = v3;
    v36 = v16;
    v109 = v17;
    WTF::fastFree(v7, a2);
    v13 = v117;
    v3 = v127;
    v17 = v109;
    v16 = v36;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      v115 = v13;
      v125 = v3;
      v77 = v16;
      v107 = v17;
      WTF::StringImpl::destroy(v5, a2);
      v13 = v115;
      v3 = v125;
      v17 = v107;
      v16 = v77;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (v3 & 0x7FFF0000 | v4 & 3 | v4 & 0x1C | v4 & 0x20)
    v19 = 0;
  else
    v19 = v13 > 0xFF;
  v20 = v19;
  if ((v15 & 0x1C0) != 0)
    v20 = 0;
  if ((v15 & 0x600) != 0)
    v20 = 0;
  if ((v15 & 0x800) != 0)
    v20 = 0;
  if ((v15 & 0x3000) != 0)
    v21 = 0;
  else
    v21 = v20;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      v26 = v12;
      v27 = v16;
      v28 = v17;
      WTF::StringImpl::destroy(v26, a2);
      v17 = v28;
      v16 = v27;
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      v29 = v11;
      v30 = v16;
      v31 = v17;
      WTF::StringImpl::destroy(v29, a2);
      v17 = v31;
      v16 = v30;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      v32 = v10;
      v33 = v16;
      v34 = v17;
      WTF::StringImpl::destroy(v32, a2);
      v17 = v34;
      v16 = v33;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  if ((_DWORD)v8)
  {
    v59 = 8 * v8;
    v60 = (WTF::StringImpl **)v17;
    do
    {
      v61 = *v60;
      *v60 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          v62 = v16;
          v63 = v17;
          WTF::StringImpl::destroy(v61, a2);
          v17 = v63;
          v16 = v62;
        }
        else
        {
          *(_DWORD *)v61 -= 2;
        }
      }
      ++v60;
      v59 -= 8;
    }
    while (v59);
  }
  if (v17)
  {
    v37 = v16;
    WTF::fastFree(v17, a2);
    v16 = v37;
  }
  if ((_DWORD)v6)
  {
    v64 = 8 * v6;
    v65 = (WTF::StringImpl **)v16;
    do
    {
      v66 = *v65;
      *v65 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
        {
          v67 = v16;
          WTF::StringImpl::destroy(v66, a2);
          v16 = v67;
        }
        else
        {
          *(_DWORD *)v66 -= 2;
        }
      }
      ++v65;
      v64 -= 8;
    }
    while (v64);
  }
  if (v16)
    WTF::fastFree(v16, a2);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return !v21 || *((_DWORD *)this + 7) || (*((_DWORD *)this + 44) & 0x30) != 16;
}

void WebCore::FontDescription::~FontDescription(WebCore::FontDescription *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF *v7;
  WTF *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontDescription *)((char *)this + 32), a2);
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, v6);
  }
  v8 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v8, v6);
  }
}

void WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues(WebCore::FontVariantAlternatesValues *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 9);
  if ((_DWORD)v6)
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v12 = 8 * v6;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 5);
  if ((_DWORD)v8)
  {
    v14 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    v15 = 8 * v8;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v9 = (WTF *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

WebCore::FontDescriptionKey *WebCore::FontDescriptionKey::FontDescriptionKey(WebCore::FontDescriptionKey *this, const WebCore::FontDescription *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  _DWORD *v13;
  int v14;
  int v15;
  WTF::StringImpl *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int16 v30;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 39);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 18);
  v4 = *((_DWORD *)a2 + 40);
  v5 = *((unsigned __int16 *)a2 + 82);
  v6 = v5 | (*((unsigned __int8 *)a2 + 166) << 16);
  *((_QWORD *)this + 2) = (v4 << 9) & 0x3F8000 | (((v4 >> 4) & 3) << 9) | (v4 >> 7) & 0x1C0 | (4 * (v4 & 0xF)) | (v6 >> 3) & 0x6000 | (v6 >> 3) & 0x800 | ~(v6 >> 3) & 0x1000 | ((unint64_t)((((v5 >> 11) & 1) << 26) & 0xE401FFFF | (((v5 >> 12) & 3) << 27) | (((v5 >> 9) & 3) << 24) | (((v6 >> 6) & 7) << 21) | (((v6 >> 5) & 1) << 20) | (((v6 >> 4) & 1) << 19) | (((v5 >> 2) & 3) << 17) | HIWORD(v4) & 0x7FFF | ((v6 & 3) << 15)) << 32);
  v7 = (_DWORD *)*((_QWORD *)a2 + 17);
  if (v7)
    *v7 += 2;
  v8 = 0;
  *((_QWORD *)this + 3) = v7;
  *((_QWORD *)this + 4) = 0;
  v9 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v9)
  {
    if (v9 >> 29)
      goto LABEL_15;
    v8 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    memcpy(v8, *(const void **)a2, 8 * *((unsigned int *)a2 + 3));
  }
  v10 = *((unsigned int *)a2 + 7);
  if (!(_DWORD)v10)
  {
    v11 = 0;
    goto LABEL_6;
  }
  if (v10 >> 29)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x1941314FCLL);
  }
  v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
  memcpy(v11, *((const void **)a2 + 2), 8 * *((unsigned int *)a2 + 7));
LABEL_6:
  WebCore::FontVariantAlternatesValues::FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v24, (const WebCore::FontDescription *)((char *)a2 + 32));
  v12 = *((_BYTE *)a2 + 104);
  v13 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v13)
    *v13 += 2;
  v15 = *((_DWORD *)a2 + 30);
  v14 = *((_DWORD *)a2 + 31);
  v18 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v8;
  *(_DWORD *)(v18 + 16) = v9;
  *(_DWORD *)(v18 + 20) = v9;
  *(_QWORD *)(v18 + 24) = v11;
  *(_DWORD *)(v18 + 32) = v10;
  *(_DWORD *)(v18 + 36) = v10;
  v19 = v24;
  v24 = 0u;
  *(_OWORD *)(v18 + 40) = v19;
  *(_QWORD *)&v19 = v25;
  v25 = 0;
  *(_QWORD *)(v18 + 56) = v19;
  v20 = v26;
  v26 = 0;
  *(_QWORD *)(v18 + 64) = v20;
  *(_QWORD *)&v19 = v27;
  v27 = 0;
  *(_QWORD *)(v18 + 72) = v19;
  v21 = v28;
  v28 = 0u;
  *(_OWORD *)(v18 + 80) = v21;
  v22 = v29;
  v29 = 0;
  *(_QWORD *)(v18 + 96) = v22;
  *(_WORD *)(v18 + 104) = v30;
  *(_BYTE *)(v18 + 112) = v12;
  *(_QWORD *)(v18 + 120) = v13;
  *(_DWORD *)(v18 + 128) = v15;
  *(_DWORD *)(v18 + 132) = v14;
  v23 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v18;
  if (v23)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v23, v17);
  WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v24, v17);
  return this;
}

uint64_t WebCore::FontDescription::variantAlternates(WebCore::FontDescription *this)
{
  return (uint64_t)this + 32;
}

void WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(WebCore::StyleMiscNonInheritedData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::ShadowData *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::StyleVisitedLinkColorData *v10;
  WebCore::FillLayer *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Animation **v20;
  uint64_t v21;
  WebCore::Animation *v22;
  WTF *v23;
  uint64_t v24;
  WebCore::Animation **v25;
  uint64_t v26;
  WebCore::Animation *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  _DWORD **v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  unsigned int **v44;
  unsigned int **v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int **v50;
  unsigned int **v51;
  char v52;
  char v53;

  if (*((_BYTE *)this + 140) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 34));
  }
  if (*((_BYTE *)this + 132) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 32));
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::ShadowData *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    WebCore::ShadowData::~ShadowData(v4);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v19 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v19)
      {
        v20 = *(WebCore::Animation ***)(v8 + 8);
        v21 = 8 * v19;
        do
        {
          v22 = *v20;
          *v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
            {
              WebCore::Animation::~Animation(v22, a2);
              WTF::fastFree(v40, v41);
            }
            else
            {
              --*(_DWORD *)v22;
            }
          }
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = *(WTF **)(v8 + 8);
      if (v23)
      {
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        WTF::fastFree(v23, a2);
      }
      WTF::fastFree((WTF *)v8, a2);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v24 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v24)
      {
        v25 = *(WebCore::Animation ***)(v9 + 8);
        v26 = 8 * v24;
        do
        {
          v27 = *v25;
          *v25 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
            {
              WebCore::Animation::~Animation(v27, a2);
              WTF::fastFree(v42, v43);
            }
            else
            {
              --*(_DWORD *)v27;
            }
          }
          ++v25;
          v26 -= 8;
        }
        while (v26);
      }
      v28 = *(WTF **)(v9 + 8);
      if (v28)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v28, a2);
      }
      WTF::fastFree((WTF *)v9, a2);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = (WebCore::StyleVisitedLinkColorData *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v10);
      WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = (WebCore::FillLayer *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::FillLayer::~FillLayer(v11);
      WTF::fastFree(v31, v32);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      if (*(_BYTE *)(v12 + 36) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v12 + 32));
      }
      if (*(_BYTE *)(v12 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v12 + 24));
      }
      v35 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v35)
      {
        v37 = *(_DWORD ***)(v12 + 8);
        v38 = 8 * v35;
        do
        {
          v39 = *v37;
          *v37 = 0;
          if (v39)
          {
            if (v39[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
            else
              --v39[2];
          }
          ++v37;
          v38 -= 8;
        }
        while (v38);
      }
      v36 = *(WTF **)(v12 + 8);
      if (v36)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        WTF::fastFree(v36, a2);
      }
      WTF::fastFree((WTF *)v12, a2);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      v29 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v29)
      {
        v44 = *(unsigned int ***)(v13 + 8);
        v45 = &v44[v29];
        do
        {
          v46 = *v44;
          *v44 = 0;
          if (v46)
          {
            v47 = v46 + 2;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              atomic_store(1u, v46 + 2);
              v50 = v44;
              v51 = v45;
              (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
              v45 = v51;
              v44 = v50;
            }
          }
          ++v44;
        }
        while (v44 != v45);
      }
      v30 = *(WTF **)(v13 + 8);
      if (v30)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v30, a2);
      }
      WTF::fastFree((WTF *)v13, a2);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  v14 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    if (*v14 == 1)
    {
      v17 = v14[12];
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v17])(&v52, v14 + 10);
      v14[12] = -1;
      v18 = v14[6];
      if ((_DWORD)v18 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v18])(&v53, v14 + 4);
      v14[6] = -1;
      WTF::fastFree((WTF *)v14, a2);
    }
    else
    {
      --*v14;
    }
  }
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(v15 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 12));
      }
      WTF::fastFree((WTF *)v15, a2);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  v16 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, a2);
    else
      --*(_DWORD *)v16;
  }
}

void WebCore::Animation::~Animation(WebCore::Animation *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char v8;
  char v9;

  v3 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = *((unsigned int *)this + 22);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3407390[v5])(&v8, (char *)this + 80);
  *((_DWORD *)this + 22) = -1;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((unsigned int *)this + 6);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E3407348[v7])(&v9, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
}

void WebCore::TextContentData::~TextContentData(WebCore::TextContentData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E3441738;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::fastFree(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E3441738;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void WebCore::KeyframeEffect::lastStyleChangeEventStyleDidChange(WebCore::KeyframeEffect *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 isRunningAccelerated;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int NumProperties;
  const WebCore::Settings *v13;
  int v14;
  WebCore::CSSPropertyAnimation *v15;
  int v16;
  uint64_t AcceleratedPropertyAtIndex;
  int v18;
  __int16 v22;
  int v23;
  _BYTE v24[40];

  v3 = *((_QWORD *)this + 15);
  if ((v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0
     || (v6 = *((_QWORD *)this + 33)) != 0 && (v4 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v4 + 680) + 712) & 0x800000000000) != 0)
  {
    isRunningAccelerated = WebCore::KeyframeEffect::isRunningAccelerated(this);
    if (!isRunningAccelerated)
      return;
    if ((a2 != 0) == (a3 != 0))
    {
      v9 = *((_QWORD *)this + 15);
      if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
        v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 40) + 8);
      v11 = *(_QWORD *)(v10 + 680);
      NumProperties = WebCore::CSSPropertyAnimation::getNumProperties((WebCore::CSSPropertyAnimation *)isRunningAccelerated);
      if (NumProperties < 1)
        return;
      v14 = NumProperties;
      v15 = 0;
      while (1)
      {
        v16 = (int)v15;
        AcceleratedPropertyAtIndex = WebCore::CSSPropertyAnimation::getAcceleratedPropertyAtIndex(v15, v11, v13);
        if ((AcceleratedPropertyAtIndex & 0xFF0000) != 0)
        {
          v22 = AcceleratedPropertyAtIndex;
          v23 = 0;
          v18 = WebCore::acceleratedPropertyDidChange(AcceleratedPropertyAtIndex, *((_QWORD *)a2 + 1), *((_QWORD *)a3 + 1));
          if (v23 != -1)
            ((void (*)(_BYTE *, __int16 *))off_1E33919E8[v23])(v24, &v22);
          v23 = -1;
          if (v18)
            break;
        }
        v15 = (WebCore::CSSPropertyAnimation *)(v16 + 1);
        if (v14 == (_DWORD)v15)
          return;
      }
    }
    v24[0] = 0;
    v24[32] = 0;
    WebCore::KeyframeEffect::updateAssociatedThreadedEffectStack((uint64_t *)this, (uint64_t)v24);
    std::optional<WebCore::Styleable const>::~optional((uint64_t)v24, v8);
    return;
  }
  if (a2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 328);
    if (a3)
    {
      if ((v5 != 0) == (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 328) != 0))
        return;
LABEL_11:
      WebCore::KeyframeEffect::abilityToBeAcceleratedDidChange(this);
      return;
    }
  }
  else
  {
    if (!a3)
      return;
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 328);
  }
  if (v5)
    goto LABEL_11;
}

void WebCore::LinearTimingFunction::~LinearTimingFunction(WebCore::LinearTimingFunction *this, void *a2)
{
  WTF *v2;
  WebCore::LinearTimingFunction *v3;

  v2 = (WTF *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    v3 = this;
    WTF::fastFree(v2, a2);
    this = v3;
  }
  WTF::fastFree(this, a2);
}

{
  WTF *v2;

  v2 = (WTF *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v2, a2);
  }
}

void WebCore::FillLayer::~FillLayer(WebCore::FillLayer *this)
{
  WebCore::FillLayer *v2;
  _DWORD *v3;
  WebCore::FillLayer *v4;
  WTF *v5;
  void *v6;
  WebCore::FillLayer *v7;
  WTF *v8;
  void *v9;

  v2 = (WebCore::FillLayer *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v7 = (WebCore::FillLayer *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (*(_DWORD *)v2 == 1)
      {
        WebCore::FillLayer::~FillLayer(v2);
        WTF::fastFree(v8, v9);
      }
      else
      {
        --*(_DWORD *)v2;
      }
      v2 = v7;
    }
    while (v7);
  }
  if (*((_BYTE *)this + 52) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 12));
  }
  if (*((_BYTE *)this + 44) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 10));
  }
  if (*((_BYTE *)this + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 8));
  }
  if (*((_BYTE *)this + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 6));
  }
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WebCore::FillLayer *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::FillLayer::~FillLayer(v4);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

uint64_t `non-virtual thunk to'WebCore::CachedFontLoadRequest::fontLoaded(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, result - 8);
  }
  return result;
}

uint64_t WebCore::CachedFontClient::resourceClientType(WebCore::CachedFontClient *this)
{
  return 2;
}

_QWORD *WebCore::CachedFontLoadRequest::fontLoaded(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (v1)
  {
    v2 = result;
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*result + 16))(result, v2);
  }
  return result;
}

uint64_t WebCore::CSSFontFaceSource::fontLoaded(uint64_t this, WebCore::FontLoadRequest *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  WebCore::CSSFontFace *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  void *v11;

  v2 = *(_QWORD *)(this + 24);
  if (!*(_BYTE *)(v2 + 142))
  {
    v3 = this;
    v4 = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v2 + 8) = v4 + 1;
    v5 = *(_DWORD *)(this + 88);
    if (v5 != 3)
    {
      if (!v5)
        *(_DWORD *)(this + 88) = 1;
      if (((*(uint64_t (**)(_QWORD, WebCore::FontLoadRequest *))(**(_QWORD **)(this + 40) + 40))(*(_QWORD *)(this + 40), a2) & 1) != 0)
      {
        v6 = 3;
      }
      else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 40) + 48))(*(_QWORD *)(v3 + 40)))
      {
        v6 = 2;
      }
      else
      {
        v6 = 3;
      }
      *(_DWORD *)(v3 + 88) = v6;
      v7 = *(WebCore::CSSFontFace **)(v3 + 24);
      ++*((_DWORD *)v7 + 2);
      this = WebCore::CSSFontFace::fontLoadEventOccurred(v7);
      if (*((_DWORD *)v7 + 2) == 1)
      {
        WebCore::CSSFontFace::~CSSFontFace(v7);
        this = WTF::fastFree(v10, v11);
      }
      else
      {
        --*((_DWORD *)v7 + 2);
      }
      v4 = *(_DWORD *)(v2 + 8) - 1;
    }
    if (v4)
    {
      *(_DWORD *)(v2 + 8) = v4;
    }
    else
    {
      WebCore::CSSFontFace::~CSSFontFace((WebCore::CSSFontFace *)v2);
      return WTF::fastFree(v8, v9);
    }
  }
  return this;
}

void WebCore::CSSFontFaceSource::font(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 *a5@<X4>, _QWORD *a6@<X8>)
{
  int v12;
  WebCore::FontCache **v13;
  BOOL v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  WTF::Thread *v23;
  WebCore::FontPlatformData **v24;
  double v25;
  const WebCore::FontPlatformData *v26;
  uint64_t v27;
  WebCore::FontCache **v28;
  float v29[8];
  uint64_t v30;

  v12 = *(unsigned __int8 *)(a1 + 92);
  v13 = *(WebCore::FontCache ***)(a1 + 40);
  if (v12)
    v14 = 0;
  else
    v14 = v13 == 0;
  if (!v14)
  {
    if (v13)
    {
      (*((void (**)(WebCore::FontCache **))*v13 + 6))(v13);
      (*(void (**)(_QWORD, WTF::StringImpl *, uint64_t, uint64_t, __int16 *))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), a2, a3, a4, a5);
      return;
    }
    if (!v12)
      goto LABEL_16;
    v17 = *(_QWORD *)(a1 + 72);
    if (!v17)
      goto LABEL_16;
    v18 = *(_QWORD *)(v17 + 8);
    if (!v18)
      goto LABEL_16;
    v19 = *(_QWORD *)(v18 + 32);
    if (!v19)
      goto LABEL_16;
    if ((*(_WORD *)(v19 + 28) & 0x20) == 0)
      goto LABEL_16;
    if (*(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::fontTag + 24))
      goto LABEL_16;
    v15 = *(_QWORD *)(a1 + 80);
    if (!v15)
      goto LABEL_16;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v15 = *(_QWORD *)(a1 + 64);
    if (!v15)
    {
LABEL_16:
      *a6 = 0;
      return;
    }
LABEL_9:
    WebCore::FontCustomPlatformData::fontPlatformData(v15, (uint64_t)a2, a3, a4, a5, v29);
    WebCore::Font::create((uint64_t)v29, 0, 0, 0, 0, 0, 0, &v30);
    *a6 = v30;
    WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v29, v16);
    return;
  }
  if ((_DWORD)a3)
    v20 = 1;
  else
    v20 = 3;
  if ((_DWORD)a4)
    v21 = v20;
  else
    v21 = v20 | 4;
  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v22 || (v13 = *(WebCore::FontCache ***)(v22 + 96)) == 0)
    v13 = (WebCore::FontCache **)WebCore::threadGlobalDataSlow((WebCore *)v13);
  v23 = v13[10];
  if (!v23)
  {
    v28 = v13;
    v13 = WebCore::ThreadGlobalData::initializeFontCache(v13);
    v23 = v28[10];
  }
  v24 = (WebCore::FontPlatformData **)(a1 + 16);
  if ((*((_QWORD *)v23 + 4) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)v23 + 4) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)v23 + 3) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
    WebCore::TimerBase::setNextFireTime((uint64_t)v23, v25 + 0.0);
  }
  v26 = (const WebCore::FontPlatformData *)WebCore::FontCache::cachedFontPlatformData(v23, a2, v24, (__int128 *)a5, v21);
  if (v26)
  {
    WebCore::FontCache::fontForPlatformData(v23, v26, v29);
    v27 = *(_QWORD *)v29;
  }
  else
  {
    v27 = 0;
  }
  *a6 = v27;
}

uint64_t WebCore::CachedFontLoadRequest::ensureCustomFontData(WebCore::CachedFontLoadRequest *this)
{
  uint64_t result;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  _BYTE *v16;
  WTF::StringImpl *v17;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 216))(*(_QWORD *)(*((_QWORD *)this + 3) + 8));
  v3 = result;
  if ((result & 1) != 0)
    return v3;
  v4 = *(_BYTE **)(*((_QWORD *)this + 3) + 8);
  if (!v4[659])
    return v3;
  v5 = *((_QWORD *)this + 5);
  if (!v5)
    return v3;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return v3;
  v7 = *(unsigned __int8 *)(v6 + 178);
  if (*(_BYTE *)(v6 + 178))
  {
    if (v7 == 1 || v7 == 2)
      ++*(_DWORD *)(v6 + 216);
  }
  else
  {
    *(_DWORD *)(v6 - 264) += 2;
  }
  v8 = (WTF::StringImpl **)(v4 + 160);
  if ((v4[344] & 1) == 0)
  {
    v16 = v4;
    result = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v4 + 160));
    v16[344] |= 1u;
  }
  v9 = *v8;
  if (!v9)
  {
    result = WTF::tryFastCompactMalloc((WTF *)0x3D);
    v15 = v17;
    if (v17)
    {
      *(_QWORD *)v17 = 0x2900000002;
      qmemcpy((char *)v15 + 20, "[Lockdown Mode] This font wasn't parsed: ", 41);
      *((_QWORD *)v15 + 1) = (char *)v15 + 20;
      *((_DWORD *)v15 + 4) = 4;
      v17 = v15;
LABEL_15:
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)(v6 - 96) + 248))(v6 - 96, 8, 4, &v17, 0);
      v13 = v17;
      v17 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v14 == 1)
        {
          if (*(_DWORD *)(v6 + 216) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 96) + 40))(v6 - 96);
          else
            --*(_DWORD *)(v6 + 216);
        }
        else if (v14 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
        }
      }
      else if (*(_DWORD *)(v6 - 264) == 2)
      {
        if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v12);
      }
      else
      {
        *(_DWORD *)(v6 - 264) -= 2;
      }
      return v3;
    }
    goto LABEL_38;
  }
  v10 = *((_DWORD *)v9 + 1);
  *(_DWORD *)v9 += 2;
  if (v10 < 0 || (result = (v10 + 41), __OFADD__(v10, 41)))
  {
LABEL_38:
    v17 = 0;
    goto LABEL_39;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, (*((_DWORD *)v9 + 4) >> 2) & 1, (int8x16_t *)"[Lockdown Mode] This font wasn't parsed: ", 0x29u, (uint64_t)v9, &v17);
  if (v17)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v11);
    else
      *(_DWORD *)v9 -= 2;
    goto LABEL_15;
  }
LABEL_39:
  __break(0xC471u);
  return result;
}

BOOL WebCore::CachedFont::ensureCustomFontData(WebCore::CachedFont *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  _BOOL8 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  WTF *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;

  v3 = *((_QWORD *)this + 49);
  if (!v3)
    return *((_QWORD *)this + 83) != 0;
  do
    v4 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v4 + 1, (unsigned int *)v3));
  if (!*(_BYTE *)(v3 + 40))
  {
    WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v3, &v57);
    v6 = v57;
    v57 = 0;
    v7 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v37 = *(unsigned int *)(v7 + 20);
        if ((_DWORD)v37)
        {
          v38 = *(_QWORD *)(v7 + 8);
          v39 = v38 + 16 * v37;
          do
          {
            v40 = *(unsigned int **)(v38 + 8);
            *(_QWORD *)(v38 + 8) = 0;
            if (v40)
            {
              do
              {
                v41 = __ldaxr(v40);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, v40));
              if (!v42)
              {
                v50 = v38;
                v53 = v39;
                v47 = v7;
                atomic_store(1u, v40);
                v56 = (WTF *)v40;
                v43 = v40[6];
                if ((_DWORD)v43 != -1)
                  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v43])(&v58, v40 + 2);
                *((_DWORD *)v56 + 6) = -1;
                WTF::fastFree(v56, v5);
                v7 = v47;
                v38 = v50;
                v39 = v53;
              }
            }
            v38 += 16;
          }
          while (v38 != v39);
        }
        v44 = *(WTF **)(v7 + 8);
        if ((WTF *)(v7 + 24) != v44 && v44 != 0)
        {
          *(_QWORD *)(v7 + 8) = 0;
          *(_DWORD *)(v7 + 16) = 0;
          v46 = v7;
          WTF::fastFree(v44, v5);
          v7 = v46;
        }
        WTF::fastFree((WTF *)v7, v5);
      }
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v57, v5);
  }
  do
  {
    v10 = __ldaxr((unsigned int *)v3);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)v3));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)v3);
    v26 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD *)(v3 + 8);
      v28 = v27 + 16 * v26;
      do
      {
        v29 = *(unsigned int **)(v27 + 8);
        *(_QWORD *)(v27 + 8) = 0;
        if (v29)
        {
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v49 = v27;
            v52 = v28;
            atomic_store(1u, v29);
            v55 = (WTF *)v29;
            v32 = v29[6];
            if ((_DWORD)v32 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v32])(&v59, v29 + 2);
            *((_DWORD *)v55 + 6) = -1;
            WTF::fastFree(v55, a2);
            v27 = v49;
            v28 = v52;
          }
        }
        v27 += 16;
      }
      while (v27 != v28);
    }
    v33 = *(WTF **)(v3 + 8);
    if ((WTF *)(v3 + 24) != v33 && v33 != 0)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v33, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  v12 = *((_QWORD *)this + 49);
  if (!v12)
    return *((_QWORD *)this + 83) != 0;
  do
    v13 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v13 + 1, (unsigned int *)v12));
  if (!*(_BYTE *)(v12 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x1941327ACLL);
  }
  v15 = WebCore::CachedFont::ensureCustomFontData(this, (WebCore::SharedBuffer *)v12);
  do
  {
    v16 = __ldaxr((unsigned int *)v12);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v12));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v12);
    v18 = *(unsigned int *)(v12 + 20);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(v12 + 8);
      v20 = v19 + 16 * v18;
      do
      {
        v21 = *(unsigned int **)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        if (v21)
        {
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v48 = v19;
            v51 = v20;
            atomic_store(1u, v21);
            v54 = (WTF *)v21;
            v24 = v21[6];
            if ((_DWORD)v24 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v24])(&v60, v21 + 2);
            *((_DWORD *)v54 + 6) = -1;
            WTF::fastFree(v54, v14);
            v19 = v48;
            v20 = v51;
          }
        }
        v19 += 16;
      }
      while (v19 != v20);
    }
    v35 = *(WTF **)(v12 + 8);
    if ((WTF *)(v12 + 24) != v35 && v35 != 0)
    {
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = 0;
      WTF::fastFree(v35, v14);
    }
    WTF::fastFree((WTF *)v12, v14);
  }
  return v15;
}

BOOL WebCore::CachedFont::ensureCustomFontData(WebCore::CachedFont *this, WebCore::SharedBuffer *a2)
{
  uint64_t v2;
  _WORD *v4;
  int v6;
  WebCore::ResourceRequest *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  const char *v13;
  WebCore::ResourceRequest *v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  BOOL v23;
  char v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  void *v27;
  const void *v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  WTF::StringImpl *v43;
  uint8_t buf[8];
  char v45;
  char v46;

  v2 = *((_QWORD *)this + 83);
  if (v2)
    return v2 != 0;
  v4 = (_WORD *)((char *)this + 557);
  if ((*(_WORD *)((char *)this + 557) >> 5) - 3 >= 2)
  {
    v2 = 0;
    if (!a2 || (*(_WORD *)((_BYTE *)this + 557) & 0x400) != 0)
      return v2 != 0;
    v45 = 0;
    v6 = *((unsigned __int8 *)this + 658);
    if (!*((_BYTE *)this + 658))
    {
      WebCore::CachedFont::setErrorAndDeleteData(this);
      return 0;
    }
    if (v6 == 2)
    {
      v15 = (WebCore::CachedFont *)((char *)this + 160);
      if ((*((_BYTE *)this + 344) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(v15);
        v15 = (WebCore::CachedFont *)((char *)this + 160);
        *((_BYTE *)this + 344) |= 1u;
      }
      WTF::URL::fragmentIdentifier(v15);
      if ((v16 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      do
        v17 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v17 + 1, (unsigned int *)a2));
      v45 = 1;
      WebCore::FontCustomPlatformData::createMemorySafe(a2, (WebCore::SharedBuffer *)&v43, (uint64_t *)buf);
      do
      {
        v19 = __ldaxr((unsigned int *)a2);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)a2));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)a2);
        v33 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v33)
        {
          v34 = *((_QWORD *)a2 + 1);
          v35 = v34 + 16 * v33;
          do
          {
            v36 = *(unsigned int **)(v34 + 8);
            *(_QWORD *)(v34 + 8) = 0;
            if (v36)
            {
              v37 = v36;
              do
              {
                v38 = __ldaxr(v36);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v36));
              if (!v39)
              {
                atomic_store(1u, v36);
                v40 = v36[6];
                if ((_DWORD)v40 != -1)
                  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v40])(&v46, v37 + 2);
                v37[6] = -1;
                WTF::fastFree((WTF *)v37, v18);
              }
            }
            v34 += 16;
          }
          while (v34 != v35);
        }
        v41 = (WTF *)*((_QWORD *)a2 + 1);
        if ((WebCore::SharedBuffer *)((char *)a2 + 24) != v41 && v41 != 0)
        {
          *((_QWORD *)a2 + 1) = 0;
          *((_DWORD *)a2 + 4) = 0;
          WTF::fastFree(v41, v18);
        }
        WTF::fastFree(a2, v18);
      }
      v21 = (uint64_t *)*((_QWORD *)this + 83);
      *((_QWORD *)this + 83) = *(_QWORD *)buf;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
        {
          v29 = v21 + 2;
          v30 = (WTF::StringImpl *)v21[3];
          v21[3] = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
            {
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v18);
              v29 = v21 + 2;
            }
            else
            {
              *(_DWORD *)v30 -= 2;
            }
          }
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v29, v18);
          v32 = (const void *)v21[1];
          v21[1] = 0;
          if (v32)
            CFRelease(v32);
          WTF::fastFree((WTF *)v21, v31);
        }
        else
        {
          --*(_DWORD *)v21;
        }
      }
      v22 = v43;
      v43 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)v22 -= 2;
      }
      v2 = *((_QWORD *)this + 83);
      if (v2)
        goto LABEL_42;
      *((_BYTE *)this + 659) = 1;
      v12 = qword_1ECE7C1D0;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7C1D0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_41;
      *(_WORD *)buf = 0;
      v13 = "[Font Parser] A font could not be parsed by safe font parser.";
    }
    else
    {
      if (v6 != 1)
      {
LABEL_41:
        v2 = *((_QWORD *)this + 83);
LABEL_42:
        if (v2)
          v23 = v45 == 0;
        else
          v23 = 1;
        v24 = !v23;
        *((_BYTE *)this + 657) = v24;
        if (!v2)
        {
          if (*((_BYTE *)this + 658) == 2)
          {
            *((_BYTE *)this + 659) = 1;
            WebCore::CachedFont::setErrorAndDeleteData(this);
            v2 = *((_QWORD *)this + 83);
          }
          else
          {
            v2 = 0;
            *v4 = *v4 & 0xFF1F | 0x80;
          }
        }
        return v2 != 0;
      }
      v7 = (WebCore::CachedFont *)((char *)this + 160);
      if ((*((_BYTE *)this + 344) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(v7);
        v7 = (WebCore::CachedFont *)((char *)this + 160);
        *((_BYTE *)this + 344) |= 1u;
      }
      WTF::URL::fragmentIdentifier(v7);
      if ((v8 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      WebCore::CachedFont::createCustomFontData(a2, (WebCore::SharedBuffer *)&v43, (const WTF::String *)&v45, (uint64_t *)buf);
      v10 = (uint64_t *)*((_QWORD *)this + 83);
      *((_QWORD *)this + 83) = *(_QWORD *)buf;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          v25 = v10 + 2;
          v26 = (WTF::StringImpl *)v10[3];
          v10[3] = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::destroy(v26, v9);
              v25 = v10 + 2;
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v25, v9);
          v28 = (const void *)v10[1];
          v10[1] = 0;
          if (v28)
            CFRelease(v28);
          WTF::fastFree((WTF *)v10, v27);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      v11 = v43;
      v43 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v2 = *((_QWORD *)this + 83);
      if (v2)
        goto LABEL_42;
      v12 = qword_1ECE7C1D0;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7C1D0, OS_LOG_TYPE_DEFAULT))
      {
        v2 = 0;
        goto LABEL_42;
      }
      *(_WORD *)buf = 0;
      v13 = "[Font Parser] A font could not be parsed by system font parser.";
    }
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 2u);
    goto LABEL_41;
  }
  v2 = 0;
  return v2 != 0;
}

BOOL WebCore::CachedFontLoadRequest::errorOccurred(WebCore::CachedFontLoadRequest *this)
{
  return (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 557) >> 5) - 3 < 2;
}

uint64_t WebCore::CSSFontFace::fontLoadEventOccurred(WebCore::CSSFontFace *this)
{
  uint64_t result;
  void *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 140))
    WebCore::CSSFontFace::pump((uint64_t)this, 0);
  v8 = 0;
  v9 = 0;
  result = WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v8, (_DWORD *)this + 24);
  v4 = v8;
  if (HIDWORD(v9))
  {
    v5 = 8 * HIDWORD(v9);
    do
    {
      v6 = *(_QWORD *)v4;
      v4 = (WTF *)((char *)v4 + 8);
      result = (*(uint64_t (**)(uint64_t, WebCore::CSSFontFace *))(*(_QWORD *)v6 + 16))(v6, this);
      v5 -= 8;
    }
    while (v5);
    v4 = v8;
    if (HIDWORD(v9))
    {
      v7 = 8 * HIDWORD(v9);
      do
      {
        result = *(_QWORD *)v4;
        *(_QWORD *)v4 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
        v4 = (WTF *)((char *)v4 + 8);
        v7 -= 8;
      }
      while (v7);
      v4 = v8;
    }
  }
  if (v4)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return WTF::fastFree(v4, v3);
  }
  return result;
}

WTF::MonotonicTime *WebCore::CSSFontFace::setStatus(uint64_t a1, uint64_t a2)
{
  WTF::MonotonicTime *result;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF::MonotonicTime *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  double v18;
  double v19;
  double v22;
  WTF *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  result = (WTF::MonotonicTime *)WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v23, (_DWORD *)(a1 + 96));
  v6 = v23;
  if (HIDWORD(v24))
  {
    v7 = 8 * HIDWORD(v24);
    do
    {
      v8 = *(WTF::MonotonicTime **)v6;
      v6 = (WTF *)((char *)v6 + 8);
      result = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, a1, *(unsigned __int8 *)(a1 + 138), a2);
      v7 -= 8;
    }
    while (v7);
    v6 = v23;
    if (HIDWORD(v24))
    {
      v9 = 8 * HIDWORD(v24);
      do
      {
        result = *(WTF::MonotonicTime **)v6;
        *(_QWORD *)v6 = 0;
        if (result)
          result = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 56))(result);
        v6 = (WTF *)((char *)v6 + 8);
        v9 -= 8;
      }
      while (v9);
      v6 = v23;
    }
  }
  if (v6)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    result = (WTF::MonotonicTime *)WTF::fastFree(v6, v5);
  }
  *(_BYTE *)(a1 + 138) = a2;
  v10 = 0.0;
  v11 = INFINITY;
  switch(*(_BYTE *)(a1 + 143))
  {
    case 0:
      v12 = *(char *)(a1 + 72);
      if (v12 >= 5)
        goto LABEL_47;
      v11 = dbl_1969ED460[v12];
      v10 = dbl_1969ED438[v12];
LABEL_17:
      if ((a2 - 3) < 2)
      {
        if ((*(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFLL) != 0)
          return (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 152));
        return result;
      }
      if ((_DWORD)a2 != 2)
      {
        if ((_DWORD)a2 != 1)
          return result;
        if (v11 == 0.0)
        {
          v13 = a1;
          v14 = 2;
          return (WTF::MonotonicTime *)WebCore::CSSFontFace::setStatus(v13, v14);
        }
        if ((v11 < 0.0 || ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
          && *(_QWORD *)&v11 != 0)
        {
          return result;
        }
        v17 = a1 + 152;
        *(_QWORD *)(a1 + 176) = 0;
        WTF::MonotonicTime::now(result);
        v19 = v11 + v18;
        return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v17, v19);
      }
      if (v10 == 0.0)
      {
        v13 = a1;
        v14 = 4;
        return (WTF::MonotonicTime *)WebCore::CSSFontFace::setStatus(v13, v14);
      }
      if (v10 >= 0.0 && ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
        || *(_QWORD *)&v10 == 0)
      {
        v17 = a1 + 152;
        *(_QWORD *)(a1 + 176) = 0;
        WTF::MonotonicTime::now(result);
        v19 = v10 + v22;
        return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v17, v19);
      }
      return result;
    case 1:
      goto LABEL_17;
    case 2:
      v11 = 0.0;
      v10 = INFINITY;
      goto LABEL_17;
    case 3:
      v11 = 0.0;
      goto LABEL_17;
    default:
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x194133068);
  }
}

uint64_t WebCore::CSSFontFaceSet::fontStateChanged(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t **v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;

  v6 = result;
  v13 = a4;
  if (!a3)
  {
    v7 = *(_DWORD *)(result + 128);
    *(_DWORD *)(result + 128) = v7 + 1;
    if (!v7)
    {
      *(_DWORD *)(result + 80) = 0;
      v8 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = off_1E3397C38;
      v14 = (_QWORD *)v8;
      WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v6 + 104), &v14);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  if ((a4 - 3) <= 1)
  {
    v9 = (uint64_t **)(v6 + 104);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = off_1E3397CE8;
    v10[1] = a2;
    v10[2] = &v13;
    v14 = v10;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v6 + 104), &v14);
    result = (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
    v11 = *(_DWORD *)(v6 + 128) - 1;
    *(_DWORD *)(v6 + 128) = v11;
    if (!v11)
    {
      *(_DWORD *)(v6 + 80) = 1;
      v12 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v12 = off_1E3397C60;
      v14 = (_QWORD *)v12;
      WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v9, &v14);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  return result;
}

uint64_t WebCore::CSSFontFace::setStyle(WebCore::CSSFontFace *this, WebCore::CSSValue *a2)
{
  uint64_t v2;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  double v16;
  char v17;
  float v18;
  float v19;
  BOOL v20;
  float v21;
  int v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  char v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  int v34;
  double v35;
  char v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  double v41;
  char v42;
  float v43;
  float v44;
  float v45;
  int v46;
  int v47;
  int v48;
  int v49;
  WTF *v50;
  uint64_t v51;
  char v52;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_91;
  }
  v50 = (WTF *)&v52;
  v5 = (WebCore::MutableStyleProperties *)((uint64_t (*)(WTF **, char *))off_1E3397870[v2])(&v50, (char *)this + 16);
  *(_DWORD *)a2 += 2;
  v50 = a2;
  WebCore::MutableStyleProperties::setProperty(v5, 16, (_DWORD **)&v50, 0);
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  v8 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if ((v8 & 0x3F800) != 0x12000)
  {
    if ((v8 & 0x3F800) != 0x12800)
    {
      if ((v8 & 0x3F87F) == 0x50)
      {
        v11 = 0;
        if (*((_WORD *)a2 + 4) == 90)
          goto LABEL_29;
      }
      else
      {
        v11 = 0;
      }
      v12 = 56;
LABEL_14:
      v11 |= v12;
LABEL_29:
      v22 = v11;
      goto LABEL_30;
    }
    v40 = *((_QWORD *)a2 + 1);
    if (((*(unsigned __int16 *)(v40 + 4) | (*(unsigned __int8 *)(v40 + 6) << 16)) & 0x3F800) == 0)
    {
      result = WebCore::CSSPrimitiveValue::doubleValueInternal(v40, 0xCu);
      v41 = *(double *)&result;
      if (!v42)
        v41 = 0.0;
      if (v41 >= 3.40282347e38)
      {
        v49 = 2139095039;
      }
      else
      {
        if (v41 > -3.40282347e38)
        {
          v43 = v41;
LABEL_82:
          v44 = v43 * 4.0;
          if (v43 > 90.0)
            v44 = 360.0;
          v20 = v43 < -90.0;
          v45 = -360.0;
          if (!v20)
            v45 = v44;
          v11 = (int)v45 & 0xFFFFFF00;
          v12 = (int)v45;
          goto LABEL_14;
        }
        v49 = -8388609;
      }
      v43 = *(float *)&v49;
      goto LABEL_82;
    }
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x1941336D8);
  }
  v10 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 2);
  if ((*(_WORD *)(v10 + 4) & 0x7F) == 0x50)
  {
    if (!v9)
    {
      if (*(_WORD *)(v10 + 8) == 90)
      {
        LOWORD(v11) = 0;
        v22 = 0;
        goto LABEL_30;
      }
      goto LABEL_75;
    }
  }
  else if (!v9)
  {
LABEL_75:
    LOWORD(v11) = 56;
    v22 = 56;
    goto LABEL_30;
  }
  v13 = *(_DWORD *)(v9 + 8);
  v14 = *(_QWORD *)(v9 + 16);
  v15 = (*(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16)) & 0x3F800;
  if (v13 == 1)
  {
    if (v15)
    {
      __break(0xC471u);
      JUMPOUT(0x194133674);
    }
    result = WebCore::CSSPrimitiveValue::doubleValueInternal(v14, 0xCu);
    v16 = *(double *)&result;
    if (!v17)
      v16 = 0.0;
    if (v16 >= 3.40282347e38)
    {
      v46 = 2139095039;
    }
    else
    {
      if (v16 > -3.40282347e38)
      {
        v18 = v16;
LABEL_23:
        v19 = v18 * 4.0;
        if (v18 > 90.0)
          v19 = 360.0;
        v20 = v18 < -90.0;
        v21 = -360.0;
        if (!v20)
          v21 = v19;
        v11 = (int)v21;
        goto LABEL_29;
      }
      v46 = -8388609;
    }
    v18 = *(float *)&v46;
    goto LABEL_23;
  }
  if (v15)
  {
    __break(0xC471u);
    JUMPOUT(0x194133694);
  }
  v28 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v14, 0xCu));
  if (!v29)
    v28 = 0.0;
  if (v28 >= 3.40282347e38)
  {
    v47 = 2139095039;
  }
  else
  {
    if (v28 > -3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    v47 = -8388609;
  }
  v30 = *(float *)&v47;
LABEL_53:
  v31 = v30 * 4.0;
  if (v30 > 90.0)
    v31 = 360.0;
  v20 = v30 < -90.0;
  v32 = -360.0;
  if (!v20)
    v32 = v31;
  v33 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 24);
  if (((*(unsigned __int16 *)(v33 + 4) | (*(unsigned __int8 *)(v33 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941336B4);
  }
  v34 = (int)v32;
  result = WebCore::CSSPrimitiveValue::doubleValueInternal(v33, 0xCu);
  v35 = *(double *)&result;
  if (!v36)
    v35 = 0.0;
  if (v35 >= 3.40282347e38)
  {
    v48 = 2139095039;
LABEL_100:
    v37 = *(float *)&v48;
    goto LABEL_63;
  }
  if (v35 <= -3.40282347e38)
  {
    v48 = -8388609;
    goto LABEL_100;
  }
  v37 = v35;
LABEL_63:
  v38 = v37 * 4.0;
  if (v37 > 90.0)
    v38 = 360.0;
  v20 = v37 < -90.0;
  v39 = -360.0;
  if (!v20)
    v39 = v38;
  v22 = (int)v39;
  if ((int)v39 >= v34)
    LOWORD(v11) = v34;
  else
    LOWORD(v11) = (int)v39;
  if (v34 > v22)
    v22 = v34;
LABEL_30:
  if (*((_BYTE *)this + 136))
  {
    if ((float)((float)*((__int16 *)this + 66) * 0.25) == (float)((float)(__int16)v11 * 0.25)
      && (float)((float)*((__int16 *)this + 67) * 0.25) == (float)((float)(__int16)v22 * 0.25))
    {
      return result;
    }
  }
  else
  {
    *((_BYTE *)this + 136) = 1;
  }
  *((_DWORD *)this + 33) = (v22 << 16) | (unsigned __int16)v11;
  v50 = 0;
  v51 = 0;
  result = WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v50, (_DWORD *)this + 24);
  v24 = v50;
  if (HIDWORD(v51))
  {
    v25 = 8 * HIDWORD(v51);
    do
    {
      v26 = *(_QWORD *)v24;
      v24 = (WTF *)((char *)v24 + 8);
      result = (*(uint64_t (**)(uint64_t, WebCore::CSSFontFace *, _QWORD))(*(_QWORD *)v26 + 32))(v26, this, 0);
      v25 -= 8;
    }
    while (v25);
    v24 = v50;
    if (HIDWORD(v51))
    {
      v27 = 8 * HIDWORD(v51);
      do
      {
        result = *(_QWORD *)v24;
        *(_QWORD *)v24 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
        v24 = (WTF *)((char *)v24 + 8);
        v27 -= 8;
      }
      while (v27);
      v24 = v50;
    }
  }
  if (v24)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    return WTF::fastFree(v24, v23);
  }
  return result;
}

void WebCore::CSSFontFace::setWeight(WebCore::CSSFontFace *this, WebCore::CSSValue *a2)
{
  WebCore::CSSFontFace *v2;
  uint64_t v3;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  double v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  int v19;
  int v20;
  double v21;
  float v22;
  float v23;
  float v24;
  unint64_t v25;
  __int16 v26;
  int v27;
  double v29;
  float v30;
  float v31;
  float v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  unsigned int v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  int v53;
  int v54;
  int v55;
  double v56;
  double v57;
  double v58;
  WTF *v59;
  uint64_t v60;
  char v61;

  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_123;
  }
  v2 = this;
  v59 = (WTF *)&v61;
  v5 = (WebCore::MutableStyleProperties *)((uint64_t (*)(WTF **, char *))off_1E3397870[v3])(&v59, (char *)this + 16);
  *(_DWORD *)a2 += 2;
  v59 = a2;
  WebCore::MutableStyleProperties::setProperty(v5, 28, (_DWORD **)&v59, 0);
  v7 = v59;
  v59 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if ((v8 & 0x3F800) != 0x1D800)
  {
    if ((v8 & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194133AC0);
    }
    v27 = *((_WORD *)a2 + 2) & 0x7F;
    if ((v27 - 63) <= 0x11 && ((1 << ((*((_WORD *)a2 + 2) & 0x7F) - 63)) & 0x34001) != 0)
      goto LABEL_79;
    if (v27 == 73)
    {
      v33 = *(unsigned __int8 **)(*((_QWORD *)a2 + 1) + 8);
      v34 = v33[12];
      if (v34 != 1 && (v34 - 5) >= 4)
      {
        if (!v33[12])
        {
LABEL_56:
          if ((v8 & 0x7F) == 0x49)
          {
            v47 = *((_QWORD *)a2 + 1);
            v59 = 0;
            v56 = WebCore::CSSCalcValue::doubleValue(v47, (uint64_t)&v59);
            if (v59)
              WTF::fastFree((WTF *)((char *)v59 - 16), v48);
            v29 = v56;
          }
          else
          {
            v29 = *((double *)a2 + 1);
          }
          if (v29 < 3.40282347e38)
          {
            if (v29 > -3.40282347e38)
            {
              v30 = v29;
LABEL_61:
              if (v30 > 8191.8)
                v30 = 8191.8;
              v31 = v30 * 4.0;
              v17 = v30 <= -8192.0;
              v32 = -32768.0;
              if (!v17)
                v32 = v31;
              LODWORD(v25) = (int)v32;
              goto LABEL_66;
            }
            *(float *)&v53 = -3.4028e38;
LABEL_125:
            v30 = *(float *)&v53;
            goto LABEL_61;
          }
LABEL_123:
          *(float *)&v53 = 3.4028e38;
          goto LABEL_125;
        }
LABEL_79:
        if ((v8 & 0x7F) != 0x50)
          goto LABEL_82;
        v39 = *((unsigned __int16 *)a2 + 4) - 91;
        if (v39 > 2)
          goto LABEL_82;
        v25 = 0x3200AF00AF0uLL >> (16 * v39);
LABEL_66:
        v26 = v25;
        goto LABEL_83;
      }
      v27 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v33 + 72))(v33);
      LOWORD(v8) = *((_WORD *)a2 + 2);
    }
    if (v27 == 1)
      goto LABEL_56;
    goto LABEL_79;
  }
  if (*((_DWORD *)a2 + 2) != 2)
  {
LABEL_82:
    LODWORD(v25) = 1600;
    v26 = 1600;
    goto LABEL_83;
  }
  v9 = *((_QWORD *)a2 + 2);
  v10 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  if ((v10 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194133AE0);
  }
  v11 = *((_QWORD *)a2 + 3);
  if (((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194133B00);
  }
  v12 = *(_WORD *)(v9 + 4) & 0x7F;
  if ((v12 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v9 + 4) & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_102;
  if (v12 != 73)
  {
LABEL_16:
    if (v12 == 1)
      goto LABEL_17;
LABEL_102:
    if ((v10 & 0x7F) == 0x50)
    {
      if (*(unsigned __int16 *)(v9 + 8) - 91 <= 2)
        LOWORD(v9) = 0x3200AF00AF0uLL >> (16 * (*(_BYTE *)(v9 + 8) - 91));
      else
        LOWORD(v9) = 1600;
    }
    else
    {
      LOWORD(v9) = 1600;
    }
    goto LABEL_27;
  }
  v35 = *(unsigned __int8 **)(*(_QWORD *)(v9 + 8) + 8);
  v36 = v35[12];
  if (v36 == 1 || (v36 - 5) < 4)
  {
    v12 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v35 + 72))(v35);
    LOWORD(v10) = *(_WORD *)(v9 + 4);
    goto LABEL_16;
  }
  if (v35[12])
    goto LABEL_102;
LABEL_17:
  if ((v10 & 0x7F) == 0x49)
  {
    v49 = *(_QWORD *)(v9 + 8);
    v59 = 0;
    v57 = WebCore::CSSCalcValue::doubleValue(v49, (uint64_t)&v59);
    if (v59)
      WTF::fastFree((WTF *)((char *)v59 - 16), v50);
    v14 = v57;
  }
  else
  {
    v14 = *(double *)(v9 + 8);
  }
  if (v14 >= 3.40282347e38)
  {
    *(float *)&v54 = 3.4028e38;
LABEL_128:
    v15 = *(float *)&v54;
    goto LABEL_22;
  }
  if (v14 <= -3.40282347e38)
  {
    *(float *)&v54 = -3.4028e38;
    goto LABEL_128;
  }
  v15 = v14;
LABEL_22:
  if (v15 > 8191.8)
    v15 = 8191.8;
  v16 = v15 * 4.0;
  v17 = v15 <= -8192.0;
  v18 = -32768.0;
  if (!v17)
    v18 = v16;
  LODWORD(v9) = (int)v18;
LABEL_27:
  v19 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
  if ((v19 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194133B20);
  }
  v20 = *(_WORD *)(v11 + 4) & 0x7F;
  if ((v20 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v11 + 4) & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_109;
  if (v20 != 73)
    goto LABEL_31;
  v37 = *(unsigned __int8 **)(*(_QWORD *)(v11 + 8) + 8);
  v38 = v37[12];
  if (v38 == 1 || (v38 - 5) < 4)
  {
    v20 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v37 + 72))(v37);
    LOWORD(v19) = *(_WORD *)(v11 + 4);
LABEL_31:
    if (v20 == 1)
      goto LABEL_32;
    goto LABEL_109;
  }
  if (!v37[12])
  {
LABEL_32:
    if ((v19 & 0x7F) == 0x49)
    {
      v51 = *(_QWORD *)(v11 + 8);
      v59 = 0;
      v58 = WebCore::CSSCalcValue::doubleValue(v51, (uint64_t)&v59);
      if (v59)
        WTF::fastFree((WTF *)((char *)v59 - 16), v52);
      v21 = v58;
    }
    else
    {
      v21 = *(double *)(v11 + 8);
    }
    if (v21 >= 3.40282347e38)
    {
      *(float *)&v55 = 3.4028e38;
    }
    else
    {
      if (v21 > -3.40282347e38)
      {
        v22 = v21;
LABEL_37:
        if (v22 > 8191.8)
          v22 = 8191.8;
        v23 = v22 * 4.0;
        v17 = v22 <= -8192.0;
        v24 = -32768.0;
        if (!v17)
          v24 = v23;
        LODWORD(v25) = (int)v24;
        goto LABEL_42;
      }
      *(float *)&v55 = -3.4028e38;
    }
    v22 = *(float *)&v55;
    goto LABEL_37;
  }
LABEL_109:
  if ((v19 & 0x7F) == 0x50 && (v46 = *(unsigned __int16 *)(v11 + 8) - 91, v46 <= 2))
    v25 = 0x3200AF00AF0uLL >> (16 * v46);
  else
    LOWORD(v25) = 1600;
LABEL_42:
  if ((__int16)v25 >= (__int16)v9)
    v26 = v9;
  else
    v26 = v25;
  if ((__int16)v9 <= (__int16)v25)
    LODWORD(v25) = (__int16)v25;
  else
    LODWORD(v25) = (__int16)v9;
LABEL_83:
  if (*((_BYTE *)v2 + 124))
  {
    if ((float)((float)*((__int16 *)v2 + 60) * 0.25) == (float)((float)v26 * 0.25)
      && (float)((float)*((__int16 *)v2 + 61) * 0.25) == (float)((float)(__int16)v25 * 0.25))
    {
      return;
    }
  }
  else
  {
    *((_BYTE *)v2 + 124) = 1;
  }
  *((_DWORD *)v2 + 30) = ((_DWORD)v25 << 16) | (unsigned __int16)v26;
  v59 = 0;
  v60 = 0;
  WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v59, (_DWORD *)v2 + 24);
  v41 = v59;
  if (HIDWORD(v60))
  {
    v42 = 8 * HIDWORD(v60);
    do
    {
      v43 = *(_QWORD *)v41;
      v41 = (WTF *)((char *)v41 + 8);
      (*(void (**)(uint64_t, WebCore::CSSFontFace *, _QWORD))(*(_QWORD *)v43 + 32))(v43, v2, 0);
      v42 -= 8;
    }
    while (v42);
    v41 = v59;
    if (HIDWORD(v60))
    {
      v44 = 8 * HIDWORD(v60);
      do
      {
        v45 = *(_QWORD *)v41;
        *(_QWORD *)v41 = 0;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 56))(v45);
        v41 = (WTF *)((char *)v41 + 8);
        v44 -= 8;
      }
      while (v44);
      v41 = v59;
    }
  }
  if (v41)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    WTF::fastFree(v41, v40);
  }
}

unsigned __int16 *WebCore::CSSFontFace::setFamilies(uint64_t a1, WTF *a2)
{
  _DWORD *v2;
  uint64_t v3;
  WebCore::MutableStyleProperties *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  unsigned __int16 *result;
  void *v10;
  WTF *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  WebCore::MutableStyleProperties *v15;
  int v16;
  _DWORD **v17;
  int v18;
  WTF *v19;
  uint64_t v20;
  char v21;

  v2 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)a2 += 2;
  *(_QWORD *)(a1 + 32) = a2;
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
  {
    v15 = (WebCore::MutableStyleProperties *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::MutableStyleProperties::setProperty(v15, v16, v17, v18);
  }
  else
  {
    v19 = (WTF *)&v21;
    v6 = (WebCore::MutableStyleProperties *)((uint64_t (*)(WTF **, uint64_t))off_1E3397870[v3])(&v19, a1 + 16);
    *(_DWORD *)a2 += 2;
    v19 = a2;
    WebCore::MutableStyleProperties::setProperty(v6, 8, (_DWORD **)&v19, 0);
    v8 = v19;
    v19 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v19 = 0;
    v20 = 0;
    result = (unsigned __int16 *)WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v19, (_DWORD *)(a1 + 96));
    v11 = v19;
    if (HIDWORD(v20))
    {
      v12 = 8 * HIDWORD(v20);
      do
      {
        v13 = *(unsigned __int16 **)v11;
        v11 = (WTF *)((char *)v11 + 8);
        result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *, uint64_t, _DWORD *))(*(_QWORD *)v13 + 32))(v13, a1, v2);
        v12 -= 8;
      }
      while (v12);
      v11 = v19;
      if (HIDWORD(v20))
      {
        v14 = 8 * HIDWORD(v20);
        do
        {
          result = *(unsigned __int16 **)v11;
          *(_QWORD *)v11 = 0;
          if (result)
            result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 56))(result);
          v11 = (WTF *)((char *)v11 + 8);
          v14 -= 8;
        }
        while (v14);
        v11 = v19;
      }
    }
    if (v11)
    {
      v19 = 0;
      LODWORD(v20) = 0;
      result = (unsigned __int16 *)WTF::fastFree(v11, v10);
    }
    if (v2)
    {
      if (*v2 == 2)
        return (unsigned __int16 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v2, (WTF::StringImpl *)v10);
      else
        *v2 -= 2;
    }
  }
  return result;
}

unsigned __int16 *WebCore::MutableStyleProperties::setProperty(WebCore::MutableStyleProperties *this, int a2, _DWORD **a3, int a4)
{
  __int16 v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  unsigned __int16 *result;
  void *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t *v24;

  if ((a2 - 2) > 0x1C8)
  {
    result = (unsigned __int16 *)WebCore::shorthandForProperty(a2);
    v12 = result;
    v13 = v11;
    if (*((_DWORD *)this + 7))
    {
      v22 = 0;
      WTF::HashSet<WebCore::CSSPropertyID,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::add<std::__wrap_iter<WebCore::CSSPropertyID const*>>(&v22, result, &result[v11]);
      v24 = &v22;
      result = (unsigned __int16 *)WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::MutableStyleProperties::removeProperties(std::span<WebCore::CSSPropertyID const,18446744073709551615ul>)::$_0>((uint64_t)this + 16, &v24);
      if (v22)
        result = (unsigned __int16 *)WTF::fastFree((WTF *)(v22 - 16), v11);
    }
    if (v13)
    {
      if (a4)
        v14 = 0x2000;
      else
        v14 = 0;
      v15 = 2 * v13;
      do
      {
        v16 = *v12;
        v17 = *a3;
        if (*a3)
          *v17 += 2;
        v18 = v16 & 0x3FF | v14 | ((WebCore::isInheritedPropertyTable[v16] != 0) << 15);
        LOWORD(v22) = v18;
        v23 = v17;
        v19 = *((unsigned int *)this + 7);
        if ((_DWORD)v19 == *((_DWORD *)this + 6))
        {
          WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSProperty>((uint64_t)this + 16, (unint64_t)&v22);
        }
        else
        {
          v20 = *((_QWORD *)this + 2) + 16 * v19;
          *(_WORD *)v20 = v18;
          v21 = v23;
          v23 = 0;
          *(_QWORD *)(v20 + 8) = v21;
          ++*((_DWORD *)this + 7);
        }
        result = v23;
        v23 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (unsigned __int16 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)result -= 2;
        }
        ++v12;
        v15 -= 2;
      }
      while (v15);
    }
  }
  else
  {
    if (a4)
      v7 = 0x2000;
    else
      v7 = 0;
    LOWORD(v22) = v7 | ((WebCore::isInheritedPropertyTable[a2] != 0) << 15) | a2;
    v8 = *a3;
    *a3 = 0;
    v23 = v8;
    WebCore::MutableStyleProperties::setProperty(this, (unsigned __int16 *)&v22, 0);
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (unsigned __int16 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore::MutableStyleProperties *WebCore::StyleRuleKeyframe::mutableProperties(WebCore::StyleRuleKeyframe *this)
{
  const WebCore::StyleProperties *v1;
  BOOL v2;
  WebCore::MutableStyleProperties *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  int v7;
  WebCore::MutableStyleProperties *v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  WTF *v21;

  v1 = (const WebCore::StyleProperties *)*((_QWORD *)this + 1);
  if (v1)
    v2 = (*((_DWORD *)v1 + 1) & 8) == 0;
  else
    v2 = 1;
  if (!v2)
    return (WebCore::MutableStyleProperties *)*((_QWORD *)this + 1);
  v8 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  v4 = WebCore::MutableStyleProperties::MutableStyleProperties(v8, v1);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (v6)
  {
    v21 = v6;
    v7 = *(_DWORD *)v6 - 1;
    if (v7)
    {
      *(_DWORD *)v21 = v7;
    }
    else
    {
      v10 = *((unsigned int *)v21 + 1);
      if ((v10 & 8) != 0)
      {
        v11 = *((unsigned int *)v21 + 7);
        if ((_DWORD)v11)
        {
          v12 = 16 * v11;
          v13 = (_DWORD **)(*((_QWORD *)v21 + 2) + 8);
          do
          {
            v14 = *v13;
            *v13 = 0;
            if (v14)
            {
              if (*v14 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v5);
              else
                *v14 -= 2;
            }
            v13 += 2;
            v12 -= 16;
          }
          while (v12);
        }
        v15 = (WTF *)*((_QWORD *)v21 + 2);
        if ((WTF *)((char *)v21 + 32) != v15 && v15 != 0)
        {
          *((_QWORD *)v21 + 2) = 0;
          *((_DWORD *)v21 + 6) = 0;
          WTF::fastFree(v15, v5);
        }
        v17 = *((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      else if (v10 >= 0x10)
      {
        v18 = 0;
        v19 = (unsigned int *)((char *)v21 + ((v10 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v20 = (_DWORD *)(*v19 | ((unint64_t)*((unsigned __int8 *)v19 + 4) << 32));
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v5);
          else
            *v20 -= 2;
          ++v18;
          v19 = (unsigned int *)((char *)v19 + 5);
        }
        while (v18 < (unint64_t)*((unsigned int *)v21 + 1) >> 4);
      }
      WTF::fastFree(v21, v5);
    }
  }
  return v8;
}

uint64_t WebCore::StyleRule::StyleRule(uint64_t a1, uint64_t a2)
{
  char v4;
  const WebCore::StyleProperties *v5;
  WebCore::MutableStyleProperties *v6;
  WTF::StringImpl *v7;
  uint64_t v9;

  *(_DWORD *)a1 = 1;
  v4 = *(_BYTE *)(a1 + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
  *(_BYTE *)(a1 + 4) = v4;
  *(_BYTE *)(a1 + 4) = v4 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  v5 = *(const WebCore::StyleProperties **)(a2 + 8);
  v6 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  v9 = 0;
  *(_QWORD *)(a1 + 8) = WebCore::MutableStyleProperties::MutableStyleProperties(v6, v5);
  WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(&v9, v7);
  WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(a1 + 16), (uint64_t *)(a2 + 16));
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

WebCore::MutableStyleProperties *WebCore::MutableStyleProperties::MutableStyleProperties(WebCore::MutableStyleProperties *this, const WebCore::StyleProperties *a2)
{
  int v4;
  char *v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _DWORD *v18;
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  _DWORD *v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD **v30;
  _DWORD *v31;
  uint64_t v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;

  v4 = *((_DWORD *)a2 + 1) & 7 | 8;
  *(_DWORD *)this = 1;
  *((_DWORD *)this + 1) = v4;
  *((_QWORD *)this + 1) = 0;
  v5 = (char *)this + 32;
  *((_QWORD *)this + 2) = (char *)this + 32;
  v6 = (WebCore::MutableStyleProperties *)((char *)this + 16);
  *((_QWORD *)this + 3) = 4;
  v7 = *((_DWORD *)a2 + 1);
  if ((v7 & 8) == 0)
  {
    if (v7 < 0x10)
    {
      v9 = 0;
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)(v7 & 0xFFFFFFF0));
      v9 = (WTF *)v8;
      v10 = *((_DWORD *)a2 + 1);
      if (v10 >= 0x10)
      {
        v11 = 0;
        v15 = 0;
        v16 = (char *)a2 + 8;
        do
        {
          v17 = &v16[5 * v15 + ((v10 >> 3) & 0x1FFFFFFE)];
          v18 = (_DWORD *)(*(unsigned int *)v17 | ((unint64_t)v17[4] << 32));
          v19 = *(_WORD *)&v16[2 * v15];
          if (v18)
            *v18 += 2;
          v20 = v8 + 16 * v11;
          *(_WORD *)v20 = *(_WORD *)&v16[2 * v15] & 0x7C00 | ((WebCore::isInheritedPropertyTable[v19 & 0x3FF] != 0) << 15) | v19 & 0x3FF;
          *(_QWORD *)(v20 + 8) = v18;
          ++v11;
          v21 = v15 + 1;
          v15 = (v15 + 1);
          v10 = *((_DWORD *)a2 + 1);
        }
        while (v21 < v10 >> 4);
LABEL_14:
        v22 = *((_DWORD *)this + 7);
        if (v22 > v11)
        {
          WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)v6, (WTF::StringImpl *)v11);
        }
        else
        {
          if (v11 <= *((_DWORD *)this + 6))
          {
LABEL_16:
            v23 = *(_QWORD *)v6;
            if (v22)
            {
              v24 = (WTF *)((char *)v9 + 16 * v22);
              v25 = v9;
              do
              {
                *(_WORD *)v23 = *(_WORD *)v25;
                v26 = (_DWORD *)*((_QWORD *)v25 + 1);
                if (v26)
                  *v26 += 2;
                v27 = *(_DWORD **)(v23 + 8);
                *(_QWORD *)(v23 + 8) = v26;
                if (v27)
                {
                  if (*v27 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, a2);
                  else
                    *v27 -= 2;
                }
                v25 = (WTF *)((char *)v25 + 16);
                v23 += 16;
              }
              while (v25 != v24);
              v28 = *((_DWORD *)this + 7);
              v23 = *((_QWORD *)this + 2);
            }
            else
            {
              v28 = 0;
            }
            if (v28 != v11)
            {
              v33 = v23 + 16 * v28;
              v34 = (_QWORD *)((char *)v9 + 16 * v28);
              do
              {
                *(_WORD *)v33 = *(_WORD *)v34;
                v35 = (_DWORD *)v34[1];
                if (v35)
                  *v35 += 2;
                *(_QWORD *)(v33 + 8) = v35;
                v34 += 2;
                v33 += 16;
              }
              while (v34 != (_QWORD *)((char *)v9 + 16 * v11));
            }
            *((_DWORD *)this + 7) = v11;
            if (v11)
            {
              v29 = 16 * v11;
              v30 = (_DWORD **)((char *)v9 + 8);
              do
              {
                v31 = *v30;
                *v30 = 0;
                if (v31)
                {
                  if (*v31 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, a2);
                  else
                    *v31 -= 2;
                }
                v30 += 2;
                v29 -= 16;
              }
              while (v29);
            }
            if (v9)
              WTF::fastFree(v9, a2);
            return this;
          }
          WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v6, a2);
          WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)v6, v11);
        }
        v22 = *((_DWORD *)this + 7);
        goto LABEL_16;
      }
    }
    v11 = 0;
    goto LABEL_14;
  }
  if (a2 != this)
  {
    if (*((_DWORD *)a2 + 7) > 4u)
    {
      WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebCore::MutableStyleProperties *)((char *)this + 16), a2);
      WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)v6, *((unsigned int *)a2 + 7));
      v12 = *((unsigned int *)this + 7);
      v5 = (char *)*((_QWORD *)this + 2);
      v13 = *((_QWORD *)a2 + 2);
      if ((_DWORD)v12)
      {
        v41 = v13 + 16 * v12;
        do
        {
          *(_WORD *)v5 = *(_WORD *)v13;
          v42 = *(_DWORD **)(v13 + 8);
          if (v42)
            *v42 += 2;
          v43 = (_DWORD *)*((_QWORD *)v5 + 1);
          *((_QWORD *)v5 + 1) = v42;
          if (v43)
          {
            if (*v43 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v40);
            else
              *v43 -= 2;
          }
          v13 += 16;
          v5 += 16;
        }
        while (v13 != v41);
        v13 = *((_QWORD *)a2 + 2);
        LODWORD(v12) = *((_DWORD *)this + 7);
        v5 = (char *)*((_QWORD *)this + 2);
      }
    }
    else
    {
      LODWORD(v12) = 0;
      v13 = *((_QWORD *)a2 + 2);
    }
    v14 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v12 != (_DWORD)v14)
    {
      v36 = v13 + 16 * v14;
      v37 = &v5[16 * v12];
      v38 = v13 + 16 * v12;
      do
      {
        *(_WORD *)v37 = *(_WORD *)v38;
        v39 = *(_DWORD **)(v38 + 8);
        if (v39)
          *v39 += 2;
        *((_QWORD *)v37 + 1) = v39;
        v38 += 16;
        v37 += 16;
      }
      while (v38 != v36);
      LODWORD(v12) = *((_DWORD *)a2 + 7);
    }
    *((_DWORD *)this + 7) = v12;
  }
  return this;
}

WTF::StringImpl **WebCore::CSSSelectorList::CSSSelectorList(WTF::StringImpl **a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    LODWORD(v5) = 0;
    do
    {
      v6 = *(_BYTE *)(v3 + 2);
      v3 += 16;
      v5 = (v5 + 1);
    }
    while ((v6 & 2) == 0);
    if ((_DWORD)v5)
    {
      WTF::makeUniqueArray<WebCore::CSSSelector>(v5, &v14);
      v7 = v14;
      v14 = 0;
      v8 = *a1;
      *a1 = v7;
      if (v8)
      {
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)a1, v8);
        v9 = v14;
        v14 = 0;
        if (v9)
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v14, v9);
      }
      v10 = 0;
      if (v5 <= 1)
        v11 = 1;
      else
        v11 = v5;
      v12 = 16 * v11;
      do
      {
        WebCore::CSSSelector::CSSSelector((WTF::StringImpl *)((char *)*a1 + v10), (const WebCore::CSSSelector *)(*a2 + v10));
        v10 += 16;
      }
      while (v12 != v10);
    }
  }
  return a1;
}

WebCore::CSSSelector *WebCore::CSSSelector::CSSSelector(WebCore::CSSSelector *this, const WebCore::CSSSelector *a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_DWORD *)this & 0xFFFFFFF0 | *(_DWORD *)a2 & 0xF;
  *(_DWORD *)this = v3;
  v4 = v3 & 0xFFFFFE0F | (16 * ((*(_DWORD *)a2 >> 4) & 0x1F));
  *(_DWORD *)this = v4;
  v5 = v4 & 0xFFFE01FF | ((*(_DWORD *)a2 >> 9) << 9);
  *(_DWORD *)this = v5;
  v6 = v5 & 0xFFFDFFFF | (((*(_DWORD *)a2 >> 17) & 1) << 17);
  *(_DWORD *)this = v6;
  v7 = v6 & 0xFFFBFFFF | (((*(_DWORD *)a2 >> 18) & 1) << 18);
  *(_DWORD *)this = v7;
  v8 = v7 & 0xFFF7FFFF | (((*(_DWORD *)a2 >> 19) & 1) << 19);
  *(_DWORD *)this = v8;
  v9 = v8 & 0xFFEFFFFF | (((*(_DWORD *)a2 >> 20) & 1) << 20);
  *(_DWORD *)this = v9;
  v10 = v9 & 0xFFDFFFFF | (((*(_DWORD *)a2 >> 21) & 1) << 21);
  *(_DWORD *)this = v10;
  v11 = v10 & 0xFFBFFFFF | (((*(_DWORD *)a2 >> 22) & 1) << 22);
  *(_DWORD *)this = v11;
  v12 = v11 & 0xFF7FFFFF | (((*(_DWORD *)a2 >> 23) & 1) << 23);
  *(_DWORD *)this = v12;
  *(_DWORD *)this = v12 & 0xFEFFFFFF | ((HIBYTE(*(_DWORD *)a2) & 1) << 24);
  *((_QWORD *)this + 1) = 0;
  if ((*(_DWORD *)a2 & 0x100000) != 0)
  {
    v16 = *((_QWORD *)a2 + 1);
    v17 = WTF::fastMalloc((WTF *)0x40);
    *((_QWORD *)this + 1) = WebCore::CSSSelector::RareData::RareData(v17, v16);
  }
  else
  {
    v13 = (int *)*((_QWORD *)a2 + 1);
    if ((*(_DWORD *)a2 & 0x1F0) == 0x10)
    {
      *((_QWORD *)this + 1) = v13;
      v14 = *v13 + 1;
    }
    else
    {
      if (!v13)
        return this;
      *((_QWORD *)this + 1) = v13;
      v14 = *v13 + 2;
    }
    *v13 = v14;
  }
  return this;
}

_QWORD *WTF::makeUniqueArray<WebCore::CSSSelector>@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  _QWORD *v8;

  v4 = a1 >> 60 != 0;
  if (16 * a1 >= 0xFFFFFFFFFFFFFFF0)
    v4 = 1;
  if (v4)
    v5 = -1;
  else
    v5 = 16 * a1 + 16;
  result = (_QWORD *)WTF::fastMalloc((WTF *)v5);
  *result = 16;
  result[1] = a1;
  v7 = result + 2;
  if (a1)
  {
    v8 = result + 2;
    do
    {
      *v8 = 786433;
      v8[1] = 0;
      v8 += 2;
    }
    while (v8 != &v7[2 * a1]);
  }
  *a2 = v7;
  return result;
}

uint64_t WebCore::CSSFontSelector::dispatchInvalidationCallbacks(WebCore::CSSFontSelector *this)
{
  uint64_t *v2;
  uint64_t result;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  ++*((_DWORD *)this + 41);
  v2 = (uint64_t *)((char *)this + 104);
  v9 = 0;
  v10 = 0;
  result = (uint64_t)WTF::Mapper<WTF::Vector<WebCore::FontSelectorClient *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::FontSelectorClient *,WTF::HashSet<WebCore::FontSelectorClient *,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTableTraits>>(WTF::HashSet<WebCore::FontSelectorClient *,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTableTraits> const&)::{lambda(WebCore::FontSelectorClient *&&)#1},WTF::Vector<WebCore::FontSelectorClient *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::FontSelectorClient *,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v9, (_QWORD **)this + 13);
  v5 = v9;
  if (HIDWORD(v10))
  {
    v6 = 8 * HIDWORD(v10);
    v7 = (uint64_t *)v9;
    do
    {
      result = *v2;
      if (*v2)
      {
        v8 = *v7;
        result = WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::DefaultHash<WebCore::FontSelectorClient *>>,WebCore::FontSelectorClient *>(result, *v7);
        if (result)
          result = (*(uint64_t (**)(uint64_t, WebCore::CSSFontSelector *))(*(_QWORD *)v8 + 16))(v8, this);
      }
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
  if (v5)
    return WTF::fastFree(v5, v4);
  return result;
}

WTF::StringImpl *WebCore::Document::invalidateMatchedPropertiesCacheAndForceStyleRecalc(WebCore::Document *this, void *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)WebCore::Style::Scope::invalidateMatchedDeclarationsCache(*((_QWORD *)this + 166), a2);
  if (!*((_BYTE *)this + 3362))
  {
    if (*((_QWORD *)this + 243))
      return WebCore::Document::scheduleFullStyleRebuild(this);
  }
  return result;
}

WTF::StringImpl *WebCore::Document::scheduleFullStyleRebuild(WTF::StringImpl *this)
{
  WebCore::InspectorInstrumentation *v1;
  double v2;
  WebCore::Document *v3;

  v1 = this;
  *((_BYTE *)this + 3390) = 1;
  if (((*((_QWORD *)this + 192) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*((_QWORD *)this + 192) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    && !*((_BYTE *)this + 3362))
  {
    *((_QWORD *)this + 191) = 0;
    WTF::MonotonicTime::now(this);
    this = (WTF::StringImpl *)WebCore::TimerBase::setNextFireTime((uint64_t)v1 + 1504, v2 + 0.0);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      this = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents(v1, v3);
      if (this)
        return WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(this, v1);
    }
  }
  return this;
}

uint64_t WebCore::Style::Scope::invalidateMatchedDeclarationsCache(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = this;
  if (!*(_QWORD *)(this + 24))
  {
    v3 = *(_QWORD *)(this + 16);
    v4 = *(_QWORD **)(v3 + 2696);
    if (v4)
    {
      while (1)
      {
        v5 = *(_QWORD *)(*v4 + 8);
        if (v5)
          break;
        v4 = (_QWORD *)v4[2];
        if (!v4)
          goto LABEL_9;
      }
LABEL_4:
      this = WebCore::Style::Scope::invalidateMatchedDeclarationsCache(*(WebCore::Style::Scope **)(v5 + 216));
      while (1)
      {
        v4 = (_QWORD *)v4[2];
        if (!v4)
          break;
        v5 = *(_QWORD *)(*v4 + 8);
        if (v5)
        {
          ++*(_DWORD *)(v3 + 2712);
          goto LABEL_4;
        }
      }
      ++*(_DWORD *)(v3 + 2712);
    }
  }
LABEL_9:
  v6 = *(_QWORD *)(v2 + 32);
  if (v6)
  {
    this = *(_QWORD *)(v6 + 424);
    if (this)
    {
      *(_QWORD *)(v6 + 424) = 0;
      return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(this, a2);
    }
  }
  return this;
}

uint64_t *WTF::Mapper<WTF::Vector<WebCore::FontSelectorClient *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::FontSelectorClient *,WTF::HashSet<WebCore::FontSelectorClient *,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTableTraits>>(WTF::HashSet<WebCore::FontSelectorClient *,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTableTraits> const&)::{lambda(WebCore::FontSelectorClient *&&)#1},WTF::Vector<WebCore::FontSelectorClient *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::FontSelectorClient *,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, _QWORD **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;

  v2 = result;
  v3 = (uint64_t)*a2;
  if (*a2)
  {
    v4 = *(unsigned int *)(v3 - 12);
    if (!(_DWORD)v4)
    {
      result = WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::begin(*a2);
LABEL_5:
      v8 = (uint64_t *)(v3 + 8 * *(unsigned int *)(v3 - 4));
      goto LABEL_6;
    }
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = WTF::fastMalloc((WTF *)(8 * v4));
    *((_DWORD *)v2 + 2) = v4;
    *v2 = v6;
    v3 = (uint64_t)*a2;
    result = WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::begin(*a2);
    if (v3)
      goto LABEL_5;
  }
  else
  {
    result = WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::begin(0);
  }
  v8 = 0;
LABEL_6:
  if (v8 != result)
  {
    v9 = *((_DWORD *)v2 + 3);
    do
    {
      v10 = *result++;
      *(_QWORD *)(*v2 + 8 * v9) = v10;
      while (result != v7)
      {
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_13;
        ++result;
      }
      result = v7;
LABEL_13:
      ++v9;
    }
    while (result != v8);
    *((_DWORD *)v2 + 3) = v9;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[v1];
  if (!*((_DWORD *)result - 3))
    return &result[v1];
  if ((_DWORD)v1)
  {
    v3 = 8 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v3 -= 8;
      if (!v3)
        return v2;
    }
  }
  return result;
}

uint64_t WebCore::CSSSegmentedFontFace::fontLoaded(WebCore::CSSSegmentedFontFace *this, WebCore::CSSFontFace *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
  {
    *((_QWORD *)this + 3) = 0;
    return WTF::HashTable<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>>,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashMap<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<WebCore::FontRanges>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>>,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashMap<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<WebCore::FontRanges>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _DWORD **v22;
  _DWORD *v23;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 112 * i;
      if (!*(_BYTE *)v5)
      {
        v6 = a1 + 112 * i;
        v7 = v6 + 72;
        v8 = *(unsigned int *)(v6 + 84);
        if ((_DWORD)v8)
        {
          v21 = 16 * v8;
          v22 = (_DWORD **)(*(_QWORD *)v7 + 8);
          do
          {
            v23 = *v22;
            *v22 = 0;
            if (v23)
            {
              if (v23[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
              else
                --v23[2];
            }
            v22 += 2;
            v21 -= 16;
          }
          while (v21);
        }
        v9 = *(WTF **)v7;
        if (v7 + 16 != *(_QWORD *)v7 && v9 != 0)
        {
          *(_QWORD *)v7 = 0;
          *(_DWORD *)(v7 + 8) = 0;
          WTF::fastFree(v9, a2);
        }
        v11 = *(unsigned int *)(v5 + 68);
        v12 = *(WTF **)(v5 + 56);
        if ((_DWORD)v11)
        {
          v13 = (WTF *)((char *)v12 + 16 * v11);
          do
          {
            v14 = *((_QWORD *)v12 + 1);
            if ((v14 & 0x8000000000000) != 0)
            {
              v15 = v12;
              v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                WTF::fastFree((WTF *)v16, a2);
                v12 = v15;
              }
            }
            v12 = (WTF *)((char *)v12 + 16);
          }
          while (v12 != v13);
          v12 = *(WTF **)(v5 + 56);
        }
        if (v12)
        {
          *(_QWORD *)(v5 + 56) = 0;
          *(_DWORD *)(v5 + 64) = 0;
          WTF::fastFree(v12, a2);
        }
        v19 = *(_QWORD *)(v5 + 32);
        *(_QWORD *)(v5 + 32) = 0;
        if (v19)
          WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v19, (WTF::StringImpl *)a2);
        v20 = *(WTF::StringImpl **)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t `non-virtual thunk to'WebCore::CSSFontSelector::fontLoaded(WebCore::CSSFontSelector *this, WebCore::CSSFontFace *a2)
{
  return WebCore::CSSFontSelector::dispatchInvalidationCallbacks((WebCore::CSSFontSelector *)((char *)this - 24));
}

void WebCore::CachedFont::createCustomFontData(WebCore::CachedFont *this@<X0>, WebCore::SharedBuffer *a2@<X1>, const WTF::String *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  char v22;

  do
    v6 = __ldaxr((unsigned int *)this);
  while (__stlxr(v6 + 1, (unsigned int *)this));
  *(_BYTE *)a3 = 1;
  WebCore::FontCustomPlatformData::create(this, a2, a4);
  do
  {
    v8 = __ldaxr((unsigned int *)this);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)this));
  if (!v9)
  {
    atomic_store(1u, (unsigned int *)this);
    v10 = *((unsigned int *)this + 5);
    if ((_DWORD)v10)
    {
      v11 = *((_QWORD *)this + 1);
      v12 = v11 + 16 * v10;
      do
      {
        v13 = *(unsigned int **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v19 = v11;
            v20 = v12;
            atomic_store(1u, v13);
            v21 = (WTF *)v13;
            v16 = v13[6];
            if ((_DWORD)v16 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v16])(&v22, v13 + 2);
            *((_DWORD *)v21 + 6) = -1;
            WTF::fastFree(v21, v7);
            v11 = v19;
            v12 = v20;
          }
        }
        v11 += 16;
      }
      while (v11 != v12);
    }
    v17 = (WTF *)*((_QWORD *)this + 1);
    if ((WebCore::CachedFont *)((char *)this + 24) != v17 && v17 != 0)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v17, v7);
    }
    WTF::fastFree(this, v7);
  }
}

uint64_t WebCore::MutableStyleProperties::setProperty(WebCore::MutableStyleProperties *a1, int a2, unsigned int a3, int a4)
{
  int *v4;
  int *v5;
  __int16 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int *v9;
  uint64_t result;
  unsigned __int16 v11;
  int *v12;

  if (a3 >= 0x48E)
  {
    result = 92;
    __break(0xC471u);
  }
  else
  {
    v4 = &WebCore::staticCSSValuePool[4 * a3];
    v4[3088] += 2;
    v5 = v4 + 3088;
    if (a4)
      v6 = 0x2000;
    else
      v6 = 0;
    v11 = v6 & 0xFC00 | a2 & 0x3FF | ((WebCore::isInheritedPropertyTable[a2] != 0) << 15);
    v12 = v5;
    v8 = WebCore::MutableStyleProperties::setProperty(a1, &v11, 0);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*v9 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v7);
      else
        *v9 -= 2;
    }
    return v8;
  }
  return result;
}

WTF *WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(uint64_t a1, unsigned __int8 a2, int a3, unsigned int a4, __int16 a5)
{
  int8x8_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  signed __int8 v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  __int16 v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  WTF *v35;
  WTF *result;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  char *v48;
  uint64_t *v49;
  int v50;
  char *v51;
  char v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  char *v57;
  int *v58;
  int v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  char *v73;
  uint64_t *v74;
  int v75;
  char *v76;
  char v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int i;
  unsigned int v84;
  char v85;
  char *v86;
  int *v87;
  int v88;
  _BYTE *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  WTF *v94;
  int v96;
  unsigned int v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  JSC::AssemblerBuffer *v101;
  WTF *v104;
  uint64_t v105;
  _DWORD *v106[2];
  WTF *v107;
  uint64_t v108;
  _BYTE v109[16];
  WTF *v110;
  uint64_t v111;
  _QWORD v112[9];
  int v113;
  unsigned __int8 v114;
  char v115;
  int v116;
  int v117;
  char v118;
  __int16 v119;
  char v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  WTF *v127;
  uint64_t v128;
  _BYTE v129[24];
  _QWORD *v130[2];
  uint64_t v131;
  _BYTE v132[9];

  v131 = a2 | 0x4800000000;
  v130[0] = (_QWORD *)a1;
  v130[1] = &v131;
  v127 = (WTF *)v129;
  v8 = (int8x8_t)2;
  v128 = 2;
  v9 = 32 * (char)a2;
  if (a4 != 3)
    goto LABEL_2;
  v104 = (WTF *)v106;
  v105 = 2;
  v37 = *(_QWORD *)(a1 + 496);
  v38 = *(_QWORD *)(a1 + 504);
  v39 = *(unsigned int *)(a1 + 520);
  if (v37 <= v38)
    v40 = 0;
  else
    v40 = *(unsigned int *)(a1 + 520);
  if (v40 + v38 == v37)
  {
    __break(0xC471u);
    JUMPOUT(0x1941359DCLL);
  }
  if (v37 == v38)
  {
    __break(0xC471u);
    JUMPOUT(0x1941359FCLL);
  }
  v41 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 512) + v37);
  v132[0] = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v37);
  if (v37 == v39 - 1)
    v42 = 0;
  else
    v42 = v37 + 1;
  *(_QWORD *)(a1 + 496) = v42;
  v43 = (_QWORD *)(a1 + 544);
  v44 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v44 == *(_DWORD *)(a1 + 552))
  {
    v99 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v44 + 1), (unint64_t)v132);
    v44 = *(unsigned int *)(a1 + 556);
    *(_BYTE *)(*(_QWORD *)(a1 + 544) + v44) = *v99;
    v41 = v132[0];
  }
  else
  {
    *(_BYTE *)(*v43 + v44) = v41;
  }
  *(_DWORD *)(a1 + 556) = v44 + 1;
  v101 = (JSC::AssemblerBuffer *)(a1 + 216);
  v45 = *(_DWORD *)(a1 + 360);
  if (v45 + 4 > *(_DWORD *)(a1 + 352))
  {
    *(double *)&v8 = JSC::AssemblerBuffer::outOfLineGrow(v101);
    v45 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v45) = v9 & 0xFFFFFFE0 | v41 & 0x1F | 0xB8454000;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1 + 160, 0, v41, (uint64_t)&v125, v8);
  v46 = v125;
  if (v125 != -1)
  {
    v47 = HIDWORD(v105);
    if (HIDWORD(v105) == (_DWORD)v105)
    {
      v48 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, (void *)(HIDWORD(v105) + 1), (unint64_t)&v125);
      v50 = *(_DWORD *)v48;
      v49 = (uint64_t *)(v48 + 4);
      v46 = v50;
      v47 = HIDWORD(v105);
    }
    else
    {
      v49 = &v126;
    }
    v51 = (char *)v104 + 12 * v47;
    *(_DWORD *)v51 = v46;
    *(_QWORD *)(v51 + 4) = *v49;
    ++HIDWORD(v105);
  }
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,WebCore::Style::Relation::Type,std::optional<JSC::ARM64Registers::RegisterID>)::$_0::operator()(v130, (char)v41);
  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x194135A2CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
  v52 = *(_BYTE *)(a1 + 464);
  v53 = *(_DWORD *)(a1 + 360);
  if (v53 + 4 > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v101);
    v53 = *(_DWORD *)(a1 + 360);
  }
  v54 = 32 * (char)v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v53) = v54 | v52 & 0x1F | 0xB8408000;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::branch32(a1 + 160, 1u, 17, 3, (uint64_t)&v123);
  v55 = v123;
  if (v123 != -1)
  {
    v56 = HIDWORD(v105);
    if (HIDWORD(v105) == (_DWORD)v105)
    {
      v57 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, (void *)(HIDWORD(v105) + 1), (unint64_t)&v123);
      v59 = *(_DWORD *)v57;
      v58 = (int *)(v57 + 4);
      v55 = v59;
      v56 = HIDWORD(v105);
    }
    else
    {
      v58 = &v124;
    }
    v60 = (char *)v104 + 12 * v56;
    *(_DWORD *)v60 = v55;
    *(_QWORD *)(v60 + 4) = *(_QWORD *)v58;
    ++HIDWORD(v105);
  }
  v62 = *(_QWORD *)(a1 + 496);
  v61 = *(_QWORD *)(a1 + 504);
  v63 = *(unsigned int *)(a1 + 520);
  if (v62 <= v61)
    v64 = 0;
  else
    v64 = *(unsigned int *)(a1 + 520);
  if (v64 + v61 == v62)
  {
    __break(0xC471u);
    JUMPOUT(0x194135A5CLL);
  }
  if (v62 == v61)
  {
    __break(0xC471u);
    JUMPOUT(0x194135A7CLL);
  }
  v65 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 512) + v62);
  v132[0] = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v62);
  if (v62 == v63 - 1)
    v66 = 0;
  else
    v66 = v62 + 1;
  *(_QWORD *)(a1 + 496) = v66;
  v67 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v67 == *(_DWORD *)(a1 + 552))
  {
    v100 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v67 + 1), (unint64_t)v132);
    v67 = *(unsigned int *)(a1 + 556);
    *(_BYTE *)(*(_QWORD *)(a1 + 544) + v67) = *v100;
    v65 = v132[0];
  }
  else
  {
    *(_BYTE *)(*v43 + v67) = v65;
  }
  *(_DWORD *)(a1 + 556) = v67 + 1;
  v68 = (char)v65;
  if (v65 != a3)
  {
    if (a3 == 63)
    {
      if (v65 != 31)
      {
        v97 = v65 & 0x1F | 0xD2800000;
        goto LABEL_135;
      }
    }
    else if (a3 != 31 && v65 != 31)
    {
      v69 = v65 & 0xFFE0FFFF | ((a3 & 0x1F) << 16) | 0xAA0003E0;
      v70 = *(_DWORD *)(a1 + 360);
      if (v70 + 4 > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v101);
        v70 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v70) = v69;
      *(_DWORD *)(a1 + 360) += 4;
      goto LABEL_81;
    }
    v97 = (char)v65 | (32 * a3) | 0x91000000;
LABEL_135:
    JSC::AssemblerBuffer::putInt(v101, v97);
  }
LABEL_81:
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToNextAdjacentElement(a1, (uint64_t)&v104, v68);
  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x194135A9CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
  JSC::MacroAssemblerARM64::load64(a1 + 160, v41, *(_BYTE *)(a1 + 464));
  JSC::MacroAssemblerARM64::branch64(a1 + 160, 1, v68, 17, (uint64_t)&v121);
  v71 = v121;
  if (v121 != -1)
  {
    v72 = HIDWORD(v105);
    if (HIDWORD(v105) == (_DWORD)v105)
    {
      v73 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, (void *)(HIDWORD(v105) + 1), (unint64_t)&v121);
      v75 = *(_DWORD *)v73;
      v74 = (uint64_t *)(v73 + 4);
      v71 = v75;
      v72 = HIDWORD(v105);
    }
    else
    {
      v74 = &v122;
    }
    v76 = (char *)v104 + 12 * v72;
    *(_DWORD *)v76 = v71;
    *(_QWORD *)(v76 + 4) = *v74;
    ++HIDWORD(v105);
  }
  WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v68);
  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x194135ABCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 424) + 208) &= ~*(_DWORD *)(a1 + 448);
  v77 = *(_BYTE *)(a1 + 432);
  v78 = *(_DWORD *)(a1 + 360);
  if (v78 + 4 > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v101);
    v78 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v78) = v54 | v77 & 0x1F | 0xB840C000;
  v79 = *(_DWORD *)(a1 + 360);
  v80 = v79 + 4;
  *(_DWORD *)(a1 + 360) = v79 + 4;
  if ((v79 + 8) > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v101);
    v80 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v80) = 285214224;
  v81 = *(_DWORD *)(a1 + 360);
  v82 = v81 + 4;
  *(_DWORD *)(a1 + 360) = v81 + 4;
  if ((v81 + 8) > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v101);
    v82 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v82) = v54 | 0xB800C010;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::store64(a1 + 160, a3, v41);
  for (i = *(_DWORD *)(a1 + 360); i < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v101);
      i = *(_DWORD *)(a1 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + i) = -721215457;
    i = *(_DWORD *)(a1 + 360) + 4;
  }
  v84 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v101);
    v84 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v84) = 335544320;
  *(_DWORD *)(a1 + 360) += 4;
  if (*(_BYTE *)(a1 + 488))
    v85 = 69;
  else
    v85 = 65;
  v116 = i;
  v117 = 0;
  v118 = v85;
  v119 = 15;
  v120 = -1;
  if (i != -1)
  {
    if (HIDWORD(v128) == (_DWORD)v128)
    {
      v86 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v127, (void *)(HIDWORD(v128) + 1), (unint64_t)&v116);
      v88 = *(_DWORD *)v86;
      v87 = (int *)(v86 + 4);
      v89 = (char *)v127 + 12 * HIDWORD(v128);
      *(_DWORD *)v89 = v88;
    }
    else
    {
      v87 = &v117;
      v89 = (char *)v127 + 12 * HIDWORD(v128);
      *(_DWORD *)v89 = i;
    }
    *(_QWORD *)(v89 + 4) = *(_QWORD *)v87;
    ++HIDWORD(v128);
  }
  if (HIDWORD(v105))
  {
    v90 = 0;
    v91 = 0;
    v92 = 12 * HIDWORD(v105);
    while (v91 < HIDWORD(v105))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v104 + v90), a1 + 160);
      ++v91;
      v90 += 12;
      if (v92 == v90)
        goto LABEL_109;
    }
LABEL_144:
    __break(0xC471u);
    JUMPOUT(0x194135958);
  }
LABEL_109:
  WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v41);
  v94 = v104;
  if (v106 != (_DWORD **)v104 && v104 != 0)
  {
    v104 = 0;
    LODWORD(v105) = 0;
    WTF::fastFree(v94, v93);
  }
LABEL_2:
  v10 = a1 + 160;
  v11 = (uint64_t *)(a1 + 496);
  v104 = (WTF *)(a1 + 160);
  v105 = a1 + 496;
  v106[0] = (_DWORD *)(a1 + 600);
  v106[1] = (_DWORD *)(a1 + 616);
  v107 = (WTF *)v109;
  v108 = 16;
  v110 = (WTF *)v112;
  v111 = 16;
  v112[8] = operationAddStyleRelationFunction;
  v113 = 2;
  v114 = a2;
  v115 = a3;
  WebCore::FunctionCall::prepareAndCall((WebCore::FunctionCall *)&v104);
  WebCore::StackAllocator::pop<16ul,WTF::CrashOnOverflow>(v106[0], (uint64_t)&v110, (uint64_t)&v107);
  if ((_DWORD)v111)
  {
    if (HIDWORD(v111))
      HIDWORD(v111) = 0;
    v13 = v110;
    if (v112 != (_QWORD *)v110)
    {
      if (!v110 || (v110 = 0, LODWORD(v111) = 0, WTF::fastFree(v13, v12), !v110))
      {
        v110 = (WTF *)v112;
        LODWORD(v111) = 16;
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 496);
  v15 = *(_QWORD *)(a1 + 504);
  v16 = *(unsigned int *)(a1 + 520);
  if (v14 <= v15)
    v17 = 0;
  else
    v17 = *(unsigned int *)(a1 + 520);
  if (v17 + v15 == v14)
    goto LABEL_144;
  if (v14 == v15)
  {
    __break(0xC471u);
    JUMPOUT(0x194135978);
  }
  v18 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v14);
  v132[0] = v18;
  if (v14 == v16 - 1)
    v19 = 0;
  else
    v19 = v14 + 1;
  *(_QWORD *)(a1 + 496) = v19;
  v20 = (_QWORD *)(a1 + 544);
  v21 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 552))
  {
    v98 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, (WTF *)(v21 + 1), (unint64_t)v132);
    v21 = *(unsigned int *)(a1 + 556);
    *(_BYTE *)(*(_QWORD *)(a1 + 544) + v21) = *v98;
    v18 = v132[0];
  }
  else
  {
    *(_BYTE *)(*v20 + v21) = v18;
  }
  *(_DWORD *)(a1 + 556) = v21 + 1;
  v22 = *(_DWORD *)(a1 + 360);
  if (v22 + 4 > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
    v22 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v22) = v9 & 0xFFFFFFE0 | v18 & 0x1F | 0xB8454000;
  *(_DWORD *)(a1 + 360) += 4;
  v23 = v18;
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,WebCore::Style::Relation::Type,std::optional<JSC::ARM64Registers::RegisterID>)::$_0::operator()(v130, v18);
  if (a4)
  {
    if (!*(_BYTE *)(a1 + 372))
    {
      __break(0xC471u);
      JUMPOUT(0x1941359BCLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)(a1 + 160), (JSC::ARM64LogicalImmediate *)a4, a1 + 424);
    v24 = 16;
  }
  else
  {
    v24 = 31;
  }
  v25 = *(_DWORD *)(a1 + 360);
  v26 = a5;
  if (v25 + 4 > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
    v26 = a5;
    v25 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v25) = v24 | (32 * v18) | 0xB8008000;
  v27 = *(_DWORD *)(a1 + 360);
  v28 = v27 + 4;
  *(_DWORD *)(a1 + 360) = v27 + 4;
  if ((v26 & 0xFF00) != 0)
  {
    v96 = 32 * v18;
    if ((v27 + 8) > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
      LOBYTE(v26) = a5;
      v28 = *(_DWORD *)(a1 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + v28) = v26 & 0x1F | 0xB800C000 | v96;
    *(_DWORD *)(a1 + 360) += 4;
  }
  if (HIDWORD(v128))
  {
    v29 = 0;
    v30 = 0;
    v31 = 12 * HIDWORD(v128);
    do
    {
      if (v30 >= HIDWORD(v128))
      {
        __break(0xC471u);
        JUMPOUT(0x194135C60);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v127 + v29), v10);
      ++v30;
      v29 += 12;
    }
    while (v31 != v29);
  }
  WebCore::RegisterAllocator::deallocateRegister(v11, v23);
  v33 = v110;
  if (v112 != (_QWORD *)v110 && v110 != 0)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree(v33, v32);
  }
  v35 = v107;
  if (v109 != (_BYTE *)v107 && v107)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree(v35, v32);
  }
  result = v127;
  if (v129 != (_BYTE *)v127)
  {
    if (v127)
    {
      v127 = 0;
      LODWORD(v128) = 0;
      return (WTF *)WTF::fastFree(result, v32);
    }
  }
  return result;
}

void WebCore::FunctionCall::prepareAndCall(WebCore::FunctionCall *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  _DWORD *v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  JSC::AssemblerBuffer *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  int v44;
  JSC::AssemblerBuffer *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *((_QWORD *)this + 1);
  v3 = *(unsigned int *)(v2 + 60);
  if ((_DWORD)v3)
  {
    v4 = *(_BYTE **)(v2 + 48);
    do
    {
      LOBYTE(v53) = *v4;
      if (v53 <= 0xEu)
      {
        v5 = *((unsigned int *)this + 11);
        if ((_DWORD)v5 == *((_DWORD *)this + 10))
        {
          WTF::Vector<JSC::ARM64Registers::RegisterID,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::RegisterID&>((uint64_t)this + 32, (unint64_t)&v53);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 4) + v5) = (_BYTE)v53;
          *((_DWORD *)this + 11) = v5 + 1;
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  WebCore::StackAllocator::push<16ul,WTF::CrashOnOverflow>((uint64_t)&v53, *((_BYTE **)this + 2), (uint64_t)this + 32);
  v7 = (WTF *)*((_QWORD *)this + 8);
  v8 = (_DWORD *)((char *)this + 80);
  if (v7 != (WebCore::FunctionCall *)((char *)this + 80))
  {
    if (v7)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v7, v6);
    }
    *((_QWORD *)this + 8) = v8;
  }
  v9 = (int *)v53;
  if (v53 == &v55)
  {
    v10 = HIDWORD(v54);
    if (HIDWORD(v54))
    {
      v11 = 4 * HIDWORD(v54);
      do
      {
        v12 = *v9++;
        *v8++ = v12;
        v11 -= 4;
      }
      while (v11);
    }
    v13 = v54;
  }
  else
  {
    *((_QWORD *)this + 8) = v53;
    v13 = v54;
    v10 = HIDWORD(v54);
  }
  *((_DWORD *)this + 18) = v13;
  *((_DWORD *)this + 19) = v10;
  v14 = *((_DWORD *)this + 38);
  if (v14 != 2)
  {
    if (v14 != 1)
      goto LABEL_31;
    v24 = *((unsigned __int8 *)this + 156);
    if (v24 >= 0xF)
    {
      if (v24 != 19)
      {
        __break(0xC471u);
        JUMPOUT(0x19413613CLL);
      }
    }
    else if (!*((_BYTE *)this + 156))
    {
      goto LABEL_31;
    }
    v42 = *(_DWORD **)this;
    v43 = (char)v24;
    v44 = 0;
    goto LABEL_48;
  }
  v15 = *((unsigned __int8 *)this + 156);
  if (v15 >= 0xF)
  {
    if (v15 != 19)
    {
      __break(0xC471u);
      JUMPOUT(0x1941360C8);
    }
    v17 = (unsigned __int8 *)this + 157;
    v47 = *((unsigned __int8 *)this + 157);
    if (v47 < 0xF)
    {
      if (!*((_BYTE *)this + 157))
        goto LABEL_19;
      goto LABEL_78;
    }
    if (v47 == 19)
      goto LABEL_78;
    goto LABEL_62;
  }
  v17 = (unsigned __int8 *)this + 157;
  v16 = *((unsigned __int8 *)this + 157);
  if (v16 >= 0xF)
  {
    if (v16 == 19)
    {
      if (*((_BYTE *)this + 156))
        goto LABEL_78;
      goto LABEL_47;
    }
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x1941360F0);
  }
  if (!*((_BYTE *)this + 156))
  {
    if (v16 == 1)
      goto LABEL_31;
LABEL_47:
    v42 = *(_DWORD **)this;
    v43 = (char)v16;
    v44 = 1;
LABEL_48:
    JSC::MacroAssemblerARM64::move(v42, v43, v44);
    goto LABEL_31;
  }
  if (!*((_BYTE *)this + 157))
  {
    if (v15 == 1)
    {
      WebCore::FunctionCall::swapArguments(this);
      goto LABEL_31;
    }
LABEL_19:
    v18 = *(_QWORD *)this;
    v19 = *(_DWORD *)(*(_QWORD *)this + 200);
    if (v19 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 + 56));
      v19 = *(_DWORD *)(v18 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v18 + 56) + v19) = -1442839583;
    *(_DWORD *)(v18 + 200) += 4;
    v20 = *((unsigned __int8 *)this + 156);
    if (*((_BYTE *)this + 156))
    {
      v21 = *(_DWORD **)this;
      if (v20 == 31)
      {
        v45 = (JSC::AssemblerBuffer *)(v21 + 14);
        v46 = -1862269984;
      }
      else
      {
        if (v20 != 63)
        {
          v22 = ((v20 & 0x1F) << 16) | 0xAA0003E0;
LABEL_25:
          v23 = v21[50];
          if (v23 + 4 > v21[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v21 + 14));
            v23 = v21[50];
          }
          *(_DWORD *)(*((_QWORD *)v21 + 7) + v23) = v22;
          v21[50] += 4;
          goto LABEL_31;
        }
        v45 = (JSC::AssemblerBuffer *)(v21 + 14);
        v46 = -763363328;
      }
      goto LABEL_71;
    }
    goto LABEL_31;
  }
LABEL_78:
  v48 = *(_QWORD *)this;
  v49 = (v15 << 16) | 0xAA0003E0;
  v50 = *(_DWORD *)(*(_QWORD *)this + 200);
  if (v50 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 56));
    v50 = *(_DWORD *)(v48 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v48 + 56) + v50) = v49;
  *(_DWORD *)(v48 + 200) += 4;
  v51 = *v17;
  if (v51 != 1)
  {
    v21 = *(_DWORD **)this;
    if (v51 == 31)
    {
      v45 = (JSC::AssemblerBuffer *)(v21 + 14);
      v52 = -1862269984;
    }
    else
    {
      if (v51 != 63)
      {
        v22 = ((v51 & 0x1F) << 16) | 0xAA0003E1;
        goto LABEL_25;
      }
      v45 = (JSC::AssemblerBuffer *)(v21 + 14);
      v52 = -763363328;
    }
    v46 = v52 | 1;
LABEL_71:
    JSC::AssemblerBuffer::putInt(v45, v46);
  }
LABEL_31:
  v25 = *(_QWORD *)this;
  v26 = (JSC::AssemblerBuffer *)(*(_QWORD *)this + 56);
  v27 = *(_DWORD *)(*(_QWORD *)this + 200);
  if (v27 < *(_DWORD *)(*(_QWORD *)this + 52))
  {
    do
    {
      if ((v27 + 4) > *(_DWORD *)(v25 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v26);
        v27 = *(_DWORD *)(v25 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v25 + 56) + v27) = -721215457;
      v27 = *(_DWORD *)(v25 + 200) + 4;
      *(_DWORD *)(v25 + 200) = v27;
    }
    while (v27 < *(_DWORD *)(v25 + 52));
  }
  if (!*(_BYTE *)(v25 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x194135FF8);
  }
  *(_DWORD *)(*(_QWORD *)(v25 + 264) + 208) &= ~*(_DWORD *)(v25 + 288);
  v28 = *(_BYTE *)(v25 + 272) & 0x1F;
  if ((v27 + 4) > *(_DWORD *)(v25 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v26);
    v27 = *(_DWORD *)(v25 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v25 + 56) + v27) = v28 | 0xD2800000;
  v29 = *(_DWORD *)(v25 + 200);
  v30 = v29 + 4;
  *(_DWORD *)(v25 + 200) = v29 + 4;
  if ((v29 + 8) > *(_DWORD *)(v25 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v26);
    v30 = *(_DWORD *)(v25 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v25 + 56) + v30) = v28 | 0xF2A00000;
  v31 = *(_DWORD *)(v25 + 200);
  v32 = v31 + 4;
  *(_DWORD *)(v25 + 200) = v31 + 4;
  if ((v31 + 8) > *(_DWORD *)(v25 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v26);
    v32 = *(_DWORD *)(v25 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v25 + 56) + v32) = v28 | 0xF2C00000;
  v33 = *(_DWORD *)(v25 + 200);
  v34 = v33 + 4;
  *(_DWORD *)(v25 + 200) = v33 + 4;
  *(_DWORD *)(v25 + 208) = 0;
  if ((v33 + 8) > *(_DWORD *)(v25 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v26);
    v34 = *(_DWORD *)(v25 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v25 + 56) + v34) = -700513792;
  v35 = *(_DWORD *)(v25 + 200) + 4;
  for (*(_DWORD *)(v25 + 200) = v35; (signed int)v35 < *(_DWORD *)(v25 + 52); *(_DWORD *)(v25 + 200) = v35)
  {
    if (v35 + 4 > *(_DWORD *)(v25 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v26);
      v35 = *(_DWORD *)(v25 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v25 + 56) + v35) = -721215457;
    v35 = *(_DWORD *)(v25 + 200) + 4;
  }
  v36 = *((_QWORD *)this + 3);
  v53 = (uint64_t *)(v35 | 0x100000000);
  v37 = *((_QWORD *)this + 18);
  v54 = v37;
  v38 = *(unsigned int *)(v36 + 12);
  if ((_DWORD)v38 == *(_DWORD *)(v36 + 8))
  {
    v39 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Call,WTF::CodePtr<(WTF::PtrTag)64323,(WTF::FunctionAttributes)0>>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, (void *)(v38 + 1), (unint64_t)&v53);
    v40 = (_QWORD *)(*(_QWORD *)v36 + 16 * *(unsigned int *)(v36 + 12));
    *v40 = *(_QWORD *)v39;
    v40[1] = *((_QWORD *)v39 + 1);
  }
  else
  {
    v41 = *(_QWORD *)v36 + 16 * v38;
    *(_DWORD *)v41 = v35;
    *(_DWORD *)(v41 + 4) = 1;
    *(_QWORD *)(v41 + 8) = v37;
  }
  ++*(_DWORD *)(v36 + 12);
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<64u>(uint64_t a1, int *a2, int *a3, BOOL *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  BOOL v12;
  int v13;
  int v14;

  *a4 = a1 < 0;
  if (a1 >= 0)
    v4 = a1;
  else
    v4 = ~a1;
  if (HIDWORD(v4))
    v5 = HIDWORD(v4);
  else
    v5 = v4;
  v6 = v5 >> 16;
  if (v5 >= 0x10000)
  {
    v7 = (32 * (HIDWORD(v4) != 0)) | 0x10;
  }
  else
  {
    v6 = v5;
    v7 = 32 * (HIDWORD(v4) != 0);
  }
  if (v6 >= 0x100)
  {
    v6 >>= 8;
    v7 |= 8u;
  }
  if (v6 >= 0x10)
  {
    v6 >>= 4;
    v7 |= 4u;
  }
  if (v6 >= 4)
  {
    v6 >>= 2;
    v7 += 2;
  }
  if (v6 <= 1)
    v8 = v7;
  else
    v8 = v7 + 1;
  *a2 = v8;
  v9 = (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v8) ^ v4;
  if (!v9)
  {
    v14 = 0;
LABEL_37:
    *a3 = v14;
    return 1;
  }
  result = 0;
  v11 = HIDWORD(v9);
  if (!HIDWORD(v9))
    v11 = v9;
  v12 = v11 >= 0x10000;
  if (v11 >= 0x10000)
    v11 >>= 16;
  v13 = (32 * (HIDWORD(v9) != 0)) | 0x10;
  if (!v12)
    v13 = 32 * (HIDWORD(v9) != 0);
  if (v11 >= 0x100)
  {
    v11 >>= 8;
    v13 |= 8u;
  }
  if (v11 >= 0x10)
  {
    v11 >>= 4;
    v13 |= 4u;
  }
  if (v11 >= 4)
  {
    v11 >>= 2;
    v13 += 2;
  }
  if (v11 > 1)
    ++v13;
  *a3 = v13;
  if (v9 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v13)
  {
    v14 = v13 + 1;
    goto LABEL_37;
  }
  return result;
}

void WebCore::StackAllocator::push<16ul,WTF::CrashOnOverflow>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  char v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;

  if (a2[12])
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v5 = *(_DWORD *)(a3 + 12);
  if (!v5)
    return;
  v7 = v5 - 1;
  if (v5 == 1)
  {
    v18 = 1;
    goto LABEL_16;
  }
  v8 = 0;
  do
  {
    if (*(_DWORD *)(a3 + 12) <= v8 + 1)
    {
      __break(0xC471u);
      JUMPOUT(0x194136600);
    }
    v9 = *(_QWORD *)a2;
    v10 = *(unsigned __int8 *)(*(_QWORD *)a3 + v8 + 1);
    v11 = *(_BYTE *)(*(_QWORD *)a3 + v8);
    v12 = *(_DWORD *)(*(_QWORD *)a2 + 200);
    if (v12 + 4 > *(_DWORD *)(*(_QWORD *)a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56));
      v12 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v12) = v10 & 0xFFFF83FF | ((v11 & 0x1F) << 10) | 0xA9BF03E0;
    *(_DWORD *)(v9 + 200) += 4;
    v13 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v13 + 16;
    v14 = v13 + 8;
    v26 = v14;
    v15 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StackAllocator::StackReference>(a1, (unint64_t)&v26);
      v16 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v15) = v14;
      v16 = *(_DWORD *)(a1 + 12) + 1;
      *(_DWORD *)(a1 + 12) = v16;
    }
    v17 = *((_DWORD *)a2 + 2);
    v25 = v17;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StackAllocator::StackReference>(a1, (unint64_t)&v25);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v16) = v17;
      ++*(_DWORD *)(a1 + 12);
    }
    v8 += 2;
  }
  while (v8 < v7);
  if ((v5 & 1) != 0)
  {
    v18 = *(_DWORD *)(a3 + 12);
LABEL_16:
    if (v18 > v7)
    {
      if (a2[12])
      {
        __break(0xC471u);
        JUMPOUT(0x1941365B4);
      }
      v19 = *(unsigned __int8 *)(*(_QWORD *)a3 + v7);
      v20 = *(_QWORD *)a2;
      v21 = *(_DWORD *)(*(_QWORD *)a2 + 200);
      if (v21 + 4 > *(_DWORD *)(*(_QWORD *)a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56));
        v21 = *(_DWORD *)(v20 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = v19 | 0xF81F0FE0;
      *(_DWORD *)(v20 + 200) += 4;
      v22 = *((_DWORD *)a2 + 2) + 16;
      *((_DWORD *)a2 + 2) = v22;
      v24 = v22;
      v23 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StackAllocator::StackReference>(a1, (unint64_t)&v24);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v23) = v22;
        ++*(_DWORD *)(a1 + 12);
      }
      return;
    }
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x194136584);
  }
}

void WebCore::StackAllocator::pop<16ul,WTF::CrashOnOverflow>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned int v20;

  if (*((_BYTE *)a1 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x19413681CLL);
  }
  v5 = *(_DWORD *)(a3 + 12);
  if (*(_DWORD *)(a2 + 12) != v5)
  {
    __break(0xC471u);
    JUMPOUT(0x19413683CLL);
  }
  if ((v5 & 1) != 0)
  {
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 4 * (v5 - 1));
    if (a1[2] != v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19413685CLL);
    }
    if (v7 <= 0xF)
    {
      __break(0xC471u);
      JUMPOUT(0x19413687CLL);
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)a3 + (v5 - 1));
    a1[2] = v7 - 16;
    v9 = *(_QWORD *)a1;
    v10 = *(_DWORD *)(*(_QWORD *)a1 + 200);
    if (v10 + 4 > *(_DWORD *)(*(_QWORD *)a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56));
      v10 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v10) = v8 | 0xF84107E0;
    *(_DWORD *)(v9 + 200) += 4;
  }
  if ((v5 & 0xFFFFFFFE) != 0)
  {
    v11 = (v5 & 0xFFFFFFFE) - 1;
    do
    {
      v12 = *(_DWORD *)(a2 + 12);
      if (v12 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x194136894);
      }
      v13 = v11;
      v14 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v11);
      if (v14 != a1[2])
        goto LABEL_32;
      v15 = v11 - 1;
      if (v12 <= v15)
      {
        __break(0xC471u);
        JUMPOUT(0x19413689CLL);
      }
      if (*(_DWORD *)(*(_QWORD *)a2 + 4 * v15) != v14 - 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1941367CCLL);
      }
      if (v14 <= 0xF)
      {
        __break(0xC471u);
        JUMPOUT(0x1941367ECLL);
      }
      a1[2] = v14 - 16;
      v16 = *(_DWORD *)(a3 + 12);
      if (v16 <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1941368A4);
      }
      if (v16 <= v15)
      {
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x1941367ACLL);
      }
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned __int8 *)(*(_QWORD *)a3 + v13);
      v19 = *(_BYTE *)(*(_QWORD *)a3 + v15);
      v20 = *(_DWORD *)(*(_QWORD *)a1 + 200);
      if (v20 + 4 > *(_DWORD *)(*(_QWORD *)a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 + 56));
        v20 = *(_DWORD *)(v17 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v17 + 56) + v20) = v18 & 0xFFFF83FF | ((v19 & 0x1F) << 10) | 0xA8C103E0;
      *(_DWORD *)(v17 + 200) += 4;
      v11 = v13 - 2;
    }
    while ((_DWORD)v13 != 1);
  }
}

__n128 WebCore::ScrollView::setExposedContentRect(WebCore::ScrollView *this, __n128 *a2)
{
  __n128 result;

  if (!*((_BYTE *)this + 196))
  {
    *(_QWORD *)((char *)this + 180) = 0;
    *(_QWORD *)((char *)this + 172) = 0;
    *(_QWORD *)((char *)this + 188) = 0;
    *((_BYTE *)this + 196) = 1;
  }
  result = *a2;
  *(__n128 *)((char *)this + 180) = *a2;
  return result;
}

uint64_t WebCore::RenderLayer::ancestorLayerIsInContainingBlockChain(WebCore::RenderLayer *this, const WebCore::RenderLayer *a2, const WebCore::RenderLayer *a3)
{
  uint64_t result;
  const WebCore::RenderLayer *v6;
  BOOL v7;

  if (a2 == this)
    return 1;
  result = *((_QWORD *)this + 4);
  while (1)
  {
    result = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)result);
    if (!result)
      break;
    if (*(_BYTE *)(result + 46) == 49)
      return 0;
    v6 = *(const WebCore::RenderLayer **)(result + 144);
    if (v6 == a2)
      return 1;
    if (v6)
      v7 = v6 == a3;
    else
      v7 = 0;
    if (v7)
      return 0;
  }
  return result;
}

uint64_t WebCore::RenderFlexibleBox::paintChildren(WebCore::RenderFlexibleBox *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3, WebCore::PaintInfo *a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  signed int v52;
  int v53;
  signed int v54;
  BOOL v55;
  int v56;
  int v57;
  int v58;
  int v60;
  int v61;
  signed int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unint64_t v83;

  result = WebCore::OrderIterator::first((WebCore::RenderFlexibleBox *)((char *)this + 232));
  if (!result)
    return result;
  v10 = result;
  v11 = (char *)this + 256;
LABEL_3:
  if ((*(_BYTE *)(v10 + 21) & 4) != 0 && (*(_BYTE *)(v10 + 45) & 1) == 0)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (v34)
    {
      if ((*(_WORD *)(v34 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v34 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
      {
        goto LABEL_34;
      }
    }
  }
  result = 0;
  if ((*((_BYTE *)this + 22) & 4) == 0 && a5)
    result = WebCore::alwaysPageBreak(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 640) & 0xF);
  v12 = *((_DWORD *)a3 + 1);
  v13 = *(_DWORD *)(v10 + 156);
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  if ((_DWORD)result)
  {
    v49 = *((_DWORD *)a2 + 1);
    if (v14 > v49)
    {
      v50 = *((_DWORD *)a2 + 3);
      v37 = __OFADD__(v49, v50);
      v51 = v49 + v50;
      if (v37)
        v51 = (v49 >> 31) + 0x7FFFFFFF;
      if (v14 < v51)
        return WebCore::RenderView::setBestTruncatedAt(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), v14 / 64, this, 1);
    }
  }
  v15 = *(_DWORD *)(v10 + 20);
  if ((v15 & 0x800) != 0 || (v15 & 2) == 0 || !a5)
    goto LABEL_13;
  v52 = *(_DWORD *)(v10 + 164);
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  v53 = *(_DWORD *)(result + 368);
  v54 = v53 << 6;
  if (v53 < -33554432)
    v54 = 0x80000000;
  v55 = v53 <= 0x1FFFFFF && v54 < v52;
  if (v55)
    goto LABEL_13;
  v37 = __OFADD__(v14, v52);
  v56 = v14 + v52;
  if (v37)
    v56 = (v14 >> 31) + 0x7FFFFFFF;
  v57 = *(_DWORD *)(result + 360) + v53;
  v58 = v57 >= -33554432 ? v57 << 6 : 0x80000000;
  if (v57 > 0x1FFFFFF || v58 >= v56)
    goto LABEL_13;
  v60 = *(_DWORD *)(result + 348);
  v61 = v60 << 6;
  if (v60 >= -33554432)
    v62 = v60 << 6;
  else
    v62 = 0x80000000;
  if (v60 > 0x1FFFFFF)
    v62 = 0x7FFFFFFF;
  if (v14 < v62)
  {
    result = WebCore::RenderView::setBestTruncatedAt(result, v14 / 64, (WebCore::RenderBoxModelObject *)v10, 0);
    v60 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                + 1944)
                    + 348);
    v61 = v60 << 6;
  }
  if (v60 < -33554432)
    v61 = 0x80000000;
  v63 = v60 <= 0x1FFFFFF ? v61 : 0x7FFFFFFF;
  if (v14 < v63)
  {
LABEL_13:
    v16 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v55 = v16 > 5;
    v17 = (1 << v16) & 0x2A;
    v18 = v55 || v17 == 0;
    if (v18)
    {
      v19 = *(_DWORD *)a3;
    }
    else
    {
      v19 = *(_DWORD *)a3;
      if ((*((_BYTE *)this + 21) & 0x10) == 0)
      {
        v64 = *((_DWORD *)a3 + 1);
        v65 = *((_DWORD *)this + 41);
        v37 = __OFADD__(v64, v65);
        v66 = v64 + v65;
        if (v37)
          v66 = (v64 >> 31) + 0x7FFFFFFF;
        v67 = *(_DWORD *)(v10 + 164);
        v37 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v37)
          v68 = (v66 >> 31) + 0x7FFFFFFF;
        v69 = *(_DWORD *)(v10 + 156);
        if (((v69 ^ (2 * v69)) & 0x80000000) != 0)
          v70 = (v69 >> 31) + 0x7FFFFFFF;
        else
          v70 = 2 * v69;
        v37 = __OFSUB__(v68, v70);
        v20 = v68 - v70;
        if (v37)
          v20 = (v68 >> 31) + 0x7FFFFFFF;
LABEL_20:
        v83 = v19 | (unint64_t)(v20 << 32);
        v21 = *(_QWORD *)(v10 + 144);
        if (!v21 || (*(_BYTE *)(v21 + 25) & 8) == 0)
        {
          v22 = *(_DWORD *)(v10 + 20);
          if ((v22 & 0x800) == 0)
          {
            if ((v22 & 0x400) != 0
              && (*(_BYTE *)(v10 + 45) & 1) == 0
              && (v35 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8)) != 0
              && (*(_WORD *)(v35 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v35 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
            {
              v23 = *((unsigned __int16 *)a4 + 8);
              v24 = v23;
            }
            else
            {
              v23 = *((unsigned __int16 *)a4 + 8);
              v24 = 8;
            }
            if (v23 <= 4095)
            {
              if (v23 == 128 || v23 == 512)
                goto LABEL_59;
            }
            else if (v23 == 4096 || v23 == 0x2000)
            {
LABEL_59:
              result = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, unint64_t *))(*(_QWORD *)v10 + 680))(v10, a4, &v83);
              goto LABEL_32;
            }
            if (v23 == v24)
            {
              *((_WORD *)a4 + 8) = 0;
              (*(void (**)(uint64_t, WebCore::PaintInfo *, unint64_t *))(*(_QWORD *)v10 + 680))(v10, a4, &v83);
              *((_WORD *)a4 + 8) = 2;
              (*(void (**)(uint64_t, WebCore::PaintInfo *, unint64_t *))(*(_QWORD *)v10 + 680))(v10, a4, &v83);
              *((_WORD *)a4 + 8) = 4;
              (*(void (**)(uint64_t, WebCore::PaintInfo *, unint64_t *))(*(_QWORD *)v10 + 680))(v10, a4, &v83);
              *((_WORD *)a4 + 8) = 8;
              (*(void (**)(uint64_t, WebCore::PaintInfo *, unint64_t *))(*(_QWORD *)v10 + 680))(v10, a4, &v83);
              *((_WORD *)a4 + 8) = 16;
              result = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, unint64_t *))(*(_QWORD *)v10 + 680))(v10, a4, &v83);
              *((_WORD *)a4 + 8) = v24;
            }
          }
        }
LABEL_32:
        if ((*((_BYTE *)this + 22) & 4) == 0)
        {
          if (a5)
          {
            result = WebCore::alwaysPageBreak(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40)
                                                                        + 640) >> 4);
            if ((_DWORD)result)
            {
              v36 = *(_DWORD *)(v10 + 164);
              v37 = __OFADD__(v14, v36);
              v38 = v14 + v36;
              v39 = v37;
              if (v37)
              {
                v41 = 0x7FFFFFFF;
                v40 = *((_DWORD *)a2 + 1);
                if ((int)((v14 >> 31) + 0x7FFFFFFF) > v40)
                {
LABEL_81:
                  v42 = *((_DWORD *)a2 + 3);
                  v37 = __OFADD__(v40, v42);
                  v43 = v40 + v42;
                  if (v37)
                    v43 = (v40 >> 31) + 0x7FFFFFFF;
                  if (v41 < v43)
                  {
                    v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944);
                    if (v39)
                      v45 = (v14 >> 31) + 0x7FFFFFFF;
                    else
                      v45 = v38;
                    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1256))(v10);
                    v47 = v46 & ~(v46 >> 31);
                    v37 = __OFADD__(v45, v47);
                    v48 = v45 + v47;
                    if (v37)
                      v48 = (v45 >> 31) + 0x7FFFFFFF;
                    return WebCore::RenderView::setBestTruncatedAt(v44, v48 / 64, this, 1);
                  }
                }
              }
              else
              {
                v40 = *((_DWORD *)a2 + 1);
                if (v38 > v40)
                {
                  v41 = v38;
                  goto LABEL_81;
                }
              }
            }
          }
        }
LABEL_34:
        v10 = *((_QWORD *)this + 30);
        if (v10)
        {
          while (1)
          {
            if (*((_BYTE *)this + 281))
            {
              v25 = *(unsigned __int8 *)(v10 + 44);
              v26 = *(unsigned int *)(v10 + 40);
            }
            else
            {
              v25 = *(unsigned __int8 *)(v10 + 51);
              v26 = *(unsigned int *)(v10 + 47);
            }
            v27 = v26 | (v25 << 32);
            if (!v27)
              break;
LABEL_40:
            v10 = *(_QWORD *)(v27 + 8);
            if (!v10 || (*(_BYTE *)(v10 + 45) & 4) == 0)
              break;
            *((_QWORD *)this + 30) = v10;
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 32) + 144) == *(_DWORD *)(*((_QWORD *)this + 34)
                                                                                             + 28))
              goto LABEL_3;
LABEL_36:
            if (!v10)
              goto LABEL_43;
          }
LABEL_42:
          v10 = 0;
          *((_QWORD *)this + 30) = 0;
          goto LABEL_36;
        }
LABEL_43:
        v28 = (char *)*((_QWORD *)this + 34);
        if (v28 != v11)
        {
          if (*((_BYTE *)this + 280))
          {
            *((_BYTE *)this + 280) = 0;
            goto LABEL_46;
          }
          v32 = (char *)*((_QWORD *)v28 + 1);
          if (v32)
          {
            do
            {
              v33 = v32;
              v32 = *(char **)v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v33 = (char *)*((_QWORD *)v28 + 2);
              v18 = *(_QWORD *)v33 == (_QWORD)v28;
              v28 = v33;
            }
            while (!v18);
          }
          *((_QWORD *)this + 34) = v33;
          if (v33 != v11)
          {
LABEL_46:
            v29 = *((_QWORD *)this + 29);
            if (*((_BYTE *)this + 281))
            {
              v30 = *(unsigned __int8 *)(v29 + 75);
              v31 = *(unsigned int *)(v29 + 71);
            }
            else
            {
              v30 = *(unsigned __int8 *)(v29 + 68);
              v31 = *(unsigned int *)(v29 + 64);
            }
            v27 = v31 | (v30 << 32);
            if (v27)
              goto LABEL_40;
            goto LABEL_42;
          }
        }
        return result;
      }
      v71 = *((_DWORD *)this + 40);
      v37 = __OFADD__(v19, v71);
      v72 = v19 + v71;
      v73 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v37)
        v73 = v72;
      v74 = *(_DWORD *)(v10 + 160);
      v37 = __OFSUB__(v73, v74);
      v75 = v73 - v74;
      v76 = (v73 >> 31) + 0x7FFFFFFF;
      if (!v37)
        v76 = v75;
      v77 = *(_DWORD *)(v10 + 152);
      v78 = 2 * v77;
      v79 = v77 ^ (2 * v77);
      v80 = (v77 >> 31) + 0x7FFFFFFF;
      if (v79 >= 0)
        v80 = v78;
      v37 = __OFSUB__(v76, v80);
      v81 = v76 - v80;
      v19 = (v76 >> 31) + 0x7FFFFFFF;
      if (!v37)
        v19 = v81;
    }
    v20 = *((unsigned int *)a3 + 1);
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::OrderIterator::next(WebCore::OrderIterator *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  BOOL v10;

  v1 = (char *)this + 24;
  v2 = *((_QWORD *)this + 1);
  do
  {
    while (1)
    {
      if (v2)
      {
        if (*((_BYTE *)this + 49))
        {
          v3 = *(unsigned __int8 *)(v2 + 44);
          v4 = *(unsigned int *)(v2 + 40);
        }
        else
        {
          v3 = *(unsigned __int8 *)(v2 + 51);
          v4 = *(unsigned int *)(v2 + 47);
        }
LABEL_6:
        v5 = v4 | (v3 << 32);
        if (!v5)
          goto LABEL_2;
        goto LABEL_7;
      }
      v6 = (char *)*((_QWORD *)this + 5);
      if (v6 == v1)
        return 0;
      if (*((_BYTE *)this + 48))
      {
        *((_BYTE *)this + 48) = 0;
      }
      else
      {
        v8 = (char *)*((_QWORD *)v6 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(char **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (char *)*((_QWORD *)v6 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v6;
            v6 = v9;
          }
          while (!v10);
        }
        *((_QWORD *)this + 5) = v9;
        if (v9 == v1)
          return 0;
      }
      v7 = *(_QWORD *)this;
      if (*((_BYTE *)this + 49))
      {
        v3 = *(unsigned __int8 *)(v7 + 75);
        v4 = *(unsigned int *)(v7 + 71);
        goto LABEL_6;
      }
      v5 = *(unsigned int *)(v7 + 64) | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32);
      if (!v5)
        goto LABEL_2;
LABEL_7:
      v2 = *(_QWORD *)(v5 + 8);
      if (v2)
      {
        if ((*(_BYTE *)(v2 + 45) & 4) != 0)
          break;
      }
LABEL_2:
      v2 = 0;
      *((_QWORD *)this + 1) = 0;
    }
    *((_QWORD *)this + 1) = v2;
  }
  while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 144) != *(_DWORD *)(*((_QWORD *)this + 5) + 28));
  return v2;
}

uint64_t WebCore::RenderBlock::paintChild(uint64_t a1, WebCore::RenderBoxModelObject *a2, uint64_t a3, unsigned int *a4, uint64_t a5, int a6, int a7)
{
  int v11;
  _BOOL4 v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  signed int v45;
  _DWORD *v46;
  int v47;
  signed int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v54;
  int v55;
  signed int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  unsigned int *v83;
  unint64_t v84;

  v11 = *((_DWORD *)a2 + 5);
  if ((v11 & 0x400) != 0 && (*((_BYTE *)a2 + 45) & 1) == 0)
  {
    v25 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v25)
    {
      if ((*(_WORD *)(v25 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
      {
        return 1;
      }
    }
  }
  v12 = 0;
  if ((*(_BYTE *)(a1 + 22) & 4) == 0 && a6)
    v12 = (unint64_t)(*(_WORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 640) & 0xF) << 32 > 0x400000000;
  v13 = a4[1];
  v14 = *((_DWORD *)a2 + 39);
  v27 = __OFADD__(v13, v14);
  v15 = v13 + v14;
  v16 = (v13 >> 31) + 0x7FFFFFFF;
  if (v27)
    v17 = v16;
  else
    v17 = v15;
  if (v12)
  {
    v41 = *(_DWORD *)(a3 + 4);
    if (v17 > v41)
    {
      v42 = *(_DWORD *)(a3 + 12);
      v27 = __OFADD__(v41, v42);
      v43 = v41 + v42;
      v44 = (v41 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v44 = v43;
      if (v17 < v44)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944);
        v39 = v17 / 64;
LABEL_55:
        WebCore::RenderView::setBestTruncatedAt(v40, v39, (WebCore::RenderBoxModelObject *)a1, 1);
        return 0;
      }
    }
  }
  if ((v11 & 0x800) == 0 && (v11 & 2) != 0 && a6)
  {
    v45 = *((_DWORD *)a2 + 41);
    v46 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944);
    v47 = v46[92];
    v48 = v47 << 6;
    if (v47 < -33554432)
      v48 = 0x80000000;
    v49 = v47 <= 0x1FFFFFF && v48 < v45;
    if (!v49)
    {
      v83 = a4;
      v82 = a7;
      v81 = a5;
      v27 = __OFADD__(v17, v45);
      v50 = v17 + v45;
      if (v27)
        v50 = (v17 >> 31) + 0x7FFFFFFF;
      v51 = v46[90] + v47;
      v52 = v51 >= -33554432 ? v51 << 6 : 0x80000000;
      if (v51 <= 0x1FFFFFF && v52 < v50)
      {
        v54 = v46[87];
        v55 = v54 << 6;
        if (v54 >= -33554432)
          v56 = v54 << 6;
        else
          v56 = 0x80000000;
        if (v54 > 0x1FFFFFF)
          v56 = 0x7FFFFFFF;
        if (v17 < v56)
        {
          WebCore::RenderView::setBestTruncatedAt((uint64_t)v46, v17 / 64, a2, 0);
          v54 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                      + 1944)
                          + 348);
          v55 = v54 << 6;
        }
        if (v54 < -33554432)
          v55 = 0x80000000;
        v57 = v54 <= 0x1FFFFFF ? v55 : 0x7FFFFFFF;
        a5 = v81;
        a7 = v82;
        a4 = v83;
        if (v17 >= v57)
          return 0;
      }
    }
  }
  v18 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  v49 = v18 > 5;
  v19 = (1 << v18) & 0x2A;
  if (v49 || v19 == 0)
  {
    v21 = *a4;
    v22 = a4[1];
  }
  else
  {
    v21 = *a4;
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      v70 = *(_DWORD *)(a1 + 160);
      v27 = __OFADD__(v21, v70);
      v71 = v21 + v70;
      v72 = (v21 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v72 = v71;
      v73 = *((_DWORD *)a2 + 40);
      v27 = __OFSUB__(v72, v73);
      v74 = v72 - v73;
      v75 = (v72 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v75 = v74;
      v76 = *((_DWORD *)a2 + 38);
      v77 = 2 * v76;
      v78 = v76 ^ (2 * v76);
      v79 = (v76 >> 31) + 0x7FFFFFFF;
      if (v78 >= 0)
        v79 = v77;
      v27 = __OFSUB__(v75, v79);
      v80 = v75 - v79;
      v21 = (v75 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v21 = v80;
      v22 = a4[1];
    }
    else
    {
      v58 = a4[1];
      v59 = *(_DWORD *)(a1 + 164);
      v27 = __OFADD__(v58, v59);
      v60 = v58 + v59;
      v61 = (v58 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v61 = v60;
      v62 = *((_DWORD *)a2 + 41);
      v27 = __OFSUB__(v61, v62);
      v63 = v61 - v62;
      v64 = (v61 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v64 = v63;
      v65 = *((_DWORD *)a2 + 39);
      v66 = 2 * v65;
      v67 = v65 ^ (2 * v65);
      v68 = (v65 >> 31) + 0x7FFFFFFF;
      if (v67 >= 0)
        v68 = v66;
      v27 = __OFSUB__(v64, v68);
      v69 = v64 - v68;
      LODWORD(v22) = (v64 >> 31) + 0x7FFFFFFF;
      if (v27)
        v22 = v22;
      else
        v22 = v69;
    }
  }
  v84 = v21 | (unint64_t)(v22 << 32);
  v23 = *((_QWORD *)a2 + 18);
  if ((!v23 || (*(_BYTE *)(v23 + 25) & 8) == 0) && (*((_BYTE *)a2 + 21) & 8) == 0)
  {
    if (a7 == 1)
      WebCore::RenderElement::paintAsInlineBlock((uint64_t)a2, a5, (uint64_t)&v84);
    else
      (*(void (**)(WebCore::RenderBoxModelObject *, uint64_t, unint64_t *))(*(_QWORD *)a2 + 680))(a2, a5, &v84);
  }
  result = 1;
  if ((*(_BYTE *)(a1 + 22) & 4) == 0
    && a6
    && (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 640) << 32) & 0xF000000000) >= 0x4000000001)
  {
    v26 = *((_DWORD *)a2 + 41);
    v27 = __OFADD__(v17, v26);
    v28 = v17 + v26;
    v29 = v27;
    if (v27)
    {
      v31 = 0x7FFFFFFF;
      v30 = *(_DWORD *)(a3 + 4);
      if ((int)((v17 >> 31) + 0x7FFFFFFF) <= v30)
        return result;
    }
    else
    {
      v30 = *(_DWORD *)(a3 + 4);
      if (v28 <= v30)
        return result;
      v31 = v28;
    }
    v32 = *(_DWORD *)(a3 + 12);
    v27 = __OFADD__(v30, v32);
    v33 = v30 + v32;
    if (v27)
      v33 = (v30 >> 31) + 0x7FFFFFFF;
    if (v31 < v33)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944);
      if (v29)
        v35 = (v17 >> 31) + 0x7FFFFFFF;
      else
        v35 = v28;
      v36 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)a2 + 1256))(a2);
      v37 = v36 & ~(v36 >> 31);
      v27 = __OFADD__(v35, v37);
      v38 = v35 + v37;
      if (v27)
        v38 = (v35 >> 31) + 0x7FFFFFFF;
      v39 = v38 / 64;
      v40 = v34;
      goto LABEL_55;
    }
  }
  return result;
}

uint64_t WebCore::RenderElement::paintAsInlineBlock(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v5 = result;
  if ((*(_BYTE *)(result + 21) & 4) != 0
    && (*(_BYTE *)(result + 45) & 1) == 0
    && (v8 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8)) != 0
    && (*(_WORD *)(v8 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
  {
    v6 = *(unsigned __int16 *)(a2 + 16);
  }
  else
  {
    v6 = 8;
  }
  v7 = *(unsigned __int16 *)(a2 + 16);
  if (v7 <= 0xFFF)
  {
    if (v7 == 128 || v7 == 512)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 680))(result, a2, a3);
  }
  else if (v7 == 4096 || v7 == 0x2000)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 680))(result, a2, a3);
  }
  if (v7 == v6)
  {
    *(_WORD *)(a2 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 680))(result, a2, a3);
    *(_WORD *)(a2 + 16) = 2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 680))(v5, a2, a3);
    *(_WORD *)(a2 + 16) = 4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 680))(v5, a2, a3);
    *(_WORD *)(a2 + 16) = 8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 680))(v5, a2, a3);
    *(_WORD *)(a2 + 16) = 16;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 680))(v5, a2, a3);
    *(_WORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t WebCore::RenderBlock::layout(WebCore::RenderBlock *this)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  _DWORD *v6;
  uint64_t result;
  void *v8;
  int v9;
  unsigned int v10;
  int hasHorizontalLayoutOverflow;
  char v13;
  _BOOL4 v14;
  _BOOL4 v15;
  WebCore::EventNames **v16;
  WebCore::EventTarget *v17;
  WebCore::Node *v18;
  WebCore::Document *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  WebCore::EventTarget *v35;

  if ((*((_BYTE *)this + 45) & 1) != 0 || (*((_BYTE *)this + 22) & 1) == 0)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    goto LABEL_4;
  }
  v10 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3292);
  if ((v10 & 0x40) == 0)
  {
    v2 = 0;
    v4 = 0;
    v3 = (v10 >> 6) & 1;
    goto LABEL_4;
  }
  v20 = v10 & 0x40;
  v21 = *((_QWORD *)this + 24);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 + 4);
    v23 = *(_QWORD *)(v21 + 12);
    v24 = WebCore::RenderBox::flippedClientBoxRect(this);
    if ((int)v22 >= (int)v24)
    {
      v26 = v22 + v23;
      if (__OFADD__(v22, (_DWORD)v23))
        v26 = (v22 >> 31) + 0x7FFFFFFF;
      v27 = (v24 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v24, v25))
        v27 = v24 + v25;
      v2 = v26 > v27;
    }
    else
    {
      v2 = 1;
    }
    v28 = *((_QWORD *)this + 24);
    if (v28)
    {
      v29 = *(_DWORD *)(v28 + 8);
      v30 = *(_QWORD *)(v28 + 12);
      v31 = WebCore::RenderBox::flippedClientBoxRect(this);
      if (v29 >= SHIDWORD(v31))
      {
        v33 = v29 + HIDWORD(v30);
        if (__OFADD__(v29, HIDWORD(v30)))
          v33 = (v29 >> 31) + 0x7FFFFFFF;
        v34 = HIDWORD(v31) + v32;
        if (__OFADD__(HIDWORD(v31), v32))
          v34 = (HIDWORD(v31) >> 31) + 0x7FFFFFFF;
        v4 = v33 > v34;
      }
      else
      {
        v4 = 1;
      }
      goto LABEL_33;
    }
  }
  else
  {
    v2 = 0;
  }
  v4 = 0;
LABEL_33:
  v3 = v20 >> 6;
LABEL_4:
  (*(void (**)(WebCore::RenderBlock *, _QWORD, _QWORD))(*(_QWORD *)this + 1656))(this, 0, 0);
  v5 = 0;
  v6 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                      + 8)
                                          + 1944)
                              + 248)
                  + 528);
  if (v6)
    v5 = *v6 != 0;
  result = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1432))(this);
  if ((_DWORD)result)
  {
    if (*((_QWORD *)this + 24) && !v5)
      result = (uint64_t)WebCore::RenderBlock::clearLayoutOverflow(this, v8);
  }
  v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x60000000) != 0)
    *((_DWORD *)this + 5) = v9 & 0x9FFFFFFF | 0x20000000;
  if (v3)
  {
    hasHorizontalLayoutOverflow = WebCore::RenderBox::hasHorizontalLayoutOverflow(this);
    result = WebCore::RenderBox::hasVerticalLayoutOverflow(this);
    v13 = result;
    if (v2 != hasHorizontalLayoutOverflow || v4 != (_DWORD)result)
    {
      v14 = v4 != result;
      v15 = v2 != hasHorizontalLayoutOverflow;
      v16 = (WebCore::EventNames **)WebCore::OverflowEvent::operator new(80);
      WebCore::OverflowEvent::OverflowEvent(v16, v15, hasHorizontalLayoutOverflow, v14, v13);
      v17 = (WebCore::EventTarget *)WebCore::RenderElement::element(this);
      if (v17)
        *((_DWORD *)v17 + 6) += 2;
      v35 = v17;
      WebCore::Event::setTarget((unsigned int *)v16, (uint64_t *)&v35);
      v18 = v35;
      v35 = 0;
      if (v18)
        WebCore::EventTarget::deref(v18);
      v19 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
      v35 = (WebCore::EventTarget *)v16;
      WebCore::Document::enqueueOverflowEvent(v19, (WTF::StringImpl *)&v35);
      result = (uint64_t)v35;
      v35 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 16);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBlock::paintChildren(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3, WebCore::PaintInfo *a4, int a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  signed int v44;
  int v45;
  signed int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  int v52;
  int v53;
  signed int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unint64_t v74;

  if (!(*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)))
    return this;
  v5 = *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
  if (!v5 || (*(_BYTE *)(v5 + 45) & 4) == 0)
    return this;
  v10 = this;
  while (1)
  {
    v11 = *(_DWORD *)(v5 + 20);
    if ((v11 & 0x400) != 0 && (*(_BYTE *)(v5 + 45) & 1) == 0)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
      if (v25)
      {
        if ((*(_WORD *)(v25 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
        {
          goto LABEL_29;
        }
      }
    }
    v12 = 0;
    if ((*(_BYTE *)(v10 + 22) & 4) == 0 && a5)
      v12 = (unint64_t)(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 40) + 640) & 0xF) << 32 > 0x400000000;
    v13 = *((_DWORD *)a3 + 1);
    v14 = *(_DWORD *)(v5 + 156);
    v27 = __OFADD__(v13, v14);
    v15 = v13 + v14;
    v16 = (v13 >> 31) + 0x7FFFFFFF;
    if (v27)
      v17 = v16;
    else
      v17 = v15;
    if (v12)
    {
      v41 = *((_DWORD *)a2 + 1);
      if (v17 > v41)
      {
        v42 = *((_DWORD *)a2 + 3);
        v27 = __OFADD__(v41, v42);
        v43 = v41 + v42;
        if (v27)
          v43 = (v41 >> 31) + 0x7FFFFFFF;
        if (v17 < v43)
        {
          v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40) + 8) + 1944);
          v39 = v17 / 64;
          return WebCore::RenderView::setBestTruncatedAt(v40, v39, (WebCore::RenderBoxModelObject *)v10, 1);
        }
      }
    }
    if ((v11 & 0x800) == 0 && (v11 & 2) != 0 && a5)
    {
      v44 = *(_DWORD *)(v5 + 164);
      this = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40) + 8) + 1944);
      v45 = *(_DWORD *)(this + 368);
      v46 = v45 << 6;
      if (v45 < -33554432)
        v46 = 0x80000000;
      v47 = v45 <= 0x1FFFFFF && v46 < v44;
      if (!v47)
      {
        v27 = __OFADD__(v17, v44);
        v48 = v17 + v44;
        if (v27)
          v48 = (v17 >> 31) + 0x7FFFFFFF;
        v49 = *(_DWORD *)(this + 360) + v45;
        v50 = v49 >= -33554432 ? v49 << 6 : 0x80000000;
        if (v49 <= 0x1FFFFFF && v50 < v48)
        {
          v52 = *(_DWORD *)(this + 348);
          v53 = v52 << 6;
          if (v52 >= -33554432)
            v54 = v52 << 6;
          else
            v54 = 0x80000000;
          if (v52 > 0x1FFFFFF)
            v54 = 0x7FFFFFFF;
          if (v17 < v54)
          {
            this = WebCore::RenderView::setBestTruncatedAt(this, v17 / 64, (WebCore::RenderBoxModelObject *)v5, 0);
            v52 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40) + 8)
                                        + 1944)
                            + 348);
            v53 = v52 << 6;
          }
          if (v52 < -33554432)
            v53 = 0x80000000;
          v55 = v52 <= 0x1FFFFFF ? v53 : 0x7FFFFFFF;
          if (v17 >= v55)
            return this;
        }
      }
    }
    v18 = (unsigned __int16)*(_DWORD *)(v10 + 124) >> 13;
    v47 = v18 > 5;
    v19 = (1 << v18) & 0x2A;
    if (v47 || v19 == 0)
    {
      v21 = *(_DWORD *)a3;
LABEL_23:
      v22 = *((unsigned int *)a3 + 1);
      goto LABEL_24;
    }
    v21 = *(_DWORD *)a3;
    if ((*(_BYTE *)(v10 + 21) & 0x10) != 0)
    {
      v63 = *(_DWORD *)(v10 + 160);
      v27 = __OFADD__(v21, v63);
      v64 = v21 + v63;
      v65 = (v21 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v65 = v64;
      v66 = *(_DWORD *)(v5 + 160);
      v27 = __OFSUB__(v65, v66);
      v67 = v65 - v66;
      v68 = (v65 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v68 = v67;
      v69 = *(_DWORD *)(v5 + 152);
      v70 = 2 * v69;
      v71 = v69 ^ (2 * v69);
      v72 = (v69 >> 31) + 0x7FFFFFFF;
      if (v71 >= 0)
        v72 = v70;
      v27 = __OFSUB__(v68, v72);
      v73 = v68 - v72;
      v21 = (v68 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v21 = v73;
      goto LABEL_23;
    }
    v56 = *((_DWORD *)a3 + 1);
    v57 = *(_DWORD *)(v10 + 164);
    v27 = __OFADD__(v56, v57);
    v58 = v56 + v57;
    if (v27)
      v58 = (v56 >> 31) + 0x7FFFFFFF;
    v59 = *(_DWORD *)(v5 + 164);
    v27 = __OFSUB__(v58, v59);
    v60 = v58 - v59;
    if (v27)
      v60 = (v58 >> 31) + 0x7FFFFFFF;
    v61 = *(_DWORD *)(v5 + 156);
    if (((v61 ^ (2 * v61)) & 0x80000000) != 0)
      v62 = (v61 >> 31) + 0x7FFFFFFF;
    else
      v62 = 2 * v61;
    v27 = __OFSUB__(v60, v62);
    v22 = v60 - v62;
    if (v27)
      v22 = (v60 >> 31) + 0x7FFFFFFF;
LABEL_24:
    v74 = v21 | (unint64_t)(v22 << 32);
    v23 = *(_QWORD *)(v5 + 144);
    if ((!v23 || (*(_BYTE *)(v23 + 25) & 8) == 0) && (*(_BYTE *)(v5 + 21) & 8) == 0)
      this = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, unint64_t *))(*(_QWORD *)v5 + 680))(v5, a4, &v74);
    if ((*(_BYTE *)(v10 + 22) & 4) != 0
      || !a5
      || (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 40) + 640) << 32) & 0xF000000000) < 0x4000000001)
    {
      goto LABEL_29;
    }
    v26 = *(_DWORD *)(v5 + 164);
    v27 = __OFADD__(v17, v26);
    v28 = v17 + v26;
    v29 = v27;
    if (!v27)
      break;
    v31 = 0x7FFFFFFF;
    v30 = *((_DWORD *)a2 + 1);
    if ((int)((v17 >> 31) + 0x7FFFFFFF) > v30)
      goto LABEL_47;
LABEL_29:
    v24 = *(unsigned int *)(v5 + 47);
    if (v24 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
    {
      v5 = *(_QWORD *)((v24 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 45) & 4) != 0)
          continue;
      }
    }
    return this;
  }
  v30 = *((_DWORD *)a2 + 1);
  if (v28 <= v30)
    goto LABEL_29;
  v31 = v28;
LABEL_47:
  v32 = *((_DWORD *)a2 + 3);
  v27 = __OFADD__(v30, v32);
  v33 = v30 + v32;
  if (v27)
    v33 = (v30 >> 31) + 0x7FFFFFFF;
  if (v31 >= v33)
    goto LABEL_29;
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40) + 8) + 1944);
  if (v29)
    v35 = (v17 >> 31) + 0x7FFFFFFF;
  else
    v35 = v28;
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1256))(v5);
  v37 = v36 & ~(v36 >> 31);
  v27 = __OFADD__(v35, v37);
  v38 = v35 + v37;
  if (v27)
    v38 = (v35 >> 31) + 0x7FFFFFFF;
  v39 = v38 / 64;
  v40 = v34;
  return WebCore::RenderView::setBestTruncatedAt(v40, v39, (WebCore::RenderBoxModelObject *)v10, 1);
}

uint64_t WebCore::RenderBlock::paint(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  signed int v31;
  int v32;
  int v33;
  unint64_t v34;
  signed int v35;
  signed int v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::GraphicsContext *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  float v69;
  int v70;
  int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  unint64_t v81;
  WebCore::RegionContext *v82;
  float v83;
  float v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  WTF *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  _QWORD v106[6];
  unint64_t v107;
  unint64_t v108;

  v4 = this;
  v6 = *(_DWORD *)(this + 152);
  v5 = *(_DWORD *)(this + 156);
  v7 = *((_DWORD *)a3 + 1);
  v8 = __OFADD__(*(_DWORD *)a3, v6);
  v9 = *(_DWORD *)a3 + v6;
  if (v8)
    v10 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
  else
    v10 = v9;
  v8 = __OFADD__(v7, v5);
  v11 = v7 + v5;
  LODWORD(v12) = (v7 >> 31) + 0x7FFFFFFF;
  if (v8)
    v12 = v12;
  else
    v12 = v11;
  v101 = v10 | (v12 << 32);
  v13 = *((unsigned __int16 *)a2 + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(this + 24) + 8))
    goto LABEL_45;
  v14 = *(_QWORD *)a2;
  v15 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)a2 + 21) & 0x10) != 0 && (*(_BYTE *)(this + 21) & 0x80) != 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(this + 144) + 264);
    if (v16)
    {
      if (*(_BYTE *)(v16 + 79) && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 256))
        goto LABEL_45;
    }
  }
  v17 = *(_QWORD *)(this + 192);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 20);
    v19 = (int *)(v17 + 28);
  }
  else
  {
    v18 = 0;
    v19 = (int *)(this + 160);
  }
  v21 = *v19;
  v20 = v19[1];
  v22 = HIDWORD(v18);
  v23 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
  if (v23 <= 5 && ((1 << v23) & 0x2A) != 0)
  {
    if ((*(_BYTE *)(this + 21) & 0x10) != 0)
    {
      v97 = *(_DWORD *)(this + 160);
      v8 = __OFADD__((_DWORD)v18, v21);
      v98 = v18 + v21;
      this = 0x7FFFFFFFLL;
      v99 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v8)
        v99 = v98;
      v8 = __OFSUB__(v97, v99);
      LODWORD(v18) = v97 - v99;
      v100 = (v97 >> 31) + 0x7FFFFFFF;
      if (v8)
        LODWORD(v18) = v100;
    }
    else
    {
      v94 = *(_DWORD *)(this + 164);
      this = 0x7FFFFFFFLL;
      v95 = (HIDWORD(v18) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v18), v20))
        v95 = HIDWORD(v18) + v20;
      v8 = __OFSUB__(v94, v95);
      LODWORD(v22) = v94 - v95;
      v96 = (v94 >> 31) + 0x7FFFFFFF;
      if (v8)
        LODWORD(v22) = v96;
    }
  }
  v8 = __OFADD__((_DWORD)v18, (_DWORD)v10);
  v24 = v18 + v10;
  v25 = (v18 >> 31) + 0x7FFFFFFF;
  if (!v8)
    v25 = v24;
  v8 = __OFADD__((_DWORD)v22, (_DWORD)v12);
  v26 = v22 + v12;
  if (v8)
    v26 = (v22 >> 31) + 0x7FFFFFFF;
  v27 = v21 < 1 || v20 < 1;
  v28 = HIDWORD(v15);
  v29 = v27 || (int)v15 < 1;
  if (!v29 && SHIDWORD(v15) >= 1)
  {
    v8 = __OFADD__((_DWORD)v14, (_DWORD)v15);
    v31 = v14 + v15;
    if (v8)
      v31 = (v14 >> 31) + 0x7FFFFFFF;
    if ((int)v25 < v31)
    {
      v8 = __OFADD__(v25, v21);
      v32 = v25 + v21;
      v33 = (v25 >> 31) + 0x7FFFFFFF;
      if (v8)
        v32 = v33;
      if (v32 > (int)v14)
      {
        v34 = HIDWORD(v14);
        v8 = __OFADD__((_DWORD)v34, (_DWORD)v28);
        v35 = v34 + v28;
        v36 = (v34 >> 31) + 0x7FFFFFFF;
        if (!v8)
          v36 = v35;
        if ((int)v26 < v36)
        {
          v8 = __OFADD__(v26, v20);
          v37 = v26 + v20;
          v38 = (v26 >> 31) + 0x7FFFFFFF;
          if (!v8)
            v38 = v37;
          if (v38 > (int)v34)
          {
LABEL_45:
            if (*((unsigned __int16 *)a2 + 8) > 0x3Fu)
            {
              if (v13 == 4096)
              {
                v39 = 0;
LABEL_52:
                v40 = (*(_BYTE *)(v4 + 22) & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v4 + 144) + 25) & 8) == 0;
                if ((v39 | v40) != 1)
                  goto LABEL_55;
                v58 = *((unsigned __int16 *)a2 + 8);
                if (v58 == 16)
                {
                  v89 = 32;
                }
                else
                {
                  if (v58 != 1)
                  {
LABEL_82:
                    v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8)
                                    + 528);
                    v60 = 1.0;
                    if (v59)
                    {
                      v61 = *(_QWORD *)(v59 + 8);
                      if (v61)
                      {
                        v62 = *(_QWORD *)(v61 + 24);
                        if (v62)
                        {
                          v63 = *(float **)(v62 + 8);
                          if (v63)
                          {
                            v64 = (*(_DWORD *)v63)++;
                            v60 = v63[91];
                            if (v64)
                            {
                              *(_DWORD *)v63 = v64;
                            }
                            else
                            {
                              WebCore::Page::~Page((uint64_t)v63);
                              WTF::fastFree(v90, v91);
                            }
                          }
                        }
                      }
                    }
                    if (v39)
                      v65 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 1440))(v4, &v101);
                    else
                      v65 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4
                                                                                                  + 1416))(v4, &v101, 0, 0, *((unsigned __int16 *)a2 + 8));
                    v107 = v65;
                    v108 = v66;
                    v102 = WebCore::snapRectToDevicePixels((int *)&v107, v60);
                    v103 = v67;
                    v104 = v68;
                    v105 = v69;
                    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 96))(*((_QWORD *)a2 + 10), 1);
                    if (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v4 + 80)))
                    {
                      v92 = *((_QWORD *)a2 + 10);
                      v93 = *(_QWORD *)(v4 + 160);
                      v106[0] = v101;
                      v106[1] = v93;
                      WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(v4 + 80), (const WebCore::LayoutRect *)v106, 1, 1, (uint64_t)&v107);
                      WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v107, v60, (uint64_t)v106);
                      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v92 + 464))(v92, v106);
                    }
                    (*(void (**)(_QWORD, float *))(**((_QWORD **)a2 + 10) + 456))(*((_QWORD *)a2 + 10), &v102);
                    v70 = *((unsigned __int16 *)a2 + 8);
                    if (v70 != 4096 && v70 != 0x2000)
                    {
LABEL_94:
                      (*(void (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v4 + 1448))(v4, a2, &v101);
                      v71 = *((unsigned __int16 *)a2 + 8);
                      if (v71 == 4096 || v71 == 0x2000)
                      {
                        v87 = *((_QWORD *)a2 + 9);
                        v88 = *(_DWORD *)(v87 + 44);
                        if (v88)
                          *(_DWORD *)(v87 + 44) = v88 - 1;
                      }
                      this = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 104))(*((_QWORD *)a2 + 10), 1);
                      if (v13 == 16)
                      {
                        *((_WORD *)a2 + 8) = 64;
                        this = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v4 + 1448))(v4, a2, &v101);
                      }
                      else if (v13 != 1)
                      {
                        goto LABEL_56;
                      }
                      *((_WORD *)a2 + 8) = v13;
LABEL_56:
                      if (v13 <= 1 && (*(_BYTE *)(v4 + 22) & 1) != 0)
                      {
                        v42 = *(_QWORD *)(v4 + 144);
                        if (v42)
                        {
                          this = *(_QWORD *)(v42 + 264);
                          if (this)
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 4) == 0
                              && (*(_BYTE *)(v4 + 120) & 0x30) == 0)
                            {
                              v43 = *((_QWORD *)a2 + 3);
                              if ((!v43 || v43 == v4) && (*((_BYTE *)a2 + 20) & 0x40) == 0)
                              {
                                v44 = (WebCore::GraphicsContext *)*((_QWORD *)a2 + 10);
                                v106[0] = (((int)(v101 - (v41 & 0xFFFFFFC0) + 32) >> 6) + (int)v101 / 64) | ((unint64_t)(((int)(HIDWORD(v101) - (v41 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v101) / 64) << 32);
                                v45 = HIDWORD(*(_QWORD *)a2);
                                if ((int)*(_QWORD *)a2 >= 0)
                                  v46 = *(_QWORD *)a2;
                                else
                                  v46 = *(_QWORD *)a2 + 63;
                                v47 = *(_QWORD *)a2 - (v46 & 0xFFFFFFC0);
                                if ((int)v45 >= 0)
                                  v48 = HIDWORD(*(_QWORD *)a2);
                                else
                                  v48 = v45 + 63;
                                v49 = v45 - (v48 & 0xFFFFFFC0);
                                v50 = *((_DWORD *)a2 + 2);
                                v51 = *((_DWORD *)a2 + 3);
                                v8 = __OFADD__(v47, v50);
                                v52 = v47 + v50;
                                if (v8)
                                  v52 = (v47 >> 31) + 0x7FFFFFFF;
                                v53 = v46 >> 6;
                                v54 = v48 >> 6;
                                v55 = v49 + v51;
                                if (__OFADD__(v49, v51))
                                  v55 = (v49 >> 31) + 0x7FFFFFFF;
                                v56 = v49 + 32;
                                v57 = v47 + 32;
                                v107 = (v53 + (v57 >> 6)) | ((unint64_t)(v54 + (v56 >> 6)) << 32);
                                v108 = (v52 / 64 - (v57 >> 6) + ((int)(v52 - (v53 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v55 / 64 - (v56 >> 6) + ((int)(v55 - (v52 & 0xFFFFFFC0) + 32) >> 6)) << 32);
                                return WebCore::RenderLayerScrollableArea::paintOverflowControls((WebCore::RenderLayerScrollableArea *)this, v44, (const WebCore::IntPoint *)v106, (const WebCore::IntRect *)&v107, 0);
                              }
                            }
                          }
                        }
                      }
                      return this;
                    }
                    v72 = floorf(v102);
                    if (v72 < 2147500000.0 && v72 > -2147500000.0
                      || (v73 = 2147500000.0, v72 < 2147500000.0) && (v73 = -2147500000.0, v72 > -2147500000.0))
                    {
                      v73 = (float)(int)v72;
                    }
                    v74 = floorf(v103);
                    if (v74 < 2147500000.0 && v74 > -2147500000.0
                      || (v75 = 2147500000.0, v74 < 2147500000.0) && (v75 = -2147500000.0, v74 > -2147500000.0))
                    {
                      v75 = (float)(int)v74;
                    }
                    v76 = ceilf(v102 + v104);
                    if (v76 < 2147500000.0 && v76 > -2147500000.0
                      || (v77 = 2147500000.0, v76 < 2147500000.0) && (v77 = -2147500000.0, v76 > -2147500000.0))
                    {
                      v77 = (float)(int)v76;
                    }
                    v78 = ceilf(v103 + v105);
                    if (v78 < 2147500000.0 && v78 > -2147500000.0
                      || (v79 = 2147500000.0, v78 < 2147500000.0) && (v79 = -2147500000.0, v78 > -2147500000.0))
                    {
                      v79 = (float)(int)v78;
                    }
                    if (v73 < 2147500000.0 && v73 > -2147500000.0)
                      goto LABEL_113;
                    if (v73 >= 2147500000.0)
                    {
                      v80 = 0x7FFFFFFF;
                    }
                    else
                    {
                      if (v73 > -2147500000.0)
                      {
LABEL_113:
                        v80 = (int)v73;
                        goto LABEL_114;
                      }
                      v80 = 0x80000000;
                    }
LABEL_114:
                    if (v75 < 2147500000.0 && v75 > -2147500000.0)
                      goto LABEL_116;
                    if (v75 >= 2147500000.0)
                    {
                      v81 = 0x7FFFFFFF00000000;
                      goto LABEL_117;
                    }
                    if (v75 > -2147500000.0)
LABEL_116:
                      v81 = (unint64_t)(int)v75 << 32;
                    else
                      v81 = 0x8000000000000000;
LABEL_117:
                    v82 = (WebCore::RegionContext *)*((_QWORD *)a2 + 9);
                    v83 = v77 - v73;
                    v84 = v79 - v75;
                    if (v83 < 2147500000.0 && v83 > -2147500000.0)
                      goto LABEL_119;
                    if (v83 >= 2147500000.0)
                    {
                      v85 = 0x7FFFFFFF;
                    }
                    else
                    {
                      if (v83 > -2147500000.0)
                      {
LABEL_119:
                        v85 = (int)v83;
                        goto LABEL_120;
                      }
                      v85 = 0x80000000;
                    }
LABEL_120:
                    if (v84 < 2147500000.0 && v84 > -2147500000.0)
                      goto LABEL_122;
                    if (v84 >= 2147500000.0)
                    {
                      v86 = 0x7FFFFFFF00000000;
                      goto LABEL_123;
                    }
                    if (v84 > -2147500000.0)
LABEL_122:
                      v86 = (unint64_t)(int)v84 << 32;
                    else
                      v86 = 0x8000000000000000;
LABEL_123:
                    v107 = v81 | v80;
                    v108 = v86 | v85;
                    WebCore::RegionContext::pushClip(v82, (const WebCore::IntRect *)&v107);
                    goto LABEL_94;
                  }
                  *((_WORD *)a2 + 8) = 0;
                  (*(void (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v4 + 1448))(v4, a2, &v101);
                  v89 = 2;
                }
                *((_WORD *)a2 + 8) = v89;
                goto LABEL_82;
              }
              if (v13 == 64 || v13 == 1024)
                goto LABEL_55;
            }
            else if (!*((_WORD *)a2 + 8))
            {
LABEL_55:
              this = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v4 + 1448))(v4, a2, &v101);
              goto LABEL_56;
            }
            v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1432))(v4);
            goto LABEL_52;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderBox::hasControlClip(WebCore::RenderBox *this)
{
  return 0;
}

void WebCore::RenderBlock::paintObject(WebCore::RenderBlock *this, int32x4_t *a2, const WebCore::LayoutPoint *a3)
{
  int v6;
  uint64_t v7;
  __int16 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderBlock *v16;
  float RoundedBorderFor;
  WebCore::EventRegionContext *v18;
  float32x4_t v19;
  char v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::EventRegionContext *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  signed int v33;
  int v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  WebCore::Element *v58;
  int v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WebCore *v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  WebCore::RenderObject *v76;
  int v77;
  int v78;
  WebCore::RenderObject *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  int j;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  WebCore::RenderObject *v103;
  WebCore::RenderObject *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  WebCore::RenderObject *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  int v122;
  uint64_t v123;
  uint64_t i;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  int k;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  WTF **v140;
  WTF *v141;
  uint64_t v142;
  int v143;
  WebCore::RenderBlock *v144;
  uint64_t v145;
  uint64_t (*v146)();
  uint64_t v147;
  uint64_t v148;
  uint64_t m;
  uint64_t v150;
  unsigned int v151;
  _QWORD *v153;
  WebCore::RenderObject *v154;
  BOOL v155;
  int v156;
  int v157;
  unsigned __int32 v158;
  unsigned __int32 v159;
  WTF *v160;
  WTF *v161;
  WTF *v162;
  WTF *v163;
  WTF *v164;
  WTF *v165;
  WTF *v166;
  char v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  float v172;
  char v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  _OWORD v192[3];
  uint64_t v193;
  uint64_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  uint64_t v200;

  v6 = a2[1].u16[0];
  if (v6 <= 1
    && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
    && (*((_BYTE *)this + 120) & 0x30) == 0
    && (*((_BYTE *)this + 23) & 0x60) != 0)
  {
    (*(void (**)(WebCore::RenderBlock *, int32x4_t *, const WebCore::LayoutPoint *))(*(_QWORD *)this + 1456))(this, a2, a3);
  }
  if (v6 <= 1023)
  {
    if (v6 >= 2 && v6 != 128)
      goto LABEL_21;
    if ((*((_BYTE *)this + 45) & 1) != 0)
      goto LABEL_21;
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (!v7)
      goto LABEL_21;
    v8 = *(_WORD *)(v7 + 28);
    if ((v8 & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
    {
      goto LABEL_21;
    }
    if ((v8 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194139AACLL);
    }
    v122 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) >> 18) & 3;
    if (v122)
    {
      v173 = *((_BYTE *)this + 96);
      if ((v173 & 0x1F) == 0xD || (v173 & 0x1Eu) - 14 <= 0xFFFFFFF5)
      {
        if (v122 != 2)
        {
          if (WebCore::Element::isRelevantToUser((WebCore::Element *)v7))
            goto LABEL_280;
          v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        }
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 1944) + 248) + 479))
          goto LABEL_21;
      }
    }
LABEL_280:
    v123 = *((unsigned __int8 *)this + 68);
    for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v126 + 47))
    {
      v125 = i | (v123 << 32);
      if (!v125)
        goto LABEL_21;
      v126 = *(_QWORD *)(v125 + 8);
      if (!v126)
        goto LABEL_21;
      if ((*(_BYTE *)(v126 + 45) & 4) != 0)
        break;
      v123 = *(unsigned __int8 *)(v126 + 51);
    }
LABEL_286:
    v127 = *(_DWORD *)(v126 + 20);
    if ((v127 & 0x800) != 0
      || (v127 & 0x1800000) == 0x1000000
      || (*(_BYTE *)(v126 + 45) & 1) != 0
      || (v128 = *(_QWORD *)(*(_QWORD *)(v126 + 24) + 8)) == 0
      || (*(_WORD *)(v128 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v128 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
    {
      while (1)
      {
        v129 = *(unsigned int *)(v126 + 47);
        if (!(v129 | ((unint64_t)*(unsigned __int8 *)(v126 + 51) << 32)))
          goto LABEL_21;
        v126 = *(_QWORD *)((v129 | ((unint64_t)*(unsigned __int8 *)(v126 + 51) << 32)) + 8);
        if (!v126)
          goto LABEL_21;
        if ((*(_BYTE *)(v126 + 45) & 4) != 0)
          goto LABEL_286;
      }
    }
    if ((v127 & 0x400) == 0)
      goto LABEL_21;
    v168 = *(_QWORD *)(v126 + 144);
    if (v168)
    {
      if ((*(_BYTE *)(v168 + 25) & 8) != 0)
        goto LABEL_21;
    }
    v169 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v169 <= 5 && ((1 << v169) & 0x2A) != 0)
    {
      v170 = *(_DWORD *)a3;
      if ((*((_BYTE *)this + 21) & 0x10) == 0)
      {
        v174 = *((_DWORD *)a3 + 1);
        v175 = *((_DWORD *)this + 41);
        v52 = __OFADD__(v174, v175);
        v176 = v174 + v175;
        if (v52)
          v176 = (v174 >> 31) + 0x7FFFFFFF;
        v177 = *(_DWORD *)(v126 + 164);
        v52 = __OFSUB__(v176, v177);
        v178 = v176 - v177;
        if (v52)
          v178 = (v176 >> 31) + 0x7FFFFFFF;
        v179 = *(_DWORD *)(v126 + 156);
        if (((v179 ^ (2 * v179)) & 0x80000000) != 0)
          v180 = (v179 >> 31) + 0x7FFFFFFF;
        else
          v180 = 2 * v179;
        v52 = __OFSUB__(v178, v180);
        v171 = v178 - v180;
        if (v52)
          v171 = (v178 >> 31) + 0x7FFFFFFF;
        goto LABEL_397;
      }
      v181 = *((_DWORD *)this + 40);
      v52 = __OFADD__(v170, v181);
      v182 = v170 + v181;
      v183 = (v170 >> 31) + 0x7FFFFFFF;
      if (!v52)
        v183 = v182;
      v184 = *(_DWORD *)(v126 + 160);
      v52 = __OFSUB__(v183, v184);
      v185 = v183 - v184;
      v186 = (v183 >> 31) + 0x7FFFFFFF;
      if (!v52)
        v186 = v185;
      v187 = *(_DWORD *)(v126 + 152);
      v188 = 2 * v187;
      v189 = v187 ^ (2 * v187);
      v190 = (v187 >> 31) + 0x7FFFFFFF;
      if (v189 >= 0)
        v190 = v188;
      v52 = __OFSUB__(v186, v190);
      v191 = v186 - v190;
      v170 = (v186 >> 31) + 0x7FFFFFFF;
      if (!v52)
        v170 = v191;
    }
    else
    {
      v170 = *(_DWORD *)a3;
    }
    v171 = *((_DWORD *)a3 + 1);
LABEL_397:
    v195.i32[0] = v170;
    v195.i32[1] = v171;
    WebCore::RenderElement::paintAsInlineBlock(v126, (uint64_t)a2, (uint64_t)&v195);
    goto LABEL_21;
  }
  if (v6 == 1024)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
    {
      (*(void (**)(WebCore::RenderBlock *, int32x4_t *, const WebCore::LayoutPoint *))(*(_QWORD *)this
                                                                                                + 1464))(this, a2, a3);
      return;
    }
  }
  else if (v6 == 2048 && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
  {
    (*(void (**)(WebCore::RenderBlock *, int32x4_t *, const WebCore::LayoutPoint *))(*(_QWORD *)this + 1472))(this, a2, a3);
    return;
  }
LABEL_21:
  v9 = a2[1].i32[1];
  if ((v9 & 0x40) != 0)
    return;
  if (v6 == 0x2000)
  {
    v10 = a2[4].i64[1];
    if (v10 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(a2[4].i64[1]))
      v10 = 0;
    WebCore::AccessibilityRegionContext::takeBounds(v10, (uint64_t)this, *(_QWORD *)a3);
  }
  else if (v6 == 4096)
  {
    v11 = *((_QWORD *)this + 20);
    v193 = *(_QWORD *)a3;
    v194 = v11;
    if ((v9 & 0x8000) != 0
      && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
      && (*((_BYTE *)this + 120) & 0x30) == 0)
    {
      v12 = *((_QWORD *)this + 4);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v13 + 104) + 239) & 0x18) == 0)
      {
        v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8);
        if (!*(_BYTE *)(v15 + 3441) || *(_QWORD *)(v15 + 1272) == v14)
        {
          if ((*((_BYTE *)this + 45) & 2) != 0)
            v16 = 0;
          else
            v16 = this;
          if (v12 && (*((_BYTE *)this + 45) & 2) != 0)
            v16 = *(WebCore::RenderBlock **)(v12 + 8);
          if ((*(_BYTE *)(*((_QWORD *)v16 + 13) + 239) & 1) == 0 && (*((_WORD *)v16 + 62) & 0x3C0) != 0)
          {
            RoundedBorderFor = WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderBlock *)((char *)this + 80), (const WebCore::LayoutRect *)&v193, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v195);
            v18 = (WebCore::EventRegionContext *)a2[4].i64[1];
            if (v18
              && !(*(unsigned int (**)(uint64_t, float))(*(_QWORD *)v18 + 16))(a2[4].i64[1], RoundedBorderFor))
            {
              v18 = 0;
            }
            v19 = (float32x4_t)vdupq_n_s32(0x3C800000u);
            v192[0] = vmulq_f32(vcvtq_f32_s32(v195), v19);
            v192[1] = vmulq_f32(vcvtq_f32_s32(v196), v19);
            v192[2] = vmulq_f32(vcvtq_f32_s32(v197), v19);
            if ((*((_BYTE *)this + 52) & 7) == 1 && (*((_BYTE *)this + 53) & 4) != 0)
            {
              v21 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
              if ((v21[14] & 8) == 0
                || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1941393A4);
              }
              v20 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v21 + 1440))(v21);
            }
            else
            {
              v20 = 0;
            }
            WebCore::EventRegionContext::unite(v18, (const WebCore::FloatRoundedRect *)v192, this, (WebCore::RenderBlock *)((char *)this + 80), v20);
            v9 = a2[1].i32[1];
          }
        }
      }
    }
    if ((v9 & 0x4000) == 0)
      return;
    v22 = *((_QWORD *)this + 24);
    if (v22)
    {
      v25 = *(_QWORD *)(v22 + 20);
      if ((v25 & 0x80000000) != 0)
        goto LABEL_85;
      v26 = *((_QWORD *)this + 20);
      v27 = *(_QWORD *)(v22 + 28);
      v28 = v25 + v27;
      if (__OFADD__((_DWORD)v25, (_DWORD)v27))
        v28 = 0x7FFFFFFF;
      if (v28 > (int)v26 || (v25 & 0x8000000000000000) != 0)
        goto LABEL_85;
      v29 = HIDWORD(v25);
      v30 = HIDWORD(v26);
      v31 = v29 + HIDWORD(v27);
      if (__OFADD__((_DWORD)v29, HIDWORD(v27)))
        v31 = 0x7FFFFFFF;
      if (v31 > (int)v30)
        goto LABEL_85;
    }
    if (((*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1672))(this) & 1) != 0)
      goto LABEL_85;
    v23 = a2[4].i64[1];
    if (v23)
      v24 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(a2[4].i64[1])
          ? (WebCore::EventRegionContext *)v23
          : 0;
    else
      v24 = 0;
    v32 = ((int)v193 >> 6);
    if ((_DWORD)v194)
    {
      v33 = v193 + v194;
      if (__OFADD__((_DWORD)v193, (_DWORD)v194))
        v33 = (v193 >> 31) + 0x7FFFFFFF;
      if (v33 > 2147483583)
        v34 = 0x1FFFFFF;
      else
        v34 = v33 < 0 ? -(-v33 >> 6) : (v33 + 63) >> 6;
    }
    else
    {
      v34 = (int)v193 >> 6;
    }
    v35 = v193 >> 38;
    if (HIDWORD(v194))
    {
      v36 = HIDWORD(v193) + HIDWORD(v194);
      if (__OFADD__(HIDWORD(v193), HIDWORD(v194)))
        v36 = (HIDWORD(v193) >> 31) + 0x7FFFFFFF;
      if (v36 > 2147483583)
      {
        LODWORD(v35) = 0x1FFFFFF;
      }
      else if (v36 < 0)
      {
        LODWORD(v35) = -(-v36 >> 6);
      }
      else
      {
        LODWORD(v35) = (v36 + 63) >> 6;
      }
    }
    v195.i64[0] = v32 | (v193 >> 38 << 32);
    v195.i32[2] = v34 - v32;
    v195.i32[3] = v35 - (v193 >> 38);
    if (!WebCore::EventRegionContext::contains(v24, (const WebCore::IntRect *)&v195))
LABEL_85:
      v37 = 1;
    else
      v37 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                 + 1944)
                     + 442) != 0;
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    if (*(_BYTE *)(v38 + 3443))
      v37 = 1;
    v39 = *(_QWORD **)(v38 + 2304);
    if (v39)
    {
      v39 = (_QWORD *)*v39;
      if (v39)
        LODWORD(v39) = *((_DWORD *)v39 - 3) != 0;
    }
    v40 = v37 | v39;
    if ((*((_BYTE *)this + 52) & 7) == 1 && (*((_BYTE *)this + 53) & 4) != 0)
    {
      if ((v40 & 1) == 0)
        return;
    }
    else
    {
      if (*(_BYTE *)(v38 + 3444))
      {
        v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 528) + 8) + 24) + 8);
        if (*(_BYTE *)(v41 + 1100))
          goto LABEL_98;
        v42 = (*(unsigned __int8 *)(*(_QWORD *)(v41 + 112) + 612) >> 3) & 1;
      }
      else
      {
        v42 = 0;
      }
      if (((v40 | v42) & 1) == 0)
        return;
    }
  }
LABEL_98:
  v43 = *(_DWORD *)a3;
  if ((*((_BYTE *)this + 22) & 1) != 0
    && ((*((_BYTE *)this + 45) & 2) != 0
      ? (v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
      : (v61 = *((_QWORD *)this + 12)),
        (v62 = v61 & 0x1C00, v62 != 2048) && v62 && (v63 = *(_QWORD *)(*((_QWORD *)this + 18) + 264)) != 0))
  {
    v64 = *(_QWORD *)(v63 + 104);
    v44 = v64 & 0xFFFFFFFF00000000;
    v45 = v64;
  }
  else
  {
    v44 = 0;
    v45 = 0;
  }
  v46 = *((_DWORD *)a3 + 1);
  v47 = HIDWORD(v44);
  v48 = -v45;
  v49 = v48 << 6;
  if (v48 < -33554432)
    v49 = 0x80000000;
  if (v48 > 0x1FFFFFF)
    v49 = 0x7FFFFFFF;
  if ((int)v47 <= 0x2000000)
    v50 = -64 * v47;
  else
    v50 = 0x80000000;
  if ((int)v47 >= -33554431)
    v51 = v50;
  else
    v51 = 0x7FFFFFFF;
  v52 = __OFADD__(v43, v49);
  v53 = v43 + v49;
  if (v52)
    v53 = (v43 >> 31) + 0x7FFFFFFF;
  LODWORD(v192[0]) = v53;
  v54 = v46 + v51;
  if (__OFADD__(v46, v51))
    v54 = (v46 >> 31) + 0x7FFFFFFF;
  DWORD1(v192[0]) = v54;
  if (v6 <= 1
    && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
    && (*((_BYTE *)this + 120) & 0x30) == 0)
  {
    (*(void (**)(WebCore::RenderBlock *, int32x4_t *, _OWORD *))(*(_QWORD *)this + 1856))(this, a2, v192);
  }
  if (!v6)
    return;
  if (v6 == 64)
    goto LABEL_120;
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v58 = 0;
  }
  else
  {
    v58 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v58 && (*((_WORD *)v58 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19413922CLL);
    }
  }
  v59 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) >> 18) & 3;
  if (!v59
    || (v167 = *((_BYTE *)this + 96), (v167 & 0x1F) != 0xD) && (v167 & 0x1Eu) - 14 > 0xFFFFFFF5
    || v59 != 2 && (!v58 || WebCore::Element::isRelevantToUser(v58))
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                        + 1944)
                            + 248)
                + 479))
  {
    if ((*((_BYTE *)this + 22) & 4) != 0)
    {
      (*(void (**)(WebCore::RenderBlock *, int32x4_t *, _OWORD *))(*(_QWORD *)this + 1848))(this, a2, v192);
    }
    else
    {
      v69 = a2[1];
      v70 = a2[3];
      v71 = a2[4];
      v197 = a2[2];
      v198 = v70;
      v72 = a2[1].u16[0];
      if (v72 == 32)
        v72 = 16;
      if (v72 == 2)
        LOWORD(v72) = 1;
      v199 = v71;
      v200 = a2[5].i64[0];
      v195 = *a2;
      v196 = v69;
      v196.i16[0] = v72;
      if (v69.i64[1] && (WebCore::RenderBlock *)v69.i64[1] == this)
        v196.i64[1] = 0;
      v73 = a2[4].i64[1];
      if (v73 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73))
        v196.i32[1] |= 0x8000u;
      v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
      v75 = *(int *)(v74 + 364) >= 1 && *(_DWORD *)(v74 + 368) > 0;
      (*(void (**)(WebCore::RenderBlock *, int32x4_t *, _OWORD *, int32x4_t *, _BOOL8))(*(_QWORD *)this
                                                                                                 + 1728))(this, a2, v192, &v195, v75);
    }
  }
  if (v6 > 127)
  {
    v60 = 1;
    if (v6 <= 4095)
    {
      if (v6 != 128 && v6 != 512)
        goto LABEL_157;
LABEL_153:
      (*(void (**)(WebCore::RenderBlock *, int32x4_t *, _OWORD *, _BOOL8))(*(_QWORD *)this + 1840))(this, a2, v192, v60);
      goto LABEL_157;
    }
    if (v6 == 4096)
      goto LABEL_153;
    if (v6 != 0x2000)
      goto LABEL_157;
LABEL_152:
    v60 = v6 == 0x2000;
    goto LABEL_153;
  }
  if (v6 == 4)
    goto LABEL_152;
  if (v6 != 16)
  {
    if (v6 != 32)
      goto LABEL_157;
    goto LABEL_154;
  }
LABEL_120:
  v55 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  v56 = *(unsigned __int8 *)(v55 + 52);
  if ((v56 & 0xE) != 0
    && (v56 & 0xF) != 0
    && ((v121 = *(float *)(v55 + 48), ((v121 < 3.0) & (v56 >> 4)) != 0) || v121 > 0.0)
    || WebCore::RenderElement::hasOutlineAnnotation(this))
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
      && (*((_BYTE *)this + 120) & 0x30) == 0
      && ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 52) & 0x10) == 0
       || (*(_WORD *)((_BYTE *)this + 69) & 0x20) == 0))
    {
      v57 = *((_QWORD *)this + 20);
      v195.i64[0] = *(_QWORD *)a3;
      v195.i64[1] = v57;
      WebCore::RenderElement::paintOutline(this, (WebCore::PaintInfo *)a2, (const WebCore::LayoutRect *)&v195);
    }
  }
  if (v6 != 16)
    goto LABEL_157;
LABEL_154:
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) != 0)
  {
    {
      v83 = dword_1ECE91378 + 1;
    }
    else
    {
      WebCore::continuationChainNodeMap(void)::map = 0;
      *(_QWORD *)&dword_1ECE91378 = 0;
      v83 = 1;
    }
    dword_1ECE91378 = v83;
    v84 = *((_QWORD *)this + 1);
    v85 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v86 = (~(v84 << 32) + v84) ^ ((unint64_t)(~(v84 << 32) + v84) >> 22);
    v87 = 9 * ((v86 + ~(v86 << 13)) ^ ((v86 + ~(v86 << 13)) >> 8));
    v88 = (v87 ^ (v87 >> 15)) + ~((v87 ^ (v87 >> 15)) << 27);
    v89 = v85 & ((v88 >> 31) ^ v88);
    for (j = 1; ; ++j)
    {
      v91 = v89;
      v92 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v89);
      if (v92 != -1 && v92 == v84)
        break;
      v89 = (v91 + j) & v85;
    }
    v94 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v91 + 8);
    do
    {
      v94 = (_QWORD *)v94[2];
      if (!v94)
        goto LABEL_155;
      if (*v94)
        v95 = *(_QWORD *)(*v94 + 8);
      else
        v95 = 0;
    }
    while (!v95 || (*(_BYTE *)(v95 + 45) & 0x20) == 0);
    v96 = *(_QWORD *)(*(_QWORD *)(v95 + 88) + 16);
    v97 = *(unsigned __int8 *)(v96 + 52);
    v98 = (v97 & 0xE) == 0 || (v97 & 0xF) == 0;
    if (!v98 && (v172 = *(float *)(v96 + 48), ((v172 < 3.0) & (v97 >> 4)) != 0 || v172 > 0.0)
      || WebCore::RenderElement::hasOutlineAnnotation((WebCore::RenderElement *)v95))
    {
      if ((*(_BYTE *)(*(_QWORD *)(v95 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v95 + 120) & 0x30) == 0)
      {
        v99 = *(_QWORD *)(*(_QWORD *)(v95 + 24) + 8);
        if ((*(_WORD *)(v99 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19413961CLL);
        }
        v100 = *(_QWORD *)(v99 + 64);
        v101 = v100 & 0xFFFFFFFFFFFFLL;
        if ((v100 & 0xFFFFFFFFFFFFLL) != 0)
        {
          v102 = *(_BYTE *)((v100 & 0xFFFFFFFFFFFFLL) + 0x2D);
          if ((v102 & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1941397A0);
          }
          if ((v102 & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1941397C0);
          }
        }
        v103 = WebCore::RenderObject::containingBlock(this);
        if (v103 == (WebCore::RenderObject *)v101)
        {
LABEL_237:
          if ((*((_BYTE *)this + 21) & 0x80) == 0)
          {
            WebCore::RenderBlock::addContinuationWithOutline((uint64_t)v103, (WTF **)v101);
            goto LABEL_155;
          }
          v107 = 1;
        }
        else
        {
          v105 = v101;
          while (1)
          {
            v106 = *(_QWORD *)(v105 + 144);
            if (v106)
            {
              if ((*(_BYTE *)(v106 + 25) & 8) != 0)
                break;
            }
            v105 = *(_QWORD *)(v105 + 32);
            if (v105)
              v105 = *(_QWORD *)(v105 + 8);
            do
            {
              if ((*(_BYTE *)(v105 + 45) & 8) != 0)
                break;
              v105 = *(_QWORD *)(v105 + 32);
              if (!v105)
                break;
              v105 = *(_QWORD *)(v105 + 8);
            }
            while (v105);
            if ((WebCore::RenderObject *)v105 == v103)
              goto LABEL_237;
          }
          v107 = 0;
        }
        v108 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v101, v104);
        if (v108)
        {
          WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v108, (const WebCore::RenderInline *)v101, (unint64_t *)&v195);
        }
        else
        {
          v195.i64[0] = *(_QWORD *)(v101 + 152);
          v196.i32[0] = 1;
        }
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v195) & 1) != 0)
        {
          if (v196.i32[0] != -1)
            ((void (*)(uint64_t *, int32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v196.u32[0]])(&v193, &v195);
LABEL_254:
          v111 = *((_DWORD *)this + 38);
          v110 = *((_DWORD *)this + 39);
          v112 = *((_DWORD *)a3 + 1);
          v52 = __OFSUB__(*(_DWORD *)a3, v111);
          v113 = *(_DWORD *)a3 - v111;
          if (v52)
            v114 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
          else
            v114 = v113;
          v52 = __OFSUB__(v112, v110);
          v115 = v112 - v110;
          if (v52)
            v116 = (v112 >> 31) + 0x7FFFFFFF;
          else
            v116 = v115;
          v117 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v101);
          LODWORD(v119) = *((_DWORD *)v117 + 38);
          v118 = *((_DWORD *)v117 + 39);
          v52 = __OFADD__(v114, (_DWORD)v119);
          LODWORD(v119) = v114 + v119;
          if (v52)
            v119 = (v114 >> 31) + 0x7FFFFFFF;
          else
            v119 = v119;
          v52 = __OFADD__(v116, v118);
          LODWORD(v120) = v116 + v118;
          if (v52)
            v120 = (v116 >> 31) + 0x7FFFFFFF;
          else
            v120 = v120;
          v195.i64[0] = v119 | (v120 << 32);
          WebCore::RenderInline::paintOutline(v101, (WebCore::PaintInfo *)a2, (int32x2_t *)&v195);
          goto LABEL_155;
        }
        if (v107)
        {
          v109 = *((_DWORD *)this + 5);
          if (v196.i32[0] != -1)
            ((void (*)(uint64_t *, int32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v196.u32[0]])(&v193, &v195);
          if ((v109 & 0x8000) != 0)
            goto LABEL_254;
        }
        else if (v196.i32[0] != -1)
        {
          ((void (*)(uint64_t *, int32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v196.u32[0]])(&v193, &v195);
        }
      }
    }
  }
LABEL_155:
  if ((byte_1ECE841F9 & 1) != 0)
  {
    if (qword_1ECE84208)
    {
      v130 = *(_DWORD *)(qword_1ECE84208 - 8);
      v131 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v132 = 9 * ((v131 + ~(v131 << 13)) ^ ((v131 + ~(v131 << 13)) >> 8));
      v133 = (v132 ^ (v132 >> 15)) + ~((v132 ^ (v132 >> 15)) << 27);
      v134 = v130 & ((v133 >> 31) ^ v133);
      for (k = 1; ; ++k)
      {
        v136 = v134;
        v137 = *(_QWORD *)(qword_1ECE84208 + 16 * v134);
        if (v137 != -1)
        {
          if (!v137)
            goto LABEL_157;
          if (*(WebCore::RenderBlock **)(v137 + 8) == this)
            break;
        }
        v134 = (v136 + k) & v130;
      }
      if ((_DWORD)v136 != *(_DWORD *)(qword_1ECE84208 - 4))
      {
        v138 = qword_1ECE84208 + 16 * v136;
        v140 = (WTF **)(v138 + 8);
        v139 = *(WTF **)(v138 + 8);
        v141 = *(WTF **)v138;
        *(_QWORD *)v138 = 0;
        *(_QWORD *)(v138 + 8) = 0;
        if (v141)
        {
          if (*(_DWORD *)v141 == 1)
            WTF::fastFree(v141, a2);
          else
            --*(_DWORD *)v141;
          v163 = *v140;
          *(_QWORD *)v138 = -1;
          *v140 = 0;
          if (v163)
          {
            v164 = (WTF *)*((_QWORD *)v163 + 1);
            while (v164)
            {
              v165 = v164;
              v164 = (WTF *)*((_QWORD *)v164 + 2);
              v166 = *(WTF **)v165;
              *(_QWORD *)v165 = 0;
              if (v166)
              {
                if (*(_DWORD *)v166 == 1)
                  WTF::fastFree(v166, a2);
                else
                  --*(_DWORD *)v166;
              }
              WTF::fastFree(v165, a2);
            }
            if (*(_QWORD *)v163)
              WTF::fastFree((WTF *)(*(_QWORD *)v163 - 16), a2);
            WTF::fastFree(v163, a2);
          }
        }
        else
        {
          *(_QWORD *)v138 = -1;
          *v140 = 0;
        }
        v142 = qword_1ECE84208;
        ++*(_DWORD *)(qword_1ECE84208 - 16);
        if (v142)
          v143 = *(_DWORD *)(v142 - 12) - 1;
        else
          v143 = -1;
        *(_DWORD *)(v142 - 12) = v143;
        if (qword_1ECE84208)
        {
          v151 = *(_DWORD *)(qword_1ECE84208 - 4);
          if (6 * *(_DWORD *)(qword_1ECE84208 - 12) < v151 && v151 >= 9)
            WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>>::rehash(v151 >> 1);
        }
        if (v139)
        {
          v195.i64[0] = *(_QWORD *)a3;
          v153 = (_QWORD *)*((_QWORD *)v139 + 1);
          if (v153)
          {
            do
            {
              v154 = WebCore::RenderObject::containingBlock(*(WebCore::RenderObject **)(*v153 + 8));
              if (v154)
                v155 = v154 == this;
              else
                v155 = 1;
              if (!v155)
              {
                do
                {
                  v157 = *((_DWORD *)v154 + 38);
                  v156 = *((_DWORD *)v154 + 39);
                  v52 = __OFADD__(v195.i32[0], v157);
                  v158 = v195.i32[0] + v157;
                  if (v52)
                    v158 = ((unsigned __int32)v195.i32[0] >> 31) + 0x7FFFFFFF;
                  v52 = __OFADD__(v195.i32[1], v156);
                  v159 = v195.i32[1] + v156;
                  if (v52)
                    v159 = ((unsigned __int32)v195.i32[1] >> 31) + 0x7FFFFFFF;
                  v195.i64[0] = __PAIR64__(v159, v158);
                  v154 = WebCore::RenderObject::containingBlock(v154);
                }
                while (v154 && v154 != this);
              }
              WebCore::RenderInline::paintOutline(*(_QWORD *)(*v153 + 8), (WebCore::PaintInfo *)a2, (int32x2_t *)&v195);
              v153 = (_QWORD *)v153[2];
            }
            while (v153);
            v160 = (WTF *)*((_QWORD *)v139 + 1);
            while (v160)
            {
              v161 = v160;
              v160 = (WTF *)*((_QWORD *)v160 + 2);
              v162 = *(WTF **)v161;
              *(_QWORD *)v161 = 0;
              if (v162)
              {
                if (*(_DWORD *)v162 == 1)
                  WTF::fastFree(v162, a2);
                else
                  --*(_DWORD *)v162;
              }
              WTF::fastFree(v161, a2);
            }
          }
          if (*(_QWORD *)v139)
            WTF::fastFree((WTF *)(*(_QWORD *)v139 - 16), a2);
          WTF::fastFree(v139, a2);
        }
      }
    }
  }
  else
  {
    qword_1ECE84208 = 0;
    byte_1ECE841F9 = 1;
  }
LABEL_157:
  if (a2[1].i16[0] != 8)
    return;
  v65 = *((_QWORD *)this + 3);
  v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 8) + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 296)
                              + 3064)
                  + 120);
  if (!v66)
    goto LABEL_159;
  v76 = (WebCore::RenderObject *)(*(_QWORD *)(v66 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v76)
    goto LABEL_159;
  if ((*(_BYTE *)((*(_QWORD *)(v66 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
    goto LABEL_183;
  if ((*(_WORD *)(v66 + 28) & 0x10) != 0)
  {
    v77 = *(_DWORD *)(v66 + 24);
    *(_DWORD *)(v66 + 24) = v77 + 2;
    if ((*((_BYTE *)v76 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194139424);
    }
    v78 = *((unsigned __int8 *)v76 + 46);
    if (v77)
    {
      *(_DWORD *)(v66 + 24) = v77;
    }
    else if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v66, a2);
    }
    if (v78 == 35 || v78 == 63)
      goto LABEL_183;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 208))(v66))
  {
LABEL_183:
    v79 = WebCore::RenderObject::containingBlock(v76);
    v65 = *((_QWORD *)this + 3);
    if (!v79)
      goto LABEL_159;
  }
  else
  {
    v65 = *((_QWORD *)this + 3);
  }
  v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 8) + 40) + 8)
                                                      + 528)
                                          + 8)
                              + 296)
                  + 3064);
  v81 = *(_QWORD *)(v80 + 120);
  if (v81)
  {
    v82 = *(_BYTE *)(v80 + 132) & 7;
    if (v82 <= 4 && (((1 << v82) & 0x19) != 0 || (v81 = *(_QWORD *)(v81 + 32)) != 0))
    {
      *(_DWORD *)(v81 + 24) += 2;
      WebCore::Node::computeEditability(v81, 0, 1);
      if (*(_DWORD *)(v81 + 24) == 2)
      {
        if ((*(_WORD *)(v81 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v81, a2);
      }
      else
      {
        *(_DWORD *)(v81 + 24) -= 2;
      }
    }
  }
  v65 = *((_QWORD *)this + 3);
LABEL_159:
  v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 8) + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 56);
  v68 = *(WebCore **)(v67 + 24);
  if (v68)
  {
    *((_DWORD *)v68 + 6) += 2;
    v195.i64[0] = (uint64_t)v68;
    v195.i32[2] = *(_DWORD *)(v67 + 32);
    v195.i8[12] = *(_BYTE *)(v67 + 36);
    v144 = WebCore::rendererForCaretPainting(v68, (const WebCore::Node *)a2);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v195.i64);
    if (v144)
    {
      v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                               + 8)
                                                                                   + 528)
                                                                       + 8)
                                                           + 24)
                                               + 8)
                                   + 56)
                       + 24);
      v146 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      if (!v145)
        v146 = 0;
      if (v146)
      {
        v147 = 0;
        if (v145)
        {
          v148 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                       + 528)
                                                                           + 8)
                                                               + 24)
                                                   + 8)
                                       + 56)
                           + 24);
          do
          {
            if (!WebCore::Node::hasEditableStyle(v148, 0))
              break;
            if ((*(_WORD *)(v148 + 28) & 8) != 0)
              v147 = v148;
            m = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v145 + 40) + 8) + 1272);
            if (m)
            {
              if ((*(_WORD *)(m + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(m + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              {
                for (m = *(_QWORD *)(m + 80); m; m = *(_QWORD *)(m + 56))
                {
                  if ((*(_WORD *)(m + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(m + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                  {
                    break;
                  }
                }
              }
              else
              {
                m = 0;
              }
            }
            if (m == v148)
              break;
            v148 = *(_QWORD *)(v148 + 32);
          }
          while (v148);
        }
        LOBYTE(v146) = v147 != 0;
      }
      if (v144 != this || (v146 & 1) != 0)
      {
        if (v144 == this)
        {
          v150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                       + 40)
                                                                           + 8)
                                                               + 528)
                                                   + 8)
                                       + 24)
                           + 8);
LABEL_338:
          JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(*(_QWORD *)(v150 + 56));
        }
      }
      else
      {
        v150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                                 + 8)
                                                                                     + 40)
                                                                         + 8)
                                                             + 528)
                                                 + 8)
                                     + 24)
                         + 8);
        if ((*(_QWORD *)(*(_QWORD *)(v150 + 112) + 664) & 0x4000000000000) != 0)
          goto LABEL_338;
      }
    }
  }
}

void WebCore::RenderBlockFlow::paintInlineChildren(WebCore::RenderBlockFlow *this, WebCore::PaintInfo *a2, int32x2_t *a3)
{
  int v3;
  WebCore::LayoutIntegration::LineLayout *v4;
  uint64_t v5;

  v3 = *((_DWORD *)this + 60);
  if (v3 == 1)
  {
    v4 = (WebCore::LayoutIntegration::LineLayout *)*((_QWORD *)this + 29);
    if (v4)
      WebCore::LayoutIntegration::LineLayout::paint(v4, (uint64_t)a2, a3, 0);
  }
  else if (v3 == 2)
  {
    v5 = *((_QWORD *)this + 29);
    if (v5)
      WebCore::RenderLineBoxList::paint(v5 + 8, this, a2, a3);
  }
}

WebCore::RenderBlockFlow *WebCore::RenderBlockFlow::paintFloats(WebCore::RenderBlockFlow *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  WebCore::PaintInfo *v13;
  __int16 v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  const WebCore::LayoutPoint *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::RenderBlockFlow *v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    for (i = *(uint64_t ***)(v4 + 8); i; i = (uint64_t **)i[2])
    {
      v7 = *i;
      v8 = **i;
      if (v8)
      {
        v9 = *(_QWORD **)(v8 + 8);
        if (v9)
        {
          v10 = v9[18];
          if ((!v10 || (*(_BYTE *)(v10 + 25) & 8) == 0) && (*((_BYTE *)v7 + 36) & 4) != 0)
          {
            v35 = this;
            v11 = *((_OWORD *)a2 + 3);
            v40 = *((_OWORD *)a2 + 2);
            v41 = v11;
            v42 = *((_OWORD *)a2 + 4);
            v43 = *((_QWORD *)a2 + 10);
            v12 = *((_OWORD *)a2 + 1);
            v38 = *(_OWORD *)a2;
            v39 = v12;
            v13 = a2;
            v14 = *((_WORD *)a2 + 8);
            v15 = a4;
            if (!(_DWORD)a4)
              v14 = 0;
            LOWORD(v39) = v14;
            v16 = *((_DWORD *)v7 + 7);
            v17 = *((_DWORD *)v7 + 8);
            v19 = *v7;
            v18 = v7[1];
            v20 = __OFADD__((_DWORD)v18, v16);
            v21 = v18 + v16;
            if (v20)
              v21 = (v18 >> 31) + 0x7FFFFFFF;
            v22 = HIDWORD(v18);
            v20 = __OFADD__((_DWORD)v22, v17);
            v23 = v22 + v17;
            v24 = (v22 >> 31) + 0x7FFFFFFF;
            if (v20)
              v23 = v24;
            v25 = *(_DWORD *)(*(_QWORD *)(v19 + 8) + 152);
            v26 = *(_DWORD *)(*(_QWORD *)(v19 + 8) + 156);
            v20 = __OFSUB__(v21, v25);
            v27 = v21 - v25;
            v28 = (v21 >> 31) + 0x7FFFFFFF;
            if (!v20)
              v28 = v27;
            v20 = __OFSUB__(v23, v26);
            v29 = v23 - v26;
            v30 = (v23 >> 31) + 0x7FFFFFFF;
            if (!v20)
              v30 = v29;
            v31 = *((_DWORD *)a3 + 1);
            v32 = a3;
            v20 = __OFADD__(*(_DWORD *)a3, v28);
            LODWORD(v33) = *(_DWORD *)a3 + v28;
            if (v20)
              v33 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
            else
              v33 = v33;
            v20 = __OFADD__(v31, v30);
            v34 = v31 + v30;
            if (v20)
              v34 = (v31 >> 31) + 0x7FFFFFFF;
            v36 = v33 | (v34 << 32);
            v37 = WebCore::RenderBlockFlow::flipFloatForWritingModeForChild(this, (const WebCore::FloatingObject *)v7, (const WebCore::LayoutPoint *)&v36);
            (*(void (**)(_QWORD *, __int128 *, unint64_t *))(*v9 + 680))(v9, &v38, &v37);
            if ((v15 & 1) == 0)
            {
              LOWORD(v39) = 2;
              (*(void (**)(_QWORD *, __int128 *, unint64_t *))(*v9 + 680))(v9, &v38, &v37);
              LOWORD(v39) = 4;
              (*(void (**)(_QWORD *, __int128 *, unint64_t *))(*v9 + 680))(v9, &v38, &v37);
              LOWORD(v39) = 8;
              (*(void (**)(_QWORD *, __int128 *, unint64_t *))(*v9 + 680))(v9, &v38, &v37);
              LOWORD(v39) = 16;
              (*(void (**)(_QWORD *, __int128 *, unint64_t *))(*v9 + 680))(v9, &v38, &v37);
            }
            a4 = v15;
            a3 = v32;
            a2 = v13;
            this = v35;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::EventRegionContext::isEventRegionContext(WebCore::EventRegionContext *this)
{
  return 1;
}

uint64_t WebCore::RenderBlockFlow::paintColumnRules(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  const WebCore::RenderBox *v5;
  const WebCore::RenderBox *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::RenderBox *v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::RenderBox *v17;

  v3 = *(_QWORD *)(this + 224);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        v14 = (WebCore::RenderBox *)this;
        this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
        if ((this & 1) == 0)
        {
          this = WebCore::RenderChildIteratorAdapter<WebCore::RenderMultiColumnSet>::begin((uint64_t)v14);
          v16 = this;
          v17 = v5;
          if (v5)
          {
            v6 = v5;
            do
            {
              v8 = *((_DWORD *)v6 + 38);
              v7 = *((_DWORD *)v6 + 39);
              v9 = WebCore::RenderBox::flipForWritingModeForChild(v14, v6, a3);
              LODWORD(v10) = v8 + v9;
              if (__OFADD__(v8, (_DWORD)v9))
                v10 = (v8 >> 31) + 0x7FFFFFFF;
              else
                v10 = v10;
              LODWORD(v11) = v7 + HIDWORD(v9);
              if (__OFADD__(v7, HIDWORD(v9)))
                v11 = (v7 >> 31) + 0x7FFFFFFF;
              else
                v11 = v11;
              v15 = v10 | (v11 << 32);
              WebCore::RenderMultiColumnSet::paintColumnRules(v6, a2, (const WebCore::LayoutPoint *)&v15);
              this = WebCore::RenderChildIterator<WebCore::RenderMultiColumnSet>::operator++((uint64_t)&v16);
              v6 = v17;
            }
            while (v17);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderElement::hasOutlineAnnotation(WebCore::RenderElement *this)
{
  uint64_t v1;
  uint64_t v3;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v1)
    return 0;
  if ((*(_WORD *)(v1 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194139F80);
  }
  if ((*(_WORD *)(v1 + 30) & 1) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  if (*(_BYTE *)(v3 + 3382))
    return 1;
  else
    return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 1944) + 248) + 1149) >> 5) & 1;
}

void WebCore::RenderTable::paint(WebCore::RenderTable *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::RenderObject *v6;
  WebCore::RenderObject *v7;
  int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WTF *v49;

  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 0x18) != 0)
  {
    v6 = WebCore::RenderObject::containingBlock(this);
    if (v6)
    {
      v7 = v6;
      if ((*((_BYTE *)v6 + 45) & 1) != 0)
      {
        v38 = (*((_BYTE *)v6 + 45) & 2) != 0
            ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 4) + 8) + 96)
            : *((_QWORD *)v6 + 12);
        if (((v38 & 0x1F) == 1 || (v38 & 0x1F) == 14)
          && (*((_BYTE *)v6 + 45) & 0x40) != 0
          && (v38 & 0xF80000000000) == 0
          && ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 176))(v6) & 1) == 0)
        {
          v40 = *((unsigned __int8 *)v7 + 46);
          if (v40 != 20)
          {
            if ((*((_BYTE *)v7 + 52) & 7) == 1)
            {
              if ((*((_BYTE *)v7 + 53) & 2) == 0 && v40 != 26 && v40 != 49)
                goto LABEL_62;
            }
            else if (v40 != 49 && v40 != 26)
            {
LABEL_62:
              if ((*(_BYTE *)(*((_QWORD *)v7 + 13) + 239) & 0x18) == 0)
                return;
            }
          }
        }
      }
    }
  }
  v9 = *((_DWORD *)this + 38);
  v8 = *((_DWORD *)this + 39);
  v10 = *((_DWORD *)a3 + 1);
  v11 = __OFADD__(*(_DWORD *)a3, v9);
  v12 = *(_DWORD *)a3 + v9;
  LODWORD(v13) = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  if (v11)
    v13 = v13;
  else
    v13 = v12;
  v11 = __OFADD__(v10, v8);
  v14 = v10 + v8;
  LODWORD(v15) = (v10 >> 31) + 0x7FFFFFFF;
  if (v11)
    v15 = v15;
  else
    v15 = v14;
  v49 = (WTF *)(v13 | (v15 << 32));
  v16 = *((unsigned __int16 *)a2 + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8))
    goto LABEL_41;
  v17 = *((_QWORD *)this + 24);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 20);
    v19 = (uint64_t *)(v17 + 28);
  }
  else
  {
    v18 = 0;
    v19 = (uint64_t *)((char *)this + 160);
  }
  v20 = *v19;
  v21 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v22 = HIDWORD(*v19);
  if (v21 <= 5 && ((1 << v21) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v45 = *((_DWORD *)this + 40);
      v46 = v18 + v20;
      if (__OFADD__((_DWORD)v18, (_DWORD)v20))
        v46 = (v18 >> 31) + 0x7FFFFFFF;
      v11 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      LODWORD(v48) = (v45 >> 31) + 0x7FFFFFFF;
      if (v11)
        v48 = v48;
      else
        v48 = v47;
      v18 = v18 & 0xFFFFFFFF00000000 | v48;
    }
    else
    {
      v41 = *((_DWORD *)this + 41);
      v42 = (HIDWORD(v18) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v18), (_DWORD)v22))
        v42 = HIDWORD(v18) + v22;
      v11 = __OFSUB__(v41, v42);
      v43 = v41 - v42;
      v44 = (v41 >> 31) + 0x7FFFFFFF;
      if (!v11)
        v44 = v43;
      v18 = v18 | ((unint64_t)v44 << 32);
    }
  }
  v11 = __OFADD__((_DWORD)v18, (_DWORD)v13);
  v23 = v18 + v13;
  if (v11)
    v23 = (v18 >> 31) + 0x7FFFFFFF;
  v24 = HIDWORD(v18);
  v11 = __OFADD__((_DWORD)v24, (_DWORD)v15);
  v25 = v24 + v15;
  v26 = (v24 >> 31) + 0x7FFFFFFF;
  if (v11)
    v25 = v26;
  if ((int)v20 >= 1 && (int)v22 >= 1)
  {
    v28 = *((_DWORD *)a2 + 2);
    if (v28 >= 1)
    {
      v29 = *((_DWORD *)a2 + 3);
      if (v29 >= 1)
      {
        v30 = *(_DWORD *)a2 + v28;
        if (__OFADD__(*(_DWORD *)a2, v28))
          v30 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
        if ((int)v23 < v30)
        {
          v11 = __OFADD__(v23, (_DWORD)v20);
          v31 = v23 + v20;
          v32 = (v23 >> 31) + 0x7FFFFFFF;
          if (!v11)
            v32 = v31;
          if (*(_DWORD *)a2 < v32)
          {
            v33 = *((_DWORD *)a2 + 1);
            v34 = v33 + v29;
            if (__OFADD__(v33, v29))
              v34 = (v33 >> 31) + 0x7FFFFFFF;
            if ((int)v25 < v34)
            {
              v11 = __OFADD__(v25, (_DWORD)v22);
              v35 = v25 + v22;
              v36 = (v25 >> 31) + 0x7FFFFFFF;
              if (v11)
                v35 = v36;
              if ((int)v33 < v35)
              {
LABEL_41:
                v37 = WebCore::RenderBox::pushContentsClip(this, a2, (const WebCore::LayoutPoint *)&v49);
                WebCore::RenderTable::paintObject(this, a2, &v49);
                if (v37)
                  WebCore::RenderBox::popContentsClip((uint64_t)this, (uint64_t)a2, v16, (uint64_t)&v49);
              }
            }
          }
        }
      }
    }
  }
}

float WebCore::RenderStyle::getRoundedBorderFor@<S0>(WebCore::RenderStyle *this@<X0>, const WebCore::LayoutRect *a2@<X1>, const WebCore::LayoutSize *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v6;
  unint64_t *v10;
  __int128 v11;
  uint64_t v12;
  WebCore *v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  const WebCore::LayoutSize *v20;
  unint64_t v21;
  const WebCore::LayoutSize *v22;
  unint64_t v23;
  const WebCore::LayoutSize *v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  unint64_t *v33;
  __int16 v34;
  char v35;
  int v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  float v43;
  float v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v6 = (int)a3;
  *(_OWORD *)(a5 + 16) = 0u;
  v10 = (unint64_t *)(a5 + 16);
  *(_OWORD *)(a5 + 32) = 0u;
  v11 = *(_OWORD *)a2;
  *(_OWORD *)a5 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v13 = (WebCore *)(v12 + 208);
  if (*(_BYTE *)(v12 + 212))
    v14 = *(_BYTE *)(v12 + 212) == 11;
  else
    v14 = 1;
  if (!v14)
  {
    if (*(_BYTE *)(v12 + 214))
    {
      LODWORD(v11) = *(_DWORD *)v13;
      if (*(float *)v13 == 0.0)
        goto LABEL_7;
    }
    else if (!*(_DWORD *)v13)
    {
      goto LABEL_7;
    }
  }
  if (*(_BYTE *)(v12 + 220))
    v18 = *(_BYTE *)(v12 + 220) == 11;
  else
    v18 = 1;
  if (v18)
    goto LABEL_33;
  if (*(_BYTE *)(v12 + 222))
  {
    LODWORD(v11) = *(_DWORD *)(v12 + 216);
    if (*(float *)&v11 != 0.0)
      goto LABEL_33;
  }
  else if (*(_DWORD *)(v12 + 216))
  {
    goto LABEL_33;
  }
LABEL_7:
  if (*(_BYTE *)(v12 + 228))
    v15 = *(_BYTE *)(v12 + 228) == 11;
  else
    v15 = 1;
  if (!v15)
  {
    if (*(_BYTE *)(v12 + 230))
    {
      LODWORD(v11) = *(_DWORD *)(v12 + 224);
      if (*(float *)&v11 == 0.0)
        goto LABEL_13;
    }
    else if (!*(_DWORD *)(v12 + 224))
    {
      goto LABEL_13;
    }
  }
  if (*(_BYTE *)(v12 + 236))
    v40 = *(_BYTE *)(v12 + 236) == 11;
  else
    v40 = 1;
  if (v40)
    goto LABEL_33;
  if (*(_BYTE *)(v12 + 238))
  {
    LODWORD(v11) = *(_DWORD *)(v12 + 232);
    if (*(float *)&v11 != 0.0)
      goto LABEL_33;
  }
  else if (*(_DWORD *)(v12 + 232))
  {
    goto LABEL_33;
  }
LABEL_13:
  if (*(_BYTE *)(v12 + 244))
    v16 = *(_BYTE *)(v12 + 244) == 11;
  else
    v16 = 1;
  if (!v16)
  {
    if (*(_BYTE *)(v12 + 246))
    {
      LODWORD(v11) = *(_DWORD *)(v12 + 240);
      if (*(float *)&v11 == 0.0)
        goto LABEL_19;
    }
    else if (!*(_DWORD *)(v12 + 240))
    {
      goto LABEL_19;
    }
  }
  if (*(_BYTE *)(v12 + 252))
    v41 = *(_BYTE *)(v12 + 252) == 11;
  else
    v41 = 1;
  if (v41)
    goto LABEL_33;
  if (*(_BYTE *)(v12 + 254))
  {
    LODWORD(v11) = *(_DWORD *)(v12 + 248);
    if (*(float *)&v11 != 0.0)
      goto LABEL_33;
  }
  else if (*(_DWORD *)(v12 + 248))
  {
    goto LABEL_33;
  }
LABEL_19:
  if (*(_BYTE *)(v12 + 260))
    v17 = *(_BYTE *)(v12 + 260) == 11;
  else
    v17 = 1;
  if (!v17)
  {
    if (*(_BYTE *)(v12 + 262))
    {
      LODWORD(v11) = *(_DWORD *)(v12 + 256);
      if (*(float *)&v11 == 0.0)
        return *(float *)&v11;
    }
    else if (!*(_DWORD *)(v12 + 256))
    {
      return *(float *)&v11;
    }
  }
  if (*(_BYTE *)(v12 + 268))
    v42 = *(_BYTE *)(v12 + 268) == 11;
  else
    v42 = 1;
  if (!v42)
  {
    if (*(_BYTE *)(v12 + 270))
    {
      LODWORD(v11) = *(_DWORD *)(v12 + 264);
      if (*(float *)&v11 == 0.0)
        return *(float *)&v11;
    }
    else if (!*(_DWORD *)(v12 + 264))
    {
      return *(float *)&v11;
    }
  }
LABEL_33:
  v46 = *((_QWORD *)a2 + 1);
  v19 = WebCore::sizeForLengthSize(v13, (const WebCore::LengthSize *)&v46, a3);
  v21 = WebCore::sizeForLengthSize((WebCore *)(v12 + 224), (const WebCore::LengthSize *)&v46, v20);
  v23 = WebCore::sizeForLengthSize((WebCore *)(v12 + 240), (const WebCore::LengthSize *)&v46, v22);
  v25 = WebCore::sizeForLengthSize((WebCore *)(v12 + 256), (const WebCore::LengthSize *)&v46, v24);
  v47 = v19;
  v48 = v21;
  v49 = v23;
  v50 = v25;
  v26 = (float)*((int *)a2 + 2) * 0.015625;
  v27 = (float)*((int *)a2 + 3) * 0.015625;
  v28 = (float)((float)(int)v19 * 0.015625) + (float)((float)(int)v21 * 0.015625);
  v29 = (float)((float)(int)v23 * 0.015625) + (float)((float)(int)v25 * 0.015625);
  v30 = (float)((float)SHIDWORD(v19) * 0.015625) + (float)((float)SHIDWORD(v23) * 0.015625);
  v31 = (float)((float)SHIDWORD(v21) * 0.015625) + (float)((float)SHIDWORD(v25) * 0.015625);
  if (v29 > v26 || v30 > v27 || v31 > v27 || (v32 = 1.0, v28 > v26))
  {
    v32 = 1.0;
    if (v28 > v26)
    {
      v32 = v26 / v28;
      if ((float)(v26 / v28) > 1.0)
        v32 = 1.0;
    }
    if (v29 > v26)
    {
      v44 = v26 / v29;
      if (v32 >= v44)
        v32 = v44;
    }
    if (v30 > v27 && v32 >= (float)(v27 / v30))
      v32 = v27 / v30;
    if (v31 > v27)
    {
      v43 = v27 / v31;
      if (v32 >= v43)
        v32 = v43;
    }
  }
  v33 = &v48;
  WebCore::RoundedRectRadii::scale((int *)&v47, v32);
  v34 = (unsigned __int16)*((_DWORD *)this + 11) >> 13;
  v35 = 2;
  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_39;
    case 3:
    case 5:
      LOBYTE(v34) = 3;
      goto LABEL_39;
    case 4:
      goto LABEL_40;
    default:
      LOBYTE(v34) = 0;
LABEL_39:
      v35 = v34;
LABEL_40:
      v36 = v35 & 6;
      if (v6)
      {
        if (v36 == 2)
        {
          v37 = (unint64_t *)(a5 + 24);
          v38 = &v48;
        }
        else
        {
          v37 = (unint64_t *)(a5 + 32);
          v38 = &v49;
        }
        *v37 = *v38;
        *v10 = v47;
      }
      if (a4)
      {
        if (v36 == 2)
        {
          v39 = (unint64_t *)(a5 + 32);
          v33 = &v49;
        }
        else
        {
          v39 = (unint64_t *)(a5 + 24);
        }
        *v39 = *v33;
        *(_QWORD *)(a5 + 40) = v50;
      }
      break;
  }
  return *(float *)&v11;
}

int *WebCore::RenderStyle::getRoundedInnerBorderFor@<X0>(WebCore::BorderDataRadii *a1@<X5>, int *result@<X0>, int a3@<W1>, int a4@<W2>, int a5@<W3>, int a6@<W4>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10)
{
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  _DWORD *v51;
  float v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _QWORD *v58;
  _DWORD *v59;
  _QWORD *v60;
  float v61;
  float v62;
  float v63;
  uint64_t v66;
  unint64_t v67;
  _DWORD v68[2];
  _DWORD v69[2];
  unint64_t v70;
  int v71;
  int v72;
  int v73;

  v15 = result[2];
  v16 = result[3];
  v17 = __OFSUB__(v15, a5);
  v18 = v15 - a5;
  v19 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v17)
    v19 = v18;
  v17 = __OFSUB__(v19, a6);
  v20 = v19 - a6;
  v21 = (v19 >> 31) + 0x7FFFFFFF;
  if (!v17)
    v21 = v20;
  v22 = v21 & ~(v21 >> 31);
  v17 = __OFSUB__(v16, a3);
  v23 = v16 - a3;
  v24 = (v16 >> 31) + 0x7FFFFFFF;
  if (v17)
    v23 = v24;
  v17 = __OFSUB__(v23, a4);
  v25 = v23 - a4;
  v26 = (v23 >> 31) + 0x7FFFFFFF;
  if (!v17)
    v26 = v25;
  v27 = v26 & ~(v26 >> 31);
  v28 = result[1];
  v29 = (*result >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*result, a5))
    v29 = *result + a5;
  v17 = __OFADD__(v28, a3);
  v30 = v28 + a3;
  v31 = (v28 >> 31) + 0x7FFFFFFF;
  if (!v17)
    v31 = v30;
  *(_DWORD *)a9 = v29;
  *(_DWORD *)(a9 + 4) = v31;
  *(_DWORD *)(a9 + 8) = v22;
  *(_DWORD *)(a9 + 12) = v27;
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  LODWORD(v32) = *((unsigned __int8 *)a1 + 64);
  if (*((_BYTE *)a1 + 64))
  {
    v44 = result;
    v66 = *((_QWORD *)result + 1);
    WebCore::calcRadiiFor((WebCore *)&v67, a1, (const WebCore::LayoutSize *)&v66);
    v45 = (float)v44[2] * 0.015625;
    v46 = (float)((float)(int)v67 * 0.015625) + (float)((float)v68[0] * 0.015625);
    v47 = 1.0;
    if (v46 > v45)
    {
      v47 = v45 / v46;
      if ((float)(v45 / v46) > 1.0)
        v47 = 1.0;
    }
    v48 = (float)v44[3] * 0.015625;
    v49 = (float)((float)v69[0] * 0.015625) + (float)((float)(int)v70 * 0.015625);
    if (v49 > v45)
    {
      v61 = v45 / v49;
      if (v47 >= v61)
        v47 = v61;
    }
    v50 = (float)((float)SHIDWORD(v67) * 0.015625) + (float)((float)v69[1] * 0.015625);
    if (v50 > v48)
    {
      v62 = v48 / v50;
      if (v47 >= v62)
        v47 = v62;
    }
    v51 = v68;
    v52 = (float)((float)v68[1] * 0.015625) + (float)((float)SHIDWORD(v70) * 0.015625);
    if (v52 > v48)
    {
      v63 = v48 / v52;
      if (v47 >= v63)
        v47 = v63;
    }
    WebCore::RoundedRectRadii::scale((int *)&v67, v47);
    if (a3 == 0x80000000)
      v53 = 0x7FFFFFFF;
    else
      v53 = -a3;
    LODWORD(v66) = v53;
    if (a4 == 0x80000000)
      v54 = 0x7FFFFFFF;
    else
      v54 = -a4;
    if (a5 == 0x80000000)
      v55 = 0x7FFFFFFF;
    else
      v55 = -a5;
    v72 = v55;
    v73 = v54;
    if (a6 == 0x80000000)
      v56 = 0x7FFFFFFF;
    else
      v56 = -a6;
    v71 = v56;
    result = WebCore::RoundedRectRadii::expand((int *)&v67, &v66, &v73, &v72, &v71);
    LODWORD(v32) = a8;
    if (a8)
    {
      v57 = a7;
      if (a7)
      {
        v58 = (_QWORD *)(a9 + 32);
        v59 = v69;
      }
      else
      {
        v58 = (_QWORD *)(a9 + 24);
        v59 = v68;
      }
      *v58 = *(_QWORD *)v59;
      v33 = v67;
      *(_QWORD *)(a9 + 16) = v67;
      v32 = HIDWORD(v33);
    }
    else
    {
      LODWORD(v33) = 0;
      v57 = a7;
    }
    if (a10)
    {
      if (v57)
      {
        v60 = (_QWORD *)(a9 + 24);
      }
      else
      {
        v60 = (_QWORD *)(a9 + 32);
        v51 = v69;
      }
      *v60 = *(_QWORD *)v51;
      v34 = v70;
      *(_QWORD *)(a9 + 40) = v70;
      v35 = HIDWORD(v34);
    }
    else
    {
      LODWORD(v35) = 0;
      LODWORD(v34) = 0;
    }
    if ((v33 & 0x80000000) != 0 || (v32 & 0x80000000) != 0)
      return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  }
  else
  {
    LODWORD(v33) = 0;
    LODWORD(v34) = 0;
    LODWORD(v35) = 0;
  }
  v36 = *(_DWORD *)(a9 + 32);
  if (v36 < 0)
    return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  v37 = *(_DWORD *)(a9 + 36);
  if (v37 < 0)
    return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  v38 = *(_DWORD *)(a9 + 24);
  if (v38 < 0)
    return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  v39 = *(_DWORD *)(a9 + 28);
  if (v39 < 0 || (v34 & 0x80000000) != 0 || (v35 & 0x80000000) != 0)
    return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  v17 = __OFADD__((_DWORD)v33, v38);
  v40 = v33 + v38;
  if (v17)
    v40 = 0x7FFFFFFF;
  if (v40 > v22)
    return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  v41 = v36 + v34;
  if (__OFADD__(v36, (_DWORD)v34))
    v41 = 0x7FFFFFFF;
  if (v41 > v22)
    return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  v17 = __OFADD__((_DWORD)v32, v37);
  v42 = v32 + v37;
  if (v17)
    v42 = 0x7FFFFFFF;
  if (v42 > v27)
    return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  v43 = v39 + v35;
  if (__OFADD__(v39, (_DWORD)v35))
    v43 = 0x7FFFFFFF;
  if (v43 > v27)
    return WebCore::RoundedRect::adjustRadii((int32x2_t *)a9);
  return result;
}

int *WebCore::RoundedRectRadii::scale(int *this, float a2)
{
  double v2;
  int v4;
  double v5;
  int v7;
  double v8;
  int v10;
  double v11;
  int v13;
  double v14;
  int v16;
  double v17;
  int v19;
  double v20;
  int v22;
  double v23;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  if (a2 == 1.0)
    return this;
  v2 = (float)((float)((float)*this * 0.015625) * a2) * 64.0;
  if (v2 >= 2147483650.0 || v2 <= -2147483650.0)
  {
    if (v2 > -2147483650.0)
      v26 = (int)v2;
    else
      v26 = 0x80000000;
    if (v2 < 2147483650.0)
      v4 = v26;
    else
      v4 = 0x7FFFFFFF;
  }
  else
  {
    v4 = (int)v2;
  }
  *this = v4;
  v5 = (float)((float)((float)this[1] * 0.015625) * a2) * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 >= 2147483650.0)
    {
      v7 = 0x7FFFFFFF;
    }
    else if (v5 > -2147483650.0)
    {
      v7 = (int)v5;
    }
    else
    {
      v7 = 0x80000000;
    }
  }
  else
  {
    v7 = (int)v5;
  }
  this[1] = v7;
  if (!v4 || !v7)
    *(_QWORD *)this = 0;
  v8 = (float)((float)((float)this[2] * 0.015625) * a2) * 64.0;
  if (v8 >= 2147483650.0 || v8 <= -2147483650.0)
  {
    if (v8 > -2147483650.0)
      v27 = (int)v8;
    else
      v27 = 0x80000000;
    if (v8 < 2147483650.0)
      v10 = v27;
    else
      v10 = 0x7FFFFFFF;
  }
  else
  {
    v10 = (int)v8;
  }
  this[2] = v10;
  v11 = (float)((float)((float)this[3] * 0.015625) * a2) * 64.0;
  if (v11 >= 2147483650.0 || v11 <= -2147483650.0)
  {
    if (v11 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v11 > -2147483650.0)
    {
      v13 = (int)v11;
    }
    else
    {
      v13 = 0x80000000;
    }
  }
  else
  {
    v13 = (int)v11;
  }
  this[3] = v13;
  if (!v10 || !v13)
    *((_QWORD *)this + 1) = 0;
  v14 = (float)((float)((float)this[4] * 0.015625) * a2) * 64.0;
  if (v14 >= 2147483650.0 || v14 <= -2147483650.0)
  {
    if (v14 > -2147483650.0)
      v28 = (int)v14;
    else
      v28 = 0x80000000;
    if (v14 < 2147483650.0)
      v16 = v28;
    else
      v16 = 0x7FFFFFFF;
  }
  else
  {
    v16 = (int)v14;
  }
  this[4] = v16;
  v17 = (float)((float)((float)this[5] * 0.015625) * a2) * 64.0;
  if (v17 >= 2147483650.0 || v17 <= -2147483650.0)
  {
    if (v17 >= 2147483650.0)
    {
      v19 = 0x7FFFFFFF;
    }
    else if (v17 > -2147483650.0)
    {
      v19 = (int)v17;
    }
    else
    {
      v19 = 0x80000000;
    }
  }
  else
  {
    v19 = (int)v17;
  }
  this[5] = v19;
  if (!v16 || !v19)
    *((_QWORD *)this + 2) = 0;
  v20 = (float)((float)((float)this[6] * 0.015625) * a2) * 64.0;
  if (v20 >= 2147483650.0 || v20 <= -2147483650.0)
  {
    if (v20 > -2147483650.0)
      v29 = (int)v20;
    else
      v29 = 0x80000000;
    if (v20 < 2147483650.0)
      v22 = v29;
    else
      v22 = 0x7FFFFFFF;
  }
  else
  {
    v22 = (int)v20;
  }
  this[6] = v22;
  v23 = (float)((float)((float)this[7] * 0.015625) * a2) * 64.0;
  if (v23 < 2147483650.0 && v23 > -2147483650.0)
    goto LABEL_48;
  if (v23 >= 2147483650.0)
  {
    v25 = 0x7FFFFFFF;
    goto LABEL_49;
  }
  if (v23 <= -2147483650.0)
    v25 = 0x80000000;
  else
LABEL_48:
    v25 = (int)v23;
LABEL_49:
  this[7] = v25;
  if (!v22 || !v25)
    *((_QWORD *)this + 3) = 0;
  return this;
}

BOOL WebCore::EventRegionContext::contains(WebCore::EventRegionContext *this, const WebCore::IntRect *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  _BOOL8 v11;
  void *v13;
  WTF *v14;
  WTF *v15;
  WebCore::Region *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v20;
  WTF *v22;
  WTF *v23;
  WTF **v24;
  uint64_t v25;
  WTF *v26[16];
  WTF *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    v16 = (WebCore::Region *)*((_QWORD *)this + 6);
    v24 = (WTF **)WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(*((_QWORD *)this + 2) + 48 * v2 - 48), a2);
    v25 = v17;
    v26[0] = 0;
    v11 = WebCore::Region::contains(v16, (const WebCore::Region *)&v24);
    v15 = v26[0];
    v26[0] = 0;
    if (!v15)
      return v11;
    v18 = (WTF *)*((_QWORD *)v15 + 18);
    if ((WTF *)((char *)v15 + 160) != v18 && v18 != 0)
    {
      *((_QWORD *)v15 + 18) = 0;
      *((_DWORD *)v15 + 38) = 0;
      v22 = v15;
      WTF::fastFree(v18, v13);
      v15 = v22;
    }
    v20 = *(WTF **)v15;
    if ((WTF *)((char *)v15 + 16) != *(WTF **)v15 && v20 != 0)
    {
      *(_QWORD *)v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      v23 = v15;
      WTF::fastFree(v20, v13);
      v15 = v23;
    }
LABEL_27:
    WTF::fastFree(v15, v13);
    return v11;
  }
  v3 = *((_QWORD *)this + 6);
  v4 = *(_DWORD *)a2;
  if (*(_DWORD *)v3 > *(_DWORD *)a2)
    return 0;
  v5 = *((_DWORD *)a2 + 2) + v4;
  if (*(_DWORD *)(v3 + 8) + *(_DWORD *)v3 < v5)
    return 0;
  v6 = *((_DWORD *)a2 + 1);
  v7 = *(_DWORD *)(v3 + 4);
  if (v7 > v6)
    return 0;
  v8 = *(_DWORD *)(v3 + 12) + v7;
  v9 = *((_DWORD *)a2 + 3) + v6;
  if (v8 < v9)
    return 0;
  v10 = *(uint64_t **)(v3 + 16);
  if (!v10)
    return 1;
  v24 = v26;
  v26[0] = (WTF *)__PAIR64__(v5, v4);
  v25 = 0x200000020;
  v27 = (WTF *)&v29;
  v29 = v6;
  v30 = 0;
  v31 = v9;
  v32 = 2;
  v28 = 0x200000010;
  v11 = WebCore::Region::Shape::compareShapes<WebCore::Region::Shape::CompareContainsOperation>(v10, (uint64_t *)&v24);
  v14 = v27;
  if (&v29 != (int *)v27 && v27)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v14, v13);
  }
  v15 = (WTF *)v24;
  if (v26 != v24 && v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    goto LABEL_27;
  }
  return v11;
}

uint64_t WebCore::RenderLayerScrollableArea::paintOverflowControls(uint64_t this, WebCore::GraphicsContext *a2, int32x2_t *a3, const WebCore::IntRect *a4, int a5)
{
  uint64_t v5;
  int32x2_t *v10;
  int32x2_t v11;
  __n128 v12;
  int32x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int8x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int32 v26;
  int v27;
  int v28;
  int32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  int32x2_t v36;
  int8x16_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;

  v5 = *(_QWORD *)(*(_QWORD *)(this + 96) + 32);
  if ((*(_BYTE *)(v5 + 22) & 1) == 0)
    return this;
  v10 = (int32x2_t *)this;
  this = WebCore::RenderLayerScrollableArea::canUseCompositedScrolling((WebCore::RenderLayerScrollableArea *)this);
  if ((this & 1) != 0)
    return this;
  if ((*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v10 + 400))(v10)
    && (v22 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v10 + 400))(v10),
        ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 272))(v22) & 1) != 0))
  {
    this = 1;
  }
  else
  {
    if (!(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v10 + 392))(v10))
    {
LABEL_5:
      if (a5)
      {
        this = WebCore::ScrollableArea::hasOverlayScrollbars((WebCore::ScrollableArea *)v10);
        if (!(_DWORD)this)
          return this;
        a3 = v10 + 18;
      }
      v11 = *a3;
      v36 = v11;
      *(int32x2_t *)v37.i8 = v11;
      v12.n128_f64[0] = WebCore::RenderLayerScrollableArea::positionOverflowControls((WebCore::RenderLayerScrollableArea *)v10, (int32x2_t *)&v37);
      v13 = v10[16];
      v14 = v10[12];
      if (v13)
      {
        v32 = *(_QWORD *)(*(_QWORD *)&v14 + 256);
        if (!v32 || !*(_QWORD *)(v32 + 128))
        {
          (*(void (**)(int32x2_t, WebCore::GraphicsContext *, const WebCore::IntRect *, _QWORD, _QWORD, __n128))(**(_QWORD **)&v13 + 24))(v13, a2, a4, 0, 0, v12);
          v14 = v10[12];
        }
      }
      this = (uint64_t)v10[17];
      if (this)
      {
        v33 = *(_QWORD *)(*(_QWORD *)&v14 + 256);
        if (!v33 || !*(_QWORD *)(v33 + 136))
        {
          this = (*(uint64_t (**)(uint64_t, WebCore::GraphicsContext *, const WebCore::IntRect *, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 24))(this, a2, a4, 0, 0, v12);
          v14 = v10[12];
        }
      }
      v15 = *(_QWORD *)(*(_QWORD *)&v14 + 256);
      if (!v15 || !*(_QWORD *)(v15 + 144))
      {
        WebCore::RenderLayerScrollableArea::paintScrollCorner((WebCore::RenderScrollbarPart **)v10, a2, &v36, a4);
        v16 = (int8x8_t)vcgt_s32(v11, (int32x2_t)0xFE000000FE000000);
        v17 = *(int32x4_t *)a4;
        v35 = vorr_s8((int8x8_t)(*(_QWORD *)&v16 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v11), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v11, 6uLL)), v16));
        v18.i64[0] = 0xFE000000FE000000;
        v18.i64[1] = 0xFE000000FE000000;
        v19 = (int8x16_t)vcgtq_s32(v17, v18);
        v20.i64[0] = 0xFE000000FE000000;
        v20.i64[1] = 0xFE000000FE000000;
        v21.i64[0] = 0x8000000080000000;
        v21.i64[1] = 0x8000000080000000;
        v37 = vorrq_s8((int8x16_t)(*(_OWORD *)&v19 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v20, v17), v21, (int8x16_t)vshlq_n_s32(v17, 6uLL)), v19));
        return WebCore::RenderLayerScrollableArea::paintResizer((uint64_t)v10, a2, (const WebCore::LayoutPoint *)&v35, (const WebCore::LayoutRect *)&v37);
      }
      return this;
    }
    v31 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v10 + 392))(v10);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 272))(v31);
  }
  if (!(_DWORD)this || (a5 & 1) != 0)
    goto LABEL_5;
  v10[18] = *a3;
  if ((!*(_QWORD *)&v10[16] || (v34 = *(_QWORD *)(*(_QWORD *)&v10[12] + 256)) == 0 || !*(_QWORD *)(v34 + 128))
    && (!*(_QWORD *)&v10[17] || (v23 = *(_QWORD *)(*(_QWORD *)&v10[12] + 256)) == 0 || !*(_QWORD *)(v23 + 136)))
  {
    if ((v25 = *((_DWORD *)a4 + 2),
          v24 = *((_DWORD *)a4 + 3),
          v26 = a3->i32[1],
          v27 = *(_DWORD *)a4 - a3->i32[0],
          v28 = *((_DWORD *)a4 + 1) - v26,
          this = WebCore::RenderLayerScrollableArea::overflowControlsRects((WebCore::RenderLayerScrollableArea *)v10, (uint64_t)&v37), v37.i32[2] >= 1)&& v37.i32[3] >= 1&& v25 >= 1&& v24 >= 1&& v37.i32[0] < v27 + v25&& v27 < v37.i32[0] + v37.i32[2]&& v37.i32[1] < v28 + v24&& v28 < v37.i32[1] + v37.i32[3]|| v40 >= 1&& v41 >= 1&& v25 >= 1&& v24 >= 1&& v38 < v27 + v25&& v27 < v38 + v40&& v39 < v28 + v24&& v28 < v39 + v41|| v44 >= 1
      && v45 >= 1
      && v25 >= 1
      && v24 >= 1
      && v42 < v27 + v25
      && v27 < v42 + v44
      && v43 < v28 + v24
      && v28 < v43 + v45
      || v48 >= 1
      && v49 >= 1
      && v25 >= 1
      && v24 >= 1
      && v46 < v27 + v25
      && v27 < v46 + v48
      && v47 < v28 + v24
      && v28 < v47 + v49)
    {
      v29 = v10[12];
      if (!*(_QWORD *)(*(_QWORD *)&v29 + 256))
      {
        if ((*(_BYTE *)(*(_QWORD *)&v29 + 24) & 4) != 0)
        {
          v29 = *(int32x2_t *)(*(_QWORD *)&v29 + 40);
          if (v29)
          {
LABEL_60:
            while (!*(_QWORD *)(*(_QWORD *)&v29 + 256))
            {
              if ((*(_BYTE *)(*(_QWORD *)&v29 + 24) & 4) == 0)
              {
                while (1)
                {
                  v29 = *(int32x2_t *)(*(_QWORD *)&v29 + 40);
                  if (!*(_QWORD *)&v29)
                    goto LABEL_65;
                  if ((*(_BYTE *)(*(_QWORD *)&v29 + 24) & 0x4A) != 0)
                    goto LABEL_64;
                }
              }
              v29 = *(int32x2_t *)(*(_QWORD *)&v29 + 40);
LABEL_64:
              if (!*(_QWORD *)&v29)
                goto LABEL_65;
            }
            goto LABEL_28;
          }
        }
        else
        {
          while (1)
          {
            v29 = *(int32x2_t *)(*(_QWORD *)&v29 + 40);
            if (!*(_QWORD *)&v29)
              break;
            if ((*(_BYTE *)(*(_QWORD *)&v29 + 24) & 0x4A) != 0)
              goto LABEL_60;
          }
        }
LABEL_65:
        v29 = *(int32x2_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8)
                                       + 1944)
                           + 144);
      }
LABEL_28:
      v30 = *(_QWORD *)(*(_QWORD *)&v29 + 264);
      if (v30)
        *(_BYTE *)(v30 + 82) = 1;
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::paintResizer(uint64_t this, WebCore::GraphicsContext *a2, const WebCore::LayoutPoint *a3, const WebCore::LayoutRect *a4)
{
  int v6;
  __int32 v7;
  BOOL v8;
  unsigned __int32 v9;
  WebCore::RenderLayerModelObject *v10;
  WebCore::RenderScrollbarPart *v11;
  unsigned __int32 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::RenderLayerScrollableArea *v24;
  _QWORD v26[2];
  float v27[4];
  float32x4_t v28;
  int32x4_t v29;
  _BYTE v30[48];
  int32x2_t v31[2];

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 96) + 32) + 88) + 32) + 151) & 0x38) != 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(this + 96) + 32);
    v24 = (WebCore::RenderLayerScrollableArea *)this;
    WebCore::RenderLayerScrollableArea::overflowControlsRects((WebCore::RenderLayerScrollableArea *)this, (uint64_t)v30);
    WebCore::LayoutRect::LayoutRect((int8x8_t *)&v29, v31);
    v6 = *((_DWORD *)a3 + 1);
    v7 = v29.i32[0] + *(_DWORD *)a3;
    if (__OFADD__(v29.i32[0], *(_DWORD *)a3))
      v7 = ((unsigned __int32)v29.i32[0] >> 31) + 0x7FFFFFFF;
    v8 = __OFADD__(v29.i32[1], v6);
    v9 = v29.i32[1] + v6;
    if (v8)
      v9 = ((unsigned __int32)v29.i32[1] >> 31) + 0x7FFFFFFF;
    v29.i64[0] = __PAIR64__(v9, v7);
    this = WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v29, a4);
    if ((_DWORD)this)
    {
      if ((*(unsigned int (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 56))(a2))
      {
        return (uint64_t)WebCore::RenderLayerScrollableArea::updateResizerStyle((WebCore::RenderStyle **)v24, v10);
      }
      else
      {
        v11 = (WebCore::RenderScrollbarPart *)*((_QWORD *)v24 + 20);
        if (v11)
        {
          return WebCore::RenderScrollbarPart::paintIntoRect(v11, a2, a3, &v29);
        }
        else
        {
          WebCore::RenderLayerScrollableArea::drawPlatformResizerImage(*(WebCore::RenderLayerScrollableArea **)(*((_QWORD *)v24 + 12) + 32), a2, (const WebCore::LayoutRect *)&v29);
          this = WebCore::ScrollableArea::hasOverlayScrollbars(v24);
          if ((this & 1) == 0
            && (*((_QWORD *)v24 + 17) || *((_QWORD *)v24 + 16))
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 88) + 40) + 586) != 2)
          {
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
            v28 = vmulq_f32(vcvtq_f32_s32(v29), (float32x4_t)vdupq_n_s32(0x3C800000u));
            (*(void (**)(WebCore::GraphicsContext *, float32x4_t *))(*(_QWORD *)a2 + 456))(a2, &v28);
            v28 = (float32x4_t)v29;
            v12 = v29.i32[2] + 64;
            if (__OFADD__(v29.i32[2], 64))
              v12 = 0x7FFFFFFF;
            v13 = (v28.i32[3] + 64);
            if (__OFADD__(v28.i32[3], 64))
              v13 = 0x7FFFFFFFLL;
            v28.i64[1] = v12 | (unint64_t)(v13 << 32);
            *(_QWORD *)v27 = 0x11040000D9D9D9FFLL;
            WebCore::GraphicsContext::setStrokeColor(a2, (const WebCore::Color *)v27);
            if ((*(_QWORD *)v27 & 0x8000000000000) != 0)
            {
              v17 = (unsigned int *)(*(_QWORD *)v27 & 0xFFFFFFFFFFFFLL);
              do
              {
                v18 = __ldaxr(v17);
                v19 = v18 - 1;
              }
              while (__stlxr(v19, v17));
              if (!v19)
              {
                atomic_store(1u, v17);
                WTF::fastFree((WTF *)v17, v14);
              }
            }
            if (*((float *)a2 + 47) != 1.0)
            {
              *((_DWORD *)a2 + 46) |= 8u;
              *((_DWORD *)a2 + 47) = 1065353216;
            }
            (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
            *(_QWORD *)v27 = 0x1104000000000000;
            WebCore::GraphicsContext::setFillColor(a2, (const WebCore::Color *)v27);
            if ((*(_QWORD *)v27 & 0x8000000000000) != 0)
            {
              v20 = (unsigned int *)(*(_QWORD *)v27 & 0xFFFFFFFFFFFFLL);
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
              {
                atomic_store(1u, v20);
                WTF::fastFree((WTF *)v20, v15);
              }
            }
            v26[0] = WebCore::snappedIntRect((WebCore *)&v28, (const WebCore::LayoutRect *)v15);
            v26[1] = v16;
            WebCore::FloatRect::FloatRect(v27, (int *)v26);
            (*(void (**)(WebCore::GraphicsContext *, float *, float))(*(_QWORD *)a2 + 144))(a2, v27, 1.0);
            return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Page::pageCountAssumingLayoutIsUpToDate(WebCore::Page *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v4;
  WebCore::RenderView *v5;
  int v6;

  if (!*((_BYTE *)this + 468))
    return 0;
  v2 = *((_QWORD *)this + 20);
  if (!v2 || *(_BYTE *)(v2 + 144) != 0)
    return 0;
  v4 = *(_QWORD *)(v2 + 296);
  if (!v4)
    return 0;
  v5 = *(WebCore::RenderView **)(v4 + 1944);
  if (!v5)
    return 0;
  ++*((_DWORD *)v5 + 4);
  result = WebCore::RenderView::pageCount(v5);
  v6 = *((_DWORD *)v5 + 4);
  if (v6)
  {
    *((_DWORD *)v5 + 4) = v6 - 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

float32x2_t WebCore::FloatRect::intersect(float32x2_t *this, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  int8x8_t v6;
  unsigned int v7;
  int8x8_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t result;

  v2 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, *this), (int8x8_t)*a2, (int8x8_t)*this);
  v3 = vadd_f32(*this, this[1]);
  v4 = vadd_f32(*a2, a2[1]);
  v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v4), (int8x8_t)v4, (int8x8_t)v3);
  v6 = vmvn_s8((int8x8_t)vcge_f32(v2, v5));
  if ((v6.i8[0] & v6.i8[4] & 1) != 0)
    v7 = -1;
  else
    v7 = 0;
  v8 = (int8x8_t)vdup_n_s32(v7);
  v9 = (float32x2_t)vand_s8((int8x8_t)v5, v8);
  v10 = (float32x2_t)vand_s8((int8x8_t)v2, v8);
  *this = v10;
  result = vsub_f32(v9, v10);
  this[1] = result;
  return result;
}

uint64_t PAL::DataDetectorsCoreLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  return qword_1ECE7E278;
}

uint64_t WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator(uint64_t a1, WebCore *a2, const WebCore::CSSSelector *a3)
{
  uint64_t v6;
  WTF *v7;
  pthread_key_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  WTF *v13;
  int v14;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 16;
  *(_BYTE *)(a1 + 160) = 0;
  v6 = a1 + 160;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x8000000080000000;
  v7 = (WTF *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_DWORD *)(a1 + 352) = 128;
  v8 = (pthread_key_t *)JSC::threadSpecificAssemblerData((JSC *)a1);
  v10 = (uint64_t)pthread_getspecific(*v8);
  if (!v10)
  {
    v10 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v10, v8);
  }
  v11 = *(_QWORD *)v10;
  if (*(_QWORD *)v10 != v10 + 8)
  {
    v12 = *(_DWORD *)(v10 + 136);
    if (*(_DWORD *)(a1 + 352) < v12)
    {
      v13 = *(WTF **)(a1 + 216);
      if (v13 && v13 != v7)
      {
        WTF::fastFree(v13, v9);
        v11 = *(_QWORD *)v10;
        v12 = *(_DWORD *)(v10 + 136);
      }
      *(_QWORD *)(a1 + 216) = v11;
      *(_DWORD *)(a1 + 352) = v12;
      *(_QWORD *)v10 = v10 + 8;
      *(_DWORD *)(v10 + 136) = 128;
    }
  }
  *(_DWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 372) = 1;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 424) = v6;
  *(_BYTE *)(a1 + 432) = 16;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 0x10000;
  *(_QWORD *)(a1 + 456) = v6;
  *(_BYTE *)(a1 + 464) = 17;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 0x20000;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 512) = a1 + 528;
  *(_QWORD *)(a1 + 520) = 16;
  *(_QWORD *)(a1 + 544) = a1 + 560;
  *(_QWORD *)(a1 + 552) = 16;
  *(_QWORD *)(a1 + 576) = a1 + 592;
  *(_QWORD *)(a1 + 584) = 1;
  *(_QWORD *)(a1 + 600) = v6;
  *(_DWORD *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 612) = 0;
  *(_QWORD *)(a1 + 616) = a1 + 632;
  *(_QWORD *)(a1 + 624) = 32;
  *(_DWORD *)(a1 + 1144) = (_DWORD)a3;
  *(_DWORD *)(a1 + 1148) = 0;
  *(_QWORD *)(a1 + 1152) = a1 + 1168;
  *(_QWORD *)(a1 + 1160) = 4;
  *(_QWORD *)(a1 + 3152) = -1;
  *(_DWORD *)(a1 + 3160) = 0;
  *(_BYTE *)(a1 + 3164) = 1;
  *(_QWORD *)(a1 + 3168) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 3176) = 0;
  *(_QWORD *)(a1 + 3184) = a1 + 3200;
  *(_QWORD *)(a1 + 3192) = 16;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_QWORD *)(a1 + 3280) = a1 + 3296;
  *(_QWORD *)(a1 + 3288) = 32;
  *(_QWORD *)(a1 + 6880) = -1;
  WebCore::SelectorCompiler::constructFragments(a2, a3, a1 + 1152, 0, 0, (_DWORD)a3 != 1);
  *(_DWORD *)(a1 + 1148) = v14;
  if ((v14 & 0xFFFFFFFE) != 2)
    WebCore::SelectorCompiler::computeBacktrackingInformation((WebCore::SelectorCompiler *)(a1 + 1152), 0);
  return a1;
}

WTF *WebCore::SelectorCompiler::computeBacktrackingInformation(WebCore::SelectorCompiler *this, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  _BOOL4 v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  BOOL v28;
  int v29;
  unint64_t v33;
  int v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  uint64_t v43;
  WebCore::SelectorCompiler *v44;
  uint64_t v45;
  WTF *result;
  WebCore::SelectorCompiler::SelectorFragmentList *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int *v59;
  _QWORD *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned __int8 *v70;
  uint64_t v71;
  BOOL v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  WebCore::SelectorCompiler::SelectorFragmentList *v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  WebCore::SelectorCompiler *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  BOOL v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  BOOL v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  uint64_t v138;
  WebCore::SelectorCompiler *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  WebCore::SelectorCompiler *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int started;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF *v170;
  WTF *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  WTF *v185;
  WTF *v186;
  WTF *v187;
  WTF *v188;
  WTF *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  _DWORD *v202;
  unsigned int v203;
  _DWORD *v204;
  _DWORD *v205;
  _DWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  WTF *v211;
  uint64_t v212;
  _BYTE v213[512];
  WTF *v214;
  uint64_t v215;
  _BYTE v216[512];
  __int128 v217;

  v2 = (WTF *)v216;
  v214 = (WTF *)v216;
  v215 = 32;
  v211 = (WTF *)v213;
  v212 = 32;
  if (!*((_DWORD *)this + 3))
    goto LABEL_66;
  v3 = a2;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v206 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0xFFFFFFFFLL;
  a2 = 3;
  v14 = &dword_1ECE90000;
  v15 = &dword_1ECE90000;
  v16 = 1;
  v17 = 0xFFFFFFFFLL;
  do
  {
    v18 = *(_QWORD *)this;
    v19 = (_DWORD *)(*(_QWORD *)this + 496 * v5);
    v20 = v19[1];
    switch(v20)
    {
      case 1:
        v34 = v215;
        if ((_DWORD)v215)
        {
          if (HIDWORD(v215))
            HIDWORD(v215) = 0;
          v35 = v214;
          if (v2 != v214)
          {
            v192 = v17;
            v199 = v13;
            v182 = v9;
            v169 = v3;
            v170 = v2;
            if (v214 && (v214 = 0, LODWORD(v215) = 0, WTF::fastFree(v35, (void *)3), v214))
            {
              v34 = v215;
              v2 = v170;
            }
            else
            {
              v2 = v170;
              v214 = v170;
              v34 = 32;
              LODWORD(v215) = 32;
            }
            v3 = v169;
            v9 = v182;
            a2 = 3;
            v14 = &dword_1ECE90000;
            v15 = &dword_1ECE90000;
            v17 = v192;
            v13 = v199;
          }
        }
        BYTE8(v217) = 0;
        *(_QWORD *)&v217 = *(_QWORD *)(v18 + 496 * v5 + 56);
        if (HIDWORD(v215) == v34)
        {
          v186 = v2;
          v167 = v3;
          v168 = v9;
          v191 = v17;
          v198 = v13;
          WTF::Vector<WebCore::SelectorCompiler::TagNamePattern,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::TagNamePattern&>((uint64_t)&v214, (unint64_t)&v217);
          v17 = v191;
          v13 = v198;
          v15 = &dword_1ECE90000;
          v14 = &dword_1ECE90000;
          a2 = 3;
          v9 = v168;
          v2 = v186;
          v3 = v167;
        }
        else
        {
          *((_OWORD *)v214 + HIDWORD(v215)) = v217;
          ++HIDWORD(v215);
        }
        v10 = 0;
        v8 = 0;
        v11 = 0;
        *(_DWORD *)(v18 + 496 * v5 + 40) = 0;
        v12 = 1;
        v21 = 1;
        goto LABEL_6;
      case 2:
        if (!v12)
        {
          v10 = 0;
          v21 = 0;
          goto LABEL_6;
        }
        BYTE8(v217) = 0;
        *(_QWORD *)&v217 = *(_QWORD *)(v18 + 496 * v5 + 56);
        v196 = v13;
        if (HIDWORD(v215) == (_DWORD)v215)
        {
          v205 = v8;
          v188 = v2;
          v172 = v3;
          v173 = v9;
          v179 = v11;
          v194 = v17;
          WTF::Vector<WebCore::SelectorCompiler::TagNamePattern,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::TagNamePattern&>((uint64_t)&v214, (unint64_t)&v217);
          v8 = v205;
          v17 = v194;
          v11 = v179;
          v15 = &dword_1ECE90000;
          v14 = &dword_1ECE90000;
          a2 = 3;
          v9 = v173;
          v2 = v188;
          v3 = v172;
          v54 = HIDWORD(v215);
        }
        else
        {
          *((_OWORD *)v214 + HIDWORD(v215)) = v217;
          v54 = ++HIDWORD(v215);
        }
        v55 = v54;
        v56 = v54 - 1;
        v57 = v56;
        if (v8)
        {
          v100 = v8[8];
          if (v55 < v100)
          {
            __break(0xC471u);
            JUMPOUT(0x19413C87CLL);
          }
          v57 = v55 - v100;
        }
        v203 = v56;
        if (!(_QWORD)v217)
          goto LABEL_112;
        if (!(_DWORD)v55)
        {
          __break(0xC471u);
          JUMPOUT(0x19413C9E0);
        }
        *((_BYTE *)v214 + 16 * v55 - 8) = 1;
        if (v55 <= v57)
        {
          __break(0xC471u);
          JUMPOUT(0x19413C89CLL);
        }
        if (v57)
        {
          v101 = v17;
          v102 = (_QWORD *)*((_QWORD *)v14 + 171);
          v103 = v57;
          v104 = v55 - 1;
          v105 = *((_QWORD *)v15 + 358);
          while (1)
          {
            v106 = 0;
            v107 = v103;
            v66 = v103-- > 1;
            if (v66)
              v108 = v107;
            else
              v108 = 1;
            v109 = -v108;
            v110 = v55 - v107;
            while (1)
            {
              if (v104 + (int)v106 >= v55)
              {
                __break(0xC471u);
                JUMPOUT(0x19413C9E8);
              }
              if ((int)v103 + (int)v106 >= v55)
              {
                __break(0xC471u);
                JUMPOUT(0x19413C9F0);
              }
              v111 = (unsigned __int8 *)v214 + 16 * (v104 + v106);
              v112 = *((_QWORD *)v214 + 2 * (v103 + v106));
              if (*(_QWORD *)v111)
                v113 = v112 == 0;
              else
                v113 = 1;
              if (v113)
                goto LABEL_189;
              v114 = *(_QWORD **)(*(_QWORD *)v111 + 8);
              if (v114 == v102)
                goto LABEL_189;
              v115 = *(_QWORD **)(v112 + 8);
              if (v115 == v102)
                goto LABEL_189;
              v116 = v11;
              v117 = v9;
              v118 = v111[8];
              v119 = v114[3];
              if (v119 == v105 || (v120 = v115[3], v120 == v105))
              {
                v133 = v114[4];
                v9 = v117;
                v11 = v116;
                if (v133 != v105)
                {
                  v134 = v115[4];
                  if (v134 != v105 && (v118 != 0) == (v133 == v134))
                    break;
                }
                goto LABEL_189;
              }
              v121 = v114[5];
              if (v121 != v115[5])
              {
                v9 = v117;
                v11 = v116;
                if (!v118)
                  break;
                goto LABEL_189;
              }
              v122 = v119 == v121 && v120 == v121;
              v123 = !v122 || v118 == 0;
              v9 = v117;
              v11 = v116;
              if (!v123)
                break;
LABEL_189:
              if (v109 == --v106)
                goto LABEL_200;
            }
            if (!(_DWORD)v103)
            {
              v110 = v55;
LABEL_200:
              a2 = 3;
              v15 = &dword_1ECE90000;
              v17 = v101;
              goto LABEL_201;
            }
          }
        }
        v110 = v55;
LABEL_201:
        *(_DWORD *)(v18 + 496 * v5 + 36) = v110;
        v14 = &dword_1ECE90000;
LABEL_112:
        if (!(_DWORD)v55)
        {
          __break(0xC471u);
          JUMPOUT(0x19413C9F8);
        }
        *((_BYTE *)v214 + 16 * v55 - 8) = 0;
        if (v55 <= v57)
        {
          __break(0xC471u);
          JUMPOUT(0x19413C85CLL);
        }
        v58 = v17;
        if (!v57)
        {
          v69 = v55;
          goto LABEL_144;
        }
        v59 = v14;
        v60 = (_QWORD *)*((_QWORD *)v14 + 171);
        v61 = v57;
        v62 = v55 - 1;
        v63 = *((_QWORD *)v15 + 358);
        break;
      case 3:
        if (!v10)
          goto LABEL_4;
        v9 = (v9 + 1);
        goto LABEL_101;
      case 4:
        v9 = 0;
LABEL_101:
        v10 = 1;
        goto LABEL_4;
      default:
LABEL_4:
        v21 = v12 != 0;
        if (v12)
        {
          if (v8)
          {
            *(_QWORD *)(v18 + 496 * v5 + 32) = *((_QWORD *)v8 + 4);
            v124 = v8[10];
          }
          else
          {
            v124 = 0;
            v125 = HIDWORD(v215);
            v126 = v18 + 496 * v5;
            *(_DWORD *)(v126 + 32) = HIDWORD(v215);
            *(_DWORD *)(v126 + 36) = v125;
          }
          *(_DWORD *)(v18 + 496 * v5 + 40) = v124;
          v12 = 1;
        }
        if (v10)
        {
          v202 = v8;
          if (v20 == 4)
          {
            v52 = v212;
            if ((_DWORD)v212)
            {
              if (HIDWORD(v212))
                HIDWORD(v212) = 0;
              if (v213 != (_BYTE *)v211)
              {
                v195 = v17;
                v201 = v13;
                v180 = v11;
                v184 = v9;
                v189 = v2;
                v176 = v3;
                if (v211 && (v211 = 0, LODWORD(v212) = 0, WTF::fastFree(0, (void *)3), v211))
                {
                  v52 = v212;
                  v2 = v189;
                }
                else
                {
                  v2 = v189;
                  v211 = (WTF *)v213;
                  v52 = 32;
                  LODWORD(v212) = 32;
                }
                v3 = v176;
                v11 = v180;
                v9 = v184;
                a2 = 3;
                v14 = &dword_1ECE90000;
                v15 = &dword_1ECE90000;
                v17 = v195;
                v13 = v201;
              }
            }
            BYTE8(v217) = 0;
            *(_QWORD *)&v217 = *(_QWORD *)(v18 + 496 * v5 + 56);
            if (HIDWORD(v212) == v52)
            {
              v187 = v2;
              v175 = v3;
              v178 = v11;
              v183 = v9;
              v193 = v17;
              v200 = v13;
              WTF::Vector<WebCore::SelectorCompiler::TagNamePattern,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::TagNamePattern&>((uint64_t)&v211, (unint64_t)&v217);
              v17 = v193;
              v13 = v200;
              v11 = v178;
              v9 = v183;
              v15 = &dword_1ECE90000;
              v14 = &dword_1ECE90000;
              a2 = 3;
              v2 = v187;
              v3 = v175;
            }
            else
            {
              *((_OWORD *)v211 + HIDWORD(v212)) = v217;
              ++HIDWORD(v212);
            }
            v8 = v202;
            v206 = 0;
            *(_DWORD *)(v18 + 496 * v5 + 52) = 0;
            v10 = 1;
          }
          else
          {
            v190 = v17;
            v197 = v13;
            v177 = v11;
            v181 = v9;
            v185 = v2;
            v174 = v3;
            if (v20 == 3)
            {
              BYTE8(v217) = 0;
              *(_QWORD *)&v217 = *(_QWORD *)(v18 + 496 * v5 + 56);
              if (HIDWORD(v212) == (_DWORD)v212)
              {
                WTF::Vector<WebCore::SelectorCompiler::TagNamePattern,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::TagNamePattern&>((uint64_t)&v211, (unint64_t)&v217);
                v163 = HIDWORD(v212);
              }
              else
              {
                *((_OWORD *)v211 + HIDWORD(v212)) = v217;
                v163 = ++HIDWORD(v212);
              }
              if (v206)
              {
                v164 = v206[11];
                v210 = v163 - v164;
                if (v163 < v164)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19413C9C4);
                }
              }
              else
              {
                v210 = v163 - 1;
              }
              if ((_QWORD)v217)
              {
                if (!v163)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19413CA30);
                }
                *((_BYTE *)v211 + 16 * v163 - 8) = 1;
                *(_DWORD *)(v18 + 496 * v5 + 48) = WebCore::SelectorCompiler::computeBacktrackingStartOffsetInChain((uint64_t)v211, v163, v210);
                v163 = HIDWORD(v212);
              }
              if (!v163)
              {
                __break(0xC471u);
                JUMPOUT(0x19413CA38);
              }
              *((_BYTE *)v211 + 16 * v163 - 8) = 0;
              started = WebCore::SelectorCompiler::computeBacktrackingStartOffsetInChain((uint64_t)v211, v163, v210);
              v166 = v18 + 496 * v5;
              *(_DWORD *)(v166 + 44) = started;
              *(_DWORD *)(v166 + 52) = HIDWORD(v212) - 1;
              v10 = 1;
              v206 = v19;
            }
            else
            {
              v10 = 1;
            }
            v2 = v185;
            v3 = v174;
            v11 = v177;
            v9 = v181;
            a2 = 3;
            v14 = &dword_1ECE90000;
            v15 = &dword_1ECE90000;
            v17 = v190;
            v13 = v197;
            v8 = v202;
          }
        }
        goto LABEL_6;
    }
    do
    {
      v64 = 0;
      v65 = v61;
      v66 = v61-- > 1;
      if (v66)
        v67 = v65;
      else
        v67 = 1;
      v68 = -v67;
      v69 = v55 - v65;
      while (1)
      {
        if (v62 + (int)v64 >= v55)
        {
          __break(0xC471u);
          JUMPOUT(0x19413CA00);
        }
        if ((int)v61 + (int)v64 >= v55)
        {
          __break(0xC471u);
          JUMPOUT(0x19413CA08);
        }
        v70 = (unsigned __int8 *)v214 + 16 * (v62 + v64);
        v71 = *((_QWORD *)v214 + 2 * (v61 + v64));
        if (*(_QWORD *)v70)
          v72 = v71 == 0;
        else
          v72 = 1;
        if (v72)
          goto LABEL_132;
        v73 = *(_QWORD **)(*(_QWORD *)v70 + 8);
        if (v73 == v60)
          goto LABEL_132;
        v74 = *(_QWORD **)(v71 + 8);
        if (v74 == v60)
          goto LABEL_132;
        v75 = v11;
        v76 = v70[8];
        v77 = v73[3];
        if (v77 != v63)
        {
          v78 = v74[3];
          if (v78 != v63)
            break;
        }
        v131 = v73[4];
        v11 = v75;
        if (v131 != v63)
        {
          v132 = v74[4];
          if (v132 != v63 && (v76 != 0) == (v131 == v132))
            goto LABEL_141;
        }
LABEL_132:
        if (v68 == --v64)
          goto LABEL_143;
      }
      v79 = v73[5];
      if (v79 != v74[5])
      {
        v11 = v75;
        if (!v76)
          continue;
        goto LABEL_132;
      }
      v81 = v77 != v79 || v78 != v79 || v76 == 0;
      v11 = v75;
      if (v81)
        goto LABEL_132;
LABEL_141:
      ;
    }
    while ((_DWORD)v61);
    v69 = v55;
LABEL_143:
    a2 = 3;
    v14 = v59;
LABEL_144:
    v10 = 0;
    v11 = (v11 + 1);
    v82 = v18 + 496 * v5;
    *(_DWORD *)(v82 + 32) = v69;
    v13 = v196;
    *(_DWORD *)(v82 + 40) = v203;
    v12 = 1;
    v8 = v19;
    v21 = 1;
    v15 = &dword_1ECE90000;
    v17 = v58;
LABEL_6:
    v22 = *(_DWORD *)(v18 + 496 * v5 + 4);
    switch(v22)
    {
      case 2:
        if (v21)
        {
          v83 = v8;
          v84 = v17;
          v85 = *(_DWORD *)(v18 + 496 * v5 + 36);
          v86 = v19[10];
          if (v86 + 1 == v85)
            v87 = 3;
          else
            v87 = 5;
          if (v86 == v85)
            v87 = 1;
          if (v85 == -1)
            v88 = 0;
          else
            v88 = v87;
          v89 = v18 + 496 * v5;
          *(_DWORD *)(v89 + 20) = v88;
          v90 = *(_DWORD *)(v89 + 32);
          if (v90 == -1)
          {
            v92 = 0;
          }
          else
          {
            if (v86 + 1 == v90)
              v91 = 3;
            else
              v91 = 5;
            if (v86 == v90)
              v92 = 1;
            else
              v92 = v91;
          }
          *(_DWORD *)(v18 + 496 * v5 + 24) = v92;
          v17 = v84;
          v8 = v83;
        }
        break;
      case 3:
        if (v19[10] + 1 == v19[8])
          v50 = 3;
        else
          v50 = 5;
        if (v21)
          v51 = v50;
        else
          v51 = 0;
        *(_DWORD *)(v18 + 496 * v5 + 16) = v51;
        if (v10)
        {
          v204 = v8;
          v151 = v11;
          v152 = v13;
          v153 = v14;
          v154 = *(_DWORD *)(v18 + 496 * v5 + 48);
          v155 = v19[13];
          if (v155 + 1 == v154)
            v156 = 4;
          else
            v156 = 6;
          if (v155 == v154)
            v157 = 2;
          else
            v157 = v156;
          if (v154 == -1)
            v158 = 0;
          else
            v158 = v157;
          v159 = v18 + 496 * v5;
          *(_DWORD *)(v159 + 20) = v158;
          v160 = *(_DWORD *)(v159 + 44);
          if (v160 == -1)
          {
            v162 = 0;
          }
          else
          {
            if (v155 + 1 == v160)
              v161 = 4;
            else
              v161 = 6;
            if (v155 == v160)
              v162 = 2;
            else
              v162 = v161;
          }
          *(_DWORD *)(v18 + 496 * v5 + 24) = v162;
          a2 = 3;
          v14 = v153;
          v13 = v152;
          v11 = v151;
          v17 = v17;
          v8 = v204;
        }
        else if (v21)
        {
          *(int32x2_t *)(v18 + 496 * v5 + 20) = vdup_n_s32(v50);
        }
        break;
      case 4:
        if (v19[10] + 1 == v19[8])
          v53 = 3;
        else
          v53 = 5;
        if (!v21)
          v53 = 0;
        *(_DWORD *)(v18 + 496 * v5 + 16) = v53;
        break;
    }
    v23 = v19[5];
    v24 = v19[6];
    v26 = v23 == 6 || v24 == 6;
    v28 = v23 == 5 || v24 == 5 || *(_DWORD *)(v18 + 496 * v5 + 16) == 5;
    v6 |= v26;
    v7 |= v28;
    v29 = *v19;
    if (v22 != 1 || v29 == 1)
    {
      if (v22 == 4 && v29 == 3)
      {
        *(_BYTE *)(v18 + 496 * v5 + 28) |= 2u;
      }
      else
      {
        if (v22 == 2 && v29 != 1)
        {
          if ((_DWORD)v11 == 1)
            v13 = v5;
          else
            v13 = v13;
          goto LABEL_36;
        }
        if (v22 != 3 || v29 != 3)
          goto LABEL_36;
        if ((_DWORD)v9 == 1)
          v17 = v5;
        else
          v17 = v17;
      }
    }
    else
    {
      *(_BYTE *)(v18 + 496 * v5 + 28) |= 1u;
LABEL_36:
      if (v29 != 3)
      {
        if ((v6 & 1) != 0)
        {
          *(_BYTE *)(v18 + 496 * v5 + 28) |= 0x10u;
          LODWORD(v147) = *((_DWORD *)this + 3);
          if (v147 <= v17)
          {
            __break(0xC471u);
            JUMPOUT(0x19413CA20);
          }
          v148 = *(_QWORD *)this;
          *(_BYTE *)(*(_QWORD *)this + 496 * v17 + 28) |= 8u;
          if (v5 >= v17)
          {
            v149 = v17;
            if (v17 <= v147)
              v147 = v147;
            else
              v147 = v17;
            v150 = (_BYTE *)(v148 + 496 * v17 + 28);
            do
            {
              if (v147 == v149)
              {
                __break(0xC471u);
                JUMPOUT(0x19413CA28);
              }
              *v150 |= 0x80u;
              ++v149;
              v150 += 496;
            }
            while (v16 != v149);
          }
        }
        if (v29 == 1)
        {
          if ((v7 & 1) == 0)
            goto LABEL_40;
          *(_BYTE *)(v18 + 496 * v5 + 28) |= 0x20u;
          LODWORD(v127) = *((_DWORD *)this + 3);
          if (v127 <= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x19413CA10);
          }
          v128 = *(_QWORD *)this;
          *(_BYTE *)(*(_QWORD *)this + 496 * v13 + 28) |= 4u;
          if (v5 >= v13)
          {
            v129 = v13;
            if (v13 <= v127)
              v127 = v127;
            else
              v127 = v13;
            v130 = (_BYTE *)(v128 + 496 * v13 + 28);
            do
            {
              if (v127 == v129)
              {
                __break(0xC471u);
                JUMPOUT(0x19413CA18);
              }
              v6 = 0;
              v7 = 0;
              ++v129;
              *v130 |= 0x40u;
              v130 += 496;
              v17 = 0xFFFFFFFFLL;
              v13 = 0xFFFFFFFFLL;
            }
            while (v16 != v129);
          }
          else
          {
LABEL_40:
            v6 = 0;
            v7 = 0;
            v17 = 0xFFFFFFFFLL;
            v13 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          v6 = 0;
          v17 = 0xFFFFFFFFLL;
        }
      }
    }
    ++v5;
    v33 = *((unsigned int *)this + 3);
    ++v16;
  }
  while (v5 < v33);
  if ((_DWORD)v33)
  {
    v36 = *(_QWORD *)this;
    v37 = *(_QWORD *)this + 496 * v33;
    do
    {
      v38 = *(unsigned int *)(v36 + 428);
      if ((_DWORD)v38)
      {
        v49 = (WebCore::SelectorCompiler::SelectorFragmentList *)(v3 + 1);
        v44 = *(WebCore::SelectorCompiler **)(v36 + 416);
        v45 = 2016 * v38;
        do
        {
          v42 = v2;
          v43 = v3;
          WebCore::SelectorCompiler::computeBacktrackingInformation(v44, v49, v15);
          v3 = v43;
          v2 = v42;
          v44 = (WebCore::SelectorCompiler *)((char *)v44 + 2016);
          v45 -= 2016;
        }
        while (v45);
      }
      v39 = *(unsigned int *)(v36 + 460);
      if ((_DWORD)v39)
      {
        v93 = (WebCore::SelectorCompiler::SelectorFragmentList *)(v3 + 1);
        v94 = *(_QWORD *)(v36 + 448);
        v207 = v94 + 32 * v39;
        do
        {
          v95 = v3;
          v96 = v2;
          v97 = *(unsigned int *)(v94 + 12);
          if ((_DWORD)v97)
          {
            v98 = *(WebCore::SelectorCompiler **)v94;
            v99 = 2016 * v97;
            do
            {
              WebCore::SelectorCompiler::computeBacktrackingInformation(v98, v93, v15);
              v98 = (WebCore::SelectorCompiler *)((char *)v98 + 2016);
              v99 -= 2016;
            }
            while (v99);
          }
          v94 += 32;
          v2 = v96;
          v3 = v95;
        }
        while (v94 != v207);
      }
      v40 = *(_DWORD *)(v36 + 364);
      if (v40)
      {
        v135 = *(_QWORD *)(v36 + 352);
        v208 = v135 + 40 * v40;
        do
        {
          v136 = v3;
          v137 = v2;
          v138 = *(unsigned int *)(v135 + 20);
          if ((_DWORD)v138)
          {
            v139 = *(WebCore::SelectorCompiler **)(v135 + 8);
            v140 = 2016 * v138;
            do
            {
              WebCore::SelectorCompiler::computeBacktrackingInformation(v139, (WebCore::SelectorCompiler::SelectorFragmentList *)(v136 + 1), v15);
              v139 = (WebCore::SelectorCompiler *)((char *)v139 + 2016);
              v140 -= 2016;
            }
            while (v140);
          }
          v135 += 40;
          v2 = v137;
          v3 = v136;
        }
        while (v135 != v208);
      }
      v41 = *(_DWORD *)(v36 + 412);
      if (v41)
      {
        v141 = *(_QWORD *)(v36 + 400);
        v209 = v141 + 40 * v41;
        do
        {
          v142 = v3;
          v143 = v2;
          v144 = *(unsigned int *)(v141 + 20);
          if ((_DWORD)v144)
          {
            v145 = *(WebCore::SelectorCompiler **)(v141 + 8);
            v146 = 2016 * v144;
            do
            {
              WebCore::SelectorCompiler::computeBacktrackingInformation(v145, (WebCore::SelectorCompiler::SelectorFragmentList *)(v142 + 1), v15);
              v145 = (WebCore::SelectorCompiler *)((char *)v145 + 2016);
              v146 -= 2016;
            }
            while (v146);
          }
          v141 += 40;
          v2 = v143;
          v3 = v142;
        }
        while (v141 != v209);
      }
      v36 += 496;
    }
    while (v36 != v37);
  }
LABEL_66:
  if (v213 != (_BYTE *)v211 && v211 != 0)
  {
    v211 = 0;
    LODWORD(v212) = 0;
    v171 = v2;
    WTF::fastFree(0, (void *)a2);
    v2 = v171;
  }
  result = v214;
  if (v2 != v214 && v214 != 0)
  {
    v214 = 0;
    LODWORD(v215) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

void WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator(WebCore::SelectorCompiler::SelectorCodeGenerator *this, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  WTF *v9;
  WTF *v11;
  WTF *v14;
  uint64_t v15;
  WebCore::SelectorCompiler::SelectorFragment *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v20;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  unsigned int **v38;
  unsigned int **v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int **v44;
  unsigned int **v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;

  v3 = *((_QWORD *)this + 408);
  v4 = *((_QWORD *)this + 409);
  v5 = (WTF *)*((_QWORD *)this + 410);
  if (v3 > v4)
  {
    WTF::VectorTypeOperations<WebCore::SelectorCompiler::BacktrackingLevel>::destruct(*((WTF **)this + 410), (WTF *)((char *)v5 + 112 * v4));
    WTF::VectorTypeOperations<WebCore::SelectorCompiler::BacktrackingLevel>::destruct((WTF *)(*((_QWORD *)this + 410) + 112 * *((_QWORD *)this + 408)), (WTF *)(*((_QWORD *)this + 410) + 112 * *((unsigned int *)this + 822)));
  }
  else
  {
    if (v3 == v4)
      goto LABEL_16;
    v6 = 112 * v3;
    v7 = 112 * v4;
    do
    {
      v8 = (char *)v5 + v6;
      v9 = *(WTF **)((char *)v5 + v6 + 72);
      if ((WTF *)((char *)v5 + v6 + 88) != v9 && v9 != 0)
      {
        *((_QWORD *)v8 + 9) = 0;
        *((_DWORD *)v8 + 20) = 0;
        WTF::fastFree(v9, a2);
      }
      v11 = (WTF *)*((_QWORD *)v8 + 3);
      if (v8 + 40 != (char *)v11 && v11 != 0)
      {
        *((_QWORD *)v8 + 3) = 0;
        *(_DWORD *)((char *)v5 + v6 + 32) = 0;
        WTF::fastFree(v11, a2);
      }
      v7 -= 112;
      v5 = (WTF *)((char *)v5 + 112);
    }
    while (v6 != v7);
  }
  v5 = (WTF *)*((_QWORD *)this + 410);
LABEL_16:
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 3296) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 410) = 0;
    *((_DWORD *)this + 822) = 0;
    WTF::fastFree(v5, a2);
  }
  v14 = (WTF *)*((_QWORD *)this + 398);
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 3200) != v14 && v14)
  {
    *((_QWORD *)this + 398) = 0;
    *((_DWORD *)this + 798) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *((unsigned int *)this + 291);
  v16 = (WebCore::SelectorCompiler::SelectorFragment *)*((_QWORD *)this + 144);
  if ((_DWORD)v15)
  {
    v17 = 496 * v15;
    do
    {
      WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v16, a2);
      v16 = (WebCore::SelectorCompiler::SelectorFragment *)(v18 + 496);
      v17 -= 496;
    }
    while (v17);
    v16 = (WebCore::SelectorCompiler::SelectorFragment *)*((_QWORD *)this + 144);
  }
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 1168) != v16 && v16 != 0)
  {
    *((_QWORD *)this + 144) = 0;
    *((_DWORD *)this + 290) = 0;
    WTF::fastFree(v16, a2);
  }
  v20 = (WTF *)*((_QWORD *)this + 77);
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 632) != v20 && v20 != 0)
  {
    *((_QWORD *)this + 77) = 0;
    *((_DWORD *)this + 156) = 0;
    WTF::fastFree(v20, a2);
  }
  if (*((_DWORD *)this + 152))
  {
    __break(0xC471u);
    JUMPOUT(0x19413CCACLL);
  }
  if (*((_BYTE *)this + 612))
  {
    __break(0xC471u);
    JUMPOUT(0x19413CCCCLL);
  }
  if (*((_DWORD *)this + 147))
  {
    __break(0xC471u);
    JUMPOUT(0x19413CCECLL);
  }
  v22 = (WTF *)*((_QWORD *)this + 72);
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 592) != v22 && v22)
  {
    *((_QWORD *)this + 72) = 0;
    *((_DWORD *)this + 146) = 0;
    WTF::fastFree(v22, a2);
  }
  v23 = (WTF *)*((_QWORD *)this + 68);
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 560) != v23 && v23)
  {
    *((_QWORD *)this + 68) = 0;
    *((_DWORD *)this + 138) = 0;
    WTF::fastFree(v23, a2);
  }
  v24 = (WTF *)*((_QWORD *)this + 64);
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 528) != v24 && v24)
  {
    *((_QWORD *)this + 64) = 0;
    *((_DWORD *)this + 130) = 0;
    WTF::fastFree(v24, a2);
  }
  v25 = *((unsigned int *)this + 105);
  if ((_DWORD)v25)
  {
    v38 = (unsigned int **)*((_QWORD *)this + 51);
    v39 = &v38[v25];
    do
    {
      v40 = *v38;
      *v38 = 0;
      if (v40)
      {
        v41 = v40 + 2;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v40 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
        }
      }
      ++v38;
    }
    while (v38 != v39);
  }
  v26 = (WTF *)*((_QWORD *)this + 51);
  if (v26)
  {
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 104) = 0;
    WTF::fastFree(v26, a2);
  }
  v27 = *((unsigned int *)this + 101);
  if ((_DWORD)v27)
  {
    v44 = (unsigned int **)*((_QWORD *)this + 49);
    v45 = &v44[v27];
    do
    {
      v46 = *v44;
      *v44 = 0;
      if (v46)
      {
        v47 = v46 + 2;
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, v46 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
        }
      }
      ++v44;
    }
    while (v44 != v45);
  }
  v28 = (WTF *)*((_QWORD *)this + 49);
  if (v28)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v28, a2);
  }
  v29 = *((unsigned int *)this + 97);
  if ((_DWORD)v29)
  {
    v30 = 16 * v29;
    v31 = (WTF::StringImpl **)(*((_QWORD *)this + 47) + 8);
    do
    {
      v32 = *v31;
      *v31 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v32 -= 2;
      }
      v31 += 2;
      v30 -= 16;
    }
    while (v30);
  }
  v33 = (WTF *)*((_QWORD *)this + 47);
  if (v33)
  {
    *((_QWORD *)this + 47) = 0;
    *((_DWORD *)this + 96) = 0;
    WTF::fastFree(v33, a2);
  }
  JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::~AssemblerDataImpl((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 216));
  v35 = (WTF *)*((_QWORD *)this + 24);
  if (v35)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v35, v34);
  }
  v36 = (WTF *)*((_QWORD *)this + 10);
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 96) != v36 && v36)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v36, v34);
  }
  v37 = *(WTF **)this;
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 16) != *(WebCore::SelectorCompiler::SelectorCodeGenerator **)this)
  {
    if (v37)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v37, v34);
    }
  }
}

void WebCore::SelectorCompiler::constructFragments(WebCore *a1, const WebCore::CSSSelector *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  _BOOL4 v24;
  _BOOL8 v25;
  char v26;
  uint64_t v27;
  WebCore::SelectorCompiler::SelectorFragment *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v34;
  int v36;
  WTF *v37[2];
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  char *v46;
  _OWORD v47[5];
  _OWORD *v48;
  uint64_t v49;
  _OWORD v50[2];
  _OWORD *v51;
  uint64_t v52;
  _OWORD v53[4];
  _OWORD *v54;
  uint64_t v55;
  _OWORD v56[2];
  _OWORD *v57;
  uint64_t v58;
  _OWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  if (!a1)
  {
    *(_DWORD *)(a3 + 2008) = WebCore::selectorSpecificity(0, a2);
    return;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = a5 != 2;
  v34 = (_DWORD)a2 != 1;
  v12 = a1;
  v36 = a5;
  while (1)
  {
    if (!v8)
    {
      v64 = 0u;
      v61 = 1;
      memset(v59, 0, sizeof(v59));
      memset(v56, 0, sizeof(v56));
      memset(v53, 0, sizeof(v53));
      memset(v50, 0, sizeof(v50));
      memset(v47, 0, sizeof(v47));
      v45 = 0;
      v38 = 0u;
      v40 = 0;
      *(_OWORD *)v37 = 0u;
      v39 = -1;
      v41 = -1;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v46 = (char *)v47 + 8;
      LODWORD(v47[0]) = 8;
      v48 = v50;
      v49 = 4;
      v51 = v53;
      v52 = 4;
      v54 = v56;
      v55 = 2;
      v57 = v59;
      v58 = 2;
      v60 = -1;
      v62 = 0u;
      v63 = 0u;
      *(_QWORD *)&v64 = 0;
      BYTE8(v64) = 1;
      v13 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
      {
        v15 = WTF::Vector<WebCore::SelectorCompiler::SelectorFragment,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v13 + 1, (unint64_t)v37);
        v14 = *(_QWORD *)a3 + 496 * *(unsigned int *)(a3 + 12);
      }
      else
      {
        v14 = *(_QWORD *)a3 + 496 * v13;
        v15 = (uint64_t)v37;
      }
      WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v14, v15);
      ++*(_DWORD *)(a3 + 12);
      WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment((WebCore::SelectorCompiler::SelectorFragment *)v37, v16);
      v17 = *(_DWORD *)(a3 + 12);
      if (!v17)
      {
        __break(0xC471u);
        return;
      }
      v8 = *(_QWORD *)a3 + 496 * v17 - 496;
      a5 = v36;
    }
    v18 = *(unsigned int *)v12;
    if (((v18 >> 4) & 0x1F) <= 0x11)
      __asm { BR              X10 }
    v19 = v9;
    v20 = *(_DWORD *)v12 & 0xF;
    if ((*(_DWORD *)v12 & 0xF) == 0)
    {
      v20 = v10;
      v25 = v11;
      goto LABEL_26;
    }
    v21 = v20 - 5;
    if ((v20 - 5) <= 1)
      break;
    if ((_DWORD)v20 == 7)
      goto LABEL_35;
    v22 = v34;
    if ((int)v9 > v34)
      v22 = v9;
    v23 = __CFADD__(v21, 2);
    v24 = v21 < 0xFFFFFFFE;
    if (v23)
      v19 = v22;
    else
      v19 = v9;
    a6 &= v24;
LABEL_19:
    if ((_DWORD)v20 != 2)
    {
      if ((_DWORD)v20 == 3 || (_DWORD)v20 == 4)
      {
        v25 = v11;
        goto LABEL_24;
      }
      v20 = 1;
    }
    v25 = 0;
LABEL_24:
    *(_DWORD *)v8 = v20;
    *(_DWORD *)(v8 + 4) = v10;
    *(_DWORD *)(v8 + 8) = a5;
    *(_BYTE *)(v8 + 12) = v11;
    if (a4)
    {
      *(_BYTE *)(v8 + 488) = 0;
      v9 = v19;
      v8 = 0;
      goto LABEL_27;
    }
    v8 = 0;
LABEL_26:
    v9 = v19;
LABEL_27:
    v26 = *((_BYTE *)v12 + 2);
    v12 = (WebCore *)((char *)v12 + 16);
    v11 = v25;
    v10 = v20;
    if ((v26 & 8) != 0)
    {
      *(_DWORD *)(a3 + 2008) = WebCore::selectorSpecificity(a1, a2);
      return;
    }
  }
  if ((*(_DWORD *)v12 & 0x80000) != 0)
    goto LABEL_19;
LABEL_35:
  if (*(_DWORD *)(a3 + 8))
  {
    v27 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v27)
    {
      v28 = *(WebCore::SelectorCompiler::SelectorFragment **)a3;
      v29 = 496 * v27;
      do
      {
        WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v28, a2);
        v28 = (WebCore::SelectorCompiler::SelectorFragment *)(v30 + 496);
        v29 -= 496;
      }
      while (v29);
      *(_DWORD *)(a3 + 12) = 0;
    }
    v31 = *(WTF **)a3;
    if (a3 + 16 != *(_QWORD *)a3 && v31 != 0)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      WTF::fastFree(v31, a2);
      v31 = *(WTF **)a3;
    }
    if (!v31)
    {
      *(_QWORD *)a3 = a3 + 16;
      *(_DWORD *)(a3 + 8) = 4;
    }
  }
}

void WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(WebCore::SelectorCompiler::SelectorFragment *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  WTF *v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  WebCore::SelectorCompiler::SelectorFragment *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v27;
  unsigned int v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  WebCore::SelectorCompiler::SelectorFragment *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v36;
  uint64_t v37;
  WebCore::SelectorCompiler::SelectorFragment *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WebCore::SelectorCompiler::SelectorFragment *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  WTF *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WebCore::SelectorCompiler::SelectorFragment *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;

  v3 = *((unsigned int *)this + 119);
  v4 = (WTF *)*((_QWORD *)this + 58);
  if ((_DWORD)v3)
  {
    v36 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v37 = *((unsigned int *)v4 + 3);
      v38 = *(WebCore::SelectorCompiler::SelectorFragment **)v4;
      if ((_DWORD)v37)
      {
        v39 = 496 * v37;
        do
        {
          WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v38);
          v38 = (WebCore::SelectorCompiler::SelectorFragment *)(v40 + 496);
          v39 -= 496;
        }
        while (v39);
        v38 = *(WebCore::SelectorCompiler::SelectorFragment **)v4;
      }
      if (v38)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v38, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v36);
    v4 = (WTF *)*((_QWORD *)this + 58);
    if (!v4)
      goto LABEL_3;
    goto LABEL_67;
  }
  if (v4)
  {
LABEL_67:
    *((_QWORD *)this + 58) = 0;
    *((_DWORD *)this + 118) = 0;
    WTF::fastFree(v4, a2);
  }
LABEL_3:
  v5 = *((unsigned int *)this + 115);
  v6 = (WTF *)*((_QWORD *)this + 56);
  if (!(_DWORD)v5)
  {
    if (v6)
      goto LABEL_57;
    goto LABEL_5;
  }
  v27 = (WTF *)((char *)v6 + 32 * v5);
  do
  {
    v28 = *((_DWORD *)v6 + 3);
    v29 = *(WTF **)v6;
    if (!v28)
    {
      if (!v29)
        goto LABEL_41;
LABEL_55:
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v6 + 2) = 0;
      WTF::fastFree(v29, a2);
      goto LABEL_41;
    }
    v30 = (WTF *)((char *)v29 + 2016 * v28);
    do
    {
      v31 = *((unsigned int *)v29 + 3);
      v32 = *(WebCore::SelectorCompiler::SelectorFragment **)v29;
      if ((_DWORD)v31)
      {
        v33 = 496 * v31;
        do
        {
          WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v32);
          v32 = (WebCore::SelectorCompiler::SelectorFragment *)(v34 + 496);
          v33 -= 496;
        }
        while (v33);
        v32 = *(WebCore::SelectorCompiler::SelectorFragment **)v29;
      }
      if ((WTF *)((char *)v29 + 16) != v32 && v32 != 0)
      {
        *(_QWORD *)v29 = 0;
        *((_DWORD *)v29 + 2) = 0;
        WTF::fastFree(v32, a2);
      }
      v29 = (WTF *)((char *)v29 + 2016);
    }
    while (v29 != v30);
    v29 = *(WTF **)v6;
    if (*(_QWORD *)v6)
      goto LABEL_55;
LABEL_41:
    v6 = (WTF *)((char *)v6 + 32);
  }
  while (v6 != v27);
  v6 = (WTF *)*((_QWORD *)this + 56);
  if (v6)
  {
LABEL_57:
    *((_QWORD *)this + 56) = 0;
    *((_DWORD *)this + 114) = 0;
    WTF::fastFree(v6, a2);
  }
LABEL_5:
  v7 = *((_DWORD *)this + 107);
  v8 = (WTF *)*((_QWORD *)this + 52);
  if (v7)
  {
    v21 = (WTF *)((char *)v8 + 2016 * v7);
    do
    {
      v22 = *((unsigned int *)v8 + 3);
      v23 = *(WebCore::SelectorCompiler::SelectorFragment **)v8;
      if ((_DWORD)v22)
      {
        v24 = 496 * v22;
        do
        {
          WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v23);
          v23 = (WebCore::SelectorCompiler::SelectorFragment *)(v25 + 496);
          v24 -= 496;
        }
        while (v24);
        v23 = *(WebCore::SelectorCompiler::SelectorFragment **)v8;
      }
      if ((WTF *)((char *)v8 + 16) != v23 && v23 != 0)
      {
        *(_QWORD *)v8 = 0;
        *((_DWORD *)v8 + 2) = 0;
        WTF::fastFree(v23, a2);
      }
      v8 = (WTF *)((char *)v8 + 2016);
    }
    while (v8 != v21);
    v8 = (WTF *)*((_QWORD *)this + 52);
    if (v8)
      goto LABEL_37;
  }
  else
  {
    if (!v8)
      goto LABEL_7;
LABEL_37:
    *((_QWORD *)this + 52) = 0;
    *((_DWORD *)this + 106) = 0;
    WTF::fastFree(v8, a2);
  }
LABEL_7:
  v9 = *((_DWORD *)this + 103);
  v10 = *((_QWORD *)this + 50);
  if (!v9)
  {
    if (v10)
      goto LABEL_113;
    goto LABEL_9;
  }
  v41 = v10 + 40 * v9;
  while (2)
  {
    v42 = *(_DWORD *)(v10 + 20);
    v43 = *(WTF **)(v10 + 8);
    if (v42)
    {
      v44 = v10;
      v45 = (WTF *)((char *)v43 + 2016 * v42);
      do
      {
        v46 = *((unsigned int *)v43 + 3);
        v47 = *(WebCore::SelectorCompiler::SelectorFragment **)v43;
        if ((_DWORD)v46)
        {
          v48 = 496 * v46;
          do
          {
            WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v47);
            v47 = (WebCore::SelectorCompiler::SelectorFragment *)(v49 + 496);
            v48 -= 496;
          }
          while (v48);
          v47 = *(WebCore::SelectorCompiler::SelectorFragment **)v43;
        }
        if ((WTF *)((char *)v43 + 16) != v47 && v47 != 0)
        {
          *(_QWORD *)v43 = 0;
          *((_DWORD *)v43 + 2) = 0;
          WTF::fastFree(v47, a2);
        }
        v43 = (WTF *)((char *)v43 + 2016);
      }
      while (v43 != v45);
      v10 = v44;
      v43 = *(WTF **)(v44 + 8);
      if (v43)
        goto LABEL_89;
    }
    else
    {
      if (!v43)
        goto LABEL_75;
LABEL_89:
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 16) = 0;
      v51 = v10;
      WTF::fastFree(v43, a2);
      v10 = v51;
    }
LABEL_75:
    v10 += 40;
    if (v10 != v41)
      continue;
    break;
  }
  v10 = *((_QWORD *)this + 50);
  if (v10)
  {
LABEL_113:
    *((_QWORD *)this + 50) = 0;
    *((_DWORD *)this + 102) = 0;
    WTF::fastFree((WTF *)v10, a2);
  }
LABEL_9:
  v11 = (WTF *)*((_QWORD *)this + 46);
  if ((WebCore::SelectorCompiler::SelectorFragment *)((char *)this + 384) != v11 && v11)
  {
    *((_QWORD *)this + 46) = 0;
    *((_DWORD *)this + 94) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((_DWORD *)this + 91);
  v13 = *((_QWORD *)this + 44);
  if (!v12)
  {
    if (v13)
      goto LABEL_115;
    goto LABEL_12;
  }
  v52 = v13 + 40 * v12;
  while (2)
  {
    v53 = *(_DWORD *)(v13 + 20);
    v54 = *(WTF **)(v13 + 8);
    if (v53)
    {
      v55 = v13;
      v56 = (WTF *)((char *)v54 + 2016 * v53);
      do
      {
        v57 = *((unsigned int *)v54 + 3);
        v58 = *(WebCore::SelectorCompiler::SelectorFragment **)v54;
        if ((_DWORD)v57)
        {
          v59 = 496 * v57;
          do
          {
            WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v58);
            v58 = (WebCore::SelectorCompiler::SelectorFragment *)(v60 + 496);
            v59 -= 496;
          }
          while (v59);
          v58 = *(WebCore::SelectorCompiler::SelectorFragment **)v54;
        }
        if ((WTF *)((char *)v54 + 16) != v58 && v58 != 0)
        {
          *(_QWORD *)v54 = 0;
          *((_DWORD *)v54 + 2) = 0;
          WTF::fastFree(v58, a2);
        }
        v54 = (WTF *)((char *)v54 + 2016);
      }
      while (v54 != v56);
      v13 = v55;
      v54 = *(WTF **)(v55 + 8);
      if (v54)
        goto LABEL_109;
    }
    else
    {
      if (!v54)
        goto LABEL_95;
LABEL_109:
      *(_QWORD *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 16) = 0;
      v62 = v13;
      WTF::fastFree(v54, a2);
      v13 = v62;
    }
LABEL_95:
    v13 += 40;
    if (v13 != v52)
      continue;
    break;
  }
  v13 = *((_QWORD *)this + 44);
  if (v13)
  {
LABEL_115:
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree((WTF *)v13, a2);
  }
LABEL_12:
  v14 = (WTF *)*((_QWORD *)this + 40);
  if ((WebCore::SelectorCompiler::SelectorFragment *)((char *)this + 336) != v14 && v14)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (WTF *)*((_QWORD *)this + 30);
  if ((WebCore::SelectorCompiler::SelectorFragment *)((char *)this + 256) != v15 && v15)
  {
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = (WTF *)*((_QWORD *)this + 24);
  if ((WebCore::SelectorCompiler::SelectorFragment *)((char *)this + 208) != v16 && v16)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = *((_QWORD *)this + 23);
  if (v17)
    WTF::fastFree((WTF *)(v17 - 16), a2);
  v18 = (WTF *)*((_QWORD *)this + 13);
  if ((WebCore::SelectorCompiler::SelectorFragment *)((char *)this + 120) != v18 && v18)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = (WTF *)*((_QWORD *)this + 11);
  if (v19)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v19, a2);
  }
  v20 = (WTF *)*((_QWORD *)this + 9);
  if (v20)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v20, a2);
  }
}

uint64_t WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  int v23;
  const void *v24;
  int v25;
  uint64_t v26;
  const void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  int v41;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a1 + 80) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_DWORD *)(a1 + 84) = v7;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 96) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_DWORD *)(a1 + 100) = v8;
  v9 = (void *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = 8;
  v10 = *(const void **)(a2 + 104);
  if (v10 == (const void *)(a2 + 120))
  {
    memcpy(v9, v10, 8 * *(unsigned int *)(a2 + 116));
  }
  else
  {
    *(_QWORD *)(a2 + 104) = a2 + 120;
    *(_QWORD *)(a1 + 104) = v10;
    v36 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 8;
    *(_DWORD *)(a1 + 112) = v36;
  }
  v11 = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 116) = v11;
  *(_QWORD *)(a1 + 184) = 0;
  v12 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  v13 = (_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = v12;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 4;
  v14 = *(uint64_t **)(a2 + 192);
  if (v14 == (uint64_t *)(a2 + 208))
  {
    v16 = *(unsigned int *)(a2 + 204);
    if ((_DWORD)v16)
    {
      v17 = 8 * v16;
      do
      {
        v18 = *v14++;
        *v13++ = v18;
        v17 -= 8;
      }
      while (v17);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 192) = a2 + 208;
    *(_QWORD *)(a1 + 192) = v14;
    v15 = *(_DWORD *)(a2 + 200);
    *(_DWORD *)(a2 + 200) = 4;
    *(_DWORD *)(a1 + 200) = v15;
  }
  v19 = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(_DWORD *)(a1 + 204) = v19;
  v20 = (_OWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 240) = a1 + 256;
  *(_QWORD *)(a1 + 248) = 4;
  v21 = *(__int128 **)(a2 + 240);
  if (v21 == (__int128 *)(a2 + 256))
  {
    v22 = *(unsigned int *)(a2 + 252);
    if ((_DWORD)v22)
    {
      v38 = 16 * v22;
      do
      {
        v39 = *v21++;
        *v20++ = v39;
        v38 -= 16;
      }
      while (v38);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 240) = a2 + 256;
    *(_QWORD *)(a1 + 240) = v21;
    v37 = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a2 + 248) = 4;
    *(_DWORD *)(a1 + 248) = v37;
  }
  v23 = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a2 + 252) = 0;
  *(_DWORD *)(a1 + 252) = v23;
  *(_QWORD *)(a1 + 320) = a1 + 336;
  *(_QWORD *)(a1 + 328) = 2;
  v24 = *(const void **)(a2 + 320);
  if (v24 == (const void *)(a2 + 336))
  {
    memcpy((void *)(a1 + 336), v24, 8 * *(unsigned int *)(a2 + 332));
  }
  else
  {
    *(_QWORD *)(a2 + 320) = a2 + 336;
    *(_QWORD *)(a1 + 320) = v24;
    v40 = *(_DWORD *)(a2 + 328);
    *(_DWORD *)(a2 + 328) = 2;
    *(_DWORD *)(a1 + 328) = v40;
  }
  v25 = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a2 + 332) = 0;
  *(_DWORD *)(a1 + 332) = v25;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  v26 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a1 + 352) = v26;
  LODWORD(v26) = *(_DWORD *)(a2 + 360);
  *(_DWORD *)(a2 + 360) = 0;
  *(_DWORD *)(a1 + 360) = v26;
  LODWORD(v26) = *(_DWORD *)(a2 + 364);
  *(_DWORD *)(a2 + 364) = 0;
  *(_DWORD *)(a1 + 364) = v26;
  *(_QWORD *)(a1 + 368) = a1 + 384;
  *(_QWORD *)(a1 + 376) = 2;
  v27 = *(const void **)(a2 + 368);
  if (v27 == (const void *)(a2 + 384))
  {
    memcpy((void *)(a1 + 384), v27, 8 * *(unsigned int *)(a2 + 380));
  }
  else
  {
    *(_QWORD *)(a2 + 368) = a2 + 384;
    *(_QWORD *)(a1 + 368) = v27;
    v41 = *(_DWORD *)(a2 + 376);
    *(_DWORD *)(a2 + 376) = 2;
    *(_DWORD *)(a1 + 376) = v41;
  }
  v28 = *(_DWORD *)(a2 + 380);
  *(_DWORD *)(a2 + 380) = 0;
  *(_DWORD *)(a1 + 380) = v28;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v29 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  *(_QWORD *)(a1 + 400) = v29;
  LODWORD(v29) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a2 + 408) = 0;
  *(_DWORD *)(a1 + 408) = v29;
  LODWORD(v29) = *(_DWORD *)(a2 + 412);
  *(_DWORD *)(a2 + 412) = 0;
  *(_DWORD *)(a1 + 412) = v29;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  v30 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a1 + 416) = v30;
  LODWORD(v30) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a2 + 424) = 0;
  *(_DWORD *)(a1 + 424) = v30;
  LODWORD(v30) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a2 + 428) = 0;
  *(_DWORD *)(a1 + 428) = v30;
  v31 = *(_QWORD *)(a2 + 432);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = v31;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  v32 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a1 + 448) = v32;
  LODWORD(v32) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a2 + 456) = 0;
  *(_DWORD *)(a1 + 456) = v32;
  LODWORD(v32) = *(_DWORD *)(a2 + 460);
  *(_DWORD *)(a2 + 460) = 0;
  *(_DWORD *)(a1 + 460) = v32;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  v33 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  *(_QWORD *)(a1 + 464) = v33;
  LODWORD(v33) = *(_DWORD *)(a2 + 472);
  *(_DWORD *)(a2 + 472) = 0;
  *(_DWORD *)(a1 + 472) = v33;
  LODWORD(v33) = *(_DWORD *)(a2 + 476);
  *(_DWORD *)(a2 + 476) = 0;
  *(_DWORD *)(a1 + 476) = v33;
  v34 = *(_QWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = v34;
  return a1;
}

uint64_t WebCore::selectorSpecificity(WebCore *this, const WebCore::CSSSelector *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v6;

  LODWORD(v3) = 0;
  do
  {
    v4 = *(unsigned int *)this;
    if ((v4 & 0x1000000) == 0 && ((v4 >> 4) & 0x1F) <= 0x11)
      __asm { BR              X10 }
    v5 = v3;
    if ((v3 & 0xFF0000) >> 24)
      v5 = v3 | 0xFF0000;
    v3 = v5;
    v6 = *((_BYTE *)this + 2);
    this = (WebCore *)((char *)this + 16);
  }
  while ((v6 & 8) == 0);
  return v3;
}

uint64_t WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::HTMLDocument *this, const WebCore::QualifiedName *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v12;
  WTF::StringImpl *v13;
  WebCore::HTMLDocument *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;

  {
    v14 = this;
    WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::$_0::operator()(&v15);
    WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set = v15;
    v12 = v17;
    WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set = v16;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set = v12;
    v18 = 0;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)&v15, v13);
    this = v14;
  }
  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)(*(_QWORD *)this + 16) && !*(_QWORD *)(v2 + 32))
  {
    if (WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set)
    {
      v3 = WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set - 1;
      v4 = *(_QWORD *)(v2 + 24);
      v5 = *(_DWORD *)(v4 + 16);
      v6 = (WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set ^ (v5 >> 8)) & (WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set - 1);
      v7 = *(_QWORD *)(WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set + 8 * v6);
      if (v7)
      {
        v8 = v5 >> 8;
        v9 = -1;
        do
        {
          v10 = *(_DWORD *)(v7 + 16);
          if (++v9 > ((v6
                      + WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set
                      - ((WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set ^ (v10 >> 8)) & v3)) & v3))
            break;
          if (v7 == v4 && v10 >> 8 == v8)
            return 0;
          v6 = (v6 + 1) & v3;
          v7 = *(_QWORD *)(WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set + 8 * v6);
        }
        while (v7);
      }
    }
  }
  return 1;
}

uint64_t WebCore::Page::sampledPageTopColor@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(_BYTE *)(this + 1712))
  {
    v2 = *(_QWORD *)(this + 1704);
    *a2 = v2;
    if ((v2 & 0x8000000000000) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::RenderFlexibleBox::computeMainAxisExtentForChild(WebCore::RenderFlexibleBox *this, WebCore::RenderBox *a2, int a3, unsigned __int8 *a4)
{
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  BOOL v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  WebCore::RenderBox *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  float32x2_t v85;
  uint64_t v86;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  v9 = (v8 >> 1) & 1;
  v10 = (v8 & 2) == 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v10 = v9;
  if (v10 == (*((_BYTE *)a2 + 21) & 0x10) >> 4)
  {
    v11 = WebCore::RenderFlexibleBox::cachedChildIntrinsicContentLogicalHeight(this, a2);
    v12 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing(a2, a3, (uint64_t)a4, v11 | 0x100000000);
    if ((v12 & 0xFF00000000) == 0)
    {
      v53 = 0;
      v68 = 0;
      return v68 | v53;
    }
    v13 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)a2 + 1272))(a2, v12);
    v14 = 1360;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
      v14 = 1352;
    v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + v14))(a2);
    v16 = v15 << 6;
    if (v15 < -33554432)
      v16 = 0x80000000;
    if (v15 > 0x1FFFFFF)
      v16 = 0x7FFFFFFF;
    v65 = __OFSUB__(v13, v16);
    v17 = v13 - v16;
    if (v65)
      v18 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v18 = v17;
    v19 = *((unsigned __int8 *)a2 + 46);
    if (v19 == 63 || v19 == 35)
    {
      ++*((_DWORD *)a2 + 4);
      if (WebCore::RenderFlexibleBox::childMainSizeIsDefinite(this, a2, (const WebCore::Length *)a4)
        && (v20 = *((unsigned int *)a2 + 61), (_DWORD)v20))
      {
        v21 = 0;
        v22 = (uint64_t *)*((_QWORD *)a2 + 29);
        v23 = 8 * v20;
        do
        {
          v24 = *v22;
          if (*v22)
            v25 = *(_DWORD **)(v24 + 8);
          else
            v25 = 0;
          v26 = ((v25[31] >> 13) & 6u) - 2 >= 4;
          v27 = v25 + 40;
          v28 = v25 + 41;
          if (v26)
            v27 = v28;
          v29 = *(_QWORD *)(v24 + 8);
          v30 = (unsigned __int16)*(_DWORD *)(v29 + 124) >> 13;
          if ((v30 - 1) > 4)
            v31 = 0;
          else
            v31 = qword_1969FC978[v30 - 1];
          v32 = *v27;
          v33 = v29 + 168;
          v34 = *(_DWORD *)(v33 + 4 * v31);
          v65 = __OFADD__(v32, v34);
          v35 = v32 + v34;
          v36 = (v32 >> 31) + 0x7FFFFFFF;
          if (!v65)
            v36 = v35;
          v37 = v30 - 1;
          if (v37 > 4)
            v38 = 2;
          else
            v38 = qword_1969FC9A0[v37];
          v39 = *(_DWORD *)(v33 + 4 * v38);
          v65 = __OFADD__(v36, v39);
          v40 = v36 + v39;
          if (v65)
            v40 = (v36 >> 31) + 0x7FFFFFFF;
          v65 = __OFADD__(v21, v40);
          v41 = v21 + v40;
          if (v65)
            v21 = (v21 >> 31) + 0x7FFFFFFF;
          else
            v21 = v41;
          ++v22;
          v23 -= 8;
        }
        while (v23);
      }
      else
      {
        v21 = 0;
      }
      v47 = *((_DWORD *)a2 + 4);
      if (!v47)
      {
        __break(0xC471u);
        JUMPOUT(0x19413F588);
      }
      *((_DWORD *)a2 + 4) = v47 - 1;
    }
    else
    {
      v21 = 0;
    }
    v48 = v18 & ~(v18 >> 31);
    v49 = 1360;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
      v49 = 1352;
    v50 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + v49))(a2);
    v51 = v50 << 6;
    if (v50 < -33554432)
      v51 = 0x80000000;
    if (v50 > 0x1FFFFFF)
      v51 = 0x7FFFFFFF;
    v65 = __OFADD__(v48, v51);
    v52 = v48 + v51;
    if (v65)
      v52 = 0x7FFFFFFF;
    v53 = v52 + v21;
    if (__OFADD__(v52, v21))
      v53 = (v52 >> 31) + 0x7FFFFFFF;
    goto LABEL_100;
  }
  v42 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
  v43 = v42 + 12;
  v44 = v42 + 4;
  if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
    v43 = v44;
  if (*(_BYTE *)(v43 + 4)
    || ((*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 288))(a2) & 1) != 0
    || ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 148) >> 5) & 3u) - 1 < 2)
  {
    goto LABEL_43;
  }
  v54 = *((unsigned __int8 *)a2 + 46);
  if (v54 == 103 || v54 == 83)
  {
    if ((*((_BYTE *)a2 + 52) & 7) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19413F5A8);
    }
    v86 = 0;
    v55 = (WebCore::RenderBox *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1672))(a2);
    WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox(a2, v55, &v85, (WebCore::FloatSize *)&v86);
    if (*(float *)&v86 / *((float *)&v86 + 1) > 0.0)
      goto LABEL_43;
  }
  v56 = a4[4];
  if (v56 != 7)
  {
    if (v56 == 8)
    {
      if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1520))(a2))
        WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a2, 1, 0);
      v79 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 416))(a2);
      v80 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth(a2);
      v65 = __OFSUB__(v79, v80);
      v66 = v79 - v80;
      v67 = (v79 >> 31) + 0x7FFFFFFF;
      goto LABEL_81;
    }
LABEL_43:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
      v45 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *, _QWORD))(*(_QWORD *)this + 1344))(this, 0);
    else
      v45 = WebCore::RenderBox::contentLogicalWidth(this);
    v46 = v45;
    v81 = 0;
    v84 = 0;
    v82 = a4[4];
    v83 = a4[5];
    if (v82 - 2 >= 9)
    {
      if (v82 == 11)
      {
        v81 = *(_DWORD *)a4;
        WebCore::Length::ref((int *)&v81);
      }
    }
    else
    {
      v84 = a4[6];
      v81 = *(_DWORD *)a4;
    }
    v69 = WebCore::RenderBox::computeLogicalWidthInFragmentUsing((uint64_t)a2, a3, (WebCore::Length *)&v81, v46, (unsigned int *)this, 0);
    v70 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1064))(a2);
    v71 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1072))(a2);
    if (__OFADD__(v70, v71))
      v72 = (v70 >> 31) + 0x7FFFFFFF;
    else
      v72 = v70 + v71;
    v73 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 976))(a2);
    if (__OFADD__(v72, v73))
      v74 = (v72 >> 31) + 0x7FFFFFFF;
    else
      v74 = v72 + v73;
    v75 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 984))(a2);
    v76 = v74 + v75;
    if (__OFADD__(v74, v75))
      v76 = (v74 >> 31) + 0x7FFFFFFF;
    v65 = __OFSUB__(v69, v76);
    v77 = v69 - v76;
    if (v65)
      v53 = (v69 >> 31) + 0x7FFFFFFF;
    else
      v53 = v77;
    if (v82 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v81);
    }
LABEL_100:
    v68 = 0x100000000;
    return v68 | v53;
  }
  if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1520))(a2))
    WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a2, 1, 0);
  v57 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 408))(a2);
  v58 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1064))(a2);
  v59 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1072))(a2);
  if (__OFADD__(v58, v59))
    v60 = (v58 >> 31) + 0x7FFFFFFF;
  else
    v60 = v58 + v59;
  v61 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 976))(a2);
  if (__OFADD__(v60, v61))
    v62 = (v60 >> 31) + 0x7FFFFFFF;
  else
    v62 = v60 + v61;
  v63 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 984))(a2);
  v64 = v62 + v63;
  if (__OFADD__(v62, v63))
    v64 = (v62 >> 31) + 0x7FFFFFFF;
  v65 = __OFSUB__(v57, v64);
  v66 = v57 - v64;
  v67 = (v57 >> 31) + 0x7FFFFFFF;
LABEL_81:
  if (v65)
    v53 = v67;
  else
    v53 = v66;
  v68 = 0x100000000;
  return v68 | v53;
}

uint64_t WebCore::RenderBox::computePositionedLogicalWidthUsing(uint64_t a1, int a2, uint64_t (**a3)(), uint64_t *a4, int a5, int a6, int a7, unsigned __int8 *a8, WebCore::Length *a9, WebCore::Length *a10, unsigned __int8 *a11, int *a12)
{
  uint64_t *v14;
  uint64_t (**v15)();
  uint64_t v16;
  int v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int i;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  _BOOL4 v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  char v53;
  int v54;
  float v55;
  double v56;
  int v58;
  int *v59;
  int v60;
  float v61;
  double v62;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  _BOOL4 v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t *v72;
  float v73;
  double v74;
  unsigned int v76;
  float v77;
  double v78;
  int v79;
  int v80;
  int v81;
  unint64_t v82;
  uint64_t result;
  int v84;
  float v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  float v106;
  double v107;
  unsigned int v109;
  float v110;
  double v111;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  float v117;
  double v118;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  float v125;
  double v126;
  int v128;
  float v129;
  double v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  float v134;
  double v135;
  float v137;
  double v138;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  unsigned int v147;
  _BOOL4 v149;
  BOOL v150;
  float v151;
  float v152;
  uint64_t v153;
  int v154;
  int v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  int v163;
  float v164;
  float v165;
  float v167;
  float v168;
  float v170;
  float v171;
  float v172;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  double v181;
  int v183;
  float v184;
  double v185;
  int v186;
  int v187;
  float v188;
  double v189;
  BOOL v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  float v196;
  float v197;
  float v199;
  float v200;
  float v202;
  double v203;
  BOOL v204;
  int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  float v215;
  int v216;
  int *v217;
  float v218;
  double v219;
  float v221;
  float v222;
  float v223;
  float v225;
  double v226;
  float v228;
  double v229;
  float v231;
  float v232;
  float v234;
  unsigned int v235;
  int v236;
  unint64_t v237;
  int v238;
  int v239;
  int v240;
  double v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  int Fragment;
  int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  WebCore::RenderFragmentContainer *v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  int v270;
  int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _DWORD *v280;
  int *v281;
  int *v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  int *v288;
  unsigned int v293;
  char v294;
  unsigned int v295[2];
  uint64_t v296;
  uint64_t v297;
  uint64_t j;
  _BYTE v299[16];
  unsigned int v300;
  unint64_t v301[2];
  unsigned int v302;
  _DWORD v303[4];
  unsigned int v304;
  char v305;
  _QWORD v306[2];

  v14 = a4;
  v15 = a3;
  v16 = a1;
  v17 = *((unsigned __int8 *)a3 + 4);
  v18 = *((_BYTE *)a3 + 4);
  if (a2 == 1)
  {
    if (!*((_BYTE *)a3 + 4))
    {
      if (!WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio((WebCore::RenderBox *)a1))
      {
        if (*((_BYTE *)v15 + 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v15);
          v14 = a4;
          v16 = a1;
        }
        *((_WORD *)v15 + 2) = 4;
        *((_BYTE *)v15 + 6) = 0;
        *(_DWORD *)v15 = 0;
        goto LABEL_11;
      }
      v303[0] = 0;
      LODWORD(v301[0]) = 0;
      (*(void (**)(uint64_t, _DWORD *, unint64_t *))(*(_QWORD *)v16 + 1624))(v16, v303, v301);
      v234 = (float)v303[0];
      goto LABEL_545;
    }
  }
  else if (!a2)
  {
    v18 = *((_BYTE *)a3 + 4);
    if (!v18)
    {
      if (WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio((WebCore::RenderBox *)a1))
      {
        v234 = (float)(int)WebCore::RenderBox::computeLogicalWidthFromAspectRatio((WebCore::RenderBox *)v16, 0);
LABEL_545:
        *(float *)v295 = v234 * 0.015625;
        LOWORD(v295[1]) = 4;
        BYTE2(v295[1]) = 1;
        WebCore::Length::operator=((unsigned int *)v15, v295);
        if (LOBYTE(v295[1]) != 11)
        {
LABEL_546:
          v14 = a4;
          v16 = a1;
          goto LABEL_11;
        }
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v237 = v295[0];
LABEL_623:
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v237);
        goto LABEL_546;
      }
      v18 = *((_BYTE *)v15 + 4);
    }
  }
  if ((v18 - 7) <= 3u)
  {
    WebCore::Length::Length((WebCore::Length *)&v293, (const WebCore::Length *)v15);
    v235 = WebCore::RenderBox::computeIntrinsicLogicalWidthUsing(v16, (uint64_t)&v293, a6, a7);
    v236 = v235 - a7;
    if (__OFSUB__(v235, a7))
      v236 = (v235 >> 31) + 0x7FFFFFFF;
    *(float *)v295 = (float)v236 * 0.015625;
    LOWORD(v295[1]) = 4;
    BYTE2(v295[1]) = 1;
    WebCore::Length::operator=((unsigned int *)v15, v295);
    if (LOBYTE(v295[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v295[0]);
    }
    if (v294 != 11)
      goto LABEL_546;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v237 = v293;
    goto LABEL_623;
  }
LABEL_11:
  v19 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  v287 = v17;
  if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
    goto LABEL_28;
  ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalWidthMap + 8);
  v20 = *(_QWORD *)(v16 + 8);
  if (v20 && *(_QWORD *)(v20 + 8))
  {
    v21 = *v19;
    if (*v19)
    {
      v22 = *(_DWORD *)(v21 - 8);
      v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v26 = v22 & ((v25 >> 31) ^ v25);
      for (i = 1; ; ++i)
      {
        v28 = *(_QWORD *)(v21 + 16 * v26);
        if (!v28)
        {
          v30 = *(unsigned int *)(v21 - 4);
          v31 = v21 + 16 * v30;
          v32 = v31;
          goto LABEL_23;
        }
        v29 = v28 != -1 && v28 == v20;
        if (v29)
          break;
        v26 = (v26 + i) & v22;
      }
      v31 = v21 + 16 * v26;
      v30 = *(unsigned int *)(v21 - 4);
      v32 = v21 + 16 * v30;
LABEL_23:
      v296 = v31;
      v297 = v32;
      v33 = v21 + 16 * v30;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v296 = 0;
      v297 = 0;
    }
    for (j = v33; v31 != v33; v16 = a1)
    {
      if (*(_QWORD *)(*(_QWORD *)v31 + 8))
        break;
      v279 = v31 + 16;
      v296 = v279;
      v31 = v32;
      if (v279 != v32)
      {
        v31 = v279;
        while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
        {
          v31 += 16;
          v296 = v31;
          if (v31 == v32)
          {
            v31 = v32;
            break;
          }
        }
      }
      v14 = a4;
    }
  }
  else
  {
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)v295, v19);
    v21 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  }
  if (v21)
    v21 += 16 * *(unsigned int *)(v21 - 4);
  if (v296 == v21 || (v46 = *(_QWORD *)(v296 + 8), (v46 & 0xFF00000000) == 0))
  {
LABEL_28:
    if ((*((_BYTE *)v14 + 45) & 4) == 0)
    {
      if ((*((_BYTE *)v14 + 45) & 0x20) == 0)
      {
        LODWORD(v46) = 0;
LABEL_563:
        v16 = a1;
        goto LABEL_46;
      }
      v247 = WebCore::RenderInline::innerPaddingBoxWidth((WebCore::RenderInline *)a4, (WebCore::RenderObject *)v19);
LABEL_562:
      LODWORD(v46) = v247;
      goto LABEL_563;
    }
    v34 = *(_DWORD *)(v16 + 20);
    if ((v34 & 0x1800000) == 0x1000000)
    {
      v105 = v16;
      if ((*(_BYTE *)(v16 + 45) & 2) != 0)
        v105 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8);
      v35 = (*(_QWORD *)(v105 + 96) & 0x380000) == 3145728;
    }
    else
    {
      v35 = 0;
    }
    if ((v34 & 0x10000000) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 648))(v16))
    {
      if ((*((_BYTE *)v14 + 45) & 0x40) != 0)
      {
        ++*((_DWORD *)a4 + 4);
        if ((*((_BYTE *)a4 + 52) & 7) == 1 && (*((_BYTE *)a4 + 53) & 2) != 0)
        {
          Fragment = WebCore::RenderFragmentedFlow::contentLogicalWidthOfFirstFragment((WebCore::RenderFragmentedFlow *)a4, v250);
        }
        else
        {
          v261 = *(_QWORD *)(a1 + 32);
          if (!v261
            || (v262 = *(_QWORD *)(v261 + 8)) == 0
            || ((*(_DWORD *)(a1 + 124) ^ *(_DWORD *)(v262 + 124)) & 0xE000) != 0)
          {
            v263 = (*(uint64_t (**)(uint64_t *))(*a4 + 1288))(a4);
            v264 = (WebCore::RenderFragmentContainer *)WebCore::RenderBlock::fragmentAtBlockOffset(a4, v263);
            if (v264)
            {
              v265 = WebCore::RenderFragmentContainer::renderBoxFragmentInfo(v264, (const WebCore::RenderBox *)a4);
              if (v265)
              {
                v266 = v265;
                v267 = WebCore::RenderBox::clientLogicalWidth((WebCore::RenderBox *)a4);
                if (((*((_DWORD *)a4 + 31) >> 13) & 6u) - 2 < 4)
                  v268 = (unsigned int *)a4 + 41;
                else
                  v268 = (unsigned int *)(a4 + 20);
                v269 = *v268;
                v270 = *(_DWORD *)(v266 + 4);
                v44 = __OFSUB__(v269, v270);
                v271 = v269 - v270;
                if (v44)
                  v271 = (v269 >> 31) + 0x7FFFFFFF;
                v44 = __OFSUB__(v267, v271);
                v272 = v267 - v271;
                if (v44)
                  v272 = (v267 >> 31) + 0x7FFFFFFF;
                LODWORD(v46) = v272 & ~(v272 >> 31);
                goto LABEL_588;
              }
            }
          }
          Fragment = WebCore::RenderBox::clientLogicalWidth((WebCore::RenderBox *)a4);
        }
        LODWORD(v46) = Fragment;
LABEL_588:
        v252 = *((_DWORD *)a4 + 4);
        if (!v252)
        {
          __break(0xC471u);
          JUMPOUT(0x194141B6CLL);
        }
        *((_DWORD *)a4 + 4) = v252 - 1;
        goto LABEL_563;
      }
      v247 = WebCore::RenderBox::clientLogicalWidth((WebCore::RenderBox *)a4);
      goto LABEL_562;
    }
    if (v35 && *((_BYTE *)v14 + 46) == 49)
    {
      LODWORD(v46) = WebCore::RenderView::clientLogicalWidthForFixedPosition((WebCore::RenderView *)v14);
    }
    else
    {
      if ((*((_BYTE *)v14 + 45) & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19414101CLL);
      }
      v36 = *v14;
      if (((*((_DWORD *)v14 + 31) >> 13) & 6u) - 2 < 4)
      {
        v253 = *((_DWORD *)v14 + 41);
        v254 = (*(uint64_t (**)(uint64_t *))(v36 + 1000))(v14);
        v255 = v253 - v254;
        if (__OFSUB__(v253, v254))
          v255 = (v253 >> 31) + 0x7FFFFFFF;
        v256 = (*(uint64_t (**)(uint64_t *))(*a4 + 1008))(a4);
        v257 = v255 - v256;
        if (__OFSUB__(v255, v256))
          v257 = (v255 >> 31) + 0x7FFFFFFF;
        v258 = (*(uint64_t (**)(uint64_t *))(*a4 + 1360))(a4);
        v259 = v258 << 6;
        if (v258 < -33554432)
          v259 = 0x80000000;
        if (v258 > 0x1FFFFFF)
          v259 = 0x7FFFFFFF;
        v44 = __OFSUB__(v257, v259);
        v260 = v257 - v259;
        if (v44)
          v260 = (v257 >> 31) + 0x7FFFFFFF;
        LODWORD(v46) = v260 & ~(v260 >> 31);
        goto LABEL_563;
      }
      v37 = *((_DWORD *)v14 + 40);
      v38 = (*(uint64_t (**)(uint64_t *))(v36 + 1016))(v14);
      v39 = v37 - v38;
      if (__OFSUB__(v37, v38))
        v39 = (v37 >> 31) + 0x7FFFFFFF;
      v40 = (*(uint64_t (**)(uint64_t *))(*v14 + 1024))(v14);
      v41 = v39 - v40;
      if (__OFSUB__(v39, v40))
        v41 = (v39 >> 31) + 0x7FFFFFFF;
      v42 = (*(uint64_t (**)(uint64_t *))(*v14 + 1352))(v14);
      v43 = v42 << 6;
      if (v42 < -33554432)
        v43 = 0x80000000;
      if (v42 > 0x1FFFFFF)
        v43 = 0x7FFFFFFF;
      v44 = __OFSUB__(v41, v43);
      v45 = v41 - v43;
      if (v44)
        v45 = (v41 >> 31) + 0x7FFFFFFF;
      LODWORD(v46) = v45 & ~(v45 >> 31);
    }
  }
LABEL_46:
  v47 = *((unsigned __int8 *)v15 + 4);
  v285 = a5;
  if ((v47 - 7) < 4 || !*((_BYTE *)v15 + 4) || (v47 - 5) <= 1)
  {
    if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 32) + 148) >> 5) & 3u) - 1 > 1
      || *(unsigned __int8 *)(v16 + 46) - 36 < 5)
    {
      v48 = 0;
LABEL_49:
      v49 = !v48;
      goto LABEL_50;
    }
    v212 = v46;
    v213 = *(_QWORD *)(v16 + 32);
    if (!v213)
      goto LABEL_441;
    v214 = *(_QWORD *)(v213 + 8);
    if (!v214 || *(_BYTE *)(v214 + 46) != 12 || (*(_BYTE *)(a1 + 21) & 4) != 0)
      goto LABEL_441;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1616))(a1))
    {
      if (!WebCore::RenderBox::hasStretchedLogicalWidth((WebCore::RenderObject *)a1, 0)
        || (WebCore::RenderBox::hasStretchedLogicalHeight((WebCore::RenderBox *)a1) & 1) == 0)
      {
        goto LABEL_629;
      }
    }
    else if (!WebCore::RenderBox::hasStretchedLogicalWidth((WebCore::RenderObject *)a1, 1))
    {
LABEL_629:
      v273 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v274 = v273 + 12;
      else
        v274 = v273 + 4;
      if ((*(_BYTE *)(v274 + 4) & 0xF7) == 3)
      {
        v275 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v276 = ((*(_DWORD *)(v275 + 124) >> 13) & 6) - 2;
        v277 = *(_QWORD *)(*(_QWORD *)(v275 + 88) + 8);
        v278 = v276 < 4 ? v277 + 12 : v277 + 4;
        if (*(_BYTE *)(v278 + 4) == 4)
          goto LABEL_628;
      }
LABEL_441:
      v48 = (unint64_t)WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)a1) >> 32
         || WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets((WebCore *)a1, (const WebCore::RenderBox *)v19)
         || ((v248 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8), ((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
           ? (v249 = v248 + 4)
           : (v249 = v248 + 12),
             *(_BYTE *)(v249 + 4) == 4)
         || WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio(void)const::$_0::operator()(a1);
      goto LABEL_444;
    }
LABEL_628:
    v48 = 0;
LABEL_444:
    LODWORD(v46) = v212;
    goto LABEL_49;
  }
  v49 = 0;
LABEL_50:
  v50 = a8[4];
  v51 = *((unsigned __int8 *)a9 + 4);
  if ((*(_BYTE *)(a1 + 123) & 4) != 0)
  {
    v288 = a12 + 5;
    v52 = a12 + 4;
  }
  else
  {
    v288 = a12 + 4;
    v52 = a12 + 5;
  }
  if (a8[4])
    v53 = v49;
  else
    v53 = 1;
  if ((v53 & 1) == 0 && *((_BYTE *)a9 + 4))
  {
    if (v50 == 4)
    {
      v106 = *(float *)a8;
      if (!a8[6])
        v106 = (float)*(int *)a8;
LABEL_154:
      v107 = v106 * 64.0;
      if (v107 < 2147483650.0 && v107 > -2147483650.0)
        goto LABEL_158;
      if (v107 >= 2147483650.0)
      {
        v109 = 0x7FFFFFFF;
        goto LABEL_159;
      }
      if (v107 <= -2147483650.0)
        v109 = 0x80000000;
      else
LABEL_158:
        v109 = (int)v107;
LABEL_159:
      v70 = a1;
LABEL_160:
      v283 = v109;
      v280 = v52;
      if (*((_BYTE *)v15 + 4) != 4)
      {
        v113 = v46;
        v114 = 0;
        switch(*((_BYTE *)v15 + 4))
        {
          case 0:
          case 1:
          case 9:
            v114 = a6;
            goto LABEL_169;
          case 3:
            v167 = *(float *)v15;
            if (!*((_BYTE *)v15 + 6))
              v167 = (float)*(int *)v15;
            v168 = (float)((float)((float)a6 * 0.015625) * v167) / 100.0;
            goto LABEL_295;
          case 0xB:
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v15, (float)a6 * 0.015625);
LABEL_295:
            v111 = v168 * 64.0;
            if (v111 < 2147483650.0 && v111 > -2147483650.0)
              goto LABEL_168;
            goto LABEL_675;
          default:
            goto LABEL_169;
        }
      }
      v110 = *(float *)v15;
      if (!*((_BYTE *)v15 + 6))
        v110 = (float)*(int *)v15;
      v111 = v110 * 64.0;
      if (v111 >= 2147483650.0 || v111 <= -2147483650.0)
      {
        v113 = v46;
LABEL_675:
        if (v111 >= 2147483650.0)
        {
          v114 = 0x7FFFFFFF;
        }
        else if (v111 <= -2147483650.0)
        {
          v114 = 0x80000000;
        }
        else
        {
          v114 = (int)v111;
        }
        v70 = a1;
      }
      else
      {
        v113 = v46;
LABEL_168:
        v114 = (int)v111;
      }
LABEL_169:
      v115 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing((_QWORD *)v70, v114, v287);
      *a12 = v115;
      v116 = v109 + v115;
      if (__OFADD__(v109, v115))
        v116 = (v109 >> 31) + 0x7FFFFFFF;
      if (*((_BYTE *)a9 + 4) == 4)
      {
        v117 = *(float *)a9;
        if (!*((_BYTE *)a9 + 6))
          v117 = (float)*(int *)a9;
LABEL_174:
        v118 = v117 * 64.0;
        if (v118 >= 2147483650.0 || v118 <= -2147483650.0)
        {
          if (v118 >= 2147483650.0)
          {
            v120 = 0x7FFFFFFF;
          }
          else if (v118 <= -2147483650.0)
          {
            v120 = 0x80000000;
          }
          else
          {
            v120 = (int)v118;
          }
          v70 = a1;
        }
        else
        {
          v120 = (int)v118;
        }
      }
      else
      {
        v120 = 0;
        switch(*((_BYTE *)a9 + 4))
        {
          case 0:
          case 1:
          case 9:
            v120 = a6;
            break;
          case 3:
            v170 = *(float *)a9;
            if (!*((_BYTE *)a9 + 6))
              v170 = (float)*(int *)a9;
            v117 = (float)((float)((float)a6 * 0.015625) * v170) / 100.0;
            goto LABEL_174;
          case 0xB:
            WebCore::Length::nonNanCalculatedValue(a9, (float)a6 * 0.015625);
            goto LABEL_174;
          default:
            break;
        }
      }
      v44 = __OFADD__(v116, v120);
      v121 = v116 + v120;
      if (v44)
        v121 = (v116 >> 31) + 0x7FFFFFFF;
      v72 = a4;
      v122 = v121 + a7;
      if (__OFADD__(v121, a7))
        v122 = (v121 >> 31) + 0x7FFFFFFF;
      v123 = a6 - v122;
      if (__OFSUB__(a6, v122))
        v123 = (a6 >> 31) + 0x7FFFFFFF;
      v124 = a11[4];
      if (*((_BYTE *)a10 + 4) == 4)
      {
        v125 = *(float *)a10;
        if (!*((_BYTE *)a10 + 6))
          v125 = (float)*(int *)a10;
LABEL_188:
        v126 = v125 * 64.0;
        if (v126 >= 2147483650.0 || v126 <= -2147483650.0)
        {
          if (v126 >= 2147483650.0)
          {
            v128 = 0x7FFFFFFF;
          }
          else if (v126 <= -2147483650.0)
          {
            v128 = 0x80000000;
          }
          else
          {
            v128 = (int)v126;
          }
          v72 = a4;
          v70 = a1;
        }
        else
        {
          v128 = (int)v126;
        }
LABEL_193:
        v59 = v288;
        *v288 = v128;
        if (v124)
        {
          if (a11[4] != 4)
          {
            v131 = 0;
            v76 = v283;
            switch(a11[4])
            {
              case 0u:
              case 1u:
              case 9u:
                v131 = v113;
                goto LABEL_200;
              case 3u:
                v171 = *(float *)a11;
                if (!a11[6])
                  v171 = (float)*(int *)a11;
                v172 = (float)((float)((float)v113 * 0.015625) * v171) / 100.0;
                goto LABEL_309;
              case 0xBu:
                WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a11, (float)v113 * 0.015625);
LABEL_309:
                v130 = v172 * 64.0;
                if (v130 < 2147483650.0 && v130 > -2147483650.0)
                  goto LABEL_199;
                if (v130 >= 2147483650.0)
                  goto LABEL_705;
                goto LABEL_648;
              default:
                goto LABEL_200;
            }
          }
          v129 = *(float *)a11;
          if (!a11[6])
            v129 = (float)*(int *)a11;
          v130 = v129 * 64.0;
          v76 = v283;
          if (v130 >= 2147483650.0 || v130 <= -2147483650.0)
          {
            if (v130 >= 2147483650.0)
            {
LABEL_705:
              v131 = 0x7FFFFFFF;
            }
            else
            {
LABEL_648:
              if (v130 <= -2147483650.0)
                v131 = 0x80000000;
              else
                v131 = (int)v130;
            }
            v59 = v288;
            v72 = a4;
            v70 = a1;
            v76 = v283;
          }
          else
          {
LABEL_199:
            v131 = (int)v130;
          }
LABEL_200:
          *v280 = v131;
          if (((*((_BYTE *)v72 + 21) & 0x10) == 0) != (*(_BYTE *)(v70 + 21) & 0x10) >> 4 && v285)
          {
            v132 = v123 + v76;
            if (__OFADD__(v123, v76))
              v132 = (v123 >> 31) + 0x7FFFFFFF;
            v133 = v132 - *v288;
            if (__OFSUB__(v132, *v288))
              v133 = (v132 >> 31) + 0x7FFFFFFF;
            v76 = v133 - v131;
            if (__OFSUB__(v133, v131))
              v76 = (v133 >> 31) + 0x7FFFFFFF;
            v59 = v288;
            v72 = a4;
            v70 = a1;
          }
        }
        else
        {
          v44 = __OFSUB__(v123, v128);
          v238 = v123 - v128;
          if (v44)
            v238 = (v123 >> 31) + 0x7FFFFFFF;
          *v280 = v238;
          v59 = v288;
          v72 = a4;
          v70 = a1;
          v76 = v283;
        }
      }
      else
      {
        v128 = 0;
        switch(*((_BYTE *)a10 + 4))
        {
          case 0:
            if (a11[4])
            {
              v239 = WebCore::valueForLength(a11, v113);
              *v280 = v239;
              v240 = v123 - v239;
              if (__OFSUB__(v123, v239))
                v240 = (v123 >> 31) + 0x7FFFFFFF;
              v59 = v288;
              *v288 = v240;
            }
            else if ((v123 & 0x80000000) != 0)
            {
              v59 = v288;
              if ((v285 & 1) != 0)
              {
                *v288 = v123;
                *v280 = 0;
              }
              else
              {
                *v288 = 0;
                *v280 = v123;
              }
            }
            else
            {
              v59 = v288;
              *v288 = v123 >> 1;
              *v280 = v123 - (v123 >> 1);
            }
            v72 = a4;
            v70 = a1;
            v76 = v283;
            break;
          case 1:
          case 9:
            v128 = v113;
            goto LABEL_193;
          case 3:
            v174 = *(float *)a10;
            if (!*((_BYTE *)a10 + 6))
              v174 = (float)*(int *)a10;
            v125 = (float)((float)((float)v113 * 0.015625) * v174) / 100.0;
            goto LABEL_188;
          case 0xB:
            WebCore::Length::nonNanCalculatedValue(a10, (float)v113 * 0.015625);
            goto LABEL_188;
          default:
            goto LABEL_193;
        }
      }
      goto LABEL_109;
    }
    v109 = 0;
    if (a8[4] <= 8u)
    {
      if (v50 == 3)
      {
        v175 = *(float *)a8;
        if (!a8[6])
          v175 = (float)*(int *)a8;
        v106 = (float)((float)((float)a6 * 0.015625) * v175) / 100.0;
        goto LABEL_154;
      }
      v29 = v50 == 1;
      v70 = a1;
      if (!v29)
        goto LABEL_160;
LABEL_572:
      v109 = a6;
      goto LABEL_160;
    }
    v216 = v46;
    v217 = v52;
    if (v50 != 11)
    {
      v29 = v50 == 9;
      v70 = a1;
      if (!v29)
        goto LABEL_160;
      goto LABEL_572;
    }
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a8, (float)a6 * 0.015625);
    v219 = v218 * 64.0;
    if (v219 < 2147483650.0 && v219 > -2147483650.0)
      goto LABEL_457;
    if (v219 >= 2147483650.0)
    {
      v109 = 0x7FFFFFFF;
      goto LABEL_458;
    }
    if (v219 <= -2147483650.0)
      v109 = 0x80000000;
    else
LABEL_457:
      v109 = (int)v219;
LABEL_458:
    v70 = a1;
    v52 = v217;
    LODWORD(v46) = v216;
    goto LABEL_160;
  }
  v54 = *((unsigned __int8 *)a10 + 4);
  if (v54 == 4)
  {
    v55 = *(float *)a10;
    if (!*((_BYTE *)a10 + 6))
      v55 = (float)*(int *)a10;
LABEL_60:
    v56 = v55 * 64.0;
    if (v56 < 2147483650.0 && v56 > -2147483650.0)
      goto LABEL_64;
    if (v56 >= 2147483650.0)
    {
      v58 = 0x7FFFFFFF;
      goto LABEL_65;
    }
    if (v56 <= -2147483650.0)
      v58 = 0x80000000;
    else
LABEL_64:
      v58 = (int)v56;
LABEL_65:
    v59 = v288;
    goto LABEL_66;
  }
  if (v54 == 3)
  {
    v178 = *(float *)a10;
    if (!*((_BYTE *)a10 + 6))
      v178 = (float)*(int *)a10;
    v55 = (float)((float)((float)(int)v46 * 0.015625) * v178) / 100.0;
    goto LABEL_60;
  }
  if (v54 != 11)
  {
    v58 = 0;
    goto LABEL_65;
  }
  v281 = v52;
  v286 = v46;
  WebCore::Length::nonNanCalculatedValue(a10, (float)(int)v46 * 0.015625);
  v226 = v225 * 64.0;
  if (v226 < 2147483650.0 && v226 > -2147483650.0)
    goto LABEL_491;
  if (v226 >= 2147483650.0)
  {
    v58 = 0x7FFFFFFF;
    goto LABEL_492;
  }
  if (v226 <= -2147483650.0)
    v58 = 0x80000000;
  else
LABEL_491:
    v58 = (int)v226;
LABEL_492:
  v59 = v288;
  v52 = v281;
  LODWORD(v46) = v286;
LABEL_66:
  *v59 = v58;
  v60 = a11[4];
  if (v60 == 4)
  {
    v61 = *(float *)a11;
    if (!a11[6])
      v61 = (float)*(int *)a11;
  }
  else
  {
    if (v60 != 3)
    {
      if (v60 == 11)
      {
        v282 = v52;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a11, (float)(int)v46 * 0.015625);
        v229 = v228 * 64.0;
        if (v229 >= 2147483650.0 || v229 <= -2147483650.0)
        {
          if (v229 >= 2147483650.0)
          {
            v64 = 0x7FFFFFFF;
          }
          else if (v229 <= -2147483650.0)
          {
            v64 = 0x80000000;
          }
          else
          {
            v64 = (int)v229;
          }
          v59 = v288;
        }
        else
        {
          v64 = (int)v229;
        }
        v52 = v282;
      }
      else
      {
        v64 = 0;
      }
      goto LABEL_74;
    }
    v179 = *(float *)a11;
    if (!a11[6])
      v179 = (float)*(int *)a11;
    v61 = (float)((float)((float)(int)v46 * 0.015625) * v179) / 100.0;
  }
  v62 = v61 * 64.0;
  if (v62 >= 2147483650.0 || v62 <= -2147483650.0)
  {
    if (v62 >= 2147483650.0)
    {
      v64 = 0x7FFFFFFF;
      v59 = v288;
    }
    else
    {
      if (v62 <= -2147483650.0)
        v64 = 0x80000000;
      else
        v64 = (int)v62;
      v59 = v288;
    }
  }
  else
  {
    v64 = (int)v62;
  }
LABEL_74:
  *v52 = v64;
  v44 = __OFADD__(*v59, v64);
  v65 = *v59 + v64;
  if (v44)
    v65 = (*v59 >> 31) + 0x7FFFFFFF;
  v66 = v65 + a7;
  if (__OFADD__(v65, a7))
    v66 = (v65 >> 31) + 0x7FFFFFFF;
  v67 = a6 - v66;
  if (__OFSUB__(a6, v66))
    v67 = (a6 >> 31) + 0x7FFFFFFF;
  v68 = v50 != 0;
  v69 = v49 ^ 1;
  if (!v50 && ((v49 ^ 1) & 1) == 0 && v51)
  {
    if (*((_BYTE *)a9 + 4) == 4)
    {
      v202 = *(float *)a9;
      if (!*((_BYTE *)a9 + 6))
        v202 = (float)*(int *)a9;
      v203 = v202 * 64.0;
      v204 = v203 >= 2147483650.0 || v203 <= -2147483650.0;
      v70 = a1;
      if (v204)
      {
LABEL_689:
        if (v203 >= 2147483650.0)
        {
          v205 = 0x7FFFFFFF;
        }
        else if (v203 > -2147483650.0)
        {
LABEL_516:
          v205 = (int)v203;
        }
        else
        {
          v205 = 0x80000000;
        }
        v70 = a1;
        v59 = v288;
      }
      else
      {
LABEL_418:
        v205 = (int)v203;
      }
    }
    else
    {
      v205 = 0;
      v70 = a1;
      switch(*((_BYTE *)a9 + 4))
      {
        case 0:
        case 1:
        case 9:
          v205 = a6;
          break;
        case 3:
          v223 = *(float *)a9;
          if (!*((_BYTE *)a9 + 6))
            v223 = (float)*(int *)a9;
          v203 = (float)((float)((float)((float)a6 * 0.015625) * v223) / 100.0) * 64.0;
          if (v203 < 2147483650.0 && v203 > -2147483650.0)
            goto LABEL_418;
          goto LABEL_689;
        case 0xB:
          WebCore::Length::nonNanCalculatedValue(a9, (float)a6 * 0.015625);
          v203 = v232 * 64.0;
          if (v203 < 2147483650.0 && v203 > -2147483650.0)
            goto LABEL_516;
          goto LABEL_689;
        default:
          break;
      }
    }
    v206 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 416))(v70);
    v207 = v206 - a7;
    if (__OFSUB__(v206, a7))
      v207 = (v206 >> 31) + 0x7FFFFFFF;
    v72 = a4;
    v208 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 408))(v70);
    v209 = v208 - a7;
    if (__OFSUB__(v208, a7))
      v209 = (v208 >> 31) + 0x7FFFFFFF;
    v210 = v67 - v205;
    if (__OFSUB__(v67, v205))
      v210 = (v67 >> 31) + 0x7FFFFFFF;
    if (v209 <= v210)
      v209 = v210;
    if (v207 >= v209)
      v211 = v209;
    else
      v211 = v207;
    *a12 = v211;
    v187 = v211 + v205;
    if (__OFADD__(v211, v205))
      v187 = (v211 >> 31) + 0x7FFFFFFF;
LABEL_361:
    v76 = v67 - v187;
    if (__OFSUB__(v67, v187))
      v76 = (v67 >> 31) + 0x7FFFFFFF;
    goto LABEL_109;
  }
  if (!v50)
    v69 = 1;
  if ((v69 & 1) != 0 || v51)
  {
    v70 = a1;
    if (((v68 | v49) & 1) != 0 || !v51)
    {
      if (v51)
        v71 = v69;
      else
        v71 = 1;
      if ((v71 & 1) != 0)
      {
        if (v53 & 1 | (v51 != 0))
        {
          v76 = 0;
          v72 = a4;
        }
        else
        {
          v72 = a4;
          if (a8[4] != 4)
          {
            v76 = 0;
            switch(a8[4])
            {
              case 0u:
              case 1u:
              case 9u:
                v76 = a6;
                goto LABEL_102;
              case 3u:
                v164 = *(float *)a8;
                if (!a8[6])
                  v164 = (float)*(int *)a8;
                v73 = (float)((float)((float)a6 * 0.015625) * v164) / 100.0;
                goto LABEL_97;
              case 0xBu:
                WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a8, (float)a6 * 0.015625);
                v74 = v215 * 64.0;
                if (v74 < 2147483650.0 && v74 > -2147483650.0)
                  goto LABEL_101;
                if (v74 < 2147483650.0)
                  goto LABEL_652;
                goto LABEL_706;
              default:
                goto LABEL_102;
            }
          }
          v73 = *(float *)a8;
          if (!a8[6])
            v73 = (float)*(int *)a8;
LABEL_97:
          v74 = v73 * 64.0;
          if (v74 >= 2147483650.0 || v74 <= -2147483650.0)
          {
            if (v74 >= 2147483650.0)
            {
LABEL_706:
              v76 = 0x7FFFFFFF;
            }
            else
            {
LABEL_652:
              if (v74 <= -2147483650.0)
                v76 = 0x80000000;
              else
                v76 = (int)v74;
            }
            v59 = v288;
            v72 = a4;
            v70 = a1;
          }
          else
          {
LABEL_101:
            v76 = (int)v74;
          }
LABEL_102:
          if (*((_BYTE *)v15 + 4) != 4)
          {
            v79 = 0;
            switch(*((_BYTE *)v15 + 4))
            {
              case 0:
              case 1:
              case 9:
                v79 = a6;
                goto LABEL_108;
              case 3:
                v165 = *(float *)v15;
                if (!*((_BYTE *)v15 + 6))
                  v165 = (float)*(int *)v15;
                v78 = (float)((float)((float)((float)a6 * 0.015625) * v165) / 100.0) * 64.0;
                if (v78 < 2147483650.0 && v78 > -2147483650.0)
                  goto LABEL_107;
                if (v78 >= 2147483650.0)
                  goto LABEL_704;
                goto LABEL_644;
              case 0xB:
                WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v15, (float)a6 * 0.015625);
                goto LABEL_105;
              default:
                goto LABEL_108;
            }
          }
          v77 = *(float *)v15;
          if (!*((_BYTE *)v15 + 6))
            v77 = (float)*(int *)v15;
LABEL_105:
          v78 = v77 * 64.0;
          if (v78 >= 2147483650.0 || v78 <= -2147483650.0)
          {
            if (v78 >= 2147483650.0)
            {
LABEL_704:
              v79 = 0x7FFFFFFF;
            }
            else
            {
LABEL_644:
              if (v78 <= -2147483650.0)
                v79 = 0x80000000;
              else
                v79 = (int)v78;
            }
            v59 = v288;
            v72 = a4;
            v70 = a1;
          }
          else
          {
LABEL_107:
            v79 = (int)v78;
          }
LABEL_108:
          *a12 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing((_QWORD *)v70, v79, v287);
        }
      }
      else
      {
        if (a8[4] != 4)
        {
          v76 = 0;
          switch(a8[4])
          {
            case 0u:
            case 1u:
            case 9u:
              v76 = a6;
              goto LABEL_217;
            case 3u:
              v176 = *(float *)a8;
              if (!a8[6])
                v176 = (float)*(int *)a8;
              v134 = (float)((float)((float)a6 * 0.015625) * v176) / 100.0;
              goto LABEL_212;
            case 0xBu:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a8, (float)a6 * 0.015625);
              v135 = v221 * 64.0;
              if (v135 < 2147483650.0 && v135 > -2147483650.0)
                goto LABEL_216;
              if (v135 < 2147483650.0)
                goto LABEL_667;
              goto LABEL_711;
            default:
              goto LABEL_217;
          }
        }
        v134 = *(float *)a8;
        if (!a8[6])
          v134 = (float)*(int *)a8;
LABEL_212:
        v135 = v134 * 64.0;
        if (v135 >= 2147483650.0 || v135 <= -2147483650.0)
        {
          if (v135 >= 2147483650.0)
          {
LABEL_711:
            v76 = 0x7FFFFFFF;
          }
          else
          {
LABEL_667:
            if (v135 <= -2147483650.0)
              v76 = 0x80000000;
            else
              v76 = (int)v135;
          }
          v70 = a1;
          v59 = v288;
        }
        else
        {
LABEL_216:
          v76 = (int)v135;
        }
LABEL_217:
        if (*((_BYTE *)a9 + 4) != 4)
        {
          v140 = 0;
          switch(*((_BYTE *)a9 + 4))
          {
            case 0:
            case 1:
            case 9:
              v140 = a6;
              goto LABEL_225;
            case 3:
              v177 = *(float *)a9;
              if (!*((_BYTE *)a9 + 6))
                v177 = (float)*(int *)a9;
              v137 = (float)((float)((float)a6 * 0.015625) * v177) / 100.0;
              goto LABEL_220;
            case 0xB:
              WebCore::Length::nonNanCalculatedValue(a9, (float)a6 * 0.015625);
              v138 = v222 * 64.0;
              if (v138 < 2147483650.0 && v138 > -2147483650.0)
                goto LABEL_224;
              if (v138 < 2147483650.0)
                goto LABEL_671;
              goto LABEL_712;
            default:
              goto LABEL_225;
          }
        }
        v137 = *(float *)a9;
        if (!*((_BYTE *)a9 + 6))
          v137 = (float)*(int *)a9;
LABEL_220:
        v138 = v137 * 64.0;
        if (v138 >= 2147483650.0 || v138 <= -2147483650.0)
        {
          if (v138 >= 2147483650.0)
          {
LABEL_712:
            v140 = 0x7FFFFFFF;
          }
          else
          {
LABEL_671:
            if (v138 <= -2147483650.0)
              v140 = 0x80000000;
            else
              v140 = (int)v138;
          }
          v70 = a1;
          v59 = v288;
        }
        else
        {
LABEL_224:
          v140 = (int)v138;
        }
LABEL_225:
        v44 = __OFADD__(v76, v140);
        v141 = v76 + v140;
        if (v44)
          v141 = (v76 >> 31) + 0x7FFFFFFF;
        v72 = a4;
        v44 = __OFSUB__(v67, v141);
        v142 = v67 - v141;
        if (v44)
          v142 = (v67 >> 31) + 0x7FFFFFFF;
        *a12 = v142;
      }
      goto LABEL_109;
    }
    if (*((_BYTE *)v15 + 4) != 4)
    {
      v183 = 0;
      switch(*((_BYTE *)v15 + 4))
      {
        case 0:
        case 1:
        case 9:
          v183 = a6;
          goto LABEL_352;
        case 3:
          v196 = *(float *)v15;
          if (!*((_BYTE *)v15 + 6))
            v196 = (float)*(int *)v15;
          v180 = (float)((float)((float)a6 * 0.015625) * v196) / 100.0;
          goto LABEL_347;
        case 0xB:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v15, (float)a6 * 0.015625);
          v181 = v231 * 64.0;
          if (v181 < 2147483650.0 && v181 > -2147483650.0)
            goto LABEL_351;
          if (v181 < 2147483650.0)
            goto LABEL_684;
          goto LABEL_714;
        default:
          goto LABEL_352;
      }
    }
    v180 = *(float *)v15;
    if (!*((_BYTE *)v15 + 6))
      v180 = (float)*(int *)v15;
LABEL_347:
    v181 = v180 * 64.0;
    if (v181 >= 2147483650.0 || v181 <= -2147483650.0)
    {
      if (v181 >= 2147483650.0)
      {
LABEL_714:
        v183 = 0x7FFFFFFF;
      }
      else
      {
LABEL_684:
        if (v181 <= -2147483650.0)
          v183 = 0x80000000;
        else
          v183 = (int)v181;
      }
      v70 = a1;
      v59 = v288;
    }
    else
    {
LABEL_351:
      v183 = (int)v181;
    }
LABEL_352:
    *a12 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing((_QWORD *)v70, v183, v287);
    if (*((_BYTE *)a9 + 4) != 4)
    {
      v186 = 0;
      switch(*((_BYTE *)a9 + 4))
      {
        case 0:
        case 1:
        case 9:
          v186 = a6;
          goto LABEL_358;
        case 3:
          v197 = *(float *)a9;
          if (!*((_BYTE *)a9 + 6))
            v197 = (float)*(int *)a9;
          v185 = (float)((float)((float)((float)a6 * 0.015625) * v197) / 100.0) * 64.0;
          if (v185 < 2147483650.0 && v185 > -2147483650.0)
            goto LABEL_357;
          if (v185 >= 2147483650.0)
            goto LABEL_713;
          goto LABEL_680;
        case 0xB:
          WebCore::Length::nonNanCalculatedValue(a9, (float)a6 * 0.015625);
          goto LABEL_355;
        default:
          goto LABEL_358;
      }
    }
    v184 = *(float *)a9;
    if (!*((_BYTE *)a9 + 6))
      v184 = (float)*(int *)a9;
LABEL_355:
    v185 = v184 * 64.0;
    if (v185 >= 2147483650.0 || v185 <= -2147483650.0)
    {
      if (v185 >= 2147483650.0)
      {
LABEL_713:
        v186 = 0x7FFFFFFF;
      }
      else
      {
LABEL_680:
        if (v185 <= -2147483650.0)
          v186 = 0x80000000;
        else
          v186 = (int)v185;
      }
      v70 = a1;
      v59 = v288;
    }
    else
    {
LABEL_357:
      v186 = (int)v185;
    }
LABEL_358:
    v44 = __OFADD__(*a12, v186);
    v187 = *a12 + v186;
    if (v44)
      v187 = (*a12 >> 31) + 0x7FFFFFFF;
    v72 = a4;
    goto LABEL_361;
  }
  v70 = a1;
  if (a8[4] != 4)
  {
    v76 = 0;
    v72 = a4;
    switch(a8[4])
    {
      case 0u:
      case 1u:
      case 9u:
        v76 = a6;
        goto LABEL_372;
      case 3u:
        v199 = *(float *)a8;
        if (!a8[6])
          v199 = (float)*(int *)a8;
        v200 = (float)((float)((float)a6 * 0.015625) * v199) / 100.0;
        goto LABEL_401;
      case 0xBu:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a8, (float)a6 * 0.015625);
LABEL_401:
        v189 = v200 * 64.0;
        if (v189 < 2147483650.0 && v189 > -2147483650.0)
          goto LABEL_371;
        goto LABEL_406;
      default:
        goto LABEL_372;
    }
  }
  v188 = *(float *)a8;
  if (!a8[6])
    v188 = (float)*(int *)a8;
  v189 = v188 * 64.0;
  v190 = v189 >= 2147483650.0 || v189 <= -2147483650.0;
  v72 = a4;
  if (v190)
  {
LABEL_406:
    if (v189 >= 2147483650.0)
    {
      v76 = 0x7FFFFFFF;
    }
    else if (v189 <= -2147483650.0)
    {
      v76 = 0x80000000;
    }
    else
    {
      v76 = (int)v189;
    }
    v59 = v288;
    v72 = a4;
    v70 = a1;
  }
  else
  {
LABEL_371:
    v76 = (int)v189;
  }
LABEL_372:
  v191 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 416))(v70);
  v192 = v191 - a7;
  if (__OFSUB__(v191, a7))
    v192 = (v191 >> 31) + 0x7FFFFFFF;
  v193 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 408))(v70);
  v194 = v193 - a7;
  if (__OFSUB__(v193, a7))
    v194 = (v193 >> 31) + 0x7FFFFFFF;
  v195 = v67 - v76;
  if (__OFSUB__(v67, v76))
    v195 = (v67 >> 31) + 0x7FFFFFFF;
  if (v194 <= v195)
    v194 = v195;
  if (v192 < v194)
    v194 = v192;
  *a12 = v194;
LABEL_109:
  if ((*((_BYTE *)v72 + 45) & 0x20) != 0)
  {
    v80 = *v59;
    v81 = *((_DWORD *)v72 + 4);
    *((_DWORD *)v72 + 4) = v81 + 1;
    if ((*((_BYTE *)v72 + 123) & 4) == 0)
    {
      if (v81 != -1)
      {
        *((_DWORD *)v72 + 4) = v81;
        goto LABEL_121;
      }
LABEL_485:
      __break(0xC471u);
      JUMPOUT(0x194140FFCLL);
    }
    v82 = WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v72, (WebCore::RenderObject *)v19);
    if (v82)
    {
      WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v82, (const WebCore::RenderInline *)v72, v301);
    }
    else
    {
      v301[0] = v72[19];
      v302 = 1;
    }
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v301);
    if ((result & 1) != 0)
    {
      v84 = 0;
      v85 = 0.0;
    }
    else
    {
      v284 = v76;
      v299[0] = 0;
      v300 = -1;
      v143 = v302;
      if (v302 != -1)
      {
        ((void (*)(unsigned int *, _BYTE *, unint64_t *))*(&off_1E3421B10 + v302))(v295, v299, v301);
        v300 = v143;
        v15 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
        do
        {
          *(_QWORD *)v295 = v306;
          if ((((uint64_t (*)(unsigned int *, _BYTE *))off_1E3421B60[v143])(v295, v299) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194140BB0);
          }
          LOBYTE(v295[0]) = 0;
          LODWORD(v297) = -1;
          v144 = v300;
          if (v300 == -1)
            break;
          ((void (*)(_QWORD *, unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v300])(v306, v295, v299);
          LODWORD(v297) = v144;
          v306[0] = &v305;
          ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v144])(v306, v295);
          LOBYTE(v303[0]) = 0;
          v304 = -1;
          v145 = v297;
          if ((_DWORD)v297 == -1)
            break;
          ((void (*)(_QWORD *, _DWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v297])(v306, v303, v295);
          v304 = v145;
          if ((_DWORD)v297 != -1)
          {
            ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v297])(v306, v295);
            v145 = v304;
            if (v304 == -1)
              break;
          }
          *(_QWORD *)v295 = v306;
          v146 = ((uint64_t (*)(unsigned int *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v145])(v295, v303);
          if (v304 != -1)
            ((void (*)(unsigned int *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v304])(v295, v303);
          if ((v146 & 1) != 0)
            goto LABEL_243;
          if (v300 == -1)
            break;
          *(_QWORD *)v295 = v303;
          ((void (*)(unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v300])(v295, v299);
          v143 = v300;
        }
        while (v300 != -1);
      }
      while (1)
      {
        do
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_243:
          ;
        }
        while (v302 == -1);
        *(_QWORD *)v295 = v303;
        result = ((uint64_t (*)(unsigned int *, unint64_t *))v15[v302])(v295, v301);
        v59 = v288;
        v72 = a4;
        v70 = a1;
        v76 = v284;
        if ((_DWORD)result)
        {
          result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v299);
          if ((result & 1) != 0)
          {
LABEL_260:
            v84 = 0;
            v85 = 0.0;
            goto LABEL_275;
          }
        }
        v147 = v300;
        v149 = v300 == v302 && v300 != -1;
        if (v302 == -1 || !v149)
        {
          if (v302 == -1)
            v150 = v300 == -1;
          else
            v150 = v149;
          if (v150)
            goto LABEL_260;
        }
        else
        {
          *(_QWORD *)v295 = v303;
          result = ((uint64_t (*)(unsigned int *, unint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v302])(v295, v301, v299);
          if ((result & 1) != 0)
            goto LABEL_260;
          v147 = v300;
        }
        if (v147 != -1)
        {
          *(_QWORD *)v295 = v303;
          if ((((uint64_t (*)(unsigned int *, _BYTE *))off_1E3421B60[v147])(v295, v299) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1941411C4);
          }
          WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection((WebCore::InlineIterator::Box *)v299);
          v152 = v151;
          v153 = 1016;
          if (((*((_DWORD *)a4 + 31) >> 13) & 6u) - 2 < 4)
            v153 = 1000;
          v154 = (*(uint64_t (**)(uint64_t *))(*a4 + v153))(a4);
          if (v302 != -1)
          {
            v155 = v154;
            *(_QWORD *)v295 = v303;
            if ((((uint64_t (*)(unsigned int *, unint64_t *))off_1E3421B60[v302])(v295, v301) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1941411E4);
            }
            if (v302 != -1)
            {
              *(_QWORD *)v295 = v303;
              ((void (*)(unsigned int *, unint64_t *))off_1E3421C00[v302])(v295, v301);
              if (v302 != -1)
                break;
            }
          }
        }
      }
      v158 = v156;
      v159 = v157;
      v160 = v152 + (float)((float)v155 * 0.015625);
      *(_QWORD *)v295 = v303;
      result = ((uint64_t (*)(unsigned int *, unint64_t *))off_1E3421B00[v302])(v295, v301);
      if ((_DWORD)result)
        v161 = v158;
      else
        v161 = v159;
      v162 = v160 - v161;
      v163 = v284 + v80;
      if (__OFADD__(v284, v80))
        v163 = (v284 >> 31) + 0x7FFFFFFF;
      v85 = v162 + (float)((float)v163 * 0.015625);
      v84 = 1;
LABEL_275:
      if (v300 != -1)
        result = ((uint64_t (*)(unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v300])(v295, v299);
    }
    if (v302 != -1)
      result = ((uint64_t (*)(unsigned int *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v302])(v295, v301);
    v86 = *((_DWORD *)v72 + 4);
    if (!v86)
      goto LABEL_485;
    *((_DWORD *)v72 + 4) = v86 - 1;
    if (!v84)
      goto LABEL_121;
    v241 = v85 * 64.0;
    if (v241 < 2147483650.0 && v241 > -2147483650.0)
      goto LABEL_542;
    if (v241 >= 2147483650.0)
    {
      v242 = 0x7FFFFFFF;
      goto LABEL_543;
    }
    if (v241 > -2147483650.0)
LABEL_542:
      v242 = (int)v241;
    else
      v242 = 0x80000000;
LABEL_543:
    a12[1] = v242;
    return result;
  }
LABEL_121:
  v87 = v76 + *v59;
  if (__OFADD__(v76, *v59))
    v87 = (v76 >> 31) + 0x7FFFFFFF;
  a12[1] = v87;
  v88 = *a12 + a7;
  if (__OFADD__(*a12, a7))
    v88 = (*a12 >> 31) + 0x7FFFFFFF;
  v89 = *(_QWORD *)(v70 + 88);
  v90 = *(_QWORD *)(v89 + 24);
  v91 = *(_DWORD *)(v70 + 124);
  v92 = (unsigned __int16)v91 >> 13;
  if ((v92 - 2) > 3)
    v93 = 3;
  else
    v93 = qword_1969FC688[v92 - 2];
  v94 = v90 + 8;
  v95 = *(unsigned __int8 *)(v90 + 8 + 8 * v93 + 4);
  v96 = ((unsigned __int16)v91 >> 13) - 2;
  if (v96 > 3)
    v97 = 1;
  else
    v97 = qword_1969FC6A8[v96];
  v98 = 0;
  v99 = *(unsigned __int8 *)(v94 + 8 * v97 + 4);
  if (v95 && v99)
  {
    v100 = *(_QWORD *)(v89 + 8);
    if (((v91 >> 13) & 6) - 2 < 4)
      v101 = v100 + 12;
    else
      v101 = v100 + 4;
    v98 = *(_BYTE *)(v101 + 4) != 0;
  }
  if (!(v99 | v95)
    || ((((*((_BYTE *)v72 + 21) & 0x10) == 0) ^ ((*(_DWORD *)(v70 + 20) & 0x1000u) >> 12)) & 1) != 0
    || v98
    || (v243 = (unsigned __int16)*((_DWORD *)v72 + 31) >> 13, v243 > 5)
    || ((1 << v243) & 0x2A) == 0)
  {
    v102 = 1000;
    if ((*(_DWORD *)(v70 + 20) & 0x1000) == 0)
      v102 = 1016;
    result = (*(uint64_t (**)(uint64_t *))(*v72 + v102))(v72);
  }
  else
  {
    v44 = __OFSUB__(a6, v88);
    v244 = a6 - v88;
    if (v44)
      v244 = (a6 >> 31) + 0x7FFFFFFF;
    v44 = __OFSUB__(v244, v87);
    v245 = v244 - v87;
    if (v44)
      v245 = (v244 >> 31) + 0x7FFFFFFF;
    a12[1] = v245;
    v246 = 1008;
    if ((*(_DWORD *)(a1 + 20) & 0x1000) == 0)
      v246 = 1024;
    result = (*(uint64_t (**)(uint64_t *))(*a4 + v246))(a4);
  }
  v103 = a12[1];
  v104 = v103 + result;
  if (__OFADD__(v103, (_DWORD)result))
    v104 = (v103 >> 31) + 0x7FFFFFFF;
  a12[1] = v104;
  return result;
}

uint64_t WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(_QWORD *a1, uint64_t a2)
{
  float v3;
  double v4;
  int v5;
  int v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;

  v3 = *(float *)a2;
  if (!*(_BYTE *)(a2 + 6))
    v3 = (float)*(int *)a2;
  v4 = v3 * 64.0;
  if (v4 >= 2147483650.0)
  {
    v5 = 0x7FFFFFFF;
  }
  else if (v4 <= -2147483650.0)
  {
    v5 = 0x80000000;
  }
  else
  {
    v5 = (int)v4;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 68) & 4) != 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 4);
    v8 = (v7 - 7) < 4 || v7 == 0;
    if (!v8 && (v7 - 5) >= 2)
    {
      v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 1064))(a1);
      v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 1072))(a1);
      if (__OFADD__(v9, v10))
        v11 = (v9 >> 31) + 0x7FFFFFFF;
      else
        v11 = v9 + v10;
      v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 976))(a1);
      if (__OFADD__(v11, v12))
        v13 = (v11 >> 31) + 0x7FFFFFFF;
      else
        v13 = v11 + v12;
      v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 984))(a1);
      v15 = v13 + v14;
      if (__OFADD__(v13, v14))
        v15 = (v13 >> 31) + 0x7FFFFFFF;
      v16 = __OFSUB__(v5, v15);
      v17 = v5 - v15;
      if (v16)
        v5 = (v5 >> 31) + 0x7FFFFFFF;
      else
        v5 = v17;
    }
  }
  return v5 & ~(v5 >> 31);
}

int *WebCore::RenderBlock::computePreferredLogicalWidths(WebCore::RenderBlock *this)
{
  int *v2;
  int *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  unsigned int *v23;
  void *v24;
  float v25;
  int v26;
  uint64_t v27;
  const WebCore::RenderBox *v28;
  uint64_t v29;
  const WebCore::RenderBox *v30;
  uint64_t v31;
  const WebCore::RenderBox *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int *result;
  float v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int8 v65;
  char v66;
  char v67;
  float v68;
  unsigned __int8 v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;

  *((_DWORD *)this + 46) = 0;
  v2 = (int *)((char *)this + 184);
  *((_DWORD *)this + 47) = 0;
  v3 = (int *)((char *)this + 188);
  v4 = (uint64_t *)WebCore::gOverridingLogicalWidthLengthMap;
  if (!WebCore::gOverridingLogicalWidthLengthMap)
    goto LABEL_16;
  ++*(_DWORD *)(WebCore::gOverridingLogicalWidthLengthMap + 8);
  v5 = *((_QWORD *)this + 1);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = *v4;
    if (!*v4)
    {
      v72 = 0;
      v73 = 0;
      goto LABEL_15;
    }
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = *(_QWORD *)(v6 + 16 * v11);
      if (!v13)
      {
        v15 = *(unsigned int *)(v6 - 4);
        v16 = v6 + 16 * v15;
        v17 = v16;
        goto LABEL_13;
      }
      if (v13 != -1 && v13 == v5)
        break;
      v11 = (v11 + i) & v7;
    }
    v16 = v6 + 16 * v11;
    v15 = *(unsigned int *)(v6 - 4);
    v17 = v6 + 16 * v15;
LABEL_13:
    v72 = v16;
    v18 = v6 + 16 * v15;
    if (v16 == v18)
      goto LABEL_14;
    while (!*(_QWORD *)(*(_QWORD *)v16 + 8))
    {
      v63 = v16 + 16;
      v16 = v17;
      if (v63 != v17)
      {
        v16 = v63;
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 16;
          if (v16 == v17)
          {
            v16 = v17;
            break;
          }
        }
      }
      if (v16 == v18)
      {
        v16 = v18;
        break;
      }
    }
    v72 = v16;
  }
  else
  {
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v68, v4);
    v6 = *(_QWORD *)WebCore::gOverridingLogicalWidthLengthMap;
  }
  if (v6)
LABEL_14:
    v6 += 16 * *(unsigned int *)(v6 - 4);
LABEL_15:
  if (v72 == v6)
  {
LABEL_16:
    v19 = 0;
    v20 = 0;
    LOBYTE(v64) = 0;
    v21 = 1;
    goto LABEL_17;
  }
  *(float *)&v64 = 0.0;
  v67 = 0;
  v65 = *(_BYTE *)(v72 + 12);
  v20 = v65;
  v66 = *(_BYTE *)(v72 + 13);
  if (v65 - 2 >= 9)
  {
    v19 = 0;
    if (v65 == 11)
    {
      v64 = *(unsigned int *)(v72 + 8);
      WebCore::Length::ref((int *)&v64);
      v19 = 0;
    }
  }
  else
  {
    v19 = *(unsigned __int8 *)(v72 + 14);
    if (*(_BYTE *)(v72 + 14))
    {
      v64 = *(unsigned int *)(v72 + 8);
      v19 = 1;
    }
    else
    {
      v64 = *(unsigned int *)(v72 + 8);
    }
  }
  v21 = 0;
LABEL_17:
  v22 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v23 = (unsigned int *)(v22 + 12);
  else
    v23 = (unsigned int *)(v22 + 4);
  v71 = 0;
  if ((v21 & 1) == 0)
  {
    if ((v20 - 2) >= 9)
    {
      if (v20 != 11)
      {
LABEL_51:
        v24 = 0;
        v26 = 1;
        v25 = 0.0;
        goto LABEL_28;
      }
    }
    else if (v19)
    {
      v26 = 0;
      v25 = *(float *)&v64;
LABEL_27:
      v24 = (void *)LODWORD(v25);
      goto LABEL_28;
    }
    v24 = (void *)v64;
    goto LABEL_23;
  }
  v69 = *((_BYTE *)v23 + 4);
  v20 = v69;
  v70 = *((_BYTE *)v23 + 5);
  if (v69 - 2 >= 9)
  {
    if (v69 == 11)
    {
      v24 = (void *)*v23;
      v68 = *(float *)v23;
      WebCore::Length::ref((int *)&v68);
      goto LABEL_30;
    }
    goto LABEL_51;
  }
  if (*((_BYTE *)v23 + 6))
  {
    v26 = 0;
    v25 = *(float *)v23;
    goto LABEL_27;
  }
  v24 = (void *)*v23;
LABEL_23:
  v25 = *(float *)&v24;
  v26 = 1;
LABEL_28:
  if (*((_BYTE *)this + 46) == 37 || v20 != 4)
  {
LABEL_30:
    if (WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio(this))
    {
      v58 = WebCore::RenderBox::computeLogicalWidthFromAspectRatio(this, 0);
      v59 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth(this);
      v60 = v58 - v59;
      if (__OFSUB__(v58, v59))
        v60 = (v58 >> 31) + 0x7FFFFFFF;
      v61 = v60 & ~(v60 >> 31);
      *v2 = v61;
      *v3 = v61;
    }
    else
    {
      (*(void (**)(WebCore::RenderBlock *, int *, int *))(*(_QWORD *)this + 1624))(this, v2, v3);
    }
    goto LABEL_32;
  }
  v42 = (float)SLODWORD(v25);
  if (!v26)
    v42 = v25;
  if (v42 < 0.0
    || (v43 = *((_DWORD *)this + 5), (v43 & 1) != 0)
    && (v43 & 0x800) == 0
    && (v43 & 0x1800000) != 0x1000000
    && (v44 = *((_QWORD *)this + 4)) != 0
    && (v45 = *(_QWORD *)(v44 + 8)) != 0
    && *(_BYTE *)(v45 + 46) == 5
    && (!v26 ? (v62 = (int)v25) : (v62 = LODWORD(v25)), !v62))
  {
    v20 = 4;
    goto LABEL_30;
  }
  v46 = v42 * 64.0;
  if (v46 >= 2147483650.0)
  {
    v47 = 0x7FFFFFFF;
  }
  else if (v46 <= -2147483650.0)
  {
    v47 = 0x80000000;
  }
  else
  {
    v47 = (int)v46;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 68) & 4) != 0)
  {
    v49 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1064))(this);
    v50 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1072))(this);
    v51 = v49 + v50;
    if (__OFADD__(v49, v50))
      v51 = (v49 >> 31) + 0x7FFFFFFF;
    v52 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 976))(this);
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
      v53 = (v51 >> 31) + 0x7FFFFFFF;
    v54 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 984))(this);
    v55 = v53 + v54;
    if (__OFADD__(v53, v54))
      v55 = (v53 >> 31) + 0x7FFFFFFF;
    v56 = __OFSUB__(v47, v55);
    v57 = v47 - v55;
    if (v56)
      v47 = (v47 >> 31) + 0x7FFFFFFF;
    else
      v47 = v57;
  }
  v48 = v47 & ~(v47 >> 31);
  *v2 = v48;
  *v3 = v48;
  v20 = 4;
LABEL_32:
  v27 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v28 = (const WebCore::RenderBox *)(v27 + 36);
  v29 = v27 + 44;
  v30 = (const WebCore::RenderBox *)(v27 + 20);
  v31 = v27 + 28;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v32 = v30;
  else
    v32 = v28;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v33 = v31;
  else
    v33 = v29;
  v34 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1064))(this);
  v35 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v34, v35))
    v36 = (v34 >> 31) + 0x7FFFFFFF;
  else
    v36 = v34 + v35;
  v37 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v36, v37))
    v38 = (v36 >> 31) + 0x7FFFFFFF;
  else
    v38 = v36 + v37;
  v39 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 984))(this);
  if (__OFADD__(v38, v39))
    v40 = (v38 >> 31) + 0x7FFFFFFF;
  else
    v40 = v38 + v39;
  result = (int *)WebCore::RenderBox::computePreferredLogicalWidths((uint64_t)this, v32, v33, v40);
  *((_DWORD *)this + 5) &= ~0x2000u;
  if (v20 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v24);
  }
  return result;
}

uint64_t WebCore::RenderBlockFlow::determineLogicalLeftPositionForChild(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t result;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int *v51;
  unsigned int *v52;
  signed int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  BOOL v79;
  int v80;
  int v81;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v8 = v6 + v7;
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  v9 = v8;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
  {
    v9 = v8;
    if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
    {
      v54 = *(_DWORD *)(a1 + 120);
      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
      if ((v54 & 0x4000000) != 0)
        v56 = -v55;
      else
        v56 = v55;
      v57 = v56 << 6;
      if (v56 < -33554432)
        v57 = 0x80000000;
      if (v56 > 0x1FFFFFF)
        v57 = 0x7FFFFFFF;
      v9 = v8 + v57;
      if (__OFADD__(v8, v57))
        v9 = (v8 >> 31) + 0x7FFFFFFF;
    }
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0 && (*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    v58 = *(_DWORD *)(a1 + 120);
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
    if ((v58 & 0x4000000) != 0)
      v60 = -v59;
    else
      v60 = v59;
    v61 = v60 << 6;
    if (v60 < -33554432)
      v61 = 0x80000000;
    if (v60 > 0x1FFFFFF)
      v61 = 0x7FFFFFFF;
    v25 = __OFADD__(v9, v61);
    v62 = v9 + v61;
    if (v25)
      v9 = (v9 >> 31) + 0x7FFFFFFF;
    else
      v9 = v62;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  v17 = *(_QWORD *)a1;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
  {
    v67 = *(_DWORD *)(a1 + 164);
    v68 = (*(uint64_t (**)(uint64_t))(v17 + 1000))(a1);
    v69 = v67 - v68;
    if (__OFSUB__(v67, v68))
      v69 = (v67 >> 31) + 0x7FFFFFFF;
    v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
    v71 = v69 - v70;
    if (__OFSUB__(v69, v70))
      v71 = (v69 >> 31) + 0x7FFFFFFF;
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
    v73 = v72 << 6;
    if (v72 < -33554432)
      v73 = 0x80000000;
    if (v72 > 0x1FFFFFF)
      v73 = 0x7FFFFFFF;
    v25 = __OFSUB__(v71, v73);
    v74 = v71 - v73;
    if (v25)
      v74 = (v71 >> 31) + 0x7FFFFFFF;
    v75 = v74 & ~(v74 >> 31);
    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
    v77 = v75 - v76;
    if (__OFSUB__(v75, v76))
      v77 = 0x7FFFFFFF;
    v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 936))(a1);
    v31 = v77 - v78;
    if (__OFSUB__(v77, v78))
      v31 = (v77 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) == 0)
      goto LABEL_27;
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
  }
  else
  {
    v18 = *(_DWORD *)(a1 + 160);
    v19 = (*(uint64_t (**)(uint64_t))(v17 + 1016))(a1);
    v20 = v18 - v19;
    if (__OFSUB__(v18, v19))
      v20 = (v18 >> 31) + 0x7FFFFFFF;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
    v22 = v20 - v21;
    if (__OFSUB__(v20, v21))
      v22 = (v20 >> 31) + 0x7FFFFFFF;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
    v24 = v23 << 6;
    if (v23 < -33554432)
      v24 = 0x80000000;
    if (v23 > 0x1FFFFFF)
      v24 = 0x7FFFFFFF;
    v25 = __OFSUB__(v22, v24);
    v26 = v22 - v24;
    if (v25)
      v26 = (v22 >> 31) + 0x7FFFFFFF;
    v27 = v26 & ~(v26 >> 31);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
    v29 = v27 - v28;
    if (__OFSUB__(v27, v28))
      v29 = 0x7FFFFFFF;
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
    v31 = v29 - v30;
    if (__OFSUB__(v29, v30))
      v31 = (v29 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) == 0)
    {
LABEL_27:
      v32 = 0;
      goto LABEL_28;
    }
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
  }
  if (v66 >= -33554432)
  {
    v32 = v66 << 6;
    if (v66 > 0x1FFFFFF)
      v32 = 0x7FFFFFFF;
  }
  else
  {
    v32 = 0x80000000;
  }
LABEL_28:
  v25 = __OFSUB__(v31, v32);
  v33 = v31 - v32;
  if (v25)
    v33 = (v31 >> 31) + 0x7FFFFFFF;
  v34 = v33 & ~(v33 >> 31);
  v35 = v16 + v34;
  if (__OFADD__(v16, v34))
    v35 = (v16 >> 31) + 0x7FFFFFFF;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1128))(a2, a1 + 80);
  v37 = v9 + v36;
  if (__OFADD__(v9, v36))
    v37 = (v9 >> 31) + 0x7FFFFFFF;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1504))(a2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      {
        v51 = (unsigned int *)(a2 + 152);
        v52 = (unsigned int *)(a2 + 160);
      }
      else
      {
        v51 = (unsigned int *)(a2 + 156);
        v52 = (unsigned int *)(a2 + 164);
      }
      result = WebCore::RenderBlock::startOffsetForLine(a1, *v51, *v52);
    }
  }
  v39 = *(_DWORD *)(a1 + 120);
  if ((v39 & 0x3C0) == 0x180)
    goto LABEL_60;
  v40 = v39 & 0x4000000;
  v41 = (v39 >> 26) & 1;
  v42 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  if ((v42 - 2) >= 2)
  {
    if (v42 == 4)
    {
      v41 = v40 == 0;
    }
    else if (v42 != 5)
    {
      v43 = 3;
      if (v40)
        v43 = 1;
      goto LABEL_41;
    }
  }
  v79 = v41 == 0;
  v43 = 2;
  if (v79)
    v43 = 0;
LABEL_41:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 8 * v43 + 44))
  {
    if ((int)result > v8 && v37 <= (int)result)
      v37 = result;
    goto LABEL_43;
  }
LABEL_60:
  v53 = result + v36;
  if (__OFADD__((_DWORD)result, v36))
    v53 = (result >> 31) + 0x7FFFFFFF;
  if (v37 <= v53)
    v37 = v53;
  v40 = v39 & 0x4000000;
LABEL_43:
  if (v40)
  {
    v44 = v35 - v37;
    if (__OFSUB__(v35, v37))
      v44 = (v35 >> 31) + 0x7FFFFFFF;
    v45 = *(_DWORD *)(a1 + 20);
    v46 = (int *)(a2 + 160);
    if ((v45 & 0x1000) != 0)
      v46 = (int *)(a2 + 164);
    v47 = *v46;
    v37 = v44 - v47;
    if (__OFSUB__(v44, v47))
      v37 = (v44 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v45 = *(_DWORD *)(a1 + 20);
  }
  if ((v45 & 0x1000) != 0)
  {
    if (!a3)
    {
      v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                  + 1944)
                      + 248)
          + 336;
      v64 = *(_DWORD *)(a2 + 156);
      v65 = v64 - v37;
      if (__OFSUB__(v64, v37))
        v65 = (v64 >> 31) + 0x7FFFFFFF;
      v80 = 0;
      v81 = v65;
      result = WebCore::LocalFrameViewLayoutContext::addLayoutDelta(v63, &v80);
    }
    *(_DWORD *)(a2 + 156) = v37;
  }
  else
  {
    if (!a3)
    {
      v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                  + 1944)
                      + 248)
          + 336;
      v49 = *(_DWORD *)(a2 + 152);
      v50 = v49 - v37;
      if (__OFSUB__(v49, v37))
        v50 = (v49 >> 31) + 0x7FFFFFFF;
      v80 = v50;
      v81 = 0;
      result = WebCore::LocalFrameViewLayoutContext::addLayoutDelta(v48, &v80);
    }
    *(_DWORD *)(a2 + 152) = v37;
  }
  return result;
}

uint64_t WebCore::RenderBoxModelObject::paddingStart(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  float v9;
  float v10;
  float v11;
  double v12;
  float v15;
  float v16;
  float v17;
  unsigned __int8 *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v2 = *((_DWORD *)this + 30);
  v3 = (v2 >> 26) & 1;
  v4 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v4 - 2) >= 2)
  {
    if (v4 == 4)
    {
      v3 = (v2 & 0x4000000) == 0;
    }
    else if (v4 != 5)
    {
      v5 = 3;
      if ((v2 & 0x4000000) != 0)
        v5 = 1;
      goto LABEL_6;
    }
  }
  v21 = v3 == 0;
  v5 = 2;
  if (v21)
    v5 = 0;
LABEL_6:
  v6 = v1 + 72;
  v7 = (unsigned __int8 *)(v1 + 72 + 8 * v5);
  v8 = v7[4];
  if ((v8 & 0xFFFFFFF7) == 3)
  {
    v23 = v6;
    v24 = v7;
    v22 = v5;
    v19 = v7 + 4;
    v20 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v5 = v22;
    v6 = v23;
    v7 = v24;
    v8 = *v19;
    v9 = (float)v20 * 0.015625;
  }
  else
  {
    v9 = 0.0;
  }
  if (v8 == 4)
  {
    v10 = *(float *)v7;
    v11 = *(float *)v7;
    if (!*(_BYTE *)(v6 + 8 * v5 + 6))
      v10 = (float)SLODWORD(v11);
    v12 = v10 * 64.0;
    if (v12 < 2147483650.0 && v12 > -2147483650.0)
      return (int)v12;
    if (v12 < 2147483650.0)
      goto LABEL_36;
  }
  else
  {
    if (v8 == 3)
    {
      v15 = *(float *)v7;
      v16 = *(float *)v7;
      if (!*(_BYTE *)(v6 + 8 * v5 + 6))
        v15 = (float)SLODWORD(v16);
      v17 = (float)(v9 * v15) / 100.0;
    }
    else
    {
      if (v8 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v7, v9);
    }
    v12 = v17 * 64.0;
    if (v12 < 2147483650.0 && v12 > -2147483650.0)
      return (int)v12;
    if (v12 < 2147483650.0)
    {
LABEL_36:
      if (v12 <= -2147483650.0)
        return 0x80000000;
      return (int)v12;
    }
  }
  return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderBoxModelObject::borderStart(WebCore::RenderBoxModelObject *this)
{
  WebCore::RenderStyle *v2;
  int v3;
  uint64_t v4;
  float v5;
  double v6;
  BOOL v7;
  BOOL v8;
  uint64_t v10;

  v2 = (WebCore::RenderBoxModelObject *)((char *)this + 80);
  v3 = *((_DWORD *)this + 30);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    if ((v3 & 0x4000000) != 0)
      v5 = WebCore::RenderStyle::borderBottomWidth(v2);
    else
      v5 = WebCore::RenderStyle::borderTopWidth(v2);
  }
  else if ((v3 & 0x4000000) != 0)
  {
    v5 = WebCore::RenderStyle::borderRightWidth(v2);
  }
  else
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v5 = 0.0;
    if ((*(_BYTE *)(v4 + 124) & 0xE) != 0)
    {
      v10 = *(_QWORD *)(v4 + 200);
      if (*(_BYTE *)(v10 + 5) && *(_BYTE *)(v10 + 76) == 4)
      {
        if (*(_BYTE *)(v10 + 78))
          v5 = *(float *)(v10 + 72);
        else
          v5 = (float)*(int *)(v10 + 72);
      }
      else
      {
        v5 = *(float *)(v4 + 120);
      }
    }
  }
  v6 = v5 * 64.0;
  if (v6 < 2147483650.0)
  {
    v7 = v6 == -2147483650.0;
    v8 = v6 < -2147483650.0;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && !v7)
    return (int)v6;
  if (v6 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v6 > -2147483650.0)
    return (int)v6;
  return 0x80000000;
}

uint64_t WebCore::RenderBoxModelObject::paddingEnd(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  float v9;
  float v10;
  float v11;
  double v12;
  float v15;
  float v16;
  float v17;
  unsigned __int8 *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v2 = *((_DWORD *)this + 30);
  v3 = (v2 >> 26) & 1;
  v4 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v4 - 2) >= 2)
  {
    if (v4 == 4)
    {
      v3 = (v2 & 0x4000000) == 0;
    }
    else if (v4 != 5)
    {
      v5 = 3;
      if ((v2 & 0x4000000) == 0)
        v5 = 1;
      goto LABEL_6;
    }
  }
  v21 = v3 == 0;
  v5 = 2;
  if (!v21)
    v5 = 0;
LABEL_6:
  v6 = v1 + 72;
  v7 = (unsigned __int8 *)(v1 + 72 + 8 * v5);
  v8 = v7[4];
  if ((v8 & 0xFFFFFFF7) == 3)
  {
    v23 = v6;
    v24 = v7;
    v22 = v5;
    v19 = v7 + 4;
    v20 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v5 = v22;
    v6 = v23;
    v7 = v24;
    v8 = *v19;
    v9 = (float)v20 * 0.015625;
  }
  else
  {
    v9 = 0.0;
  }
  if (v8 == 4)
  {
    v10 = *(float *)v7;
    v11 = *(float *)v7;
    if (!*(_BYTE *)(v6 + 8 * v5 + 6))
      v10 = (float)SLODWORD(v11);
    v12 = v10 * 64.0;
    if (v12 < 2147483650.0 && v12 > -2147483650.0)
      return (int)v12;
    if (v12 < 2147483650.0)
      goto LABEL_36;
  }
  else
  {
    if (v8 == 3)
    {
      v15 = *(float *)v7;
      v16 = *(float *)v7;
      if (!*(_BYTE *)(v6 + 8 * v5 + 6))
        v15 = (float)SLODWORD(v16);
      v17 = (float)(v9 * v15) / 100.0;
    }
    else
    {
      if (v8 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v7, v9);
    }
    v12 = v17 * 64.0;
    if (v12 < 2147483650.0 && v12 > -2147483650.0)
      return (int)v12;
    if (v12 < 2147483650.0)
    {
LABEL_36:
      if (v12 <= -2147483650.0)
        return 0x80000000;
      return (int)v12;
    }
  }
  return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderBoxModelObject::borderEnd(WebCore::RenderBoxModelObject *this)
{
  WebCore::RenderStyle *v2;
  int v3;
  uint64_t v4;
  float v5;
  double v6;
  BOOL v7;
  BOOL v8;
  uint64_t v10;

  v2 = (WebCore::RenderBoxModelObject *)((char *)this + 80);
  v3 = *((_DWORD *)this + 30);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    if ((v3 & 0x4000000) != 0)
      v5 = WebCore::RenderStyle::borderTopWidth(v2);
    else
      v5 = WebCore::RenderStyle::borderBottomWidth(v2);
  }
  else if ((v3 & 0x4000000) != 0)
  {
    v5 = WebCore::RenderStyle::borderLeftWidth(v2);
  }
  else
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v5 = 0.0;
    if ((*(_BYTE *)(v4 + 148) & 0xE) != 0)
    {
      v10 = *(_QWORD *)(v4 + 200);
      if (*(_BYTE *)(v10 + 5) && *(_BYTE *)(v10 + 60) == 4)
      {
        if (*(_BYTE *)(v10 + 62))
          v5 = *(float *)(v10 + 56);
        else
          v5 = (float)*(int *)(v10 + 56);
      }
      else
      {
        v5 = *(float *)(v4 + 144);
      }
    }
  }
  v6 = v5 * 64.0;
  if (v6 < 2147483650.0)
  {
    v7 = v6 == -2147483650.0;
    v8 = v6 < -2147483650.0;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && !v7)
    return (int)v6;
  if (v6 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v6 > -2147483650.0)
    return (int)v6;
  return 0x80000000;
}

uint64_t WebCore::RenderBox::contentLogicalWidth(WebCore::RenderBox *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t (*v21)(WebCore::RenderBox *);
  WebCore::RenderBox *v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;

  v2 = *(_QWORD *)this;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v26 = *((_DWORD *)this + 41);
    v27 = (*(uint64_t (**)(WebCore::RenderBox *))(v2 + 1000))(this);
    if (__OFSUB__(v26, v27))
      v28 = (v26 >> 31) + 0x7FFFFFFF;
    else
      v28 = v26 - v27;
    v29 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
    if (__OFSUB__(v28, v29))
      v30 = (v28 >> 31) + 0x7FFFFFFF;
    else
      v30 = v28 - v29;
    v31 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    v32 = v31 << 6;
    if (v31 < -33554432)
      v32 = 0x80000000;
    if (v31 > 0x1FFFFFF)
      v32 = 0x7FFFFFFF;
    v10 = __OFSUB__(v30, v32);
    v33 = v30 - v32;
    if (v10)
      v33 = (v30 >> 31) + 0x7FFFFFFF;
    v34 = v33 & ~(v33 >> 31);
    v35 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
    if (__OFSUB__(v34, v35))
      v36 = 0x7FFFFFFF;
    else
      v36 = v34 - v35;
    v37 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 936))(this);
    if (__OFSUB__(v36, v37))
      v38 = (v36 >> 31) + 0x7FFFFFFF;
    else
      v38 = v36 - v37;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      v40 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
      v41 = v40 << 6;
      if (v40 > 0x1FFFFFF)
        v41 = 0x7FFFFFFF;
      if (v40 >= -33554432)
        v39 = v41;
      else
        v39 = 0x80000000;
    }
    else
    {
      v39 = 0;
    }
    v10 = __OFSUB__(v38, v39);
    v19 = v38 - v39;
    if (v10)
      v19 = (v38 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v3 = *((_DWORD *)this + 40);
    v4 = (*(uint64_t (**)(WebCore::RenderBox *))(v2 + 1016))(this);
    if (__OFSUB__(v3, v4))
      v5 = (v3 >> 31) + 0x7FFFFFFF;
    else
      v5 = v3 - v4;
    v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v5, v6))
      v7 = (v5 >> 31) + 0x7FFFFFFF;
    else
      v7 = v5 - v6;
    v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    v9 = v8 << 6;
    if (v8 < -33554432)
      v9 = 0x80000000;
    if (v8 > 0x1FFFFFF)
      v9 = 0x7FFFFFFF;
    v10 = __OFSUB__(v7, v9);
    v11 = v7 - v9;
    if (v10)
      v11 = (v7 >> 31) + 0x7FFFFFFF;
    v12 = v11 & ~(v11 >> 31);
    v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
    if (__OFSUB__(v12, v13))
      v14 = 0x7FFFFFFF;
    else
      v14 = v12 - v13;
    v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 952))(this);
    v16 = v14 - v15;
    if (__OFSUB__(v14, v15))
      v16 = (v14 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      v21 = *(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352);
      v22 = this;
      v23 = v16;
      v24 = v21(v22);
      v16 = v23;
      v25 = v24 << 6;
      if (v24 > 0x1FFFFFF)
        v25 = 0x7FFFFFFF;
      if (v24 >= -33554432)
        v17 = v25;
      else
        v17 = 0x80000000;
    }
    else
    {
      v17 = 0;
    }
    v10 = __OFSUB__(v16, v17);
    v18 = v16 - v17;
    v19 = (v16 >> 31) + 0x7FFFFFFF;
    if (!v10)
      v19 = v18;
  }
  return v19 & ~(v19 >> 31);
}

uint64_t WebCore::RenderBox::marginStart(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v9;

  v2 = a1 + 80;
  if (a2)
    v2 = a2;
  v3 = *(_DWORD *)(v2 + 40);
  v4 = *(_DWORD *)(v2 + 44);
  v5 = (v3 >> 26) & 1;
  v6 = (unsigned __int16)v4 >> 13;
  if ((v6 - 2) >= 2)
  {
    if (v6 == 4)
    {
      v5 = (v3 & 0x4000000) == 0;
    }
    else if (v6 != 5)
    {
      v7 = 3;
      if ((v3 & 0x4000000) != 0)
        v7 = 1;
      return *(unsigned int *)(a1 + 4 * v7 + 168);
    }
  }
  v9 = v5 == 0;
  v7 = 2;
  if (v9)
    v7 = 0;
  return *(unsigned int *)(a1 + 4 * v7 + 168);
}

uint64_t WebCore::RenderTable::avoidsFloats(WebCore::RenderTable *this)
{
  return 1;
}

uint64_t WebCore::RenderBox::computePositionedLogicalHeightUsing(WebCore::RenderBox *this, const WebCore::RenderBox *a2, unsigned int *a3, uint64_t *a4, int a5, int a6, int a7, unsigned __int8 *a8, unsigned __int8 *a9, WebCore::Length *a10, unsigned __int8 *a11, _DWORD *a12)
{
  int v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int i;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  _BOOL4 shouldComputeLogicalHeightFromAspectRatio;
  char v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  float v54;
  double v55;
  unsigned int v57;
  char v58;
  int v59;
  float v60;
  double v61;
  int v63;
  int v64;
  float v65;
  double v66;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  char v73;
  char v74;
  float v75;
  double v76;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  _BOOL4 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  int *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::RenderBox *v100;
  unsigned int v101;
  int v102;
  uint64_t (**v103)(_QWORD);
  uint64_t result;
  unsigned int v105;
  int v106;
  float v107;
  float v108;
  double v109;
  BOOL v110;
  WebCore::Length *v111;
  unsigned int v112;
  float v113;
  double v114;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  float v126;
  float v127;
  float v128;
  double v129;
  float v131;
  float v133;
  uint64_t v134;
  float v135;
  double v136;
  int v138;
  int v139;
  float v140;
  double v141;
  int v143;
  unsigned int v144;
  float v145;
  int v146;
  float v147;
  double v148;
  float v150;
  double v151;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  float v165;
  double v166;
  BOOL v167;
  WebCore::Length *v168;
  float v169;
  double v170;
  int v172;
  int v173;
  int v174;
  float v175;
  float v176;
  unsigned int v177;
  float v178;
  double v179;
  float v181;
  float v183;
  float v184;
  float v185;
  unsigned int v186;
  float v187;
  double v188;
  unsigned int v190;
  float v191;
  double v192;
  float v194;
  double v195;
  unsigned int v197;
  float v198;
  double v199;
  int v201;
  unsigned int v202;
  float v203;
  double v204;
  unsigned int v206;
  float v207;
  double v208;
  float v210;
  float v212;
  unsigned int v213;
  float v214;
  double v215;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  unint64_t v221;
  uint64_t v222;
  unsigned int v223;
  int v224;
  int v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  double *v229;
  double *v230;
  unsigned int v231;
  int v232;
  int *v233;
  unsigned int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  int Fragment;
  int v240;
  char v241;
  int v242;
  unsigned int v243;
  int v244;
  unsigned int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  WebCore::RenderFragmentContainer *v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int *v254;
  unsigned int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v264;
  char v265;
  unsigned int v266;
  __int16 v267;
  char v268;
  uint64_t v269;
  uint64_t v270;

  v16 = (int)a2;
  if ((_DWORD)a2 == 1 && !*((_BYTE *)a3 + 4))
  {
    if (WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio(this, a2))
    {
      *(float *)&v266 = (float)a7 * 0.015625;
      v267 = 4;
      v268 = 1;
      WebCore::Length::operator=(a3, &v266);
      if (v267 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v266);
      }
    }
    else
    {
      if (*((_BYTE *)a3 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a3);
      }
      *((_WORD *)a3 + 2) = 4;
      *((_BYTE *)a3 + 6) = 0;
      *a3 = 0;
    }
  }
  if (__OFSUB__(a7, a6))
    v18 = (a7 >> 31) + 0x7FFFFFFF;
  else
    v18 = (a7 - a6);
  v19 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
    goto LABEL_26;
  ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalWidthMap + 8);
  v20 = *((_QWORD *)this + 1);
  if (v20 && *(_QWORD *)(v20 + 8))
  {
    v21 = *v19;
    if (*v19)
    {
      v22 = *(_DWORD *)(v21 - 8);
      v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v26 = v22 & ((v25 >> 31) ^ v25);
      for (i = 1; ; ++i)
      {
        v28 = *(_QWORD *)(v21 + 16 * v26);
        if (!v28)
        {
          v30 = *(unsigned int *)(v21 - 4);
          v31 = v21 + 16 * v30;
          v32 = v31;
          goto LABEL_21;
        }
        if (v28 != -1 && v28 == v20)
          break;
        v26 = (v26 + i) & v22;
      }
      v31 = v21 + 16 * v26;
      v30 = *(unsigned int *)(v21 - 4);
      v32 = v21 + 16 * v30;
LABEL_21:
      v269 = v31;
      v270 = v32;
      v33 = v21 + 16 * v30;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v269 = 0;
      v270 = 0;
    }
LABEL_22:
    while (v31 != v33 && !*(_QWORD *)(*(_QWORD *)v31 + 8))
    {
      v134 = v31 + 16;
      v269 = v134;
      v31 = v32;
      if (v134 != v32)
      {
        v31 = v134;
        while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
        {
          v31 += 16;
          v269 = v31;
          if (v31 == v32)
          {
            v31 = v32;
            goto LABEL_22;
          }
        }
      }
    }
  }
  else
  {
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v266, v19);
    v21 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  }
  if (v21)
    v21 += 16 * *(unsigned int *)(v21 - 4);
  if (v269 == v21 || (v261 = *(_QWORD *)(v269 + 8), (v261 & 0xFF00000000) == 0))
  {
LABEL_26:
    if ((*((_BYTE *)a4 + 45) & 4) == 0)
    {
      if ((*((_BYTE *)a4 + 45) & 0x20) == 0)
      {
        LODWORD(v261) = 0;
        goto LABEL_45;
      }
      v201 = WebCore::RenderInline::innerPaddingBoxWidth((WebCore::RenderInline *)a4, (WebCore::RenderObject *)v19);
      goto LABEL_394;
    }
    v34 = *((_DWORD *)this + 5);
    if ((v34 & 0x1800000) == 0x1000000)
    {
      v100 = this;
      if ((*((_BYTE *)this + 45) & 2) != 0)
        v100 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
      v35 = (*((_QWORD *)v100 + 12) & 0x380000) == 3145728;
    }
    else
    {
      v35 = 0;
    }
    if ((v34 & 0x10000000) != 0 && (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 648))(this))
    {
      if ((*((_BYTE *)a4 + 45) & 0x40) != 0)
      {
        ++*((_DWORD *)a4 + 4);
        if ((*((_BYTE *)a4 + 52) & 7) == 1 && (*((_BYTE *)a4 + 53) & 2) != 0)
        {
          Fragment = WebCore::RenderFragmentedFlow::contentLogicalWidthOfFirstFragment((WebCore::RenderFragmentedFlow *)a4, v238);
        }
        else
        {
          v247 = *((_QWORD *)this + 4);
          if (!v247
            || (v248 = *(_QWORD *)(v247 + 8)) == 0
            || ((*((_DWORD *)this + 31) ^ *(_DWORD *)(v248 + 124)) & 0xE000) != 0)
          {
            v249 = (*(uint64_t (**)(uint64_t *))(*a4 + 1288))(a4);
            v250 = (WebCore::RenderFragmentContainer *)WebCore::RenderBlock::fragmentAtBlockOffset(a4, v249);
            if (v250)
            {
              v251 = WebCore::RenderFragmentContainer::renderBoxFragmentInfo(v250, (const WebCore::RenderBox *)a4);
              if (v251)
              {
                v252 = v251;
                v253 = WebCore::RenderBox::clientLogicalWidth((WebCore::RenderBox *)a4);
                if (((*((_DWORD *)a4 + 31) >> 13) & 6u) - 2 < 4)
                  v254 = (unsigned int *)a4 + 41;
                else
                  v254 = (unsigned int *)(a4 + 20);
                v255 = *v254;
                v256 = *(_DWORD *)(v252 + 4);
                v44 = __OFSUB__(v255, v256);
                v257 = v255 - v256;
                if (v44)
                  v257 = (v255 >> 31) + 0x7FFFFFFF;
                v44 = __OFSUB__(v253, v257);
                v258 = v253 - v257;
                if (v44)
                  v258 = (v253 >> 31) + 0x7FFFFFFF;
                LODWORD(v261) = v258 & ~(v258 >> 31);
                goto LABEL_487;
              }
            }
          }
          Fragment = WebCore::RenderBox::clientLogicalWidth((WebCore::RenderBox *)a4);
        }
        LODWORD(v261) = Fragment;
LABEL_487:
        v240 = *((_DWORD *)a4 + 4);
        if (!v240)
        {
          __break(0xC471u);
          JUMPOUT(0x1941450E0);
        }
        *((_DWORD *)a4 + 4) = v240 - 1;
        goto LABEL_45;
      }
      v201 = WebCore::RenderBox::clientLogicalWidth((WebCore::RenderBox *)a4);
LABEL_394:
      LODWORD(v261) = v201;
      goto LABEL_45;
    }
    if (v35 && *((_BYTE *)a4 + 46) == 49)
    {
      v201 = WebCore::RenderView::clientLogicalWidthForFixedPosition((WebCore::RenderView *)a4);
      goto LABEL_394;
    }
    if ((*((_BYTE *)a4 + 45) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194144750);
    }
    v36 = *a4;
    if (((*((_DWORD *)a4 + 31) >> 13) & 6u) - 2 < 4)
    {
      v243 = *((_DWORD *)a4 + 41);
      v244 = (*(uint64_t (**)(uint64_t *))(v36 + 1000))(a4);
      v245 = v243 - v244;
      if (__OFSUB__(v243, v244))
        v245 = (v243 >> 31) + 0x7FFFFFFF;
      v246 = (*(uint64_t (**)(uint64_t *))(*a4 + 1008))(a4);
      v41 = v245 - v246;
      if (__OFSUB__(v245, v246))
        v41 = (v245 >> 31) + 0x7FFFFFFF;
      v42 = (*(uint64_t (**)(uint64_t *))(*a4 + 1360))(a4);
    }
    else
    {
      v37 = *((_DWORD *)a4 + 40);
      v38 = (*(uint64_t (**)(uint64_t *))(v36 + 1016))(a4);
      v39 = v37 - v38;
      if (__OFSUB__(v37, v38))
        v39 = (v37 >> 31) + 0x7FFFFFFF;
      v40 = (*(uint64_t (**)(uint64_t *))(*a4 + 1024))(a4);
      v41 = v39 - v40;
      if (__OFSUB__(v39, v40))
        v41 = (v39 >> 31) + 0x7FFFFFFF;
      v42 = (*(uint64_t (**)(uint64_t *))(*a4 + 1352))(a4);
    }
    v43 = v42 << 6;
    if (v42 < -33554432)
      v43 = 0x80000000;
    if (v42 > 0x1FFFFFF)
      v43 = 0x7FFFFFFF;
    v44 = __OFSUB__(v41, v43);
    v45 = v41 - v43;
    if (v44)
      v45 = (v41 >> 31) + 0x7FFFFFFF;
    LODWORD(v261) = v45 & ~(v45 >> 31);
  }
LABEL_45:
  if (v16)
    shouldComputeLogicalHeightFromAspectRatio = 0;
  else
    shouldComputeLogicalHeightFromAspectRatio = WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio(this, (const WebCore::RenderBox *)v19);
  v47 = 0;
  v48 = *((unsigned __int8 *)a3 + 4);
  v49 = !shouldComputeLogicalHeightFromAspectRatio;
  if (*((_BYTE *)a3 + 4))
    v49 = 0;
  v50 = a8[4];
  v51 = a9[4];
  v52 = *((unsigned __int8 *)this + 46);
  v53 = v18;
  if (v52 != 35 && v52 != 63)
  {
    v47 = v49;
    if (v48 - 7 <= 3)
    {
      WebCore::Length::Length((WebCore::Length *)&v264, (const WebCore::Length *)a3);
      v221 = WebCore::RenderBox::computeIntrinsicLogicalContentHeightUsing(this, (uint64_t)&v264, v18 | 0x100000000, a6);
      if (HIDWORD(v221))
        v222 = v221 | 0x100000000;
      else
        v222 = 0x100000000;
      v223 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)this + 1272))(this, v222);
      if (v265 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v264);
      }
      v53 = v223;
    }
    else
    {
      if (!shouldComputeLogicalHeightFromAspectRatio)
      {
        switch(v48)
        {
          case 4u:
            v54 = *(float *)a3;
            if (!*((_BYTE *)a3 + 6))
              v54 = (float)(int)*a3;
            break;
          case 3u:
            v125 = *(float *)a3;
            if (!*((_BYTE *)a3 + 6))
              v125 = (float)(int)*a3;
            v54 = (float)((float)((float)a5 * 0.015625) * v125) / 100.0;
            break;
          case 0xBu:
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a3, (float)a5 * 0.015625);
            break;
          default:
            if (v48 >= 2)
              v57 = 0;
            else
              v57 = a5;
            goto LABEL_62;
        }
        v55 = v54 * 64.0;
        if (v55 < 2147483650.0 && v55 > -2147483650.0)
          goto LABEL_61;
        if (v55 >= 2147483650.0)
        {
          v57 = 0x7FFFFFFF;
          goto LABEL_62;
        }
        if (v55 <= -2147483650.0)
          v57 = 0x80000000;
        else
LABEL_61:
          v57 = (int)v55;
LABEL_62:
        v53 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)this + 1272))(this, v57 | 0x100000000);
        goto LABEL_63;
      }
      v224 = WebCore::RenderBoxModelObject::horizontalBorderAndPaddingExtent(this);
      v225 = WebCore::RenderBoxModelObject::verticalBorderAndPaddingExtent(this);
      v226 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
      v227 = *((_QWORD *)this + 11);
      v228 = *(_QWORD *)(v227 + 32);
      v229 = (double *)(v228 + 112);
      if (v226 >= 4)
        v230 = (double *)(v228 + 112);
      else
        v230 = (double *)(v228 + 104);
      if (v226 >= 4)
        v229 = (double *)(v228 + 104);
      v231 = *(_DWORD *)(v228 + 148);
      if ((v231 & 0x60) == 0x40)
        v232 = 0;
      else
        v232 = (*(unsigned __int8 *)(*(_QWORD *)(v227 + 8) + 68) >> 2) & 1;
      if (v226 < 4)
        v233 = (int *)((char *)this + 164);
      else
        v233 = (int *)((char *)this + 160);
      v234 = WebCore::RenderBox::blockSizeFromAspectRatio(v224, v225, v232, *v233, (v231 >> 5) & 3, (*((_BYTE *)this + 52) & 7) == 3, *v229 / *v230);
      v235 = v234 - a6;
      if (__OFSUB__(v234, a6))
        v235 = (v234 >> 31) + 0x7FFFFFFF;
      v53 = v235 & ~(v235 >> 31);
    }
  }
LABEL_63:
  if (v50)
    v58 = v47;
  else
    v58 = 1;
  if ((v58 & 1) == 0 && v51)
  {
    if (a8[4] == 4)
    {
      v108 = *(float *)a8;
      if (!a8[6])
        v108 = (float)*(int *)a8;
      v109 = v108 * 64.0;
      v110 = v109 >= 2147483650.0 || v109 <= -2147483650.0;
      v111 = (WebCore::Length *)a9;
      if (!v110)
      {
LABEL_165:
        v78 = (int)v109;
        goto LABEL_166;
      }
LABEL_224:
      if (v109 >= 2147483650.0)
      {
        v78 = 0x7FFFFFFF;
      }
      else if (v109 <= -2147483650.0)
      {
        v78 = 0x80000000;
      }
      else
      {
        v78 = (int)v109;
      }
    }
    else
    {
      v78 = 0;
      v111 = (WebCore::Length *)a9;
      switch(a8[4])
      {
        case 0u:
        case 1u:
        case 9u:
          v78 = a5;
          goto LABEL_166;
        case 3u:
          v131 = *(float *)a8;
          if (!a8[6])
            v131 = (float)*(int *)a8;
          v109 = (float)((float)((float)((float)a5 * 0.015625) * v131) / 100.0) * 64.0;
          if (v109 < 2147483650.0 && v109 > -2147483650.0)
            goto LABEL_165;
          goto LABEL_224;
        case 0xBu:
          v186 = v53;
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a8, (float)a5 * 0.015625);
          v188 = v187 * 64.0;
          if (v188 < 2147483650.0 && v188 > -2147483650.0)
          {
            v78 = (int)v188;
            v53 = v186;
            goto LABEL_166;
          }
          if (v188 >= 2147483650.0)
          {
            v78 = 0x7FFFFFFF;
          }
          else if (v188 <= -2147483650.0)
          {
            v78 = 0x80000000;
          }
          else
          {
            v78 = (int)v188;
          }
          v53 = v186;
          break;
        default:
          goto LABEL_166;
      }
    }
    v111 = (WebCore::Length *)a9;
LABEL_166:
    v112 = v78 + v53;
    if (__OFADD__(v78, v53))
      v112 = (v78 >> 31) + 0x7FFFFFFF;
    if (*((_BYTE *)v111 + 4) == 4)
    {
      v113 = *(float *)v111;
      if (!*((_BYTE *)v111 + 6))
        v113 = (float)*(int *)v111;
LABEL_171:
      v114 = v113 * 64.0;
      if (v114 < 2147483650.0 && v114 > -2147483650.0)
        goto LABEL_175;
      if (v114 >= 2147483650.0)
      {
        v116 = 0x7FFFFFFF;
      }
      else
      {
        if (v114 > -2147483650.0)
        {
LABEL_175:
          v116 = (int)v114;
          goto LABEL_176;
        }
        v116 = 0x80000000;
      }
    }
    else
    {
      v116 = 0;
      switch(*((_BYTE *)v111 + 4))
      {
        case 0:
        case 1:
        case 9:
          v116 = a5;
          break;
        case 3:
          v133 = *(float *)v111;
          if (!*((_BYTE *)v111 + 6))
            v133 = (float)*(int *)v111;
          v113 = (float)((float)((float)a5 * 0.015625) * v133) / 100.0;
          goto LABEL_171;
        case 0xB:
          v190 = v53;
          WebCore::Length::nonNanCalculatedValue(v111, (float)a5 * 0.015625);
          v192 = v191 * 64.0;
          if (v192 < 2147483650.0 && v192 > -2147483650.0)
            goto LABEL_375;
          if (v192 >= 2147483650.0)
          {
            v116 = 0x7FFFFFFF;
          }
          else if (v192 > -2147483650.0)
          {
LABEL_375:
            v116 = (int)v192;
          }
          else
          {
            v116 = 0x80000000;
          }
          v53 = v190;
          break;
        default:
          break;
      }
    }
LABEL_176:
    v44 = __OFADD__(v112, v116);
    v117 = v112 + v116;
    if (v44)
      v117 = (v112 >> 31) + 0x7FFFFFFF;
    v118 = v117 + a6;
    if (__OFADD__(v117, a6))
      v118 = (v117 >> 31) + 0x7FFFFFFF;
    v119 = a5 - v118;
    if (__OFSUB__(a5, v118))
      v119 = (a5 >> 31) + 0x7FFFFFFF;
    v120 = a11[4];
    if (!*((_BYTE *)a10 + 4))
    {
      if (a11[4])
      {
        v177 = v53;
        v217 = WebCore::valueForLength(a11, v261);
        a12[3] = v217;
        v218 = v119 - v217;
        if (__OFSUB__(v119, v217))
          v218 = (v119 >> 31) + 0x7FFFFFFF;
        a12[2] = v218;
        goto LABEL_340;
      }
      if (v119 >= 0)
        v121 = v119;
      else
        v121 = v119 + 1;
      a12[2] = v121 >> 1;
      v44 = __OFSUB__(v119, v121 >> 1);
      v122 = v119 - (v121 >> 1);
      if (!v44)
      {
LABEL_188:
        a12[3] = v122;
        goto LABEL_112;
      }
LABEL_441:
      v122 = (v119 >> 31) + 0x7FFFFFFF;
      goto LABEL_188;
    }
    v146 = 0;
    switch(*((_BYTE *)a10 + 4))
    {
      case 1:
      case 9:
        v146 = v261;
        break;
      case 3:
        v185 = *(float *)a10;
        if (!*((_BYTE *)a10 + 6))
          v185 = (float)*(int *)a10;
        v147 = (float)((float)((float)(int)v261 * 0.015625) * v185) / 100.0;
        goto LABEL_271;
      case 4:
        v147 = *(float *)a10;
        if (!*((_BYTE *)a10 + 6))
          v147 = (float)*(int *)a10;
LABEL_271:
        v148 = v147 * 64.0;
        if (v148 < 2147483650.0 && v148 > -2147483650.0)
          goto LABEL_275;
        if (v148 >= 2147483650.0)
        {
          v146 = 0x7FFFFFFF;
        }
        else if (v148 > -2147483650.0)
        {
LABEL_275:
          v146 = (int)v148;
        }
        else
        {
          v146 = 0x80000000;
        }
        break;
      case 0xB:
        v206 = v53;
        WebCore::Length::nonNanCalculatedValue(a10, (float)(int)v261 * 0.015625);
        v208 = v207 * 64.0;
        if (v208 < 2147483650.0 && v208 > -2147483650.0)
          goto LABEL_410;
        if (v208 >= 2147483650.0)
        {
          v146 = 0x7FFFFFFF;
        }
        else if (v208 > -2147483650.0)
        {
LABEL_410:
          v146 = (int)v208;
        }
        else
        {
          v146 = 0x80000000;
        }
        v53 = v206;
        break;
      default:
        break;
    }
    a12[2] = v146;
    if (!v120)
    {
      v44 = __OFSUB__(v119, v146);
      v122 = v119 - v146;
      if (!v44)
        goto LABEL_188;
      goto LABEL_441;
    }
    if (a11[4] == 4)
    {
      v150 = *(float *)a11;
      if (!a11[6])
        v150 = (float)*(int *)a11;
LABEL_280:
      v151 = v150 * 64.0;
      if (v151 < 2147483650.0 && v151 > -2147483650.0)
        goto LABEL_284;
      if (v151 >= 2147483650.0)
      {
        v153 = 0x7FFFFFFF;
      }
      else
      {
        if (v151 > -2147483650.0)
        {
LABEL_284:
          v153 = (int)v151;
          goto LABEL_285;
        }
        v153 = 0x80000000;
      }
    }
    else
    {
      v153 = 0;
      switch(a11[4])
      {
        case 0u:
        case 1u:
        case 9u:
          v153 = v261;
          break;
        case 3u:
          v184 = *(float *)a11;
          if (!a11[6])
            v184 = (float)*(int *)a11;
          v150 = (float)((float)((float)(int)v261 * 0.015625) * v184) / 100.0;
          goto LABEL_280;
        case 0xBu:
          v213 = v53;
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a11, (float)(int)v261 * 0.015625);
          v215 = v214 * 64.0;
          if (v215 < 2147483650.0 && v215 > -2147483650.0)
            goto LABEL_426;
          if (v215 >= 2147483650.0)
          {
            v153 = 0x7FFFFFFF;
          }
          else if (v215 > -2147483650.0)
          {
LABEL_426:
            v153 = (int)v215;
          }
          else
          {
            v153 = 0x80000000;
          }
          v53 = v213;
          break;
        default:
          break;
      }
    }
LABEL_285:
    a12[3] = v153;
    if (((*((_BYTE *)this + 21) & 0x10) == 0) != ((*((_BYTE *)a4 + 21) & 0x10) == 0))
    {
      v154 = v53;
      v155 = WebCore::valueForLength((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 32), a5);
      v78 = v155;
      if ((*((_BYTE *)a4 + 123) & 4) != 0)
      {
        v156 = v155 + v154;
        if (__OFADD__(v155, v154))
          v156 = (v155 >> 31) + 0x7FFFFFFF;
        v157 = WebCore::valueForLength((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 16), a5);
        v158 = v156 + v157;
        if (__OFADD__(v156, v157))
          v158 = (v156 >> 31) + 0x7FFFFFFF;
        v159 = v158 + a6;
        if (__OFADD__(v158, a6))
          v159 = (v158 >> 31) + 0x7FFFFFFF;
        v44 = __OFSUB__(a5, v159);
        v160 = a5 - v159;
        if (v44)
          v160 = (a5 >> 31) + 0x7FFFFFFF;
        v161 = v160 + v78;
        if (__OFADD__(v160, v78))
          v161 = (v160 >> 31) + 0x7FFFFFFF;
        v162 = a12[2];
        v44 = __OFSUB__(v161, v162);
        v163 = v161 - v162;
        if (v44)
          v163 = (v161 >> 31) + 0x7FFFFFFF;
        v164 = a12[3];
        v78 = v163 - v164;
        if (__OFSUB__(v163, v164))
          v78 = (v163 >> 31) + 0x7FFFFFFF;
      }
      LODWORD(v18) = v154;
      goto LABEL_113;
    }
    goto LABEL_112;
  }
  v59 = *((unsigned __int8 *)a10 + 4);
  if (v59 == 4)
  {
    v60 = *(float *)a10;
    if (!*((_BYTE *)a10 + 6))
      v60 = (float)*(int *)a10;
    goto LABEL_71;
  }
  if (v59 != 3)
  {
    if (v59 != 11)
    {
      v63 = 0;
      goto LABEL_76;
    }
    v260 = v53;
    WebCore::Length::nonNanCalculatedValue(a10, (float)(int)v261 * 0.015625);
    v195 = v194 * 64.0;
    if (v195 < 2147483650.0 && v195 > -2147483650.0)
      goto LABEL_384;
    if (v195 >= 2147483650.0)
    {
      v63 = 0x7FFFFFFF;
      goto LABEL_385;
    }
    if (v195 <= -2147483650.0)
      v63 = 0x80000000;
    else
LABEL_384:
      v63 = (int)v195;
LABEL_385:
    v53 = v260;
    goto LABEL_76;
  }
  v126 = *(float *)a10;
  if (!*((_BYTE *)a10 + 6))
    v126 = (float)*(int *)a10;
  v60 = (float)((float)((float)(int)v261 * 0.015625) * v126) / 100.0;
LABEL_71:
  v61 = v60 * 64.0;
  if (v61 < 2147483650.0 && v61 > -2147483650.0)
    goto LABEL_75;
  if (v61 >= 2147483650.0)
  {
    v63 = 0x7FFFFFFF;
  }
  else
  {
    if (v61 > -2147483650.0)
    {
LABEL_75:
      v63 = (int)v61;
      goto LABEL_76;
    }
    v63 = 0x80000000;
  }
LABEL_76:
  a12[2] = v63;
  v64 = a11[4];
  if (v64 == 4)
  {
    v65 = *(float *)a11;
    if (!a11[6])
      v65 = (float)*(int *)a11;
    goto LABEL_79;
  }
  if (v64 != 3)
  {
    if (v64 != 11)
    {
      v68 = 0;
      goto LABEL_84;
    }
    v197 = v53;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a11, (float)(int)v261 * 0.015625);
    v199 = v198 * 64.0;
    if (v199 < 2147483650.0 && v199 > -2147483650.0)
      goto LABEL_390;
    if (v199 >= 2147483650.0)
    {
      v68 = 0x7FFFFFFF;
      goto LABEL_391;
    }
    if (v199 <= -2147483650.0)
      v68 = 0x80000000;
    else
LABEL_390:
      v68 = (int)v199;
LABEL_391:
    v53 = v197;
    goto LABEL_84;
  }
  v127 = *(float *)a11;
  if (!a11[6])
    v127 = (float)*(int *)a11;
  v65 = (float)((float)((float)(int)v261 * 0.015625) * v127) / 100.0;
LABEL_79:
  v66 = v65 * 64.0;
  if (v66 < 2147483650.0 && v66 > -2147483650.0)
    goto LABEL_83;
  if (v66 >= 2147483650.0)
  {
    v68 = 0x7FFFFFFF;
  }
  else
  {
    if (v66 > -2147483650.0)
    {
LABEL_83:
      v68 = (int)v66;
      goto LABEL_84;
    }
    v68 = 0x80000000;
  }
LABEL_84:
  a12[3] = v68;
  v69 = a12[2];
  v44 = __OFADD__(v69, v68);
  v70 = v69 + v68;
  if (v44)
    v70 = (v69 >> 31) + 0x7FFFFFFF;
  v71 = v70 + a6;
  if (__OFADD__(v70, a6))
    v71 = (v70 >> 31) + 0x7FFFFFFF;
  v72 = a5 - v71;
  if (__OFSUB__(a5, v71))
    v72 = (a5 >> 31) + 0x7FFFFFFF;
  v73 = v47 ^ 1;
  if (!v50 && ((v47 ^ 1) & 1) == 0 && v51)
  {
    if (a9[4] != 4)
    {
      v143 = 0;
      switch(a9[4])
      {
        case 0u:
        case 1u:
        case 9u:
          v143 = a5;
          break;
        case 3u:
          v176 = *(float *)a9;
          if (!a9[6])
            v176 = (float)*(int *)a9;
          v140 = (float)((float)((float)a5 * 0.015625) * v176) / 100.0;
          goto LABEL_254;
        case 0xBu:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a9, (float)a5 * 0.015625);
          goto LABEL_254;
        default:
          goto LABEL_259;
      }
      goto LABEL_259;
    }
    v140 = *(float *)a9;
    if (!a9[6])
      v140 = (float)*(int *)a9;
LABEL_254:
    v141 = v140 * 64.0;
    if (v141 < 2147483650.0 && v141 > -2147483650.0)
      goto LABEL_258;
    if (v141 >= 2147483650.0)
    {
      v143 = 0x7FFFFFFF;
      goto LABEL_259;
    }
    if (v141 <= -2147483650.0)
      v143 = 0x80000000;
    else
LABEL_258:
      v143 = (int)v141;
LABEL_259:
    v44 = __OFADD__((_DWORD)v18, v143);
    v144 = v18 + v143;
    if (v44)
      v144 = (v18 >> 31) + 0x7FFFFFFF;
    v78 = v72 - v144;
    if (__OFSUB__(v72, v144))
      v78 = (v72 >> 31) + 0x7FFFFFFF;
    goto LABEL_113;
  }
  if (!v50)
    v73 = 1;
  if ((v73 & 1) != 0 || v51)
  {
    if ((v50 != 0) | v47 & 1 || !v51)
    {
      if (v51)
        v74 = v73;
      else
        v74 = 1;
      if ((v74 & 1) != 0)
      {
        if (v58 & 1 | (v51 != 0))
        {
          v78 = 0;
          LODWORD(v18) = 0;
          goto LABEL_113;
        }
        if (a8[4] == 4)
        {
          v75 = *(float *)a8;
          if (!a8[6])
            v75 = (float)*(int *)a8;
LABEL_107:
          v76 = v75 * 64.0;
          if (v76 < 2147483650.0 && v76 > -2147483650.0)
            goto LABEL_111;
          if (v76 >= 2147483650.0)
          {
            v78 = 0x7FFFFFFF;
            goto LABEL_112;
          }
          if (v76 <= -2147483650.0)
            v78 = 0x80000000;
          else
LABEL_111:
            v78 = (int)v76;
LABEL_112:
          LODWORD(v18) = v53;
          goto LABEL_113;
        }
        v78 = 0;
        LODWORD(v18) = v53;
        switch(a8[4])
        {
          case 0u:
          case 1u:
          case 9u:
            v78 = a5;
            goto LABEL_112;
          case 2u:
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 0xAu:
            goto LABEL_113;
          case 3u:
            v107 = *(float *)a8;
            if (!a8[6])
              v107 = (float)*(int *)a8;
            v75 = (float)((float)((float)a5 * 0.015625) * v107) / 100.0;
            goto LABEL_107;
          case 0xBu:
            v177 = v53;
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a8, (float)a5 * 0.015625);
            v179 = v178 * 64.0;
            if (v179 < 2147483650.0 && v179 > -2147483650.0)
              goto LABEL_339;
            if (v179 >= 2147483650.0)
            {
              v78 = 0x7FFFFFFF;
            }
            else if (v179 > -2147483650.0)
            {
LABEL_339:
              v78 = (int)v179;
            }
            else
            {
              v78 = 0x80000000;
            }
            break;
          default:
            goto LABEL_112;
        }
LABEL_340:
        LODWORD(v18) = v177;
        goto LABEL_113;
      }
      if (a8[4] == 4)
      {
        v165 = *(float *)a8;
        if (!a8[6])
          v165 = (float)*(int *)a8;
        v166 = v165 * 64.0;
        v167 = v166 >= 2147483650.0 || v166 <= -2147483650.0;
        v168 = (WebCore::Length *)a9;
        if (v167)
        {
LABEL_556:
          if (v166 >= 2147483650.0)
          {
            v78 = 0x7FFFFFFF;
          }
          else if (v166 > -2147483650.0)
          {
LABEL_416:
            v78 = (int)v166;
          }
          else
          {
            v78 = 0x80000000;
          }
          v168 = (WebCore::Length *)a9;
        }
        else
        {
LABEL_309:
          v78 = (int)v166;
        }
      }
      else
      {
        v78 = 0;
        v168 = (WebCore::Length *)a9;
        switch(a8[4])
        {
          case 0u:
          case 1u:
          case 9u:
            v78 = a5;
            break;
          case 3u:
            v181 = *(float *)a8;
            if (!a8[6])
              v181 = (float)*(int *)a8;
            v166 = (float)((float)((float)((float)a5 * 0.015625) * v181) / 100.0) * 64.0;
            if (v166 < 2147483650.0 && v166 > -2147483650.0)
              goto LABEL_309;
            goto LABEL_556;
          case 0xBu:
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a8, (float)a5 * 0.015625);
            v166 = v210 * 64.0;
            if (v166 < 2147483650.0 && v166 > -2147483650.0)
              goto LABEL_416;
            goto LABEL_556;
          default:
            break;
        }
      }
      if (*((_BYTE *)v168 + 4) != 4)
      {
        v172 = 0;
        switch(*((_BYTE *)v168 + 4))
        {
          case 0:
          case 1:
          case 9:
            v172 = a5;
            goto LABEL_318;
          case 3:
            v183 = *(float *)v168;
            if (!*((_BYTE *)v168 + 6))
              v183 = (float)*(int *)v168;
            v169 = (float)((float)((float)a5 * 0.015625) * v183) / 100.0;
            goto LABEL_313;
          case 0xB:
            WebCore::Length::nonNanCalculatedValue(v168, (float)a5 * 0.015625);
            v170 = v212 * 64.0;
            if (v170 < 2147483650.0 && v170 > -2147483650.0)
              goto LABEL_317;
            if (v170 < 2147483650.0)
              goto LABEL_560;
            goto LABEL_600;
          default:
            goto LABEL_318;
        }
      }
      v169 = *(float *)v168;
      if (!*((_BYTE *)v168 + 6))
        v169 = (float)*(int *)v168;
LABEL_313:
      v170 = v169 * 64.0;
      if (v170 < 2147483650.0 && v170 > -2147483650.0)
        goto LABEL_317;
      if (v170 >= 2147483650.0)
      {
LABEL_600:
        v172 = 0x7FFFFFFF;
        goto LABEL_318;
      }
LABEL_560:
      if (v170 <= -2147483650.0)
        v172 = 0x80000000;
      else
LABEL_317:
        v172 = (int)v170;
LABEL_318:
      v44 = __OFADD__(v78, v172);
      v173 = v78 + v172;
      if (v44)
        v173 = (v78 >> 31) + 0x7FFFFFFF;
      v44 = __OFSUB__(v72, v173);
      v174 = v72 - v173;
      if (v44)
        v174 = (v72 >> 31) + 0x7FFFFFFF;
      LODWORD(v18) = v174 & ~(v174 >> 31);
      goto LABEL_113;
    }
    if (a9[4] != 4)
    {
      v138 = 0;
      switch(a9[4])
      {
        case 0u:
        case 1u:
        case 9u:
          v138 = a5;
          goto LABEL_246;
        case 3u:
          v175 = *(float *)a9;
          if (!a9[6])
            v175 = (float)*(int *)a9;
          v135 = (float)((float)((float)a5 * 0.015625) * v175) / 100.0;
          goto LABEL_241;
        case 0xBu:
          v202 = v53;
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a9, (float)a5 * 0.015625);
          v204 = v203 * 64.0;
          if (v204 < 2147483650.0 && v204 > -2147483650.0)
            goto LABEL_401;
          if (v204 >= 2147483650.0)
          {
            v138 = 0x7FFFFFFF;
          }
          else if (v204 > -2147483650.0)
          {
LABEL_401:
            v138 = (int)v204;
          }
          else
          {
            v138 = 0x80000000;
          }
          v53 = v202;
          break;
        default:
          goto LABEL_246;
      }
      goto LABEL_246;
    }
    v135 = *(float *)a9;
    if (!a9[6])
      v135 = (float)*(int *)a9;
LABEL_241:
    v136 = v135 * 64.0;
    if (v136 < 2147483650.0 && v136 > -2147483650.0)
      goto LABEL_245;
    if (v136 >= 2147483650.0)
    {
      v138 = 0x7FFFFFFF;
      goto LABEL_246;
    }
    if (v136 <= -2147483650.0)
      v138 = 0x80000000;
    else
LABEL_245:
      v138 = (int)v136;
LABEL_246:
    v44 = __OFADD__(v53, v138);
    v139 = v53 + v138;
    if (v44)
      v139 = (v53 >> 31) + 0x7FFFFFFF;
    v78 = v72 - v139;
    if (__OFSUB__(v72, v139))
      v78 = (v72 >> 31) + 0x7FFFFFFF;
    goto LABEL_112;
  }
  if (a8[4] != 4)
  {
    v78 = 0;
    switch(a8[4])
    {
      case 0u:
      case 1u:
      case 9u:
        v78 = a5;
        break;
      case 3u:
        v145 = *(float *)a8;
        if (!a8[6])
          v145 = (float)*(int *)a8;
        v128 = (float)((float)((float)a5 * 0.015625) * v145) / 100.0;
        goto LABEL_209;
      case 0xBu:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a8, (float)a5 * 0.015625);
        goto LABEL_209;
      default:
        goto LABEL_113;
    }
    goto LABEL_113;
  }
  v128 = *(float *)a8;
  if (!a8[6])
    v128 = (float)*(int *)a8;
LABEL_209:
  v129 = v128 * 64.0;
  if (v129 < 2147483650.0 && v129 > -2147483650.0)
    goto LABEL_213;
  if (v129 >= 2147483650.0)
  {
    v78 = 0x7FFFFFFF;
    goto LABEL_113;
  }
  if (v129 <= -2147483650.0)
    v78 = 0x80000000;
  else
LABEL_213:
    v78 = (int)v129;
LABEL_113:
  *a12 = v18;
  v79 = a12[2];
  v44 = __OFADD__(v78, v79);
  v80 = v78 + v79;
  if (v44)
    v80 = (v78 >> 31) + 0x7FFFFFFF;
  a12[1] = v80;
  v81 = v18 + a6;
  if (__OFADD__((_DWORD)v18, a6))
    v81 = (v18 >> 31) + 0x7FFFFFFF;
  v82 = *((_QWORD *)this + 11);
  v83 = *(_QWORD *)(v82 + 24);
  v84 = *((_DWORD *)this + 31);
  v85 = (unsigned __int16)v84 >> 13;
  v237 = 3;
  switch((unsigned __int16)v84 >> 13)
  {
    case 1:
      v88 = *(_BYTE *)(v83 + 28) == 0;
LABEL_516:
      v259 = *(unsigned __int8 *)(v83 + 12);
      v89 = v259 == 0;
      if (v259)
        v90 = 0;
      else
        v90 = v88;
      v91 = (int *)((char *)this + 20);
      v92 = ((*((_BYTE *)this + 21) & 0x10) == 0) ^ ((*((_BYTE *)a4 + 21) & 0x10) == 0);
LABEL_520:
      v241 = 1;
      goto LABEL_123;
    case 2:
    case 4:
      goto LABEL_119;
    case 3:
    case 5:
      v237 = 1;
      goto LABEL_119;
    default:
      v237 = 0;
LABEL_119:
      v86 = v83 + 8;
      v87 = *(unsigned __int8 *)(v83 + 8 + 8 * v237 + 4);
      v88 = v87 == 0;
      v236 = 3;
      switch((unsigned __int16)v84 >> 13)
      {
        case 1:
          goto LABEL_516;
        case 2:
        case 4:
          v236 = 1;
          break;
        case 3:
        case 5:
          break;
        default:
          v236 = 2;
          break;
      }
      v89 = *(_BYTE *)(v86 + 8 * v236 + 4) == 0;
      v90 = (*(unsigned __int8 *)(v86 + 8 * v236 + 4) | v87) == 0;
      v91 = (int *)((char *)this + 20);
      v92 = ((*((_BYTE *)this + 21) & 0x10) == 0) ^ ((*((_BYTE *)a4 + 21) & 0x10) == 0);
      v241 = 2;
      switch((unsigned __int16)v84 >> 13)
      {
        case 1:
          goto LABEL_520;
        case 2:
        case 4:
          break;
        case 3:
        case 5:
          v241 = 3;
          break;
        default:
          v241 = 0;
          break;
      }
LABEL_123:
      v93 = (unsigned __int16)*((_DWORD *)a4 + 31) >> 13;
      v242 = 2;
      break;
  }
  switch((unsigned __int16)*((_DWORD *)a4 + 31) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_125;
    case 3:
    case 5:
      v93 = 3;
      goto LABEL_125;
    case 4:
      goto LABEL_126;
    default:
      v93 = 0;
LABEL_125:
      v242 = v93;
LABEL_126:
      if (!v89 && !v88)
      {
        v123 = *(_QWORD *)(v82 + 8);
        v124 = ((v84 >> 13) & 6) - 2 < 4 ? v123 + 4 : v123 + 12;
        if (*(_BYTE *)(v124 + 4))
          goto LABEL_146;
      }
      if (v90)
      {
        v94 = *((_QWORD *)this + 4);
        if (v94)
        {
          v95 = *(_QWORD *)(v94 + 8);
          if (v95)
          {
            if ((uint64_t *)v95 != a4 && (*(_BYTE *)(v95 + 45) & 0x40) != 0 && *(_BYTE *)(v95 + 46) != 12)
            {
              v96 = *(_DWORD *)(v95 + 124);
              v97 = (unsigned __int16)v96 >> 13;
              if (v97 <= 5 && ((1 << v97) & 0x2A) != 0)
              {
                v98 = *(_QWORD *)(v95 + 32);
                if (!v98 || (v99 = *(_QWORD *)(v98 + 8)) == 0 || ((*(_DWORD *)(v99 + 124) ^ v96) & 0xE000) != 0)
                {
                  if (__OFSUB__(v80, v81))
                    v80 = (v80 >> 31) + 0x7FFFFFFF;
                  else
                    v80 -= v81;
                  a12[1] = v80;
                }
              }
            }
          }
        }
LABEL_145:
        if (((v241 & 1) == 0) ^ ((v242 & 0xFFFFFFFD) == 1) | v92 & 1)
          goto LABEL_146;
        goto LABEL_445;
      }
      if (!v92)
        goto LABEL_145;
      if (v85 > 5 || ((1 << v85) & 0x2A) == 0)
        goto LABEL_146;
LABEL_445:
      v44 = __OFSUB__(a5, v81);
      v219 = a5 - v81;
      if (v44)
        v219 = (a5 >> 31) + 0x7FFFFFFF;
      v44 = __OFSUB__(v219, v80);
      v220 = v219 - v80;
      if (v44)
        v220 = (v219 >> 31) + 0x7FFFFFFF;
      a12[1] = v220;
LABEL_146:
      v101 = (unsigned __int16)*((_DWORD *)a4 + 31) >> 13;
      if (v101 > 5 || ((1 << v101) & 0x2A) == 0)
      {
        v102 = *v91;
        v103 = (uint64_t (**)(_QWORD))*a4;
        goto LABEL_149;
      }
      v102 = *v91;
      v103 = (uint64_t (**)(_QWORD))*a4;
      if ((v92 & 1) != 0)
      {
LABEL_149:
        if ((v102 & 0x1000) != 0)
          result = ((uint64_t (**)(uint64_t *))v103)[127](a4);
        else
          result = ((uint64_t (**)(uint64_t *))v103)[125](a4);
        goto LABEL_151;
      }
      if ((v102 & 0x1000) != 0)
        result = ((uint64_t (**)(uint64_t *))v103)[128](a4);
      else
        result = ((uint64_t (**)(uint64_t *))v103)[126](a4);
LABEL_151:
      v105 = a12[1];
      v106 = v105 + result;
      if (__OFADD__(v105, (_DWORD)result))
        v106 = (v105 >> 31) + 0x7FFFFFFF;
      a12[1] = v106;
      return result;
  }
}

uint64_t WebCore::valueForLength(unsigned __int8 *a1, int a2)
{
  unsigned int v2;
  float v4;
  double v5;
  float v8;
  float v9;

  v2 = a1[4];
  if (v2 - 3 < 2 || v2 == 11)
  {
    if (v2 == 4)
    {
      v4 = *(float *)a1;
      if (!a1[6])
        v4 = (float)*(int *)a1;
      v5 = v4 * 64.0;
      if (v5 < 2147483650.0 && v5 > -2147483650.0)
        return (int)v5;
      if (v5 < 2147483650.0)
        goto LABEL_36;
    }
    else
    {
      if (v2 == 3)
      {
        v8 = *(float *)a1;
        if (!a1[6])
          v8 = (float)*(int *)a1;
        v9 = (float)((float)((float)a2 * 0.015625) * v8) / 100.0;
      }
      else
      {
        if (v2 != 11)
          return 0;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a1, (float)a2 * 0.015625);
      }
      v5 = v9 * 64.0;
      if (v5 < 2147483650.0 && v5 > -2147483650.0)
        return (int)v5;
      if (v5 < 2147483650.0)
      {
LABEL_36:
        if (v5 <= -2147483650.0)
          return 0x80000000;
        return (int)v5;
      }
    }
    return 0x7FFFFFFFLL;
  }
  if (v2 < 2 || v2 == 9)
    return a2;
  else
    return 0;
}

uint64_t WebCore::RenderBox::containingBlockLogicalWidthForPositioned(WebCore::RenderBox *this, const WebCore::RenderBoxModelObject *a2, WebCore::RenderFragmentContainer *a3, int a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  WebCore::RenderBox *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t Fragment;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  WebCore::RenderFragmentContainer *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  WebCore::RenderFragmentContainer *v58;
  WebCore::RenderFragmentContainer *v59;
  WebCore::RenderBox *v60;
  WebCore::RenderBox *v61;
  char v62[8];
  uint64_t v63;
  uint64_t v64;

  if (a4 && ((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*((_BYTE *)this + 21) & 0x10) == 0))
    return WebCore::RenderBox::containingBlockLogicalHeightForPositioned(this, a2, 0);
  v5 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
  {
    ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalWidthMap + 8);
    v6 = *((_QWORD *)this + 1);
    if (v6 && *(_QWORD *)(v6 + 8))
    {
      v7 = *v5;
      if (*v5)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = *(_QWORD *)(v7 + 16 * v12);
          if (!v14)
          {
            v16 = *(unsigned int *)(v7 - 4);
            v17 = v7 + 16 * v16;
            v18 = v17;
            goto LABEL_14;
          }
          if (v14 != -1 && v14 == v6)
            break;
          v12 = (v12 + i) & v8;
        }
        v17 = v7 + 16 * v12;
        v16 = *(unsigned int *)(v7 - 4);
        v18 = v7 + 16 * v16;
LABEL_14:
        v63 = v17;
        v19 = v7 + 16 * v16;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v63 = 0;
        v64 = 0;
      }
LABEL_15:
      while (v17 != v19 && !*(_QWORD *)(*(_QWORD *)v17 + 8))
      {
        v35 = v17 + 16;
        v63 = v35;
        v17 = v18;
        if (v35 != v18)
        {
          v17 = v35;
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 16;
            v63 = v17;
            if (v17 == v18)
            {
              v17 = v18;
              goto LABEL_15;
            }
          }
        }
      }
    }
    else
    {
      v58 = a3;
      v60 = this;
      v56 = a4;
      WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)v62, v5);
      LOBYTE(a4) = v56;
      a3 = v58;
      this = v60;
      v7 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
    }
    if (v7)
      v7 += 16 * *(unsigned int *)(v7 - 4);
    if (v63 != v7)
    {
      v34 = *(_QWORD *)(v63 + 8);
      if ((v34 & 0xFF00000000) != 0)
        return v34;
    }
  }
  if ((*((_BYTE *)a2 + 45) & 4) != 0)
  {
    v20 = *((_DWORD *)this + 5);
    if ((v20 & 0x1800000) == 0x1000000)
    {
      v33 = this;
      if ((*((_BYTE *)this + 45) & 2) != 0)
        v33 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
      v21 = (*((_QWORD *)v33 + 12) & 0x380000) == 3145728;
    }
    else
    {
      v21 = 0;
    }
    if ((v20 & 0x10000000) != 0
      && (v59 = a3, v61 = this, v57 = a4, (v36 = (*(uint64_t (**)(void))(*(_QWORD *)this + 648))()) != 0))
    {
      if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
      {
        ++*((_DWORD *)a2 + 4);
        if (v59)
        {
          if (((*(_BYTE *)(v36 + 21) & 0x10) == 0) == ((*((_BYTE *)a2 + 21) & 0x10) == 0))
          {
            v44 = WebCore::RenderBox::clampToStartAndEndFragments(a2, v59);
            if (v44)
            {
LABEL_83:
              v45 = WebCore::RenderFragmentContainer::renderBoxFragmentInfo(v44, a2);
              if (v45)
              {
                v46 = v45;
                v47 = WebCore::RenderBox::clientLogicalWidth(a2);
                if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
                  v48 = (char *)a2 + 164;
                else
                  v48 = (char *)a2 + 160;
                v49 = *(_DWORD *)v48;
                v50 = *(_DWORD *)(v46 + 4);
                v30 = __OFSUB__(v49, v50);
                v51 = v49 - v50;
                if (v30)
                  v51 = (v49 >> 31) + 0x7FFFFFFF;
                v30 = __OFSUB__(v47, v51);
                v52 = v47 - v51;
                if (v30)
                  v52 = (v47 >> 31) + 0x7FFFFFFF;
                v34 = v52 & ~(v52 >> 31);
                goto LABEL_69;
              }
            }
          }
        }
        else
        {
          if ((*((_BYTE *)a2 + 52) & 7) == 1 && (*((_BYTE *)a2 + 53) & 2) != 0 && (v57 & 1) == 0)
          {
            Fragment = WebCore::RenderFragmentedFlow::contentLogicalWidthOfFirstFragment(a2, v37);
            goto LABEL_68;
          }
          v53 = *((_QWORD *)v61 + 4);
          if (!v53
            || (v54 = *(_QWORD *)(v53 + 8)) == 0
            || ((*((_DWORD *)v61 + 31) ^ *(_DWORD *)(v54 + 124)) & 0xE000) != 0)
          {
            v55 = (*(uint64_t (**)(const WebCore::RenderBoxModelObject *))(*(_QWORD *)a2 + 1288))(a2);
            v44 = (WebCore::RenderFragmentContainer *)WebCore::RenderBlock::fragmentAtBlockOffset(a2, v55);
            if (v44)
              goto LABEL_83;
          }
        }
        Fragment = WebCore::RenderBox::clientLogicalWidth(a2);
LABEL_68:
        v34 = Fragment;
LABEL_69:
        v39 = *((_DWORD *)a2 + 4);
        if (!v39)
        {
          __break(0xC471u);
          JUMPOUT(0x194145AA4);
        }
        *((_DWORD *)a2 + 4) = v39 - 1;
        return v34;
      }
      return WebCore::RenderBox::clientLogicalWidth(a2);
    }
    else if (v21 && *((_BYTE *)a2 + 46) == 49)
    {
      return WebCore::RenderView::clientLogicalWidthForFixedPosition(a2);
    }
    else
    {
      if ((*((_BYTE *)a2 + 45) & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194145850);
      }
      v22 = *(_QWORD *)a2;
      if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
      {
        v40 = *((_DWORD *)a2 + 41);
        v41 = (*(uint64_t (**)(const WebCore::RenderBoxModelObject *))(v22 + 1000))(a2);
        if (__OFSUB__(v40, v41))
          v42 = (v40 >> 31) + 0x7FFFFFFF;
        else
          v42 = v40 - v41;
        v43 = (*(uint64_t (**)(const WebCore::RenderBoxModelObject *))(*(_QWORD *)a2 + 1008))(a2);
        if (__OFSUB__(v42, v43))
          v27 = (v42 >> 31) + 0x7FFFFFFF;
        else
          v27 = v42 - v43;
        v28 = (*(uint64_t (**)(const WebCore::RenderBoxModelObject *))(*(_QWORD *)a2 + 1360))(a2);
      }
      else
      {
        v23 = *((_DWORD *)a2 + 40);
        v24 = (*(uint64_t (**)(const WebCore::RenderBoxModelObject *))(v22 + 1016))(a2);
        if (__OFSUB__(v23, v24))
          v25 = (v23 >> 31) + 0x7FFFFFFF;
        else
          v25 = v23 - v24;
        v26 = (*(uint64_t (**)(const WebCore::RenderBoxModelObject *))(*(_QWORD *)a2 + 1024))(a2);
        if (__OFSUB__(v25, v26))
          v27 = (v25 >> 31) + 0x7FFFFFFF;
        else
          v27 = v25 - v26;
        v28 = (*(uint64_t (**)(const WebCore::RenderBoxModelObject *))(*(_QWORD *)a2 + 1352))(a2);
      }
      v29 = v28 << 6;
      if (v28 < -33554432)
        v29 = 0x80000000;
      if (v28 > 0x1FFFFFF)
        v29 = 0x7FFFFFFF;
      v30 = __OFSUB__(v27, v29);
      v31 = v27 - v29;
      if (v30)
        v31 = (v27 >> 31) + 0x7FFFFFFF;
      return v31 & ~(v31 >> 31);
    }
  }
  else
  {
    if ((*((_BYTE *)a2 + 45) & 0x20) == 0)
      return 0;
    return WebCore::RenderInline::innerPaddingBoxWidth(a2, (WebCore::RenderObject *)v5);
  }
}

uint64_t WebCore::RenderTableCell::borderEnd(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebCore::RenderStyle *v8;
  int v9;
  uint64_t v10;
  float v11;
  double v12;
  uint64_t v14;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_20;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_20;
  if (*(_BYTE *)(v2 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x194145C04);
  }
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    goto LABEL_20;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_20;
  if (*(_BYTE *)(v4 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194145C24);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
LABEL_20:
    v8 = (WebCore::RenderTableCell *)((char *)this + 80);
    v9 = *((_DWORD *)this + 30);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    {
      if ((v9 & 0x4000000) == 0)
      {
LABEL_14:
        v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v11 = 0.0;
        if ((*(_BYTE *)(v10 + 148) & 0xE) != 0)
        {
          v14 = *(_QWORD *)(v10 + 200);
          if (*(_BYTE *)(v14 + 5) && *(_BYTE *)(v14 + 60) == 4)
          {
            if (*(_BYTE *)(v14 + 62))
              v11 = *(float *)(v14 + 56);
            else
              v11 = (float)*(int *)(v14 + 56);
          }
          else
          {
            v11 = *(float *)(v10 + 144);
          }
        }
        goto LABEL_15;
      }
      goto LABEL_22;
    }
LABEL_31:
    if ((v9 & 0x4000000) != 0)
      v11 = WebCore::RenderStyle::borderTopWidth(v8);
    else
      v11 = WebCore::RenderStyle::borderBottomWidth(v8);
    goto LABEL_15;
  }
  v7 = *(unsigned __int8 *)(v6 + 46);
  if (v7 != 35 && v7 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x194145C58);
  }
  if ((*(_BYTE *)(v6 + 124) & 4) != 0)
    return WebCore::RenderTableCell::borderHalfEnd(this, 0);
  v8 = (WebCore::RenderTableCell *)((char *)this + 80);
  v9 = *((_DWORD *)this + 30);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    goto LABEL_31;
  if ((v9 & 0x4000000) == 0)
    goto LABEL_14;
LABEL_22:
  v11 = WebCore::RenderStyle::borderLeftWidth(v8);
LABEL_15:
  v12 = v11 * 64.0;
  if (v12 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v12 <= -2147483650.0)
    return 0x80000000;
  return (int)v12;
}

__n128 WebCore::LocalFrameView::setVisualViewportOverrideRect(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(_BYTE *)(a1 + 1124) = a2[1].n128_u8[0];
  *(__n128 *)(a1 + 1108) = result;
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::setAlternateWebMPlayerEnabled(uint64_t this)
{
  WebCore::PlatformMediaSessionManager::m_alternateWebMPlayerEnabled = this;
  return this;
}

_DWORD **WebCore::MockContentFilterManager::setClient(_DWORD **a1, _DWORD **a2)
{
  return WTF::RefPtr<WebCore::MockContentFilterSettingsClient,WTF::RawPtrTraits<WebCore::MockContentFilterSettingsClient>,WTF::DefaultRefDerefTraits<WebCore::MockContentFilterSettingsClient>>::operator=(a1, *a2);
}

uint64_t WebCore::MediaSessionManagerCocoa::setMediaSourceInlinePaintingEnabled(uint64_t this)
{
  WebCore::s_mediaSourceInlinePaintingEnabled = this;
  return this;
}

void WebCore::SQLiteDatabase::~SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
  void *v2;
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  void *v9;

  WebCore::SQLiteDatabase::close(this);
  v3 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, v2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::Thread::~Thread((WTF::Thread *)v4);
      WTF::fastFree(v8, v9);
    }
  }
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v7, (WTF::StringImpl *)v2);
}

{
  void *v2;
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  void *v9;

  WebCore::SQLiteDatabase::close(this);
  v3 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, v2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::Thread::~Thread((WTF::Thread *)v4);
      WTF::fastFree(v8, v9);
    }
  }
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v7, (WTF::StringImpl *)v2);
}

unint64_t WebCore::LocalFrameView::expandedLayoutViewportSize(unsigned int *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  double v6;
  int v7;

  if (a3 == 0.0 || (LODWORD(v3) = *(_DWORD *)(a2 + 4), v4 = a1[1], v4 > (int)v3))
  {
    v5 = *a1;
    v3 = a1[1];
  }
  else
  {
    v6 = (a3 + 1.0) * ((double)v4 * 0.015625) * 64.0;
    if (v6 < 2147483650.0)
    {
      v7 = (int)fmax(v6, -2147483650.0);
      if ((int)v3 > v7)
        v4 = v7;
    }
    v5 = *a1;
    if (v4 >= (int)v3)
      v3 = v3;
    else
      v3 = v4;
  }
  return v5 | (unint64_t)(v3 << 32);
}

WebCore::SQLiteDatabaseTracker *WebCore::SQLiteStatement::columnText@<X0>(sqlite3_stmt **this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  WebCore::SQLiteDatabaseTracker *result;

  if ((sqlite3_stmt_busy(this[1]) || (result = WebCore::SQLiteStatement::step(this), (_DWORD)result == 100))
    && (result = (WebCore::SQLiteDatabaseTracker *)sqlite3_data_count(this[1]), (int)result > a2))
  {
    sqlite3_column_text(this[1], a2);
    sqlite3_column_bytes(this[1], a2);
    return (WebCore::SQLiteDatabaseTracker *)WTF::String::fromUTF8();
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::IOSurface::createSendRight(IOSurfaceRef *this)
{
  WTF::MachSendRight *MachPort;

  MachPort = (WTF::MachSendRight *)IOSurfaceCreateMachPort(this[6]);
  return WTF::MachSendRight::adopt(MachPort);
}

WebCore::ViewportConfiguration *WebCore::ViewportConfiguration::ViewportConfiguration(WebCore::ViewportConfiguration *this)
{
  *((_WORD *)this + 24) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_BYTE *)this + 50) = 1;
  *(_DWORD *)((char *)this + 51) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 106) = 1;
  *(_DWORD *)((char *)this + 107) = 1;
  *((_QWORD *)this + 7) = 0x408EA00000000000;
  *((_QWORD *)this + 8) = 0;
  *((_WORD *)this + 52) = 257;
  *(_OWORD *)((char *)this + 88) = xmmword_196A22670;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_196A22680;
  *((_BYTE *)this + 136) = 0;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)((char *)this + 140) = _Q0;
  *(_OWORD *)((char *)this + 156) = _Q0;
  *(_OWORD *)((char *)this + 172) = _Q0;
  *((_WORD *)this + 94) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0x3FF0000000000000;
  *((_QWORD *)this + 26) = 0;
  *(_QWORD *)((char *)this + 229) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  WebCore::ViewportConfiguration::updateConfiguration(this);
  return this;
}

{
  *((_WORD *)this + 24) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_BYTE *)this + 50) = 1;
  *(_DWORD *)((char *)this + 51) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 106) = 1;
  *(_DWORD *)((char *)this + 107) = 1;
  *((_QWORD *)this + 7) = 0x408EA00000000000;
  *((_QWORD *)this + 8) = 0;
  *((_WORD *)this + 52) = 257;
  *(_OWORD *)((char *)this + 88) = xmmword_196A22670;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_196A22680;
  *((_BYTE *)this + 136) = 0;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)((char *)this + 140) = _Q0;
  *(_OWORD *)((char *)this + 156) = _Q0;
  *(_OWORD *)((char *)this + 172) = _Q0;
  *((_WORD *)this + 94) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0x3FF0000000000000;
  *((_QWORD *)this + 26) = 0;
  *(_QWORD *)((char *)this + 229) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  WebCore::ViewportConfiguration::updateConfiguration(this);
  return this;
}

uint64_t WebCore::ViewportConfiguration::setViewLayoutSize(WebCore::ViewportConfiguration *this, float *a2, uint64_t a3, uint64_t a4)
{
  double *v5;
  double v6;
  double *v7;
  double v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float v14;
  float v15;
  float v16;

  if (*(_BYTE *)(a3 + 8))
    v5 = (double *)a3;
  else
    v5 = (double *)((char *)this + 200);
  v6 = *v5;
  if (*(_BYTE *)(a4 + 8))
    v7 = (double *)a4;
  else
    v7 = (double *)((char *)this + 208);
  v8 = *v7;
  v9 = *((float *)this + 32) == *a2 && *((float *)this + 33) == a2[1];
  if (v9 && *((double *)this + 25) == v6 && v8 == *((double *)this + 26))
    return 0;
  *((double *)this + 25) = v6;
  v11 = *(_QWORD *)a2;
  *((_QWORD *)this + 16) = *(_QWORD *)a2;
  *((double *)this + 26) = v8;
  v12 = v11;
  if (*(float *)&v11 != 0.0)
  {
    v13 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this);
    if (v13 != 0.0)
    {
      if (v13 < *(float *)&v12)
        v13 = *(float *)&v12;
      v6 = v6 * *(float *)&v12 / v13;
    }
  }
  v14 = v6;
  v15 = *(float *)&v12 / v14;
  v16 = *((float *)&v12 + 1) / v14;
  *((float *)this + 30) = v15;
  *((float *)this + 31) = v16;
  if ((*((_BYTE *)this + 192) & 1) == 0 && *(float *)&v12 > 0.0 && *(float *)&v12 < 0.0)
  {
    *((_DWORD *)this + 30) = 0;
    *((float *)this + 31) = roundf(v16 * (float)(0.0 / v15));
  }
  WebCore::ViewportConfiguration::updateConfiguration(this);
  return 1;
}

uint64_t WebCore::ViewportConfiguration::setContentsSize(WebCore::ViewportConfiguration *this, const WebCore::IntSize *a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = *((_DWORD *)this + 28) == *(_DWORD *)a2 && *((_DWORD *)this + 29) == *((_DWORD *)a2 + 1);
  v3 = !v2;
  if (!v2)
  {
    *((_QWORD *)this + 14) = *(_QWORD *)a2;
    WebCore::ViewportConfiguration::updateConfiguration(this);
  }
  return v3;
}

double WebCore::ViewportConfiguration::updateConfiguration(WebCore::ViewportConfiguration *this)
{
  __int128 v2;
  float v3;
  double v4;
  double v5;
  double v6;
  float v7;
  double v8;
  float v9;
  float v10;
  double v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float *v17;
  char v18;
  float v19;
  float v20;
  _BOOL4 canOverrideConfigurationParameters;
  double v22;
  double result;

  v2 = *(_OWORD *)((char *)this + 72);
  *(_OWORD *)this = *(_OWORD *)((char *)this + 56);
  *((_OWORD *)this + 1) = v2;
  *((_OWORD *)this + 2) = *(_OWORD *)((char *)this + 88);
  *(_QWORD *)((char *)this + 47) = *(_QWORD *)((char *)this + 103);
  v3 = *((float *)this + 32);
  if (v3 == 0.0 || (v4 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v4 == 0.0))
  {
    v5 = *((double *)this + 25);
    v6 = v5;
  }
  else
  {
    v5 = *((double *)this + 25);
    if (v4 < v3)
      v4 = v3;
    v6 = v5 * v3 / v4;
  }
  if (v5 != 1.0)
    *(double *)this = *(double *)this / v6;
  v7 = *((float *)this + 42);
  if (v7 <= 0.0)
  {
    v8 = *((double *)this + 4);
  }
  else
  {
    v8 = fminf(fmaxf(v7, 0.1), 10.0);
    *((double *)this + 4) = v8;
  }
  v9 = *((float *)this + 43);
  v10 = v8;
  if (v9 <= 0.0)
  {
    v11 = *((double *)this + 5);
  }
  else
  {
    if (v9 <= v10)
      v9 = v8;
    v11 = fminf(v9, 10.0);
    *((double *)this + 5) = v11;
  }
  v12 = *((float *)this + 41);
  if (v12 > 0.0)
  {
    if (v12 > v10)
      v10 = *((float *)this + 41);
    v13 = v11;
    if (v10 >= v13)
      v10 = v11;
    *((double *)this + 2) = v10;
  }
  v14 = *((float *)this + 35);
  if (v14 == -2.0)
  {
    v15 = (float *)((char *)this + 120);
  }
  else
  {
    if (v14 != -3.0)
      goto LABEL_28;
    v15 = (float *)((char *)this + 124);
  }
  v14 = *v15;
LABEL_28:
  if (v14 > 0.0)
    *(double *)this = fminf(fmaxf(v14, 10.0), 10000.0);
  v16 = *((float *)this + 38);
  if (v16 == -2.0)
  {
    v17 = (float *)((char *)this + 120);
  }
  else
  {
    if (v16 != -3.0)
      goto LABEL_35;
    v17 = (float *)((char *)this + 124);
  }
  v16 = *v17;
LABEL_35:
  if (v16 > 0.0)
  {
    *((double *)this + 1) = fminf(fmaxf(v16, 10.0), 10000.0);
    v18 = 1;
    goto LABEL_41;
  }
  v18 = 0;
  if (v12 > 0.0 || v14 > 0.0)
  {
LABEL_41:
    *((_BYTE *)this + 53) = v12 > 0.0;
    *((_BYTE *)this + 51) = v14 > 0.0;
    *((_BYTE *)this + 52) = v18;
    if (v12 <= 0.0)
      goto LABEL_44;
    goto LABEL_42;
  }
  if (!*((_BYTE *)this + 53))
    goto LABEL_44;
LABEL_42:
  if (*((double *)this + 26) > v3)
    *((_BYTE *)this + 54) = 1;
LABEL_44:
  v19 = *((float *)this + 44);
  if (v19 == 0.0 || v19 == 1.0)
    *((_BYTE *)this + 48) = v19 != 0.0;
  v20 = *((float *)this + 46);
  if (v20 == 0.0 || v20 == 1.0)
    *((_BYTE *)this + 49) = v20 != 0.0;
  canOverrideConfigurationParameters = WebCore::ViewportConfiguration::canOverrideConfigurationParameters(this);
  if (v14 <= 0.0 && canOverrideConfigurationParameters)
    *(double *)this = *((float *)this + 30);
  *((_BYTE *)this + 50) = *((_BYTE *)this + 188) != 2;
  v22 = *((double *)this + 2);
  *((double *)this + 2) = v6 * v22;
  *((double *)this + 3) = v22;
  result = v6 * v8;
  *((double *)this + 4) = v6 * v8;
  *((double *)this + 5) = v6 * v11;
  return result;
}

BOOL WebCore::ViewportConfiguration::canOverrideConfigurationParameters(WebCore::ViewportConfiguration *this)
{
  if (*((double *)this + 7) != -2.0
    || *((double *)this + 8) != 0.0
    || *((double *)this + 9) != 1.0
    || *((double *)this + 10) != 1.0)
  {
    return 0;
  }
  if (*((double *)this + 11) == 1.0
    && *((double *)this + 12) == 5.0
    && *((_BYTE *)this + 104)
    && !*((_BYTE *)this + 105)
    && *((_BYTE *)this + 106)
    && *((_BYTE *)this + 107)
    && !*((_BYTE *)this + 108)
    && *((_BYTE *)this + 109)
    && !*((_BYTE *)this + 110))
  {
    return 1;
  }
  if (*((double *)this + 11) != 0.25
    || *((double *)this + 12) != 5.0
    || !*((_BYTE *)this + 104)
    || !*((_BYTE *)this + 105)
    || !*((_BYTE *)this + 106)
    || !*((_BYTE *)this + 107)
    || *((_BYTE *)this + 108)
    || *((_BYTE *)this + 109))
  {
    return 0;
  }
  return *((_BYTE *)this + 110) == 0;
}

void WebCore::ViewportConfiguration::initialScale(WebCore::ViewportConfiguration *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  float v7;
  char v8;

  v2 = *((_DWORD *)this + 28);
  v3 = v2;
  if (v2 <= 0)
    v3 = WebCore::ViewportConfiguration::layoutWidth(this);
  v4 = *((_DWORD *)this + 29);
  v5 = v4;
  if (v4 <= 0)
    v5 = WebCore::ViewportConfiguration::layoutHeight(this);
  if (!*((_BYTE *)this + 232) || !*((_BYTE *)this + 49))
    goto LABEL_14;
  v6 = WebCore::ViewportConfiguration::layoutWidth(this);
  v7 = *((float *)this + 35);
  if ((v7 == -2.0 || *((_BYTE *)this + 53) && *((double *)this + 3) == 1.0) && v2 > v6)
  {
    v8 = 1;
    goto LABEL_15;
  }
  if (*((float *)this + 38) != -3.0 || (v8 = v4 > WebCore::ViewportConfiguration::layoutHeight(this), v7 != -1.0))
LABEL_14:
    v8 = 0;
LABEL_15:
  WebCore::ViewportConfiguration::initialScaleFromSize(this, (double)v3, (double)v5, v8);
}

unint64_t WebCore::ViewportConfiguration::layoutSize(WebCore::ViewportConfiguration *this)
{
  unsigned int v2;

  v2 = WebCore::ViewportConfiguration::layoutWidth(this);
  return v2 | (unint64_t)((uint64_t)WebCore::ViewportConfiguration::layoutHeight(this) << 32);
}

void WebCore::ViewportConfiguration::initialScaleIgnoringContentSize(WebCore::ViewportConfiguration *this)
{
  int v2;
  int v3;
  float v4;
  char v5;

  v2 = WebCore::ViewportConfiguration::layoutWidth(this);
  v3 = WebCore::ViewportConfiguration::layoutHeight(this);
  if (!*((_BYTE *)this + 232) || (*((_BYTE *)this + 192) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v4 = *((float *)this + 32);
    v5 = v4 > 0.0 && v4 < 0.0;
  }
  WebCore::ViewportConfiguration::initialScaleFromSize(this, (double)v2, (double)v3, v5);
}

int WebCore::ViewportConfiguration::layoutWidth(WebCore::ViewportConfiguration *this)
{
  float v2;
  double v3;
  double v4;
  float v5;
  float v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (*((_BYTE *)this + 51))
  {
    if (*((_BYTE *)this + 53) && !*((_BYTE *)this + 54))
    {
      v10 = *(double *)this;
      v11 = *((double *)this + 3);
      v12 = *(double *)this * v11;
      v13 = *((float *)this + 30);
      v14 = v13 / v11;
      if (v12 < v13)
        v10 = v14;
    }
    else
    {
      if (*((_BYTE *)this + 233))
      {
        v2 = *((float *)this + 32);
        if (v2 == 0.0 || (v3 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v3 == 0.0))
        {
          v4 = *((double *)this + 25);
        }
        else
        {
          if (v3 < v2)
            v3 = v2;
          v4 = *((double *)this + 25) * v2 / v3;
        }
        v8 = v4 * 5.0;
      }
      else
      {
        v8 = *((double *)this + 5);
      }
      v9 = *((float *)this + 30);
      if (v8 * *(double *)this >= v9)
      {
        v10 = *((double *)this + 26);
        if (*(double *)this >= v10)
          v10 = *(double *)this;
      }
      else
      {
        v10 = v9 / v8;
      }
    }
    return llround(v10);
  }
  if (*((_BYTE *)this + 53) && !*((_BYTE *)this + 52))
  {
    v10 = *((float *)this + 30) / *((double *)this + 3);
    return llround(v10);
  }
  v6 = *((float *)this + 30);
  v5 = *((float *)this + 31);
  if (v5 <= 0.0)
    return (int)v6;
  else
    return llroundf((float)(v6 * (float)WebCore::ViewportConfiguration::layoutHeight(this)) / v5);
}

int WebCore::ViewportConfiguration::layoutHeight(WebCore::ViewportConfiguration *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  if (*((_BYTE *)this + 52))
  {
    if (*((_BYTE *)this + 53))
    {
      v2 = *((double *)this + 1);
      v3 = *((double *)this + 3);
      v4 = v2 * v3;
      v5 = *((float *)this + 31);
      v6 = v5 / v3;
      if (v4 < v5)
        v2 = v6;
    }
    else
    {
      if (*((_BYTE *)this + 233))
      {
        v10 = *((float *)this + 32);
        if (v10 == 0.0 || (v11 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v11 == 0.0))
        {
          v12 = *((double *)this + 25);
        }
        else
        {
          if (v11 < v10)
            v11 = v10;
          v12 = *((double *)this + 25) * v10 / v11;
        }
        v13 = v12 * 5.0;
      }
      else
      {
        v13 = *((double *)this + 5);
      }
      v14 = v13 * *((double *)this + 1);
      v15 = *((float *)this + 31);
      v2 = v15 / v13;
      if (v14 >= v15)
        v2 = *((double *)this + 1);
    }
    return llround(v2);
  }
  if (*((_BYTE *)this + 53) && !*((_BYTE *)this + 51))
  {
    v2 = *((float *)this + 31) / *((double *)this + 3);
    return llround(v2);
  }
  v7 = *((float *)this + 30);
  v8 = *((float *)this + 31);
  if (v7 <= 0.0)
    return (int)v8;
  else
    return llroundf((float)(v8 * (float)(int)WebCore::ViewportConfiguration::layoutWidth(this)) / v7);
}

double WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(WebCore::ViewportConfiguration *this)
{
  double result;
  float v2;
  BOOL v3;
  uint64_t v4;

  result = *((double *)this + 26);
  if (*((_BYTE *)this + 232))
  {
    if (*((double *)this + 28) == 0.0)
      return result;
  }
  else
  {
    v2 = *((float *)this + 35);
    if (v2 != -1.0
      || *((float *)this + 36) != -1.0
      || *((float *)this + 37) != -1.0
      || *((float *)this + 38) != -1.0
      || *((float *)this + 39) != -1.0
      || *((float *)this + 40) != -1.0
      || *((float *)this + 41) != -1.0
      || *((float *)this + 42) != -1.0
      || *((float *)this + 43) != -1.0
      || *((float *)this + 44) != -1.0
      || *((float *)this + 45) != -1.0
      || *((float *)this + 46) != -1.0
      || *((_BYTE *)this + 188)
      || *((_BYTE *)this + 189))
    {
      v3 = v2 == -2.0 || *((float *)this + 41) == 1.0;
      if (v3 && !*((_BYTE *)this + 234))
        return result;
    }
  }
  v4 = 224;
  if (!*((_BYTE *)this + 232))
    v4 = 216;
  if (result < *(double *)((char *)this + v4))
    return *(double *)((char *)this + v4);
  return result;
}

BOOL WebCore::RenderBlockFlow::requiresColumns(WebCore::RenderBlockFlow *this, unsigned int a2)
{
  int v2;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v12;

  v2 = *((unsigned __int8 *)this + 46);
  if (v2 == 8)
    return 0;
  if ((*((_BYTE *)this + 52) & 7) == 1)
  {
    if (v2 == 18 || (*((_BYTE *)this + 53) & 0xC) != 0)
      return 0;
  }
  else if (v2 == 18)
  {
    return 0;
  }
  if ((*((_DWORD *)this + 24) & 0x1F) == 0x17 || (*((_DWORD *)this + 24) & 0x1F) == 25)
    return 0;
  if (((*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 176))(this) & 1) != 0)
    return 0;
  v7 = *((unsigned int *)this + 16);
  if (!(v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  if (!*(_QWORD *)((v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
    return 0;
  v8 = *((_QWORD *)this + 12);
  if ((v8 & 0xF80000000000) != 0)
    return 0;
  if (((unsigned __int16)v8 >> 13) - 5 <= 1
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*((_QWORD *)this + 3) + 8)
    && !WebCore::RenderObject::isBody(this))
  {
    return 1;
  }
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24) + 56);
  if ((~v9 & 3) == 0)
  {
    v10 = (v9 >> 4) & 3;
    if (v10 == 2)
      return 0;
    v12 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v12 - 2) < 2 || v12 == 4 || v12 == 5)
    {
      if (v10)
        return 0;
    }
    else if (!v10)
    {
      return 0;
    }
  }
  if (!WebCore::RenderStyle::hasInlineColumnAxis((WebCore::RenderBlockFlow *)((char *)this + 80)))
    return 1;
  return (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24) + 56) & 1) == 0 || a2 > 1;
}

BOOL WebCore::RenderBox::sizesLogicalWidthToFitContent(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::RenderObject *v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  int v42;
  unsigned __int8 v43;
  char v44;
  char v45;

  if ((*(_BYTE *)(a1 + 21) & 8) != 0)
    return 1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1))
  {
    if ((*(_BYTE *)(a1 + 45) & 1) != 0)
      return 1;
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (!v39
      || (*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) != a1
      || (*(_WORD *)(v39 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v39 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
    {
      return 1;
    }
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || *(_BYTE *)(v5 + 46) != 12 || (*(_BYTE *)(a1 + 21) & 4) != 0)
  {
    v6 = *(unsigned int **)(*(_QWORD *)(a1 + 88) + 8);
    v7 = v6 + 3;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      v7 = v6 + 1;
    v8 = v6 + 11;
    v9 = v6 + 7;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v9 = v8;
    if (a2 == 2)
      v7 = v9;
    v45 = 0;
    v43 = *((_BYTE *)v7 + 4);
    v10 = v43;
    v44 = *((_BYTE *)v7 + 5);
    if (v43 - 2 >= 9)
    {
      v11 = 0;
      if (v43 == 11)
      {
        v11 = (void *)*v7;
        v42 = *v7;
        WebCore::Length::ref(&v42);
        v4 = *(_QWORD *)(a1 + 32);
      }
    }
    else
    {
      if (v43 == 5)
        return 1;
      v11 = (void *)*v7;
    }
    if (v4)
      v12 = *(_QWORD *)(v4 + 8);
    else
      v12 = 0;
    if ((*(_BYTE *)(v12 + 45) & 1) == 0
      && (v13 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8)) != 0
      && v12 == (*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL)
      && (*(_WORD *)(v13 + 28) & 0x10) != 0)
    {
      v14 = *(_QWORD **)(v4 + 8);
      if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
      {
        v40 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v14[11] + 40) + 64) + 20) >> 2) & 7;
        if (v40 != 7 && ((0x67u >> v40) & 1) != 0)
          goto LABEL_66;
      }
    }
    else
    {
      v14 = *(_QWORD **)(v4 + 8);
    }
    if (((*(uint64_t (**)(_QWORD *))(*v14 + 176))(v14) & 1) == 0)
    {
      v15 = *(_QWORD *)(a1 + 32);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (*(char *)(v16 + 45) < 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 32) + 16) + 20) & 0xE) != 2
            || !WebCore::RenderBox::columnFlexItemHasStretchAlignment((WebCore::RenderBox *)a1))
          {
            goto LABEL_66;
          }
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        }
        if (*(_BYTE *)(v16 + 46) != 5)
        {
          if (v10)
            goto LABEL_37;
          if ((*(char *)(v16 + 45) & 0x80000000) == 0
            || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 32) + 16) + 20) & 0xE) != 2)
          {
            goto LABEL_28;
          }
          v23 = *(_DWORD *)(a1 + 120);
          v24 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
          v25 = (v23 >> 26) & 1;
          v26 = v25;
          if ((v24 - 2) >= 2)
          {
            if (v24 == 4)
            {
              v26 = (v23 & 0x4000000) == 0;
            }
            else
            {
              v26 = (v23 >> 26) & 1;
              if (v24 != 5)
              {
                v27 = 3;
                if ((v23 & 0x4000000) != 0)
                  v27 = 1;
                goto LABEL_51;
              }
            }
          }
          v41 = v26 == 0;
          v27 = 2;
          if (v41)
            v27 = 0;
LABEL_51:
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 40;
          if (!*(_BYTE *)(v28 + 8 * v27 + 4))
            goto LABEL_28;
          if ((v24 - 2) >= 2)
          {
            if (v24 == 4)
            {
              v25 = (v23 & 0x4000000) == 0;
            }
            else if (v24 != 5)
            {
              v29 = 3;
              if ((v23 & 0x4000000) == 0)
                v29 = 1;
              goto LABEL_57;
            }
          }
          v41 = v25 == 0;
          v29 = 2;
          if (!v41)
            v29 = 0;
LABEL_57:
          if (!*(_BYTE *)(v28 + 8 * v29 + 4))
            goto LABEL_28;
          v30 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
          v31 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v30 + 1600))(v30, 0);
          v32 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 125);
          v33 = v32 & 0xF;
          if (v33 == 1)
          {
            v32 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 32) + 124);
            v33 = v32 & 0xF;
          }
          if (v33 < 3)
            v32 = v31;
          if ((v32 & 0xF) != 3)
          {
LABEL_28:
            if ((*(_BYTE *)(a1 + 45) & 1) == 0)
            {
              v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
              if (v17)
              {
                v18 = *(_WORD *)(v17 + 28);
                if ((v18 & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194146FC0);
                }
                if ((v18 & 0x10) != 0)
                {
                  v19 = *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24);
                  if (v19 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
                    || v19 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
                    || v19 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24)
                    || v19 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)
                    || v19 == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
                  {
                    return 1;
                  }
                }
              }
            }
          }
LABEL_37:
          v20 = (*(_DWORD *)(a1 + 20) & 0x1000) == 0;
          v21 = v20 ^ ((*((_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1) + 21) & 0x10) == 0);
          goto LABEL_38;
        }
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 32) + 8) + 16) & 0x27) == 0x20)
          goto LABEL_37;
      }
    }
LABEL_66:
    v21 = 1;
LABEL_38:
    if (v10 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
    }
    return v21;
  }
  do
  {
    v34 = v5;
    v35 = *(_QWORD *)(v5 + 32);
    if (!v35)
      break;
    v5 = *(_QWORD *)(v35 + 8);
    if (!v5)
      break;
  }
  while (*(_BYTE *)(v5 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 88) + 40) + 80) + 259));
  v36 = v34;
  do
  {
    v37 = v36;
    v38 = *(_QWORD *)(v36 + 32);
    if (!v38)
      break;
    v36 = *(_QWORD *)(v38 + 8);
    if (!v36)
      break;
  }
  while (*(_BYTE *)(v36 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 88) + 40) + 80) + 258));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 88) + 40) + 80) + 260)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 88) + 40) + 80) + 261))
  {
    return 1;
  }
  return !WebCore::RenderBox::hasStretchedLogicalWidth((WebCore::RenderObject *)a1, 0);
}

uint64_t WebCore::RenderObject::isRenderMathMLBlock(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderBox::constrainLogicalWidthInFragmentByMinMax(WebCore::RenderBox *this, int a2, int a3, unsigned int *a4, uint64_t a5, char a6)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  float v22;
  void *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  BOOL v41;
  float v42;
  double v43;
  int v45;
  float v46;
  double v47;
  unsigned int *v49;
  unsigned int *v50;
  int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  const WebCore::RenderBox *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  double v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::RenderObject *v71;
  _BOOL4 v72;
  _BOOL4 v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  _BOOL4 v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  float v92;
  double v93;
  int v94;
  float v95;
  double v96;
  int v97;
  unsigned int v98;
  int v99;
  float v100;
  float v102;
  unsigned int v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  WebCore::RenderObject *v117;
  int v118;
  unsigned int v119;
  char v120;
  char v121;
  unsigned __int8 v122;
  int v123;
  unsigned int v124;
  unsigned __int8 v125;
  char v126;
  unsigned __int8 v127;
  unsigned int v128;
  unsigned __int8 v129;
  char v130;
  char v131;
  int v132;
  float v133;
  char v134;
  char v135;
  char v136;
  float v137;
  unsigned __int8 v138;
  char v139;
  char v140;
  unsigned int v141;
  __int16 v142;
  char v143;

  v132 = 0x7FFFFFFF;
  v12 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v14 = v13 + 44;
  if (v12 >= 4)
    v14 = v13 + 28;
  if (*(_BYTE *)(v14 + 4) == 13)
  {
    v15 = 0x7FFFFFFF;
    goto LABEL_5;
  }
  if ((a6 & 1) != 0)
    goto LABEL_78;
  v62 = v13 + 44;
  if (v12 >= 4)
    v62 = v13 + 28;
  if (*(unsigned __int8 *)(v62 + 4) - 7 >= 4)
  {
LABEL_78:
    v16 = v12 >= 4;
    v49 = (unsigned int *)(v13 + 44);
    v50 = (unsigned int *)(v13 + 28);
    if (!v16)
      v50 = v49;
    v128 = 0;
    v131 = 0;
    v129 = *((_BYTE *)v50 + 4);
    v51 = v129;
    v130 = *((_BYTE *)v50 + 5);
    if (v129 - 2 >= 9)
    {
      v52 = 0;
      if (v129 == 11)
      {
        v52 = (void *)*v50;
        v128 = *v50;
        WebCore::Length::ref((int *)&v128);
      }
    }
    else
    {
      v131 = *((_BYTE *)v50 + 6);
      if (v131)
      {
        v128 = *v50;
        v52 = (void *)v128;
      }
      else
      {
        v52 = (void *)*v50;
        v128 = *v50;
      }
    }
    v15 = WebCore::RenderBox::computeLogicalWidthInFragmentUsing((uint64_t)this, 2, (WebCore::Length *)&v128, a3, a4, a5);
    v132 = v15;
    if (v51 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v52);
    }
LABEL_5:
    v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v12 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
    if ((a6 & 1) != 0)
      goto LABEL_6;
    goto LABEL_134;
  }
  v15 = 0x7FFFFFFF;
LABEL_134:
  v63 = v13 + 36;
  if (v12 >= 4)
    v63 = v13 + 20;
  if (*(unsigned __int8 *)(v63 + 4) - 7 <= 3)
  {
    if (v15 >= a2)
      return a2;
    else
      return v15;
  }
LABEL_6:
  v16 = v12 >= 4;
  v17 = v13 + 36;
  v18 = v13 + 20;
  if (!v16)
    v18 = v17;
  *(float *)&v124 = 0.0;
  v127 = 0;
  v125 = *(_BYTE *)(v18 + 4);
  v19 = v125;
  v126 = *(_BYTE *)(v18 + 5);
  if (v125 > 0xDu)
  {
    v20 = 0;
    goto LABEL_11;
  }
  if (((1 << v125) & 0x7FC) != 0)
  {
    v20 = 0;
    v127 = *(_BYTE *)(v18 + 6);
    v124 = *(unsigned int *)v18;
LABEL_11:
    v123 = 0;
    goto LABEL_12;
  }
  if (((1 << v125) & 0x3003) == 0)
  {
    v124 = *(unsigned int *)v18;
    WebCore::Length::ref((int *)&v124);
    v19 = v125;
  }
  v123 = 0;
  if (v19)
  {
    v20 = 0;
    goto LABEL_12;
  }
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 > 1
    || *((unsigned __int8 *)this + 46) - 36 < 5)
  {
    goto LABEL_31;
  }
  v53 = *((_QWORD *)this + 4);
  if (v53)
  {
    v54 = *(_QWORD *)(v53 + 8);
    if (v54)
    {
      if (*(_BYTE *)(v54 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
      {
        if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1616))(this))
        {
          if (WebCore::RenderBox::hasStretchedLogicalWidth(this, 0)
            && (WebCore::RenderBox::hasStretchedLogicalHeight(this) & 1) != 0)
          {
            goto LABEL_31;
          }
        }
        else if (WebCore::RenderBox::hasStretchedLogicalWidth(this, 1))
        {
          goto LABEL_31;
        }
        v65 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
          v66 = v65 + 12;
        else
          v66 = v65 + 4;
        if ((*(_BYTE *)(v66 + 4) & 0xF7) == 3)
        {
          v67 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
          v68 = ((*(_DWORD *)(v67 + 124) >> 13) & 6) - 2;
          v69 = *(_QWORD *)(*(_QWORD *)(v67 + 88) + 8);
          v70 = v68 < 4 ? v69 + 12 : v69 + 4;
          if (*(_BYTE *)(v70 + 4) == 4)
            goto LABEL_31;
        }
      }
    }
  }
  if (!((unint64_t)WebCore::RenderBox::overridingLogicalHeight(this) >> 32)
    && !WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets(this, v55))
  {
    v56 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v57 = ((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4 ? v56 + 4 : v56 + 12;
    if (*(_BYTE *)(v57 + 4) != 4
      && !WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio(void)const::$_0::operator()((uint64_t)this))
    {
      goto LABEL_31;
    }
  }
  v58 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 > 3)
  {
    if (!*(_BYTE *)(v58 + 8) || *(_BYTE *)(v58 + 8) == 7)
      goto LABEL_114;
    v64 = v58 + 4;
    goto LABEL_141;
  }
  if (*(_BYTE *)(v58 + 16) && *(_BYTE *)(v58 + 16) != 7)
  {
    v64 = v58 + 12;
LABEL_141:
    if (*(_BYTE *)(v64 + 4) == 8)
      goto LABEL_114;
LABEL_31:
    v20 = 0;
    goto LABEL_32;
  }
LABEL_114:
  if ((*((_BYTE *)this + 52) & 7) == 3 || WebCore::RenderElement::effectiveOverflowInlineDirection(this))
    goto LABEL_31;
  *(float *)&v141 = 0.0;
  v142 = 7;
  v143 = 0;
  WebCore::Length::operator=(&v124, &v141);
  if (v142 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v141);
  }
  v20 = 1;
  v19 = v125;
LABEL_12:
  v119 = 0;
  v122 = 0;
  v120 = v19;
  v121 = v126;
  if (v19 - 2 < 9)
  {
    v21 = v127;
    v122 = v127;
    v22 = *(float *)&v124;
    v119 = v124;
    v23 = (void *)v124;
    goto LABEL_14;
  }
  if (v19 <= 0xD)
  {
    if (v19 == 11)
    {
      v23 = (void *)v124;
      v119 = v124;
      WebCore::Length::ref((int *)&v119);
LABEL_124:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v119, (float)a3 * 0.015625);
      v60 = v59 * 64.0;
      if (v60 < 2147483650.0 && v60 > -2147483650.0)
        goto LABEL_128;
      if (v60 >= 2147483650.0)
      {
        v45 = 0x7FFFFFFF;
        goto LABEL_129;
      }
      if (v60 <= -2147483650.0)
        v45 = 0x80000000;
      else
LABEL_128:
        v45 = (int)v60;
LABEL_129:
      v19 = 11;
      goto LABEL_67;
    }
    if (((1 << v19) & 0x3003) != 0 && !v19)
    {
LABEL_32:
      v32 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
      v33 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
      if (__OFADD__(v32, v33))
        v34 = (v32 >> 31) + 0x7FFFFFFF;
      else
        v34 = v32 + v33;
      v35 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
      if (__OFADD__(v34, v35))
        v36 = (v34 >> 31) + 0x7FFFFFFF;
      else
        v36 = v34 + v35;
      v37 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
      v19 = 0;
      v23 = 0;
      if (__OFADD__(v36, v37))
        v31 = (v36 >> 31) + 0x7FFFFFFF;
      else
        v31 = v36 + v37;
LABEL_41:
      v123 = v31;
      if (v19 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v23);
      }
      goto LABEL_42;
    }
  }
  v23 = 0;
  v21 = 0;
  v22 = 0.0;
LABEL_14:
  if ((v19 - 7) < 4u)
  {
    v134 = v19;
    goto LABEL_16;
  }
  if ((v19 - 5) >= 2u)
  {
    v41 = v19 - 3 < 2 || v19 == 11;
    if (!v41)
    {
      if (v19 >= 2)
        v45 = 0;
      else
        v45 = a3;
      goto LABEL_67;
    }
    if (v19 == 4)
    {
      v42 = (float)SLODWORD(v22);
      if (v21)
        v42 = v22;
      v43 = v42 * 64.0;
      if (v43 < 2147483650.0 && v43 > -2147483650.0)
        goto LABEL_65;
      if (v43 >= 2147483650.0)
      {
        v45 = 0x7FFFFFFF;
        goto LABEL_66;
      }
      if (v43 <= -2147483650.0)
        v45 = 0x80000000;
      else
LABEL_65:
        v45 = (int)v43;
LABEL_66:
      v19 = 4;
LABEL_67:
      v31 = WebCore::RenderBox::adjustBorderBoxLogicalWidthForBoxSizing(this, v45, v19);
      goto LABEL_41;
    }
    if (v19 == 3)
    {
      v46 = (float)SLODWORD(v22);
      if (v21)
        v46 = v22;
      v47 = (float)((float)((float)((float)a3 * 0.015625) * v46) / 100.0) * 64.0;
      if (v47 < 2147483650.0 && v47 > -2147483650.0)
        goto LABEL_75;
      if (v47 >= 2147483650.0)
      {
        v45 = 0x7FFFFFFF;
        goto LABEL_76;
      }
      if (v47 <= -2147483650.0)
        v45 = 0x80000000;
      else
LABEL_75:
        v45 = (int)v47;
LABEL_76:
      v19 = 3;
      goto LABEL_67;
    }
    if (v19 != 11)
    {
      v45 = 0;
      goto LABEL_67;
    }
    goto LABEL_124;
  }
  if (v19 != 6)
  {
    v71 = WebCore::RenderObject::containingBlock(this);
    v72 = (*((_DWORD *)this + 5) & 0x1000) == 0;
    v117 = v71;
    v73 = (*((_DWORD *)v71 + 5) & 0x1000) == 0;
    v74 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v76 = *((_DWORD *)this + 30);
    v75 = *((_DWORD *)this + 31);
    v77 = v76 & 0x4000000;
    v78 = (v76 >> 26) & 1;
    v79 = (unsigned __int16)v75 >> 13;
    if ((v79 - 2) >= 2)
    {
      if (v79 == 4)
      {
        v78 = v77 == 0;
      }
      else if (v79 != 5)
      {
        v80 = 3;
        if (v77)
          v80 = 1;
        goto LABEL_166;
      }
    }
    v41 = v78 == 0;
    v80 = 2;
    if (v41)
      v80 = 0;
LABEL_166:
    v81 = v75 >> 13;
    v82 = v74 + 40 + 8 * v80;
    *(float *)&v141 = 0.0;
    v143 = 0;
    v142 = *(_WORD *)(v82 + 4);
    v118 = v142;
    if (v142 - 2 >= 9)
    {
      if (v142 == 11)
      {
        v141 = *(unsigned int *)v82;
        v104 = v141;
        WebCore::Length::ref((int *)&v141);
        v74 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v81 = *((_DWORD *)this + 31) >> 13;
        v77 = *((_DWORD *)this + 30) & 0x4000000;
        v113 = v104;
        v83 = v104;
        goto LABEL_169;
      }
      v113 = 0;
      v84 = 1;
      *(float *)&v83 = 0.0;
    }
    else
    {
      v143 = *(_BYTE *)(v82 + 6);
      if (!v143)
      {
        v141 = *(unsigned int *)v82;
        v113 = v141;
        v83 = v141;
LABEL_169:
        v84 = 1;
        goto LABEL_175;
      }
      v84 = 0;
      v83 = *(int *)v82;
      v141 = v83;
      v113 = v83;
    }
LABEL_175:
    v85 = v77 != 0;
    v86 = v81 & 7;
    if ((v86 - 2) >= 2)
    {
      if (v86 == 4)
      {
        v85 = v77 == 0;
      }
      else if (v86 != 5)
      {
        v41 = v77 == 0;
        v87 = 3;
        if (v41)
          v87 = 1;
        goto LABEL_181;
      }
    }
    v87 = 2;
    if (v85)
      v87 = 0;
LABEL_181:
    v88 = v72 ^ v73;
    v89 = v74 + 40 + 8 * v87;
    v137 = 0.0;
    v140 = 0;
    v138 = *(_BYTE *)(v89 + 4);
    v90 = v138;
    v139 = *(_BYTE *)(v89 + 5);
    if (v138 - 2 >= 9)
    {
      if (v138 == 11)
      {
        v137 = *(float *)v89;
        *(float *)&v114 = v137;
        WebCore::Length::ref((int *)&v137);
        v91 = v114;
        goto LABEL_184;
      }
      *(float *)&v114 = 0.0;
      v116 = 1;
      *(float *)&v91 = 0.0;
    }
    else
    {
      v140 = *(_BYTE *)(v89 + 6);
      if (!v140)
      {
        v137 = *(float *)v89;
        *(float *)&v114 = v137;
        *(float *)&v91 = v137;
LABEL_184:
        v116 = 1;
        goto LABEL_187;
      }
      v116 = 0;
      v91 = *(int *)v89;
      v137 = *(float *)&v91;
      v114 = v91;
    }
LABEL_187:
    v115 = a3;
    if (v88)
      v115 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v117 + 11) + 40) + 461) & 4) != 0
      && (*(unsigned int (**)(WebCore::RenderObject *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)v117
                                                                                                + 1584))(v117, 4, this))
    {
      v106 = *((_QWORD *)this + 4);
      if (v106)
      {
        v107 = *(_QWORD *)(v106 + 8);
        if (v107)
        {
          if (*(_BYTE *)(v107 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
          {
            v108 = WebCore::RenderObject::ensureRareData(this, v105);
            v94 = 0;
            *((_BYTE *)v108 + 2) |= 4u;
            goto LABEL_196;
          }
        }
      }
      goto LABEL_248;
    }
    switch(v118)
    {
      case 4:
        v92 = (float)v83;
        if (!v84)
          v92 = *(float *)&v83;
        break;
      case 3:
        v100 = (float)v83;
        if (!v84)
          v100 = *(float *)&v83;
        v93 = (float)((float)((float)((float)v115 * 0.015625) * v100) / 100.0) * 64.0;
        if (v93 < 2147483650.0 && v93 > -2147483650.0)
          goto LABEL_195;
        if (v93 < 2147483650.0)
          goto LABEL_297;
        goto LABEL_302;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v141, (float)v115 * 0.015625);
        break;
      default:
LABEL_248:
        v94 = 0;
        goto LABEL_196;
    }
    v93 = v92 * 64.0;
    if (v93 < 2147483650.0 && v93 > -2147483650.0)
    {
LABEL_195:
      v94 = (int)v93;
LABEL_196:
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v117 + 11) + 40) + 461) & 8) != 0
        && (*(unsigned int (**)(WebCore::RenderObject *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)v117
                                                                                                  + 1584))(v117, 8, this))
      {
        v110 = *((_QWORD *)this + 4);
        if (v110)
        {
          v111 = *(_QWORD *)(v110 + 8);
          if (v111)
          {
            if (*(_BYTE *)(v111 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
            {
              v112 = WebCore::RenderObject::ensureRareData(this, v109);
              v97 = 0;
              *((_BYTE *)v112 + 2) |= 8u;
              goto LABEL_203;
            }
          }
        }
        goto LABEL_250;
      }
      switch(v90)
      {
        case 4:
          v95 = (float)v91;
          if (!v116)
            v95 = *(float *)&v91;
          break;
        case 3:
          v102 = (float)v91;
          if (!v116)
            v102 = *(float *)&v91;
          v96 = (float)((float)((float)((float)v115 * 0.015625) * v102) / 100.0) * 64.0;
          if (v96 < 2147483650.0 && v96 > -2147483650.0)
            goto LABEL_202;
          if (v96 < 2147483650.0)
            goto LABEL_300;
          goto LABEL_303;
        case 11:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v137, (float)v115 * 0.015625);
          break;
        default:
LABEL_250:
          v97 = 0;
          goto LABEL_203;
      }
      v96 = v95 * 64.0;
      if (v96 < 2147483650.0 && v96 > -2147483650.0)
      {
LABEL_202:
        v97 = (int)v96;
LABEL_203:
        v98 = a3 - v94;
        if (__OFSUB__(a3, v94))
          v98 = (a3 >> 31) + 0x7FFFFFFF;
        v31 = v98 - v97;
        if (__OFSUB__(v98, v97))
          v31 = (v98 >> 31) + 0x7FFFFFFF;
        if (v90 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v114);
        }
        if (v118 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v113);
        }
        if ((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isHTMLMarquee(this))
        {
          if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1504))(this))
          {
            if ((*((_BYTE *)this + 21) & 8) == 0 && !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 8))
            {
              if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)a4 + 1672))(a4))
              {
                v99 = WebCore::RenderBox::shrinkLogicalWidthToAvoidFloats((unsigned int *)this, v94, v97, a4, a5);
                if (v99 < v31)
                  v31 = v99;
              }
            }
          }
        }
        goto LABEL_26;
      }
      if (v96 < 2147483650.0)
      {
LABEL_300:
        if (v96 <= -2147483650.0)
        {
          v97 = 0x80000000;
          goto LABEL_203;
        }
        goto LABEL_202;
      }
LABEL_303:
      v97 = 0x7FFFFFFF;
      goto LABEL_203;
    }
    if (v93 < 2147483650.0)
    {
LABEL_297:
      if (v93 <= -2147483650.0)
      {
        v94 = 0x80000000;
        goto LABEL_196;
      }
      goto LABEL_195;
    }
LABEL_302:
    v94 = 0x7FFFFFFF;
    goto LABEL_196;
  }
  v134 = 6;
LABEL_16:
  v135 = v126;
  v136 = v21;
  v133 = v22;
  v24 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
  v25 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v24, v25))
    v26 = (v24 >> 31) + 0x7FFFFFFF;
  else
    v26 = v24 + v25;
  v27 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v26, v27))
    v28 = (v26 >> 31) + 0x7FFFFFFF;
  else
    v28 = v26 + v27;
  v29 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
  if (__OFADD__(v28, v29))
    v30 = (v28 >> 31) + 0x7FFFFFFF;
  else
    v30 = v28 + v29;
  v31 = WebCore::RenderBox::computeIntrinsicLogicalWidthUsing((uint64_t)this, (uint64_t)&v133, a3, v30);
  if (v134 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v22));
  }
LABEL_26:
  v123 = v31;
LABEL_42:
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 <= 1)
  {
    WebCore::RenderBox::constrainLogicalMinMaxSizesByAspectRatio((unint64_t)this, &v123, &v132, a2, v20, 0);
    v15 = v132;
    v31 = v123;
  }
  if (v15 >= a2)
    v38 = a2;
  else
    v38 = v15;
  if (v38 <= v31)
    v39 = v31;
  else
    v39 = v38;
  if (v125 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v124);
  }
  return v39;
}

uint64_t WebCore::RenderBox::computeLogicalWidthInFragmentUsing(uint64_t a1, int a2, WebCore::Length *this, int a4, unsigned int *a5, uint64_t a6)
{
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  WebCore::RenderObject *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  int v33;
  unint64_t v34;
  float v35;
  int v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int *v41;
  int v42;
  unint64_t v43;
  float v44;
  int v45;
  int v46;
  float v47;
  double v48;
  int v50;
  float v51;
  double v52;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  int v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  BOOL v70;
  char v71;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WebCore::RenderObject *v80;
  char v81;
  char v82;
  unsigned int v83;
  float v85;
  double v86;
  int v88;
  float v89;
  float v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  float v115;
  double v116;
  unint64_t v118;
  void *v119;
  float v120;
  double v121;
  int v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  int v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(WebCore::RenderObject *, uint64_t, uint64_t);
  WebCore::RenderObject *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  WTF *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int *v142;
  int v143;
  char v144;
  __int16 v145;
  unsigned int v146;
  unsigned __int8 v147;
  char v148;
  char v149;
  unsigned int v150;
  unsigned __int8 v151;
  char v152;
  char v153;

  v12 = *((unsigned __int8 *)this + 4);
  if (a2 == 1 && !*((_BYTE *)this + 4))
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
    if (__OFADD__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v15 = v13 + v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
    if (__OFADD__(v15, v16))
      v17 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v17 = v15 + v16;
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      return (v17 >> 31) + 0x7FFFFFFF;
    return v19;
  }
  v20 = v12 - 7 < 4 || v12 == 0;
  if (v20)
  {
    if (v12 - 7 < 4)
      goto LABEL_160;
  }
  else if (v12 - 5 >= 2)
  {
    if (v12 - 3 >= 2 && v12 != 11)
    {
      if (v12 >= 2)
        v88 = 0;
      else
        v88 = a4;
      return WebCore::RenderBox::adjustBorderBoxLogicalWidthForBoxSizing((_QWORD *)a1, v88, *((unsigned __int8 *)this + 4));
    }
    switch(v12)
    {
      case 4u:
        v85 = *(float *)this;
        if (!*((_BYTE *)this + 6))
          v85 = (float)*(int *)this;
        break;
      case 3u:
        v99 = *(float *)this;
        if (!*((_BYTE *)this + 6))
          v99 = (float)*(int *)this;
        v85 = (float)((float)((float)a4 * 0.015625) * v99) / 100.0;
        break;
      case 0xBu:
        WebCore::Length::nonNanCalculatedValue(this, (float)a4 * 0.015625);
        break;
      default:
        v88 = 0;
        return WebCore::RenderBox::adjustBorderBoxLogicalWidthForBoxSizing((_QWORD *)a1, v88, *((unsigned __int8 *)this + 4));
    }
    v86 = v85 * 64.0;
    if (v86 < 2147483650.0 && v86 > -2147483650.0)
      goto LABEL_149;
    if (v86 >= 2147483650.0)
    {
      v88 = 0x7FFFFFFF;
      return WebCore::RenderBox::adjustBorderBoxLogicalWidthForBoxSizing((_QWORD *)a1, v88, *((unsigned __int8 *)this + 4));
    }
    if (v86 <= -2147483650.0)
      v88 = 0x80000000;
    else
LABEL_149:
      v88 = (int)v86;
    return WebCore::RenderBox::adjustBorderBoxLogicalWidthForBoxSizing((_QWORD *)a1, v88, *((unsigned __int8 *)this + 4));
  }
  if (v12 == 6)
  {
LABEL_160:
    v144 = *((_BYTE *)this + 4);
    v145 = *(_WORD *)((char *)this + 5);
    v91 = *(_DWORD *)this;
    v143 = *(_DWORD *)this;
    v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
    v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
    if (__OFADD__(v92, v93))
      v94 = (v92 >> 31) + 0x7FFFFFFF;
    else
      v94 = v92 + v93;
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
    if (__OFADD__(v94, v95))
      v96 = (v94 >> 31) + 0x7FFFFFFF;
    else
      v96 = v94 + v95;
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
    if (__OFADD__(v96, v97))
      v98 = (v96 >> 31) + 0x7FFFFFFF;
    else
      v98 = v96 + v97;
    v19 = WebCore::RenderBox::computeIntrinsicLogicalWidthUsing(a1, (uint64_t)&v143, a4, v98);
    if (v144 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v91);
    }
    return v19;
  }
  v21 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
  v22 = (*(_DWORD *)(a1 + 20) & 0x1000) == 0;
  v23 = (*((_DWORD *)v21 + 5) & 0x1000) == 0;
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v26 = *(_DWORD *)(a1 + 120);
  v25 = *(_DWORD *)(a1 + 124);
  v27 = v26 & 0x4000000;
  v28 = (v26 >> 26) & 1;
  v29 = (unsigned __int16)v25 >> 13;
  v142 = a5;
  if ((v29 - 2) >= 2)
  {
    if (v29 == 4)
    {
      v28 = v27 == 0;
    }
    else if (v29 != 5)
    {
      v30 = 3;
      if (v27)
        v30 = 1;
      goto LABEL_24;
    }
  }
  v20 = v28 == 0;
  v30 = 2;
  if (v20)
    v30 = 0;
LABEL_24:
  v31 = v25 >> 13;
  v32 = (unsigned int *)(v24 + 40 + 8 * v30);
  v150 = 0;
  v153 = 0;
  v151 = *((_BYTE *)v32 + 4);
  v33 = v151;
  v152 = *((_BYTE *)v32 + 5);
  v141 = a6;
  if (v151 - 2 >= 9)
  {
    if (v151 == 11)
    {
      v150 = *v32;
      v110 = v150;
      WebCore::Length::ref((int *)&v150);
      v34 = v110;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
      v31 = *(_DWORD *)(a1 + 124) >> 13;
      v27 = *(_DWORD *)(a1 + 120) & 0x4000000;
      goto LABEL_27;
    }
    v34 = 0;
    v36 = 1;
    v35 = 0.0;
  }
  else
  {
    v153 = *((_BYTE *)v32 + 6);
    if (!v153)
    {
      v34 = *v32;
      v150 = *v32;
LABEL_27:
      v35 = *(float *)&v34;
      v36 = 1;
      goto LABEL_30;
    }
    v36 = 0;
    v35 = *(float *)v32;
    v150 = LODWORD(v35);
    v34 = LODWORD(v35);
  }
LABEL_30:
  v37 = v27 != 0;
  v38 = v31 & 7;
  if ((v38 - 2) >= 2)
  {
    if (v38 == 4)
    {
      v37 = v27 == 0;
    }
    else if (v38 != 5)
    {
      v20 = v27 == 0;
      v39 = 3;
      if (v20)
        v39 = 1;
      goto LABEL_36;
    }
  }
  v39 = 2;
  if (v37)
    v39 = 0;
LABEL_36:
  v40 = v22 ^ v23;
  v41 = (unsigned int *)(v24 + 40 + 8 * v39);
  v146 = 0;
  v149 = 0;
  v147 = *((_BYTE *)v41 + 4);
  v42 = v147;
  v148 = *((_BYTE *)v41 + 5);
  if (v147 - 2 >= 9)
  {
    if (v147 == 11)
    {
      v146 = *v41;
      v111 = v146;
      v112 = v34;
      WebCore::Length::ref((int *)&v146);
      v43 = v111;
      v34 = v112;
      goto LABEL_39;
    }
    v43 = 0;
    v45 = 1;
    v44 = 0.0;
  }
  else
  {
    v149 = *((_BYTE *)v41 + 6);
    if (!v149)
    {
      v43 = *v41;
      v146 = *v41;
LABEL_39:
      v44 = *(float *)&v43;
      v45 = 1;
      goto LABEL_42;
    }
    v45 = 0;
    v44 = *(float *)v41;
    v146 = LODWORD(v44);
    v43 = LODWORD(v44);
  }
LABEL_42:
  v46 = a4;
  if (v40)
  {
    v124 = v34;
    v125 = v43;
    v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v43 = v125;
    v34 = v124;
    v46 = v126;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v21 + 11) + 40) + 461) & 4) != 0)
  {
    v140 = v34;
    v128 = v43;
    v129 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, uint64_t))(*(_QWORD *)v21 + 1584))(v21, 4, a1);
    v43 = v128;
    v34 = v140;
    if (v129)
    {
      v130 = *(_QWORD *)(a1 + 32);
      if (v130 && (v131 = *(_QWORD *)(v130 + 8)) != 0 && *(_BYTE *)(v131 + 46) == 12 && (*(_BYTE *)(a1 + 21) & 4) == 0)
      {
        v137 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a1, (void *)v140);
        v50 = 0;
        *((_BYTE *)v137 + 2) |= 4u;
      }
      else
      {
        v50 = 0;
      }
      v34 = v140;
      v43 = v128;
      goto LABEL_53;
    }
  }
  if (v33 != 4)
  {
    if (v33 == 3)
    {
      v89 = (float)SLODWORD(v35);
      if (!v36)
        v89 = v35;
      v47 = (float)((float)((float)v46 * 0.015625) * v89) / 100.0;
      goto LABEL_48;
    }
    if (v33 != 11)
    {
      v50 = 0;
      goto LABEL_53;
    }
    v139 = v43;
    v114 = v34;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v150, (float)v46 * 0.015625);
    v116 = v115 * 64.0;
    if (v116 < 2147483650.0 && v116 > -2147483650.0)
      goto LABEL_235;
    if (v116 >= 2147483650.0)
    {
      v50 = 0x7FFFFFFF;
      goto LABEL_236;
    }
    if (v116 <= -2147483650.0)
      v50 = 0x80000000;
    else
LABEL_235:
      v50 = (int)v116;
LABEL_236:
    v34 = v114;
    v43 = v139;
    goto LABEL_53;
  }
  v47 = (float)SLODWORD(v35);
  if (!v36)
    v47 = v35;
LABEL_48:
  v48 = v47 * 64.0;
  if (v48 < 2147483650.0 && v48 > -2147483650.0)
    goto LABEL_52;
  if (v48 >= 2147483650.0)
  {
    v50 = 0x7FFFFFFF;
    goto LABEL_53;
  }
  if (v48 <= -2147483650.0)
    v50 = 0x80000000;
  else
LABEL_52:
    v50 = (int)v48;
LABEL_53:
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v21 + 11) + 40) + 461) & 8) != 0)
  {
    v132 = *(uint64_t (**)(WebCore::RenderObject *, uint64_t, uint64_t))(*(_QWORD *)v21 + 1584);
    v133 = v21;
    v119 = (void *)v34;
    v118 = v43;
    v134 = v132(v133, 8, a1);
    v43 = v118;
    v34 = (unint64_t)v119;
    if (v134)
    {
      v135 = *(_QWORD *)(a1 + 32);
      if (v135 && (v136 = *(_QWORD *)(v135 + 8)) != 0 && *(_BYTE *)(v136 + 46) == 12 && (*(_BYTE *)(a1 + 21) & 4) == 0)
      {
        v138 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a1, v119);
        v54 = 0;
        *((_BYTE *)v138 + 2) |= 8u;
      }
      else
      {
        v54 = 0;
      }
      goto LABEL_242;
    }
  }
  if (v42 == 4)
  {
    v51 = (float)SLODWORD(v44);
    if (!v45)
      v51 = v44;
    goto LABEL_57;
  }
  if (v42 != 3)
  {
    if (v42 != 11)
    {
      v54 = 0;
      goto LABEL_62;
    }
    v118 = v43;
    v119 = (void *)v34;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v146, (float)v46 * 0.015625);
    v121 = v120 * 64.0;
    if (v121 < 2147483650.0 && v121 > -2147483650.0)
      goto LABEL_241;
    if (v121 >= 2147483650.0)
    {
      v54 = 0x7FFFFFFF;
      goto LABEL_242;
    }
    if (v121 <= -2147483650.0)
      v54 = 0x80000000;
    else
LABEL_241:
      v54 = (int)v121;
LABEL_242:
    v34 = (unint64_t)v119;
    v43 = v118;
    goto LABEL_62;
  }
  v90 = (float)SLODWORD(v44);
  if (!v45)
    v90 = v44;
  v51 = (float)((float)((float)v46 * 0.015625) * v90) / 100.0;
LABEL_57:
  v52 = v51 * 64.0;
  if (v52 < 2147483650.0 && v52 > -2147483650.0)
    goto LABEL_61;
  if (v52 >= 2147483650.0)
  {
    v54 = 0x7FFFFFFF;
  }
  else
  {
    if (v52 > -2147483650.0)
    {
LABEL_61:
      v54 = (int)v52;
      goto LABEL_62;
    }
    v54 = 0x80000000;
  }
LABEL_62:
  v55 = a4 - v50;
  if (__OFSUB__(a4, v50))
    v55 = (a4 >> 31) + 0x7FFFFFFF;
  v19 = v55 - v54;
  if (__OFSUB__(v55, v54))
    v19 = (v55 >> 31) + 0x7FFFFFFF;
  if (v42 == 11)
  {
    v113 = v34;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v43);
    v34 = v113;
  }
  if (v33 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34);
  }
  if (((*(_BYTE *)(a1 + 20) & 1) != 0
     || (*(_BYTE *)(a1 + 45) & 1) == 0
     && (v109 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) != 0
     && (*(_QWORD *)(v109 + 64) & 0xFFFFFFFFFFFFLL) == a1
     && (*(_WORD *)(v109 + 28) & 0x10) != 0
     && *(_QWORD *)(*(_QWORD *)(v109 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1504))(a1)
    && (*(_BYTE *)(a1 + 21) & 8) == 0
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 8)
    && (*(unsigned int (**)(unsigned int *))(*(_QWORD *)v142 + 1672))(v142))
  {
    v123 = WebCore::RenderBox::shrinkLogicalWidthToAvoidFloats((unsigned int *)a1, v50, v54, v142, v141);
    if (v123 >= (int)v19)
      v19 = v19;
    else
      v19 = v123;
  }
  if (a2)
    return v19;
  if ((*(_BYTE *)(a1 + 21) & 8) != 0)
    goto LABEL_198;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1))
  {
    if ((*(_BYTE *)(a1 + 45) & 1) != 0)
      goto LABEL_198;
    v105 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (!v105
      || (*(_QWORD *)(v105 + 64) & 0xFFFFFFFFFFFFLL) != a1
      || (*(_WORD *)(v105 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v105 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
    {
      goto LABEL_198;
    }
  }
  v56 = *(_QWORD *)(a1 + 32);
  if (v56)
  {
    v57 = *(_QWORD *)(v56 + 8);
    if (v57)
    {
      if (*(_BYTE *)(v57 + 46) == 12 && (*(_BYTE *)(a1 + 21) & 4) == 0)
      {
        do
        {
          v100 = v57;
          v101 = *(_QWORD *)(v57 + 32);
          if (!v101)
            break;
          v57 = *(_QWORD *)(v101 + 8);
          if (!v57)
            break;
        }
        while (*(_BYTE *)(v57 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 88) + 40) + 80) + 259));
        v102 = v100;
        do
        {
          v103 = v102;
          v104 = *(_QWORD *)(v102 + 32);
          if (!v104)
            break;
          v102 = *(_QWORD *)(v104 + 8);
          if (!v102)
            break;
        }
        while (*(_BYTE *)(v102 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v103 + 88) + 40) + 80) + 258));
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v103 + 88) + 40) + 80) + 260)
           || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 88) + 40) + 80) + 261))
          && WebCore::RenderBox::hasStretchedLogicalWidth((WebCore::RenderObject *)a1, 0))
        {
          return v19;
        }
        goto LABEL_198;
      }
    }
  }
  v58 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v59 = (unsigned int *)(v58 + 12);
  else
    v59 = (unsigned int *)(v58 + 4);
  v153 = 0;
  v151 = *((_BYTE *)v59 + 4);
  v60 = v151;
  v152 = *((_BYTE *)v59 + 5);
  if (v151 - 2 >= 9)
  {
    v61 = 0;
    if (v151 == 11)
    {
      v61 = (void *)*v59;
      v150 = *v59;
      WebCore::Length::ref((int *)&v150);
      v56 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    if (v151 == 5)
      goto LABEL_198;
    v61 = (void *)*v59;
  }
  if (v56)
    v62 = *(_QWORD *)(v56 + 8);
  else
    v62 = 0;
  if ((*(_BYTE *)(v62 + 45) & 1) == 0
    && (v63 = *(_QWORD *)(*(_QWORD *)(v62 + 24) + 8)) != 0
    && v62 == (*(_QWORD *)(v63 + 64) & 0xFFFFFFFFFFFFLL)
    && (*(_WORD *)(v63 + 28) & 0x10) != 0)
  {
    v64 = *(_QWORD **)(v56 + 8);
    if (*(_QWORD *)(*(_QWORD *)(v63 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
    {
      v127 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v64[11] + 40) + 64) + 20) >> 2) & 7;
      if (v127 != 7 && ((0x67u >> v127) & 1) != 0)
        goto LABEL_174;
    }
  }
  else
  {
    v64 = *(_QWORD **)(v56 + 8);
  }
  if (((*(uint64_t (**)(_QWORD *))(*v64 + 176))(v64) & 1) != 0)
    goto LABEL_174;
  v65 = *(_QWORD *)(a1 + 32);
  if (!v65)
    goto LABEL_174;
  v66 = *(_QWORD *)(v65 + 8);
  if (*(char *)(v66 + 45) < 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 88) + 32) + 16) + 20) & 0xE) != 2
      || !WebCore::RenderBox::columnFlexItemHasStretchAlignment((WebCore::RenderBox *)a1))
    {
      goto LABEL_174;
    }
    v66 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  if (*(_BYTE *)(v66 + 46) == 5)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 88) + 32) + 8) + 16) & 0x27) == 0x20)
      goto LABEL_106;
LABEL_174:
    v71 = 1;
LABEL_107:
    if (v60 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v61);
    }
    if ((v71 & 1) == 0)
      return v19;
    goto LABEL_198;
  }
  if (v60)
  {
LABEL_106:
    v70 = (*(_DWORD *)(a1 + 20) & 0x1000) == 0;
    v71 = v70 ^ ((*((_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1) + 21) & 0x10) == 0);
    goto LABEL_107;
  }
  if ((*(char *)(v66 + 45) & 0x80000000) == 0
    || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 88) + 32) + 16) + 20) & 0xE) != 2)
  {
    goto LABEL_97;
  }
  v73 = *(_DWORD *)(a1 + 120);
  v74 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  v75 = (v73 >> 26) & 1;
  v76 = v75;
  if ((v74 - 2) >= 2)
  {
    if (v74 == 4)
    {
      v76 = (v73 & 0x4000000) == 0;
    }
    else
    {
      v76 = (v73 >> 26) & 1;
      if (v74 != 5)
      {
        v77 = 3;
        if ((v73 & 0x4000000) != 0)
          v77 = 1;
        goto LABEL_123;
      }
    }
  }
  v20 = v76 == 0;
  v77 = 2;
  if (v20)
    v77 = 0;
LABEL_123:
  v78 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 40;
  if (!*(_BYTE *)(v78 + 8 * v77 + 4))
    goto LABEL_97;
  if ((v74 - 2) >= 2)
  {
    if (v74 == 4)
    {
      v75 = (v73 & 0x4000000) == 0;
    }
    else if (v74 != 5)
    {
      v79 = 3;
      if ((v73 & 0x4000000) == 0)
        v79 = 1;
      goto LABEL_129;
    }
  }
  v20 = v75 == 0;
  v79 = 2;
  if (!v20)
    v79 = 0;
LABEL_129:
  if (*(_BYTE *)(v78 + 8 * v79 + 4))
  {
    v80 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
    v81 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v80 + 1600))(v80, 0);
    v82 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 125);
    v83 = v82 & 0xF;
    if (v83 == 1)
    {
      v82 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v66 + 88) + 32) + 124);
      v83 = v82 & 0xF;
    }
    if (v83 < 3)
      v82 = v81;
    if ((v82 & 0xF) == 3)
      goto LABEL_106;
  }
LABEL_97:
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    goto LABEL_106;
  v67 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!v67)
    goto LABEL_106;
  v68 = *(_WORD *)(v67 + 28);
  if ((v68 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194148CF8);
  }
  if ((v68 & 0x10) == 0)
    goto LABEL_106;
  v69 = *(_QWORD *)(*(_QWORD *)(v67 + 96) + 24);
  if (v69 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
    && v69 != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
    && v69 != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24)
    && v69 != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)
    && v69 != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
  {
    goto LABEL_106;
  }
LABEL_198:
  v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
  v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
  if ((int)v19 >= v107)
    v108 = v107;
  else
    v108 = v19;
  if ((int)v106 <= (int)v108)
    return v108;
  else
    return v106;
}

unint64_t WebCore::RenderBox::updateLogicalWidth(WebCore::RenderBox *this)
{
  unint64_t result;
  char v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD v11[2];
  uint64_t v12;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  result = WebCore::RenderBox::computeLogicalWidthInFragment(this, (int *)v11, 0);
  v3 = *((_DWORD *)this + 31) >> 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    *((_DWORD *)this + 41) = v11[0];
    *((_DWORD *)this + 39) = HIDWORD(v11[0]);
  }
  else
  {
    *((_DWORD *)this + 40) = v11[0];
    *((_DWORD *)this + 38) = HIDWORD(v11[0]);
  }
  v4 = v3 & 7;
  v5 = *((_DWORD *)this + 30);
  v6 = (v5 >> 26) & 1;
  v7 = v6;
  if ((v4 - 2) >= 2)
  {
    if (v4 == 4)
    {
      v7 = (v5 & 0x4000000) == 0;
    }
    else
    {
      v7 = (v5 >> 26) & 1;
      if (v4 != 5)
      {
        if ((v5 & 0x4000000) != 0)
          v8 = 1;
        else
          v8 = 3;
        goto LABEL_9;
      }
    }
  }
  if (v7)
    v8 = 2;
  else
    v8 = 0;
LABEL_9:
  *((_DWORD *)this + v8 + 42) = v12;
  if ((v4 - 2) >= 2)
  {
    if (v4 == 4)
    {
      v6 = (v5 & 0x4000000) == 0;
    }
    else if (v4 != 5)
    {
      v9 = 3;
      if ((v5 & 0x4000000) == 0)
        v9 = 1;
      goto LABEL_14;
    }
  }
  v10 = v6 == 0;
  v9 = 2;
  if (!v10)
    v9 = 0;
LABEL_14:
  *((_DWORD *)this + v9 + 42) = HIDWORD(v12);
  return result;
}

unint64_t WebCore::RenderBox::computeLogicalWidthInFragment(WebCore::RenderBox *this, int *a2, WebCore::RenderFragmentContainer *a3)
{
  char *v6;
  char *v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int i;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  int v39;
  unsigned __int8 v40;
  unsigned int v41;
  int v42;
  void *v43;
  float v44;
  char v45;
  unint64_t result;
  uint64_t v47;
  char v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  char v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  WebCore::RenderObject *v58;
  int v59;
  int v60;
  _BOOL4 v61;
  _BOOL4 v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  int v69;
  int v70;
  unsigned int v71;
  int *v72;
  int *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  int v77;
  void *v78;
  unsigned int v79;
  int v80;
  int *v81;
  unsigned int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  float v89;
  double v90;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  float v99;
  double v100;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  double v110;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int *v122;
  int v123;
  unint64_t v124;
  float v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  double v134;
  _BOOL4 v136;
  int v137;
  uint64_t v138;
  unsigned int *v139;
  int v140;
  void *v141;
  float v142;
  int v143;
  double v144;
  int v145;
  float v146;
  double v147;
  int v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  const WebCore::RenderBox *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float v158;
  float v160;
  float v161;
  float v162;
  void *v163;
  unint64_t v164;
  void *v165;
  float v166;
  void *v167;
  float v168;
  double v169;
  float v170;
  double v171;
  int v172;
  WebCore::RenderObject *v173;
  WebCore::RenderFragmentContainer *v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int *v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  float v183;
  void *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  int *v194;
  _BOOL4 v195;
  float v196;
  int v197;
  int *v198;
  unsigned int v199;
  unsigned __int8 v200;
  char v201;
  char v202;
  unsigned int v203;
  unsigned __int8 v204;
  char v205;
  char v206;
  char v207;
  unsigned int v208[2];
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;

  v6 = (char *)this + 164;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v6 = (char *)this + 160;
  *a2 = *(_DWORD *)v6;
  v7 = (char *)this + 156;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v7 = (char *)this + 152;
  a2[1] = *(_DWORD *)v7;
  v8 = *((_DWORD *)this + 30);
  v9 = (v8 >> 26) & 1;
  v10 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v10 - 2) >= 2)
  {
    if (v10 == 4)
    {
      v9 = (v8 & 0x4000000) == 0;
    }
    else if (v10 != 5)
    {
      if ((v8 & 0x4000000) != 0)
        v11 = 1;
      else
        v11 = 3;
      goto LABEL_11;
    }
  }
  if (v9)
    v11 = 2;
  else
    v11 = 0;
LABEL_11:
  a2[4] = *((_DWORD *)this + v11 + 42);
  v194 = a2 + 4;
  v12 = *((_DWORD *)this + 30);
  v13 = (v12 >> 26) & 1;
  v14 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v14 - 2) >= 2)
  {
    if (v14 == 4)
    {
      v13 = (v12 & 0x4000000) == 0;
    }
    else if (v14 != 5)
    {
      v15 = 3;
      if ((v12 & 0x4000000) == 0)
        v15 = 1;
      goto LABEL_16;
    }
  }
  v32 = v13 == 0;
  v15 = 2;
  if (!v32)
    v15 = 0;
LABEL_16:
  a2[5] = *((_DWORD *)this + v15 + 42);
  v198 = a2 + 5;
  if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
    return WebCore::RenderBox::computePositionedLogicalWidth((uint64_t)this, a2, a3);
  v16 = *((_QWORD *)this + 4);
  if (v16)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = 0;
  if (*(char *)(v17 + 45) < 0 || *(_BYTE *)(v17 + 46) == 5)
  {
    result = WebCore::RenderBox::overridingLogicalWidth(this);
    if (HIDWORD(result))
    {
      *a2 = result;
      return result;
    }
    v16 = *((_QWORD *)this + 4);
  }
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 8);
    if (*(_BYTE *)(v18 + 46) == 5)
      v19 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 88) + 32) + 8) + 16) >> 5) & 1;
    else
      v19 = 0;
  }
  else
  {
    v19 = 0;
    v18 = MEMORY[8];
  }
  v20 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 88) + 32) + 8) + 16);
  v21 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1616))(this);
  if (v21 && v19)
  {
    if ((v20 & 7) == 0)
      goto LABEL_27;
LABEL_100:
    v55 = *((_QWORD *)this + 4);
    v57 = !v55
       || (v56 = *(_QWORD *)(v55 + 8)) == 0
       || *(_BYTE *)(v56 + 46) != 12
       || (*((_BYTE *)this + 21) & 4) != 0
       || !WebCore::RenderBox::hasStretchedLogicalWidth(this, 0);
    v195 = v57;
    goto LABEL_28;
  }
  if (v21)
    goto LABEL_100;
LABEL_27:
  v195 = 0;
LABEL_28:
  memset(v208, 0, 7);
  v22 = (uint64_t *)WebCore::gOverridingLogicalWidthLengthMap;
  if (!WebCore::gOverridingLogicalWidthLengthMap)
    goto LABEL_45;
  ++*(_DWORD *)(WebCore::gOverridingLogicalWidthLengthMap + 8);
  v23 = *((_QWORD *)this + 1);
  if (v23 && *(_QWORD *)(v23 + 8))
  {
    v24 = *v22;
    if (*v22)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      v29 = v25 & ((v28 >> 31) ^ v28);
      for (i = 1; ; ++i)
      {
        v31 = *(_QWORD *)(v24 + 16 * v29);
        if (!v31)
        {
          v33 = *(unsigned int *)(v24 - 4);
          v34 = v24 + 16 * v33;
          v35 = v34;
          goto LABEL_40;
        }
        v32 = v31 != -1 && v31 == v23;
        if (v32)
          break;
        v29 = (v29 + i) & v25;
      }
      v34 = v24 + 16 * v29;
      v33 = *(unsigned int *)(v24 - 4);
      v35 = v24 + 16 * v33;
LABEL_40:
      v209 = v22;
      v210 = v34;
      v36 = v24 + 16 * v33;
      v211 = v35;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v210 = 0;
      v211 = 0;
      v209 = v22;
    }
LABEL_41:
    while (v34 != v36 && !*(_QWORD *)(*(_QWORD *)v34 + 8))
    {
      v47 = v34 + 16;
      v210 = v47;
      v34 = v35;
      if (v47 != v35)
      {
        v34 = v47;
        while ((unint64_t)(*(_QWORD *)v34 + 1) <= 1)
        {
          v34 += 16;
          v210 = v34;
          if (v34 == v35)
          {
            v34 = v35;
            goto LABEL_41;
          }
        }
      }
    }
  }
  else
  {
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v209, v22);
    v24 = *(_QWORD *)WebCore::gOverridingLogicalWidthLengthMap;
  }
  if (v24)
    v24 += 16 * *(unsigned int *)(v24 - 4);
  if (v210 == v24)
  {
LABEL_45:
    LOBYTE(v203) = 0;
    v207 = 0;
    if (v195)
    {
      v44 = (float)(*(int (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 1328))(this, 0)
          * 0.015625;
      *(float *)&v209 = v44;
      v39 = 4;
      WORD2(v209) = 4;
      v42 = 1;
      BYTE6(v209) = 1;
      LOWORD(v208[1]) = 4;
      BYTE2(v208[1]) = 1;
      goto LABEL_108;
    }
    v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v38 = (unsigned int *)(v37 + 12);
    else
      v38 = (unsigned int *)(v37 + 4);
    BYTE4(v209) = *((_BYTE *)v38 + 4);
    v39 = BYTE4(v209);
    v40 = *((_BYTE *)v38 + 5);
    *(_WORD *)((char *)&v209 + 5) = v40;
    v41 = BYTE4(v209) - 2;
    if (v41 >= 9)
    {
      if (BYTE4(v209) == 11)
      {
        v43 = (void *)*v38;
        LODWORD(v209) = *v38;
        WebCore::Length::ref((int *)&v209);
        LOBYTE(v208[1]) = 11;
        BYTE1(v208[1]) = v40;
        goto LABEL_90;
      }
      v43 = 0;
      v42 = 0;
      v45 = 1;
      v44 = 0.0;
    }
    else
    {
      BYTE6(v209) = *((_BYTE *)v38 + 6);
      if (BYTE6(v209))
      {
        v45 = 0;
        v44 = *(float *)v38;
        *(float *)&v209 = v44;
        v43 = (void *)LODWORD(v44);
        v42 = 1;
      }
      else
      {
        v42 = 0;
        v43 = (void *)*v38;
        LODWORD(v209) = (_DWORD)v43;
        v44 = *(float *)&v43;
        v45 = 1;
      }
    }
    LOBYTE(v208[1]) = BYTE4(v209);
    BYTE1(v208[1]) = v40;
    if (v41 < 9)
    {
      BYTE2(v208[1]) = v42;
      if ((v45 & 1) != 0)
      {
        v42 = 0;
        v208[0] = v43;
        v44 = *(float *)&v43;
        v192 = (int)v43;
LABEL_109:
        v53 = 1;
        goto LABEL_110;
      }
LABEL_108:
      *(float *)v208 = v44;
      v192 = LODWORD(v44);
      goto LABEL_109;
    }
    v42 = 0;
    v44 = 0.0;
    if (BYTE4(v209) > 0xDu)
    {
      v192 = 0;
      goto LABEL_109;
    }
    if (((1 << SBYTE4(v209)) & 0x3003) != 0)
    {
      v192 = 0;
      v42 = 0;
      v208[0] = 0;
      if (BYTE4(v209) != 11)
        goto LABEL_109;
LABEL_91:
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v43);
      v42 = 0;
      v39 = 11;
      goto LABEL_109;
    }
    v192 = 0;
    if (BYTE4(v209) != 11)
      goto LABEL_109;
LABEL_90:
    v208[0] = v43;
    WebCore::Length::ref((int *)v208);
    v44 = *(float *)&v43;
    v192 = (int)v43;
    goto LABEL_91;
  }
  v203 = 0;
  v206 = 0;
  v204 = *(_BYTE *)(v210 + 12);
  v39 = v204;
  v48 = *(_BYTE *)(v210 + 13);
  v205 = v48;
  v49 = v204 - 2;
  if (v49 >= 9)
  {
    if (v204 == 11)
    {
      v51 = *(unsigned int *)(v210 + 8);
      v203 = v51;
      WebCore::Length::ref((int *)&v203);
      v207 = 1;
      LOBYTE(v208[1]) = 11;
      BYTE1(v208[1]) = v48;
      goto LABEL_98;
    }
    *(float *)&v51 = 0.0;
    v50 = 0;
    v52 = 1;
    v44 = 0.0;
  }
  else
  {
    v206 = *(_BYTE *)(v210 + 14);
    v50 = v206;
    if (v206)
    {
      v52 = 0;
      v44 = *(float *)(v210 + 8);
      v203 = LODWORD(v44);
      *(float *)&v51 = v44;
      v50 = 1;
    }
    else
    {
      v51 = *(unsigned int *)(v210 + 8);
      v203 = v51;
      v44 = *(float *)&v51;
      v52 = 1;
    }
  }
  LOBYTE(v208[1]) = v204;
  BYTE1(v208[1]) = v48;
  if (v49 < 9)
  {
    BYTE2(v208[1]) = v50;
    v53 = 0;
    if ((v52 & 1) != 0)
    {
      v42 = 0;
      v208[0] = v51;
      v44 = *(float *)&v51;
      v192 = v51;
    }
    else
    {
      *(float *)v208 = v44;
      v192 = LODWORD(v44);
      v42 = 1;
    }
    goto LABEL_110;
  }
  v54 = 0;
  v44 = 0.0;
  if (v204 <= 0xDu)
  {
    if (((1 << v204) & 0x3003) != 0)
    {
      v54 = 0;
      v208[0] = 0;
      goto LABEL_87;
    }
    if (v204 != 11)
      goto LABEL_87;
LABEL_98:
    v208[0] = v51;
    WebCore::Length::ref((int *)v208);
    v44 = *(float *)&v51;
    v54 = v51;
  }
LABEL_87:
  v192 = v54;
  if (v39 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v203);
  }
  v53 = 0;
  v42 = 0;
LABEL_110:
  v58 = WebCore::RenderObject::containingBlock(this);
  if (a3)
  {
    v173 = WebCore::RenderObject::containingBlock(this);
    v174 = WebCore::RenderBox::clampToStartAndEndFragments(v173, a3);
    v175 = WebCore::RenderBox::contentLogicalWidth(v173);
    v176 = v175;
    if (v174)
    {
      v177 = WebCore::RenderFragmentContainer::renderBoxFragmentInfo(v174, v173);
      v59 = v176;
      if (v177)
      {
        if (((*((_DWORD *)v173 + 31) >> 13) & 6u) - 2 < 4)
          v178 = (unsigned int *)((char *)v173 + 164);
        else
          v178 = (unsigned int *)((char *)v173 + 160);
        v179 = *v178;
        v180 = *(_DWORD *)(v177 + 4);
        v75 = __OFSUB__(v179, v180);
        v181 = v179 - v180;
        if (v75)
          v181 = (v179 >> 31) + 0x7FFFFFFF;
        v75 = __OFSUB__(v176, v181);
        v182 = v176 - v181;
        if (v75)
          v182 = (v176 >> 31) + 0x7FFFFFFF;
        v59 = v182 & ~(v182 >> 31);
      }
    }
    else
    {
      v59 = v175;
    }
  }
  else
  {
    v59 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
  }
  v197 = v59;
  v60 = v59 & ~(v59 >> 31);
  v61 = (*((_BYTE *)v58 + 21) & 0x10) == 0;
  v62 = (*((_DWORD *)this + 5) & 0x1000) == 0;
  if ((*((_DWORD *)this + 5) & 1) != 0
    || ((*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 160))(this) & 1) != 0)
  {
    v63 = v60;
    v64 = v61 ^ v62;
    if (v64)
      v63 = WebCore::RenderBox::perpendicularContainingBlockLogicalHeight(this);
    v65 = *((_QWORD *)this + 4);
    if (!v65
      || (v66 = *(_QWORD *)(v65 + 8)) == 0
      || *(_BYTE *)(v66 + 46) != 12
      || (*((_BYTE *)this + 21) & 4) != 0
      || (result = WebCore::RenderBox::overridingLogicalWidth(this), !HIDWORD(result)))
    {
      if (!v195)
      {
        if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 > 1
          || *((unsigned __int8 *)this + 46) - 36 < 5)
        {
          goto LABEL_120;
        }
        v150 = *((_QWORD *)this + 4);
        if (!v150)
          goto LABEL_459;
        v151 = *(_QWORD *)(v150 + 8);
        if (!v151 || *(_BYTE *)(v151 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0)
          goto LABEL_459;
        if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1616))(this))
        {
          if (WebCore::RenderBox::hasStretchedLogicalWidth(this, 0)
            && (WebCore::RenderBox::hasStretchedLogicalHeight(this) & 1) != 0)
          {
            goto LABEL_120;
          }
        }
        else if (WebCore::RenderBox::hasStretchedLogicalWidth(this, 1))
        {
          goto LABEL_120;
        }
        v186 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
        v187 = ((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4 ? v186 + 12 : v186 + 4;
        if ((*(_BYTE *)(v187 + 4) & 0xF7) != 3
          || ((v188 = *(_QWORD *)(*((_QWORD *)this + 4) + 8),
               v189 = ((*(_DWORD *)(v188 + 124) >> 13) & 6) - 2,
               v190 = *(_QWORD *)(*(_QWORD *)(v188 + 88) + 8),
               v189 < 4)
            ? (v191 = v190 + 12)
            : (v191 = v190 + 4),
              *(_BYTE *)(v191 + 4) != 4))
        {
LABEL_459:
          if ((unint64_t)WebCore::RenderBox::overridingLogicalHeight(this) >> 32
            || WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets(this, v152)
            || ((v153 = *(_QWORD *)(*((_QWORD *)this + 11) + 8), ((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
              ? (v154 = v153 + 4)
              : (v154 = v153 + 12),
                *(_BYTE *)(v154 + 4) == 4
             || WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio(void)const::$_0::operator()((uint64_t)this)))
          {
            v155 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
            v156 = ((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4 ? v155 + 12 : v155 + 4;
            if (!*(_BYTE *)(v156 + 4))
            {
              result = WebCore::RenderBox::computeLogicalWidthFromAspectRatio(this, a3);
              goto LABEL_127;
            }
          }
        }
LABEL_120:
        if (v53)
        {
          v67 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
          if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
            v68 = (unsigned int *)(v67 + 12);
          else
            v68 = (unsigned int *)(v67 + 4);
        }
        else
        {
          v68 = v208;
        }
        v199 = 0;
        v202 = 0;
        v200 = *((_BYTE *)v68 + 4);
        v201 = *((_BYTE *)v68 + 5);
        if (v200 - 2 >= 9)
        {
          if (v200 == 11)
          {
            v78 = (void *)*v68;
            v199 = *v68;
            WebCore::Length::ref((int *)&v199);
            v69 = WebCore::RenderBox::computeLogicalWidthInFragmentUsing((uint64_t)this, 0, (WebCore::Length *)&v199, v63, (unsigned int *)v58, (uint64_t)a3);
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v78);
            goto LABEL_126;
          }
        }
        else
        {
          v202 = *((_BYTE *)v68 + 6);
          v199 = *v68;
        }
        v69 = WebCore::RenderBox::computeLogicalWidthInFragmentUsing((uint64_t)this, 0, (WebCore::Length *)&v199, v63, (unsigned int *)v58, (uint64_t)a3);
LABEL_126:
        result = WebCore::RenderBox::constrainLogicalWidthInFragmentByMinMax(this, v69, v63, (unsigned int *)v58, (uint64_t)a3, 1);
        goto LABEL_127;
      }
      if (!v42)
        v44 = (float)SLODWORD(v44);
      v127 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
      v128 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
      if (__OFADD__(v127, v128))
        v129 = (v127 >> 31) + 0x7FFFFFFF;
      else
        v129 = v127 + v128;
      v130 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
      if (__OFADD__(v129, v130))
        v131 = (v129 >> 31) + 0x7FFFFFFF;
      else
        v131 = v129 + v130;
      v132 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
      v133 = v131 + v132;
      if (__OFADD__(v131, v132))
        v133 = (v131 >> 31) + 0x7FFFFFFF;
      v134 = (float)(v44 + (float)((float)v133 * 0.015625)) * 64.0;
      if (v134 < 2147483650.0 && v134 > -2147483650.0)
        goto LABEL_235;
      if (v134 >= 2147483650.0)
      {
        result = 0x7FFFFFFFLL;
        goto LABEL_127;
      }
      if (v134 <= -2147483650.0)
        result = 0x80000000;
      else
LABEL_235:
        result = (int)v134;
    }
LABEL_127:
    *a2 = result;
    if ((v64 & 1) == 0 && (*((_DWORD *)this + 5) & 0x801) == 1)
    {
      if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1504))(this))
      {
        v70 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v58 + 1672))(v58);
        v71 = v60;
        if (v70)
          v71 = WebCore::RenderBox::containingBlockAvailableLineWidthInFragment(this, a3);
      }
      else
      {
        v71 = v60;
      }
      v72 = v194;
      if (((*((_BYTE *)v58 + 123) & 4) == 0) != ((*((_BYTE *)this + 123) & 4) == 0))
        v73 = v198;
      else
        v73 = v194;
      if (((*((_BYTE *)v58 + 123) & 4) == 0) == ((*((_BYTE *)this + 123) & 4) == 0))
        v72 = v198;
      result = (unint64_t)WebCore::RenderBox::computeInlineDirectionMargins((int *)this, v58, v60, v71 | 0x100000000, *a2, v73, v72);
      if (v197 < 1)
        goto LABEL_144;
      goto LABEL_139;
    }
    v114 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v116 = *((_DWORD *)this + 30);
    v115 = *((_DWORD *)this + 31);
    v117 = v116 & 0x4000000;
    v118 = (v116 >> 26) & 1;
    v119 = (unsigned __int16)v115 >> 13;
    if ((v119 - 2) >= 2)
    {
      if (v119 == 4)
      {
        v118 = v117 == 0;
      }
      else if (v119 != 5)
      {
        v120 = 3;
        if (v117)
          v120 = 1;
        goto LABEL_216;
      }
    }
    v32 = v118 == 0;
    v120 = 2;
    if (v32)
      v120 = 0;
LABEL_216:
    v121 = v115 >> 13;
    v122 = (unsigned int *)(v114 + 40 + 8 * v120);
    LODWORD(v209) = 0;
    BYTE6(v209) = 0;
    BYTE4(v209) = *((_BYTE *)v122 + 4);
    v123 = BYTE4(v209);
    BYTE5(v209) = *((_BYTE *)v122 + 5);
    if (BYTE4(v209) - 2 >= 9)
    {
      if (BYTE4(v209) == 11)
      {
        v124 = *v122;
        LODWORD(v209) = *v122;
        result = (unint64_t)WebCore::Length::ref((int *)&v209);
        v114 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v121 = *((_DWORD *)this + 31) >> 13;
        v117 = *((_DWORD *)this + 30) & 0x4000000;
        goto LABEL_219;
      }
      v124 = 0;
      v126 = 1;
      v125 = 0.0;
    }
    else
    {
      BYTE6(v209) = *((_BYTE *)v122 + 6);
      if (!BYTE6(v209))
      {
        v124 = *v122;
        LODWORD(v209) = *v122;
LABEL_219:
        v125 = *(float *)&v124;
        v126 = 1;
        goto LABEL_241;
      }
      v126 = 0;
      v125 = *(float *)v122;
      *(float *)&v209 = v125;
      v124 = LODWORD(v125);
    }
LABEL_241:
    v136 = v117 != 0;
    v137 = v121 & 7;
    if ((v137 - 2) >= 2)
    {
      if (v137 == 4)
      {
        v136 = v117 == 0;
      }
      else if (v137 != 5)
      {
        v32 = v117 == 0;
        v138 = 3;
        if (v32)
          v138 = 1;
        goto LABEL_247;
      }
    }
    v138 = 2;
    if (v136)
      v138 = 0;
LABEL_247:
    v139 = (unsigned int *)(v114 + 40 + 8 * v138);
    v203 = 0;
    v206 = 0;
    v204 = *((_BYTE *)v139 + 4);
    v140 = v204;
    v205 = *((_BYTE *)v139 + 5);
    if (v204 - 2 >= 9)
    {
      if (v204 == 11)
      {
        v164 = v124;
        v203 = *v139;
        v165 = (void *)v203;
        v166 = v125;
        result = (unint64_t)WebCore::Length::ref((int *)&v203);
        v125 = v166;
        v141 = v165;
        v124 = v164;
        goto LABEL_250;
      }
      v141 = 0;
      v143 = 1;
      v142 = 0.0;
    }
    else
    {
      v206 = *((_BYTE *)v139 + 6);
      if (!v206)
      {
        v141 = (void *)*v139;
        v203 = v141;
LABEL_250:
        v142 = *(float *)&v141;
        v143 = 1;
        goto LABEL_253;
      }
      v143 = 0;
      v142 = *(float *)v139;
      v203 = LODWORD(v142);
      v141 = (void *)LODWORD(v142);
    }
LABEL_253:
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v58 + 11) + 40) + 461) & 1) != 0)
    {
      v193 = v124;
      v184 = v141;
      v196 = v125;
      result = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)v58
                                                                                                 + 1584))(v58, 1, this);
      v125 = v196;
      v141 = v184;
      v124 = v193;
      if ((result & 1) != 0)
        goto LABEL_326;
    }
    if (v123 == 4)
    {
      if (v126)
        v125 = (float)SLODWORD(v125);
      v144 = v125 * 64.0;
      if (v144 < 2147483650.0 && v144 > -2147483650.0)
        goto LABEL_259;
      if (v144 < 2147483650.0)
      {
LABEL_413:
        if (v144 > -2147483650.0)
        {
LABEL_259:
          v145 = (int)v144;
          goto LABEL_260;
        }
        v145 = 0x80000000;
LABEL_260:
        *v194 = v145;
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v58 + 11) + 40) + 461) & 2) != 0)
        {
          v185 = v141;
          result = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)v58 + 1584))(v58, 2, this);
          v141 = v185;
          if ((result & 1) != 0)
          {
LABEL_328:
            v163 = v141;
            *v198 = 0;
            if (v140 != 11)
              goto LABEL_268;
            goto LABEL_347;
          }
        }
        if (v140 == 4)
        {
          v146 = (float)SLODWORD(v142);
          if (!v143)
            v146 = v142;
          v147 = v146 * 64.0;
          if (v147 < 2147483650.0 && v147 > -2147483650.0)
            goto LABEL_266;
          if (v147 < 2147483650.0)
          {
LABEL_416:
            if (v147 <= -2147483650.0)
            {
              v148 = 0x80000000;
              goto LABEL_267;
            }
LABEL_266:
            v148 = (int)v147;
LABEL_267:
            *v198 = v148;
            goto LABEL_268;
          }
LABEL_446:
          v148 = 0x7FFFFFFF;
          goto LABEL_267;
        }
        if (v140 == 3)
        {
          v158 = (float)SLODWORD(v142);
          if (!v143)
            v158 = v142;
          v147 = (float)((float)((float)((float)v60 * 0.015625) * v158) / 100.0) * 64.0;
          if (v147 < 2147483650.0 && v147 > -2147483650.0)
            goto LABEL_266;
          if (v147 < 2147483650.0)
            goto LABEL_416;
          goto LABEL_446;
        }
        if (v140 != 11)
          goto LABEL_328;
        v163 = v141;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v203, (float)v60 * 0.015625);
        v171 = v170 * 64.0;
        if (v171 < 2147483650.0 && v171 > -2147483650.0)
          goto LABEL_345;
        if (v171 >= 2147483650.0)
        {
          v172 = 0x7FFFFFFF;
          goto LABEL_346;
        }
        if (v171 > -2147483650.0)
LABEL_345:
          v172 = (int)v171;
        else
          v172 = 0x80000000;
LABEL_346:
        *v198 = v172;
LABEL_347:
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v163);
LABEL_268:
        if (v123 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v124);
        }
        if (v197 < 1)
          v149 = 1;
        else
          v149 = v64;
        if ((v149 & 1) != 0)
          goto LABEL_144;
LABEL_139:
        v74 = a2[4];
        v75 = __OFADD__(*a2, v74);
        v76 = *a2 + v74;
        if (v75)
          v76 = (*a2 >> 31) + 0x7FFFFFFF;
        v77 = v76 + *v198;
        if (__OFADD__(v76, *v198))
          v77 = (v76 >> 31) + 0x7FFFFFFF;
        if (v197 != v77
          && (*((_DWORD *)this + 5) & 0x801) == 1
          && (*((char *)v58 + 45) & 0x80000000) == 0
          && *((_BYTE *)v58 + 46) != 5)
        {
          result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v58 + 176))(v58);
          if ((result & 1) == 0 && *((_BYTE *)v58 + 46) != 12)
          {
            v79 = v197 - *a2;
            if (__OFSUB__(v197, *a2))
              v79 = 0x7FFFFFFF;
            if (((*((_BYTE *)v58 + 123) & 4) == 0) == ((*((_BYTE *)this + 123) & 4) == 0))
            {
              v80 = v79 - *v194;
              if (__OFSUB__(v79, *v194))
                v80 = (v79 >> 31) + 0x7FFFFFFF;
              v81 = v198;
            }
            else
            {
              v80 = v79 - *v198;
              if (__OFSUB__(v79, *v198))
                v80 = (v79 >> 31) + 0x7FFFFFFF;
              v81 = v194;
            }
            *v81 = v80;
          }
        }
        goto LABEL_144;
      }
LABEL_445:
      v145 = 0x7FFFFFFF;
      goto LABEL_260;
    }
    if (v123 == 3)
    {
      if (v126)
        v125 = (float)SLODWORD(v125);
      v144 = (float)((float)((float)((float)v60 * 0.015625) * v125) / 100.0) * 64.0;
      if (v144 < 2147483650.0 && v144 > -2147483650.0)
        goto LABEL_259;
      if (v144 < 2147483650.0)
        goto LABEL_413;
      goto LABEL_445;
    }
    if (v123 != 11)
    {
LABEL_326:
      v145 = 0;
      goto LABEL_260;
    }
    v167 = v141;
    result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v209, (float)v60 * 0.015625);
    v169 = v168 * 64.0;
    if (v169 < 2147483650.0 && v169 > -2147483650.0)
      goto LABEL_341;
    if (v169 >= 2147483650.0)
    {
      v145 = 0x7FFFFFFF;
      goto LABEL_342;
    }
    if (v169 > -2147483650.0)
LABEL_341:
      v145 = (int)v169;
    else
      v145 = 0x80000000;
LABEL_342:
    v141 = v167;
    goto LABEL_260;
  }
  v82 = *((_DWORD *)this + 30);
  v83 = (v82 >> 26) & 1;
  v84 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v84 - 2) >= 2)
  {
    if (v84 == 4)
    {
      v83 = (v82 & 0x4000000) == 0;
    }
    else if (v84 != 5)
    {
      v85 = 3;
      if ((v82 & 0x4000000) != 0)
        v85 = 1;
      goto LABEL_168;
    }
  }
  v32 = v83 == 0;
  v85 = 2;
  if (v32)
    v85 = 0;
LABEL_168:
  v86 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
  v87 = (unsigned __int8 *)(v86 + 8 * v85);
  v88 = v87[4];
  switch(v88)
  {
    case 4:
      v89 = *(float *)v87;
      if (!v87[6])
        v89 = (float)*(int *)v87;
      break;
    case 3:
      v161 = *(float *)v87;
      if (!*(_BYTE *)(v86 + 8 * v85 + 6))
        v161 = (float)*(int *)v87;
      v89 = (float)((float)((float)v60 * 0.015625) * v161) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v87, (float)v60 * 0.015625);
      break;
    default:
      v92 = 0;
      goto LABEL_176;
  }
  v90 = v89 * 64.0;
  if (v90 < 2147483650.0 && v90 > -2147483650.0)
    goto LABEL_175;
  if (v90 >= 2147483650.0)
  {
    v92 = 0x7FFFFFFF;
  }
  else
  {
    if (v90 > -2147483650.0)
    {
LABEL_175:
      v92 = (int)v90;
      goto LABEL_176;
    }
    v92 = 0x80000000;
  }
LABEL_176:
  *v194 = v92;
  v93 = *((_DWORD *)this + 30);
  v94 = (v93 >> 26) & 1;
  v95 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v95 - 2) >= 2)
  {
    if (v95 == 4)
    {
      v94 = (v93 & 0x4000000) == 0;
    }
    else if (v95 != 5)
    {
      v96 = 3;
      if ((v93 & 0x4000000) == 0)
        v96 = 1;
      goto LABEL_181;
    }
  }
  v32 = v94 == 0;
  v96 = 2;
  if (!v32)
    v96 = 0;
LABEL_181:
  v97 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
  result = v97 + 8 * v96;
  v98 = *(unsigned __int8 *)(result + 4);
  switch(v98)
  {
    case 4:
      v99 = *(float *)result;
      if (!*(_BYTE *)(result + 6))
        v99 = (float)*(int *)result;
      break;
    case 3:
      v162 = *(float *)result;
      if (!*(_BYTE *)(v97 + 8 * v96 + 6))
        v162 = (float)*(int *)result;
      v99 = (float)((float)((float)v60 * 0.015625) * v162) / 100.0;
      break;
    case 11:
      result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)result, (float)v60 * 0.015625);
      break;
    default:
      v102 = 0;
      goto LABEL_189;
  }
  v100 = v99 * 64.0;
  if (v100 < 2147483650.0 && v100 > -2147483650.0)
    goto LABEL_188;
  if (v100 >= 2147483650.0)
  {
    v102 = 0x7FFFFFFF;
    goto LABEL_189;
  }
  if (v100 <= -2147483650.0)
    v102 = 0x80000000;
  else
LABEL_188:
    v102 = (int)v100;
LABEL_189:
  *v198 = v102;
  if (!v195)
    goto LABEL_144;
  switch(v39)
  {
    case 4:
      if (!v42)
        v44 = (float)v192;
      break;
    case 3:
      v160 = (float)SLODWORD(v44);
      if (v42)
        v160 = v44;
      v44 = (float)(v160 * 0.0) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v208, 0.0);
      v44 = v183;
      break;
    default:
      v44 = 0.0;
      break;
  }
  v103 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
  v104 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v103, v104))
    v105 = (v103 >> 31) + 0x7FFFFFFF;
  else
    v105 = v103 + v104;
  v106 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v105, v106))
    v107 = (v105 >> 31) + 0x7FFFFFFF;
  else
    v107 = v105 + v106;
  v108 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
  v109 = v107 + v108;
  if (__OFADD__(v107, v108))
    v109 = (v107 >> 31) + 0x7FFFFFFF;
  v110 = (float)(v44 + (float)((float)v109 * 0.015625)) * 64.0;
  if (v110 < 2147483650.0 && v110 > -2147483650.0)
    goto LABEL_206;
  if (v110 >= 2147483650.0)
  {
    v112 = 0x7FFFFFFF;
    goto LABEL_207;
  }
  if (v110 <= -2147483650.0)
    v112 = 0x80000000;
  else
LABEL_206:
    v112 = (int)v110;
LABEL_207:
  result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 408))(this);
  if (v112 <= (int)result)
    v113 = result;
  else
    v113 = v112;
  *a2 = v113;
LABEL_144:
  if (LOBYTE(v208[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v208[0]);
  }
  return result;
}

BOOL WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio(WebCore::RenderBox *this)
{
  uint64_t v2;
  uint64_t v3;
  const WebCore::RenderBox *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 > 1
    || *((unsigned __int8 *)this + 46) - 36 < 5)
  {
    return 0;
  }
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
      {
        if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1616))(this))
        {
          if (WebCore::RenderBox::hasStretchedLogicalWidth(this, 0)
            && (WebCore::RenderBox::hasStretchedLogicalHeight(this) & 1) != 0)
          {
            return 0;
          }
        }
        else if (WebCore::RenderBox::hasStretchedLogicalWidth(this, 1))
        {
          return 0;
        }
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
        v9 = v8 + 12;
        v10 = v8 + 4;
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
          v10 = v9;
        if ((*(_BYTE *)(v10 + 4) & 0xF7) != 3)
          goto LABEL_8;
        v11 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
        v12 = ((*(_DWORD *)(v11 + 124) >> 13) & 6) - 2;
        v13 = *(_QWORD *)(*(_QWORD *)(v11 + 88) + 8);
        v14 = v12 >= 4;
        v15 = v13 + 12;
        v16 = v13 + 4;
        if (!v14)
          v16 = v15;
        if (*(_BYTE *)(v16 + 4) != 4)
          goto LABEL_8;
        return 0;
      }
    }
  }
LABEL_8:
  if ((unint64_t)WebCore::RenderBox::overridingLogicalHeight(this) >> 32
    || WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets(this, v4))
  {
    return 1;
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v6 = v5 + 4;
  v7 = v5 + 12;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v7 = v6;
  return *(_BYTE *)(v7 + 4) == 4
      || WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio(void)const::$_0::operator()((uint64_t)this);
}

uint64_t WebCore::RenderBlockFlow::MarginInfo::MarginInfo(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  __int16 v15;
  uint64_t v16;
  int v17;

  *(_WORD *)a1 = *(_WORD *)a1 & 0xFE0F | 0x10;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if ((WebCore::RenderElement::createsNewFormattingContext((WebCore::RenderElement *)a2) & 1) != 0)
  {
    v10 = 0;
    v9 = *(_WORD *)a1 & 0xFFFE;
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 46);
    v9 = *(_WORD *)a1 & 0xFFFE | (v8 != 49);
    if (v8 == 49)
      v10 = 0;
    else
      v10 = 2 * (a3 == 0);
  }
  v11 = 0;
  *(_WORD *)a1 = v9 & 0xFFFD | v10;
  if ((v9 & 1) == 0 || a4)
    goto LABEL_13;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8);
  if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 <= 3)
  {
    if (!*(_BYTE *)(v12 + 8))
    {
      v13 = v12 + 4;
      goto LABEL_10;
    }
LABEL_30:
    v11 = 0;
    goto LABEL_13;
  }
  if (*(_BYTE *)(v12 + 16))
    goto LABEL_30;
  v13 = v12 + 12;
LABEL_10:
  if (*(_BYTE *)(v13 + 6))
    v14 = *(float *)v13;
  else
    v14 = (float)*(int *)v13;
  v11 = 4 * (v14 == 0.0);
LABEL_13:
  v15 = v11 | v9 & 0xFFF9 | v10 & 0xFFFB;
  *(_WORD *)a1 = v15;
  if (*(_BYTE *)(a2 + 46) == 37)
  {
    LOWORD(v16) = 8;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 45) & 1) == 0)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (!v16)
        goto LABEL_20;
      if ((*(_WORD *)(v16 + 28) & 0x10) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          LOWORD(v16) = 8;
        else
          LOWORD(v16) = 0;
        goto LABEL_20;
      }
    }
    LOWORD(v16) = 0;
  }
LABEL_20:
  *(_WORD *)a1 = v16 | v15 & 0xFFF7;
  if (v10)
  {
    *(_DWORD *)(a1 + 4) = WebCore::RenderBlockFlow::maxPositiveMarginBefore((WebCore::RenderBlockFlow *)a2);
    v17 = WebCore::RenderBlockFlow::maxNegativeMarginBefore((WebCore::RenderBlockFlow *)a2);
  }
  else
  {
    v17 = 0;
    *(_DWORD *)(a1 + 4) = 0;
  }
  *(_DWORD *)(a1 + 8) = v17;
  return a1;
}

void WebCore::RenderBlockFlow::computeOverflow(const WebCore::RenderBox *a1, void *a2, char a3)
{
  unsigned int v4;
  WTF *v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  _BOOL4 v20;
  WebCore::RenderStyle *v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const WebCore::RenderBox *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  const WebCore::RenderBox *v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int *v65;
  unsigned int v66;
  int *v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  WebCore::RenderFragmentedFlow *v80;
  unsigned int v81;
  unsigned int v82;
  void (**v83)(WebCore::RenderThemeIOS *__hidden);
  int v84;
  double v85;
  int v86;
  double v87;
  int v88;
  double v89;
  int v90;
  double v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  BOOL v99;
  int v100;
  int32x2_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int32x4_t v106;
  int v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  WebCore::RenderFragmentedFlow *v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  unint64_t v121;
  unint64_t v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t (*v127)();
  _QWORD *i;
  uint64_t v129;
  const WebCore::RenderBox *v130;
  unint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  int v138;
  WebCore::RenderFragmentedFlow *v139;
  uint64_t v140;
  int v141;
  int8x16_t v142;
  unint64_t v143;
  unint64_t v144;

  v4 = a2;
  v6 = (WTF *)*((_QWORD *)a1 + 24);
  *((_QWORD *)a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v139 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
    if (v139)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v139, a1);
  }
  (*(void (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 1784))(a1);
  {
    v7 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
  }
  else
  {
    WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
    unk_1ECE91358 = 0u;
    v7 = 1;
  }
  DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v7;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    if (*(_QWORD *)(v8 + 8))
    {
      if ((_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
      {
        v9 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
        v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = 1;
        v15 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v13);
        if (v15)
        {
          while (v15 == -1 || v15 != v8)
          {
            v13 = (v13 + v14++) & v9;
            v15 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v13);
            if (!v15)
              goto LABEL_16;
          }
          v40 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v13 + 8);
          if (v40)
          {
            v143 = WebCore::RenderBox::flippedClientBoxRect(a1);
            v144 = v41;
            v43 = *(_QWORD **)(v40 + 8);
            if (v43)
            {
              while (1)
              {
                v44 = *(_QWORD *)(*v43 + 8);
                if (v44)
                  break;
                v43 = (_QWORD *)v43[2];
                if (!v43)
                  goto LABEL_16;
              }
LABEL_72:
              if ((*(_QWORD *)(v44 + 96) & 0x380000) != 0x300000)
              {
                v142.i64[0] = *(_QWORD *)(v44 + 152);
                v42.n128_u64[0] = v142.i64[0];
                WebCore::RenderBox::addOverflowFromChild(a1, v44, (const WebCore::LayoutSize *)&v142, (const WebCore::LayoutRect *)&v143, v42);
              }
              while (1)
              {
                v43 = (_QWORD *)v43[2];
                if (!v43)
                  break;
                v44 = *(_QWORD *)(*v43 + 8);
                if (v44)
                {
                  ++*(_DWORD *)(v40 + 24);
                  goto LABEL_72;
                }
              }
              ++*(_DWORD *)(v40 + 24);
            }
          }
        }
      }
    }
  }
LABEL_16:
  if ((*((_BYTE *)a1 + 22) & 1) != 0)
  {
    if ((*(unsigned int (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 984))(a1)
      && (*((_BYTE *)a1 + 46) == 12 || *((char *)a1 + 45) < 0))
    {
      v143 = WebCore::RenderBox::layoutOverflowRect(a1);
      v144 = v45;
      v46 = *((_DWORD *)a1 + 5);
      v47 = *((_QWORD *)a1 + 24);
      if (!v47)
        goto LABEL_113;
      v48 = v45;
      v49 = *(_DWORD *)(v47 + 4);
      v50 = *(_QWORD *)(v47 + 12);
      v51 = WebCore::RenderBox::flippedClientBoxRect(a1);
      if ((int)v49 < (int)v51)
        goto LABEL_82;
      v60 = v49 + v50;
      if (__OFADD__(v49, (_DWORD)v50))
        v60 = (v49 >> 31) + 0x7FFFFFFF;
      v61 = v51 + v52;
      if (__OFADD__(v51, v52))
        v61 = (v51 >> 31) + 0x7FFFFFFF;
      if (v60 > v61)
      {
LABEL_82:
        if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
          LODWORD(v48) = HIDWORD(v48);
        v53 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 984))(a1);
        v54 = v48 + v53;
        if (__OFADD__((_DWORD)v48, v53))
          v54 = (v48 >> 31) + 0x7FFFFFFF;
      }
      else
      {
LABEL_113:
        v62 = *((unsigned int *)a1 + 16);
        if (v62 | ((unint64_t)*((unsigned __int8 *)a1 + 68) << 32)
          && (v63 = *(_QWORD *)((v62 | ((unint64_t)*((unsigned __int8 *)a1 + 68) << 32)) + 8)) != 0)
        {
          v64 = 0;
          while ((*(_BYTE *)(v63 + 45) & 4) == 0)
          {
            v115 = *(unsigned int *)(v63 + 47);
            if (!(v115 | ((unint64_t)*(unsigned __int8 *)(v63 + 51) << 32)))
              goto LABEL_174;
            v63 = *(_QWORD *)((v115 | ((unint64_t)*(unsigned __int8 *)(v63 + 51) << 32)) + 8);
            if (!v63)
              goto LABEL_175;
          }
          v64 = 0;
LABEL_118:
          if ((*(_DWORD *)(v63 + 20) & 0x1800000) != 0x1000000)
          {
            if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
              v65 = (unsigned int *)(v63 + 156);
            else
              v65 = (unsigned int *)(v63 + 152);
            v66 = *v65;
            v67 = (int *)(v63 + 160);
            if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
              v67 = (int *)(v63 + 164);
            v68 = *v67;
            v69 = __OFADD__(v66, v68);
            v70 = v66 + v68;
            v71 = (v66 >> 31) + 0x7FFFFFFF;
            if (v69)
              v72 = v71;
            else
              v72 = v70;
            v73 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v63 + 1136))(v63, (_QWORD *)a1 + 10);
            v74 = v73 & ~(v73 >> 31);
            v69 = __OFADD__(v72, v74);
            v75 = v72 + v74;
            if (v69)
              v75 = (v72 >> 31) + 0x7FFFFFFF;
            if (v64 <= v75)
              v64 = v75;
          }
          while (1)
          {
            v76 = *(unsigned int *)(v63 + 47);
            if (!(v76 | ((unint64_t)*(unsigned __int8 *)(v63 + 51) << 32)))
              break;
            v63 = *(_QWORD *)((v76 | ((unint64_t)*(unsigned __int8 *)(v63 + 51) << 32)) + 8);
            if (!v63)
              break;
            if ((*(_BYTE *)(v63 + 45) & 4) != 0)
              goto LABEL_118;
          }
        }
        else
        {
LABEL_174:
          v64 = 0;
        }
LABEL_175:
        v116 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 984))(a1);
        v117 = v64 + v116;
        if (__OFADD__(v64, v116))
          v117 = 0x7FFFFFFF;
        v118 = 1000;
        if ((*((_DWORD *)a1 + 5) & 0x1000) == 0)
          v118 = 1016;
        v119 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + v118))(a1);
        v54 = v117 - v119;
        if (__OFSUB__(v117, v119))
          v54 = (v117 >> 31) + 0x7FFFFFFF;
      }
      if ((v46 & 0x1000) != 0)
        HIDWORD(v144) = v54;
      else
        LODWORD(v144) = v54;
      WebCore::RenderBox::addLayoutOverflow(a1, (const WebCore::LayoutRect *)&v143);
    }
    v121 = WebCore::RenderBox::flippedClientBoxRect(a1);
    v143 = v121;
    v144 = v122;
    if ((*((_BYTE *)a1 + 21) & 0x10) != 0)
    {
      v125 = v4 - v121;
      if (__OFSUB__(v4, (_DWORD)v121))
        v125 = (v4 >> 31) + 0x7FFFFFFF;
      LODWORD(v144) = v125 & ~(v125 >> 31);
      v124 = 64;
    }
    else
    {
      LODWORD(v144) = 64;
      v123 = v4 - HIDWORD(v121);
      if (__OFSUB__(v4, HIDWORD(v121)))
        v123 = (v4 >> 31) + 0x7FFFFFFF;
      v124 = v123 & ~(v123 >> 31);
    }
    HIDWORD(v144) = v124;
    WebCore::RenderBox::addLayoutOverflow(a1, (const WebCore::LayoutRect *)&v143);
    v126 = *((_QWORD *)a1 + 24);
    v127 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
    if (!v126)
      v127 = 0;
    if (v127)
      *(_DWORD *)(v126 + 36) = v4;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 32) + 88);
  v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 24) + 200);
  if (*(_QWORD *)(v18 + 8))
    v19 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v19 = 0;
  if (v19)
    v20 = !WebCore::LengthBox::isZero((WebCore::LengthBox *)(v18 + 80));
  else
    LOBYTE(v20) = 0;
  v21 = (WebCore::RenderStyle *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 424))(a1);
  v22 = *(_QWORD *)(*((_QWORD *)v21 + 1) + 16);
  v23 = *(unsigned __int8 *)(v22 + 52);
  if ((v23 & 0xF) != 0
    && (v23 & 0xE) != 0
    && (v23 & 0xF) != 0
    && ((v57 = *(float *)(v22 + 48), v58 = 3.0, ((v57 < 3.0) & (v23 >> 4)) != 0) || v57 > 0.0))
  {
    if (v57 >= 3.0)
      v58 = *(float *)(v22 + 48);
    if ((v23 & 0x10) != 0)
      v59 = v58;
    else
      v59 = *(float *)(v22 + 48);
    v24 = (float)(WebCore::RenderStyle::outlineOffset(v21) + v59) > 0.0;
  }
  else
  {
    v24 = 0;
  }
  if (v17)
    v25 = 1;
  else
    v25 = v20;
  if ((v25 & 1) != 0 || v24)
  {
    v78 = *((_QWORD *)a1 + 20);
    v142.i64[0] = 0;
    v142.i64[1] = v78;
    v143 = WebCore::RenderBox::applyVisualEffectOverflow(a1, (const WebCore::LayoutRect *)&v142);
    v144 = v79;
    WebCore::RenderBox::addVisualOverflow((uint64_t)a1, (const WebCore::LayoutRect *)&v143);
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v80 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
      if (v80)
        WebCore::RenderFragmentedFlow::addFragmentsVisualEffectOverflow(v80, a1);
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 32) + 148) & 0x1FC000) == 0)
    goto LABEL_30;
  *(float *)&v81 = (float)*((int *)a1 + 40) * 0.015625;
  *(float *)&v82 = (float)*((int *)a1 + 41) * 0.015625;
  v143 = 0;
  v144 = __PAIR64__(v82, v81);
  {
    v83 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v140 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v140 + 40) = 0u;
    *(_OWORD *)(v140 + 24) = 0u;
    v83 = &off_1E335BC30;
    *(_QWORD *)v140 = &off_1E335BC30;
  }
  ((void (*)(uint64_t *, const WebCore::RenderBox *, unint64_t *))v83[22])(&WebCore::RenderTheme::singleton(void)::theme, a1, &v143);
  v85 = *(float *)&v143 * 64.0;
  if (v85 < 2147483650.0 && v85 > -2147483650.0)
    goto LABEL_146;
  if (v85 >= 2147483650.0)
  {
    v86 = 0x7FFFFFFF;
  }
  else
  {
    if (v85 > -2147483650.0)
    {
LABEL_146:
      v86 = (int)v85;
      goto LABEL_147;
    }
    v86 = 0x80000000;
  }
LABEL_147:
  v87 = *((float *)&v143 + 1) * 64.0;
  if (v87 >= 2147483650.0 || v87 <= -2147483650.0)
  {
    if (v87 >= 2147483650.0)
    {
      v88 = 0x7FFFFFFF;
    }
    else if (v87 > -2147483650.0)
    {
      v88 = (int)v87;
    }
    else
    {
      v88 = 0x80000000;
    }
  }
  else
  {
    v88 = (int)v87;
  }
  v89 = *(float *)&v144 * 64.0;
  if (v89 >= 2147483650.0 || v89 <= -2147483650.0)
  {
    v84 = (int)v89;
    if (v89 > -2147483650.0)
      v141 = (int)v89;
    else
      v141 = 0x80000000;
    if (v89 < 2147483650.0)
      v90 = v141;
    else
      v90 = 0x7FFFFFFF;
  }
  else
  {
    v90 = (int)v89;
  }
  v91 = *((float *)&v144 + 1) * 64.0;
  if (v91 >= 2147483650.0 || v91 <= -2147483650.0)
  {
    if (v91 > -2147483650.0)
      v84 = (int)v91;
    else
      v84 = 0x80000000;
    if (v91 < 2147483650.0)
      v92 = v84;
    else
      v92 = 0x7FFFFFFF;
  }
  else
  {
    v92 = (int)v91;
  }
  v93 = v86 / 64;
  v94 = v86 - (v84 & 0xFFFFFFC0);
  v95 = v88 / 64;
  v96 = v88 - (v84 & 0xFFFFFFC0);
  v69 = __OFADD__(v94, v90);
  v97 = v94 + v90;
  if (v69)
    v97 = (v94 >> 31) + 0x7FFFFFFF;
  v69 = __OFADD__(v96, v92);
  v98 = v96 + v92;
  if (v69)
    v98 = (v96 >> 31) + 0x7FFFFFFF;
  v99 = -v97 < 0;
  v100 = v97 & 0x3F;
  v101 = vshr_n_s32((int32x2_t)vsra_n_u32((uint32x2_t)__PAIR64__(v98, v97), (uint32x2_t)vcltz_s32((int32x2_t)__PAIR64__(v98, v97)), 0x1AuLL), 6uLL);
  v102 = -v97 & 0x3F;
  if (v99)
    v103 = v100;
  else
    v103 = -v102;
  v99 = -v98 < 0;
  v104 = -v98 & 0x3F;
  v105 = v98 & 0x3F;
  v106.i64[0] = __PAIR64__(v96, v94);
  v106.i32[2] = v103;
  if (v99)
    v107 = v105;
  else
    v107 = -v104;
  v106.i32[3] = v107;
  v108.i64[0] = 0x2000000020;
  v108.i64[1] = 0x2000000020;
  v109 = vaddq_s32(v106, v108);
  v108.i64[0] = __PAIR64__(v95, v93);
  v108.u64[1] = (unint64_t)vsub_s32(v101, (int32x2_t)*(_OWORD *)&vshrq_n_s32(v109, 6uLL));
  v110 = vsraq_n_s32(v108, v109, 6uLL);
  v111.i64[0] = 0xFE000000FE000000;
  v111.i64[1] = 0xFE000000FE000000;
  v112 = (int8x16_t)vcgtq_s32(v110, v111);
  v109.i64[0] = 0xFE000000FE000000;
  v109.i64[1] = 0xFE000000FE000000;
  v113.i64[0] = 0x8000000080000000;
  v113.i64[1] = 0x8000000080000000;
  v142 = vorrq_s8((int8x16_t)(*(_OWORD *)&v112 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v109, v110), v113, (int8x16_t)vshlq_n_s32(v110, 6uLL)), v112));
  WebCore::RenderBox::addVisualOverflow((uint64_t)a1, (const WebCore::LayoutRect *)&v142);
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v114 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
    if (v114)
      WebCore::RenderFragmentedFlow::addFragmentsVisualOverflowFromTheme(v114, a1);
  }
LABEL_30:
  v26 = *((_QWORD *)a1 + 28);
  if (v26)
  {
    v77 = *(_QWORD *)(v26 + 24);
    if (v77)
    {
      if (*(_QWORD *)(v77 + 8))
        return;
    }
  }
  if ((a3 & 1) == 0)
  {
    v28 = *((_QWORD *)a1 + 4);
    if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0 && ((*((_DWORD *)a1 + 31) ^ *(_DWORD *)(v29 + 124)) & 0xE000) == 0)
    {
      v30 = *((_BYTE *)a1 + 45) & 2;
    }
    else
    {
      v30 = *((_BYTE *)a1 + 45) & 2;
      v55 = a1;
      if ((*((_BYTE *)a1 + 45) & 2) != 0)
        v55 = *(const WebCore::RenderBox **)(v28 + 8);
      v56 = *((_DWORD *)v55 + 24) & 0x1F;
      if (v56 <= 0x15 && ((1 << v56) & 0x20300E) != 0 && (*((_BYTE *)a1 + 52) & 7) != 3)
        goto LABEL_32;
    }
    v31 = a1;
    if (v30)
      v31 = *(const WebCore::RenderBox **)(v28 + 8);
    if (((*((_DWORD *)v31 + 24) & 0x1Fu) > 0x15
       || ((1 << (*((_DWORD *)v31 + 24) & 0x1F)) & 0x20300E) == 0
       || (*((_BYTE *)a1 + 52) & 7) == 3
       || (*(_WORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 32) + 120) & 0x7F) == 0)
      && ((*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 160))(a1) & 1) == 0)
    {
      v32 = *((_DWORD *)a1 + 5);
      if ((v32 & 1) == 0
        || (v32 & 0x800) != 0
        || (v32 & 0x1800000) == 0x1000000
        || (v33 = *((_QWORD *)a1 + 4)) == 0
        || (v34 = *(_QWORD *)(v33 + 8)) == 0
        || (*(char *)(v34 + 45) & 0x80000000) == 0 && *(_BYTE *)(v34 + 46) != 5)
      {
        v35 = *((unsigned __int8 *)a1 + 46);
        if ((v35 & 0xFE) != 0x24)
        {
          v36 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
          if (((*((_BYTE *)a1 + 45) & 1) != 0
             || (*(_WORD *)(v36 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
            && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 40) + 8) + 1272) != v36)
          {
            if ((*((_BYTE *)a1 + 52) & 7) == 1)
            {
              if (v35 == 67 || (*((_BYTE *)a1 + 53) & 2) != 0)
                goto LABEL_32;
            }
            else if (v35 == 67)
            {
              goto LABEL_32;
            }
            v37 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 32) + 24) + 56);
            if ((~v37 & 3) == 0)
            {
              v38 = (v37 >> 4) & 3;
              if (v38 == 2)
              {
LABEL_62:
                if ((v37 & 8) == 0
                  && (*((_QWORD *)a1 + 12) & 0x1FLL) != 0x15
                  && ((*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 776))(a1) & 1) == 0)
                {
                  v39 = *((_QWORD *)a1 + 18);
                  if (!v39 || (*(_BYTE *)(v39 + 25) & 8) == 0)
                    return;
                }
                goto LABEL_32;
              }
              v138 = (unsigned __int16)*((_DWORD *)a1 + 31) >> 13;
              if ((v138 - 2) < 2 || v138 == 4 || v138 == 5)
              {
                if (v38)
                  goto LABEL_62;
              }
              else if (!v38)
              {
                goto LABEL_62;
              }
            }
          }
        }
      }
    }
  }
LABEL_32:
  v27 = *((_QWORD *)a1 + 27);
  if (v27)
  {
    for (i = *(_QWORD **)(v27 + 8); i; i = (_QWORD *)i[2])
    {
      v129 = *i;
      if ((*(_BYTE *)(*i + 36) & 8) != 0)
      {
        if (*(_QWORD *)v129)
          v130 = *(const WebCore::RenderBox **)(*(_QWORD *)v129 + 8);
        else
          v130 = 0;
        v131 = *(_QWORD *)(v129 + 8);
        v133 = *(_DWORD *)(v129 + 28);
        v132 = *(_DWORD *)(v129 + 32);
        v69 = __OFADD__((_DWORD)v131, v133);
        LODWORD(v134) = v131 + v133;
        if (v69)
          v134 = (v131 >> 31) + 0x7FFFFFFF;
        else
          v134 = v134;
        v135 = HIDWORD(v131);
        v69 = __OFADD__((_DWORD)v135, v132);
        LODWORD(v136) = v135 + v132;
        v137 = (v135 >> 31) + 0x7FFFFFFF;
        if (v69)
          v136 = v137;
        else
          v136 = v136;
        v143 = v134 | (v136 << 32);
        WebCore::RenderBox::addOverflowFromChild(a1, v130, (const WebCore::LayoutSize *)&v143);
      }
    }
  }
}

uint64_t WebCore::RenderBox::avoidsFloats(WebCore::RenderBox *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::RenderBox *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  int v15;
  WebCore::RenderBox *v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  int v21;

  if ((*((_BYTE *)this + 20) & 2) != 0)
    return 1;
  v2 = *((_BYTE *)this + 45);
  if ((v2 & 1) == 0)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24)
        || (*(_WORD *)(v3 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      {
        return 1;
      }
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && ((*((_DWORD *)this + 31) ^ *(_DWORD *)(v5 + 124)) & 0xE000) == 0)
  {
    v6 = v2 & 2;
  }
  else
  {
    v6 = v2 & 2;
    v16 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v16 = *(WebCore::RenderBox **)(v4 + 8);
    v17 = *((_DWORD *)v16 + 24) & 0x1F;
    v18 = v17 > 0x15;
    v19 = (1 << v17) & 0x20300E;
    v20 = v18 || v19 == 0;
    if (!v20 && (*((_BYTE *)this + 52) & 7) != 3)
      return 1;
  }
  v7 = this;
  if (v6)
    v7 = *(WebCore::RenderBox **)(v4 + 8);
  if ((*((_DWORD *)v7 + 24) & 0x1Fu) <= 0x15
    && ((1 << (*((_DWORD *)v7 + 24) & 0x1F)) & 0x20300E) != 0
    && (*((_BYTE *)this + 52) & 7) != 3
    && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 120) & 0x7F) != 0)
  {
    return 1;
  }
  if (((*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 160))(this) & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 5);
  if ((v8 & 1) != 0 && (v8 & 0x800) == 0 && (v8 & 0x1800000) != 0x1000000)
  {
    v9 = *((_QWORD *)this + 4);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        if (*(char *)(v10 + 45) < 0 || *(_BYTE *)(v10 + 46) == 5)
          return 1;
      }
    }
  }
  v11 = *((unsigned __int8 *)this + 46);
  if ((v11 & 0xFE) == 0x24)
    return 1;
  v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*((_BYTE *)this + 45) & 1) == 0
    && (*(_WORD *)(v12 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
  {
    return 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 1272) == v12)
    return 1;
  if ((*((_BYTE *)this + 52) & 7) == 1)
  {
    result = 1;
    if (v11 == 67 || (*((_BYTE *)this + 53) & 2) != 0)
      return result;
  }
  else if (v11 == 67)
  {
    return 1;
  }
  v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24) + 56);
  if ((~v14 & 3) != 0)
    return 1;
  v15 = (v14 >> 4) & 3;
  if (v15 != 2)
  {
    v21 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v21 - 2) < 2 || v21 == 4 || v21 == 5)
    {
      if (v15)
        goto LABEL_36;
    }
    else if (!v15)
    {
      goto LABEL_36;
    }
    return 1;
  }
LABEL_36:
  if ((v14 & 8) != 0
    || (*((_QWORD *)this + 12) & 0x1FLL) == 0x15
    || ((*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 776))(this) & 1) != 0)
  {
    return 1;
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19414BBD4);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 848))(result);
  }
  return result;
}

uint64_t WebCore::RenderElement::createsNewFormattingContext(WebCore::RenderElement *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  WebCore::RenderElement *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WebCore::RenderElement *v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  int v19;

  v2 = *((_QWORD *)this + 4);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && ((*((_DWORD *)this + 31) ^ *(_DWORD *)(v3 + 124)) & 0xE000) == 0)
  {
    v4 = *((_BYTE *)this + 45) & 2;
  }
  else
  {
    v4 = *((_BYTE *)this + 45) & 2;
    v14 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v14 = *(WebCore::RenderElement **)(v2 + 8);
    v15 = *((_DWORD *)v14 + 24) & 0x1F;
    v16 = v15 > 0x15;
    v17 = (1 << v15) & 0x20300E;
    v18 = v16 || v17 == 0;
    if (!v18 && (*((_BYTE *)this + 52) & 7) != 3)
      return 1;
  }
  v5 = this;
  if (v4)
    v5 = *(WebCore::RenderElement **)(v2 + 8);
  if (((*((_DWORD *)v5 + 24) & 0x1Fu) > 0x15
     || ((1 << (*((_DWORD *)v5 + 24) & 0x1F)) & 0x20300E) == 0
     || (*((_BYTE *)this + 52) & 7) == 3
     || (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 120) & 0x7F) == 0)
    && ((*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 160))(this) & 1) == 0)
  {
    v6 = *((_DWORD *)this + 5);
    if ((v6 & 1) == 0
      || (v6 & 0x800) != 0
      || (v6 & 0x1800000) == 0x1000000
      || (v7 = *((_QWORD *)this + 4)) == 0
      || (v8 = *(_QWORD *)(v7 + 8)) == 0
      || (*(char *)(v8 + 45) & 0x80000000) == 0 && *(_BYTE *)(v8 + 46) != 5)
    {
      v9 = *((unsigned __int8 *)this + 46);
      if ((v9 & 0xFE) != 0x24)
      {
        if ((*((_BYTE *)this + 45) & 1) != 0)
        {
          v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        }
        else
        {
          v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          if ((*(_WORD *)(v10 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
          {
            return 1;
          }
        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 1272) != v10)
        {
          if ((*((_BYTE *)this + 52) & 7) == 1)
          {
            if (v9 == 67 || (*((_BYTE *)this + 53) & 2) != 0)
              return 1;
          }
          else if (v9 == 67)
          {
            return 1;
          }
          v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24) + 56);
          if ((~v11 & 3) == 0)
          {
            v12 = (v11 >> 4) & 3;
            if (v12 != 2)
            {
              v19 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
              if ((v19 - 2) < 2 || v19 == 4 || v19 == 5)
              {
                if (!v12)
                  return 1;
              }
              else if (v12)
              {
                return 1;
              }
            }
            if ((v11 & 8) == 0 && (*((_QWORD *)this + 12) & 0x1FLL) != 0x15)
              return (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 776))(this);
          }
        }
      }
    }
  }
  return 1;
}

BOOL WebCore::RenderBlock::isInlineBlockOrInlineTable(WebCore::RenderBlock *this)
{
  return (*((_DWORD *)this + 5) & 3) == 2;
}

BOOL WebCore::RenderBox::establishesIndependentFormattingContext(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  WebCore::RenderBox *v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  WebCore::RenderBox *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
        return 1;
    }
  }
  v3 = *((_DWORD *)this + 5);
  v4 = 1;
  if ((v3 & 0x800) == 0 && (v3 & 0x1800000) != 0x1000000)
  {
    v5 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v5 = *(WebCore::RenderBox **)(v1 + 8);
    v6 = *((_DWORD *)v5 + 24) & 0x1F;
    v7 = v6 > 0x17;
    v8 = (1 << v6) & 0xA94016;
    if (v7 || v8 == 0)
      goto LABEL_18;
    v10 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v10 = *(WebCore::RenderBox **)(v1 + 8);
    if ((v11 = *((_DWORD *)v10 + 24) & 0x1F, v11 > 0x15)
      || ((1 << v11) & 0x20300E) == 0
      || (v3 & 0x10000) == 0
      || (*((_BYTE *)this + 52) & 7) == 3
      || ((*((_BYTE *)this + 45) & 2) != 0
        ? (v14 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 96))
        : (v14 = *((_QWORD *)this + 12)),
          (v15 = v14 & 0x1C00, v15 == 2048) || !v15))
    {
LABEL_18:
      v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      if ((*(_BYTE *)(v12 + 642) & 3u) - 1 >= 2
        && ((*(unsigned __int8 *)(v12 + 462) | ((v3 & 0x80000u) >> 19)) & 1) == 0)
      {
        v4 = 0;
        if ((*((_DWORD *)this + 24) & 0x1Fu) <= 0x17 && ((1 << (*((_DWORD *)this + 24) & 0x1F)) & 0xA94016) != 0)
        {
          v21 = 0;
          v4 = *(_BYTE *)(v12 + 632) != 0;
          if (*(_BYTE *)(v12 + 632))
          {
            v20 = 0;
            v18 = *(_BYTE *)(v12 + 628);
            v19 = *(_BYTE *)(v12 + 629);
            if (v18 == 11)
            {
              v16 = (void *)*(unsigned int *)(v12 + 624);
              v17 = *(_DWORD *)(v12 + 624);
              WebCore::Length::ref(&v17);
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v16);
            }
          }
        }
      }
    }
  }
  return v4;
}

void WebCore::RenderBlock::addOverflowFromChildren(WebCore::RenderBlock *this)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  WebCore::RenderFragmentedFlow *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  __int128 v38;

  if ((*((_BYTE *)this + 22) & 4) != 0)
  {
    (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1792))(this);
    if (*((_QWORD *)this + 24) && (*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v30 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 648))(this);
      if (v30)
      {
        v38 = *(_OWORD *)(*((_QWORD *)this + 24) + 20);
        WebCore::RenderFragmentedFlow::addFragmentsVisualOverflow(v30, this, (const WebCore::LayoutRect *)&v38);
      }
    }
  }
  else
  {
    v2 = *((unsigned int *)this + 16);
    if (v2 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    {
      v3 = *(_QWORD *)((v2 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if (v3)
      {
        while ((*(_BYTE *)(v3 + 45) & 4) != 0)
        {
          v4 = *(_DWORD *)(v3 + 20);
          if ((v4 & 0x800) == 0 && (v4 & 0x1800000) != 0x1000000)
          {
            v37 = *(_QWORD *)(v3 + 152);
            v5 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 992))(this);
            v8 = v5;
            v9 = HIDWORD(v6);
            v10 = *((_DWORD *)this + 40);
            v11 = *((_DWORD *)this + 41);
            v12 = v10 - HIDWORD(v6);
            if (__OFSUB__(v10, HIDWORD(v6)))
              v12 = (v10 >> 31) + 0x7FFFFFFF;
            v13 = __OFSUB__(v12, HIDWORD(v5));
            v14 = v12 - HIDWORD(v5);
            v15 = (v12 >> 31) + 0x7FFFFFFF;
            if (v13)
              v16 = v15;
            else
              v16 = v14;
            v17 = v11 - v5;
            if (__OFSUB__(v11, (_DWORD)v5))
              v17 = (v11 >> 31) + 0x7FFFFFFF;
            v13 = __OFSUB__(v17, (_DWORD)v6);
            v18 = v17 - v6;
            v19 = (v17 >> 31) + 0x7FFFFFFF;
            if (v13)
              v20 = v19;
            else
              v20 = v18;
            v21 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
            if (v21 <= 5 && ((1 << v21) & 0x2A) != 0)
            {
              v22 = *((_DWORD *)this + 5);
              if ((v22 & 0x1000) != 0)
              {
                v34 = HIDWORD(v6) + v16;
                if (__OFADD__(HIDWORD(v6), v16))
                  v34 = (HIDWORD(v6) >> 31) + 0x7FFFFFFF;
                v13 = __OFSUB__(v10, v34);
                v35 = v10 - v34;
                v36 = (v10 >> 31) + 0x7FFFFFFF;
                if (v13)
                  LODWORD(v9) = v36;
                else
                  LODWORD(v9) = v35;
              }
              else
              {
                v31 = v5 + v20;
                if (__OFADD__((_DWORD)v5, (_DWORD)v20))
                  v31 = (v5 >> 31) + 0x7FFFFFFF;
                v13 = __OFSUB__(v11, v31);
                v32 = v11 - v31;
                v33 = (v11 >> 31) + 0x7FFFFFFF;
                if (v13)
                  v8 = v33;
                else
                  v8 = v32;
              }
            }
            else
            {
              v22 = *((_DWORD *)this + 5);
            }
            if ((v22 & 0x10000) != 0)
            {
              v24 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1352))(this);
              v25 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1360))(this);
              if (v24 <= 0x2000000)
                v26 = -64 * v24;
              else
                v26 = 0x80000000;
              if (v24 < -33554431)
                v26 = 0x7FFFFFFF;
              v13 = __OFADD__(v16, v26);
              v27 = v16 + v26;
              if (v13)
                v16 = (v16 >> 31) + 0x7FFFFFFF;
              else
                v16 = v27;
              if (v25 <= 0x2000000)
                v28 = -64 * v25;
              else
                v28 = 0x80000000;
              if (v25 < -33554431)
                v28 = 0x7FFFFFFF;
              v13 = __OFADD__((_DWORD)v20, v28);
              v29 = v20 + v28;
              if (v13)
                v20 = (v20 >> 31) + 0x7FFFFFFF;
              else
                v20 = v29;
            }
            *(_QWORD *)&v38 = v9 | (unint64_t)(v8 << 32);
            *((_QWORD *)&v38 + 1) = v16 | (unint64_t)(v20 << 32);
            WebCore::RenderBox::addOverflowFromChild(this, v3, (const WebCore::LayoutSize *)&v37, (const WebCore::LayoutRect *)&v38, v7);
          }
          v23 = *(unsigned int *)(v3 + 47);
          if (!(v23 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
            break;
          v3 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
          if (!v3)
            break;
        }
      }
    }
  }
}

uint64_t WebCore::RenderBox::containingBlockLogicalWidthForContentInFragment(WebCore::RenderBox *this, WebCore::RenderFragmentContainer *a2)
{
  WebCore::RenderObject *v4;
  WebCore::RenderFragmentContainer *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  signed int v14;

  if (!a2)
    return (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
  v4 = WebCore::RenderObject::containingBlock(this);
  v5 = WebCore::RenderBox::clampToStartAndEndFragments(v4, a2);
  v6 = WebCore::RenderBox::contentLogicalWidth(v4);
  if (!v5)
    return v6;
  v7 = WebCore::RenderFragmentContainer::renderBoxFragmentInfo(v5, v4);
  if (!v7)
    return v6;
  v8 = (unsigned int *)((char *)v4 + 164);
  if (((*((_DWORD *)v4 + 31) >> 13) & 6u) - 2 >= 4)
    v8 = (unsigned int *)((char *)v4 + 160);
  v9 = *v8;
  v10 = *(_DWORD *)(v7 + 4);
  v11 = __OFSUB__(v9, v10);
  v12 = v9 - v10;
  v13 = (v9 >> 31) + 0x7FFFFFFF;
  if (!v11)
    v13 = v12;
  v11 = __OFSUB__((_DWORD)v6, v13);
  v14 = v6 - v13;
  if (v11)
    v14 = (v6 >> 31) + 0x7FFFFFFF;
  return v14 & ~(v14 >> 31);
}

uint64_t WebCore::RenderBox::fillAvailableMeasure(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  WebCore::RenderObject *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  int v20;
  void *v21;
  float v22;
  int v23;
  _BOOL4 v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  int v30;
  unint64_t v31;
  float v32;
  int v33;
  unsigned int v34;
  float v35;
  double v36;
  _DWORD *v37;
  uint64_t v38;
  float v39;
  double v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  float v45;
  float v46;
  void *v47;
  unint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  float v52;
  double v53;
  unint64_t v54;
  void *v55;
  float v56;
  void *v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t (*v61)(WebCore::RenderObject *, uint64_t, uint64_t);
  WebCore::RenderObject *v62;
  void *v63;
  unint64_t v64;
  int v65;
  WTF *v66;
  WTF *v67;
  unsigned int v68;
  _DWORD *v69;
  unsigned int v70;
  unsigned __int8 v71;
  char v72;
  char v73;
  unsigned int v74;
  unsigned __int8 v75;
  char v76;
  char v77;

  v8 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
  v9 = (*(_DWORD *)(a1 + 20) & 0x1000) == 0;
  v10 = (*((_DWORD *)v8 + 5) & 0x1000) == 0;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v13 = *(_DWORD *)(a1 + 120);
  v12 = *(_DWORD *)(a1 + 124);
  v14 = v13 & 0x4000000;
  v15 = (v13 >> 26) & 1;
  v16 = (unsigned __int16)v12 >> 13;
  if ((v16 - 2) >= 2)
  {
    if (v16 == 4)
    {
      v15 = v14 == 0;
    }
    else if (v16 != 5)
    {
      v17 = 3;
      if (v14)
        v17 = 1;
      goto LABEL_6;
    }
  }
  v26 = v15 == 0;
  v17 = 2;
  if (v26)
    v17 = 0;
LABEL_6:
  v18 = v12 >> 13;
  v19 = (unsigned int *)(v11 + 40 + 8 * v17);
  v74 = 0;
  v77 = 0;
  v75 = *((_BYTE *)v19 + 4);
  v20 = v75;
  v76 = *((_BYTE *)v19 + 5);
  v69 = a3;
  if (v75 - 2 >= 9)
  {
    if (v75 == 11)
    {
      v74 = *v19;
      v47 = (void *)v74;
      WebCore::Length::ref((int *)&v74);
      v21 = v47;
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
      v18 = *(_DWORD *)(a1 + 124) >> 13;
      v14 = *(_DWORD *)(a1 + 120) & 0x4000000;
      goto LABEL_9;
    }
    v21 = 0;
    v23 = 1;
    v22 = 0.0;
  }
  else
  {
    v77 = *((_BYTE *)v19 + 6);
    if (!v77)
    {
      v21 = (void *)*v19;
      v74 = *v19;
LABEL_9:
      v22 = *(float *)&v21;
      v23 = 1;
      goto LABEL_12;
    }
    v23 = 0;
    v22 = *(float *)v19;
    v74 = LODWORD(v22);
    v21 = (void *)LODWORD(v22);
  }
LABEL_12:
  v24 = v14 != 0;
  v25 = v18 & 7;
  if ((v25 - 2) >= 2)
  {
    if (v25 == 4)
    {
      v24 = v14 == 0;
    }
    else if (v25 != 5)
    {
      v26 = v14 == 0;
      v27 = 3;
      if (v26)
        v27 = 1;
      goto LABEL_18;
    }
  }
  v27 = 2;
  if (v24)
    v27 = 0;
LABEL_18:
  v28 = v9 ^ v10;
  v29 = (unsigned int *)(v11 + 40 + 8 * v27);
  v70 = 0;
  v73 = 0;
  v71 = *((_BYTE *)v29 + 4);
  v30 = v71;
  v72 = *((_BYTE *)v29 + 5);
  if (v71 - 2 >= 9)
  {
    if (v71 == 11)
    {
      v70 = *v29;
      v48 = v70;
      v49 = v21;
      WebCore::Length::ref((int *)&v70);
      v31 = v48;
      v21 = v49;
      goto LABEL_21;
    }
    v31 = 0;
    v33 = 1;
    v32 = 0.0;
  }
  else
  {
    v73 = *((_BYTE *)v29 + 6);
    if (!v73)
    {
      v31 = *v29;
      v70 = *v29;
LABEL_21:
      v32 = *(float *)&v31;
      v33 = 1;
      goto LABEL_24;
    }
    v33 = 0;
    v32 = *(float *)v29;
    v70 = LODWORD(v32);
    v31 = LODWORD(v32);
  }
LABEL_24:
  v34 = a2;
  if (v28)
  {
    v57 = v21;
    v58 = v31;
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v31 = v58;
    v21 = v57;
    a2 = v59;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 461) & 4) != 0)
  {
    v51 = v21;
    v68 = v31;
    v60 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, uint64_t))(*(_QWORD *)v8 + 1584))(v8, 4, a1);
    v31 = v68;
    v21 = v51;
    if (v60)
    {
      v38 = *(_QWORD *)(a1 + 32);
      if (v38)
      {
        v38 = *(_QWORD *)(v38 + 8);
        if (v38)
        {
          if (*(_BYTE *)(v38 + 46) != 12 || (*(_BYTE *)(a1 + 21) & 4) != 0)
          {
            LODWORD(v38) = 0;
          }
          else
          {
            v66 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a1, v51);
            LODWORD(v38) = 0;
            *((_BYTE *)v66 + 2) |= 4u;
          }
        }
      }
      v37 = v69;
      goto LABEL_92;
    }
  }
  switch(v20)
  {
    case 4:
      v35 = (float)SLODWORD(v22);
      if (!v23)
        v35 = v22;
      break;
    case 3:
      v45 = (float)SLODWORD(v22);
      if (!v23)
        v45 = v22;
      v35 = (float)((float)((float)a2 * 0.015625) * v45) / 100.0;
      break;
    case 11:
      v68 = v31;
      v51 = v21;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v74, (float)a2 * 0.015625);
      v53 = v52 * 64.0;
      v37 = v69;
      if (v53 < 2147483650.0)
      {
        v21 = v51;
        if (v53 <= -2147483650.0)
          LODWORD(v38) = 0x80000000;
        else
          LODWORD(v38) = (int)v53;
        goto LABEL_73;
      }
      LODWORD(v38) = 0x7FFFFFFF;
LABEL_92:
      v21 = v51;
LABEL_73:
      v31 = v68;
      goto LABEL_33;
    default:
      LODWORD(v38) = 0;
      goto LABEL_59;
  }
  v36 = v35 * 64.0;
  if (v36 >= 2147483650.0)
  {
    LODWORD(v38) = 0x7FFFFFFF;
LABEL_59:
    v37 = v69;
    goto LABEL_33;
  }
  v37 = v69;
  if (v36 <= -2147483650.0)
    LODWORD(v38) = 0x80000000;
  else
    LODWORD(v38) = (int)v36;
LABEL_33:
  *v37 = v38;
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 461) & 8) == 0
    || (v61 = *(uint64_t (**)(WebCore::RenderObject *, uint64_t, uint64_t))(*(_QWORD *)v8 + 1584),
        v62 = v8,
        v63 = v21,
        v64 = v31,
        v65 = v61(v62, 8, a1),
        v31 = v64,
        v21 = v63,
        !v65))
  {
    switch(v30)
    {
      case 4:
        v39 = (float)SLODWORD(v32);
        if (!v33)
          v39 = v32;
        break;
      case 3:
        v46 = (float)SLODWORD(v32);
        if (!v33)
          v46 = v32;
        v39 = (float)((float)((float)a2 * 0.015625) * v46) / 100.0;
        break;
      case 11:
        v54 = v31;
        v55 = v21;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v70, (float)a2 * 0.015625);
        v40 = v56 * 64.0;
        if (v40 >= 2147483650.0)
        {
          LODWORD(v41) = 0x7FFFFFFF;
          v21 = v55;
          v31 = v54;
          goto LABEL_40;
        }
        v21 = v55;
        v31 = v54;
        if (v40 > -2147483650.0)
        {
LABEL_39:
          LODWORD(v41) = (int)v40;
          goto LABEL_40;
        }
LABEL_76:
        LODWORD(v41) = 0x80000000;
        goto LABEL_40;
      default:
        LODWORD(v41) = 0;
        goto LABEL_40;
    }
    v40 = v39 * 64.0;
    if (v40 >= 2147483650.0)
    {
      LODWORD(v41) = 0x7FFFFFFF;
      goto LABEL_40;
    }
    if (v40 > -2147483650.0)
      goto LABEL_39;
    goto LABEL_76;
  }
  v41 = *(_QWORD *)(a1 + 32);
  if (v41)
  {
    v41 = *(_QWORD *)(v41 + 8);
    if (v41)
    {
      if (*(_BYTE *)(v41 + 46) != 12 || (*(_BYTE *)(a1 + 21) & 4) != 0)
      {
        LODWORD(v41) = 0;
      }
      else
      {
        v67 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a1, v63);
        LODWORD(v41) = 0;
        *((_BYTE *)v67 + 2) |= 8u;
      }
    }
  }
  v37 = v69;
  v21 = v63;
  v31 = v64;
LABEL_40:
  *a4 = v41;
  v42 = v34 - *v37;
  if (__OFSUB__(v34, *v37))
    v42 = (v34 >> 31) + 0x7FFFFFFF;
  v43 = v42 - v41;
  if (__OFSUB__(v42, (_DWORD)v41))
    v43 = (v42 >> 31) + 0x7FFFFFFF;
  if (v30 == 11)
  {
    v50 = v21;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
    v21 = v50;
  }
  if (v20 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v21);
  }
  return v43;
}

uint64_t WebCore::RenderBlockFlow::maxPositiveMarginBefore(WebCore::RenderBlockFlow *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)*((_QWORD *)this + 28);
  if (v1)
    return *v1;
  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v2 > 4)
    v3 = 0;
  else
    v3 = qword_1969FC6C8[v2];
  return *((_DWORD *)this + v3 + 42) & ~(*((int *)this + v3 + 42) >> 31);
}

uint64_t WebCore::RenderBlockFlow::maxNegativeMarginBefore(WebCore::RenderBlockFlow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *((_QWORD *)this + 28);
  if (v1)
    return *(unsigned int *)(v1 + 4);
  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v2 > 4)
    v3 = 0;
  else
    v3 = qword_1969FC6C8[v2];
  v4 = *((_DWORD *)this + v3 + 42);
  if (v4 == 0x80000000)
    return 0x7FFFFFFFLL;
  else
    return -v4 & ~(-v4 >> 31);
}

uint64_t WebCore::RenderBlockFlow::addOverflowFromInlineChildren(uint64_t this)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  float *v4;
  uint64_t i;
  uint64_t v6;
  double v7;
  unsigned int v9;
  double v10;
  unsigned int v12;
  double v13;
  int v15;
  double v16;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  signed int v35;
  int v36;
  BOOL v37;
  signed int v38;
  int v39;
  uint64_t v40;
  double v41;
  int v42;
  double v43;
  int v44;
  double v45;
  int v46;
  double v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  _DWORD *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _DWORD *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  signed int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  signed int v108;
  int v109;
  BOOL v110;
  signed int v111;
  int v112;
  int v113;
  _BOOL4 v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  _BOOL4 v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  _DWORD *v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159;
  int v160;
  char v161;
  int v162;
  char v163;

  v1 = *(_DWORD *)(this + 240);
  if (v1 == 1)
  {
    v156 = *(_QWORD *)(this + 232);
    if (v156)
    {
      v2 = *(_QWORD *)(v156 + 80);
      if (v2)
      {
        v3 = *(_DWORD *)(v2 + 44);
        if (v3)
        {
          v4 = (float *)(*(_QWORD *)(v2 + 32) + 92);
          for (i = 152 * v3; i; i -= 152)
          {
            v6 = *(_QWORD *)(v156 + 16);
            if ((*(_BYTE *)(v6 + 52) & 7) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19414D274);
            }
            v7 = *(v4 - 11) * 64.0;
            if (v7 >= 2147483650.0 || v7 <= -2147483650.0)
            {
              if (v7 > -2147483650.0)
                v146 = (int)v7;
              else
                v146 = 0x80000000;
              if (v7 < 2147483650.0)
                v9 = v146;
              else
                v9 = 0x7FFFFFFF;
            }
            else
            {
              v9 = (int)v7;
            }
            v10 = *(v4 - 10) * 64.0;
            if (v10 >= 2147483650.0 || v10 <= -2147483650.0)
            {
              if (v10 > -2147483650.0)
                v147 = (int)v10;
              else
                v147 = 0x80000000;
              if (v10 < 2147483650.0)
                v12 = v147;
              else
                v12 = 0x7FFFFFFF;
            }
            else
            {
              v12 = (int)v10;
            }
            v13 = *(v4 - 9) * 64.0;
            if (v13 >= 2147483650.0 || v13 <= -2147483650.0)
            {
              if (v13 > -2147483650.0)
                v148 = (int)v13;
              else
                v148 = 0x80000000;
              if (v13 < 2147483650.0)
                v15 = v148;
              else
                v15 = 0x7FFFFFFF;
            }
            else
            {
              v15 = (int)v13;
            }
            v16 = *(v4 - 8) * 64.0;
            if (v16 >= 2147483650.0 || v16 <= -2147483650.0)
            {
              if (v16 > -2147483650.0)
                v149 = (int)v16;
              else
                v149 = 0x80000000;
              if (v16 < 2147483650.0)
                v18 = v149;
              else
                v18 = 0x7FFFFFFF;
            }
            else
            {
              v18 = (int)v16;
            }
            this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 992))(*(_QWORD *)(v156 + 16));
            v20 = this;
            v21 = HIDWORD(v19);
            v22 = *(_DWORD *)(v6 + 160);
            v23 = v22 - HIDWORD(v19);
            if (__OFSUB__(v22, HIDWORD(v19)))
              v23 = (v22 >> 31) + 0x7FFFFFFF;
            v24 = __OFSUB__(v23, HIDWORD(this));
            v25 = v23 - HIDWORD(this);
            v26 = (v23 >> 31) + 0x7FFFFFFF;
            if (v24)
              v27 = v26;
            else
              v27 = v25;
            v28 = *(_DWORD *)(v6 + 164);
            v29 = v28 - this;
            if (__OFSUB__(v28, (_DWORD)this))
              v29 = (v28 >> 31) + 0x7FFFFFFF;
            v24 = __OFSUB__(v29, (_DWORD)v19);
            v30 = v29 - v19;
            v31 = (v29 >> 31) + 0x7FFFFFFF;
            if (v24)
              v32 = v31;
            else
              v32 = v30;
            v33 = (unsigned __int16)*(_DWORD *)(v6 + 124) >> 13;
            if (v33 <= 5 && ((1 << v33) & 0x2A) != 0)
            {
              v34 = *(_DWORD *)(v6 + 20);
              if ((v34 & 0x1000) != 0)
              {
                v128 = HIDWORD(v19) + v27;
                if (__OFADD__(HIDWORD(v19), v27))
                  v128 = (HIDWORD(v19) >> 31) + 0x7FFFFFFF;
                LODWORD(v21) = v22 - v128;
                if (__OFSUB__(v22, v128))
                  LODWORD(v21) = (v22 >> 31) + 0x7FFFFFFF;
              }
              else
              {
                v127 = this + v32;
                if (__OFADD__((_DWORD)this, (_DWORD)v32))
                  v127 = (this >> 31) + 0x7FFFFFFF;
                v20 = v28 - v127;
                if (__OFSUB__(v28, v127))
                  v20 = (v28 >> 31) + 0x7FFFFFFF;
              }
            }
            else
            {
              v34 = *(_DWORD *)(v6 + 20);
            }
            if ((v34 & 0x10000) != 0)
            {
              v154 = v32;
              v78 = v9;
              v79 = i;
              v80 = v15;
              v81 = v18;
              v82 = v27;
              v153 = v12;
              v83 = v81;
              v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1352))(v6);
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1360))(v6);
              if (v84 <= 0x2000000)
                v85 = -64 * v84;
              else
                v85 = 0x80000000;
              if (v84 < -33554431)
                v85 = 0x7FFFFFFF;
              v24 = __OFADD__(v82, v85);
              v86 = v82 + v85;
              v87 = (v82 >> 31) + 0x7FFFFFFF;
              v18 = v83;
              v15 = v80;
              i = v79;
              v12 = v153;
              v9 = v78;
              if (v24)
                v27 = v87;
              else
                v27 = v86;
              if ((int)this <= 0x2000000)
                v88 = -64 * this;
              else
                v88 = 0x80000000;
              if ((int)this < -33554431)
                v88 = 0x7FFFFFFF;
              v24 = __OFADD__(v154, v88);
              v89 = v154 + v88;
              if (v24)
                v32 = (v154 >> 31) + 0x7FFFFFFF;
              else
                v32 = v89;
            }
            if ((int)v21 > (int)v9)
            {
              v37 = 0;
            }
            else
            {
              v35 = (v21 >> 31) + 0x7FFFFFFF;
              if (!__OFADD__((_DWORD)v21, v27))
                v35 = v21 + v27;
              v36 = v9 + v15;
              if (__OFADD__(v9, v15))
                v36 = (v9 >> 31) + 0x7FFFFFFF;
              v37 = 0;
              if (v35 >= v36 && (int)v20 <= (int)v12)
              {
                v38 = v20 + v32;
                if (__OFADD__((_DWORD)v20, (_DWORD)v32))
                  v38 = (v20 >> 31) + 0x7FFFFFFF;
                v39 = v12 + v18;
                if (__OFADD__(v12, v18))
                  v39 = (v12 >> 31) + 0x7FFFFFFF;
                v37 = v38 >= v39;
              }
            }
            if (!v37 && v15 >= 1 && v18 >= 1)
            {
              if ((*(_BYTE *)(v6 + 22) & 1) == 0
                || ((*(_BYTE *)(v6 + 45) & 2) != 0
                  ? (v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 96))
                  : (v97 = *(_QWORD *)(v6 + 96)),
                    (v98 = v97 & 0x1C00, v98 == 2048) || !v98))
              {
                if (*(_BYTE *)(v6 + 46) != 49)
                  goto LABEL_341;
              }
              v99 = v12;
              v100 = v18;
              v101 = v27;
              v155 = v32;
              this = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 1184))(&v157, v6);
              if (BYTE4(v157))
              {
                v102 = v20 - v157;
                if (__OFSUB__((_DWORD)v20, (_DWORD)v157))
                  v102 = (v20 >> 31) + 0x7FFFFFFF;
                v32 = v155;
                v27 = v101;
                if (v99 > (int)v102)
                  v102 = v99;
                v103 = v102 - v99;
                if (__OFSUB__(v102, v99))
                  v103 = (v102 >> 31) + 0x7FFFFFFF;
                v24 = __OFSUB__(v100, v103);
                v104 = v100 - v103;
                if (v24)
                  v104 = 0x7FFFFFFF;
                v18 = v104 & ~(v104 >> 31);
                v12 = v102;
              }
              else
              {
                v32 = v155;
                v27 = v101;
                v18 = v100;
                v12 = v99;
              }
              if (v161)
              {
                v113 = v12 + v18;
                v114 = __OFADD__(v12, v18);
                v115 = v12 + v18;
                if (__OFADD__(v12, v18))
                  v115 = (v12 >> 31) + 0x7FFFFFFF;
                v116 = v20 + v155;
                if (__OFADD__((_DWORD)v20, (_DWORD)v155))
                  v116 = (v20 >> 31) + 0x7FFFFFFF;
                v117 = v116 + v160;
                if (__OFADD__(v116, v160))
                  v117 = (v116 >> 31) + 0x7FFFFFFF;
                if (v117 < v115)
                  v115 = v117;
                if (v114)
                  v113 = (v12 >> 31) + 0x7FFFFFFF;
                v24 = __OFSUB__(v115, v113);
                v118 = v115 - v113;
                if (v24)
                  v118 = (v115 >> 31) + 0x7FFFFFFF;
                v24 = __OFADD__(v18, v118);
                v119 = v18 + v118;
                if (v24)
                  v119 = 0x7FFFFFFF;
                v18 = v119 & ~(v119 >> 31);
                v32 = v155;
              }
              if (v163)
              {
                v105 = v21 - v162;
                if (__OFSUB__((_DWORD)v21, v162))
                  v105 = (v21 >> 31) + 0x7FFFFFFF;
                if ((int)v9 > (int)v105)
                  v105 = v9;
                v106 = v105 - v9;
                if (__OFSUB__(v105, v9))
                  v106 = (v105 >> 31) + 0x7FFFFFFF;
                v24 = __OFSUB__(v15, v106);
                v107 = v15 - v106;
                if (v24)
                  v107 = 0x7FFFFFFF;
                v15 = v107 & ~(v107 >> 31);
                v9 = v105;
              }
              if (v159)
              {
                v120 = v9 + v15;
                v121 = __OFADD__(v9, v15);
                v122 = v9 + v15;
                if (__OFADD__(v9, v15))
                  v122 = (v9 >> 31) + 0x7FFFFFFF;
                v123 = v21 + v27;
                if (__OFADD__((_DWORD)v21, v27))
                  v123 = (v21 >> 31) + 0x7FFFFFFF;
                v124 = v123 + v158;
                if (__OFADD__(v123, v158))
                  v124 = (v123 >> 31) + 0x7FFFFFFF;
                if (v124 < v122)
                  v122 = v124;
                if (v121)
                  v120 = (v9 >> 31) + 0x7FFFFFFF;
                v24 = __OFSUB__(v122, v120);
                v125 = v122 - v120;
                if (v24)
                  v125 = (v122 >> 31) + 0x7FFFFFFF;
                v24 = __OFADD__(v15, v125);
                v126 = v15 + v125;
                if (v24)
                  v126 = 0x7FFFFFFF;
                v15 = v126 & ~(v126 >> 31);
                v32 = v155;
              }
              if ((int)v21 > (int)v9)
              {
                v110 = 0;
              }
              else
              {
                v108 = v21 + v27;
                if (__OFADD__((_DWORD)v21, v27))
                  v108 = (v21 >> 31) + 0x7FFFFFFF;
                v109 = v9 + v15;
                if (__OFADD__(v9, v15))
                  v109 = (v9 >> 31) + 0x7FFFFFFF;
                v110 = 0;
                if (v108 >= v109 && (int)v20 <= (int)v12)
                {
                  v111 = v20 + v32;
                  if (__OFADD__((_DWORD)v20, (_DWORD)v32))
                    v111 = (v20 >> 31) + 0x7FFFFFFF;
                  v112 = v12 + v18;
                  if (__OFADD__(v12, v18))
                    v112 = (v12 >> 31) + 0x7FFFFFFF;
                  v110 = v111 >= v112;
                }
              }
              if (!v110 && v15 >= 1 && v18)
              {
LABEL_341:
                if (!*(_QWORD *)(v6 + 192))
                {
                  v90 = v27 | (unint64_t)(v32 << 32);
                  v92 = WTF::fastMalloc((WTF *)0x28);
                  v93 = *(_QWORD *)(v6 + 160);
                  *(_DWORD *)v92 = 1;
                  *(_QWORD *)(v92 + 4) = (v20 << 32) | v21;
                  *(_QWORD *)(v92 + 12) = v90;
                  *(_QWORD *)(v92 + 20) = 0;
                  *(_QWORD *)(v92 + 28) = v93;
                  *(_DWORD *)(v92 + 36) = 0;
                  this = *(_QWORD *)(v6 + 192);
                  *(_QWORD *)(v6 + 192) = v92;
                  if (this)
                  {
                    if (*(_DWORD *)this == 1)
                      this = WTF::fastFree((WTF *)this, v91);
                    else
                      --*(_DWORD *)this;
                  }
                }
                v65 = *(_DWORD **)(v6 + 192);
                v66 = v9 + v15;
                if (__OFADD__(v9, v15))
                  v66 = (v9 >> 31) + 0x7FFFFFFF;
                v67 = v65[1];
                v68 = v65[3];
                v24 = __OFADD__(v67, v68);
                v69 = v67 + v68;
                if (v24)
                  v69 = (v67 >> 31) + 0x7FFFFFFF;
                if ((int)v66 <= v69)
                  v66 = v69;
                v70 = v12 + v18;
                if (__OFADD__(v12, v18))
                  v70 = (v12 >> 31) + 0x7FFFFFFF;
                v71 = v65[2];
                v72 = v65[4];
                v24 = __OFADD__(v71, v72);
                v73 = v71 + v72;
                if (v24)
                  v73 = (v71 >> 31) + 0x7FFFFFFF;
                if ((int)v70 <= v73)
                  v70 = v73;
                if ((int)v67 >= (int)v9)
                  v67 = v9;
                if ((int)v71 >= (int)v12)
                  v71 = v12;
                v24 = __OFSUB__(v66, v67);
                v74 = v66 - v67;
                if (v24)
                  v74 = (v66 >> 31) + 0x7FFFFFFF;
                v65[3] = v74;
                v24 = __OFSUB__(v70, v71);
                v75 = v70 - v71;
                if (v24)
                  v75 = (v70 >> 31) + 0x7FFFFFFF;
                v65[4] = v75;
                v24 = __OFSUB__(v66, v74);
                v76 = v66 - v74;
                if (v24)
                  v76 = (v66 >> 31) + 0x7FFFFFFF;
                v65[1] = v76;
                v77 = v70 - v75;
                if (__OFSUB__(v70, v75))
                  v77 = (v70 >> 31) + 0x7FFFFFFF;
                v65[2] = v77;
              }
            }
            v40 = *(_QWORD *)(v156 + 16);
            if ((*(_BYTE *)(v40 + 52) & 7) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19414D294);
            }
            if ((*(_BYTE *)(v40 + 22) & 1) != 0)
              goto LABEL_77;
            v41 = *(v4 - 3) * 64.0;
            if (v41 < 2147483650.0 && v41 > -2147483650.0)
              goto LABEL_60;
            if (v41 >= 2147483650.0)
            {
              v42 = 0x7FFFFFFF;
              goto LABEL_61;
            }
            if (v41 > -2147483650.0)
LABEL_60:
              v42 = (int)v41;
            else
              v42 = 0x80000000;
LABEL_61:
            v43 = *(v4 - 2) * 64.0;
            if (v43 < 2147483650.0 && v43 > -2147483650.0)
            {
LABEL_63:
              v44 = (int)v43;
              goto LABEL_64;
            }
            if (v43 >= 2147483650.0)
            {
              v44 = 0x7FFFFFFF;
            }
            else
            {
              if (v43 > -2147483650.0)
                goto LABEL_63;
              v44 = 0x80000000;
            }
LABEL_64:
            v45 = *(v4 - 1) * 64.0;
            if (v45 < 2147483650.0 && v45 > -2147483650.0)
              goto LABEL_66;
            if (v45 >= 2147483650.0)
            {
              v46 = 0x7FFFFFFF;
              goto LABEL_67;
            }
            if (v45 > -2147483650.0)
LABEL_66:
              v46 = (int)v45;
            else
              v46 = 0x80000000;
LABEL_67:
            v47 = *v4 * 64.0;
            if (v47 >= 2147483650.0 || v47 <= -2147483650.0)
            {
              if (v47 >= 2147483650.0)
              {
                v129 = 0x7FFFFFFF;
              }
              else if (v47 <= -2147483650.0)
              {
                v129 = 0x80000000;
              }
              else
              {
                v129 = (int)v47;
              }
              v130 = *(_QWORD *)(v40 + 160);
              if (v42 < 0)
                goto LABEL_279;
              v131 = v42 + v46;
              if (__OFADD__(v42, v46))
                v131 = 0x7FFFFFFF;
              if (v131 > (int)v130 || v44 < 0)
                goto LABEL_279;
              v132 = v44 + v129;
              if (__OFADD__(v44, v129))
                v132 = 0x7FFFFFFF;
              if (v132 > SHIDWORD(v130))
              {
LABEL_279:
                if (v46 >= 1 && v129 >= 1)
                {
                  if (!*(_QWORD *)(v40 + 192))
                  {
                    v150 = WTF::fastMalloc((WTF *)0x28);
                    v151 = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v40);
                    *(_DWORD *)v150 = 1;
                    *(_QWORD *)(v150 + 4) = v151;
                    *(_QWORD *)(v150 + 12) = v152;
                    *(_QWORD *)(v150 + 20) = 0;
                    *(_QWORD *)(v150 + 28) = v130;
                    *(_DWORD *)(v150 + 36) = 0;
                    this = *(_QWORD *)(v40 + 192);
                    *(_QWORD *)(v40 + 192) = v150;
                    if (this)
                    {
                      if (*(_DWORD *)this == 1)
                        this = WTF::fastFree((WTF *)this, v152);
                      else
                        --*(_DWORD *)this;
                    }
                  }
                  v133 = *(_DWORD **)(v40 + 192);
                  v134 = v42 + v46;
                  if (__OFADD__(v42, v46))
                    v134 = (v42 >> 31) + 0x7FFFFFFF;
                  v135 = v133[5];
                  v136 = v133[7];
                  v24 = __OFADD__(v135, v136);
                  v137 = v135 + v136;
                  if (v24)
                    v137 = (v135 >> 31) + 0x7FFFFFFF;
                  if (v134 <= v137)
                    v134 = v137;
                  v138 = v44 + v129;
                  if (__OFADD__(v44, v129))
                    v138 = (v44 >> 31) + 0x7FFFFFFF;
                  v139 = v133[6];
                  v140 = v133[8];
                  v24 = __OFADD__(v139, v140);
                  v141 = v139 + v140;
                  if (v24)
                    v141 = (v139 >> 31) + 0x7FFFFFFF;
                  if (v138 <= v141)
                    v138 = v141;
                  if (v135 >= v42)
                    v142 = v42;
                  else
                    v142 = v133[5];
                  if (v139 >= v44)
                    v143 = v44;
                  else
                    v143 = v133[6];
                  v133[5] = v142;
                  v133[6] = v143;
                  v144 = v134 - v142;
                  if (__OFSUB__(v134, v142))
                    v144 = (v134 >> 31) + 0x7FFFFFFF;
                  v133[7] = v144;
                  v24 = __OFSUB__(v138, v143);
                  v145 = v138 - v143;
                  if (v24)
                    v145 = (v138 >> 31) + 0x7FFFFFFF;
                  v133[8] = v145;
                }
              }
            }
            else
            {
              v48 = (int)v47;
              v49 = *(_QWORD *)(v40 + 160);
              if (v42 < 0)
                goto LABEL_80;
              v50 = v42 + v46;
              if (__OFADD__(v42, v46))
                v50 = 0x7FFFFFFF;
              if (v50 > (int)v49 || v44 < 0)
                goto LABEL_80;
              v51 = v44 + v48;
              if (__OFADD__(v44, v48))
                v51 = 0x7FFFFFFF;
              if (v51 > SHIDWORD(v49))
              {
LABEL_80:
                if (v46 >= 1 && v48 >= 1)
                {
                  if (!*(_QWORD *)(v40 + 192))
                  {
                    v94 = WTF::fastMalloc((WTF *)0x28);
                    v95 = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v40);
                    *(_DWORD *)v94 = 1;
                    *(_QWORD *)(v94 + 4) = v95;
                    *(_QWORD *)(v94 + 12) = v96;
                    *(_QWORD *)(v94 + 20) = 0;
                    *(_QWORD *)(v94 + 28) = v49;
                    *(_DWORD *)(v94 + 36) = 0;
                    this = *(_QWORD *)(v40 + 192);
                    *(_QWORD *)(v40 + 192) = v94;
                    if (this)
                    {
                      if (*(_DWORD *)this == 1)
                        this = WTF::fastFree((WTF *)this, v96);
                      else
                        --*(_DWORD *)this;
                    }
                  }
                  v52 = *(_DWORD **)(v40 + 192);
                  v53 = v42 + v46;
                  if (__OFADD__(v42, v46))
                    v53 = (v42 >> 31) + 0x7FFFFFFF;
                  v54 = v52[5];
                  v55 = v52[7];
                  v24 = __OFADD__(v54, v55);
                  v56 = v54 + v55;
                  if (v24)
                    v56 = (v54 >> 31) + 0x7FFFFFFF;
                  if (v53 <= v56)
                    v53 = v56;
                  v57 = v44 + v48;
                  if (__OFADD__(v44, v48))
                    v57 = (v44 >> 31) + 0x7FFFFFFF;
                  v58 = v52[6];
                  v59 = v52[8];
                  v24 = __OFADD__(v58, v59);
                  v60 = v58 + v59;
                  if (v24)
                    v60 = (v58 >> 31) + 0x7FFFFFFF;
                  if (v57 <= v60)
                    v57 = v60;
                  if (v54 >= v42)
                    v61 = v42;
                  else
                    v61 = v52[5];
                  if (v58 >= v44)
                    v62 = v44;
                  else
                    v62 = v52[6];
                  v52[5] = v61;
                  v52[6] = v62;
                  v63 = v53 - v61;
                  if (__OFSUB__(v53, v61))
                    v63 = (v53 >> 31) + 0x7FFFFFFF;
                  v52[7] = v63;
                  v24 = __OFSUB__(v57, v62);
                  v64 = v57 - v62;
                  if (v24)
                    v64 = (v57 >> 31) + 0x7FFFFFFF;
                  v52[8] = v64;
                }
              }
            }
LABEL_77:
            v4 += 38;
          }
        }
      }
    }
  }
  else if (v1 == 2)
  {
    this = *(_QWORD *)(this + 232);
    if (this)
      return (uint64_t)WebCore::LegacyLineLayout::addOverflowFromInlineChildren((uint64_t *)this);
  }
  return this;
}

unint64_t WebCore::RenderBox::computePositionedLogicalWidth(uint64_t a1, int *a2, WebCore::RenderFragmentContainer *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  int v31;
  void *v32;
  int v33;
  void *v34;
  const WebCore::RenderBox *v35;
  unint64_t result;
  int v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  int v46;
  void *v47;
  int v48;
  void *v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  unsigned __int8 v62;
  unsigned int v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  unsigned int v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  int *v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  BOOL v88;
  int v89;
  unsigned int v90;
  WebCore::RenderObject *v91;
  int v92;
  int v93;
  int v94;
  float v95;
  double v96;
  int v97;
  float v98;
  double v99;
  int v100;
  float v101;
  double v102;
  unsigned int v103;
  uint64_t (**v104)();
  int v105;
  uint64_t v106;
  float v107;
  unint64_t v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  void *v118;
  float v119;
  float v121;
  float v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  _BOOL4 v130;
  BOOL v131;
  _BOOL8 v132;
  float v133;
  uint64_t v134;
  float v135;
  _BOOL8 v136;
  float v137;
  float v138;
  int v139;
  float v140;
  float v141;
  float v142;
  unsigned int *v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  const WebCore::Length *v152;
  double v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  WebCore::RenderFragmentContainer *v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  WebCore::RenderBox *v187;
  unsigned int v188;
  char v189;
  unsigned int v190;
  char v191;
  unsigned int v192;
  char v193;
  unsigned int v194;
  char v195;
  uint64_t (*v196)();
  unsigned int v197;
  unsigned __int8 v198;
  char v199;
  char v200;
  int v201;
  __int16 v202;
  char v203;
  unsigned int v204;
  unsigned __int8 v205;
  char v206;
  char v207;
  int v208;
  __int16 v209;
  char v210;
  uint64_t (*v211)();
  unsigned int v212;
  char v213;
  unsigned int v214;
  char v215;
  unsigned int v216;
  char v217;
  unsigned int v218;
  char v219;
  uint64_t (*v220)();
  unsigned int v221;
  char v222;
  unsigned int v223;
  char v224;
  unsigned int v225;
  char v226;
  unsigned int v227;
  char v228;
  uint64_t (*v229)();
  unsigned int v230;
  unsigned __int8 v231;
  char v232;
  char v233;
  int v234;
  __int16 v235;
  char v236;
  unsigned int v237;
  unsigned __int8 v238;
  char v239;
  char v240;
  int v241;
  __int16 v242;
  char v243;
  uint64_t (*v244)();
  unsigned int v245;
  unsigned __int8 v246;
  char v247;
  char v248;
  unsigned int v249;
  unsigned __int8 v250;
  char v251;
  char v252;
  unsigned int v253;
  char v254;
  char v255;
  char v256;
  unsigned int v257;
  char v258;
  unsigned __int8 v259;
  char v260;
  unsigned int v261;
  unsigned __int8 v262;
  char v263;
  char v264;
  unsigned int v265;
  unsigned __int8 v266;
  __int16 v267;
  unsigned int v268;
  unsigned __int8 v269;
  char v270;
  char v271;
  unsigned int v272;
  unint64_t v273[2];
  unsigned int v274;
  int v275;
  uint64_t v276;
  _DWORD v277[3];
  _QWORD v278[3];
  char v279;
  _QWORD v280[2];

  v5 = *(_DWORD *)(a1 + 20);
  v187 = (WebCore::RenderBox *)WebCore::RenderObject::container((WebCore::RenderObject *)a1);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)v187 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19414F0B4);
    }
    v6 = WebCore::RenderBox::containingBlockLogicalWidthForPositioned((WebCore::RenderBox *)a1, v187, a3, 1);
    v7 = *((_DWORD *)v187 + 30);
    v8 = *(_DWORD *)(a1 + 20);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
    v11 = v9 + v10;
    if (__OFADD__(v9, v10))
      v11 = (v9 >> 31) + 0x7FFFFFFF;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      v13 = (v11 >> 31) + 0x7FFFFFFF;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
    v184 = v13 + v14;
    if (__OFADD__(v13, v14))
      v184 = (v13 >> 31) + 0x7FFFFFFF;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    if ((v8 & 0x1000) != 0)
      v16 = v15 + 40;
    else
      v16 = v15 + 64;
    LODWORD(v273[0]) = 0;
    BYTE6(v273[0]) = 0;
    WORD2(v273[0]) = *(_WORD *)(v16 + 4);
    if (BYTE4(v273[0]) - 2 >= 9)
    {
      if (BYTE4(v273[0]) == 11)
      {
        LODWORD(v273[0]) = *(_DWORD *)v16;
        WebCore::Length::ref((int *)v273);
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
      }
    }
    else
    {
      BYTE6(v273[0]) = *(_BYTE *)(v16 + 6);
      LODWORD(v273[0]) = *(_DWORD *)v16;
    }
    if ((v8 & 0x1000) != 0)
      v17 = v15 + 56;
    else
      v17 = v15 + 48;
    v268 = 0;
    v271 = 0;
    v269 = *(_BYTE *)(v17 + 4);
    v270 = *(_BYTE *)(v17 + 5);
    if (v269 - 2 >= 9)
    {
      if (v269 == 11)
      {
        v268 = *(_DWORD *)v17;
        WebCore::Length::ref((int *)&v268);
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
      }
    }
    else
    {
      v271 = *(_BYTE *)(v17 + 6);
      v268 = *(_DWORD *)v17;
    }
    v18 = *(_DWORD *)(a1 + 124);
    v19 = ((unsigned __int16)v18 >> 13) - 2;
    if (v19 > 3)
      v20 = 3;
    else
      v20 = qword_1969FC688[v19];
    v21 = v18 >> 13;
    v22 = v15 + 8 + 8 * v20;
    LODWORD(v280[0]) = 0;
    *(_WORD *)((char *)v280 + 5) = 0;
    WORD2(v280[0]) = *(_WORD *)(v22 + 4);
    if (BYTE4(v280[0]) <= 0xDu)
    {
      if (((1 << SBYTE4(v280[0])) & 0x7FC) != 0)
      {
        BYTE6(v280[0]) = *(_BYTE *)(v15 + 8 + 8 * v20 + 6);
        LODWORD(v280[0]) = *(_DWORD *)v22;
      }
      else if (((1 << SBYTE4(v280[0])) & 0x3003) != 0)
      {
        LODWORD(v280[0]) = 0;
      }
      else
      {
        LODWORD(v280[0]) = *(_DWORD *)v22;
        WebCore::Length::ref((int *)v280);
        v21 = *(_DWORD *)(a1 + 124) >> 13;
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
      }
    }
    v23 = (v21 & 7) - 2;
    if (v23 > 3)
      v24 = 1;
    else
      v24 = qword_1969FC6A8[v23];
    v25 = v15 + 8;
    v26 = v15 + 8 + 8 * v24;
    v265 = 0;
    v267 = 0;
    v266 = *(_BYTE *)(v26 + 4);
    LOBYTE(v267) = *(_BYTE *)(v26 + 5);
    if (v266 <= 0xDu)
    {
      if (((1 << v266) & 0x7FC) != 0)
      {
        HIBYTE(v267) = *(_BYTE *)(v25 + 8 * v24 + 6);
        v265 = *(_DWORD *)v26;
      }
      else if (((1 << v266) & 0x3003) != 0)
      {
        v265 = 0;
      }
      else
      {
        v265 = *(_DWORD *)v26;
        WebCore::Length::ref((int *)&v265);
      }
    }
    WebCore::computeInlineStaticDistance((unint64_t)v280, (unint64_t)&v265, a1, v187, v6, a3);
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v28 = v27 + 12;
    else
      v28 = v27 + 4;
    LODWORD(v244) = 0;
    BYTE6(v244) = 0;
    WORD2(v244) = *(_WORD *)(v28 + 4);
    if (BYTE4(v244) - 2 >= 9)
    {
      if (BYTE4(v244) == 11)
      {
        LODWORD(v244) = *(_DWORD *)v28;
        WebCore::Length::ref((int *)&v244);
      }
    }
    else
    {
      BYTE6(v244) = *(_BYTE *)(v28 + 6);
      LODWORD(v244) = *(_DWORD *)v28;
    }
    v241 = 0;
    v243 = 0;
    v242 = WORD2(v280[0]);
    v29 = BYTE4(v280[0]);
    v180 = a3;
    if (BYTE4(v280[0]) - 2 >= 9)
    {
      v30 = 0;
      if (BYTE4(v280[0]) == 11)
      {
        v30 = (void *)LODWORD(v280[0]);
        v241 = v280[0];
        WebCore::Length::ref(&v241);
      }
    }
    else
    {
      v243 = BYTE6(v280[0]);
      if (BYTE6(v280[0]))
      {
        v241 = v280[0];
        v30 = (void *)LODWORD(v280[0]);
      }
      else
      {
        v30 = (void *)LODWORD(v280[0]);
        v241 = v280[0];
      }
    }
    v237 = 0;
    v240 = 0;
    v238 = v266;
    v31 = v266;
    v239 = v267;
    if (v266 - 2 >= 9)
    {
      v32 = 0;
      if (v266 == 11)
      {
        v32 = (void *)v265;
        v237 = v265;
        WebCore::Length::ref((int *)&v237);
      }
    }
    else
    {
      v240 = HIBYTE(v267);
      if (HIBYTE(v267))
      {
        v237 = v265;
        v32 = (void *)v265;
      }
      else
      {
        v32 = (void *)v265;
        v237 = v265;
      }
    }
    v234 = 0;
    v236 = 0;
    v235 = WORD2(v273[0]);
    v33 = BYTE4(v273[0]);
    if (BYTE4(v273[0]) - 2 >= 9)
    {
      v34 = 0;
      if (BYTE4(v273[0]) == 11)
      {
        v34 = (void *)LODWORD(v273[0]);
        v234 = v273[0];
        WebCore::Length::ref(&v234);
      }
    }
    else
    {
      v236 = BYTE6(v273[0]);
      if (BYTE6(v273[0]))
      {
        v234 = v273[0];
        v34 = (void *)LODWORD(v273[0]);
      }
      else
      {
        v34 = (void *)LODWORD(v273[0]);
        v234 = v273[0];
      }
    }
    v230 = 0;
    v233 = 0;
    v231 = v269;
    v232 = v270;
    if (v269 - 2 >= 9)
    {
      if (v269 == 11)
      {
        v230 = v268;
        WebCore::Length::ref((int *)&v230);
      }
    }
    else
    {
      v233 = v271;
      v230 = v268;
    }
    v182 = (v7 >> 26) & 1;
    WebCore::RenderBox::computePositionedLogicalWidthUsing(a1, 0, &v244, (uint64_t *)v187, v182, v6, v184, (unsigned __int8 *)&v241, (WebCore::Length *)&v237, (WebCore::Length *)&v234, (unsigned __int8 *)&v230, a2);
    if (v231 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v230);
    }
    if (v33 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v34);
    }
    if (v31 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v32);
    }
    if (v29 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v30);
    }
    if (BYTE4(v244) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v244);
    }
    result = WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio((WebCore::RenderBox *)a1, v35);
    if ((_DWORD)result)
    {
      result = WebCore::RenderBox::computeMinMaxLogicalWidthFromAspectRatio((WebCore::RenderBox *)a1);
      v37 = result;
      v38 = HIDWORD(result);
    }
    else
    {
      v37 = 0x80000000;
      LODWORD(v38) = 0x7FFFFFFF;
    }
    memset((char *)&v278[1] + 4, 0, 12);
    *(_QWORD *)((char *)v278 + 4) = 0;
    LODWORD(v278[0]) = 0x7FFFFFFF;
    v39 = *(_BYTE **)(*(_QWORD *)(a1 + 88) + 8);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
    {
      if (v39[48] == 13)
        goto LABEL_74;
      v152 = (const WebCore::Length *)(v39 + 44);
    }
    else
    {
      if (v39[32] == 13)
        goto LABEL_74;
      v152 = (const WebCore::Length *)(v39 + 28);
    }
    WebCore::Length::Length((WebCore::Length *)&v229, v152);
    WebCore::Length::Length((WebCore::Length *)&v227, (const WebCore::Length *)v280);
    WebCore::Length::Length((WebCore::Length *)&v225, (const WebCore::Length *)&v265);
    WebCore::Length::Length((WebCore::Length *)&v223, (const WebCore::Length *)v273);
    WebCore::Length::Length((WebCore::Length *)&v221, (const WebCore::Length *)&v268);
    result = WebCore::RenderBox::computePositionedLogicalWidthUsing(a1, 2, &v229, (uint64_t *)v187, v182, v6, v184, (unsigned __int8 *)&v227, (WebCore::Length *)&v225, (WebCore::Length *)&v223, (unsigned __int8 *)&v221, (int *)v278);
    if (v222 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v221);
    }
    if (v224 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v223);
    }
    if (v226 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v225);
    }
    if (v228 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v227);
    }
    if (BYTE4(v229) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v229);
    }
LABEL_74:
    if ((int)v38 < SLODWORD(v278[0]))
    {
      *(float *)&v220 = (float)(int)v38 * 0.015625;
      WORD2(v220) = 4;
      BYTE6(v220) = 1;
      WebCore::Length::Length((WebCore::Length *)&v218, (const WebCore::Length *)v280);
      WebCore::Length::Length((WebCore::Length *)&v216, (const WebCore::Length *)&v265);
      WebCore::Length::Length((WebCore::Length *)&v214, (const WebCore::Length *)v273);
      WebCore::Length::Length((WebCore::Length *)&v212, (const WebCore::Length *)&v268);
      result = WebCore::RenderBox::computePositionedLogicalWidthUsing(a1, 2, &v220, (uint64_t *)v187, v182, v6, v184, (unsigned __int8 *)&v218, (WebCore::Length *)&v216, (WebCore::Length *)&v214, (unsigned __int8 *)&v212, (int *)v278);
      if (v213 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v212);
      }
      if (v215 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v214);
      }
      if (v217 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v216);
      }
      if (v219 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v218);
      }
      if (BYTE4(v220) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v220);
      }
    }
    if (*a2 > SLODWORD(v278[0]))
    {
      v151 = HIDWORD(v278[0]);
      *a2 = v278[0];
      a2[1] = v151;
      *((_QWORD *)a2 + 2) = v278[2];
    }
    memset(v277, 0, sizeof(v277));
    v276 = 0;
    v275 = 0x80000000;
    v40 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    if (v40 < 4)
      v42 = v41 + 36;
    else
      v42 = v41 + 20;
    if (!*(_BYTE *)(v42 + 4) || *(_BYTE *)(v42 + 4) == 11)
      goto LABEL_83;
    if (*(_BYTE *)(v42 + 6))
    {
      if (*(float *)v42 != 0.0)
        goto LABEL_83;
    }
    else if (*(_DWORD *)v42)
    {
      goto LABEL_83;
    }
    if (v40 < 4)
      v57 = v41 + 36;
    else
      v57 = v41 + 20;
    if (*(unsigned __int8 *)(v57 + 4) - 7 > 3)
    {
LABEL_116:
      if (v37 > v275)
      {
        *(float *)&v196 = (float)v37 * 0.015625;
        WORD2(v196) = 4;
        BYTE6(v196) = 1;
        WebCore::Length::Length((WebCore::Length *)&v194, (const WebCore::Length *)v280);
        WebCore::Length::Length((WebCore::Length *)&v192, (const WebCore::Length *)&v265);
        WebCore::Length::Length((WebCore::Length *)&v190, (const WebCore::Length *)v273);
        WebCore::Length::Length((WebCore::Length *)&v188, (const WebCore::Length *)&v268);
        result = WebCore::RenderBox::computePositionedLogicalWidthUsing(a1, 1, &v196, (uint64_t *)v187, v182, v6, v184, (unsigned __int8 *)&v194, (WebCore::Length *)&v192, (WebCore::Length *)&v190, (unsigned __int8 *)&v188, &v275);
        if (v189 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v188);
        }
        if (v191 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v190);
        }
        if (v193 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v192);
        }
        if (v195 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v194);
        }
        if (BYTE4(v196) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v196);
        }
      }
      v50 = *a2;
      v51 = v275;
      if (*a2 < v275)
      {
        a2[1] = v276;
        *((_QWORD *)a2 + 2) = *(_QWORD *)&v277[1];
        v50 = v51;
      }
      v52 = v50 + v184;
      if (__OFADD__(v50, v184))
        v52 = (v50 >> 31) + 0x7FFFFFFF;
      *a2 = v52;
      if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
        if (!v180)
        {
          if (result)
          {
            v167 = *(_QWORD *)(a1 + 32);
            if ((!v167
               || (v168 = *(_QWORD *)(v167 + 8)) == 0
               || ((*(_DWORD *)(a1 + 124) ^ *(_DWORD *)(v168 + 124)) & 0xE000) != 0)
              && ((*(_BYTE *)(a1 + 21) & 0x10) == 0) == ((*((_BYTE *)v187 + 21) & 0x10) == 0)
              && (*((_BYTE *)v187 + 45) & 0x40) != 0)
            {
              ++*((_DWORD *)v187 + 4);
              v169 = a2[1];
              v170 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v187 + 1288))(v187);
              result = WebCore::RenderBlock::fragmentAtBlockOffset(v187, v170);
              if (result)
              {
                result = WebCore::RenderFragmentContainer::renderBoxFragmentInfo((WebCore::RenderFragmentContainer *)result, v187);
                if (result)
                {
                  v171 = v169 + *(_DWORD *)result;
                  if (__OFADD__(v169, *(_DWORD *)result))
                    v171 = (v169 >> 31) + 0x7FFFFFFF;
                  a2[1] = v171;
                }
              }
              v172 = *((_DWORD *)v187 + 4);
              if (!v172)
              {
                __break(0xC471u);
                JUMPOUT(0x19414FE3CLL);
              }
              *((_DWORD *)v187 + 4) = v172 - 1;
            }
          }
        }
      }
      if (v266 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v265);
      }
      if (BYTE4(v280[0]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v280[0]));
      }
      if (v269 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v268);
      }
      if (BYTE4(v273[0]) != 11)
        return result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v118 = (void *)LODWORD(v273[0]);
      return (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v118);
    }
LABEL_83:
    if (v40 < 4)
      v43 = v41 + 36;
    else
      v43 = v41 + 20;
    LODWORD(v211) = 0;
    BYTE6(v211) = 0;
    WORD2(v211) = *(_WORD *)(v43 + 4);
    if (BYTE4(v211) - 2 >= 9)
    {
      if (BYTE4(v211) == 11)
      {
        LODWORD(v211) = *(_DWORD *)v43;
        WebCore::Length::ref((int *)&v211);
      }
    }
    else
    {
      BYTE6(v211) = *(_BYTE *)(v43 + 6);
      LODWORD(v211) = *(_DWORD *)v43;
    }
    v208 = 0;
    v210 = 0;
    v209 = WORD2(v280[0]);
    v44 = BYTE4(v280[0]);
    if (BYTE4(v280[0]) - 2 >= 9)
    {
      v45 = 0;
      if (BYTE4(v280[0]) == 11)
      {
        v45 = (void *)LODWORD(v280[0]);
        v208 = v280[0];
        WebCore::Length::ref(&v208);
      }
    }
    else
    {
      v210 = BYTE6(v280[0]);
      if (BYTE6(v280[0]))
      {
        v208 = v280[0];
        v45 = (void *)LODWORD(v280[0]);
      }
      else
      {
        v45 = (void *)LODWORD(v280[0]);
        v208 = v280[0];
      }
    }
    v204 = 0;
    v207 = 0;
    v205 = v266;
    v46 = v266;
    v206 = v267;
    if (v266 - 2 >= 9)
    {
      v47 = 0;
      if (v266 == 11)
      {
        v47 = (void *)v265;
        v204 = v265;
        WebCore::Length::ref((int *)&v204);
      }
    }
    else
    {
      v207 = HIBYTE(v267);
      if (HIBYTE(v267))
      {
        v204 = v265;
        v47 = (void *)v265;
      }
      else
      {
        v47 = (void *)v265;
        v204 = v265;
      }
    }
    v201 = 0;
    v203 = 0;
    v202 = WORD2(v273[0]);
    v48 = BYTE4(v273[0]);
    if (BYTE4(v273[0]) - 2 >= 9)
    {
      v49 = 0;
      if (BYTE4(v273[0]) == 11)
      {
        v49 = (void *)LODWORD(v273[0]);
        v201 = v273[0];
        WebCore::Length::ref(&v201);
      }
    }
    else
    {
      v203 = BYTE6(v273[0]);
      if (BYTE6(v273[0]))
      {
        v201 = v273[0];
        v49 = (void *)LODWORD(v273[0]);
      }
      else
      {
        v49 = (void *)LODWORD(v273[0]);
        v201 = v273[0];
      }
    }
    v197 = 0;
    v200 = 0;
    v198 = v269;
    v199 = v270;
    if (v269 - 2 >= 9)
    {
      if (v269 == 11)
      {
        v197 = v268;
        WebCore::Length::ref((int *)&v197);
      }
    }
    else
    {
      v200 = v271;
      v197 = v268;
    }
    result = WebCore::RenderBox::computePositionedLogicalWidthUsing(a1, 1, &v211, (uint64_t *)v187, v182, v6, v184, (unsigned __int8 *)&v208, (WebCore::Length *)&v204, (WebCore::Length *)&v201, (unsigned __int8 *)&v197, &v275);
    if (v198 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v197);
    }
    if (v48 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v49);
    }
    if (v46 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v47);
    }
    if (v44 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v45);
    }
    if (BYTE4(v211) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v211);
    }
    goto LABEL_116;
  }
  if ((*((_BYTE *)v187 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19414F1C4);
  }
  v181 = WebCore::RenderBox::containingBlockLogicalWidthForPositioned((WebCore::RenderBox *)a1, v187, 0, 1);
  v179 = WebCore::RenderBox::containingBlockLogicalWidthForPositioned((WebCore::RenderBox *)a1, v187, 0, 0);
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v54 = *(_DWORD *)(a1 + 124);
  v55 = ((unsigned __int16)v54 >> 13) - 2;
  if (v55 > 3)
    v56 = 3;
  else
    v56 = qword_1969FC688[v55];
  v178 = *((_DWORD *)v187 + 30);
  v58 = *(_DWORD *)(a1 + 20);
  v59 = v54 >> 13;
  v60 = v53 + 8 + 8 * v56;
  v265 = 0;
  v266 = *(_BYTE *)(v60 + 4);
  v61 = v266;
  v62 = *(_BYTE *)(v60 + 5);
  v267 = v62;
  v63 = v266 - 2;
  v185 = v266;
  if (v63 >= 9)
  {
    if (v266 == 11)
    {
      v265 = *(_DWORD *)v60;
      v65 = v265;
      WebCore::Length::ref((int *)&v265);
      v61 = v185;
      v64 = 0;
      v53 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
      v59 = *(_DWORD *)(a1 + 124) >> 13;
    }
    else
    {
      v64 = 0;
      v65 = 0;
    }
  }
  else
  {
    HIBYTE(v267) = *(_BYTE *)(v60 + 6);
    if (HIBYTE(v267))
    {
      v65 = *(_DWORD *)v60;
      v265 = *(_DWORD *)v60;
      v64 = 1;
    }
    else
    {
      v64 = 0;
      v265 = *(_DWORD *)v60;
      v65 = v265;
    }
  }
  v66 = (v59 & 7) - 2;
  if (v66 > 3)
    v67 = 1;
  else
    v67 = qword_1969FC6A8[v66];
  v68 = v53 + 8 + 8 * v67;
  v261 = 0;
  v264 = 0;
  v262 = *(_BYTE *)(v68 + 4);
  v69 = v262;
  v70 = *(_BYTE *)(v68 + 5);
  v263 = v70;
  v71 = v262 - 2;
  v183 = v262;
  if (v71 >= 9)
  {
    if (v262 == 11)
    {
      v261 = *(_DWORD *)v68;
      v73 = v261;
      WebCore::Length::ref((int *)&v261);
      v69 = v183;
      v61 = v185;
      v72 = 0;
    }
    else
    {
      v72 = 0;
      v73 = 0;
    }
  }
  else
  {
    v264 = *(_BYTE *)(v68 + 6);
    if (v264)
    {
      v73 = *(_DWORD *)v68;
      v261 = *(_DWORD *)v68;
      v72 = 1;
    }
    else
    {
      v72 = 0;
      v261 = *(_DWORD *)v68;
      v73 = v261;
    }
  }
  v257 = 0;
  v260 = 0;
  v258 = v61;
  v259 = v62;
  if (v63 >= 9)
  {
    if (v61 == 11)
    {
      v257 = v65;
      WebCore::Length::ref((int *)&v257);
      v69 = v183;
    }
  }
  else
  {
    v260 = v64;
    v257 = v65;
  }
  v253 = 0;
  v256 = 0;
  v254 = v69;
  v255 = v70;
  if (v71 >= 9)
  {
    if (v69 == 11)
    {
      v253 = v73;
      WebCore::Length::ref((int *)&v253);
    }
  }
  else
  {
    v256 = v72;
    v253 = v73;
  }
  v74 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  if ((v58 & 0x1000) != 0)
    v75 = v74 + 40;
  else
    v75 = v74 + 64;
  v249 = 0;
  v252 = 0;
  v250 = *(_BYTE *)(v75 + 4);
  v251 = *(_BYTE *)(v75 + 5);
  if (v250 - 2 >= 9)
  {
    if (v250 == 11)
    {
      v249 = *(_DWORD *)v75;
      WebCore::Length::ref((int *)&v249);
      v74 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    }
  }
  else
  {
    v252 = *(_BYTE *)(v75 + 6);
    v249 = *(_DWORD *)v75;
  }
  if ((v58 & 0x1000) != 0)
    v76 = v74 + 56;
  else
    v76 = v74 + 48;
  v245 = 0;
  v248 = 0;
  v246 = *(_BYTE *)(v76 + 4);
  v247 = *(_BYTE *)(v76 + 5);
  if (v246 - 2 >= 9)
  {
    if (v246 == 11)
    {
      v245 = *(_DWORD *)v76;
      WebCore::Length::ref((int *)&v245);
    }
  }
  else
  {
    v248 = *(_BYTE *)(v76 + 6);
    v245 = *(_DWORD *)v76;
  }
  if ((*(_BYTE *)(a1 + 123) & 4) != 0)
  {
    v77 = (unsigned int *)(a2 + 5);
    v78 = a2 + 4;
  }
  else
  {
    v77 = (unsigned int *)(a2 + 4);
    v78 = a2 + 5;
  }
  v79 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1328))(a1, 0);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
  v82 = v80 + v81;
  if (__OFADD__(v80, v81))
    v82 = (v80 >> 31) + 0x7FFFFFFF;
  v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v84 = v82 + v83;
  if (__OFADD__(v82, v83))
    v84 = (v82 >> 31) + 0x7FFFFFFF;
  v85 = v181;
  v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  v87 = v84 + v86;
  if (__OFADD__(v84, v86))
    v87 = (v84 >> 31) + 0x7FFFFFFF;
  v88 = __OFADD__(v79, v87);
  v89 = v79 + v87;
  if (v88)
    v89 = (v79 >> 31) + 0x7FFFFFFF;
  *a2 = v89;
  v90 = v181 - v89;
  if (__OFSUB__(v181, v89))
    v90 = (v181 >> 31) + 0x7FFFFFFF;
  result = WebCore::computeInlineStaticDistance((unint64_t)&v257, (unint64_t)&v253, a1, v187, v181, 0);
  v92 = v250;
  if (v258 && v254)
  {
    v143 = v77;
    v144 = v246;
    if (!v250)
    {
      if (v246)
      {
        *v78 = WebCore::valueForLength((unsigned __int8 *)&v245, v179);
        v145 = WebCore::valueForLength((unsigned __int8 *)&v257, v181);
        result = WebCore::valueForLength((unsigned __int8 *)&v253, v181);
        v103 = v145;
        v146 = v145 + result;
        if (__OFADD__(v145, (_DWORD)result))
          v146 = (v145 >> 31) + 0x7FFFFFFF;
        v147 = v146 + *v78;
        if (__OFADD__(v146, *v78))
          v147 = (v146 >> 31) + 0x7FFFFFFF;
        v148 = v90 - v147;
        if (__OFSUB__(v90, v147))
          v148 = (v90 >> 31) + 0x7FFFFFFF;
        *v77 = v148;
        goto LABEL_408;
      }
      v154 = WebCore::valueForLength((unsigned __int8 *)&v257, v181);
      result = WebCore::valueForLength((unsigned __int8 *)&v253, v181);
      v103 = v154;
      v155 = v154 + result;
      if (__OFADD__(v154, (_DWORD)result))
        v155 = (v154 >> 31) + 0x7FFFFFFF;
      v88 = __OFSUB__(v90, v155);
      v156 = v90 - v155;
      if (v88)
        v156 = (v90 >> 31) + 0x7FFFFFFF;
      if (v156 < 1)
      {
        if ((v178 & 0x4000000) != 0)
        {
          *v77 = v156;
          *v78 = 0;
          goto LABEL_408;
        }
        *v77 = 0;
      }
      else
      {
        *v77 = v156 >> 1;
        v156 -= v156 >> 1;
      }
      *v78 = v156;
LABEL_408:
      v85 = v181;
LABEL_327:
      v94 = v183;
      v93 = v185;
      goto LABEL_209;
    }
    v157 = v179;
    *v77 = WebCore::valueForLength((unsigned __int8 *)&v249, v179);
    if (!v144)
    {
      v173 = WebCore::valueForLength((unsigned __int8 *)&v257, v181);
      result = WebCore::valueForLength((unsigned __int8 *)&v253, v181);
      v103 = v173;
      v174 = v173 + result;
      if (__OFADD__(v173, (_DWORD)result))
        v174 = (v173 >> 31) + 0x7FFFFFFF;
      v175 = v174 + *v77;
      if (__OFADD__(v174, *v77))
        v175 = (v174 >> 31) + 0x7FFFFFFF;
      v176 = v90 - v175;
      if (__OFSUB__(v90, v175))
        v176 = (v90 >> 31) + 0x7FFFFFFF;
      *v78 = v176;
      v85 = v181;
      v94 = v183;
      v93 = v185;
      goto LABEL_209;
    }
LABEL_455:
    *v78 = WebCore::valueForLength((unsigned __int8 *)&v245, v157);
    v158 = WebCore::valueForLength((unsigned __int8 *)&v253, v181);
    result = WebCore::valueForLength((unsigned __int8 *)&v257, v181);
    v103 = result;
    v85 = v181;
    v94 = v183;
    v93 = v185;
    v77 = v143;
    if ((v178 & 0x4000000) == 0)
      goto LABEL_209;
    v159 = *a2 + result;
    if (__OFADD__(*a2, (_DWORD)result))
      v159 = (*a2 >> 31) + 0x7FFFFFFF;
    v160 = v159 + v158;
    if (__OFADD__(v159, v158))
      v160 = (v159 >> 31) + 0x7FFFFFFF;
    v161 = v160 + *v143;
    if (__OFADD__(v160, *v143))
      v161 = (v160 >> 31) + 0x7FFFFFFF;
    v162 = v161 + *v78;
    if (__OFADD__(v161, *v78))
      v162 = (v161 >> 31) + 0x7FFFFFFF;
    v163 = (v162 + (v162 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    v164 = v163 - result;
    if (__OFSUB__(v163, (_DWORD)result))
      v164 = (v163 >> 31) + 0x7FFFFFFF;
    v103 = v181 - v164;
    if (__OFSUB__(v181, v164))
    {
      v85 = v181;
      v103 = (v181 >> 31) + 0x7FFFFFFF;
      goto LABEL_327;
    }
    goto LABEL_408;
  }
  v94 = v183;
  v93 = v185;
  if (!v250)
  {
    v92 = 4;
    v250 = 4;
    v249 = 0;
    v252 = 0;
  }
  if (!v246)
  {
    v246 = 4;
    v245 = 0;
    v248 = 0;
  }
  if (!v258)
  {
    *v77 = WebCore::valueForLength((unsigned __int8 *)&v249, v179);
    *v78 = WebCore::valueForLength((unsigned __int8 *)&v245, v179);
    result = WebCore::valueForLength((unsigned __int8 *)&v253, v181);
    v149 = result + *v77;
    if (__OFADD__((_DWORD)result, *v77))
      v149 = (result >> 31) + 0x7FFFFFFF;
    v150 = v149 + *v78;
    if (__OFADD__(v149, *v78))
      v150 = (v149 >> 31) + 0x7FFFFFFF;
    v103 = v90 - v150;
    if (__OFSUB__(v90, v150))
      v103 = (v90 >> 31) + 0x7FFFFFFF;
    v85 = v181;
    v94 = v183;
    v93 = v185;
    goto LABEL_209;
  }
  if (v254)
  {
    v157 = v179;
    v143 = v77;
    *v77 = WebCore::valueForLength((unsigned __int8 *)&v249, v179);
    goto LABEL_455;
  }
  if (v92 != 4)
  {
    v97 = 0;
    if (v92 > 8)
    {
      if (v92 == 11)
      {
        result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v249, (float)v179 * 0.015625);
        v96 = v140 * 64.0;
        if (v96 < 2147483650.0 && v96 > -2147483650.0)
        {
          v97 = (int)v96;
LABEL_319:
          v94 = v183;
          v93 = v185;
          goto LABEL_197;
        }
LABEL_541:
        if (v96 < 2147483650.0)
        {
LABEL_542:
          if (v96 <= -2147483650.0)
            v97 = 0x80000000;
          else
            v97 = (int)v96;
          goto LABEL_544;
        }
LABEL_553:
        v97 = 0x7FFFFFFF;
LABEL_544:
        v85 = v181;
        goto LABEL_319;
      }
      v94 = v183;
      v93 = v185;
      if (v92 != 9)
        goto LABEL_197;
    }
    else
    {
      if (v92 == 3)
      {
        v123 = *(float *)&v249;
        if (!v252)
          v123 = (float)(int)v249;
        v96 = (float)((float)((float)((float)v179 * 0.015625) * v123) / 100.0) * 64.0;
        if (v96 < 2147483650.0 && v96 > -2147483650.0)
          goto LABEL_196;
        if (v96 < 2147483650.0)
          goto LABEL_542;
        goto LABEL_553;
      }
      if (v92 != 1)
        goto LABEL_197;
    }
    v97 = v179;
    goto LABEL_197;
  }
  v95 = *(float *)&v249;
  if (!v252)
    v95 = (float)(int)v249;
  v96 = v95 * 64.0;
  if (v96 >= 2147483650.0 || v96 <= -2147483650.0)
    goto LABEL_541;
LABEL_196:
  v97 = (int)v96;
LABEL_197:
  *v77 = v97;
  if (v246 == 4)
  {
    v98 = *(float *)&v245;
    if (!v248)
      v98 = (float)(int)v245;
    v99 = v98 * 64.0;
    if (v99 >= 2147483650.0 || v99 <= -2147483650.0)
    {
LABEL_545:
      if (v99 >= 2147483650.0)
      {
LABEL_554:
        v100 = 0x7FFFFFFF;
      }
      else
      {
LABEL_546:
        if (v99 <= -2147483650.0)
          v100 = 0x80000000;
        else
          v100 = (int)v99;
      }
      v85 = v181;
LABEL_323:
      v94 = v183;
      v93 = v185;
    }
    else
    {
LABEL_202:
      v100 = (int)v99;
    }
  }
  else
  {
    v100 = 0;
    switch(v246)
    {
      case 0u:
      case 1u:
      case 9u:
        v100 = v179;
        break;
      case 3u:
        v119 = *(float *)&v245;
        if (!v248)
          v119 = (float)(int)v245;
        v99 = (float)((float)((float)((float)v179 * 0.015625) * v119) / 100.0) * 64.0;
        if (v99 < 2147483650.0 && v99 > -2147483650.0)
          goto LABEL_202;
        if (v99 >= 2147483650.0)
          goto LABEL_554;
        goto LABEL_546;
      case 0xBu:
        result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v245, (float)v179 * 0.015625);
        v99 = v141 * 64.0;
        if (v99 >= 2147483650.0 || v99 <= -2147483650.0)
          goto LABEL_545;
        v100 = (int)v99;
        goto LABEL_323;
      default:
        break;
    }
  }
  *v78 = v100;
  if (v258 == 4)
  {
    v101 = *(float *)&v257;
    if (!v260)
      v101 = (float)(int)v257;
    v102 = v101 * 64.0;
    if (v102 < 2147483650.0 && v102 > -2147483650.0)
    {
LABEL_208:
      v103 = (int)v102;
      goto LABEL_209;
    }
LABEL_549:
    if (v102 >= 2147483650.0)
    {
LABEL_555:
      v103 = 0x7FFFFFFF;
    }
    else
    {
LABEL_550:
      if (v102 <= -2147483650.0)
        v103 = 0x80000000;
      else
        v103 = (int)v102;
    }
    goto LABEL_408;
  }
  v103 = 0;
  switch(v258)
  {
    case 0:
    case 1:
    case 9:
      v103 = v85;
      break;
    case 3:
      v121 = *(float *)&v257;
      if (!v260)
        v121 = (float)(int)v257;
      v102 = (float)((float)((float)((float)v85 * 0.015625) * v121) / 100.0) * 64.0;
      if (v102 < 2147483650.0 && v102 > -2147483650.0)
        goto LABEL_208;
      if (v102 >= 2147483650.0)
        goto LABEL_555;
      goto LABEL_550;
    case 11:
      result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v257, (float)v85 * 0.015625);
      v102 = v142 * 64.0;
      if (v102 >= 2147483650.0 || v102 <= -2147483650.0)
        goto LABEL_549;
      v103 = (int)v102;
      goto LABEL_327;
    default:
      break;
  }
LABEL_209:
  v104 = (uint64_t (**)())*v77;
  if ((*((_BYTE *)v187 + 45) & 0x20) == 0)
    goto LABEL_222;
  v105 = *((_DWORD *)v187 + 4) + 1;
  *((_DWORD *)v187 + 4) = v105;
  if ((*((_BYTE *)v187 + 123) & 4) != 0)
  {
    v108 = WebCore::LayoutIntegration::LineLayout::containing(v187, v91);
    if (v108)
    {
      WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(v108, v187, v273);
    }
    else
    {
      v273[0] = *((_QWORD *)v187 + 19);
      v274 = 1;
    }
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v273);
    if ((result & 1) != 0)
    {
      v106 = 0;
      v107 = 0.0;
LABEL_216:
      if (v274 != -1)
        result = ((uint64_t (*)(_QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v274])(v278, v273);
      v105 = *((_DWORD *)v187 + 4);
      v94 = v183;
      v93 = v185;
      goto LABEL_219;
    }
    v177 = (int)v104;
    LOBYTE(v268) = 0;
    v272 = -1;
    v125 = v274;
    if (v274 != -1)
    {
      ((void (*)(_QWORD *, unsigned int *, unint64_t *))*(&off_1E3421B10 + v274))(v278, &v268, v273);
      v272 = v125;
      v104 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
      do
      {
        v278[0] = v280;
        if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E3421B60[v125])(v278, &v268) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19414EEC0);
        }
        LOBYTE(v278[0]) = 0;
        LODWORD(v278[2]) = -1;
        v126 = v272;
        if (v272 == -1)
          break;
        ((void (*)(_QWORD *, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v272])(v280, v278, &v268);
        LODWORD(v278[2]) = v126;
        v280[0] = &v279;
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v126])(v280, v278);
        LOBYTE(v275) = 0;
        v277[1] = -1;
        v127 = LODWORD(v278[2]);
        if (LODWORD(v278[2]) == -1)
          break;
        ((void (*)(_QWORD *, int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[LODWORD(v278[2])])(v280, &v275, v278);
        v277[1] = v127;
        if (LODWORD(v278[2]) != -1)
        {
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[LODWORD(v278[2])])(v280, v278);
          v127 = v277[1];
          if (v277[1] == -1)
            break;
        }
        v278[0] = v280;
        v128 = ((uint64_t (*)(_QWORD *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v127])(v278, &v275);
        if (v277[1] != -1)
          ((void (*)(_QWORD *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v277[1]])(v278, &v275);
        if ((v128 & 1) != 0)
          goto LABEL_290;
        if (v272 == -1)
          break;
        v278[0] = &v275;
        ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v272])(v278, &v268);
        v125 = v272;
      }
      while (v272 != -1);
    }
    do
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_290:
      ;
    }
    while (v274 == -1);
    v278[0] = &v275;
    result = ((uint64_t (*)(_QWORD *, unint64_t *))v104[v274])(v278, v273);
    v85 = v181;
    if ((_DWORD)result)
    {
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v268);
      if ((result & 1) != 0)
        goto LABEL_307;
    }
    v130 = v272 == v274 && v272 != -1;
    if (v274 == -1 || !v130)
    {
      if (v274 == -1)
        v131 = v272 == -1;
      else
        v131 = v130;
      if (!v131)
        goto LABEL_308;
    }
    else
    {
      v278[0] = &v275;
      result = ((uint64_t (*)(_QWORD *, unint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v274])(v278, v273, &v268);
      if ((result & 1) == 0)
      {
LABEL_308:
        v132 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v268);
        WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection((WebCore::InlineIterator::Box *)v132);
        v134 = 1016;
        if (((*((_DWORD *)v187 + 31) >> 13) & 6u) - 2 < 4)
          v134 = 1000;
        v135 = v133 + (float)((float)(*(int (**)(void))(*(_QWORD *)v187 + v134))() * 0.015625);
        v136 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)v273);
        result = WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection((WebCore::InlineIterator::Box *)v136);
        v138 = v135 - v137;
        v139 = v103 + v177;
        if (__OFADD__(v103, v177))
          v139 = (v103 >> 31) + 0x7FFFFFFF;
        v107 = v138 + (float)((float)v139 * 0.015625);
        v106 = 0x100000000;
        goto LABEL_313;
      }
    }
LABEL_307:
    v106 = 0;
    v107 = 0.0;
LABEL_313:
    if (v272 != -1)
      result = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v272])(v278, &v268);
    goto LABEL_216;
  }
  v106 = 0;
  v107 = 0.0;
LABEL_219:
  if (!v105)
  {
    __break(0xC471u);
    JUMPOUT(0x19414F1E4);
  }
  *((_DWORD *)v187 + 4) = v105 - 1;
  if ((v106 & 0x100000000) != 0)
  {
    v153 = v107 * 64.0;
    if (v153 >= 2147483650.0 || v153 <= -2147483650.0)
    {
      if (v153 >= 2147483650.0)
      {
        v117 = 0x7FFFFFFF;
        goto LABEL_237;
      }
      if (v153 <= -2147483650.0)
      {
        v117 = 0x80000000;
        goto LABEL_237;
      }
    }
    v117 = (int)v153;
    goto LABEL_237;
  }
  LODWORD(v104) = *v77;
LABEL_222:
  v109 = v103 + (_DWORD)v104;
  if (__OFADD__(v103, (_DWORD)v104))
    v109 = (v103 >> 31) + 0x7FFFFFFF;
  v110 = 0;
  if (v93 && v94)
  {
    v111 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v112 = v111 + 12;
    else
      v112 = v111 + 4;
    v110 = *(_BYTE *)(v112 + 4) != 0;
  }
  if (!(v94 | v93)
    || ((((*((_BYTE *)v187 + 21) & 0x10) == 0) ^ ((*(_DWORD *)(a1 + 20) & 0x1000u) >> 12)) & 1) != 0
    || v110
    || (v165 = (unsigned __int16)*((_DWORD *)v187 + 31) >> 13, v165 > 5)
    || ((1 << v165) & 0x2A) == 0)
  {
    v113 = *(_QWORD *)v187;
    v114 = (*(_DWORD *)(a1 + 20) & 0x1000) == 0;
    v115 = 1000;
    v116 = 1016;
  }
  else
  {
    v166 = v85 - *a2;
    if (__OFSUB__(v85, *a2))
      v166 = (v181 >> 31) + 0x7FFFFFFF;
    v88 = __OFSUB__(v166, v109);
    v109 = v166 - v109;
    if (v88)
      v109 = (v166 >> 31) + 0x7FFFFFFF;
    v113 = *(_QWORD *)v187;
    v114 = (*(_DWORD *)(a1 + 20) & 0x1000) == 0;
    v115 = 1008;
    v116 = 1024;
  }
  if (v114)
    v115 = v116;
  result = (*(uint64_t (**)(void))(v113 + v115))();
  v117 = v109 + result;
  if (__OFADD__(v109, (_DWORD)result))
    v117 = (v109 >> 31) + 0x7FFFFFFF;
LABEL_237:
  a2[1] = v117;
  if (v246 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v245);
  }
  if (v250 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v249);
  }
  if (v254 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v253);
  }
  if (v258 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v257);
  }
  if (v262 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v261);
  }
  if (v266 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v118 = (void *)v265;
    return (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v118);
  }
  return result;
}

unint64_t WebCore::computeInlineStaticDistance(unint64_t result, unint64_t a2, uint64_t a3, WebCore::RenderObject *a4, int a5, WebCore::RenderFragmentContainer *a6)
{
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  double v18;
  unsigned int v19;
  char v20;
  unint64_t v21;
  int v22;
  int *v23;
  int *v24;
  int *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  WebCore::RenderFragmentContainer *v34;
  _DWORD *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  double v44;
  _DWORD *v45;
  int *v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  int *v50;
  int v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  int v56;
  unsigned int *v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int *v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;

  if (!*(_BYTE *)(result + 4) && !*(_BYTE *)(a2 + 4))
  {
    v11 = result;
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
    v13 = *(_DWORD *)(v12 + 120);
    if (*(_BYTE *)(v12 + 46) == 12)
    {
      result = (unint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a3);
      if (v12 == result)
      {
        v20 = 0;
        if ((v13 & 0x4000000) == 0)
        {
          *(_BYTE *)(v11 + 4) = 4;
          *(_DWORD *)v11 = 0;
LABEL_16:
          *(_BYTE *)(v11 + 6) = v20;
          return result;
        }
        *(_BYTE *)(a2 + 4) = 4;
        *(_DWORD *)a2 = 0;
LABEL_69:
        v11 = a2;
        goto LABEL_16;
      }
    }
    if ((v13 & 0x4000000) != 0)
    {
      v14 = *(_DWORD *)(v12 + 20) & 0x1000;
      if (((*(_DWORD *)(a3 + 20) & 0x1000) == 0) == (v14 == 0))
      {
        v37 = *(_DWORD *)(*(_QWORD *)(a3 + 144) + 148);
        v27 = __OFADD__(v37, a5);
        v38 = v37 + a5;
        v39 = (v37 >> 31) + 0x7FFFFFFF;
        if (v27)
          v40 = v39;
        else
          v40 = v38;
        v41 = 1016;
        if (((*((_DWORD *)a4 + 31) >> 13) & 6u) - 2 < 4)
          v41 = 1000;
        v42 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a4 + v41))(a4);
        if (__OFADD__(v40, v42))
          v43 = (v40 >> 31) + 0x7FFFFFFF;
        else
          v43 = v40 + v42;
        result = WebCore::RenderObject::enclosingBox(v12);
        v45 = (_DWORD *)result;
        if ((WebCore::RenderObject *)result == a4
          || (result = WebCore::RenderObject::isDescendantOf(a4, (const WebCore::RenderObject *)result), !(_DWORD)result))
        {
          v46 = v45 + 41;
          if (((v45[31] >> 13) & 6u) - 2 >= 4)
            v46 = v45 + 40;
          v47 = *v46;
          v27 = __OFSUB__(v43, v47);
          v48 = v43 - v47;
          if (v27)
            v43 = (v43 >> 31) + 0x7FFFFFFF;
          else
            v43 = v48;
          v49 = (unint64_t)v45;
          do
          {
            if ((*(_BYTE *)(v49 + 45) & 4) != 0)
            {
              ++*(_DWORD *)(v49 + 16);
              if ((WebCore::RenderObject *)v49 != a4)
              {
                v50 = (int *)(v49 + 156);
                if (((*(_DWORD *)(v49 + 124) >> 13) & 6u) - 2 >= 4)
                  v50 = (int *)(v49 + 152);
                v51 = *v50;
                v27 = __OFSUB__(v43, v51);
                v52 = v43 - v51;
                if (v27)
                  v43 = (v43 >> 31) + 0x7FFFFFFF;
                else
                  v43 = v52;
                v53 = *(_DWORD *)(v49 + 20);
                if ((v53 & 0x800000) != 0)
                {
                  result = WebCore::RenderBoxModelObject::offsetForInFlowPosition((WebCore::RenderBoxModelObject *)v49, v44);
                  v54 = HIDWORD(result);
                  if ((v53 & 0x1000) == 0)
                    LODWORD(v54) = result;
                  v27 = __OFSUB__(v43, (_DWORD)v54);
                  v55 = v43 - v54;
                  if (v27)
                    v43 = (v43 >> 31) + 0x7FFFFFFF;
                  else
                    v43 = v55;
                }
              }
              if (a6)
              {
                v56 = *(_DWORD *)(v49 + 16);
                if ((*(_BYTE *)(v49 + 45) & 0x40) != 0)
                {
                  *(_DWORD *)(v49 + 16) = v56 + 1;
                  result = (unint64_t)WebCore::RenderBox::clampToStartAndEndFragments((WebCore::RenderBox *)v49, a6);
                  a6 = (WebCore::RenderFragmentContainer *)result;
                  if (result)
                  {
                    result = WebCore::RenderFragmentContainer::renderBoxFragmentInfo((WebCore::RenderFragmentContainer *)result, (const WebCore::RenderBox *)v49);
                    if (result)
                    {
                      if ((WebCore::RenderObject *)v49 != a4)
                      {
                        if (((*(_DWORD *)(v49 + 124) >> 13) & 6u) - 2 < 4)
                          v57 = (unsigned int *)(v49 + 164);
                        else
                          v57 = (unsigned int *)(v49 + 160);
                        v58 = *(_DWORD *)(result + 4);
                        v27 = __OFADD__(*(_DWORD *)result, v58);
                        v59 = *(_DWORD *)result + v58;
                        if (v27)
                          v59 = (*(_DWORD *)result >> 31) + 0x7FFFFFFF;
                        v60 = *v57;
                        v61 = *v57 - v59;
                        if (__OFSUB__(v60, v59))
                          v61 = (v60 >> 31) + 0x7FFFFFFF;
                        v27 = __OFSUB__(v43, v61);
                        v62 = v43 - v61;
                        if (v27)
                          v43 = (v43 >> 31) + 0x7FFFFFFF;
                        else
                          v43 = v62;
                      }
                      if ((_DWORD *)v49 == v45)
                      {
                        if (((v45[31] >> 13) & 6u) - 2 >= 4)
                          v64 = v45 + 40;
                        else
                          v64 = v45 + 41;
                        v65 = *v64;
                        v66 = *(_DWORD *)(result + 4);
                        v27 = __OFSUB__(v65, v66);
                        v67 = v65 - v66;
                        v68 = (v65 >> 31) + 0x7FFFFFFF;
                        if (!v27)
                          v68 = v67;
                        v27 = __OFADD__(v43, v68);
                        v69 = v43 + v68;
                        if (v27)
                          v43 = (v43 >> 31) + 0x7FFFFFFF;
                        else
                          v43 = v69;
                      }
                    }
                  }
                  v63 = *(_DWORD *)(v49 + 16);
                  if (!v63)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19415067CLL);
                  }
                  v56 = v63 - 1;
                  *(_DWORD *)(v49 + 16) = v56;
                }
              }
              else
              {
                v56 = *(_DWORD *)(v49 + 16);
              }
              if (!v56)
              {
                __break(0xC471u);
                JUMPOUT(0x19415065CLL);
              }
              *(_DWORD *)(v49 + 16) = v56 - 1;
              if ((WebCore::RenderObject *)v49 == a4)
                break;
            }
            result = WebCore::RenderObject::container((WebCore::RenderObject *)v49);
            v49 = result;
          }
          while (result);
        }
        *(_BYTE *)(a2 + 4) = 4;
        *(float *)a2 = (float)(int)v43 * 0.015625;
        v20 = 1;
        goto LABEL_69;
      }
    }
    else
    {
      v14 = *(_DWORD *)(v12 + 20) & 0x1000;
    }
    v15 = *(_QWORD *)(a3 + 144);
    if (((*(_DWORD *)(a3 + 20) & 0x1000) == 0) == (v14 == 0))
    {
      v16 = *(_DWORD *)(v15 + 148);
      v17 = 1016;
      if (((*((_DWORD *)a4 + 31) >> 13) & 6u) - 2 < 4)
        v17 = 1000;
      result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a4 + v17))(a4);
    }
    else
    {
      v16 = *(_DWORD *)(v15 + 152);
      result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a4 + 1048))(a4);
    }
    if (__OFSUB__(v16, (_DWORD)result))
      v19 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v19 = v16 - result;
    if ((WebCore::RenderObject *)v12 != a4)
    {
      v21 = v12;
      do
      {
        if ((*(_BYTE *)(v21 + 45) & 4) != 0)
        {
          v22 = *(_DWORD *)(v21 + 20);
          ++*(_DWORD *)(v21 + 16);
          v23 = (int *)(v21 + 156);
          if (((*(_DWORD *)(v21 + 124) >> 13) & 6u) - 2 >= 4)
            v24 = (int *)(v21 + 152);
          else
            v24 = (int *)(v21 + 156);
          if (((*(_DWORD *)(v21 + 124) >> 13) & 6u) - 2 < 4)
            v23 = (int *)(v21 + 152);
          if (((*(_BYTE *)(a3 + 21) & 0x10) == 0) == ((*(_BYTE *)(v12 + 21) & 0x10) == 0))
            v25 = v24;
          else
            v25 = v23;
          v26 = *v25;
          v27 = __OFADD__(v19, v26);
          v28 = v19 + v26;
          if (v27)
            v19 = (v19 >> 31) + 0x7FFFFFFF;
          else
            v19 = v28;
          if ((v22 & 0x800000) != 0)
          {
            v30 = v22;
            v31 = WebCore::RenderBoxModelObject::offsetForInFlowPosition((WebCore::RenderBoxModelObject *)v21, v18);
            v32 = HIDWORD(v31);
            if ((v30 & 0x1000) == 0)
              LODWORD(v32) = v31;
            v27 = __OFADD__(v19, (_DWORD)v32);
            v33 = v19 + v32;
            if (v27)
              v19 = (v19 >> 31) + 0x7FFFFFFF;
            else
              v19 = v33;
          }
          if (a6)
          {
            v29 = *(_DWORD *)(v21 + 16);
            if ((*(_BYTE *)(v21 + 45) & 0x40) != 0)
            {
              *(_DWORD *)(v21 + 16) = v29 + 1;
              v34 = WebCore::RenderBox::clampToStartAndEndFragments((WebCore::RenderBox *)v21, a6);
              a6 = v34;
              if (v34)
              {
                v35 = (_DWORD *)WebCore::RenderFragmentContainer::renderBoxFragmentInfo(v34, (const WebCore::RenderBox *)v21);
                if (v35)
                {
                  if (__OFADD__(v19, *v35))
                    v19 = (v19 >> 31) + 0x7FFFFFFF;
                  else
                    v19 += *v35;
                }
              }
              v36 = *(_DWORD *)(v21 + 16);
              if (!v36)
              {
                __break(0xC471u);
                JUMPOUT(0x19415069CLL);
              }
              v29 = v36 - 1;
              *(_DWORD *)(v21 + 16) = v29;
            }
          }
          else
          {
            v29 = *(_DWORD *)(v21 + 16);
          }
          if (!v29)
          {
            __break(0xC471u);
            JUMPOUT(0x194150354);
          }
          *(_DWORD *)(v21 + 16) = v29 - 1;
        }
        result = WebCore::RenderObject::container((WebCore::RenderObject *)v21);
        if (!result)
          break;
        v21 = result;
      }
      while ((WebCore::RenderObject *)result != a4);
    }
    *(_BYTE *)(v11 + 4) = 4;
    *(float *)v11 = (float)(int)v19 * 0.015625;
    v20 = 1;
    goto LABEL_16;
  }
  return result;
}

BOOL WebCore::RenderIFrame::isInlineBlockOrInlineTable(WebCore::RenderIFrame *this)
{
  return (*((_BYTE *)this + 20) & 1) == 0;
}

WTF::StringImpl *WebCore::ResourceRequestBase::setHTTPHeaderField(WebCore::ResourceRequest *this, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *result;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = WebCore::HTTPHeaderMap::set((WebCore::ResourceRequest *)((char *)this + 96), a2, a3);
  *((_BYTE *)this + 184) &= ~2u;
  return result;
}

WTF::StringImpl *WebCore::ResourceRequestBase::setHTTPUserAgent(WebCore::ResourceRequestBase *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = WebCore::HTTPHeaderMap::set((WebCore::ResourceRequestBase *)((char *)this + 96), (WTF::StringImpl *)0x56, a2);
  *((_BYTE *)this + 184) &= ~2u;
  return result;
}

void WebCore::DocumentThreadableLoader::makeCrossOriginAccessRequest(uint64_t a1, uint64_t a2)
{
  const WebCore::HTTPHeaderMap *v4;
  _BOOL4 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  int v22;
  int canSkipPreflight;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _DWORD *v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WebCore::FormData *v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  const void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  void *v81;
  void *v82;
  WTF *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WebCore *v90;
  const WTF::String *v91;
  const WebCore::HTTPHeaderMap *v92;
  WTF::StringImpl *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  char v107;
  __int128 v108;
  _DWORD *v109;
  uint64_t v110;
  char v111;
  const void *v112;
  char v113;

  v5 = WebCore::IOSApplication::isMoviStarPlus((WebCore::IOSApplication *)a1)
    && (WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0
    && (*(_BYTE *)(a1 + 180) & 0x20) == 0;
  v6 = *(_DWORD *)(a1 + 178) & 0x300000;
  if (!v6)
  {
    v7 = *(unsigned __int8 *)(a2 + 184);
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      LOBYTE(v7) = *(_BYTE *)(a2 + 184) | 1;
      *(_BYTE *)(a2 + 184) = v7;
    }
    if ((v7 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    if ((WebCore::isSimpleCrossOriginAccessRequest((WebCore *)(a2 + 88), (const WTF::String *)(a2 + 96), v4) & 1) != 0)
      goto LABEL_54;
    v6 = *(_DWORD *)(a1 + 178) & 0x300000;
  }
  if (v6 == 0x200000)
    goto LABEL_54;
  v8 = WebCore::s_platformStrategies;
  v9 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v9)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v8 + 8) = v9;
  }
  if (((v5 | (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9) ^ 1) & 1) == 0)
  {
LABEL_54:
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    if (WebCore::DocumentThreadableLoader::checkURLSchemeAsCORSEnabled((WebCore::DocumentThreadableLoader *)a1, (const WTF::URL *)a2))
    {
      v44 = *(_QWORD *)(a1 + 232);
      if (!v44)
      {
        v45 = *(_QWORD *)(a1 + 48);
        if (v45)
          v45 = *(_QWORD *)(v45 + 8);
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v45 + 192), v43);
        v44 = v46;
      }
      do
        v47 = __ldaxr((unsigned int *)v44);
      while (__stlxr(v47 + 1, (unsigned int *)v44));
      WebCore::updateRequestForAccessControl((WebCore::ResourceRequest *)a2, v44, (*(unsigned __int8 *)(a1 + 178) >> 4) & 3);
      do
      {
        v49 = __ldaxr((unsigned int *)v44);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, (unsigned int *)v44));
      if (!v50)
      {
        atomic_store(1u, (unsigned int *)v44);
        v84 = *(WTF::StringImpl **)(v44 + 48);
        *(_QWORD *)(v44 + 48) = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
            WTF::StringImpl::destroy(v84, v48);
          else
            *(_DWORD *)v84 -= 2;
        }
        v85 = *(WTF::StringImpl **)(v44 + 40);
        *(_QWORD *)(v44 + 40) = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, v48);
          else
            *(_DWORD *)v85 -= 2;
        }
        v86 = *(unsigned int *)(v44 + 32);
        if ((_DWORD)v86 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v86])(&v93, v44 + 8);
        *(_DWORD *)(v44 + 32) = -1;
        WTF::fastFree((WTF *)v44, v48);
      }
      WebCore::DocumentThreadableLoader::loadRequest(a1, (WebCore::ResourceRequest *)a2, (const WTF::StringImpl *)1);
    }
    return;
  }
  if ((*(_BYTE *)(a1 + 180) & 3) != 0
    || !*(_BYTE *)(a1 + 250)
    || !*(_QWORD *)(a1 + 112) && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 392))
  {
    if (!v5)
    {
      if ((*(_BYTE *)(a2 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      if (!WebCore::DocumentThreadableLoader::checkURLSchemeAsCORSEnabled((WebCore::DocumentThreadableLoader *)a1, (const WTF::URL *)a2))return;
    }
    *(_BYTE *)(a1 + 249) = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v12 = *(_QWORD *)(v11 + 528);
    if (!v12)
      goto LABEL_83;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      goto LABEL_83;
    v14 = *(_QWORD *)(v13 + 24);
    if (!v14)
      goto LABEL_83;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      goto LABEL_83;
    ++*(_DWORD *)v15;
    {
      WebCore::CrossOriginPreflightResultCache::singleton(void)::cache = 0;
    }
    v16 = *(WTF::StringImpl **)(v15 + 1008);
    v17 = *(_QWORD *)(a1 + 232);
    if (!v17)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), v10);
      v17 = v18;
    }
    v19 = *(unsigned int *)(v17 + 32);
    if ((_DWORD)v19 == 1)
      goto LABEL_135;
    if ((_DWORD)v19 == -1)
    {
      v90 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::isSimpleCrossOriginAccessRequest(v90, v91, v92);
      return;
    }
    v93 = (WTF::StringImpl *)&v113;
    v20 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v19])(&v93, v17 + 8);
    if (MEMORY[0x19AEA53F4](*v20, "file", 4) && *(_BYTE *)(v17 + 59))
LABEL_135:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    else
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v17 + 8), &v93);
    v21 = *(_BYTE *)(a2 + 184);
    if ((v21 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      v21 = *(_BYTE *)(a2 + 184) | 1;
      *(_BYTE *)(a2 + 184) = v21;
    }
    v22 = (*(unsigned __int8 *)(a1 + 178) >> 4) & 3;
    if ((v21 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      v21 = *(_BYTE *)(a2 + 184) | 1;
      *(_BYTE *)(a2 + 184) = v21;
    }
    if ((v21 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    canSkipPreflight = WebCore::CrossOriginPreflightResultCache::canSkipPreflight((WTF::MonotonicTime *)&WebCore::CrossOriginPreflightResultCache::singleton(void)::cache, v16, &v93, (WTF::StringImpl **)a2, v22, (WTF::StringImpl **)(a2 + 88), a2 + 96);
    v24 = v93;
    v93 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v10);
        if (canSkipPreflight)
          goto LABEL_43;
        goto LABEL_97;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (canSkipPreflight)
    {
LABEL_43:
      v25 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      v93 = v25;
      v94 = *(_OWORD *)(a2 + 8);
      v95 = *(_OWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 8) = v94 & 0xFFFFFFFE;
      v26 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      v96 = v26;
      v27 = *(_OWORD *)(a2 + 64);
      v97 = *(_OWORD *)(a2 + 48);
      v98 = v27;
      *(_DWORD *)(a2 + 48) = v97 & 0xFFFFFFFE;
      v99 = *(_QWORD *)(a2 + 80);
      v28 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + 88) = 0u;
      v100 = v28;
      *(_QWORD *)&v28 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      v101 = v28;
      v29 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = 0;
      v102 = v29;
      *(_QWORD *)&v28 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 120) = 0;
      v103 = v28;
      v30 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a2 + 128) = 0;
      v104 = v30;
      *(_QWORD *)&v28 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 136) = 0;
      v105 = v28;
      LODWORD(v30) = *(_DWORD *)(a2 + 144);
      v107 = *(_BYTE *)(a2 + 148);
      v106 = v30;
      v31 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 152) = 0u;
      v108 = v31;
      v111 = *(_BYTE *)(a2 + 184);
      v32 = *(_DWORD **)(a2 + 168);
      v33 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a2 + 168) = 0;
      v109 = v32;
      v110 = v33;
      v34 = *(const void **)(a2 + 192);
      *(_QWORD *)(a2 + 192) = 0;
      v112 = v34;
      v35 = *(_QWORD *)(a1 + 232);
      if (!v35)
      {
        v36 = *(_QWORD *)(a1 + 48);
        if (v36)
          v36 = *(_QWORD *)(v36 + 8);
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v36 + 192), v10);
        v35 = v37;
      }
      do
        v38 = __ldaxr((unsigned int *)v35);
      while (__stlxr(v38 + 1, (unsigned int *)v35));
      WebCore::updateRequestForAccessControl((WebCore::ResourceRequest *)&v93, v35, (*(unsigned __int8 *)(a1 + 178) >> 4) & 3);
      do
      {
        v40 = __ldaxr((unsigned int *)v35);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, (unsigned int *)v35));
      if (!v41)
      {
        atomic_store(1u, (unsigned int *)v35);
        v87 = *(WTF::StringImpl **)(v35 + 48);
        *(_QWORD *)(v35 + 48) = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v39);
          else
            *(_DWORD *)v87 -= 2;
        }
        v88 = *(WTF::StringImpl **)(v35 + 40);
        *(_QWORD *)(v35 + 40) = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 2)
            WTF::StringImpl::destroy(v88, v39);
          else
            *(_DWORD *)v88 -= 2;
        }
        v89 = *(unsigned int *)(v35 + 32);
        if ((_DWORD)v89 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v89])(&v113, v35 + 8);
        *(_DWORD *)(v35 + 32) = -1;
        WTF::fastFree((WTF *)v35, v39);
      }
      if (*(_BYTE *)(a1 + 528))
      {
        WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker((WebCore::CrossOriginPreflightChecker *)(a1 + 296), v39);
        *(_BYTE *)(a1 + 528) = 0;
      }
      WebCore::DocumentThreadableLoader::loadRequest(a1, (WebCore::ResourceRequest *)&v93, 0);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v93, v42);
      goto LABEL_105;
    }
LABEL_97:
    if (!*(_BYTE *)(a1 + 250))
    {
      WebCore::CrossOriginPreflightChecker::doPreflight(a1, a2);
      goto LABEL_105;
    }
    v62 = 0;
LABEL_99:
    if (*(_BYTE *)(a1 + 528))
    {
      WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker((WebCore::CrossOriginPreflightChecker *)(a1 + 296), v10);
      *(_BYTE *)(a1 + 528) = 0;
    }
    *(_QWORD *)(a1 + 296) = &off_1E33F3390;
    *(_QWORD *)(a1 + 304) = 0;
    v74 = *(_QWORD *)(a1 + 24);
    if (!v74)
    {
      v74 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v74 = 1;
      *(_QWORD *)(v74 + 8) = a1 + 16;
      v83 = *(WTF **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v74;
      if (v83)
      {
        if (*(_DWORD *)v83 == 1)
        {
          WTF::fastFree(v83, v82);
          v74 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v83;
        }
      }
    }
    ++*(_DWORD *)v74;
    *(_QWORD *)(a1 + 312) = v74;
    *(_QWORD *)(a1 + 320) = 0;
    WebCore::ResourceRequestBase::RequestData::RequestData(a1 + 328, (uint64_t *)a2);
    v75 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a1 + 480) = v75;
    v76 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a1 + 488) = v76;
    v77 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a1 + 496) = v77;
    v78 = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 504) = v78;
    v79 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a1 + 520) = v79;
    *(_BYTE *)(a1 + 528) = 1;
    WebCore::CrossOriginPreflightChecker::startPreflight((WebCore::CrossOriginPreflightChecker *)(a1 + 296));
    if ((v62 & 1) != 0)
      return;
LABEL_105:
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::Page::~Page(v15);
      WTF::fastFree(v80, v81);
    }
    else
    {
      --*(_DWORD *)v15;
    }
    return;
  }
  if (*(_BYTE *)(a1 + 824))
  {
    WebCore::ResourceRequestBase::RequestData::operator=(a1 + 624, (uint64_t *)a2);
    v52 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    v53 = *(WTF::StringImpl **)(a1 + 776);
    *(_QWORD *)(a1 + 776) = v52;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v51);
      else
        *(_DWORD *)v53 -= 2;
    }
    v54 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    v55 = *(WTF::StringImpl **)(a1 + 784);
    *(_QWORD *)(a1 + 784) = v54;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v51);
      else
        *(_DWORD *)v55 -= 2;
    }
    v56 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    v57 = *(WebCore::FormData **)(a1 + 792);
    *(_QWORD *)(a1 + 792) = v56;
    if (v57)
      WTF::RefCounted<WebCore::FormData>::deref(v57, v51);
    v58 = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 808) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 800) = v58;
    v59 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    v60 = *(const void **)(a1 + 816);
    *(_QWORD *)(a1 + 816) = v59;
    if (v60)
      CFRelease(v60);
    v61 = *(unsigned __int8 *)(a1 + 824);
    *(_DWORD *)(a1 + 178) = *(_DWORD *)(a1 + 178) & 0xFFFCFFFF | 0x20000;
    if (!v61)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_83:
      if (!*(_BYTE *)(a1 + 250))
      {
        WebCore::CrossOriginPreflightChecker::doPreflight(a1, a2);
        return;
      }
      v15 = 0;
      v62 = 1;
      goto LABEL_99;
    }
  }
  else
  {
    WebCore::ResourceRequestBase::RequestData::RequestData(a1 + 624, (uint64_t *)a2);
    v63 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a1 + 776) = v63;
    v64 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a1 + 784) = v64;
    v65 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a1 + 792) = v65;
    v66 = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 808) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 800) = v66;
    v67 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a1 + 816) = v67;
    *(_BYTE *)(a1 + 824) = 1;
    *(_DWORD *)(a1 + 178) = *(_DWORD *)(a1 + 178) & 0xFFFCFFFF | 0x20000;
  }
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v93, (const WebCore::ResourceRequestBase::RequestData *)(a1 + 624));
  v68 = *(_DWORD **)(a1 + 776);
  if (v68)
    *v68 += 2;
  *(_QWORD *)&v108 = v68;
  v69 = *(_DWORD **)(a1 + 784);
  if (v69)
    *v69 += 2;
  *((_QWORD *)&v108 + 1) = v69;
  v70 = *(_DWORD **)(a1 + 792);
  if (v70)
    ++*v70;
  v71 = *(_QWORD *)(a1 + 800);
  v109 = v70;
  v110 = v71;
  v111 = *(_BYTE *)(a1 + 808);
  v72 = *(const void **)(a1 + 816);
  v112 = v72;
  if (v72)
    CFRetain(v72);
  WebCore::DocumentThreadableLoader::loadRequest(a1, (WebCore::ResourceRequest *)&v93, 0);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v93, v73);
}

uint64_t WebCore::isSimpleCrossOriginAccessRequest(WebCore *this, const WTF::String *a2, const WebCore::HTTPHeaderMap *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _QWORD v12[3];
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned __int16 v19;
  char v20;
  WTF::StringImpl *v21;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "GET", 3) & 1) == 0
    && (MEMORY[0x19AEA53F4](*(_QWORD *)this, "HEAD", 4) & 1) == 0
    && !MEMORY[0x19AEA53F4](*(_QWORD *)this, "POST", 4))
  {
    return 0;
  }
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v15, (uint64_t)a2, *(WTF::StringImpl **)a2, *((_QWORD *)a2 + 2));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v12, (uint64_t)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 16 * *((unsigned int *)a2 + 3)), *((_QWORD *)a2 + 2) + 16 * *((unsigned int *)a2 + 7));
  while (v16 != v12[1] || v17 != v12[2])
  {
    if (!v20 || !WebCore::isCrossOriginSafeRequestHeader(v19, &v21))
    {
      v6 = 0;
      goto LABEL_11;
    }
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)v15, v5);
  }
  v6 = 1;
LABEL_11:
  v7 = v14;
  v14 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v21;
  v21 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v6;
}

WTF::StringImpl *WebCore::updateRequestForAccessControl(WebCore::ResourceRequest *this, uint64_t a2, int a3)
{
  char v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WebCore::ResourceRequestBase *v12;
  char v13;
  WTF::StringImpl *v14;

  v6 = *((_BYTE *)this + 184);
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v6 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v6;
  }
  if (*((_DWORD *)this + 5) > *((_DWORD *)this + 3))
  {
    WTF::URL::removeCredentials(this);
    v6 = *((_BYTE *)this + 184) & 0xFD;
    *((_BYTE *)this + 184) = v6;
  }
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v6 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v6;
  }
  v7 = *((_BYTE *)this + 148);
  if ((v7 & 2) == 0)
    goto LABEL_10;
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v6 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v6;
    v7 = *((_BYTE *)this + 148);
    if ((a3 == 1) != ((v7 & 2) == 0))
      goto LABEL_10;
LABEL_22:
    *((_BYTE *)this + 148) = v7 & 0xFD | (2 * (a3 == 1));
    *((_BYTE *)this + 184) = v6 & 0xFD;
    goto LABEL_10;
  }
  if (a3 != 1)
    goto LABEL_22;
LABEL_10:
  v8 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v8 == 1)
    goto LABEL_24;
  if ((_DWORD)v8 == -1)
  {
    v12 = (WebCore::ResourceRequestBase *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::ResourceRequestBase::removeCredentials(v12);
  }
  v14 = (WTF::StringImpl *)&v13;
  v9 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v8])(&v14, a2 + 8);
  if (MEMORY[0x19AEA53F4](*v9, "file", 4) && *(_BYTE *)(a2 + 59))
LABEL_24:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(a2 + 8), &v14);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WebCore::ResourceRequest *)((char *)this + 96), (WTF::StringImpl *)0x35, &v14);
  *((_BYTE *)this + 184) &= ~2u;
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::URL *WebCore::ResourceRequestBase::removeCredentials(WTF::URL *this)
{
  WTF::URL *v1;

  v1 = this;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    this = (WTF::URL *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)v1 + 184) |= 1u;
  }
  if (*((_DWORD *)v1 + 5) > *((_DWORD *)v1 + 3))
  {
    this = (WTF::URL *)WTF::URL::removeCredentials(v1);
    *((_BYTE *)v1 + 184) &= ~2u;
  }
  return this;
}

uint64_t WebCore::ResourceRequestBase::allowCookies(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return (*((unsigned __int8 *)this + 148) >> 1) & 1;
}

WTF::StringImpl *WebCore::ResourceRequestBase::setHTTPOrigin(WebCore::ResourceRequestBase *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = WebCore::HTTPHeaderMap::set((WebCore::ResourceRequestBase *)((char *)this + 96), (WTF::StringImpl *)0x35, a2);
  *((_BYTE *)this + 184) &= ~2u;
  return result;
}

BOOL WebCore::isCrossOriginSafeRequestHeader(int a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  _BOOL8 result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  int v27;
  char v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v40;
  unsigned int v42;
  unsigned int v43;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int64_t v58;
  int64_t v59;
  _BYTE v60[32];
  WTF::StringImpl *v61;
  char v62;

  v3 = *a2;
  if (*a2 && *((_DWORD *)v3 + 1) > 0x80u)
    return 0;
  result = 0;
  if (a1 > 19)
  {
    if (a1 != 20)
    {
      if (a1 != 26)
      {
        if (a1 != 59)
          return result;
        v59 = 0;
        if (v3)
        {
          v5 = *((_QWORD *)v3 + 1);
          v6 = *((unsigned int *)v3 + 1) | ((unint64_t)((*((_DWORD *)v3 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v5 = 0;
          v6 = 0x100000000;
        }
        v7 = WebCore::parseRange(v5, v6, 0, &v59, &v58);
        result = 0;
        if (!v7 || v59 == -1)
          return result;
        return 1;
      }
      if (v3)
      {
        v17 = *((unsigned int *)v3 + 1);
        if ((_DWORD)v17)
        {
          v18 = (unsigned __int16 *)*((_QWORD *)v3 + 1);
          if ((*((_BYTE *)v3 + 16) & 4) != 0)
          {
            while (1)
            {
              v20 = *(unsigned __int8 *)v18;
              v18 = (unsigned __int16 *)((char *)v18 + 1);
              v19 = v20;
              if (v20 != 9 && v19 < 0x20)
                break;
              result = 0;
              if (v19 - 34 <= 0x3B && ((1 << (v19 - 34)) & 0xE000000750000C1) != 0)
                return result;
              v23 = v19 - 123;
              if (v23 <= 4 && ((1 << v23) & 0x15) != 0)
                return result;
              if (!--v17)
                goto LABEL_45;
            }
          }
          else
          {
            while (1)
            {
              v43 = *v18++;
              v42 = v43;
              if (v43 != 9 && v42 < 0x20)
                break;
              result = 0;
              if (v42 - 34 <= 0x3B && ((1 << (v42 - 34)) & 0xE000000750000C1) != 0)
                return result;
              v46 = v42 - 123;
              if (v46 <= 4 && ((1 << v46) & 0x15) != 0)
                return result;
              if (!--v17)
                goto LABEL_45;
            }
          }
          return 0;
        }
      }
LABEL_45:
      WebCore::ParsedContentType::create(a2, (WTF::StringImpl *)1, (uint64_t)v60);
      if (!v62)
        return 0;
      v25 = v61;
      if (!v61)
      {
        WebCore::ParsedContentType::~ParsedContentType((WebCore::ParsedContentType *)v60, v24);
        return 0;
      }
      v26 = *(_DWORD *)v61;
      v27 = *((_DWORD *)v61 + 1);
      *(_DWORD *)v61 += 2;
      switch(v27)
      {
        case 33:
          v52 = *((_QWORD *)v25 + 1);
          if ((*((_BYTE *)v25 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v52 & 0xDF) != 0x41
              || (*(_BYTE *)(v52 + 1) & 0xDF) != 0x50
              || (*(_BYTE *)(v52 + 2) & 0xDF) != 0x50
              || (*(_BYTE *)(v52 + 3) & 0xDF) != 0x4C
              || (*(_BYTE *)(v52 + 4) & 0xDF) != 0x49
              || (*(_BYTE *)(v52 + 5) & 0xDF) != 0x43
              || (*(_BYTE *)(v52 + 6) & 0xDF) != 0x41
              || (*(_BYTE *)(v52 + 7) & 0xDF) != 0x54
              || (*(_BYTE *)(v52 + 8) & 0xDF) != 0x49
              || (*(_BYTE *)(v52 + 9) & 0xDF) != 0x4F
              || (*(_BYTE *)(v52 + 10) & 0xDF) != 0x4E
              || (*(_BYTE *)(v52 + 11) & 0xDF) != 0xF
              || (*(_BYTE *)(v52 + 12) & 0xDF) != 0x58
              || (*(_BYTE *)(v52 + 13) & 0xDF) != 0xD
              || (*(_BYTE *)(v52 + 14) & 0xDF) != 0x57
              || (*(_BYTE *)(v52 + 15) & 0xDF) != 0x57
              || (*(_BYTE *)(v52 + 16) & 0xDF) != 0x57
              || (*(_BYTE *)(v52 + 17) & 0xDF) != 0xD
              || (*(_BYTE *)(v52 + 18) & 0xDF) != 0x46
              || (*(_BYTE *)(v52 + 19) & 0xDF) != 0x4F
              || (*(_BYTE *)(v52 + 20) & 0xDF) != 0x52
              || (*(_BYTE *)(v52 + 21) & 0xDF) != 0x4D
              || (*(_BYTE *)(v52 + 22) & 0xDF) != 0xD
              || (*(_BYTE *)(v52 + 23) & 0xDF) != 0x55
              || (*(_BYTE *)(v52 + 24) & 0xDF) != 0x52
              || (*(_BYTE *)(v52 + 25) & 0xDF) != 0x4C
              || (*(_BYTE *)(v52 + 26) & 0xDF) != 0x45
              || (*(_BYTE *)(v52 + 27) & 0xDF) != 0x4E
              || (*(_BYTE *)(v52 + 28) & 0xDF) != 0x43
              || (*(_BYTE *)(v52 + 29) & 0xDF) != 0x4F
              || (*(_BYTE *)(v52 + 30) & 0xDF) != 0x44
              || (*(_BYTE *)(v52 + 31) & 0xDF) != 0x45)
            {
              break;
            }
            v53 = *(unsigned __int8 *)(v52 + 32);
          }
          else
          {
            if ((*(_WORD *)v52 & 0xFFDF) != 0x41
              || (*(_WORD *)(v52 + 2) & 0xFFDF) != 0x50
              || (*(_WORD *)(v52 + 4) & 0xFFDF) != 0x50
              || (*(_WORD *)(v52 + 6) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v52 + 8) & 0xFFDF) != 0x49
              || (*(_WORD *)(v52 + 10) & 0xFFDF) != 0x43
              || (*(_WORD *)(v52 + 12) & 0xFFDF) != 0x41
              || (*(_WORD *)(v52 + 14) & 0xFFDF) != 0x54
              || (*(_WORD *)(v52 + 16) & 0xFFDF) != 0x49
              || (*(_WORD *)(v52 + 18) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v52 + 20) & 0xFFDF) != 0x4E
              || (*(_WORD *)(v52 + 22) & 0xFFDF) != 0xF
              || (*(_WORD *)(v52 + 24) & 0xFFDF) != 0x58
              || (*(_WORD *)(v52 + 26) & 0xFFDF) != 0xD
              || (*(_WORD *)(v52 + 28) & 0xFFDF) != 0x57
              || (*(_WORD *)(v52 + 30) & 0xFFDF) != 0x57
              || (*(_WORD *)(v52 + 32) & 0xFFDF) != 0x57
              || (*(_WORD *)(v52 + 34) & 0xFFDF) != 0xD
              || (*(_WORD *)(v52 + 36) & 0xFFDF) != 0x46
              || (*(_WORD *)(v52 + 38) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v52 + 40) & 0xFFDF) != 0x52
              || (*(_WORD *)(v52 + 42) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v52 + 44) & 0xFFDF) != 0xD
              || (*(_WORD *)(v52 + 46) & 0xFFDF) != 0x55
              || (*(_WORD *)(v52 + 48) & 0xFFDF) != 0x52
              || (*(_WORD *)(v52 + 50) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v52 + 52) & 0xFFDF) != 0x45
              || (*(_WORD *)(v52 + 54) & 0xFFDF) != 0x4E
              || (*(_WORD *)(v52 + 56) & 0xFFDF) != 0x43
              || (*(_WORD *)(v52 + 58) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v52 + 60) & 0xFFDF) != 0x44
              || (*(_WORD *)(v52 + 62) & 0xFFDF) != 0x45)
            {
              break;
            }
            v53 = *(unsigned __int16 *)(v52 + 64);
          }
          if ((v53 & 0xFFFFFFDF) == 0x44)
            goto LABEL_192;
          break;
        case 19:
          v54 = *((_QWORD *)v25 + 1);
          if ((*((_BYTE *)v25 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v54 & 0xDF) != 0x4D
              || (*(_BYTE *)(v54 + 1) & 0xDF) != 0x55
              || (*(_BYTE *)(v54 + 2) & 0xDF) != 0x4C
              || (*(_BYTE *)(v54 + 3) & 0xDF) != 0x54
              || (*(_BYTE *)(v54 + 4) & 0xDF) != 0x49
              || (*(_BYTE *)(v54 + 5) & 0xDF) != 0x50
              || (*(_BYTE *)(v54 + 6) & 0xDF) != 0x41
              || (*(_BYTE *)(v54 + 7) & 0xDF) != 0x52
              || (*(_BYTE *)(v54 + 8) & 0xDF) != 0x54
              || (*(_BYTE *)(v54 + 9) & 0xDF) != 0xF
              || (*(_BYTE *)(v54 + 10) & 0xDF) != 0x46
              || (*(_BYTE *)(v54 + 11) & 0xDF) != 0x4F
              || (*(_BYTE *)(v54 + 12) & 0xDF) != 0x52
              || (*(_BYTE *)(v54 + 13) & 0xDF) != 0x4D
              || (*(_BYTE *)(v54 + 14) & 0xDF) != 0xD
              || (*(_BYTE *)(v54 + 15) & 0xDF) != 0x44
              || (*(_BYTE *)(v54 + 16) & 0xDF) != 0x41
              || (*(_BYTE *)(v54 + 17) & 0xDF) != 0x54)
            {
              break;
            }
            v55 = *(unsigned __int8 *)(v54 + 18);
          }
          else
          {
            if ((*(_WORD *)v54 & 0xFFDF) != 0x4D
              || (*(_WORD *)(v54 + 2) & 0xFFDF) != 0x55
              || (*(_WORD *)(v54 + 4) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v54 + 6) & 0xFFDF) != 0x54
              || (*(_WORD *)(v54 + 8) & 0xFFDF) != 0x49
              || (*(_WORD *)(v54 + 10) & 0xFFDF) != 0x50
              || (*(_WORD *)(v54 + 12) & 0xFFDF) != 0x41
              || (*(_WORD *)(v54 + 14) & 0xFFDF) != 0x52
              || (*(_WORD *)(v54 + 16) & 0xFFDF) != 0x54
              || (*(_WORD *)(v54 + 18) & 0xFFDF) != 0xF
              || (*(_WORD *)(v54 + 20) & 0xFFDF) != 0x46
              || (*(_WORD *)(v54 + 22) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v54 + 24) & 0xFFDF) != 0x52
              || (*(_WORD *)(v54 + 26) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v54 + 28) & 0xFFDF) != 0xD
              || (*(_WORD *)(v54 + 30) & 0xFFDF) != 0x44
              || (*(_WORD *)(v54 + 32) & 0xFFDF) != 0x41
              || (*(_WORD *)(v54 + 34) & 0xFFDF) != 0x54)
            {
              break;
            }
            v55 = *(unsigned __int16 *)(v54 + 36);
          }
          if ((v55 & 0xFFFFFFDF) == 0x41)
            goto LABEL_192;
          break;
        case 10:
          v56 = *((_QWORD *)v25 + 1);
          if ((*((_BYTE *)v25 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v56 & 0xDF) != 0x54
              || (*(_BYTE *)(v56 + 1) & 0xDF) != 0x45
              || (*(_BYTE *)(v56 + 2) & 0xDF) != 0x58
              || (*(_BYTE *)(v56 + 3) & 0xDF) != 0x54
              || (*(_BYTE *)(v56 + 4) & 0xDF) != 0xF
              || (*(_BYTE *)(v56 + 5) & 0xDF) != 0x50
              || (*(_BYTE *)(v56 + 6) & 0xDF) != 0x4C
              || (*(_BYTE *)(v56 + 7) & 0xDF) != 0x41
              || (*(_BYTE *)(v56 + 8) & 0xDF) != 0x49)
            {
              break;
            }
            v57 = *(unsigned __int8 *)(v56 + 9);
          }
          else
          {
            if ((*(_WORD *)v56 & 0xFFDF) != 0x54
              || (*(_WORD *)(v56 + 2) & 0xFFDF) != 0x45
              || (*(_WORD *)(v56 + 4) & 0xFFDF) != 0x58
              || (*(_WORD *)(v56 + 6) & 0xFFDF) != 0x54
              || (*(_WORD *)(v56 + 8) & 0xFFDF) != 0xF
              || (*(_WORD *)(v56 + 10) & 0xFFDF) != 0x50
              || (*(_WORD *)(v56 + 12) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v56 + 14) & 0xFFDF) != 0x41
              || (*(_WORD *)(v56 + 16) & 0xFFDF) != 0x49)
            {
              break;
            }
            v57 = *(unsigned __int16 *)(v56 + 18);
          }
          if ((v57 & 0xFFFFFFDF) == 0x4E)
          {
LABEL_192:
            v28 = 0;
            if (v26)
              goto LABEL_51;
            goto LABEL_193;
          }
          break;
        default:
          break;
      }
      v28 = 1;
      if (v26)
      {
LABEL_51:
        *(_DWORD *)v25 = v26;
        goto LABEL_52;
      }
LABEL_193:
      WTF::StringImpl::destroy(v25, v24);
LABEL_52:
      WebCore::ParsedContentType::~ParsedContentType((WebCore::ParsedContentType *)v60, v24);
      return (v28 & 1) == 0;
    }
LABEL_15:
    if (v3)
    {
      v8 = *((unsigned int *)v3 + 1);
      if ((_DWORD)v8)
      {
        v9 = (unsigned __int16 *)*((_QWORD *)v3 + 1);
        if ((*((_BYTE *)v3 + 16) & 4) != 0)
        {
          while (1)
          {
            v11 = *(unsigned __int8 *)v9;
            v9 = (unsigned __int16 *)((char *)v9 + 1);
            v10 = v11;
            v12 = v11 - 48;
            if ((v11 | 0x20) - 97 >= 0x1A && v12 >= 0xA)
            {
              v14 = v10 > 0x3D;
              v15 = (1 << v10) & 0x2800740100000000;
              if (v14 || v15 == 0)
                break;
            }
            if (!--v8)
              return 1;
          }
        }
        else
        {
          while (1)
          {
            v37 = *v9++;
            v36 = v37;
            v38 = v37 - 48;
            if ((v37 | 0x20) - 97 >= 0x1A && v38 >= 0xA)
            {
              v14 = v36 > 0x3D;
              v40 = (1 << v36) & 0x2800740100000000;
              if (v14 || v40 == 0)
                break;
            }
            if (!--v8)
              return 1;
          }
        }
        return 0;
      }
    }
    return 1;
  }
  if (a1)
  {
    if (a1 != 3)
      return result;
    goto LABEL_15;
  }
  if (!v3)
    return 1;
  v29 = *((unsigned int *)v3 + 1);
  if (!(_DWORD)v29)
    return 1;
  v30 = (unsigned __int16 *)*((_QWORD *)v3 + 1);
  if ((*((_BYTE *)v3 + 16) & 4) != 0)
  {
    while (1)
    {
      v32 = *(unsigned __int8 *)v30;
      v30 = (unsigned __int16 *)((char *)v30 + 1);
      v31 = v32;
      v33 = v32 - 48;
      if ((v32 | 0x20) - 97 >= 0x1A && v33 >= 0xA && (v31 > 0x3D || ((1 << v31) & 0x2800900000000000) == 0))
      {
        if (v31 == 127 || v31 <= 0x1F && v31 != 9)
          return 0;
        result = 0;
        if (v31 - 34 <= 0x3B && ((1 << (v31 - 34)) & 0xE0000007F0024C1) != 0)
          break;
        if (v31 == 123 || v31 == 125)
          break;
      }
      if (!--v29)
        return 1;
    }
  }
  else
  {
    while (1)
    {
      v48 = *v30++;
      v47 = v48;
      v49 = v48 - 48;
      if ((v48 | 0x20) - 97 >= 0x1A && v49 >= 0xA && (v47 > 0x3D || ((1 << v47) & 0x2800900000000000) == 0))
      {
        if (v47 == 127 || v47 <= 0x1F && v47 != 9)
          return 0;
        result = 0;
        if (v47 - 34 <= 0x3B && ((1 << (v47 - 34)) & 0xE0000007F0024C1) != 0)
          break;
        if (v47 == 123 || v47 == 125)
          break;
      }
      if (!--v29)
        return 1;
    }
  }
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::checkURLSchemeAsCORSEnabled(WebCore::DocumentThreadableLoader *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  uint64_t v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  int v24;
  __int16 v25;
  CFTypeRef cf;
  char v27;

  v19 = (WTF::StringImpl *)WTF::URL::protocol(a2);
  v20 = v4;
  if (v19)
  {
    {
      WebCore::CORSEnabledSchemes(void)::schemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinCORSEnabledSchemes);
    }
    if ((WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::CORSEnabledSchemes(void)::schemes, (unsigned __int8 **)&v19, v5, v6) & 1) != 0)return 1;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v19;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = v19;
  if (v8)
    *(_DWORD *)v8 += 2;
  v19 = v8;
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v20 = v12;
  v13 = *(_OWORD *)((char *)a2 + 24);
  v21 = *(_OWORD *)((char *)a2 + 8);
  v22 = v13;
  if (v11)
    *(_DWORD *)v11 += 2;
  v23 = v11;
  v24 = 0;
  v25 = 2;
  cf = 0;
  v27 = 1;
  WebCore::DocumentThreadableLoader::logErrorAndFail(this, &v19, v9, v10);
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  v16 = v23;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v19;
  v19 = 0;
  if (!v18)
  {
LABEL_23:
    if (v11)
      goto LABEL_24;
    goto LABEL_26;
  }
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_23;
  }
  WTF::StringImpl::destroy(v18, v14);
  if (v11)
  {
LABEL_24:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v14);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_26:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v14);
    else
      *(_DWORD *)v8 -= 2;
  }
  return 0;
}

unsigned __int8 *WebCore::LegacySchemeRegistry::shouldTreatURLSchemeAsCORSEnabled(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4[2];

  v4[0] = result;
  v4[1] = a2;
  if (result)
  {
    {
      WebCore::CORSEnabledSchemes(void)::schemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinCORSEnabledSchemes);
    }
    return (unsigned __int8 *)WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::CORSEnabledSchemes(void)::schemes, v4, a3, a4);
  }
  return result;
}

_BYTE *WebCore::ResourceRequestBase::setAllowCookies(_BYTE *this, int a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  char v6;

  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  v5 = v3[148];
  if (((((v5 & 2) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v6 = 2;
    else
      v6 = 0;
    v3[148] = v5 & 0xFD | v6;
    v3[184] = v4 & 0xFD;
  }
  return this;
}

uint64_t WebCore::IOSApplication::isMoviStarPlus(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isMoviStarPlus(void)::isMoviStarPlus != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isMoviStarPlus(void)::isMoviStarPlus = IsEqualTo;
  return result;
}

void sub_1941524D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::addToHTTPHeaderMap(const __CFString *this, const void *a2, WebCore::HTTPHeaderMap *a3, void *a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  MEMORY[0x19AEA5508](&v8, a2, a3, a4);
  WebCore::HTTPHeaderMap::set(a3, this, &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTTPHeaderMap::set(WebCore::HTTPHeaderMap *this, CFStringRef theString, WTF::StringImpl **a3)
{
  const char *CStringPtr;
  WebCore::HTTPHeaderNamesHash *v7;
  unsigned int Length;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WebCore::HTTPHeaderNamesHash *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  unsigned __int16 v14;

  CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  if (CStringPtr)
  {
    v7 = (WebCore::HTTPHeaderNamesHash *)CStringPtr;
    Length = CFStringGetLength(theString);
    v14 = 0;
    if (WebCore::findHTTPHeaderName(v7, (char *)(Length | 0x100000000), &v14))
      return WebCore::HTTPHeaderMap::set(this, (WTF::StringImpl *)v14, a3);
    WTF::String::String();
    goto LABEL_6;
  }
  MEMORY[0x19AEA5508](&v13, theString);
  if (v13)
  {
    v11 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v13 + 1);
    v12 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  v14 = 0;
  if (!WebCore::findHTTPHeaderName(v11, (char *)v12, &v14))
  {
LABEL_6:
    WebCore::HTTPHeaderMap::setUncommonHeader(this, &v13, (const WTF::String *)a3);
    goto LABEL_7;
  }
  WebCore::HTTPHeaderMap::set(this, (WTF::StringImpl *)v14, a3);
LABEL_7:
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::updateRequestFetchMetadataHeaders(WebCore::SecurityOrigin *this, unsigned __int8 *a2, unsigned int a3)
{
  WebCore::SecurityOrigin *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WebCore::SecurityOrigin *v21;
  WTF::StringImpl *v22;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::SecurityOrigin::create(this, (uint64_t *)&v21);
  v6 = v21;
  result = WebCore::SecurityOrigin::isPotentiallyTrustworthy(v21);
  if ((_DWORD)result)
  {
    if (!*a2 || (a2[117] & 1) != 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v22;
    }
    else
    {
      WebCore::convertEnumerationToString(*a2, &v20);
      v9 = v20;
    }
    v22 = v9;
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WebCore::SecurityOrigin *)((char *)this + 96), (WTF::StringImpl *)0x41, &v22);
    v10 = *((_BYTE *)this + 184) & 0xFD;
    *((_BYTE *)this + 184) = v10;
    v11 = a2[1];
    {
      WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_0::operator() const(void)::impl;
      unk_1EE2F4610 = &WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_1::operator() const(void)::impl;
      qword_1EE2F4618 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_2::operator() const(void)::impl;
      unk_1EE2F4620 = &WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::$_3::operator() const(void)::impl;
    }
    v12 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::FetchOptionsMode)::values[v11];
    if (v12)
    {
      *(_DWORD *)v12 += 2;
      v10 = *((_BYTE *)this + 184);
    }
    v20 = v12;
    if ((v10 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WebCore::SecurityOrigin *)((char *)this + 96), (WTF::StringImpl *)0x42, &v20);
    *((_BYTE *)this + 184) &= ~2u;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    if ((_MergedGlobals_444 & 1) == 0)
    {
      _MergedGlobals_42 += 2;
      qword_1EE337DA8 = (uint64_t)&_MergedGlobals_42;
      _MergedGlobals_444 = 1;
    }
    if ((byte_1EE337DA1 & 1) == 0)
    {
      dword_1ECE7BCC0 += 2;
      unk_1EE337DB0 = &dword_1ECE7BCC0;
      byte_1EE337DA1 = 1;
    }
    if ((byte_1EE337DA2 & 1) == 0)
    {
      dword_1ECE7BCE0 += 2;
      unk_1EE337DB8 = &dword_1ECE7BCE0;
      byte_1EE337DA2 = 1;
    }
    if ((byte_1EE337DA3 & 1) == 0)
    {
      dword_1ECE7BD00 += 2;
      unk_1EE337DC0 = &dword_1ECE7BD00;
      byte_1EE337DA3 = 1;
    }
    if (a3 > 3)
      v14 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    else
      v14 = (WTF::StringImpl **)(&off_1E33F89F0)[(char)a3];
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    result = (uint64_t)WebCore::HTTPHeaderMap::set((WebCore::SecurityOrigin *)((char *)this + 96), (WTF::StringImpl *)0x43, v14);
    *((_BYTE *)this + 184) &= ~2u;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v21 = 0;
  if (v6)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v6);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v6));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v6);
      v17 = (WTF::StringImpl *)*((_QWORD *)v6 + 6);
      *((_QWORD *)v6 + 6) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v8);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = (WTF::StringImpl *)*((_QWORD *)v6 + 5);
      *((_QWORD *)v6 + 5) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v8);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = *((unsigned int *)v6 + 8);
      if ((_DWORD)v19 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E33F88A0[v19])(&v22, (char *)v6 + 8);
      *((_DWORD *)v6 + 8) = -1;
      return WTF::fastFree(v6, v8);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTTPHeaderMap::set(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v3;
  unint64_t v4;
  unint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF::StringImpl *v17;

  v3 = result;
  v4 = *((unsigned int *)result + 3);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (WTF::StringImpl **)(*(_QWORD *)result + 8);
    while (*((unsigned __int16 *)v6 - 4) != (_DWORD)a2)
    {
      ++v5;
      v6 += 2;
      if (v4 == v5)
        goto LABEL_5;
    }
    if (v5 >= v4)
    {
      __break(0xC471u);
    }
    else
    {
      v9 = *a3;
      if (*a3)
        *(_DWORD *)v9 += 2;
      result = *v6;
      *v6 = v9;
      if (result)
      {
        v10 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result != 2)
        {
LABEL_15:
          *(_DWORD *)result = v10;
          return result;
        }
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      }
    }
  }
  else
  {
LABEL_5:
    v16 = (__int16)a2;
    v7 = *a3;
    if (*a3)
      *(_DWORD *)v7 += 2;
    v17 = v7;
    if ((_DWORD)v4 == *((_DWORD *)result + 2))
    {
      v11 = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)result, v4 + 1, (unint64_t)&v16);
      v13 = *((unsigned int *)v3 + 3);
      v14 = *(_QWORD *)v3 + 16 * v13;
      *(_WORD *)v14 = *(_WORD *)v11;
      v15 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      result = v17;
      *((_DWORD *)v3 + 3) = v13 + 1;
      v17 = 0;
      if (result)
      {
        v10 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result != 2)
          goto LABEL_15;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
    }
    else
    {
      v8 = *(_QWORD *)result + 16 * v4;
      *(_WORD *)v8 = (_WORD)a2;
      *(_QWORD *)(v8 + 8) = v7;
      *((_DWORD *)result + 3) = v4 + 1;
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 16 * (unint64_t)a1[3] > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 6)
    v4 = v3 + 1;
  else
    v4 = 6;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          *(_WORD *)v10 = *(_WORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v10 + 1) = v13;
          result = (unsigned int *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WebCore::convertEnumerationToString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  _DWORD *v3;

  if ((byte_1EE3352B2 & 1) == 0)
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v3 += 2;
    qword_1EE3354D8 = (uint64_t)v3;
    dword_1ECE77640 += 2;
    qword_1EE3354E0 = (uint64_t)&dword_1ECE77640;
    dword_1ECE77660 += 2;
    qword_1EE3354E8 = (uint64_t)&dword_1ECE77660;
    dword_1ECE77680 += 2;
    qword_1EE3354F0 = (uint64_t)&dword_1ECE77680;
    dword_1ECE776A0 += 2;
    qword_1EE3354F8 = (uint64_t)&dword_1ECE776A0;
    dword_1ECE776C0 += 2;
    qword_1EE335500 = (uint64_t)&dword_1ECE776C0;
    dword_1ECE776E0 += 2;
    qword_1EE335508 = (uint64_t)&dword_1ECE776E0;
    dword_1ECE77700 += 2;
    qword_1EE335510 = (uint64_t)&dword_1ECE77700;
    dword_1ECE77720 += 2;
    qword_1EE335518 = (uint64_t)&dword_1ECE77720;
    dword_1ECE77740 += 2;
    qword_1EE335520 = (uint64_t)&dword_1ECE77740;
    dword_1ECE77760 += 2;
    qword_1EE335528 = (uint64_t)&dword_1ECE77760;
    dword_1ECE77780 += 2;
    qword_1EE335530 = (uint64_t)&dword_1ECE77780;
    dword_1ECE777A0 += 2;
    qword_1EE335538 = (uint64_t)&dword_1ECE777A0;
    dword_1ECE777C0 += 2;
    qword_1EE335540 = (uint64_t)&dword_1ECE777C0;
    dword_1ECE777E0 += 2;
    qword_1EE335548 = (uint64_t)&dword_1ECE777E0;
    dword_1ECE77800 += 2;
    qword_1EE335550 = (uint64_t)&dword_1ECE77800;
    dword_1ECE77820 += 2;
    qword_1EE335558 = (uint64_t)&dword_1ECE77820;
    dword_1ECE77840 += 2;
    qword_1EE335560 = (uint64_t)&dword_1ECE77840;
    dword_1ECE77860 += 2;
    qword_1EE335568 = (uint64_t)&dword_1ECE77860;
    dword_1ECE77880 += 2;
    qword_1EE335570 = (uint64_t)&dword_1ECE77880;
    dword_1ECE778A0 += 2;
    qword_1EE335578 = (uint64_t)&dword_1ECE778A0;
    byte_1EE3352B2 = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_924[8 * result + 552];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE336BFD & 1) == 0)
  {
    dword_1ECE7A3A0 += 2;
    byte_1EE336BFD = 1;
    qword_1EE336E38 = (uint64_t)&dword_1ECE7A3A0;
    dword_1ECE7A3C0 += 2;
    qword_1EE336E40 = (uint64_t)&dword_1ECE7A3C0;
  }
  v2 = *(_DWORD **)&_MergedGlobals_679[8 * result + 576];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;
  _DWORD *v3;

  if ((_MergedGlobals_770[0] & 1) == 0)
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v3 += 2;
    _MergedGlobals_10 += 2;
    dword_1ECE76CA0 += 2;
    dword_1ECE76CC0 += 2;
    qword_1EE334CF0 = (uint64_t)v3;
    unk_1EE334CF8 = &_MergedGlobals_10;
    qword_1EE334D00 = (uint64_t)&dword_1ECE76CA0;
    unk_1EE334D08 = &dword_1ECE76CC0;
    dword_1ECE76CE0 += 2;
    dword_1ECE76D00 += 2;
    qword_1EE334D10 = (uint64_t)&dword_1ECE76CE0;
    unk_1EE334D18 = &dword_1ECE76D00;
    _MergedGlobals_770[0] = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_770[8 * result + 128];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;
  _DWORD *v3;

  if ((byte_1EE334C71 & 1) == 0)
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v3 += 2;
    unk_1EE334CD8 = v3;
    unk_1EE334CE0 = &dword_1ECE76D20;
    dword_1ECE76D20 += 2;
    dword_1ECE76D40 += 2;
    unk_1EE334CE8 = &dword_1ECE76D40;
    byte_1EE334C71 = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_770[8 * result + 104];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE334C72 & 1) == 0)
  {
    dword_1ECE76D60 += 2;
    dword_1ECE76D80 += 2;
    qword_1EE334D98 = (uint64_t)&dword_1ECE76D60;
    unk_1EE334DA0 = &dword_1ECE76D80;
    dword_1ECE76DA0 += 2;
    dword_1ECE76DC0 += 2;
    qword_1EE334DA8 = (uint64_t)&dword_1ECE76DA0;
    unk_1EE334DB0 = &dword_1ECE76DC0;
    dword_1ECE76DE0 += 2;
    dword_1ECE76E00 += 2;
    qword_1EE334DB8 = (uint64_t)&dword_1ECE76DE0;
    unk_1EE334DC0 = &dword_1ECE76E00;
    dword_1ECE76E20 += 2;
    dword_1ECE76E40 += 2;
    qword_1EE334DC8 = (uint64_t)&dword_1ECE76E20;
    unk_1EE334DD0 = &dword_1ECE76E40;
    dword_1ECE76E60 += 2;
    dword_1ECE76E80 += 2;
    qword_1EE334DD8 = (uint64_t)&dword_1ECE76E60;
    unk_1EE334DE0 = &dword_1ECE76E80;
    dword_1ECE76EA0 += 2;
    dword_1ECE76EC0 += 2;
    qword_1EE334DE8 = (uint64_t)&dword_1ECE76EA0;
    unk_1EE334DF0 = &dword_1ECE76EC0;
    dword_1ECE76EE0 += 2;
    dword_1ECE76F00 += 2;
    qword_1EE334DF8 = (uint64_t)&dword_1ECE76EE0;
    unk_1EE334E00 = &dword_1ECE76F00;
    byte_1EE334C72 = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_770[8 * result + 296];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;
  _DWORD *v3;

  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v3 += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[0] = (uint64_t)v3;
    unk_1EE2F45C0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_0::operator() const(void)::impl;
    qword_1EE2F45C8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_1::operator() const(void)::impl;
    unk_1EE2F45D0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_2::operator() const(void)::impl;
    qword_1EE2F45D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_3::operator() const(void)::impl;
    unk_1EE2F45E0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_4::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F45E8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_5::operator() const(void)::impl;
    unk_1EE2F45F0 = &WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_6::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F45F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::$_7::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::ReferrerPolicy)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE3358E9 & 1) == 0)
  {
    dword_1ECE77D70 += 2;
    dword_1ECE77D90 += 2;
    qword_1EE335A18 = (uint64_t)&dword_1ECE77D70;
    unk_1EE335A20 = &dword_1ECE77D90;
    dword_1ECE77DB0 += 2;
    dword_1ECE77DD0 += 2;
    qword_1EE335A28 = (uint64_t)&dword_1ECE77DB0;
    unk_1EE335A30 = &dword_1ECE77DD0;
    dword_1ECE77DF0 += 2;
    dword_1ECE77E10 += 2;
    qword_1EE335A38 = (uint64_t)&dword_1ECE77DF0;
    unk_1EE335A40 = &dword_1ECE77E10;
    dword_1ECE77E30 += 2;
    dword_1ECE77E50 += 2;
    qword_1EE335A48 = (uint64_t)&dword_1ECE77E30;
    unk_1EE335A50 = &dword_1ECE77E50;
    dword_1ECE77E70 += 2;
    dword_1ECE77E90 += 2;
    qword_1EE335A58 = (uint64_t)&dword_1ECE77E70;
    unk_1EE335A60 = &dword_1ECE77E90;
    dword_1ECE77EB0 += 2;
    dword_1ECE77ED0 += 2;
    qword_1EE335A68 = (uint64_t)&dword_1ECE77EB0;
    unk_1EE335A70 = &dword_1ECE77ED0;
    dword_1ECE77EF0 += 2;
    dword_1ECE77F10 += 2;
    qword_1EE335A78 = (uint64_t)&dword_1ECE77EF0;
    unk_1EE335A80 = &dword_1ECE77F10;
    dword_1ECE77F30 += 2;
    dword_1ECE77F50 += 2;
    qword_1EE335A88 = (uint64_t)&dword_1ECE77F30;
    unk_1EE335A90 = &dword_1ECE77F50;
    dword_1ECE77F70 += 2;
    dword_1ECE77F90 += 2;
    qword_1EE335A98 = (uint64_t)&dword_1ECE77F70;
    unk_1EE335AA0 = &dword_1ECE77F90;
    dword_1ECE77FB0 += 2;
    dword_1ECE77FD0 += 2;
    qword_1EE335AA8 = (uint64_t)&dword_1ECE77FB0;
    unk_1EE335AB0 = &dword_1ECE77FD0;
    dword_1ECE77FF0 += 2;
    dword_1ECE78010 += 2;
    qword_1EE335AB8 = (uint64_t)&dword_1ECE77FF0;
    unk_1EE335AC0 = &dword_1ECE78010;
    dword_1ECE78030 += 2;
    dword_1ECE78050 += 2;
    qword_1EE335AC8 = (uint64_t)&dword_1ECE78030;
    unk_1EE335AD0 = &dword_1ECE78050;
    dword_1ECE78070 += 2;
    dword_1ECE78090 += 2;
    qword_1EE335AD8 = (uint64_t)&dword_1ECE78070;
    unk_1EE335AE0 = &dword_1ECE78090;
    dword_1ECE780B0 += 2;
    qword_1EE335AE8 = (uint64_t)&dword_1ECE780B0;
    dword_1ECE780D0 += 2;
    qword_1EE335AF0 = (uint64_t)&dword_1ECE780D0;
    dword_1ECE780F0 += 2;
    qword_1EE335AF8 = (uint64_t)&dword_1ECE780F0;
    dword_1ECE78110 += 2;
    qword_1EE335B00 = (uint64_t)&dword_1ECE78110;
    dword_1ECE78130 += 2;
    qword_1EE335B08 = (uint64_t)&dword_1ECE78130;
    dword_1ECE78150 += 2;
    qword_1EE335B10 = (uint64_t)&dword_1ECE78150;
    dword_1ECE78170 += 2;
    qword_1EE335B18 = (uint64_t)&dword_1ECE78170;
    dword_1ECE78190 += 2;
    qword_1EE335B20 = (uint64_t)&dword_1ECE78190;
    dword_1ECE781B0 += 2;
    qword_1EE335B28 = (uint64_t)&dword_1ECE781B0;
    dword_1ECE781D0 += 2;
    qword_1EE335B30 = (uint64_t)&dword_1ECE781D0;
    dword_1ECE781F0 += 2;
    qword_1EE335B38 = (uint64_t)&dword_1ECE781F0;
    dword_1ECE78210 += 2;
    qword_1EE335B40 = (uint64_t)&dword_1ECE78210;
    dword_1ECE78230 += 2;
    qword_1EE335B48 = (uint64_t)&dword_1ECE78230;
    dword_1ECE78250 += 2;
    qword_1EE335B50 = (uint64_t)&dword_1ECE78250;
    dword_1ECE78270 += 2;
    qword_1EE335B58 = (uint64_t)&dword_1ECE78270;
    dword_1ECE78290 += 2;
    qword_1EE335B60 = (uint64_t)&dword_1ECE78290;
    dword_1ECE782B0 += 2;
    qword_1EE335B68 = (uint64_t)&dword_1ECE782B0;
    dword_1ECE782D0 += 2;
    qword_1EE335B70 = (uint64_t)&dword_1ECE782D0;
    dword_1ECE782F0 += 2;
    qword_1EE335B78 = (uint64_t)&dword_1ECE782F0;
    dword_1ECE78310 += 2;
    qword_1EE335B80 = (uint64_t)&dword_1ECE78310;
    dword_1ECE78330 += 2;
    qword_1EE335B88 = (uint64_t)&dword_1ECE78330;
    dword_1ECE78350 += 2;
    qword_1EE335B90 = (uint64_t)&dword_1ECE78350;
    dword_1ECE78370 += 2;
    qword_1EE335B98 = (uint64_t)&dword_1ECE78370;
    dword_1ECE78390 += 2;
    qword_1EE335BA0 = (uint64_t)&dword_1ECE78390;
    dword_1ECE783B0 += 2;
    qword_1EE335BA8 = (uint64_t)&dword_1ECE783B0;
    dword_1ECE783D0 += 2;
    qword_1EE335BB0 = (uint64_t)&dword_1ECE783D0;
    dword_1ECE783F0 += 2;
    qword_1EE335BB8 = (uint64_t)&dword_1ECE783F0;
    dword_1ECE78410 += 2;
    qword_1EE335BC0 = (uint64_t)&dword_1ECE78410;
    dword_1ECE78430 += 2;
    qword_1EE335BC8 = (uint64_t)&dword_1ECE78430;
    dword_1ECE78450 += 2;
    qword_1EE335BD0 = (uint64_t)&dword_1ECE78450;
    dword_1ECE78470 += 2;
    qword_1EE335BD8 = (uint64_t)&dword_1ECE78470;
    dword_1ECE78490 += 2;
    qword_1EE335BE0 = (uint64_t)&dword_1ECE78490;
    dword_1ECE784B0 += 2;
    qword_1EE335BE8 = (uint64_t)&dword_1ECE784B0;
    dword_1ECE784D0 += 2;
    qword_1EE335BF0 = (uint64_t)&dword_1ECE784D0;
    dword_1ECE784F0 += 2;
    qword_1EE335BF8 = (uint64_t)&dword_1ECE784F0;
    dword_1ECE78510 += 2;
    qword_1EE335C00 = (uint64_t)&dword_1ECE78510;
    dword_1ECE78530 += 2;
    qword_1EE335C08 = (uint64_t)&dword_1ECE78530;
    dword_1ECE78550 += 2;
    qword_1EE335C10 = (uint64_t)&dword_1ECE78550;
    dword_1ECE78570 += 2;
    qword_1EE335C18 = (uint64_t)&dword_1ECE78570;
    dword_1ECE78590 += 2;
    qword_1EE335C20 = (uint64_t)&dword_1ECE78590;
    dword_1ECE785B0 += 2;
    qword_1EE335C28 = (uint64_t)&dword_1ECE785B0;
    dword_1ECE785D0 += 2;
    qword_1EE335C30 = (uint64_t)&dword_1ECE785D0;
    dword_1ECE785F0 += 2;
    qword_1EE335C38 = (uint64_t)&dword_1ECE785F0;
    dword_1ECE78610 += 2;
    qword_1EE335C40 = (uint64_t)&dword_1ECE78610;
    dword_1ECE78630 += 2;
    qword_1EE335C48 = (uint64_t)&dword_1ECE78630;
    dword_1ECE78650 += 2;
    qword_1EE335C50 = (uint64_t)&dword_1ECE78650;
    dword_1ECE78670 += 2;
    qword_1EE335C58 = (uint64_t)&dword_1ECE78670;
    dword_1ECE78690 += 2;
    qword_1EE335C60 = (uint64_t)&dword_1ECE78690;
    dword_1ECE786B0 += 2;
    qword_1EE335C68 = (uint64_t)&dword_1ECE786B0;
    dword_1ECE786D0 += 2;
    qword_1EE335C70 = (uint64_t)&dword_1ECE786D0;
    dword_1ECE786F0 += 2;
    qword_1EE335C78 = (uint64_t)&dword_1ECE786F0;
    dword_1ECE78710 += 2;
    qword_1EE335C80 = (uint64_t)&dword_1ECE78710;
    dword_1ECE78730 += 2;
    qword_1EE335C88 = (uint64_t)&dword_1ECE78730;
    dword_1ECE78750 += 2;
    qword_1EE335C90 = (uint64_t)&dword_1ECE78750;
    dword_1ECE78770 += 2;
    qword_1EE335C98 = (uint64_t)&dword_1ECE78770;
    dword_1ECE78790 += 2;
    qword_1EE335CA0 = (uint64_t)&dword_1ECE78790;
    dword_1ECE787B0 += 2;
    qword_1EE335CA8 = (uint64_t)&dword_1ECE787B0;
    dword_1ECE787D0 += 2;
    qword_1EE335CB0 = (uint64_t)&dword_1ECE787D0;
    dword_1ECE787F0 += 2;
    qword_1EE335CB8 = (uint64_t)&dword_1ECE787F0;
    dword_1ECE78810 += 2;
    qword_1EE335CC0 = (uint64_t)&dword_1ECE78810;
    dword_1ECE78830 += 2;
    qword_1EE335CC8 = (uint64_t)&dword_1ECE78830;
    dword_1ECE78850 += 2;
    qword_1EE335CD0 = (uint64_t)&dword_1ECE78850;
    dword_1ECE78870 += 2;
    qword_1EE335CD8 = (uint64_t)&dword_1ECE78870;
    dword_1ECE78890 += 2;
    qword_1EE335CE0 = (uint64_t)&dword_1ECE78890;
    dword_1ECE788B0 += 2;
    qword_1EE335CE8 = (uint64_t)&dword_1ECE788B0;
    dword_1ECE788D0 += 2;
    qword_1EE335CF0 = (uint64_t)&dword_1ECE788D0;
    dword_1ECE788F0 += 2;
    qword_1EE335CF8 = (uint64_t)&dword_1ECE788F0;
    dword_1ECE78910 += 2;
    qword_1EE335D00 = (uint64_t)&dword_1ECE78910;
    dword_1ECE78930 += 2;
    qword_1EE335D08 = (uint64_t)&dword_1ECE78930;
    byte_1EE3358E9 = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_677[8 * result + 304];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4758 = &WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_1::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMSessionType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_0::operator() const(void)::impl;
    unk_1EE2F4770 = &WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4778 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_2::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::CDMSessionType)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_0::operator() const(void)::impl;
    unk_1EE2F47D0 = &WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F47D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_2::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::CDMRequirement)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_0::operator() const(void)::impl;
    unk_1EE2F4CE0 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_1::operator() const(void)::impl;
    qword_1EE2F4CE8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_2::operator() const(void)::impl;
    unk_1EE2F4CF0 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_3::operator() const(void)::impl;
    qword_1EE2F4CF8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_4::operator() const(void)::impl;
    unk_1EE2F4D00 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_6::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F4D08 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_6::operator() const(void)::impl;
    unk_1EE2F4D10 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_7::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_8::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_9::operator() const(void)::impl += 2;
    qword_1EE2F4D18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_8::operator() const(void)::impl;
    unk_1EE2F4D20 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_9::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_10::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_11::operator() const(void)::impl += 2;
    qword_1EE2F4D28 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_10::operator() const(void)::impl;
    unk_1EE2F4D30 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::$_11::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::PlatformVideoColorPrimaries)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_0::operator() const(void)::impl;
    unk_1EE2F4DF0 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_1::operator() const(void)::impl;
    qword_1EE2F4DF8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_2::operator() const(void)::impl;
    unk_1EE2F4E00 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_3::operator() const(void)::impl;
    qword_1EE2F4E08 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_4::operator() const(void)::impl;
    unk_1EE2F4E10 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_6::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F4E18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_6::operator() const(void)::impl;
    unk_1EE2F4E20 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_7::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_8::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_9::operator() const(void)::impl += 2;
    qword_1EE2F4E28 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_8::operator() const(void)::impl;
    unk_1EE2F4E30 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_9::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_10::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_11::operator() const(void)::impl += 2;
    qword_1EE2F4E38 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_10::operator() const(void)::impl;
    unk_1EE2F4E40 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_11::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_12::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_13::operator() const(void)::impl += 2;
    qword_1EE2F4E48 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_12::operator() const(void)::impl;
    unk_1EE2F4E50 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_13::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_14::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_15::operator() const(void)::impl += 2;
    qword_1EE2F4E58 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_14::operator() const(void)::impl;
    unk_1EE2F4E60 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_15::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_16::operator() const(void)::impl += 2;
    qword_1EE2F4E68 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::$_16::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::PlatformVideoTransferCharacteristics)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE3374DA & 1) == 0)
  {
    dword_1ECE7A9B0 += 2;
    qword_1EE3376E8 = (uint64_t)&dword_1ECE7A9B0;
    dword_1ECE7A9D0 += 2;
    qword_1EE3376F0 = (uint64_t)&dword_1ECE7A9D0;
    dword_1ECE7A9F0 += 2;
    qword_1EE3376F8 = (uint64_t)&dword_1ECE7A9F0;
    dword_1ECE7AA10 += 2;
    qword_1EE337700 = (uint64_t)&dword_1ECE7AA10;
    dword_1ECE7AA30 += 2;
    qword_1EE337708 = (uint64_t)&dword_1ECE7AA30;
    dword_1ECE7AA50 += 2;
    qword_1EE337710 = (uint64_t)&dword_1ECE7AA50;
    dword_1ECE7AA70 += 2;
    qword_1EE337718 = (uint64_t)&dword_1ECE7AA70;
    dword_1ECE7AA90 += 2;
    qword_1EE337720 = (uint64_t)&dword_1ECE7AA90;
    byte_1EE3374DA = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_204[8 * result + 528];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE3374DB & 1) == 0)
  {
    dword_1ECE7AAB0 += 2;
    dword_1ECE7AAD0 += 2;
    qword_1EE337790 = (uint64_t)&dword_1ECE7AAD0;
    dword_1ECE7AAF0 += 2;
    qword_1EE337798 = (uint64_t)&dword_1ECE7AAF0;
    dword_1ECE7AB10 += 2;
    qword_1EE3377A0 = (uint64_t)&dword_1ECE7AB10;
    dword_1ECE7AB30 += 2;
    qword_1EE3377A8 = (uint64_t)&dword_1ECE7AB30;
    dword_1ECE7AB50 += 2;
    qword_1EE3377B0 = (uint64_t)&dword_1ECE7AB50;
    qword_1EE337788 = (uint64_t)&dword_1ECE7AAB0;
    dword_1ECE7AB70 += 2;
    qword_1EE3377B8 = (uint64_t)&dword_1ECE7AB70;
    dword_1ECE7AB90 += 2;
    qword_1EE3377C0 = (uint64_t)&dword_1ECE7AB90;
    dword_1ECE7ABB0 += 2;
    qword_1EE3377C8 = (uint64_t)&dword_1ECE7ABB0;
    dword_1ECE7ABD0 += 2;
    qword_1EE3377D0 = (uint64_t)&dword_1ECE7ABD0;
    dword_1ECE7ABF0 += 2;
    qword_1EE3377D8 = (uint64_t)&dword_1ECE7ABF0;
    dword_1ECE7AC10 += 2;
    qword_1EE3377E0 = (uint64_t)&dword_1ECE7AC10;
    dword_1ECE7AC30 += 2;
    qword_1EE3377E8 = (uint64_t)&dword_1ECE7AC30;
    byte_1EE3374DB = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_204[8 * result + 688];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE3374DE & 1) == 0)
  {
    dword_1ECE7AD70 += 2;
    unk_1EE337598 = &dword_1ECE7AD70;
    dword_1ECE7AD90 += 2;
    unk_1EE3375A0 = &dword_1ECE7AD90;
    dword_1ECE7ADB0 += 2;
    unk_1EE3375A8 = &dword_1ECE7ADB0;
    byte_1EE3374DE = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_204[8 * result + 192];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE3374E5 & 1) == 0)
  {
    dword_1ECE7B090 += 2;
    byte_1EE3374E5 = 1;
    dword_1ECE7B0B0 += 2;
    qword_1EE337628 = (uint64_t)&dword_1ECE7B090;
    unk_1EE337630 = &dword_1ECE7B0B0;
    dword_1ECE7B0D0 += 2;
    dword_1ECE7B0F0 += 2;
    qword_1EE337638 = (uint64_t)&dword_1ECE7B0D0;
    unk_1EE337640 = &dword_1ECE7B0F0;
  }
  v2 = *(_DWORD **)&_MergedGlobals_204[8 * result + 336];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE3374E6 & 1) == 0)
  {
    unk_1EE337578 = &dword_1ECE7B110;
    dword_1ECE7B110 += 2;
    dword_1ECE7B130 += 2;
    unk_1EE337580 = &dword_1ECE7B130;
    byte_1EE3374E6 = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_204[8 * result + 160];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE3374E7 & 1) == 0)
  {
    dword_1ECE7B150 += 2;
    unk_1EE3375B0 = &dword_1ECE7B150;
    dword_1ECE7B170 += 2;
    unk_1EE3375B8 = &dword_1ECE7B170;
    dword_1ECE7B190 += 2;
    unk_1EE3375C0 = &dword_1ECE7B190;
    byte_1EE3374E7 = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_204[8 * result + 216];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_0::operator() const(void)::impl;
    unk_1EE2F85B0 = &WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_1::operator() const(void)::impl;
    qword_1EE2F85B8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_2::operator() const(void)::impl;
    unk_1EE2F85C0 = &WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_3::operator() const(void)::impl;
    qword_1EE2F85C8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_4::operator() const(void)::impl;
    unk_1EE2F85D0 = &WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_6::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F85D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_6::operator() const(void)::impl;
    unk_1EE2F85E0 = &WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_7::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_8::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_9::operator() const(void)::impl += 2;
    qword_1EE2F85E8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_8::operator() const(void)::impl;
    unk_1EE2F85F0 = &WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_9::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_10::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_11::operator() const(void)::impl += 2;
    qword_1EE2F85F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_10::operator() const(void)::impl;
    unk_1EE2F8600 = &WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_11::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_12::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_13::operator() const(void)::impl += 2;
    qword_1EE2F8608 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_12::operator() const(void)::impl;
    unk_1EE2F8610 = &WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_13::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_14::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_15::operator() const(void)::impl += 2;
    qword_1EE2F8618 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_14::operator() const(void)::impl;
    unk_1EE2F8620 = &WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::$_15::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::PlatformMediaSessionRemoteControlCommandType)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1ECE90D98 = &WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_1::operator() const(void)::impl;
    qword_1ECE90DA0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_2::operator() const(void)::impl;
    unk_1ECE90DA8 = &WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_3::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8648 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl;
    qword_1EE2F8650 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl;
    unk_1EE2F8658 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl;
    qword_1EE2F8660 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl;
    unk_1EE2F8668 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F8670 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8688 = &WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F8690 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((_MergedGlobals_80[0] & 1) == 0)
  {
    _MergedGlobals_46 += 2;
    dword_1ECE7D170 += 2;
    qword_1EE337F18 = (uint64_t)&_MergedGlobals_46;
    unk_1EE337F20 = &dword_1ECE7D170;
    dword_1ECE7D190 += 2;
    qword_1EE337F28 = (uint64_t)&dword_1ECE7D190;
    _MergedGlobals_80[0] = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_80[8 * result + 40];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE337EF1 & 1) == 0)
  {
    unk_1EE337EF8 = &dword_1ECE7D1B0;
    dword_1ECE7D1B0 += 2;
    dword_1ECE7D1D0 += 2;
    unk_1EE337F00 = &dword_1ECE7D1D0;
    byte_1EE337EF1 = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_80[8 * result + 8];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F86A8 = &WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_1::operator() const(void)::impl;
    qword_1EE2F86B0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_2::operator() const(void)::impl;
    unk_1EE2F86B8 = &WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_3::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

{
  _DWORD *v2;

  {
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
    qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
    unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
  }
  v2 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[result];
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return result;
}

uint64_t WebCore::HTTPHeaderMap::setUncommonHeader(WebCore::HTTPHeaderMap *this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v6 = (_QWORD *)((char *)this + 16);
  LODWORD(v7) = *((_DWORD *)this + 7);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      result = WTF::equalIgnoringASCIICase(*(WTF **)(*v6 + v8), *a2, a3);
      if ((result & 1) != 0)
        break;
      ++v9;
      v7 = *((unsigned int *)this + 7);
      v8 += 16;
      if (v9 >= v7)
        goto LABEL_5;
    }
    if (v9 >= *((unsigned int *)this + 7))
    {
      __break(0xC471u);
      return result;
    }
    v20 = *v6 + v8;
    v21 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v21 += 2;
    result = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v21;
    if (result)
    {
      v19 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
LABEL_15:
      *(_DWORD *)result = v19;
    }
  }
  else
  {
LABEL_5:
    v11 = *a2;
    if (*a2)
      *(_DWORD *)v11 += 2;
    v24 = v11;
    v12 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v12 += 2;
    v25 = v12;
    if ((_DWORD)v7 == *((_DWORD *)this + 6))
    {
      v13 = (uint64_t *)WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v24);
      v14 = *((unsigned int *)this + 7);
      v15 = (_QWORD *)(*((_QWORD *)this + 2) + 16 * v14);
      v16 = *v13;
      *v13 = 0;
      *v15 = v16;
      v17 = v13[1];
      v13[1] = 0;
      v15[1] = v17;
      v18 = v25;
      *((_DWORD *)this + 7) = v14 + 1;
      v25 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    else
    {
      v22 = *((_QWORD *)this + 2);
      v24 = 0;
      v23 = (WTF::StringImpl **)(v22 + 16 * v7);
      *v23 = v11;
      v23[1] = v12;
      *((_DWORD *)this + 7) = v7 + 1;
      v25 = 0;
    }
    result = (uint64_t)v24;
    v24 = 0;
    if (result)
    {
      v19 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      goto LABEL_15;
    }
  }
  return result;
}

void WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::decodeForPersistence(_BYTE *a1@<X8>)
{
  WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[32] = 0;
}

uint64_t WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned __int8 v11;

  WTF::Persistence::Coder<WTF::String>::decodeForPersistence();
  if (*(unsigned __int8 *)(a2 + 8) == v11)
  {
    if (!*(_BYTE *)(a2 + 8))
      return a1;
    v5 = v10;
    v10 = 0;
    v6 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_BYTE *)(a2 + 8) = 0;
  }
  else
  {
    v9 = v10;
    v10 = 0;
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = 1;
  }
  if (v11 && v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v4);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebCore::HTTPHeaderMap::append(WebCore::HTTPHeaderMap *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WebCore::HTTPHeaderNamesHash *v7;
  unint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  __int16 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int16 v32;

  v6 = *a2;
  if (*a2)
  {
    v7 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v6 + 1);
    v8 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v32 = 0;
  result = (WTF::StringImpl *)WebCore::findHTTPHeaderName(v7, (char *)v8, &v32);
  if (!(_DWORD)result)
  {
    v15 = *a2;
    if (*a2)
      *(_DWORD *)v15 += 2;
    v30 = v15;
    v16 = *a3;
    if (*a3)
      *(_DWORD *)v16 += 2;
    v31 = v16;
    v17 = *((unsigned int *)this + 7);
    if ((_DWORD)v17 == *((_DWORD *)this + 6))
    {
      v18 = (uint64_t *)WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 16, v17 + 1, (unint64_t)&v30);
      v19 = *((unsigned int *)this + 7);
      v20 = (_QWORD *)(*((_QWORD *)this + 2) + 16 * v19);
      v21 = *v18;
      *v18 = 0;
      *v20 = v21;
      v22 = v18[1];
      v18[1] = 0;
      v20[1] = v22;
      v23 = v31;
      *((_DWORD *)this + 7) = v19 + 1;
      v31 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v10);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    else
    {
      v28 = *((_QWORD *)this + 2);
      v30 = 0;
      v29 = (WTF::StringImpl **)(v28 + 16 * v17);
      *v29 = v15;
      v29[1] = v16;
      *((_DWORD *)this + 7) = v17 + 1;
      v31 = 0;
    }
    result = v30;
    v30 = 0;
    if (!result)
      return result;
LABEL_18:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    *(_DWORD *)result -= 2;
    return result;
  }
  v11 = v32;
  LOWORD(v30) = v32;
  v12 = *a3;
  if (*a3)
    *(_DWORD *)v12 += 2;
  v31 = v12;
  v13 = *((unsigned int *)this + 3);
  if ((_DWORD)v13 != *((_DWORD *)this + 2))
  {
    v14 = *(_QWORD *)this + 16 * v13;
    *(_WORD *)v14 = v11;
    *(_QWORD *)(v14 + 8) = v12;
    *((_DWORD *)this + 3) = v13 + 1;
    return result;
  }
  v24 = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this, v13 + 1, (unint64_t)&v30);
  v25 = *((unsigned int *)this + 3);
  v26 = *(_QWORD *)this + 16 * v25;
  *(_WORD *)v26 = *(_WORD *)v24;
  v27 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v26 + 8) = v27;
  result = v31;
  *((_DWORD *)this + 3) = v25 + 1;
  v31 = 0;
  if (result)
    goto LABEL_18;
  return result;
}

uint64_t WebCore::findHTTPHeaderName(WebCore::HTTPHeaderNamesHash *this, char *a2, _WORD *a3)
{
  unsigned int v3;
  WebCore::HTTPHeaderNamesHash *v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  __int16 v14;
  uint64_t result;
  _BYTE v16[40];
  uint64_t v17;

  v3 = a2;
  v17 = *MEMORY[0x1E0C80C00];
  if (((_DWORD)a2 - 41) < 0xFFFFFFD9)
    return 0;
  v5 = this;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    v6 = WebCore::HTTPHeaderNamesHash::header_name_hash_function(this, a2);
    if (v6 <= 0x384 && (WebCore::lookup[v6] & 0x80000000) == 0)
    {
      v7 = WebCore::lookup[v6];
      v8 = (&WebCore::header_name_wordlist)[2 * v7];
      if (((*v8 ^ *(_BYTE *)v5) & 0xDF) == 0)
      {
        v9 = v3;
        v10 = (&WebCore::header_name_wordlist)[2 * v7];
        while (1)
        {
          v11 = WebCore::gperf_downcase[*(unsigned __int8 *)v5];
          v12 = WebCore::gperf_downcase[*v10];
          if (!*(_BYTE *)v5 || v11 != v12)
            break;
          ++v10;
          v5 = (WebCore::HTTPHeaderNamesHash *)((char *)v5 + 1);
          if (!--v3)
            goto LABEL_13;
        }
        if (v11 != v12)
          return 0;
LABEL_13:
        if (v8[v9])
          return 0;
        v14 = (__int16)(&WebCore::header_name_wordlist)[2 * v7 + 1];
        goto LABEL_15;
      }
    }
    return 0;
  }
  if ((_DWORD)a2)
  {
    if (*(unsigned __int16 *)this > 0x7Fu)
      return 0;
    v16[0] = *(_WORD *)this;
    if (a2 != 1)
    {
      if (*((unsigned __int16 *)this + 1) > 0x7Fu)
        return 0;
      v16[1] = *((_WORD *)this + 1);
      if (a2 != 2)
      {
        if (*((unsigned __int16 *)this + 2) > 0x7Fu)
          return 0;
        v16[2] = *((_WORD *)this + 2);
        if (a2 != 3)
        {
          if (*((unsigned __int16 *)this + 3) > 0x7Fu)
            return 0;
          v16[3] = *((_WORD *)this + 3);
          if (a2 != 4)
          {
            if (*((unsigned __int16 *)this + 4) > 0x7Fu)
              return 0;
            v16[4] = *((_WORD *)this + 4);
            if (a2 != 5)
            {
              if (*((unsigned __int16 *)this + 5) > 0x7Fu)
                return 0;
              v16[5] = *((_WORD *)this + 5);
              if (a2 != 6)
              {
                if (*((unsigned __int16 *)this + 6) > 0x7Fu)
                  return 0;
                v16[6] = *((_WORD *)this + 6);
                if (a2 != 7)
                {
                  if (*((unsigned __int16 *)this + 7) > 0x7Fu)
                    return 0;
                  v16[7] = *((_WORD *)this + 7);
                  if (a2 != 8)
                  {
                    if (*((unsigned __int16 *)this + 8) > 0x7Fu)
                      return 0;
                    v16[8] = *((_WORD *)this + 8);
                    if (a2 != 9)
                    {
                      if (*((unsigned __int16 *)this + 9) > 0x7Fu)
                        return 0;
                      v16[9] = *((_WORD *)this + 9);
                      if (a2 != 10)
                      {
                        if (*((unsigned __int16 *)this + 10) > 0x7Fu)
                          return 0;
                        v16[10] = *((_WORD *)this + 10);
                        if (a2 != 11)
                        {
                          if (*((unsigned __int16 *)this + 11) > 0x7Fu)
                            return 0;
                          v16[11] = *((_WORD *)this + 11);
                          if (a2 != 12)
                          {
                            if (*((unsigned __int16 *)this + 12) > 0x7Fu)
                              return 0;
                            v16[12] = *((_WORD *)this + 12);
                            if (a2 != 13)
                            {
                              if (*((unsigned __int16 *)this + 13) > 0x7Fu)
                                return 0;
                              v16[13] = *((_WORD *)this + 13);
                              if (a2 != 14)
                              {
                                if (*((unsigned __int16 *)this + 14) > 0x7Fu)
                                  return 0;
                                v16[14] = *((_WORD *)this + 14);
                                if (a2 != 15)
                                {
                                  if (*((unsigned __int16 *)this + 15) > 0x7Fu)
                                    return 0;
                                  v16[15] = *((_WORD *)this + 15);
                                  if (a2 != 16)
                                  {
                                    if (*((unsigned __int16 *)this + 16) > 0x7Fu)
                                      return 0;
                                    v16[16] = *((_WORD *)this + 16);
                                    if (a2 != 17)
                                    {
                                      if (*((unsigned __int16 *)this + 17) > 0x7Fu)
                                        return 0;
                                      v16[17] = *((_WORD *)this + 17);
                                      if (a2 != 18)
                                      {
                                        if (*((unsigned __int16 *)this + 18) > 0x7Fu)
                                          return 0;
                                        v16[18] = *((_WORD *)this + 18);
                                        if (a2 != 19)
                                        {
                                          if (*((unsigned __int16 *)this + 19) > 0x7Fu)
                                            return 0;
                                          v16[19] = *((_WORD *)this + 19);
                                          if (a2 != 20)
                                          {
                                            if (*((unsigned __int16 *)this + 20) > 0x7Fu)
                                              return 0;
                                            v16[20] = *((_WORD *)this + 20);
                                            if (a2 != 21)
                                            {
                                              if (*((unsigned __int16 *)this + 21) > 0x7Fu)
                                                return 0;
                                              v16[21] = *((_WORD *)this + 21);
                                              if (a2 != 22)
                                              {
                                                if (*((unsigned __int16 *)this + 22) > 0x7Fu)
                                                  return 0;
                                                v16[22] = *((_WORD *)this + 22);
                                                if (a2 != 23)
                                                {
                                                  if (*((unsigned __int16 *)this + 23) > 0x7Fu)
                                                    return 0;
                                                  v16[23] = *((_WORD *)this + 23);
                                                  if (a2 != 24)
                                                  {
                                                    if (*((unsigned __int16 *)this + 24) > 0x7Fu)
                                                      return 0;
                                                    v16[24] = *((_WORD *)this + 24);
                                                    if (a2 != 25)
                                                    {
                                                      if (*((unsigned __int16 *)this + 25) > 0x7Fu)
                                                        return 0;
                                                      v16[25] = *((_WORD *)this + 25);
                                                      if (a2 != 26)
                                                      {
                                                        if (*((unsigned __int16 *)this + 26) > 0x7Fu)
                                                          return 0;
                                                        v16[26] = *((_WORD *)this + 26);
                                                        if (a2 != 27)
                                                        {
                                                          if (*((unsigned __int16 *)this + 27) > 0x7Fu)
                                                            return 0;
                                                          v16[27] = *((_WORD *)this + 27);
                                                          if (a2 != 28)
                                                          {
                                                            if (*((unsigned __int16 *)this + 28) > 0x7Fu)
                                                              return 0;
                                                            v16[28] = *((_WORD *)this + 28);
                                                            if (a2 != 29)
                                                            {
                                                              if (*((unsigned __int16 *)this + 29) > 0x7Fu)
                                                                return 0;
                                                              v16[29] = *((_WORD *)this + 29);
                                                              if (a2 != 30)
                                                              {
                                                                if (*((unsigned __int16 *)this + 30) > 0x7Fu)
                                                                  return 0;
                                                                v16[30] = *((_WORD *)this + 30);
                                                                if (a2 != 31)
                                                                {
                                                                  if (*((unsigned __int16 *)this + 31) > 0x7Fu)
                                                                    return 0;
                                                                  v16[31] = *((_WORD *)this + 31);
                                                                  if (a2 != 32)
                                                                  {
                                                                    if (*((unsigned __int16 *)this + 32) > 0x7Fu)
                                                                      return 0;
                                                                    v16[32] = *((_WORD *)this + 32);
                                                                    if (a2 != 33)
                                                                    {
                                                                      if (*((unsigned __int16 *)this + 33) > 0x7Fu)
                                                                        return 0;
                                                                      v16[33] = *((_WORD *)this + 33);
                                                                      if (a2 != 34)
                                                                      {
                                                                        if (*((unsigned __int16 *)this + 34) > 0x7Fu)
                                                                          return 0;
                                                                        v16[34] = *((_WORD *)this + 34);
                                                                        if (a2 != 35)
                                                                        {
                                                                          if (*((unsigned __int16 *)this + 35) > 0x7Fu)
                                                                            return 0;
                                                                          v16[35] = *((_WORD *)this + 35);
                                                                          if (a2 != 36)
                                                                          {
                                                                            if (*((unsigned __int16 *)this + 36) > 0x7Fu)
                                                                              return 0;
                                                                            v16[36] = *((_WORD *)this + 36);
                                                                            if (a2 != 37)
                                                                            {
                                                                              if (*((unsigned __int16 *)this + 37) > 0x7Fu)
                                                                                return 0;
                                                                              v16[37] = *((_WORD *)this + 37);
                                                                              if (a2 != 38)
                                                                              {
                                                                                if (*((unsigned __int16 *)this + 38) > 0x7Fu)
                                                                                  return 0;
                                                                                v16[38] = *((_WORD *)this + 38);
                                                                                if (a2 != 39)
                                                                                {
                                                                                  if (*((unsigned __int16 *)this + 39) > 0x7Fu)
                                                                                    return 0;
                                                                                  v16[39] = *((_WORD *)this + 39);
                                                                                  if (a2 != 40)
                                                                                  {
                                                                                    if (*((unsigned __int16 *)this + 40) < 0x80u)
                                                                                      __break(1u);
                                                                                    return 0;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = (uint64_t)WebCore::HTTPHeaderNamesHash::findHeaderNameImpl((WebCore::HTTPHeaderNamesHash *)v16, a2);
  if (result)
  {
    v14 = *(_WORD *)(result + 8);
LABEL_15:
    *a3 = v14;
    return 1;
  }
  return result;
}

uint64_t WebCore::HTTPHeaderNamesHash::header_name_hash_function(WebCore::HTTPHeaderNamesHash *this, const char *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = (_DWORD)a2 - 1;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  switch(v2)
  {
    case 0:
      return v26
           + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
    case 1:
      goto LABEL_14;
    case 2:
      goto LABEL_13;
    case 3:
      goto LABEL_12;
    case 4:
      goto LABEL_11;
    case 5:
      goto LABEL_10;
    case 6:
      goto LABEL_9;
    case 7:
      goto LABEL_8;
    case 8:
      goto LABEL_7;
    case 9:
      goto LABEL_6;
    case 10:
      goto LABEL_5;
    case 11:
      goto LABEL_4;
    case 12:
      goto LABEL_3;
    case 13:
      goto LABEL_2;
    case 14:
      goto LABEL_41;
    case 15:
      goto LABEL_40;
    case 16:
      goto LABEL_39;
    case 17:
      goto LABEL_38;
    case 18:
      goto LABEL_37;
    case 19:
      goto LABEL_36;
    case 20:
      goto LABEL_35;
    case 21:
      goto LABEL_34;
    case 22:
      goto LABEL_33;
    case 23:
      goto LABEL_32;
    case 24:
      goto LABEL_31;
    case 25:
      goto LABEL_30;
    case 26:
      goto LABEL_29;
    case 27:
      goto LABEL_28;
    case 28:
      goto LABEL_27;
    case 29:
      goto LABEL_26;
    case 30:
      goto LABEL_25;
    case 31:
      goto LABEL_24;
    case 32:
      goto LABEL_23;
    case 33:
      goto LABEL_22;
    case 34:
      goto LABEL_21;
    case 35:
      goto LABEL_20;
    case 36:
      goto LABEL_19;
    case 37:
      goto LABEL_18;
    case 38:
      goto LABEL_17;
    default:
      v28 = WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 39)];
LABEL_17:
      LODWORD(v29) = v28
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 38)];
LABEL_18:
      HIDWORD(v29) = v29
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 37)];
LABEL_19:
      LODWORD(v30) = HIDWORD(v29)
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 36)];
LABEL_20:
      HIDWORD(v30) = v30
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 35)];
LABEL_21:
      LODWORD(v31) = HIDWORD(v30)
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 34)];
LABEL_22:
      HIDWORD(v31) = v31
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 33)];
LABEL_23:
      LODWORD(v32) = HIDWORD(v31)
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 32)];
LABEL_24:
      HIDWORD(v32) = v32
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 31)];
LABEL_25:
      LODWORD(v33) = HIDWORD(v32)
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 30)];
LABEL_26:
      HIDWORD(v33) = v33
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 29)];
LABEL_27:
      LODWORD(v34) = HIDWORD(v33)
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 28)];
LABEL_28:
      HIDWORD(v34) = v34
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 27)];
LABEL_29:
      LODWORD(v35) = HIDWORD(v34)
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 26)];
LABEL_30:
      HIDWORD(v35) = v35
                   + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 25)];
LABEL_31:
      v3 = HIDWORD(v35)
         + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 24)];
LABEL_32:
      v4 = v3
         + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 23)];
LABEL_33:
      v5 = v4
         + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 22)];
LABEL_34:
      v6 = v5
         + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 21)];
LABEL_35:
      v7 = v6
         + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 20)];
LABEL_36:
      v8 = v7
         + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 19)];
LABEL_37:
      v9 = v8
         + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 18)];
LABEL_38:
      v10 = v9
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 17)];
LABEL_39:
      v11 = v10
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 16)];
LABEL_40:
      v12 = v11
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 15)];
LABEL_41:
      v13 = v12
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 14)];
LABEL_2:
      v14 = v13
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 13)];
LABEL_3:
      v15 = v14
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 12)];
LABEL_4:
      v16 = v15
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 11)];
LABEL_5:
      v17 = v16
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 10)];
LABEL_6:
      v18 = v17
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 9)];
LABEL_7:
      v19 = v18
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 8)];
LABEL_8:
      v20 = v19
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 7)];
LABEL_9:
      v21 = v20
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 6)];
LABEL_10:
      v22 = v21
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 5)];
LABEL_11:
      v23 = v22
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 4)];
LABEL_12:
      v24 = v23
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 3)];
LABEL_13:
      v25 = v24
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 2)];
LABEL_14:
      v26 = v25
          + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 1)];
      return v26
           + WebCore::HTTPHeaderNamesHash::header_name_hash_function(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
  }
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 + 1 > a2)
    v8 = v7 + 1;
  else
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (!(v8 >> 28))
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v8));
    *(_DWORD *)(v4 + 8) = v8;
    *(_QWORD *)v4 = v10;
    if ((_DWORD)v9)
    {
      v12 = (WTF *)((char *)v5 + 16 * v9);
      v13 = v5;
      do
      {
        v14 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        *v10 = v14;
        v15 = *((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        v10[1] = v15;
        v16 = v10;
        WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)v13, v11);
        v13 = (WTF *)((char *)v13 + 16);
        v10 = v16 + 2;
      }
      while (v13 != v12);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v11);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebCore::JSMutationRecordOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  result = WebCore::uncacheWrapper<WebCore::Crypto,WebCore::JSCrypto>(a3, (uint64_t)v3);
  if (v3[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 152);
}

uint64_t WebCore::ResourceResponseBase::mimeType(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  return (uint64_t)this + 40;
}

double WebCore::Page::preferredRenderingUpdateInterval(WebCore::Page *this)
{
  return WebCore::preferredFrameInterval(*((_BYTE *)this + 1168), *(_QWORD *)((char *)this + 316), (*(_QWORD *)(*((_QWORD *)this + 14) + 688) >> 31) & 1);
}

uint64_t WebCore::Region::totalArea(WebCore::Region *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _OWORD *v29;
  WTF *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v30 = (WTF *)&v32;
  v31 = 1;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v9 = *(unsigned int *)(v3 + 156);
    if (v9 < 2)
      return 0;
    v10 = 0;
    v11 = *(unsigned int **)(v3 + 144);
    v12 = &v11[4 * v9];
    v13 = v11 + 4;
    do
    {
      v14 = v13;
      v15 = *v11;
      v16 = v11[4] - *v11;
      v17 = (uint64_t *)*((_QWORD *)this + 2);
      v18 = *((_QWORD *)v11 + 1);
      v19 = *((unsigned int *)v17 + 3);
      if (v18 != v19)
      {
        if (v18 >= v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1941541FCLL);
        }
        v20 = *v17;
        v21 = v20 + 4 * v18;
        v22 = *((_QWORD *)v11 + 3);
        v23 = (_DWORD *)(v20 + 4 * v22);
        v24 = (_DWORD *)(v21 + 4);
        if (v18 != v22 && v24 != v23)
        {
          v26 = 4 * v22 - 4 * v18 - 12;
          do
          {
            v27 = *v24 - *(v24 - 1);
            LODWORD(v33) = *(v24 - 1);
            *(_QWORD *)((char *)&v33 + 4) = __PAIR64__(v27, v15);
            HIDWORD(v33) = v16;
            if (v10 == (_DWORD)v31)
            {
              v29 = (_OWORD *)WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, (void *)(v10 + 1), (unint64_t)&v33);
              *((_OWORD *)v30 + HIDWORD(v31)) = *v29;
            }
            else
            {
              *((_OWORD *)v30 + v10) = v33;
            }
            v10 = ++HIDWORD(v31);
            if (v26 == -4)
              break;
            v24 += 2;
            v28 = v26;
            v26 -= 8;
          }
          while (v28);
        }
      }
      if (v14 == v12)
        break;
      v13 = v14 + 4;
      v11 = v14;
    }
    while (v14 + 4 != v12);
    v7 = v30;
    if (!v10)
    {
      v4 = 0;
      goto LABEL_9;
    }
    v6 = (WTF *)((char *)v30 + 16 * v10);
  }
  else
  {
    if (*((int *)this + 2) < 1 || *((int *)this + 3) < 1)
      return 0;
    v32 = *(_OWORD *)this;
    HIDWORD(v31) = 1;
    v6 = (WTF *)&v33;
    v7 = (WTF *)&v32;
  }
  v4 = 0;
  v8 = v7;
  do
  {
    v4 += *((int *)v8 + 3) * (uint64_t)*((int *)v8 + 2);
    v8 = (WTF *)((char *)v8 + 16);
  }
  while (v8 != v6);
LABEL_9:
  if (&v32 != (__int128 *)v7 && v7)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v7, a2);
  }
  return v4;
}

uint64_t WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;

  v3 = result;
  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  v4 = (_OWORD *)(result + 1228);
  if (*(_BYTE *)(result + 1244))
  {
    result = WebCore::operator==(result + 1228, (uint64_t)&v6);
    if ((result & 1) != 0)
      return result;
    *v4 = v6;
  }
  else
  {
    *v4 = v6;
    *(_BYTE *)(result + 1244) = 1;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 328) + 296);
  if (v5)
    return WebCore::Style::Scope::didChangeViewportSize(*(_QWORD *)(v5 + 1328), a2);
  return result;
}

uint64_t WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;

  v3 = result;
  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  v4 = (_OWORD *)(result + 1248);
  if (*(_BYTE *)(result + 1264))
  {
    result = WebCore::operator==(result + 1248, (uint64_t)&v6);
    if ((result & 1) != 0)
      return result;
    *v4 = v6;
  }
  else
  {
    *v4 = v6;
    *(_BYTE *)(result + 1264) = 1;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 328) + 296);
  if (v5)
    return WebCore::Style::Scope::didChangeViewportSize(*(_QWORD *)(v5 + 1328), a2);
  return result;
}

BOOL WebCore::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a2 + 4);
  if (*(_BYTE *)(a1 + 4))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    if (*(float *)a1 == *(float *)a2)
      goto LABEL_9;
    return 0;
  }
  if ((*(_BYTE *)(a1 + 4) != 0) != (v2 != 0))
    return 0;
LABEL_9:
  v4 = (*(_BYTE *)(a1 + 12) != 0) == (*(_BYTE *)(a2 + 12) != 0);
  if (*(_BYTE *)(a1 + 12) && *(_BYTE *)(a2 + 12))
    return *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v4;
}

{
  _BOOL8 result;
  uint64_t *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  uint64_t v19;

  result = WebCore::operator==(a1, a2);
  if (result)
  {
    v5 = (uint64_t *)(a2 + 24);
    v6 = *(unsigned __int8 **)(a1 + 24);
    if (v6)
      v7 = *((_DWORD *)v6 - 3);
    else
      v7 = 0;
    v8 = *v5;
    if (*v5)
      v9 = *(_DWORD *)(v8 - 12);
    else
      v9 = 0;
    if (v7 != v9)
      return 0;
    if (v6)
      v10 = &v6[32 * *((unsigned int *)v6 - 1)];
    else
      v10 = 0;
    if (v8)
      v8 += 32 * *(unsigned int *)(v8 - 4);
    if (v6)
    {
      v12 = *((unsigned int *)v6 - 1);
      v13 = &v6[32 * v12];
      if (*((_DWORD *)v6 - 3))
      {
        if ((_DWORD)v12)
        {
          v16 = 32 * v12;
          while (*v6 >= 0xFEu)
          {
            v6 += 32;
            v16 -= 32;
            if (!v16)
            {
              v6 = v13;
              goto LABEL_14;
            }
          }
        }
        goto LABEL_14;
      }
      v11 = &v6[32 * v12];
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v13 = &v6[32 * v12];
    v6 = v11;
LABEL_14:
    if (v10 == v6)
      return 1;
    v18 = v13;
    v19 = v8;
    v17 = v5;
    while (1)
    {
      v14 = WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::find(v5, v6);
      if (v19 == v14)
        return 0;
      result = WebCore::operator==((uint64_t)(v6 + 8), v14 + 8);
      if (result)
      {
        v15 = v6 + 32;
        v6 = v18;
        if (v15 != v18)
        {
          v6 = v15;
          while (*v6 >= 0xFEu)
          {
            v6 += 32;
            if (v6 == v18)
            {
              v6 = v18;
              break;
            }
          }
        }
        result = 1;
        v5 = v17;
        if (v6 != v10)
          continue;
      }
      return result;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4 == v5)
    return 1;
  result = 0;
  if (v4 && v5)
  {
    v7 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v7 != *(_DWORD *)(v5 + 12))
      return 0;
    if (memcmp(*(const void **)v4, *(const void **)v5, 4 * v7))
      return 0;
    v8 = *(unsigned int *)(v4 + 156);
    if ((_DWORD)v8 != *(_DWORD *)(v5 + 156))
      return 0;
    if (!(_DWORD)v8)
      return 1;
    v9 = *(_QWORD *)(v4 + 144);
    v10 = *(_QWORD *)(v5 + 144);
    if (*(_DWORD *)v9 != *(_DWORD *)v10 || *(_QWORD *)(v9 + 8) != *(_QWORD *)(v10 + 8))
      return 0;
    v12 = 0;
    v13 = (_QWORD *)(v9 + 24);
    v14 = (_QWORD *)(v10 + 24);
    while (v8 - 1 != v12)
    {
      v15 = *((_DWORD *)v13 - 2);
      v16 = *((_DWORD *)v14 - 2);
      v18 = *v13;
      v13 += 2;
      v17 = v18;
      v20 = *v14;
      v14 += 2;
      v19 = v20;
      ++v12;
      if (v15 != v16 || v17 != v19)
        return v12 >= v8;
    }
    v12 = *(unsigned int *)(v4 + 156);
    return v12 >= v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)v2 == *(_QWORD *)v3
    && (*(unsigned __int8 *)(v2 + 8) == *(unsigned __int8 *)(v3 + 8)
      ? (v4 = *(_QWORD *)(v2 + 16) == *(_QWORD *)(v3 + 16))
      : (v4 = 0),
        v4))
  {
    return *(_QWORD *)(v2 + 24) == *(_QWORD *)(v3 + 24);
  }
  else
  {
    return 0;
  }
}

{
  _WORD *v2;
  int v5;
  BOOL v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  _WORD *v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_WORD **)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  if ((*(_BYTE *)(a1 + 12) & 8) == 0 && ((v5 = *(_BYTE *)(a1 + 12) & 7, v5 != 4) ? (v6 = v5 == 2) : (v6 = 1), v6))
  {
    if (v2)
    {
      v7 = *((_DWORD *)v2 + 6);
      *((_DWORD *)v2 + 6) = v7 + 2;
      v8 = v2[14];
      if ((v8 & 1) != 0)
      {
        v19 = *((_QWORD *)v2 + 10);
        v10 = v19 ? *(_DWORD *)(v19 + 4) : 0;
      }
      else if ((v8 & 4) != 0 && (v9 = *((_QWORD *)v2 + 10)) != 0)
      {
        v10 = 0;
        do
        {
          ++v10;
          v9 = *(_QWORD *)(v9 + 56);
        }
        while (v9);
      }
      else
      {
        v10 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v2 + 208))(v2) ^ 1;
        v7 = *((_DWORD *)v2 + 6) - 2;
      }
      if (v7)
      {
        *((_DWORD *)v2 + 6) = v7;
      }
      else if ((v2[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 8);
  }
  if ((*(_BYTE *)(a2 + 12) & 8) == 0 && ((v11 = *(_BYTE *)(a2 + 12) & 7, v11 != 4) ? (v12 = v11 == 2) : (v12 = 1), v12))
  {
    v13 = *(_WORD **)a2;
    if (*(_QWORD *)a2)
    {
      v14 = *((_DWORD *)v13 + 6);
      *((_DWORD *)v13 + 6) = v14 + 2;
      v15 = v13[14];
      if ((v15 & 1) != 0)
      {
        v20 = *((_QWORD *)v13 + 10);
        v17 = v20 ? *(_DWORD *)(v20 + 4) : 0;
      }
      else if ((v15 & 4) != 0 && (v16 = *((_QWORD *)v13 + 10)) != 0)
      {
        v17 = 0;
        do
        {
          ++v17;
          v16 = *(_QWORD *)(v16 + 56);
        }
        while (v16);
      }
      else
      {
        v17 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v13 + 208))(v13) ^ 1;
        v14 = *((_DWORD *)v13 + 6) - 2;
      }
      if (v14)
      {
        *((_DWORD *)v13 + 6) = v14;
      }
      else if ((v13[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 8);
  }
  return v10 == v17 && ((*(unsigned __int8 *)(a2 + 12) ^ *(unsigned __int8 *)(a1 + 12)) & 7) == 0;
}

{
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8)
    || *(float *)(a1 + 12) != *(float *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  if (*(float *)(a1 + 20) != *(float *)(a2 + 20) || *(float *)(a1 + 24) != *(float *)(a2 + 24))
    return 0;
  if (*(float *)(a1 + 28) != *(float *)(a2 + 28) || *(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  if (*(float *)(a1 + 40) == *(float *)(a2 + 40))
    return *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return 0;
}

{
  BOOL v3;
  uint64_t v4;

  v3 = *(float *)(a1 + 8) == *(float *)(a2 + 8)
    && *(float *)(a1 + 12) == *(float *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  if (!v3
    || *(float *)(a1 + 20) != *(float *)(a2 + 20)
    || *(float *)(a1 + 24) != *(float *)(a2 + 24)
    || *(float *)(a1 + 28) != *(float *)(a2 + 28)
    || *(float *)(a1 + 32) != *(float *)(a2 + 32))
  {
    return 0;
  }
  v4 = 0;
  if (*(float *)(a1 + 36) == *(float *)(a2 + 36) && *(float *)(a1 + 40) == *(float *)(a2 + 40))
  {
    v4 = 0;
    if (*(float *)(a1 + 44) == *(float *)(a2 + 44) && *(float *)(a1 + 48) == *(float *)(a2 + 48))
    {
      v4 = 0;
      if (*(float *)(a1 + 52) == *(float *)(a2 + 52) && *(float *)(a1 + 56) == *(float *)(a2 + 56))
      {
        v4 = 0;
        if (*(float *)(a1 + 60) == *(float *)(a2 + 60) && *(float *)(a1 + 64) == *(float *)(a2 + 64))
        {
          v4 = 0;
          if (*(float *)(a1 + 68) == *(float *)(a2 + 68) && *(float *)(a1 + 72) == *(float *)(a2 + 72))
          {
            v4 = 0;
            if (*(float *)(a1 + 76) == *(float *)(a2 + 76) && *(float *)(a1 + 80) == *(float *)(a2 + 80))
            {
              v4 = 0;
              if (*(float *)(a1 + 84) == *(float *)(a2 + 84) && *(float *)(a1 + 88) == *(float *)(a2 + 88))
                return *(float *)(a1 + 96) == *(float *)(a2 + 96) && *(float *)(a1 + 92) == *(float *)(a2 + 92);
            }
          }
        }
      }
    }
  }
  return v4;
}

{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

{
  int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _BOOL8 v6;

  v2 = *(unsigned __int8 *)(a2 + 4);
  if (*(_BYTE *)(a1 + 4))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 4) != 0) != (v2 != 0))
      return 0;
  }
  else if (*(_DWORD *)a1 != *(_DWORD *)a2)
  {
    return 0;
  }
  v4 = *(unsigned __int8 *)(a2 + 12);
  if (*(_BYTE *)(a1 + 12))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 12) != 0) == (v4 != 0))
      goto LABEL_15;
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
LABEL_15:
  v6 = (*(_BYTE *)(a1 + 20) != 0) == (*(_BYTE *)(a2 + 20) != 0);
  if (*(_BYTE *)(a1 + 20) && *(_BYTE *)(a2 + 20))
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v6;
}

{
  uint64_t v4;
  int v5;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v10;
  char v11;
  _BOOL4 v12;
  char v14;
  char *v15;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  v7 = v5 == (_DWORD)v4 && v5 != -1;
  if ((_DWORD)v4 == -1 || !v7)
  {
    v9 = v5 == -1;
    if ((_DWORD)v4 == -1)
      v10 = v9;
    else
      v10 = v7;
    if (!v10)
      goto LABEL_26;
  }
  else
  {
    v15 = &v14;
    v11 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v4])(&v15, a1, a2);
    if ((v11 & 1) == 0)
      goto LABEL_26;
  }
  if (*(float *)(a1 + 16) == *(float *)(a2 + 16))
  {
    v12 = ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 0xF) == 0
       && ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 0x10) == 0;
    return *(float *)(a1 + 24) == *(float *)(a2 + 24) && v12;
  }
LABEL_26:
  v12 = 0;
  return *(float *)(a1 + 24) == *(float *)(a2 + 24) && v12;
}

uint64_t WebCore::JSDOMWindowBase::supportsRichSourceInfo(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3408) + 104))(*(_QWORD *)(a1 + 3408));
  if (result)
  {
    v2 = *(_QWORD *)(result + 24);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
      return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + 80) + 112) + 672) >> 46) & 1;
    else
      return 0;
  }
  return result;
}

_DWORD *WebCore::JSEvent::destroy(WebCore::JSEvent *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::Page *WebCore::Settings::setStorageBlockingPolicy(WebCore::Page *this, int a2)
{
  if (*((unsigned __int8 *)this + 548) != a2)
  {
    *((_BYTE *)this + 548) = a2;
    return WebCore::SettingsBase::storageBlockingPolicyChanged(this);
  }
  return this;
}

uint64_t WebCore::NativeImage::colorSpace(WebCore::NativeImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6));
}

void WebCore::HTMLTreeBuilder::processEndTagForInTable(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v3;
  _DWORD *v4;
  unsigned __int16 *v5;
  int v6;
  BOOL v7;
  char v8;
  uint64_t v9;

  v3 = a2[29];
  if (v3 == 116)
  {
    v4 = (_DWORD *)(a1 + 112);
    v5 = *(unsigned __int16 **)(a1 + 112);
    if (v5)
    {
      while (1)
      {
        v6 = *v5;
        if (v6 == 116)
          break;
        if (v6 == 119)
          return;
        v9 = *((_QWORD *)v5 + 1);
        if (v9)
        {
          if (v6 == 59 || (*(_WORD *)(v9 + 28) & 0xF000) == 0xB000)
            return;
        }
        else if (v6 == 59)
        {
          return;
        }
        v5 = (unsigned __int16 *)*((_QWORD *)v5 + 4);
        if (!v5)
          return;
      }
      WebCore::HTMLElementStack::popUntilPopped(v4, 116);
      WebCore::HTMLTreeBuilder::resetInsertionModeAppropriately(a1);
    }
  }
  else
  {
    v7 = v3 - 117 > 8 || ((1 << (v3 - 117)) & 0x173) == 0;
    if (v7 && (v3 > 0x3B || ((1 << v3) & 0x80000000C440000) == 0))
    {
      v8 = *(_BYTE *)(a1 + 226);
      *(_BYTE *)(a1 + 226) = 1;
      WebCore::HTMLTreeBuilder::processEndTagForInBody((WebCore::HTMLElementStack *)a1, a2);
      *(_BYTE *)(a1 + 226) = v8;
    }
  }
}

uint64_t *WebCore::HTMLElementStack::popAll(uint64_t *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  WTF *v6;
  void *v7;

  this[1] = 0;
  this[2] = 0;
  *((_DWORD *)this + 8) = 0;
  this[3] = 0;
  v2 = *this;
  if (*this)
  {
    v3 = (uint64_t)this;
    do
    {
      v4 = *(_QWORD *)(v2 + 8);
      if (v4)
        v5 = (*(_WORD *)(v4 + 28) & 8) == 0;
      else
        v5 = 1;
      if (!v5)
      {
        *(_DWORD *)(v4 + 24) += 2;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 760))(v4);
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
      v2 = *(_QWORD *)(*(_QWORD *)v3 + 32);
      *(_QWORD *)(*(_QWORD *)v3 + 32) = 0;
      this = *(uint64_t **)v3;
      *(_QWORD *)v3 = v2;
      if (this)
      {
        WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)this, (WTF::StringImpl *)a2);
        this = (uint64_t *)WTF::fastFree(v6, v7);
        v2 = *(_QWORD *)v3;
      }
    }
    while (v2);
  }
  return this;
}

uint64_t WebCore::HTMLElementStack::pop(WebCore::HTMLElementStack *this)
{
  _WORD *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t result;
  WTF *v6;
  void *v7;

  v2 = *(_WORD **)(*(_QWORD *)this + 8);
  if ((v2[14] & 8) != 0)
  {
    (*(void (**)(_WORD *))(*(_QWORD *)v2 + 760))(v2);
    v4 = *(_QWORD *)(*(_QWORD *)this + 32);
    *(_QWORD *)(*(_QWORD *)this + 32) = 0;
    result = *(_QWORD *)this;
    *(_QWORD *)this = v4;
    if (result)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v3);
      result = WTF::fastFree(v6, v7);
    }
    --*((_DWORD *)this + 8);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WebCore::HTMLElementStack::ElementRecord *WebCore::HTMLElementStack::popUntilPopped(_DWORD *a1, int a2)
{
  unsigned __int16 *v3;
  _WORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WebCore::HTMLElementStack::ElementRecord *result;
  WTF *v8;
  void *v9;
  _WORD *v11;
  WTF::StringImpl *v12;
  WebCore::HTMLElementStack::ElementRecord *v13;
  WTF *v14;
  void *v15;

  v3 = *(unsigned __int16 **)a1;
  if (**(unsigned __int16 **)a1 != a2)
  {
    while (1)
    {
      v11 = (_WORD *)*((_QWORD *)v3 + 1);
      if ((v11[14] & 8) == 0)
        break;
      (*(void (**)(_WORD *))(*(_QWORD *)v11 + 760))(v11);
      v3 = *(unsigned __int16 **)(*(_QWORD *)a1 + 32);
      *(_QWORD *)(*(_QWORD *)a1 + 32) = 0;
      v13 = *(WebCore::HTMLElementStack::ElementRecord **)a1;
      *(_QWORD *)a1 = v3;
      if (v13)
      {
        WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v13, v12);
        WTF::fastFree(v14, v15);
        v3 = *(unsigned __int16 **)a1;
      }
      --a1[8];
      if (*v3 == a2)
        goto LABEL_2;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x194154744);
  }
LABEL_2:
  v4 = (_WORD *)*((_QWORD *)v3 + 1);
  if ((v4[14] & 8) == 0)
    goto LABEL_11;
  (*(void (**)(_WORD *))(*(_QWORD *)v4 + 760))(v4);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  *(_QWORD *)(*(_QWORD *)a1 + 32) = 0;
  result = *(WebCore::HTMLElementStack::ElementRecord **)a1;
  *(_QWORD *)a1 = v6;
  if (result)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(result, v5);
    result = (WebCore::HTMLElementStack::ElementRecord *)WTF::fastFree(v8, v9);
  }
  --a1[8];
  return result;
}

void WebCore::HTMLElementStack::ElementRecord::~ElementRecord(WebCore::HTMLElementStack::ElementRecord *this, WTF::StringImpl *a2)
{
  WebCore::HTMLElementStack::ElementRecord *v3;
  WTF *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = (WebCore::HTMLElementStack::ElementRecord *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v3);
    WTF::fastFree(v4, v5);
  }
  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 4, a2);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

WTF::MonotonicTime *WebCore::Element::finishParsingChildren(WTF::MonotonicTime *this)
{
  uint64_t v1;
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::MonotonicTime *v16;
  uint64_t ElementChild;
  WTF::MonotonicTime *ElementSibling;
  WTF::MonotonicTime *v19;
  unint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v1 = (uint64_t)this;
  v2 = *((_WORD *)this + 15);
  if ((v2 & 0x200) == 0)
  {
    *((_WORD *)this + 15) = v2 & 0xFFFD;
    if ((*((_BYTE *)this + 22) & 8) == 0)
      return this;
    goto LABEL_3;
  }
  v8 = 0;
  *((_WORD *)this + 15) = v2 & 0xFDFF;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  LOBYTE(v21[0]) = 8;
  v9 = *((_QWORD *)this + 10);
  if (v9)
  {
    while ((*(_WORD *)(v9 + 28) & 8) == 0)
    {
      v8 = 0;
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        goto LABEL_16;
    }
    v8 = v9;
  }
LABEL_16:
  if (v8)
    v10 = 2;
  else
    v10 = 1;
  BYTE1(v22) = v10;
  this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *, _OWORD *))(*(_QWORD *)this + 376))(this, v21);
  *(_WORD *)(v1 + 30) &= ~2u;
  if ((*(_BYTE *)(v1 + 22) & 8) != 0)
  {
LABEL_3:
    v3 = *(uint64_t **)(v1 + 40);
    v4 = v3[1];
    if (*(_QWORD *)(v4 + 1944) && !*(_BYTE *)(v4 + 3405))
    {
      v5 = *(_QWORD *)(v1 + 64);
      if ((v5 & 0x4000000000000) == 0)
        goto LABEL_60;
      v11 = *v3;
      v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0 || v11 == 0;
      v13 = v11 + 216;
      if (v12)
        v13 = v4 + 1328;
      if (*(_BYTE *)(*(_QWORD *)v13 + 236))
      {
LABEL_60:
        v6 = *(_QWORD *)(v4 + 1272);
        if ((!v6 || (*(_BYTE *)(v6 + 70) & 4) == 0)
          && (*(_BYTE *)(v4 + 3362) || !*(_BYTE *)(v4 + 3390) || *(_BYTE *)(v4 + 3391)))
        {
          if ((v5 & 0x800000000000000) != 0)
          {
            v15 = v5 & 0xFFFFFFFFFFFFLL;
            if ((v5 & 0xFFFFFFFFFFFFLL) == 0)
              goto LABEL_47;
            if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              v15 = *(_QWORD *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
            if ((*(_BYTE *)(v15 + 100) & 0x80) == 0 || *(_QWORD *)(v1 + 80))
LABEL_47:
              this = WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)v1);
          }
          v7 = *(_QWORD *)(v1 + 88);
          if (v7)
          {
            while ((*(_WORD *)(v7 + 28) & 8) == 0)
            {
              v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
              if (!v7)
                return this;
            }
            v14 = *(_QWORD *)(v1 + 64);
            if ((v14 & 0x80000000000000) != 0)
            {
              this = WebCore::Style::invalidateForLastChildState((WTF::MonotonicTime *)v7, 0);
              v14 = *(_QWORD *)(v1 + 64);
            }
            if (v14 >> 62)
            {
              v20 = v14;
              if ((v14 & 0x8000000000000000) != 0)
              {
                v16 = (WTF::MonotonicTime *)v7;
                do
                {
                  if ((v14 & 0x4000000000000000) != 0)
                    WebCore::Element::invalidateStyleInternal(v16);
                  ElementChild = WebCore::ContainerNode::firstElementChild(v16);
                  if (ElementChild)
                  {
                    ElementSibling = (WTF::MonotonicTime *)ElementChild;
                    do
                    {
                      WebCore::Element::invalidateStyleForSubtreeInternal(ElementSibling);
                      ElementSibling = (WTF::MonotonicTime *)WebCore::Node::nextElementSibling((uint64_t)ElementSibling);
                    }
                    while (ElementSibling);
                  }
                  this = (WTF::MonotonicTime *)WebCore::Node::previousElementSibling((uint64_t)v16);
                  v16 = this;
                  v14 = v20;
                }
                while (this);
              }
              else if ((v14 & 0x4000000000000000) != 0)
              {
                v19 = (WTF::MonotonicTime *)v7;
                do
                {
                  WebCore::Element::invalidateStyleInternal(v19);
                  this = (WTF::MonotonicTime *)WebCore::Node::previousElementSibling((uint64_t)v19);
                  v19 = this;
                }
                while (this);
              }
              else
              {
                this = (WTF::MonotonicTime *)v7;
                do
                  this = (WTF::MonotonicTime *)WebCore::Node::previousElementSibling((uint64_t)this);
                while (this);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::MonotonicTime *WebCore::HTMLStyleElement::finishParsingChildren(WebCore::HTMLStyleElement *this, uint64_t a2, WTF::StringBuilder *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    WebCore::TextNodeTraversal::contentsAsString(this, a3, &v7);
    WebCore::InlineStyleSheetOwner::createSheet((WebCore::HTMLStyleElement *)((char *)this + 112), this, &v7);
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  *((_BYTE *)this + 112) = 0;
  return WebCore::Element::finishParsingChildren(this);
}

_BYTE *WebCore::SubresourceLoader::originalHeaders(WebCore::SubresourceLoader *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::ResourceRequest *v3;
  WebCore::ResourceRequest *v5;

  v1 = *((_QWORD *)this + 166);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(WebCore::ResourceRequest **)(v2 + 376);
  if (!v3)
    return 0;
  if ((*((_BYTE *)v3 + 184) & 1) == 0)
  {
    v5 = v3;
    WebCore::ResourceRequest::doUpdateResourceRequest(v3);
    v3 = v5;
    *((_BYTE *)v5 + 184) |= 1u;
  }
  return (char *)v3 + 96;
}

WTF *WebCore::RenderLayerCompositor::traverseUnchangedSubtree(unint64_t a1, const WebCore::RenderLayer *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t **a6, WebCore::RenderLayer *a7)
{
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  void *v17;
  WebCore::OverlapMapContainer::ClippingScope *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23;
  WTF *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  WebCore::RenderLayer *v34;
  const WebCore::RenderLayer *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)();
  uint64_t (*v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v71;
  float v72;
  float v73;
  float v75;
  float v77;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  uint64_t v83;
  float v84;
  unsigned int v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  unsigned int v90;
  float v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  WebCore::RenderLayer *v98;
  void *v99;
  WTF *v100;
  uint64_t v101;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  BOOL v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  BOOL v128;
  int v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  WTF *v136;
  _QWORD *v137;
  WTF *v138;
  WTF *result;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  char v173;
  WebCore::RenderObject *v174;
  uint64_t v175;
  WebCore::RenderObject *v176;
  int isRunningTransformAnimation;
  double v178;
  int v179;
  void **v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  WebCore::RenderLayerBacking *v187;
  uint64_t v188;
  uint64_t v189;
  float v190;
  int v191;
  int v192;
  double v193;
  int v194;
  double v195;
  int v196;
  double v197;
  int v198;
  double v199;
  int v200;
  uint64_t v201;
  signed int v202;
  int v203;
  signed int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  int v212;
  WebCore::RenderLayerScrollableArea *v213;
  uint64_t v214;
  _BOOL4 v215;
  WebCore::RenderLayerScrollableArea *v216;
  unsigned int v217;
  uint64_t v218;
  const WebCore::LayoutRect *v219;
  _BOOL4 v220;
  uint64_t v221;
  WebCore::RenderLayerScrollableArea *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t Cell;
  WebCore::RenderTableCell *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  WebCore::RenderLayerScrollableArea *v234;
  unsigned int v235;
  uint64_t v236;
  const WebCore::LayoutRect *v237;
  BOOL v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  int v244;
  int v245;
  WebCore::RenderLayer *v246;
  WebCore::RenderLayer *v247;
  const WebCore::RenderLayer *v248;
  unint64_t v249;
  unint64_t v250;
  char v251;
  __int128 v252;
  uint64_t v253;
  char v254;
  int v255;
  __int16 v256;
  char v257;
  __int128 v258;
  WTF *v259;
  uint64_t v260;
  _BYTE v261[48];
  int v262;
  int32x4_t v263;
  uint64_t v264;
  uint64_t v265;
  float32x4_t v266;
  __int128 v267;
  float v268;
  float v269;
  float v270;
  float v271;

  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a3);
  WebCore::RenderLayer::updateLayerListsIfNeeded((WebCore::RenderLayer *)a3);
  v15 = *(_QWORD *)(a3 + 256);
  v258 = 0uLL;
  v259 = (WTF *)v261;
  v16.n128_u64[0] = 2;
  v260 = 2;
  v262 = 0;
  if (v15)
  {
    if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    {
      isRunningTransformAnimation = 0;
    }
    else
    {
      isRunningTransformAnimation = WebCore::RenderLayerCompositor::isRunningTransformAnimation((WebCore::RenderLayerCompositor *)*(unsigned int *)(a1 + 128), *(WebCore::RenderLayerModelObject **)(a3 + 32));
      BYTE1(v262) = isRunningTransformAnimation;
    }
    WebCore::RenderGeometryMap::pushMappingsToAncestor((WebCore::RenderGeometryMap *)(a4 + 32), (WTF **)a3, a2, isRunningTransformAnimation == 0, v16, v14);
  }
  else
  {
    WebCore::RenderGeometryMap::pushMappingsToAncestor((WebCore::RenderGeometryMap *)(a4 + 32), (WTF **)a3, a2, 1, v16, v14);
    if (!*(_BYTE *)(a4 + 1120) && *((_BYTE *)a5 + 25))
      WebCore::RenderLayerCompositor::computeExtent(a1, a4, (uint64_t *)a3, (uint64_t)&v258, v19);
  }
  v20 = *(_QWORD *)(a3 + 80);
  if (v20)
  {
    v20 = *(_QWORD *)(v20 + 8);
    if (v20)
    {
      v159 = *((unsigned int *)a6 + 3);
      if ((_DWORD)v159)
      {
        v160 = (WTF *)*a6;
        v161 = 56 * v159;
        while (1)
        {
          v162 = *(_QWORD *)v160;
          if (*(_QWORD *)v160)
            v162 = *(_QWORD *)(v162 + 8);
          if (v20 == v162)
            break;
          v160 = (WTF *)((char *)v160 + 56);
          v161 -= 56;
          if (!v161)
            goto LABEL_244;
        }
      }
      else
      {
LABEL_244:
        v160 = 0;
      }
      WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>((uint64_t)&v267, (uint64_t)v160 + 8, (WTF **)a3);
      LODWORD(v20) = 1;
    }
  }
  if ((*(_QWORD *)(a3 + 24) & 0x4ALL) != 0)
    v21 = a3;
  else
    v21 = *((_QWORD *)a5 + 2);
  v253 = v21;
  v22 = *a5;
  v252 = *a5;
  v254 = 0;
  LODWORD(v22) = *(_DWORD *)((char *)a5 + 25);
  v255 = v22;
  v256 = 0;
  v257 = 0;
  v246 = a7;
  if (v15)
  {
    LOBYTE(v255) = 1;
    v250 = vmovl_u8(*(uint8x8_t *)&v22).u64[0];
    v252 = (unint64_t)a3;
    WebCore::LayerOverlapMap::pushCompositingContainer((WebCore::LayerOverlapMap *)a4, (const WebCore::RenderLayer *)a3);
    WebCore::RenderLayerCompositor::computeExtent(a1, a4, (uint64_t *)a3, (uint64_t)&v258, v178);
    v179 = BYTE1(v262);
    *(_QWORD *)&v22 = v250;
    HIBYTE(v255) = BYTE1(v262) | BYTE6(v250);
    if (BYTE1(v262))
      v179 = *((unsigned __int8 *)a5 + 28);
    BYTE2(v262) = (v179 | BYTE2(v262)) != 0;
    goto LABEL_223;
  }
  if ((_DWORD)v20)
  {
    WebCore::LayerOverlapMap::pushCompositingContainer((WebCore::LayerOverlapMap *)a4, (const WebCore::RenderLayer *)a3);
    *((_QWORD *)&v252 + 1) = a3;
LABEL_223:
    v245 = 1;
    goto LABEL_12;
  }
  v245 = 0;
LABEL_12:
  v23 = (uint64_t *)*((_QWORD *)a5 + 2);
  v24 = *(WTF **)(a3 + 80);
  if (v24 && *((_QWORD *)v24 + 1))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 24) + 8) + 40) + 8)
                  + 3405))
    {
      *(_QWORD *)(a3 + 80) = 0;
    }
    else
    {
      WebCore::RenderLayer::clearClipRectsIncludingDescendants((WTF *)a3, (void *)4);
      v24 = *(WTF **)(a3 + 80);
      *(_QWORD *)(a3 + 80) = 0;
      if (!v24)
        goto LABEL_13;
    }
    if (*(_DWORD *)v24 == 1)
      WTF::fastFree(v24, v17);
    else
      --*(_DWORD *)v24;
  }
LABEL_13:
  v248 = a2;
  v249 = a1;
  if (v15 && a6[2])
  {
    WebCore::RenderLayerCompositor::computeExtent(a1, a4, (uint64_t *)a3, (uint64_t)&v258, *(double *)&v22);
    *(_QWORD *)&v22 = v258;
    v267 = v258;
    if (!v23 || a6[2] != v23)
      goto LABEL_365;
    v25 = *((_DWORD *)a6 + 3);
    if (*((_BYTE *)a6 + 40))
    {
      if (v25 <= 9)
        goto LABEL_19;
LABEL_365:
      WebCore::RenderLayerCompositor::BackingSharingState::endBackingSharingSequence((WTF **)a6, (WebCore::RenderLayer *)a3);
      goto LABEL_19;
    }
    if (!v25)
    {
      __break(0xC471u);
      JUMPOUT(0x194156018);
    }
    v213 = *(WebCore::RenderLayerScrollableArea **)(*(_QWORD *)(**a6 + 8) + 264);
    if (!v213)
      goto LABEL_365;
    if (!WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v213))
      goto LABEL_365;
    v216 = *(WebCore::RenderLayerScrollableArea **)(a3 + 264);
    if (!v216 || !WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v216))
      goto LABEL_365;
    v217 = *((_DWORD *)a6 + 3);
    if (v217)
    {
      v218 = 56 * v217 - 56;
      v219 = (const WebCore::LayoutRect *)(*a6 + 5);
      do
      {
        v220 = WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v267, v219);
        if (v220)
          break;
        v221 = v218;
        v218 -= 56;
        v219 = (const WebCore::LayoutRect *)((char *)v219 + 56);
      }
      while (v221);
      if (v220)
        goto LABEL_365;
    }
  }
LABEL_19:
  v26 = (uint64_t)a6[2];
  v27 = (void *)*((unsigned int *)a6 + 3);
  if ((_DWORD)v27 && (v28 = **a6) != 0)
    v29 = *(_QWORD *)(v28 + 8);
  else
    v29 = 0;
  v251 = 0;
  v30 = *(_QWORD *)(a3 + 96);
  if (v30)
  {
    v144 = *(unsigned int *)(v30 + 12);
    if ((_DWORD)v144)
    {
      v145 = *(uint64_t **)v30;
      v146 = 8 * v144;
      do
      {
        v147 = *v145++;
        v148 = v29;
        WebCore::RenderLayerCompositor::traverseUnchangedSubtree(v249, a3, v147, a4, &v252, a6, &v251);
        v29 = v148;
        v146 -= 8;
      }
      while (v146);
    }
  }
  v31 = *(_QWORD *)(a3 + 104);
  if (v31)
  {
    v149 = *(unsigned int *)(v31 + 12);
    if ((_DWORD)v149)
    {
      v150 = *(uint64_t **)v31;
      v151 = 8 * v149;
      do
      {
        v152 = *v150++;
        v153 = v29;
        WebCore::RenderLayerCompositor::traverseUnchangedSubtree(v249, a3, v152, a4, &v252, a6, &v251);
        v29 = v153;
        v151 -= 8;
      }
      while (v151);
    }
  }
  v32 = *(_QWORD *)(a3 + 88);
  if (v32)
  {
    v154 = *(unsigned int *)(v32 + 12);
    if ((_DWORD)v154)
    {
      v155 = *(uint64_t **)v32;
      v156 = 8 * v154;
      do
      {
        v157 = *v155++;
        v158 = v29;
        WebCore::RenderLayerCompositor::traverseUnchangedSubtree(v249, a3, v157, a4, &v252, a6, &v251);
        v29 = v158;
        v156 -= 8;
      }
      while (v156);
    }
  }
  if (v251)
  {
    LOBYTE(v33) = 1;
    v34 = v246;
    v35 = v248;
  }
  else
  {
    v33 = *(_QWORD **)(a3 + 200);
    v34 = v246;
    v35 = v248;
    if (v33)
    {
      *(_QWORD *)&v22 = v33[2];
      if (*(double *)&v22 != 0.0)
        goto LABEL_373;
      *(_QWORD *)&v22 = v33[3];
      if (*(double *)&v22 != 0.0)
        goto LABEL_373;
      *(_QWORD *)&v22 = v33[6];
      if (*(double *)&v22 == 0.0
        && (*(_QWORD *)&v22 = v33[7], *(double *)&v22 == 0.0)
        && (*(_QWORD *)&v22 = v33[8], *(double *)&v22 == 0.0)
        && (*(_QWORD *)&v22 = v33[9], *(double *)&v22 == 0.0)
        && (*(_QWORD *)&v22 = v33[10], *(double *)&v22 == 1.0)
        && (*(_QWORD *)&v22 = v33[11], *(double *)&v22 == 0.0)
        && (*(_QWORD *)&v22 = v33[14], *(double *)&v22 == 0.0))
      {
        *(_QWORD *)&v22 = v33[15];
        LOBYTE(v33) = *(double *)&v22 != 1.0;
      }
      else
      {
LABEL_373:
        LOBYTE(v33) = 1;
      }
    }
  }
  *(_BYTE *)v34 |= v33;
  v36 = v255;
  v37 = *(_QWORD *)(a3 + 256);
  *((_BYTE *)a5 + 24) |= v254 | (v37 != 0);
  if (!v36
    && (!v37
     || (v214 = v29,
         v215 = WebCore::RenderLayerCompositor::clipsCompositingDescendants(*(WebCore::RenderLayerCompositor **)(a3 + 24), *(const WebCore::RenderLayer **)(a3 + 32)), v29 = v214, !v215))|| (_BYTE)v262 && BYTE2(v262))
  {
    *((_BYTE *)a5 + 25) = 0;
  }
  if (*((_BYTE *)a5 + 29))
  {
LABEL_268:
    v173 = 1;
    goto LABEL_269;
  }
  if (v35)
  {
    v38 = *(_QWORD *)(a3 + 256);
    if (!v38)
    {
      v39 = 0;
      *((_BYTE *)a5 + 29) = 0;
      goto LABEL_44;
    }
    v173 = 0;
    if (v35 != (const WebCore::RenderLayer *)a3)
    {
      v174 = *(WebCore::RenderObject **)(a3 + 32);
      if ((*((_DWORD *)v174 + 5) & 0x1800000) == 0x1000000)
      {
        v175 = v29;
        v176 = WebCore::RenderObject::containingBlock(v174);
        if (v176)
        {
          v29 = v175;
          while (*((_BYTE *)v176 + 46) != 49)
          {
            if (*((const WebCore::RenderLayer **)v176 + 18) == v35)
              goto LABEL_275;
            v176 = WebCore::RenderObject::containingBlock(v176);
            v29 = v175;
            v173 = 1;
            if (!v176)
              goto LABEL_269;
          }
          goto LABEL_268;
        }
        v173 = 1;
        v29 = v175;
      }
    }
  }
  else
  {
LABEL_275:
    v173 = 0;
  }
LABEL_269:
  v38 = *(_QWORD *)(a3 + 256);
  *((_BYTE *)a5 + 29) = v173;
  if (v38)
  {
    v39 = 1;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 88) + 40) + 636) & 0x1F00000) != 0x100000)
    {
      *((_BYTE *)a5 + 30) = 1;
      goto LABEL_273;
    }
  }
  else
  {
    v39 = 0;
  }
LABEL_44:
  v40 = *(_QWORD *)(a3 + 24);
  if ((v40 & 0x400000000000) == 0 || (v40 & 0xA) != 0)
  {
    if (!v39)
      goto LABEL_46;
  }
  else
  {
    *((_BYTE *)a5 + 30) = 1;
    if ((v39 & 1) == 0)
      goto LABEL_46;
  }
LABEL_273:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 88) + 40) + 72) + 20))
  {
LABEL_362:
    *((_BYTE *)a5 + 31) = 1;
    goto LABEL_47;
  }
LABEL_46:
  v41 = *(_QWORD *)(a3 + 24);
  if ((v41 & 0x20) != 0 && (v41 & 0x10) == 0)
    goto LABEL_362;
LABEL_47:
  v42 = *((_QWORD *)a5 + 2);
  if (v38)
  {
    v166 = *(_QWORD *)(a3 + 80);
    if (v166)
    {
      v186 = *(_QWORD *)(v166 + 8);
      if (v186)
      {
        v187 = *(WebCore::RenderLayerBacking **)(v186 + 256);
        if (v187)
        {
          v188 = v29;
          WebCore::RenderLayerBacking::removeBackingSharingLayer(v187, (WebCore::RenderLayer *)a3);
          v29 = v188;
        }
      }
    }
    v167 = *((unsigned int *)a6 + 3);
    if ((_DWORD)v167)
    {
      v168 = 56 * v167;
      v169 = (uint64_t)(*a6 + 1);
      v243 = v26;
      do
      {
        v170 = v29;
        WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>(v169, (_QWORD *)a3);
        v29 = v170;
        v26 = v243;
        v169 += 56;
        v168 -= 56;
      }
      while (v168);
    }
  }
  v43 = a6[2];
  if (v43 != (uint64_t *)a3)
  {
    if (!v42 || !*(_QWORD *)(a3 + 256))
      goto LABEL_51;
    if ((*(_BYTE *)(a3 + 27) & 4) == 0)
    {
      v171 = v29;
      WebCore::RenderLayerCompositor::computeExtent(v249, a4, (uint64_t *)a3, (uint64_t)&v258, *(double *)&v22);
      if (!v43)
      {
        WebCore::RenderLayerCompositor::BackingSharingState::startBackingSharingSequence((uint64_t)a6, (WTF **)a3, v258, *((uint64_t *)&v258 + 1), v42);
        goto LABEL_51;
      }
      v267 = v258;
      if (a6[2] == (uint64_t *)v42)
      {
        v172 = *((_DWORD *)a6 + 3);
        if (*((_BYTE *)a6 + 40))
        {
          v29 = v171;
          v35 = v248;
          if (v172 < 0xA)
          {
LABEL_258:
            WebCore::RenderLayerCompositor::BackingSharingState::addBackingSharingCandidate((uint64_t)a6, (uint64_t *)a3, v258, *((uint64_t *)&v258 + 1), v26, v27);
            goto LABEL_51;
          }
          goto LABEL_392;
        }
        if (!v172)
        {
          __break(0xC471u);
          JUMPOUT(0x194156020);
        }
        v222 = *(WebCore::RenderLayerScrollableArea **)(*(_QWORD *)(**a6 + 8) + 264);
        if (v222)
        {
          if (WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v222))
          {
            v234 = *(WebCore::RenderLayerScrollableArea **)(a3 + 264);
            if (v234)
            {
              if (WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v234))
              {
                v235 = *((_DWORD *)a6 + 3);
                if (!v235)
                {
                  v35 = v248;
                  goto LABEL_258;
                }
                v236 = 56 * v235 - 56;
                v237 = (const WebCore::LayoutRect *)(*a6 + 5);
                do
                {
                  v238 = WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v267, v237);
                  if (v238)
                    break;
                  v239 = v236;
                  v236 -= 56;
                  v237 = (const WebCore::LayoutRect *)((char *)v237 + 56);
                }
                while (v239);
                v35 = v248;
                v29 = v171;
                if (!v238)
                  goto LABEL_258;
                goto LABEL_392;
              }
            }
          }
        }
      }
      v35 = v248;
      v29 = v171;
    }
LABEL_392:
    v223 = v29;
    WebCore::RenderLayerBacking::clearBackingSharingLayers(*(void ***)(a3 + 256));
    if (v223)
    {
      if (*((_DWORD *)a6 + 3))
      {
        v224 = **a6;
        if (v224)
          v224 = *(_QWORD *)(v224 + 8);
      }
      else
      {
        v224 = 0;
      }
      v35 = v248;
      if (v224 == v223)
        WebCore::RenderLayerCompositor::BackingSharingState::endBackingSharingSequence((WTF **)a6, (WebCore::RenderLayer *)a3);
    }
    goto LABEL_51;
  }
  WebCore::RenderLayerCompositor::BackingSharingState::endBackingSharingSequence((WTF **)a6, (WebCore::RenderLayer *)a3);
  v180 = *(void ***)(a3 + 256);
  if (v180)
    WebCore::RenderLayerBacking::clearBackingSharingLayers(v180);
LABEL_51:
  if ((_QWORD)v252)
  {
    v44 = v249;
    if ((*(_BYTE *)(v252 + 24) & 1) != 0 && !*((_QWORD *)&v252 + 1))
      goto LABEL_181;
  }
  else
  {
    v44 = v249;
    if (!*((_QWORD *)&v252 + 1))
      goto LABEL_181;
  }
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    goto LABEL_181;
  if (!(_BYTE)v262)
  {
    v263 = 0uLL;
    if (BYTE1(v262))
    {
      BYTE2(v262) = WebCore::RenderLayer::getOverlapBoundsIncludingChildrenAccountingForTransformAnimations((uint64_t *)a3, v263.i64, 0, *(double *)&v22) ^ 1;
      v62 = v263;
      goto LABEL_83;
    }
    v45 = *(_QWORD *)(a3 + 32);
    v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 88) + 32) + 32);
    v47 = *(unsigned int *)(v46 + 20);
    if ((_DWORD)v47)
    {
      v181 = *(_QWORD **)(v46 + 8);
      v182 = 8 * v47;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v181 + 80))(*v181) & 1) == 0)
      {
        ++v181;
        v182 -= 8;
        if (!v182)
        {
          v45 = *(_QWORD *)(a3 + 32);
          v35 = v248;
          goto LABEL_58;
        }
      }
      *(_QWORD *)&v267 = 0;
      v60 = WebCore::RenderLayer::calculateLayerBounds(a3, (const WebCore::RenderLayerModelObject *)a3, &v267, 0x86u, *(double *)&v22);
      v35 = v248;
      goto LABEL_82;
    }
LABEL_58:
    v48 = 0;
    v267 = 0uLL;
    v49 = *(_BYTE *)(v45 + 45);
    if ((v49 & 0x20) != 0)
    {
      ++*(_DWORD *)(v45 + 16);
      v48 = v45;
      if ((*(_BYTE *)(v45 + 20) & 1) == 0)
      {
        *(_QWORD *)&v267 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v45, (WebCore::RenderObject *)v17);
        *((_QWORD *)&v267 + 1) = v233;
        v48 = v45;
        goto LABEL_79;
      }
    }
    if ((*(_BYTE *)(v45 + 52) & 7) == 4 && (*(_BYTE *)(v45 + 53) & 1) == 0)
    {
      ++*(_DWORD *)(v45 + 16);
      *(_QWORD *)&v267 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v45, (const WebCore::RenderLayerModelObject *)v17, *(double *)&v22);
      *((_QWORD *)&v267 + 1) = v225;
      v226 = *(_DWORD *)(v45 + 16);
      if (!v226)
      {
        __break(0xC471u);
        JUMPOUT(0x194155FA0);
      }
      *(_DWORD *)(v45 + 16) = v226 - 1;
      v35 = v248;
      v44 = v249;
    }
    else
    {
      if (*(_BYTE *)(v45 + 46) != 39)
      {
        if ((v49 & 4) == 0)
          v45 = 0;
        v51 = *(_QWORD *)(v45 + 88);
        v52 = *(_QWORD *)(*(_QWORD *)(v51 + 32) + 48);
        if (*(_QWORD *)(v52 + 8))
        {
          while (!*(_QWORD *)(v52 + 16))
          {
            v52 = *(_QWORD *)(v52 + 8);
            if (!v52)
              goto LABEL_71;
          }
        }
        else
        {
          if (*(_QWORD *)(v52 + 16))
            v53 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v53 = 0;
          if (!v53)
          {
LABEL_71:
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 40) + 216) + 8))
              v54 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v54 = 0;
            if (!v54)
            {
              v55 = *(_QWORD *)(v45 + 192);
              if (v55)
              {
                v56 = *(_QWORD *)(v55 + 20);
                v57 = (uint64_t *)(v55 + 28);
              }
              else
              {
                v56 = 0;
                v57 = (uint64_t *)(v45 + 160);
              }
              v58 = *v57;
              *(_QWORD *)&v267 = v56;
              *((_QWORD *)&v267 + 1) = v58;
              goto LABEL_78;
            }
          }
        }
        v266.i64[0] = 0;
        *(_QWORD *)&v267 = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v45, (const WebCore::LayoutPoint *)&v266);
        *((_QWORD *)&v267 + 1) = v241;
        WebCore::RenderBox::flipForWritingMode(v45, (WebCore::LayoutRect *)&v267);
        goto LABEL_78;
      }
      ++*(_DWORD *)(v45 + 16);
      Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v45);
      if (Cell)
      {
        v228 = (WebCore::RenderTableCell *)Cell;
        do
        {
          v229 = *((_QWORD *)v228 + 20);
          v266.i64[0] = 0;
          v266.i64[1] = v229;
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v267, (const WebCore::LayoutRect *)&v266);
          v230 = *(_QWORD *)(v45 + 192);
          if (v230)
          {
            v240 = *(_QWORD *)(v230 + 20);
            v231 = *(_QWORD *)(v230 + 28);
            v264 = v240;
            v265 = v231;
            if (v240)
            {
LABEL_407:
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v267, (const WebCore::LayoutRect *)&v264);
              goto LABEL_408;
            }
          }
          else
          {
            v231 = *(_QWORD *)(v45 + 160);
            v264 = 0;
            v265 = v231;
          }
          if (v229 != v231)
            goto LABEL_407;
LABEL_408:
          v228 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v228);
        }
        while (v228);
      }
      v232 = *(_DWORD *)(v45 + 16);
      if (!v232)
      {
        __break(0xC471u);
        JUMPOUT(0x194155FC0);
      }
      *(_DWORD *)(v45 + 16) = v232 - 1;
      v35 = v248;
      v44 = v249;
    }
LABEL_78:
    if ((v49 & 0x20) == 0)
    {
LABEL_81:
      v61 = *((_QWORD *)&v267 + 1);
      v60 = v267;
LABEL_82:
      v62.i64[0] = v60;
      v62.i64[1] = v61;
LABEL_83:
      v266 = vmulq_f32(vcvtq_f32_s32(v62), (float32x4_t)vdupq_n_s32(0x3C800000u));
      WebCore::RenderGeometryMap::mapToContainer((WTF *)(a4 + 32), (const WebCore::FloatRect *)&v266, 0, (float *)&v267);
      v64 = v268;
      v63 = v269;
      if (v270 >= v268)
        v65 = v268;
      else
        v65 = v270;
      v66 = *((float *)&v267 + 1);
      v67 = *(float *)&v267;
      if (*((float *)&v267 + 2) >= *(float *)&v267)
        v68 = *(float *)&v267;
      else
        v68 = *((float *)&v267 + 2);
      if (v65 >= v68)
        v65 = v68;
      v69 = fabsf(v65);
      if (v69 == INFINITY || v69 > 2147500000.0)
        v65 = (float)((SLODWORD(v65) >> 31) ^ 0x7FFFFFFF);
      if (v271 >= v269)
        v71 = v269;
      else
        v71 = v271;
      if (*((float *)&v267 + 3) >= *((float *)&v267 + 1))
        v72 = *((float *)&v267 + 1);
      else
        v72 = *((float *)&v267 + 3);
      if (v71 >= v72)
        v71 = v72;
      v73 = fabsf(v71);
      if (v73 == INFINITY || v73 > 2147500000.0)
        v71 = (float)((SLODWORD(v71) >> 31) ^ 0x7FFFFFFF);
      if (*(float *)&v267 < *((float *)&v267 + 2))
        v67 = *((float *)&v267 + 2);
      if (v268 < v270)
        v64 = v270;
      if (v67 >= v64)
        v64 = v67;
      v75 = fabsf(v64);
      if (v75 == INFINITY || v75 > 2147500000.0)
        v64 = (float)((SLODWORD(v64) >> 31) ^ 0x7FFFFFFF);
      if (*((float *)&v267 + 1) < *((float *)&v267 + 3))
        v66 = *((float *)&v267 + 3);
      if (v269 < v271)
        v63 = v271;
      if (v66 >= v63)
        v63 = v66;
      v77 = fabsf(v63);
      if (v77 == INFINITY || v77 > 2147500000.0)
        v63 = (float)((SLODWORD(v63) >> 31) ^ 0x7FFFFFFF);
      v79 = v64 - v65;
      v80 = v63 - v71;
      v81 = floorf(v65 * 64.0);
      if (v81 > -2147500000.0)
        v82 = (int)v81;
      else
        v82 = 0x80000000;
      if (v81 < 2147500000.0)
        v83 = v82;
      else
        v83 = 0x7FFFFFFFLL;
      v84 = floorf(v71 * 64.0);
      if (v84 > -2147500000.0)
        v85 = (int)v84;
      else
        v85 = 0x80000000;
      if (v84 < 2147500000.0)
        v86 = v85;
      else
        v86 = 0x7FFFFFFFLL;
      v87 = v65 + v79;
      v88 = v71 + v80;
      v89 = ceilf(v87 * 64.0);
      if (v89 >= 2147500000.0)
      {
        v90 = 0x7FFFFFFF;
      }
      else if (v89 <= -2147500000.0)
      {
        v90 = 0x80000000;
      }
      else
      {
        v90 = (int)v89;
      }
      v91 = ceilf(v88 * 64.0);
      if (v91 >= 2147500000.0)
      {
        v92 = 0x7FFFFFFF;
      }
      else if (v91 <= -2147500000.0)
      {
        v92 = 0x80000000;
      }
      else
      {
        v92 = (int)v91;
      }
      v93 = v90 - v83;
      if (__OFSUB__(v90, (_DWORD)v83))
        v93 = (v90 >> 31) + 0x7FFFFFFF;
      v94 = v92 - v86;
      if (__OFSUB__(v92, (_DWORD)v86))
        v94 = (v92 >> 31) + 0x7FFFFFFF;
      *(_QWORD *)&v258 = v83 | (v86 << 32);
      *((_QWORD *)&v258 + 1) = v93 | (unint64_t)(v94 << 32);
      if (v93 < 1 || (int)v94 <= 0)
        *((_QWORD *)&v258 + 1) = 0x4000000040;
      v95 = *(_QWORD *)(a3 + 32);
      if ((*(_DWORD *)(v95 + 20) & 0x1800000) == 0x1000000)
      {
        v141 = *(_QWORD *)(a3 + 32);
        if ((*(_BYTE *)(v95 + 45) & 2) != 0)
          v141 = *(_QWORD *)(*(_QWORD *)(v95 + 32) + 8);
        if ((*(_QWORD *)(v141 + 96) & 0x380000) == 0x300000)
        {
          v142 = WebCore::RenderObject::container((WebCore::RenderObject *)v95);
          if (v142 == *(_QWORD *)(v44 + 8))
          {
            *(_QWORD *)&v258 = WebCore::LocalFrameView::fixedScrollableAreaBoundsInflatedForScrolling(*(WebCore::LocalFrameView **)(v142 + 248), (const WebCore::LayoutRect *)&v258);
            *((_QWORD *)&v258 + 1) = v143;
          }
        }
      }
      LOBYTE(v262) = 1;
      goto LABEL_157;
    }
LABEL_79:
    v59 = *(_DWORD *)(v48 + 16);
    if (!v59)
    {
      __break(0xC471u);
      JUMPOUT(0x194155B8CLL);
    }
    *(_DWORD *)(v48 + 16) = v59 - 1;
    goto LABEL_81;
  }
LABEL_157:
  v96 = -1073741808;
  v97 = 2147483615;
  WebCore::RenderLayerCompositor::computeClippingScopes(v44, (_QWORD *)a3, (uint64_t)&v258);
  if ((*(_BYTE *)(a3 + 27) & 0x10) != 0)
  {
    if (!HIDWORD(v260))
    {
      __break(0xC471u);
      JUMPOUT(0x194155F80);
    }
    v98 = (WebCore::RenderLayer *)*((_QWORD *)v259 + 3 * HIDWORD(v260) - 3);
    *(_QWORD *)&v267 = v98;
    DWORD2(v267) = 5;
    BYTE12(v267) = 0;
    WebCore::RenderLayer::parentClipRects((WTF *)&v266, a3, (uint64_t)&v267);
    v100 = (WTF *)v266.i64[0];
    v101 = *(_QWORD *)(a3 + 32);
    v102 = (*(_DWORD *)(v101 + 96) >> 19) & 7;
    if (v102 == 2)
    {
      v103 = (unsigned int *)(v266.i64[0] + 48);
    }
    else if (v102 == 6)
    {
      v103 = (unsigned int *)(v266.i64[0] + 28);
    }
    else
    {
      v103 = (unsigned int *)(v266.i64[0] + 8);
    }
    v104 = *v103;
    v105 = v103[1];
    v106 = v103[2];
    v107 = v103[3];
    v247 = v98;
    if (*(_BYTE *)(v266.i64[0] + 4))
    {
      v183 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8) + 40) + 8) + 1944);
      v184 = *((_QWORD *)v98 + 4);
      v108 = v104;
      v109 = v105;
      if (v184 == v183)
      {
        if (v104 != -1073741808
          || (_DWORD)v105 != -1073741808
          || v106 != 2147483615
          || (v108 = -1073741808, v109 = 3221225488, v107 != 2147483615))
        {
          v242 = v107;
          v244 = v106;
          v185 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v183 + 248));
          v108 = v104 + v185;
          if (__OFADD__(v104, (_DWORD)v185))
            v108 = (v104 >> 31) + 0x7FFFFFFF;
          v109 = (v105 + HIDWORD(v185));
          if (__OFADD__((_DWORD)v105, HIDWORD(v185)))
            v109 = (v105 >> 31) + 0x7FFFFFFF;
          v107 = v242;
          v106 = v244;
        }
      }
    }
    else
    {
      v108 = *v103;
      v109 = v103[1];
    }
    if (*(_DWORD *)v100 == 1)
    {
      v163 = v100;
      v164 = v106;
      v165 = v107;
      WTF::fastFree(v163, v99);
      v107 = v165;
      v106 = v164;
    }
    else
    {
      --*(_DWORD *)v100;
    }
    v35 = v248;
    if (v108 != -1073741808
      || (_DWORD)v109 != -1073741808
      || v106 != 2147483615
      || (LODWORD(v110) = -1073741808,
          LODWORD(v111) = -1073741808,
          v112 = 2147483615,
          v113 = 2147483615,
          v107 != 2147483615))
    {
      v210 = v108 | (unint64_t)(v109 << 32);
      v211 = v106;
      v212 = v107;
      v111 = WebCore::RenderLayer::convertToLayerCoords(v247, *(WebCore::RenderLayer **)(*(_QWORD *)(v249 + 8) + 144), v210, 0);
      v110 = HIDWORD(v111);
      v112 = v212;
      v113 = v211;
    }
  }
  else
  {
    v266.i64[0] = *(_QWORD *)(*(_QWORD *)(v44 + 8) + 144);
    v266.i32[2] = 2;
    v266.i8[12] = 1;
    WebCore::RenderLayer::backgroundClipRect((unsigned int *)&v267, a3, (uint64_t)&v266);
    LODWORD(v111) = v267;
    LODWORD(v110) = DWORD1(v267);
    v113 = DWORD2(v267);
    v112 = HIDWORD(v267);
  }
  v115 = v258;
  v114 = DWORD1(v258);
  v116 = *((_QWORD *)&v258 + 1);
  v117 = (_DWORD)v111 == -1073741808 && (_DWORD)v110 == -1073741808;
  v118 = v117;
  if (v117 && v113 == 2147483615 && v112 == 2147483615)
  {
    v119 = v249;
  }
  else
  {
    v119 = v249;
    v189 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v249 + 8) + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 528)
                                             + 8)
                                 + 24)
                     + 8);
    if (*(_BYTE *)(v189 + 1098))
    {
      v96 = v110;
      v191 = v111;
      v97 = v112;
      v192 = v113;
    }
    else
    {
      v190 = *(float *)(v189 + 356);
      if (!v118 || v113 != 2147483615 || (v191 = -1073741808, v192 = 2147483615, v112 != 2147483615))
      {
        v193 = (float)((float)((float)(int)v111 * 0.015625) * v190) * 64.0;
        if (v193 > -2147483650.0)
          v194 = (int)v193;
        else
          v194 = 0x80000000;
        if (v193 < 2147483650.0)
          v191 = v194;
        else
          v191 = 0x7FFFFFFF;
        v195 = (float)((float)((float)(int)v110 * 0.015625) * v190) * 64.0;
        if (v195 > -2147483650.0)
          v196 = (int)v195;
        else
          v196 = 0x80000000;
        if (v195 < 2147483650.0)
          v96 = v196;
        else
          v96 = 0x7FFFFFFF;
        v197 = (float)((float)((float)v113 * 0.015625) * v190) * 64.0;
        if (v197 > -2147483650.0)
          v198 = (int)v197;
        else
          v198 = 0x80000000;
        if (v197 < 2147483650.0)
          v192 = v198;
        else
          v192 = 0x7FFFFFFF;
        v199 = (float)((float)((float)v112 * 0.015625) * v190) * 64.0;
        if (v199 >= 2147483650.0)
        {
          v97 = 0x7FFFFFFF;
        }
        else if (v199 <= -2147483650.0)
        {
          v97 = 0x80000000;
        }
        else
        {
          v97 = (int)v199;
        }
      }
    }
    if ((int)v258 <= v191)
      v200 = v191;
    else
      v200 = v258;
    if (SDWORD1(v258) <= (int)v96)
      v201 = v96;
    else
      v201 = DWORD1(v258);
    v202 = v258 + DWORD2(v258);
    if (__OFADD__((_DWORD)v258, DWORD2(v258)))
      v202 = (v258 >> 31) + 0x7FFFFFFF;
    v203 = v191 + v192;
    if (__OFADD__(v191, v192))
      v203 = (v191 >> 31) + 0x7FFFFFFF;
    if (v203 >= v202)
      v204 = v202;
    else
      v204 = v203;
    v205 = DWORD1(v258) + HIDWORD(v258);
    if (__OFADD__(DWORD1(v258), HIDWORD(v258)))
      v205 = (DWORD1(v258) >> 31) + 0x7FFFFFFF;
    v206 = v96 + v97;
    if (__OFADD__(v96, v97))
      v206 = (v96 >> 31) + 0x7FFFFFFF;
    if (v206 >= v205)
      v207 = v205;
    else
      v207 = v206;
    if (v200 >= v204 || (int)v201 >= v207)
    {
      v204 = 0;
      v207 = 0;
      v115 = 0;
      v114 = 0;
    }
    else
    {
      v115 = v200;
      v114 = v201;
    }
    v208 = v204 - v115;
    if (__OFSUB__(v204, v115))
      v208 = (v204 >> 31) + 0x7FFFFFFF;
    v209 = (v207 - v114);
    if (__OFSUB__(v207, (_DWORD)v114))
      v209 = (v207 >> 31) + 0x7FFFFFFF;
    v116 = v208 | (unint64_t)(v209 << 32);
  }
  *(_QWORD *)&v267 = v115 | (unint64_t)(v114 << 32);
  *((_QWORD *)&v267 + 1) = v116;
  WebCore::RenderLayerCompositor::computeClippingScopes(v119, (_QWORD *)a3, (uint64_t)&v258);
  WebCore::LayerOverlapMap::add(a4, (char *)a3, (WebCore::LayoutRect *)&v267, (uint64_t)&v259);
LABEL_181:
  if (v245)
    WebCore::LayerOverlapMap::popCompositingContainer((WebCore::LayerOverlapMap *)a4, (const WebCore::RenderLayer *)a3, v18);
  if (v35)
    v120 = *((_QWORD *)v35 + 4);
  else
    v120 = 0;
  v121 = *(_DWORD *)(a4 + 68);
  if (v121)
  {
    do
    {
      v122 = v121 - 1;
      v123 = *(_QWORD *)(a4 + 56);
      v124 = *(_QWORD *)(v123 + 32 * v122);
      if (v124 == v120)
        break;
      if (*(_BYTE *)(v124 + 46) != 49)
      {
        v125 = v123 + 32 * v122;
        v126 = *(_DWORD *)(a4 + 1096);
        v127 = *(_DWORD *)(v125 + 8);
        v128 = __OFSUB__(v126, v127);
        v129 = v126 - v127;
        v130 = (v126 >> 31) + 0x7FFFFFFF;
        if (!v128)
          v130 = v129;
        *(_DWORD *)(a4 + 1096) = v130;
        v131 = *(_DWORD *)(a4 + 1100);
        v132 = *(_DWORD *)(v125 + 12);
        v128 = __OFSUB__(v131, v132);
        v133 = v131 - v132;
        v134 = (v131 >> 31) + 0x7FFFFFFF;
        if (v128)
          v133 = v134;
        *(_DWORD *)(a4 + 1100) = v133;
      }
      v135 = v123 + 32 * v122;
      if (*(_BYTE *)(v135 + 25))
        --*(_DWORD *)(a4 + 40);
      v138 = *(WTF **)(v135 + 16);
      v137 = (_QWORD *)(v135 + 16);
      v136 = v138;
      if (v138)
        --*(_DWORD *)(a4 + 44);
      if (*(_BYTE *)(v123 + 32 * v122 + 26))
        --*(_DWORD *)(a4 + 48);
      *v137 = 0;
      if (v136)
        WTF::fastFree(v136, v17);
      *(_DWORD *)(a4 + 68) = v122;
      --v121;
    }
    while ((_DWORD)v122);
  }
  result = v259;
  if (v261 != (_BYTE *)v259 && v259 != 0)
  {
    v259 = 0;
    LODWORD(v260) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

WTF *WebCore::RenderLayerCompositor::computeCompositingRequirements(unint64_t a1, const WebCore::RenderLayer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, WebCore::RenderLayer *a7)
{
  void *v13;
  __n128 v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int isRunningTransformAnimation;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::RenderObject *v45;
  BOOL v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t (*v60)();
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int32x4_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v77;
  float v78;
  float v79;
  float v81;
  float v83;
  float v85;
  float v86;
  float v87;
  int v88;
  uint64_t v89;
  float v91;
  int v92;
  uint64_t v93;
  float v95;
  float v96;
  int v97;
  unsigned int v98;
  float v100;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  __int128 v112;
  _BOOL4 v113;
  uint64_t *v114;
  WTF *v115;
  unsigned int v116;
  uint64_t *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WebCore::RenderObject *v139;
  WebCore::OverlapMapContainer::ClippingScope *v140;
  __n128 v141;
  __n128 v142;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  _BOOL4 v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)();
  uint64_t (*v165)();
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int32x4_t v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v182;
  float v183;
  float v184;
  float v186;
  float v188;
  float v190;
  float v191;
  float v192;
  int v193;
  uint64_t v194;
  float v196;
  int v197;
  uint64_t v198;
  float v200;
  float v201;
  int v202;
  unsigned int v203;
  float v205;
  unsigned int v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  WTF *v211;
  uint64_t v212;
  int v213;
  unsigned int *v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  WTF *v225;
  WTF *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  float32x4_t *v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  int v238;
  unsigned int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  WebCore::RenderLayerScrollableArea **v265;
  unint64_t v266;
  unint64_t v267;
  int v268;
  unint64_t v269;
  int v270;
  WebCore::RenderLayerScrollableArea *v271;
  char *v272;
  _BOOL4 v273;
  _BOOL4 v274;
  uint64_t v276;
  int *v277;
  uint64_t v278;
  int v279;
  int v281;
  unsigned int v282;
  int v283;
  signed int v284;
  uint64_t i;
  uint64_t v286;
  __n128 *v287;
  WTF *result;
  int v289;
  int v290;
  signed int v292;
  int v293;
  _BOOL4 v294;
  signed int v295;
  unsigned int v296;
  int v297;
  _BOOL4 v298;
  int v299;
  int *v300;
  uint64_t v301;
  int v302;
  int v303;
  signed int v304;
  int v305;
  signed int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  BOOL *v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  char v318;
  WebCore::RenderObject *v319;
  WebCore::RenderObject *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  int v327;
  WebCore::RenderLayerScrollableArea *v328;
  int v329;
  WebCore::RenderBox *v330;
  int v331;
  int v332;
  WebCore::RenderLayerScrollableArea *v333;
  uint64_t v334;
  uint64_t v335;
  WebCore::RenderBox *v336;
  int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v344;
  uint64_t v345;
  uint64_t (*v346)();
  uint64_t (*v347)();
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  int32x4_t v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v364;
  float v365;
  float v366;
  float v368;
  float v370;
  float v372;
  float v373;
  float v374;
  int v375;
  uint64_t v376;
  float v378;
  int v379;
  uint64_t v380;
  float v382;
  float v383;
  int v384;
  unsigned int v385;
  float v387;
  unsigned int v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  void *v393;
  WTF *v394;
  uint64_t v395;
  int v396;
  int *v397;
  int v398;
  unsigned int v399;
  int v400;
  int v401;
  int v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  WebCore::RenderLayerScrollableArea *v406;
  int v407;
  WebCore::RenderBox *v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  int v415;
  void *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v421;
  uint64_t (*v422)();
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  WTF *v431;
  WTF *v432;
  uint64_t v433;
  _QWORD *v434;
  void **v435;
  uint64_t v436;
  WTF *v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t v445;
  WebCore::RenderLayerBacking *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  int v452;
  int v453;
  unsigned int v454;
  float v455;
  int32x4_t v456;
  float32x4_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  int32x4_t v462;
  float64x2_t v463;
  signed int v464;
  uint64_t v465;
  signed int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  unsigned int v471;
  uint64_t v472;
  uint64_t v473;
  int v474;
  int v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unsigned int v479;
  int j;
  uint64_t v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  int v485;
  _QWORD *v486;
  uint64_t v487;
  WebCore::RenderView *v489;
  WebCore::LocalFrameView *v490;
  uint64_t v491;
  uint64_t v492;
  _BOOL8 v493;
  signed int v494;
  signed int v495;
  int v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  WebCore::RenderLayerScrollableArea *v501;
  _QWORD *v502;
  uint64_t v503;
  unint64_t v504;
  _BOOL4 v505;
  _BOOL4 v506;
  unsigned int *v508;
  uint64_t v509;
  signed int v510;
  signed int v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  WebCore::RenderLayerScrollableArea *v515;
  unsigned int v516;
  uint64_t v517;
  const WebCore::LayoutRect *v518;
  _BOOL4 v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  int v529;
  WebCore::RenderLayerScrollableArea *v530;
  WebCore::RenderLayerScrollableArea *v531;
  uint64_t v532;
  int v533;
  int v534;
  uint64_t v535;
  WebCore::RenderTableCell *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  int v542;
  uint64_t v543;
  WebCore::RenderTableCell *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  void *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  WebCore::RenderLayerScrollableArea *v553;
  unsigned int v554;
  uint64_t v555;
  const WebCore::LayoutRect *v556;
  BOOL v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  uint64_t Cell;
  WebCore::RenderTableCell *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  int v566;
  BOOL v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  int v572;
  int v573;
  unsigned int v574;
  float v575;
  double v576;
  double v577;
  double v578;
  int v579;
  double v580;
  signed int v581;
  uint64_t v582;
  signed int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  unsigned int v588;
  uint64_t v589;
  int64x2_t v590;
  __int16 v591;
  int v592;
  double v593;
  double v594;
  int v595;
  double v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unsigned int v607;
  int v608;
  int v609;
  int v610;
  unsigned int v611;
  int v612;
  int v613;
  int v614;
  uint64_t v615;
  WTF *v616;
  _QWORD *v617;
  WTF *v618;
  WTF *v620;
  int v621;
  unsigned int v622;
  WebCore::RenderLayer *v623;
  WebCore::RenderLayer *v624;
  int v625;
  int v626;
  uint64_t *v627;
  uint64_t v628;
  int v629;
  int v630;
  _BOOL4 v631;
  WebCore::RenderLayerScrollableArea *v632;
  int v633;
  WebCore::RenderLayerScrollableArea *v634;
  WebCore::RenderLayerScrollableArea *v635;
  WebCore::RenderLayerScrollableArea *v636;
  WebCore::RenderLayerScrollableArea *v637;
  WebCore::RenderLayerScrollableArea *v638;
  uint64_t v639;
  uint64_t v640;
  WTF *v641;
  WebCore::RenderLayer *v642;
  const WebCore::RenderLayer *v643;
  char v645[4];
  int v646;
  __int16 v647;
  unsigned __int8 v648;
  int32x4_t v649;
  char *v650;
  __int128 v651;
  unsigned __int8 *v652;
  unsigned __int8 *v653;
  uint64_t v654;
  BOOL *v655;
  unsigned __int8 v656;
  __int128 v657;
  uint64_t v658;
  unsigned __int8 v659;
  int v660;
  __int16 v661;
  unsigned __int8 v662;
  unsigned __int8 v663;
  __int128 v664;
  WTF *v665;
  uint64_t v666;
  _BYTE v667[48];
  int v668;
  char v669;
  BOOL v670;
  _BYTE v671[4];
  int v672;
  __int16 v673;
  int32x4_t v674;
  uint64_t v675;
  uint64_t v676;
  float32x4_t v677;
  float v678;
  float v679;
  float v680;
  float v681;
  _OWORD v682[2];

  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a3);
  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a3);
  v16 = *(_QWORD *)(a3 + 24);
  if ((v16 & 0x80) != 0)
  {
    if ((v16 & 0x4A) != 0)
    {
      WebCore::RenderLayer::rebuildZOrderLists((WebCore::RenderLayer *)a3, v13);
      v16 = *(_QWORD *)(a3 + 24);
    }
    else
    {
      WebCore::RenderLayer::clearZOrderLists(a3, v13);
      v16 = *(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFF7FLL;
      *(_QWORD *)(a3 + 24) = v16;
    }
  }
  if ((v16 & 0x100) != 0)
  {
    for (i = *(_QWORD *)(a3 + 64); ; i = *(_QWORD *)(i + 56))
    {
      *(_QWORD *)&v664 = i;
      if (!i)
        break;
      if ((*(_BYTE *)(i + 24) & 4) != 0)
      {
        v428 = *(_QWORD *)(a3 + 208);
        if (!v428 || *(_QWORD *)(v428 + 144) != i)
        {
          v429 = *(_QWORD *)(a3 + 104);
          if (!v429)
          {
            v430 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v430 = 0;
            v430[1] = 0;
            v431 = *(WTF **)(a3 + 104);
            *(_QWORD *)(a3 + 104) = v430;
            if (v431)
            {
              v432 = *(WTF **)v431;
              if (*(_QWORD *)v431)
              {
                *(_QWORD *)v431 = 0;
                *((_DWORD *)v431 + 2) = 0;
                WTF::fastFree(v432, v13);
              }
              WTF::fastFree(v431, v13);
              v429 = *(_QWORD *)(a3 + 104);
            }
            else
            {
              v429 = (uint64_t)v430;
            }
          }
          v433 = *(unsigned int *)(v429 + 12);
          if ((_DWORD)v433 == *(_DWORD *)(v429 + 8))
          {
            v434 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v429, v433 + 1, (unint64_t)&v664);
            v433 = *(unsigned int *)(v429 + 12);
            *(_QWORD *)(*(_QWORD *)v429 + 8 * v433) = *v434;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v429 + 8 * v433) = v664;
          }
          *(_DWORD *)(v429 + 12) = v433 + 1;
          i = v664;
          *(_QWORD *)(v664 + 24) &= ~0x20000000000000uLL;
        }
      }
    }
    v286 = *(_QWORD *)(a3 + 104);
    if (v286)
    {
      v436 = *(unsigned int *)(v286 + 12);
      if (*(_DWORD *)(v286 + 8) > v436)
      {
        v437 = *(WTF **)v286;
        if ((_DWORD)v436)
        {
          *(_DWORD *)(v286 + 8) = v436;
          *(_QWORD *)v286 = WTF::fastRealloc(v437, (void *)(8 * v436));
        }
        else if (v437)
        {
          *(_QWORD *)v286 = 0;
          *(_DWORD *)(v286 + 8) = 0;
          WTF::fastFree(v437, v13);
        }
      }
    }
    *(_QWORD *)(a3 + 24) &= ~0x100uLL;
  }
  v17 = *(_QWORD *)(a3 + 208);
  if (v17)
  {
    v548 = *(_QWORD *)(v17 + 144);
    if (v548)
    {
      WebCore::RenderLayer::updateZOrderLists(*(WebCore::RenderLayer **)(v17 + 144), v13);
      WebCore::RenderLayer::updateNormalFlowList(v548, v549);
    }
  }
  v18 = *(_DWORD *)(a3 + 12);
  if ((v18 & 1) != 0)
  {
    v19 = *(_BYTE *)(a5 + 26);
    v20 = *(_BYTE *)(a5 + 27);
    v21 = *(_DWORD *)(a3 + 12) & 0x3C;
  }
  else
  {
    v19 = *(_BYTE *)(a5 + 26);
    v20 = *(_BYTE *)(a5 + 27);
    v21 = *(_DWORD *)(a3 + 12) & 0x3C;
    if ((v18 & 0x3C) == 0 && !*(_BYTE *)(a5 + 26) && !*(_BYTE *)(a5 + 27))
      return WebCore::RenderLayerCompositor::traverseUnchangedSubtree(a1, a2, a3, a4, (__int128 *)a5, a6, a7);
  }
  v642 = a7;
  *(_BYTE *)(a5 + 26) = v19 | (v21 != 0);
  *(_BYTE *)(a5 + 27) = v20 | ((v18 & 0x10) != 0);
  v22 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v22 & 0xFFFFFFFFFBFFFFFFLL;
  v671[0] = 1;
  v672 = 0;
  v673 = 0;
  v23 = *(_QWORD *)(a3 + 256) != 0;
  v670 = *(_QWORD *)(a3 + 256) != 0;
  v669 = 0;
  v24 = *(unsigned __int8 *)(a5 + 24);
  if ((v18 & 8) != 0 || *(_BYTE *)(a5 + 26) || *(_BYTE *)(a5 + 27))
  {
    v23 = 0;
    *(_QWORD *)(a3 + 24) = v22 & 0xFFFFFF87FBFFFFFFLL;
    if (!*(_BYTE *)(a1 + 132) || (v22 & 0x800) == 0)
      goto LABEL_20;
    v25 = *(_QWORD *)(a3 + 32);
    v26 = *(_QWORD *)(v25 + 32);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v27)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v27 + 104) + 239) & 0x18) != 0)
          goto LABEL_19;
      }
    }
    if ((*(_BYTE *)(v25 + 23) & 0x10) != 0 && (*(_BYTE *)(v25 + 52) & 7) == 1 && (*(_BYTE *)(v25 + 53) & 2) != 0)
      goto LABEL_19;
    if ((WebCore::RenderLayerCompositor::requiresCompositingLayer((WebCore::RenderLayerCompositor *)a1, (WebCore::RenderObject *)v25, (uint64_t)v671) & 1) != 0|| (v28 = *(_QWORD *)(a3 + 24), (v28 & 0x7800000000) != 0))
    {
      v23 = 1;
      goto LABEL_20;
    }
    if (!*(_BYTE *)(a1 + 195))
LABEL_19:
      v23 = 0;
    else
      v23 = v28 & 1;
LABEL_20:
    v670 = v23;
    LOBYTE(v18) = *(_BYTE *)(a3 + 12);
    v29 = *(_BYTE *)(a5 + 26);
    goto LABEL_21;
  }
  v29 = 0;
LABEL_21:
  isRunningTransformAnimation = 0;
  v31 = (2 * v24);
  *(_BYTE *)(a5 + 26) = ((v18 & 0x20) != 0) | v29;
  v664 = 0uLL;
  v665 = (WTF *)v667;
  v14.n128_u64[0] = 2;
  v666 = 2;
  v668 = 0;
  if (v23)
  {
    if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    {
      isRunningTransformAnimation = 0;
    }
    else
    {
      isRunningTransformAnimation = WebCore::RenderLayerCompositor::isRunningTransformAnimation((WebCore::RenderLayerCompositor *)*(unsigned int *)(a1 + 128), *(WebCore::RenderLayerModelObject **)(a3 + 32));
      BYTE1(v668) = isRunningTransformAnimation;
    }
  }
  v641 = (WTF *)(a4 + 32);
  WebCore::RenderGeometryMap::pushMappingsToAncestor((WebCore::RenderGeometryMap *)(a4 + 32), (WTF **)a3, a2, isRunningTransformAnimation == 0, v14, v15);
  v663 = 0;
  v643 = a2;
  if (v670)
    goto LABEL_52;
  if (!*(_BYTE *)(a5 + 24))
    goto LABEL_52;
  if (!*(_BYTE *)(a1 + 132))
    goto LABEL_52;
  if ((*(_BYTE *)(a3 + 25) & 8) == 0)
    goto LABEL_52;
  v35 = *(_QWORD *)(a3 + 32);
  v36 = *(_QWORD *)(v35 + 32);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    if (v37)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v37 + 104) + 239) & 0x18) != 0)
        goto LABEL_52;
    }
  }
  v38 = *(_DWORD *)(v35 + 20);
  if ((v38 & 0x10000000) != 0 && (*(_BYTE *)(v35 + 52) & 7) == 1 && (*(_BYTE *)(v35 + 53) & 2) != 0)
    goto LABEL_52;
  if ((v38 & 0x4000) != 0)
  {
    v475 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
    v476 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
    v477 = 9 * ((v476 + ~(v476 << 13)) ^ ((v476 + ~(v476 << 13)) >> 8));
    v478 = (v477 ^ (v477 >> 15)) + ~((v477 ^ (v477 >> 15)) << 27);
    v479 = v475 & ((v478 >> 31) ^ v478);
    for (j = 1; ; ++j)
    {
      v481 = v479;
      v482 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v479);
      if (v482 != -1 && *(_QWORD *)(v482 + 8) == v35)
        break;
      v479 = (v481 + j) & v475;
    }
    if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v481 + 8))
      goto LABEL_52;
  }
  if (!*((_BYTE *)a6 + 40))
  {
    v526 = *((unsigned int *)a6 + 3);
    if ((_DWORD)v526)
    {
      v527 = *a6;
      v528 = 56 * v526;
      while ((WebCore::RenderLayer::ancestorLayerIsInContainingBlockChain((WebCore::RenderLayer *)a3, *(const WebCore::RenderLayer **)(*v527 + 8), 0) & 1) == 0)
      {
        v527 += 7;
        v528 -= 56;
        if (!v528)
          goto LABEL_1165;
      }
      v49 = (uint64_t)v527;
      goto LABEL_51;
    }
LABEL_1165:
    a2 = v643;
    goto LABEL_52;
  }
  v39 = (WTF *)*((unsigned int *)a6 + 3);
  if (!(_DWORD)v39)
    goto LABEL_52;
  v40 = 0;
  v41 = 1;
  while (1)
  {
    v639 = v40;
    v42 = (char *)v39 - v41;
    if ((unint64_t)v39 < v41)
    {
      __break(0xC471u);
      JUMPOUT(0x194159AE4);
    }
    v43 = (*a6)[7 * (_QWORD)v42];
    if (!v43)
      break;
    v44 = *(_QWORD *)(v43 + 8);
    if (v44 != a3)
      goto LABEL_37;
LABEL_43:
    v39 = (WTF *)*((unsigned int *)a6 + 3);
    v40 = v639 - 1;
    v46 = v41++ >= (unint64_t)v39;
    a2 = v643;
    if (v46)
      goto LABEL_52;
  }
  v44 = 0;
LABEL_37:
  v45 = *(WebCore::RenderObject **)(a3 + 32);
  do
  {
    v45 = WebCore::RenderObject::containingBlock(v45);
    if (!v45 || *((_BYTE *)v45 + 46) == 49)
      goto LABEL_43;
  }
  while (*((_QWORD *)v45 + 18) != v44);
  if (v42 == (char *)-1)
    goto LABEL_1165;
  v47 = *((unsigned int *)a6 + 3);
  a2 = v643;
  if ((unint64_t)v42 >= v47)
  {
    __break(0xC471u);
    JUMPOUT(0x194159B58);
  }
  v48 = *a6;
  v49 = (uint64_t)&(*a6)[7 * (_QWORD)v42];
  if (v42 == (char *)(v47 - 1))
  {
LABEL_50:
    if (!v48)
      goto LABEL_52;
LABEL_51:
    WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>((uint64_t)&v651, v49 + 8, (WTF **)a3);
    v31 = 0;
    v663 = 1;
    goto LABEL_52;
  }
  if (*(_QWORD *)v49)
    v265 = *(WebCore::RenderLayerScrollableArea ***)(*(_QWORD *)v49 + 8);
  else
    v265 = 0;
  v266 = (unint64_t)&v48[7 * (_QWORD)v42];
  v268 = *(_DWORD *)(v266 + 40);
  LODWORD(v267) = *(_DWORD *)(v266 + 44);
  v270 = *(_DWORD *)(v266 + 48);
  LODWORD(v269) = *(_DWORD *)(v266 + 52);
  v271 = v265[33];
  if (v271)
  {
    v637 = (WebCore::RenderLayerScrollableArea *)v265;
    v625 = *(_DWORD *)(v266 + 48);
    v626 = *(_DWORD *)(v266 + 40);
    v629 = *(_DWORD *)(v266 + 52);
    v630 = *(_DWORD *)(v266 + 44);
    if (WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v271))
    {
      LODWORD(v266) = (_DWORD)v637;
      v328 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)v637 + 33);
      if (v328)
      {
        v628 = v49;
        v632 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)v637 + 33);
        if (*((_BYTE *)v328 + 76))
        {
          WebCore::RenderLayerScrollableArea::computeScrollDimensions(v328);
          v328 = v632;
        }
        v329 = *((_DWORD *)v328 + 22);
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v328 + 12) + 32) + 45) & 4) != 0)
          v330 = *(WebCore::RenderBox **)(*((_QWORD *)v328 + 12) + 32);
        else
          v330 = 0;
        v331 = WebCore::RenderBox::clientWidth(v330);
        if (v329 > ((int)(v331 - (v332 & 0xFFFFFFC0) + 32) >> 6) + v331 / 64)
        {
          v333 = v637;
          v473 = *(_QWORD *)(*((_QWORD *)v632 + 12) + 32);
          if ((*(_BYTE *)(v473 + 45) & 4) == 0)
            v473 = 0;
          v633 = (*(_BYTE *)(v473 + 22) & 1) != 0 && ((*(_DWORD *)(v473 + 96) >> 10) & 7u) - 3 < 2;
        }
        else
        {
          v633 = 0;
          v333 = v637;
        }
        v627 = v48;
        v334 = *((_QWORD *)v333 + 33);
        v335 = v334;
        if (*(_BYTE *)(v334 + 76))
        {
          WebCore::RenderLayerScrollableArea::computeScrollDimensions(*((WebCore::RenderLayerScrollableArea **)v333 + 33));
          v334 = v335;
        }
        v48 = (uint64_t *)*(unsigned int *)(v334 + 92);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v334 + 96) + 32) + 45) & 4) != 0)
          v336 = *(WebCore::RenderBox **)(*(_QWORD *)(v334 + 96) + 32);
        else
          v336 = 0;
        v337 = WebCore::RenderBox::clientHeight(v336);
        if ((int)v48 <= ((int)(v337 - (v338 & 0xFFFFFFC0) + 32) >> 6) + v337 / 64)
          goto LABEL_672;
        v266 = *(_QWORD *)(*(_QWORD *)(v335 + 96) + 32);
        if ((*(_BYTE *)(v266 + 45) & 4) == 0)
          v266 = 0;
        if ((*(_BYTE *)(v266 + 22) & 1) != 0)
        {
          LODWORD(v266) = ((unsigned __int16)*(_DWORD *)(v266 + 96) >> 13) - 3 < 2;
          if (v633 != (_DWORD)v266)
          {
LABEL_673:
            if ((_BYTE)v668)
              goto LABEL_797;
            v649 = 0uLL;
            if (BYTE1(v668))
            {
              BYTE2(v668) = WebCore::RenderLayer::getOverlapBoundsIncludingChildrenAccountingForTransformAnimations((uint64_t *)a3, v649.i64, 0, v34) ^ 1;
              v355 = v649;
              goto LABEL_701;
            }
            v339 = *(_QWORD *)(a3 + 32);
            v340 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v339 + 88) + 32) + 32);
            v341 = *(unsigned int *)(v340 + 20);
            if ((_DWORD)v341)
            {
              v502 = *(_QWORD **)(v340 + 8);
              v48 = (uint64_t *)(8 * v341);
              while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v502 + 80))(*v502) & 1) == 0)
              {
                ++v502;
                if (!--v48)
                {
                  v339 = *(_QWORD *)(a3 + 32);
                  goto LABEL_676;
                }
              }
              *(_QWORD *)&v651 = 0;
              v353 = WebCore::RenderLayer::calculateLayerBounds(a3, (const WebCore::RenderLayerModelObject *)a3, &v651, 0x86u, v34);
              goto LABEL_700;
            }
LABEL_676:
            v342 = 0;
            v651 = 0uLL;
            v48 = (uint64_t *)*(unsigned __int8 *)(v339 + 45);
            if ((v48 & 0x20) != 0)
            {
              ++*(_DWORD *)(v339 + 16);
              v342 = v339;
              if ((*(_BYTE *)(v339 + 20) & 1) == 0)
              {
                *(_QWORD *)&v651 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v339, (WebCore::RenderObject *)v32);
                *((_QWORD *)&v651 + 1) = v569;
                v342 = v339;
                goto LABEL_697;
              }
            }
            if ((*(_BYTE *)(v339 + 52) & 7) == 4 && (*(_BYTE *)(v339 + 53) & 1) == 0)
            {
              ++*(_DWORD *)(v339 + 16);
              *(_QWORD *)&v651 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v339, (const WebCore::RenderLayerModelObject *)v32, v34);
              *((_QWORD *)&v651 + 1) = v559;
              v560 = *(_DWORD *)(v339 + 16);
              if (!v560)
              {
                __break(0xC471u);
                JUMPOUT(0x194159F74);
              }
              *(_DWORD *)(v339 + 16) = v560 - 1;
            }
            else
            {
              if (*(_BYTE *)(v339 + 46) != 39)
              {
                if ((v48 & 4) == 0)
                  v339 = 0;
                v344 = *(_QWORD *)(v339 + 88);
                v345 = *(_QWORD *)(*(_QWORD *)(v344 + 32) + 48);
                if (*(_QWORD *)(v345 + 8))
                {
                  while (!*(_QWORD *)(v345 + 16))
                  {
                    v345 = *(_QWORD *)(v345 + 8);
                    if (!v345)
                      goto LABEL_689;
                  }
                }
                else
                {
                  if (*(_QWORD *)(v345 + 16))
                    v346 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                  else
                    v346 = 0;
                  if (!v346)
                  {
LABEL_689:
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v344 + 40) + 216) + 8))
                      v347 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                    else
                      v347 = 0;
                    if (!v347)
                    {
                      v348 = *(_QWORD *)(v339 + 192);
                      if (v348)
                      {
                        v349 = *(_QWORD *)(v348 + 20);
                        v350 = (uint64_t *)(v348 + 28);
                      }
                      else
                      {
                        v349 = 0;
                        v350 = (uint64_t *)(v339 + 160);
                      }
                      v351 = *v350;
                      *(_QWORD *)&v651 = v349;
                      *((_QWORD *)&v651 + 1) = v351;
                      goto LABEL_696;
                    }
                  }
                }
                v677.i64[0] = 0;
                *(_QWORD *)&v651 = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v339, (const WebCore::LayoutPoint *)&v677);
                *((_QWORD *)&v651 + 1) = v600;
                WebCore::RenderBox::flipForWritingMode(v339, (WebCore::LayoutRect *)&v651);
                goto LABEL_696;
              }
              v635 = (WebCore::RenderLayerScrollableArea *)a4;
              ++*(_DWORD *)(v339 + 16);
              v624 = (WebCore::RenderLayer *)v339;
              Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v339);
              if (Cell)
              {
                v562 = (WebCore::RenderTableCell *)Cell;
                do
                {
                  v563 = *((_QWORD *)v562 + 20);
                  v677.i64[0] = 0;
                  v677.i64[1] = v563;
                  WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v651, (const WebCore::LayoutRect *)&v677);
                  v564 = *((_QWORD *)v624 + 24);
                  if (v564)
                  {
                    v599 = *(_QWORD *)(v564 + 20);
                    v565 = *(_QWORD *)(v564 + 28);
                    *(_QWORD *)&v657 = v599;
                    *((_QWORD *)&v657 + 1) = v565;
                    if (v599)
                    {
LABEL_1265:
                      WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v651, (const WebCore::LayoutRect *)&v657);
                      goto LABEL_1266;
                    }
                  }
                  else
                  {
                    v565 = *((_QWORD *)v624 + 20);
                    *(_QWORD *)&v657 = 0;
                    *((_QWORD *)&v657 + 1) = v565;
                  }
                  if (v563 != v565)
                    goto LABEL_1265;
LABEL_1266:
                  v562 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v562);
                }
                while (v562);
              }
              v566 = *((_DWORD *)v624 + 4);
              if (!v566)
              {
                __break(0xC471u);
                JUMPOUT(0x194159F94);
              }
              *((_DWORD *)v624 + 4) = v566 - 1;
              a4 = (uint64_t)v635;
            }
LABEL_696:
            if ((v48 & 0x20) == 0)
            {
LABEL_699:
              v354 = *((_QWORD *)&v651 + 1);
              v353 = v651;
LABEL_700:
              v355.i64[0] = v353;
              v355.i64[1] = v354;
LABEL_701:
              v677 = vmulq_f32(vcvtq_f32_s32(v355), (float32x4_t)vdupq_n_s32(0x3C800000u));
              WebCore::RenderGeometryMap::mapToContainer(v641, (const WebCore::FloatRect *)&v677, 0, (float *)&v651);
              v356 = *((float *)&v652 + 1);
              v357 = *(float *)&v652;
              if (*(float *)&v653 >= *(float *)&v652)
                v358 = *(float *)&v652;
              else
                v358 = *(float *)&v653;
              v359 = *((float *)&v651 + 1);
              v360 = *(float *)&v651;
              if (*((float *)&v651 + 2) >= *(float *)&v651)
                v361 = *(float *)&v651;
              else
                v361 = *((float *)&v651 + 2);
              if (v358 >= v361)
                v358 = v361;
              v362 = fabsf(v358);
              if (v362 == INFINITY || v362 > 2147500000.0)
                v358 = (float)((SLODWORD(v358) >> 31) ^ 0x7FFFFFFF);
              if (*((float *)&v653 + 1) >= *((float *)&v652 + 1))
                v364 = *((float *)&v652 + 1);
              else
                v364 = *((float *)&v653 + 1);
              if (*((float *)&v651 + 3) >= *((float *)&v651 + 1))
                v365 = *((float *)&v651 + 1);
              else
                v365 = *((float *)&v651 + 3);
              if (v364 >= v365)
                v364 = v365;
              v366 = fabsf(v364);
              if (v366 == INFINITY || v366 > 2147500000.0)
                v364 = (float)((SLODWORD(v364) >> 31) ^ 0x7FFFFFFF);
              if (*(float *)&v651 < *((float *)&v651 + 2))
                v360 = *((float *)&v651 + 2);
              if (*(float *)&v652 < *(float *)&v653)
                v357 = *(float *)&v653;
              if (v360 >= v357)
                v357 = v360;
              v368 = fabsf(v357);
              if (v368 == INFINITY || v368 > 2147500000.0)
                v357 = (float)((SLODWORD(v357) >> 31) ^ 0x7FFFFFFF);
              if (*((float *)&v651 + 1) < *((float *)&v651 + 3))
                v359 = *((float *)&v651 + 3);
              if (*((float *)&v652 + 1) < *((float *)&v653 + 1))
                v356 = *((float *)&v653 + 1);
              if (v359 >= v356)
                v356 = v359;
              v370 = fabsf(v356);
              if (v370 == INFINITY || v370 > 2147500000.0)
                v356 = (float)((SLODWORD(v356) >> 31) ^ 0x7FFFFFFF);
              v372 = v357 - v358;
              v373 = v356 - v364;
              v374 = floorf(v358 * 64.0);
              if (v374 > -2147500000.0)
                v375 = (int)v374;
              else
                v375 = 0x80000000;
              if (v374 < 2147500000.0)
                LODWORD(v376) = v375;
              else
                LODWORD(v376) = 0x7FFFFFFF;
              if (v374 >= 2147500000.0 || v374 <= -2147500000.0)
                v376 = v376;
              else
                v376 = (int)v374;
              v378 = floorf(v364 * 64.0);
              if (v378 > -2147500000.0)
                v379 = (int)v378;
              else
                v379 = 0x80000000;
              if (v378 < 2147500000.0)
                LODWORD(v380) = v379;
              else
                LODWORD(v380) = 0x7FFFFFFF;
              if (v378 >= 2147500000.0 || v378 <= -2147500000.0)
                v380 = v380;
              else
                v380 = (int)v378;
              v382 = v364 + v373;
              v383 = ceilf((float)(v358 + v372) * 64.0);
              if (v383 > -2147500000.0)
                v384 = (int)v383;
              else
                v384 = 0x80000000;
              if (v383 < 2147500000.0)
                v385 = v384;
              else
                v385 = 0x7FFFFFFF;
              if (v383 < 2147500000.0 && v383 > -2147500000.0)
                v385 = (int)v383;
              v387 = ceilf(v382 * 64.0);
              if (v387 < 2147500000.0 && v387 > -2147500000.0)
                goto LABEL_788;
              if (v387 >= 2147500000.0)
              {
                v389 = 0x7FFFFFFF;
                goto LABEL_789;
              }
              if (v387 <= -2147500000.0)
                v389 = 0x80000000;
              else
LABEL_788:
                v389 = (int)v387;
LABEL_789:
              v390 = v385 - v376;
              if (__OFSUB__(v385, (_DWORD)v376))
                v390 = (v385 >> 31) + 0x7FFFFFFF;
              v391 = v389 - v380;
              if (__OFSUB__(v389, (_DWORD)v380))
                v391 = (v389 >> 31) + 0x7FFFFFFF;
              *(_QWORD *)&v664 = v376 | (v380 << 32);
              *((_QWORD *)&v664 + 1) = v390 | (unint64_t)(v391 << 32);
              if (v390 < 1 || (int)v391 <= 0)
                *((_QWORD *)&v664 + 1) = 0x4000000040;
              v392 = *(_QWORD *)(a3 + 32);
              if ((*(_DWORD *)(v392 + 20) & 0x1800000) == 0x1000000)
              {
                v447 = *(_QWORD *)(a3 + 32);
                if ((*(_BYTE *)(v392 + 45) & 2) != 0)
                  v447 = *(_QWORD *)(*(_QWORD *)(v392 + 32) + 8);
                if ((*(_QWORD *)(v447 + 96) & 0x380000) == 0x300000)
                {
                  v448 = WebCore::RenderObject::container((WebCore::RenderObject *)v392);
                  if (v448 == *(_QWORD *)(a1 + 8))
                  {
                    *(_QWORD *)&v664 = WebCore::LocalFrameView::fixedScrollableAreaBoundsInflatedForScrolling(*(WebCore::LocalFrameView **)(v448 + 248), (const WebCore::LayoutRect *)&v664);
                    *((_QWORD *)&v664 + 1) = v449;
                  }
                }
              }
              LOBYTE(v668) = 1;
LABEL_797:
              LODWORD(a2) = 2147483615;
              WebCore::RenderLayerCompositor::computeClippingScopes(a1, (_QWORD *)a3, (uint64_t)&v664);
              if ((*(_BYTE *)(a3 + 27) & 0x10) == 0)
              {
                *(_QWORD *)&v657 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
                DWORD2(v657) = 2;
                BYTE12(v657) = 1;
                WebCore::RenderLayer::backgroundClipRect((unsigned int *)&v651, a3, (uint64_t)&v657);
                v677 = (float32x4_t)v651;
                LODWORD(v403) = DWORD1(v651);
                goto LABEL_809;
              }
              LODWORD(v266) = HIDWORD(v666);
              if (!HIDWORD(v666))
              {
                __break(0xC471u);
                goto LABEL_1312;
              }
              v623 = (WebCore::RenderLayer *)*((_QWORD *)v665 + 3 * HIDWORD(v666) - 3);
              *(_QWORD *)&v651 = v623;
              DWORD2(v651) = 5;
              BYTE12(v651) = 0;
              WebCore::RenderLayer::parentClipRects((WTF *)&v677, a3, (uint64_t)&v651);
              v394 = (WTF *)v677.i64[0];
              v395 = *(_QWORD *)(a3 + 32);
              v396 = (*(_DWORD *)(v395 + 96) >> 19) & 7;
              if (v396 == 2)
              {
                v397 = (int *)(v677.i64[0] + 48);
              }
              else if (v396 == 6)
              {
                v397 = (int *)(v677.i64[0] + 28);
              }
              else
              {
                v397 = (int *)(v677.i64[0] + 8);
              }
              v634 = (WebCore::RenderLayerScrollableArea *)a4;
              v399 = *v397;
              v398 = v397[1];
              v401 = v397[2];
              v400 = v397[3];
              if (!*(_BYTE *)(v677.i64[0] + 4))
              {
                v402 = *v397;
LABEL_803:
                if (*(_DWORD *)v394 == 1)
                {
                  v474 = v400;
                  WTF::fastFree(v394, v393);
                  v400 = v474;
                }
                else
                {
                  --*(_DWORD *)v394;
                }
                v677.i64[0] = __PAIR64__(v398, v402);
                v677.i64[1] = __PAIR64__(v400, v401);
                if (v402 == -1073741808 && v401 == 2147483615)
                {
                  a4 = (uint64_t)v634;
                  if (v398 == -1073741808)
                  {
                    LODWORD(v403) = -1073741808;
                    if (v400 == 2147483615)
                      goto LABEL_809;
                  }
                }
                else
                {
                  v55 = v402 == -1073741808;
                  a4 = (uint64_t)v634;
                  if (v55 && v398 == -1073741808 && v401 == 2147483615)
                  {
                    LODWORD(v403) = -1073741808;
                    if (v400 == 2147483615)
                      goto LABEL_809;
                  }
                }
                v677.i64[0] = WebCore::RenderLayer::convertToLayerCoords(v623, *(WebCore::RenderLayer **)(*(_QWORD *)(a1 + 8) + 144), v677.u64[0], 0);
                v403 = HIDWORD(v677.i64[0]);
LABEL_809:
                v651 = v664;
                if (v677.i32[0] != -1073741808 || (_DWORD)v403 != -1073741808 || v677.i64[1] != 0x7FFFFFDF7FFFFFDFLL)
                {
                  v513 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8)
                                                                                               + 40)
                                                                                   + 8)
                                                                       + 528)
                                                           + 8)
                                               + 24)
                                   + 8);
                  if (!*(_BYTE *)(v513 + 1098))
                    WebCore::LayoutRect::scale((int *)&v677, *(float *)(v513 + 356));
                  WebCore::LayoutRect::intersect((int *)&v651, (const WebCore::LayoutRect *)&v677);
                }
                v405 = *((_QWORD *)&v651 + 1);
                v404 = v651;
                v638 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)v637 + 33);
                v406 = v638;
                if (*((_BYTE *)v638 + 76))
                {
                  WebCore::RenderLayerScrollableArea::computeScrollDimensions(v638);
                  v406 = v638;
                }
                v407 = *((_DWORD *)v406 + 22);
                if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v406 + 12) + 32) + 45) & 4) != 0)
                  v408 = *(WebCore::RenderBox **)(*((_QWORD *)v406 + 12) + 32);
                else
                  v408 = 0;
                v409 = WebCore::RenderBox::clientWidth(v408);
                LODWORD(v266) = ((int)(v409 - (v266 & 0xFFFFFFC0) + 32) >> 6) + v409 / 64;
                if (v407 <= (int)v266)
                  goto LABEL_818;
                v266 = *(_QWORD *)(*((_QWORD *)v638 + 12) + 32);
                if ((*(_BYTE *)(v266 + 45) & 4) == 0)
                  v266 = 0;
                if ((*(_BYTE *)(v266 + 22) & 1) != 0
                  && (LODWORD(v266) = ((*(_DWORD *)(v266 + 96) >> 10) & 7) - 3, v266 <= 1))
                {
                  v267 = HIDWORD(v404);
                  v269 = HIDWORD(v405);
                  a2 = v643;
                  v48 = v627;
                  v49 = v628;
                  v270 = v625;
                  v268 = v626;
                }
                else
                {
LABEL_818:
                  v270 = v405;
                  v268 = v404;
                  a2 = v643;
                  v48 = v627;
                  v49 = v628;
                  LODWORD(v269) = v629;
                  LODWORD(v267) = v630;
                }
                goto LABEL_497;
              }
              v503 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v395 + 24) + 8) + 40) + 8)
                               + 1944);
              v402 = *v397;
              v622 = v397[1];
              if (*((_QWORD *)v623 + 4) != v503)
                goto LABEL_803;
              v620 = (WTF *)v677.i64[0];
              v621 = v397[3];
              if (v399 == -1073741808 && v401 == 2147483615)
              {
                v394 = (WTF *)v677.i64[0];
                if (v398 != -1073741808)
                  goto LABEL_1080;
              }
              else
              {
                v394 = (WTF *)v677.i64[0];
                if (v399 != -1073741808 || v398 != -1073741808 || v401 != 2147483615)
                  goto LABEL_1080;
              }
              v402 = -1073741808;
              v398 = -1073741808;
              if (v400 == 2147483615)
                goto LABEL_803;
LABEL_1080:
              v504 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v503 + 248));
              v402 = v399 + v504;
              if (__OFADD__(v399, (_DWORD)v504))
                v402 = (v399 >> 31) + 0x7FFFFFFF;
              v398 = v622 + HIDWORD(v504);
              if (__OFADD__(v622, HIDWORD(v504)))
                v398 = (v622 >> 31) + 0x7FFFFFFF;
              v400 = v621;
              v394 = v620;
              goto LABEL_803;
            }
LABEL_697:
            v352 = *(_DWORD *)(v342 + 16);
            if (!v352)
            {
              __break(0xC471u);
              JUMPOUT(0x19415912CLL);
            }
            *(_DWORD *)(v342 + 16) = v352 - 1;
            goto LABEL_699;
          }
        }
        else
        {
LABEL_672:
          LODWORD(v266) = v633;
          if ((v633 & 1) != 0)
            goto LABEL_673;
        }
        v48 = v627;
        v49 = v628;
      }
    }
    LODWORD(v269) = v629;
    LODWORD(v267) = v630;
    v270 = v625;
    v268 = v626;
  }
LABEL_497:
  v272 = (char *)*((unsigned int *)a6 + 3);
  if (v42 >= v272)
  {
LABEL_1312:
    __break(1u);
LABEL_1313:
    v215 = (a2 >> 31) + 0x7FFFFFFF;
LABEL_910:
    v216 = (a4 + v266);
    if (__OFADD__((_DWORD)a4, (_DWORD)v266))
      v216 = (a4 >> 31) + 0x7FFFFFFF;
    goto LABEL_402;
  }
  if (v42 + 1 == v272)
    goto LABEL_50;
  v273 = __OFADD__(v268, v270);
  v274 = __OFADD__((_DWORD)v267, (_DWORD)v269);
  if (v270 < 1 || (int)v269 < 1)
    goto LABEL_50;
  v276 = 7 * ((_QWORD)v39 + v639);
  v277 = (int *)&(*a6)[v276 + 6] + 1;
  v278 = 56 * v272 - v276 * 8;
  while (1)
  {
    v32 = *(v277 - 1);
    v279 = *v277;
    if ((int)v32 >= 1 && v279 >= 1)
    {
      v281 = *(v277 - 3);
      v237 = __OFADD__(v281, (_DWORD)v32);
      LODWORD(v32) = v281 + v32;
      v33 = (v281 >> 31) + 0x7FFFFFFF;
      v32 = v237 ? v33 : v32;
      if (v268 < (int)v32)
      {
        v32 = (v268 + v270);
        if (v273)
          v32 = (v268 >> 31) + 0x7FFFFFFF;
        if (v281 < (int)v32)
        {
          v282 = *(v277 - 2);
          v237 = __OFADD__(v282, v279);
          v283 = v282 + v279;
          v32 = (v282 >> 31) + 0x7FFFFFFF;
          if (v237)
            v283 = (v282 >> 31) + 0x7FFFFFFF;
          if ((int)v267 < v283)
          {
            v284 = v267 + v269;
            if (v274)
              v284 = (v267 >> 31) + 0x7FFFFFFF;
            if ((int)v282 < v284)
              break;
          }
        }
      }
    }
    v277 += 14;
    v278 -= 56;
    if (!v278)
      goto LABEL_50;
  }
LABEL_52:
  if (!(v670 | v663) && !*(_BYTE *)(a4 + 1120) && *(_BYTE *)(a5 + 25))
  {
    if ((_BYTE)v668)
    {
LABEL_180:
      WebCore::RenderLayerCompositor::computeClippingScopes(a1, (_QWORD *)a3, (uint64_t)&v664);
      if (*(_DWORD *)(a4 + 28))
        goto LABEL_184;
      v106 = *(unsigned int *)(a4 + 12);
      if (!(_DWORD)v106)
      {
        __break(0xC471u);
        JUMPOUT(0x194159A8CLL);
      }
      v107 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v106 - 8);
      v108 = *(unsigned int *)(v107 + 52);
      if ((_DWORD)v108 && SDWORD2(v664) >= 1 && SHIDWORD(v664) >= 1)
      {
        v289 = *(_DWORD *)(v107 + 64);
        v290 = *(_DWORD *)(v107 + 68);
        if (v289 >= 1 && v290 >= 1)
        {
          v292 = *(_DWORD *)(v107 + 56);
          v237 = __OFADD__(v292, v289);
          v293 = v292 + v289;
          if (v237)
            v293 = (v292 >> 31) + 0x7FFFFFFF;
          if ((int)v664 < v293)
          {
            v294 = __OFADD__((_DWORD)v664, DWORD2(v664));
            v295 = v664 + DWORD2(v664);
            if (__OFADD__((_DWORD)v664, DWORD2(v664)))
              v295 = (v664 >> 31) + 0x7FFFFFFF;
            if (v292 < v295)
            {
              v296 = *(_DWORD *)(v107 + 60);
              v237 = __OFADD__(v296, v290);
              v297 = v296 + v290;
              if (v237)
                v297 = (v296 >> 31) + 0x7FFFFFFF;
              if (SDWORD1(v664) < v297)
              {
                v298 = __OFADD__(DWORD1(v664), HIDWORD(v664));
                v299 = DWORD1(v664) + HIDWORD(v664);
                if (__OFADD__(DWORD1(v664), HIDWORD(v664)))
                  v299 = (DWORD1(v664) >> 31) + 0x7FFFFFFF;
                if ((int)v296 < v299)
                {
                  v300 = (int *)(*(_QWORD *)(v107 + 40) + 8);
                  v301 = 16 * v108;
                  do
                  {
                    v302 = *v300;
                    if (*v300 >= 1)
                    {
                      v303 = v300[1];
                      if (v303 >= 1)
                      {
                        v32 = (v664 + DWORD2(v664));
                        if (v294)
                          v32 = (v664 >> 31) + 0x7FFFFFFF;
                        v33 = *(v300 - 2);
                        if ((int)v33 < (int)v32)
                        {
                          v237 = __OFADD__((_DWORD)v33, v302);
                          v304 = v33 + v302;
                          v32 = (v33 >> 31) + 0x7FFFFFFF;
                          if (v237)
                            v304 = (v33 >> 31) + 0x7FFFFFFF;
                          if ((int)v664 < v304)
                          {
                            v305 = DWORD1(v664) + HIDWORD(v664);
                            if (v298)
                              v305 = (DWORD1(v664) >> 31) + 0x7FFFFFFF;
                            v32 = *(v300 - 1);
                            if ((int)v32 < v305)
                            {
                              v237 = __OFADD__((_DWORD)v32, v303);
                              v306 = v32 + v303;
                              if (v237)
                                v306 = (v32 >> 31) + 0x7FFFFFFF;
                              if (SDWORD1(v664) < v306)
                                goto LABEL_1114;
                            }
                          }
                        }
                      }
                    }
                    v300 += 4;
                    v301 -= 16;
                  }
                  while (v301);
                }
              }
            }
          }
        }
      }
      if (!*(_DWORD *)(v107 + 36))
      {
LABEL_184:
        v31 = 0;
        goto LABEL_185;
      }
      if (HIDWORD(v666) >= 2)
      {
        v521 = a4;
        v522 = 1;
        a2 = v643;
        while (1)
        {
          v523 = *(unsigned int *)(v107 + 36);
          if (!(_DWORD)v523)
            break;
          v107 = *(_QWORD *)(v107 + 24);
          v524 = 72 * v523;
          while (*(_QWORD *)v107 != *((_QWORD *)v665 + 3 * v522))
          {
            v31 = 0;
            v107 += 72;
            v524 -= 72;
            a4 = v521;
            if (!v524)
              goto LABEL_185;
          }
          if (++v522 == HIDWORD(v666))
          {
            LODWORD(v108) = *(_DWORD *)(v107 + 52);
            a4 = v521;
            a2 = v643;
            goto LABEL_928;
          }
        }
        v31 = 0;
        a4 = v521;
      }
      else
      {
LABEL_928:
        if (!(_DWORD)v108)
          goto LABEL_184;
        if (WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v664, (const WebCore::LayoutRect *)(v107 + 56)))
        {
          v505 = __OFADD__((_DWORD)v664, DWORD2(v664));
          v506 = __OFADD__(DWORD1(v664), HIDWORD(v664));
          if (SHIDWORD(v664) >= 1 && SDWORD2(v664) >= 1)
          {
            v508 = (unsigned int *)(*(_QWORD *)(v107 + 40) + 8);
            v509 = 16 * v108;
            a2 = v643;
            while (1)
            {
              v33 = *v508;
              if ((int)v33 >= 1)
              {
                v32 = v508[1];
                if ((int)v32 >= 1)
                {
                  v510 = v664 + DWORD2(v664);
                  if (v505)
                    v510 = (v664 >> 31) + 0x7FFFFFFF;
                  v511 = *(v508 - 2);
                  if (v511 < v510)
                  {
                    v237 = __OFADD__(v511, (_DWORD)v33);
                    LODWORD(v33) = v511 + v33;
                    v33 = v237 ? (v511 >> 31) + 0x7FFFFFFF : v33;
                    if ((int)v664 < (int)v33)
                    {
                      v33 = (DWORD1(v664) + HIDWORD(v664));
                      if (v506)
                        v33 = ((DWORD1(v664) >> 31) + 0x7FFFFFFF);
                      v512 = *(v508 - 1);
                      if (v512 < (int)v33)
                      {
                        v237 = __OFADD__(v512, (_DWORD)v32);
                        LODWORD(v32) = v512 + v32;
                        v33 = (v512 >> 31) + 0x7FFFFFFF;
                        v32 = v237 ? v33 : v32;
                        if (SDWORD1(v664) < (int)v32)
                          break;
                      }
                    }
                  }
                }
              }
              v31 = 0;
              v508 += 4;
              v509 -= 16;
              if (!v509)
                goto LABEL_185;
            }
LABEL_1114:
            v31 = 4;
            goto LABEL_185;
          }
        }
        v31 = 0;
      }
      a2 = v643;
      goto LABEL_185;
    }
    v649 = 0uLL;
    if (BYTE1(v668))
    {
      BYTE2(v668) = WebCore::RenderLayer::getOverlapBoundsIncludingChildrenAccountingForTransformAnimations((uint64_t *)a3, v649.i64, 0, v34) ^ 1;
      v68 = v649;
      goto LABEL_84;
    }
    v50 = *(_QWORD *)(a3 + 32);
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 88) + 32) + 32);
    v52 = *(unsigned int *)(v51 + 20);
    if ((_DWORD)v52)
    {
      v443 = *(_QWORD **)(v51 + 8);
      v444 = 8 * v52;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v443 + 80))(*v443) & 1) == 0)
      {
        ++v443;
        v444 -= 8;
        if (!v444)
        {
          v50 = *(_QWORD *)(a3 + 32);
          goto LABEL_58;
        }
      }
      *(_QWORD *)&v651 = 0;
      v66 = WebCore::RenderLayer::calculateLayerBounds(a3, (const WebCore::RenderLayerModelObject *)a3, &v651, 0x86u, v34);
      goto LABEL_83;
    }
LABEL_58:
    v53 = 0;
    v651 = 0uLL;
    v54 = *(_BYTE *)(v50 + 45);
    if ((v54 & 0x20) != 0)
    {
      ++*(_DWORD *)(v50 + 16);
      v53 = v50;
      if ((*(_BYTE *)(v50 + 20) & 1) == 0)
      {
        *(_QWORD *)&v651 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v50, (WebCore::RenderObject *)v32);
        *((_QWORD *)&v651 + 1) = v552;
        v53 = v50;
        goto LABEL_80;
      }
    }
    v55 = (*(_BYTE *)(v50 + 52) & 7) == 4 && (*(_BYTE *)(v50 + 53) & 1) == 0;
    if (v55)
    {
      ++*(_DWORD *)(v50 + 16);
      *(_QWORD *)&v651 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v50, (const WebCore::RenderLayerModelObject *)v32, v34);
      *((_QWORD *)&v651 + 1) = v541;
      v542 = *(_DWORD *)(v50 + 16);
      if (!v542)
      {
        __break(0xC471u);
        JUMPOUT(0x194159564);
      }
    }
    else
    {
      if (*(_BYTE *)(v50 + 46) != 39)
      {
        if ((v54 & 4) != 0)
          v56 = (uint64_t *)v50;
        else
          v56 = 0;
        v57 = v56[11];
        v58 = *(_QWORD *)(*(_QWORD *)(v57 + 32) + 48);
        if (*(_QWORD *)(v58 + 8))
        {
          while (!*(_QWORD *)(v58 + 16))
          {
            v58 = *(_QWORD *)(v58 + 8);
            if (!v58)
              goto LABEL_72;
          }
        }
        else
        {
          if (*(_QWORD *)(v58 + 16))
            v59 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v59 = 0;
          if (!v59)
          {
LABEL_72:
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 40) + 216) + 8))
              v60 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v60 = 0;
            if (!v60)
            {
              v61 = v56[24];
              if (v61)
              {
                v62 = *(_QWORD *)(v61 + 20);
                v63 = (uint64_t *)(v61 + 28);
              }
              else
              {
                v62 = 0;
                v63 = v56 + 20;
              }
              v64 = *v63;
              *(_QWORD *)&v651 = v62;
              *((_QWORD *)&v651 + 1) = v64;
LABEL_79:
              if ((v54 & 0x20) == 0)
              {
LABEL_82:
                v67 = *((_QWORD *)&v651 + 1);
                v66 = v651;
LABEL_83:
                v68.i64[0] = v66;
                v68.i64[1] = v67;
LABEL_84:
                v677 = vmulq_f32(vcvtq_f32_s32(v68), (float32x4_t)vdupq_n_s32(0x3C800000u));
                WebCore::RenderGeometryMap::mapToContainer(v641, (const WebCore::FloatRect *)&v677, 0, (float *)&v651);
                v69 = *((float *)&v652 + 1);
                v70 = *(float *)&v652;
                if (*(float *)&v653 >= *(float *)&v652)
                  v71 = *(float *)&v652;
                else
                  v71 = *(float *)&v653;
                v72 = *((float *)&v651 + 1);
                v73 = *(float *)&v651;
                if (*((float *)&v651 + 2) >= *(float *)&v651)
                  v74 = *(float *)&v651;
                else
                  v74 = *((float *)&v651 + 2);
                if (v71 >= v74)
                  v71 = v74;
                v75 = fabsf(v71);
                if (v75 == INFINITY || v75 > 2147500000.0)
                  v71 = (float)((SLODWORD(v71) >> 31) ^ 0x7FFFFFFF);
                if (*((float *)&v653 + 1) >= *((float *)&v652 + 1))
                  v77 = *((float *)&v652 + 1);
                else
                  v77 = *((float *)&v653 + 1);
                if (*((float *)&v651 + 3) >= *((float *)&v651 + 1))
                  v78 = *((float *)&v651 + 1);
                else
                  v78 = *((float *)&v651 + 3);
                if (v77 >= v78)
                  v77 = v78;
                v79 = fabsf(v77);
                if (v79 == INFINITY || v79 > 2147500000.0)
                  v77 = (float)((SLODWORD(v77) >> 31) ^ 0x7FFFFFFF);
                if (*(float *)&v651 < *((float *)&v651 + 2))
                  v73 = *((float *)&v651 + 2);
                if (*(float *)&v652 < *(float *)&v653)
                  v70 = *(float *)&v653;
                if (v73 >= v70)
                  v70 = v73;
                v81 = fabsf(v70);
                if (v81 == INFINITY || v81 > 2147500000.0)
                  v70 = (float)((SLODWORD(v70) >> 31) ^ 0x7FFFFFFF);
                if (*((float *)&v651 + 1) < *((float *)&v651 + 3))
                  v72 = *((float *)&v651 + 3);
                if (*((float *)&v652 + 1) < *((float *)&v653 + 1))
                  v69 = *((float *)&v653 + 1);
                if (v72 >= v69)
                  v69 = v72;
                v83 = fabsf(v69);
                if (v83 == INFINITY || v83 > 2147500000.0)
                  v69 = (float)((SLODWORD(v69) >> 31) ^ 0x7FFFFFFF);
                v85 = v70 - v71;
                v86 = v69 - v77;
                v87 = floorf(v71 * 64.0);
                if (v87 > -2147500000.0)
                  v88 = (int)v87;
                else
                  v88 = 0x80000000;
                if (v87 < 2147500000.0)
                  LODWORD(v89) = v88;
                else
                  LODWORD(v89) = 0x7FFFFFFF;
                if (v87 >= 2147500000.0 || v87 <= -2147500000.0)
                  v89 = v89;
                else
                  v89 = (int)v87;
                v91 = floorf(v77 * 64.0);
                if (v91 > -2147500000.0)
                  v92 = (int)v91;
                else
                  v92 = 0x80000000;
                if (v91 < 2147500000.0)
                  LODWORD(v93) = v92;
                else
                  LODWORD(v93) = 0x7FFFFFFF;
                if (v91 >= 2147500000.0 || v91 <= -2147500000.0)
                  v93 = v93;
                else
                  v93 = (int)v91;
                v95 = v77 + v86;
                v96 = ceilf((float)(v71 + v85) * 64.0);
                if (v96 > -2147500000.0)
                  v97 = (int)v96;
                else
                  v97 = 0x80000000;
                if (v96 < 2147500000.0)
                  v98 = v97;
                else
                  v98 = 0x7FFFFFFF;
                if (v96 < 2147500000.0 && v96 > -2147500000.0)
                  v98 = (int)v96;
                v100 = ceilf(v95 * 64.0);
                if (v100 >= 2147500000.0 || v100 <= -2147500000.0)
                {
                  if (v100 >= 2147500000.0)
                  {
                    v102 = 0x7FFFFFFF;
                  }
                  else if (v100 <= -2147500000.0)
                  {
                    v102 = 0x80000000;
                  }
                  else
                  {
                    v102 = (int)v100;
                  }
                  a2 = v643;
                }
                else
                {
                  v102 = (int)v100;
                }
                v103 = v98 - v89;
                if (__OFSUB__(v98, (_DWORD)v89))
                  v103 = (v98 >> 31) + 0x7FFFFFFF;
                v104 = v102 - v93;
                if (__OFSUB__(v102, (_DWORD)v93))
                  v104 = (v102 >> 31) + 0x7FFFFFFF;
                *(_QWORD *)&v664 = v89 | (v93 << 32);
                *((_QWORD *)&v664 + 1) = v103 | (unint64_t)(v104 << 32);
                if (v103 < 1 || (int)v104 <= 0)
                  *((_QWORD *)&v664 + 1) = 0x4000000040;
                v105 = *(_QWORD *)(a3 + 32);
                if ((*(_DWORD *)(v105 + 20) & 0x1800000) == 0x1000000)
                {
                  v254 = *(_QWORD *)(a3 + 32);
                  if ((*(_BYTE *)(v105 + 45) & 2) != 0)
                    v254 = *(_QWORD *)(*(_QWORD *)(v105 + 32) + 8);
                  if ((*(_QWORD *)(v254 + 96) & 0x380000) == 0x300000)
                  {
                    v255 = WebCore::RenderObject::container((WebCore::RenderObject *)v105);
                    if (v255 == *(_QWORD *)(a1 + 8))
                    {
                      *(_QWORD *)&v664 = WebCore::LocalFrameView::fixedScrollableAreaBoundsInflatedForScrolling(*(WebCore::LocalFrameView **)(v255 + 248), (const WebCore::LayoutRect *)&v664);
                      *((_QWORD *)&v664 + 1) = v256;
                    }
                  }
                }
                LOBYTE(v668) = 1;
                goto LABEL_180;
              }
LABEL_80:
              v65 = *(_DWORD *)(v53 + 16);
              if (!v65)
              {
                __break(0xC471u);
                JUMPOUT(0x194158A28);
              }
              *(_DWORD *)(v53 + 16) = v65 - 1;
              goto LABEL_82;
            }
          }
        }
        v677.i64[0] = 0;
        *(_QWORD *)&v651 = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v56, (const WebCore::LayoutPoint *)&v677);
        *((_QWORD *)&v651 + 1) = v601;
        WebCore::RenderBox::flipForWritingMode((uint64_t)v56, (WebCore::LayoutRect *)&v651);
        goto LABEL_79;
      }
      ++*(_DWORD *)(v50 + 16);
      v543 = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v50);
      if (v543)
      {
        v544 = (WebCore::RenderTableCell *)v543;
        do
        {
          v545 = *((_QWORD *)v544 + 20);
          v677.i64[0] = 0;
          v677.i64[1] = v545;
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v651, (const WebCore::LayoutRect *)&v677);
          v546 = *(_QWORD *)(v50 + 192);
          if (v546)
          {
            v598 = *(_QWORD *)(v546 + 20);
            v547 = *(_QWORD *)(v546 + 28);
            *(_QWORD *)&v657 = v598;
            *((_QWORD *)&v657 + 1) = v547;
            if (v598)
            {
LABEL_1217:
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v651, (const WebCore::LayoutRect *)&v657);
              goto LABEL_1218;
            }
          }
          else
          {
            v547 = *(_QWORD *)(v50 + 160);
            *(_QWORD *)&v657 = 0;
            *((_QWORD *)&v657 + 1) = v547;
          }
          if (v545 != v547)
            goto LABEL_1217;
LABEL_1218:
          v544 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v544);
        }
        while (v544);
      }
      v542 = *(_DWORD *)(v50 + 16);
      if (!v542)
      {
        __break(0xC471u);
        JUMPOUT(0x194159B50);
      }
    }
    *(_DWORD *)(v50 + 16) = v542 - 1;
    a2 = v643;
    goto LABEL_79;
  }
LABEL_185:
  if (!*(_QWORD *)a5)
  {
    v109 = *(_QWORD *)(a3 + 24);
LABEL_187:
    if (!(_DWORD)v31)
      goto LABEL_188;
    goto LABEL_1145;
  }
  v109 = *(_QWORD *)(a3 + 24);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a5 + 32) + 46) != 48)
    goto LABEL_187;
  v31 = 4;
LABEL_1145:
  v109 = v109 & 0xFFFFFF87FFFFFFFFLL | (v31 << 35);
  *(_QWORD *)(a3 + 24) = v109;
LABEL_188:
  if (v670)
  {
    v110 = 0;
  }
  else
  {
    if ((v109 & 0x7800000000) == 0)
    {
LABEL_190:
      v110 = 1;
      goto LABEL_191;
    }
    v110 = 1;
    if ((v109 & 0x800) != 0 && *(_BYTE *)(a1 + 132))
    {
      v321 = *(_QWORD *)(a3 + 32);
      v322 = *(_QWORD *)(v321 + 32);
      if (v322)
      {
        v323 = *(_QWORD *)(v322 + 8);
        if (v323)
        {
          if ((*(_BYTE *)(*(_QWORD *)(v323 + 104) + 239) & 0x18) != 0)
            goto LABEL_190;
        }
      }
      if ((*(_BYTE *)(v321 + 23) & 0x10) != 0 && (*(_BYTE *)(v321 + 52) & 7) == 1 && (*(_BYTE *)(v321 + 53) & 2) != 0)
        goto LABEL_190;
      v110 = 0;
      v670 = 1;
      v663 = 0;
    }
  }
LABEL_191:
  v111 = *(_QWORD *)(a5 + 16);
  if ((v109 & 0x4A) != 0)
    v111 = a3;
  v658 = v111;
  v112 = *(_OWORD *)a5;
  v657 = *(_OWORD *)a5;
  v659 = 0;
  v660 = *(_DWORD *)(a5 + 25);
  v661 = 0;
  v662 = 0;
  v656 = 0;
  *(_QWORD *)&v651 = &v657;
  *((_QWORD *)&v651 + 1) = a3;
  v652 = &v663;
  v653 = &v656;
  v654 = a4;
  v655 = &v670;
  v649.i64[0] = (uint64_t)&v651;
  v649.i64[1] = (uint64_t)&v657;
  v650 = &v669;
  if ((v110 & 1) != 0)
  {
    if (v663)
    {
      *((_QWORD *)&v657 + 1) = a3;
      WebCore::LayerOverlapMap::pushCompositingContainer((WebCore::LayerOverlapMap *)a4, (const WebCore::RenderLayer *)a3);
      v656 = 1;
    }
  }
  else
  {
    LOBYTE(v660) = 1;
    v657 = (unint64_t)a3;
    if (v663)
    {
      v663 = 0;
      *(_QWORD *)(a3 + 24) = v109 & 0xFFFFFF87FFFFFFFFLL | 0x2000000000;
      v311 = &v670;
    }
    else
    {
      WebCore::LayerOverlapMap::pushCompositingContainer((WebCore::LayerOverlapMap *)a4, (const WebCore::RenderLayer *)a3);
      *v653 = 1;
      v311 = v655;
    }
    *v311 = 1;
    WebCore::RenderLayerCompositor::computeExtent(a1, a4, (uint64_t *)a3, (uint64_t)&v664, *(double *)&v112);
    v312 = BYTE1(v668);
    HIBYTE(v660) |= BYTE1(v668);
    if (BYTE1(v668))
      v312 = *(_BYTE *)(a5 + 28);
    BYTE2(v668) |= v312;
  }
  v113 = v670;
  v114 = *(uint64_t **)(a5 + 16);
  v115 = *(WTF **)(a3 + 80);
  if (!v115 || !*((_QWORD *)v115 + 1))
    goto LABEL_197;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 24) + 8) + 40) + 8)
                + 3405))
  {
    *(_QWORD *)(a3 + 80) = 0;
LABEL_475:
    if (*(_DWORD *)v115 == 1)
      WTF::fastFree(v115, (void *)v32);
    else
      --*(_DWORD *)v115;
    goto LABEL_197;
  }
  WebCore::RenderLayer::clearClipRectsIncludingDescendants((WTF *)a3, (void *)4);
  v115 = *(WTF **)(a3 + 80);
  *(_QWORD *)(a3 + 80) = 0;
  if (v115)
    goto LABEL_475;
LABEL_197:
  if (!v113 || !a6[2])
    goto LABEL_203;
  WebCore::RenderLayerCompositor::computeExtent(a1, a4, (uint64_t *)a3, (uint64_t)&v664, *(double *)&v112);
  v677 = (float32x4_t)v664;
  if (!v114 || a6[2] != v114)
    goto LABEL_1057;
  v116 = *((_DWORD *)a6 + 3);
  if (*((_BYTE *)a6 + 40))
  {
    if (v116 <= 9)
      goto LABEL_203;
    goto LABEL_1057;
  }
  if (!v116)
  {
    __break(0xC471u);
    JUMPOUT(0x19415A000);
  }
  v501 = *(WebCore::RenderLayerScrollableArea **)(*(_QWORD *)(**a6 + 8) + 264);
  a2 = v643;
  if (!v501
    || !WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v501)
    || (v515 = *(WebCore::RenderLayerScrollableArea **)(a3 + 264)) == 0
    || !WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v515))
  {
LABEL_1057:
    WebCore::RenderLayerCompositor::BackingSharingState::endBackingSharingSequence((WTF **)a6, (WebCore::RenderLayer *)a3);
    goto LABEL_203;
  }
  v516 = *((_DWORD *)a6 + 3);
  if (v516)
  {
    v517 = 56 * v516 - 56;
    v518 = (const WebCore::LayoutRect *)(*a6 + 5);
    do
    {
      v519 = WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v677, v518);
      if (v519)
        break;
      v520 = v517;
      v517 -= 56;
      v518 = (const WebCore::LayoutRect *)((char *)v518 + 56);
    }
    while (v520);
    a2 = v643;
    if (v519)
      goto LABEL_1057;
  }
  else
  {
    a2 = v643;
  }
LABEL_203:
  v117 = a6[2];
  v118 = (void *)*((unsigned int *)a6 + 3);
  if ((_DWORD)v118 && (v119 = **a6) != 0)
    v636 = *(WebCore::RenderLayerScrollableArea **)(v119 + 8);
  else
    v636 = 0;
  v648 = 0;
  v640 = (uint64_t)v117;
  if ((_QWORD)v657)
    v631 = (*(_BYTE *)(v657 + 24) & 1) == 0;
  else
    v631 = 0;
  v120 = *(_QWORD *)(a3 + 96);
  if (v120)
  {
    v484 = *(unsigned int *)(v120 + 12);
    if ((_DWORD)v484)
    {
      v485 = v656;
      if (!v656)
      {
        WebCore::LayerOverlapMap::pushSpeculativeCompositingContainer((WebCore::LayerOverlapMap *)a4, (const WebCore::RenderLayer *)a3);
        v656 = 1;
        v120 = *(_QWORD *)(a3 + 96);
        if (!v120)
          goto LABEL_1476;
        v484 = *(unsigned int *)(v120 + 12);
        if (!(_DWORD)v484)
          goto LABEL_1476;
      }
      v486 = *(_QWORD **)v120;
      v487 = *(_QWORD *)v120 + 8 * v484;
      do
      {
        WebCore::RenderLayerCompositor::computeCompositingRequirements(a1, a3, *v486, a4, &v657, a6, &v648);
        if (!v670 && v659 != 0)
        {
          *(_QWORD *)(a3 + 24) = *(_QWORD *)(a3 + 24) & 0xFFFFFF87FFFFFFFFLL | 0x2800000000;
          WebCore::RenderLayerCompositor::computeCompositingRequirements(WebCore::RenderLayer *,WebCore::RenderLayer&,WebCore::LayerOverlapMap &,WebCore::RenderLayerCompositor::CompositingState &,WebCore::RenderLayerCompositor::BackingSharingState &,BOOL &)::$_0::operator()((uint64_t *)&v651);
          WebCore::LayerOverlapMap::confirmSpeculativeCompositingContainer((WebCore::LayerOverlapMap *)a4);
        }
        ++v486;
      }
      while (v486 != (_QWORD *)v487);
      a2 = v643;
      if (!v485)
      {
LABEL_1476:
        if (WebCore::LayerOverlapMap::maybePopSpeculativeCompositingContainer((WebCore::LayerOverlapMap *)a4))
        {
          v656 = 0;
          a2 = v643;
        }
        else
        {
          a2 = v643;
          if (!v670)
          {
            *(_QWORD *)(a3 + 24) = *(_QWORD *)(a3 + 24) & 0xFFFFFF87FFFFFFFFLL | 0x2800000000;
            WebCore::RenderLayerCompositor::computeCompositingRequirements(WebCore::RenderLayer *,WebCore::RenderLayer&,WebCore::LayerOverlapMap &,WebCore::RenderLayerCompositor::CompositingState &,WebCore::RenderLayerCompositor::BackingSharingState &,BOOL &)::$_0::operator()((uint64_t *)&v651);
          }
        }
      }
    }
  }
  v121 = *(_QWORD *)(a3 + 104);
  if (v121)
  {
    v257 = *(unsigned int *)(v121 + 12);
    if ((_DWORD)v257)
    {
      v258 = *(uint64_t **)v121;
      v259 = 8 * v257;
      do
      {
        v260 = *v258++;
        WebCore::RenderLayerCompositor::computeCompositingRequirements(a1, a3, v260, a4, &v657, a6, &v648);
        v259 -= 8;
      }
      while (v259);
    }
  }
  v122 = *(_QWORD *)(a3 + 88);
  if (v122)
  {
    v261 = *(unsigned int *)(v122 + 12);
    if ((_DWORD)v261)
    {
      v262 = *(uint64_t **)v122;
      v263 = 8 * v261;
      do
      {
        v264 = *v262++;
        WebCore::RenderLayerCompositor::computeCompositingRequirements(a1, a3, v264, a4, &v657, a6, &v648);
        v263 -= 8;
      }
      while (v263);
    }
  }
  v123 = *(_QWORD *)(a3 + 24);
  v124 = v123 & 0xFFFFFFFFF3FFFFFFLL | ((unint64_t)v659 << 26) | ((unint64_t)v661 << 27);
  *(_QWORD *)(a3 + 24) = v124;
  if ((v123 & 1) != 0 && *(_BYTE *)(a1 + 195) && *(_BYTE *)(a1 + 132))
    v670 = 1;
  if ((v123 & 0x400000000000) != 0)
  {
    v529 = HIBYTE(v661);
    v126 = v124 & 0xFFFFBFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(v661) != 0) << 46);
    *(_QWORD *)(a3 + 24) = v126;
    if ((v123 & 0xA) != 0)
    {
      a2 = v643;
      if (v529)
        goto LABEL_214;
      goto LABEL_1178;
    }
    a2 = v643;
  }
  else
  {
    v125 = HIBYTE(v661);
    v126 = v124 & 0xFFFFBFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v661) << 46);
    *(_QWORD *)(a3 + 24) = v126;
    if (v125 && (v123 & 0xA) != 0)
    {
LABEL_1178:
      WebCore::RenderLayer::setChildrenNeedCompositingGeometryUpdate(a3);
      v126 = *(_QWORD *)(a3 + 24);
    }
  }
LABEL_214:
  if ((v126 & 0x20) != 0)
  {
    v483 = v662;
    *(_QWORD *)(a3 + 24) = v126 & 0xFFFFFFFFFFFFFFDFLL | (32 * (v662 != 0));
    if ((v126 & 0x10) != 0 && !v483)
      goto LABEL_1002;
  }
  else
  {
    v127 = v662;
    *(_QWORD *)(a3 + 24) = v126 & 0xFFFFFFFFFFFFFFDFLL | (32 * v662);
    if (v127 && (v126 & 0x10) != 0)
LABEL_1002:
      WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate(a3);
  }
  if (v670)
    goto LABEL_233;
  if (!*(_BYTE *)(a1 + 132))
    goto LABEL_233;
  v128 = *(_QWORD *)(a3 + 24);
  if ((v128 & 0x800) == 0)
    goto LABEL_233;
  v129 = *(_QWORD *)(a3 + 32);
  v130 = *(_QWORD *)(v129 + 32);
  if (v130)
  {
    v131 = *(_QWORD *)(v130 + 8);
    if (v131)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v131 + 104) + 239) & 0x18) != 0)
        goto LABEL_233;
    }
  }
  v132 = *(_DWORD *)(v129 + 20);
  if ((v132 & 0x10000000) != 0 && (*(_BYTE *)(v129 + 52) & 7) == 1 && (*(_BYTE *)(v129 + 53) & 2) != 0)
    goto LABEL_233;
  v133 = v659;
  v134 = v648;
  v135 = v663;
  if (!v659)
    goto LABEL_224;
  if ((v128 & 0x400000000000) != 0 && (v128 & 0xA) != 0)
    goto LABEL_872;
  if ((v128 & 0x20) != 0 && (v128 & 0x10) != 0)
    goto LABEL_872;
  if (*(_QWORD *)(a3 + 200))
    goto LABEL_872;
  v417 = *(_QWORD *)(v129 + 88);
  v418 = *(_QWORD *)(v417 + 32);
  if (*(float *)(v418 + 4) < 1.0)
    goto LABEL_872;
  v419 = *(_QWORD *)(v418 + 48);
  if (*(_QWORD *)(v419 + 8))
  {
    while (1)
    {
      v423 = a4;
      if (*(_QWORD *)(v419 + 16))
        goto LABEL_873;
      v419 = *(_QWORD *)(v419 + 8);
      if (!v419)
        goto LABEL_862;
    }
  }
  if (*(_QWORD *)(v419 + 16)
     ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
     : 0)
  {
LABEL_872:
    v423 = a4;
LABEL_873:
    v424 = 0x3000000000;
LABEL_874:
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a3 + 24) & 0xFFFFFF87FFFFFFFFLL | v424;
    WebCore::RenderLayerCompositor::computeCompositingRequirements(WebCore::RenderLayer *,WebCore::RenderLayer&,WebCore::LayerOverlapMap &,WebCore::RenderLayerCompositor::CompositingState &,WebCore::RenderLayerCompositor::BackingSharingState &,BOOL &)::$_1::operator()(v649.i64);
    a4 = v423;
    a2 = v643;
    goto LABEL_233;
  }
LABEL_862:
  v421 = *(_QWORD *)(v417 + 40);
  if (*(_QWORD *)(*(_QWORD *)(v421 + 216) + 8))
    v422 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v422 = 0;
  if (v422
    || *(_QWORD *)(v421 + 264)
    || *(_DWORD *)(*(_QWORD *)(v418 + 32) + 20)
    || *(_DWORD *)(*(_QWORD *)(v421 + 72) + 20)
    || (*(_DWORD *)(v421 + 636) & 0x1F00000) != 0x100000
    || (v132 & 0x4000) != 0 && *(_BYTE *)WebCore::RenderObject::rareData(*(WebCore::RenderObject **)(a3 + 32)))
  {
    goto LABEL_872;
  }
LABEL_224:
  if (v134)
  {
    v423 = a4;
    v514 = *(_QWORD *)(*(_QWORD *)(v129 + 88) + 40);
    if ((*(_DWORD *)(v514 + 636) & 0x380) == 0x80)
    {
      v424 = 0x4000000000;
      goto LABEL_874;
    }
    if (*(float *)(v514 + 260) != -1.0)
    {
      v424 = 0x3800000000;
      goto LABEL_874;
    }
  }
  if (v135)
    goto LABEL_232;
  v136 = *(_QWORD *)(a3 + 24);
  if ((v136 & 0x10000000) == 0)
    goto LABEL_232;
  if ((v136 & 4) == 0)
  {
    v137 = a3;
    while (1)
    {
      v137 = *(_QWORD *)(v137 + 40);
      if (!v137)
        goto LABEL_232;
      if ((*(_BYTE *)(v137 + 24) & 0x4A) != 0)
        goto LABEL_231;
    }
  }
  v137 = *(_QWORD *)(a3 + 40);
  if (!v137)
    goto LABEL_232;
LABEL_231:
  if (WebCore::RenderLayerCompositor::layerScrollBehahaviorRelativeToCompositedAncestor((WebCore::RenderLayerCompositor *)a3, (const WebCore::RenderLayer *)v137, (const WebCore::RenderLayer *)v33))
  {
    v423 = a4;
    v424 = 0x1800000000;
    goto LABEL_874;
  }
LABEL_232:
  a2 = v643;
  if (!v133)
    goto LABEL_233;
  v425 = *(_QWORD *)(a3 + 24);
  if ((v425 & 0x4000000) == 0)
    goto LABEL_233;
  v426 = *(_QWORD *)(a3 + 32);
  v427 = *(_DWORD *)(v426 + 20);
  if ((v427 & 0x1800000) == 0x1000000)
  {
    if ((v427 & 0x10000) == 0
      && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v426 + 88) + 40) + 642) << 48) & 0x20000000000000) == 0)
    {
      goto LABEL_233;
    }
    goto LABEL_878;
  }
  if ((v427 & 0x10000) != 0)
  {
LABEL_878:
    if ((v425 & 0x8000000) != 0 || !WebCore::canUseDescendantClippingLayer(v425, (const WebCore::RenderLayer *)v426))
      goto LABEL_233;
    v423 = a4;
    v424 = 0x800000000;
    goto LABEL_874;
  }
LABEL_233:
  v138 = *(_QWORD *)(a3 + 208);
  if (v138)
  {
    v550 = *(_QWORD *)(v138 + 144);
    if (v550)
      *(_QWORD *)(v550 + 24) = *(_QWORD *)(v550 + 24) & 0xFFFFFF87FFFFFFFFLL | ((unint64_t)v670 << 36);
  }
  v645[0] = 1;
  v646 = 0;
  v647 = 0;
  if ((*(_BYTE *)(a3 + 24) & 1) != 0
    && !v659
    && (WebCore::RenderLayerCompositor::requiresCompositingLayer((WebCore::RenderLayerCompositor *)a1, *(WebCore::RenderObject **)(a3 + 32), (uint64_t)v645) & 1) == 0&& !*(_BYTE *)(a1 + 198))
  {
    WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 1232)+ 32, v416);
  }
  if (WebCore::RenderLayerCompositor::updateBacking((WebCore::RenderLayerCompositor *)a1, a3, (uint64_t)v671, (uint64_t *)a6, v670))
  {
    *(_DWORD *)(a3 + 12) |= 0x200u;
    if ((*(_BYTE *)(a3 + 24) & 4) != 0)
    {
      v410 = *(_QWORD *)(a3 + 40);
      if (v410)
      {
LABEL_826:
        do
        {
          v411 = *(_DWORD *)(v410 + 12);
          if ((v411 & 2) != 0)
            break;
          *(_DWORD *)(v410 + 12) = v411 | 2;
          if ((*(_BYTE *)(v410 + 24) & 4) == 0)
          {
            while (1)
            {
              v410 = *(_QWORD *)(v410 + 40);
              if (!v410)
                goto LABEL_827;
              if ((*(_BYTE *)(v410 + 24) & 0x4A) != 0)
                goto LABEL_1008;
            }
          }
          v410 = *(_QWORD *)(v410 + 40);
LABEL_1008:
          ;
        }
        while (v410);
      }
    }
    else
    {
      v410 = a3;
      while (1)
      {
        v410 = *(_QWORD *)(v410 + 40);
        if (!v410)
          break;
        if ((*(_BYTE *)(v410 + 24) & 0x4A) != 0)
          goto LABEL_826;
      }
    }
LABEL_827:
    *(_DWORD *)(a3 + 12) |= 0x400u;
    if ((*(_BYTE *)(a3 + 24) & 4) != 0)
    {
      v412 = *(_QWORD *)(a3 + 40);
      if (v412)
      {
LABEL_831:
        do
        {
          v413 = *(_DWORD *)(v412 + 12);
          if ((v413 & 2) != 0)
            break;
          *(_DWORD *)(v412 + 12) = v413 | 2;
          if ((*(_BYTE *)(v412 + 24) & 4) == 0)
          {
            while (1)
            {
              v412 = *(_QWORD *)(v412 + 40);
              if (!v412)
                goto LABEL_832;
              if ((*(_BYTE *)(v412 + 24) & 0x4A) != 0)
                goto LABEL_1013;
            }
          }
          v412 = *(_QWORD *)(v412 + 40);
LABEL_1013:
          ;
        }
        while (v412);
      }
    }
    else
    {
      v412 = a3;
      while (1)
      {
        v412 = *(_QWORD *)(v412 + 40);
        if (!v412)
          break;
        if ((*(_BYTE *)(v412 + 24) & 0x4A) != 0)
          goto LABEL_831;
      }
    }
LABEL_832:
    if ((*(_BYTE *)(a3 + 24) & 4) != 0)
    {
      v414 = *(_QWORD *)(a3 + 40);
      if (v414)
      {
LABEL_836:
        do
        {
          v415 = *(_DWORD *)(v414 + 12);
          if ((v415 & 0x40) != 0)
            break;
          *(_DWORD *)(v414 + 12) = v415 | 0x40;
          if ((*(_BYTE *)(v414 + 24) & 4) == 0)
          {
            while (1)
            {
              v414 = *(_QWORD *)(v414 + 40);
              if (!v414)
                goto LABEL_236;
              if ((*(_BYTE *)(v414 + 24) & 0x4A) != 0)
                goto LABEL_840;
            }
          }
          v414 = *(_QWORD *)(v414 + 40);
LABEL_840:
          ;
        }
        while (v414);
      }
    }
    else
    {
      v414 = a3;
      while (1)
      {
        v414 = *(_QWORD *)(v414 + 40);
        if (!v414)
          break;
        if ((*(_BYTE *)(v414 + 24) & 0x4A) != 0)
          goto LABEL_836;
      }
    }
  }
LABEL_236:
  v143 = *(_QWORD *)(a3 + 208);
  if (v143)
  {
    v139 = *(WebCore::RenderObject **)(v143 + 144);
    if (v139)
    {
      if (WebCore::RenderLayerCompositor::updateLayerCompositingState((WebCore::RenderLayerCompositor *)a1, (uint64_t)v139, (const WebCore::RenderLayer *)a3, (uint64_t)v671, (uint64_t *)a6))WebCore::RenderLayer::setNeedsCompositingLayerConnection(a3);
    }
  }
  v144 = *(_DWORD *)(a3 + 12);
  if ((v144 & 4) != 0)
  {
    *(_DWORD *)(a3 + 12) = v144 | 0x400;
    if ((*(_BYTE *)(a3 + 24) & 4) != 0)
    {
      v324 = *(_QWORD *)(a3 + 40);
      if (v324)
      {
LABEL_642:
        do
        {
          v325 = *(_DWORD *)(v324 + 12);
          if ((v325 & 2) != 0)
            break;
          *(_DWORD *)(v324 + 12) = v325 | 2;
          if ((*(_BYTE *)(v324 + 24) & 4) == 0)
          {
            while (1)
            {
              v324 = *(_QWORD *)(v324 + 40);
              if (!v324)
                goto LABEL_643;
              if ((*(_BYTE *)(v324 + 24) & 0x4A) != 0)
                goto LABEL_997;
            }
          }
          v324 = *(_QWORD *)(v324 + 40);
LABEL_997:
          ;
        }
        while (v324);
      }
    }
    else
    {
      v324 = a3;
      while (1)
      {
        v324 = *(_QWORD *)(v324 + 40);
        if (!v324)
          break;
        if ((*(_BYTE *)(v324 + 24) & 0x4A) != 0)
          goto LABEL_642;
      }
    }
LABEL_643:
    *(_DWORD *)(a3 + 12) |= 0x200u;
    if ((*(_BYTE *)(a3 + 24) & 4) != 0)
    {
      v326 = *(_QWORD *)(a3 + 40);
      if (v326)
      {
LABEL_647:
        do
        {
          v327 = *(_DWORD *)(v326 + 12);
          if ((v327 & 2) != 0)
            break;
          *(_DWORD *)(v326 + 12) = v327 | 2;
          if ((*(_BYTE *)(v326 + 24) & 4) == 0)
          {
            while (1)
            {
              v326 = *(_QWORD *)(v326 + 40);
              if (!v326)
                goto LABEL_238;
              if ((*(_BYTE *)(v326 + 24) & 0x4A) != 0)
                goto LABEL_651;
            }
          }
          v326 = *(_QWORD *)(v326 + 40);
LABEL_651:
          ;
        }
        while (v326);
      }
    }
    else
    {
      v326 = a3;
      while (1)
      {
        v326 = *(_QWORD *)(v326 + 40);
        if (!v326)
          break;
        if ((*(_BYTE *)(v326 + 24) & 0x4A) != 0)
          goto LABEL_647;
      }
    }
  }
LABEL_238:
  *(_DWORD *)(a3 + 12) &= 0xFFFFFFC2;
  if (v648)
    goto LABEL_1069;
  v145 = *(_QWORD **)(a3 + 200);
  if (!v145)
    goto LABEL_250;
  v141.n128_u64[0] = v145[2];
  if (v141.n128_f64[0] != 0.0)
    goto LABEL_1069;
  v141.n128_u64[0] = v145[3];
  if (v141.n128_f64[0] != 0.0)
    goto LABEL_1069;
  v141.n128_u64[0] = v145[6];
  if (v141.n128_f64[0] != 0.0)
    goto LABEL_1069;
  v141.n128_u64[0] = v145[7];
  if (v141.n128_f64[0] == 0.0
    && (v141.n128_u64[0] = v145[8], v141.n128_f64[0] == 0.0)
    && (v141.n128_u64[0] = v145[9], v141.n128_f64[0] == 0.0)
    && (v141.n128_u64[0] = v145[10], v142.n128_u64[0] = 1.0, v141.n128_f64[0] == 1.0)
    && (v141.n128_u64[0] = v145[11], v141.n128_f64[0] == 0.0)
    && (v141.n128_u64[0] = v145[14], v141.n128_f64[0] == 0.0))
  {
    v141.n128_u64[0] = v145[15];
    LOBYTE(v145) = v141.n128_f64[0] != 1.0;
  }
  else
  {
LABEL_1069:
    LOBYTE(v145) = 1;
  }
LABEL_250:
  *(_BYTE *)v642 |= v145;
  v146 = *(_QWORD *)(a3 + 256);
  *(_BYTE *)(a5 + 24) |= v659 | (v146 != 0);
  *(_BYTE *)(a5 + 26) |= BYTE1(v660);
  if (!(_BYTE)v660
    && (!v146
     || !WebCore::RenderLayerCompositor::clipsCompositingDescendants(*(WebCore::RenderLayerCompositor **)(a3 + 24), *(const WebCore::RenderLayer **)(a3 + 32)))|| (_BYTE)v668 && BYTE2(v668))
  {
    *(_BYTE *)(a5 + 25) = 0;
  }
  if (*(_BYTE *)(a5 + 29))
  {
LABEL_621:
    v318 = 1;
    goto LABEL_622;
  }
  if (a2)
  {
    v147 = *(_QWORD *)(a3 + 256);
    if (!v147)
    {
      v148 = 0;
      *(_BYTE *)(a5 + 29) = 0;
      goto LABEL_257;
    }
    v318 = 0;
    if (a2 != (const WebCore::RenderLayer *)a3)
    {
      v319 = *(WebCore::RenderObject **)(a3 + 32);
      if ((*((_DWORD *)v319 + 5) & 0x1800000) == 0x1000000)
      {
        v320 = WebCore::RenderObject::containingBlock(v319);
        if (v320)
        {
          while (*((_BYTE *)v320 + 46) != 49)
          {
            if (*((const WebCore::RenderLayer **)v320 + 18) == a2)
              goto LABEL_819;
            v320 = WebCore::RenderObject::containingBlock(v320);
            v318 = 1;
            if (!v320)
              goto LABEL_622;
          }
        }
        goto LABEL_621;
      }
    }
  }
  else
  {
LABEL_819:
    v318 = 0;
  }
LABEL_622:
  v147 = *(_QWORD *)(a3 + 256);
  *(_BYTE *)(a5 + 29) = v318;
  if (v147)
  {
    v148 = 1;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 88) + 40) + 636) & 0x1F00000) != 0x100000)
    {
      *(_BYTE *)(a5 + 30) = 1;
      goto LABEL_626;
    }
  }
  else
  {
    v148 = 0;
  }
LABEL_257:
  v149 = *(_QWORD *)(a3 + 24);
  if ((v149 & 0x400000000000) == 0 || (v149 & 0xA) != 0)
  {
    if (!v148)
      goto LABEL_259;
  }
  else
  {
    *(_BYTE *)(a5 + 30) = 1;
    if ((v148 & 1) == 0)
      goto LABEL_259;
  }
LABEL_626:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 88) + 40) + 72) + 20))
  {
LABEL_1053:
    *(_BYTE *)(a5 + 31) = 1;
    goto LABEL_260;
  }
LABEL_259:
  v150 = *(_QWORD *)(a3 + 24);
  if ((v150 & 0x20) != 0 && (v150 & 0x10) == 0)
    goto LABEL_1053;
LABEL_260:
  v151 = *(_QWORD *)(a5 + 16);
  if (v147)
  {
    v313 = *(_QWORD *)(a3 + 80);
    if (v313)
    {
      v445 = *(_QWORD *)(v313 + 8);
      if (v445)
      {
        v446 = *(WebCore::RenderLayerBacking **)(v445 + 256);
        if (v446)
          WebCore::RenderLayerBacking::removeBackingSharingLayer(v446, (WebCore::RenderLayer *)a3);
      }
    }
    v314 = *((unsigned int *)a6 + 3);
    if ((_DWORD)v314)
    {
      v315 = 56 * v314;
      v316 = (uint64_t)(*a6 + 1);
      do
      {
        WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>(v316, (_QWORD *)a3);
        v316 += 56;
        v315 -= 56;
      }
      while (v315);
    }
  }
  v152 = a6[2];
  if (v152 == (uint64_t *)a3)
  {
    WebCore::RenderLayerCompositor::BackingSharingState::endBackingSharingSequence((WTF **)a6, (WebCore::RenderLayer *)a3);
    v435 = *(void ***)(a3 + 256);
    if (v435)
      WebCore::RenderLayerBacking::clearBackingSharingLayers(v435);
  }
  else
  {
    if (!v151 || !*(_QWORD *)(a3 + 256))
      goto LABEL_264;
    if ((*(_BYTE *)(a3 + 27) & 4) == 0)
    {
      WebCore::RenderLayerCompositor::computeExtent(a1, a4, (uint64_t *)a3, (uint64_t)&v664, v141.n128_f64[0]);
      if (!v152)
      {
        WebCore::RenderLayerCompositor::BackingSharingState::startBackingSharingSequence((uint64_t)a6, (WTF **)a3, v664, *((uint64_t *)&v664 + 1), v151);
        goto LABEL_264;
      }
      v677 = (float32x4_t)v664;
      if (a6[2] == (uint64_t *)v151)
      {
        v317 = *((_DWORD *)a6 + 3);
        if (*((_BYTE *)a6 + 40))
        {
          if (v317 < 0xA)
          {
LABEL_611:
            WebCore::RenderLayerCompositor::BackingSharingState::addBackingSharingCandidate((uint64_t)a6, (uint64_t *)a3, v664, *((uint64_t *)&v664 + 1), v640, v118);
            goto LABEL_264;
          }
        }
        else
        {
          if (!v317)
          {
            __break(0xC471u);
            JUMPOUT(0x19415A06CLL);
          }
          v530 = *(WebCore::RenderLayerScrollableArea **)(*(_QWORD *)(**a6 + 8) + 264);
          a2 = v643;
          if (v530)
          {
            if (WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v530))
            {
              v553 = *(WebCore::RenderLayerScrollableArea **)(a3 + 264);
              if (v553)
              {
                if (WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v553))
                {
                  v554 = *((_DWORD *)a6 + 3);
                  if (!v554)
                  {
                    a2 = v643;
                    goto LABEL_611;
                  }
                  v555 = 56 * v554 - 56;
                  v556 = (const WebCore::LayoutRect *)(*a6 + 5);
                  do
                  {
                    v557 = WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v677, v556);
                    if (v557)
                      break;
                    v558 = v555;
                    v555 -= 56;
                    v556 = (const WebCore::LayoutRect *)((char *)v556 + 56);
                  }
                  while (v558);
                  a2 = v643;
                  if (!v557)
                    goto LABEL_611;
                }
              }
            }
          }
        }
      }
    }
    WebCore::RenderLayerBacking::clearBackingSharingLayers(*(void ***)(a3 + 256));
    if (v636)
    {
      if (*((_DWORD *)a6 + 3))
      {
        v531 = (WebCore::RenderLayerScrollableArea *)**a6;
        if (v531)
          v531 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)v531 + 1);
      }
      else
      {
        v531 = 0;
      }
      a2 = v643;
      if (v531 == v636)
        WebCore::RenderLayerCompositor::BackingSharingState::endBackingSharingSequence((WTF **)a6, (WebCore::RenderLayer *)a3);
    }
  }
LABEL_264:
  v153 = (_QWORD)v657 && (*(_BYTE *)(v657 + 24) & 1) == 0 || *((_QWORD *)&v657 + 1) != 0;
  if (v669)
    v154 = !v631;
  else
    v154 = 0;
  v155 = v656;
  if (v153 && (*(_BYTE *)(a3 + 24) & 1) == 0)
  {
    LODWORD(v642) = v154;
    if ((_BYTE)v668)
      goto LABEL_396;
    v674 = 0uLL;
    if (BYTE1(v668))
    {
      BYTE2(v668) = WebCore::RenderLayer::getOverlapBoundsIncludingChildrenAccountingForTransformAnimations((uint64_t *)a3, v674.i64, 0, v141.n128_f64[0]) ^ 1;
      v173 = v674;
      goto LABEL_300;
    }
    v156 = *(_QWORD *)(a3 + 32);
    v157 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v156 + 88) + 32) + 32);
    v158 = *(unsigned int *)(v157 + 20);
    if ((_DWORD)v158)
    {
      v438 = *(_QWORD **)(v157 + 8);
      v439 = 8 * v158;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v438 + 80))(*v438) & 1) == 0)
      {
        ++v438;
        v439 -= 8;
        if (!v439)
        {
          v156 = *(_QWORD *)(a3 + 32);
          goto LABEL_275;
        }
      }
      v677.i64[0] = 0;
      v171 = WebCore::RenderLayer::calculateLayerBounds(a3, (const WebCore::RenderLayerModelObject *)a3, &v677, 0x86u, v141.n128_f64[0]);
      goto LABEL_299;
    }
LABEL_275:
    v159 = 0;
    v677 = 0uLL;
    v160 = *(_BYTE *)(v156 + 45);
    if ((v160 & 0x20) != 0)
    {
      ++*(_DWORD *)(v156 + 16);
      v159 = v156;
      if ((*(_BYTE *)(v156 + 20) & 1) == 0)
      {
        v677.i64[0] = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v156, v139);
        v677.i64[1] = v551;
        v159 = v156;
        goto LABEL_296;
      }
    }
    if ((*(_BYTE *)(v156 + 52) & 7) == 4 && (*(_BYTE *)(v156 + 53) & 1) == 0)
    {
      ++*(_DWORD *)(v156 + 16);
      v677.i64[0] = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v156, v139, v141.n128_f64[0]);
      v677.i64[1] = v532;
      v533 = *(_DWORD *)(v156 + 16);
      if (!v533)
      {
        __break(0xC471u);
        JUMPOUT(0x194159B04);
      }
      *(_DWORD *)(v156 + 16) = v533 - 1;
      a2 = v643;
    }
    else
    {
      if (*(_BYTE *)(v156 + 46) != 39)
      {
        if ((v160 & 4) == 0)
          v156 = 0;
        v162 = *(_QWORD *)(v156 + 88);
        v163 = *(_QWORD *)(*(_QWORD *)(v162 + 32) + 48);
        if (*(_QWORD *)(v163 + 8))
        {
          while (!*(_QWORD *)(v163 + 16))
          {
            v163 = *(_QWORD *)(v163 + 8);
            if (!v163)
              goto LABEL_288;
          }
        }
        else
        {
          if (*(_QWORD *)(v163 + 16))
            v164 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v164 = 0;
          if (!v164)
          {
LABEL_288:
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v162 + 40) + 216) + 8))
              v165 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v165 = 0;
            if (!v165)
            {
              v166 = *(_QWORD *)(v156 + 192);
              if (v166)
              {
                v167 = *(_QWORD *)(v166 + 20);
                v168 = (uint64_t *)(v166 + 28);
              }
              else
              {
                v167 = 0;
                v168 = (uint64_t *)(v156 + 160);
              }
              v169 = *v168;
              v677.i64[0] = v167;
              v677.i64[1] = v169;
              goto LABEL_295;
            }
          }
        }
        *(_QWORD *)&v682[0] = 0;
        v677.i64[0] = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v156, (const WebCore::LayoutPoint *)v682);
        v677.i64[1] = v602;
        WebCore::RenderBox::flipForWritingMode(v156, (WebCore::LayoutRect *)&v677);
        goto LABEL_295;
      }
      v534 = v155;
      ++*(_DWORD *)(v156 + 16);
      v535 = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v156);
      if (v535)
      {
        v536 = (WebCore::RenderTableCell *)v535;
        do
        {
          v537 = *((_QWORD *)v536 + 20);
          *(_QWORD *)&v682[0] = 0;
          *((_QWORD *)&v682[0] + 1) = v537;
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v677, (const WebCore::LayoutRect *)v682);
          v538 = *(_QWORD *)(v156 + 192);
          if (v538)
          {
            v597 = *(_QWORD *)(v538 + 20);
            v539 = *(_QWORD *)(v538 + 28);
            v675 = v597;
            v676 = v539;
            if (v597)
            {
LABEL_1203:
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v677, (const WebCore::LayoutRect *)&v675);
              goto LABEL_1204;
            }
          }
          else
          {
            v539 = *(_QWORD *)(v156 + 160);
            v675 = 0;
            v676 = v539;
          }
          if (v537 != v539)
            goto LABEL_1203;
LABEL_1204:
          v536 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v536);
        }
        while (v536);
      }
      v540 = *(_DWORD *)(v156 + 16);
      if (!v540)
      {
        __break(0xC471u);
        JUMPOUT(0x194159B24);
      }
      *(_DWORD *)(v156 + 16) = v540 - 1;
      a2 = v643;
      v155 = v534;
    }
LABEL_295:
    if ((v160 & 0x20) == 0)
    {
LABEL_298:
      v172 = v677.i64[1];
      v171 = v677.i64[0];
LABEL_299:
      v173.i64[0] = v171;
      v173.i64[1] = v172;
LABEL_300:
      v682[0] = vmulq_f32(vcvtq_f32_s32(v173), (float32x4_t)vdupq_n_s32(0x3C800000u));
      WebCore::RenderGeometryMap::mapToContainer(v641, (const WebCore::FloatRect *)v682, 0, v677.f32);
      v175 = v678;
      v174 = v679;
      if (v680 >= v678)
        v176 = v678;
      else
        v176 = v680;
      v177 = v677.f32[1];
      v178 = v677.f32[0];
      if (v677.f32[2] >= v677.f32[0])
        v179 = v677.f32[0];
      else
        v179 = v677.f32[2];
      if (v176 >= v179)
        v176 = v179;
      v180 = fabsf(v176);
      if (v180 == INFINITY || v180 > 2147500000.0)
        v176 = (float)((SLODWORD(v176) >> 31) ^ 0x7FFFFFFF);
      if (v681 >= v679)
        v182 = v679;
      else
        v182 = v681;
      if (v677.f32[3] >= v677.f32[1])
        v183 = v677.f32[1];
      else
        v183 = v677.f32[3];
      if (v182 >= v183)
        v182 = v183;
      v184 = fabsf(v182);
      if (v184 == INFINITY || v184 > 2147500000.0)
        v182 = (float)((SLODWORD(v182) >> 31) ^ 0x7FFFFFFF);
      if (v677.f32[0] < v677.f32[2])
        v178 = v677.f32[2];
      if (v678 < v680)
        v175 = v680;
      if (v178 >= v175)
        v175 = v178;
      v186 = fabsf(v175);
      if (v186 == INFINITY || v186 > 2147500000.0)
        v175 = (float)((SLODWORD(v175) >> 31) ^ 0x7FFFFFFF);
      if (v677.f32[1] < v677.f32[3])
        v177 = v677.f32[3];
      if (v679 < v681)
        v174 = v681;
      if (v177 >= v174)
        v174 = v177;
      v188 = fabsf(v174);
      if (v188 == INFINITY || v188 > 2147500000.0)
        v174 = (float)((SLODWORD(v174) >> 31) ^ 0x7FFFFFFF);
      v190 = v175 - v176;
      v191 = v174 - v182;
      v192 = floorf(v176 * 64.0);
      if (v192 > -2147500000.0)
        v193 = (int)v192;
      else
        v193 = 0x80000000;
      if (v192 < 2147500000.0)
        LODWORD(v194) = v193;
      else
        LODWORD(v194) = 0x7FFFFFFF;
      if (v192 >= 2147500000.0 || v192 <= -2147500000.0)
        v194 = v194;
      else
        v194 = (int)v192;
      v196 = floorf(v182 * 64.0);
      if (v196 > -2147500000.0)
        v197 = (int)v196;
      else
        v197 = 0x80000000;
      if (v196 < 2147500000.0)
        LODWORD(v198) = v197;
      else
        LODWORD(v198) = 0x7FFFFFFF;
      if (v196 >= 2147500000.0 || v196 <= -2147500000.0)
        v198 = v198;
      else
        v198 = (int)v196;
      v200 = v182 + v191;
      v201 = ceilf((float)(v176 + v190) * 64.0);
      if (v201 > -2147500000.0)
        v202 = (int)v201;
      else
        v202 = 0x80000000;
      if (v201 < 2147500000.0)
        v203 = v202;
      else
        v203 = 0x7FFFFFFF;
      if (v201 < 2147500000.0 && v201 > -2147500000.0)
        v203 = (int)v201;
      v205 = ceilf(v200 * 64.0);
      if (v205 >= 2147500000.0 || v205 <= -2147500000.0)
      {
        if (v205 >= 2147500000.0)
        {
          v207 = 0x7FFFFFFF;
        }
        else if (v205 <= -2147500000.0)
        {
          v207 = 0x80000000;
        }
        else
        {
          v207 = (int)v205;
        }
        a2 = v643;
      }
      else
      {
        v207 = (int)v205;
      }
      v208 = v203 - v194;
      if (__OFSUB__(v203, (_DWORD)v194))
        v208 = (v203 >> 31) + 0x7FFFFFFF;
      v209 = v207 - v198;
      if (__OFSUB__(v207, (_DWORD)v198))
        v209 = (v207 >> 31) + 0x7FFFFFFF;
      *(_QWORD *)&v664 = v194 | (v198 << 32);
      *((_QWORD *)&v664 + 1) = v208 | (unint64_t)(v209 << 32);
      if (v208 < 1 || (int)v209 <= 0)
        *((_QWORD *)&v664 + 1) = 0x4000000040;
      v210 = *(_QWORD *)(a3 + 32);
      if ((*(_DWORD *)(v210 + 20) & 0x1800000) == 0x1000000)
      {
        v251 = *(_QWORD *)(a3 + 32);
        if ((*(_BYTE *)(v210 + 45) & 2) != 0)
          v251 = *(_QWORD *)(*(_QWORD *)(v210 + 32) + 8);
        if ((*(_QWORD *)(v251 + 96) & 0x380000) == 0x300000)
        {
          v252 = WebCore::RenderObject::container((WebCore::RenderObject *)v210);
          if (v252 == *(_QWORD *)(a1 + 8))
          {
            *(_QWORD *)&v664 = WebCore::LocalFrameView::fixedScrollableAreaBoundsInflatedForScrolling(*(WebCore::LocalFrameView **)(v252 + 248), (const WebCore::LayoutRect *)&v664);
            *((_QWORD *)&v664 + 1) = v253;
          }
        }
      }
      LOBYTE(v668) = 1;
LABEL_396:
      WebCore::RenderLayerCompositor::computeClippingScopes(a1, (_QWORD *)a3, (uint64_t)&v664);
      if ((*(_BYTE *)(a3 + 27) & 0x10) == 0)
      {
        *(_QWORD *)&v682[0] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        DWORD2(v682[0]) = 2;
        BYTE12(v682[0]) = 1;
        WebCore::RenderLayer::backgroundClipRect((unsigned int *)&v677, a3, (uint64_t)v682);
        LODWORD(v219) = v677.i32[0];
        LODWORD(v220) = v677.i32[1];
        v218 = v677.i32[2];
        v217 = v677.i32[3];
        goto LABEL_408;
      }
      if (!HIDWORD(v666))
      {
        __break(0xC471u);
        JUMPOUT(0x194159A84);
      }
      LODWORD(a6) = v155;
      v211 = (WTF *)*((_QWORD *)v665 + 3 * HIDWORD(v666) - 3);
      v677.i64[0] = (uint64_t)v211;
      v677.i32[2] = 5;
      v677.i8[12] = 0;
      WebCore::RenderLayer::parentClipRects((WTF *)v682, a3, (uint64_t)&v677);
      v39 = *(WTF **)&v682[0];
      v212 = *(_QWORD *)(a3 + 32);
      v213 = (*(_DWORD *)(v212 + 96) >> 19) & 7;
      if (v213 == 2)
      {
        v48 = (uint64_t *)a4;
        v214 = (unsigned int *)(*(_QWORD *)&v682[0] + 48);
      }
      else
      {
        v48 = (uint64_t *)a4;
        if (v213 == 6)
          v214 = (unsigned int *)(*(_QWORD *)&v682[0] + 28);
        else
          v214 = (unsigned int *)(*(_QWORD *)&v682[0] + 8);
      }
      LODWORD(a2) = *v214;
      a4 = v214[1];
      LODWORD(a5) = v214[2];
      LODWORD(v42) = v214[3];
      v641 = v211;
      if (!*(_BYTE *)(*(_QWORD *)&v682[0] + 4))
      {
        v215 = *v214;
        v216 = v214[1];
        goto LABEL_402;
      }
      v440 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v212 + 24) + 8) + 40) + 8) + 1944);
      v441 = *((_QWORD *)v211 + 4);
      v215 = a2;
      v216 = a4;
      if (v441 != v440)
      {
LABEL_402:
        if (*(_DWORD *)v39 == 1)
          WTF::fastFree(v39, (void *)v32);
        else
          --*(_DWORD *)v39;
        a4 = (uint64_t)v48;
        a2 = v643;
        v155 = (int)a6;
        if (v215 == -1073741808 && (_DWORD)a5 == 2147483615)
        {
          if ((_DWORD)v216 == -1073741808)
          {
            v217 = 2147483615;
            v218 = 2147483615;
            LODWORD(v219) = -1073741808;
            LODWORD(v220) = -1073741808;
            if ((_DWORD)v42 == 2147483615)
              goto LABEL_408;
          }
        }
        else if (v215 == -1073741808 && (_DWORD)v216 == -1073741808 && (_DWORD)a5 == 2147483615)
        {
          v217 = 2147483615;
          v218 = 2147483615;
          LODWORD(v219) = -1073741808;
          LODWORD(v220) = -1073741808;
          if ((_DWORD)v42 == 2147483615)
          {
LABEL_408:
            v222 = v664;
            v221 = DWORD1(v664);
            v223 = *((_QWORD *)&v664 + 1);
            if ((_DWORD)v219 == -1073741808 && v218 == 2147483615)
            {
              if ((_DWORD)v220 != -1073741808 || v217 != 2147483615)
              {
                v450 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 528)
                                                         + 8)
                                             + 24)
                                 + 8);
                v451 = v217;
                v452 = 2147483615;
                v453 = -1073741808;
                v454 = v220;
                v154 = (int)v642;
                if (!*(_BYTE *)(v450 + 1098))
                {
                  v455 = *(float *)(v450 + 356);
                  if ((_DWORD)v220 != -1073741808
                    || (v451 = 2147483615, v452 = 2147483615, v453 = -1073741808, v454 = -1073741808, v217 != 2147483615))
                  {
                    v456.i32[0] = 2147483615;
                    v456.i32[1] = v220;
                    v456.i64[1] = v217 | 0xC000001000000000;
                    v457 = vmulq_n_f32(vmulq_f32(vcvtq_f32_s32(v456), (float32x4_t)vdupq_n_s32(0x3C800000u)), v455);
                    v458 = (float64x2_t)vdupq_n_s64(0x4050000000000000uLL);
                    v459 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v457.f32), v458);
                    v460 = vmulq_f64(vcvt_hight_f64_f32(v457), v458);
                    v461 = (float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL);
                    v462 = (int32x4_t)vcgeq_f64(v460, v461);
                    if ((vminv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v459, v461), v462)))) & 1) == 0|| (v463 = (float64x2_t)vdupq_n_s64(0xC1E0000000000000), (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v459, v463), (int32x4_t)vcgtq_f64(v460, v463)))) & 0xF) != 0))
                    {
                      v590 = (int64x2_t)vmvnq_s8((int8x16_t)v462);
                      v591 = vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v590, v590)).i16[3];
                      if (v460.f64[1] > -2147483650.0)
                        v592 = (int)v460.f64[1];
                      else
                        v592 = 0x80000000;
                      if ((v591 & 1) != 0)
                        v453 = v592;
                      else
                        v453 = 0x7FFFFFFF;
                      v593 = (float)((float)((float)(int)v220 * 0.015625) * v455) * 64.0;
                      if (v593 > -2147483650.0)
                        v454 = (int)v593;
                      else
                        v454 = 0x80000000;
                      if (v593 >= 2147483650.0)
                        v454 = 0x7FFFFFFF;
                      v594 = (float)((float)((float)2147483615 * 0.015625) * v455) * 64.0;
                      if (v594 > -2147483650.0)
                        v595 = (int)v594;
                      else
                        v595 = 0x80000000;
                      if (v594 < 2147483650.0)
                        v452 = v595;
                      else
                        v452 = 0x7FFFFFFF;
                      v596 = (float)((float)((float)v217 * 0.015625) * v455) * 64.0;
                      if (v596 >= 2147483650.0)
                      {
                        v451 = 0x7FFFFFFF;
                      }
                      else if (v596 <= -2147483650.0)
                      {
                        v451 = 0x80000000;
                      }
                      else
                      {
                        v451 = (int)v596;
                      }
                      a2 = v643;
                    }
                    else
                    {
                      v453 = (int)v460.f64[1];
                      v454 = (int)v459.f64[1];
                      v452 = (int)v459.f64[0];
                      v451 = (int)v460.f64[0];
                    }
                  }
                }
                if ((int)v664 <= v453)
                  v464 = v453;
                else
                  v464 = v664;
                if (SDWORD1(v664) <= (int)v454)
                  v465 = v454;
                else
                  v465 = DWORD1(v664);
                v466 = v664 + DWORD2(v664);
                if (__OFADD__((_DWORD)v664, DWORD2(v664)))
                  v466 = (v664 >> 31) + 0x7FFFFFFF;
                v467 = v453 + v452;
                if (__OFADD__(v453, v452))
                  v467 = (v453 >> 31) + 0x7FFFFFFF;
                if (v467 < v466)
                  v466 = v467;
                v468 = DWORD1(v664) + HIDWORD(v664);
                if (__OFADD__(DWORD1(v664), HIDWORD(v664)))
                  v468 = (DWORD1(v664) >> 31) + 0x7FFFFFFF;
                v469 = v454 + v451;
                if (__OFADD__(v454, v451))
                  v469 = (v454 >> 31) + 0x7FFFFFFF;
                if (v469 >= v468)
                  v470 = v468;
                else
                  v470 = v469;
                if (v464 >= v466 || (int)v465 >= v470)
                {
                  v466 = 0;
                  v470 = 0;
                  v222 = 0;
                  v221 = 0;
                }
                else
                {
                  v222 = v464;
                  v221 = v465;
                }
                v471 = v466 - v222;
                if (__OFSUB__(v466, v222))
                  v471 = (v466 >> 31) + 0x7FFFFFFF;
                v472 = (v470 - v221);
                if (__OFSUB__(v470, (_DWORD)v221))
                  v472 = (v470 >> 31) + 0x7FFFFFFF;
                v223 = v471 | (unint64_t)(v472 << 32);
                goto LABEL_413;
              }
            }
            else
            {
              v567 = (_DWORD)v219 == -1073741808 && (_DWORD)v220 == -1073741808;
              v568 = v567;
              if (!v567 || v218 != 2147483615 || v217 != 2147483615)
              {
                v570 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 528)
                                                         + 8)
                                             + 24)
                                 + 8);
                v571 = v217;
                v572 = v218;
                v573 = v219;
                v574 = v220;
                if (!*(_BYTE *)(v570 + 1098))
                {
                  v575 = *(float *)(v570 + 356);
                  if (!v568
                    || v218 != 2147483615
                    || (v571 = 2147483615, v572 = 2147483615, v573 = -1073741808, v574 = -1073741808, v217 != 2147483615))
                  {
                    v576 = (float)((float)((float)(int)v219 * 0.015625) * v575) * 64.0;
                    if (v576 > -2147483650.0)
                      v573 = (int)v576;
                    else
                      v573 = 0x80000000;
                    if (v576 >= 2147483650.0)
                      v573 = 0x7FFFFFFF;
                    v577 = (float)((float)((float)(int)v220 * 0.015625) * v575) * 64.0;
                    if (v577 > -2147483650.0)
                      v574 = (int)v577;
                    else
                      v574 = 0x80000000;
                    if (v577 >= 2147483650.0)
                      v574 = 0x7FFFFFFF;
                    v578 = (float)((float)((float)v218 * 0.015625) * v575) * 64.0;
                    if (v578 > -2147483650.0)
                      v579 = (int)v578;
                    else
                      v579 = 0x80000000;
                    if (v578 < 2147483650.0)
                      v572 = v579;
                    else
                      v572 = 0x7FFFFFFF;
                    v580 = (float)((float)((float)v217 * 0.015625) * v575) * 64.0;
                    if (v580 >= 2147483650.0)
                    {
                      v571 = 0x7FFFFFFF;
                    }
                    else if (v580 <= -2147483650.0)
                    {
                      v571 = 0x80000000;
                    }
                    else
                    {
                      v571 = (int)v580;
                    }
                  }
                }
                if ((int)v664 <= v573)
                  v581 = v573;
                else
                  v581 = v664;
                if (SDWORD1(v664) <= (int)v574)
                  v582 = v574;
                else
                  v582 = DWORD1(v664);
                v583 = v664 + DWORD2(v664);
                if (__OFADD__((_DWORD)v664, DWORD2(v664)))
                  v583 = (v664 >> 31) + 0x7FFFFFFF;
                v584 = v573 + v572;
                if (__OFADD__(v573, v572))
                  v584 = (v573 >> 31) + 0x7FFFFFFF;
                if (v584 < v583)
                  v583 = v584;
                v585 = DWORD1(v664) + HIDWORD(v664);
                if (__OFADD__(DWORD1(v664), HIDWORD(v664)))
                  v585 = (DWORD1(v664) >> 31) + 0x7FFFFFFF;
                v586 = v574 + v571;
                if (__OFADD__(v574, v571))
                  v586 = (v574 >> 31) + 0x7FFFFFFF;
                if (v586 >= v585)
                  v587 = v585;
                else
                  v587 = v586;
                if (v581 >= v583 || (int)v582 >= v587)
                {
                  v583 = 0;
                  v587 = 0;
                  v222 = 0;
                  v221 = 0;
                }
                else
                {
                  v222 = v581;
                  v221 = v582;
                }
                v588 = v583 - v222;
                if (__OFSUB__(v583, v222))
                  v588 = (v583 >> 31) + 0x7FFFFFFF;
                v589 = (v587 - v221);
                if (__OFSUB__(v587, (_DWORD)v221))
                  v589 = (v587 >> 31) + 0x7FFFFFFF;
                v223 = v588 | (unint64_t)(v589 << 32);
              }
              a2 = v643;
            }
            v154 = (int)v642;
LABEL_413:
            v677.i64[0] = v222 | (unint64_t)(v221 << 32);
            v677.i64[1] = v223;
            WebCore::RenderLayerCompositor::computeClippingScopes(a1, (_QWORD *)a3, (uint64_t)&v664);
            v224 = *(unsigned int *)(a4 + 12);
            if (v224 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x194159A7CLL);
            }
            v225 = *(WTF **)(*(_QWORD *)a4 + 8 * v224 - 16);
            if (HIDWORD(v666) >= 2)
            {
              v248 = 1;
              while (1)
              {
                v139 = (WTF *)((char *)v665 + 24 * v248);
                v249 = *((unsigned int *)v225 + 9);
                if (!(_DWORD)v249)
                  break;
                v226 = (WTF *)*((_QWORD *)v225 + 3);
                v250 = 72 * v249;
                while (*(_QWORD *)v226 != *(_QWORD *)v139)
                {
                  v226 = (WTF *)((char *)v226 + 72);
                  v250 -= 72;
                  if (!v250)
                    goto LABEL_492;
                }
                ++v248;
                v225 = v226;
                if (v248 == HIDWORD(v666))
                  goto LABEL_416;
              }
LABEL_492:
              v225 = WebCore::OverlapMapContainer::ClippingScope::addChildWithLayerAndBounds((uint64_t)v225, (char *)v139);
            }
            v226 = v225;
LABEL_416:
            v227 = (uint64_t *)((char *)v226 + 40);
            v228 = *((unsigned int *)v226 + 13);
            if ((_DWORD)v228 == *((_DWORD *)v226 + 12))
            {
              v287 = (__n128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v227, v228 + 1, (unint64_t)&v677);
              v228 = *((unsigned int *)v226 + 13);
              v229 = *((_QWORD *)v226 + 5);
              v141 = *v287;
            }
            else
            {
              v229 = *v227;
              v141 = (__n128)v677;
            }
            *(__n128 *)(v229 + 16 * v228) = v141;
            ++*((_DWORD *)v226 + 13);
            if (v677.i32[2] >= 1 && v677.i32[3] >= 1)
            {
              v230 = (float32x4_t *)((char *)v226 + 56);
              v231 = *((_DWORD *)v226 + 16);
              if (v231 < 1 || (v232 = *((_DWORD *)v226 + 17), v232 <= 0))
              {
                v141 = (__n128)v677;
                *v230 = v677;
              }
              else
              {
                v233 = *((_DWORD *)v226 + 14);
                v234 = *((_DWORD *)v226 + 15);
                if (v677.i32[0] >= (int)v233)
                  v235 = v233;
                else
                  v235 = v677.u32[0];
                if (v677.i32[1] >= (int)v234)
                  v236 = v234;
                else
                  v236 = v677.u32[1];
                v237 = __OFADD__(v233, v231);
                v238 = v233 + v231;
                if (v237)
                  v238 = (v233 >> 31) + 0x7FFFFFFF;
                v239 = v677.i32[0] + v677.i32[2];
                if (__OFADD__(v677.i32[0], v677.i32[2]))
                  v239 = ((unsigned __int32)v677.i32[0] >> 31) + 0x7FFFFFFF;
                if (v238 > (int)v239)
                  v239 = v238;
                v237 = __OFADD__(v234, v232);
                v240 = v234 + v232;
                if (v237)
                  v240 = (v234 >> 31) + 0x7FFFFFFF;
                v241 = v677.i32[1] + v677.i32[3];
                if (__OFADD__(v677.i32[1], v677.i32[3]))
                  v241 = ((unsigned __int32)v677.i32[1] >> 31) + 0x7FFFFFFF;
                if (v240 > v241)
                  v241 = v240;
                v230->i64[0] = v235 | (v236 << 32);
                v242 = v239 - v235;
                if (__OFSUB__(v239, (_DWORD)v235))
                  v242 = (v239 >> 31) + 0x7FFFFFFF;
                *((_DWORD *)v226 + 16) = v242;
                v243 = v241 - v236;
                if (__OFSUB__(v241, (_DWORD)v236))
                  v243 = (v241 >> 31) + 0x7FFFFFFF;
                *((_DWORD *)v226 + 17) = v243;
              }
            }
            v244 = *(unsigned int *)(a4 + 28);
            if ((_DWORD)v244)
            {
              if ((_DWORD)v244 == 1)
              {
                __break(0xC471u);
                JUMPOUT(0x194159A74);
              }
              v141.n128_f64[0] = WebCore::OverlapMapContainer::add(*(WTF **)(*(_QWORD *)(a4 + 16) + 8 * v244 - 16), (int)v139, (WebCore::LayoutRect *)&v677, (uint64_t)&v665);
              a2 = v643;
            }
            *(_BYTE *)(a4 + 1120) = 0;
            goto LABEL_448;
          }
        }
        v219 = WebCore::RenderLayer::convertToLayerCoords(v641, *(WebCore::RenderLayer **)(*(_QWORD *)(a1 + 8) + 144), v215 | (unint64_t)(v216 << 32), 0);
        v220 = HIDWORD(v219);
        v217 = (int)v42;
        v218 = a5;
        goto LABEL_408;
      }
      if ((_DWORD)a2 == -1073741808 && (_DWORD)a5 == 2147483615)
      {
        if ((_DWORD)a4 != -1073741808)
          goto LABEL_909;
      }
      else if ((_DWORD)a2 != -1073741808 || (_DWORD)a4 != -1073741808 || (_DWORD)a5 != 2147483615)
      {
        goto LABEL_909;
      }
      v215 = -1073741808;
      v216 = 3221225488;
      if ((_DWORD)v42 == 2147483615)
        goto LABEL_402;
LABEL_909:
      v442 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v440 + 248));
      v266 = HIDWORD(v442);
      v215 = (_DWORD)a2 + v442;
      if (!__OFADD__((_DWORD)a2, (_DWORD)v442))
        goto LABEL_910;
      goto LABEL_1313;
    }
LABEL_296:
    v170 = *(_DWORD *)(v159 + 16);
    if (!v170)
    {
      __break(0xC471u);
      JUMPOUT(0x1941589DCLL);
    }
    *(_DWORD *)(v159 + 16) = v170 - 1;
    goto LABEL_298;
  }
LABEL_448:
  if (v154)
    WebCore::RenderLayerCompositor::addDescendantsToOverlapMapRecursive((WebCore::RenderLayerCompositor *)a1, (WebCore::LayerOverlapMap *)a4, (const WebCore::RenderLayer *)a3, 0, v141, v142);
  if (v155)
    WebCore::LayerOverlapMap::popCompositingContainer((WebCore::LayerOverlapMap *)a4, (const WebCore::RenderLayer *)a3, v140);
  v245 = *(_QWORD *)(a3 + 256);
  if (v245)
  {
    v307 = *(_QWORD *)(v245 + 8);
    if ((*(_BYTE *)(v307 + 26) & 0x80) != 0)
    {
      v489 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v307 + 32) + 24)
                                                                         + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v490 = (WebCore::LocalFrameView *)*((_QWORD *)v489 + 31);
      v677 = 0uLL;
      if (*((_BYTE *)v490 + 321))
      {
        *(_QWORD *)&v682[0] = WebCore::RenderView::unscaledDocumentRect(v489);
        *((_QWORD *)&v682[0] + 1) = v525;
        WebCore::LayoutRect::LayoutRect((int8x8_t *)&v677, (int32x2_t *)v682);
        LODWORD(v491) = v677.i32[2];
      }
      else
      {
        WebCore::LocalFrameView::rectForFixedPositionLayout(v490, v141.n128_f64[0]);
        v677.i64[0] = v492;
        v677.i64[1] = v491;
      }
      if ((int)v491 < 1 || v677.i32[3] < 1)
      {
        v493 = 1;
      }
      else
      {
        v493 = 1;
        if (SDWORD2(v664) >= 1 && SHIDWORD(v664) >= 1)
        {
          v494 = v664 + DWORD2(v664);
          if (__OFADD__((_DWORD)v664, DWORD2(v664)))
            v494 = (v664 >> 31) + 0x7FFFFFFF;
          if (v677.i32[0] < v494)
          {
            v495 = v677.i32[0] + v491;
            if (__OFADD__(v677.i32[0], (_DWORD)v491))
              v495 = ((unsigned __int32)v677.i32[0] >> 31) + 0x7FFFFFFF;
            if ((int)v664 < v495)
            {
              v496 = DWORD1(v664) + HIDWORD(v664);
              if (__OFADD__(DWORD1(v664), HIDWORD(v664)))
                v496 = (DWORD1(v664) >> 31) + 0x7FFFFFFF;
              if (v677.i32[1] < v496)
              {
                v497 = v677.i32[1] + v677.i32[3];
                if (__OFADD__(v677.i32[1], v677.i32[3]))
                  v497 = ((unsigned __int32)v677.i32[1] >> 31) + 0x7FFFFFFF;
                v493 = SDWORD1(v664) >= v497;
              }
            }
          }
        }
      }
      (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v245 + 72) + 696))(*(_QWORD *)(v245 + 72), v493);
      v498 = *(_QWORD *)(v245 + 80);
      if (v498)
        (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v498 + 696))(v498, v493);
      v499 = *(_QWORD *)(v245 + 88);
      if (v499)
        (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v499 + 696))(v499, v493);
      v500 = *(_QWORD *)(v245 + 168);
      if (v500)
        (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v500 + 696))(v500, v493);
      a2 = v643;
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v245 + 72) + 696))(*(_QWORD *)(v245 + 72), 1);
      v308 = *(_QWORD *)(v245 + 80);
      if (v308)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v308 + 696))(v308, 1);
      v309 = *(_QWORD *)(v245 + 88);
      if (v309)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v309 + 696))(v309, 1);
      v310 = *(_QWORD *)(v245 + 168);
      if (v310)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v310 + 696))(v310, 1);
    }
  }
  if (a2)
    v246 = *((_QWORD *)a2 + 4);
  else
    v246 = 0;
  v247 = *(_DWORD *)(a4 + 68);
  if (v247)
  {
    do
    {
      v603 = v247 - 1;
      v604 = *(_QWORD *)(a4 + 56);
      v605 = *(_QWORD *)(v604 + 32 * v603);
      if (v605 == v246)
        break;
      if (*(_BYTE *)(v605 + 46) != 49)
      {
        v606 = v604 + 32 * v603;
        v607 = *(_DWORD *)(a4 + 1096);
        v608 = *(_DWORD *)(v606 + 8);
        v237 = __OFSUB__(v607, v608);
        v609 = v607 - v608;
        v610 = (v607 >> 31) + 0x7FFFFFFF;
        if (!v237)
          v610 = v609;
        *(_DWORD *)(a4 + 1096) = v610;
        v611 = *(_DWORD *)(a4 + 1100);
        v612 = *(_DWORD *)(v606 + 12);
        v237 = __OFSUB__(v611, v612);
        v613 = v611 - v612;
        v614 = (v611 >> 31) + 0x7FFFFFFF;
        if (v237)
          v613 = v614;
        *(_DWORD *)(a4 + 1100) = v613;
      }
      v615 = v604 + 32 * v603;
      if (*(_BYTE *)(v615 + 25))
        --*(_DWORD *)(a4 + 40);
      v618 = *(WTF **)(v615 + 16);
      v617 = (_QWORD *)(v615 + 16);
      v616 = v618;
      if (v618)
        --*(_DWORD *)(a4 + 44);
      if (*(_BYTE *)(v604 + 32 * v603 + 26))
        --*(_DWORD *)(a4 + 48);
      *v617 = 0;
      if (v616)
        WTF::fastFree(v616, v139);
      *(_DWORD *)(a4 + 68) = v603;
      --v247;
    }
    while ((_DWORD)v603);
  }
  result = v665;
  if (v667 != (_BYTE *)v665 && v665 != 0)
  {
    v665 = 0;
    LODWORD(v666) = 0;
    return (WTF *)WTF::fastFree(result, v139);
  }
  return result;
}

WTF *WebCore::RenderBox::computeBlockDirectionMargins(WebCore::RenderBox *this, const WebCore::RenderBlock *a2, WebCore::LayoutUnit *a3, WebCore::LayoutUnit *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  float v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *result;
  int v21;
  float v22;
  double v23;
  uint64_t v24;
  float v25;
  float v26;
  void *v27;
  WTF *v28;
  void *v29;

  v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 461) & 1) != 0
    && (*(unsigned int (**)(const WebCore::RenderBlock *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)a2 + 1584))(a2, 1, this))
  {
    v16 = *((_QWORD *)this + 4);
    if (v16)
    {
      v16 = *(_QWORD *)(v16 + 8);
      if (v16)
      {
        if (*(_BYTE *)(v16 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
        {
          v28 = WebCore::RenderObject::ensureRareData(this, v27);
          LODWORD(v16) = 0;
          *((_BYTE *)v28 + 2) |= 1u;
          goto LABEL_11;
        }
        goto LABEL_31;
      }
    }
  }
  else
  {
    v9 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
    if (v9 > 4)
      v10 = 0;
    else
      v10 = qword_1969FC6C8[v9];
    v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
    v12 = (unsigned __int8 *)(v11 + 8 * v10);
    v13 = v12[4];
    switch(v13)
    {
      case 4:
        v14 = *(float *)v12;
        if (!v12[6])
          v14 = (float)*(int *)v12;
        break;
      case 3:
        v25 = *(float *)v12;
        if (!*(_BYTE *)(v11 + 8 * v10 + 6))
          v25 = (float)*(int *)v12;
        v14 = (float)((float)((float)v8 * 0.015625) * v25) / 100.0;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v12, (float)v8 * 0.015625);
        break;
      default:
LABEL_31:
        LODWORD(v16) = 0;
        goto LABEL_11;
    }
    v15 = v14 * 64.0;
    if (v15 >= 2147483650.0)
    {
      LODWORD(v16) = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      LODWORD(v16) = 0x80000000;
    }
    else
    {
      LODWORD(v16) = (int)v15;
    }
  }
LABEL_11:
  *(_DWORD *)a3 = v16;
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 461) & 2) != 0
    && (result = (WTF *)(*(uint64_t (**)(const WebCore::RenderBlock *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)a2 + 1584))(a2, 2, this), (_DWORD)result))
  {
    v24 = *((_QWORD *)this + 4);
    if (v24)
    {
      v24 = *(_QWORD *)(v24 + 8);
      if (v24)
      {
        if (*(_BYTE *)(v24 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
        {
          result = WebCore::RenderObject::ensureRareData(this, v29);
          LODWORD(v24) = 0;
          *((_BYTE *)result + 2) |= 2u;
          goto LABEL_21;
        }
        goto LABEL_33;
      }
    }
  }
  else
  {
    v17 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
    if (v17 > 4)
      v18 = 2;
    else
      v18 = qword_1969FC6F0[v17];
    v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
    result = (WTF *)(v19 + 8 * v18);
    v21 = *((unsigned __int8 *)result + 4);
    switch(v21)
    {
      case 4:
        v22 = *(float *)result;
        if (!*((_BYTE *)result + 6))
          v22 = (float)*(int *)result;
        break;
      case 3:
        v26 = *(float *)result;
        if (!*(_BYTE *)(v19 + 8 * v18 + 6))
          v26 = (float)*(int *)result;
        v22 = (float)((float)((float)v8 * 0.015625) * v26) / 100.0;
        break;
      case 11:
        result = (WTF *)WebCore::Length::nonNanCalculatedValue(result, (float)v8 * 0.015625);
        break;
      default:
LABEL_33:
        LODWORD(v24) = 0;
        goto LABEL_21;
    }
    v23 = v22 * 64.0;
    if (v23 >= 2147483650.0)
    {
      LODWORD(v24) = 0x7FFFFFFF;
    }
    else if (v23 <= -2147483650.0)
    {
      LODWORD(v24) = 0x80000000;
    }
    else
    {
      LODWORD(v24) = (int)v23;
    }
  }
LABEL_21:
  *(_DWORD *)a4 = v24;
  return result;
}

WebCore::RenderObject *WebCore::RenderBox::containingBlockLogicalWidthForContent(WebCore::RenderBox *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderObject *result;
  WebCore::RenderObject *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(WebCore::RenderObject *);
  WebCore::RenderObject *v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
    goto LABEL_12;
  ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalWidthMap + 8);
  v3 = *((_QWORD *)this + 1);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *v2;
    if (*v2)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = 1;
      v11 = *(_QWORD *)(v4 + 16 * v9);
      if (v11)
      {
        while (v11 == -1 || v11 != v3)
        {
          v9 = (v9 + v10++) & v5;
          v11 = *(_QWORD *)(v4 + 16 * v9);
          if (!v11)
            goto LABEL_6;
        }
        v13 = v4 + 16 * v9;
        v12 = *(unsigned int *)(v4 - 4);
        v14 = v4 + 16 * v12;
      }
      else
      {
LABEL_6:
        v12 = *(unsigned int *)(v4 - 4);
        v13 = v4 + 16 * v12;
        v14 = v13;
      }
      v61 = v13;
      v15 = v4 + 16 * v12;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v61 = 0;
      v62 = 0;
    }
LABEL_8:
    while (v13 != v15 && !*(_QWORD *)(*(_QWORD *)v13 + 8))
    {
      v37 = v13 + 16;
      v61 = v37;
      v13 = v14;
      if (v37 != v14)
      {
        v13 = v37;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 16;
          v61 = v13;
          if (v13 == v14)
          {
            v13 = v14;
            goto LABEL_8;
          }
        }
      }
    }
  }
  else
  {
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v60, v2);
    v4 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  }
  if (v4)
    v4 += 16 * *(unsigned int *)(v4 - 4);
  if (v61 != v4)
  {
    v36 = *(_QWORD *)(v61 + 8);
    if ((v36 & 0xFF00000000) != 0)
      return (WebCore::RenderObject *)v36;
    else
      return 0;
  }
  else
  {
LABEL_12:
    result = WebCore::RenderObject::containingBlock(this);
    if (result)
    {
      v17 = result;
      if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
      {
        return (WebCore::RenderObject *)WebCore::RenderBox::clientLogicalWidth(result);
      }
      else
      {
        v18 = *(_QWORD *)result;
        if (((*((_DWORD *)result + 31) >> 13) & 6u) - 2 < 4)
        {
          v43 = *((_DWORD *)result + 41);
          v44 = (*(uint64_t (**)(WebCore::RenderObject *))(v18 + 1000))(result);
          if (__OFSUB__(v43, v44))
            v45 = (v43 >> 31) + 0x7FFFFFFF;
          else
            v45 = v43 - v44;
          v46 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 1008))(v17);
          if (__OFSUB__(v45, v46))
            v47 = (v45 >> 31) + 0x7FFFFFFF;
          else
            v47 = v45 - v46;
          v48 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 1360))(v17);
          v49 = v48 << 6;
          if (v48 < -33554432)
            v49 = 0x80000000;
          if (v48 > 0x1FFFFFF)
            v49 = 0x7FFFFFFF;
          v26 = __OFSUB__(v47, v49);
          v50 = v47 - v49;
          if (v26)
            v50 = (v47 >> 31) + 0x7FFFFFFF;
          v51 = v50 & ~(v50 >> 31);
          v52 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 928))(v17);
          if (__OFSUB__(v51, v52))
            v53 = 0x7FFFFFFF;
          else
            v53 = v51 - v52;
          v54 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 936))(v17);
          if (__OFSUB__(v53, v54))
            v55 = (v53 >> 31) + 0x7FFFFFFF;
          else
            v55 = v53 - v54;
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v17 + 11) + 40) + 584) & 0x100) != 0)
          {
            v57 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 1360))(v17);
            v58 = v57 << 6;
            if (v57 > 0x1FFFFFF)
              v58 = 0x7FFFFFFF;
            if (v57 >= -33554432)
              v56 = v58;
            else
              v56 = 0x80000000;
          }
          else
          {
            v56 = 0;
          }
          v26 = __OFSUB__(v55, v56);
          v35 = v55 - v56;
          if (v26)
            v35 = (v55 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          v19 = *((_DWORD *)result + 40);
          v20 = (*(uint64_t (**)(WebCore::RenderObject *))(v18 + 1016))(result);
          if (__OFSUB__(v19, v20))
            v21 = (v19 >> 31) + 0x7FFFFFFF;
          else
            v21 = v19 - v20;
          v22 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 1024))(v17);
          if (__OFSUB__(v21, v22))
            v23 = (v21 >> 31) + 0x7FFFFFFF;
          else
            v23 = v21 - v22;
          v24 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 1352))(v17);
          v25 = v24 << 6;
          if (v24 < -33554432)
            v25 = 0x80000000;
          if (v24 > 0x1FFFFFF)
            v25 = 0x7FFFFFFF;
          v26 = __OFSUB__(v23, v25);
          v27 = v23 - v25;
          if (v26)
            v27 = (v23 >> 31) + 0x7FFFFFFF;
          v28 = v27 & ~(v27 >> 31);
          v29 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 944))(v17);
          if (__OFSUB__(v28, v29))
            v30 = 0x7FFFFFFF;
          else
            v30 = v28 - v29;
          v31 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 952))(v17);
          v32 = v30 - v31;
          if (__OFSUB__(v30, v31))
            v32 = (v30 >> 31) + 0x7FFFFFFF;
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v17 + 11) + 40) + 584) & 0x100) != 0)
          {
            v38 = *(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v17 + 1352);
            v39 = v17;
            v40 = v32;
            v41 = v38(v39);
            v32 = v40;
            v42 = v41 << 6;
            if (v41 > 0x1FFFFFF)
              v42 = 0x7FFFFFFF;
            if (v41 >= -33554432)
              v33 = v42;
            else
              v33 = 0x80000000;
          }
          else
          {
            v33 = 0;
          }
          v26 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = (v32 >> 31) + 0x7FFFFFFF;
          if (!v26)
            v35 = v34;
        }
        return (WebCore::RenderObject *)(v35 & ~(v35 >> 31));
      }
    }
  }
  return result;
}

WebCore::RenderObject *WebCore::RenderObject::containingBlock(WebCore::RenderObject *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  WebCore::RenderObject *v5;
  WebCore::RenderObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::WillChangeData *v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Frame *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  int v53;
  WebCore::RenderObject *v54;

  if ((*((_BYTE *)this + 45) & 2) != 0 || (v1 = *((unsigned __int8 *)this + 46), v1 == 17))
  {
    v19 = *((_QWORD *)this + 4);
    if (!v19)
      return 0;
    v20 = *(_QWORD *)(v19 + 8);
    if (!v20)
      return 0;
    while ((*(_BYTE *)(v20 + 20) & 3) == 0 || (*(_BYTE *)(v20 + 45) & 0x40) == 0)
    {
      v21 = *(_QWORD *)(v20 + 32);
      if (!v21)
        return 0;
      v5 = 0;
      v20 = *(_QWORD *)(v21 + 8);
      if (!v20)
        return v5;
    }
    return (WebCore::RenderObject *)v20;
  }
  v2 = *((_QWORD *)this + 4);
  if (v2 && *(_QWORD *)(v2 + 8) || v1 != 31)
  {
    if ((*((_BYTE *)this + 45) & 1) != 0)
      goto LABEL_9;
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (!v3)
      goto LABEL_9;
    if ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19415ADB8);
    }
    if ((*(_BYTE *)(v3 + 23) & 0x20) == 0)
    {
LABEL_9:
      v4 = *((_QWORD *)this + 12);
      if ((v4 & 0xF80000000000) != 0x480000000000)
      {
        v5 = 0;
        switch((v4 >> 19) & 7)
        {
          case 0uLL:
          case 1uLL:
          case 3uLL:
            if (!v2)
              return 0;
            while (1)
            {
              v5 = *(WebCore::RenderObject **)(v2 + 8);
              if (!v5 || (*((_BYTE *)v5 + 20) & 3) != 0 && (*((_BYTE *)v5 + 45) & 0x40) != 0)
                break;
              v2 = *((_QWORD *)v5 + 4);
              if (!v2)
                return 0;
            }
            return v5;
          case 2uLL:
            if ((*((_BYTE *)this + 45) & 0x20) != 0 && (v4 & 0x380000) == 0x80000)
            {
              if (!v2)
                return 0;
              v7 = *(WebCore::RenderObject **)(v2 + 8);
              if (!v7)
                return 0;
              while (1)
              {
                if ((*((_BYTE *)v7 + 45) & 0x40) != 0)
                {
                  if ((*((_BYTE *)v7 + 45) & 1) == 0
                    || ((*((_BYTE *)v7 + 45) & 2) != 0
                      ? (v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 4) + 8) + 96))
                      : (v28 = *((_QWORD *)v7 + 12)),
                        (v28 & 0x1F) != 1 ? (v29 = (v28 & 0x1F) == 14) : (v29 = 1),
                        !v29
                     || (v28 & 0xF80000000000) != 0
                     || ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + 176))(v7) & 1) != 0
                     || (v30 = *((unsigned __int8 *)v7 + 46), v30 == 20)))
                  {
LABEL_24:
                    v5 = v7;
                    if ((*((_BYTE *)v7 + 45) & 0x40) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19415AB54);
                    }
                    return v5;
                  }
                  if ((*((_BYTE *)v7 + 52) & 7) == 1)
                  {
                    if ((*((_BYTE *)v7 + 53) & 2) != 0 || v30 == 26 || v30 == 49)
                      goto LABEL_24;
                  }
                  else if (v30 == 49 || v30 == 26)
                  {
                    goto LABEL_24;
                  }
                }
                v7 = (WebCore::RenderObject *)WebCore::RenderObject::containingBlock(v7);
                v5 = 0;
                if (!v7)
                  return v5;
              }
            }
            if (!v2)
              return 0;
            v8 = *(_QWORD *)(v2 + 8);
            if (!v8)
              return 0;
            ++*(_DWORD *)(v8 + 16);
            break;
          case 6uLL:
            v54 = this;
            return (WebCore::RenderObject *)WebCore::RenderObject::containingBlockForPositionType(WebCore::PositionType,WebCore::RenderObject const&)::$_2::operator()((uint64_t)&v54);
          default:
            return v5;
        }
        do
        {
          v9 = *(unsigned __int8 *)(v8 + 46);
          if (v9 == 49
            || (*(_BYTE *)(v8 + 98) & 0x38) != 0
            || ((*(_BYTE *)(v8 + 45) & 0x40) != 0 || (v9 - 36) <= 4 && v9 != 38)
            && (*(_BYTE *)(v8 + 22) & 2) != 0)
          {
            goto LABEL_104;
          }
          v10 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 40);
          if (*(_DWORD *)(*(_QWORD *)(v10 + 72) + 20))
          {
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8))
              goto LABEL_104;
          }
          if ((*(_BYTE *)(v8 + 45) & 0x40) != 0)
          {
            v11 = *(WebCore::WillChangeData **)(v10 + 200);
            if (v11)
            {
              if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8)) & 1) != 0)goto LABEL_104;
              v9 = *(unsigned __int8 *)(v8 + 46);
            }
          }
          if (v9 == 67 || v9 == 90)
            goto LABEL_104;
          v12 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 40);
          v13 = *(_BYTE *)(v12 + 462);
          v14 = *(_BYTE *)(v12 + 642) & 3;
          v15 = v13 | 0x19;
          if (v14 == 1)
            v13 |= 0x15u;
          v16 = v14 == 2 ? v15 : v13;
          if ((v16 & 3) != 0
            && ((*(_BYTE *)(v8 + 20) & 1) != 0
             || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v8))
            && (*(_QWORD *)(v8 + 96) & 0x1FLL) != 0x19
            && (*(unsigned __int8 *)(v8 + 46) - 36 > 4 || (*(_BYTE *)(v8 + 52) & 7) == 1))
          {
LABEL_104:
            v32 = (_BYTE *)v8;
            while (1)
            {
              if ((v32[45] & 0x40) != 0)
              {
                if ((v32[45] & 1) == 0
                  || ((v32[45] & 2) != 0
                    ? (v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v32 + 4) + 8) + 96))
                    : (v34 = *((_QWORD *)v32 + 12)),
                      (v34 & 0x1F) != 1 ? (v35 = (v34 & 0x1F) == 14) : (v35 = 1),
                      !v35
                   || (v34 & 0xF80000000000) != 0
                   || ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v32 + 176))(v32) & 1) != 0
                   || (v36 = v32[46], v36 == 20)))
                {
LABEL_107:
                  if ((v32[45] & 0x40) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19415AF3CLL);
                  }
LABEL_108:
                  v33 = *(_DWORD *)(v8 + 16);
                  if (!v33)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19415AF5CLL);
                  }
                  goto LABEL_109;
                }
                if ((v32[52] & 7) == 1)
                {
                  if ((v32[53] & 2) != 0 || v36 == 26 || v36 == 49)
                    goto LABEL_107;
                }
                else if (v36 == 49 || v36 == 26)
                {
                  goto LABEL_107;
                }
              }
              v32 = (_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v32);
              if (!v32)
                goto LABEL_108;
            }
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 40) + 636) & 0xC0000) != 0
            && ((*(_BYTE *)(v8 + 20) & 1) != 0
             || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v8))
            && (*(_QWORD *)(v8 + 96) & 0x1FLL) != 0x19)
          {
            v31 = *(unsigned __int8 *)(v8 + 46);
            if ((v31 - 36) <= 4)
            {
              if (v31 == 36)
                goto LABEL_104;
            }
            else if (v31 != 63 && v31 != 35)
            {
              goto LABEL_104;
            }
          }
          v17 = *(_QWORD *)(v8 + 32);
          if (v17)
          {
            v17 = *(_QWORD *)(v17 + 8);
            if (v17)
              ++*(_DWORD *)(v17 + 16);
          }
          v18 = *(_DWORD *)(v8 + 16);
          if (!v18)
          {
            __break(0xC471u);
            JUMPOUT(0x19415ADECLL);
          }
          v5 = 0;
          *(_DWORD *)(v8 + 16) = v18 - 1;
          v8 = v17;
        }
        while (v17);
        return v5;
      }
      v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    }
    return *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 1944);
  }
  v22 = *((_QWORD *)this + 25);
  if (!v22)
    return 0;
  v23 = *(_QWORD *)(v22 + 216);
  if (v23 && (v24 = *(WebCore::Frame **)(v23 + 8)) != 0)
  {
    v37 = WebCore::Frame::ownerRenderer(v24);
    if (!v37)
      return 0;
    v8 = v37;
    v25 = *(_BYTE *)(v37 + 45);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v22 + 208) + 64) & 0xFFFFFFFFFFFFLL;
    if (!v8)
      return 0;
    v25 = *(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v22 + 208) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D);
    if ((v25 & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19415B1C0);
    }
    if ((v25 & 4) == 0)
    {
      v26 = *(_QWORD *)(v8 + 32);
      if (v26)
      {
        v8 = *(_QWORD *)(v26 + 8);
        if (v8)
        {
          v5 = 0;
          while (1)
          {
            v25 = *(_BYTE *)(v8 + 45);
            if ((v25 & 4) != 0)
              break;
            v27 = *(_QWORD *)(v8 + 32);
            if (!v27)
              return 0;
            v8 = *(_QWORD *)(v27 + 8);
            if (!v8)
              return v5;
          }
          goto LABEL_134;
        }
      }
      return 0;
    }
  }
LABEL_134:
  ++*(_DWORD *)(v8 + 16);
  if ((v25 & 1) == 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
    if (v38)
    {
      if ((*(_WORD *)(v38 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19415B1E0);
      }
      if ((*(_BYTE *)(v38 + 23) & 0x20) != 0)
        goto LABEL_140;
    }
  }
  v39 = *(_QWORD *)(v8 + 96);
  if ((v39 & 0xF80000000000) == 0x480000000000)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
LABEL_140:
    v32 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v38 + 40) + 8) + 1944);
    goto LABEL_141;
  }
  v32 = 0;
  switch((v39 >> 19) & 7)
  {
    case 0uLL:
    case 1uLL:
    case 3uLL:
      v40 = *(_QWORD *)(v8 + 32);
      if (!v40)
        goto LABEL_161;
      while (1)
      {
        v32 = *(_BYTE **)(v40 + 8);
        if (!v32 || (v32[20] & 3) != 0 && (v32[45] & 0x40) != 0)
          goto LABEL_141;
        v40 = *((_QWORD *)v32 + 4);
        if (!v40)
          goto LABEL_161;
      }
    case 2uLL:
      if ((v25 & 0x20) == 0)
        goto LABEL_152;
      if ((v25 & 2) != 0)
        v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 96);
      if ((v39 & 0x380000) != 0x80000)
      {
LABEL_152:
        v41 = *(_QWORD *)(v8 + 32);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 8);
          if (v42)
          {
            ++*(_DWORD *)(v42 + 16);
            do
            {
              if (WebCore::RenderElement::canContainAbsolutelyPositionedObjects((WebCore::RenderElement *)v42))
              {
                v32 = (_BYTE *)v42;
                while (1)
                {
                  if ((v32[45] & 0x40) != 0)
                  {
                    if ((v32[45] & 1) == 0
                      || ((v32[45] & 2) != 0
                        ? (v48 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v32 + 4) + 8) + 96))
                        : (v48 = *((_QWORD *)v32 + 12)),
                          (v48 & 0x1F) != 1 ? (v49 = (v48 & 0x1F) == 14) : (v49 = 1),
                          !v49
                       || (v48 & 0xF80000000000) != 0
                       || ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v32 + 176))(v32) & 1) != 0
                       || (v50 = v32[46], v50 == 20)))
                    {
LABEL_174:
                      if ((v32[45] & 0x40) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19415B3E8);
                      }
LABEL_175:
                      v47 = *(_DWORD *)(v42 + 16);
                      if (!v47)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19415B408);
                      }
                      *(_DWORD *)(v42 + 16) = v47 - 1;
                      goto LABEL_141;
                    }
                    if ((v32[52] & 7) == 1)
                    {
                      if ((v32[53] & 2) != 0 || v50 == 26 || v50 == 49)
                        goto LABEL_174;
                    }
                    else if (v50 == 49 || v50 == 26)
                    {
                      goto LABEL_174;
                    }
                  }
                  v32 = (_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v32);
                  if (!v32)
                    goto LABEL_175;
                }
              }
              v43 = *(_QWORD *)(v42 + 32);
              if (v43)
              {
                v43 = *(_QWORD *)(v43 + 8);
                if (v43)
                  ++*(_DWORD *)(v43 + 16);
              }
              v44 = *(_DWORD *)(v42 + 16);
              if (!v44)
              {
                __break(0xC471u);
                JUMPOUT(0x19415B1A0);
              }
              *(_DWORD *)(v42 + 16) = v44 - 1;
              v42 = v43;
            }
            while (v43);
          }
        }
LABEL_161:
        v32 = 0;
        goto LABEL_141;
      }
      v45 = *(_QWORD *)(v8 + 32);
      if (!v45)
        goto LABEL_161;
      v46 = *(_BYTE **)(v45 + 8);
      if (!v46)
        goto LABEL_161;
      while (1)
      {
        if ((v46[45] & 0x40) == 0)
          goto LABEL_226;
        if ((v46[45] & 1) == 0)
          break;
        v51 = (v46[45] & 2) != 0 ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v46 + 4) + 8) + 96) : *((_QWORD *)v46 + 12);
        if ((v51 & 0x1F) != 1 && (v51 & 0x1F) != 14)
          break;
        if ((v51 & 0xF80000000000) != 0)
          break;
        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v46 + 176))(v46) & 1) != 0)
          break;
        v53 = v46[46];
        if (v53 == 20)
          break;
        if ((v46[52] & 7) == 1)
        {
          if ((v46[53] & 2) != 0 || v53 == 26 || v53 == 49)
            break;
        }
        else if (v53 == 49 || v53 == 26)
        {
          break;
        }
LABEL_226:
        v46 = (_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v46);
        v32 = 0;
        if (!v46)
          goto LABEL_141;
      }
      v32 = v46;
      if ((v46[45] & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19415B12CLL);
      }
LABEL_141:
      v33 = *(_DWORD *)(v8 + 16);
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x19415AFF8);
      }
LABEL_109:
      *(_DWORD *)(v8 + 16) = v33 - 1;
      return (WebCore::RenderObject *)v32;
    case 6uLL:
      v54 = (WebCore::RenderObject *)v8;
      v32 = WebCore::RenderObject::containingBlockForPositionType(WebCore::PositionType,WebCore::RenderObject const&)::$_2::operator()((uint64_t)&v54);
      goto LABEL_141;
    default:
      goto LABEL_141;
  }
}

void WebCore::RenderLayer::updateLayerListsIfNeeded(WebCore::RenderLayer *this)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  WebCore::RenderLayer::updateDescendantDependentFlags(this);
  v3 = *((_QWORD *)this + 3);
  if ((v3 & 0x80) != 0)
  {
    if ((v3 & 0x4A) != 0)
    {
      WebCore::RenderLayer::rebuildZOrderLists(this, v2);
      v3 = *((_QWORD *)this + 3);
    }
    else
    {
      WebCore::RenderLayer::clearZOrderLists((uint64_t)this, v2);
      v3 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFF7FLL;
      *((_QWORD *)this + 3) = v3;
    }
  }
  if ((v3 & 0x100) != 0)
  {
    for (i = *((_QWORD *)this + 8); ; i = *(_QWORD *)(i + 56))
    {
      v18 = i;
      if (!i)
        break;
      if ((*(_BYTE *)(i + 24) & 4) != 0)
      {
        v7 = *((_QWORD *)this + 26);
        if (!v7 || *(_QWORD *)(v7 + 144) != i)
        {
          v8 = *((_QWORD *)this + 13);
          if (!v8)
          {
            v8 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v8 = 0;
            *(_QWORD *)(v8 + 8) = 0;
            v9 = (WTF *)*((_QWORD *)this + 13);
            *((_QWORD *)this + 13) = v8;
            if (v9)
            {
              v10 = *(WTF **)v9;
              if (*(_QWORD *)v9)
              {
                *(_QWORD *)v9 = 0;
                *((_DWORD *)v9 + 2) = 0;
                v15 = v9;
                WTF::fastFree(v10, v2);
                v9 = v15;
              }
              WTF::fastFree(v9, v2);
              v8 = *((_QWORD *)this + 13);
            }
          }
          v11 = *(unsigned int *)(v8 + 12);
          if ((_DWORD)v11 == *(_DWORD *)(v8 + 8))
          {
            v12 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v11 + 1, (unint64_t)&v18);
            v11 = *(unsigned int *)(v8 + 12);
            *(_QWORD *)(*(_QWORD *)v8 + 8 * v11) = *v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v8 + 8 * v11) = v18;
          }
          *(_DWORD *)(v8 + 12) = v11 + 1;
          i = v18;
          *(_QWORD *)(v18 + 24) &= ~0x20000000000000uLL;
        }
      }
    }
    v6 = *((_QWORD *)this + 13);
    if (v6)
    {
      v13 = *(unsigned int *)(v6 + 12);
      if (*(_DWORD *)(v6 + 8) > v13)
      {
        v14 = *(WTF **)v6;
        if ((_DWORD)v13)
        {
          *(_DWORD *)(v6 + 8) = v13;
          *(_QWORD *)v6 = WTF::fastRealloc(v14, (void *)(8 * v13));
        }
        else if (v14)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          WTF::fastFree(v14, v2);
        }
      }
    }
    *((_QWORD *)this + 3) &= ~0x100uLL;
  }
  v4 = *((_QWORD *)this + 26);
  if (v4)
  {
    v16 = *(_QWORD *)(v4 + 144);
    if (v16)
    {
      WebCore::RenderLayer::updateZOrderLists(*(WebCore::RenderLayer **)(v4 + 144), v2);
      WebCore::RenderLayer::updateNormalFlowList(v16, v17);
    }
  }
}

uint64_t WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(uint64_t result, int a2)
{
  int v2;

  if ((*(_BYTE *)(result + 24) & 4) != 0)
  {
    result = *(_QWORD *)(result + 40);
    if (result)
    {
LABEL_4:
      do
      {
        v2 = *(_DWORD *)(result + 12);
        if ((v2 & a2) != 0)
          break;
        *(_DWORD *)(result + 12) = v2 | a2;
        if ((*(_BYTE *)(result + 24) & 4) == 0)
        {
          while (1)
          {
            result = *(_QWORD *)(result + 40);
            if (!result)
              return result;
            if ((*(_BYTE *)(result + 24) & 0x4A) != 0)
              goto LABEL_9;
          }
        }
        result = *(_QWORD *)(result + 40);
LABEL_9:
        ;
      }
      while (result);
    }
  }
  else
  {
    while (1)
    {
      result = *(_QWORD *)(result + 40);
      if (!result)
        break;
      if ((*(_BYTE *)(result + 24) & 0x4A) != 0)
        goto LABEL_4;
    }
  }
  return result;
}

WTF *WebCore::RenderGeometryMap::pushMappingsToAncestor(WebCore::RenderGeometryMap *this, WTF **a2, const WebCore::RenderLayer *a3, BOOL a4, __n128 a5, __n128 a6)
{
  const WebCore::RenderLayer *v7;
  int v10;
  unsigned int v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  WTF *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  unsigned int v31;
  WTF *result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  BOOL v45;
  _QWORD *v46;
  WTF *v47;
  uint64_t v48;
  const WebCore::RenderLayer *v49;
  uint64_t v50;
  _QWORD v51[2];
  WTF *v52;
  int v53;

  v7 = (const WebCore::RenderLayer *)a2;
  if (a3)
  {
    v10 = *((_DWORD *)this + 268);
    v11 = v10 & 0xFFFFFFFD;
    if (a4)
      v11 = *((_DWORD *)this + 268);
    *((_DWORD *)this + 268) = v11;
    v12 = a2[4];
    v13 = (WTF *)*((_QWORD *)a3 + 4);
    v14 = v12;
    a6.n128_u32[0] = -1.0;
    while (1)
    {
      v15 = *((_DWORD *)v14 + 5);
      if ((v15 & 0x1800000) == 0x1000000)
      {
        v21 = v14;
        if ((*((_BYTE *)v14 + 45) & 2) != 0)
          v21 = *(WTF **)(*((_QWORD *)v14 + 4) + 8);
        if ((*((_QWORD *)v21 + 12) & 0x380000) == 0x300000)
          goto LABEL_43;
      }
      v16 = (unsigned __int16)*((_DWORD *)v14 + 31) >> 13;
      v17 = v16 > 5;
      v18 = (1 << v16) & 0x2A;
      if (!v17 && v18 != 0)
        goto LABEL_43;
      if ((v15 & 0x20000) != 0)
      {
        v43 = v14;
        if ((*((_BYTE *)v14 + 45) & 2) != 0)
          v43 = *(WTF **)(*((_QWORD *)v14 + 4) + 8);
        v44 = *((_QWORD *)v43 + 11);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + 40) + 20))
          goto LABEL_43;
        v46 = *(_QWORD **)(v44 + 40);
        if (v46[41] || v46[38] || v46[39] || v46[40] || (v15 & 0x100000) != 0)
          goto LABEL_43;
        v47 = v14;
        if ((*((_BYTE *)v14 + 45) & 2) != 0)
          v47 = *(WTF **)(*((_QWORD *)v14 + 4) + 8);
        a5.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v47 + 11) + 40) + 260);
        if (a5.n128_f32[0] != -1.0)
          goto LABEL_43;
      }
      if ((*((_BYTE *)v14 + 52) & 7) == 1 && (*((_BYTE *)v14 + 53) & 2) != 0 || *((_BYTE *)v14 + 46) == 103)
      {
LABEL_43:
        v24 = *(_QWORD *)this;
        *(_QWORD *)this = *((unsigned int *)this + 9);
        do
        {
          result = (WTF *)(*(uint64_t (**)(WTF *, WTF *, WebCore::RenderGeometryMap *, __n128, __n128))(*(_QWORD *)v12 + 592))(v12, v13, this, a5, a6);
          v12 = result;
          if (result)
            v45 = result == v13;
          else
            v45 = 1;
        }
        while (!v45);
        goto LABEL_49;
      }
      if (v14 == v13)
        break;
      v20 = *((_QWORD *)v14 + 4);
      v14 = 0;
      if (v20)
        v14 = *(WTF **)(v20 + 8);
    }
    v22 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)a2, (uint64_t)a3, 0);
    LODWORD(v23) = *((_DWORD *)this + 9);
    v24 = *(_QWORD *)this;
    if (!(_DWORD)v23)
    {
      v50 = *((_QWORD *)a3 + 4);
      *(_QWORD *)this = 0;
      do
        v50 = (*(uint64_t (**)(uint64_t, _QWORD, WebCore::RenderGeometryMap *))(*(_QWORD *)v50 + 592))(v50, 0, this);
      while (v50);
      LODWORD(v23) = *((_DWORD *)this + 9);
    }
    v25 = (uint64_t *)((char *)this + 24);
    v26 = v23;
    *(_QWORD *)this = v23;
    v51[1] = 0;
    v52 = 0;
    v51[0] = v12;
    v53 = 1;
    if ((_DWORD)v23 == *((_DWORD *)this + 8))
    {
      v27 = (_QWORD *)WTF::Vector<WebCore::RenderGeometryMapStep,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v23 + 1, (unint64_t)v51);
      v23 = *((unsigned int *)this + 9);
    }
    else
    {
      v27 = v51;
      v23 = v23;
    }
    v28 = *((_QWORD *)this + 3);
    v29 = (_QWORD *)(v28 + 32 * v26);
    memmove(v29 + 4, v29, v28 + 32 * v23 - (_QWORD)v29);
    *v29 = *v27;
    v29[1] = v27[1];
    v29[2] = 0;
    *((_DWORD *)v29 + 6) = *((_DWORD *)v27 + 6);
    v31 = *((_DWORD *)this + 9) + 1;
    *((_DWORD *)this + 9) = v31;
    result = v52;
    v52 = 0;
    if (result)
    {
      result = (WTF *)WTF::fastFree(result, v30);
      v31 = *((_DWORD *)this + 9);
    }
    v33 = *(_QWORD *)this;
    if (*(_QWORD *)this >= (unint64_t)v31)
    {
      __break(0xC471u);
      JUMPOUT(0x19415BA40);
    }
    v34 = *v25;
    v35 = *v25 + 32 * v33;
    *(_QWORD *)(v35 + 8) = v22;
    if (*(_BYTE *)(*(_QWORD *)v35 + 46) != 49)
    {
      v36 = *((_DWORD *)this + 266);
      v37 = v36 + v22;
      if (__OFADD__(v36, (_DWORD)v22))
        v37 = (v36 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 266) = v37;
      v38 = *((_DWORD *)this + 267);
      v39 = *(_DWORD *)(v34 + 32 * v33 + 12);
      v40 = __OFADD__(v38, v39);
      v41 = v38 + v39;
      if (v40)
        v41 = (v38 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 267) = v41;
    }
    if (*(_BYTE *)(v35 + 25))
      ++*((_DWORD *)this + 2);
    v42 = v34 + 32 * v33;
    if (*(_QWORD *)(v42 + 16))
      ++*((_DWORD *)this + 3);
    if (*(_BYTE *)(v42 + 26))
      ++*((_DWORD *)this + 4);
LABEL_49:
    *(_QWORD *)this = v24;
    *((_DWORD *)this + 268) = v10;
  }
  else
  {
    result = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2[4] + 3) + 8) + 40) + 8) + 1944);
    v48 = *(_QWORD *)this;
    *(_QWORD *)this = *((unsigned int *)this + 9);
    do
      result = (WTF *)(*(uint64_t (**)(WTF *, _QWORD, WebCore::RenderGeometryMap *))(*(_QWORD *)result + 592))(result, 0, this);
    while (result);
    *(_QWORD *)this = *((unsigned int *)this + 9);
    while (1)
    {
      v49 = (const WebCore::RenderLayer *)*((_QWORD *)v7 + 5);
      if (!v49)
        break;
      result = (WTF *)WebCore::RenderGeometryMap::pushMappingsToAncestor(this, v7, v49, a4);
      v7 = (const WebCore::RenderLayer *)*((_QWORD *)v7 + 5);
    }
    *(_QWORD *)this = v48;
  }
  return result;
}

WTF *WebCore::RenderGeometryMap::push(WebCore::RenderGeometryMap *this, const WebCore::RenderObject *a2, const WebCore::LayoutSize *a3, char a4, char a5, char a6, char a7)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  unsigned int v16;
  WTF *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD v29[2];
  WTF *v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v9 = (uint64_t *)((char *)this + 24);
  v10 = *(_QWORD *)this;
  v29[1] = 0;
  v30 = 0;
  v29[0] = a2;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v34 = a7;
  v11 = *((unsigned int *)this + 9);
  if ((_DWORD)v11 == *((_DWORD *)this + 8))
  {
    v12 = (_QWORD *)WTF::Vector<WebCore::RenderGeometryMapStep,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v11 + 1, (unint64_t)v29);
    LODWORD(v11) = *((_DWORD *)this + 9);
  }
  else
  {
    v12 = v29;
  }
  v13 = *((_QWORD *)this + 3);
  v14 = (_QWORD *)(v13 + 32 * v10);
  memmove(v14 + 4, v14, v13 + 32 * v11 - (_QWORD)v14);
  *v14 = *v12;
  v14[1] = v12[1];
  v14[2] = 0;
  *((_DWORD *)v14 + 6) = *((_DWORD *)v12 + 6);
  v16 = *((_DWORD *)this + 9) + 1;
  *((_DWORD *)this + 9) = v16;
  result = v30;
  v30 = 0;
  if (result)
  {
    result = (WTF *)WTF::fastFree(result, v15);
    v16 = *((_DWORD *)this + 9);
  }
  v18 = *(_QWORD *)this;
  if (*(_QWORD *)this >= (unint64_t)v16)
  {
    __break(0xC471u);
  }
  else
  {
    v19 = *v9;
    v20 = *v9 + 32 * v18;
    v21 = *(_QWORD *)a3;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)a3;
    if (*(_BYTE *)(*(_QWORD *)v20 + 46) != 49)
    {
      v22 = *((_DWORD *)this + 266);
      v23 = __OFADD__(v22, (_DWORD)v21);
      v24 = v22 + v21;
      if (v23)
        v24 = (v22 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 266) = v24;
      v25 = *((_DWORD *)this + 267);
      v26 = *(_DWORD *)(v19 + 32 * v18 + 12);
      v23 = __OFADD__(v25, v26);
      v27 = v25 + v26;
      if (v23)
        v27 = (v25 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 267) = v27;
    }
    if (*(_BYTE *)(v20 + 25))
      ++*((_DWORD *)this + 2);
    v28 = v19 + 32 * v18;
    if (*(_QWORD *)(v28 + 16))
      ++*((_DWORD *)this + 3);
    if (*(_BYTE *)(v28 + 26))
      ++*((_DWORD *)this + 4);
  }
  return result;
}

uint64_t *WebCore::LayerOverlapMap::pushCompositingContainer(WebCore::LayerOverlapMap *this, const WebCore::RenderLayer *a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;

  if (*((_DWORD *)this + 7))
  {
    WTF::Vector<std::unique_ptr<WebCore::OverlapMapContainer>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this, 0);
    v15 = *(_QWORD *)this;
    *(_QWORD *)this = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v15;
    v16 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v16;
  }
  v4 = *((_QWORD *)this + 139);
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x50);
  *result = v4;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  result[9] = (uint64_t)a2;
  v17 = (WTF *)result;
  v6 = *((unsigned int *)this + 3);
  if ((_DWORD)v6 == *((_DWORD *)this + 2))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v6 + 1, (unint64_t)&v17);
    v8 = *((unsigned int *)this + 3);
    v9 = *(_QWORD *)this;
    v10 = *result;
    *result = 0;
    *(_QWORD *)(v9 + 8 * v8) = v10;
    v11 = v17;
    *((_DWORD *)this + 3) = v8 + 1;
    v17 = 0;
    if (v11)
    {
      v12 = (WTF *)*((_QWORD *)v11 + 5);
      if (v12)
      {
        *((_QWORD *)v11 + 5) = 0;
        *((_DWORD *)v11 + 12) = 0;
        WTF::fastFree(v12, v7);
      }
      v13 = *((_DWORD *)v11 + 9);
      if (v13)
        WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(*((WTF **)v11 + 3), (WTF *)(*((_QWORD *)v11 + 3) + 72 * v13));
      v14 = (WTF *)*((_QWORD *)v11 + 3);
      if (v14)
      {
        *((_QWORD *)v11 + 3) = 0;
        *((_DWORD *)v11 + 8) = 0;
        WTF::fastFree(v14, v7);
      }
      return (uint64_t *)WTF::fastFree(v11, v7);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)this + 8 * v6) = result;
    *((_DWORD *)this + 3) = v6 + 1;
  }
  return result;
}

void WebCore::LayerOverlapMap::popCompositingContainer(WebCore::LayerOverlapMap *this, const WebCore::RenderLayer *a2, WebCore::OverlapMapContainer::ClippingScope *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  WTF *v11;

  v3 = *((unsigned int *)this + 3);
  if (v3 <= 1
    || (WebCore::OverlapMapContainer::mergeClippingScopesRecursive(*(WebCore::OverlapMapContainer **)(*(_QWORD *)this + 8 * v3 - 8), *(const WebCore::OverlapMapContainer::ClippingScope **)(*(_QWORD *)this + 8 * v3 - 16), a3), v6 = *((unsigned int *)this + 3), !(_DWORD)v6))
  {
    __break(0xC471u);
    JUMPOUT(0x19415BDE4);
  }
  v7 = v6 - 1;
  v8 = *(_QWORD *)(*(_QWORD *)this + 8 * (v6 - 1));
  *(_QWORD *)(*(_QWORD *)this + 8 * (v6 - 1)) = 0;
  if (v8)
  {
    v9 = *(WTF **)(v8 + 40);
    if (v9)
    {
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 48) = 0;
      WTF::fastFree(v9, v5);
    }
    v10 = *(_DWORD *)(v8 + 36);
    if (v10)
      WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(*(WTF **)(v8 + 24), (WTF *)(*(_QWORD *)(v8 + 24) + 72 * v10));
    v11 = *(WTF **)(v8 + 24);
    if (v11)
    {
      *(_QWORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 32) = 0;
      WTF::fastFree(v11, v5);
    }
    WTF::fastFree((WTF *)v8, v5);
  }
  *((_DWORD *)this + 3) = v7;
}

void WebCore::OverlapMapContainer::mergeClippingScopesRecursive(WebCore::OverlapMapContainer *this, const WebCore::OverlapMapContainer::ClippingScope *a2, WebCore::OverlapMapContainer::ClippingScope *a3)
{
  WebCore::OverlapMapContainer::ClippingScope *v5;
  unsigned int v6;
  WebCore::OverlapMapContainer *v7;
  WebCore::OverlapMapContainer *v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::OverlapMapContainer::ClippingScope *v11;
  int v12;

  WebCore::RectList::append((uint64_t)a2 + 40, (__n128 *)((char *)this + 40));
  v6 = *((_DWORD *)this + 9);
  if (v6)
  {
    v7 = (WebCore::OverlapMapContainer *)*((_QWORD *)this + 3);
    v8 = (WebCore::OverlapMapContainer *)((char *)v7 + 72 * v6);
    do
    {
      v9 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v9)
      {
        v10 = 72 * v9;
        v11 = (const WebCore::OverlapMapContainer::ClippingScope *)*((_QWORD *)a2 + 3);
        while (*(_QWORD *)v11 != *(_QWORD *)v7)
        {
          v11 = (const WebCore::OverlapMapContainer::ClippingScope *)((char *)v11 + 72);
          v10 -= 72;
          if (!v10)
            goto LABEL_12;
        }
        WebCore::OverlapMapContainer::mergeClippingScopesRecursive(v7, v11, v5);
      }
      else
      {
LABEL_12:
        if ((_DWORD)v9 == *((_DWORD *)a2 + 8))
        {
          WTF::Vector<WebCore::OverlapMapContainer::ClippingScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OverlapMapContainer::ClippingScope const&>((uint64_t)a2 + 24, (unint64_t)v7);
          v12 = *((_DWORD *)a2 + 9);
        }
        else
        {
          WebCore::OverlapMapContainer::ClippingScope::ClippingScope((WebCore::OverlapMapContainer::ClippingScope *)(*((_QWORD *)a2 + 3) + 72 * v9), v7);
          v12 = *((_DWORD *)a2 + 9) + 1;
          *((_DWORD *)a2 + 9) = v12;
        }
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x19415BEBCLL);
        }
      }
      v7 = (WebCore::OverlapMapContainer *)((char *)v7 + 72);
    }
    while (v7 != v8);
  }
}

__n128 WebCore::RectList::append(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __n128 *v8;
  int v9;
  int v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __n128 result;
  __int128 *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  WTF *v35;
  _OWORD *v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  __int128 v40;
  unint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;

  v4 = a2->n128_u32[3];
  if (!(_DWORD)v4)
    goto LABEL_2;
  v28 = (__int128 *)a2->n128_u64[0];
  v29 = *(unsigned int *)(a1 + 8);
  v30 = *(unsigned int *)(a1 + 12);
  v31 = v30 + v4;
  if (v30 + v4 > v29)
  {
    v32 = v29 + (v29 >> 2);
    if (v32 >= 0x10)
      v33 = v32 + 1;
    else
      v33 = 16;
    if (v33 <= v31)
      v34 = v30 + v4;
    else
      v34 = v33;
    if (v34 >> 28)
    {
LABEL_57:
      __break(0xC471u);
      JUMPOUT(0x19415C094);
    }
    v35 = *(WTF **)a1;
    v36 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v34));
    *(_DWORD *)(a1 + 8) = v34;
    *(_QWORD *)a1 = v36;
    if ((_DWORD)v30)
    {
      v38 = 16 * v30;
      v39 = v35;
      do
      {
        v40 = *(_OWORD *)v39;
        v39 = (WTF *)((char *)v39 + 16);
        *v36++ = v40;
        v38 -= 16;
      }
      while (v38);
    }
    if (v35)
    {
      if (*(WTF **)a1 == v35)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v35, v37);
    }
  }
  v41 = *(unsigned int *)(a1 + 12);
  if (v31 < v41)
    goto LABEL_57;
  v42 = (_OWORD *)(*(_QWORD *)a1 + 16 * v41);
  v43 = 16 * v4;
  do
  {
    v44 = *v28++;
    result.n128_u64[0] = v44;
    *v42++ = v44;
    v43 -= 16;
  }
  while (v43);
  *(_DWORD *)(a1 + 12) = v31;
LABEL_2:
  v6 = a2[1].n128_i32[2];
  v5 = a2[1].n128_i32[3];
  if (v6 >= 1 && v5 >= 1)
  {
    v8 = (__n128 *)(a1 + 16);
    v9 = *(_DWORD *)(a1 + 24);
    if (v9 < 1 || (v10 = *(_DWORD *)(a1 + 28), v10 <= 0))
    {
      result = a2[1];
      *v8 = result;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 16);
      v12 = *(_DWORD *)(a1 + 20);
      v13 = a2[1].n128_u32[0];
      v14 = a2[1].n128_u32[1];
      if ((int)v13 >= (int)v11)
        v15 = v11;
      else
        v15 = v13;
      if ((int)v14 >= (int)v12)
        v16 = v12;
      else
        v16 = v14;
      v17 = __OFADD__(v11, v9);
      v18 = v11 + v9;
      v19 = (v11 >> 31) + 0x7FFFFFFF;
      if (v17)
        v18 = v19;
      v17 = __OFADD__(v13, v6);
      v20 = v13 + v6;
      if (v17)
        v20 = (v13 >> 31) + 0x7FFFFFFF;
      if (v18 > v20)
        v20 = v18;
      v17 = __OFADD__(v12, v10);
      v21 = v12 + v10;
      if (v17)
        v21 = (v12 >> 31) + 0x7FFFFFFF;
      v17 = __OFADD__(v14, v5);
      v22 = v14 + v5;
      if (v17)
        v22 = (v14 >> 31) + 0x7FFFFFFF;
      if (v21 > v22)
        v22 = v21;
      v8->n128_u64[0] = v15 | (v16 << 32);
      v17 = __OFSUB__(v20, (_DWORD)v15);
      v23 = v20 - v15;
      v24 = (v20 >> 31) + 0x7FFFFFFF;
      if (v17)
        v23 = v24;
      v17 = __OFSUB__(v22, (_DWORD)v16);
      v25 = v22 - v16;
      v26 = (v22 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v26 = v25;
      *(_DWORD *)(a1 + 24) = v23;
      *(_DWORD *)(a1 + 28) = v26;
    }
  }
  return result;
}

const WebCore::RenderLayerModelObject *WebCore::RenderBox::pushMappingToContainer(WebCore::RenderBox *this, const WebCore::RenderLayerModelObject *a2, WebCore::RenderGeometryMap *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  WebCore::RenderElement *v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WebCore::WillChangeData *v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  _QWORD *v33[3];
  WebCore::RenderBox *v34;
  BOOL *v35;
  const WebCore::RenderLayerModelObject *v36;

  v32 = 0;
  v35 = &v32;
  v36 = a2;
  v6 = *((_BYTE *)this + 45);
  if ((v6 & 2) != 0 || *((_BYTE *)this + 46) == 17)
  {
    v11 = *((_QWORD *)this + 4);
    if (!v11)
      return 0;
    goto LABEL_13;
  }
  v33[0] = &v35;
  v33[1] = &v36;
  v33[2] = &v34;
  v34 = this;
  if ((v6 & 1) == 0)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v7)
    {
      if ((*(_WORD *)(v7 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19415C2FCLL);
      }
      if ((*(_BYTE *)(v7 + 23) & 0x20) != 0)
        goto LABEL_87;
    }
  }
  v8 = *((_QWORD *)this + 12);
  if ((v8 & 0xF80000000000) == 0x480000000000)
  {
LABEL_87:
    WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v33);
    v12 = *(WebCore::RenderElement **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v34 + 3) + 8) + 40) + 8)
                                     + 1944);
    goto LABEL_14;
  }
  v9 = (v8 >> 19) & 7;
  if (v9 <= 3 && v9 != 2)
  {
    v11 = *((_QWORD *)this + 4);
    if (v11)
    {
LABEL_13:
      v12 = *(WebCore::RenderElement **)(v11 + 8);
      goto LABEL_14;
    }
    goto LABEL_71;
  }
  v14 = *((_QWORD *)this + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
      ++*(_DWORD *)(v15 + 16);
  }
  else
  {
    v15 = 0;
  }
  if (v9 != 2)
  {
    if (v15)
    {
      while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v15))
      {
        if ((*(_BYTE *)(v15 + 45) & 1) == 0)
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
          if (v26)
          {
            if ((*(_WORD *)(v26 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19415C49CLL);
            }
            if ((*(_BYTE *)(v26 + 23) & 0x20) != 0)
              goto LABEL_86;
          }
        }
        if ((*(_QWORD *)(v15 + 96) & 0xF80000000000) == 0x480000000000)
        {
LABEL_86:
          WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v33);
          v12 = *(WebCore::RenderElement **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v34 + 3) + 8) + 40)
                                                       + 8)
                                           + 1944);
          goto LABEL_81;
        }
        if (v35 && (const WebCore::RenderLayerModelObject *)v15 == v36)
          *v35 = 1;
        v27 = *(_QWORD *)(v15 + 32);
        if (!v27)
        {
          v30 = *(_DWORD *)(v15 + 16);
          if (!v30)
          {
LABEL_84:
            __break(0xC471u);
            JUMPOUT(0x19415C47CLL);
          }
          v12 = 0;
          goto LABEL_82;
        }
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
          ++*(_DWORD *)(v28 + 16);
        v29 = *(_DWORD *)(v15 + 16);
        if (!v29)
          goto LABEL_84;
        v12 = 0;
        *(_DWORD *)(v15 + 16) = v29 - 1;
        v15 = v28;
        if (!v28)
          goto LABEL_14;
      }
      goto LABEL_80;
    }
LABEL_71:
    v12 = 0;
    goto LABEL_14;
  }
  if (!v15)
    goto LABEL_71;
  while (1)
  {
    v16 = *(unsigned __int8 *)(v15 + 46);
    if (v16 == 49 || (*(_BYTE *)(v15 + 98) & 0x38) != 0)
      break;
    if (((*(_BYTE *)(v15 + 45) & 0x40) != 0 || (v16 - 36) <= 4 && v16 != 38)
      && (*(_BYTE *)(v15 + 22) & 2) != 0)
    {
      break;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 40);
    if (*(_DWORD *)(*(_QWORD *)(v17 + 72) + 20))
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8))
        break;
    }
    if ((*(_BYTE *)(v15 + 45) & 0x40) != 0)
    {
      v18 = *(WebCore::WillChangeData **)(v17 + 200);
      if (v18)
      {
        if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v18, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8)) & 1) != 0)break;
        v16 = *(unsigned __int8 *)(v15 + 46);
      }
    }
    if (v16 == 67 || v16 == 90)
      break;
    v19 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 40);
    v20 = *(_BYTE *)(v19 + 462);
    v21 = *(_BYTE *)(v19 + 642) & 3;
    v22 = v20 | 0x19;
    if (v21 == 1)
      v20 |= 0x15u;
    v23 = v21 == 2 ? v22 : v20;
    if ((v23 & 3) != 0
      && ((*(_BYTE *)(v15 + 20) & 1) != 0
       || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v15))
      && (*(_QWORD *)(v15 + 96) & 0x1FLL) != 0x19
      && (*(unsigned __int8 *)(v15 + 46) - 36 > 4 || (*(_BYTE *)(v15 + 52) & 7) == 1))
    {
      break;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 636) & 0xC0000) != 0
      && ((*(_BYTE *)(v15 + 20) & 1) != 0
       || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v15))
      && (*(_QWORD *)(v15 + 96) & 0x1FLL) != 0x19)
    {
      v31 = *(unsigned __int8 *)(v15 + 46);
      if ((v31 - 36) <= 4)
      {
        if (v31 == 36)
          break;
      }
      else if (v31 != 63 && v31 != 35)
      {
        break;
      }
    }
    if (v35 && (const WebCore::RenderLayerModelObject *)v15 == v36)
      *v35 = 1;
    v24 = *(_QWORD *)(v15 + 32);
    if (v24)
    {
      v24 = *(_QWORD *)(v24 + 8);
      if (v24)
        ++*(_DWORD *)(v24 + 16);
    }
    v25 = *(_DWORD *)(v15 + 16);
    if (!v25)
    {
      __break(0xC471u);
      JUMPOUT(0x19415C3C0);
    }
    v12 = 0;
    *(_DWORD *)(v15 + 16) = v25 - 1;
    v15 = v24;
    if (!v24)
      goto LABEL_14;
  }
LABEL_80:
  v12 = (WebCore::RenderElement *)v15;
LABEL_81:
  v30 = *(_DWORD *)(v15 + 16);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x19415C45CLL);
  }
LABEL_82:
  *(_DWORD *)(v15 + 16) = v30 - 1;
LABEL_14:
  if (!v12)
    return 0;
  WebCore::RenderObject::pushOntoGeometryMap(this, a3, a2, v12, v32);
  if (v32)
    return a2;
  else
    return v12;
}

uint64_t WebCore::RenderObject::pushOntoGeometryMap(WebCore::RenderObject *this, WebCore::RenderGeometryMap *a2, const WebCore::RenderLayerModelObject *a3, WebCore::RenderElement *a4, int a5)
{
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  BOOL v12;
  WebCore::RenderElement *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  float64x2_t *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  WebCore::RenderObject *v36;
  WebCore::RenderObject *v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t i;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  double v68;
  double v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  float64x2_t *v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  double v82;
  unsigned int v83;
  double v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  float64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  WebCore::RenderObject *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  float64x2_t v110;
  __int128 v111;
  __int128 v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  float64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  WebCore::RenderObject *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  float v132;
  float v133;
  float v134;
  const double *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int **v141;
  int isCurrentlyAffectingProperty;
  float64_t v143;
  void *v144;
  unint64_t v145;
  int v146;
  float64_t v147;
  WebCore::KeyframeEffect *v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  WebCore::RenderElement *v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  int v158;
  uint64_t *v159;
  uint64_t v160;
  float64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  BOOL v166;
  _BYTE v167[48];
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  char v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  __int128 v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  __int128 v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2x4_t v190;
  float64x2x4_t v191;
  float64x2x4_t v192;
  float64x2x4_t v193;
  float64x2x4_t v194;
  float64x2x4_t v195;
  float64x2x4_t v196;
  float64x2x4_t v197;

  if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
  {
    v36 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v36 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
    v166 = (*((_QWORD *)v36 + 12) & 0x380000) == 3145728;
  }
  else
  {
    v166 = 0;
  }
  if (a5)
  {
    v145 = WebCore::RenderObject::offsetFromAncestorContainer(a3, a4);
    if (HIDWORD(v145) == 0x80000000)
      v146 = 0x7FFFFFFF;
    else
      v146 = -HIDWORD(v145);
    v165 = v146;
    if ((_DWORD)v145 == 0x80000000)
      v8 = 0x7FFFFFFF;
    else
      v8 = -(int)v145;
  }
  else
  {
    v8 = 0;
    v165 = 0;
  }
  v173 = 0;
  *(_QWORD *)&v182 = 0;
  v10 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::RenderObject *, WebCore::RenderElement *, __int128 *, char *))(*(_QWORD *)this + 360))(this, a4, &v182, &v173);
  v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x8000) != 0)
  {
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19415D514);
    }
    v94 = (_QWORD *)*((_QWORD *)this + 18);
    v95 = v94[5];
    if (!v95)
      goto LABEL_126;
    v96 = v94[4];
    if ((*(_BYTE *)(v96 + 45) & 1) != 0)
      goto LABEL_119;
    v97 = *(_QWORD *)(*(_QWORD *)(v96 + 24) + 8);
    if (!v97)
      goto LABEL_119;
    v98 = *(unsigned __int16 *)(v97 + 28);
    if ((v98 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19415D534);
    }
    v99 = *(_QWORD *)(v97 + 32);
    if (v99)
    {
      if ((*(_WORD *)(v99 + 28) & 8) != 0)
      {
        v100 = *(_QWORD *)(v99 + 72) & 0xFFFFFFFFFFFFLL;
        if (v100)
        {
          v136 = *(_QWORD *)(v100 + 88);
          if (v136)
          {
            v137 = *(_QWORD *)(v136 + 224);
            if (v137)
            {
              v101 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v97);
              if (v101)
                goto LABEL_146;
              v98 = *(unsigned __int16 *)(v97 + 28);
            }
          }
        }
      }
    }
    if ((~v98 & 0x408) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 368))(v97))
    {
      v101 = *(_QWORD *)(v97 + 32);
      if (!v101)
        goto LABEL_119;
      v102 = *(_WORD *)(v101 + 28);
      if ((v102 & 0x80) == 0)
      {
        if ((v102 & 8) != 0)
        {
LABEL_146:
          *(_DWORD *)(v101 + 24) += 2;
          *(_QWORD *)&v174.f64[0] = v101;
          while (1)
          {
            LOBYTE(v182) = 0;
            LOBYTE(v183.f64[0]) = 0;
            v120 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v101 + 264))(v101, &v182);
            if (LOBYTE(v183.f64[0]))
            {
              v121 = *((double *)&v182 + 1);
              *((_QWORD *)&v182 + 1) = 0;
              if (v121 != 0.0)
              {
                if (**(_DWORD **)&v121 == 2)
                  WTF::StringImpl::destroy(*(WTF::StringImpl **)&v121, v9);
                else
                  **(_DWORD **)&v121 -= 2;
              }
            }
            v103 = v174.f64[0];
            if ((*(_QWORD *)(v120 + 16) & 0x1FLL) != 0x12)
              break;
            v156 = WebCore::Node::parentElementInComposedTree(*(WebCore::Node **)&v174.f64[0]);
            WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v174, v156);
            v103 = 0.0;
            v101 = *(_QWORD *)&v174.f64[0];
            if (!*(_QWORD *)&v174.f64[0])
              goto LABEL_120;
          }
          if (*(_QWORD *)&v174.f64[0])
          {
            v122 = *(_QWORD *)(v95 + 32);
            if ((*(_BYTE *)(v122 + 45) & 1) == 0)
            {
              v123 = *(_QWORD *)(*(_QWORD *)(v122 + 24) + 8);
              if (v123)
              {
                if ((*(_WORD *)(v123 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19415D564);
                }
                if (*(_QWORD *)&v174.f64[0] == v123)
                {
                  v174.f64[0] = 0.0;
                  if (*(_DWORD *)(*(_QWORD *)&v103 + 24) == 2)
                  {
                    v105 = 1;
LABEL_224:
                    if ((*(_WORD *)(*(_QWORD *)&v103 + 30) & 0x400) != 0)
                    {
LABEL_235:
                      if (!v105)
                        goto LABEL_126;
                    }
                    else
                    {
                      WebCore::Node::removedLastRef(*(WebCore::Node **)&v103, v9);
                      if (!v105)
                        goto LABEL_126;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)&v103 + 24) -= 2;
                  }
LABEL_159:
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v94[5] + 32) + 88) + 40) + 636) & 0x380) == 0x80)
                  {
                    if (v94[25])
                    {
                      v12 = 1;
                    }
                    else
                    {
                      v158 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v94[4] + 88) + 40) + 636);
                      v12 = (v158 & 0x400) != 0 || (v158 & 0x380) == 128;
                    }
                    goto LABEL_127;
                  }
LABEL_126:
                  v12 = 0;
LABEL_127:
                  v11 = *((_DWORD *)this + 5);
                  goto LABEL_7;
                }
              }
            }
          }
LABEL_120:
          v104 = (*(_QWORD *)(v94[4] + 96) >> 43) & 0x1FLL;
          switch((int)v104)
          {
            case 13:
              v154 = 12;
              goto LABEL_264;
            case 14:
              v154 = 13;
              goto LABEL_264;
            case 15:
            case 16:
              v154 = 14;
              goto LABEL_264;
            default:
              if ((_DWORD)v104 == 2)
              {
                v154 = 1;
LABEL_264:
                v105 = v154 == ((*(_QWORD *)(*(_QWORD *)(v95 + 32) + 96) >> 43) & 0x1F);
              }
              else
              {
                v105 = 0;
              }
              v174.f64[0] = 0.0;
              if (v103 == 0.0)
                goto LABEL_235;
              if (*(_DWORD *)(*(_QWORD *)&v103 + 24) == 2)
                goto LABEL_224;
              *(_DWORD *)(*(_QWORD *)&v103 + 24) -= 2;
              if (!v105)
                goto LABEL_126;
              goto LABEL_159;
          }
        }
LABEL_119:
        v103 = 0.0;
        goto LABEL_120;
      }
      v119 = *(_QWORD *)(v101 + 200);
      if (!v119)
        goto LABEL_119;
    }
    else
    {
      v119 = *(_QWORD *)(v97 + 112);
      if (!v119)
        goto LABEL_119;
    }
    v101 = *(_QWORD *)(v119 + 8);
    if (v101)
      goto LABEL_146;
    goto LABEL_119;
  }
  v12 = 0;
LABEL_7:
  if ((v11 & 0x20000) == 0)
    goto LABEL_267;
  v37 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v37 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
  v38 = *((_QWORD *)v37 + 11);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 40) + 20))
  {
    v124 = *(_QWORD **)(v38 + 40);
    if (!v124[41] && !v124[38] && !v124[39] && !v124[40] && (v11 & 0x100000) == 0)
    {
LABEL_267:
      if (!a4)
        goto LABEL_12;
      v13 = a4;
      if ((*((_BYTE *)a4 + 45) & 2) != 0)
        v13 = *(WebCore::RenderElement **)(*((_QWORD *)a4 + 4) + 8);
      if (*(float *)(*(_QWORD *)(*((_QWORD *)v13 + 11) + 40) + 260) == -1.0)
        goto LABEL_12;
      v155 = (WebCore::RenderElement *)*((_QWORD *)this + 4);
      if (v155)
        v155 = (WebCore::RenderElement *)*((_QWORD *)v155 + 1);
      if (v155 != a4)
        goto LABEL_12;
    }
  }
  if ((*((_BYTE *)a2 + 1072) & 2) == 0)
  {
LABEL_12:
    if (__OFADD__((_DWORD)v10, v8))
      v14 = (v10 >> 31) + 0x7FFFFFFF;
    else
      v14 = ((_DWORD)v10 + v8);
    if (__OFADD__(HIDWORD(v10), v165))
      v15 = ((HIDWORD(v10) >> 31) + 0x7FFFFFFF);
    else
      v15 = (HIDWORD(v10) + v165);
    if ((v11 & 0x20000) != 0)
    {
      v106 = this;
      if ((*((_BYTE *)this + 45) & 2) != 0)
        v106 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
      v107 = *((_QWORD *)v106 + 11);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v107 + 32) + 40) + 20)
        || (v130 = *(_QWORD **)(v107 + 40), v130[41])
        || v130[38]
        || v130[39]
        || v130[40])
      {
        LOBYTE(v16) = 1;
      }
      else
      {
        v16 = (v11 >> 20) & 1;
      }
    }
    else
    {
      LOBYTE(v16) = 0;
    }
    v17 = (uint64_t *)((char *)a2 + 24);
    v18 = *(_QWORD *)a2;
    v183.f64[0] = 0.0;
    v182 = (unint64_t)this;
    LOBYTE(v183.f64[1]) = v12;
    BYTE1(v183.f64[1]) = v173;
    BYTE2(v183.f64[1]) = v166;
    BYTE3(v183.f64[1]) = v16;
    v19 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v19 == *((_DWORD *)a2 + 8))
    {
      v20 = (float64x2_t *)WTF::Vector<WebCore::RenderGeometryMapStep,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 24, v19 + 1, (unint64_t)&v182);
      LODWORD(v19) = *((_DWORD *)a2 + 9);
    }
    else
    {
      v20 = (float64x2_t *)&v182;
    }
    v21 = *((_QWORD *)a2 + 3);
    v22 = (_QWORD *)(v21 + 32 * v18);
    memmove(v22 + 4, v22, v21 + 32 * v19 - (_QWORD)v22);
    *v22 = *(_QWORD *)&v20->f64[0];
    v22[1] = *(_QWORD *)&v20->f64[1];
    v22[2] = 0;
    *((_DWORD *)v22 + 6) = LODWORD(v20[1].f64[1]);
    v24 = *((_DWORD *)a2 + 9) + 1;
    *((_DWORD *)a2 + 9) = v24;
    result = *(_QWORD *)&v183.f64[0];
    v183.f64[0] = 0.0;
    if (result)
    {
      result = WTF::fastFree((WTF *)result, v23);
      v24 = *((_DWORD *)a2 + 9);
    }
    v26 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= (unint64_t)v24)
    {
      __break(0xC471u);
      JUMPOUT(0x19415D8F8);
    }
    v27 = *v17;
    v28 = *v17 + 32 * v26;
    *(_QWORD *)(v28 + 8) = v14 | (v15 << 32);
    if (*(_BYTE *)(*(_QWORD *)v28 + 46) != 49)
    {
      v29 = *((_DWORD *)a2 + 266);
      v30 = v29 + v14;
      if (__OFADD__(v29, (_DWORD)v14))
        v30 = (v29 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)a2 + 266) = v30;
      v31 = *((_DWORD *)a2 + 267);
      v32 = *(_DWORD *)(v27 + 32 * v26 + 12);
      v33 = __OFADD__(v31, v32);
      v34 = v31 + v32;
      if (v33)
        v34 = (v31 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)a2 + 267) = v34;
    }
    if (*(_BYTE *)(v28 + 25))
      ++*((_DWORD *)a2 + 2);
    v35 = v27 + 32 * v26;
    if (*(_QWORD *)(v35 + 16))
      ++*((_DWORD *)a2 + 3);
    goto LABEL_35;
  }
  *(_QWORD *)v167 = 0x3FF0000000000000;
  memset(&v167[8], 0, 32);
  *(_QWORD *)&v167[40] = 0x3FF0000000000000;
  v168 = 0u;
  v169 = 0u;
  v170 = (float64x2_t)0x3FF0000000000000uLL;
  v39 = (double)(int)v10 * 0.015625;
  v40 = (double)SHIDWORD(v10) * 0.015625;
  v171.f64[0] = v39 + v40 * 0.0 + 0.0;
  v171.f64[1] = v40 + v39 * 0.0 + 0.0;
  v172 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v40 * 0.0 + v39 * 0.0), 0), (float64x2_t)xmmword_1968A14C0);
  if ((v11 & 0x8000) == 0)
  {
    v41 = 0;
    goto LABEL_64;
  }
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19415D494);
  }
  v41 = *((_QWORD *)this + 18);
  if (v41)
  {
    ++*(_DWORD *)(v41 + 8);
    if (*(_QWORD *)(v41 + 200))
    {
      v42 = *(_QWORD *)(v41 + 32);
      v43 = (*(_QWORD *)(v42 + 96) >> 43) & 0x1FLL;
      if ((_DWORD)v43)
      {
        v46 = 0;
        LOBYTE(i) = 1;
        switch((int)v43)
        {
          case 5:
            v138 = *(_QWORD *)(v42 + 32);
            if (!v138)
              goto LABEL_201;
            v139 = *(_QWORD *)(v138 + 8);
            if (!v139)
              goto LABEL_201;
            while (1)
            {
              if (*(_BYTE *)(v139 + 46) == 19)
              {
                if (WebCore::RenderElement::element((WebCore::RenderElement *)v139))
                {
                  v153 = *(_QWORD *)(v139 + 248);
                  if (v153)
                  {
                    if (*(_QWORD *)(v153 + 8) == v42)
                      break;
                  }
                }
              }
              i = *(_QWORD *)(v139 + 32);
              if (!i)
                goto LABEL_201;
              v46 = 0;
              v139 = *(_QWORD *)(i + 8);
              LOBYTE(i) = 1;
              if (!v139)
                goto LABEL_57;
            }
            v48 = WebCore::RenderElement::element((WebCore::RenderElement *)v139);
            v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
            if (*MEMORY[0x1E0CBF2F8])
              *(_DWORD *)v10 += 4;
            LODWORD(v43) = 5;
            goto LABEL_279;
          case 6:
          case 7:
            goto LABEL_50;
          case 9:
            v159 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 24) + 8) + 40) + 8) + 3096);
            if (!v159)
              goto LABEL_201;
            break;
          case 12:
            v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 24) + 8) + 40) + 8) + 1272);
            if (!v48)
              goto LABEL_201;
            v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
            if (*MEMORY[0x1E0CBF2F8])
              *(_DWORD *)v10 += 4;
            LODWORD(v43) = 12;
            goto LABEL_279;
          case 13:
          case 14:
          case 15:
          case 16:
            v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 24) + 8) + 40) + 8) + 1272);
            if (!v48)
              goto LABEL_201;
            v10 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v42 + 88) + 40) + 592);
            if (v10)
              *(_DWORD *)v10 += 4;
            goto LABEL_279;
          default:
            goto LABEL_57;
        }
        while (1)
        {
          v160 = *(_QWORD *)(*v159 + 64) & 0xFFFFFFFFFFFFLL;
          if (v160)
          {
            if ((*(_BYTE *)((*(_QWORD *)(*v159 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19415D918);
            }
            WebCore::RenderElement::backdropRenderer(v160, &v182);
            v161 = *(double *)&v182;
            if ((_QWORD)v182)
            {
              v10 = *(WTF::StringImpl **)(v182 + 8);
              *(_QWORD *)&v182 = 0;
              if (**(_DWORD **)&v161 == 1)
                WTF::fastFree(*(WTF **)&v161, v9);
              else
                --**(_DWORD **)&v161;
              if (v10 == (WTF::StringImpl *)v42)
                break;
            }
          }
          v46 = 0;
          v159 = (uint64_t *)v159[2];
          LOBYTE(i) = 1;
          if (!v159)
            goto LABEL_57;
        }
        v48 = *v159;
        v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v10 += 4;
        LODWORD(v43) = 9;
LABEL_279:
        LODWORD(v174.f64[0]) = v43;
        *(_QWORD *)&v174.f64[1] = v10;
        LOBYTE(v175.f64[0]) = 1;
        *(_QWORD *)&v182 = v48;
        DWORD2(v182) = v43;
        LOBYTE(v183.f64[1]) = 1;
        v183.f64[0] = 0.0;
        WebCore::Styleable::~Styleable((WebCore::Styleable *)&v182, v9);
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v174, v157);
        v46 = 1;
        v47 = 0;
        if ((*(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_56;
        v125 = *(unsigned int *)((*(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
        if (!(_DWORD)v125)
          goto LABEL_56;
LABEL_55:
        v126 = *(uint64_t **)((*(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
        if ((v47 & 1) != 0)
        {
          for (i = 8 * v125; i; i -= 8)
          {
            v127 = *v126;
            if (!*(_BYTE *)(*v126 + 96))
              break;
            ++v126;
          }
        }
        else
        {
          i = 8 * v125;
          while (1)
          {
            v127 = *v126;
            if (*(_BYTE *)(*v126 + 96))
            {
              if (*(_DWORD *)(v127 + 80) == (_DWORD)v43 && *(_QWORD *)(v127 + 88) == (_QWORD)v10)
                break;
            }
            ++v126;
            i -= 8;
            if (!i)
              goto LABEL_57;
          }
        }
        if (*(_QWORD *)v127)
        {
          v164 = v46;
          WebCore::KeyframeEffectStack::sortedEffects((unsigned int ***)&v182, *(unsigned int ***)v127);
          v141 = (unsigned int **)v182;
          if (HIDWORD(v182))
          {
            v162 = 8 * HIDWORD(v182) - 8;
            v163 = v182 + 8 * HIDWORD(v182);
            v147 = *(double *)&v182;
            do
            {
              if (**(_QWORD **)&v147)
                v148 = *(WebCore::KeyframeEffect **)(**(_QWORD **)&v147 + 8);
              else
                v148 = 0;
              isCurrentlyAffectingProperty = WebCore::KeyframeEffect::isCurrentlyAffectingProperty(v148, 273, 1);
              if ((isCurrentlyAffectingProperty & 1) != 0)
                break;
              *(_QWORD *)&v147 += 8;
              v149 = v162;
              v162 -= 8;
            }
            while (v149);
            do
            {
              v150 = *v141;
              *v141 = 0;
              if (v150)
              {
                do
                {
                  v151 = __ldaxr(v150);
                  v152 = v151 - 1;
                }
                while (__stlxr(v152, v150));
                if (!v152)
                {
                  atomic_store(1u, v150);
                  WTF::fastFree((WTF *)v150, v9);
                }
              }
              ++v141;
            }
            while (v141 != (unsigned int **)v163);
            v141 = (unsigned int **)v182;
          }
          else
          {
            isCurrentlyAffectingProperty = 0;
          }
          if (v141)
            WTF::fastFree((WTF *)v141, v9);
          if (isCurrentlyAffectingProperty)
          {
            WebCore::RenderElement::animatedStyle(*(WebCore::RenderElement **)(v41 + 32), v9, (WTF::StringImpl **)&v174);
            v186 = xmmword_1969FCC00;
            v187 = xmmword_1969FCC10;
            v188 = (float64x2_t)xmmword_1969FCC20;
            v189 = (float64x2_t)unk_1969FCC30;
            v182 = constinit_103;
            v183 = *(float64x2_t *)algn_1969FCBD0;
            v184 = (float64x2_t)xmmword_1969FCBE0;
            v185 = xmmword_1969FCBF0;
            v143 = v174.f64[0];
            WebCore::RenderLayer::updateTransformFromStyle(v41, (uint64_t)&v182, *(uint64_t *)&v174.f64[0], 0x1Fu);
            WebCore::RenderStyle::~RenderStyle(*(WebCore::RenderStyle **)&v143, v144);
            if (**(_DWORD **)&v143)
            {
              *(_OWORD *)(*(_QWORD *)&v143 + 32) = 0u;
              *(_OWORD *)(*(_QWORD *)&v143 + 48) = 0u;
              **(_OWORD **)&v143 = 0u;
              *(_OWORD *)(*(_QWORD *)&v143 + 16) = 0u;
            }
            else
            {
              WTF::fastFree(*(WTF **)&v143, v9);
            }
            LOBYTE(i) = 0;
            v46 = v164;
            goto LABEL_58;
          }
          LOBYTE(i) = 0;
          v46 = v164;
        }
        else
        {
LABEL_56:
          LOBYTE(i) = 0;
        }
LABEL_57:
        v50 = *(float64x2_t **)(v41 + 200);
        v51 = v50[3];
        v53 = *v50;
        v52 = v50[1];
        v184 = v50[2];
        v185 = v51;
        v182 = (__int128)v53;
        v183 = v52;
        v54 = v50[7];
        v56 = v50[4];
        v55 = v50[5];
        v188 = v50[6];
        v189 = v54;
        v186 = (__int128)v56;
        v187 = v55;
LABEL_58:
        if (v10 && (i & 1) == 0 && v46)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
        v57 = (float64x2_t *)&v182;
        v58 = *(float64x2_t *)v167;
        v59 = *(float64x2_t *)&v167[16];
        v60 = *(float64x2_t *)&v167[32];
        v61 = v168;
        v62 = v169;
        v63 = v170;
        v194 = vld4q_dup_f64(v57->f64);
        v57 += 2;
        v190 = vld4q_dup_f64(v57->f64);
        v57 += 2;
        *(float64x2_t *)v167 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v194.val[0], *(float64x2_t *)v167), v194.val[1], *(float64x2_t *)&v167[32]), v194.val[2], v169), v194.val[3], v171);
        *(float64x2_t *)&v167[16] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v194.val[0], *(float64x2_t *)&v167[16]), v194.val[1], v168), v194.val[2], v170), v194.val[3], v172);
        v195 = vld4q_dup_f64(v57->f64);
        v57 += 2;
        *(float64x2_t *)&v167[32] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v190.val[0], v58), v190.val[1], *(float64x2_t *)&v167[32]), v190.val[2], v169), v190.val[3], v171);
        v168 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v190.val[0], v59), v190.val[1], v168), v190.val[2], v170), v190.val[3], v172);
        v191 = vld4q_dup_f64(v57->f64);
        v169 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v195.val[0], v58), v195.val[1], v60), v195.val[2], v169), v195.val[3], v171);
        v170 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v195.val[0], v59), v195.val[1], v61), v195.val[2], v170), v195.val[3], v172);
        v171 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v191.val[0], v58), v191.val[1], v60), v191.val[2], v62), v191.val[3], v171);
        v172 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v191.val[0], v59), v191.val[1], v61), v191.val[2], v63), v191.val[3], v172);
        goto LABEL_64;
      }
LABEL_50:
      if ((*(_BYTE *)(v42 + 45) & 1) != 0 || (v44 = *(unsigned __int16 **)(*(_QWORD *)(v42 + 24) + 8)) == 0)
      {
LABEL_201:
        v46 = 0;
        LOBYTE(i) = 1;
        goto LABEL_57;
      }
      v45 = v44[14];
      if ((v45 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19415D4F4);
      }
      if ((~v45 & 0x408) != 0 || !(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v44 + 368))(v44))
      {
        v46 = 0;
        LODWORD(v43) = 0;
        v47 = 1;
        v48 = (uint64_t)v44;
        goto LABEL_55;
      }
      v116 = *((_QWORD *)v44 + 14);
      if (v116)
        v48 = *(_QWORD *)(v116 + 8);
      else
        v48 = 0;
      if ((~v44[14] & 0x408) != 0)
        LODWORD(v43) = 0;
      else
        LODWORD(v43) = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v44 + 368))(v44);
      v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
      {
        v117 = *(_DWORD *)v10;
        *(_DWORD *)v10 += 4;
        v118 = v117 + 2;
        if (v117 != -2 || (WTF::StringImpl::destroy(v10, v9), v118 = *(_DWORD *)v10, *(_DWORD *)v10 += 2, v118))
        {
          v47 = 0;
          *(_DWORD *)v10 = v118;
LABEL_142:
          v46 = 1;
          goto LABEL_55;
        }
        WTF::StringImpl::destroy(v10, v9);
      }
      v47 = 0;
      goto LABEL_142;
    }
  }
LABEL_64:
  v64 = *((_QWORD *)this + 4);
  if (v64)
  {
    v65 = *(_QWORD *)(v64 + 8);
    if (v65)
    {
      v66 = *(_DWORD *)(v65 + 16) + 1;
      *(_DWORD *)(v65 + 16) = v66;
      if ((*(_BYTE *)(v65 + 21) & 0x80) != 0 && *(float *)(*(_QWORD *)(*(_QWORD *)(v65 + 88) + 40) + 260) != -1.0)
      {
        if ((*(_BYTE *)(v65 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19415D8F0);
        }
        v132 = WebCore::RenderLayer::perspectiveOrigin(*(WebCore::RenderLayer **)(v65 + 144));
        v134 = v133;
        v188 = (float64x2_t)xmmword_1969FCE40;
        v189 = (float64x2_t)unk_1969FCE50;
        v186 = xmmword_1969FCE20;
        v187 = (float64x2_t)unk_1969FCE30;
        v184 = (float64x2_t)xmmword_1969FCE00;
        v185 = (float64x2_t)unk_1969FCE10;
        v182 = constinit_7;
        v183 = *(float64x2_t *)algn_1969FCDF0;
        WebCore::TransformationMatrix::applyPerspective((float64x2_t *)&v182, fmaxf(*(float *)(*(_QWORD *)(*(_QWORD *)(v65 + 88) + 40) + 260), 1.0));
        WebCore::TransformationMatrix::translateRight3d((WebCore::TransformationMatrix *)v167, (float)-v132, (float)-v134, 0.0);
        v178 = (float64x2_t)v186;
        v179 = v187;
        v180 = v188;
        v181 = v189;
        v174 = (float64x2_t)v182;
        v175 = v183;
        v176 = v184;
        v177 = v185;
        v196 = vld4q_dup_f64((const double *)v167);
        v135 = (const double *)&v167[32];
        v192 = vld4q_dup_f64(v135);
        v135 += 4;
        v174 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v196.val[0], (float64x2_t)v182), v196.val[1], v184), v196.val[2], (float64x2_t)v186), v196.val[3], v188);
        v175 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v196.val[0], v183), v196.val[1], v185), v196.val[2], v187), v196.val[3], v189);
        v197 = vld4q_dup_f64(v135);
        v135 += 4;
        v176 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v192.val[0], (float64x2_t)v182), v192.val[1], v184), v192.val[2], (float64x2_t)v186), v192.val[3], v188);
        v177 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v192.val[0], v183), v192.val[1], v185), v192.val[2], v187), v192.val[3], v189);
        v193 = vld4q_dup_f64(v135);
        v178 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v197.val[0], (float64x2_t)v182), v197.val[1], v184), v197.val[2], (float64x2_t)v186), v197.val[3], v188);
        v179 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v197.val[0], v183), v197.val[1], v185), v197.val[2], v187), v197.val[3], v189);
        v180 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v193.val[0], (float64x2_t)v182), v193.val[1], v184), v193.val[2], (float64x2_t)v186), v193.val[3], v188);
        v181 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v193.val[0], v183), v193.val[1], v185), v193.val[2], v187), v193.val[3], v189);
        v169 = v178;
        v170 = v179;
        v171 = v180;
        v172 = v181;
        *(float64x2_t *)v167 = v174;
        *(float64x2_t *)&v167[16] = v175;
        *(float64x2_t *)&v167[32] = v176;
        v168 = v177;
        WebCore::TransformationMatrix::translateRight3d((WebCore::TransformationMatrix *)v167, v132, v134, 0.0);
        v66 = *(_DWORD *)(v65 + 16);
      }
      if (!v66)
      {
        __break(0xC471u);
        JUMPOUT(0x19415D4D4);
      }
      *(_DWORD *)(v65 + 16) = v66 - 1;
    }
  }
  if (v41)
  {
    v67 = *(_DWORD *)(v41 + 8);
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x19415D4B4);
    }
    *(_DWORD *)(v41 + 8) = v67 - 1;
  }
  v68 = (double)v8 * 0.015625;
  v69 = (double)v165 * 0.015625;
  if (v68 != 0.0)
  {
    *(double *)v167 = *(double *)v167 + *(double *)&v167[24] * v68;
    *(double *)&v167[32] = *(double *)&v167[32] + v168.f64[1] * v68;
    v169.f64[0] = v169.f64[0] + v170.f64[1] * v68;
    v171.f64[0] = v171.f64[0] + v172.f64[1] * v68;
  }
  if (v69 != 0.0)
  {
    *(double *)&v167[8] = *(double *)&v167[8] + *(double *)&v167[24] * v69;
    *(double *)&v167[40] = *(double *)&v167[40] + v168.f64[1] * v69;
    v169.f64[1] = v169.f64[1] + v170.f64[1] * v69;
    v171.f64[1] = v171.f64[1] + v172.f64[1] * v69;
  }
  v70 = *((_DWORD *)this + 5);
  if ((v70 & 0x20000) != 0)
  {
    v128 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v128 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
    v129 = *((_QWORD *)v128 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + 32) + 40) + 20)
      || (v131 = *(_QWORD **)(v129 + 40), v131[41])
      || v131[38]
      || v131[39]
      || v131[40])
    {
      LOBYTE(v71) = 1;
    }
    else
    {
      v71 = (v70 >> 20) & 1;
    }
  }
  else
  {
    LOBYTE(v71) = 0;
  }
  v72 = *(_QWORD *)a2;
  v183.f64[0] = 0.0;
  v182 = (unint64_t)this;
  LOBYTE(v183.f64[1]) = v12;
  BYTE1(v183.f64[1]) = v173;
  BYTE2(v183.f64[1]) = v166;
  BYTE3(v183.f64[1]) = v71;
  v73 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v73 == *((_DWORD *)a2 + 8))
  {
    v74 = (float64x2_t *)WTF::Vector<WebCore::RenderGeometryMapStep,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 24, v73 + 1, (unint64_t)&v182);
    LODWORD(v73) = *((_DWORD *)a2 + 9);
  }
  else
  {
    v74 = (float64x2_t *)&v182;
  }
  v75 = *((_QWORD *)a2 + 3);
  v76 = (_QWORD *)(v75 + 32 * v72);
  memmove(v76 + 4, v76, v75 + 32 * v73 - (_QWORD)v76);
  *v76 = *(_QWORD *)&v74->f64[0];
  v76[1] = *(_QWORD *)&v74->f64[1];
  v76[2] = 0;
  *((_DWORD *)v76 + 6) = LODWORD(v74[1].f64[1]);
  v78 = *((_DWORD *)a2 + 9) + 1;
  *((_DWORD *)a2 + 9) = v78;
  result = *(_QWORD *)&v183.f64[0];
  v183.f64[0] = 0.0;
  if (result)
  {
    result = WTF::fastFree((WTF *)result, v77);
    v78 = *((_DWORD *)a2 + 9);
  }
  v79 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= (unint64_t)v78)
  {
    __break(0xC471u);
    JUMPOUT(0x19415D920);
  }
  v80 = *((_QWORD *)a2 + 3);
  v81 = (_QWORD *)(v80 + 32 * v79);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)v167, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqzq_f64(*(float64x2_t *)&v167[16])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)&v167[32], (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqzq_f64(v168)))))) & 1) != 0|| (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v169), (int32x4_t)vceqq_f64(v170, (float64x2_t)xmmword_1968A14B0)))) & 0xF) != 0|| v172.f64[1] != 1.0|| v172.f64[0] != 0.0|| v171.f64[0] != (double)(int)v171.f64[0]|| v171.f64[1] != (double)(int)v171.f64[1])
  {
    v109 = WTF::fastMalloc((WTF *)0x80);
    v110 = v168;
    v112 = *(_OWORD *)v167;
    v111 = *(_OWORD *)&v167[16];
    *(_OWORD *)(v109 + 32) = *(_OWORD *)&v167[32];
    *(float64x2_t *)(v109 + 48) = v110;
    *(_OWORD *)v109 = v112;
    *(_OWORD *)(v109 + 16) = v111;
    v113 = v172;
    v115 = v169;
    v114 = v170;
    *(float64x2_t *)(v109 + 96) = v171;
    *(float64x2_t *)(v109 + 112) = v113;
    *(float64x2_t *)(v109 + 64) = v115;
    *(float64x2_t *)(v109 + 80) = v114;
    result = v81[2];
    v81[2] = v109;
    if (result)
      result = WTF::fastFree((WTF *)result, v108);
    goto LABEL_96;
  }
  v82 = v171.f64[0] * 64.0;
  if (v171.f64[0] * 64.0 < 2147483650.0 && v82 > -2147483650.0)
    goto LABEL_91;
  if (v82 >= 2147483650.0)
  {
    v83 = 0x7FFFFFFF;
  }
  else
  {
    if (v82 > -2147483650.0)
    {
LABEL_91:
      v83 = (int)v82;
      goto LABEL_92;
    }
    v83 = 0x80000000;
  }
LABEL_92:
  v84 = v171.f64[1] * 64.0;
  if (v171.f64[1] * 64.0 < 2147483650.0 && v84 > -2147483650.0)
    goto LABEL_94;
  if (v84 >= 2147483650.0)
  {
    v85 = 0x7FFFFFFF00000000;
    goto LABEL_95;
  }
  if (v84 > -2147483650.0)
LABEL_94:
    v85 = (unint64_t)(int)v84 << 32;
  else
    v85 = 0x8000000000000000;
LABEL_95:
  *(_QWORD *)(v80 + 32 * v79 + 8) = v85 | v83;
LABEL_96:
  if (*(_BYTE *)(*v81 + 46) != 49)
  {
    v86 = v80 + 32 * v79;
    v87 = *((_DWORD *)a2 + 266);
    v88 = *(_DWORD *)(v86 + 8);
    v33 = __OFADD__(v87, v88);
    v89 = v87 + v88;
    if (v33)
      v89 = (v87 >> 31) + 0x7FFFFFFF;
    *((_DWORD *)a2 + 266) = v89;
    v90 = *((_DWORD *)a2 + 267);
    v91 = *(_DWORD *)(v86 + 12);
    v33 = __OFADD__(v90, v91);
    v92 = v90 + v91;
    if (v33)
      v92 = (v90 >> 31) + 0x7FFFFFFF;
    *((_DWORD *)a2 + 267) = v92;
  }
  v93 = v80 + 32 * v79;
  if (*(_BYTE *)(v93 + 25))
    ++*((_DWORD *)a2 + 2);
  if (*(_QWORD *)(v93 + 16))
    ++*((_DWORD *)a2 + 3);
  v35 = v80 + 32 * v79;
LABEL_35:
  if (*(_BYTE *)(v35 + 26))
    ++*((_DWORD *)a2 + 4);
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setAllowsBackingStoreDetaching(uint64_t this, int a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(_BYTE *)(this + 890);
  if (((((v2 & 4) == 0) ^ a2) & 1) == 0)
  {
    v3 = a2 ? 4 : 0;
    *(_BYTE *)(this + 890) = v2 & 0xFB | v3;
    if ((*(_WORD *)(this + 177) & 1) == 0)
    {
      v4 = *(_QWORD *)(this + 616);
      *(_QWORD *)(this + 616) = v4 | 0x4000000;
      if (!*(_BYTE *)(this + 889))
      {
        for (i = *(_QWORD *)(this + 200); i; i = *(_QWORD *)(i + 200))
        {
          if ((*(_BYTE *)(i + 890) & 0x40) != 0)
            break;
          *(_BYTE *)(i + 890) |= 0x40u;
        }
      }
      if (!v4)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 24) + 40))(*(_QWORD *)(this + 24), this);
    }
  }
  return this;
}

BOOL WebCore::LayerOverlapMap::maybePopSpeculativeCompositingContainer(WebCore::LayerOverlapMap *this)
{
  int v1;

  v1 = *((_DWORD *)this + 7);
  if (v1)
    WTF::Vector<std::unique_ptr<WebCore::OverlapMapContainer>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 4, 0);
  return v1 != 0;
}

unsigned int *WTF::Vector<std::unique_ptr<WebCore::OverlapMapContainer>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  WTF *v10;
  WTF *v11;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
      v6 = 8 * v4 - 8 * a2;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          v8 = *(WTF **)(v7 + 40);
          if (v8)
          {
            *(_QWORD *)(v7 + 40) = 0;
            *(_DWORD *)(v7 + 48) = 0;
            WTF::fastFree(v8, (void *)a2);
          }
          v9 = *(_DWORD *)(v7 + 36);
          if (v9)
            WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(*(WTF **)(v7 + 24), (WTF *)(*(_QWORD *)(v7 + 24) + 72 * v9));
          v10 = *(WTF **)(v7 + 24);
          if (v10)
          {
            *(_QWORD *)(v7 + 24) = 0;
            *(_DWORD *)(v7 + 32) = 0;
            WTF::fastFree(v10, (void *)a2);
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v7, (void *)a2);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v11 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v11, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v11)
        result = (unsigned int *)memcpy(result, v11, 8 * v4);
    }
    if (v11)
    {
      if (*(WTF **)v3 == v11)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v11, (void *)a2);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::isRunningTransformAnimation(WebCore::RenderLayerCompositor *this, WebCore::RenderLayerModelObject *a2)
{
  char v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  char v46;
  char v47;

  if ((this & 0x10) == 0 || (WebCore::Styleable::fromRenderer((uint64_t)a2, a2, (uint64_t)&v43), !v47))
  {
LABEL_10:
    v2 = 0;
    return v2 & 1;
  }
  if ((*(_QWORD *)(v43 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_4;
  v6 = *(unsigned int *)((*(_QWORD *)(v43 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v6)
    goto LABEL_4;
  v7 = *(uint64_t **)((*(_QWORD *)(v43 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  v8 = 8 * v6;
  if (v46)
  {
    v4 = 1;
    do
    {
      v9 = (uint64_t *)*v7;
      if (*(_BYTE *)(*v7 + 96))
      {
        if (*((_DWORD *)v9 + 20) == v44 && v9[11] == (_QWORD)v45)
          break;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v4 = 1;
    while (1)
    {
      v9 = (uint64_t *)*v7;
      if (!*(_BYTE *)(*v7 + 96))
        break;
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_5;
    }
  }
  v11 = *v9;
  if (*v9)
  {
    v12 = WTF::fastMalloc((WTF *)0x10);
    v13 = v12;
    v14 = off_1E3391D58;
    *(_QWORD *)v12 = off_1E3391D58;
    *(_WORD *)(v12 + 8) = 273;
    v15 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)v11;
      v17 = 8 * v15 - 8;
      do
      {
        v18 = *v16++;
        v19 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, *(_QWORD *)(v18 + 8));
        if ((v19 & 1) != 0)
          break;
        v20 = v17;
        v17 -= 8;
      }
      while (v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if ((v19 & 1) != 0)
        goto LABEL_33;
    }
    else
    {
      WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v12);
    }
    v21 = WTF::fastMalloc((WTF *)0x10);
    v22 = v21;
    *(_QWORD *)v21 = off_1E3391D58;
    *(_WORD *)(v21 + 8) = 210;
    v23 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v23)
    {
      v24 = *(uint64_t **)v11;
      v25 = 8 * v23 - 8;
      do
      {
        v26 = *v24++;
        v27 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, *(_QWORD *)(v26 + 8));
        if ((v27 & 1) != 0)
          break;
        v28 = v25;
        v25 -= 8;
      }
      while (v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      if ((v27 & 1) != 0)
        goto LABEL_33;
    }
    else
    {
      WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v21);
    }
    v29 = WTF::fastMalloc((WTF *)0x10);
    v30 = v29;
    *(_QWORD *)v29 = off_1E3391D58;
    *(_WORD *)(v29 + 8) = 214;
    v31 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v31)
    {
      v32 = *(uint64_t **)v11;
      v33 = 8 * v31 - 8;
      do
      {
        v34 = *v32++;
        v35 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 16))(v30, *(_QWORD *)(v34 + 8));
        if ((v35 & 1) != 0)
          break;
        v36 = v33;
        v33 -= 8;
      }
      while (v36);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      if ((v35 & 1) != 0)
      {
LABEL_33:
        v4 = 0;
        v2 = 1;
        goto LABEL_5;
      }
    }
    else
    {
      WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v29);
    }
    v37 = (_WORD *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v37 = off_1E3391D58;
    v37[4] = 284;
    v38 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v38)
    {
      v39 = *(uint64_t **)v11;
      v40 = 8 * v38 - 8;
      do
      {
        v41 = *v39++;
        v2 = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v37 + 16))(v37, *(_QWORD *)(v41 + 8));
        if ((v2 & 1) != 0)
          break;
        v42 = v40;
        v40 -= 8;
      }
      while (v42);
      v14 = *(uint64_t (***)())v37;
    }
    else
    {
      v2 = 0;
    }
    ((void (*)(_WORD *))v14[1])(v37);
    v4 = 0;
  }
  else
  {
LABEL_4:
    v4 = 1;
  }
LABEL_5:
  if (v46 && v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v3);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (v4)
    goto LABEL_10;
  return v2 & 1;
}

WTF *WebCore::RenderGeometryMap::push(WebCore::RenderGeometryMap *this, const WebCore::RenderObject *a2, const WebCore::TransformationMatrix *a3, char a4, char a5, char a6, char a7)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  unsigned int v16;
  WTF *result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  void *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[2];
  WTF *v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v9 = (uint64_t *)((char *)this + 24);
  v10 = *(_QWORD *)this;
  v44[1] = 0;
  v45 = 0;
  v44[0] = a2;
  v46 = a4;
  v47 = a5;
  v48 = a6;
  v49 = a7;
  v11 = *((unsigned int *)this + 9);
  if ((_DWORD)v11 == *((_DWORD *)this + 8))
  {
    v12 = (_QWORD *)WTF::Vector<WebCore::RenderGeometryMapStep,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v11 + 1, (unint64_t)v44);
    LODWORD(v11) = *((_DWORD *)this + 9);
  }
  else
  {
    v12 = v44;
  }
  v13 = *((_QWORD *)this + 3);
  v14 = (_QWORD *)(v13 + 32 * v10);
  memmove(v14 + 4, v14, v13 + 32 * v11 - (_QWORD)v14);
  *v14 = *v12;
  v14[1] = v12[1];
  v14[2] = 0;
  *((_DWORD *)v14 + 6) = *((_DWORD *)v12 + 6);
  v16 = *((_DWORD *)this + 9) + 1;
  *((_DWORD *)this + 9) = v16;
  result = v45;
  v45 = 0;
  if (result)
  {
    result = (WTF *)WTF::fastFree(result, v15);
    v16 = *((_DWORD *)this + 9);
  }
  v18 = *(_QWORD *)this;
  if (*(_QWORD *)this >= (unint64_t)v16)
  {
    __break(0xC471u);
  }
  else
  {
    v19 = *v9;
    v20 = (_QWORD *)(v19 + 32 * v18);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a3, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 1))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*((float64x2_t *)a3 + 2), (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 3))))))) & 1) == 0&& (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 4)), (int32x4_t)vceqq_f64(*((float64x2_t *)a3 + 5), (float64x2_t)xmmword_1968A14B0)))) & 0xF) == 0&& *((double *)a3 + 15) == 1.0&& *((double *)a3 + 14) == 0.0
      && (v21 = *((double *)a3 + 12), v21 == (double)(int)v21)
      && (v22 = *((double *)a3 + 13), v22 == (double)(int)v22))
    {
      v23 = v21 * 64.0;
      if (v21 * 64.0 >= 2147483650.0)
      {
        v24 = 0x7FFFFFFFLL;
      }
      else if (v23 <= -2147483650.0)
      {
        v24 = 0x80000000;
      }
      else
      {
        v24 = (int)v23;
      }
      v25 = v22 * 64.0;
      if (v25 >= 2147483650.0)
      {
        v26 = 0x7FFFFFFF00000000;
      }
      else if (v25 <= -2147483650.0)
      {
        v26 = 0x8000000000000000;
      }
      else
      {
        v26 = (unint64_t)(int)v25 << 32;
      }
      *(_QWORD *)(v19 + 32 * v18 + 8) = v26 | v24;
    }
    else
    {
      v37 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
      v38 = *((_OWORD *)a3 + 3);
      v40 = *(_OWORD *)a3;
      v39 = *((_OWORD *)a3 + 1);
      v37[2] = *((_OWORD *)a3 + 2);
      v37[3] = v38;
      *v37 = v40;
      v37[1] = v39;
      v41 = *((_OWORD *)a3 + 7);
      v43 = *((_OWORD *)a3 + 4);
      v42 = *((_OWORD *)a3 + 5);
      v37[6] = *((_OWORD *)a3 + 6);
      v37[7] = v41;
      v37[4] = v43;
      v37[5] = v42;
      result = (WTF *)v20[2];
      v20[2] = v37;
      if (result)
        result = (WTF *)WTF::fastFree(result, v36);
    }
    if (*(_BYTE *)(*v20 + 46) != 49)
    {
      v27 = v19 + 32 * v18;
      v28 = *((_DWORD *)this + 266);
      v29 = *(_DWORD *)(v27 + 8);
      v30 = __OFADD__(v28, v29);
      v31 = v28 + v29;
      if (v30)
        v31 = (v28 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 266) = v31;
      v32 = *((_DWORD *)this + 267);
      v33 = *(_DWORD *)(v27 + 12);
      v30 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v30)
        v34 = (v32 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 267) = v34;
    }
    v35 = v19 + 32 * v18;
    if (*(_BYTE *)(v35 + 25))
      ++*((_DWORD *)this + 2);
    if (*(_QWORD *)(v35 + 16))
      ++*((_DWORD *)this + 3);
    if (*(_BYTE *)(v19 + 32 * v18 + 26))
      ++*((_DWORD *)this + 4);
  }
  return result;
}

_BYTE *WebCore::ScrollingTree::applyLayerPositionsAfterCommit(_BYTE *this)
{
  if (this[342])
  {
    this[342] = 0;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 80))(this);
  }
  return this;
}

uint64_t WebCore::setPlatformStrategies(uint64_t result)
{
  if (!WebCore::s_platformStrategies)
    WebCore::s_platformStrategies = result;
  return result;
}

uint64_t WebCore::ProcessIdentity::operator=(uint64_t a1, const WTF::MachSendRight *a2)
{
  _BYTE v4[4];

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v4, a2);
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  return a1;
}

uint64_t WebCore::ResourceLoadObserver::sharedIfExists(WebCore::ResourceLoadObserver *this)
{
  return WebCore::sharedObserver(void)::observer;
}

uint64_t WebCore::platformStrategies(WebCore *this)
{
  return WebCore::s_platformStrategies;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 16);
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = v6 + 16 * v13;
      v17 = *(WTF::StringImpl **)v16;
      if (*(_QWORD *)v16)
      {
        if (v17 != (WTF::StringImpl *)-1)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v17 + 4);
          if (v20 < 0x100)
            v21 = WTF::StringImpl::hashSlowCase(v17);
          else
            v21 = v20 >> 8;
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v21 = ++v22 + v23;
          }
          while (*(_QWORD *)(v18 + 16 * v23));
          v24 = v18 + 16 * v23;
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(v24 + 8), v10);
          v26 = *(WTF::StringImpl **)v24;
          *(_QWORD *)v24 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v25);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)v24 = v27;
          WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(v24 + 8), (const WebCore::CachedResourceHandleBase *)(v6 + 16 * v13 + 8));
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(v6 + 16 * v13 + 8), v28);
          v29 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v16 == a3)
            v14 = v24;
        }
      }
      else
      {
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(v16 + 8), v10);
        v30 = *(WTF::StringImpl **)v16;
        *(_QWORD *)v16 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WebCore::CachedScript::finishLoading(WebCore::CachedScript *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  void *v8;
  WTF *v9;
  void *v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int **v18;
  WTF *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  WTF *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int **v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  char v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  char v47;

  if (a2)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v44);
    v13 = v44;
    v44 = 0;
    v14 = (WTF *)*((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = v13;
    if (v14)
    {
      do
      {
        v15 = __ldaxr((unsigned int *)v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v14));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)v14);
        v25 = *((unsigned int *)v14 + 5);
        if ((_DWORD)v25)
        {
          v26 = *((_QWORD *)v14 + 1);
          v27 = v26 + 16 * v25;
          do
          {
            v28 = *(unsigned int **)(v26 + 8);
            *(_QWORD *)(v26 + 8) = 0;
            if (v28)
            {
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                v35 = v26;
                v37 = v27;
                v39 = (WTF *)v28;
                v42 = v14;
                atomic_store(1u, v28);
                v34 = v28[6];
                if ((_DWORD)v34 != -1)
                  ((void (*)(char *, unsigned int *))off_1E33F8F08[v34])(&v43, v28 + 2);
                *((_DWORD *)v39 + 6) = -1;
                WTF::fastFree(v39, v12);
                v14 = v42;
                v26 = v35;
                v27 = v37;
              }
            }
            v26 += 16;
          }
          while (v26 != v27);
        }
        v31 = (WTF *)*((_QWORD *)v14 + 1);
        if ((WTF *)((char *)v14 + 24) != v31 && v31 != 0)
        {
          *((_QWORD *)v14 + 1) = 0;
          *((_DWORD *)v14 + 4) = 0;
          v40 = v14;
          WTF::fastFree(v31, v12);
          v14 = v40;
        }
        WTF::fastFree(v14, v12);
      }
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v44, v12);
    v7 = *((_DWORD *)a2 + 12);
  }
  else
  {
    v5 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = 0;
    if (v5)
    {
      do
        v6 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v6 - 1, (unsigned int *)v5));
      if (v6 == 1)
      {
        atomic_store(1u, (unsigned int *)v5);
        v17 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v17)
        {
          v18 = *(unsigned int ***)(v5 + 8);
          v19 = (WTF *)&v18[2 * v17];
          do
          {
            v20 = v18[1];
            v18[1] = 0;
            if (v20)
            {
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
              {
                v36 = v18;
                v38 = v19;
                atomic_store(1u, v20);
                v41 = (WTF *)v20;
                v33 = v20[6];
                if ((_DWORD)v33 != -1)
                  ((void (*)(uint64_t *, unsigned int *))off_1E33F8F08[v33])(&v44, v20 + 2);
                *((_DWORD *)v41 + 6) = -1;
                WTF::fastFree(v41, a2);
                v18 = v36;
                v19 = v38;
              }
            }
            v18 += 2;
          }
          while (v18 != (unsigned int **)v19);
        }
        v23 = *(WTF **)(v5 + 8);
        if ((WTF *)(v5 + 24) != v23 && v23 != 0)
        {
          *(_QWORD *)(v5 + 8) = 0;
          *(_DWORD *)(v5 + 16) = 0;
          WTF::fastFree(v23, a2);
        }
        WTF::fastFree((WTF *)v5, a2);
      }
    }
    v7 = 0;
  }
  WebCore::CachedResource::setEncodedSize(this, v7);
  LOBYTE(v44) = 0;
  v47 = 0;
  std::array<std::optional<WebCore::ResourceCryptographicDigest>,3ul>::fill[abi:sn180100]((uint64_t)this + 560, (uint64_t)&v44);
  if (v47)
  {
    v9 = v45;
    if (v45)
    {
      v45 = 0;
      v46 = 0;
      WTF::fastFree(v9, v8);
    }
  }
  *(_WORD *)((char *)this + 557) &= ~0x400u;
  return (*(uint64_t (**)(WebCore::CachedScript *, const WebCore::NetworkLoadMetrics *, _QWORD))(*(_QWORD *)this + 200))(this, a3, 0);
}

uint64_t WebCore::CachedResourceClientWalker<WebCore::CachedResourceClient>::next(_QWORD *a1)
{
  unsigned int *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;

  v1 = (unsigned int *)a1[1];
  if (v1)
  {
    v2 = *v1;
    v3 = a1[2];
    if (v3 < v2)
    {
      v5 = v1 + 2;
      while (1)
      {
        v6 = v3 + 1;
        a1[2] = v3 + 1;
        if (v2 <= v3)
        {
          result = 146;
          __break(0xC471u);
          return result;
        }
        v7 = *(_QWORD *)&v5[2 * v3];
        if (v7)
        {
          v1 = *(unsigned int **)(v7 + 8);
          if (v1)
          {
            v8 = *(_QWORD *)(*a1 + 8);
            ++*(_DWORD *)(v8 + 368);
            v9 = *((_QWORD *)v1 + 1);
            if (v9)
            {
              if (*(_QWORD *)(v9 + 8))
              {
                v10 = *(_QWORD *)(v8 + 360);
                if (v10)
                  break;
              }
            }
          }
        }
LABEL_17:
        v1 = 0;
        v3 = v6;
        if (v6 == v2)
          return (uint64_t)v1;
      }
      v11 = *(_DWORD *)(v10 - 8);
      v12 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      for (i = 1; ; ++i)
      {
        v17 = *(_QWORD *)(v10 + 16 * v15);
        if (v17 != -1)
        {
          if (!v17)
            goto LABEL_17;
          if (v17 == v9)
            break;
        }
        v15 = (v15 + i) & v11;
      }
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v1;
}

uint64_t WebCore::CachedResource::stillNeedsLoad(WebCore::CachedResource *this)
{
  return 0;
}

uint64_t *WebCore::CachedResourceClientWalker<WebCore::CachedResourceClient>::CachedResourceClientWalker(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    goto LABEL_80;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v30 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  if (!v30)
    goto LABEL_80;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, (void *)a2);
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_80:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
    *a1 = v4;
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      v36 = a1;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v36, (uint64_t)&v35);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  v8 = (uint64_t *)(a2 + 360);
  WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a2 + 360, (void *)a2);
  v10 = *(_QWORD *)(a2 + 360);
  if (v10 && (v11 = *(unsigned int *)(v10 - 12), (_DWORD)v11))
  {
    v12 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v11 + 8));
    *v12 = v11;
    bzero(v12 + 2, 8 * v11);
  }
  else
  {
    v12 = 0;
  }
  a1[1] = (uint64_t)v12;
  a1[2] = 0;
  v13 = *v8;
  if (!*v8)
  {
    v15 = 0;
    v14 = 0;
    goto LABEL_46;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + 16 * v14;
  if (!*(_DWORD *)(v13 - 12))
  {
LABEL_46:
    v17 = v15;
    v15 = v13 + 16 * v14;
    goto LABEL_17;
  }
  if (!(_DWORD)v14)
  {
    v18 = 0;
    v17 = v13;
    goto LABEL_19;
  }
  v16 = 16 * v14;
  v17 = v13;
  while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
  {
    v17 += 16;
    v16 -= 16;
    if (!v16)
    {
      v17 = v15;
      break;
    }
  }
LABEL_17:
  if (v13)
  {
    v18 = *(unsigned int *)(v13 - 4);
LABEL_19:
    v19 = v13 + 16 * v18;
    goto LABEL_20;
  }
  v19 = 0;
LABEL_20:
  if (v19 != v17)
  {
    while (!*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      v33 = v17 + 16;
      v17 = v15;
      if (v33 != v15)
      {
        v17 = v33;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 16;
          if (v17 == v15)
          {
            v17 = v15;
            break;
          }
        }
      }
      if (v17 == v19)
      {
        v17 = v19;
        break;
      }
    }
  }
  if (v13)
    v20 = v13 + 16 * *(unsigned int *)(v13 - 4);
  else
    v20 = 0;
  if (v17 != v20)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v24 = *(_QWORD *)(v23 + 8);
      if (!v24)
      {
        v24 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = v23;
        v29 = *(WTF **)(v23 + 8);
        *(_QWORD *)(v23 + 8) = v24;
        if (v29)
        {
          if (*(_DWORD *)v29 == 1)
          {
            WTF::fastFree(v29, v9);
            v24 = *(_QWORD *)(v23 + 8);
            if (!v24)
              goto LABEL_29;
          }
          else
          {
            --*(_DWORD *)v29;
          }
        }
      }
      ++*(_DWORD *)v24;
LABEL_29:
      v25 = (unsigned int *)a1[1];
      if (*v25 <= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x19415EB28);
      }
      v26 = &v25[2 * v22];
      v27 = (WTF *)*((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = v24;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::fastFree(v27, v9);
        else
          --*(_DWORD *)v27;
      }
      v28 = v15;
      if (v17 + 16 != v15)
      {
        v28 = v17 + 16;
        while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
        {
          v28 += 16;
          if (v28 == v15)
          {
            v28 = v15;
            break;
          }
        }
      }
      v17 = v19;
      if (v28 != v19)
      {
        v17 = v28;
        if (!*(_QWORD *)(*(_QWORD *)v28 + 8))
        {
          while (1)
          {
            v34 = v17 + 16;
            v17 = v15;
            if (v34 != v15)
            {
              v17 = v34;
              while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
              {
                v17 += 16;
                if (v17 == v15)
                {
                  v17 = v15;
                  break;
                }
              }
            }
            if (v17 == v19)
              break;
            if (*(_QWORD *)(*(_QWORD *)v17 + 8))
              goto LABEL_40;
          }
          v17 = v19;
        }
      }
LABEL_40:
      ++v22;
      ++*(_DWORD *)(a2 + 368);
    }
    while (v17 != v20);
  }
  return a1;
}

uint64_t *WebCore::ImageDecoderCG::setData(WebCore::ImageDecoderCG *this, const WebCore::FragmentedSharedBuffer *a2, BOOL a3)
{
  CGImageSource *v5;
  CFDataRef v6;
  WebCore::SharedBuffer *v7;
  CFStringRef Type;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  void *v12;
  unsigned int *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unsigned int *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  WebCore::SharedBuffer *v25;
  CFDataRef data;
  char v27;
  WTF::StringImpl *v28;

  *((_BYTE *)this + 12) = a3;
  WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v25);
  v5 = (CGImageSource *)*((_QWORD *)this + 4);
  WebCore::SharedBuffer::createCFData(v25, (WebCoreSharedBufferData **)&data);
  CGImageSourceUpdateData(v5, data, a3);
  v6 = data;
  data = 0;
  if (v6)
    CFRelease(v6);
  v7 = v25;
  Type = CGImageSourceGetType(*((CGImageSourceRef *)this + 4));
  MEMORY[0x19AEA5508](&v28, Type);
  if ((MEMORY[0x19AEA53F4](v28, "public.heif", 11) & 1) == 0
    && (MEMORY[0x19AEA53F4](v28, "public.heic", 11) & 1) == 0
    && !MEMORY[0x19AEA53F4](v28, "public.heics", 12))
  {
    goto LABEL_6;
  }
  if (*((_QWORD *)v7 + 6) < 4uLL)
    goto LABEL_6;
  v14 = (unsigned int *)WebCore::SharedBuffer::data(v7);
  v15 = *((_QWORD *)v7 + 6);
  v16 = bswap32(*v14);
  v17 = (v16 & 3) == 0 && v15 >= v16;
  if (!v17 || v16 < 0x10)
    goto LABEL_6;
  v19 = v14;
  if (v14[1] != 1887007846)
    goto LABEL_6;
  WebCore::ImageDecoderCG::decodeUTI(CGImageSource *,WebCore::SharedBuffer const&)::$_1::operator()(&data, bswap32(v14[2]));
  if (!v27)
  {
    std::optional<WTF::String>::~optional((uint64_t)&data, v20);
    if ((v16 >> 2) - 4 >= 0x64)
      v22 = 100;
    else
      v22 = (v16 >> 2) - 4;
    if (v22)
    {
      v23 = v19 + 4;
      do
      {
        v24 = *v23++;
        WebCore::ImageDecoderCG::decodeUTI(CGImageSource *,WebCore::SharedBuffer const&)::$_1::operator()(&data, bswap32(v24));
        if (v27)
          goto LABEL_23;
        std::optional<WTF::String>::~optional((uint64_t)&data, v20);
      }
      while (--v22);
    }
LABEL_6:
    v10 = v28;
    goto LABEL_7;
  }
LABEL_23:
  v10 = data;
  if (data)
    *(_DWORD *)data += 2;
  std::optional<WTF::String>::~optional((uint64_t)&data, v20);
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v9);
    else
      *(_DWORD *)v21 -= 2;
  }
LABEL_7:
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  atomic_store(MEMORY[0x19AEA53F4](v10, "public.xbitmap-image", 20), (unsigned __int8 *)this + 13);
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v25, v12);
}

WebCoreSharedBufferData *WebCore::SharedBuffer::createCFData@<X0>(WebCore::SharedBuffer *this@<X0>, WebCoreSharedBufferData **a2@<X8>)
{
  WebCoreSharedBufferData *result;

  if (*((_DWORD *)this + 5))
    result = -[WebCoreSharedBufferData initWithDataSegment:position:size:]([WebCoreSharedBufferData alloc], "initWithDataSegment:position:size:", *(_QWORD *)(*((_QWORD *)this + 1) + 8), 0, WebCore::DataSegment::size(*(WebCore::DataSegment **)(*((_QWORD *)this + 1) + 8)));
  else
    result = (WebCoreSharedBufferData *)CFDataCreate(0, 0, 0);
  *a2 = result;
  return result;
}

void WebCore::SubresourceLoader::didReceiveBuffer(uint64_t a1, WebCore::FragmentedSharedBuffer *this, uint64_t a3, int a4)
{
  WebCore::LegacyPreviewLoader *v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v39;
  unsigned int *v40;
  WebCore::SharedBuffer *v41[3];
  char v42;
  WebCore::SharedBuffer **v43;

  v8 = *(WebCore::LegacyPreviewLoader **)(a1 + 320);
  if (!v8
    || (WebCore::FragmentedSharedBuffer::makeContiguous(this, v41),
        v9 = WebCore::LegacyPreviewLoader::didReceiveData(v8, v41[0]),
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v41, v10), !v9))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 1328) + 8);
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
    {
      v12 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = v11;
      v25 = *(unsigned int **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v12;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v24);
        }
        v12 = *(_QWORD *)(v11 + 8);
      }
    }
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    v40 = (unsigned int *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v43 = (WebCore::SharedBuffer **)&v40;
    ++*(_DWORD *)(v14 + 548);
    v15 = *(_QWORD *)(v14 + 488);
    if (v15 && *(_QWORD *)(v15 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v14 + 464), (uint64_t *)&v43, (uint64_t)v41);
      v14 = *((_QWORD *)v40 + 1);
    }
    v16 = *(uint64_t **)(v14 + 400);
    if (!v16)
    {
      v17 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v17 != -1)
      {
        v41[0] = (WebCore::SharedBuffer *)&v42;
        v43 = v41;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v16 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v16, 1);
    if (*((__int16 *)v16 + 68) >= 400
      && !(*(unsigned int (**)(_QWORD))(**((_QWORD **)v40 + 1) + 80))(*((_QWORD *)v40 + 1)))
    {
      goto LABEL_23;
    }
    ++*(_DWORD *)(a1 + 16);
    WebCore::ResourceLoader::didReceiveBuffer((uint64_t *)a1, this, a3, a4);
    if (!*(_BYTE *)(a1 + 1644))
    {
      v19 = (unsigned int *)WebCore::ResourceLoader::resourceData((WebCore::ResourceLoader *)a1, v18);
      if (v19)
      {
        v20 = v19;
        do
          v21 = __ldaxr(v19);
        while (__stlxr(v21 + 1, v19));
        (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)v40 + 1) + 48))(*((_QWORD *)v40 + 1), v19);
        do
        {
          v22 = __ldaxr(v20);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v20));
        if (!v23)
        {
          atomic_store(1u, v20);
          v30 = v20[5];
          if ((_DWORD)v30)
          {
            v31 = *((_QWORD *)v20 + 1);
            v32 = v31 + 16 * v30;
            do
            {
              v33 = *(unsigned int **)(v31 + 8);
              *(_QWORD *)(v31 + 8) = 0;
              if (v33)
              {
                do
                {
                  v34 = __ldaxr(v33);
                  v35 = v34 - 1;
                }
                while (__stlxr(v35, v33));
                if (!v35)
                {
                  v39 = v32;
                  atomic_store(1u, v33);
                  v36 = v33[6];
                  if ((_DWORD)v36 != -1)
                    ((void (*)(WebCore::SharedBuffer **, unsigned int *))off_1E33F7AE0[v36])(v41, v33 + 2);
                  v33[6] = -1;
                  WTF::fastFree((WTF *)v33, v18);
                  v32 = v39;
                }
              }
              v31 += 16;
            }
            while (v31 != v32);
          }
          v37 = (WTF *)*((_QWORD *)v20 + 1);
          if (v20 + 6 != (unsigned int *)v37 && v37 != 0)
          {
            *((_QWORD *)v20 + 1) = 0;
            v20[4] = 0;
            WTF::fastFree(v37, v18);
          }
          WTF::fastFree((WTF *)v20, v18);
          if (!a1)
            goto LABEL_23;
        }
      }
      else
      {
        if (v40)
          v28 = *((_QWORD *)v40 + 1);
        else
          v28 = 0;
        WebCore::FragmentedSharedBuffer::makeContiguous(this, v41);
        (*(void (**)(uint64_t, WebCore::SharedBuffer *))(*(_QWORD *)v28 + 56))(v28, v41[0]);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v41, v29);
      }
    }
    if (*(_DWORD *)(a1 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 16);
LABEL_23:
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v40, v18);
  }
}

WebCore::CachedResourceHandleBase *WebCore::CachedResourceHandleBase::CachedResourceHandleBase(WebCore::CachedResourceHandleBase *this, WebCore::CachedResource *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::CachedResourceHandleBase *v13;
  _BYTE v14[24];
  WebCore::CachedResourceHandleBase *v15;

  if (!a2)
    goto LABEL_2;
  v4 = *((_QWORD *)a2 + 1);
  v13 = this;
  if (v4)
    goto LABEL_19;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v10 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (!v10)
    goto LABEL_19;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v4 = *((_QWORD *)a2 + 1);
  this = v13;
  if (v4)
  {
LABEL_19:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
    this = v13;
    *(_QWORD *)v13 = v4;
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      v15 = v13;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (v7 && *(_QWORD *)(v7 + 8))
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v15, (uint64_t)v14);
      return v13;
    }
  }
  else
  {
LABEL_2:
    *(_QWORD *)this = 0;
  }
  return this;
}

{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::CachedResourceHandleBase *v14;

  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_16;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v10 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  if (!v10)
    goto LABEL_16;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
  {
LABEL_16:
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    *(_QWORD *)this = v3;
    v5 = *(_QWORD *)(v3 + 8);
  }
  else
  {
    v5 = 0;
    *(_QWORD *)this = 0;
  }
  v14 = this;
  ++*(_DWORD *)(v5 + 548);
  v6 = *(_QWORD *)(v5 + 488);
  if (v6 && *(_QWORD *)(v6 + 8))
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v14, (uint64_t)&v13);
  return this;
}

{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::CachedResourceHandleBase *v14;

  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_16;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v10 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  if (!v10)
    goto LABEL_16;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
  {
LABEL_16:
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    *(_QWORD *)this = v3;
    v5 = *(_QWORD *)(v3 + 8);
  }
  else
  {
    v5 = 0;
    *(_QWORD *)this = 0;
  }
  v14 = this;
  ++*(_DWORD *)(v5 + 548);
  v6 = *(_QWORD *)(v5 + 488);
  if (v6 && *(_QWORD *)(v6 + 8))
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v14, (uint64_t)&v13);
  return this;
}

uint64_t *WebCore::CachedResource::response(WebCore::CachedResource *this)
{
  uint64_t *result;
  unint64_t v2;
  char v3;
  char **v4;
  char *v5;

  result = (uint64_t *)*((_QWORD *)this + 50);
  if (!result)
  {
    v2 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v2 != -1)
    {
      v5 = &v3;
      v4 = &v5;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    return &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  return result;
}

uint64_t WebCore::ResourceLoader::resourceData(WebCore::ResourceLoader *this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  char v19;

  v2 = *((_QWORD *)this + 92);
  if (v2)
  {
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v2);
      v7 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v2 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              atomic_store(1u, v10);
              v18 = (WTF *)v10;
              v15 = v10[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_4[v15])(&v19, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v13 = *(WTF **)(v2 + 8);
      if ((WTF *)(v2 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v13, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  return v2;
}

uint64_t *WebCore::ResourceLoader::didReceiveBuffer(uint64_t *result, WebCore::FragmentedSharedBuffer *this, uint64_t a3, int a4)
{
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  void *v11;
  WebCore::SharedBuffer *v12;

  v5 = (uint64_t)result;
  ++*((_DWORD *)result + 4);
  v6 = (int *)((char *)result + 1090);
  v7 = *(_DWORD *)((char *)result + 1090);
  if ((v7 & 8) == 0)
  {
    if (!a4)
      WebCore::SharedBufferBuilder::reset((WebCore::SharedBufferBuilder *)(result + 92), this);
    WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)(v5 + 736));
    result = (uint64_t *)WebCore::FragmentedSharedBuffer::append(*(WebCore::FragmentedSharedBuffer **)(v5 + 736), this);
    v7 = *v6;
  }
  if ((v7 & 1) == 0)
  {
    v8 = *(_QWORD *)(v5 + 32);
    if (v8)
    {
      v9 = *(_DWORD **)(v8 + 280);
      if (v9)
      {
        ++*v9;
        WebCore::FragmentedSharedBuffer::makeContiguous(this, &v12);
        WebCore::ResourceLoadNotifier::didReceiveData((WebCore::ResourceLoadNotifier *)(v9 + 8), (WebCore::ResourceLoader *)v5, v12);
        result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v12, v10);
        if (!*v9)
        {
          __break(0xC471u);
          JUMPOUT(0x19415F6BCLL);
        }
        --*v9;
      }
      else
      {
        WebCore::FragmentedSharedBuffer::makeContiguous(this, &v12);
        WebCore::ResourceLoadNotifier::didReceiveData((WebCore::ResourceLoadNotifier *)0x20, (WebCore::ResourceLoader *)v5, v12);
        result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v12, v11);
      }
    }
  }
  if (*(_DWORD *)(v5 + 16) == 1)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

WTF *WebCore::FragmentedSharedBuffer::makeContiguous@<X0>(WTF *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17[2];
  uint64_t v18;

  if (*((_BYTE *)this + 40))
  {
    do
      v3 = __ldaxr((unsigned int *)this);
    while (__stlxr(v3 + 1, (unsigned int *)this));
    goto LABEL_3;
  }
  v4 = (uint64_t)this + 8;
  v5 = *((_DWORD *)this + 5);
  if (v5 == 1)
  {
    v6 = *(unsigned int **)(*(_QWORD *)v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v17[0] = (WTF *)v6;
    v8 = WTF::fastMalloc((WTF *)0x38);
    this = (WTF *)WebCore::SharedBuffer::SharedBuffer(v8, v17);
    *a2 = this;
    v10 = v17[0];
    v17[0] = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v10);
        v13 = *((unsigned int *)v10 + 6);
        if ((_DWORD)v13 != -1)
          ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v13])(&v18, (char *)v10 + 8);
        *((_DWORD *)v10 + 6) = -1;
        this = v10;
        return (WTF *)WTF::fastFree(this, v9);
      }
    }
  }
  else
  {
    if (!v5)
    {
      this = (WTF *)WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)this = 1;
      *((_QWORD *)this + 1) = (char *)this + 24;
      *((_QWORD *)this + 2) = 1;
      *((_QWORD *)this + 6) = 0;
      *((_BYTE *)this + 40) = 1;
LABEL_3:
      *a2 = this;
      return this;
    }
    WebCore::combineSegmentsData(v17, v4, *((WTF **)this + 6));
    v14 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = v14 + 24;
    *(_QWORD *)(v14 + 16) = 1;
    *(_BYTE *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v14, v17);
    v18 = v14;
    v15 = WTF::fastMalloc((WTF *)0x38);
    *a2 = WebCore::SharedBuffer::SharedBuffer(v15, &v18);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v18, v16);
    this = v17[0];
    if (v17[0])
      return (WTF *)WTF::fastFree(this, v9);
  }
  return this;
}

uint64_t WebCore::FragmentedSharedBuffer::append(WebCore::FragmentedSharedBuffer *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int **v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char *v27;
  char v28;
  char v29;

  result = WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, *((unsigned int *)a2 + 5) + (unint64_t)*((unsigned int *)this + 5));
  v5 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v5)
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = v6 + 16 * v5;
    while (1)
    {
      v8 = *((_QWORD *)this + 6);
      v9 = *(unsigned int **)(v6 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(v6 + 8);
      v12 = *(unsigned int *)(v11 + 24);
      if ((_DWORD)v12 == -1)
        break;
      v27 = &v26;
      result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v27, v11 + 8);
      *((_QWORD *)this + 6) += result;
      do
        v14 = __ldaxr(v9);
      while (__stlxr(v14 + 1, v9));
      if (v9)
      {
        do
        {
          v15 = __ldaxr(v9);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v9));
        if (!v16)
        {
          atomic_store(1u, v9);
          v22 = v9[6];
          if ((_DWORD)v22 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v22])(&v28, v9 + 2);
          v9[6] = -1;
          result = WTF::fastFree((WTF *)v9, v13);
        }
      }
      v17 = (_QWORD *)(*((_QWORD *)this + 1) + 16 * *((unsigned int *)this + 5));
      *v17 = v8;
      v18 = (unsigned int **)(v17 + 1);
      do
        v19 = __ldaxr(v9);
      while (__stlxr(v19 + 1, v9));
      *v18 = v9;
      ++*((_DWORD *)this + 5);
      if (v9)
      {
        do
        {
          v20 = __ldaxr(v9);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v9));
        if (!v21)
        {
          atomic_store(1u, v9);
          v23 = v9[6];
          if ((_DWORD)v23 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v23])(&v29, v9 + 2);
          v9[6] = -1;
          result = WTF::fastFree((WTF *)v9, v13);
        }
      }
      v6 += 16;
      if (v6 == v7)
        return result;
    }
    v24 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v24, v25);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  WTF *v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  WTF *v16;
  char v17;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    v6 = (_QWORD *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1;
    goto LABEL_6;
  }
  if (!(a2 >> 28))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
LABEL_6:
    if ((_DWORD)v5)
    {
      v7 = (WTF *)((char *)v4 + 16 * v5);
      v8 = v4;
      do
      {
        v9 = (unsigned int *)*((_QWORD *)v8 + 1);
        *v6 = *(_QWORD *)v8;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v6[1] = v9;
        v11 = (unsigned int *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v15 = v6;
            v16 = v8;
            atomic_store(1u, v11);
            v14 = v11[6];
            if ((_DWORD)v14 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v14])(&v17, v11 + 2);
            v11[6] = -1;
            WTF::fastFree((WTF *)v11, (void *)a2);
            v6 = v15;
            v8 = v16;
          }
        }
        v6 += 2;
        v8 = (WTF *)((char *)v8 + 16);
      }
      while (v8 != v7);
    }
    if ((WTF *)(v3 + 16) != v4 && v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::SharedBufferBuilder::ensureBuffer(uint64_t *this)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  char v21;

  if (!*this)
  {
    v1 = this;
    v3 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = v3 + 24;
    *(_QWORD *)(v3 + 16) = 1;
    *(_BYTE *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    v20 = 0;
    v4 = *v1;
    *v1 = v3;
    if (v4)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        v7 = *(unsigned int *)(v4 + 20);
        if ((_DWORD)v7)
        {
          v8 = *(_QWORD *)(v4 + 8);
          v9 = v8 + 16 * v7;
          do
          {
            v10 = *(unsigned int **)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            if (v10)
            {
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                v17 = v4;
                v18 = v9;
                atomic_store(1u, v10);
                v19 = (WTF *)v10;
                v16 = v10[6];
                if ((_DWORD)v16 != -1)
                  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v16])(&v21, v10 + 2);
                *((_DWORD *)v19 + 6) = -1;
                WTF::fastFree(v19, v2);
                v4 = v17;
                v9 = v18;
              }
            }
            v8 += 16;
          }
          while (v8 != v9);
        }
        v13 = *(WTF **)(v4 + 8);
        if ((WTF *)(v4 + 24) != v13 && v13 != 0)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          v15 = v4;
          WTF::fastFree(v13, v2);
          v4 = v15;
        }
        WTF::fastFree((WTF *)v4, v2);
      }
    }
    return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v20, v2);
  }
  return this;
}

uint64_t WebCore::FrameLoader::numPendingOrLoadingRequests(WebCore::FrameLoader *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v3 = v2;
  v4 = (unsigned int *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if ((_DWORD)a2)
  {
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
    v7 = 0;
    if (v2)
    {
      while (1)
      {
        v8 = (unsigned int *)(v3 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        if (*(_BYTE *)(v3 + 144))
        {
          do
          {
            v28 = __ldaxr(v8);
            v12 = --v28 == 0;
          }
          while (__stlxr(v28, v8));
        }
        else
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v3 + 296) + 720);
          if (!v10)
            v10 = WebCore::Document::ensureCachedResourceLoader(*(WebCore::Document **)(v3 + 296), a2);
          v7 = (*(_DWORD *)(v10 + 88) + v7);
          do
          {
            v11 = __ldaxr(v8);
            v12 = --v11 == 0;
          }
          while (__stlxr(v11, v8));
        }
        if (v12)
        {
          atomic_store(1u, v8);
          v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v25 = off_1E31FE290;
          v25[1] = v8;
          v29 = v25;
          WTF::ensureOnMainThread();
          if (v29)
            (*(void (**)(_QWORD *))(*v29 + 8))(v29);
        }
        if (*(_QWORD *)(v3 + 88))
        {
          v3 = *(_QWORD *)(v3 + 88);
        }
        else
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8);
          if (v13 == v2)
            goto LABEL_24;
          v3 = *(_QWORD *)(v3 + 72);
          if (!v3)
          {
            while (1)
            {
              v14 = *(_QWORD *)(v13 + 56);
              if (!v14)
                break;
              v13 = *(_QWORD *)(v14 + 8);
              if (v13 == v2 || v13 == 0)
                break;
              v3 = *(_QWORD *)(v13 + 72);
              if (v3)
                goto LABEL_30;
            }
LABEL_24:
            v3 = 0;
            v16 = 1;
            goto LABEL_25;
          }
        }
LABEL_30:
        v19 = (unsigned int *)(v3 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
        v16 = 0;
        do
        {
LABEL_25:
          v17 = __ldaxr(v8);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v8));
        if (!v18)
        {
          atomic_store(1u, v8);
          v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v26 = off_1E31FE290;
          v26[1] = v8;
          v30 = v26;
          WTF::ensureOnMainThread();
          if (v30)
            (*(void (**)(_QWORD *))(*v30 + 8))(v30);
        }
        if (v16)
          goto LABEL_36;
      }
    }
  }
  else
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 296) + 720);
    if (!v21)
      v21 = WebCore::Document::ensureCachedResourceLoader(*(WebCore::Document **)(v2 + 296), a2);
    v7 = *(unsigned int *)(v21 + 88);
    do
    {
LABEL_36:
      v22 = __ldaxr(v4);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v4));
    if (!v23)
    {
      atomic_store(1u, v4);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = off_1E31FE290;
      v27[1] = v4;
      v31 = v27;
      WTF::ensureOnMainThread();
      if (v31)
        (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    }
  }
  return v7;
}

void WebCore::CachedRawResource::notifyClientsDataWasReceived(WebCore::CachedRawResource *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  WTF *v22;
  unsigned int **v23;

  if (*((_QWORD *)a2 + 6))
  {
    if (!this)
      goto LABEL_3;
    v12 = *((_QWORD *)this + 1);
    if (v12)
      goto LABEL_32;
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = this;
    v17 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v12;
    if (!v17)
      goto LABEL_32;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
    v12 = *((_QWORD *)this + 1);
    if (v12)
    {
LABEL_32:
      do
        v13 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v13 + 1, (unsigned int *)v12));
      v20 = (unsigned int *)v12;
      v14 = *(_QWORD *)(v12 + 8);
      if (v14)
      {
        v23 = &v20;
        ++*(_DWORD *)(v14 + 548);
        v15 = *(_QWORD *)(v14 + 488);
        if (v15)
        {
          if (*(_QWORD *)(v15 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v14 + 464), (uint64_t *)&v23, (uint64_t)&v21);
        }
      }
    }
    else
    {
LABEL_3:
      v20 = 0;
    }
    WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::CachedResourceClientWalker((uint64_t *)&v21, (uint64_t)this);
    while (1)
    {
      v4 = WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::next((uint64_t *)&v21);
      if (!v4)
        break;
      (*(void (**)(uint64_t, WebCore::CachedRawResource *, const WebCore::SharedBuffer *))(*(_QWORD *)v4 + 72))(v4, this, a2);
    }
    v6 = v22;
    v22 = 0;
    if (v6)
    {
      v8 = (WTF **)((char *)v6 + 8);
      v7 = *(unsigned int *)v6;
      if ((_DWORD)v7)
      {
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 1)
              WTF::fastFree(v10, v5);
            else
              --*(_DWORD *)v10;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree(v6, v5);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v21, v5);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v20, v11);
  }
}

uint64_t WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::next(uint64_t *a1)
{
  unsigned int *v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = (unsigned int *)a1[1];
  if (!v1)
    return 0;
  v3 = *v1;
  v4 = a1[2];
  if (v4 >= v3)
    return 0;
  while (1)
  {
    v5 = v4 + 1;
    a1[2] = v4 + 1;
    v6 = (_DWORD *)a1[1];
    if (*v6 <= v4)
      goto LABEL_17;
    v7 = v6 + 2;
    v8 = *(_QWORD *)&v6[2 * v4 + 2];
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        break;
    }
LABEL_15:
    result = 0;
    v4 = v5;
    if (v5 >= v3)
      return result;
  }
  v10 = *a1;
  if (*a1)
    v10 = *(_QWORD *)(v10 + 8);
  if ((WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)(v10 + 360), v9) & 1) == 0)
  {
    v5 = a1[2];
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(*(_QWORD *)&v7[2 * v4] + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11) != 5)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x194160180);
  }
  v12 = *(_QWORD *)&v7[2 * v4];
  if (v12)
    return *(_QWORD *)(v12 + 8);
  return 0;
}

void WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(unsigned int **this, void *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::CachedResourceHandleBase *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;

  if (*this)
  {
    v3 = *((_QWORD *)*this + 1);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 548) - 1;
      *(_DWORD *)(v3 + 548) = v4;
      v5 = *(_QWORD *)(v3 + 488);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 8))
        {
          v9 = *(_QWORD *)(v3 + 464);
          if (v9)
          {
            v10 = *(_DWORD *)(v9 - 8);
            v11 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
            v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
            v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
            v14 = v10 & ((v13 >> 31) ^ v13);
            v15 = *(WebCore::CachedResourceHandleBase **)(v9 + 8 * v14);
            if (v15 != (WebCore::CachedResourceHandleBase *)this)
            {
              v23 = 1;
              while (v15)
              {
                v14 = ((_DWORD)v14 + v23) & v10;
                v15 = *(WebCore::CachedResourceHandleBase **)(v9 + 8 * v14);
                ++v23;
                if (v15 == (WebCore::CachedResourceHandleBase *)this)
                  goto LABEL_16;
              }
              v14 = *(unsigned int *)(v9 - 4);
            }
LABEL_16:
            if (v14 != *(_DWORD *)(v9 - 4))
            {
              *(_QWORD *)(v9 + 8 * v14) = -1;
              v16 = (uint64_t *)(v3 + 464);
              ++*(_DWORD *)(*(_QWORD *)(v3 + 464) - 16);
              v17 = *(_QWORD *)(v3 + 464);
              v18 = v17 ? *(_DWORD *)(v17 - 12) - 1 : -1;
              *(_DWORD *)(v17 - 12) = v18;
              v19 = *v16;
              if (*v16)
              {
                v20 = 6 * *(_DWORD *)(v19 - 12);
                v21 = *(_DWORD *)(v19 - 4);
                if (v20 < v21 && v21 >= 9)
                  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::rehash(v16, v21 >> 1, 0);
              }
            }
          }
        }
        v4 = *(_DWORD *)(v3 + 548);
      }
      if (!v4)
        WebCore::CachedResource::deleteIfPossible((WebCore::CachedResource *)v3, a2);
    }
    v6 = *this;
    *this = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *this = 0;
  }
}

_QWORD *WebCore::CachedResource::unregisterHandle(_QWORD *this, WebCore::CachedResourceHandleBase *a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::CachedResourceHandleBase *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v18;

  v2 = this;
  v3 = *((_DWORD *)this + 137) - 1;
  *((_DWORD *)this + 137) = v3;
  v4 = this[61];
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      v5 = this[58];
      if (v5)
      {
        v6 = *(_DWORD *)(v5 - 8);
        v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
        v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        v10 = v6 & ((v9 >> 31) ^ v9);
        v11 = *(WebCore::CachedResourceHandleBase **)(v5 + 8 * v10);
        if (v11 != a2)
        {
          v18 = 1;
          while (v11)
          {
            v10 = ((_DWORD)v10 + v18) & v6;
            v11 = *(WebCore::CachedResourceHandleBase **)(v5 + 8 * v10);
            ++v18;
            if (v11 == a2)
              goto LABEL_8;
          }
          v10 = *(unsigned int *)(v5 - 4);
        }
LABEL_8:
        if (v10 != *(_DWORD *)(v5 - 4))
        {
          *(_QWORD *)(v5 + 8 * v10) = -1;
          this += 58;
          ++*(_DWORD *)(v2[58] - 16);
          v12 = v2[58];
          v13 = v12 ? *(_DWORD *)(v12 - 12) - 1 : -1;
          *(_DWORD *)(v12 - 12) = v13;
          v14 = *this;
          if (*this)
          {
            v15 = 6 * *(_DWORD *)(v14 - 12);
            v16 = *(_DWORD *)(v14 - 4);
            if (v15 < v16 && v16 >= 9)
              this = WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::rehash(this, v16 >> 1, 0);
          }
        }
      }
    }
    v3 = *((_DWORD *)v2 + 137);
  }
  if (!v3)
    return (_QWORD *)WebCore::CachedResource::deleteIfPossible((WebCore::CachedResource *)v2, a2);
  return this;
}

uint64_t *WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::CachedResourceClientWalker(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  WTF *v26;
  uint64_t v27;
  WTF *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    goto LABEL_79;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v30 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  if (!v30)
    goto LABEL_79;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, (void *)a2);
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_79:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
    *a1 = v4;
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      v36 = a1;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v36, (uint64_t)&v35);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  v8 = (uint64_t *)(a2 + 360);
  WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a2 + 360, (void *)a2);
  v10 = *(_QWORD *)(a2 + 360);
  if (v10 && (v11 = *(unsigned int *)(v10 - 12), (_DWORD)v11))
  {
    v12 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v11 + 8));
    *v12 = v11;
    bzero(v12 + 2, 8 * v11);
  }
  else
  {
    v12 = 0;
  }
  a1[1] = (uint64_t)v12;
  a1[2] = 0;
  v13 = *v8;
  if (!*v8)
  {
    v15 = 0;
    v14 = 0;
    goto LABEL_46;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + 16 * v14;
  if (!*(_DWORD *)(v13 - 12))
  {
LABEL_46:
    v17 = v15;
    v15 = v13 + 16 * v14;
    goto LABEL_17;
  }
  if (!(_DWORD)v14)
  {
    v18 = 0;
    v17 = v13;
    goto LABEL_19;
  }
  v16 = 16 * v14;
  v17 = v13;
  while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
  {
    v17 += 16;
    v16 -= 16;
    if (!v16)
    {
      v17 = v15;
      break;
    }
  }
LABEL_17:
  if (v13)
  {
    v18 = *(unsigned int *)(v13 - 4);
LABEL_19:
    v19 = v13 + 16 * v18;
    goto LABEL_20;
  }
  v19 = 0;
LABEL_20:
  if (v19 != v17)
  {
    while (!*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      v33 = v17 + 16;
      v17 = v15;
      if (v33 != v15)
      {
        v17 = v33;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 16;
          if (v17 == v15)
          {
            v17 = v15;
            break;
          }
        }
      }
      if (v17 == v19)
      {
        v17 = v19;
        break;
      }
    }
  }
  if (v13)
    v20 = v13 + 16 * *(unsigned int *)(v13 - 4);
  else
    v20 = 0;
  if (v17 != v20)
  {
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
      {
        v23 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = v22;
        v29 = *(WTF **)(v22 + 8);
        *(_QWORD *)(v22 + 8) = v23;
        if (v29)
        {
          if (*(_DWORD *)v29 == 1)
          {
            WTF::fastFree(v29, v9);
            v23 = *(_QWORD *)(v22 + 8);
            if (!v23)
              goto LABEL_28;
          }
          else
          {
            --*(_DWORD *)v29;
          }
        }
      }
      ++*(_DWORD *)v23;
LABEL_28:
      v24 = (unsigned int *)a1[1];
      if (*v24 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x19416076CLL);
      }
      v25 = &v24[2 * v21];
      v26 = (WTF *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = v23;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v9);
        else
          --*(_DWORD *)v26;
      }
      v27 = v15;
      if (v17 + 16 != v15)
      {
        v27 = v17 + 16;
        while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
        {
          v27 += 16;
          if (v27 == v15)
          {
            v27 = v15;
            break;
          }
        }
      }
      v17 = v19;
      if (v27 != v19)
      {
        v17 = v27;
        if (!*(_QWORD *)(*(_QWORD *)v27 + 8))
        {
          while (1)
          {
            v34 = v17 + 16;
            v17 = v15;
            if (v34 != v15)
            {
              v17 = v34;
              while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
              {
                v17 += 16;
                if (v17 == v15)
                {
                  v17 = v15;
                  break;
                }
              }
            }
            if (v17 == v19)
              break;
            if (*(_QWORD *)(*(_QWORD *)v17 + 8))
              goto LABEL_39;
          }
          v17 = v19;
        }
      }
LABEL_39:
      ++v21;
      ++*(_DWORD *)(a2 + 368);
    }
    while (v17 != v20);
  }
  return a1;
}

uint64_t WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;

  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(v2 - 4);
  if (!(_DWORD)v3)
  {
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  v4 = 0;
  v5 = v3 - 1;
  do
  {
    v6 = v2 + 16 * v5;
    if ((unint64_t)(*(_QWORD *)v6 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v19 = a1;
      v18 = v4;
      v17 = v5;
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket((WTF **)(v2 + 16 * v5), a2);
      v5 = v17;
      a1 = v19;
      v4 = v18 + 1;
    }
  }
  while ((unint64_t)v5--);
  v2 = *(_QWORD *)a1;
  v3 = v4 != 0;
  if (v4)
  {
    *(_DWORD *)(v2 - 16) += v4;
    v13 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v14 = *(_DWORD *)(v13 - 12);
    else
      v14 = 0;
    *(_DWORD *)(v13 - 12) = v14 - v4;
    v2 = *(_QWORD *)a1;
  }
  if (!v2)
  {
LABEL_20:
    v10 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_17;
  }
  v8 = *(_DWORD *)(v2 - 4);
  if (v8 < 9 || 6 * *(_DWORD *)(v2 - 12) >= v8)
    goto LABEL_15;
  v20 = v3;
  v15 = a1;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v16 = *(_QWORD *)v15;
  a1 = v15;
  *(_DWORD *)(v15 + 8) = 0;
  if (!v16)
  {
    v10 = 0;
    v3 = v20;
    goto LABEL_17;
  }
  v2 = v16;
  v3 = v20;
LABEL_16:
  v10 = *(_DWORD *)(v2 - 12);
  v11 = 0x7FFFFFFF;
  if (v10 < 0x7FFFFFFF)
LABEL_17:
    v11 = v10;
  *(_DWORD *)(a1 + 12) = 2 * v11;
  return v3;
}

void WebCore::DocumentLoader::commitLoad(WebCore::DocumentLoader *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  WebCore::FrameLoader *v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::String *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int i;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::FrameLoader *v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;

  v4 = *((_QWORD *)this + 2);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_35;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
  {
LABEL_35:
    v8 = 1;
    goto LABEL_6;
  }
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = 0;
  v4 = *((_QWORD *)this + 2);
LABEL_6:
  ++*((_DWORD *)this + 6);
  if (!*((_BYTE *)this + 3537))
  {
    *((_BYTE *)this + 3537) = 1;
    if (v4 && (v9 = *(_QWORD *)(v4 + 8)) != 0)
      v10 = *(WebCore::FrameLoader **)(v9 + 280);
    else
      v10 = 0;
    WebCore::FrameLoader::commitProvisionalLoad(v10, a2);
    v4 = *((_QWORD *)this + 2);
  }
  if (v4)
  {
    v11 = *(_QWORD *)(v4 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 280);
      if (v12)
      {
        WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 1272, 1);
        v14 = *((_QWORD *)this + 164);
        if (v14 && *(_DWORD *)(v14 + 4))
        {
          {
            WebCore::createArchiveMIMETypesMap((WebCore *)&v31);
            v29 = v31;
            v31 = 0;
            WebCore::archiveMIMETypes(void)::map = (uint64_t)v29;
            WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::~HashMap(&v31, v30);
          }
          v18 = WebCore::archiveMIMETypes(void)::map;
          if (WebCore::archiveMIMETypes(void)::map)
          {
            v19 = *(_DWORD *)(WebCore::archiveMIMETypes(void)::map - 8);
            v20 = WTF::ASCIICaseInsensitiveHash::hash((WebCore::DocumentLoader *)((char *)this + 1312), v13);
            for (i = 0; ; v20 = i + v22)
            {
              v22 = v20 & v19;
              v23 = (uint64_t *)(v18 + 16 * (v20 & v19));
              if (!*v23)
                break;
              if (*v23 != -1
                && WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v23, (uint64_t *)this + 164))
              {
                goto LABEL_16;
              }
              ++i;
            }
          }
        }
        (*(void (**)(_QWORD, WebCore::DocumentLoader *, const WebCore::SharedBuffer *))(**(_QWORD **)(v12 + 16)
                                                                                                 + 512))(*(_QWORD *)(v12 + 16), this, a2);
        if (*((_BYTE *)this + 3541))
        {
          v26 = *((_QWORD *)this + 2);
          if (v26 && (v27 = *(_QWORD *)(v26 + 8)) != 0)
            v28 = *(WebCore::FrameLoader **)(v27 + 280);
          else
            v28 = 0;
          if (WebCore::FrameLoader::isReplacing(v28))
            (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 16) + 504))(*(_QWORD *)(v12 + 16));
        }
      }
    }
  }
LABEL_16:
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)this + 24))(this);
  else
    --*((_DWORD *)this + 6);
  if ((v8 & 1) == 0)
  {
    v15 = (unsigned int *)(v5 + 8);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      v24 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v24 = off_1E31FE290;
      *(_QWORD *)(v24 + 8) = v15;
      v31 = (WTF::StringImpl **)v24;
      WTF::ensureOnMainThread();
      v25 = v31;
      v31 = 0;
      if (v25)
        (*((void (**)(WTF::StringImpl **))*v25 + 1))(v25);
    }
  }
}

BOOL WebCore::CachedImage::stillNeedsLoad(WebCore::CachedImage *this)
{
  __int16 v1;
  _BOOL4 v3;

  v1 = *(_WORD *)((char *)this + 557);
  v3 = (v1 & 0xE0) == 0 && (v1 >> 5) - 5 < 0xFFFFFFFE;
  return (*(_WORD *)((_BYTE *)this + 557) & 0x400) == 0 && v3;
}

void WebCore::CachedImage::updateBufferInternal(WebCore::CachedImage *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF::MonotonicTime *Image;
  uint64_t v13;
  void *v14;
  double v15;
  int updated;
  int v17;
  float v18;
  uint64_t v19;
  WebCore::MemoryCache *v20;
  WebCore::MemoryCache *v21;
  WebCore::ResourceLoader *v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  _BYTE v41[24];
  unsigned int **v42;

  v4 = *((_QWORD *)this + 1);
  if (v4)
    goto LABEL_53;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = this;
  v24 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (!v24)
    goto LABEL_53;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, a2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
LABEL_53:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
    v40 = (unsigned int *)v4;
    v6 = *(_QWORD *)(v4 + 8);
  }
  else
  {
    v6 = 0;
    v40 = 0;
  }
  v42 = &v40;
  ++*(_DWORD *)(v6 + 548);
  v7 = *(_QWORD *)(v6 + 488);
  if (v7 && *(_QWORD *)(v7 + 8))
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v42, (uint64_t)v41);
  do
    v8 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v8 + 1, (unsigned int *)a2));
  v9 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = a2;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v27 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(v9 + 8);
        v29 = v28 + 16 * v27;
        do
        {
          v30 = *(unsigned int **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v38 = v28;
              v39 = v29;
              v37 = v9;
              atomic_store(1u, v30);
              v36 = v30[6];
              if ((_DWORD)v36 != -1)
                ((void (*)(_BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v36])(v41, v30 + 2);
              v30[6] = -1;
              WTF::fastFree((WTF *)v30, a2);
              v9 = v37;
              v28 = v38;
              v29 = v39;
            }
          }
          v28 += 16;
        }
        while (v28 != v29);
      }
      v33 = *(WTF **)(v9 + 8);
      if ((WTF *)(v9 + 24) != v33 && v33 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v35 = v9;
        WTF::fastFree(v33, a2);
        v9 = v35;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  WebCore::CachedResource::setEncodedSize(this, *(_DWORD *)(*((_QWORD *)this + 49) + 48));
  Image = (WTF::MonotonicTime *)WebCore::CachedImage::createImage(this);
  if ((*((_BYTE *)this + 720) & 0x20) != 0
    || (v13 = *((_BYTE *)this + 720) & 7,
        WTF::MonotonicTime::now(Image),
        v15 - *((double *)this + 88) >= WebCore::CachedImage::shouldDeferUpdateImageData(void)const::updateImageDataBackoffIntervals[v13]))
  {
    updated = WebCore::CachedImage::updateImageData(this, 0);
    if ((updated - 1) >= 2)
    {
      v17 = updated;
      if (updated
        && (*(float (**)(_QWORD, _QWORD))(**((_QWORD **)this + 86) + 168))(*((_QWORD *)this + 86), 0) > 0.0
        && v18 > 0.0)
      {
        WebCore::CachedImage::notifyObservers(this, 0);
      }
      else
      {
        if ((*(_WORD *)((char *)this + 557) >> 5) - 3 >= 2)
          v19 = 4;
        else
          v19 = *(_WORD *)((char *)this + 557) >> 5;
        WebCore::CachedImage::error(this, (void *)v19);
        if ((*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
        {
          v21 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(v20);
          WebCore::MemoryCache::remove(v21, this);
        }
        v22 = (WebCore::ResourceLoader *)*((_QWORD *)this + 48);
        if (v22)
        {
          v23 = *((_DWORD *)v22 + 4);
          *((_DWORD *)v22 + 4) = v23 + 1;
          if (!v17)
          {
            WebCore::ResourceLoader::cancel(v22);
            v23 = *((_DWORD *)v22 + 4) - 1;
          }
          if (v23)
            *((_DWORD *)v22 + 4) = v23;
          else
            (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v40, v14);
}

double WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchEventSoon(uint64_t a1, _QWORD *a2, WTF::StringImpl **a3)
{
  WTF::MonotonicTime *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::MonotonicTime **v9;
  WTF *v10;
  double v11;
  double result;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v20;
  WTF::MonotonicTime *v21;
  WTF::StringImpl *v22;

  v5 = (WTF::MonotonicTime *)a2[1];
  if (v5)
    goto LABEL_2;
  v5 = (WTF::MonotonicTime *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *((_QWORD *)v5 + 1) = a2;
  v20 = (WTF *)a2[1];
  a2[1] = v5;
  if (!v20)
    goto LABEL_2;
  if (*(_DWORD *)v20 != 1)
  {
    --*(_DWORD *)v20;
LABEL_2:
    ++*(_DWORD *)v5;
    goto LABEL_3;
  }
  WTF::fastFree(v20, a2);
  v5 = (WTF::MonotonicTime *)a2[1];
  if (v5)
    goto LABEL_2;
LABEL_3:
  v21 = v5;
  v6 = *a3;
  if (*a3)
    *(_DWORD *)v6 += 2;
  v22 = v6;
  v7 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 64))
  {
    v13 = (uint64_t *)WTF::Vector<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 56), v7 + 1, (unint64_t)&v21);
    v14 = *(unsigned int *)(a1 + 68);
    v15 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v14);
    v16 = *v13;
    *v13 = 0;
    *v15 = v16;
    v17 = v13[1];
    v13[1] = 0;
    v15[1] = v17;
    v18 = v22;
    *(_DWORD *)(a1 + 68) = v14 + 1;
    v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 56);
    v21 = 0;
    v9 = (WTF::MonotonicTime **)(v8 + 16 * v7);
    *v9 = v5;
    v9[1] = v6;
    *(_DWORD *)(a1 + 68) = v7 + 1;
    v22 = 0;
  }
  v10 = v21;
  v21 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      v10 = (WTF *)WTF::fastFree(v10, a2);
    else
      --*(_DWORD *)v10;
  }
  if ((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *(_QWORD *)(a1 + 24) = 0;
    WTF::MonotonicTime::now(v10);
    WebCore::TimerBase::setNextFireTime(a1, v11 + 0.0);
  }
  return result;
}

double `non-virtual thunk to'WebCore::HTMLLinkElement::linkLoaded(WebCore::HTMLLinkElement *this)
{
  WebCore::HTMLLinkElement *v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v1 = this;
  v2 = *((_BYTE *)this + 163);
  *((_BYTE *)this + 163) = v2 | 4;
  if ((*((_BYTE *)this + 162) & 0x40) == 0 || (v2 & 0x10) != 0)
  {
    {
      this = (WebCore::HTMLLinkElement *)WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
    }
    v3 = (_QWORD *)((char *)v1 - 128);
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
      v5 = WebCore::threadGlobalDataSlow(this);
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *(_QWORD *)(v5 + 40);
    }
    return WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, v3, (WTF::StringImpl **)(v6 + 1104));
  }
  return result;
}

uint64_t WebCore::DisplayList::SetState::SetState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  char v21;
  char v22;
  char v23;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *((unsigned int *)a2 + 20);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *))off_1E3413D38[v5])(&v21);
    *(_DWORD *)(a1 + 80) = v5;
  }
  v6 = a2[11];
  *(_QWORD *)(a1 + 88) = v6;
  if ((v6 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  v7 = *((unsigned int *)a2 + 42);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E3413D38[v7])(&v22);
    *(_DWORD *)(a1 + 168) = v7;
  }
  v8 = a2[22];
  v9 = *((_DWORD *)a2 + 46);
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 176) = v8;
  *(_BYTE *)(a1 + 224) = 0;
  if (*((_BYTE *)a2 + 224))
  {
    v10 = a2[24];
    *(_DWORD *)(a1 + 200) = *((_DWORD *)a2 + 50);
    *(_QWORD *)(a1 + 192) = v10;
    v11 = a2[26];
    *(_QWORD *)(a1 + 208) = v11;
    if ((v11 & 0x8000000000000) != 0)
    {
      v19 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    *(_QWORD *)(a1 + 216) = a2[27];
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*((_BYTE *)a2 + 320))
  {
    *(_DWORD *)(a1 + 312) = -1;
    v12 = *((unsigned int *)a2 + 78);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *))off_1E3413D50[v12])(&v23);
      *(_DWORD *)(a1 + 312) = v12;
    }
    *(_BYTE *)(a1 + 320) = 1;
  }
  v13 = a2[41];
  *(_QWORD *)(a1 + 333) = *(uint64_t *)((char *)a2 + 333);
  *(_QWORD *)(a1 + 328) = v13;
  return a1;
}

double WebCore::ViewportConfiguration::webpageParameters@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 50) = 1;
  *(_DWORD *)(a1 + 51) = 1;
  *(_QWORD *)a1 = 0x408EA00000000000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 48) = 257;
  result = 0.25;
  *(_OWORD *)(a1 + 32) = xmmword_196A22670;
  return result;
}

uint64_t WebCore::SQLiteStatement::bindInt(sqlite3_stmt **this, int a2, int a3)
{
  return sqlite3_bind_int(this[1], a2, a3);
}

unint64_t WebCore::RenderTableCell::layout(WebCore::RenderTableCell *this)
{
  uint64_t LineBaseline;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  WebCore::RenderTableSection *v15;
  uint64_t v16;
  WebCore::RenderTableSection *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  unint64_t result;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  LineBaseline = WebCore::RenderBlockFlow::firstLineBaseline(this);
  v3 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1048))(this);
  v4 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v3, v4))
    v5 = (v3 >> 31) + 0x7FFFFFFF;
  else
    v5 = v3 + v4;
  v6 = WebCore::RenderBox::contentLogicalHeight(this);
  v7 = v5 + v6;
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  if ((LineBaseline & 0xFF00000000) != 0)
    v7 = LineBaseline;
  if (v7 >= 0)
    v8 = v7;
  else
    v8 = v7 + 63;
  WebCore::RenderBlockFlow::layoutBlock((uint64_t)this, (*((_DWORD *)this + 62) & 0x2000000) != 0, 0);
  v9 = *((_QWORD *)this + 11);
  v10 = *(_WORD *)(*(_QWORD *)(v9 + 32) + 120);
  if ((v10 & 0x7F) != 0)
  {
    if ((v10 & 0xF) != 1)
      goto LABEL_34;
  }
  else
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 8) + 68) >> 4;
    v12 = v11 > 9;
    v13 = (1 << v11) & 0x23D;
    if (v12 || v13 == 0)
      goto LABEL_34;
  }
  v15 = (WebCore::RenderTableSection *)WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
  v16 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (*(_BYTE *)(v16 + 46) != 39)
    goto LABEL_48;
  v17 = v15;
  v18 = *(_DWORD *)(v16 + 200) & 0x7FFFFFFF;
  if (*((_BYTE *)v15 + 282))
  {
    v36 = v18;
    WebCore::RenderTableSection::recalcCells(v15);
    v18 = v36;
  }
  if (*((_DWORD *)v17 + 53) <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x194161688);
  }
  if (*(_DWORD *)(*((_QWORD *)v17 + 25) + 40 * v18 + 24))
  {
    v19 = WebCore::RenderTableCell::cellBaselinePosition(this);
    v20 = WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
    v21 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (*(_BYTE *)(v21 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1941615E8);
    }
    v22 = *(_DWORD *)(v21 + 200) & 0x7FFFFFFF;
    if (*(_BYTE *)(v20 + 282))
    {
      v35 = v22;
      v37 = v20;
      WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v20);
      v22 = v35;
      v20 = v37;
    }
    if (*(_DWORD *)(v20 + 212) > v22)
    {
      if (v19 > *(_DWORD *)(*(_QWORD *)(v20 + 200) + 40 * v22 + 24))
      {
        v23 = v8 >> 6;
        v24 = *((_DWORD *)this + 63);
        v25 = WebCore::RenderTableCell::cellBaselinePosition(this);
        v26 = v25 - (v23 << 6);
        if (__OFSUB__(v25, v23 << 6))
          v26 = (v25 >> 31) + 0x7FFFFFFF;
        v27 = v26 & ~(v26 >> 31);
        v28 = __OFSUB__(v24, v27);
        v29 = v24 - v27;
        if (v28)
          v29 = (v24 >> 31) + 0x7FFFFFFF;
        *((_DWORD *)this + 63) = v29 & ~(v29 >> 31);
        v30 = *((_DWORD *)this + 5);
        if ((v30 & 8) == 0)
        {
          *((_DWORD *)this + 5) = v30 | 8;
          if ((v30 & 0x8000) != 0)
          {
            if ((*((_BYTE *)this + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194161618);
            }
            v33 = *((_QWORD *)this + 18);
            if (v33)
            {
              v34 = *(_DWORD *)(v33 + 8) + 1;
              *(_DWORD *)(v33 + 8) = v34;
            }
            else
            {
              v34 = MEMORY[8];
            }
            *(_QWORD *)(v33 + 24) = *(_QWORD *)(v33 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v34)
            {
              __break(0xC471u);
              JUMPOUT(0x194161644);
            }
            *(_DWORD *)(v33 + 8) = v34 - 1;
          }
        }
        WebCore::RenderBlockFlow::layoutBlock((uint64_t)this, (*((_DWORD *)this + 62) & 0x2000000) != 0, 0);
      }
      goto LABEL_34;
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x1941615C8);
  }
LABEL_34:
  *((_DWORD *)this + 62) &= 0xFFFFFFFu;
  v31 = WebCore::RenderBox::contentLogicalHeight(this);
  result = WebCore::RenderBox::cacheIntrinsicContentLogicalHeightForFlexItem((unint64_t)this, v31);
  *((_DWORD *)this + 62) &= ~0x2000000u;
  return result;
}

unint64_t WebCore::RenderBox::contentBoxRect(WebCore::RenderBox *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  double v14;
  int v16;
  double v17;
  int v19;
  __int16 v20;
  int v21;
  int v22;

  if ((*((_BYTE *)this + 22) & 1) == 0)
  {
    v2 = 0;
    v3 = 0;
    goto LABEL_3;
  }
  v14 = (float)(*(int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this) * 64.0;
  if (v14 >= 2147483650.0 || v14 <= -2147483650.0)
  {
    if (v14 > -2147483650.0)
      v22 = (int)v14;
    else
      v22 = 0x80000000;
    if (v14 < 2147483650.0)
      v16 = v22;
    else
      v16 = 0x7FFFFFFF;
  }
  else
  {
    v16 = (int)v14;
  }
  v17 = (float)(*(int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this) * 64.0;
  if (v17 < 2147483650.0 && v17 > -2147483650.0)
    goto LABEL_21;
  if (v17 >= 2147483650.0)
  {
    v19 = 0x7FFFFFFF;
    goto LABEL_22;
  }
  if (v17 <= -2147483650.0)
    v19 = 0x80000000;
  else
LABEL_21:
    v19 = (int)v17;
LABEL_22:
  v20 = WebCore::RenderStyle::scrollbarGutter((WebCore::RenderBox *)((char *)this + 80));
  v21 = WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks(this) | ((unsigned __int16)(v20 & 0x100) >> 8);
  if ((v20 & 0x100) != 0)
    v2 = v19;
  else
    v2 = 0;
  if (v21)
    v3 = v16;
  else
    v3 = 0;
LABEL_3:
  v4 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 920))(this);
  v6 = v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 992))(this);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    v9 = (v8 >> 31) + 0x7FFFFFFF;
  v10 = v9 + v3;
  if (__OFADD__(v9, v3))
    v10 = (v9 >> 31) + 0x7FFFFFFF;
  v11 = v7 + v4;
  if (__OFADD__(v7, v4))
    v11 = (v7 >> 31) + 0x7FFFFFFF;
  v12 = v11 + v2;
  if (__OFADD__(v11, v2))
    v12 = (v11 >> 31) + 0x7FFFFFFF;
  return v10 | (unint64_t)(v12 << 32);
}

uint64_t WebCore::RenderBox::contentBoxLocation(WebCore::RenderBox *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v17;
  int v18;
  int v19;
  int v20;

  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v17 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    v18 = v17 << 6;
    if (v17 > 0x1FFFFFF)
      v18 = 0x7FFFFFFF;
    if (v17 >= -33554432)
      v2 = v18;
    else
      v2 = 0x80000000;
  }
  else
  {
    v2 = 0;
  }
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v19 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    v20 = v19 << 6;
    if (v19 > 0x1FFFFFF)
      v20 = 0x7FFFFFFF;
    if (v19 >= -33554432)
      v3 = v20;
    else
      v3 = 0x80000000;
  }
  else
  {
    v3 = 0;
  }
  v4 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
  v6 = v4 + v5;
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  v7 = __OFADD__(v6, v2);
  v8 = v6 + v2;
  v9 = (v6 >> 31) + 0x7FFFFFFF;
  if (v7)
    v10 = v9;
  else
    v10 = v8;
  v11 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  v7 = __OFADD__(v13, v3);
  v14 = v13 + v3;
  LODWORD(v15) = (v13 >> 31) + 0x7FFFFFFF;
  if (v7)
    v15 = v15;
  else
    v15 = v14;
  return v10 | (v15 << 32);
}

uint64_t WebCore::RenderBoxModelObject::borderTop(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  float v2;
  double v3;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v2 = 0.0;
  if ((*(_BYTE *)(v1 + 172) & 0xE) != 0)
  {
    v6 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v6 + 5) && *(_BYTE *)(v6 + 52) == 4)
    {
      if (*(_BYTE *)(v6 + 54))
        v2 = *(float *)(v6 + 48);
      else
        v2 = (float)*(int *)(v6 + 48);
    }
    else
    {
      v2 = *(float *)(v1 + 168);
    }
  }
  v3 = v2 * 64.0;
  if (v3 < 2147483650.0 && v3 > -2147483650.0)
    return (int)v3;
  if (v3 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v3 > -2147483650.0)
    return (int)v3;
  return 0x80000000;
}

uint64_t WebCore::RenderBoxModelObject::borderLeft(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  float v2;
  double v3;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v2 = 0.0;
  if ((*(_BYTE *)(v1 + 124) & 0xE) != 0)
  {
    v6 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v6 + 5) && *(_BYTE *)(v6 + 76) == 4)
    {
      if (*(_BYTE *)(v6 + 78))
        v2 = *(float *)(v6 + 72);
      else
        v2 = (float)*(int *)(v6 + 72);
    }
    else
    {
      v2 = *(float *)(v1 + 120);
    }
  }
  v3 = v2 * 64.0;
  if (v3 < 2147483650.0 && v3 > -2147483650.0)
    return (int)v3;
  if (v3 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v3 > -2147483650.0)
    return (int)v3;
  return 0x80000000;
}

uint64_t WebCore::LayoutIntegration::BoxGeometryUpdater::updateLayoutBoxDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  WebCore::Layout::LayoutState *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned __int8 v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t result;
  const WebCore::RenderBox *v87;
  _BOOL8 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  int v94;
  unsigned int v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;

  v5 = *(_QWORD *)(a2 + 56);
  if (v5 && (*(_WORD *)(v5 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194162280);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v7 = ((unsigned __int16)*(_DWORD *)(v6 + 124) >> 13) - 1;
  if (v7 <= 4)
    v8 = 0x302030201uLL >> (8 * v7);
  else
    v8 = 0;
  v9 = (unsigned __int16)*(_DWORD *)(v6 + 124) >> 13 == 1 || v7 > 4;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
    v11 = *(WebCore::Layout::LayoutState **)(v10 + 8);
  else
    v11 = 0;
  v12 = *(_DWORD *)(v6 + 120);
  if (*((_DWORD *)v11 + 2) || (v13 = *(_QWORD *)(v5 + 104)) == 0)
    v13 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v11, *(_QWORD *)(a2 + 56));
  v135 = WebCore::LayoutIntegration::horizontalLogicalMargin((_QWORD *)a2, (v12 & 0x4000000) == 0, v9, (a3 & 0xFF00000000) != 0, 1, 1);
  v132 = v8;
  v134 = WebCore::LayoutIntegration::logicalBorder((_QWORD *)a2, (v12 & 0x4000000) == 0, v8, (a3 & 0xFF00000000) != 0, 0, 1, 1);
  v131 = v14;
  v133 = WebCore::LayoutIntegration::logicalPadding((_QWORD *)a2, (v12 & 0x4000000) == 0, v8, (a3 & 0xFF00000000) != 0, 0, 1, 1);
  v16 = v15;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 992))(a2);
  v18 = *(_DWORD *)(a2 + 160);
  v20 = v18 - v19;
  if (__OFSUB__(v18, v19))
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  v21 = v20 - HIDWORD(v17);
  if (__OFSUB__(v20, HIDWORD(v17)))
    v21 = (v20 >> 31) + 0x7FFFFFFF;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1016))(a2);
  v23 = v18 - v22;
  v130 = v16;
  if (__OFSUB__(v18, v22))
    v23 = (v18 >> 31) + 0x7FFFFFFF;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1024))(a2);
  v25 = v23 - v24;
  if (__OFSUB__(v23, v24))
    v25 = (v23 >> 31) + 0x7FFFFFFF;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1352))(a2);
  v27 = v26 << 6;
  if (v26 < -33554432)
    v27 = 0x80000000;
  if (v26 > 0x1FFFFFF)
    v27 = 0x7FFFFFFF;
  v28 = __OFSUB__(v25, v27);
  v29 = v25 - v27;
  if (v28)
    v29 = (v25 >> 31) + 0x7FFFFFFF;
  v30 = v29 & ~(v29 >> 31);
  v31 = v21 - v30;
  if (__OFSUB__(v21, v30))
    v31 = (v21 >> 31) + 0x7FFFFFFF;
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 992))(a2);
  v34 = *(_DWORD *)(a2 + 164);
  v35 = v34 - v32;
  if (__OFSUB__(v34, v32))
    v35 = (v34 >> 31) + 0x7FFFFFFF;
  v36 = v35 - v33;
  if (__OFSUB__(v35, v33))
    v36 = (v35 >> 31) + 0x7FFFFFFF;
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1000))(a2);
  v38 = v34 - v37;
  if (__OFSUB__(v34, v37))
    v38 = (v34 >> 31) + 0x7FFFFFFF;
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1008))(a2);
  v40 = v38 - v39;
  if (__OFSUB__(v38, v39))
    v40 = (v38 >> 31) + 0x7FFFFFFF;
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1360))(a2);
  v42 = v41 << 6;
  if (v41 < -33554432)
    v42 = 0x80000000;
  if (v41 > 0x1FFFFFF)
    v42 = 0x7FFFFFFF;
  v28 = __OFSUB__(v40, v42);
  v43 = v40 - v42;
  if (v28)
    v43 = (v40 >> 31) + 0x7FFFFFFF;
  v44 = v43 & ~(v43 >> 31);
  v28 = __OFSUB__(v36, v44);
  v45 = v36 - v44;
  if (v28)
    v45 = (v36 >> 31) + 0x7FFFFFFF;
  v46 = v31 & ~(v31 >> 31);
  if ((a3 & 0xFF00000000) == 0)
  {
    *(_DWORD *)(v13 + 64) = v45 & ~(v45 >> 31);
    *(_DWORD *)(v13 + 68) = v46;
    v47 = *(_QWORD *)a2;
    if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 124) >> 13) & 6u) - 2 < 4)
    {
      v100 = *(_DWORD *)(a2 + 164);
      v101 = (*(uint64_t (**)(uint64_t))(v47 + 1000))(a2);
      v102 = v100 - v101;
      if (__OFSUB__(v100, v101))
        v102 = (v100 >> 31) + 0x7FFFFFFF;
      v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1008))(a2);
      v104 = v102 - v103;
      if (__OFSUB__(v102, v103))
        v104 = (v102 >> 31) + 0x7FFFFFFF;
      v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1360))(a2);
      v106 = v105 << 6;
      if (v105 < -33554432)
        v106 = 0x80000000;
      if (v105 > 0x1FFFFFF)
        v106 = 0x7FFFFFFF;
      v28 = __OFSUB__(v104, v106);
      v107 = v104 - v106;
      if (v28)
        v107 = (v104 >> 31) + 0x7FFFFFFF;
      v108 = v107 & ~(v107 >> 31);
      v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 928))(a2);
      v28 = __OFSUB__(v108, v109);
      v110 = v108 - v109;
      if (v28)
        v110 = 0x7FFFFFFF;
      v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 936))(a2);
      v112 = v110 - v111;
      if (__OFSUB__(v110, v111))
        v112 = (v110 >> 31) + 0x7FFFFFFF;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 584) & 0x100) != 0)
      {
        v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1360))(a2);
        if (v128 >= -33554432)
        {
          v113 = v128 << 6;
          if (v128 > 0x1FFFFFF)
            v113 = 0x7FFFFFFF;
        }
        else
        {
          v113 = 0x80000000;
        }
      }
      else
      {
        v113 = 0;
      }
      v28 = __OFSUB__(v112, v113);
      v63 = v112 - v113;
      if (v28)
        v63 = (v112 >> 31) + 0x7FFFFFFF;
      v51 = v132;
    }
    else
    {
      v48 = *(_DWORD *)(a2 + 160);
      v49 = (*(uint64_t (**)(uint64_t))(v47 + 1016))(a2);
      v50 = v48 - v49;
      v51 = v132;
      if (__OFSUB__(v48, v49))
        v50 = (v48 >> 31) + 0x7FFFFFFF;
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1024))(a2);
      v53 = v50 - v52;
      if (__OFSUB__(v50, v52))
        v53 = (v50 >> 31) + 0x7FFFFFFF;
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1352))(a2);
      v55 = v54 << 6;
      if (v54 < -33554432)
        v55 = 0x80000000;
      if (v54 > 0x1FFFFFF)
        v55 = 0x7FFFFFFF;
      v28 = __OFSUB__(v53, v55);
      v56 = v53 - v55;
      if (v28)
        v56 = (v53 >> 31) + 0x7FFFFFFF;
      v57 = v56 & ~(v56 >> 31);
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 944))(a2);
      v28 = __OFSUB__(v57, v58);
      v59 = v57 - v58;
      if (v28)
        v59 = 0x7FFFFFFF;
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 952))(a2);
      v61 = v59 - v60;
      if (__OFSUB__(v59, v60))
        v61 = (v59 >> 31) + 0x7FFFFFFF;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 584) & 0x100) != 0)
      {
        v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1352))(a2);
        if (v99 >= -33554432)
        {
          v62 = v99 << 6;
          if (v99 > 0x1FFFFFF)
            v62 = 0x7FFFFFFF;
        }
        else
        {
          v62 = 0x80000000;
        }
        v51 = v132;
      }
      else
      {
        v62 = 0;
      }
      v28 = __OFSUB__(v61, v62);
      v63 = v61 - v62;
      if (v28)
        v63 = (v61 >> 31) + 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 8) = v63 & ~(v63 >> 31);
    v64 = *(_QWORD *)a2;
    if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 124) >> 13) & 6u) - 2 < 4)
    {
      v114 = *(_DWORD *)(a2 + 160);
      v115 = (*(uint64_t (**)(uint64_t))(v64 + 1016))(a2);
      v116 = v114 - v115;
      if (__OFSUB__(v114, v115))
        v116 = (v114 >> 31) + 0x7FFFFFFF;
      v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1024))(a2);
      v118 = v116 - v117;
      if (__OFSUB__(v116, v117))
        v118 = (v116 >> 31) + 0x7FFFFFFF;
      v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1352))(a2);
      v120 = v119 << 6;
      if (v119 < -33554432)
        v120 = 0x80000000;
      if (v119 > 0x1FFFFFF)
        v120 = 0x7FFFFFFF;
      v28 = __OFSUB__(v118, v120);
      v121 = v118 - v120;
      if (v28)
        v121 = (v118 >> 31) + 0x7FFFFFFF;
      v122 = v121 & ~(v121 >> 31);
      v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 944))(a2);
      v28 = __OFSUB__(v122, v123);
      v124 = v122 - v123;
      if (v28)
        v124 = 0x7FFFFFFF;
      v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 952))(a2);
      v126 = v124 - v125;
      if (__OFSUB__(v124, v125))
        v126 = (v124 >> 31) + 0x7FFFFFFF;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 584) & 0x100) != 0)
      {
        v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1352))(a2);
        if (v129 >= -33554432)
        {
          v127 = v129 << 6;
          if (v129 > 0x1FFFFFF)
            v127 = 0x7FFFFFFF;
        }
        else
        {
          v127 = 0x80000000;
        }
      }
      else
      {
        v127 = 0;
      }
      v28 = __OFSUB__(v126, v127);
      v79 = v126 - v127;
      if (v28)
        v79 = (v126 >> 31) + 0x7FFFFFFF;
      v51 = v132;
    }
    else
    {
      v65 = *(_DWORD *)(a2 + 164);
      v66 = (*(uint64_t (**)(uint64_t))(v64 + 1000))(a2);
      v67 = v65 - v66;
      if (__OFSUB__(v65, v66))
        v67 = (v65 >> 31) + 0x7FFFFFFF;
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1008))(a2);
      v69 = v67 - v68;
      if (__OFSUB__(v67, v68))
        v69 = (v67 >> 31) + 0x7FFFFFFF;
      v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1360))(a2);
      v71 = v70 << 6;
      if (v70 < -33554432)
        v71 = 0x80000000;
      if (v70 > 0x1FFFFFF)
        v71 = 0x7FFFFFFF;
      v28 = __OFSUB__(v69, v71);
      v72 = v69 - v71;
      if (v28)
        v72 = (v69 >> 31) + 0x7FFFFFFF;
      v73 = v72 & ~(v72 >> 31);
      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 928))(a2);
      v28 = __OFSUB__(v73, v74);
      v75 = v73 - v74;
      if (v28)
        v75 = 0x7FFFFFFF;
      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 936))(a2);
      v77 = v75 - v76;
      if (__OFSUB__(v75, v76))
        v77 = (v75 >> 31) + 0x7FFFFFFF;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 584) & 0x100) != 0)
      {
        v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1360))(a2);
        if (v98 >= -33554432)
        {
          v78 = v98 << 6;
          if (v98 > 0x1FFFFFF)
            v78 = 0x7FFFFFFF;
        }
        else
        {
          v78 = 0x80000000;
        }
        v51 = v132;
      }
      else
      {
        v78 = 0;
      }
      v28 = __OFSUB__(v77, v78);
      v79 = v77 - v78;
      if (v28)
        v79 = (v77 >> 31) + 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 12) = v79 & ~(v79 >> 31);
    if (v51 >= 2u)
    {
      v80 = 137;
      v81 = 138;
    }
    else
    {
      v80 = 136;
      v81 = 135;
    }
    v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8 * v81))(a2);
    v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8 * v80))(a2);
    *(_QWORD *)(v13 + 16) = v135;
    *(_QWORD *)(v13 + 24) = v82 | (unint64_t)(v83 << 32);
    *(_QWORD *)(v13 + 32) = v134;
    *(_QWORD *)(v13 + 40) = v131;
    *(_QWORD *)(v13 + 48) = v133;
    *(_QWORD *)(v13 + 56) = v130;
    v84 = *(unsigned __int8 *)(a2 + 46);
    if (v84 == 20)
    {
      v85 = *(_QWORD *)(a2 + 216);
      if (!v85 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 64))(v85), (result & 1) != 0))
      {
LABEL_95:
        v88 = v7 <= 4 && v51 != 1;
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _BOOL8, _QWORD))(*(_QWORD *)a2 + 1160))(a2, 0, 0, v88, 0);
        if (!*(_BYTE *)(v5 + 148))
          *(_BYTE *)(v5 + 148) = 1;
        *(_DWORD *)(v5 + 144) = result;
      }
    }
    else
    {
      if ((*(_BYTE *)(a2 + 52) & 7) == 3 && (*(_BYTE *)(a2 + 96) & 0x1F) == 0)
        goto LABEL_95;
      if (v84 <= 0x3F && ((1 << v84) & 0x8000100A00041000) != 0)
        goto LABEL_95;
      if (*(char *)(a2 + 45) < 0)
        goto LABEL_95;
      if (!*(_BYTE *)(a2 + 46))
        goto LABEL_95;
      if (v84 == 5)
        goto LABEL_95;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
      if ((result & 1) != 0 || *(_BYTE *)(a2 + 46) == 2)
        goto LABEL_95;
      if ((*(_BYTE *)(a2 + 52) & 7) == 1)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 32) + 148) & 0x1FC000) != 0)
        {
          v96 = WebCore::RenderObject::theme((WebCore::RenderObject *)a2);
          if (!WebCore::RenderTheme::isControlContainer((uint64_t)v96, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 32) + 148) >> 14) & 0x7F))goto LABEL_95;
        }
        if ((*(_BYTE *)(a2 + 22) & 4) == 0)
          goto LABEL_95;
        if (WebCore::RenderBlockFlow::hasLines((WebCore::RenderBlockFlow *)a2))
          goto LABEL_95;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1712))(a2);
        if ((_DWORD)result)
          goto LABEL_95;
      }
    }
    if ((*(_WORD *)(a2 + 69) & 0x800) != 0)
    {
      result = WebCore::ShapeOutsideInfo::isEnabledFor((WebCore::ShapeOutsideInfo *)a2, v87);
      if ((_DWORD)result)
      {
        {
          WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
          *(_QWORD *)&dword_1EE2F9340 = 0;
        }
        result = WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::get(&WebCore::shapeOutsideInfoMap(void)::staticInfoMap, a2);
        if (result)
        {
          v97 = WebCore::ShapeOutsideInfo::computedShape((WebCore::ShapeOutsideInfo *)result);
          ++*(_DWORD *)(v97 + 8);
          v136 = v97;
          WebCore::Layout::Box::setShape((WebCore::Layout::Box *)v5, &v136);
          result = v136;
          v136 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 8);
          }
        }
      }
    }
    return result;
  }
  *(_DWORD *)(v13 + 68) = v46;
  v89 = 416;
  if (!(_DWORD)a3)
    v89 = 408;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + v89))(a2);
  v90 = v134 + HIDWORD(v134);
  if (__OFADD__((_DWORD)v134, HIDWORD(v134)))
    v90 = (v134 >> 31) + 0x7FFFFFFF;
  v28 = __OFADD__(v90, (_DWORD)v133);
  v91 = v90 + v133;
  v92 = (v90 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v92 = v91;
  v28 = __OFADD__(v92, HIDWORD(v133));
  v93 = v92 + HIDWORD(v133);
  v94 = (v92 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v94 = v93;
  v28 = __OFSUB__((_DWORD)result, v94);
  v95 = result - v94;
  if (v28)
    v95 = (result >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(v13 + 8) = v95;
  *(_QWORD *)(v13 + 16) = v135;
  *(_QWORD *)(v13 + 32) = v134;
  *(_QWORD *)(v13 + 48) = v133;
  return result;
}

_QWORD *WebCore::RenderBox::updateLogicalHeight(WebCore::RenderBox *this)
{
  WebCore::Element *v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int i;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  char *v45;
  _QWORD *result;
  char v47;
  int v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  int v55;
  void *v56;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned __int8 v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    v2 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v2 && (*((_WORD *)v2 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194162BE8);
    }
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v4 = (*(_DWORD *)(v3 + 636) >> 18) & 3;
  if (v4)
  {
    if ((*((_BYTE *)this + 96) & 0x1F) == 0xD || (*((_BYTE *)this + 96) & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v4 == 2)
        goto LABEL_108;
      if (!v2)
        goto LABEL_5;
      if (!WebCore::Element::isRelevantToUser(v2))
      {
LABEL_108:
        if (*((_BYTE *)this + 46) != 12)
          WebCore::RenderBox::overrideLogicalHeightForSizeContainment(this);
        goto LABEL_9;
      }
      v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
    }
  }
LABEL_5:
  v5 = *(_BYTE *)(v3 + 642) & 3;
  if (v5 == 1)
    goto LABEL_104;
  v6 = *(_BYTE *)(v3 + 462);
  if (v5 == 2)
    v6 |= 0x19u;
  if ((v6 & 4) != 0)
  {
LABEL_104:
    if (((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
      && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19)
    {
      v59 = *((unsigned __int8 *)this + 46);
      if ((v59 - 36) <= 4)
      {
        if (v59 != 36)
          goto LABEL_9;
      }
      else if (v59 == 35 || v59 == 63)
      {
        goto LABEL_9;
      }
      goto LABEL_108;
    }
  }
LABEL_9:
  v7 = *(_QWORD *)this;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v64 = *((_DWORD *)this + 40);
    v65 = (*(uint64_t (**)(WebCore::RenderBox *))(v7 + 1016))(this);
    if (__OFSUB__(v64, v65))
      v66 = (v64 >> 31) + 0x7FFFFFFF;
    else
      v66 = v64 - v65;
    v67 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v66, v67))
      v68 = (v66 >> 31) + 0x7FFFFFFF;
    else
      v68 = v66 - v67;
    v69 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    v70 = v69 << 6;
    if (v69 < -33554432)
      v70 = 0x80000000;
    if (v69 > 0x1FFFFFF)
      v70 = 0x7FFFFFFF;
    v15 = __OFSUB__(v68, v70);
    v71 = v68 - v70;
    if (v15)
      v71 = (v68 >> 31) + 0x7FFFFFFF;
    v72 = v71 & ~(v71 >> 31);
    v73 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
    v15 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if (v15)
      v74 = 0x7FFFFFFF;
    v75 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 952))(this);
    if (__OFSUB__(v74, v75))
      v21 = (v74 >> 31) + 0x7FFFFFFF;
    else
      v21 = v74 - v75;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) == 0)
      goto LABEL_29;
    v60 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  }
  else
  {
    v8 = *((_DWORD *)this + 41);
    v9 = (*(uint64_t (**)(WebCore::RenderBox *))(v7 + 1000))(this);
    if (__OFSUB__(v8, v9))
      v10 = (v8 >> 31) + 0x7FFFFFFF;
    else
      v10 = v8 - v9;
    v11 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
    if (__OFSUB__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    else
      v12 = v10 - v11;
    v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    v14 = v13 << 6;
    if (v13 < -33554432)
      v14 = 0x80000000;
    if (v13 > 0x1FFFFFF)
      v14 = 0x7FFFFFFF;
    v15 = __OFSUB__(v12, v14);
    v16 = v12 - v14;
    if (v15)
      v16 = (v12 >> 31) + 0x7FFFFFFF;
    v17 = v16 & ~(v16 >> 31);
    v18 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
    v15 = __OFSUB__(v17, v18);
    v19 = v17 - v18;
    if (v15)
      v19 = 0x7FFFFFFF;
    v20 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 936))(this);
    if (__OFSUB__(v19, v20))
      v21 = (v19 >> 31) + 0x7FFFFFFF;
    else
      v21 = v19 - v20;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) == 0)
    {
LABEL_29:
      v22 = 0;
      goto LABEL_30;
    }
    v60 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  }
  if (v60 >= -33554432)
  {
    v22 = v60 << 6;
    if (v60 > 0x1FFFFFF)
      v22 = 0x7FFFFFFF;
  }
  else
  {
    v22 = 0x80000000;
  }
LABEL_30:
  v15 = __OFSUB__(v21, v22);
  v23 = v21 - v22;
  if (v15)
    v24 = (v21 >> 31) + 0x7FFFFFFF;
  else
    v24 = v23;
  v25 = *((_DWORD *)this + 5);
  if ((v25 & 0x800) != 0)
    goto LABEL_59;
  if ((v25 & 0x1800000) == 0x1000000)
    goto LABEL_59;
  v26 = *((_QWORD *)this + 4);
  if (!v26)
    goto LABEL_59;
  v27 = *(_QWORD *)(v26 + 8);
  if (!v27 || (*(char *)(v27 + 45) & 0x80000000) == 0)
    goto LABEL_59;
  ++*(_DWORD *)(v27 + 16);
  v28 = (uint64_t *)WebCore::gOverridingLogicalHeightMap;
  if (!WebCore::gOverridingLogicalHeightMap)
    goto LABEL_77;
  ++*(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8);
  v29 = *((_QWORD *)this + 1);
  if (v29 && *(_QWORD *)(v29 + 8))
  {
    v30 = *v28;
    if (*v28)
    {
      v31 = *(_DWORD *)(v30 - 8);
      v32 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
      v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
      v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
      v35 = v31 & ((v34 >> 31) ^ v34);
      for (i = 1; ; ++i)
      {
        v37 = *(_QWORD *)(v30 + 16 * v35);
        if (!v37)
        {
          v39 = *(unsigned int *)(v30 - 4);
          v40 = v30 + 16 * v39;
          v41 = v40;
          goto LABEL_50;
        }
        if (v37 != -1 && v37 == v29)
          break;
        v35 = (v35 + i) & v31;
      }
      v40 = v30 + 16 * v35;
      v39 = *(unsigned int *)(v30 - 4);
      v41 = v30 + 16 * v39;
LABEL_50:
      v81 = v40;
      v42 = v30 + 16 * v39;
    }
    else
    {
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v81 = 0;
      v82 = 0;
    }
LABEL_51:
    while (v40 != v42 && !*(_QWORD *)(*(_QWORD *)v40 + 8))
    {
      v51 = v40 + 16;
      v81 = v51;
      v40 = v41;
      if (v51 != v41)
      {
        v40 = v51;
        while ((unint64_t)(*(_QWORD *)v40 + 1) <= 1)
        {
          v40 += 16;
          v81 = v40;
          if (v40 == v41)
          {
            v40 = v41;
            goto LABEL_51;
          }
        }
      }
    }
  }
  else
  {
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v80, v28);
    v30 = *(_QWORD *)WebCore::gOverridingLogicalHeightMap;
  }
  if (v30)
    v30 += 16 * *(unsigned int *)(v30 - 4);
  if (v81 == v30)
  {
LABEL_77:
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 > 1
      || *((unsigned __int8 *)this + 46) - 36 < 5
      || WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets(this, (const WebCore::RenderBox *)v28))
    {
LABEL_56:
      WebCore::RenderFlexibleBox::setCachedChildIntrinsicContentLogicalHeight((WTF *)v27, (uint64_t)this, v24 & ~(v24 >> 31));
      goto LABEL_57;
    }
    v52 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v53 = (unsigned int *)(v52 + 4);
    v54 = (unsigned int *)(v52 + 12);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v53 = v54;
    v79 = 0;
    v77 = *((_BYTE *)v53 + 4);
    v55 = v77;
    v78 = *((_BYTE *)v53 + 5);
    if (v77 - 2 >= 9)
    {
      if (!v77)
        goto LABEL_57;
      v56 = 0;
      if (v77 == 11)
      {
        v56 = (void *)*v53;
        v76 = *v53;
        WebCore::Length::ref(&v76);
LABEL_83:
        if ((v55 & 0xFFFFFFF7) != 3 || (*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
        {
          if (v55 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v56);
          }
        }
        else
        {
          LODWORD(v80) = 100;
          WORD2(v80) = 3;
          BYTE6(v80) = 0;
          v58 = WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)&v80, 1);
          if (v55 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v56);
          }
          if (!HIDWORD(v58))
            goto LABEL_57;
        }
        goto LABEL_56;
      }
    }
    else
    {
      v56 = (void *)*v53;
    }
    if (v77 - 7 < 4)
      goto LABEL_57;
    goto LABEL_83;
  }
LABEL_57:
  v43 = *(_DWORD *)(v27 + 16);
  if (!v43)
  {
    __break(0xC471u);
    JUMPOUT(0x194162C2CLL);
  }
  *(_DWORD *)(v27 + 16) = v43 - 1;
LABEL_59:
  v44 = (char *)this + 160;
  v45 = (char *)this + 152;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
  {
    v44 = (char *)this + 164;
    v45 = (char *)this + 156;
  }
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, WebCore::RenderBox *, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                  + 1312))(&v80, this, *(unsigned int *)v44, *(unsigned int *)v45);
  v47 = *((_DWORD *)this + 31) >> 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    *((_DWORD *)this + 40) = v80;
    *((_DWORD *)this + 38) = HIDWORD(v80);
  }
  else
  {
    *((_DWORD *)this + 41) = v80;
    *((_DWORD *)this + 39) = HIDWORD(v80);
  }
  v48 = (v47 & 7) - 1;
  v62 = 3;
  switch(v47 & 7)
  {
    case 1:
      v49 = (char *)this + 168;
      *((_DWORD *)this + 44) = v81;
      v50 = HIDWORD(v81);
LABEL_156:
      v61 = 0;
      goto LABEL_67;
    case 2:
    case 4:
      goto LABEL_65;
    case 3:
    case 5:
      v62 = 1;
      goto LABEL_65;
    default:
      v62 = 0;
LABEL_65:
      v49 = (char *)this + 168;
      *((_DWORD *)this + v62 + 42) = v81;
      v50 = HIDWORD(v81);
      v61 = 3;
      switch(v48)
      {
        case 0:
          goto LABEL_156;
        case 1:
        case 3:
          v61 = 1;
          break;
        case 2:
        case 4:
          break;
        default:
          v61 = 2;
          break;
      }
LABEL_67:
      *(_DWORD *)&v49[4 * v61] = v50;
      return result;
  }
}

uint64_t WebCore::RenderBox::contentHeight(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t (*v20)(WebCore::RenderBox *);
  WebCore::RenderBox *v21;
  unsigned int v22;
  int v23;
  int v24;

  v2 = *((_DWORD *)this + 41);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  v11 = v10 & ~(v10 >> 31);
  v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
  if (__OFSUB__(v11, v12))
    v13 = 0x7FFFFFFF;
  else
    v13 = v11 - v12;
  v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 936))(this);
  v15 = v13 - v14;
  if (__OFSUB__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v20 = *(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360);
    v21 = this;
    v22 = v15;
    v23 = v20(v21);
    v15 = v22;
    v24 = v23 << 6;
    if (v23 > 0x1FFFFFF)
      v24 = 0x7FFFFFFF;
    if (v23 >= -33554432)
      v16 = v24;
    else
      v16 = 0x80000000;
  }
  else
  {
    v16 = 0;
  }
  v9 = __OFSUB__(v15, v16);
  v17 = v15 - v16;
  v18 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v18 = v17;
  return v18 & ~(v18 >> 31);
}

uint64_t WebCore::RenderBoxModelObject::paddingTop(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v8;
  float v9;
  int v11;
  unsigned __int8 *v12;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v2 = v1[76];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v11 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v1 = v12;
    v2 = v12[76];
    v3 = (float)v11 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v8 = *((float *)v1 + 18);
      if (!v1[78])
        v8 = (float)SLODWORD(v8);
      v9 = (float)(v3 * v8) / 100.0;
    }
    else
    {
      if (v2 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 72), v3);
    }
    v5 = v9 * 64.0;
    if (v5 < 2147483650.0 && v5 > -2147483650.0)
      return (int)v5;
    if (v5 < 2147483650.0)
    {
LABEL_28:
      if (v5 <= -2147483650.0)
        return 0x80000000;
      return (int)v5;
    }
    return 0x7FFFFFFFLL;
  }
  v4 = *((float *)v1 + 18);
  if (!v1[78])
    v4 = (float)SLODWORD(v4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 < 2147483650.0)
      goto LABEL_28;
    return 0x7FFFFFFFLL;
  }
  return (int)v5;
}

uint64_t WebCore::RenderBoxModelObject::paddingBottom(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v8;
  float v9;
  int v11;
  unsigned __int8 *v12;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v2 = v1[92];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v11 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v1 = v12;
    v2 = v12[92];
    v3 = (float)v11 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v8 = *((float *)v1 + 22);
      if (!v1[94])
        v8 = (float)SLODWORD(v8);
      v9 = (float)(v3 * v8) / 100.0;
    }
    else
    {
      if (v2 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 88), v3);
    }
    v5 = v9 * 64.0;
    if (v5 < 2147483650.0 && v5 > -2147483650.0)
      return (int)v5;
    if (v5 < 2147483650.0)
    {
LABEL_28:
      if (v5 <= -2147483650.0)
        return 0x80000000;
      return (int)v5;
    }
    return 0x7FFFFFFFLL;
  }
  v4 = *((float *)v1 + 22);
  if (!v1[94])
    v4 = (float)SLODWORD(v4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 < 2147483650.0)
      goto LABEL_28;
    return 0x7FFFFFFFLL;
  }
  return (int)v5;
}

unint64_t WebCore::RenderBox::cacheIntrinsicContentLogicalHeightForFlexItem(unint64_t result, int a2)
{
  int v2;
  WebCore::RenderBox *v3;
  uint64_t v4;
  uint64_t v5;
  const WebCore::RenderBox *v7;
  int v8;

  v2 = *(_DWORD *)(result + 20);
  if ((v2 & 0x800) == 0 && (v2 & 0x1800000) != 0x1000000)
  {
    v3 = (WebCore::RenderBox *)result;
    v4 = *(_QWORD *)(result + 32);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(char *)(v5 + 45) < 0)
        {
          ++*(_DWORD *)(v5 + 16);
          result = WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)result);
          if (!HIDWORD(result))
          {
            result = WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio(v3, v7);
            if ((result & 1) == 0)
              result = (unint64_t)WebCore::RenderFlexibleBox::setCachedChildIntrinsicContentLogicalHeight((WTF *)v5, (uint64_t)v3, a2);
          }
          v8 = *(_DWORD *)(v5 + 16);
          if (v8)
          {
            *(_DWORD *)(v5 + 16) = v8 - 1;
          }
          else
          {
            result = 286;
            __break(0xC471u);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTableCell::borderTop(WebCore::RenderTableCell *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float v10;
  double v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  WebCore::RenderBlock *v18;
  unsigned int v19;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_47;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_47;
  if (*(_BYTE *)(v3 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x194163560);
  }
  v4 = *(_QWORD *)(v3 + 32);
  if (!v4)
    goto LABEL_47;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_47;
  if (*(_BYTE *)(v5 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194163580);
  }
  v6 = *(_QWORD *)(v5 + 32);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + 46);
    if (v8 != 35 && v8 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1941635BCLL);
    }
    if ((*(_BYTE *)(v7 + 124) & 4) != 0)
      return WebCore::RenderTableCell::borderHalfTop(this, 0);
    if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
      && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    {
      v17 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
      if (v17)
      {
        if (*(_DWORD *)(v17 + 8))
        {
          v18 = this;
          v19 = WebCore::RenderBoxModelObject::borderTop(this);
          v20 = WebCore::RenderBlock::intrinsicBorderForFieldset(v18);
          v21 = __OFADD__(v19, v20);
          result = v19 + v20;
          if (v21)
            return (v19 >> 31) + 0x7FFFFFFF;
          return result;
        }
      }
    }
  }
  else
  {
LABEL_47:
    if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
      && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    {
      v14 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
      if (v14)
      {
        if (*(_DWORD *)(v14 + 8))
        {
          v15 = WebCore::RenderBoxModelObject::borderTop(this);
          v16 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
          if (__OFADD__(v15, v16))
            return (v15 >> 31) + 0x7FFFFFFF;
          else
            return v15 + v16;
        }
      }
    }
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v10 = 0.0;
  if ((*(_BYTE *)(v9 + 172) & 0xE) != 0)
  {
    v13 = *(_QWORD *)(v9 + 200);
    if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 52) == 4)
    {
      if (*(_BYTE *)(v13 + 54))
        v10 = *(float *)(v13 + 48);
      else
        v10 = (float)*(int *)(v13 + 48);
    }
    else
    {
      v10 = *(float *)(v9 + 168);
    }
  }
  v11 = v10 * 64.0;
  if (v11 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v11 <= -2147483650.0)
    return 0x80000000;
  return (int)v11;
}

uint64_t WebCore::RenderTableCell::borderBottom(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  double v10;
  uint64_t result;
  uint64_t v12;
  WebCore::RenderTableCell *v13;
  int v14;
  unsigned int v15;
  int v16;
  WebCore::RenderTableCell *v17;
  int v18;
  WebCore::RenderBlock *v19;
  unsigned int v20;
  int v21;
  BOOL v22;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_43;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_43;
  if (*(_BYTE *)(v2 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x19416378CLL);
  }
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    goto LABEL_43;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_43;
  if (*(_BYTE *)(v4 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1941637ACLL);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = *(unsigned __int8 *)(v6 + 46);
    if (v7 != 35 && v7 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1941637E4);
    }
    if ((*(_BYTE *)(v6 + 124) & 4) != 0)
      return WebCore::RenderTableCell::borderHalfBottom(this, 0);
    if ((*((_DWORD *)this + 31) & 0xE000) == 0x2000)
    {
      v17 = this;
      v18 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
      this = v17;
      if (v18)
      {
        v19 = v17;
        v20 = WebCore::RenderBoxModelObject::borderBottom(v17);
        v21 = WebCore::RenderBlock::intrinsicBorderForFieldset(v19);
        v22 = __OFADD__(v20, v21);
        result = v20 + v21;
        if (v22)
          return (v20 >> 31) + 0x7FFFFFFF;
        return result;
      }
    }
  }
  else
  {
LABEL_43:
    if ((*((_DWORD *)this + 31) & 0xE000) == 0x2000)
    {
      v13 = this;
      v14 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
      this = v13;
      if (v14)
      {
        v15 = WebCore::RenderBoxModelObject::borderBottom(v13);
        v16 = WebCore::RenderBlock::intrinsicBorderForFieldset(v13);
        if (__OFADD__(v15, v16))
          return (v15 >> 31) + 0x7FFFFFFF;
        else
          return v15 + v16;
      }
    }
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v9 = 0.0;
  if ((*(_BYTE *)(v8 + 196) & 0xE) != 0)
  {
    v12 = *(_QWORD *)(v8 + 200);
    if (*(_BYTE *)(v12 + 5) && *(_BYTE *)(v12 + 68) == 4)
    {
      if (*(_BYTE *)(v12 + 70))
        v9 = *(float *)(v12 + 64);
      else
        v9 = (float)*(int *)(v12 + 64);
    }
    else
    {
      v9 = *(float *)(v8 + 192);
    }
  }
  v10 = v9 * 64.0;
  if (v10 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v10 <= -2147483650.0)
    return 0x80000000;
  return (int)v10;
}

uint64_t WebCore::RenderBox::marginLeft(WebCore::RenderBox *this)
{
  return *((unsigned int *)this + 45);
}

uint64_t WebCore::RenderBox::marginRight(WebCore::RenderBox *this)
{
  return *((unsigned int *)this + 43);
}

uint64_t WebCore::RenderBox::marginTop(WebCore::RenderBox *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t WebCore::RenderBox::marginBottom(WebCore::RenderBox *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t WebCore::RenderTable::borderAfter(WebCore::RenderTable *this, void *a2)
{
  int v3;
  uint64_t v4;
  float v5;
  double v6;
  uint64_t v8;
  WebCore::RenderStyle *v9;

  v3 = *((_DWORD *)this + 31);
  if ((v3 & 4) != 0)
  {
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, a2);
    return WebCore::RenderTable::outerBorderAfter(this, a2);
  }
  else
  {
    v9 = (WebCore::RenderTable *)((char *)this + 80);
    switch((unsigned __int16)v3 >> 13)
    {
      case 1:
        v5 = WebCore::RenderStyle::borderTopWidth(v9);
        break;
      case 2:
      case 4:
        v5 = WebCore::RenderStyle::borderRightWidth(v9);
        break;
      case 3:
      case 5:
        v5 = WebCore::RenderStyle::borderLeftWidth(v9);
        break;
      default:
        v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v5 = 0.0;
        if ((*(_BYTE *)(v4 + 196) & 0xE) != 0)
        {
          v8 = *(_QWORD *)(v4 + 200);
          if (*(_BYTE *)(v8 + 5) && *(_BYTE *)(v8 + 68) == 4)
          {
            if (*(_BYTE *)(v8 + 70))
              v5 = *(float *)(v8 + 64);
            else
              v5 = (float)*(int *)(v8 + 64);
          }
          else
          {
            v5 = *(float *)(v4 + 192);
          }
        }
        break;
    }
    v6 = v5 * 64.0;
    if (v6 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v6 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v6;
    }
  }
}

uint64_t WebCore::RenderTableCell::borderLeft(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  float v10;
  double v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  WebCore::RenderTableCell *v16;
  int v17;
  unsigned int v18;
  int v19;
  WebCore::RenderTableCell *v20;
  int v21;
  WebCore::RenderBlock *v22;
  unsigned int v23;
  int v24;
  BOOL v25;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_20;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_20;
  if (*(_BYTE *)(v2 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x194163AF8);
  }
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    goto LABEL_20;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_20;
  if (*(_BYTE *)(v4 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194163B18);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = *(unsigned __int8 *)(v6 + 46);
    if (v7 != 35 && v7 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x194163B50);
    }
    if ((*(_BYTE *)(v6 + 124) & 4) != 0)
      return WebCore::RenderTableCell::borderHalfLeft(this, 0);
    v8 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v8 == 4 || v8 == 2)
    {
      v20 = this;
      v21 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
      this = v20;
      if (v21)
      {
        v22 = v20;
        v23 = WebCore::RenderBoxModelObject::borderLeft(v20);
        v24 = WebCore::RenderBlock::intrinsicBorderForFieldset(v22);
        v25 = __OFADD__(v23, v24);
        result = v23 + v24;
        if (v25)
          return (v23 >> 31) + 0x7FFFFFFF;
        return result;
      }
    }
  }
  else
  {
LABEL_20:
    v14 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v14 == 4 || v14 == 2)
    {
      v16 = this;
      v17 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
      this = v16;
      if (v17)
      {
        v18 = WebCore::RenderBoxModelObject::borderLeft(v16);
        v19 = WebCore::RenderBlock::intrinsicBorderForFieldset(v16);
        if (__OFADD__(v18, v19))
          return (v18 >> 31) + 0x7FFFFFFF;
        else
          return v18 + v19;
      }
    }
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v10 = 0.0;
  if ((*(_BYTE *)(v9 + 124) & 0xE) != 0)
  {
    v13 = *(_QWORD *)(v9 + 200);
    if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 76) == 4)
    {
      if (*(_BYTE *)(v13 + 78))
        v10 = *(float *)(v13 + 72);
      else
        v10 = (float)*(int *)(v13 + 72);
    }
    else
    {
      v10 = *(float *)(v9 + 120);
    }
  }
  v11 = v10 * 64.0;
  if (v11 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v11 <= -2147483650.0)
    return 0x80000000;
  return (int)v11;
}

uint64_t WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(WebCore::Layout::LayoutState *this, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  bmalloc::api *v5;
  char *v6;
  bmalloc::api *v7;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  const WebCore::Layout::Box *v17;
  uint64_t *v18;
  int v19;
  void *v20;
  uint64_t v21;
  bmalloc::api *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;

  if (*((_DWORD *)this + 2))
  {
    v10 = (uint64_t *)((char *)this + 40);
    v9 = *((_QWORD *)this + 5);
    if (v9
      || (WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash((uint64_t *)this + 5, 8u, 0), (v9 = *v10) != 0))
    {
      v11 = *(_DWORD *)(v9 - 8);
    }
    else
    {
      v11 = 0;
    }
    v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = (uint64_t *)(v9 + 16 * v15);
    v17 = (const WebCore::Layout::Box *)*v16;
    if (*v16)
    {
      v18 = 0;
      v19 = 1;
      while (v17 != (const WebCore::Layout::Box *)a2)
      {
        if (v17 == (const WebCore::Layout::Box *)-1)
          v18 = v16;
        v15 = (v15 + v19) & v11;
        v16 = (uint64_t *)(v9 + 16 * v15);
        v17 = (const WebCore::Layout::Box *)*v16;
        ++v19;
        if (!*v16)
        {
          if (v18)
          {
            *v18 = 0;
            v18[1] = 0;
            --*(_DWORD *)(*v10 - 16);
            v16 = v18;
          }
          goto LABEL_15;
        }
      }
      goto LABEL_26;
    }
LABEL_15:
    *v16 = a2;
    v21 = bmalloc::api::isoAllocate();
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_QWORD *)(v21 + 64) = 0;
    v22 = (bmalloc::api *)v16[1];
    v16[1] = v21;
    if (v22)
      bmalloc::api::isoDeallocate(v22, v20);
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v10;
    if (*v10)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_26;
    }
    else
    {
      if (3 * v28 > 4 * v27)
      {
LABEL_26:
        v6 = (char *)(v16 + 1);
        return *(_QWORD *)v6;
      }
      if (!(_DWORD)v28)
      {
        v29 = 8;
        goto LABEL_25;
      }
    }
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_25:
    v16 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v10, v29, v16);
    goto LABEL_26;
  }
  v4 = bmalloc::api::isoAllocate();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_QWORD *)(v4 + 64) = 0;
  v7 = *(bmalloc::api **)(a2 + 104);
  v6 = (char *)(a2 + 104);
  v5 = v7;
  *(_QWORD *)v6 = v4;
  if (v7)
    bmalloc::api::isoDeallocate(v5, v3);
  return *(_QWORD *)v6;
}

uint64_t WebCore::RenderTableCell::borderRight(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  float v10;
  double v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  WebCore::RenderTableCell *v16;
  int v17;
  unsigned int v18;
  int v19;
  WebCore::RenderTableCell *v20;
  int v21;
  WebCore::RenderBlock *v22;
  unsigned int v23;
  int v24;
  BOOL v25;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_20;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_20;
  if (*(_BYTE *)(v2 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x194163F0CLL);
  }
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    goto LABEL_20;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_20;
  if (*(_BYTE *)(v4 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194163F2CLL);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = *(unsigned __int8 *)(v6 + 46);
    if (v7 != 35 && v7 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x194163F64);
    }
    if ((*(_BYTE *)(v6 + 124) & 4) != 0)
      return WebCore::RenderTableCell::borderHalfRight(this, 0);
    v8 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v8 == 5 || v8 == 3)
    {
      v20 = this;
      v21 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
      this = v20;
      if (v21)
      {
        v22 = v20;
        v23 = WebCore::RenderBoxModelObject::borderRight(v20);
        v24 = WebCore::RenderBlock::intrinsicBorderForFieldset(v22);
        v25 = __OFADD__(v23, v24);
        result = v23 + v24;
        if (v25)
          return (v23 >> 31) + 0x7FFFFFFF;
        return result;
      }
    }
  }
  else
  {
LABEL_20:
    v14 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v14 == 5 || v14 == 3)
    {
      v16 = this;
      v17 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
      this = v16;
      if (v17)
      {
        v18 = WebCore::RenderBoxModelObject::borderRight(v16);
        v19 = WebCore::RenderBlock::intrinsicBorderForFieldset(v16);
        if (__OFADD__(v18, v19))
          return (v18 >> 31) + 0x7FFFFFFF;
        else
          return v18 + v19;
      }
    }
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v10 = 0.0;
  if ((*(_BYTE *)(v9 + 148) & 0xE) != 0)
  {
    v13 = *(_QWORD *)(v9 + 200);
    if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 60) == 4)
    {
      if (*(_BYTE *)(v13 + 62))
        v10 = *(float *)(v13 + 56);
      else
        v10 = (float)*(int *)(v13 + 56);
    }
    else
    {
      v10 = *(float *)(v9 + 144);
    }
  }
  v11 = v10 * 64.0;
  if (v11 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v11 <= -2147483650.0)
    return 0x80000000;
  return (int)v11;
}

uint64_t WebCore::RenderTable::borderTop(WebCore::RenderTable *this, void *a2)
{
  int v3;
  int v4;

  v3 = *((_DWORD *)this + 31);
  v4 = (unsigned __int16)v3 >> 13;
  if ((v4 - 2) < 4)
  {
    if ((*((_BYTE *)this + 123) & 4) != 0)
      return *((unsigned int *)this + 86);
    else
      return *((unsigned int *)this + 85);
  }
  else if (v4 == 1)
  {
    return WebCore::RenderTable::borderAfter(this, a2);
  }
  else if ((v3 & 4) != 0)
  {
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, a2);
    return WebCore::RenderTable::outerBorderBefore(this);
  }
  else
  {
    return WebCore::RenderBlock::borderBefore(this);
  }
}

uint64_t WebCore::RenderTable::borderBottom(WebCore::RenderTable *this, void *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  float v7;
  double v8;
  uint64_t v10;
  WebCore::RenderStyle *v11;

  v3 = *((_DWORD *)this + 31);
  v4 = (unsigned __int16)v3 >> 13;
  if ((v4 - 2) < 4)
  {
    if ((*((_BYTE *)this + 123) & 4) != 0)
      return *((unsigned int *)this + 85);
    else
      return *((unsigned int *)this + 86);
  }
  else
  {
    v5 = v4 - 1;
    if (v5)
    {
      if ((v3 & 4) != 0)
      {
        if ((*((_BYTE *)this + 328) & 8) != 0)
          WebCore::RenderTable::recalcSections(this, a2);
        return WebCore::RenderTable::outerBorderAfter(this, a2);
      }
      else
      {
        v11 = (WebCore::RenderTable *)((char *)this + 80);
        switch(v5)
        {
          case 0:
            v7 = WebCore::RenderStyle::borderTopWidth(v11);
            break;
          case 1:
          case 3:
            v7 = WebCore::RenderStyle::borderRightWidth(v11);
            break;
          case 2:
          case 4:
            v7 = WebCore::RenderStyle::borderLeftWidth(v11);
            break;
          default:
            v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
            v7 = 0.0;
            if ((*(_BYTE *)(v6 + 196) & 0xE) != 0)
            {
              v10 = *(_QWORD *)(v6 + 200);
              if (*(_BYTE *)(v10 + 5) && *(_BYTE *)(v10 + 68) == 4)
              {
                if (*(_BYTE *)(v10 + 70))
                  v7 = *(float *)(v10 + 64);
                else
                  v7 = (float)*(int *)(v10 + 64);
              }
              else
              {
                v7 = *(float *)(v6 + 192);
              }
            }
            break;
        }
        v8 = v7 * 64.0;
        if (v8 >= 2147483650.0)
        {
          return 0x7FFFFFFFLL;
        }
        else if (v8 <= -2147483650.0)
        {
          return 0x80000000;
        }
        else
        {
          return (int)v8;
        }
      }
    }
    else
    {
      return WebCore::RenderTable::borderBefore(this, a2);
    }
  }
}

uint64_t WebCore::RenderTableCell::paddingBottom(WebCore::RenderTableCell *this)
{
  unsigned __int8 *v2;
  int v3;
  float v4;
  float v5;
  double v6;
  uint64_t result;
  char *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  float v12;
  int v13;
  unsigned __int8 *v14;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v3 = v2[92];
  if ((v3 & 0xFFFFFFF7) == 3)
  {
    v14 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v13 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1144))(this);
    v2 = v14;
    v3 = v14[92];
    v4 = (float)v13 * 0.015625;
  }
  else
  {
    v4 = 0.0;
  }
  switch(v3)
  {
    case 4:
      v5 = *((float *)v2 + 22);
      if (!v2[94])
        v5 = (float)SLODWORD(v5);
      break;
    case 3:
      v12 = *((float *)v2 + 22);
      if (!v2[94])
        v12 = (float)SLODWORD(v12);
      v5 = (float)(v4 * v12) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 88), v4);
      break;
    default:
      result = 0;
      goto LABEL_9;
  }
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
  {
    result = 0x7FFFFFFFLL;
  }
  else if (v6 <= -2147483650.0)
  {
    result = 0x80000000;
  }
  else
  {
    result = (int)v6;
  }
LABEL_9:
  if ((*((_BYTE *)this + 21) & 0x10) == 0)
  {
    v8 = (char *)this + 252;
    if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5)
      v8 = (char *)this + 256;
    v9 = *(_DWORD *)v8;
    v10 = __OFADD__((_DWORD)result, v9);
    v11 = result + v9;
    if (v10)
      return (result >> 31) + 0x7FFFFFFF;
    else
      return v11;
  }
  return result;
}

uint64_t WebCore::RenderTableCell::paddingTop(WebCore::RenderTableCell *this)
{
  unsigned __int8 *v2;
  int v3;
  float v4;
  float v5;
  double v6;
  uint64_t result;
  char *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  float v12;
  int v13;
  unsigned __int8 *v14;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v3 = v2[76];
  if ((v3 & 0xFFFFFFF7) == 3)
  {
    v14 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v13 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1144))(this);
    v2 = v14;
    v3 = v14[76];
    v4 = (float)v13 * 0.015625;
  }
  else
  {
    v4 = 0.0;
  }
  switch(v3)
  {
    case 4:
      v5 = *((float *)v2 + 18);
      if (!v2[78])
        v5 = (float)SLODWORD(v5);
      break;
    case 3:
      v12 = *((float *)v2 + 18);
      if (!v2[78])
        v12 = (float)SLODWORD(v12);
      v5 = (float)(v4 * v12) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 72), v4);
      break;
    default:
      result = 0;
      goto LABEL_9;
  }
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
  {
    result = 0x7FFFFFFFLL;
  }
  else if (v6 <= -2147483650.0)
  {
    result = 0x80000000;
  }
  else
  {
    result = (int)v6;
  }
LABEL_9:
  if ((*((_BYTE *)this + 21) & 0x10) == 0)
  {
    v8 = (char *)this + 256;
    if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5)
      v8 = (char *)this + 252;
    v9 = *(_DWORD *)v8;
    v10 = __OFADD__((_DWORD)result, v9);
    v11 = result + v9;
    if (v10)
      return (result >> 31) + 0x7FFFFFFF;
    else
      return v11;
  }
  return result;
}

uint64_t WebCore::RenderTableCell::paddingBefore(WebCore::RenderTableCell *this)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  unsigned int v5;

  v2 = WebCore::RenderBoxModelObject::computedCSSPaddingBefore(this);
  v3 = *((_DWORD *)this + 63);
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
    return (v2 >> 31) + 0x7FFFFFFF;
  else
    return v5;
}

uint64_t WebCore::RenderTableCell::paddingRight(WebCore::RenderTableCell *this)
{
  unsigned __int8 *v2;
  int v3;
  float v4;
  float v5;
  double v6;
  uint64_t result;
  float v8;
  int v9;
  BOOL v10;
  char *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v3 = v2[84];
  if ((v3 & 0xFFFFFFF7) == 3)
  {
    v16 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v15 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1144))(this);
    v2 = v16;
    v3 = v16[84];
    v4 = (float)v15 * 0.015625;
  }
  else
  {
    v4 = 0.0;
  }
  switch(v3)
  {
    case 4:
      v5 = *((float *)v2 + 20);
      if (!v2[86])
        v5 = (float)SLODWORD(v5);
      break;
    case 3:
      v8 = *((float *)v2 + 20);
      if (!v2[86])
        v8 = (float)SLODWORD(v8);
      v5 = (float)(v4 * v8) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 80), v4);
      break;
    default:
      result = 0;
      goto LABEL_9;
  }
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
  {
    result = 0x7FFFFFFFLL;
  }
  else if (v6 <= -2147483650.0)
  {
    result = 0x80000000;
  }
  else
  {
    result = (int)v6;
  }
LABEL_9:
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v9 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v10 = v9 == 4 || v9 == 2;
    v11 = (char *)this + 252;
    if (v10)
      v11 = (char *)this + 256;
    v12 = *(_DWORD *)v11;
    v13 = __OFADD__((_DWORD)result, v12);
    v14 = result + v12;
    if (v13)
      return (result >> 31) + 0x7FFFFFFF;
    else
      return v14;
  }
  return result;
}

uint64_t WebCore::RenderTableCell::paddingLeft(WebCore::RenderTableCell *this)
{
  unsigned __int8 *v2;
  int v3;
  float v4;
  float v5;
  double v6;
  uint64_t result;
  float v8;
  int v9;
  BOOL v10;
  char *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v3 = v2[100];
  if ((v3 & 0xFFFFFFF7) == 3)
  {
    v16 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v15 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1144))(this);
    v2 = v16;
    v3 = v16[100];
    v4 = (float)v15 * 0.015625;
  }
  else
  {
    v4 = 0.0;
  }
  switch(v3)
  {
    case 4:
      v5 = *((float *)v2 + 24);
      if (!v2[102])
        v5 = (float)SLODWORD(v5);
      break;
    case 3:
      v8 = *((float *)v2 + 24);
      if (!v2[102])
        v8 = (float)SLODWORD(v8);
      v5 = (float)(v4 * v8) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 96), v4);
      break;
    default:
      result = 0;
      goto LABEL_9;
  }
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
  {
    result = 0x7FFFFFFFLL;
  }
  else if (v6 <= -2147483650.0)
  {
    result = 0x80000000;
  }
  else
  {
    result = (int)v6;
  }
LABEL_9:
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v9 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v10 = v9 == 4 || v9 == 2;
    v11 = (char *)this + 256;
    if (v10)
      v11 = (char *)this + 252;
    v12 = *(_DWORD *)v11;
    v13 = __OFADD__((_DWORD)result, v12);
    v14 = result + v12;
    if (v13)
      return (result >> 31) + 0x7FFFFFFF;
    else
      return v14;
  }
  return result;
}

uint64_t WebCore::RenderBlock::baselinePosition(WebCore::RenderElement *this, WTF::StringImpl *a2, int a3, uint64_t a4, int a5)
{
  unsigned int v5;
  int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  char *LineStyle;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  int v27;
  char *v28;
  float v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;

  v9 = (int)a2;
  if (!a5 && (*((_DWORD *)this + 5) & 2) != 0)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148);
    if ((v11 & 0x1FC000) != 0)
    {
      {
        v65 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        *(_OWORD *)(v65 + 40) = 0u;
        *(_OWORD *)(v65 + 24) = 0u;
        *(_QWORD *)v65 = &off_1E335BC30;
        v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148);
      }
      if ((v11 & 0x1F8000) == 0x8000)
      {
        v40 = (*(uint64_t (**)(void))(WebCore::RenderTheme::singleton(void)::theme + 136))();
        v41 = v40 << 6;
        if (v40 < -33554432)
          v41 = 0x80000000;
        if (v40 <= 0x1FFFFFF)
          return v41;
        else
          return 0x7FFFFFFFLL;
      }
    }
    v12 = *((_QWORD *)this + 4);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v13 + 124)) & 0xE000) == 0)
        {
          v14 = *((_QWORD *)this + 18);
          if (!v14)
            goto LABEL_13;
          v15 = *(_QWORD *)(v14 + 264);
          if (!v15)
            goto LABEL_13;
          if (!*(_QWORD *)(v15 + 168))
          {
            if (!(_DWORD)a4)
            {
              if (*(_QWORD *)(v15 + 136)
                || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 416))(v15)
                  + ((unint64_t)*(unsigned int *)(v15 + 36) << 32)) >> 32)
              {
                if (*((_BYTE *)this + 46) != 5)
                  goto LABEL_74;
                v18 = 0;
                v17 = 0;
                goto LABEL_89;
              }
              goto LABEL_13;
            }
            if (!*(_QWORD *)(v15 + 128)
              && !(*(_DWORD *)(v15 + 32) + (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 416))(v15)))
            {
LABEL_13:
              v16 = (*(uint64_t (**)(WebCore::RenderElement *, uint64_t))(*(_QWORD *)this + 1496))(this, a4);
              v17 = v16;
              v5 = v16 >> 8;
              v18 = BYTE4(v16);
              goto LABEL_14;
            }
          }
        }
      }
    }
    v18 = 0;
    v17 = 0;
LABEL_14:
    if (*((_BYTE *)this + 46) != 5)
    {
      if (v18)
      {
        v19 = v17 | (v5 << 8);
LABEL_17:
        v20 = *(_QWORD *)this;
        if ((_DWORD)a4)
          v21 = (*(uint64_t (**)(WebCore::RenderElement *))(v20 + 1104))(this);
        else
          v21 = (*(uint64_t (**)(WebCore::RenderElement *))(v20 + 1080))(this);
        if (__OFADD__(v21, v19))
          return (v21 >> 31) + 0x7FFFFFFF;
        else
          return v21 + v19;
      }
LABEL_74:
      if ((*((_BYTE *)this + 20) & 2) == 0)
        return 0;
      if ((_DWORD)a4)
      {
        v47 = *((_DWORD *)this + 40);
        v48 = *((_DWORD *)this + 43);
        v34 = __OFADD__(v48, v47);
        v49 = v48 + v47;
        v50 = (v48 >> 31) + 0x7FFFFFFF;
        if (v34)
          v49 = v50;
        v51 = *((_DWORD *)this + 45);
      }
      else
      {
        v58 = *((_DWORD *)this + 41);
        v59 = *((_DWORD *)this + 42);
        v34 = __OFADD__(v59, v58);
        v49 = v59 + v58;
        v60 = (v59 >> 31) + 0x7FFFFFFF;
        if (v34)
          v49 = v60;
        v51 = *((_DWORD *)this + 44);
      }
      v34 = __OFADD__(v49, v51);
      v52 = v49 + v51;
      v53 = (v49 >> 31) + 0x7FFFFFFF;
      if (!v34)
        v53 = v52;
      v54 = ((int)(v53 - (v52 & 0xFFFFFFC0) + 32) >> 6) + v53 / 64;
      if (v9)
      {
        if (v54 >= 0)
          v61 = v54;
        else
          v61 = v54 + 1;
        v54 -= v61 >> 1;
      }
      v55 = v54 << 6;
      if (v54 < -33554432)
        v55 = 0x80000000;
      if (v54 <= 0x1FFFFFF)
        return v55;
      else
        return 0x7FFFFFFFLL;
    }
    if ((_DWORD)a4)
    {
      v42 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 1024))(this);
      v43 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 952))(this);
      if (__OFADD__(v42, v43))
        v44 = (v42 >> 31) + 0x7FFFFFFF;
      else
        v44 = v42 + v43;
      v45 = WebCore::RenderBox::contentWidth(this);
      goto LABEL_69;
    }
LABEL_89:
    v56 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 1000))(this);
    v57 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 928))(this);
    if (__OFADD__(v56, v57))
      v44 = (v56 >> 31) + 0x7FFFFFFF;
    else
      v44 = v56 + v57;
    v45 = WebCore::RenderBox::contentHeight(this);
LABEL_69:
    v46 = v44 + v45;
    if (__OFADD__(v44, v45))
      v46 = (v44 >> 31) + 0x7FFFFFFF;
    if (v18)
    {
      v19 = v17 | (v5 << 8);
      if (v19 <= v46)
        goto LABEL_17;
    }
    goto LABEL_74;
  }
  if (a3)
    LineStyle = WebCore::RenderElement::firstLineStyle(this, a2);
  else
    LineStyle = (char *)this + 80;
  v24 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, a2);
  v26 = v24;
  v27 = *((_DWORD *)v24 + 11);
  if (v9)
  {
    v62 = *((_DWORD *)v24 + 12);
    v34 = __OFADD__(v62, v27);
    v63 = v62 + v27;
    if (v63 < 0 != v34)
      v64 = v63 + 1;
    else
      v64 = v63;
    v27 = v63 - (v64 >> 1);
  }
  if (!a5 && (*((_DWORD *)this + 5) & 2) != 0)
  {
    v31 = WebCore::RenderBox::lineHeight((uint64_t)this, 0, a4);
  }
  else
  {
    if (a3)
      v28 = WebCore::RenderElement::firstLineStyle(this, v25);
    else
      v28 = (char *)this + 80;
    v29 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v28, v25) * 64.0);
    if (v29 > -2147500000.0)
      v30 = (int)v29;
    else
      v30 = 0x80000000;
    if (v29 < 2147500000.0)
      v31 = v30;
    else
      v31 = 0x7FFFFFFF;
  }
  v32 = *((_DWORD *)v26 + 12) + *((_DWORD *)v26 + 11);
  v33 = v32 << 6;
  if (v32 < -33554432)
    v33 = 0x80000000;
  if (v32 > 0x1FFFFFF)
    v33 = 0x7FFFFFFF;
  v34 = __OFSUB__(v31, v33);
  v35 = v31 - v33;
  if (v34)
    v35 = (v31 >> 31) + 0x7FFFFFFF;
  v36 = v35 + (v35 < 0);
  if (v27 >= -33554432)
    v37 = v27 << 6;
  else
    v37 = 0x80000000;
  if (v27 > 0x1FFFFFF)
    v37 = 0x7FFFFFFF;
  v34 = __OFADD__(v37, v36 >> 1);
  v38 = v37 + (v36 >> 1);
  v39 = (v37 >> 31) + 0x7FFFFFFF;
  if (!v34)
    v39 = v38;
  return (v39 + (v39 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
}

uint64_t WebCore::RenderBox::baselinePosition(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  if ((*(_BYTE *)(a1 + 20) & 2) == 0)
    return 0;
  if (a4)
  {
    v4 = *(_DWORD *)(a1 + 160);
    v5 = *(_DWORD *)(a1 + 172);
    v6 = __OFADD__(v5, v4);
    v7 = v5 + v4;
    v8 = (v5 >> 31) + 0x7FFFFFFF;
    if (v6)
      v7 = v8;
    v9 = *(_DWORD *)(a1 + 180);
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 164);
    v16 = *(_DWORD *)(a1 + 168);
    v6 = __OFADD__(v16, v15);
    v7 = v16 + v15;
    v17 = (v16 >> 31) + 0x7FFFFFFF;
    if (v6)
      v7 = v17;
    v9 = *(_DWORD *)(a1 + 176);
  }
  v6 = __OFADD__(v7, v9);
  v10 = v7 + v9;
  v11 = (v7 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v11 = v10;
  v12 = ((int)(v11 - (v10 & 0xFFFFFFC0) + 32) >> 6) + v11 / 64;
  if (a2)
  {
    if (v12 >= 0)
      v18 = v12;
    else
      v18 = v12 + 1;
    v12 -= v18 >> 1;
  }
  v13 = v12 << 6;
  if (v12 < -33554432)
    v13 = 0x80000000;
  if (v12 <= 0x1FFFFFF)
    return v13;
  else
    return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderBlockFlow::inlineBlockBaseline(WebCore::RenderBlockFlow *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  BOOL v16;
  char *v17;
  unsigned int v18;
  char *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  double v31;
  unsigned int v33;
  WTF::StringImpl *v35;
  char *LineStyle;
  void *v37;
  WTF *v38;
  int v39;
  WTF::StringImpl *v40;
  char *v41;
  void *v42;
  float v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  WebCore::LegacyLineLayout *v59;
  uint64_t v60;
  uint64_t RootBox;
  WTF::StringImpl *v62;
  char *v63;
  WTF *v64;
  uint64_t v65;
  int v66;
  float v67;
  char *v68;
  int v69;
  WebCore::LegacyInlineBox *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  int v78;
  int v79;
  int v80;
  int v81;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_103;
  v2 = *(_QWORD *)(v2 + 8);
  if (!v2)
    goto LABEL_103;
  if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v2 + 124)) & 0xE000) != 0)
    goto LABEL_102;
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v7 = (*(_BYTE *)(v5 + 642) & 3u) - 3 <= 0xFFFFFFFD
    && (*(_BYTE *)(v5 + 462) & 1) == 0
    && (*(_DWORD *)(v5 + 636) & 0xC0000) == 0;
  if (!v7
    && ((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
    && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19
    && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
  {
    v30 = WebCore::RenderBlock::inlineBlockBaseline(this, a2);
    v33 = v30 & 0xFFFFFF00;
    v2 = v30 & 0x100000000;
    return v2 | v33 | v30;
  }
  v8 = *((_QWORD *)this + 12);
  if ((v8 & 0x1F) == 3 && (v8 & 0x1C00) != 0 && (v8 & 0xE000) != 0)
  {
    v60 = WebCore::RenderElement::element(this);
    if ((!v60 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 848))(v60) & 1) == 0)
      && *((_BYTE *)this + 46) != 42)
    {
LABEL_102:
      v2 = 0;
LABEL_103:
      LOBYTE(v30) = 0;
      goto LABEL_104;
    }
  }
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v9 = v10 + 80;
    else
      v9 = 0;
  }
  v11 = (unsigned __int16)*(_DWORD *)(v9 + 44) >> 13;
  LOBYTE(v12) = 2;
  switch((unsigned __int16)*(_DWORD *)(v9 + 44) >> 13)
  {
    case 1:
    case 2:
      v12 = (unsigned __int16)*(_DWORD *)(v9 + 44) >> 13;
      break;
    case 3:
    case 5:
      LOBYTE(v12) = 3;
      break;
    case 4:
      break;
    default:
      LOBYTE(v12) = 0;
      break;
  }
  v13 = (*(_DWORD *)(*(_QWORD *)(v9 + 24) + 232) >> 4) & 3;
  v16 = (v12 & 6) != 2 || v13 == 2 || v13 > 1;
  if (v11 == 2 && v16)
  {
    v18 = 0;
  }
  else
  {
    if ((_DWORD)a2)
      v17 = (char *)this + 160;
    else
      v17 = (char *)this + 164;
    v18 = *(_DWORD *)v17;
    if (!v16)
      v18 = (int)v18 / 2;
  }
  if ((_DWORD)a2)
    v19 = (char *)this + 180;
  else
    v19 = (char *)this + 176;
  v20 = *(_DWORD *)v19;
  v21 = __OFADD__(v18, v20);
  v22 = v18 + v20;
  v23 = (v18 >> 31) + 0x7FFFFFFF;
  if (v21)
    v24 = v23;
  else
    v24 = v22;
  if ((*((_BYTE *)this + 22) & 4) == 0)
  {
    v30 = WebCore::RenderBlock::inlineBlockBaseline(this, a2);
    v2 = HIDWORD(v30);
    if (!HIDWORD(v30))
    {
      v33 = v30 & 0xFFFFFF00;
      return v2 | v33 | v30;
    }
    goto LABEL_53;
  }
  v25 = *((_DWORD *)this + 60);
  if (v25 == 1)
  {
    v26 = *((_QWORD *)this + 29);
    if (!v26)
      goto LABEL_67;
    v27 = *(_QWORD *)(v26 + 80);
    if (!v27 || *(_DWORD *)(v27 + 60) < 2u)
      goto LABEL_67;
    v28 = *(_DWORD *)(v27 + 44);
  }
  else
  {
    if (v25 != 2)
      goto LABEL_67;
    v59 = (WebCore::LegacyLineLayout *)*((_QWORD *)this + 29);
    if (!v59)
      goto LABEL_67;
    v28 = WebCore::LegacyLineLayout::lineCount(v59);
  }
  if (!v28)
  {
LABEL_67:
    LODWORD(v30) = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1712))(this);
    if (!(_DWORD)v30)
    {
      v2 = 0;
LABEL_104:
      v33 = 0;
      return v2 | v33 | v30;
    }
    LineStyle = WebCore::RenderElement::firstLineStyle(this, v35);
    v38 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, v37);
    v39 = *((_DWORD *)v38 + 11);
    v41 = WebCore::RenderElement::firstLineStyle(this, v40);
    v43 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v41, v42) * 64.0);
    v44 = (int)v43;
    if (v43 <= -2147500000.0)
      v44 = 0x80000000;
    if (v43 >= 2147500000.0)
      v44 = 0x7FFFFFFF;
    v45 = *((_DWORD *)v38 + 12) + *((_DWORD *)v38 + 11);
    v46 = v45 << 6;
    if (v45 < -33554432)
      v46 = 0x80000000;
    if (v45 <= 0x1FFFFFF)
      v47 = v46;
    else
      v47 = 0x7FFFFFFF;
    v21 = __OFSUB__(v44, v47);
    v48 = v44 - v47;
    v49 = (v44 >> 31) + 0x7FFFFFFF;
    if (!v21)
      v49 = v48;
    v50 = v49 + (v49 < 0);
    if (v39 >= -33554432)
      v51 = v39 << 6;
    else
      v51 = 0x80000000;
    if (v39 > 0x1FFFFFF)
      v51 = 0x7FFFFFFF;
    v52 = v51 + (v50 >> 1);
    if (__OFADD__(v51, v50 >> 1))
      v52 = (v51 >> 31) + 0x7FFFFFFF;
    v53 = *(_QWORD *)this;
    if ((_DWORD)a2)
    {
      v54 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(v53 + 1024))(this);
      v55 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 952))(this);
    }
    else
    {
      v54 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(v53 + 1000))(this);
      v55 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 928))(this);
    }
    v56 = v54 + v55;
    if (__OFADD__(v54, v55))
      v56 = (v54 >> 31) + 0x7FFFFFFF;
    v21 = __OFADD__(v52, v56);
    v57 = v52 + v56;
    if (v21)
      v57 = (v52 >> 31) + 0x7FFFFFFF;
    v58 = v57 + (v57 < 0 ? 0x3F : 0);
    LOBYTE(v30) = v58 & 0xC0;
    v33 = v58 & 0xFFFFFF00;
    goto LABEL_59;
  }
  v29 = *((_DWORD *)this + 60);
  if (v29 == 1)
  {
    v30 = *((_QWORD *)this + 29);
    if (v30)
    {
      v31 = (float)((int)WebCore::LayoutIntegration::LineLayout::lastLineLogicalBaseline((WebCore::LayoutIntegration::LineLayout *)v30) >> 6)
          * 64.0;
      if (v31 >= 2147483650.0)
      {
        LODWORD(v30) = 0x7FFFFFFF;
      }
      else if (v31 <= -2147483650.0)
      {
        LODWORD(v30) = 0x80000000;
      }
      else
      {
        LODWORD(v30) = (int)v31;
      }
    }
  }
  else if (v29 == 2 && *((_QWORD *)this + 29))
  {
    v81 = v24;
    RootBox = WebCore::RenderBlockFlow::lastRootBox(this);
    if (RootBox == WebCore::RenderBlockFlow::firstRootBox(this))
      v63 = WebCore::RenderElement::firstLineStyle(this, v62);
    else
      v63 = (char *)this + 80;
    v64 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v63, v62);
    v65 = WebCore::RenderBlockFlow::lastRootBox(this);
    v66 = *((_DWORD *)v64 + 11);
    if ((*(_BYTE *)(v65 + 56) & 4) != 0)
    {
      v78 = *((_DWORD *)v64 + 12);
      v21 = __OFADD__(v78, v66);
      v79 = v78 + v66;
      if (v79 < 0 != v21)
        v80 = v79 + 1;
      else
        v80 = v79;
      v66 = v79 - (v80 >> 1);
    }
    v67 = (float)v66;
    if (WebCore::RenderStyle::isFlippedLinesWritingMode((WebCore::RenderStyle *)v63))
    {
      v68 = (char *)this + 160;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
        v68 = (char *)this + 164;
      v69 = *(_DWORD *)v68;
      v70 = (WebCore::LegacyInlineBox *)WebCore::RenderBlockFlow::lastRootBox(this);
      v72 = 48;
      if ((*((_WORD *)v70 + 26) & 0x800) == 0)
        v72 = 44;
      v73 = *(float *)((char *)v70 + v72);
      v74 = (float)((float)v69 * 0.015625) - (float)(v73 + WebCore::LegacyInlineBox::logicalHeight(v70, v71));
    }
    else
    {
      v75 = WebCore::RenderBlockFlow::lastRootBox(this);
      v76 = 48;
      if ((*(_WORD *)(v75 + 52) & 0x800) == 0)
        v76 = 44;
      v74 = *(float *)(v75 + v76);
    }
    v77 = (float)(v74 + v67) * 64.0;
    if (v77 >= 2147483650.0)
    {
      LODWORD(v30) = 0x7FFFFFFF;
    }
    else if (v77 <= -2147483650.0)
    {
      LODWORD(v30) = 0x80000000;
    }
    else
    {
      LODWORD(v30) = (int)v77;
    }
    v24 = v81;
  }
  else
  {
    LODWORD(v30) = 0;
  }
LABEL_53:
  if ((int)v30 >= v24 && (*((_BYTE *)this + 97) & 0xE0) != 0)
    LODWORD(v30) = v24;
  v33 = v30 & 0xFFFFFF00;
LABEL_59:
  v2 = 0x100000000;
  return v2 | v33 | v30;
}

float WebCore::RenderStyle::computedLineHeight(WebCore::RenderStyle *this, void *a2)
{
  uint64_t v3;
  WebCore::Length *v4;
  int v5;
  double v8;
  float v10;
  float v11;
  double v12;
  int v14;
  float v15;

  v3 = *((_QWORD *)this + 4);
  v4 = (WebCore::Length *)(v3 + 12);
  v5 = *(unsigned __int8 *)(v3 + 16);
  if (v5 != 11 && v5 != 13)
  {
    if (*(_BYTE *)(v3 + 18))
    {
      if (*(float *)v4 >= 0.0)
        goto LABEL_7;
      return *((float *)WebCore::RenderStyle::metricsOfPrimaryFont(this, a2) + 6);
    }
    if ((*(_DWORD *)v4 & 0x80000000) != 0)
      return *((float *)WebCore::RenderStyle::metricsOfPrimaryFont(this, a2) + 6);
  }
LABEL_7:
  if ((v5 & 0xFFFFFFF7) == 3)
  {
    v8 = *(float *)(v3 + 204) * 64.0;
    if (v8 >= 2147483650.0 || v8 <= -2147483650.0)
    {
      if (v8 >= 2147483650.0)
      {
        v10 = 33554000.0;
      }
      else if (v8 <= -2147483650.0)
      {
        v10 = -33554000.0;
      }
      else
      {
        v10 = (float)(int)v8 * 0.015625;
      }
    }
    else
    {
      v10 = (float)(int)v8 * 0.015625;
    }
    switch(v5)
    {
      case 4:
        v11 = *(float *)(v3 + 12);
        if (!*(_BYTE *)(v3 + 18))
          v11 = (float)SLODWORD(v11);
        break;
      case 3:
        v15 = *(float *)(v3 + 12);
        if (!*(_BYTE *)(v3 + 18))
          v15 = (float)SLODWORD(v15);
        v11 = (float)(v10 * v15) / 100.0;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue(v4, v10);
        break;
      default:
        v14 = 0;
        return (float)v14 * 0.015625;
    }
    v12 = v11 * 64.0;
    if (v12 < 2147483650.0 && v12 > -2147483650.0)
      goto LABEL_22;
    if (v12 >= 2147483650.0)
    {
      v14 = 0x7FFFFFFF;
      return (float)v14 * 0.015625;
    }
    if (v12 <= -2147483650.0)
      v14 = 0x80000000;
    else
LABEL_22:
      v14 = (int)v12;
    return (float)v14 * 0.015625;
  }
  if (*(_BYTE *)(v3 + 18))
    return *(float *)v4;
  else
    return (float)*(int *)v4;
}

uint64_t WebCore::LayoutIntegration::LineLayout::lastLineLogicalBaseline(WebCore::LayoutIntegration::LineLayout *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  double v10;
  BOOL v12;
  int *v13;
  int *v14;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD *)(v4 + 56);
  if (v5 && (*(_WORD *)(v5 + 12) & 0x40) == 0)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x194165508);
  }
  v6 = v2 - 1;
  switch((unsigned __int16)*(_DWORD *)(v5 + 60) >> 13)
  {
    case 2:
    case 4:
      if ((*(_BYTE *)(v4 + 52) & 7) != 1)
        goto LABEL_21;
      v12 = ((*(_DWORD *)(v4 + 124) >> 13) & 6u) - 2 >= 4;
      v13 = (int *)(v4 + 160);
      v14 = (int *)(v4 + 164);
      if (!v12)
        v14 = v13;
      v9 = *(float *)(v3 + 152 * v6 + 104)
         + (float)((float)((float)*v14 * 0.015625)
                 - (float)(*(float *)(v3 + 152 * v6 + 16) + *(float *)(v3 + 152 * v6 + 24)));
      break;
    case 3:
    case 5:
      v7 = (float *)(v3 + 152 * v6);
      v8 = v7[4];
      goto LABEL_7;
    default:
      v7 = (float *)(v3 + 152 * v6);
      v8 = v7[5];
LABEL_7:
      v9 = v8 + v7[26];
      break;
  }
  v10 = v9 * 64.0;
  if (v10 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v10 <= -2147483650.0)
    return 0x80000000;
  return (int)v10;
}

uint64_t WebCore::RenderTableCell::borderHalfBottom(WebCore::RenderTableCell *this, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x19416562CLL);
      }
    }
  }
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  if ((v3 - 2) < 4)
  {
    if ((*(_BYTE *)(v2 + 123) & 4) != 0)
      return WebCore::RenderTableCell::borderHalfStart(this, a2);
    else
      return WebCore::RenderTableCell::borderHalfEnd(this, a2);
  }
  else if (v3 == 1)
  {
    return WebCore::RenderTableCell::borderHalfBefore(this, a2);
  }
  else
  {
    return WebCore::RenderTableCell::borderHalfAfter(this, a2);
  }
}

uint64_t WebCore::RenderTableCell::borderHalfTop(WebCore::RenderTableCell *this, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x19416569CLL);
      }
    }
  }
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  if ((v3 - 2) < 4)
  {
    if ((*(_BYTE *)(v2 + 123) & 4) != 0)
      return WebCore::RenderTableCell::borderHalfEnd(this, a2);
    else
      return WebCore::RenderTableCell::borderHalfStart(this, a2);
  }
  else if (v3 == 1)
  {
    return WebCore::RenderTableCell::borderHalfAfter(this, a2);
  }
  else
  {
    return WebCore::RenderTableCell::borderHalfBefore(this, a2);
  }
}

uint64_t *WebCore::BackForwardCache::setMaxSize(WebCore::BackForwardCache *this, int a2)
{
  *((_DWORD *)this + 6) = a2;
  return WebCore::BackForwardCache::prune((uint64_t *)this, 0);
}

void WebCore::cocoaColor(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  void *UIColorClass;
  const WebCore::Color *v6;
  const void *v7;
  CFTypeRef v8;
  CFTypeRef cf;

  UIColorClass = (void *)PAL::getUIColorClass(this);
  WebCore::cachedCGColor(this, v6, &cf);
  v7 = (const void *)objc_msgSend(UIColorClass, "_disambiguated_due_to_CIImage_colorWithCGColor:", cf);
  *a2 = v7;
  if (v7)
    CFRetain(v7);
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
}

void sub_19416573C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_DWORD *WebCore::JSPerformanceEntry::destroy(WebCore::JSPerformanceEntry *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

BOOL WebCore::LengthBox::isZero(WebCore::LengthBox *this)
{
  BOOL v1;
  uint64_t v2;

  if (*((_BYTE *)this + 4))
    v1 = *((_BYTE *)this + 4) == 11;
  else
    v1 = 1;
  if (v1)
    return 0;
  if (*((_BYTE *)this + 6))
  {
    if (*(float *)this != 0.0)
      return 0;
  }
  else if (*(_DWORD *)this)
  {
    return 0;
  }
  v2 = 0;
  if (!*((_BYTE *)this + 12) || *((_BYTE *)this + 12) == 11)
    return v2;
  if (!*((_BYTE *)this + 14))
  {
    if (!*((_DWORD *)this + 2))
      goto LABEL_15;
    return 0;
  }
  if (*((float *)this + 2) != 0.0)
    return 0;
LABEL_15:
  v2 = 0;
  if (*((_BYTE *)this + 20) && *((_BYTE *)this + 20) != 11)
  {
    if (*((_BYTE *)this + 22))
    {
      if (*((float *)this + 4) != 0.0)
        return 0;
    }
    else if (*((_DWORD *)this + 4))
    {
      return 0;
    }
    v2 = 0;
    if (*((_BYTE *)this + 28) && *((_BYTE *)this + 28) != 11)
    {
      if (*((_BYTE *)this + 30))
        return *((float *)this + 6) == 0.0;
      else
        return *((_DWORD *)this + 6) == 0;
    }
  }
  return v2;
}

uint64_t WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::deallocateTable(_BYTE *a1, WTF::StringImpl *a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (!*a1)
        a1 = (_BYTE *)WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>::~KeyValuePair((uint64_t)a1, a2);
      a1 += 96;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  WebCore::FontCascadeCacheEntry *v27;
  _QWORD *v28;
  WebCore::FontCascadeCacheEntry *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  WTF::StringImpl **v34;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::FontCascadeCacheEntry *v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v54;
  WTF::StringImpl *v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl **v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  void *v73;
  WTF *v74;
  WTF *v75;
  WTF::StringImpl *v76;
  void *v77;
  WTF *v78;
  WTF *v79;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 56);
    do
    {
      *(v10 - 1) = 0;
      *v10 = v10 + 2;
      *(_OWORD *)(v10 - 3) = 0uLL;
      *(_OWORD *)(v10 - 5) = 0uLL;
      v10[1] = 3;
      v10[5] = 0;
      v10[6] = 0;
      v10 += 12;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v83 = v5;
    do
    {
      v13 = (__int128 *)(v4 + 96 * v11);
      if (!*(_BYTE *)v13)
      {
        if (*((float *)v13 + 1) == 0.0
          && (float)((float)*((__int16 *)v13 + 4) * 0.25) == 0.0
          && ((float)((float)*((__int16 *)v13 + 5) * 0.25) == 0.0 ? (v56 = *((_BYTE *)v13 + 14) == 0) : (v56 = 0),
              v56 ? (v57 = *((_QWORD *)v13 + 2) == 0) : (v57 = 0),
              v57 ? (v58 = *((_QWORD *)v13 + 3) == 0) : (v58 = 0),
              v58 ? (v59 = *((_QWORD *)v13 + 4) == 0) : (v59 = 0),
              v59 ? (v60 = *((_DWORD *)v13 + 13) == 0) : (v60 = 0),
              v60 ? (v61 = *((_DWORD *)v13 + 20) == 0) : (v61 = 0),
              v61 && !*((_DWORD *)v13 + 21)))
        {
          WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>::~KeyValuePair(v4 + 96 * v11, v8);
        }
        else
        {
          v84 = v12;
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::computeHash<WebCore::FontCascadeCacheKey>(v4 + 96 * v11);
          for (i = 0; ; v16 = i + v18)
          {
            v18 = v16 & v15;
            v19 = v14 + 96 * (v16 & v15);
            if (!*(_BYTE *)v19 && *(float *)(v19 + 4) == 0.0 && (float)((float)*(__int16 *)(v19 + 8) * 0.25) == 0.0)
            {
              v20 = (float)((float)*(__int16 *)(v19 + 10) * 0.25) == 0.0 && *(_BYTE *)(v19 + 14) == 0;
              v21 = v20 && *(_QWORD *)(v19 + 16) == 0;
              v22 = v21 && *(_QWORD *)(v19 + 24) == 0;
              v23 = v22 && *(_QWORD *)(v19 + 32) == 0;
              v24 = v23 && *(_DWORD *)(v19 + 52) == 0;
              v25 = v24 && *(_DWORD *)(v19 + 80) == 0;
              if (v25 && !*(_DWORD *)(v19 + 84))
                break;
            }
            ++i;
          }
          v26 = v14 + 96 * v18;
          v29 = *(WebCore::FontCascadeCacheEntry **)(v26 + 88);
          v28 = (_QWORD *)(v26 + 88);
          v27 = v29;
          *v28 = 0;
          if (v29)
          {
            WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry(v27, v8);
            WTF::fastFree(v30, v31);
            v32 = *(unsigned int *)(v19 + 52);
            if ((_DWORD)v32)
            {
              v66 = *(WTF::StringImpl ***)(v19 + 40);
              v67 = 8 * v32;
              do
              {
                v68 = *v66;
                *v66 = 0;
                if (v68)
                {
                  if (*(_DWORD *)v68 == 2)
                    WTF::StringImpl::destroy(v68, v8);
                  else
                    *(_DWORD *)v68 -= 2;
                }
                ++v66;
                v67 -= 8;
              }
              while (v67);
            }
          }
          v33 = *(WTF **)(v19 + 40);
          v34 = (WTF::StringImpl **)(v19 + 56);
          if ((WTF *)(v19 + 56) != v33 && v33 != 0)
          {
            *(_QWORD *)(v19 + 40) = 0;
            *(_DWORD *)(v19 + 48) = 0;
            WTF::fastFree(v33, v8);
          }
          v36 = *(_QWORD *)(v19 + 32);
          *(_QWORD *)(v19 + 32) = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
            {
              v72 = *(WTF::StringImpl **)(v36 + 120);
              *(_QWORD *)(v36 + 120) = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                  WTF::StringImpl::destroy(v72, v8);
                else
                  *(_DWORD *)v72 -= 2;
              }
              WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)(v36 + 40), v8);
              v74 = *(WTF **)(v36 + 24);
              if (v74)
              {
                *(_QWORD *)(v36 + 24) = 0;
                *(_DWORD *)(v36 + 32) = 0;
                WTF::fastFree(v74, v73);
              }
              v75 = *(WTF **)(v36 + 8);
              if (v75)
              {
                *(_QWORD *)(v36 + 8) = 0;
                *(_DWORD *)(v36 + 16) = 0;
                WTF::fastFree(v75, v73);
              }
              WTF::fastFree((WTF *)v36, v73);
            }
            else
            {
              --*(_DWORD *)v36;
            }
          }
          v37 = v4;
          v38 = *(WTF::StringImpl **)(v19 + 24);
          *(_QWORD *)(v19 + 24) = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v8);
            else
              *(_DWORD *)v38 -= 2;
          }
          v39 = *v13;
          *(_QWORD *)(v19 + 16) = *((_QWORD *)v13 + 2);
          *(_OWORD *)v19 = v39;
          v40 = *((_QWORD *)v13 + 3);
          *((_QWORD *)v13 + 3) = 0;
          *(_QWORD *)(v19 + 24) = v40;
          v41 = *((_QWORD *)v13 + 4);
          *((_QWORD *)v13 + 4) = 0;
          *(_QWORD *)(v19 + 32) = v41;
          *(_QWORD *)(v19 + 40) = v34;
          *(_QWORD *)(v19 + 48) = 3;
          v42 = (WTF::StringImpl **)*((_QWORD *)v13 + 5);
          v43 = (WTF *)((char *)v13 + 56);
          if (v42 == (WTF::StringImpl **)((char *)v13 + 56))
          {
            v62 = *((unsigned int *)v13 + 13);
            if ((_DWORD)v62)
            {
              v63 = 8 * v62;
              do
              {
                v64 = *v42;
                *v42 = 0;
                *v34 = v64;
                v65 = *v42;
                *v42 = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2)
                    WTF::StringImpl::destroy(v65, v8);
                  else
                    *(_DWORD *)v65 -= 2;
                }
                ++v34;
                ++v42;
                v63 -= 8;
              }
              while (v63);
            }
          }
          else
          {
            *((_QWORD *)v13 + 5) = v43;
            *(_QWORD *)(v19 + 40) = v42;
            v44 = *((_DWORD *)v13 + 12);
            *((_DWORD *)v13 + 12) = 3;
            *(_DWORD *)(v19 + 48) = v44;
          }
          v45 = *((_DWORD *)v13 + 13);
          *((_DWORD *)v13 + 13) = 0;
          *(_DWORD *)(v19 + 52) = v45;
          *(_QWORD *)(v19 + 80) = *((_QWORD *)v13 + 10);
          v4 = v37;
          v46 = v37 + 96 * v11;
          v47 = *(_QWORD *)(v46 + 88);
          *(_QWORD *)(v46 + 88) = 0;
          *v28 = v47;
          v48 = *(WebCore::FontCascadeCacheEntry **)(v46 + 88);
          *(_QWORD *)(v46 + 88) = 0;
          if (v48)
          {
            WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry(v48, v8);
            WTF::fastFree(v49, v50);
          }
          v51 = *((unsigned int *)v13 + 13);
          if ((_DWORD)v51)
          {
            v69 = (WTF::StringImpl **)*((_QWORD *)v13 + 5);
            v70 = 8 * v51;
            do
            {
              v71 = *v69;
              *v69 = 0;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, v8);
                else
                  *(_DWORD *)v71 -= 2;
              }
              ++v69;
              v70 -= 8;
            }
            while (v70);
          }
          v52 = (WTF *)*((_QWORD *)v13 + 5);
          if (v43 != v52 && v52 != 0)
          {
            *((_QWORD *)v13 + 5) = 0;
            *((_DWORD *)v13 + 12) = 0;
            WTF::fastFree(v52, v8);
          }
          v54 = *((_QWORD *)v13 + 4);
          *((_QWORD *)v13 + 4) = 0;
          v12 = v84;
          if (v54)
          {
            if (*(_DWORD *)v54 == 1)
            {
              v76 = *(WTF::StringImpl **)(v54 + 120);
              *(_QWORD *)(v54 + 120) = 0;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                  WTF::StringImpl::destroy(v76, v8);
                else
                  *(_DWORD *)v76 -= 2;
              }
              WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)(v54 + 40), v8);
              v78 = *(WTF **)(v54 + 24);
              if (v78)
              {
                *(_QWORD *)(v54 + 24) = 0;
                *(_DWORD *)(v54 + 32) = 0;
                WTF::fastFree(v78, v77);
              }
              v79 = *(WTF **)(v54 + 8);
              if (v79)
              {
                *(_QWORD *)(v54 + 8) = 0;
                *(_DWORD *)(v54 + 16) = 0;
                WTF::fastFree(v79, v77);
              }
              WTF::fastFree((WTF *)v54, v77);
            }
            else
            {
              --*(_DWORD *)v54;
            }
          }
          v55 = (WTF::StringImpl *)*((_QWORD *)v13 + 3);
          *((_QWORD *)v13 + 3) = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v8);
            else
              *(_DWORD *)v55 -= 2;
          }
          if (v13 == a3)
            v12 = v19;
        }
      }
      ++v11;
    }
    while (v11 != v83);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::FontCascadeCacheEntry *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v3 = *(WebCore::FontCascadeCacheEntry **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
  {
    WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v6)
  {
    v12 = *(WTF::StringImpl ***)(a1 + 40);
    v13 = 8 * v6;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v7 = *(WTF **)(a1 + 40);
  if ((WTF *)(a1 + 56) != v7 && v7 != 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v9, a2);
  v10 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t Table;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl *v17;
  int i;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t result;
  _OWORD v33[5];

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (__int128 *)(v4 + 88 * v9);
      if (!*(_BYTE *)v12)
      {
        memset(v33, 0, sizeof(v33));
        if (WebCore::operator==((unsigned __int8 *)(v4 + 88 * v9), (unsigned __int8 *)v33))
        {
          WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>::~KeyValuePair((_QWORD *)(v4 + 88 * v9), v13);
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::computeHash<WebCore::FontPlatformDataCacheKey>(v4 + 88 * v9);
          for (i = 0; ; v16 = i + v19)
          {
            v19 = v16 & v15;
            v20 = v14 + 88 * (v16 & v15);
            if (!*(_BYTE *)v20
              && *(float *)(v20 + 4) == 0.0
              && (float)((float)*(__int16 *)(v20 + 8) * 0.25) == 0.0
              && (float)((float)*(__int16 *)(v20 + 10) * 0.25) == 0.0
              && !*(_BYTE *)(v20 + 14)
              && !*(_QWORD *)(v20 + 16)
              && !*(_QWORD *)(v20 + 24)
              && !*(_QWORD *)(v20 + 32)
              && !*(_QWORD *)(v20 + 40)
              && !*(_BYTE *)(v20 + 52)
              && !*(_BYTE *)(v20 + 58)
              && !*(_BYTE *)(v20 + 64)
              && !*(_QWORD *)(v20 + 72))
            {
              break;
            }
            ++i;
          }
          WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>::~KeyValuePair((_QWORD *)(v14 + 88 * v19), v17);
          v21 = *v12;
          *(_QWORD *)(v20 + 16) = *((_QWORD *)v12 + 2);
          *(_OWORD *)v20 = v21;
          v22 = *((_QWORD *)v12 + 3);
          *((_QWORD *)v12 + 3) = 0;
          *(_QWORD *)(v20 + 24) = v22;
          v23 = *((_QWORD *)v12 + 4);
          *((_QWORD *)v12 + 4) = 0;
          *(_QWORD *)(v20 + 32) = v23;
          v24 = *((_QWORD *)v12 + 5);
          *((_QWORD *)v12 + 5) = 0;
          *(_QWORD *)(v20 + 40) = v24;
          v25 = v12[3];
          *(_WORD *)(v20 + 64) = *((_WORD *)v12 + 32);
          *(_OWORD *)(v20 + 48) = v25;
          v26 = *((_QWORD *)v12 + 9);
          *((_QWORD *)v12 + 9) = 0;
          *(_QWORD *)(v20 + 72) = v26;
          v27 = (_QWORD *)(v4 + 88 * v9);
          v28 = v27[10];
          v27[10] = 0;
          *(_QWORD *)(v14 + 88 * v19 + 80) = v28;
          WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>::~KeyValuePair(v27, v29);
          if (v12 == a3)
            v10 = v14 + 88 * v19;
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

void WebCore::FontCache::lastResortFallbackFont(WebCore::FontCache *this@<X0>, const WebCore::FontDescription *a2@<X1>, WTF ***a3@<X8>)
{
  WTF::MonotonicTime *v6;
  double v7;
  const WebCore::FontPlatformData *v8;
  void *v9;
  WTF **v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  const __CTFontDescriptor *LastResort;
  const __CTFont *v15;
  int v16;
  int v17;
  int v18;
  char SymbolicTraits;
  char v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  void *v25;
  __int128 v26;
  WTF *v27[2];
  WTF::StringImpl *v28;
  WebCore::Font *v29;

  v6 = (WTF::MonotonicTime *)WTF::AtomStringImpl::add();
  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)this + 3) = 0;
    WTF::MonotonicTime::now(v6);
    WebCore::TimerBase::setNextFireTime((uint64_t)this, v7 + 0.0);
  }
  v8 = (const WebCore::FontPlatformData *)WebCore::FontCache::cachedFontPlatformData(this, a2, &v28, &v26, 0);
  if (v8)
  {
    WebCore::FontCache::fontForPlatformData(this, v8, &v29);
    v10 = (WTF **)v29;
  }
  else
  {
    v10 = 0;
  }
  v11 = v27[1];
  v27[1] = 0;
  if (v11)
    WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)v11, v9);
  v12 = v28;
  v28 = 0;
  if (!v12)
  {
LABEL_11:
    if (v10)
      goto LABEL_12;
    goto LABEL_15;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v9);
  if (v10)
  {
LABEL_12:
    v13 = (*(_DWORD *)v10)++;
    *a3 = v10;
    if (v13)
    {
      *(_DWORD *)v10 = v13;
    }
    else
    {
      WebCore::Font::~Font(v10);
      WTF::fastFree(v24, v25);
    }
    return;
  }
LABEL_15:
  LastResort = (const __CTFontDescriptor *)CTFontDescriptorCreateLastResort();
  v15 = CTFontCreateWithFontDescriptor(LastResort, *((float *)a2 + 39), 0);
  if ((CTFontIsAppleColorEmoji() & 1) != 0)
    goto LABEL_26;
  v16 = *((_DWORD *)a2 + 40);
  if ((v16 & 0x6000) == 0)
    goto LABEL_26;
  v17 = *((_DWORD *)a2 + 37);
  v18 = v17 & 0xFF0000;
  if (*((__int16 *)a2 + 72) <= 2399)
  {
    if (v18)
    {
      if ((__int16)v17 < 56)
        SymbolicTraits = 0;
      else
        SymbolicTraits = CTFontGetSymbolicTraits(v15);
      v20 = 0;
      if ((v16 & 0x4000) != 0)
        goto LABEL_22;
      goto LABEL_27;
    }
LABEL_26:
    v20 = 0;
    goto LABEL_27;
  }
  SymbolicTraits = CTFontGetSymbolicTraits(v15);
  v20 = (v16 & 0x2000) != 0 && (SymbolicTraits & 2) == 0;
  if ((v16 & 0x4000) != 0)
  {
LABEL_22:
    if (v18)
      v21 = (SymbolicTraits & 1) == 0;
    else
      v21 = 0;
    goto LABEL_28;
  }
LABEL_27:
  v21 = 0;
LABEL_28:
  v29 = v15;
  if (v15)
    CFRetain(v15);
  WebCore::FontPlatformData::FontPlatformData((uint64_t)&v26, (CFTypeRef *)&v29, v20, v21, *((_DWORD *)a2 + 40) & 1, (*((_DWORD *)a2 + 40) >> 2) & 3, (*((_DWORD *)a2 + 40) >> 4) & 3, 0, *((float *)a2 + 39));
  if (v15)
  {
    CFRelease(v15);
    WebCore::FontCache::fontForPlatformData(this, (const WebCore::FontPlatformData *)&v26, a3);
    WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)&v26, v23);
    CFRelease(v15);
    if (!LastResort)
      return;
  }
  else
  {
    WebCore::FontCache::fontForPlatformData(this, (const WebCore::FontPlatformData *)&v26, a3);
    WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)&v26, v22);
    if (!LastResort)
      return;
  }
  CFRelease(LastResort);
}

uint64_t WebCore::FontCache::fontForPlatformData@<X0>(WebCore::FontCache *this@<X0>, const WebCore::FontPlatformData *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::FontCache *v4;
  uint64_t v6;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  CFHashCode v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  float *v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  CFTypeRef v33;
  const void *v34;
  float v35;
  _DWORD *v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  CFTypeRef v44;
  float v45;
  _DWORD *v46;
  int v47;
  uint64_t result;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  CFTypeRef v59;
  BOOL v61;
  _BOOL4 v62;
  int v63;
  WTF::StringImpl *v64;
  void *v65;
  const void *v66;
  WebCore::FontCache *v67;
  _QWORD *v68;

  v4 = this;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6)
    v6 = WTF::Thread::initializeCurrentTLS(this);
  v68 = a3;
  if (v6 == *((_QWORD *)v4 + 16))
  {
    v8 = *((_DWORD *)v4 + 34) + 1;
    goto LABEL_8;
  }
  if (__ldaxr((unsigned __int8 *)v4 + 140))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4 + 140))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C]();
LABEL_7:
  *((_QWORD *)v4 + 16) = v6;
  v8 = 1;
LABEL_8:
  *((_DWORD *)v4 + 34) = v8;
  v9 = (uint64_t *)*((_QWORD *)v4 + 9);
  v10 = *v9;
  if (*v9
    || (WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::expand(v9, 0), (v10 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = CFHash(*(CFTypeRef *)a2);
  v13 = (unsigned __int8 *)a2 + 24;
  v14 = (v12 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v12 - 1640531527) << 16) ^ ((unsigned __int16)v12
                                                                                             - 1640531527);
  v15 = (v12 >> 37) & 0x7FFF800 ^ ((v14 + WORD2(v12) + (v14 >> 11)) << 16) ^ (v14 + WORD2(v12) + (v14 >> 11));
  v16 = v15 + *((unsigned __int8 *)a2 + 13) + (v15 >> 11);
  v17 = (v16 ^ (v16 << 16)) + *((unsigned __int8 *)a2 + 27) + ((v16 ^ (v16 << 16)) >> 11);
  v18 = (v17 ^ (v17 << 16)) + *((unsigned __int8 *)a2 + 14) + ((v17 ^ (v17 << 16)) >> 11);
  v19 = *((unsigned __int8 *)a2 + 12);
  v20 = ((v18 ^ (v18 << 16)) + v19 + ((v18 ^ (v18 << 16)) >> 11)) ^ (((v18 ^ (v18 << 16))
                                                                    + v19
                                                                    + ((v18 ^ (v18 << 16)) >> 11)) << 16);
  v21 = (v20 + v19 + (v20 >> 11)) ^ ((v20 + v19 + (v20 >> 11)) << 16);
  v22 = v21 + *((unsigned __int8 *)a2 + 24) + (v21 >> 11);
  v23 = (v22 ^ (v22 << 16)) + *((unsigned __int8 *)a2 + 25) + ((v22 ^ (v22 << 16)) >> 11);
  v24 = (v23 ^ (v23 << 16)) + ((v23 ^ (v23 << 16)) >> 11);
  v25 = (v24 ^ (8 * v24)) + ((v24 ^ (8 * v24)) >> 5);
  v26 = (v25 ^ (4 * v25)) + ((v25 ^ (4 * v25)) >> 15);
  v27 = v26 ^ (v26 << 10);
  if (!v27)
    v27 = 0x800000;
  v28 = (float *)((char *)a2 + 8);
  v29 = v27 & v11;
  v30 = v10 + 40 * (v27 & v11);
  if ((WTF::HashTraitsEmptyValueChecker<WebCore::FontDataCacheKeyTraits,false>::isEmptyValue<WebCore::FontPlatformData>(v30) & 1) != 0)
  {
    v32 = v9;
  }
  else
  {
    v67 = v4;
    v57 = 0;
    v58 = 1;
    do
    {
      result = *(_QWORD *)v30;
      v59 = *(CFTypeRef *)a2;
      if (*(_QWORD *)v30)
        _ZF = v59 == 0;
      else
        _ZF = 1;
      if (_ZF)
      {
        v62 = result == (_QWORD)v59;
      }
      else
      {
        result = CFEqual((CFTypeRef)result, v59);
        v62 = result != 0;
      }
      v61 = v62 && *(unsigned __int8 *)(v30 + 27) == *((unsigned __int8 *)a2 + 27);
      if (v61
        && *(float *)(v30 + 8) == *v28
        && *(unsigned __int8 *)(v30 + 24) == *v13
        && *(unsigned __int8 *)(v30 + 25) == *((unsigned __int8 *)a2 + 25)
        && *(unsigned __int8 *)(v30 + 26) == *((unsigned __int8 *)a2 + 26)
        && (*(_BYTE *)(v30 + 12) == 0) != (*((_BYTE *)a2 + 12) != 0)
        && *(unsigned __int8 *)(v30 + 13) == *((unsigned __int8 *)a2 + 13)
        && *(unsigned __int8 *)(v30 + 14) == *((unsigned __int8 *)a2 + 14))
      {
        v4 = v67;
        v50 = v68;
        goto LABEL_37;
      }
      if (*(_BYTE *)(v30 + 27))
        v57 = v30;
      v29 = (v29 + v58) & v11;
      v30 = v10 + 40 * v29;
      ++v58;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WebCore::FontDataCacheKeyTraits,false>::isEmptyValue<WebCore::FontPlatformData>(v30));
    v4 = v67;
    v32 = v9;
    if (v57)
    {
      *(_QWORD *)(v57 + 32) = 0;
      *(_OWORD *)v57 = 0u;
      *(_OWORD *)(v57 + 16) = 0u;
      --*(_DWORD *)(*v9 - 16);
      v30 = v57;
    }
  }
  v33 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v34 = *(const void **)v30;
  *(_QWORD *)v30 = v33;
  if (v34)
    CFRelease(v34);
  v35 = *v28;
  *(_DWORD *)(v30 + 11) = *(_DWORD *)((char *)a2 + 11);
  *(float *)(v30 + 8) = v35;
  v36 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v36)
    ++*v36;
  v37 = *(uint64_t **)(v30 + 16);
  *(_QWORD *)(v30 + 16) = v36;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      v64 = (WTF::StringImpl *)v37[3];
      v37[3] = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v31);
        else
          *(_DWORD *)v64 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v37 + 2, v31);
      v66 = (const void *)v37[1];
      v37[1] = 0;
      if (v66)
        CFRelease(v66);
      WTF::fastFree((WTF *)v37, v65);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  v38 = *(_DWORD *)v13;
  *(_DWORD *)(v30 + 27) = *(_DWORD *)((char *)a2 + 27);
  *(_DWORD *)(v30 + 24) = v38;
  v39 = WTF::fastMalloc((WTF *)0x160);
  *(_DWORD *)v39 = 1;
  *(_QWORD *)(v39 + 8) = 0;
  *(_DWORD *)(v39 + 16) = 1000;
  _Q0 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v39 + 20) = _Q0;
  *(int32x4_t *)(v39 + 36) = _Q0;
  *(_QWORD *)(v39 + 52) = _Q0.i64[0];
  *(_QWORD *)(v39 + 68) = 0;
  *(_QWORD *)(v39 + 60) = 0;
  *(_DWORD *)(v39 + 76) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v39 + 80) = _Q0.i64[0];
  v44 = *(CFTypeRef *)a2;
  *(_QWORD *)(v39 + 88) = *(_QWORD *)a2;
  if (v44)
    CFRetain(v44);
  v45 = *v28;
  *(_DWORD *)(v39 + 99) = *(_DWORD *)((char *)a2 + 11);
  *(float *)(v39 + 96) = v45;
  v46 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v46)
    ++*v46;
  *(_QWORD *)(v39 + 104) = v46;
  v47 = *(_DWORD *)v13;
  *(_DWORD *)(v39 + 115) = *(_DWORD *)((char *)a2 + 27);
  *(_DWORD *)(v39 + 112) = v47;
  *(_QWORD *)(v39 + 120) = 0;
  *(_BYTE *)(v39 + 128) = 0;
  *(_QWORD *)(v39 + 200) = 0;
  *(_QWORD *)(v39 + 208) = 0;
  *(_QWORD *)(v39 + 216) = 0;
  *(_QWORD *)(v39 + 224) = 0x8000000000000000;
  *(_QWORD *)(v39 + 232) = 0;
  *(_QWORD *)(v39 + 240) = 0;
  *(_BYTE *)(v39 + 248) = 0;
  *(_BYTE *)(v39 + 256) = *(_BYTE *)(v39 + 256) & 0xF0 | 1;
  *(_QWORD *)(v39 + 264) = 0;
  *(_DWORD *)(v39 + 280) = 0;
  *(_BYTE *)(v39 + 288) = 0;
  *(_BYTE *)(v39 + 296) = 0;
  *(_BYTE *)(v39 + 304) = 0;
  *(_BYTE *)(v39 + 320) = 0;
  *(_DWORD *)(v39 + 328) = 33686018;
  *(_DWORD *)(v39 + 340) = 0;
  *(_QWORD *)(v39 + 332) = 0;
  *(_BYTE *)(v39 + 344) = *(_BYTE *)(v39 + 344) & 0x80 | 0x20;
  WebCore::Font::platformInit((WebCore::Font *)v39);
  WebCore::Font::platformGlyphInit((WebCore::Font *)v39);
  WebCore::Font::platformCharWidthInit((WebCore::Font *)v39);
  result = *(_QWORD *)(v30 + 32);
  *(_QWORD *)(v30 + 32) = v39;
  if (result)
    result = (uint64_t)WTF::RefCounted<WebCore::Font>::deref((WebCore::Font *)result);
  v49 = *v32;
  v50 = v68;
  if (*v32)
    v51 = *(_DWORD *)(v49 - 12) + 1;
  else
    v51 = 1;
  *(_DWORD *)(v49 - 12) = v51;
  v52 = *v32;
  if (*v32)
    v53 = *(_DWORD *)(v52 - 12);
  else
    v53 = 0;
  v54 = (*(_DWORD *)(v52 - 16) + v53);
  v55 = *(unsigned int *)(v52 - 4);
  if (v55 <= 0x400)
  {
    if (3 * v55 > 4 * v54)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v55 <= 2 * v54)
  {
LABEL_36:
    result = WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::expand(v32, v30);
    v30 = result;
  }
LABEL_37:
  v56 = *(_DWORD **)(v30 + 32);
  ++*v56;
  *v50 = v56;
  LODWORD(v56) = *((_DWORD *)v4 + 34) - 1;
  *((_DWORD *)v4 + 34) = (_DWORD)v56;
  if ((_DWORD)v56)
    return result;
  *((_QWORD *)v4 + 16) = 0;
  result = (uint64_t)v4 + 140;
  v63 = __ldxr((unsigned __int8 *)v4 + 140);
  if (v63 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  if (__stlxr(0, (unsigned __int8 *)result))
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  return result;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WebCore::FontDataCacheKeyTraits,false>::isEmptyValue<WebCore::FontPlatformData>(uint64_t a1)
{
  const void *v2;
  BOOL v3;
  uint64_t result;

  if ((_MergedGlobals_225 & 1) == 0)
  {
    WebCore::FontPlatformData::FontPlatformData((uint64_t)&qword_1ECE83C20, 0, 0, 0, 0, 0, 0, 0.0);
    _MergedGlobals_225 = 1;
  }
  v2 = *(const void **)a1;
  if (*(_QWORD *)a1)
    v3 = qword_1ECE83C20 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (v2 != (const void *)qword_1ECE83C20)
      return 0;
LABEL_12:
    if (*(unsigned __int8 *)(a1 + 27) == byte_1ECE83C3B
      && *(float *)(a1 + 8) == *(float *)&dword_1ECE83C28
      && *(unsigned __int8 *)(a1 + 24) == byte_1ECE83C38
      && *(unsigned __int8 *)(a1 + 25) == byte_1ECE83C39
      && *(unsigned __int8 *)(a1 + 26) == byte_1ECE83C3A
      && (*(_BYTE *)(a1 + 12) == 0) != (byte_1ECE83C2C != 0)
      && *(unsigned __int8 *)(a1 + 13) == byte_1ECE83C2D)
    {
      return *(unsigned __int8 *)(a1 + 14) == byte_1ECE83C2E;
    }
    return 0;
  }
  result = CFEqual(v2, (CFTypeRef)qword_1ECE83C20);
  if ((_DWORD)result)
    goto LABEL_12;
  return result;
}

uint64_t WTF::computeHash<WebCore::FontPlatformDataCacheKey>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int16 v28;
  char v29;

  v27 = -1640531527;
  v28 = 0;
  v29 = 0;
  WTF::add<float,WebCore::FontSelectionRequest,std::array<unsigned int,2ul>,WTF::AtomString>(&v27, (_DWORD *)(a1 + 4), (unsigned __int16 *)(a1 + 8), (_DWORD *)(a1 + 16), (_QWORD *)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WTF::add<WebCore::FontTaggedSettings<int>,WebCore::FontTaggedSettings<float>,WebCore::FontVariantAlternates,WebCore::FontPalette,WebCore::FontSizeAdjust>(&v27, v2 + 8, v2 + 24, v2 + 40, (unsigned __int8 *)(v2 + 112), (unsigned __int8 *)(v2 + 128));
  WebCore::add(&v27, (uint64_t *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
    WTF::add<WebCore::FontTaggedSettings<int>>(&v27, *(unsigned int **)(v3 + 8), *(_DWORD *)(v3 + 20));
  v4 = ((v27 + *(unsigned __int8 *)(a1 + 52)) ^ ((v27 + *(unsigned __int8 *)(a1 + 52)) << 16))
     + (((v27 + *(unsigned __int8 *)(a1 + 52)) ^ ((v27 + *(unsigned __int8 *)(a1 + 52)) << 16)) >> 11);
  if (*(_BYTE *)(a1 + 52))
  {
    v21 = (v4 + *(unsigned __int16 *)(a1 + 48)) ^ ((v4 + *(unsigned __int16 *)(a1 + 48)) << 16);
    v22 = (v21 + *(unsigned __int16 *)(a1 + 50) + (v21 >> 11)) ^ ((v21 + *(unsigned __int16 *)(a1 + 50) + (v21 >> 11)) << 16);
    v4 = v22 + (v22 >> 11);
  }
  v5 = ((v4 + *(unsigned __int8 *)(a1 + 58)) ^ ((v4 + *(unsigned __int8 *)(a1 + 58)) << 16))
     + (((v4 + *(unsigned __int8 *)(a1 + 58)) ^ ((v4 + *(unsigned __int8 *)(a1 + 58)) << 16)) >> 11);
  if (*(_BYTE *)(a1 + 58))
  {
    v23 = (v5 + *(unsigned __int16 *)(a1 + 54)) ^ ((v5 + *(unsigned __int16 *)(a1 + 54)) << 16);
    v24 = (v23 + *(unsigned __int16 *)(a1 + 56) + (v23 >> 11)) ^ ((v23 + *(unsigned __int16 *)(a1 + 56) + (v23 >> 11)) << 16);
    v5 = v24 + (v24 >> 11);
  }
  v6 = *(unsigned __int8 *)(a1 + 64);
  v7 = ((v5 + v6) ^ ((v5 + v6) << 16)) + (((v5 + v6) ^ ((v5 + v6) << 16)) >> 11);
  v27 = v7;
  if (v6)
  {
    v25 = (v7 + *(unsigned __int16 *)(a1 + 60)) ^ ((v7 + *(unsigned __int16 *)(a1 + 60)) << 16);
    v26 = (v25 + *(unsigned __int16 *)(a1 + 62) + (v25 >> 11)) ^ ((v25 + *(unsigned __int16 *)(a1 + 62) + (v25 >> 11)) << 16);
    v27 = v26 + (v26 >> 11);
  }
  if (!v3)
    goto LABEL_12;
  WebCore::add(&v27, (unint64_t *)(v3 + 24));
  v16 = *(_QWORD *)(a1 + 72);
  if (!v16)
    goto LABEL_12;
  v17 = *(_DWORD **)(v16 + 56);
  if (v17)
  {
    v18 = v17[2];
    v17[2] = v18 + 1;
    if (v18)
    {
      v17[2] = v18;
    }
    else
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      v16 = *(_QWORD *)(a1 + 72);
    }
    v19 = *(_QWORD *)(v16 + 56);
    ++*(_DWORD *)(v19 + 8);
    WebCore::add(&v27, (_QWORD *)v19);
    if (*(_DWORD *)(v19 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    else
      --*(_DWORD *)(v19 + 8);
  }
  v20 = *(_QWORD *)(a1 + 72);
  if (!v20)
  {
LABEL_12:
    v8 = 1065353216;
LABEL_13:
    v9 = (v8 >> 5) & 0x7FFF800 ^ ((v27 + (unsigned __int16)v8) << 16) ^ (v27 + (unsigned __int16)v8);
    v10 = v9 + (v9 >> 11);
    goto LABEL_14;
  }
  if (*(float *)(v20 + 64) != 0.0)
  {
    v8 = *(_DWORD *)(v20 + 64);
    goto LABEL_13;
  }
  v10 = v27;
LABEL_14:
  if (v29)
  {
    v15 = (v10 + v28) ^ ((v10 + v28) << 11);
    v10 = v15 + (v15 >> 17);
  }
  v11 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
  v12 = (v11 ^ (4 * v11)) + ((v11 ^ (4 * v11)) >> 15);
  v13 = v12 ^ (v12 << 10);
  if (v13)
    return v13;
  else
    return 0x800000;
}

WebCore::FontCascadeFonts *WebCore::FontCache::updateFontCascade(uint64_t a1, uint64_t a2, WebCore **a3)
{
  void *v4;
  WebCore::FontCascadeFonts *v5;
  WebCore::FontCascadeFonts *v6;
  unsigned int v7;
  unsigned int v8;
  WebCore::FontCascadeFonts *result;
  WTF *v10;
  void *v11;
  WTF *v12;
  void *v13;
  WebCore::FontCascadeFonts *v14;

  WebCore::FontCascadeCache::retrieveOrAddCachedFonts((uint64_t *)(a1 + 80), (const WebCore::FontDescription *)(a2 + 16), a3, &v14);
  v5 = v14;
  v14 = 0;
  v6 = *(WebCore::FontCascadeFonts **)(a2 + 216);
  *(_QWORD *)(a2 + 216) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v6, v4);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  do
  {
    v7 = __ldaxr(&WebCore::lastFontCascadeGeneration);
    v8 = v7 + 1;
  }
  while (__stlxr(v8, &WebCore::lastFontCascadeGeneration));
  *(_DWORD *)(a2 + 224) = v8;
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(result, v4);
      return (WebCore::FontCascadeFonts *)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::FontCascadeCache::retrieveOrAddCachedFonts@<X0>(uint64_t *a1@<X0>, const WebCore::FontDescription *a2@<X1>, WebCore **a3@<X2>, _QWORD *a4@<X8>)
{
  WebCore *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t i;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  int v17;
  WTF *v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl *v24;
  unsigned __int8 *v25;
  int j;
  unsigned int v27;
  unsigned __int8 *v28;
  float v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  WTF::StringImpl *v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  _DWORD *v51;
  WTF *v52;
  WTF::StringImpl *v54;
  WTF::StringImpl *result;
  WTF *v56;
  WTF *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  __int128 v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  unsigned int v69;
  int v70;
  WTF *v71;
  uint64_t v72;
  _QWORD *v73;
  WTF *v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  int v80;
  WTF::StringImpl **v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WebCore::FontCascadeCacheEntry *v85;
  WTF *v86;
  void *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  WTF::StringImpl **v95;
  WTF *v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  WebCore *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  WTF *v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  WebCore::FontCascadeCacheEntry *v115;
  WTF *v116;
  void *v117;
  _DWORD *v118;
  unint64_t v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  _QWORD *v122;
  WTF *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  unsigned int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  WebCore **v136;
  uint64_t *v137;
  unsigned __int8 *v138;
  _QWORD *v139;
  WTF *v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  WTF *v144;
  int v145;
  unsigned int v146;
  _BYTE v147[24];
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  WTF::StringImpl *v152[2];
  WTF *v153;
  uint64_t v154;
  _BYTE v155[24];
  uint64_t v156;

  v8 = *a3;
  v9 = *(unsigned int *)(*((_QWORD *)a2 + 21) + 4);
  WebCore::FontDescriptionKey::FontDescriptionKey((WebCore::FontDescriptionKey *)&v150, a2);
  v11 = (WTF *)v155;
  v153 = (WTF *)v155;
  v154 = 3;
  if (v9 >= 4)
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x194167940);
    }
    v56 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
    LODWORD(v154) = v9;
    v153 = v56;
LABEL_3:
    for (i = 0; i != v9; ++i)
    {
      v13 = *((_QWORD *)a2 + 21);
      if (*(_DWORD *)(v13 + 4) <= i)
        goto LABEL_235;
      v14 = *(WTF::StringImpl **)(v13 + 8 * i + 8);
      if (v14)
      {
        v15 = *(_DWORD *)v14;
        v16 = HIDWORD(v154);
        v17 = HIDWORD(v154) + 1;
        v18 = v153;
        *(_DWORD *)v14 += 4;
        *((_QWORD *)v18 + v16) = v14;
        HIDWORD(v154) = v17;
        v19 = v15 + 2;
        if (v19)
          *(_DWORD *)v14 = v19;
        else
          WTF::StringImpl::destroy(v14, v10);
      }
      else
      {
        v132 = HIDWORD(v154) + 1;
        *((_QWORD *)v153 + HIDWORD(v154)) = 0;
        HIDWORD(v154) = v132;
      }
    }
    goto LABEL_11;
  }
  if ((_DWORD)v9)
    goto LABEL_3;
LABEL_11:
  if (v8)
  {
    LODWORD(v156) = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 72))(v8);
    v20 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 80))(v8);
  }
  else
  {
    v20 = 0;
    LODWORD(v156) = 0;
  }
  v136 = a3;
  v137 = a1;
  HIDWORD(v156) = v20;
  v21 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::expand(a1),
        (v21 = *a1) != 0))
  {
    v22 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v22 = 0;
  }
  v23 = WTF::computeHash<WebCore::FontCascadeCacheKey>((uint64_t)&v150);
  v25 = 0;
  for (j = 0; ; v23 = v27 + j)
  {
    v27 = v23 & v22;
    v28 = (unsigned __int8 *)(v21 + 96 * (v23 & v22));
    v29 = *((float *)v28 + 1);
    if (*v28 || v29 != 0.0)
    {
      if (*v28)
      {
        v25 = (unsigned __int8 *)(v21 + 96 * v27);
        goto LABEL_46;
      }
      goto LABEL_42;
    }
    if ((float)((float)*((__int16 *)v28 + 4) * 0.25) == 0.0)
    {
      v30 = (float)((float)*((__int16 *)v28 + 5) * 0.25) == 0.0 && v28[14] == 0;
      v31 = v30 && *((_QWORD *)v28 + 2) == 0;
      v32 = v31 && *((_QWORD *)v28 + 3) == 0;
      v33 = v32 && *((_QWORD *)v28 + 4) == 0;
      v34 = v33 && *((_DWORD *)v28 + 13) == 0;
      v35 = v34 && *((_DWORD *)v28 + 20) == 0;
      if (v35 && !*((_DWORD *)v28 + 21))
        break;
    }
LABEL_42:
    v36 = *v28 == v150 && v29 == *((float *)&v150 + 1);
    if (v36
      && (float)((float)*((__int16 *)v28 + 4) * 0.25) == (float)((float)SWORD4(v150) * 0.25)
      && (float)((float)*((__int16 *)v28 + 5) * 0.25) == (float)((float)SWORD5(v150) * 0.25))
    {
      if (!v28[14] || BYTE14(v150) == 0)
      {
        if ((v28[14] != 0) != (BYTE14(v150) != 0))
          goto LABEL_46;
      }
      else if ((float)((float)*((__int16 *)v28 + 6) * 0.25) != (float)((float)SWORD6(v150) * 0.25))
      {
        goto LABEL_46;
      }
      if (*((_QWORD *)v28 + 2) == v151 && *((WTF::StringImpl **)v28 + 3) == v152[0])
      {
        v38 = (WTF::StringImpl *)*((_QWORD *)v28 + 4);
        v24 = v152[1];
        if (v38 == v152[1]
          || v38 && v152[1] && WebCore::FontDescriptionKeyRareData::operator==((uint64_t)v38, (uint64_t)v152[1]))
        {
          v39 = *((unsigned int *)v28 + 13);
          if ((_DWORD)v39 == HIDWORD(v154))
          {
            if (!(_DWORD)v39)
              goto LABEL_77;
            v138 = v25;
            v139 = a4;
            v140 = v11;
            v40 = 0;
            v41 = 0;
            v42 = *((_QWORD *)v28 + 5);
            v43 = v153;
            while (1)
            {
              v44 = *(_QWORD *)(v42 + 8 * v41);
              v45 = *((_QWORD *)v43 + v41);
              if (v44)
                v46 = v45 == 0;
              else
                v46 = 1;
              if (v46)
              {
                if (v44 != v45)
                  goto LABEL_76;
              }
              else
              {
                v47 = WTF::StringImpl::startsWith();
                v48 = *(_QWORD *)(v42 + 8 * v41);
                v49 = *((_QWORD *)v43 + v41);
                if ((v47 & 1) != 0 || v48 == v49)
                {
                  if (v47)
                    v50 = v48 == v49;
                  else
                    v50 = 1;
                  if (!v50)
                  {
LABEL_76:
                    a4 = v139;
                    v11 = v140;
                    v25 = v138;
                    if (v40)
                    {
LABEL_77:
                      if (*((_QWORD *)v28 + 10) == v156)
                      {
                        v51 = *(_DWORD **)(*(_QWORD *)(v21 + 96 * v27 + 88) + 88);
                        ++*v51;
                        *a4 = v51;
                        goto LABEL_79;
                      }
                    }
                    break;
                  }
                }
                else
                {
                  v24 = (WTF::StringImpl *)*(unsigned int *)(v48 + 4);
                  if ((_DWORD)v24 != *(_DWORD *)(v49 + 4))
                    goto LABEL_76;
                  v133 = *(_DWORD *)(v49 + 16);
                  v134 = *(_QWORD *)(v48 + 8);
                  v135 = *(_QWORD *)(v49 + 8);
                  if ((*(_BYTE *)(v48 + 16) & 4) != 0)
                  {
                    if ((v133 & 4) != 0)
                    {
                      if (!WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(v134, (unint64_t)v24, v135, (unint64_t)v24, (unint64_t)v24))goto LABEL_76;
                    }
                    else if (!WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(v134, (unint64_t)v24, v135, (unint64_t)v24, (unint64_t)v24))
                    {
                      goto LABEL_76;
                    }
                  }
                  else if ((v133 & 4) != 0)
                  {
                    if (!WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(v134, (unint64_t)v24, v135, (unint64_t)v24, (unint64_t)v24))goto LABEL_76;
                  }
                  else if (!WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(v134, (unint64_t)v24, v135, (unint64_t)v24, (unint64_t)v24))
                  {
                    goto LABEL_76;
                  }
                }
              }
              v40 = ++v41 >= v39;
              if (v39 == v41)
                goto LABEL_76;
            }
          }
        }
      }
    }
LABEL_46:
    ++j;
  }
  if (v25)
  {
    *(_OWORD *)v25 = 0u;
    *((_OWORD *)v25 + 1) = 0u;
    *((_QWORD *)v25 + 4) = 0;
    *((_QWORD *)v25 + 5) = v25 + 56;
    *((_QWORD *)v25 + 6) = 3;
    *((_QWORD *)v25 + 10) = 0;
    *((_QWORD *)v25 + 11) = 0;
    --*(_DWORD *)(*v137 - 16);
    v28 = v25;
  }
  v60 = v150;
  *((_QWORD *)v28 + 2) = v151;
  *(_OWORD *)v28 = v60;
  v61 = v152[0];
  if (v152[0])
    *(_DWORD *)v152[0] += 2;
  v62 = (WTF::StringImpl *)*((_QWORD *)v28 + 3);
  *((_QWORD *)v28 + 3) = v61;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v24);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = v152[1];
  if (v152[1])
    ++*(_DWORD *)v152[1];
  v64 = *((_QWORD *)v28 + 4);
  *((_QWORD *)v28 + 4) = v63;
  if (v64)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v64, v24);
  if (v28 != (unsigned __int8 *)&v150)
  {
    v65 = *((unsigned int *)v28 + 13);
    v66 = HIDWORD(v154);
    if (v65 > HIDWORD(v154))
    {
      WTF::VectorTypeOperations<WebCore::FontFamilyName>::destruct((WTF::StringImpl *)(*((_QWORD *)v28 + 5) + 8 * HIDWORD(v154)), (WTF::StringImpl *)(*((_QWORD *)v28 + 5) + 8 * v65));
      *((_DWORD *)v28 + 13) = v66;
      v65 = v66;
    }
    else
    {
      v67 = *((_DWORD *)v28 + 12);
      if (HIDWORD(v154) > v67)
      {
        if (v67)
        {
          v68 = (WTF::StringImpl *)*((_QWORD *)v28 + 5);
          if ((_DWORD)v65)
          {
            WTF::VectorTypeOperations<WebCore::FontFamilyName>::destruct(v68, (WTF::StringImpl *)((char *)v68 + 8 * v65));
            *((_DWORD *)v28 + 13) = 0;
            v68 = (WTF::StringImpl *)*((_QWORD *)v28 + 5);
          }
          if (v28 + 56 != (unsigned __int8 *)v68 && v68)
          {
            *((_QWORD *)v28 + 5) = 0;
            *((_DWORD *)v28 + 12) = 0;
            WTF::fastFree(v68, v24);
            v68 = (WTF::StringImpl *)*((_QWORD *)v28 + 5);
          }
          if (v68)
          {
            v69 = *((_DWORD *)v28 + 12);
          }
          else
          {
            *((_QWORD *)v28 + 5) = v28 + 56;
            v69 = 3;
            *((_DWORD *)v28 + 12) = 3;
          }
        }
        else
        {
          v69 = 0;
        }
        v70 = HIDWORD(v154);
        if (v69 < HIDWORD(v154))
        {
          v71 = (WTF *)*((_QWORD *)v28 + 5);
          v72 = *((unsigned int *)v28 + 13);
          if (HIDWORD(v154) >= 4)
          {
            if (!(HIDWORD(v154) >> 29))
            {
              v73 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v154)));
              *((_DWORD *)v28 + 12) = v70;
              *((_QWORD *)v28 + 5) = v73;
              goto LABEL_127;
            }
LABEL_235:
            __break(0xC471u);
            JUMPOUT(0x1941677D4);
          }
          v73 = v28 + 56;
          *((_QWORD *)v28 + 5) = v28 + 56;
          *((_DWORD *)v28 + 12) = 3;
LABEL_127:
          if ((_DWORD)v72)
          {
            v127 = 8 * v72;
            v128 = (WTF::StringImpl **)v71;
            do
            {
              v129 = *v128;
              *v128 = 0;
              *v73 = v129;
              v130 = *v128;
              *v128 = 0;
              if (v130)
              {
                if (*(_DWORD *)v130 == 2)
                  WTF::StringImpl::destroy(v130, v24);
                else
                  *(_DWORD *)v130 -= 2;
              }
              ++v73;
              ++v128;
              v127 -= 8;
            }
            while (v127);
          }
          if (v28 + 56 != (unsigned __int8 *)v71 && v71)
          {
            if (*((WTF **)v28 + 5) == v71)
            {
              *((_QWORD *)v28 + 5) = 0;
              *((_DWORD *)v28 + 12) = 0;
            }
            WTF::fastFree(v71, v24);
          }
        }
        v65 = *((unsigned int *)v28 + 13);
      }
      LODWORD(v66) = v65;
    }
    v74 = v153;
    v75 = (WTF::StringImpl **)*((_QWORD *)v28 + 5);
    if ((_DWORD)v66)
    {
      v76 = 8 * v65;
      do
      {
        v77 = *(WTF::StringImpl **)v74;
        if (*(_QWORD *)v74)
          *(_DWORD *)v77 += 2;
        v78 = *v75;
        *v75 = v77;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v24);
          else
            *(_DWORD *)v78 -= 2;
        }
        v74 = (WTF *)((char *)v74 + 8);
        ++v75;
        v76 -= 8;
      }
      while (v76);
      v74 = v153;
      v79 = *((_DWORD *)v28 + 13);
      v75 = (WTF::StringImpl **)*((_QWORD *)v28 + 5);
    }
    else
    {
      v79 = 0;
    }
    v80 = HIDWORD(v154);
    if (v79 != HIDWORD(v154))
    {
      v81 = &v75[v79];
      v82 = (WTF::StringImpl **)((char *)v74 + 8 * v79);
      v83 = 8 * HIDWORD(v154) - 8 * v79;
      do
      {
        v84 = *v82;
        if (*v82)
          *(_DWORD *)v84 += 2;
        *v81++ = v84;
        ++v82;
        v83 -= 8;
      }
      while (v83);
    }
    *((_DWORD *)v28 + 13) = v80;
  }
  v85 = (WebCore::FontCascadeCacheEntry *)*((_QWORD *)v28 + 11);
  *((_QWORD *)v28 + 10) = v156;
  *((_QWORD *)v28 + 11) = 0;
  if (v85)
  {
    WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry(v85, v24);
    WTF::fastFree(v86, v87);
  }
  v88 = *v137;
  if (*v137)
    v89 = *(_DWORD *)(v88 - 12) + 1;
  else
    v89 = 1;
  *(_DWORD *)(v88 - 12) = v89;
  v90 = *v137;
  if (*v137)
    v91 = *(_DWORD *)(v90 - 12);
  else
    v91 = 0;
  v92 = (*(_DWORD *)(v90 - 16) + v91);
  v93 = *(unsigned int *)(v90 - 4);
  if (v93 > 0x400)
  {
    if (v93 > 2 * v92)
      goto LABEL_159;
    goto LABEL_196;
  }
  if (3 * v93 <= 4 * v92)
  {
    if (!(_DWORD)v93)
    {
      v131 = 8;
      goto LABEL_211;
    }
LABEL_196:
    v131 = (_DWORD)v93 << (6 * *(_DWORD *)(v90 - 12) >= (2 * v93));
LABEL_211:
    v28 = (unsigned __int8 *)WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::rehash(v137, v131, (__int128 *)v28);
  }
LABEL_159:
  v141 = v150;
  v142 = v151;
  v94 = *(_OWORD *)v152;
  v152[0] = 0;
  v152[1] = 0;
  v143 = v94;
  v95 = (WTF::StringImpl **)v147;
  v144 = (WTF *)v147;
  v145 = 3;
  v96 = v153;
  if (v153 == v11)
  {
    if (HIDWORD(v154))
    {
      v121 = 8 * HIDWORD(v154);
      v122 = v147;
      v123 = v11;
      do
      {
        *v122++ = *(_QWORD *)v123;
        *(_QWORD *)v123 = 0;
        v123 = (WTF *)((char *)v123 + 8);
        v121 -= 8;
      }
      while (v121);
    }
  }
  else
  {
    v153 = v11;
    v144 = v96;
    v97 = v154;
    LODWORD(v154) = 3;
    v145 = v97;
  }
  v98 = HIDWORD(v154);
  HIDWORD(v154) = 0;
  v146 = v98;
  v148 = v156;
  v99 = WTF::fastMalloc((WTF *)0xA0);
  *(_DWORD *)v99 = 1;
  *(_QWORD *)(v99 + 8) = v99 + 24;
  *(_QWORD *)(v99 + 16) = 1;
  *(_DWORD *)(v99 + 64) = 0;
  *(_OWORD *)(v99 + 72) = 0u;
  *(_OWORD *)(v99 + 88) = 0u;
  *(_QWORD *)(v99 + 104) = 0;
  v100 = *v136;
  if (*v136)
  {
    ++*((_DWORD *)v100 + 2);
    *(_QWORD *)(v99 + 112) = v100;
    *(_QWORD *)(v99 + 120) = 0x1400000014;
    *(_QWORD *)(v99 + 128) = 0;
    *(_QWORD *)(v99 + 136) = 0;
    v100 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v100 + 80))(v100);
  }
  else
  {
    *(_QWORD *)(v99 + 112) = 0;
    *(_QWORD *)(v99 + 120) = 0x1400000014;
    *(_QWORD *)(v99 + 128) = 0;
    *(_QWORD *)(v99 + 136) = 0;
  }
  *(_DWORD *)(v99 + 144) = (_DWORD)v100;
  v101 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v101 || (v102 = *(_QWORD *)(v101 + 96)) == 0)
    v102 = WebCore::threadGlobalDataSlow(v100);
  v103 = *(_QWORD *)(v102 + 80);
  if (!v103)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v102);
    v103 = *(_QWORD *)(v102 + 80);
  }
  *(_WORD *)(v99 + 148) = *(_WORD *)(v103 + 120);
  *(_WORD *)(v99 + 150) = 0;
  *(_BYTE *)(v99 + 152) = *(_BYTE *)(v99 + 152) & 0xFC | 2;
  v149 = v99;
  v104 = WTF::fastMalloc((WTF *)0x60);
  v106 = v104;
  v107 = v142;
  *(_OWORD *)v104 = v141;
  *(_QWORD *)(v104 + 16) = v107;
  v108 = v143;
  *(_QWORD *)&v143 = 0;
  *(_QWORD *)(v104 + 24) = v108;
  v109 = *((_QWORD *)&v143 + 1);
  *((_QWORD *)&v143 + 1) = 0;
  v110 = (WTF::StringImpl **)(v104 + 56);
  *(_QWORD *)(v104 + 32) = v109;
  *(_QWORD *)(v104 + 40) = v104 + 56;
  *(_QWORD *)(v104 + 48) = 3;
  v111 = v144;
  if (v144 == (WTF *)v147)
  {
    if (v146)
    {
      v124 = 8 * v146;
      do
      {
        v125 = *v95;
        *v95 = 0;
        *v110 = v125;
        v126 = *v95;
        *v95 = 0;
        if (v126)
        {
          if (*(_DWORD *)v126 == 2)
            WTF::StringImpl::destroy(v126, v105);
          else
            *(_DWORD *)v126 -= 2;
        }
        ++v110;
        ++v95;
        v124 -= 8;
      }
      while (v124);
    }
  }
  else
  {
    v144 = (WTF *)v147;
    *(_QWORD *)(v104 + 40) = v111;
    v112 = v145;
    v145 = 3;
    *(_DWORD *)(v104 + 48) = v112;
  }
  v113 = v146;
  v146 = 0;
  *(_DWORD *)(v106 + 52) = v113;
  *(_QWORD *)(v106 + 80) = v148;
  v114 = v149;
  v149 = 0;
  *(_QWORD *)(v106 + 88) = v114;
  v115 = (WebCore::FontCascadeCacheEntry *)*((_QWORD *)v28 + 11);
  *((_QWORD *)v28 + 11) = v106;
  if (v115)
  {
    WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry(v115, v105);
    WTF::fastFree(v116, v117);
  }
  WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry((WebCore::FontCascadeCacheEntry *)&v141, v105);
  v118 = *(_DWORD **)(*((_QWORD *)v28 + 11) + 88);
  ++*v118;
  *a4 = v118;
  ++WebCore::FontCascadeCache::retrieveOrAddCachedFonts(WebCore::FontCascadeDescription const&,WTF::RefPtr<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>> &&)::pruneCounter;
  HIDWORD(v119) = -1030792151
                * WebCore::FontCascadeCache::retrieveOrAddCachedFonts(WebCore::FontCascadeDescription const&,WTF::RefPtr<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>> &&)::pruneCounter;
  LODWORD(v119) = -1030792151
                * WebCore::FontCascadeCache::retrieveOrAddCachedFonts(WebCore::FontCascadeDescription const&,WTF::RefPtr<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>> &&)::pruneCounter;
  if ((v119 >> 1) <= 0x51EB851)
    WebCore::FontCascadeCache::pruneUnreferencedEntries((uint64_t)v137, v24);
  if (*v137 && *(_DWORD *)(*v137 - 12) >= 0x191u)
  {
    v120 = (WTF::StringImpl *)WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::random(v137);
    WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::remove((WebCore::FontCascadeCacheEntry *)v137, v120);
  }
LABEL_79:
  if (HIDWORD(v154))
  {
    v57 = v153;
    v58 = 8 * HIDWORD(v154);
    do
    {
      v59 = *(WTF::StringImpl **)v57;
      *(_QWORD *)v57 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v24);
        else
          *(_DWORD *)v59 -= 2;
      }
      v57 = (WTF *)((char *)v57 + 8);
      v58 -= 8;
    }
    while (v58);
  }
  v52 = v153;
  if (v11 != v153 && v153 != 0)
  {
    v153 = 0;
    LODWORD(v154) = 0;
    WTF::fastFree(v52, v24);
  }
  v54 = v152[1];
  v152[1] = 0;
  if (v54)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref((uint64_t)v54, v24);
  result = v152[0];
  v152[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::add<float,WebCore::FontSelectionRequest,std::array<unsigned int,2ul>,WTF::AtomString>(unsigned int *result, _DWORD *a2, unsigned __int16 *a3, _DWORD *a4, _QWORD *a5)
{
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  v5 = *result + (unsigned __int16)*a2;
  v6 = (*a2 >> 5) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  v7 = v6 + *a3 + (v6 >> 11);
  v8 = (v7 ^ (v7 << 16)) + a3[1] + ((v7 ^ (v7 << 16)) >> 11);
  v9 = *((unsigned __int8 *)a3 + 6);
  v10 = ((v8 ^ (v8 << 16)) + v9 + ((v8 ^ (v8 << 16)) >> 11)) ^ (((v8 ^ (v8 << 16)) + v9 + ((v8 ^ (v8 << 16)) >> 11)) << 16);
  v11 = v10 + (v10 >> 11);
  *result = v11;
  if (v9)
  {
    v11 = ((v11 + a3[2]) ^ ((v11 + a3[2]) << 16)) + (((v11 + a3[2]) ^ ((v11 + a3[2]) << 16)) >> 11);
    *result = v11;
  }
  v12 = (*a4 >> 5) & 0x7FFF800 ^ ((v11 + (unsigned __int16)*a4) << 16) ^ (v11 + (unsigned __int16)*a4);
  v13 = v12 + (v12 >> 11);
  *result = v13;
  v14 = (a4[1] >> 5) & 0x7FFF800 ^ ((v13 + (unsigned __int16)a4[1]) << 16) ^ (v13 + (unsigned __int16)a4[1]);
  v15 = v14 + (unsigned __int16)*a5 + (v14 >> 11);
  v16 = (*a5 >> 5) & 0x7FFF800 ^ (v15 << 16) ^ v15;
  v17 = v16 + (unsigned __int16)WORD2(*a5) + (v16 >> 11);
  v18 = (*a5 >> 37) & 0x7FFF800 ^ (v17 << 16);
  *result = (v18 ^ v17) + ((v18 ^ v17) >> 11);
  return result;
}

uint64_t WebCore::CSSFontSelector::version(WebCore::CSSFontSelector *this)
{
  return *((unsigned int *)this + 41);
}

uint64_t WebCore::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  v4 = *a2;
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return v3 == v4;
  v7 = WTF::StringImpl::startsWith();
  v8 = v7;
  v9 = *a1;
  v10 = *a2;
  if (*a1 == *a2)
    result = 1;
  else
    result = v7 ^ 1u;
  if ((v8 & 1) == 0 && v9 != v10)
  {
    v12 = *(unsigned int *)(v9 + 4);
    if ((_DWORD)v12 == *(_DWORD *)(v10 + 4))
    {
      v13 = *(_DWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v9 + 8);
      v15 = *(_QWORD *)(v10 + 8);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      {
        if ((v13 & 4) != 0)
          return WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(v14, v12, v15, v12, v12);
        else
          return WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(v14, v12, v15, v12, v12);
      }
      else if ((v13 & 4) != 0)
      {
        return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(v14, v12, v15, v12, v12);
      }
      else
      {
        return WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(v14, v12, v15, v12, v12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry(WebCore::FontCascadeCacheEntry *this, WTF::StringImpl *a2)
{
  WebCore::FontCascadeFonts *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;

  v3 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v3);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v10 = 8 * v4;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v5 = (WTF *)*((_QWORD *)this + 5);
  if ((WebCore::FontCascadeCacheEntry *)((char *)this + 56) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v5, a2);
  }
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v7, a2);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

_QWORD *WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>::~KeyValuePair(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::FontPlatformData *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = (WebCore::FontPlatformData *)a1[10];
  a1[10] = 0;
  if (v3)
  {
    WebCore::FontPlatformData::~FontPlatformData(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
    WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(v6, a2);
  v7 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a1[4];
  a1[4] = 0;
  if (v8)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v8, a2);
  v9 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

uint64_t WebCore::CSSFontSelector::uniqueId(WebCore::CSSFontSelector *this)
{
  return *((unsigned int *)this + 40);
}

void WebCore::FontCascadeFonts::~FontCascadeFonts(WebCore::FontCascadeFonts *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  uint64_t v21;
  WTF ***v22;
  WTF **v23;
  WTF *v24;
  void *v25;

  v3 = *((_QWORD *)this + 17);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 16);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  v7 = *((_QWORD *)this + 12);
  if (v7)
  {
    v21 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v21)
    {
      v22 = (WTF ***)*((_QWORD *)this + 12);
      do
      {
        v23 = *v22;
        if (*v22 != (WTF **)-1)
        {
          *v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
            {
              WebCore::Font::~Font(v23);
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*(_DWORD *)v23;
            }
          }
        }
        ++v22;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v8 = *((_QWORD *)this + 11);
  if (v8)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v8, a2);
  v9 = *((_QWORD *)this + 10);
  if (v9)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v9, a2);
  v10 = *((_QWORD *)this + 9);
  if (v10)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v10, a2);
  v11 = *((_DWORD *)this + 5);
  v12 = (WTF *)*((_QWORD *)this + 1);
  if (v11)
  {
    v13 = (WTF *)((char *)v12 + 40 * v11);
    do
    {
      v14 = *((unsigned int *)v12 + 3);
      if ((_DWORD)v14)
      {
        v17 = 16 * v14;
        v18 = (_DWORD **)(*(_QWORD *)v12 + 8);
        do
        {
          v19 = *v18;
          *v18 = 0;
          if (v19)
          {
            if (v19[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
            else
              --v19[2];
          }
          v18 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      v15 = *(WTF **)v12;
      if ((WTF *)((char *)v12 + 16) != *(WTF **)v12 && v15 != 0)
      {
        *(_QWORD *)v12 = 0;
        *((_DWORD *)v12 + 2) = 0;
        WTF::fastFree(v15, a2);
      }
      v12 = (WTF *)((char *)v12 + 40);
    }
    while (v12 != v13);
    v12 = (WTF *)*((_QWORD *)this + 1);
  }
  if ((WebCore::FontCascadeFonts *)((char *)this + 24) != v12 && v12 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v12, a2);
  }
}

uint64_t WebCore::FontPlatformData::operator=(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;
  int v6;
  _DWORD *v7;
  WebCore::FontCustomPlatformData *v8;
  int v9;
  WTF *v11;
  void *v12;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v5 = *(const void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    CFRelease(v5);
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 11) = *(_DWORD *)(a2 + 11);
  *(_DWORD *)(a1 + 8) = v6;
  v7 = *(_DWORD **)(a2 + 16);
  if (v7)
    ++*v7;
  v8 = *(WebCore::FontCustomPlatformData **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::FontCustomPlatformData::~FontCustomPlatformData(v8, (WTF::StringImpl *)a2);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 27) = *(_DWORD *)(a2 + 27);
  *(_DWORD *)(a1 + 24) = v9;
  return a1;
}

void WebCore::CSSFontAccessor::~CSSFontAccessor(WebCore::CSSFontAccessor *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CSSFontAccessor::~CSSFontAccessor(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  _DWORD *v10;
  WebCore::CSSFontFace *v11;
  WTF **v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  WTF *v18;

  v3 = *((unsigned int *)this + 61);
  v4 = (WTF *)*((_QWORD *)this + 29);
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((v6 & 0x8000000000000) != 0)
      {
        v17 = v5;
        v18 = v4;
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v5 = v17;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v5 = v17;
          v4 = v18;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = (WTF *)*((_QWORD *)this + 29);
  }
  if (v4)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v4, a2);
  }
  v10 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  WebCore::FontDescription::~FontDescription((WebCore::CSSFontAccessor *)((char *)this + 40), (WTF::StringImpl *)a2);
  v11 = (WebCore::CSSFontFace *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 2) == 1)
    {
      WebCore::CSSFontFace::~CSSFontFace(v11);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*((_DWORD *)v11 + 2);
    }
  }
  if (*((_BYTE *)this + 24))
  {
    v12 = (WTF **)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::Font::~Font(v12);
        WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
}

void WebCore::TrivialFontAccessor::~TrivialFontAccessor(WebCore::TrivialFontAccessor *this, void *a2)
{
  WTF **v3;
  WTF *v4;
  void *v5;

  v3 = (WTF **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Font::~Font(v3);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::rehash(a1, v3, 0);
}

uint64_t WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::expand(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::allocateTable(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = WTF::fastMalloc((WTF *)(88 * a1 + 16)) + 16;
  if (a1)
  {
    v3 = a1;
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 80) = 0;
      *(_OWORD *)(v4 + 48) = 0uLL;
      *(_OWORD *)(v4 + 64) = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_OWORD *)(v4 + 32) = 0uLL;
      *(_OWORD *)v4 = 0uLL;
      v4 += 88;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::MixedFontGlyphPage **v4;
  WebCore::MixedFontGlyphPage *v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::MixedFontGlyphPage **)(a1 + 16);
    do
    {
      if (*((_DWORD *)v4 - 4) != -2)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          WebCore::MixedFontGlyphPage::~MixedFontGlyphPage(v5, a2);
          WTF::fastFree(v6, v7);
        }
        v8 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
          {
            --WebCore::GlyphPage::s_count;
            v9 = (WTF *)*((_QWORD *)v8 + 1);
            *((_QWORD *)v8 + 1) = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 1)
                WTF::fastFree(v9, a2);
              else
                --*(_DWORD *)v9;
            }
            WTF::fastFree(v8, a2);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::FontCache::platformAlternateFamilyName@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  int v5;
  __int128 *v6;
  char v7;

  if (*(_QWORD *)this)
  {
    v4 = (uint64_t *)this;
    v5 = *(_DWORD *)(*(_QWORD *)this + 4);
    switch(v5)
    {
      case 2:
        this = WTF::equal<WTF::String,2u>((uint64_t *)this, &WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::songtiString);
        if ((_DWORD)this)
          goto LABEL_16;
        this = WTF::equal<WTF::String,2u>(v4, &WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::heitiString);
        if (!(_DWORD)this)
          goto LABEL_21;
LABEL_10:
        v6 = &WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::heitiSCReplacement;
        break;
      case 3:
      case 7:
      case 8:
      case 9:
        goto LABEL_21;
      case 4:
        this = WTF::equal<WTF::String,4u>((uint64_t *)this, WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::weiruanYaHeiString);
        if (!(_DWORD)this)
          goto LABEL_21;
        goto LABEL_10;
      case 5:
        this = WTF::equal<WTF::String,5u>((uint64_t *)this, &WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::weiruanZhengHeitiString);
        if (!(_DWORD)this)
          goto LABEL_21;
        goto LABEL_12;
      case 6:
        this = WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "simsun", 7uLL);
        if ((_DWORD)this)
          goto LABEL_16;
        this = WTF::equal<WTF::String,6u>(v4, &WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::weiruanXinXiMingTi);
        if (!(_DWORD)this)
          goto LABEL_21;
LABEL_14:
        v6 = &WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::songtiTC;
        break;
      case 10:
        this = WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "ms mingliu", 0xBuLL);
        if ((_DWORD)this)
          goto LABEL_14;
        this = WTF::equalIgnoringASCIICase(v4, "\\5b8b\\4f53");
        if (!(_DWORD)this)
          goto LABEL_21;
LABEL_16:
        v6 = &WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::songtiSC;
        break;
      default:
        if (v5 != 18)
          goto LABEL_21;
        this = WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "microsoft jhenghei", 0x13uLL);
        if (!(_DWORD)this)
          goto LABEL_21;
LABEL_12:
        v6 = &WebCore::FontCache::platformAlternateFamilyName(WTF::String const&)::heitiTCReplacement;
        break;
    }
    *(_OWORD *)a2 = *v6;
    v7 = 1;
  }
  else
  {
LABEL_21:
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v7;
  return this;
}

uint64_t WebCore::FontPlatformData::FontPlatformData(uint64_t result, char a2, char a3, char a4, char a5, char a6, _DWORD *a7, float a8)
{
  *(_QWORD *)result = 0;
  *(float *)(result + 8) = a8;
  *(_BYTE *)(result + 12) = a4;
  *(_BYTE *)(result + 13) = a5;
  *(_BYTE *)(result + 14) = a6;
  if (a7)
    ++*a7;
  *(_QWORD *)(result + 16) = a7;
  *(_BYTE *)(result + 24) = a2;
  *(_BYTE *)(result + 25) = a3;
  *(_DWORD *)(result + 26) = 0;
  *(_BYTE *)(result + 30) = 0;
  return result;
}

void WebCore::MixedFontGlyphPage::~MixedFontGlyphPage(WebCore::MixedFontGlyphPage *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;

  v3 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  v6 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  v7 = (WTF *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  v8 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
  v9 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, a2);
    else
      --*(_DWORD *)v9;
  }
  v10 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, a2);
    else
      --*(_DWORD *)v10;
  }
  v11 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, a2);
    else
      --*(_DWORD *)v11;
  }
  v12 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, a2);
    else
      --*(_DWORD *)v12;
  }
  v13 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, a2);
    else
      --*(_DWORD *)v13;
  }
  v14 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, a2);
    else
      --*(_DWORD *)v14;
  }
  v15 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, a2);
    else
      --*(_DWORD *)v15;
  }
  v16 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, a2);
    else
      --*(_DWORD *)v16;
  }
  v17 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::fastFree(v17, a2);
    else
      --*(_DWORD *)v17;
  }
  v18 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, a2);
    else
      --*(_DWORD *)v18;
  }
}

uint64_t PAL::RevealCoreLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17RevealCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7EA08 != -1)
    dispatch_once(&qword_1ECE7EA08, block);
  return qword_1ECE7EA00;
}

uint64_t PAL::ContactsLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7DFF0 != -1)
    dispatch_once(&qword_1ECE7DFF0, block);
  return _MergedGlobals_57;
}

BOOL WebCore::MQ::MediaQueryEvaluator::evaluate(WebCore::MQ::MediaQueryEvaluator *a1, uint64_t a2)
{
  unsigned int v2;
  const WebCore::MQ::MediaQuery *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *(_DWORD *)(a2 + 12);
  if (!v2)
    return 1;
  v4 = *(const WebCore::MQ::MediaQuery **)a2;
  v5 = 56 * v2 - 56;
  do
  {
    result = WebCore::MQ::MediaQueryEvaluator::evaluate(a1, v4);
    if (result)
      break;
    v4 = (const WebCore::MQ::MediaQuery *)((char *)v4 + 56);
    v7 = v5;
    v5 -= 56;
  }
  while (v7);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, WebCore::ResourceRequest *this)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 752))
  {
    v4 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD **)(v3 + 32);
      if (v5)
      {
        v6 = v5[3];
        if (v6)
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (v6)
          {
            if (*(_BYTE *)(v6 + 40))
              v6 = *(_QWORD *)(v6 + 32);
            else
              v6 = 0;
          }
        }
        v7 = v5[4];
        v5 = (_QWORD *)v5[35];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
      v8 = *(_QWORD *)(v3 + 744);
      v19 = 134219008;
      v20 = v3;
      v21 = 2048;
      v22 = v6;
      v23 = 2048;
      v24 = v7;
      v25 = 2048;
      v26 = v5;
      v27 = 2048;
      v28 = v8;
      _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::init: Cancelling load because it was stopped as a result of willSendRequest.", (uint8_t *)&v19, 0x34u);
    }
LABEL_10:
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v12 = *((_BYTE *)this + 184);
  if ((v12 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v12 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v12;
  }
  if ((v12 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (!*(_QWORD *)this)
  {
    v14 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD **)(v3 + 32);
      if (v15)
      {
        v16 = v15[3];
        if (v16)
        {
          v16 = *(_QWORD *)(v16 + 8);
          if (v16)
          {
            if (*(_BYTE *)(v16 + 40))
              v16 = *(_QWORD *)(v16 + 32);
            else
              v16 = 0;
          }
        }
        v17 = v15[4];
        v15 = (_QWORD *)v15[35];
      }
      else
      {
        v17 = 0;
        v16 = 0;
      }
      v18 = *(_QWORD *)(v3 + 744);
      v19 = 134219008;
      v20 = v3;
      v21 = 2048;
      v22 = v16;
      v23 = 2048;
      v24 = v17;
      v25 = 2048;
      v26 = v15;
      v27 = 2048;
      v28 = v18;
      _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::init: Cancelling load because the request is null.", (uint8_t *)&v19, 0x34u);
    }
    WebCore::ResourceLoader::cancel((WebCore::ResourceLoader *)v3);
    goto LABEL_10;
  }
  WebCore::ResourceRequest::operator=(v3 + 336, (uint64_t)this);
  WebCore::ResourceRequest::operator=(v3 + 536, v3 + 336);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WebCore::ResourceRequest::operator=(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::FormData *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  bmalloc::api *v15;
  void *v16;

  WebCore::ResourceRequestBase::RequestData::operator=(a1, (uint64_t *)a2);
  v5 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v6 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v8 = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v10 = *(WebCore::FormData **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::FormData::~FormData(v10, v4);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v11;
  v12 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v13 = *(const void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v12;
  if (v13)
    CFRelease(v13);
  return a1;
}

{
  const void *v4;
  const void *v5;

  WebCore::ResourceRequestBase::operator=(a1, a2);
  v4 = *(const void **)(a2 + 192);
  if (v4)
    CFRetain(v4);
  v5 = *(const void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v4;
  if (v5)
    CFRelease(v5);
  return a1;
}

uint64_t WebCore::ResourceRequestBase::RequestData::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
  v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  v10 = a2[5];
  a2[5] = 0;
  v11 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xFFFFFFFE | a2[6] & 1;
  v12 = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12 & 0xFFFFFFFE;
  v13 = *(_DWORD *)(a1 + 48) & 0xFFFFFFFD | (2 * ((v12 >> 1) & 1));
  *(_DWORD *)(a1 + 48) = v13;
  v14 = v13 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 12) >> 2) & 1));
  *(_DWORD *)(a1 + 48) = v14;
  v15 = v14 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 12) >> 3) & 7));
  *(_DWORD *)(a1 + 48) = v15;
  *(_DWORD *)(a1 + 48) = a2[6] & 0xFFFFFFC0 | v15 & 0x3F;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)((char *)a2 + 52);
  *(_QWORD *)(a1 + 68) = *(uint64_t *)((char *)a2 + 68);
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
  *(_QWORD *)(a1 + 80) = a2[10];
  v16 = a2[11];
  a2[11] = 0;
  v17 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::HTTPHeaderMap::operator=((unsigned int *)(a1 + 96), (WTF::StringImpl *)(a2 + 12));
  v19 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v19)
  {
    v23 = *(WTF::StringImpl ***)(a1 + 128);
    v24 = 8 * v19;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v18);
        else
          *(_DWORD *)v25 -= 2;
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v20 = *(WTF **)(a1 + 128);
  if (v20)
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    WTF::fastFree(v20, v18);
  }
  v21 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(a1 + 128) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_DWORD *)(a1 + 136) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = 0;
  *(_DWORD *)(a1 + 140) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 36);
  *(_BYTE *)(a1 + 148) = *((_BYTE *)a2 + 148);
  *(_DWORD *)(a1 + 144) = v21;
  return a1;
}

uint64_t WTF::URL::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
  v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  return a1;
}

unsigned int *WebCore::HTTPHeaderMap::operator=(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;

  v4 = a1[3];
  if ((_DWORD)v4)
  {
    v11 = 16 * v4;
    v12 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  a1[2] = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  a1[3] = v6;
  v7 = a1[7];
  if ((_DWORD)v7)
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*((WTF::StringImpl **)a1 + 2), (WTF::StringImpl *)(*((_QWORD *)a1 + 2) + 16 * v7));
  v8 = (WTF *)*((_QWORD *)a1 + 2);
  if (v8)
  {
    *((_QWORD *)a1 + 2) = 0;
    a1[6] = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a1 + 2) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  a1[6] = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  a1[7] = v9;
  return a1;
}

uint64_t WebCore::ResourceRequestBase::operator=(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WebCore::FormData *v10;
  uint64_t v11;
  bmalloc::api *v13;
  void *v14;

  WebCore::ResourceRequestBase::RequestData::operator=(a1, a2);
  v5 = *(_DWORD **)(a2 + 152);
  if (v5)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_DWORD **)(a2 + 160);
  if (v7)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_DWORD **)(a2 + 168);
  if (v9)
    ++*v9;
  v10 = *(WebCore::FormData **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::FormData::~FormData(v10, v4);
      bmalloc::api::isoDeallocate(v13, v14);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v11;
  return a1;
}

uint64_t WebCore::ResourceRequestBase::RequestData::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  char v12;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  v7 = *(_DWORD **)(a2 + 40);
  if (v7)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(_DWORD **)(a2 + 88);
  if (v10)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 96), (unsigned int *)(a2 + 96));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 112, (unsigned int *)(a2 + 112));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 128), (unsigned int *)(a2 + 128));
  v12 = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = v12;
  return a1;
}

uint64_t WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(uint64_t this, const WebCore::MQ::MediaQueryEvaluator *a2, WebCore::MQ::MediaQueryEvaluator *a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::MQ::MediaQuery *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t ***v151;
  uint64_t **v152;

  *(_OWORD *)(this + 8) = 0u;
  v148 = (_QWORD *)(this + 8);
  *(_BYTE *)this = 0;
  *(_OWORD *)(this + 24) = 0u;
  v150 = 0;
  v152 = (uint64_t **)a4;
  if (*((unsigned int *)a2 + 167) <= a4)
    return this;
  v4 = a4;
  v7 = this;
  v147 = (_QWORD *)(this + 24);
  do
  {
    v8 = *((_QWORD *)a2 + 82);
    v9 = (uint64_t *)(v8 + 56 * v4);
    v10 = *((unsigned int *)v9 + 3);
    if ((_DWORD)v10)
    {
      v11 = *v9;
      v12 = *v9 + 16 * v10;
      do
      {
        v13 = *(unsigned int *)(v11 + 12);
        if ((_DWORD)v13)
        {
          v14 = *(const WebCore::MQ::MediaQuery **)v11;
          v15 = 56 * v13;
          while (1)
          {
            this = WebCore::MQ::MediaQueryEvaluator::evaluate(a3, v14);
            if ((this & 1) != 0)
              break;
            v14 = (const WebCore::MQ::MediaQuery *)((char *)v14 + 56);
            v15 -= 56;
            if (!v15)
            {
              v16 = 0;
              goto LABEL_10;
            }
          }
        }
        v11 += 16;
      }
      while (v11 != v12);
      v16 = 1;
    }
    else
    {
      v16 = 1;
    }
LABEL_10:
    v17 = v8 + 56 * v4;
    v19 = *(unsigned __int8 *)(v17 + 49);
    v18 = (_BYTE *)(v17 + 49);
    if (v16 != v19)
    {
      *v18 = v16;
      if (*(_BYTE *)(v8 + 56 * v4 + 48))
      {
        *(_BYTE *)v7 = 1;
      }
      else
      {
        v20 = v8 + 56 * v4;
        v21 = *(unsigned int *)(v20 + 28);
        if ((_DWORD)v21)
        {
          v22 = *(uint64_t **)(v20 + 16);
          v23 = &v22[v21];
          do
          {
            v24 = *v22;
            v25 = v150;
            if (v150
              || (this = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,BOOL>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,BOOL,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(&v150, 8u), (v25 = v150) != 0))
            {
              v26 = *(_DWORD *)(v25 - 8);
            }
            else
            {
              v26 = 0;
            }
            v27 = (v24 + ~(v24 << 32)) ^ ((unint64_t)(v24 + ~(v24 << 32)) >> 22);
            v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
            v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
            v30 = v26 & ((v29 >> 31) ^ v29);
            v31 = v25 + 16 * v30;
            v32 = *(_QWORD *)v31;
            if (*(_QWORD *)v31 != -1)
            {
              v37 = 0;
              v38 = 1;
              while (v32 != v24)
              {
                if (v32 == -2)
                  v37 = v31;
                v30 = (v30 + v38) & v26;
                v31 = v25 + 16 * v30;
                v32 = *(_QWORD *)v31;
                ++v38;
                if (*(_QWORD *)v31 == -1)
                {
                  if (v37)
                  {
                    *(_QWORD *)v37 = -1;
                    *(_BYTE *)(v37 + 8) = 0;
                    --*(_DWORD *)(v150 - 16);
                    v31 = v37;
                  }
                  goto LABEL_17;
                }
              }
              goto LABEL_23;
            }
LABEL_17:
            *(_QWORD *)v31 = v24;
            *(_BYTE *)(v31 + 8) = v16;
            if (v150)
              v33 = *(_DWORD *)(v150 - 12) + 1;
            else
              v33 = 1;
            *(_DWORD *)(v150 - 12) = v33;
            if (v150)
              v34 = *(_DWORD *)(v150 - 12);
            else
              v34 = 0;
            v35 = (*(_DWORD *)(v150 - 16) + v34);
            v36 = *(unsigned int *)(v150 - 4);
            if (v36 > 0x400)
            {
              if (v36 <= 2 * v35)
                goto LABEL_139;
            }
            else if (3 * v36 <= 4 * v35)
            {
              if ((_DWORD)v36)
LABEL_139:
                v146 = (_DWORD)v36 << (6 * *(_DWORD *)(v150 - 12) >= (2 * v36));
              else
                v146 = 8;
              this = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,BOOL>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,BOOL,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(&v150, v146);
            }
LABEL_23:
            ++v22;
          }
          while (v22 != v23);
        }
        v39 = *(unsigned int *)(v7 + 20);
        if ((_DWORD)v39 == *(_DWORD *)(v7 + 16))
        {
          this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v148, v39 + 1, (unint64_t)&v152);
          v39 = *(unsigned int *)(v7 + 20);
          *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v39) = *(_QWORD *)this;
        }
        else
        {
          *(_QWORD *)(*v148 + 8 * v39) = v152;
        }
        *(_DWORD *)(v7 + 20) = v39 + 1;
        v151 = (uint64_t ***)(v8 + 56 * v4 + 32);
        v40 = *(unsigned int *)(v7 + 36);
        if ((_DWORD)v40 == *(_DWORD *)(v7 + 32))
        {
          this = WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v147, v40 + 1, (unint64_t)&v151);
          v40 = *(unsigned int *)(v7 + 36);
          *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v40) = *(_QWORD *)this;
        }
        else
        {
          *(_QWORD *)(*v147 + 8 * v40) = v8 + 56 * v4 + 32;
        }
        *(_DWORD *)(v7 + 36) = v40 + 1;
      }
    }
    v4 = (unint64_t)v152 + 1;
    v152 = (uint64_t **)v4;
  }
  while (v4 < *((unsigned int *)a2 + 167));
  v41 = v150;
  if (v150)
  {
    if (!*(_DWORD *)(v150 - 12))
      return WTF::fastFree((WTF *)(v41 - 16), a2);
    v149 = &v150;
    v152 = &v149;
    v151 = &v152;
    WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(&v151, *((_QWORD **)a2 + 1));
    WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(&v151, *((_QWORD **)a2 + 2));
    WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(&v151, *((_QWORD **)a2 + 3));
    WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(&v151, *((_QWORD **)a2 + 4));
    WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(&v151, *((_QWORD **)a2 + 5));
    WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(&v151, *((_QWORD **)a2 + 6));
    WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(&v151, *((_QWORD **)a2 + 7));
    this = (uint64_t)WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(&v151, *((_QWORD **)a2 + 8));
    v42 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v42)
    {
      v43 = v152;
      if (**v152)
      {
        v44 = *((_QWORD *)a2 + 9);
        v45 = v44 + 32 * v42;
        do
        {
          v46 = **v43;
          if (v46)
          {
            v47 = *(_QWORD *)(v44 + 8);
            v48 = HIDWORD(v47) & 0x1FFFFF;
            v49 = *(_DWORD *)(v46 - 8);
            v50 = (v48 + ~(v48 << 32)) ^ ((unint64_t)(v48 + ~(v48 << 32)) >> 22);
            v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
            v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
            v53 = v49 & ((v52 >> 31) ^ v52);
            this = *(_QWORD *)(v46 + 16 * v53);
            if (this == v48)
            {
LABEL_59:
              *(_QWORD *)(v44 + 8) = v47 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v46 + 16 * v53 + 8) != 0) << 63);
            }
            else
            {
              v54 = 1;
              while (this != -1)
              {
                v53 = ((_DWORD)v53 + v54) & v49;
                this = *(_QWORD *)(v46 + 16 * v53);
                ++v54;
                if (this == v48)
                  goto LABEL_59;
              }
            }
          }
          v44 += 32;
        }
        while (v44 != v45);
      }
    }
    v55 = *((unsigned int *)a2 + 33);
    if ((_DWORD)v55)
    {
      v56 = v152;
      if (**v152)
      {
        v57 = *((_QWORD *)a2 + 15);
        v58 = v57 + 32 * v55;
        do
        {
          v59 = **v56;
          if (v59)
          {
            v60 = *(_QWORD *)(v57 + 8);
            v61 = HIDWORD(v60) & 0x1FFFFF;
            v62 = *(_DWORD *)(v59 - 8);
            v63 = (v61 + ~(v61 << 32)) ^ ((unint64_t)(v61 + ~(v61 << 32)) >> 22);
            v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
            v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
            v66 = v62 & ((v65 >> 31) ^ v65);
            this = *(_QWORD *)(v59 + 16 * v66);
            if (this == v61)
            {
LABEL_69:
              *(_QWORD *)(v57 + 8) = v60 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v59 + 16 * v66 + 8) != 0) << 63);
            }
            else
            {
              v67 = 1;
              while (this != -1)
              {
                v66 = ((_DWORD)v66 + v67) & v62;
                this = *(_QWORD *)(v59 + 16 * v66);
                ++v67;
                if (this == v61)
                  goto LABEL_69;
              }
            }
          }
          v57 += 32;
        }
        while (v57 != v58);
      }
    }
    v68 = *((unsigned int *)a2 + 45);
    if ((_DWORD)v68)
    {
      v69 = v152;
      if (**v152)
      {
        v70 = *((_QWORD *)a2 + 21);
        v71 = v70 + 32 * v68;
        do
        {
          v72 = **v69;
          if (v72)
          {
            v73 = *(_QWORD *)(v70 + 8);
            v74 = HIDWORD(v73) & 0x1FFFFF;
            v75 = *(_DWORD *)(v72 - 8);
            v76 = (v74 + ~(v74 << 32)) ^ ((unint64_t)(v74 + ~(v74 << 32)) >> 22);
            v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
            v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
            v79 = v75 & ((v78 >> 31) ^ v78);
            this = *(_QWORD *)(v72 + 16 * v79);
            if (this == v74)
            {
LABEL_79:
              *(_QWORD *)(v70 + 8) = v73 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v72 + 16 * v79 + 8) != 0) << 63);
            }
            else
            {
              v80 = 1;
              while (this != -1)
              {
                v79 = ((_DWORD)v79 + v80) & v75;
                this = *(_QWORD *)(v72 + 16 * v79);
                ++v80;
                if (this == v74)
                  goto LABEL_79;
              }
            }
          }
          v70 += 32;
        }
        while (v70 != v71);
      }
    }
    v81 = *((unsigned int *)a2 + 57);
    if ((_DWORD)v81)
    {
      v82 = v152;
      if (**v152)
      {
        v83 = *((_QWORD *)a2 + 27);
        v84 = v83 + 32 * v81;
        do
        {
          v85 = **v82;
          if (v85)
          {
            v86 = *(_QWORD *)(v83 + 8);
            v87 = HIDWORD(v86) & 0x1FFFFF;
            v88 = *(_DWORD *)(v85 - 8);
            v89 = (v87 + ~(v87 << 32)) ^ ((unint64_t)(v87 + ~(v87 << 32)) >> 22);
            v90 = 9 * ((v89 + ~(v89 << 13)) ^ ((v89 + ~(v89 << 13)) >> 8));
            v91 = (v90 ^ (v90 >> 15)) + ~((v90 ^ (v90 >> 15)) << 27);
            v92 = v88 & ((v91 >> 31) ^ v91);
            this = *(_QWORD *)(v85 + 16 * v92);
            if (this == v87)
            {
LABEL_89:
              *(_QWORD *)(v83 + 8) = v86 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v85 + 16 * v92 + 8) != 0) << 63);
            }
            else
            {
              v93 = 1;
              while (this != -1)
              {
                v92 = ((_DWORD)v92 + v93) & v88;
                this = *(_QWORD *)(v85 + 16 * v92);
                ++v93;
                if (this == v87)
                  goto LABEL_89;
              }
            }
          }
          v83 += 32;
        }
        while (v83 != v84);
      }
    }
    v94 = *((unsigned int *)a2 + 69);
    if ((_DWORD)v94)
    {
      v95 = v152;
      if (**v152)
      {
        v96 = *((_QWORD *)a2 + 33);
        v97 = v96 + 32 * v94;
        do
        {
          v98 = **v95;
          if (v98)
          {
            v99 = *(_QWORD *)(v96 + 8);
            v100 = HIDWORD(v99) & 0x1FFFFF;
            v101 = *(_DWORD *)(v98 - 8);
            v102 = (v100 + ~(v100 << 32)) ^ ((unint64_t)(v100 + ~(v100 << 32)) >> 22);
            v103 = 9 * ((v102 + ~(v102 << 13)) ^ ((v102 + ~(v102 << 13)) >> 8));
            v104 = (v103 ^ (v103 >> 15)) + ~((v103 ^ (v103 >> 15)) << 27);
            v105 = v101 & ((v104 >> 31) ^ v104);
            this = *(_QWORD *)(v98 + 16 * v105);
            if (this == v100)
            {
LABEL_99:
              *(_QWORD *)(v96 + 8) = v99 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v98 + 16 * v105 + 8) != 0) << 63);
            }
            else
            {
              v106 = 1;
              while (this != -1)
              {
                v105 = ((_DWORD)v105 + v106) & v101;
                this = *(_QWORD *)(v98 + 16 * v105);
                ++v106;
                if (this == v100)
                  goto LABEL_99;
              }
            }
          }
          v96 += 32;
        }
        while (v96 != v97);
      }
    }
    v107 = *((unsigned int *)a2 + 81);
    if ((_DWORD)v107)
    {
      v108 = v152;
      if (**v152)
      {
        v109 = *((_QWORD *)a2 + 39);
        v110 = v109 + 32 * v107;
        do
        {
          v111 = **v108;
          if (v111)
          {
            v112 = *(_QWORD *)(v109 + 8);
            v113 = HIDWORD(v112) & 0x1FFFFF;
            v114 = *(_DWORD *)(v111 - 8);
            v115 = (v113 + ~(v113 << 32)) ^ ((unint64_t)(v113 + ~(v113 << 32)) >> 22);
            v116 = 9 * ((v115 + ~(v115 << 13)) ^ ((v115 + ~(v115 << 13)) >> 8));
            v117 = (v116 ^ (v116 >> 15)) + ~((v116 ^ (v116 >> 15)) << 27);
            v118 = v114 & ((v117 >> 31) ^ v117);
            this = *(_QWORD *)(v111 + 16 * v118);
            if (this == v113)
            {
LABEL_109:
              *(_QWORD *)(v109 + 8) = v112 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v111 + 16 * v118 + 8) != 0) << 63);
            }
            else
            {
              v119 = 1;
              while (this != -1)
              {
                v118 = ((_DWORD)v118 + v119) & v114;
                this = *(_QWORD *)(v111 + 16 * v118);
                ++v119;
                if (this == v113)
                  goto LABEL_109;
              }
            }
          }
          v109 += 32;
        }
        while (v109 != v110);
      }
    }
    v120 = *((unsigned int *)a2 + 93);
    if ((_DWORD)v120)
    {
      v121 = v152;
      if (**v152)
      {
        v122 = *((_QWORD *)a2 + 45);
        v123 = v122 + 32 * v120;
        do
        {
          v124 = **v121;
          if (v124)
          {
            v125 = *(_QWORD *)(v122 + 8);
            v126 = HIDWORD(v125) & 0x1FFFFF;
            v127 = *(_DWORD *)(v124 - 8);
            v128 = (v126 + ~(v126 << 32)) ^ ((unint64_t)(v126 + ~(v126 << 32)) >> 22);
            v129 = 9 * ((v128 + ~(v128 << 13)) ^ ((v128 + ~(v128 << 13)) >> 8));
            v130 = (v129 ^ (v129 >> 15)) + ~((v129 ^ (v129 >> 15)) << 27);
            v131 = v127 & ((v130 >> 31) ^ v130);
            this = *(_QWORD *)(v124 + 16 * v131);
            if (this == v126)
            {
LABEL_119:
              *(_QWORD *)(v122 + 8) = v125 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v124 + 16 * v131 + 8) != 0) << 63);
            }
            else
            {
              v132 = 1;
              while (this != -1)
              {
                v131 = ((_DWORD)v131 + v132) & v127;
                this = *(_QWORD *)(v124 + 16 * v131);
                ++v132;
                if (this == v126)
                  goto LABEL_119;
              }
            }
          }
          v122 += 32;
        }
        while (v122 != v123);
      }
    }
    v133 = *((unsigned int *)a2 + 105);
    if ((_DWORD)v133)
    {
      v134 = v152;
      if (**v152)
      {
        v135 = *((_QWORD *)a2 + 51);
        v136 = v135 + 32 * v133;
        do
        {
          v137 = **v134;
          if (v137)
          {
            v138 = *(_QWORD *)(v135 + 8);
            v139 = HIDWORD(v138) & 0x1FFFFF;
            v140 = *(_DWORD *)(v137 - 8);
            v141 = (v139 + ~(v139 << 32)) ^ ((unint64_t)(v139 + ~(v139 << 32)) >> 22);
            v142 = 9 * ((v141 + ~(v141 << 13)) ^ ((v141 + ~(v141 << 13)) >> 8));
            v143 = (v142 ^ (v142 >> 15)) + ~((v142 ^ (v142 >> 15)) << 27);
            v144 = v140 & ((v143 >> 31) ^ v143);
            this = *(_QWORD *)(v137 + 16 * v144);
            if (this == v139)
            {
LABEL_129:
              *(_QWORD *)(v135 + 8) = v138 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v137 + 16 * v144 + 8) != 0) << 63);
            }
            else
            {
              v145 = 1;
              while (this != -1)
              {
                v144 = ((_DWORD)v144 + v145) & v140;
                this = *(_QWORD *)(v137 + 16 * v144);
                ++v145;
                if (this == v139)
                  goto LABEL_129;
              }
            }
          }
          v135 += 32;
        }
        while (v135 != v136);
      }
    }
    v41 = v150;
    if (v150)
      return WTF::fastFree((WTF *)(v41 - 16), a2);
  }
  return this;
}

BOOL WebCore::MQ::MediaQueryEvaluator::evaluate(WebCore::MQ::MediaQueryEvaluator *this, const WebCore::MQ::MediaQuery *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  float v22;
  float v23;
  WebCore *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  unsigned int *v29;
  unsigned int v30;
  WTF *v31;
  WTF *v32;
  void *v33;
  int v34;
  int v35;
  WebCore::Node *v36;
  WTF *v37;
  unsigned int *v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  WTF *v43;
  BOOL v44;
  uint64_t v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WebCore *v50;
  WTF *v51[5];
  WebCore::Node *v52;
  int v53;
  char v54;
  char v55;
  char v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[156];
  int v61;
  WTF *v62;
  float v63;
  __int16 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  if (*((_BYTE *)a2 + 1))
    v4 = *(_BYTE *)a2 == 0;
  else
    v4 = 0;
  v5 = *((_QWORD *)a2 + 1);
  if (!v5 || (*(_DWORD *)(v5 + 4) ? (v44 = v5 == WebCore::allAtomData) : (v44 = 1), v44 || v5 == *(_QWORD *)this))
  {
    if (!*((_BYTE *)a2 + 48))
      return !v4;
    v6 = *((_QWORD *)this + 1);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
    {
      v34 = *((unsigned __int8 *)this + 24);
LABEL_65:
      if (!v34)
        return v4;
      if (v34 != 1)
        return 0;
      return !v4;
    }
    v8 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v8 + 2;
    if (*((_QWORD *)this + 2))
    {
      v9 = *(_QWORD *)(v7 + 528);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          if (*(_QWORD *)(v10 + 288) && *(_QWORD *)(v7 + 1272))
          {
            {
              WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
            }
            v65 = 0;
            v11 = qword_1ECE913C0;
            ++*(_DWORD *)qword_1ECE913C0;
            v12 = qword_1ECE913D0;
            v66 = v11;
            v67 = qword_1ECE913C8;
            ++*(_DWORD *)qword_1ECE913D0;
            v68 = v12;
            v13 = qword_1ECE913D8;
            ++*(_DWORD *)qword_1ECE913D8;
            v69 = v13;
            v70 = qword_1ECE913E0;
            v71 = 0;
            v14 = qword_1ECE913F0;
            ++*(_DWORD *)qword_1ECE913F0;
            v72 = v14;
            WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v60, (const WebCore::FontDescription *)(v13 + 48));
            v15 = *(WTF **)(v13 + 216);
            ++*(_DWORD *)v15;
            v62 = v15;
            v63 = *(float *)(v13 + 224);
            v64 = *(_WORD *)(v13 + 228);
            v16 = *(_QWORD *)(v7 + 680);
            v17 = (int)*(double *)(v16 + 336);
            v18 = (v17 - 9);
            if (v18 > 7)
            {
              v22 = *(double *)(v16 + 504);
              if (v22 < 1.0)
                v22 = 1.0;
              if (v22 <= (float)v17)
                v22 = (float)v17;
            }
            else
            {
              v19 = (int *)((char *)&WebCore::Style::quirksFontSizeTable + 32 * v18 + 12);
              v20 = &WebCore::Style::strictFontSizeTable[8 * v18 + 3];
              if (*(_BYTE *)(v7 + 3384) == 2)
                v21 = v19;
              else
                v21 = v20;
              v22 = (float)*v21;
            }
            if (v22 >= 3.4028e38)
            {
              v61 = 2139095039;
              v22 = 3.4028e38;
            }
            else
            {
              if (v22 <= -3.4028e38)
                v23 = -3.4028e38;
              else
                v23 = v22;
              v61 = LODWORD(v23);
              if (v22 <= -3.4028e38)
                v22 = -3.4028e38;
            }
            v63 = v22;
            v24 = (WebCore *)WebCore::RenderStyle::setFontDescription((uint64_t)&v65, (uint64_t)v60);
            v25 = v69 + 32;
            v51[0] = 0;
            v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v26 || (v24 = *(WebCore **)(v26 + 96)) == 0)
              v24 = (WebCore *)WebCore::threadGlobalDataSlow(v24);
            v27 = *((_QWORD *)v24 + 10);
            if (!v27)
            {
              v50 = v24;
              WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v24);
              v27 = *((_QWORD *)v50 + 10);
            }
            WebCore::FontCache::updateFontCascade(v27, v25, v51);
            v28 = v51[0];
            v51[0] = 0;
            if (v28)
            {
              if (*((_DWORD *)v28 + 2) == 1)
                (*(void (**)(WTF *))(*(_QWORD *)v28 + 8))(v28);
              else
                --*((_DWORD *)v28 + 2);
            }
            v29 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 + 1, v29));
            v31 = (WTF *)*((_QWORD *)this + 2);
            v32 = *(WTF **)(v7 + 1944);
            v51[0] = (WTF *)v29;
            v51[1] = v31;
            v51[2] = (WTF *)&v65;
            v51[3] = 0;
            v51[4] = v32;
            v52 = 0;
            v53 = 1065353216;
            v54 = 1;
            v55 = 0;
            v56 = 0;
            v58 = 0;
            v59 = 0;
            v57 = v31;
            if (*((_BYTE *)a2 + 48))
            {
              v34 = WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateCondition((uint64_t)this, (unsigned __int8 *)a2 + 16, (uint64_t)v51);
              if (!v59)
              {
LABEL_39:
                v36 = v52;
                v52 = 0;
                if (v36)
                {
                  if (*((_DWORD *)v36 + 6) == 2)
                  {
                    if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v36);
                  }
                  else
                  {
                    *((_DWORD *)v36 + 6) -= 2;
                  }
                }
                v37 = v51[0];
                v51[0] = 0;
                if (v37)
                {
                  do
                  {
                    v40 = __ldaxr((unsigned int *)v37);
                    v41 = v40 - 1;
                  }
                  while (__stlxr(v41, (unsigned int *)v37));
                  if (!v41)
                  {
                    atomic_store(1u, (unsigned int *)v37);
                    v42 = *((unsigned int *)v37 + 7);
                    if ((_DWORD)v42)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v37 + 2), (WTF::StringImpl *)(*((_QWORD *)v37 + 2) + 32 * v42));
                    v43 = (WTF *)*((_QWORD *)v37 + 2);
                    if (v43)
                    {
                      *((_QWORD *)v37 + 2) = 0;
                      *((_DWORD *)v37 + 6) = 0;
                      WTF::fastFree(v43, v33);
                    }
                    WTF::fastFree(v37, v33);
                  }
                }
                v38 = (unsigned int *)v62;
                v62 = 0;
                if (v38)
                {
                  if (*v38 == 1)
                  {
                    v46 = v38[1];
                    if ((_DWORD)v46)
                    {
                      v47 = (WTF::StringImpl **)(v38 + 2);
                      v48 = 8 * v46;
                      do
                      {
                        v49 = *v47;
                        *v47 = 0;
                        if (v49)
                        {
                          if (*(_DWORD *)v49 == 2)
                            WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v33);
                          else
                            *(_DWORD *)v49 -= 2;
                        }
                        ++v47;
                        v48 -= 8;
                      }
                      while (v48);
                    }
                    WTF::fastFree((WTF *)v38, v33);
                  }
                  else
                  {
                    --*v38;
                  }
                }
                WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v60, (WTF::StringImpl *)v33);
                WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v65, v39);
                v8 = *(_DWORD *)(v7 + 24) - 2;
                goto LABEL_63;
              }
              v35 = *(_DWORD *)(v59 + 16);
              if (v35)
              {
                *(_DWORD *)(v59 + 16) = v35 - 1;
                goto LABEL_39;
              }
            }
            else
            {
              __break(1u);
            }
            __break(0xC471u);
            JUMPOUT(0x19416A080);
          }
        }
      }
      v34 = 2;
    }
    else
    {
      v34 = *((unsigned __int8 *)this + 24);
    }
LABEL_63:
    if (v8)
    {
      *(_DWORD *)(v7 + 24) = v8;
    }
    else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    goto LABEL_65;
  }
  return v4;
}

uint64_t WebCore::RenderStyle::setFontDescription(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v21;
  void *v22;
  _BYTE v23[296];

  v3 = (uint64_t *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned int *)(v4 + 60);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
    goto LABEL_42;
  if (memcmp(*(const void **)(v4 + 48), *(const void **)a2, 8 * v5))
    goto LABEL_42;
  v6 = *(unsigned int *)(v4 + 76);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 28) || memcmp(*(const void **)(v4 + 64), *(const void **)(a2 + 16), 8 * v6))
    goto LABEL_42;
  v8 = *(unsigned __int8 *)(v4 + 145);
  v9 = *(unsigned __int8 *)(a2 + 97);
  if (v9 | v8)
  {
    if ((v8 != 0) == (v9 == 0))
      goto LABEL_42;
  }
  else if ((WebCore::operator==(v4 + 80, a2 + 32, v7) & 1) == 0)
  {
    goto LABEL_42;
  }
  v10 = *(unsigned __int8 *)(v4 + 152);
  v11 = *(unsigned __int8 *)(a2 + 104);
  if (v10 == 3)
  {
    if (v11 != 3 || *(_QWORD *)(v4 + 160) != *(_QWORD *)(a2 + 112))
      goto LABEL_42;
  }
  else if (v10 != v11)
  {
    goto LABEL_42;
  }
  if (*(unsigned __int8 *)(v4 + 168) != *(unsigned __int8 *)(a2 + 120)
    || (*(_BYTE *)(v4 + 169) == 0) == (*(_BYTE *)(a2 + 121) != 0)
    || *(float *)(v4 + 172) != *(float *)(a2 + 124)
    || *(_QWORD *)(v4 + 176) != *(_QWORD *)(a2 + 128)
    || *(_QWORD *)(v4 + 184) != *(_QWORD *)(a2 + 136)
    || (float)((float)*(__int16 *)(v4 + 192) * 0.25) != (float)((float)*(__int16 *)(a2 + 144) * 0.25)
    || (float)((float)*(__int16 *)(v4 + 194) * 0.25) != (float)((float)*(__int16 *)(a2 + 146) * 0.25))
  {
    goto LABEL_42;
  }
  if (*(_BYTE *)(v4 + 198) && *(_BYTE *)(a2 + 150))
  {
    if ((float)((float)*(__int16 *)(v4 + 196) * 0.25) != (float)((float)*(__int16 *)(a2 + 148) * 0.25))
      goto LABEL_42;
  }
  else if ((*(_BYTE *)(v4 + 198) != 0) != (*(_BYTE *)(a2 + 150) != 0))
  {
    goto LABEL_42;
  }
  if ((*(_BYTE *)(v4 + 200) == 0) == (*(_BYTE *)(a2 + 152) != 0))
    goto LABEL_42;
  if ((*(_BYTE *)(v4 + 201) == 0) == (*(_BYTE *)(a2 + 153) != 0))
    goto LABEL_42;
  if (*(float *)(v4 + 204) != *(float *)(a2 + 156))
    goto LABEL_42;
  if (((*(_DWORD *)(a2 + 160) ^ *(_DWORD *)(v4 + 208)) & 0x7FFFFFFF) != 0)
    goto LABEL_42;
  if ((((*(unsigned __int16 *)(a2 + 164) | (*(unsigned __int8 *)(a2 + 166) << 16)) ^ (*(unsigned __int16 *)(v4 + 212) | (*(unsigned __int8 *)(v4 + 214) << 16))) & 0x3FFFF) != 0)
    goto LABEL_42;
  v12 = *(_QWORD *)(v4 + 216);
  v13 = *(_QWORD *)(a2 + 168);
  v14 = *(unsigned int *)(v12 + 4);
  if ((_DWORD)v14 != *(_DWORD *)(v13 + 4))
    goto LABEL_42;
  if ((_DWORD)v14)
  {
    if (*(_QWORD *)(v12 + 8) != *(_QWORD *)(v13 + 8))
      goto LABEL_42;
    v15 = 0;
    v16 = v12 + 16;
    v17 = v13 + 16;
    while (v14 - 1 != v15)
    {
      v18 = *(_QWORD *)(v16 + 8 * v15);
      v19 = *(_QWORD *)(v17 + 8 * v15++);
      if (v18 != v19)
      {
        if (v15 < v14)
          goto LABEL_42;
        break;
      }
    }
  }
  if (*(float *)(v4 + 224) == *(float *)(a2 + 176) && ((*(_WORD *)(a2 + 180) ^ *(_WORD *)(v4 + 228)) & 0x3FF) == 0)
    return 0;
LABEL_42:
  v21 = WTF::DataRef<WebCore::StyleInheritedData>::access(v3) + 8;
  WebCore::FontCascade::FontCascade((uint64_t)v23, (uint64_t *)a2, (uint64_t)v21);
  WebCore::FontCascade::operator=((uint64_t)v21, (uint64_t)v23);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v23, v22);
  return 1;
}

WebCore::FontCascade *WebCore::FontCascade::FontCascade(WebCore::FontCascade *this, const WebCore::FontCascade *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  __int128 v15;
  _DWORD *v16;
  __int16 v17;
  int *v18;
  unsigned int v19;
  int v20;
  int *v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  int v25;
  int v26;
  char v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  int v37;
  __int16 v38;
  WTF *v39;
  WTF *v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  BOOL v45;
  WTF *v47;
  WTF *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  WTF *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  WTF *v55;
  WTF::StringImpl *v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  _QWORD *v62;
  uint64_t v63;
  _DWORD **v64;
  uint64_t v65;
  _DWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _DWORD **v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  WTF *v88;
  uint64_t v89;
  WTF::StringImpl **v90;
  WTF::StringImpl *v91;
  WTF *v92;
  uint64_t v93;
  WTF::StringImpl **v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF *v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  WTF *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  void *v111;
  WTF::StringImpl **v112;
  WTF *v113;
  WTF *v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  WTF *v117;
  WTF *v118;
  WTF *v119;
  WTF *v120;
  WTF *v121;
  WTF *v122;
  uint64_t v123;
  WTF *v124;
  WTF *v125;
  WTF *v126;
  WTF *v127;
  WTF *v128;
  WTF *v129;
  WTF *v130;
  WTF *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  WTF *v140;
  WTF *v141;
  WTF *v142;
  WTF *v143;
  WTF *v144;
  WTF *v145;
  WTF *v146;
  WTF *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  v4 = *((unsigned int *)a2 + 7);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19416AEF0);
    }
    v102 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
    *((_DWORD *)this + 6) = v4;
    *((_QWORD *)this + 2) = v102;
    memcpy(v102, *((const void **)a2 + 2), 8 * *((unsigned int *)a2 + 7));
  }
  v5 = *((unsigned int *)a2 + 11);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 11) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
      goto LABEL_204;
    v111 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *((_DWORD *)this + 10) = v5;
    *((_QWORD *)this + 4) = v111;
    memcpy(v111, *((const void **)a2 + 4), 8 * *((unsigned int *)a2 + 11));
  }
  v6 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v6)
    *v6 += 2;
  v7 = *((unsigned int *)a2 + 17);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = v6;
  *((_DWORD *)this + 17) = v7;
  if ((_DWORD)v7)
  {
    if (!(v7 >> 29))
    {
      v62 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
      *((_DWORD *)this + 16) = v7;
      *((_QWORD *)this + 7) = v62;
      v63 = *((unsigned int *)a2 + 17);
      if ((_DWORD)v63)
      {
        v64 = (_DWORD **)*((_QWORD *)a2 + 7);
        v65 = 8 * v63;
        do
        {
          v66 = *v64;
          if (*v64)
            *v66 += 2;
          *v62++ = v66;
          ++v64;
          v65 -= 8;
        }
        while (v65);
      }
      goto LABEL_6;
    }
LABEL_204:
    __break(0xC471u);
    JUMPOUT(0x19416AEC0);
  }
LABEL_6:
  v8 = *((unsigned int *)a2 + 21);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 21) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19416AEC8);
    }
    v67 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)this + 20) = v8;
    *((_QWORD *)this + 9) = v67;
    v68 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v68)
    {
      v69 = (_DWORD **)*((_QWORD *)a2 + 9);
      v70 = 8 * v68;
      do
      {
        v71 = *v69;
        if (*v69)
          *v71 += 2;
        *v67++ = v71;
        ++v69;
        v70 -= 8;
      }
      while (v70);
    }
  }
  v9 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 11) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 12) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 13);
  if (v11)
    *v11 += 2;
  *((_QWORD *)this + 13) = v11;
  *((_WORD *)this + 56) = *((_WORD *)a2 + 56);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  v12 = (_DWORD *)*((_QWORD *)a2 + 16);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 16) = v12;
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  v13 = (_DWORD *)*((_QWORD *)a2 + 18);
  if (v13)
    *v13 += 2;
  *((_QWORD *)this + 18) = v13;
  v14 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v14)
    *v14 += 2;
  *((_QWORD *)this + 19) = v14;
  v15 = *((_OWORD *)a2 + 10);
  *(_QWORD *)((char *)this + 175) = *(_QWORD *)((char *)a2 + 175);
  *((_OWORD *)this + 10) = v15;
  v16 = (_DWORD *)*((_QWORD *)a2 + 23);
  ++*v16;
  *((_QWORD *)this + 23) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 48);
  v17 = *((_WORD *)a2 + 98);
  *((_DWORD *)this + 50) = 0;
  v18 = (int *)((char *)this + 200);
  *((_WORD *)this + 98) = v17;
  *((_DWORD *)this + 48) = (_DWORD)v16;
  *(_WORD *)((char *)this + 205) = 0;
  v19 = *((unsigned __int8 *)a2 + 204);
  *((_BYTE *)this + 204) = v19;
  *((_BYTE *)this + 205) = *((_BYTE *)a2 + 205);
  if (v19 <= 0xD)
  {
    v20 = 1 << v19;
    if ((v20 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 206) = *((_BYTE *)a2 + 206);
      *v18 = *((_DWORD *)a2 + 50);
    }
    else if ((v20 & 0x3003) != 0)
    {
      *v18 = 0;
    }
    else
    {
      *v18 = *((_DWORD *)a2 + 50);
      WebCore::Length::ref(v18);
    }
  }
  *((_DWORD *)this + 52) = 0;
  v21 = (int *)((char *)this + 208);
  *(_WORD *)((char *)this + 213) = 0;
  v22 = *((unsigned __int8 *)a2 + 212);
  *((_BYTE *)this + 212) = v22;
  *((_BYTE *)this + 213) = *((_BYTE *)a2 + 213);
  if (v22 <= 0xD)
  {
    v23 = 1 << v22;
    if ((v23 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 214) = *((_BYTE *)a2 + 214);
      *v21 = *((_DWORD *)a2 + 52);
    }
    else if ((v23 & 0x3003) != 0)
    {
      *v21 = 0;
    }
    else
    {
      *v21 = *((_DWORD *)a2 + 52);
      WebCore::Length::ref(v21);
    }
  }
  v24 = (_DWORD *)*((_QWORD *)a2 + 27);
  if (v24)
    ++*v24;
  *((_QWORD *)this + 27) = v24;
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_BYTE *)this + 228) = *((_BYTE *)a2 + 228);
  v25 = (*((unsigned __int8 *)this + 196) >> 1) & 3;
  if (v25 != 1)
    LOBYTE(v25) = v25 != 2 && (*((_DWORD *)this + 44) & 0x30) != 16;
  *((_BYTE *)this + 229) = v25;
  v26 = *((_DWORD *)this + 44);
  v27 = *((_BYTE *)this + 180);
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  if (v28)
    *(_DWORD *)v28 += 2;
  v29 = *((unsigned int *)this + 17);
  if ((_DWORD)v29)
  {
    if (v29 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19416AED0);
    }
    v72 = v26;
    v73 = WTF::fastMalloc((WTF *)(8 * v29));
    v30 = (WTF *)v73;
    v74 = *((unsigned int *)this + 17);
    if ((_DWORD)v74)
    {
      v103 = 0;
      v104 = *((_QWORD *)this + 7);
      v105 = 8 * v74;
      do
      {
        v106 = *(_DWORD **)(v104 + v103);
        if (v106)
          *v106 += 2;
        *(_QWORD *)(v73 + v103) = v106;
        v103 += 8;
      }
      while (v105 != v103);
    }
    v26 = v72;
  }
  else
  {
    v30 = 0;
  }
  v31 = *((unsigned int *)this + 21);
  if ((_DWORD)v31)
  {
    if (v31 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19416AED8);
    }
    v75 = v30;
    v76 = v26;
    v77 = WTF::fastMalloc((WTF *)(8 * v31));
    v32 = (WTF *)v77;
    v78 = *((unsigned int *)this + 21);
    if ((_DWORD)v78)
    {
      v107 = 0;
      v108 = *((_QWORD *)this + 9);
      v109 = 8 * v78;
      v30 = v75;
      do
      {
        v110 = *(_DWORD **)(v108 + v107);
        if (v110)
          *v110 += 2;
        *(_QWORD *)(v77 + v107) = v110;
        v107 += 8;
      }
      while (v109 != v107);
      v26 = v76;
    }
    else
    {
      v26 = v76;
      v30 = v75;
    }
  }
  else
  {
    v32 = 0;
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  if (v33)
    *(_DWORD *)v33 += 2;
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  if (v34)
    *(_DWORD *)v34 += 2;
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  if (v35)
    *(_DWORD *)v35 += 2;
  v36 = *((unsigned __int16 *)this + 56);
  v37 = *((unsigned __int8 *)this + 182);
  v38 = *((_WORD *)this + 90);
  if (v28)
    *(_DWORD *)v28 += 2;
  if ((_DWORD)v29)
  {
    v136 = v37;
    v120 = v32;
    v128 = v30;
    v154 = v36;
    v164 = v26;
    if (v29 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19416AEE0);
    }
    v79 = WTF::fastMalloc((WTF *)(8 * v29));
    v39 = (WTF *)v79;
    v80 = 0;
    v32 = v120;
    v30 = v128;
    do
    {
      v81 = *(_DWORD **)((char *)v128 + v80);
      if (v81)
        *v81 += 2;
      *(_QWORD *)(v79 + v80) = v81;
      v80 += 8;
    }
    while (8 * v29 != v80);
    v36 = v154;
    v26 = v164;
    v37 = v136;
  }
  else
  {
    v39 = 0;
  }
  if ((_DWORD)v31)
  {
    v137 = v37;
    v121 = v32;
    v129 = v30;
    v155 = v36;
    v165 = v26;
    v114 = v39;
    if (v31 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19416AEE8);
    }
    v82 = WTF::fastMalloc((WTF *)(8 * v31));
    v40 = (WTF *)v82;
    v83 = 0;
    v32 = v121;
    do
    {
      v84 = *(_DWORD **)((char *)v121 + v83);
      if (v84)
        *v84 += 2;
      *(_QWORD *)(v82 + v83) = v84;
      v83 += 8;
    }
    while (8 * v31 != v83);
    v36 = v155;
    v26 = v165;
    v39 = v114;
    v30 = v129;
    v37 = v137;
  }
  else
  {
    v40 = 0;
  }
  if (v33)
    *(_DWORD *)v33 += 2;
  if (v34)
    *(_DWORD *)v34 += 2;
  if (v35)
  {
    v41 = *(_DWORD *)v35;
    *(_DWORD *)v35 += 2;
    if (v41)
    {
      *(_DWORD *)v35 = v41;
    }
    else
    {
      v148 = v36;
      v158 = v26;
      v47 = v39;
      v117 = v32;
      v124 = v30;
      v140 = v40;
      v132 = v37;
      WTF::StringImpl::destroy(v35, a2);
      v37 = v132;
      v32 = v117;
      v30 = v124;
      v36 = v148;
      v26 = v158;
      v40 = v140;
      v39 = v47;
    }
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      v149 = v36;
      v159 = v26;
      v48 = v39;
      v118 = v32;
      v125 = v30;
      v141 = v40;
      v133 = v37;
      WTF::StringImpl::destroy(v34, a2);
      v37 = v133;
      v32 = v118;
      v30 = v125;
      v36 = v149;
      v26 = v159;
      v40 = v141;
      v39 = v48;
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      v150 = v36;
      v160 = v26;
      v49 = v39;
      v119 = v32;
      v126 = v30;
      v142 = v40;
      v134 = v37;
      WTF::StringImpl::destroy(v33, a2);
      v37 = v134;
      v32 = v119;
      v30 = v126;
      v36 = v150;
      v26 = v160;
      v40 = v142;
      v39 = v49;
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  if ((_DWORD)v31)
  {
    v85 = 8 * v31;
    v86 = (WTF::StringImpl **)v32;
    do
    {
      v87 = *v86;
      *v86 = 0;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          v156 = v36;
          v166 = v26;
          v88 = v39;
          v122 = v32;
          v130 = v30;
          v146 = v40;
          v138 = v37;
          v112 = v86;
          v115 = v85;
          WTF::StringImpl::destroy(v87, a2);
          v86 = v112;
          v85 = v115;
          v37 = v138;
          v32 = v122;
          v30 = v130;
          v36 = v156;
          v26 = v166;
          v40 = v146;
          v39 = v88;
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
      ++v86;
      v85 -= 8;
    }
    while (v85);
  }
  if (v32)
  {
    v152 = v36;
    v162 = v26;
    v59 = v39;
    v127 = v30;
    v144 = v40;
    v135 = v37;
    WTF::fastFree(v32, a2);
    v37 = v135;
    v36 = v152;
    v26 = v162;
    v40 = v144;
    v30 = v127;
    v39 = v59;
  }
  if ((_DWORD)v29)
  {
    v89 = 8 * v29;
    v90 = (WTF::StringImpl **)v30;
    do
    {
      v91 = *v90;
      *v90 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
        {
          v157 = v36;
          v167 = v26;
          v92 = v39;
          v123 = v89;
          v131 = v30;
          v147 = v40;
          v139 = v37;
          v116 = v90;
          WTF::StringImpl::destroy(v91, a2);
          v90 = v116;
          v89 = v123;
          v37 = v139;
          v36 = v157;
          v26 = v167;
          v40 = v147;
          v30 = v131;
          v39 = v92;
        }
        else
        {
          *(_DWORD *)v91 -= 2;
        }
      }
      ++v90;
      v89 -= 8;
    }
    while (v89);
  }
  if (v30)
  {
    v153 = v36;
    v163 = v26;
    v60 = v39;
    v145 = v40;
    WTF::fastFree(v30, a2);
    v36 = v153;
    v26 = v163;
    v40 = v145;
    v39 = v60;
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      v151 = v36;
      v161 = v26;
      v113 = v39;
      v143 = v40;
      WTF::StringImpl::destroy(v28, a2);
      v36 = v151;
      v26 = v161;
      v40 = v143;
      v39 = v113;
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  if (v26 & 0x7FFF0000 | v27 & 3 | v27 & 0x1C | v27 & 0x20)
    v42 = 0;
  else
    v42 = v36 > 0xFF;
  v43 = v42;
  if ((v38 & 0x1C0) != 0)
    v43 = 0;
  if ((v38 & 0x600) != 0)
    v43 = 0;
  if ((v38 & 0x800) != 0)
    v43 = 0;
  if ((v38 & 0x3000) != 0)
    v44 = 0;
  else
    v44 = v43;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      v50 = v35;
      v51 = v39;
      v52 = v40;
      WTF::StringImpl::destroy(v50, a2);
      v40 = v52;
      v39 = v51;
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      v53 = v34;
      v54 = v39;
      v55 = v40;
      WTF::StringImpl::destroy(v53, a2);
      v40 = v55;
      v39 = v54;
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      v56 = v33;
      v57 = v39;
      v58 = v40;
      WTF::StringImpl::destroy(v56, a2);
      v40 = v58;
      v39 = v57;
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  if ((_DWORD)v31)
  {
    v93 = 8 * v31;
    v94 = (WTF::StringImpl **)v40;
    do
    {
      v95 = *v94;
      *v94 = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
        {
          v96 = v39;
          v97 = v40;
          WTF::StringImpl::destroy(v95, a2);
          v40 = v97;
          v39 = v96;
        }
        else
        {
          *(_DWORD *)v95 -= 2;
        }
      }
      ++v94;
      v93 -= 8;
    }
    while (v93);
  }
  if (v40)
  {
    v61 = v39;
    WTF::fastFree(v40, a2);
    v39 = v61;
  }
  if ((_DWORD)v29)
  {
    v98 = 8 * v29;
    v99 = (WTF::StringImpl **)v39;
    do
    {
      v100 = *v99;
      *v99 = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
        {
          v101 = v39;
          WTF::StringImpl::destroy(v100, a2);
          v39 = v101;
        }
        else
        {
          *(_DWORD *)v100 -= 2;
        }
      }
      ++v99;
      v98 -= 8;
    }
    while (v98);
  }
  if (v39)
    WTF::fastFree(v39, a2);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  v45 = !v44 || *((_DWORD *)this + 7) || (*((_DWORD *)this + 44) & 0x30) != 16;
  *((_BYTE *)this + 230) = v45;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return this;
}

uint64_t WebCore::FontCascade::operator=(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  unsigned int *v6;
  int v7;
  _DWORD *v8;
  WebCore::FontCascadeFonts *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  WebCore::FontDescription::operator=(a1 + 16, a2 + 16);
  v5 = *(_DWORD **)(a2 + 184);
  ++*v5;
  v6 = *(unsigned int **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v5;
  if (v6)
  {
    if (*v6 == 1)
    {
      v19 = v6[1];
      if ((_DWORD)v19)
      {
        v20 = (WTF::StringImpl **)(v6 + 2);
        v21 = 8 * v19;
        do
        {
          v22 = *v20;
          *v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v4);
            else
              *(_DWORD *)v22 -= 2;
          }
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
      WTF::fastFree((WTF *)v6, v4);
    }
    else
    {
      --*v6;
    }
  }
  v7 = *(_DWORD *)(a2 + 192);
  *(_WORD *)(a1 + 196) = *(_WORD *)(a2 + 196);
  *(_DWORD *)(a1 + 192) = v7;
  v8 = *(_DWORD **)(a2 + 216);
  if (v8)
    ++*v8;
  v9 = *(WebCore::FontCascadeFonts **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v9, v4);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  if (a1 != a2)
  {
    v10 = (_DWORD *)(a1 + 200);
    if (*(_BYTE *)(a1 + 204) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 200));
    v11 = *(unsigned __int8 *)(a2 + 204);
    *(_BYTE *)(a1 + 204) = v11;
    *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
    if (v11 <= 0xD)
    {
      v12 = 1 << v11;
      if ((v12 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 206) = *(_BYTE *)(a2 + 206);
        *v10 = *(_DWORD *)(a2 + 200);
      }
      else if ((v12 & 0x3003) != 0)
      {
        *v10 = 0;
      }
      else
      {
        *v10 = *(_DWORD *)(a2 + 200);
        WebCore::Length::ref((int *)(a1 + 200));
      }
    }
    v13 = (_DWORD *)(a1 + 208);
    if (*(_BYTE *)(a1 + 212) == 11)
      WebCore::Length::deref((WebCore::Length *)(a1 + 208));
    v14 = *(unsigned __int8 *)(a2 + 212);
    *(_BYTE *)(a1 + 212) = v14;
    *(_BYTE *)(a1 + 213) = *(_BYTE *)(a2 + 213);
    if (v14 <= 0xD)
    {
      v15 = 1 << v14;
      if ((v15 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 214) = *(_BYTE *)(a2 + 214);
        *v13 = *(_DWORD *)(a2 + 208);
      }
      else if ((v15 & 0x3003) != 0)
      {
        *v13 = 0;
      }
      else
      {
        *v13 = *(_DWORD *)(a2 + 208);
        WebCore::Length::ref((int *)(a1 + 208));
      }
    }
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_WORD *)(a1 + 229) = *(_WORD *)(a2 + 229);
  return a1;
}

uint64_t WebCore::FontDescription::operator=(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  __int128 v11;

  WTF::Vector<WebCore::FontTaggedSetting<int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, a2);
  WebCore::FontTaggedSettings<float>::operator=((WTF *)(a1 + 16), (WTF *)(a2 + 16));
  WebCore::FontVariantAlternatesValues::operator=(a1 + 32, a2 + 32);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = *(_DWORD **)(a2 + 112);
  if (v5)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v7 = *(_DWORD **)(a2 + 128);
  if (v7)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_DWORD **)(a2 + 136);
  if (v9)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v4);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 159) = *(_QWORD *)(a2 + 159);
  *(_OWORD *)(a1 + 144) = v11;
  return a1;
}

WTF *WebCore::FontTaggedSettings<float>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
    v4 = v5;
    goto LABEL_4;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
  {
LABEL_4:
    v7 = *(char **)v2;
    if (v4)
    {
      memmove(v7, *(const void **)a2, 8 * v4);
      v8 = *((unsigned int *)v2 + 3);
      v7 = *(char **)v2;
    }
    else
    {
      v8 = 0;
    }
    memcpy(&v7[8 * v8], (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 3) - (*(_QWORD *)a2 + 8 * v8));
    *((_DWORD *)v2 + 3) = *((_DWORD *)a2 + 3);
    return v2;
  }
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v9 = *((unsigned int *)a2 + 3);
  if (v6 >= v9)
  {
LABEL_18:
    v4 = *((_DWORD *)v2 + 3);
    goto LABEL_4;
  }
  if (!(v9 >> 29))
  {
    v10 = *(char **)v2;
    v11 = *((unsigned int *)v2 + 3);
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *((_DWORD *)v2 + 2) = v9;
    *(_QWORD *)v2 = v12;
    memcpy(v12, v10, 8 * v11);
    if (v10)
    {
      if (*(char **)v2 == v10)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree((WTF *)v10, v13);
    }
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::FontVariantAlternatesValues::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 8), (unsigned int *)(a2 + 8));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 24), (unsigned int *)(a2 + 24));
  v7 = *(_DWORD **)(a2 + 40);
  if (v7)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_DWORD **)(a2 + 48);
  if (v9)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(_DWORD **)(a2 + 56);
  if (v11)
    *v11 += 2;
  v12 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  return a1;
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  void *v22;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = result[3];
  v5 = (WTF::StringImpl *)a2[3];
  if (v4 > v5)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, v5);
LABEL_4:
    v7 = *(WTF::StringImpl ***)a2;
    v8 = v2[3];
    v9 = *(WTF::StringImpl ***)v2;
    if ((_DWORD)v8)
    {
      v10 = 8 * v8;
      do
      {
        v11 = *v7;
        if (*v7)
          *(_DWORD *)v11 += 2;
        v12 = *v9;
        *v9 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v5);
          else
            *(_DWORD *)v12 -= 2;
        }
        ++v7;
        ++v9;
        v10 -= 8;
      }
      while (v10);
      v7 = *(WTF::StringImpl ***)a2;
      v13 = v2[3];
      v9 = *(WTF::StringImpl ***)v2;
    }
    else
    {
      v13 = 0;
    }
    v14 = a2[3];
    if (v13 != (_DWORD)v14)
    {
      v15 = &v9[v13];
      v16 = &v7[v13];
      v17 = 8 * v14 - 8 * v13;
      do
      {
        v18 = *v16;
        if (*v16)
          *(_DWORD *)v18 += 2;
        *v15++ = v18;
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    v2[3] = v14;
    return v2;
  }
  v6 = result[2];
  if (v5 <= v6)
    goto LABEL_4;
  if (v6)
  {
    if (v4)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, 0);
    result = *(unsigned int **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  v19 = a2[3];
  if (v2[2] >= v19)
    goto LABEL_4;
  if (!(v19 >> 29))
  {
    v20 = *(WTF::StringImpl ***)v2;
    v21 = v2[3];
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    v2[2] = v19;
    *(_QWORD *)v2 = v22;
    memcpy(v22, v20, 8 * v21);
    if (v20)
    {
      if (*(WTF::StringImpl ***)v2 == v20)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      WTF::fastFree((WTF *)v20, v5);
    }
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::FontCascade::FontCascade(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::FontCache *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 28) = v5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 40) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 44) = v6;
  v7 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 56) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(a1 + 64) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 68) = v8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(a1 + 80) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(a1 + 84) = v9;
  v10 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(a1 + 88) = v10;
  v11 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(a1 + 96) = v11;
  v12 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 104) = v12;
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 104);
  v13 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 136) = a2[15];
  v14 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(a1 + 144) = v14;
  v15 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(a1 + 152) = v15;
  v16 = *((_OWORD *)a2 + 9);
  *(_QWORD *)(a1 + 175) = *(uint64_t *)((char *)a2 + 159);
  *(_OWORD *)(a1 + 160) = v16;
  v17 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(a1 + 184) = v17;
  LODWORD(v17) = *((_DWORD *)a2 + 44);
  v18 = *((_WORD *)a2 + 90);
  *(_DWORD *)(a1 + 200) = 0;
  v19 = a1 + 200;
  *(_WORD *)(v19 - 4) = v18;
  *(_DWORD *)(v19 - 8) = v17;
  *(_WORD *)(v19 + 5) = 0;
  v20 = *(unsigned __int8 *)(a3 + 204);
  *(_BYTE *)(v19 + 4) = v20;
  *(_BYTE *)(v19 + 5) = *(_BYTE *)(a3 + 205);
  if (v20 <= 0xD)
  {
    v21 = 1 << v20;
    if ((v21 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 206) = *(_BYTE *)(a3 + 206);
      *(_DWORD *)v19 = *(_DWORD *)(a3 + 200);
    }
    else if ((v21 & 0x3003) != 0)
    {
      *(_DWORD *)v19 = 0;
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a3 + 200);
      WebCore::Length::ref((int *)v19);
    }
  }
  *(_DWORD *)(a1 + 208) = 0;
  v22 = (int *)(a1 + 208);
  *(_WORD *)(a1 + 213) = 0;
  v23 = *(unsigned __int8 *)(a3 + 212);
  *(_BYTE *)(a1 + 212) = v23;
  *(_BYTE *)(a1 + 213) = *(_BYTE *)(a3 + 213);
  if (v23 <= 0xD)
  {
    v24 = 1 << v23;
    if ((v24 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 214) = *(_BYTE *)(a3 + 214);
      *v22 = *(_DWORD *)(a3 + 208);
    }
    else if ((v24 & 0x3003) != 0)
    {
      *v22 = 0;
    }
    else
    {
      *v22 = *(_DWORD *)(a3 + 208);
      v22 = WebCore::Length::ref(v22);
    }
  }
  *(_QWORD *)(a1 + 216) = 0;
  do
  {
    v25 = __ldaxr(&WebCore::lastFontCascadeGeneration);
    v26 = v25 + 1;
  }
  while (__stlxr(v26, &WebCore::lastFontCascadeGeneration));
  *(_DWORD *)(a1 + 224) = v26;
  v27 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v27 || (v28 = *(_QWORD *)(v27 + 96)) == 0)
    v28 = WebCore::threadGlobalDataSlow((WebCore *)v22);
  v29 = *(WebCore::FontCache **)(v28 + 80);
  if (!v29)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v28);
    v29 = *(WebCore::FontCache **)(v28 + 80);
  }
  v30 = *(_QWORD *)(a1 + 184);
  if (!*(_DWORD *)(v30 + 4))
  {
    __break(0xC471u);
    JUMPOUT(0x19416B980);
  }
  *(_BYTE *)(a1 + 228) = WebCore::FontCache::useBackslashAsYenSignForFamily(v29, (const WTF::AtomString *)(v30 + 8));
  v32 = (*(unsigned __int8 *)(a1 + 196) >> 1) & 3;
  if (v32 != 1)
    LOBYTE(v32) = v32 != 2 && (*(_DWORD *)(a1 + 176) & 0x30) != 16;
  *(_BYTE *)(a1 + 229) = v32;
  *(_BYTE *)(a1 + 230) = WebCore::FontCascade::computeRequiresShaping((WebCore::FontCascade *)a1, v31);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return a1;
}

uint64_t WebCore::FontCache::useBackslashAsYenSignForFamily(WebCore::FontCache *this, const WTF::AtomString *a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  const WTF::AtomString *v13;
  WebCore::FontCache *v14;

  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    if (!*((_DWORD *)this + 27))
    {
      v13 = a2;
      v14 = this;
      WebCore::FontCache::useBackslashAsYenSignForFamily(WTF::AtomString const&)::$_0::operator()((uint64_t)this, (uint64_t)"MS PGothic", 0xBuLL);
      WebCore::FontCache::useBackslashAsYenSignForFamily(WTF::AtomString const&)::$_0::operator()((uint64_t)v14, (uint64_t)"MS PMincho", 0xBuLL);
      WebCore::FontCache::useBackslashAsYenSignForFamily(WTF::AtomString const&)::$_0::operator()((uint64_t)v14, (uint64_t)"MS Gothic", 0xAuLL);
      WebCore::FontCache::useBackslashAsYenSignForFamily(WTF::AtomString const&)::$_0::operator()((uint64_t)v14, (uint64_t)"MS Mincho", 0xAuLL);
      WebCore::FontCache::useBackslashAsYenSignForFamily(WTF::AtomString const&)::$_0::operator()((uint64_t)v14, (uint64_t)"Meiryo", 7uLL);
      a2 = v13;
      this = v14;
    }
    v3 = *((_QWORD *)this + 12);
    if (v3)
    {
      v4 = *((_DWORD *)this + 26);
      v5 = v4 - 1;
      v6 = *((_DWORD *)this + 28);
      v7 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      v8 = (v6 ^ (v7 >> 8)) & (v4 - 1);
      v9 = *(_QWORD *)(v3 + 8 * v8);
      if (v9)
      {
        v10 = v7 >> 8;
        v11 = -1;
        while (1)
        {
          v12 = *(_DWORD *)(v9 + 16);
          if (++v11 > ((v8 + v4 - ((v6 ^ (v12 >> 8)) & v5)) & v5))
            break;
          if (v9 == *(_QWORD *)a2 && v12 >> 8 == v10)
            return 1;
          result = 0;
          v8 = (v8 + 1) & v5;
          v9 = *(_QWORD *)(v3 + 8 * v8);
          if (!v9)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateCondition(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[4];
  _QWORD *v18;

  v3 = *((_DWORD *)a2 + 5);
  if (!v3)
  {
    LOBYTE(v9) = 2;
    return v9;
  }
  v6 = *a2;
  if (!*a2)
  {
    v7 = *((_QWORD *)a2 + 1);
    v8 = 88 * v3;
    LOBYTE(v9) = 1;
    while (1)
    {
      v17[0] = a1;
      v17[1] = a3;
      v17[2] = a1;
      v17[3] = a3;
      v10 = *(unsigned int *)(v7 + 80);
      if ((_DWORD)v10 == -1)
        break;
      v18 = v17;
      v11 = ((uint64_t (*)(_QWORD **, uint64_t))off_1E339E828[v10])(&v18, v7);
      if (!v11)
      {
        LOBYTE(v9) = 0;
        return v9;
      }
      if (v11 == 2)
        LOBYTE(v9) = 2;
      v7 += 88;
      v8 -= 88;
      if (!v8)
        return v9;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_25;
  }
  if (v6 != 1)
  {
    if (v6 != 2)
    {
      __break(0xC471u);
      goto LABEL_26;
    }
    v13 = WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(a1, *((_QWORD *)a2 + 1), a3);
    if (v13 < 3)
      return (0x20001u >> (8 * v13));
LABEL_25:
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x19416BCCCLL);
  }
  LOBYTE(v9) = 0;
  v14 = *((_QWORD *)a2 + 1);
  v15 = 88 * v3;
  do
  {
    v16 = WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(a1, v14, a3);
    if (v16 == 1)
    {
      LOBYTE(v9) = 1;
      return v9;
    }
    if (v16 == 2)
      LOBYTE(v9) = 2;
    v14 += 88;
    v15 -= 88;
  }
  while (v15);
  return v9;
}

uint64_t WebCore::MQ::Features::IdentifierSchema::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  BOOL v22;
  uint64_t v25;
  WTF *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;

  (*(void (**)(WTF **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(&v26, *(_QWORD *)(a1 + 32), a3);
  v5 = v26;
  v6 = v28;
  if (v28)
  {
    if (*(_BYTE *)(a2 + 56))
    {
      v13 = *(_QWORD *)(a2 + 48);
      if (((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19416BE2CLL);
      }
      if ((*(_WORD *)(v13 + 4) & 0x7F) == 0x50)
      {
        v18 = *(unsigned __int16 *)(v13 + 8);
        v19 = 2 * v28 - 2;
        v20 = v26;
        do
        {
          v21 = *(unsigned __int16 *)v20;
          v20 = (WTF *)((char *)v20 + 2);
          v6 = v18 == v21;
          v22 = v18 == v21 || v19 == 0;
          v19 -= 2;
        }
        while (!v22);
      }
      else
      {
        v14 = 2 * v28 - 2;
        v15 = v26;
        do
        {
          v16 = *(unsigned __int16 *)v15;
          v15 = (WTF *)((char *)v15 + 2);
          v6 = v16 == 0;
          if (v16)
            v17 = v14 == 0;
          else
            v17 = 1;
          v14 -= 2;
        }
        while (!v17);
      }
    }
    else
    {
      v7 = 2 * v28 - 2;
      v8 = v26;
      do
      {
        v10 = *(unsigned __int16 *)v8;
        v8 = (WTF *)((char *)v8 + 2);
        v9 = v10;
        v11 = v10 == 6 || v9 == 959;
        v6 = !v11;
        if (!v11)
          break;
        v12 = v7;
        v7 -= 2;
      }
      while (v12);
    }
  }
  if (&v29 != (uint64_t *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    v25 = v6;
    WTF::fastFree(v5, v4);
    return v25;
  }
  return v6;
}

uint64_t WebCore::ResourceResponseBase::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  WTF *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;
  const void *v28;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  v7 = *(_DWORD **)(a2 + 40);
  if (v7)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_DWORD **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (v9)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(_DWORD **)(a2 + 64);
  if (v11)
    *v11 += 2;
  v12 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(_DWORD **)(a2 + 72);
  if (v13)
    *v13 += 2;
  v14 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 80), (unsigned int *)(a2 + 80));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 96, (unsigned int *)(a2 + 96));
  v16 = *(unsigned int **)(a2 + 112);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v18 = *(WTF **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  if (v18)
    WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v18, v15);
  if (*(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (*(_BYTE *)(a1 + 128))
    {
      v19 = *(const void **)(a2 + 120);
      if (v19)
      {
        v28 = *(const void **)(a2 + 120);
        CFRetain(v19);
        v19 = v28;
      }
      v20 = *(const void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v19;
      if (v20)
        CFRelease(v20);
    }
  }
  else if (*(_BYTE *)(a1 + 128))
  {
    v21 = *(const void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    if (v21)
      CFRelease(v21);
    *(_BYTE *)(a1 + 128) = 0;
  }
  else
  {
    v22 = *(const void **)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v22;
    if (v22)
      CFRetain(v22);
    *(_BYTE *)(a1 + 128) = 1;
  }
  v23 = *(_WORD *)(a2 + 136);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_WORD *)(a1 + 136) = v23;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v24 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v24;
  v25 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
  *(_OWORD *)(a1 + 200) = v25;
  v26 = *(_WORD *)(a2 + 232);
  *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
  *(_WORD *)(a1 + 232) = v26;
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _QWORD *v28;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *(unsigned int *)(result + 12);
  v5 = a2[3];
  if (v4 > v5)
  {
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 16 * v5), (WTF::StringImpl *)(*(_QWORD *)result + 16 * v4));
    *(_DWORD *)(v2 + 12) = v5;
    goto LABEL_5;
  }
  v6 = *(_DWORD *)(result + 8);
  if (v5 <= v6)
    goto LABEL_4;
  if (v6)
  {
    if ((_DWORD)v4)
    {
      WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 16 * v4));
      *(_DWORD *)(v2 + 12) = 0;
    }
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v20 = a2[3];
  if (*(_DWORD *)(v2 + 8) >= v20)
  {
LABEL_4:
    v5 = *(unsigned int *)(v2 + 12);
LABEL_5:
    v7 = *(WTF::StringImpl ***)a2;
    v8 = *(WTF::StringImpl ***)v2;
    if ((_DWORD)v5)
    {
      v9 = &v7[2 * v5];
      do
      {
        v10 = *v7;
        if (*v7)
          *(_DWORD *)v10 += 2;
        v11 = *v8;
        *v8 = v10;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v7[1];
        if (v12)
          *(_DWORD *)v12 += 2;
        v13 = v8[1];
        v8[1] = v12;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v13 -= 2;
        }
        v7 += 2;
        v8 += 2;
      }
      while (v7 != v9);
      v7 = *(WTF::StringImpl ***)a2;
      v14 = *(_DWORD *)(v2 + 12);
      v8 = *(WTF::StringImpl ***)v2;
    }
    else
    {
      v14 = 0;
    }
    v15 = a2[3];
    if (v14 != (_DWORD)v15)
    {
      v16 = &v8[2 * v14];
      v17 = &v7[2 * v14];
      do
      {
        v18 = *v17;
        if (*v17)
          *(_DWORD *)v18 += 2;
        *v16 = v18;
        v19 = v17[1];
        if (v19)
          *(_DWORD *)v19 += 2;
        v16[1] = v19;
        v17 += 2;
        v16 += 2;
      }
      while (v17 != &v7[2 * v15]);
    }
    *(_DWORD *)(v2 + 12) = v15;
    return v2;
  }
  if (!(v20 >> 28))
  {
    v21 = *(WTF **)v2;
    v22 = *(unsigned int *)(v2 + 12);
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v20));
    *(_DWORD *)(v2 + 8) = v20;
    *(_QWORD *)v2 = v23;
    if ((_DWORD)v22)
    {
      v24 = (WTF *)((char *)v21 + 16 * v22);
      v25 = v21;
      do
      {
        v26 = *(WTF::StringImpl **)v25;
        *(_QWORD *)v25 = 0;
        *v23 = v26;
        v27 = *((_QWORD *)v25 + 1);
        *((_QWORD *)v25 + 1) = 0;
        v23[1] = v27;
        v28 = v23;
        WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)v25, (WTF::StringImpl *)a2);
        v25 = (WTF *)((char *)v25 + 16);
        v23 = v28 + 2;
      }
      while (v25 != v24);
    }
    if (v21)
    {
      if (*(WTF **)v2 == v21)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v21, a2);
    }
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = result[3];
  v5 = (WTF::StringImpl *)a2[3];
  if (v4 > v5)
  {
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::shrink(result, v5);
LABEL_9:
    v11 = *(_QWORD *)a2;
    v12 = v2[3];
    v13 = *(unsigned int **)v2;
    if ((_DWORD)v12)
    {
      v14 = v11 + 16 * v12;
      do
      {
        *(_WORD *)v13 = *(_WORD *)v11;
        v15 = *(_DWORD **)(v11 + 8);
        if (v15)
          *v15 += 2;
        v16 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = v15;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v5);
          else
            *(_DWORD *)v16 -= 2;
        }
        v11 += 16;
        v13 += 4;
      }
      while (v11 != v14);
      v11 = *(_QWORD *)a2;
      v17 = v2[3];
      v13 = *(unsigned int **)v2;
    }
    else
    {
      v17 = 0;
    }
    v18 = a2[3];
    if (v17 != (_DWORD)v18)
    {
      v19 = &v13[4 * v17];
      v20 = v11 + 16 * v17;
      do
      {
        *(_WORD *)v19 = *(_WORD *)v20;
        v21 = *(_DWORD **)(v20 + 8);
        if (v21)
          *v21 += 2;
        *((_QWORD *)v19 + 1) = v21;
        v20 += 16;
        v19 += 4;
      }
      while (v20 != v11 + 16 * v18);
    }
    v2[3] = v18;
    return v2;
  }
  v6 = result[2];
  if (v5 <= v6)
    goto LABEL_9;
  if (v6)
  {
    if ((_DWORD)v4)
    {
      v27 = 16 * v4;
      v28 = (WTF::StringImpl **)(*(_QWORD *)result + 8);
      do
      {
        v29 = *v28;
        *v28 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v5);
          else
            *(_DWORD *)v29 -= 2;
        }
        v28 += 2;
        v27 -= 16;
      }
      while (v27);
      v2[3] = 0;
    }
    result = *(unsigned int **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  v7 = a2[3];
  if (v2[2] >= v7)
    goto LABEL_9;
  if (!(v7 >> 28))
  {
    v8 = *(WTF **)v2;
    v9 = v2[3];
    v10 = WTF::fastMalloc((WTF *)(16 * v7));
    v2[2] = v7;
    *(_QWORD *)v2 = v10;
    if ((_DWORD)v9)
    {
      v22 = v10;
      v23 = (WTF *)((char *)v8 + 16 * v9);
      v24 = v8;
      do
      {
        *(_WORD *)v22 = *(_WORD *)v24;
        v25 = *((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        *(_QWORD *)(v22 + 8) = v25;
        v26 = (WTF::StringImpl *)*((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v5);
          else
            *(_DWORD *)v26 -= 2;
        }
        v24 = (WTF *)((char *)v24 + 16);
        v22 += 16;
      }
      while (v24 != v23);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      WTF::fastFree(v8, v5);
    }
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,BOOL>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,BOOL,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_BYTE *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = -1;
      *v10 = 0;
      v10 += 16;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (_QWORD *)(v4 + 16 * i);
      if (*v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (*v12 + ~(*v12 << 32)) ^ ((*v12 + ~(*v12 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v18;
          v21 = *(_QWORD *)(v13 + 16 * v18);
          v18 = (v18 + v19++) & v14;
        }
        while (v21 != -1);
        *(_OWORD *)(v13 + 16 * v20) = *(_OWORD *)v12;
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::SecurityOrigin *v12;
  WebCore::SecurityOrigin *v13;
  WTF::StringImpl *v14;
  const WebCore::SecurityOrigin *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v3 = *((_QWORD *)a2 + 9);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19416C8F8);
  }
  v7 = v4 - 288;
  v8 = *(_QWORD *)(v4 + 2344);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v7 = v9;
  }
  v10 = *(_QWORD *)(a1 + 3408);
  if (*(_BYTE *)(v10 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x19416C918);
  }
  v11 = *(_QWORD *)(v10 + 72);
  if (v11)
  {
    v11 = *(_QWORD *)(v11 + 8);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19416C938);
      }
      v11 -= 288;
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), a2);
  v13 = v12;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v7 + 192), v14);
  if ((WebCore::SecurityOrigin::isSameOriginDomain(v13, v15) & 1) != 0)
    return 1;
  if (a3 == 1)
  {
    v19 = *(_QWORD *)(v7 + 528);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(*(WTF::StringImpl **)(v7 + 696), (WTF::StringImpl *)v10, 1, (char **)&v22);
      if (v20)
        WebCore::LocalDOMWindow::printErrorMessage(*(_QWORD *)(*(_QWORD *)(v20 + 296) + 696), (const WTF::String *)&v22);
    }
    else
    {
      WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(*(WTF::StringImpl **)(v7 + 696), (WTF::StringImpl *)v10, 1, (char **)&v22);
    }
    v18 = v22;
    v22 = 0;
    if (!v18)
      return 0;
  }
  else
  {
    if (a3 != 2)
      return 0;
    v22 = *(WTF::StringImpl **)(a1 + 56);
    WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(*(WTF::StringImpl **)(v7 + 696), (WTF::StringImpl *)v10, 0, (char **)&v21);
    WebCore::throwSecurityError((JSC::JSGlobalObject *)a1, &v22, &v21);
    v18 = v21;
    v21 = 0;
    if (!v18)
      return 0;
  }
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v17);
  else
    *(_DWORD *)v18 -= 2;
  return 0;
}

uint64_t WebCore::ResourceTiming::ResourceTiming(uint64_t a1, uint64_t a2, _DWORD **a3, _OWORD *a4, uint64_t a5, uint64_t a6, WebCore::SecurityOrigin *a7)
{
  _DWORD *v11;
  __int128 v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _DWORD *v18;
  __int128 v19;
  _DWORD *v20;
  BOOL v21;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v49;
  unsigned __int16 *v50;
  uint64_t v51;
  int v52;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  WTF *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  char v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  __int16 v109;
  WTF::StringImpl *v110;
  unsigned int v111;
  WTF::StringImpl *v112;

  v11 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v11 += 2;
  *(_QWORD *)a1 = v11;
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v12;
  v13 = *a3;
  if (*a3)
    *v13 += 2;
  *(_QWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 48) = *a4;
  v15 = *(_OWORD *)(a5 + 48);
  v14 = *(_OWORD *)(a5 + 64);
  v16 = *(_OWORD *)(a5 + 32);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a5 + 80);
  *(_OWORD *)(a1 + 112) = v15;
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 96) = v16;
  v17 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 80) = v17;
  v18 = *(_DWORD **)(a5 + 88);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(a1 + 152) = v18;
  v19 = *(_OWORD *)(a5 + 96);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a5 + 112);
  *(_OWORD *)(a1 + 160) = v19;
  v20 = *(_DWORD **)(a5 + 120);
  if (v20)
    ++*v20;
  *(_QWORD *)(a1 + 184) = v20;
  WebCore::ResourceResponseBase::httpHeaderField(a6, 73, &v102);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  if (!v102)
    goto LABEL_10;
  WebCore::HeaderFieldTokenizer::HeaderFieldTokenizer((uint64_t)&v111, (const WTF::String *)&v102);
  v24 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  do
  {
    if (!v112)
      goto LABEL_148;
    if (v111 >= *((_DWORD *)v112 + 1))
      break;
    WebCore::HeaderFieldTokenizer::consumeToken((WebCore::HeaderFieldTokenizer *)&v111, &v110);
    v25 = v110;
    if (!v110)
      break;
    v110 = 0;
    v106 = v25;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    while (v112)
    {
      v26 = v111;
      v27 = *((unsigned int *)v112 + 1);
      if (v111 >= v27)
        break;
      v28 = *((_DWORD *)v112 + 4);
      v29 = *((_QWORD *)v112 + 1);
      v30 = (v28 & 4) != 0 ? *(unsigned __int8 *)(v29 + v111) : *(unsigned __int16 *)(v29 + 2 * v111);
      if (v30 != 59)
        break;
      v31 = ++v111;
      if (v26 + 1 < v27)
      {
        if ((v28 & 4) != 0)
        {
          v32 = v27 - 1;
          v33 = (unsigned __int8 *)(v29 + v31);
          v34 = v27 - v31;
          do
          {
            if (!v34)
              break;
            v35 = *v33;
            v36 = v35 == 32 || v35 == 9;
            if (!v36)
              break;
            v111 = v26 + 2;
            ++v26;
            ++v33;
            --v34;
          }
          while (v32 != v26);
        }
        else
        {
          v49 = v27 - 1;
          v50 = (unsigned __int16 *)(v29 + 2 * v31);
          v51 = v27 - v31;
          do
          {
            if (!v51)
              break;
            v52 = *v50;
            if (v52 != 32 && v52 != 9)
              break;
            v111 = v26 + 2;
            ++v26;
            ++v50;
            --v51;
          }
          while (v49 != v26);
        }
      }
      WebCore::HeaderFieldTokenizer::consumeToken((WebCore::HeaderFieldTokenizer *)&v111, &v105);
      v38 = v105;
      if (!v105)
        break;
      v39 = *v24;
      if (*v24)
        *(_DWORD *)v39 += 2;
      v104 = v39;
      if (v112)
      {
        v40 = v111;
        v41 = *((unsigned int *)v112 + 1);
        if (v111 < v41)
        {
          v42 = *((_DWORD *)v112 + 4);
          v43 = *((_QWORD *)v112 + 1);
          v44 = (v42 & 4) != 0 ? *(unsigned __int8 *)(v43 + v111) : *(unsigned __int16 *)(v43 + 2 * v111);
          if (v44 == 61)
          {
            v45 = ++v111;
            if (v40 + 1 < v41)
            {
              v46 = 0;
              if ((v42 & 4) != 0)
              {
                while (v45 - v41 + v46)
                {
                  v47 = *(unsigned __int8 *)(v43 + v45 + v46);
                  if (v47 != 32 && v47 != 9)
                  {
                    LODWORD(v45) = v45 + v46;
                    goto LABEL_62;
                  }
                  v111 = v40 + v46++ + 2;
                  if (!((_DWORD)v45 - (_DWORD)v41 + (_DWORD)v46))
                    break;
                }
LABEL_77:
                v103 = 0;
                goto LABEL_78;
              }
              v55 = v43 + 2 * v45;
              v56 = ~v45 + v41;
              while (1)
              {
                v57 = *(unsigned __int16 *)(v55 + 2 * v46);
                if (v57 != 32 && v57 != 9)
                  break;
                v111 = v40 + v46 + 2;
                if (v40 + 2 - (_DWORD)v41 + (_DWORD)v46)
                {
                  v36 = v56 == v46++;
                  if (!v36)
                    continue;
                }
                goto LABEL_77;
              }
              LODWORD(v45) = v40 + v46 + 1;
            }
LABEL_62:
            if (v45 >= v41)
              goto LABEL_77;
            if ((v42 & 4) != 0)
              v54 = *(unsigned __int8 *)(v43 + v45);
            else
              v54 = *(unsigned __int16 *)(v43 + 2 * v45);
            if (v54 == 34)
              WebCore::HeaderFieldTokenizer::consumeQuotedString((WebCore::HeaderFieldTokenizer *)&v111, v37, &v103);
            else
              WebCore::HeaderFieldTokenizer::consumeToken((WebCore::HeaderFieldTokenizer *)&v111, &v103);
LABEL_78:
            v60 = v103;
            v59 = v104;
            v103 = 0;
            v104 = v60;
            if (v59)
            {
              v61 = *(_DWORD *)v59 - 2;
              if (*(_DWORD *)v59 != 2)
                goto LABEL_80;
              WTF::StringImpl::destroy(v59, v37);
              v59 = v103;
              v103 = 0;
              if (v59)
              {
                v61 = *(_DWORD *)v59 - 2;
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, v78);
                else
LABEL_80:
                  *(_DWORD *)v59 = v61;
              }
            }
            v62 = (WTF *)WTF::fastMalloc((WTF *)4);
            *(_DWORD *)v62 = 3866668;
            if (v112)
            {
              v64 = v111;
              v65 = *((unsigned int *)v112 + 1);
              if (v111 < v65)
              {
                do
                {
                  if (v64 < v65)
                  {
                    v66 = *((_QWORD *)v112 + 1);
                    v67 = (*((_BYTE *)v112 + 16) & 4) != 0
                        ? *(unsigned __int8 *)(v66 + v64)
                        : *(unsigned __int16 *)(v66 + 2 * v64);
                    if (v67 == 44 || v67 == 59)
                      break;
                  }
                  v111 = ++v64;
                }
                while (v65 != v64);
              }
            }
            WTF::fastFree(v62, v63);
            v38 = v105;
            if (!v105)
              goto LABEL_94;
          }
        }
      }
      v68 = *((_DWORD *)v38 + 1);
      if (v68 == 3)
      {
        v71 = *((_QWORD *)v38 + 1);
        if ((*((_BYTE *)v38 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v71 & 0xDF) != 0x44 || (*(_BYTE *)(v71 + 1) & 0xDF) != 0x55)
            goto LABEL_94;
          v72 = *(unsigned __int8 *)(v71 + 2);
        }
        else
        {
          if ((*(_WORD *)v71 & 0xFFDF) != 0x44 || (*(_WORD *)(v71 + 2) & 0xFFDF) != 0x55)
            goto LABEL_94;
          v72 = *(unsigned __int16 *)(v71 + 4);
        }
        if ((v72 & 0xFFFFFFDF) == 0x52 && !(_BYTE)v109)
        {
          WTF::String::toDouble((WTF::String *)&v104, 0);
          v107 = v73;
          LOBYTE(v109) = 1;
        }
      }
      else
      {
        if (v68 != 4)
          goto LABEL_94;
        v74 = *((_QWORD *)v38 + 1);
        if ((*((_BYTE *)v38 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v74 & 0xDF) != 0x44
            || (*(_BYTE *)(v74 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v74 + 2) & 0xDF) != 0x53)
          {
            goto LABEL_94;
          }
          v75 = *(unsigned __int8 *)(v74 + 3);
        }
        else
        {
          if ((*(_WORD *)v74 & 0xFFDF) != 0x44
            || (*(_WORD *)(v74 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v74 + 4) & 0xFFDF) != 0x53)
          {
            goto LABEL_94;
          }
          v75 = *(unsigned __int16 *)(v74 + 6);
        }
        if ((v75 & 0xFFFFFFDF) == 0x43 && !HIBYTE(v109))
        {
          v76 = v104;
          if (v104)
            *(_DWORD *)v104 += 2;
          v77 = v108;
          v108 = v76;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, v37);
            else
              *(_DWORD *)v77 -= 2;
          }
          HIBYTE(v109) = 1;
        }
      }
LABEL_94:
      v69 = v104;
      v104 = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v37);
        else
          *(_DWORD *)v69 -= 2;
      }
      v70 = v105;
      v105 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v37);
        else
          *(_DWORD *)v70 -= 2;
      }
    }
    v79 = *(unsigned int *)(a1 + 204);
    if ((_DWORD)v79 == *(_DWORD *)(a1 + 200))
    {
      WTF::Vector<WebCore::ServerTiming,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServerTiming>((unsigned int *)(a1 + 192), (unint64_t)&v106);
    }
    else
    {
      v80 = *(_QWORD *)(a1 + 192) + 32 * v79;
      v81 = v106;
      v106 = 0;
      *(_QWORD *)v80 = v81;
      *(_QWORD *)(v80 + 8) = v107;
      v82 = v108;
      v108 = 0;
      *(_QWORD *)(v80 + 16) = v82;
      *(_WORD *)(v80 + 24) = v109;
      *(_DWORD *)(a1 + 204) = v79 + 1;
    }
    v83 = WebCore::HeaderFieldTokenizer::consume(&v111, 44);
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::KeyValue::~KeyValue((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::KeyValue *)&v106, v84);
    v85 = v110;
    v110 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v23);
      else
        *(_DWORD *)v85 -= 2;
    }
  }
  while ((v83 & 1) != 0);
  v100 = v112;
  v112 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, v23);
    else
      *(_DWORD *)v100 -= 2;
  }
LABEL_148:
  v101 = v102;
  v102 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v23);
    else
      *(_DWORD *)v101 -= 2;
  }
LABEL_10:
  WebCore::ResourceResponse::platformLazyInit(a6, 2);
  *(_BYTE *)(a1 + 208) = (*(_WORD *)(a6 + 232) & 0x3C00) == 6144;
  if (*(char *)(a1 + 162) < 0)
    goto LABEL_11;
  v86 = *(_QWORD *)WebCore::SecurityOrigin::protocol(a7);
  if (v86)
  {
    v87 = *(unsigned __int8 **)(v86 + 8);
    v88 = *(unsigned int *)(v86 + 4);
    v89 = (unint64_t)((*(_DWORD *)(v86 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v87 = 0;
    v88 = 0;
    v89 = 0x100000000;
  }
  v90 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)a2);
  if (!WTF::operator==(v87, v89 | v88, v90, v91))
    goto LABEL_11;
  v92 = *(_QWORD *)WebCore::SecurityOrigin::host(a7);
  if (v92)
  {
    v93 = *(unsigned __int8 **)(v92 + 8);
    v94 = *(unsigned int *)(v92 + 4);
    v95 = (unint64_t)((*(_DWORD *)(v92 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v93 = 0;
    v94 = 0;
    v95 = 0x100000000;
  }
  v96 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)a2);
  if (WTF::operator==(v93, v95 | v94, v96, v97))
  {
    v98 = WebCore::SecurityOrigin::port(a7);
    v99 = WTF::URL::port((WTF::URL *)a2);
    v21 = ((v98 & 0xFF0000) != 0) == ((v99 & 0xFF0000) != 0);
    if ((v98 & 0xFF0000) != 0 && (v99 & 0xFF0000) != 0)
      v21 = (unsigned __int16)v98 == (unsigned __int16)v99;
  }
  else
  {
LABEL_11:
    v21 = 0;
  }
  *(_BYTE *)(a1 + 209) = v21;
  return a1;
}

