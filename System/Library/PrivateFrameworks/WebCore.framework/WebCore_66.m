void WebCore::Node::nodeValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::Node::setNodeValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

WTF **WebCore::Node::childNodes@<X0>(WebCore::Node *this@<X0>, uint64_t *a2@<X8>)
{
  __int16 v4;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  WebCore::NodeListsNodeData *v9;
  WTF *v10;
  void *v11;
  WTF::StringImpl *v12;
  WebCore::NodeListsNodeData *v13;
  WTF *v14;
  void *v15;

  v4 = *((_WORD *)this + 14);
  v5 = (uint64_t *)WebCore::Node::ensureRareData(this);
  v6 = *v5;
  if (this && (v4 & 4) != 0)
  {
    if (!v6)
    {
      v6 = WTF::fastMalloc((WTF *)0x28);
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      *(_QWORD *)(v6 + 32) = 0;
      v13 = (WebCore::NodeListsNodeData *)*v5;
      *v5 = v6;
      if (v13)
      {
        WebCore::NodeListsNodeData::~NodeListsNodeData(v13, v12);
        WTF::fastFree(v14, v15);
        v6 = *v5;
      }
    }
    return WebCore::NodeListsNodeData::ensureChildNodeList((WTF **)v6, this, a2);
  }
  else
  {
    if (!v6)
    {
      v6 = WTF::fastMalloc((WTF *)0x28);
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      *(_QWORD *)(v6 + 32) = 0;
      v9 = (WebCore::NodeListsNodeData *)*v5;
      *v5 = v6;
      if (v9)
      {
        WebCore::NodeListsNodeData::~NodeListsNodeData(v9, v8);
        WTF::fastFree(v10, v11);
        v6 = *v5;
      }
    }
    return (WTF **)WebCore::NodeListsNodeData::ensureEmptyChildNodeList(v6, this, a2);
  }
}

WTF **WebCore::NodeListsNodeData::ensureChildNodeList@<X0>(WTF **this@<X0>, WebCore::ContainerNode *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF **v4;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  v4 = this;
  if (*this)
  {
    v10 = *((_QWORD *)*this + 1);
    if (v10)
    {
      ++*(_DWORD *)(v10 + 16);
      *a3 = v10;
      return this;
    }
  }
  v6 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v6 + 16) = 1;
  *(_QWORD *)v6 = off_1E33A0D68;
  *(_QWORD *)(v6 + 8) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = a2;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(v6 + 72) &= 0xFCu;
  *a3 = v6;
  this = (WTF **)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 1;
  this[1] = (WTF *)v6;
  v8 = *(WTF **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = this;
  if (!v8)
    goto LABEL_5;
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_5:
    ++*(_DWORD *)this;
    goto LABEL_6;
  }
  WTF::fastFree(v8, v7);
  this = *(WTF ***)(v6 + 24);
  if (this)
    goto LABEL_5;
LABEL_6:
  v9 = *v4;
  *v4 = (WTF *)this;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      return (WTF **)WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
  }
  return this;
}

uint64_t WebCore::NodeListsNodeData::ensureEmptyChildNodeList@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;

  v4 = this;
  v6 = *(_QWORD *)(this + 8);
  if (v6)
  {
    v11 = *(_QWORD *)(v6 + 8);
    if (v11)
    {
      ++*(_DWORD *)(v11 + 16);
      *a3 = v11;
      return this;
    }
  }
  v7 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v7 + 16) = 1;
  *(_QWORD *)v7 = off_1E33A1220;
  *(_QWORD *)(v7 + 8) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  *a3 = v7;
  this = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = v7;
  v9 = *(WTF **)(v7 + 24);
  *(_QWORD *)(v7 + 24) = this;
  if (!v9)
    goto LABEL_5;
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
LABEL_5:
    ++*(_DWORD *)this;
    goto LABEL_6;
  }
  WTF::fastFree(v9, v8);
  this = *(_QWORD *)(v7 + 24);
  if (this)
    goto LABEL_5;
LABEL_6:
  v10 = *(WTF **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = this;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      return WTF::fastFree(v10, v8);
    else
      --*(_DWORD *)v10;
  }
  return this;
}

uint64_t WebCore::Node::previousElementSibling(uint64_t this)
{
  do
    this = *(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL;
  while (this && (*(_WORD *)(this + 28) & 8) == 0);
  return this;
}

uint64_t WebCore::Node::insertBefore@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, WebCore::Node **a3@<X2>, uint64_t a4@<X8>)
{
  if (a1 && (*(_WORD *)(a1 + 28) & 4) != 0)
    return (uint64_t)WebCore::ContainerNode::insertBefore(a1, a2, a3, a4);
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return a1;
}

WebCore::ContainerNode *WebCore::Node::replaceChild@<X0>(WebCore::ContainerNode *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, uint64_t a4@<X8>)
{
  if (this && (*((_WORD *)this + 14) & 4) != 0)
    return (WebCore::ContainerNode *)WebCore::ContainerNode::replaceChild(this, a2, a3, a4);
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return this;
}

WebCore::ContainerNode *WebCore::Node::removeChild@<X0>(WebCore::ContainerNode *this@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  if (this && (*((_WORD *)this + 14) & 4) != 0)
    return WebCore::ContainerNode::removeChild(this, a2, a3);
  *(_BYTE *)a3 = 5;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return this;
}

uint64_t WebCore::Node::appendChild@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (this && (*(_WORD *)(this + 28) & 4) != 0)
    return WebCore::ContainerNode::appendChild(this, a2, a3);
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return this;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v7 = *(WTF **)a1;
    v8 = 8 * v3;
    do
    {
      v9 = *(_QWORD *)v7;
      *(_QWORD *)v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          v10 = *(_WORD *)(v9 + 30);
          if ((v10 & 0x400) == 0)
          {
            v11 = *(_WORD *)(v9 + 28);
            if ((v11 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
            }
            else
            {
              if ((v11 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
                v10 = *(_WORD *)(v9 + 30);
              }
              *(_WORD *)(v9 + 30) = v10 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
            }
          }
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      v7 = (WTF *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
  }
  v4 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v4 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned int *WebCore::Node::convertNodesOrStringsOrTrustedScriptsIntoNodeVector@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Node **v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  __int16 v35;
  __int16 v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  int v43;
  unsigned int *result;
  void *v45;
  _BYTE *v46;
  int v47;
  __int16 v48;
  __int16 v49;
  int v50;
  WebCore::Node **v51;
  WebCore::Node *v52;
  uint64_t v53;
  void *v54;
  WebCore::Node *v55;
  uint64_t *v56;
  void *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::Node **v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  WebCore::Node *v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE v76[96];

  v4 = a4;
  if (!*a3 || (v5 = **a3, !(_DWORD)v5))
  {
    v74 = v76;
    *(_QWORD *)a4 = a4 + 16;
    v75 = 11;
    *(_QWORD *)(a4 + 8) = 11;
    *(_DWORD *)(a4 + 104) = 0;
    return (unsigned int *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, a2);
  }
  v7 = (WebCore::Node **)a2;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = v76;
  v74 = v76;
  v75 = 11;
  if (v5 >= 0xC)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      goto LABEL_124;
    }
    LODWORD(v75) = v5;
    v74 = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v5));
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
  v11 = *(_QWORD *)(v10 + 704);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      v10 = v12;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 + 192) + 136))(v10 + 192);
  v15 = *a3;
  v16 = (uint64_t)(*a3 + 2);
  if (*a3)
    v17 = (uint64_t)(*a3 + 2);
  else
    v17 = 0;
  if (v15)
    v18 = v16 + 16 * *v15;
  else
    v18 = 0;
  if (v17 != v18)
  {
    v19 = *(_QWORD *)(v13 + 464);
    do
    {
      if ((v19 & 0x200000000000000) != 0)
      {
        *(_DWORD *)(v8 + 24) += 2;
        v70 = v8;
        v51 = v7;
        v52 = *v7;
        if (*v7)
          *((_DWORD *)v52 + 6) += 2;
        v69 = v52;
        LOBYTE(v67) = 0;
        v68 = -1;
        v53 = *(unsigned int *)(v17 + 8);
        if ((_DWORD)v53 != -1)
        {
          ((void (*)(uint64_t *, int *, uint64_t))off_1E33A64D0[v53])(&v66, &v67, v17);
          v68 = v53;
        }
        WebCore::processNodeOrStringAsTrustedType((unsigned int *)&v70, (uint64_t *)&v69, &v67, (uint64_t)&v71);
        if (v68 != -1)
          ((void (*)(uint64_t *, int *))off_1E33A64B8[v68])(&v66, &v67);
        v68 = -1;
        v55 = v69;
        v69 = 0;
        if (v55)
        {
          if (*((_DWORD *)v55 + 6) == 2)
          {
            if ((*((_WORD *)v55 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v55, v54);
          }
          else
          {
            *((_DWORD *)v55 + 6) -= 2;
          }
        }
        v56 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v70);
        if ((_DWORD)v73)
        {
          if ((_DWORD)v73 == 1)
          {
            v63 = v72;
            *(_BYTE *)v4 = (_BYTE)v71;
            *(_QWORD *)(v4 + 8) = v63;
            *(_DWORD *)(v4 + 104) = 1;
            result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v57);
            goto LABEL_68;
          }
LABEL_121:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_122:
          __break(0xC471u);
LABEL_124:
          JUMPOUT(0x195A0F894);
        }
        v58 = (uint64_t)v71;
        v71 = 0;
        if (v58)
        {
          v66 = v58;
          v59 = HIDWORD(v75);
          if (HIDWORD(v75) == (_DWORD)v75)
          {
            WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>((uint64_t)&v74, &v66);
          }
          else
          {
            v66 = 0;
            *(_QWORD *)&v74[8 * HIDWORD(v75)] = v58;
            HIDWORD(v75) = v59 + 1;
          }
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v66);
          if ((_DWORD)v73 != -1)
            ((void (*)(uint64_t *, _DWORD **))off_1E33A64E8[v73])(&v66, &v71);
          v7 = v51;
          goto LABEL_30;
        }
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_((uint64_t)v56, (uint64_t *)&v71);
        v20 = *(_DWORD *)(v17 + 8);
        v7 = v51;
      }
      else
      {
        v20 = *(_DWORD *)(v17 + 8);
        if (v20 == 1)
        {
          WebCore::Text::create(v8, (_DWORD **)v17, (uint64_t *)&v71);
          v60 = HIDWORD(v75);
          if (HIDWORD(v75) == (_DWORD)v75)
          {
            WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>((uint64_t)&v74, (uint64_t *)&v71);
          }
          else
          {
            v62 = (uint64_t)v71;
            v71 = 0;
            *(_QWORD *)&v74[8 * HIDWORD(v75)] = v62;
            HIDWORD(v75) = v60 + 1;
          }
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v71);
          goto LABEL_30;
        }
      }
      if (v20)
        goto LABEL_121;
      v21 = *(_DWORD **)v17;
      *(_QWORD *)v17 = 0;
      if (v21 && (v21[7] & 0xF000) == 0xB000)
      {
        v22 = *((_QWORD *)v21 + 10);
        if (v22)
        {
          v23 = HIDWORD(v75);
          do
          {
            v24 = v23;
            if (v23 == (_DWORD)v75)
            {
              v64 = v7;
              v65 = v8;
              v27 = v4;
              v28 = v9;
              v29 = v23 + 1;
              v30 = v24 + (v24 >> 2);
              if (v30 >= 0x10)
                v31 = v30 + 1;
              else
                v31 = 16;
              if (v31 <= v29)
                v32 = v24 + 1;
              else
                v32 = v31;
              v33 = v74;
              if (v32 < 0xC)
              {
                v34 = v28;
                v74 = v28;
                LODWORD(v75) = 11;
              }
              else
              {
                if (v32 >> 29)
                  goto LABEL_122;
                v34 = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v32));
                LODWORD(v75) = v32;
                v74 = v34;
              }
              memcpy(v34, v33, 8 * v24);
              v7 = v64;
              if (v28 != v33 && v33)
              {
                if (v74 == v33)
                {
                  v74 = 0;
                  LODWORD(v75) = 0;
                }
                WTF::fastFree((WTF *)v33, v14);
              }
              v23 = HIDWORD(v75);
              v25 = &v74[8 * HIDWORD(v75)];
              v9 = v28;
              v4 = v27;
              v8 = v65;
            }
            else
            {
              v25 = &v74[8 * v23];
            }
            *(_DWORD *)(v22 + 24) += 2;
            *v25 = v22;
            HIDWORD(v75) = ++v23;
            v22 = *(_QWORD *)(v22 + 56);
          }
          while (v22);
        }
LABEL_28:
        if (v21[6] == 2)
        {
          v35 = *((_WORD *)v21 + 15);
          if ((v35 & 0x400) == 0)
          {
            v36 = *((_WORD *)v21 + 14);
            if ((v36 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v21, v14);
            }
            else
            {
              if ((v36 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v21 + 20) + 16))(*((_QWORD *)v21 + 20));
                v35 = *((_WORD *)v21 + 15);
              }
              *((_WORD *)v21 + 15) = v35 | 0x400;
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 72))(v21);
            }
          }
        }
        else
        {
          v21[6] -= 2;
        }
        goto LABEL_30;
      }
      v71 = v21;
      v26 = HIDWORD(v75);
      if (HIDWORD(v75) == (_DWORD)v75)
      {
        WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>((uint64_t)&v74, (unint64_t)&v71);
      }
      else
      {
        v71 = 0;
        *(_QWORD *)&v74[8 * HIDWORD(v75)] = v21;
        HIDWORD(v75) = v26 + 1;
      }
      v21 = v71;
      v71 = 0;
      if (v21)
        goto LABEL_28;
LABEL_30:
      v17 += 16;
    }
    while (v17 != v18);
  }
  v37 = HIDWORD(v75);
  if (HIDWORD(v75) == 1)
  {
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 11;
    v46 = v74;
    if (v74 == v9)
    {
      memcpy((void *)(v4 + 16), v9, 8 * v37);
    }
    else
    {
      v74 = v9;
      *(_QWORD *)v4 = v46;
      v50 = v75;
      LODWORD(v75) = 11;
      *(_DWORD *)(v4 + 8) = v50;
    }
    HIDWORD(v75) = 0;
    *(_DWORD *)(v4 + 12) = 1;
    goto LABEL_66;
  }
  v38 = v74;
  if (!HIDWORD(v75))
  {
LABEL_63:
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 11;
    if (v38 == v9)
    {
      v43 = HIDWORD(v75);
      memcpy((void *)(v4 + 16), v9, 8 * HIDWORD(v75));
    }
    else
    {
      v74 = v9;
      *(_QWORD *)v4 = v38;
      v47 = v75;
      v43 = HIDWORD(v75);
      LODWORD(v75) = 11;
      *(_DWORD *)(v4 + 8) = v47;
    }
    HIDWORD(v75) = 0;
    *(_DWORD *)(v4 + 12) = v43;
LABEL_66:
    *(_DWORD *)(v4 + 104) = 0;
    goto LABEL_67;
  }
  v39 = 8 * HIDWORD(v75);
  while (1)
  {
    v14 = *(void **)v38;
    v40 = *(_QWORD *)(*(_QWORD *)v38 + 32);
    if (v40)
    {
      *(_DWORD *)(v40 + 24) += 2;
      WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v40, (WebCore::Node *)v14, &v71);
      if (*(_DWORD *)(v40 + 24) == 2)
      {
        v41 = *(_WORD *)(v40 + 30);
        if ((v41 & 0x400) == 0)
        {
          v42 = *(_WORD *)(v40 + 28);
          if ((v42 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v40, v14);
          }
          else
          {
            if ((v42 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v40 + 160) + 16))(*(_QWORD *)(v40 + 160));
              v41 = *(_WORD *)(v40 + 30);
            }
            *(_WORD *)(v40 + 30) = v41 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 72))(v40);
          }
        }
      }
      else
      {
        *(_DWORD *)(v40 + 24) -= 2;
      }
    }
    else
    {
      v71 = 0;
      v72 = 0;
      v73 = 0;
    }
    if ((_BYTE)v73)
      break;
    v38 += 8;
    v39 -= 8;
    if (!v39)
    {
      v38 = v74;
      goto LABEL_63;
    }
  }
  v61 = v72;
  v72 = 0;
  *(_BYTE *)v4 = (_BYTE)v71;
  *(_QWORD *)(v4 + 8) = v61;
  *(_DWORD *)(v4 + 104) = 1;
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v71, (WTF::StringImpl *)v14);
LABEL_67:
  result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v14);
  if (v8)
  {
LABEL_68:
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      v48 = *(_WORD *)(v8 + 30);
      if ((v48 & 0x400) == 0)
      {
        v49 = *(_WORD *)(v8 + 28);
        if ((v49 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v8, v45);
        }
        else
        {
          if ((v49 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v48 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v48 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return result;
}

WebCore::ContainerNode *WebCore::Node::remove@<X0>(WebCore::ContainerNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    this = WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v2, this, a2);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      v3 = *(_WORD *)(v2 + 30);
      if ((v3 & 0x400) == 0)
      {
        v4 = *(_WORD *)(v2 + 28);
        if ((v4 & 0xF000) == 0x9000)
        {
          return (WebCore::ContainerNode *)WebCore::Document::removedLastRef((WebCore::Document *)v2);
        }
        else
        {
          if ((v4 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
            v3 = *(_WORD *)(v2 + 30);
          }
          *(_WORD *)(v2 + 30) = v3 | 0x400;
          return (WebCore::ContainerNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
        }
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

unsigned int *WebCore::Node::before@<X0>(unsigned int *result@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  int v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  int v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE v48[88];
  uint64_t v49;
  void *__src;
  uint64_t v51;
  _BYTE v52[88];
  int v53;
  _QWORD *v54;

  v4 = *((_QWORD *)result + 4);
  if (!v4)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v6 = (uint64_t)result;
  *(_DWORD *)(v4 + 24) += 2;
  v7 = *a2;
  v54 = 0;
  if (v7)
    v8 = v7 + 2;
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&v7[4 * *v7 + 2];
  else
    v9 = 0;
  if (v8 != (unsigned int *)v9)
  {
    while (1)
    {
      v46 = &v54;
      v10 = v8[2];
      if ((_DWORD)v10 == -1)
        goto LABEL_87;
      __src = &v46;
      ((void (*)(void **, unsigned int *))off_1E33A64F8[v10])(&__src, v8);
      v8 += 4;
      if (v8 == (unsigned int *)v9)
      {
        v11 = *(_QWORD *)(v6 + 48);
        v12 = v11 & 0xFFFFFFFFFFFFLL;
        if ((v11 & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_21;
        if (v54)
        {
          v13 = *((_DWORD *)v54 - 2);
          while (1)
          {
            v14 = (v12 + ~(v11 << 32)) ^ ((unint64_t)(v12 + ~(v11 << 32)) >> 22);
            v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
            v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
            v17 = v13 & ((v16 >> 31) ^ v16);
            v18 = v54[v17];
            if (v18 != v12)
              break;
LABEL_17:
            v20 = 0;
            v11 = *(_QWORD *)(v12 + 48);
            v12 = v11 & 0xFFFFFFFFFFFFLL;
            if ((v11 & 0xFFFFFFFFFFFFLL) == 0)
              goto LABEL_22;
          }
          v19 = 1;
          while (v18)
          {
            v17 = (v17 + v19) & v13;
            v18 = v54[v17];
            ++v19;
            if (v18 == v12)
              goto LABEL_17;
          }
        }
        goto LABEL_20;
      }
    }
  }
  v12 = *((_QWORD *)result + 6) & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
LABEL_20:
    *(_DWORD *)(v12 + 24) += 2;
    v20 = v12;
  }
  else
  {
LABEL_21:
    v20 = 0;
  }
LABEL_22:
  *(_DWORD *)(v4 + 24) += 2;
  v49 = v4;
  WebCore::Node::convertNodesOrStringsOrTrustedScriptsIntoNodeVector(v6, &v49, a2, (uint64_t)&__src);
  v49 = 0;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v37 = *(_WORD *)(v4 + 30);
    if ((v37 & 0x400) == 0)
    {
      v38 = *(_WORD *)(v4 + 28);
      if ((v38 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v4, v21);
      }
      else
      {
        if ((v38 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v37 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v37 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v53)
  {
    if (v53 != 1)
    {
LABEL_87:
      v45 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebCore::Node::after(v45);
    }
    v22 = v51;
    v51 = 0;
    *(_BYTE *)a3 = (_BYTE)__src;
    a3[1] = v22;
    v23 = 1;
    *((_BYTE *)a3 + 16) = 1;
  }
  else
  {
    v46 = v48;
    v47 = 11;
    v24 = __src;
    if (__src == v52)
    {
      v25 = HIDWORD(v51);
      memcpy(v48, __src, 8 * HIDWORD(v51));
    }
    else
    {
      __src = v52;
      v46 = v24;
      v36 = v51;
      v25 = HIDWORD(v51);
      LODWORD(v51) = 11;
      LODWORD(v47) = v36;
    }
    HIDWORD(v51) = 0;
    HIDWORD(v47) = v25;
    WebCore::ContainerNode::ensurePreInsertionValidityForPhantomDocumentFragment((WebCore::Node *)v4, (uint64_t)&v46, 0, (uint64_t)a3);
    if (!*((_BYTE *)a3 + 16))
    {
      v27 = (uint64_t *)(v20 + 56);
      if (!v20)
        v27 = (uint64_t *)(v4 + 80);
      v28 = *v27;
      if (*v27)
      {
        *(_DWORD *)(v28 + 24) += 2;
        WebCore::ContainerNode::insertChildrenBeforeWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)v4, (WebCore::Node *)v28, (unsigned int *)&v46, (uint64_t)a3);
        if (*(_DWORD *)(v28 + 24) == 2)
        {
          v43 = *(_WORD *)(v28 + 30);
          if ((v43 & 0x400) == 0)
          {
            v44 = *(_WORD *)(v28 + 28);
            if ((v44 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v28, v26);
            }
            else
            {
              if ((v44 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v28 + 160) + 16))(*(_QWORD *)(v28 + 160));
                v43 = *(_WORD *)(v28 + 30);
              }
              *(_WORD *)(v28 + 30) = v43 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
            }
          }
        }
        else
        {
          *(_DWORD *)(v28 + 24) -= 2;
        }
      }
      else
      {
        WebCore::ContainerNode::insertChildrenBeforeWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)v4, 0, (unsigned int *)&v46, (uint64_t)a3);
      }
    }
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v26);
    v23 = v53;
    if (v53 == -1)
      goto LABEL_37;
  }
  result = (unsigned int *)((uint64_t (*)(_BYTE **, void **))off_1E33A6510[v23])(&v46, &__src);
LABEL_37:
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      v41 = *(_WORD *)(v20 + 30);
      if ((v41 & 0x400) == 0)
      {
        v42 = *(_WORD *)(v20 + 28);
        if ((v42 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef((WebCore::Document *)v20, v29);
        }
        else
        {
          if ((v42 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 160) + 16))(*(_QWORD *)(v20 + 160));
            v41 = *(_WORD *)(v20 + 30);
          }
          *(_WORD *)(v20 + 30) = v41 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
        }
      }
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  v30 = v54;
  if (v54)
  {
    v31 = *((unsigned int *)v54 - 1);
    if ((_DWORD)v31)
    {
      v32 = v54;
      do
      {
        v33 = *v32;
        if (*v32 != -1)
        {
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)(v33 + 24) == 2)
            {
              v34 = *(_WORD *)(v33 + 30);
              if ((v34 & 0x400) == 0)
              {
                v35 = *(_WORD *)(v33 + 28);
                if ((v35 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v33, v29);
                }
                else
                {
                  if ((v35 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v33 + 160) + 16))(*(_QWORD *)(v33 + 160));
                    v34 = *(_WORD *)(v33 + 30);
                  }
                  *(_WORD *)(v33 + 30) = v34 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33);
                }
              }
            }
            else
            {
              *(_DWORD *)(v33 + 24) -= 2;
            }
          }
        }
        ++v32;
        --v31;
      }
      while (v31);
    }
    result = (unsigned int *)WTF::fastFree((WTF *)(v30 - 2), v29);
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v39 = *(_WORD *)(v4 + 30);
    if ((v39 & 0x400) == 0)
    {
      v40 = *(_WORD *)(v4 + 28);
      if ((v40 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v4, v29);
      }
      else
      {
        if ((v40 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v39 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v39 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::Node::after@<X0>(unsigned int *result@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  int v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  int v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE v43[88];
  uint64_t v44;
  void *__src;
  uint64_t v46;
  _BYTE v47[88];
  int v48;
  _QWORD *v49;

  v4 = *((_QWORD *)result + 4);
  if (!v4)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v6 = (uint64_t)result;
  *(_DWORD *)(v4 + 24) += 2;
  v7 = *a2;
  v49 = 0;
  if (v7)
    v8 = v7 + 2;
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&v7[4 * *v7 + 2];
  else
    v9 = 0;
  if (v8 != (unsigned int *)v9)
  {
    while (1)
    {
      v41 = &v49;
      v10 = v8[2];
      if ((_DWORD)v10 == -1)
        goto LABEL_76;
      __src = &v41;
      ((void (*)(void **, unsigned int *))off_1E33A64F8[v10])(&__src, v8);
      v8 += 4;
      if (v8 == (unsigned int *)v9)
      {
        v11 = *(_QWORD *)(v6 + 56);
        if (!v11)
          goto LABEL_21;
        if (v49)
        {
          v12 = *((_DWORD *)v49 - 2);
          while (1)
          {
            v13 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
            v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
            v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
            v16 = v12 & ((v15 >> 31) ^ v15);
            v17 = v49[v16];
            if (v17 != v11)
              break;
LABEL_17:
            v19 = 0;
            v11 = *(_QWORD *)(v11 + 56);
            if (!v11)
              goto LABEL_22;
          }
          v18 = 1;
          while (v17)
          {
            v16 = (v16 + v18) & v12;
            v17 = v49[v16];
            ++v18;
            if (v17 == v11)
              goto LABEL_17;
          }
        }
        goto LABEL_20;
      }
    }
  }
  v11 = *((_QWORD *)result + 7);
  if (v11)
  {
LABEL_20:
    *(_DWORD *)(v11 + 24) += 2;
    v19 = v11;
  }
  else
  {
LABEL_21:
    v19 = 0;
  }
LABEL_22:
  *(_DWORD *)(v4 + 24) += 2;
  v44 = v4;
  WebCore::Node::convertNodesOrStringsOrTrustedScriptsIntoNodeVector(v6, &v44, a2, (uint64_t)&__src);
  v44 = 0;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v34 = *(_WORD *)(v4 + 30);
    if ((v34 & 0x400) == 0)
    {
      v35 = *(_WORD *)(v4 + 28);
      if ((v35 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v4, v20);
      }
      else
      {
        if ((v35 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v34 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v34 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v48)
  {
    if (v48 != 1)
    {
LABEL_76:
      v40 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebCore::Node::replaceWith(v40);
    }
    v21 = v46;
    v46 = 0;
    *(_BYTE *)a3 = (_BYTE)__src;
    a3[1] = v21;
    v22 = 1;
    *((_BYTE *)a3 + 16) = 1;
  }
  else
  {
    v41 = v43;
    v42 = 11;
    v23 = __src;
    if (__src == v47)
    {
      v24 = HIDWORD(v46);
      memcpy(v43, __src, 8 * HIDWORD(v46));
    }
    else
    {
      __src = v47;
      v41 = v23;
      v33 = v46;
      v24 = HIDWORD(v46);
      LODWORD(v46) = 11;
      LODWORD(v42) = v33;
    }
    HIDWORD(v46) = 0;
    HIDWORD(v42) = v24;
    WebCore::ContainerNode::ensurePreInsertionValidityForPhantomDocumentFragment((WebCore::Node *)v4, (uint64_t)&v41, 0, (uint64_t)a3);
    if (!*((_BYTE *)a3 + 16))
      WebCore::ContainerNode::insertChildrenBeforeWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)v4, (WebCore::Node *)v19, (unsigned int *)&v41, (uint64_t)a3);
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v25);
    v22 = v48;
    if (v48 == -1)
      goto LABEL_33;
  }
  result = (unsigned int *)((uint64_t (*)(_BYTE **, void **))off_1E33A6510[v22])(&v41, &__src);
LABEL_33:
  if (v19)
  {
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      v38 = *(_WORD *)(v19 + 30);
      if ((v38 & 0x400) == 0)
      {
        v39 = *(_WORD *)(v19 + 28);
        if ((v39 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef((WebCore::Document *)v19, v26);
        }
        else
        {
          if ((v39 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 160) + 16))(*(_QWORD *)(v19 + 160));
            v38 = *(_WORD *)(v19 + 30);
          }
          *(_WORD *)(v19 + 30) = v38 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
        }
      }
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  v27 = v49;
  if (v49)
  {
    v28 = *((unsigned int *)v49 - 1);
    if ((_DWORD)v28)
    {
      v29 = v49;
      do
      {
        v30 = *v29;
        if (*v29 != -1)
        {
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              v31 = *(_WORD *)(v30 + 30);
              if ((v31 & 0x400) == 0)
              {
                v32 = *(_WORD *)(v30 + 28);
                if ((v32 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v30, v26);
                }
                else
                {
                  if ((v32 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v30 + 160) + 16))(*(_QWORD *)(v30 + 160));
                    v31 = *(_WORD *)(v30 + 30);
                  }
                  *(_WORD *)(v30 + 30) = v31 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 72))(v30);
                }
              }
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    result = (unsigned int *)WTF::fastFree((WTF *)(v27 - 2), v26);
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v36 = *(_WORD *)(v4 + 30);
    if ((v36 & 0x400) == 0)
    {
      v37 = *(_WORD *)(v4 + 28);
      if ((v37 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v4, v26);
      }
      else
      {
        if ((v37 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v36 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v36 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::Node::replaceWith@<X0>(unsigned int *result@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  WebCore::Document *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Document *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  WebCore::Document *v43;
  WebCore::Document *v44;
  WebCore::Document *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  WebCore::Document *v53;
  uint64_t v54;
  int v55;
  WebCore::Document *v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;
  char *v63;
  char *v64;
  uint64_t v65;
  WebCore::Node *v66;
  WebCore::ContainerNode *v67;
  WebCore::Node **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WebCore::Node *v72;
  WebCore::Document *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  __int16 v78;
  __int16 v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  unsigned int *v92;
  uint64_t v93;
  WebCore::Node *v94;
  uint64_t v95;
  int v96;
  WebCore::Document *v97;
  _QWORD *v98;
  WebCore::ContainerNode *v99;
  int v100;
  int v101;
  WebCore::Document *v102;
  WebCore::Document *v103;
  WebCore::Document *v104;
  uint64_t v105;
  int v106;
  char *v107;
  uint64_t v108;
  _BYTE v109[96];

  v3 = (uint64_t)a3;
  v4 = *((_QWORD *)result + 4);
  if (!v4)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v6 = result;
  *(_DWORD *)(v4 + 24) += 2;
  v7 = *a2;
  v98 = 0;
  if (v7)
    v8 = v7 + 2;
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&v7[4 * *v7 + 2];
  else
    v9 = 0;
  if (v8 != (unsigned int *)v9)
  {
    do
    {
      v104 = (WebCore::Document *)&v98;
      v10 = v8[2];
      if ((_DWORD)v10 == -1)
        goto LABEL_211;
      v107 = (char *)&v104;
      result = (unsigned int *)((uint64_t (*)(char **, unsigned int *))off_1E33A64F8[v10])(&v107, v8);
      v8 += 4;
    }
    while (v8 != (unsigned int *)v9);
    v11 = *((_QWORD *)v6 + 7);
    if (v11)
    {
      if (v98)
      {
        v12 = *((_DWORD *)v98 - 2);
        while (1)
        {
          v13 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = v98[v16];
          if (v17 != v11)
            break;
LABEL_17:
          v19 = 0;
          v11 = *(_QWORD *)(v11 + 56);
          if (!v11)
            goto LABEL_22;
        }
        v18 = 1;
        while (v17)
        {
          v16 = (v16 + v18) & v12;
          v17 = v98[v16];
          ++v18;
          if (v17 == v11)
            goto LABEL_17;
        }
      }
      goto LABEL_20;
    }
LABEL_21:
    v19 = 0;
    goto LABEL_22;
  }
  v11 = *((_QWORD *)result + 7);
  if (!v11)
    goto LABEL_21;
LABEL_20:
  *(_DWORD *)(v11 + 24) += 2;
  v19 = (WebCore::Document *)v11;
LABEL_22:
  v97 = v19;
  *(_DWORD *)(v4 + 24) += 2;
  if (*a2 && **a2)
  {
    v20 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
    *(_DWORD *)(v20 + 24) += 2;
    v107 = v109;
    v108 = 11;
    v21 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
    v22 = *(_QWORD *)(v21 + 704);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
        v21 = v23;
    }
    v92 = v6;
    v93 = v3;
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v21 + 192) + 136))(v21 + 192);
    v26 = *a2;
    v27 = (uint64_t)(*a2 + 2);
    if (*a2)
      v28 = (uint64_t)(*a2 + 2);
    else
      v28 = 0;
    if (v26)
      v29 = v27 + 16 * *v26;
    else
      v29 = 0;
    if (v28 != v29)
    {
      v30 = *(_QWORD *)(v24 + 464);
      do
      {
        if ((v30 & 0x200000000000000) != 0)
        {
          *(_DWORD *)(v20 + 24) += 2;
          v102 = (WebCore::Document *)v4;
          v103 = (WebCore::Document *)v20;
          *(_DWORD *)(v4 + 24) += 2;
          LOBYTE(v100) = 0;
          v101 = -1;
          v42 = *(unsigned int *)(v28 + 8);
          if ((_DWORD)v42 != -1)
          {
            ((void (*)(WebCore::Node **, int *, uint64_t))off_1E33A64D0[v42])(&v94, &v100, v28);
            v101 = v42;
          }
          WebCore::processNodeOrStringAsTrustedType((unsigned int *)&v103, (uint64_t *)&v102, &v100, (uint64_t)&v104);
          if (v101 != -1)
            ((void (*)(WebCore::Node **, int *))off_1E33A64B8[v101])(&v94, &v100);
          v101 = -1;
          v43 = v102;
          v102 = 0;
          if (v43)
          {
            if (*((_DWORD *)v43 + 6) == 2)
            {
              v59 = *((_WORD *)v43 + 15);
              if ((v59 & 0x400) == 0)
              {
                v60 = *((_WORD *)v43 + 14);
                if ((v60 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef(v43, v25);
                }
                else
                {
                  if ((v60 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)v43 + 20) + 16))(*((_QWORD *)v43 + 20));
                    v59 = *((_WORD *)v43 + 15);
                  }
                  *((_WORD *)v43 + 15) = v59 | 0x400;
                  (*(void (**)(WebCore::Document *))(*(_QWORD *)v43 + 72))(v43);
                }
              }
            }
            else
            {
              *((_DWORD *)v43 + 6) -= 2;
            }
          }
          v44 = v103;
          v103 = 0;
          if (v44)
          {
            if (*((_DWORD *)v44 + 6) == 2)
            {
              v61 = *((_WORD *)v44 + 15);
              if ((v61 & 0x400) == 0)
              {
                v62 = *((_WORD *)v44 + 14);
                if ((v62 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef(v44, v25);
                }
                else
                {
                  if ((v62 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)v44 + 20) + 16))(*((_QWORD *)v44 + 20));
                    v61 = *((_WORD *)v44 + 15);
                  }
                  *((_WORD *)v44 + 15) = v61 | 0x400;
                  (*(void (**)(WebCore::Document *))(*(_QWORD *)v44 + 72))(v44);
                }
              }
            }
            else
            {
              *((_DWORD *)v44 + 6) -= 2;
            }
          }
          if (v106)
          {
            if (v106 == 1)
            {
              LOBYTE(v94) = (_BYTE)v104;
              v95 = v105;
              v96 = 1;
              result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v107, v25);
              v6 = v92;
              v3 = v93;
              goto LABEL_132;
            }
LABEL_211:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_212:
            __break(0xC471u);
            JUMPOUT(0x195A10EF8);
          }
          v45 = v104;
          v104 = 0;
          if (v45)
          {
            v46 = HIDWORD(v108);
            if (HIDWORD(v108) == (_DWORD)v108)
            {
              v47 = HIDWORD(v108) + ((unint64_t)HIDWORD(v108) >> 2);
              if (v47 >= 0x10)
                v48 = v47 + 1;
              else
                v48 = 16;
              if (v48 <= (unint64_t)HIDWORD(v108) + 1)
                v49 = HIDWORD(v108) + 1;
              else
                v49 = v48;
              v50 = v107;
              if (v49 < 0xC)
              {
                v51 = v109;
                v107 = v109;
                LODWORD(v108) = 11;
              }
              else
              {
                if (v49 >> 29)
                  goto LABEL_212;
                v51 = (char *)WTF::fastMalloc((WTF *)(8 * v49));
                LODWORD(v108) = v49;
                v107 = v51;
              }
              memcpy(v51, v50, 8 * v46);
              if (v109 != v50 && v50)
              {
                if (v107 == v50)
                {
                  v107 = 0;
                  LODWORD(v108) = 0;
                }
                WTF::fastFree((WTF *)v50, v25);
              }
              v52 = HIDWORD(v108) + 1;
              *(_QWORD *)&v107[8 * HIDWORD(v108)] = v45;
              HIDWORD(v108) = v52;
              if (v106 != -1)
                ((void (*)(WebCore::Node **, WebCore::Document **))off_1E33A64E8[v106])(&v94, &v104);
              goto LABEL_89;
            }
            v55 = HIDWORD(v108) + 1;
            *(_QWORD *)&v107[8 * HIDWORD(v108)] = v45;
            goto LABEL_84;
          }
          v31 = *(_DWORD *)(v28 + 8);
        }
        else
        {
          v31 = *(_DWORD *)(v28 + 8);
          if (v31 == 1)
          {
            v32 = bmalloc::api::isoAllocate();
            v33 = v32;
            *(_OWORD *)(v32 + 8) = xmmword_1968BC9D0;
            *(_QWORD *)(v32 + 24) = 0x300300000002;
            *(_QWORD *)(v32 + 32) = 0;
            *(_QWORD *)(v32 + 40) = v20 + 96;
            *(_OWORD *)(v32 + 48) = 0u;
            *(_OWORD *)(v32 + 64) = 0u;
            ++*(_DWORD *)(v20 + 3324);
            v34 = *(WebCore::Document **)v28;
            if (*(_QWORD *)v28 || (v34 = (WebCore::Document *)*MEMORY[0x1E0CBF738]) != 0)
              *(_DWORD *)v34 += 2;
            *(_QWORD *)(v32 + 80) = v34;
            *(_QWORD *)v32 = off_1E33A8078;
            v35 = HIDWORD(v108);
            if (HIDWORD(v108) == (_DWORD)v108)
            {
              v36 = HIDWORD(v108) + ((unint64_t)HIDWORD(v108) >> 2);
              if (v36 >= 0x10)
                v37 = v36 + 1;
              else
                v37 = 16;
              if (v37 <= (unint64_t)HIDWORD(v108) + 1)
                v38 = HIDWORD(v108) + 1;
              else
                v38 = v37;
              v39 = v107;
              if (v38 < 0xC)
              {
                v40 = v109;
                v107 = v109;
                LODWORD(v108) = 11;
              }
              else
              {
                if (v38 >> 29)
                  goto LABEL_212;
                v40 = (char *)WTF::fastMalloc((WTF *)(8 * v38));
                LODWORD(v108) = v38;
                v107 = v40;
              }
              memcpy(v40, v39, 8 * v35);
              if (v109 != v39 && v39)
              {
                if (v107 == v39)
                {
                  v107 = 0;
                  LODWORD(v108) = 0;
                }
                WTF::fastFree((WTF *)v39, v25);
              }
              LODWORD(v35) = HIDWORD(v108);
              v41 = &v107[8 * HIDWORD(v108)];
            }
            else
            {
              v41 = &v107[8 * HIDWORD(v108)];
            }
            *(_QWORD *)v41 = v33;
            HIDWORD(v108) = v35 + 1;
            goto LABEL_89;
          }
        }
        if (v31)
          goto LABEL_211;
        v53 = *(WebCore::Document **)v28;
        *(_QWORD *)v28 = 0;
        v104 = v53;
        LODWORD(v54) = HIDWORD(v108);
        if (HIDWORD(v108) == (_DWORD)v108)
        {
          v63 = WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v107, HIDWORD(v108) + 1, (unint64_t)&v104);
          v54 = HIDWORD(v108);
          v64 = v107;
          v65 = *(_QWORD *)v63;
          *(_QWORD *)v63 = 0;
          *(_QWORD *)&v64[8 * v54] = v65;
        }
        else
        {
          v104 = 0;
          *(_QWORD *)&v107[8 * HIDWORD(v108)] = v53;
        }
        v55 = v54 + 1;
LABEL_84:
        HIDWORD(v108) = v55;
        v56 = v104;
        v104 = 0;
        if (v56)
        {
          if (*((_DWORD *)v56 + 6) == 2)
          {
            v57 = *((_WORD *)v56 + 15);
            if ((v57 & 0x400) == 0)
            {
              v58 = *((_WORD *)v56 + 14);
              if ((v58 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef(v56, v25);
              }
              else
              {
                if ((v58 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v56 + 20) + 16))(*((_QWORD *)v56 + 20));
                  v57 = *((_WORD *)v56 + 15);
                }
                *((_WORD *)v56 + 15) = v57 | 0x400;
                (*(void (**)(WebCore::Document *))(*(_QWORD *)v56 + 72))(v56);
              }
            }
          }
          else
          {
            *((_DWORD *)v56 + 6) -= 2;
          }
        }
LABEL_89:
        v28 += 16;
      }
      while (v28 != v29);
    }
    if (HIDWORD(v108) == 1)
    {
      v66 = *(WebCore::Node **)v107;
      *(_QWORD *)v107 = 0;
      v94 = v66;
      v96 = 0;
      v6 = v92;
      v3 = v93;
    }
    else
    {
      WebCore::DocumentFragment::create((WebCore::DocumentFragment *)v20, (uint64_t *)&v99);
      v67 = v99;
      v6 = v92;
      v3 = v93;
      if (HIDWORD(v108))
      {
        v68 = (WebCore::Node **)v107;
        v69 = 8 * HIDWORD(v108);
        while (1)
        {
          WebCore::ContainerNode::appendChild((uint64_t)v67, *v68, (uint64_t)&v104);
          if ((_BYTE)v106)
            break;
          ++v68;
          v69 -= 8;
          if (!v69)
            goto LABEL_125;
        }
        LOBYTE(v94) = (_BYTE)v104;
        v95 = v105;
        v96 = 1;
        if (v67)
        {
          if (*((_DWORD *)v67 + 6) == 2)
          {
            v90 = *((_WORD *)v67 + 15);
            if ((v90 & 0x400) == 0)
            {
              v91 = *((_WORD *)v67 + 14);
              if ((v91 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef(v67, v25);
              }
              else
              {
                if ((v91 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v67 + 20) + 16))(*((_QWORD *)v67 + 20));
                  v90 = *((_WORD *)v67 + 15);
                }
                *((_WORD *)v67 + 15) = v90 | 0x400;
                (*(void (**)(WebCore::ContainerNode *))(*(_QWORD *)v67 + 72))(v67);
              }
            }
          }
          else
          {
            *((_DWORD *)v67 + 6) -= 2;
          }
        }
      }
      else
      {
LABEL_125:
        v94 = v67;
        v96 = 0;
      }
    }
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v107, v25);
    if (v20)
    {
LABEL_132:
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        v86 = *(_WORD *)(v20 + 30);
        if ((v86 & 0x400) == 0)
        {
          v87 = *(_WORD *)(v20 + 28);
          if ((v87 & 0xF000) == 0x9000)
          {
            result = WebCore::Document::removedLastRef((WebCore::Document *)v20, a2);
          }
          else
          {
            if ((v87 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 160) + 16))(*(_QWORD *)(v20 + 160));
              v86 = *(_WORD *)(v20 + 30);
            }
            *(_WORD *)(v20 + 30) = v86 | 0x400;
            result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
          }
        }
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
    }
  }
  else
  {
    v94 = 0;
    v96 = 0;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v80 = *(_WORD *)(v4 + 30);
    if ((v80 & 0x400) == 0)
    {
      v81 = *(_WORD *)(v4 + 28);
      if ((v81 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
      }
      else
      {
        if ((v81 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v80 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v80 | 0x400;
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v96)
  {
    if (v96 != 1)
      goto LABEL_211;
    v70 = v95;
    v95 = 0;
    *(_BYTE *)v3 = (_BYTE)v94;
    *(_QWORD *)(v3 + 8) = v70;
    *(_BYTE *)(v3 + 16) = 1;
    goto LABEL_148;
  }
  v71 = *((_QWORD *)v6 + 4);
  v72 = v94;
  v94 = 0;
  if (v4 == v71)
  {
    if (v72)
    {
      result = (unsigned int *)WebCore::ContainerNode::replaceChild((WebCore::ContainerNode *)v4, v72, (WebCore::Node *)v6, v3);
LABEL_144:
      if (*((_DWORD *)v72 + 6) == 2)
      {
        v88 = *((_WORD *)v72 + 15);
        if ((v88 & 0x400) == 0)
        {
          v89 = *((_WORD *)v72 + 14);
          if ((v89 & 0xF000) == 0x9000)
          {
            result = WebCore::Document::removedLastRef(v72, a2);
          }
          else
          {
            if ((v89 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v72 + 20) + 16))(*((_QWORD *)v72 + 20));
              v88 = *((_WORD *)v72 + 15);
            }
            *((_WORD *)v72 + 15) = v88 | 0x400;
            result = (unsigned int *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v72 + 72))(v72);
          }
        }
      }
      else
      {
        *((_DWORD *)v72 + 6) -= 2;
      }
      goto LABEL_148;
    }
    result = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v4, (WebCore::Node *)v6, (_QWORD *)v3);
  }
  else
  {
    if (v72)
    {
      result = (unsigned int *)WebCore::ContainerNode::insertBefore(v4, (uint64_t *)v72, &v97, v3);
      goto LABEL_144;
    }
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
LABEL_148:
  if (v96 != -1)
    result = (unsigned int *)((uint64_t (*)(char **, WebCore::Node **))off_1E33A6520[v96])(&v107, &v94);
  v73 = v97;
  v97 = 0;
  if (v73)
  {
    if (*((_DWORD *)v73 + 6) == 2)
    {
      v84 = *((_WORD *)v73 + 15);
      if ((v84 & 0x400) == 0)
      {
        v85 = *((_WORD *)v73 + 14);
        if ((v85 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef(v73, a2);
        }
        else
        {
          if ((v85 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v73 + 20) + 16))(*((_QWORD *)v73 + 20));
            v84 = *((_WORD *)v73 + 15);
          }
          *((_WORD *)v73 + 15) = v84 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v73 + 72))(v73);
        }
      }
    }
    else
    {
      *((_DWORD *)v73 + 6) -= 2;
    }
  }
  v74 = v98;
  if (v98)
  {
    v75 = *((unsigned int *)v98 - 1);
    if ((_DWORD)v75)
    {
      v76 = v98;
      do
      {
        v77 = *v76;
        if (*v76 != -1)
        {
          *v76 = 0;
          if (v77)
          {
            if (*(_DWORD *)(v77 + 24) == 2)
            {
              v78 = *(_WORD *)(v77 + 30);
              if ((v78 & 0x400) == 0)
              {
                v79 = *(_WORD *)(v77 + 28);
                if ((v79 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v77, a2);
                }
                else
                {
                  if ((v79 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v77 + 160) + 16))(*(_QWORD *)(v77 + 160));
                    v78 = *(_WORD *)(v77 + 30);
                  }
                  *(_WORD *)(v77 + 30) = v78 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v77 + 72))(v77);
                }
              }
            }
            else
            {
              *(_DWORD *)(v77 + 24) -= 2;
            }
          }
        }
        ++v76;
        --v75;
      }
      while (v75);
    }
    result = (unsigned int *)WTF::fastFree((WTF *)(v74 - 2), a2);
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v82 = *(_WORD *)(v4 + 30);
    if ((v82 & 0x400) == 0)
    {
      v83 = *(_WORD *)(v4 + 28);
      if ((v83 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
      }
      else
      {
        if ((v83 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v82 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v82 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::Node::normalize(unsigned int *this, void *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  _QWORD **v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;

  v5 = (uint64_t)this;
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  this[6] += 2;
  v7 = *((_WORD *)this + 14);
  v8 = (uint64_t)this;
  if ((v7 & 4) != 0)
  {
    v8 = (uint64_t)this;
    while (1)
    {
      v9 = v8;
      v8 = *(_QWORD *)(v8 + 80);
      if (!v8)
        break;
      *(_DWORD *)(v8 + 24) += 2;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        v10 = *(_WORD *)(v9 + 30);
        if ((v10 & 0x400) == 0)
        {
          if ((v7 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
          }
          else
          {
            if ((v7 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
              v10 = *(_WORD *)(v9 + 30);
            }
            *(_WORD *)(v9 + 30) = v10 | 0x400;
            this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          }
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      v7 = *(_WORD *)(v8 + 28);
      if ((v7 & 4) == 0)
        goto LABEL_15;
    }
    v8 = v9;
  }
LABEL_15:
  v11 = (_QWORD **)(v6 + 1320);
  while (1)
  {
    if ((*(_WORD *)(v8 + 28) & 8) != 0)
      this = (unsigned int *)WebCore::Element::normalizeAttributes((WebCore::SVGElement *)v8, (unsigned __int8 *)a2, a3, a4, a5);
    if (v8 == v5)
      break;
    v12 = *(_WORD *)(v8 + 28);
    if ((v12 & 0xF000) == 0x3000)
    {
      v13 = *(_DWORD *)(v8 + 24) + 2;
      *(_DWORD *)(v8 + 24) = v13;
      v14 = *(_QWORD *)(v8 + 80);
      if (v14 && *(_DWORD *)(v14 + 4))
      {
        while (1)
        {
          v15 = *(_QWORD *)(v8 + 56);
          if (!v15)
          {
LABEL_102:
            v35 = *(_QWORD *)(v8 + 32);
            if (!v35)
              goto LABEL_104;
LABEL_103:
            *(_DWORD *)(v35 + 24) += 2;
LABEL_104:
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              v45 = *(_WORD *)(v8 + 30);
              if ((v45 & 0x400) == 0)
              {
                v46 = *(_WORD *)(v8 + 28);
                if ((v46 & 0xF000) == 0x9000)
                {
                  this = WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
                }
                else
                {
                  if ((v46 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                    v45 = *(_WORD *)(v8 + 30);
                  }
                  *(_WORD *)(v8 + 30) = v45 | 0x400;
                  this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
                }
              }
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
LABEL_117:
            if (*(_DWORD *)(v8 + 24) != 2)
            {
              *(_DWORD *)(v8 + 24) -= 2;
              goto LABEL_119;
            }
            v43 = *(_WORD *)(v8 + 30);
            if ((v43 & 0x400) == 0)
            {
              v44 = *(_WORD *)(v8 + 28);
              if ((v44 & 0xF000) != 0x9000)
              {
                if ((v44 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                  v43 = *(_WORD *)(v8 + 30);
                }
                v42 = v43 | 0x400;
                goto LABEL_131;
              }
LABEL_142:
              this = WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
            }
            goto LABEL_119;
          }
          v16 = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = v16 + 2;
          v17 = *(_WORD *)(v15 + 28);
          if ((v17 & 0xF000) != 0x3000)
          {
            if (v16)
            {
              *(_DWORD *)(v15 + 24) = v16;
            }
            else
            {
              v47 = *(_WORD *)(v15 + 30);
              if ((v47 & 0x400) == 0)
              {
                if ((v17 & 0xF000) == 0x9000)
                {
                  this = WebCore::Document::removedLastRef((WebCore::Document *)v15, a2);
                }
                else
                {
                  if ((v17 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
                    v47 = *(_WORD *)(v15 + 30);
                  }
                  *(_WORD *)(v15 + 30) = v47 | 0x400;
                  this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
                }
              }
            }
            v35 = *(_QWORD *)(v8 + 56);
            if (v35)
            {
              if ((*(_WORD *)(v35 + 28) & 4) != 0)
              {
                do
                {
                  v37 = *(_QWORD *)(v35 + 80);
                  if (!v37)
                    break;
                  v35 = *(_QWORD *)(v35 + 80);
                }
                while ((*(_WORD *)(v37 + 28) & 4) != 0);
              }
              goto LABEL_103;
            }
            goto LABEL_102;
          }
          v18 = *(_QWORD *)(v15 + 80);
          if (v18 && *(_DWORD *)(v18 + 4))
          {
            v19 = *(_QWORD *)(v8 + 80);
            if (v19)
              v20 = *(_DWORD *)(v19 + 4);
            else
              v20 = 0;
            if (*v11 && *((_DWORD *)*v11 - 3))
            {
              v55 = v6;
              v65 = v15;
              v66 = -1;
              v29 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(v11);
              v30 = v29;
              v32 = v31;
              if (*v11)
                v33 = (uint64_t)&(*v11)[*((unsigned int *)*v11 - 1)];
              else
                v33 = 0;
              if ((_QWORD *)v33 != v29)
              {
                do
                {
                  v34 = *(_QWORD *)(*v30 + 8);
                  ++*(_DWORD *)(v34 + 8);
                  WebCore::boundaryTextNodesMerged((unsigned int *)(v34 + 32), &v65, v20);
                  WebCore::boundaryTextNodesMerged((unsigned int *)(v34 + 56), &v65, v20);
                  *(_BYTE *)(v34 + 81) = 1;
                  if (*(_DWORD *)(v34 + 8) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                  else
                    --*(_DWORD *)(v34 + 8);
                  while (++v30 != v32)
                  {
                    if ((unint64_t)(*v30 + 1) > 1)
                      goto LABEL_71;
                  }
                  v30 = v32;
LABEL_71:
                  ;
                }
                while (v30 != (_QWORD *)v33);
              }
              v6 = v55;
            }
            this = (unsigned int *)WebCore::CharacterData::appendData(v8, (const WTF::String *)(v15 + 80));
            v21 = *(_QWORD *)(v15 + 32);
            if (v21)
            {
              *(_DWORD *)(v21 + 24) += 2;
              this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v21, (WebCore::Node *)v15, &v56);
              if (*(_DWORD *)(v21 + 24) == 2)
              {
                v25 = *(_WORD *)(v21 + 30);
                if ((v25 & 0x400) == 0)
                {
                  v26 = *(_WORD *)(v21 + 28);
                  if ((v26 & 0xF000) == 0x9000)
                  {
                    this = WebCore::Document::removedLastRef((WebCore::Document *)v21, a2);
                  }
                  else
                  {
                    if ((v26 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
                      v25 = *(_WORD *)(v21 + 30);
                    }
                    *(_WORD *)(v21 + 30) = v25 | 0x400;
                    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v21 + 24) -= 2;
              }
            }
            else
            {
              v56 = 0;
              v57 = 0;
              v58 = 0;
            }
            if ((_BYTE)v58)
            {
              this = v57;
              v57 = 0;
              if (this)
              {
LABEL_40:
                if (*this == 2)
                  this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
                else
                  *this -= 2;
              }
            }
          }
          else
          {
            v22 = *(_QWORD *)(v15 + 32);
            if (v22)
            {
              *(_DWORD *)(v22 + 24) += 2;
              this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v22, (WebCore::Node *)v15, &v59);
              if (*(_DWORD *)(v22 + 24) == 2)
              {
                v27 = *(_WORD *)(v22 + 30);
                if ((v27 & 0x400) == 0)
                {
                  v28 = *(_WORD *)(v22 + 28);
                  if ((v28 & 0xF000) == 0x9000)
                  {
                    this = WebCore::Document::removedLastRef((WebCore::Document *)v22, a2);
                  }
                  else
                  {
                    if ((v28 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 160) + 16))(*(_QWORD *)(v22 + 160));
                      v27 = *(_WORD *)(v22 + 30);
                    }
                    *(_WORD *)(v22 + 30) = v27 | 0x400;
                    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v22 + 24) -= 2;
              }
            }
            else
            {
              v59 = 0;
              v60 = 0;
              v61 = 0;
            }
            if ((_BYTE)v61)
            {
              this = (unsigned int *)v60;
              v60 = 0;
              if (this)
                goto LABEL_40;
            }
          }
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            v23 = *(_WORD *)(v15 + 30);
            if ((v23 & 0x400) == 0)
            {
              v24 = *(_WORD *)(v15 + 28);
              if ((v24 & 0xF000) == 0x9000)
              {
                this = WebCore::Document::removedLastRef((WebCore::Document *)v15, a2);
              }
              else
              {
                if ((v24 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
                  v23 = *(_WORD *)(v15 + 30);
                }
                *(_WORD *)(v15 + 30) = v23 | 0x400;
                this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
              }
            }
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
      }
      v35 = *(_QWORD *)(v8 + 56);
      if (v35)
      {
        if ((*(_WORD *)(v35 + 28) & 4) != 0)
        {
          do
          {
            v38 = *(_QWORD *)(v35 + 80);
            if (!v38)
              break;
            v35 = *(_QWORD *)(v35 + 80);
          }
          while ((*(_WORD *)(v38 + 28) & 4) != 0);
        }
LABEL_107:
        *(_DWORD *)(v35 + 24) += 2;
        v13 = *(_DWORD *)(v8 + 24);
      }
      else
      {
        v35 = *(_QWORD *)(v8 + 32);
        if (v35)
          goto LABEL_107;
      }
      v39 = v13 - 2;
      if (v39)
      {
        *(_DWORD *)(v8 + 24) = v39;
      }
      else
      {
        v48 = *(_WORD *)(v8 + 30);
        if ((v48 & 0x400) == 0)
        {
          if ((v12 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v48 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v48 | 0x400;
          this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
      v40 = *(_QWORD *)(v8 + 32);
      if (v40)
      {
        *(_DWORD *)(v40 + 24) += 2;
        this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v40, (WebCore::Node *)v8, &v62);
        if (*(_DWORD *)(v40 + 24) == 2)
        {
          v49 = *(_WORD *)(v40 + 30);
          if ((v49 & 0x400) == 0)
          {
            v50 = *(_WORD *)(v40 + 28);
            if ((v50 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v40, a2);
            }
            else
            {
              if ((v50 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v40 + 160) + 16))(*(_QWORD *)(v40 + 160));
                v49 = *(_WORD *)(v40 + 30);
              }
              *(_WORD *)(v40 + 30) = v49 | 0x400;
              this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 72))(v40);
            }
          }
        }
        else
        {
          *(_DWORD *)(v40 + 24) -= 2;
        }
      }
      else
      {
        v62 = 0;
        v63 = 0;
        v64 = 0;
      }
      if ((_BYTE)v64)
      {
        this = (unsigned int *)v63;
        v63 = 0;
        if (this)
        {
          if (*this == 2)
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
          else
            *this -= 2;
        }
      }
      goto LABEL_117;
    }
    v35 = *(_QWORD *)(v8 + 56);
    if (v35)
    {
      if ((*(_WORD *)(v35 + 28) & 4) != 0)
      {
        do
        {
          v36 = *(_QWORD *)(v35 + 80);
          if (!v36)
            break;
          v35 = *(_QWORD *)(v35 + 80);
        }
        while ((*(_WORD *)(v36 + 28) & 4) != 0);
      }
LABEL_99:
      *(_DWORD *)(v35 + 24) += 2;
      goto LABEL_100;
    }
    v35 = *(_QWORD *)(v8 + 32);
    if (v35)
      goto LABEL_99;
LABEL_100:
    if (*(_DWORD *)(v8 + 24) != 2)
    {
      *(_DWORD *)(v8 + 24) -= 2;
      goto LABEL_119;
    }
    v41 = *(_WORD *)(v8 + 30);
    if ((v41 & 0x400) == 0)
    {
      if ((v12 & 0xF000) == 0x9000)
        goto LABEL_142;
      if ((v12 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
        v41 = *(_WORD *)(v8 + 30);
      }
      v42 = v41 | 0x400;
LABEL_131:
      *(_WORD *)(v8 + 30) = v42;
      this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    }
LABEL_119:
    v8 = v35;
    if (!v35)
      goto LABEL_159;
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    v53 = *(_WORD *)(v5 + 30);
    if ((v53 & 0x400) == 0)
    {
      v54 = *(_WORD *)(v5 + 28);
      if ((v54 & 0xF000) == 0x9000)
      {
        this = WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
      }
      else
      {
        if ((v54 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
          v53 = *(_WORD *)(v5 + 30);
        }
        *(_WORD *)(v5 + 30) = v53 | 0x400;
        this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
      }
    }
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
LABEL_159:
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v51 = *(_WORD *)(v6 + 30);
      if ((v51 & 0x400) == 0)
      {
        v52 = *(_WORD *)(v6 + 28);
        if ((v52 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v6, a2);
        }
        else
        {
          if ((v52 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v51 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v51 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::Node::cloneNodeForBindings@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;

  if ((*(_WORD *)(this + 28) & 0x80) != 0)
  {
    *(_BYTE *)a3 = 6;
    *(_QWORD *)(a3 + 8) = 0;
    v5 = 1;
  }
  else
  {
    if (a2)
      v4 = 2;
    else
      v4 = 0;
    this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, *(_QWORD *)(*(_QWORD *)(this + 40) + 8), v4);
    v5 = 0;
  }
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

uint64_t WebCore::Node::prefix(WebCore::Node *this)
{
  return MEMORY[0x1E0CBF2F8];
}

void WebCore::Node::setPrefix(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 11;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t WebCore::Node::localName(WebCore::Node *this)
{
  return MEMORY[0x1E0CBF2F8];
}

uint64_t WebCore::Node::namespaceURI(WebCore::Node *this)
{
  return MEMORY[0x1E0CBF2F8];
}

BOOL WebCore::Node::isContentEditable(WebCore::Node *this)
{
  return WebCore::Node::computeEditability((uint64_t)this, 1, 0) != 0;
}

uint64_t WebCore::Node::computeEditability(uint64_t a1, char a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  _BOOL4 v24;
  char v25;
  int v26;
  uint64_t v28;
  int v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::StringImpl *v35;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!*(_QWORD *)(v3 + 1944) || *(_BYTE *)(v3 + 3405))
    return 0;
  if ((~*(unsigned __int16 *)(a1 + 28) & 0x408) == 0)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  *(_DWORD *)(v3 + 24) += 2;
  v7 = *(_QWORD *)(v3 + 528);
  v11 = v7
     && (v8 = *(_QWORD *)(v7 + 8)) != 0
     && (v9 = *(_QWORD *)(v8 + 24)) != 0
     && (v10 = *(_QWORD *)(v9 + 8)) != 0
     && *(_BYTE *)(v10 + 656) != 0;
  if ((*(_BYTE *)(a1 + 22) & 0x10) != 0)
    goto LABEL_71;
  if (!a3 && WebCore::Document::needsStyleRecalc((WebCore::Document *)v3))
  {
    if (WebCore::Document::usesStyleBasedEditability((WebCore::Document *)v3, v34, v35))
    {
      WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v3);
      goto LABEL_11;
    }
LABEL_71:
    v15 = WebCore::HTMLElement::editabilityFromContentEditableAttr(a1, v11);
    goto LABEL_42;
  }
LABEL_11:
  v12 = *(unsigned __int16 *)(a1 + 28);
  if ((v12 & 0xF000) != 0x9000)
  {
    if ((v12 & 8) != 0)
    {
      v18 = a1;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (v16)
      {
        if ((*(_WORD *)(v16 + 28) & 8) != 0)
        {
          v17 = *(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL;
          if (v17)
          {
            v32 = *(_QWORD *)(v17 + 88);
            if (v32)
            {
              v33 = *(_QWORD *)(v32 + 224);
              if (v33)
              {
                v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, a1);
                if (v18)
                  goto LABEL_29;
                v12 = *(unsigned __int16 *)(a1 + 28);
              }
            }
          }
        }
      }
      if ((~v12 & 0x408) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
      {
        v18 = *(_QWORD *)(a1 + 32);
        if (!v18)
          goto LABEL_47;
        v19 = *(_WORD *)(v18 + 28);
        if ((v19 & 0x80) == 0)
        {
          if ((v19 & 8) == 0)
            goto LABEL_47;
          goto LABEL_29;
        }
        v28 = *(_QWORD *)(v18 + 200);
        if (!v28)
          goto LABEL_47;
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 112);
        if (!v28)
          goto LABEL_47;
      }
      v18 = *(_QWORD *)(v28 + 8);
      if (!v18)
        goto LABEL_47;
    }
LABEL_29:
    if ((*(_BYTE *)(v18 + 22) & 8) == 0)
      goto LABEL_47;
    v14 = WebCore::Element::resolveComputedStyle(v18, 2);
    if (!v14)
      goto LABEL_47;
    goto LABEL_31;
  }
  v13 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v13)
    goto LABEL_47;
  if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    v13 = *(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v13)
      v13 = *(_QWORD *)(v13 + 8);
  }
  v14 = (WebCore::Node *)(v13 + 80);
LABEL_31:
  if ((a2 & 1) != 0)
  {
    if ((v11 & 1) != 0)
    {
      v15 = 2;
      goto LABEL_42;
    }
    v20 = *((_QWORD *)v14 + 3);
  }
  else
  {
    v20 = *((_QWORD *)v14 + 3);
    if ((*(_BYTE *)(v20 + 239) & 1) != 0)
    {
      v22 = 0;
    }
    else
    {
      v21 = *(_DWORD *)(v20 + 228);
      v22 = (v21 >> 15) & 3;
      if ((v21 & 0x30) != 0)
      {
        v29 = v22 <= 1 ? 1 : (v21 >> 15) & 3;
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 1) + 32) + 148) & 0xC00000) != 0x800000)
          v22 = v29;
      }
    }
    v23 = v22 == 2;
    v24 = v22 != 2;
    if (v23)
      v25 = 1;
    else
      v25 = v11;
    if ((v25 & 1) != 0)
    {
      v15 = (2 * v24);
      goto LABEL_42;
    }
  }
  if ((*(_BYTE *)(v20 + 239) & 1) != 0)
  {
LABEL_47:
    v15 = 0;
    goto LABEL_42;
  }
  v26 = (*(_DWORD *)(v20 + 228) >> 4) & 3;
  if (v26 == 2)
    v15 = 1;
  else
    v15 = 2 * (v26 == 1);
LABEL_42:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v30 = *(_WORD *)(v3 + 30);
    if ((v30 & 0x400) == 0)
    {
      v31 = *(_WORD *)(v3 + 28);
      if ((v31 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v3);
      }
      else
      {
        if ((v31 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v30 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v30 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v15;
}

void WebCore::Node::inspect(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          ++*(_DWORD *)v4;
          WebCore::InspectorController::inspect(*(Inspector::FrontendRouter ***)(v4 + 80), this);
          if (*(_DWORD *)v4 == 1)
          {
            WebCore::Page::~Page(v4);
            WTF::fastFree(v5, v6);
          }
          else
          {
            --*(_DWORD *)v4;
          }
        }
      }
    }
  }
}

uint64_t WebCore::Node::renderBox(WebCore::Node *this)
{
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    return *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  return 0;
}

uint64_t WebCore::Node::renderBoxModelObject(WebCore::Node *this)
{
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0)
    return *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  return 0;
}

uint64_t WebCore::Node::absoluteBoundingRect(WebCore::Node *this, BOOL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WebCore::Document *v7;
  int8x16_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64x2_t v11;
  int64x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int32x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x2_t v20;
  uint64_t result;
  __int16 v22;
  __int16 v23;
  WebCore::Document *v24;

  v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
LABEL_2:
    if (v3)
    {
      while (1)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        if ((*(_BYTE *)(v3 + 45) & 1) == 0
          && (*(_WORD *)(v4 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          break;
        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 1272) == v4)
          break;
        if ((*(_BYTE *)(v3 + 45) & 0x40) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3) & 1) != 0
          || (*(_BYTE *)(v3 + 20) & 2) != 0)
        {
          *a2 = (*(_BYTE *)(v3 + 20) & 2) != 0;
          v9 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v3, 1, 0);
          v11.i64[0] = v10;
          v11.i64[1] = v9;
          v12 = (int64x2_t)vshrq_n_u64(v11, 0x20uLL);
          v13 = vshrn_n_s64((int64x2_t)v11, 0x20uLL);
          v14 = vcgt_s32((int32x2_t)__PAIR64__(v9, v10), (int32x2_t)0xFE000000FE000000);
          v15.i64[0] = v14.i32[0];
          v15.i64[1] = v14.i32[1];
          v16 = v15;
          v17 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v9, v10));
          v15.i64[0] = v17.i32[0];
          v15.i64[1] = v17.i32[1];
          v18 = vorrq_s8(vandq_s8(v15, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v11, 6uLL), v15), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
          *(int32x2_t *)v11.i8 = vcgt_s32(v13, (int32x2_t)0xFE000000FE000000);
          v15.i64[0] = v11.i32[0];
          v15.i64[1] = v11.i32[1];
          v19 = v15;
          v20 = vcgt_s32((int32x2_t)0xFE000000FE000000, v13);
          v15.i64[0] = v20.i32[0];
          v15.i64[1] = v20.i32[1];
          v8 = vorrq_s8(vbslq_s8(v19, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v15, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v12, 0x26uLL))), vbslq_s8(v16, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v18));
          return v8.i64[1];
        }
        v5 = *(_QWORD *)(v3 + 32);
        if (v5)
        {
          v3 = *(_QWORD *)(v5 + 8);
          if (v3)
            continue;
        }
        goto LABEL_20;
      }
    }
    goto LABEL_20;
  }
  if ((*((_WORD *)this + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
  {
    WebCore::HTMLAreaElement::imageElement((unsigned int *)this, (uint64_t *)&v24);
    v7 = v24;
    if (v24)
    {
      v3 = *((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL;
      if (v3 && (*(_BYTE *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v24 = 0;
      if (*((_DWORD *)v7 + 6) == 2)
      {
        v22 = *((_WORD *)v7 + 15);
        if ((v22 & 0x400) == 0)
        {
          v23 = *((_WORD *)v7 + 14);
          if ((v23 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef(v7, v6);
          }
          else
          {
            if ((v23 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v7 + 20) + 16))(*((_QWORD *)v7 + 20));
              v22 = *((_WORD *)v7 + 15);
            }
            *((_WORD *)v7 + 15) = v22 | 0x400;
            (*(void (**)(WebCore::Document *))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
    else
    {
      v3 = 0;
    }
    goto LABEL_2;
  }
LABEL_20:
  *a2 = 0;
  v8.i64[1] = 0;
  return v8.i64[1];
}

uint64_t WebCore::Node::refEventTarget(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::Node::derefEventTarget(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (this[6] == 2)
  {
    v3 = *((_WORD *)this + 15);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this + 14);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this, a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v3 = *((_WORD *)v2 + 15);
        }
        *((_WORD *)v2 + 15) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

_QWORD *WebCore::Node::markAncestorsForInvalidatedStyle(_QWORD *this)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  __int16 v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;

  v1 = (uint64_t)this;
  *((_DWORD *)this + 6) += 2;
  v2 = *((unsigned __int16 *)this + 14);
  if ((v2 & 0x80) != 0)
  {
    v10 = this[25];
    if (!v10)
      goto LABEL_33;
LABEL_26:
    v3 = *(_QWORD **)(v10 + 8);
    goto LABEL_27;
  }
  if ((~v2 & 0x408) == 0)
  {
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 368))(this);
    if ((_DWORD)this)
    {
      v10 = *(_QWORD *)(v1 + 112);
      if (!v10)
        goto LABEL_33;
      goto LABEL_26;
    }
  }
  v3 = *(_QWORD **)(v1 + 32);
  if (!v3)
    goto LABEL_33;
  v4 = *((_WORD *)v3 + 14);
  if ((v4 & 0x80) != 0)
  {
    v10 = v3[25];
    if (!v10)
      goto LABEL_33;
    goto LABEL_26;
  }
  if ((v4 & 8) == 0)
    goto LABEL_33;
  if ((v3[9] & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_8;
  v8 = *(_QWORD *)((v3[9] & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v8)
    goto LABEL_8;
  this = *(_QWORD **)(v8 + 224);
  if (!this)
    goto LABEL_33;
  this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*this + 16))(this, v1);
  v3 = this;
LABEL_27:
  if (!v3)
  {
LABEL_33:
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      v12 = *(_WORD *)(v1 + 30);
      if ((v12 & 0x400) == 0)
      {
        v13 = *(_WORD *)(v1 + 28);
        if ((v13 & 0xF000) == 0x9000)
        {
          return (_QWORD *)WebCore::Document::removedLastRef((WebCore::Document *)v1);
        }
        else
        {
          if ((v13 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
            v12 = *(_WORD *)(v1 + 30);
          }
          *(_WORD *)(v1 + 30) = v12 | 0x400;
          return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
        }
      }
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
    return this;
  }
LABEL_8:
  v3[8] |= 0x10000000000000uLL;
  do
  {
    if ((v3[9] & 0xFFFFFFFFFFFFLL) != 0)
    {
      v7 = *(_QWORD *)((v3[9] & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v7)
        *(_QWORD *)(v7 + 64) |= 0x8000000000000uLL;
    }
    v5 = v3[8];
    if ((v5 & 0x8000000000000) != 0)
      break;
    v3[8] = v5 | 0x8000000000000;
    this = (_QWORD *)v3[4];
    if (!this)
      break;
    v6 = *((_WORD *)this + 14);
    if ((v6 & 0x80) != 0)
    {
      v11 = this[25];
      if (!v11)
        break;
      this = *(_QWORD **)(v11 + 8);
    }
    else
    {
      if ((v6 & 8) == 0)
        break;
      if ((this[9] & 0xFFFFFFFFFFFFLL) != 0)
      {
        v9 = *(_QWORD *)((this[9] & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v9)
        {
          this = *(_QWORD **)(v9 + 224);
          if (!this)
            break;
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
        }
      }
    }
    v3 = this;
  }
  while (this);
  if (v1)
    goto LABEL_33;
  return this;
}

uint64_t WebCore::Node::computeNodeIndex(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  result = 0;
  while (1)
  {
    v3 = v1 & 0xFFFFFFFFFFFFLL;
    if (!v3)
      break;
    result = (result + 1);
    v1 = *(_QWORD *)(v3 + 48);
  }
  return result;
}

uint64_t WebCore::NodeListsNodeData::invalidateCaches(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  unsigned __int8 *v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl ***v20;
  unsigned __int8 *v21;
  BOOL v22;
  _BOOL4 v23;
  unsigned __int8 *v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v29;
  BOOL v30;
  _BOOL4 v31;
  WTF::StringImpl **v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF *v39;
  void *v40;
  uint64_t v41;
  WTF::StringImpl ***v42;
  WTF::StringImpl ***v43;
  WTF::StringImpl ***v44[2];

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (!v2)
  {
    v3 = 0;
    LODWORD(v4) = 0;
LABEL_3:
    v5 = (unsigned __int8 *)(v2 + 24 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (unsigned __int8 *)(v2 + 24 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (unsigned __int8 *)(v2 + 24 * v4);
    goto LABEL_3;
  }
  v3 = *(unsigned __int8 **)(this + 16);
  if ((_DWORD)v4)
  {
    v29 = 24 * v4;
    v3 = *(unsigned __int8 **)(this + 16);
    while (1)
    {
      v30 = !*v3 && *((_QWORD *)v3 + 1) == 0;
      v31 = v30;
      if (*v3 != 255 && !v31)
        break;
      v3 += 24;
      v29 -= 24;
      if (!v29)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  if (v2)
    v6 = (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  else
    v6 = 0;
  while (v3 != v6)
  {
    this = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v3 + 2) + 80))(*((_QWORD *)v3 + 2), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 2) + 24) + 40) + 8));
    v25 = v3 + 24;
    v3 = v5;
    if (v25 != v5)
    {
      v3 = v25;
      while (1)
      {
        v26 = !*v3 && *((_QWORD *)v3 + 1) == 0;
        v27 = v26;
        if (*v3 != 255 && !v27)
          break;
        v3 += 24;
        if (v3 == v5)
        {
          v3 = v5;
          break;
        }
      }
    }
  }
  v7 = *(_QWORD *)(v1 + 32);
  if (!v7)
  {
    v10 = 0;
    LODWORD(v8) = 0;
LABEL_51:
    v9 = (unsigned __int8 *)(v7 + 24 * v8);
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(v7 - 4);
  v9 = (unsigned __int8 *)(v7 + 24 * v8);
  if (!*(_DWORD *)(v7 - 12))
  {
    v10 = (unsigned __int8 *)(v7 + 24 * v8);
    goto LABEL_51;
  }
  v10 = *(unsigned __int8 **)(v1 + 32);
  if ((_DWORD)v8)
  {
    v11 = 24 * v8;
    v10 = *(unsigned __int8 **)(v1 + 32);
    while (1)
    {
      v12 = !*v10 && *((_QWORD *)v10 + 1) == 0;
      v13 = v12;
      if (*v10 != 255 && !v13)
        break;
      v10 += 24;
      v11 -= 24;
      if (!v11)
      {
        v10 = v9;
        break;
      }
    }
  }
LABEL_23:
  if (v7)
    v15 = (unsigned __int8 *)(v7 + 24 * *(unsigned int *)(v7 - 4));
  else
    v15 = 0;
  while (v10 != v15)
  {
    this = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v10 + 2) + 72))(*((_QWORD *)v10 + 2), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 2) + 24) + 40) + 8));
    v21 = v10 + 24;
    v10 = v9;
    if (v21 != v9)
    {
      v10 = v21;
      while (1)
      {
        v22 = !*v10 && *((_QWORD *)v10 + 1) == 0;
        v23 = v22;
        if (*v10 != 255 && !v23)
          break;
        v10 += 24;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  v16 = *(WTF::StringImpl ****)(v1 + 24);
  if (!v16)
  {
    v17 = 0;
    v18 = 0;
LABEL_28:
    v19 = &v16[2 * v18];
    goto LABEL_29;
  }
  v18 = *((unsigned int *)v16 - 1);
  v42 = &v16[2 * v18];
  v43 = *(WTF::StringImpl ****)(v1 + 24);
  if (!*((_DWORD *)v16 - 3))
  {
    v17 = &v16[2 * v18];
    goto LABEL_28;
  }
  if ((_DWORD)v18)
  {
    v33 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v34 = 16 * v18;
      while (1)
      {
        if (v33)
        {
          v35 = (*(_DWORD *)v33)++;
          v36 = *v43;
          if (v35)
          {
            *(_DWORD *)v33 = v35;
            v37 = (uint64_t)v33;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v33);
            this = WTF::fastFree(v39, v40);
            v37 = WebCore::nullName;
          }
        }
        else
        {
          v37 = 0;
          v36 = *v43;
        }
        if (v36 != v33 && (WTF::StringImpl **)((char *)*v43 + 1) != 0)
          break;
        v43 += 2;
        v33 = (WTF::StringImpl **)v37;
        v34 -= 16;
        if (!v34)
        {
          v43 = v42;
          break;
        }
      }
      v17 = v43;
      v43 = *(WTF::StringImpl ****)(v1 + 24);
    }
    else
    {
      v41 = 0;
      while ((unint64_t)v16[v41] + 1 <= 1)
      {
        v41 += 2;
        if (2 * v18 == v41)
        {
          v17 = &v16[2 * v18];
          goto LABEL_108;
        }
      }
      v17 = &v16[v41];
    }
  }
  else
  {
    v17 = *(WTF::StringImpl ****)(v1 + 24);
  }
LABEL_108:
  v19 = v42;
  v16 = v43;
LABEL_29:
  v44[0] = v17;
  v44[1] = v19;
  if (v16)
    v20 = &v16[2 * *((unsigned int *)v16 - 1)];
  else
    v20 = 0;
  if (v20 != v17)
  {
    do
    {
      (*((void (**)(WTF::StringImpl **, _QWORD))*v17[1] + 9))(v17[1], *(_QWORD *)(*((_QWORD *)v17[1][3] + 5) + 8));
      this = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++(v44);
      v17 = v44[0];
    }
    while (v44[0] != v20);
  }
  return this;
}

WebCore::CollectionNamedElementCache *WebCore::NodeListsNodeData::invalidateCachesForAttribute(WebCore::CollectionNamedElementCache *this, const WebCore::QualifiedName *a2)
{
  WebCore::CollectionNamedElementCache *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t v22;
  BOOL v23;
  _BOOL4 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = this;
  v4 = *((_QWORD *)this + 2);
  if (!v4)
  {
    v5 = 0;
    LODWORD(v6) = 0;
LABEL_3:
    v7 = (unsigned __int8 *)(v4 + 24 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v7 = (unsigned __int8 *)(v4 + 24 * v6);
  if (!*(_DWORD *)(v4 - 12))
  {
    v5 = (unsigned __int8 *)(v4 + 24 * v6);
    goto LABEL_3;
  }
  v5 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if ((_DWORD)v6)
  {
    v22 = 24 * v6;
    v5 = (unsigned __int8 *)*((_QWORD *)this + 2);
    while (1)
    {
      v23 = !*v5 && *((_QWORD *)v5 + 1) == 0;
      v24 = v23;
      if (*v5 != 255 && !v24)
        break;
      v5 += 24;
      v22 -= 24;
      if (!v22)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_4:
  if (v4)
    v8 = (unsigned __int8 *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    this = (WebCore::CollectionNamedElementCache *)*((_QWORD *)v5 + 2);
    if (*((_BYTE *)this + 32) != 2)
    {
      switch(*((_BYTE *)this + 32))
      {
        case 1:
          v34 = *(_QWORD *)a2;
          v35 = WebCore::HTMLNames::classAttr;
          goto LABEL_85;
        case 3:
          v34 = *(_QWORD *)a2;
          v35 = WebCore::HTMLNames::nameAttr;
          goto LABEL_85;
        case 4:
          v26 = *(_QWORD *)a2;
          v27 = WebCore::HTMLNames::forAttr;
          v28 = WebCore::HTMLNames::typeAttr;
          goto LABEL_63;
        case 5:
          v36 = *(_QWORD *)a2;
          if (*(_QWORD *)a2 == WebCore::HTMLNames::nameAttr
            || v36 == WebCore::HTMLNames::idAttr
            || v36 == WebCore::HTMLNames::forAttr
            || v36 == WebCore::HTMLNames::formAttr
            || v36 == WebCore::HTMLNames::typeAttr)
          {
            goto LABEL_102;
          }
          goto LABEL_67;
        case 6:
          v34 = *(_QWORD *)a2;
          v35 = WebCore::HTMLNames::hrefAttr;
LABEL_85:
          if (v34 == v35)
            goto LABEL_102;
          goto LABEL_67;
        case 7:
          goto LABEL_102;
        default:
          goto LABEL_67;
      }
    }
    v26 = *(_QWORD *)a2;
    v27 = WebCore::HTMLNames::idAttr;
    v28 = WebCore::HTMLNames::nameAttr;
LABEL_63:
    if (v26 == v27 || v26 == v28)
LABEL_102:
      this = (WebCore::CollectionNamedElementCache *)(*(uint64_t (**)(WebCore::CollectionNamedElementCache *, _QWORD))(*(_QWORD *)this + 80))(this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8));
LABEL_67:
    v30 = v5 + 24;
    v5 = v7;
    if (v30 != v7)
    {
      v5 = v30;
      while (1)
      {
        v31 = !*v5 && *((_QWORD *)v5 + 1) == 0;
        v32 = v31;
        if (*v5 != 255 && !v32)
          break;
        v5 += 24;
        if (v5 == v7)
        {
          v5 = v7;
          break;
        }
      }
    }
  }
  v9 = (unsigned __int8 *)*((_QWORD *)v3 + 4);
  if (!v9)
  {
    v12 = 0;
    LODWORD(v10) = 0;
LABEL_44:
    v11 = &v9[24 * v10];
    goto LABEL_23;
  }
  v10 = *((unsigned int *)v9 - 1);
  v11 = &v9[24 * v10];
  if (!*((_DWORD *)v9 - 3))
  {
    v12 = &v9[24 * v10];
    goto LABEL_44;
  }
  v12 = v9;
  if ((_DWORD)v10)
  {
    v13 = 24 * v10;
    v12 = v9;
    while (1)
    {
      v14 = !*v12 && *((_QWORD *)v12 + 1) == 0;
      v15 = v14;
      if (*v12 != 255 && !v15)
        break;
      v12 += 24;
      v13 -= 24;
      if (!v13)
      {
        v12 = v11;
        break;
      }
    }
  }
LABEL_23:
  if (v9)
    v17 = &v9[24 * *((unsigned int *)v9 - 1)];
  else
    v17 = 0;
  while (v12 != v17)
  {
    this = WebCore::HTMLCollection::invalidateCacheForAttribute(*((WebCore::CollectionNamedElementCache **)v12 + 2), (uint64_t *)a2);
    v18 = v12 + 24;
    v12 = v11;
    if (v18 != v11)
    {
      v12 = v18;
      while (1)
      {
        v19 = !*v12 && *((_QWORD *)v12 + 1) == 0;
        v20 = v19;
        if (*v12 != 255 && !v20)
          break;
        v12 += 24;
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Node::nodeLists(WebCore::Node *this)
{
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    return *(_QWORD *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  else
    return 0;
}

uint64_t *WebCore::Node::checkSetPrefix@<X0>(uint64_t *this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>, int32x4_t a4@<Q0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _WORD *v10;
  int v11;
  BOOL v12;
  unint64_t i;
  int v14;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  char v21;
  unsigned __int8 v22;
  int32x4_t v23;
  char isValidNameNonASCII;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_2;
  v9 = *(unsigned int *)(v6 + 4);
  if (!(_DWORD)v9)
    goto LABEL_2;
  v10 = *(_WORD **)(v6 + 8);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    v11 = *(unsigned __int8 *)v10;
    if ((v11 | 0x20u) - 97 < 0x1A || v11 == 95 || v11 == 58)
    {
      if (v9 < 2)
        goto LABEL_2;
      v12 = 0;
      for (i = 1; i != v9; v12 = i >= v9)
      {
        v14 = *((unsigned __int8 *)v10 + i);
        if ((v14 | 0x20u) - 97 >= 0x1A && (v14 - 48) >= 0xA)
        {
          v16 = v14 - 45;
          v17 = v16 > 0x32;
          v18 = (1 << v16) & 0x4000000002003;
          if (v17 || v18 == 0)
            break;
        }
        ++i;
      }
      if (v12)
        goto LABEL_2;
    }
    v28 = (uint64_t)this;
    isValidNameNonASCII = WebCore::isValidNameNonASCII((uint64_t)v10, v9, a4);
  }
  else
  {
    v27 = *(unsigned int *)(v6 + 4);
    v28 = (uint64_t)this;
    v26 = *(_QWORD *)(v6 + 8);
    v22 = WebCore::isValidNameASCII<char16_t>(v10, v9);
    this = (uint64_t *)v28;
    if ((v22 & 1) != 0)
      goto LABEL_2;
    isValidNameNonASCII = WebCore::isValidNameNonASCII(v26, v27, v23);
  }
  v25 = isValidNameNonASCII;
  this = (uint64_t *)v28;
  if ((v25 & 1) == 0)
  {
    v21 = 3;
    goto LABEL_32;
  }
LABEL_2:
  this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 152))(this);
  v7 = *this;
  if (*this && *(_DWORD *)(v7 + 4))
  {
    v8 = *(_QWORD *)a2;
LABEL_25:
    if (v8 != WebCore::xmlAtomData || v7 == WebCore::XMLNames::xmlNamespaceURI)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return this;
    }
    goto LABEL_31;
  }
  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v8 + 4))
    goto LABEL_25;
LABEL_31:
  v21 = 11;
LABEL_32:
  *(_BYTE *)a3 = v21;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return this;
}

const WebCore::Node **WebCore::Node::isDescendantOf(const WebCore::Node ***this, const WebCore::Node ***a2)
{
  __int16 v2;
  const WebCore::Node **v3;

  v2 = *((_WORD *)a2 + 14);
  if ((v2 & 0xF000) == 0x9000)
  {
    if (*this[5] == (const WebCore::Node *)a2 && (*((_WORD *)this + 14) & 0xF000) != 0x9000)
      return (const WebCore::Node **)((*((unsigned __int8 *)this + 22) >> 3) & 1);
    return 0;
  }
  if ((v2 & 4) == 0)
    return 0;
  v3 = a2[10];
  if (!v3)
    return v3;
  if (((*((unsigned __int8 *)this + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
    return 0;
  do
  {
    this = (const WebCore::Node ***)this[4];
    v3 = (const WebCore::Node **)(this != 0);
  }
  while (this != a2 && this != 0);
  return v3;
}

BOOL WebCore::Node::isDescendantOrShadowDescendantOf(const WebCore::Node ***this, const WebCore::Node *a2)
{
  __int16 v2;
  const WebCore::Node ***v3;
  _BOOL8 result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Node *v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;

  v2 = *((_WORD *)a2 + 14);
  if ((v2 & 0xF000) == 0x9000)
  {
    if (*this[5] == a2 && (*((_WORD *)this + 14) & 0xF000) != 0x9000 && (*((_BYTE *)this + 22) & 8) != 0)
      return 1;
  }
  else if ((v2 & 4) != 0
         && *((_QWORD *)a2 + 10)
         && ((*((unsigned __int8 *)this + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) == 0)
  {
    v3 = this;
    do
      v3 = (const WebCore::Node ***)v3[4];
    while (v3 != (const WebCore::Node ***)a2 && v3 != 0);
    if (v3)
      return 1;
  }
  v6 = (uint64_t)*this[5];
  if (v6)
    v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  v8 = *(_QWORD *)(v6 + 200);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(v8 + 8);
  result = v9 != 0;
  if ((const WebCore::Node *)v9 != a2 && v9 != 0)
  {
    if ((v2 & 0xF000) == 0x9000)
    {
      while (1)
      {
        v23 = **(_QWORD **)(v9 + 40);
        if ((const WebCore::Node *)v23 == a2
          && (*(_WORD *)(v9 + 28) & 0xF000) != 0x9000
          && (*(_BYTE *)(v9 + 22) & 8) != 0)
        {
          break;
        }
        if (v23)
          v24 = (*(_WORD *)(v23 + 28) & 0x80) == 0;
        else
          v24 = 1;
        if (v24)
          return 0;
        v21 = *(_QWORD *)(v23 + 200);
        if (!v21)
          return 0;
        v9 = *(_QWORD *)(v21 + 8);
        result = v9 != 0;
        if ((const WebCore::Node *)v9 == a2 || v9 == 0)
          return result;
      }
      return 1;
    }
    if ((v2 & 4) != 0)
    {
      if (*((_QWORD *)a2 + 10))
      {
        while (1)
        {
          if (((*((_QWORD *)a2 + 2) >> 51) & 1) == (*(_BYTE *)(v9 + 22) & 8) >> 3)
          {
            v11 = (const WebCore::Node *)v9;
            do
              v11 = (const WebCore::Node *)*((_QWORD *)v11 + 4);
            while (v11 != a2 && v11 != 0);
            if (v11)
              break;
          }
          v13 = **(_QWORD **)(v9 + 40);
          if (v13)
            v14 = (*(_WORD *)(v13 + 28) & 0x80) == 0;
          else
            v14 = 1;
          if (v14)
            return 0;
          v15 = *(_QWORD *)(v13 + 200);
          if (!v15)
            return 0;
          v9 = *(_QWORD *)(v15 + 8);
          result = v9 != 0;
          if ((const WebCore::Node *)v9 == a2 || v9 == 0)
            return result;
        }
        return 1;
      }
      while (1)
      {
        v27 = **(_QWORD **)(v9 + 40);
        if (!v27 || (*(_WORD *)(v27 + 28) & 0x80) == 0)
          break;
        v25 = *(_QWORD *)(v27 + 200);
        if (!v25)
          break;
        v9 = *(_QWORD *)(v25 + 8);
        result = v9 != 0;
        if ((const WebCore::Node *)v9 == a2 || v9 == 0)
          return result;
      }
    }
    else
    {
      while (1)
      {
        v19 = **(_QWORD **)(v9 + 40);
        if (!v19 || (*(_WORD *)(v19 + 28) & 0x80) == 0)
          break;
        v17 = *(_QWORD *)(v19 + 200);
        if (!v17)
          break;
        v9 = *(_QWORD *)(v17 + 8);
        result = v9 != 0;
        if ((const WebCore::Node *)v9 == a2 || v9 == 0)
          return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::Node::shadowHost(WebCore::Node *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = **((_QWORD **)this + 5);
  if (v1)
    v2 = (*(_WORD *)(v1 + 28) & 0x80) == 0;
  else
    v2 = 1;
  if (!v2 && (v3 = *(_QWORD *)(v1 + 200)) != 0)
    return *(_QWORD *)(v3 + 8);
  else
    return 0;
}

uint64_t WebCore::Node::contains(WebCore::Node *this, const WebCore::Node *a2)
{
  __int16 v2;
  uint64_t v3;

  if (this == a2)
    return 1;
  v2 = *((_WORD *)this + 14);
  if ((v2 & 0xF000) == 0x9000)
  {
    if (**((WebCore::Node ***)a2 + 5) == this && (*((_WORD *)a2 + 14) & 0xF000) != 0x9000)
      return (*((unsigned __int8 *)a2 + 22) >> 3) & 1;
    return 0;
  }
  if ((v2 & 4) == 0)
    return 0;
  v3 = *((_QWORD *)this + 10);
  if (!v3)
    return v3;
  if (((*((unsigned __int8 *)a2 + 22) ^ *((unsigned __int8 *)this + 22)) & 8) != 0)
    return 0;
  do
  {
    a2 = (const WebCore::Node *)*((_QWORD *)a2 + 4);
    v3 = a2 != 0;
  }
  while (a2 != this && a2 != 0);
  return v3;
}

uint64_t WebCore::Node::containsIncludingShadowDOM(WebCore::Node *this, const WebCore::Node *a2)
{
  uint64_t v2;
  const WebCore::Node **v4;

  v2 = a2 != 0;
  if (a2 != this && a2)
  {
    do
    {
      if ((*((_WORD *)a2 + 14) & 0x80) != 0)
      {
        v2 = *((_QWORD *)a2 + 25);
        if (!v2)
          return v2;
        v4 = (const WebCore::Node **)(v2 + 8);
      }
      else
      {
        v4 = (const WebCore::Node **)((char *)a2 + 32);
      }
      a2 = *v4;
      v2 = *v4 != 0;
    }
    while (a2 != this && a2 != 0);
  }
  return v2;
}

uint64_t WebCore::Node::pseudoAwarePreviousSibling(WebCore::Node *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)this + 368))(this))
  {
    v2 = *((_QWORD *)this + 4);
    if (!v2 || (*(_WORD *)(v2 + 28) & 8) == 0)
      return *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v4 = *((_QWORD *)this + 14);
    if (!v4)
      return *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL;
    v2 = *(_QWORD *)(v4 + 8);
    if (!v2)
      return *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL;
  }
  if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) != 0)
    return *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL;
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)this + 368))(this) != 7
    || (result = *(_QWORD *)(v2 + 88)) == 0)
  {
    if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
      || (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)this + 368))(this) != 6)
    {
      if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        return *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0xA8);
      else
        return 0;
    }
    return *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t WebCore::Node::pseudoAwareFirstChild(WebCore::Node *this)
{
  __int16 v2;
  uint64_t result;

  v2 = *((_WORD *)this + 14);
  if (this && (v2 & 8) != 0)
  {
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      result = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
      if (!result)
      {
        result = *((_QWORD *)this + 10);
        if (!result)
          return *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xB0);
      }
    }
    else if (*((_QWORD *)this + 10))
    {
      return *((_QWORD *)this + 10);
    }
    else
    {
      return 0;
    }
  }
  else if ((v2 & 4) != 0)
  {
    return *((_QWORD *)this + 10);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t WebCore::Node::pseudoAwareLastChild(WebCore::Node *this)
{
  __int16 v2;
  uint64_t result;

  v2 = *((_WORD *)this + 14);
  if (this && (v2 & 8) != 0)
  {
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      result = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xB0);
      if (!result)
      {
        result = *((_QWORD *)this + 11);
        if (!result)
          return *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
      }
    }
    else if (*((_QWORD *)this + 11))
    {
      return *((_QWORD *)this + 11);
    }
    else
    {
      return 0;
    }
  }
  else if ((v2 & 4) != 0)
  {
    return *((_QWORD *)this + 11);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t WebCore::Node::computedStyle(WebCore::Node *this)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  _BYTE v5[8];
  WTF::StringImpl *v6;
  char v7;

  v5[0] = 0;
  v7 = 0;
  v2 = (*(uint64_t (**)(WebCore::Node *, _BYTE *))(*(_QWORD *)this + 264))(this, v5);
  if (v7)
  {
    v3 = v6;
    v6 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v1);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WebCore::Node::computedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int16 v14;
  __int16 v15;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4
    || (*(_WORD *)(v4 + 28) & 8) == 0
    || (v5 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v10 = *(_QWORD *)(v5 + 88)) == 0
    || (v11 = *(_QWORD *)(v10 + 224)) == 0
    || (v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a1)) == 0)
  {
    if ((~*(unsigned __int16 *)(a1 + 28) & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
    {
      v7 = *(_QWORD *)(a1 + 32);
      if (!v7)
        return 0;
      v8 = *(_WORD *)(v7 + 28);
      if ((v8 & 0x80) == 0)
      {
        if ((v8 & 8) != 0)
          goto LABEL_16;
        return 0;
      }
      v6 = *(_QWORD *)(v7 + 200);
      if (!v6)
        return 0;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 112);
      if (!v6)
        return 0;
    }
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      goto LABEL_16;
    return 0;
  }
LABEL_16:
  *(_DWORD *)(v7 + 24) += 2;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 264))(v7, a2);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    v14 = *(_WORD *)(v7 + 30);
    if ((v14 & 0x400) == 0)
    {
      v15 = *(_WORD *)(v7 + 28);
      if ((v15 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v7, v12);
      }
      else
      {
        if ((v15 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
          v14 = *(_WORD *)(v7 + 30);
        }
        *(_WORD *)(v7 + 30) = v14 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return v9;
}

uint64_t WebCore::Node::canStartSelection(WebCore::Node *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!WebCore::Node::hasEditableStyle((uint64_t)this, 0))
  {
    v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v2)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        v2 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 148) & 0xC00000) == 0x800000)
      {
        v3 = *(_QWORD *)(v2 + 104);
        if ((*(_BYTE *)(v3 + 239) & 1) != 0 || (*(_DWORD *)(v3 + 228) & 0x18000) == 0)
          return 0;
      }
    }
    if ((*((_WORD *)this + 14) & 0x80) != 0)
    {
      v6 = *((_QWORD *)this + 25);
      if (v6)
      {
        v4 = *(_QWORD *)(v6 + 8);
        if (v4)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
      }
    }
    else
    {
      v4 = *((_QWORD *)this + 4);
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
    }
  }
  return 1;
}

BOOL WebCore::Node::hasEditableStyle(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  WebCore::Node *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  _BOOL4 v22;
  char v23;
  int v24;
  uint64_t v26;
  int v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!*(_QWORD *)(v2 + 1944) || *(_BYTE *)(v2 + 3405))
    goto LABEL_15;
  if ((~*(unsigned __int16 *)(a1 + 28) & 0x408) == 0)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      goto LABEL_4;
    }
LABEL_15:
    v13 = 0;
    return v13 != 0;
  }
LABEL_4:
  *(_DWORD *)(v2 + 24) += 2;
  v5 = *(_QWORD *)(v2 + 528);
  v9 = v5
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && *(_BYTE *)(v8 + 656) != 0;
  if ((*(_BYTE *)(a1 + 22) & 0x10) != 0)
  {
    v13 = WebCore::HTMLElement::editabilityFromContentEditableAttr(a1, v9);
    goto LABEL_41;
  }
  v10 = *(unsigned __int16 *)(a1 + 28);
  if ((v10 & 0xF000) != 0x9000)
  {
    if ((v10 & 8) != 0)
    {
      v16 = a1;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 32);
      if (v14)
      {
        if ((*(_WORD *)(v14 + 28) & 8) != 0)
        {
          v15 = *(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL;
          if (v15)
          {
            v30 = *(_QWORD *)(v15 + 88);
            if (v30)
            {
              v31 = *(_QWORD *)(v30 + 224);
              if (v31)
              {
                v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, a1);
                if (v16)
                  goto LABEL_28;
                v10 = *(unsigned __int16 *)(a1 + 28);
              }
            }
          }
        }
      }
      if ((~v10 & 0x408) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (!v16)
          goto LABEL_47;
        v17 = *(_WORD *)(v16 + 28);
        if ((v17 & 0x80) == 0)
        {
          if ((v17 & 8) == 0)
            goto LABEL_47;
          goto LABEL_28;
        }
        v26 = *(_QWORD *)(v16 + 200);
        if (!v26)
          goto LABEL_47;
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 112);
        if (!v26)
          goto LABEL_47;
      }
      v16 = *(_QWORD *)(v26 + 8);
      if (!v16)
        goto LABEL_47;
    }
LABEL_28:
    if ((*(_BYTE *)(v16 + 22) & 8) == 0)
      goto LABEL_47;
    v12 = WebCore::Element::resolveComputedStyle(v16, 2);
    if (!v12)
      goto LABEL_47;
    goto LABEL_30;
  }
  v11 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v11)
    goto LABEL_47;
  if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    v11 = *(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
  }
  v12 = (WebCore::Node *)(v11 + 80);
LABEL_30:
  if ((a2 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v13 = 2;
      goto LABEL_41;
    }
    v18 = *((_QWORD *)v12 + 3);
  }
  else
  {
    v18 = *((_QWORD *)v12 + 3);
    if ((*(_BYTE *)(v18 + 239) & 1) != 0)
    {
      v20 = 0;
    }
    else
    {
      v19 = *(_DWORD *)(v18 + 228);
      v20 = (v19 >> 15) & 3;
      if ((v19 & 0x30) != 0)
      {
        v27 = v20 <= 1 ? 1 : (v19 >> 15) & 3;
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 1) + 32) + 148) & 0xC00000) != 0x800000)
          v20 = v27;
      }
    }
    v21 = v20 == 2;
    v22 = v20 != 2;
    if (v21)
      v23 = 1;
    else
      v23 = v9;
    if ((v23 & 1) != 0)
    {
      v13 = 2 * v22;
      goto LABEL_41;
    }
  }
  if ((*(_BYTE *)(v18 + 239) & 1) != 0)
  {
LABEL_47:
    v13 = 0;
    goto LABEL_41;
  }
  v24 = (*(_DWORD *)(v18 + 228) >> 4) & 3;
  if (v24 == 2)
    v13 = 1;
  else
    v13 = 2 * (v24 == 1);
LABEL_41:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v28 = *(_WORD *)(v2 + 30);
    if ((v28 & 0x400) == 0)
    {
      v29 = *(_WORD *)(v2 + 28);
      if ((v29 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v2);
      }
      else
      {
        if ((v29 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v28 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v28 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v13 != 0;
}

uint64_t WebCore::Node::containingShadowRoot(WebCore::Node *this)
{
  if ((*(_WORD *)(**((_QWORD **)this + 5) + 28) & 0x80) != 0)
    return **((_QWORD **)this + 5);
  else
    return 0;
}

uint64_t WebCore::Node::assignedSlot(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = *((_QWORD *)this + 4);
  if (v1
    && (*(_WORD *)(v1 + 28) & 8) != 0
    && (v2 = *(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v4 = *(_QWORD *)(v2 + 88)) != 0
    && (v6 = *(_QWORD *)(v4 + 224)) != 0)
  {
    return (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v6 + 16))(v6, this);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::Node::assignedSlotForBindings(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = *((_QWORD *)this + 4);
  if (v1
    && (*(_WORD *)(v1 + 28) & 8) != 0
    && (v2 = *(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v4 = *(_QWORD *)(v2 + 88)) != 0
    && *(_BYTE *)(v4 + 193) == 2
    && (v6 = *(_QWORD *)(v4 + 224)) != 0)
  {
    return (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v6 + 16))(v6, this);
  }
  else
  {
    return 0;
  }
}

unsigned int *WebCore::Node::setManuallyAssignedSlot(uint64_t a1, WebCore::Text *a2)
{
  __int16 v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unsigned int *result;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  WTF *v16;

  v4 = *(_WORD *)(a1 + 28);
  if (a1 && (v4 & 8) != 0)
  {
    *(_DWORD *)(a1 + 24) += 2;
    WebCore::RenderTreeUpdater::tearDownRenderers((WebCore *)a1, 0);
  }
  else
  {
    if (!a1 || (v4 & 2) == 0)
      goto LABEL_6;
    *(_DWORD *)(a1 + 24) += 2;
    WebCore::RenderTreeUpdater::tearDownRenderer((WebCore::RenderTreeUpdater *)a1, a2);
  }
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    v13 = *(_WORD *)(a1 + 30);
    if ((v13 & 0x400) == 0)
    {
      v14 = *(_WORD *)(a1 + 28);
      if ((v14 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)a1, v5);
      }
      else
      {
        if ((v14 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
          v13 = *(_WORD *)(a1 + 30);
        }
        *(_WORD *)(a1 + 30) = v13 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) -= 2;
  }
LABEL_6:
  v7 = WebCore::Node::ensureRareData((WebCore::Node *)a1);
  if (a2)
  {
    result = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
    if (result)
    {
      do
        v9 = __ldaxr(result);
      while (__stlxr(v9 + 1, result));
    }
  }
  else
  {
    result = 0;
  }
  v10 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = result;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v15)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v15));
      v16 = *(WTF **)(v10 + 16);
      if (v16)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v16, v6);
      }
      return (unsigned int *)WTF::fastFree((WTF *)v10, v6);
    }
  }
  return result;
}

uint64_t WebCore::Node::parentInComposedTree(WebCore::Node *this)
{
  WebCore::Node *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  WebCore::Node *v10;

  v1 = this;
  v2 = (char *)this + 32;
  v3 = *((_QWORD *)this + 4);
  if (!v3)
    goto LABEL_4;
  if ((*(_WORD *)(v3 + 28) & 8) == 0)
    goto LABEL_4;
  v4 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v4
    || (v6 = *(_QWORD *)(v4 + 88)) == 0
    || (v7 = *(_QWORD *)(v6 + 224)) == 0
    || (v9 = v2,
        v10 = v1,
        result = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v7 + 16))(v7, v1),
        v2 = v9,
        v1 = v10,
        !result))
  {
LABEL_4:
    if ((*((_WORD *)v1 + 14) & 0x80) != 0)
    {
      v8 = *((_QWORD *)v1 + 25);
      if (!v8)
        return 0;
      v2 = (char *)(v8 + 8);
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *WebCore::Node::treeScopeForSVGReferences(WebCore::Node *this)
{
  _QWORD *result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  result = (_QWORD *)*((_QWORD *)this + 5);
  v2 = *result;
  if (*result)
    v3 = (*(_WORD *)(*result + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (!v3 && !*(_BYTE *)(v2 + 193))
  {
    v4 = *(_QWORD *)(v2 + 200);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(_WORD *)(*(_QWORD *)(v5 + 96) + 10) == 242)
          return (_QWORD *)result[2];
      }
    }
  }
  return result;
}

uint64_t WebCore::Node::parentOrShadowHostElement(WebCore::Node *this)
{
  uint64_t *v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v5;
  uint64_t v6;

  if (this && (*((_WORD *)this + 14) & 0x80) != 0)
  {
    v5 = *((_QWORD *)this + 25);
    if (!v5)
      return 0;
    v1 = (uint64_t *)(v5 + 8);
  }
  else
  {
    v1 = (uint64_t *)((char *)this + 32);
  }
  v2 = *v1;
  if (!v2)
    return 0;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 0x80) != 0)
  {
    v6 = *(_QWORD *)(v2 + 200);
    if (v6)
      return *(_QWORD *)(v6 + 8);
    return 0;
  }
  if ((v3 & 8) != 0)
    return v2;
  else
    return 0;
}

WebCore::Node *WebCore::Node::traverseToRootNode(WebCore::Node *this)
{
  WebCore::Node *v1;

  do
  {
    v1 = this;
    this = (WebCore::Node *)*((_QWORD *)this + 4);
  }
  while (this);
  return v1;
}

WebCore::Node *WebCore::Node::shadowIncludingRoot(WebCore::Node *this)
{
  WebCore::Node *result;
  uint64_t v3;

  do
  {
    if ((*((_BYTE *)this + 22) & 0x18) != 0)
    {
      result = (WebCore::Node *)**((_QWORD **)this + 5);
    }
    else
    {
      do
      {
        result = this;
        this = (WebCore::Node *)*((_QWORD *)this + 4);
      }
      while (this);
    }
    if ((*((_WORD *)result + 14) & 0x80) == 0)
      break;
    v3 = *((_QWORD *)result + 25);
    if (!v3)
      break;
    this = *(WebCore::Node **)(v3 + 8);
  }
  while (this);
  return result;
}

uint64_t *WebCore::Node::queueTaskKeepingThisNodeAlive(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12[2];
  char v13;
  int v14;

  v4 = (char)a2;
  v6 = WebCore::Document::eventLoop(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), a2);
  *(_DWORD *)(a1 + 24) += 2;
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v11 = (_QWORD *)a1;
  v14 = 0;
  WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v11, &v14, (uint64_t)v12);
  ++*(_DWORD *)(v12[0] + 8);
  if (v13)
    *(_QWORD *)(a1 + 16) |= 0x4000000000000uLL;
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E33A6550;
  v8[1] = a1;
  v11 = v8;
  v12[0] = 0;
  v8[2] = v7;
  WebCore::EventLoopTaskGroup::queueTask(v6, v4, (uint64_t *)&v11);
  v9 = (uint64_t)v11;
  v11 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v12[1] = 0;
  return WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(v12);
}

WebCore::Node *WebCore::Node::rootEditableElement(WebCore::Node *this)
{
  WebCore::Node *v2;
  WebCore::Node *v3;
  uint64_t i;

  if (!this)
    return 0;
  v2 = 0;
  v3 = this;
  do
  {
    if (!WebCore::Node::hasEditableStyle((uint64_t)v3, 0))
      break;
    if ((*((_WORD *)v3 + 14) & 8) != 0)
      v2 = v3;
    i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1272);
    if (i)
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
    }
    if ((WebCore::Node *)i == v3)
      break;
    v3 = (WebCore::Node *)*((_QWORD *)v3 + 4);
  }
  while (v3);
  return v2;
}

uint64_t WebCore::Node::ownerDocument(WebCore::Node *this)
{
  if (*(WebCore::Node **)(*((_QWORD *)this + 5) + 8) == this)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)this + 5) + 8);
}

uint64_t WebCore::Node::baseURI(WebCore::Node *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(_QWORD *)(v1 + 848))
    return v1 + 848;
  else
    return WTF::aboutBlankURL(this);
}

uint64_t WebCore::Node::isEqualNode(WebCore::Node *this, WebCore::Node *a2, const WTF::StringImpl *a3, WTF::String *a4, __n128 a5)
{
  int v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  uint64_t result;
  WTF *v11;
  const WTF::StringImpl *v12;
  WTF::String *v13;
  __n128 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  if (!a2)
    return 0;
  v7 = *((unsigned __int16 *)this + 14) >> 12;
  if (v7 != *((unsigned __int16 *)a2 + 14) >> 12)
    return 0;
  if (v7 != 1)
  {
    switch(v7)
    {
      case 2:
        if (*((_QWORD *)this + 11) != *((_QWORD *)a2 + 11))
          return 0;
        WebCore::Attr::value((uint64_t)this, a4, &v21, a5);
        WebCore::Attr::value((uint64_t)a2, v13, &v20, v14);
        v16 = v20;
        v17 = v21;
        v20 = 0;
        if (!v16)
          goto LABEL_24;
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, v15);
          v18 = v21;
        }
        else
        {
          *(_DWORD *)v16 -= 2;
LABEL_24:
          v18 = v17;
        }
        v21 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v15);
          else
            *(_DWORD *)v18 -= 2;
        }
        if (v17 == v16)
          goto LABEL_6;
        return 0;
      case 3:
      case 4:
      case 8:
        goto LABEL_15;
      case 7:
        result = WTF::equal(*((WTF **)this + 13), *((const WTF::StringImpl **)a2 + 13), a3);
        if (!(_DWORD)result)
          return result;
LABEL_15:
        v11 = (WTF *)*((_QWORD *)this + 10);
        v12 = (const WTF::StringImpl *)*((_QWORD *)a2 + 10);
        goto LABEL_16;
      case 10:
        result = WTF::equal(*((WTF **)this + 10), *((const WTF::StringImpl **)a2 + 10), a3);
        if (!(_DWORD)result)
          return result;
        result = WTF::equal(*((WTF **)this + 11), *((const WTF::StringImpl **)a2 + 11), v19);
        if (!(_DWORD)result)
          return result;
        v11 = (WTF *)*((_QWORD *)this + 12);
        v12 = (const WTF::StringImpl *)*((_QWORD *)a2 + 12);
LABEL_16:
        if ((WTF::equal(v11, v12, a3) & 1) == 0)
          return 0;
        goto LABEL_6;
      default:
        goto LABEL_6;
    }
  }
  if (*((_QWORD *)this + 12) != *((_QWORD *)a2 + 12)
    || !WebCore::Element::hasEquivalentAttributes(this, a2, (uint64_t)a3, a4, a5))
  {
    return 0;
  }
LABEL_6:
  if ((*((_WORD *)this + 14) & 4) != 0)
    v8 = (WebCore::Node *)*((_QWORD *)this + 10);
  else
    v8 = 0;
  if ((*((_WORD *)a2 + 14) & 4) != 0)
    v9 = (WebCore::Node *)*((_QWORD *)a2 + 10);
  else
    v9 = 0;
  if (!v8)
    return v9 == 0;
  while (1)
  {
    result = WebCore::Node::isEqualNode(v8, v9);
    if (!(_DWORD)result)
      break;
    v8 = (WebCore::Node *)*((_QWORD *)v8 + 7);
    v9 = (WebCore::Node *)*((_QWORD *)v9 + 7);
    if (!v8)
      return v9 == 0;
  }
  return result;
}

BOOL WebCore::Node::isDefaultNamespace(WebCore::Node *this, const WTF::AtomString *a2, const WTF::AtomString *a3, WTF::String *a4, __n128 a5)
{
  const WTF::AtomString *v5;

  if (!*(_QWORD *)a2 || (v5 = a2, !*(_DWORD *)(*(_QWORD *)a2 + 4)))
    v5 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  return *WebCore::locateDefaultNamespace(this, MEMORY[0x1E0CBF2F8], a3, a4, a5) == *(_QWORD *)v5;
}

uint64_t *WebCore::locateDefaultNamespace(WebCore *this, const WebCore::Node *a2, const WTF::AtomString *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = MEMORY[0x1E0CBF2F8];
  while (2)
  {
    v8 = *((unsigned __int16 *)this + 14);
    switch(v8 >> 12)
    {
      case 1u:
        v9 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 == WebCore::xmlAtomData)
          return &WebCore::XMLNames::xmlNamespaceURI;
        if (v9 == WebCore::xmlnsAtomData)
          return &WebCore::XMLNSNames::xmlnsNamespaceURI;
        v10 = *((_QWORD *)this + 12);
        if (*(_QWORD *)(v10 + 32) && *(_QWORD *)(v10 + 16) == v9)
          return (uint64_t *)(v10 + 32);
        v11 = *((_QWORD *)this + 13);
        if (!v11)
          goto LABEL_35;
        if ((*(_BYTE *)(v11 + 4) & 8) == 0)
        {
          if ((v8 & 0x20) == 0)
            goto LABEL_11;
          goto LABEL_10;
        }
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, a5, (uint64_t)a3, a4);
        if ((*((_WORD *)this + 14) & 0x20) != 0)
LABEL_10:
          WebCore::SVGElement::synchronizeAllAttributes(this);
LABEL_11:
        v12 = *((_QWORD *)this + 13);
        if (!v12)
          goto LABEL_35;
        v13 = *(_DWORD *)(v12 + 4);
        if ((v13 & 1) != 0)
        {
          v15 = *(_DWORD *)(v12 + 52);
          if (!v15)
            goto LABEL_35;
          v14 = *(_QWORD *)(v12 + 40);
        }
        else
        {
          if (v13 < 0x20)
            goto LABEL_35;
          v14 = v12 + 32;
          v15 = v13 >> 5;
          if (!v15)
            goto LABEL_35;
        }
        v17 = 0;
        if (*(_QWORD *)a2)
        {
          while (1)
          {
            v18 = *(_QWORD **)(v14 + 16 * v17);
            if (v18[4] == WebCore::XMLNSNames::xmlnsNamespaceURI
              && v18[2] == WebCore::xmlnsAtomData
              && v18[3] == *(_QWORD *)a2)
            {
              break;
            }
            v19 = v17 + 1;
            v17 = (v17 + 1);
            if (v15 == v19)
              goto LABEL_35;
          }
        }
        else
        {
          while (1)
          {
            v20 = *(_QWORD **)(v14 + 16 * v17);
            if (v20[4] == WebCore::XMLNSNames::xmlnsNamespaceURI)
            {
              v21 = v20[2];
              if (!v21 && v20[3] == WebCore::xmlnsAtomData)
                break;
              if (v21 == WebCore::xmlnsAtomData && !v20[3])
                break;
            }
            v22 = v17 + 1;
            v17 = (v17 + 1);
            if (v15 == v22)
              goto LABEL_35;
          }
        }
        v23 = v14 + 16 * v17;
        v25 = *(_QWORD *)(v23 + 8);
        v7 = v23 + 8;
        v24 = v25;
        if (!v25 || !*(_DWORD *)(v24 + 4))
          return (uint64_t *)MEMORY[0x1E0CBF2F8];
        return (uint64_t *)v7;
      case 2u:
        v16 = *((_QWORD *)this + 10);
        if (v16)
        {
          this = *(WebCore **)(v16 + 8);
          if (this)
            continue;
        }
        return (uint64_t *)v7;
      case 9u:
        this = (WebCore *)*((_QWORD *)this + 159);
        if (this)
          continue;
        return (uint64_t *)v7;
      case 0xAu:
      case 0xBu:
        return (uint64_t *)v7;
      default:
LABEL_35:
        this = (WebCore *)*((_QWORD *)this + 4);
        if (this && (*((_WORD *)this + 14) & 8) != 0)
          continue;
        return (uint64_t *)v7;
    }
  }
}

uint64_t *WebCore::Node::lookupNamespaceURI(WebCore::Node *this, const WTF::AtomString *a2, const WTF::AtomString *a3, WTF::String *a4, __n128 a5)
{
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    a2 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  return WebCore::locateDefaultNamespace(this, a2, a3, a4, a5);
}

uint64_t WebCore::Node::lookupPrefix(WebCore::Node *this, const WTF::AtomString *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WebCore::Node *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return MEMORY[0x1E0CBF2F8];
  v8 = this;
  v9 = *((unsigned __int16 *)this + 14);
  v5 = MEMORY[0x1E0CBF2F8];
  switch(v9 >> 12)
  {
    case 1u:
      while (1)
      {
        v10 = *((_QWORD *)v8 + 12);
        if (*(_QWORD *)(v10 + 32) == *(_QWORD *)a2)
          return v10 + 16;
        v11 = *((_QWORD *)v8 + 13);
        if (!v11)
          goto LABEL_22;
        if ((*(_BYTE *)(v11 + 4) & 8) == 0)
          break;
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(v8, (unsigned __int8 *)a2, a5, a3, a4);
        if ((*((_WORD *)v8 + 14) & 0x20) != 0)
          goto LABEL_10;
LABEL_11:
        v12 = *((_QWORD *)v8 + 13);
        if (v12)
        {
          v13 = *(_DWORD *)(v12 + 4);
          if ((v13 & 1) != 0)
          {
            v15 = *(_DWORD *)(v12 + 52);
            if (v15)
            {
              v14 = *(_QWORD *)(v12 + 40);
LABEL_18:
              v16 = 0;
              do
              {
                v17 = *(_QWORD *)(v14 + 16 * v16);
                if (*(_QWORD *)(v17 + 16) == WebCore::xmlnsAtomData && *(_QWORD *)(v14 + 16 * v16 + 8) == *(_QWORD *)a2)
                  goto LABEL_94;
                v18 = v16 + 1;
                v16 = (v16 + 1);
              }
              while (v15 != v18);
            }
          }
          else if (v13 >= 0x20)
          {
            v14 = v12 + 32;
            v15 = v13 >> 5;
            if (v15)
              goto LABEL_18;
          }
        }
LABEL_22:
        v8 = (WebCore::Node *)*((_QWORD *)v8 + 4);
        if (v8)
        {
          LOWORD(v9) = *((_WORD *)v8 + 14);
          if ((v9 & 8) != 0)
            continue;
        }
        return v5;
      }
      if ((v9 & 0x20) == 0)
        goto LABEL_11;
LABEL_10:
      WebCore::SVGElement::synchronizeAllAttributes(v8);
      goto LABEL_11;
    case 2u:
      v19 = *((_QWORD *)this + 10);
      if (!v19)
        return v5;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20)
        return v5;
      while (1)
      {
        v21 = *(_QWORD *)(v20 + 96);
        if (*(_QWORD *)(v21 + 32) == *(_QWORD *)a2)
          return v21 + 16;
        v22 = *(_QWORD *)(v20 + 104);
        if (v22)
        {
          if ((*(_BYTE *)(v22 + 4) & 8) != 0)
            WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v20, (unsigned __int8 *)a2, a5, a3, a4);
          if ((*(_WORD *)(v20 + 28) & 0x20) != 0)
            WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v20);
          v23 = *(_QWORD *)(v20 + 104);
          if (v23)
          {
            v24 = *(_DWORD *)(v23 + 4);
            if ((v24 & 1) != 0)
            {
              v26 = *(_DWORD *)(v23 + 52);
              if (v26)
              {
                v25 = *(_QWORD *)(v23 + 40);
LABEL_41:
                if (v26)
                {
                  v27 = 0;
                  do
                  {
                    v17 = *(_QWORD *)(v25 + 16 * v27);
                    if (*(_QWORD *)(v17 + 16) == WebCore::xmlnsAtomData
                      && *(_QWORD *)(v25 + 16 * v27 + 8) == *(_QWORD *)a2)
                    {
                      goto LABEL_94;
                    }
                    v28 = v27 + 1;
                    v27 = (v27 + 1);
                  }
                  while (v26 != v28);
                }
              }
            }
            else if (v24 >= 0x20)
            {
              v25 = v23 + 32;
              v26 = v24 >> 5;
              goto LABEL_41;
            }
          }
        }
        v20 = *(_QWORD *)(v20 + 32);
        if (!v20 || (*(_WORD *)(v20 + 28) & 8) == 0)
          return v5;
      }
    case 9u:
      v38 = *((_QWORD *)this + 159);
      if (!v38)
        return v5;
      while (2)
      {
        v21 = *(_QWORD *)(v38 + 96);
        if (*(_QWORD *)(v21 + 32) != *(_QWORD *)a2)
        {
          v39 = *(_QWORD *)(v38 + 104);
          if (v39)
          {
            if ((*(_BYTE *)(v39 + 4) & 8) != 0)
              WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v38, (unsigned __int8 *)a2, a5, a3, a4);
            if ((*(_WORD *)(v38 + 28) & 0x20) != 0)
              WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v38);
            v40 = *(_QWORD *)(v38 + 104);
            if (v40)
            {
              v41 = *(_DWORD *)(v40 + 4);
              if ((v41 & 1) != 0)
              {
                v43 = *(_DWORD *)(v40 + 52);
                if (!v43)
                  goto LABEL_91;
                v42 = *(_QWORD *)(v40 + 40);
              }
              else
              {
                if (v41 < 0x20)
                  goto LABEL_91;
                v42 = v40 + 32;
                v43 = v41 >> 5;
                if (!v43)
                  goto LABEL_91;
              }
              v44 = 0;
              do
              {
                v17 = *(_QWORD *)(v42 + 16 * v44);
                if (*(_QWORD *)(v17 + 16) == WebCore::xmlnsAtomData && *(_QWORD *)(v42 + 16 * v44 + 8) == *(_QWORD *)a2)
                  goto LABEL_94;
                v45 = v44 + 1;
                v44 = (v44 + 1);
              }
              while (v43 != v45);
            }
          }
LABEL_91:
          v38 = *(_QWORD *)(v38 + 32);
          if (!v38 || (*(_WORD *)(v38 + 28) & 8) == 0)
            return v5;
          continue;
        }
        return v21 + 16;
      }
    case 0xAu:
    case 0xBu:
      return v5;
    default:
      v29 = *((_QWORD *)this + 4);
      if (!v29)
        return MEMORY[0x1E0CBF2F8];
      v30 = *(_WORD *)(v29 + 28);
      if ((v30 & 8) == 0)
        return MEMORY[0x1E0CBF2F8];
      v5 = MEMORY[0x1E0CBF2F8];
      while (2)
      {
        v10 = *(_QWORD *)(v29 + 96);
        if (*(_QWORD *)(v10 + 32) == *(_QWORD *)a2)
          return v10 + 16;
        v31 = *(_QWORD *)(v29 + 104);
        if (!v31)
          goto LABEL_68;
        if ((*(_BYTE *)(v31 + 4) & 8) == 0)
        {
          if ((v30 & 0x20) == 0)
            goto LABEL_57;
          goto LABEL_56;
        }
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v29, (unsigned __int8 *)a2, a5, a3, a4);
        if ((*(_WORD *)(v29 + 28) & 0x20) != 0)
LABEL_56:
          WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v29);
LABEL_57:
        v32 = *(_QWORD *)(v29 + 104);
        if (!v32)
          goto LABEL_68;
        v33 = *(_DWORD *)(v32 + 4);
        if ((v33 & 1) != 0)
        {
          v35 = *(_DWORD *)(v32 + 52);
          if (!v35)
            goto LABEL_68;
          v34 = *(_QWORD *)(v32 + 40);
        }
        else if (v33 < 0x20 || (v34 = v32 + 32, (v35 = v33 >> 5) == 0))
        {
LABEL_68:
          v29 = *(_QWORD *)(v29 + 32);
          if (!v29)
            return v5;
          v30 = *(_WORD *)(v29 + 28);
          if ((v30 & 8) == 0)
            return v5;
          continue;
        }
        break;
      }
      v36 = 0;
      while (1)
      {
        v17 = *(_QWORD *)(v34 + 16 * v36);
        if (*(_QWORD *)(v17 + 16) == WebCore::xmlnsAtomData && *(_QWORD *)(v34 + 16 * v36 + 8) == *(_QWORD *)a2)
          break;
        v37 = v36 + 1;
        v36 = (v36 + 1);
        if (v35 == v37)
          goto LABEL_68;
      }
LABEL_94:
      v5 = v17 + 24;
      break;
  }
  return v5;
}

WTF::StringImpl *WebCore::Node::textContent@<X0>(WebCore::Node *this@<X0>, const WebCore::Node *a2@<X1>, WTF::StringBuilder *a3@<X4>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q0>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 1;
  WebCore::appendTextContent(this, a2, &v10, (WTF::String *)&v11, a3, a5);
  if (v10)
  {
    v7 = 0;
  }
  else
  {
    v7 = v11;
    if (v11
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v11),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v11),
          (v7 = v11) != 0))
    {
      *(_DWORD *)v7 += 2;
    }
  }
  *a4 = v7;
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int16 *WebCore::Node::setTextContent@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v4;

  v4 = result[14] >> 12;
  if (v4 == 1)
    goto LABEL_2;
  if (v4 > 0xB)
    goto LABEL_3;
  if (v4 == 11)
  {
LABEL_2:
    result = (unsigned __int16 *)WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)result, a2);
LABEL_3:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  if (((1 << v4) & 0x19C) == 0)
    goto LABEL_3;
  return (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 120))(result);
}

uint64_t WebCore::compareDetachedElementsPosition(WebCore *this, WebCore::Node *a2, WebCore::Node *a3)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = 0;
  v13 = 0;
  WebCore::hashPointer((WebCore *)&v11, this);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  WebCore::hashPointer((WebCore *)&v8, a2);
  v4 = bswap64(v11);
  v5 = bswap64(v8);
  if (v4 == v5 && (v4 = bswap64(v12), v5 = bswap64(v9), v4 == v5) && (v4 = bswap32(v13), v5 = bswap32(v10), v4 == v5))
  {
    v6 = 0;
  }
  else if (v4 < v5)
  {
    v6 = -1;
  }
  else
  {
    v6 = 1;
  }
  if (v6 <= 0)
    return 37;
  else
    return 35;
}

float WebCore::Node::convertToPage(WebCore::Node *this, const WebCore::FloatPoint *a2)
{
  uint64_t v3;
  void *v4;
  float v5;
  WTF *v6;
  WTF *v7;
  WebCore::Node *v8;
  float v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  int v21;
  int v22;

  v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v11 = *(_QWORD *)a2;
    v15 = 0;
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v19 = 0;
    v20 = 1;
    v21 = 0;
    v22 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v3 + 576))(v3, 0, &v11, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)&v11, 0);
    v5 = *(float *)&v11;
    v6 = v17;
    v17 = 0;
    if (v6)
      WTF::fastFree(v6, v4);
    v7 = v16;
    v16 = 0;
    if (v7)
      WTF::fastFree(v7, v4);
  }
  else
  {
    v8 = (WebCore::Node *)*((_QWORD *)this + 4);
    if (v8 && (*((_WORD *)v8 + 14) & 8) != 0)
    {
      WebCore::Node::convertToPage(v8, a2);
      return v9;
    }
    else
    {
      return *(float *)a2;
    }
  }
  return v5;
}

float WebCore::Node::convertFromPage(WebCore::Node *this, const WebCore::FloatPoint *a2)
{
  uint64_t v3;
  void *v4;
  float v5;
  WTF *v6;
  WTF *v7;
  WebCore::Node *v8;
  float v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  uint64_t v21;

  v3 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v11 = *(_QWORD *)a2;
    v15 = 0;
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v19 = 0;
    v20 = 1;
    v21 = 0x100000000;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 584))(v3, 2, &v11);
    WebCore::TransformState::flatten((WebCore::TransformState *)&v11, 0);
    v5 = *(float *)&v11;
    v6 = v17;
    v17 = 0;
    if (v6)
      WTF::fastFree(v6, v4);
    v7 = v16;
    v16 = 0;
    if (v7)
      WTF::fastFree(v7, v4);
  }
  else
  {
    v8 = (WebCore::Node *)*((_QWORD *)this + 4);
    if (v8 && (*((_WORD *)v8 + 14) & 8) != 0)
    {
      WebCore::Node::convertFromPage(v8, a2);
      return v9;
    }
    else
    {
      return *(float *)a2;
    }
  }
  return v5;
}

WTF::StringImpl *WebCore::Node::description@<X0>(WebCore::Node *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  int8x16_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 104))(&v13);
  v3 = v13;
  v4 = (int8x16_t *)"<none>";
  if (v13)
  {
    v11 = *((_DWORD *)v13 + 1);
    if (v11)
      v4 = (int8x16_t *)"";
    v5 = 7;
    if (v11)
      v5 = 1;
    *(_DWORD *)v13 += 2;
  }
  else
  {
    v5 = 7;
  }
  v12 = v5 - 1;
  if ((unint64_t)(v5 - 1) >> 31)
    goto LABEL_26;
  if (v3)
  {
    v6 = *((_DWORD *)v3 + 1);
    if (v6 < 0 || (v7 = v12 + v6, __OFADD__(v12, v6)))
    {
      *a2 = 0;
      goto LABEL_26;
    }
    v8 = (*((unsigned __int8 *)v3 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    v7 = v5 - 1;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v7, v8, v4, v12, (uint64_t)v3, a2);
  if (!*a2)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x195A147F4);
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v9);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int8 *WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::begin(unsigned __int8 *result)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  BOOL v5;
  _BOOL4 v6;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[24 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[24 * v2];
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    while (1)
    {
      v5 = !*result && *((_QWORD *)result + 1) == 0;
      v6 = v5;
      if (*result != 255 && !v6)
        break;
      result += 24;
      v4 -= 24;
      if (!v4)
        return v3;
    }
  }
  return result;
}

unsigned __int8 *WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::begin(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[24 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[24 * v1];
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while (1)
    {
      v4 = !*result && *((_QWORD *)result + 1) == 0;
      v5 = v4;
      if (*result != 255 && !v5)
        break;
      result += 24;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::begin(WTF::StringImpl ***a1)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;

  if (!a1)
    return 0;
  v3 = *((unsigned int *)a1 - 1);
  v13 = &a1[2 * v3];
  v14 = a1;
  if (!*((_DWORD *)a1 - 3))
    return &a1[2 * v3];
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v5 = 16 * v3;
      while (1)
      {
        if (v4)
        {
          v6 = (*(_DWORD *)v4)++;
          v7 = *v14;
          if (v6)
          {
            *(_DWORD *)v4 = v6;
            v8 = (uint64_t)v4;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
            WTF::fastFree(v10, v11);
            v8 = WebCore::nullName;
          }
        }
        else
        {
          v8 = 0;
          v7 = *v14;
        }
        if (v7 != v4 && (WTF::StringImpl **)((char *)*v14 + 1) != 0)
          break;
        v14 += 2;
        v4 = (WTF::StringImpl **)v8;
        v5 -= 16;
        if (!v5)
          return v13;
      }
    }
    else
    {
      v12 = 16 * v3;
      while ((unint64_t)*v14 + 1 <= 1)
      {
        v14 += 2;
        v12 -= 16;
        if (!v12)
          return v13;
      }
    }
  }
  return v14;
}

WTF::StringImpl ****WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++(WTF::StringImpl ****a1)
{
  WTF::StringImpl ***v2;
  WTF::StringImpl ***v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v8;
  WTF *v9;
  void *v10;

  v2 = a1[1];
  v3 = *a1 + 2;
  *a1 = v3;
  if (v3 != v2)
  {
    do
    {
      v4 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        v5 = (*(_DWORD *)WebCore::nullName)++;
        v6 = *v3;
        if (v5)
        {
          *(_DWORD *)v4 = v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
          WTF::fastFree(v9, v10);
        }
      }
      else
      {
        v6 = *v3;
      }
      if (v6 != v4 && (WTF::StringImpl **)((char *)*v3 + 1) != 0)
        break;
      v8 = a1[1];
      v3 = *a1 + 2;
      *a1 = v3;
    }
    while (v3 != v8);
  }
  return a1;
}

WebCore::CollectionNamedElementCache *WebCore::HTMLCollection::invalidateCacheForAttribute(WebCore::CollectionNamedElementCache *result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;

  v2 = (*(unsigned __int16 *)((char *)result + 21) >> 5) & 0xF;
  if (v2 != 2)
  {
    switch(v2)
    {
      case 1:
        v8 = *a2;
        v9 = &WebCore::HTMLNames::classAttr;
        break;
      case 3:
        v8 = *a2;
        v9 = &WebCore::HTMLNames::nameAttr;
        break;
      case 4:
        v3 = *a2;
        v4 = WebCore::HTMLNames::forAttr;
        v5 = &WebCore::HTMLNames::typeAttr;
        goto LABEL_3;
      case 5:
        v11 = *a2;
        if (*a2 != WebCore::HTMLNames::nameAttr
          && v11 != WebCore::HTMLNames::idAttr
          && v11 != WebCore::HTMLNames::forAttr
          && v11 != WebCore::HTMLNames::formAttr
          && v11 != WebCore::HTMLNames::typeAttr)
        {
          goto LABEL_12;
        }
        return (WebCore::CollectionNamedElementCache *)(*(uint64_t (**)(WebCore::CollectionNamedElementCache *, _QWORD))(*(_QWORD *)result + 72))(result, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 3) + 40) + 8));
      case 6:
        v8 = *a2;
        v9 = &WebCore::HTMLNames::hrefAttr;
        break;
      case 7:
        return (WebCore::CollectionNamedElementCache *)(*(uint64_t (**)(WebCore::CollectionNamedElementCache *, _QWORD))(*(_QWORD *)result + 72))(result, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 3) + 40) + 8));
      default:
        goto LABEL_12;
    }
    if (v8 != *v9)
      goto LABEL_12;
    return (WebCore::CollectionNamedElementCache *)(*(uint64_t (**)(WebCore::CollectionNamedElementCache *, _QWORD))(*(_QWORD *)result + 72))(result, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 3) + 40) + 8));
  }
  v3 = *a2;
  v4 = WebCore::HTMLNames::idAttr;
  v5 = &WebCore::HTMLNames::nameAttr;
LABEL_3:
  v6 = *v5;
  if (v3 == v4 || v3 == v6)
    return (WebCore::CollectionNamedElementCache *)(*(uint64_t (**)(WebCore::CollectionNamedElementCache *, _QWORD))(*(_QWORD *)result + 72))(result, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 3) + 40) + 8));
LABEL_12:
  if (*((_QWORD *)result + 4))
  {
    if (*a2 == WebCore::HTMLNames::idAttr || *a2 == WebCore::HTMLNames::nameAttr)
      return WebCore::HTMLCollection::invalidateNamedElementCache(result, *(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)result + 3) + 40) + 8));
  }
  return result;
}

WebCore::Node *WebCore::Node::enclosingLinkEventParentOrSelf(WebCore::Node *this)
{
  WebCore::Node *v1;
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v10;
  uint64_t *v11;

  v1 = this;
  if (this)
  {
    do
    {
      v2 = *((_WORD *)v1 + 14);
      if ((v2 & 8) != 0
        && (*((_WORD *)v1 + 15) & 1) != 0
        && ((v2 & 0x10) == 0 || *(_QWORD *)(*((_QWORD *)v1 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)))
      {
        return v1;
      }
      v3 = (uint64_t *)((char *)v1 + 32);
      v4 = *((_QWORD *)v1 + 4);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 28) & 8) != 0)
        {
          v5 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL;
          if (v5)
          {
            v7 = *(_QWORD *)(v5 + 88);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 224);
              if (v8)
              {
                v10 = v1;
                v11 = (uint64_t *)((char *)v1 + 32);
                v6 = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v8 + 16))(v8, v1);
                if (v6)
                  goto LABEL_9;
                v1 = v10;
                v3 = v11;
                v2 = *((_WORD *)v10 + 14);
              }
            }
          }
        }
      }
      if ((v2 & 0x80) != 0)
      {
        v1 = (WebCore::Node *)*((_QWORD *)v1 + 25);
        if (!v1)
          return v1;
        v3 = (uint64_t *)((char *)v1 + 8);
      }
      v6 = *v3;
LABEL_9:
      v1 = (WebCore::Node *)v6;
    }
    while (v6);
  }
  return v1;
}

uint64_t *WebCore::traverseSubtreeToUpdateTreeScope<WebCore::Node::moveTreeToNewScope(WebCore::Node&,WebCore::TreeScope &,WebCore::TreeScope &)::$_2,WebCore::Node::moveTreeToNewScope(WebCore::Node&,WebCore::TreeScope &,WebCore::TreeScope &)::$_3>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t *result;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;
  WebCore::Document *v16;
  uint64_t v17;
  BOOL v18;
  WebCore::ShadowRoot *v19;
  WebCore::Document *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Document *v23;
  __n128 v24;
  __int16 v25;
  __int16 v26;

  v3 = (_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)a2)
    goto LABEL_39;
  v7 = a1;
  while (1)
  {
    if (**(_BYTE **)(a2 + 8))
      *(_QWORD *)(v7 + 16) |= 0x20000000000000uLL;
    v8 = *(WebCore::Document **)(a2 + 24);
    *v3 = *(_QWORD *)(a2 + 16);
    result = (uint64_t *)WebCore::Node::moveNodeToNewDocumentSlowCase((WebCore::Node *)v7, v8, *(WebCore::Document **)(a2 + 32));
    v10 = *(_WORD *)(v7 + 28);
    if ((v10 & 8) != 0)
      v11 = v7;
    else
      v11 = 0;
    if ((v10 & 8) != 0)
    {
      if ((*(_BYTE *)(v7 + 22) & 0x80) != 0)
      {
        result = WebCore::Element::attrNodeList((WebCore::Element *)v7);
        v12 = *((unsigned int *)result + 3);
        if ((_DWORD)v12)
        {
          v13 = *result;
          v14 = 8 * v12;
          while (1)
          {
            v15 = *(WebCore::Node **)v13;
            if (*(_QWORD *)(*(_QWORD *)v13 + 40) != *(_QWORD *)a2)
              break;
            if (**(_BYTE **)(a2 + 8))
              *((_QWORD *)v15 + 2) |= 0x20000000000000uLL;
            v16 = *(WebCore::Document **)(a2 + 24);
            *((_QWORD *)v15 + 5) = *(_QWORD *)(a2 + 16);
            result = (uint64_t *)WebCore::Node::moveNodeToNewDocumentSlowCase(v15, v16, *(WebCore::Document **)(a2 + 32));
            v13 += 8;
            v14 -= 8;
            if (!v14)
              goto LABEL_16;
          }
LABEL_39:
          __break(0xC471u);
          JUMPOUT(0x195A14F34);
        }
      }
LABEL_16:
      if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v19 = *(WebCore::ShadowRoot **)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v19)
        {
          v21 = *a3;
          v20 = (WebCore::Document *)a3[1];
          v22 = *((_QWORD *)v19 + 13);
          *(_DWORD *)(v22 + 24) += 2;
          *((_QWORD *)v19 + 13) = *(_QWORD *)(v21 + 8);
          *((_QWORD *)v19 + 14) = v21;
          v24.n128_f64[0] = WebCore::ShadowRoot::moveShadowRootToNewDocument(v19, (WebCore::Document *)v22, v20);
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            v25 = *(_WORD *)(v22 + 30);
            if ((v25 & 0x400) == 0)
            {
              v26 = *(_WORD *)(v22 + 28);
              if ((v26 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v22);
              }
              else
              {
                if ((v26 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD, double))(**(_QWORD **)(v22 + 160) + 16))(*(_QWORD *)(v22 + 160), v24.n128_f64[0]);
                  v25 = *(_WORD *)(v22 + 30);
                }
                *(_WORD *)(v22 + 30) = v25 | 0x400;
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v22 + 72))(v22, v24);
              }
            }
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
          result = (uint64_t *)WebCore::Node::moveShadowTreeToNewDocumentSlowCase(v19, (WebCore::ShadowRoot *)a3[2], (WebCore::Document *)a3[1], v23);
        }
      }
    }
    if ((*(_WORD *)(v7 + 28) & 4) == 0)
      break;
    v17 = *(_QWORD *)(v7 + 80);
    if (!v17)
      break;
LABEL_26:
    v3 = (_QWORD *)(v17 + 40);
    v7 = v17;
    if (*(_QWORD *)(v17 + 40) != *(_QWORD *)a2)
      goto LABEL_39;
  }
  if (v7 != a1)
  {
    while (1)
    {
      v17 = *(_QWORD *)(v7 + 56);
      if (v17)
        break;
      v7 = *(_QWORD *)(v7 + 32);
      if (v7)
        v18 = v7 == a1;
      else
        v18 = 1;
      if (v18)
        return result;
    }
    goto LABEL_26;
  }
  return result;
}

uint64_t WebCore::Node::moveNodeToNewDocumentSlowCase(WebCore::Node *this, WebCore::Document *a2, WebCore::Document *a3)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  BOOL v14;
  int v15;
  WTF::StringImpl ***v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl ***v20;
  uint64_t v21;
  WTF::StringImpl ***v22;
  WTF::StringImpl **v23;
  int v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF *v28;
  void *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  BOOL v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  int v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t result;
  unsigned __int8 v56;
  uint64_t v57;
  WebCore::Quirks *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const WTF::AtomString *v66;
  const WTF::AtomString *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  uint64_t *v90;
  int j;
  int k;
  int m;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  WTF *v99;
  uint64_t *v100;
  uint64_t v101;
  WebCore::Document *i;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  WebCore::Document *v106;
  WebCore::AXObjectCache *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char v117;

  ++*((_DWORD *)a3 + 831);
  v6 = *((_DWORD *)a2 + 831) - 1;
  *((_DWORD *)a2 + 831) = v6;
  if (!v6 && *((_DWORD *)a2 + 6) <= 1u && (*((_WORD *)a2 + 15) & 0x400) == 0)
  {
    *((_WORD *)a2 + 15) |= 0x400u;
    (*(void (**)(WebCore::Document *))(*(_QWORD *)a2 + 72))(a2);
  }
  v7 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (v7)
  {
    v8 = *v7;
    if (!*v7)
      goto LABEL_67;
    if (a2 == a3)
    {
      WebCore::NodeListsNodeData::invalidateCaches(*v7);
    }
    else
    {
      v9 = *(unsigned __int8 **)(v8 + 16);
      v10 = WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::begin(v9);
      v11 = v10;
      v13 = v12;
      if (v9)
        v9 += 24 * *((unsigned int *)v9 - 1);
      if (v9 != v10)
      {
        do
        {
          (*(void (**)(_QWORD, WebCore::Document *))(**((_QWORD **)v11 + 2) + 80))(*((_QWORD *)v11 + 2), a2);
          while (1)
          {
            v11 += 24;
            if (v11 == v13)
              break;
            if (*v11)
              v14 = 0;
            else
              v14 = *((_QWORD *)v11 + 1) == 0;
            v15 = v14;
            if (*v11 != 255 && v15 == 0)
              goto LABEL_23;
          }
          v11 = v13;
LABEL_23:
          ;
        }
        while (v11 != v9);
      }
      v17 = WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::begin(*(WTF::StringImpl ****)(v8 + 24));
      v18 = v17;
      v20 = v19;
      v21 = *(_QWORD *)(v8 + 24);
      if (v21)
        v22 = (WTF::StringImpl ***)(v21 + 16 * *(unsigned int *)(v21 - 4));
      else
        v22 = 0;
      if (v22 != v17)
      {
        do
        {
          WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument((uint64_t)v18[1], (uint64_t *)a2);
          v18 += 2;
          if (v18 == v20)
          {
LABEL_43:
            v18 = v20;
          }
          else
          {
            v23 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
            {
              while (1)
              {
                if (v23)
                {
                  v24 = (*(_DWORD *)v23)++;
                  v25 = *v18;
                  if (v24)
                  {
                    *(_DWORD *)v23 = v24;
                    v26 = (uint64_t)v23;
                  }
                  else
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v23);
                    WTF::fastFree(v28, v29);
                    v26 = WebCore::nullName;
                  }
                }
                else
                {
                  v26 = 0;
                  v25 = *v18;
                }
                if (v25 != v23 && (WTF::StringImpl **)((char *)*v18 + 1) != 0)
                  break;
                v18 += 2;
                v23 = (WTF::StringImpl **)v26;
                if (v18 == v20)
                  goto LABEL_43;
              }
            }
            else
            {
              while ((unint64_t)*v18 + 1 <= 1)
              {
                v18 += 2;
                if (v18 == v20)
                  goto LABEL_43;
              }
            }
          }
        }
        while (v18 != v22);
      }
      v30 = *(unsigned __int8 **)(v8 + 32);
      v31 = WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::begin(v30);
      v32 = v31;
      v34 = v33;
      if (v30)
        v30 += 24 * *((unsigned int *)v30 - 1);
      if (v30 != v31)
      {
        do
        {
          (*(void (**)(_QWORD, WebCore::Document *))(**((_QWORD **)v32 + 2) + 72))(*((_QWORD *)v32 + 2), a2);
          while (1)
          {
            v32 += 24;
            if (v32 == v34)
              break;
            if (*v32)
              v35 = 0;
            else
              v35 = *((_QWORD *)v32 + 1) == 0;
            v36 = v35;
            if (*v32 != 255 && v36 == 0)
              goto LABEL_63;
          }
          v32 = v34;
LABEL_63:
          ;
        }
        while (v32 != v30);
      }
    }
    v7 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
    if (v7)
    {
LABEL_67:
      v38 = v7[1];
      if (v38)
      {
        v39 = *(unsigned int *)(v38 + 12);
        if ((_DWORD)v39)
        {
          v40 = *(uint64_t **)v38;
          v41 = *((unsigned __int8 *)a3 + 3364);
          v42 = 8 * v39;
          do
          {
            v43 = *v40++;
            v41 |= *(_BYTE *)(v43 + 40) & 7;
            *((_BYTE *)a3 + 3364) = v41;
            v42 -= 8;
          }
          while (v42);
        }
        v44 = *(uint64_t **)(v38 + 16);
        if (v44)
        {
          v46 = *((unsigned int *)v44 - 1);
          v45 = &v44[v46];
          if (*((_DWORD *)v44 - 3))
          {
            if (!(_DWORD)v46)
            {
              v47 = *(uint64_t **)(v38 + 16);
              goto LABEL_161;
            }
            v94 = 8 * v46;
            v47 = *(uint64_t **)(v38 + 16);
            while ((unint64_t)(*v47 + 1) <= 1)
            {
              ++v47;
              v94 -= 8;
              if (!v94)
              {
                v47 = v45;
                break;
              }
            }
LABEL_74:
            if (!v44)
            {
              v48 = 0;
LABEL_76:
              if (v48 != v47)
              {
                while (!*(_QWORD *)(*v47 + 8))
                {
                  v100 = v47 + 1;
                  v47 = v45;
                  if (v100 != v45)
                  {
                    v47 = v100;
                    while ((unint64_t)(*v47 + 1) <= 1)
                    {
                      if (++v47 == v45)
                      {
                        v47 = v45;
                        break;
                      }
                    }
                  }
                  if (v47 == v48)
                  {
                    v47 = v48;
                    break;
                  }
                }
              }
              if (v44)
                v44 += *((unsigned int *)v44 - 1);
              if (v47 != v44)
              {
                v49 = *((unsigned __int8 *)a3 + 3364);
                v50 = *(_DWORD *)(v38 + 24);
                do
                {
                  v52 = *v47;
                  v51 = v47 + 1;
                  v49 |= *(_BYTE *)(*(_QWORD *)(v52 + 8) + 40) & 7;
                  *((_BYTE *)a3 + 3364) = v49;
                  v53 = v45;
                  if (v51 != v45)
                  {
                    v53 = v51;
                    while ((unint64_t)(*v53 + 1) <= 1)
                    {
                      if (++v53 == v45)
                      {
                        v53 = v45;
                        break;
                      }
                    }
                  }
                  v47 = v48;
                  if (v53 != v48)
                  {
                    v47 = v53;
                    if (!*(_QWORD *)(*v53 + 8))
                    {
                      while (1)
                      {
                        v54 = v47 + 1;
                        v47 = v45;
                        if (v54 != v45)
                        {
                          v47 = v54;
                          while ((unint64_t)(*v47 + 1) <= 1)
                          {
                            if (++v47 == v45)
                            {
                              v47 = v45;
                              break;
                            }
                          }
                        }
                        if (v47 == v48)
                          break;
                        if (*(_QWORD *)(*v47 + 8))
                          goto LABEL_87;
                      }
                      v47 = v48;
                    }
                  }
LABEL_87:
                  *(_DWORD *)(v38 + 24) = ++v50;
                }
                while (v47 != v44);
              }
              goto LABEL_99;
            }
            LODWORD(v46) = *((_DWORD *)v44 - 1);
LABEL_161:
            v48 = &v44[v46];
            goto LABEL_76;
          }
        }
        else
        {
          v45 = 0;
          v46 = 0;
        }
        v47 = v45;
        v45 = &v44[v46];
        goto LABEL_74;
      }
    }
  }
LABEL_99:
  result = (uint64_t)WebCore::Document::moveNodeIteratorsToNewDocument(a2, this, a3);
  if (!*((_QWORD *)this + 4))
    result = (uint64_t)WebCore::Document::parentlessNodeMovedToNewDocument(a2, this);
  v56 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v56 & 1) != 0 && WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v101 = *((_QWORD *)a2 + 66);
    if (*((unsigned __int8 *)a2 + 3362) | *((unsigned __int8 *)a2 + 3405))
    {
      i = a2;
      if (v101)
      {
        v109 = *(_QWORD *)(v101 + 8);
        i = a2;
        if (v109)
        {
          v110 = *(_QWORD *)(v109 + 120);
          i = a2;
          if (v110)
          {
            v111 = *(_QWORD *)(v110 + 8);
            for (i = a2; v111; v111 = *(_QWORD *)(v114 + 8))
            {
              i = *(WebCore::Document **)(*(_QWORD *)(v111 + 40) + 8);
              v112 = *((_QWORD *)i + 66);
              if (!v112)
                break;
              v113 = *(_QWORD *)(v112 + 8);
              if (!v113)
                break;
              v114 = *(_QWORD *)(v113 + 120);
              if (!v114)
                break;
            }
          }
        }
      }
    }
    else
    {
      i = a2;
      if (v101)
      {
        v103 = *(_QWORD *)(v101 + 8);
        i = a2;
        if (v103)
        {
          v104 = *(_QWORD *)(*(_QWORD *)(v103 + 128) + 8);
          v105 = v104 && *(_BYTE *)(v104 + 144) == 0;
          i = a2;
          if (v105)
          {
            v106 = *(WebCore::Document **)(v104 + 296);
            i = a2;
            if (v106)
              i = v106;
          }
        }
      }
    }
    v107 = (WebCore::AXObjectCache *)*((_QWORD *)i + 186);
    if (v107)
    {
      ++*((_DWORD *)v107 + 2);
      result = (uint64_t)WebCore::AXObjectCache::remove(v107, this);
      v108 = *((_DWORD *)v107 + 2);
      if (!v108)
      {
        __break(0xC471u);
        JUMPOUT(0x195A1589CLL);
      }
      *((_DWORD *)v107 + 2) = v108 - 1;
    }
  }
  v57 = *((_QWORD *)a2 + 380);
  if (v57)
  {
    v95 = *(_DWORD *)(v57 + 36);
    v96 = *(_DWORD *)(v57 + 32) + 1;
    *(_DWORD *)(v57 + 32) = v96;
    if (v96 > v95)
    {
      result = _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v57 + 24), &v117);
      v97 = 0;
      *(_DWORD *)(v57 + 32) = 0;
      v98 = *(_QWORD *)(v57 + 24);
      if (v98)
      {
        v97 = *(_DWORD *)(v98 - 12);
        if (v97 > 0x7FFFFFFE)
          v97 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v57 + 36) = 2 * v97;
    }
    v99 = (WTF *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
    if (v99 && *(_QWORD *)((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) + 8))
      result = WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)(v57 + 24), v99);
  }
  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v116 = 0;
    v115 = 0;
    v58 = (WebCore::Quirks *)*((_QWORD *)a3 + 86);
    if (!v58)
      v58 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(a3);
    result = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v58, this);
    if ((_DWORD)result)
      v59 = 4;
    else
      v59 = 256;
    v60 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v60 || (v61 = *(_QWORD *)(v60 + 96)) == 0)
    {
      result = WebCore::threadGlobalDataSlow((WebCore *)result);
      v61 = result;
    }
    v62 = *(_QWORD *)(v61 + 40);
    if (!v62)
    {
      result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v61);
      v62 = *(_QWORD *)(v61 + 40);
    }
    v63 = *((_QWORD *)this + 2);
    if ((v63 & 0x1000000000000) != 0)
    {
      v64 = v63 & 0xFFFFFFFFFFFFLL;
      v65 = *(unsigned int *)((v63 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v65)
      {
        v66 = *(const WTF::AtomString **)(v64 + 16);
        v67 = (const WTF::AtomString *)((char *)v66 + 32 * v65);
        while (1)
        {
          v68 = *((_QWORD *)a2 + 412);
          v69 = *((unsigned int *)a2 + 826);
          if (v68)
          {
            v70 = v69 - 1;
            v71 = *((_DWORD *)a2 + 828);
            v72 = *(_DWORD *)(*(_QWORD *)v66 + 16);
            v73 = (v71 ^ (v72 >> 8)) & ((_DWORD)v69 - 1);
            v74 = *(_QWORD *)(v68 + 16 * v73);
            if (v74)
            {
              v75 = v72 >> 8;
              v76 = -1;
              do
              {
                v77 = *(_DWORD *)(v74 + 16);
                if (++v76 > (((_DWORD)v73 + (_DWORD)v69 - ((v71 ^ (v77 >> 8)) & v70)) & v70))
                  break;
                if (v74 == *(_QWORD *)v66 && v77 >> 8 == v75)
                {
                  v78 = v68 + 16 * v73;
                  goto LABEL_127;
                }
                v73 = ((_DWORD)v73 + 1) & v70;
                v74 = *(_QWORD *)(v68 + 16 * v73);
              }
              while (v74);
            }
            v78 = v68 + 16 * v69;
          }
          else
          {
            v78 = 16 * v69;
          }
LABEL_127:
          v79 = *((_DWORD *)v66 + 5);
          *(_DWORD *)(v78 + 8) -= v79;
          result = WebCore::Document::didAddEventListenersOfType((WebCore::EventNames **)a3, v66, v79);
          v80 = *(_QWORD *)(v62 + 2552);
          if (v80)
          {
            v81 = *(_DWORD *)(v62 + 2560);
            v82 = v81 - 1;
            v83 = *(_DWORD *)(v62 + 2568);
            v84 = *(_DWORD *)(*(_QWORD *)v66 + 16);
            v85 = (v83 ^ (v84 >> 8)) & (v81 - 1);
            v86 = *(_QWORD *)(v80 + 16 * v85);
            if (v86)
            {
              v87 = v84 >> 8;
              v88 = -1;
              do
              {
                v89 = *(_DWORD *)(v86 + 16);
                result = ((_DWORD)v85 + v81 - ((v83 ^ (v89 >> 8)) & v82)) & v82;
                if (++v88 > result)
                  break;
                if (v86 == *(_QWORD *)v66 && v89 >> 8 == v87)
                {
                  LODWORD(v80) = HIWORD(*(_DWORD *)(v80 + 16 * v85 + 8));
                  if ((v80 & 0x400) == 0)
                    goto LABEL_136;
                  v90 = (uint64_t *)&v116;
                  goto LABEL_139;
                }
                v85 = ((_DWORD)v85 + 1) & v82;
                v86 = *(_QWORD *)(v80 + 16 * v85);
              }
              while (v86);
            }
            LODWORD(v80) = 0;
          }
LABEL_136:
          if ((v80 & v59) != 0)
          {
            v90 = (uint64_t *)((char *)&v115 + 4);
          }
          else
          {
            if ((v80 & 0x10) == 0)
              goto LABEL_140;
            v90 = &v115;
          }
LABEL_139:
          *(_DWORD *)v90 += v79;
LABEL_140:
          v66 = (const WTF::AtomString *)((char *)v66 + 32);
          if (v66 == v67)
          {
            for (j = v116; j; --j)
            {
              WebCore::Document::didRemoveWheelEventHandler((uint64_t)a2, this, 0);
              result = WebCore::Document::didAddWheelEventHandler(a3, this);
            }
            break;
          }
        }
      }
    }
    for (k = HIDWORD(v115); k; --k)
    {
      WebCore::Document::didRemoveTouchEventHandler(a2, (uint64_t)this, 0);
      WebCore::Document::didAddTouchEventHandler(a3, this);
      WebCore::Document::removeTouchEventListener((uint64_t)a2, (uint64_t)this, 0);
      result = (uint64_t)WebCore::Document::addTouchEventListener(a3, this);
    }
    for (m = v115; m; --m)
    {
      WebCore::Document::removeTouchEventHandler((uint64_t)a2, (uint64_t)this, 0);
      result = (uint64_t)WebCore::Document::addTouchEventHandler(a3, this);
    }
  }
  if ((*((_WORD *)this + 14) & 8) != 0)
    return (*(uint64_t (**)(WebCore::Node *, WebCore::Document *, WebCore::Document *))(*(_QWORD *)this + 488))(this, a2, a3);
  return result;
}

uint64_t WebCore::Node::addEventListener(WebCore *a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WebCore *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  WebCore::Quirks *v25;
  char shouldDispatchSimulatedMouseEvents;
  uint64_t v27;
  const WebCore::Document *v28;
  unsigned int *v29;
  WebCore::Quirks *v30;
  char v31;
  __int16 v33;
  __int16 v34;
  WebCore *v35;
  _DWORD *v36;

  v6 = *a3;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(*a3 + 16) + 1;
  v36 = (_DWORD *)v6;
  v7 = WebCore::EventTarget::addEventListener(a1, a2, (uint64_t *)&v36, a4);
  v8 = v36;
  v36 = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  if ((_DWORD)v7)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    *(_DWORD *)(v9 + 24) += 2;
    v10 = (WebCore *)WebCore::Document::didAddEventListenersOfType((WebCore::EventNames **)v9, (const WTF::AtomString *)a2, 1);
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v12 || (v10 = *(WebCore **)(v12 + 96)) == 0)
      v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
    v13 = *((_QWORD *)v10 + 5);
    if (!v13)
    {
      v35 = v10;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v13 = *((_QWORD *)v35 + 5);
    }
    v14 = *(_QWORD *)(v13 + 2552);
    if (!v14)
      goto LABEL_44;
    v15 = *(_DWORD *)(v13 + 2560);
    v16 = v15 - 1;
    v17 = *(_DWORD *)(v13 + 2568);
    v18 = *((_DWORD *)*a2 + 4);
    v19 = (v17 ^ (v18 >> 8)) & (v15 - 1);
    v20 = *(WTF::StringImpl **)(v14 + 16 * v19);
    if (!v20)
      goto LABEL_44;
    v21 = v18 >> 8;
    v22 = -1;
    do
    {
      v23 = *((_DWORD *)v20 + 4);
      v11 = (unsigned int *)(v19 + v15);
      if (++v22 > (((_DWORD)v11 - ((v17 ^ (v23 >> 8)) & v16)) & v16))
        break;
      if (v20 == *a2 && v23 >> 8 == v21)
      {
        v24 = *(_DWORD *)(v14 + 16 * v19 + 8);
        if ((v24 & 0x4000000) != 0)
        {
          WebCore::Document::didAddWheelEventHandler((WebCore::Document *)v9, a1);
          WebCore::Document::invalidateEventListenerRegions((WTF::StringImpl *)v9, v27, v28);
          goto LABEL_28;
        }
        if ((v24 & 0x40000) != 0 && (*((_QWORD *)a1 + 2) & 0x2000000000000) != 0)
        {
          v25 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 688);
          if (!v25)
            v25 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8));
          shouldDispatchSimulatedMouseEvents = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v25, a1);
          if ((v24 & 0x1000000) == 0 && (shouldDispatchSimulatedMouseEvents & 1) == 0)
          {
LABEL_25:
            if ((v24 & 0x200000) != 0)
              WebCore::Document::didAddOrRemoveMouseEventHandler((uint64_t *)v9, a1);
LABEL_28:
            if ((WebCore *)v9 == a1 && (unsigned __int16)v24 == 218)
            {
              v29 = (unsigned int *)*((_QWORD *)a1 + 87);
              if (v29)
                WebCore::LocalDOMWindow::incrementScrollEventListenersCount(v29, v11);
            }
            if ((v24 & 0x40000) != 0 && (*((_QWORD *)a1 + 2) & 0x2000000000000) != 0)
            {
              v30 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 688);
              if (!v30)
                v30 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a1 + 5)
                                                                                               + 8));
              v31 = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v30, a1);
              if ((v24 & 0x1000000) != 0 || (v31 & 1) != 0)
LABEL_40:
                WebCore::Document::addTouchEventListener((WebCore::Document *)v9, a1);
            }
            else if ((v24 & 0x1000000) != 0)
            {
              goto LABEL_40;
            }
            if ((v24 & 0x100000) != 0)
              WebCore::Document::addTouchEventHandler((WebCore::Document *)v9, a1);
            break;
          }
        }
        else if ((v24 & 0x1000000) == 0)
        {
          goto LABEL_25;
        }
        WebCore::Document::didAddTouchEventHandler((WebCore::Document *)v9, a1);
        goto LABEL_28;
      }
      v19 = ((_DWORD)v19 + 1) & v16;
      v20 = *(WTF::StringImpl **)(v14 + 16 * v19);
    }
    while (v20);
    if (v9)
    {
LABEL_44:
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        v33 = *(_WORD *)(v9 + 30);
        if ((v33 & 0x400) == 0)
        {
          v34 = *(_WORD *)(v9 + 28);
          if ((v34 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v9, v11);
          }
          else
          {
            if ((v34 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
              v33 = *(_WORD *)(v9 + 30);
            }
            *(_WORD *)(v9 + 30) = v33 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          }
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
  }
  return v7;
}

uint64_t WebCore::Node::removeEventListener(WebCore::EventTarget *a1, WTF::StringImpl **a2, WebCore::EventListener *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  WebCore::EventListenerMap *v9;
  int v10;
  uint64_t result;
  uint64_t v13;
  WebCore *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  WebCore::Quirks *v30;
  char shouldDispatchSimulatedMouseEvents;
  uint64_t v32;
  const WebCore::Document *v33;
  uint64_t v34;
  WebCore::Quirks *v35;
  char v36;
  __int16 v37;
  __int16 v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  _QWORD *v41;

  v4 = *((_QWORD *)a1 + 2);
  if ((v4 & 0x1000000000000) == 0)
    return 0;
  v9 = (WebCore::EventListenerMap *)((v4 & 0xFFFFFFFFFFFFLL) + 16);
  v10 = *a4;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)a1 + 8))(a1);
    if (v39)
    {
      v41 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40);
      if (v41)
        WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(v41, a1, a2, a3, v10 != 0);
    }
  }
  result = WebCore::EventListenerMap::remove(v9, (const WTF::AtomString *)a2, a3, *a4);
  if ((_DWORD)result)
  {
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a1 + 80))(a1);
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    *(_DWORD *)(v13 + 24) += 2;
    v14 = (WebCore *)WebCore::Document::didRemoveEventListenersOfType(v13, (uint64_t)a2, 1);
    v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
      v17 = WebCore::threadGlobalDataSlow(v14);
    v18 = *(_QWORD *)(v17 + 40);
    if (!v18)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
      v18 = *(_QWORD *)(v17 + 40);
    }
    v19 = *(_QWORD *)(v18 + 2552);
    if (!v19)
      goto LABEL_43;
    v20 = *(_DWORD *)(v18 + 2560);
    v21 = v20 - 1;
    v22 = *(_DWORD *)(v18 + 2568);
    v23 = *((_DWORD *)*a2 + 4);
    v24 = (v22 ^ (v23 >> 8)) & (v20 - 1);
    v25 = *(WTF::StringImpl **)(v19 + 16 * v24);
    if (!v25)
      goto LABEL_43;
    v26 = v23 >> 8;
    v27 = -1;
    do
    {
      v28 = *((_DWORD *)v25 + 4);
      v15 = (v24 + v20);
      if (++v27 > (((_DWORD)v15 - ((v22 ^ (v28 >> 8)) & v21)) & v21))
        break;
      if (v25 == *a2 && v28 >> 8 == v26)
      {
        v29 = *(_DWORD *)(v19 + 16 * v24 + 8);
        if ((v29 & 0x4000000) != 0)
        {
          WebCore::Document::didRemoveWheelEventHandler(v13, a1, 0);
          WebCore::Document::invalidateEventListenerRegions((WTF::StringImpl *)v13, v32, v33);
          goto LABEL_27;
        }
        if ((v29 & 0x40000) != 0 && (*((_QWORD *)a1 + 2) & 0x2000000000000) != 0)
        {
          v30 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 688);
          if (!v30)
            v30 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8));
          shouldDispatchSimulatedMouseEvents = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v30, a1);
          if ((v29 & 0x1000000) == 0 && (shouldDispatchSimulatedMouseEvents & 1) == 0)
          {
LABEL_24:
            if ((v29 & 0x200000) != 0)
              WebCore::Document::didAddOrRemoveMouseEventHandler((uint64_t *)v13, a1);
LABEL_27:
            if ((WebCore::EventTarget *)v13 == a1 && (unsigned __int16)v29 == 218)
            {
              v34 = *((_QWORD *)a1 + 87);
              if (v34)
                WebCore::LocalDOMWindow::decrementScrollEventListenersCount(v34);
            }
            if ((v29 & 0x40000) != 0 && (*((_QWORD *)a1 + 2) & 0x2000000000000) != 0)
            {
              v35 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 688);
              if (!v35)
                v35 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a1 + 5)
                                                                                               + 8));
              v36 = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v35, a1);
              if ((v29 & 0x1000000) != 0 || (v36 & 1) != 0)
LABEL_39:
                WebCore::Document::removeTouchEventListener(v13, (uint64_t)a1, 0);
            }
            else if ((v29 & 0x1000000) != 0)
            {
              goto LABEL_39;
            }
            if ((v29 & 0x100000) != 0)
              WebCore::Document::removeTouchEventHandler(v13, (uint64_t)a1, 0);
            break;
          }
        }
        else if ((v29 & 0x1000000) == 0)
        {
          goto LABEL_24;
        }
        WebCore::Document::didRemoveTouchEventHandler((WebCore::Document *)v13, (uint64_t)a1, 0);
        goto LABEL_27;
      }
      v24 = ((_DWORD)v24 + 1) & v21;
      v25 = *(WTF::StringImpl **)(v19 + 16 * v24);
    }
    while (v25);
    if (v13)
    {
LABEL_43:
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        v37 = *(_WORD *)(v13 + 30);
        if ((v37 & 0x400) == 0)
        {
          v38 = *(_WORD *)(v13 + 28);
          if ((v38 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v13, (void *)v15);
          }
          else
          {
            if ((v38 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
              v37 = *(_WORD *)(v13 + 30);
            }
            *(_WORD *)(v13 + 30) = v37 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
          }
        }
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::Node::registeredMutationObservers(WebCore::MutationObserverOptionType,WebCore::QualifiedName const*)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;
  uint64_t *v6;
  WebCore::MutationObserver *v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;
  WebCore::MutationObserver *v11;
  uint64_t v12;
  char v13;
  char v14;

  result = WebCore::MutationObserverRegistration::shouldReceiveMutationFrom(a2, *(_QWORD *)a1, **(unsigned __int8 **)(a1 + 8), **(_QWORD **)(a1 + 16));
  if ((_DWORD)result)
  {
    v5 = *(_BYTE *)(a2 + 40) & 0x60;
    v14 = v5;
    v6 = *(uint64_t **)(a1 + 24);
    v7 = *(WebCore::MutationObserver **)(a2 + 8);
    ++*(_DWORD *)v7;
    v11 = v7;
    WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::add<WTF::OptionSet<WebCore::MutationObserverOptionType>&>((uint64_t)&v12, v6, (uint64_t *)&v11, &v14);
    result = (uint64_t)v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::MutationObserver::~MutationObserver(v11, v8);
        result = bmalloc::api::isoDeallocate(v9, v10);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
    if (!v13)
      *(_BYTE *)(v12 + 8) |= v5;
  }
  return result;
}

void WebCore::Node::registerMutationObserver(WebCore::Node *a1, _DWORD *a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::MutationObserver *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WebCore::MutationObserverRegistration *v21;
  WTF *v22;
  void *v23;
  _OWORD *v24;
  WTF *v25;
  bmalloc::api *v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::MutationObserverRegistration *v31[3];

  v9 = (uint64_t *)(WebCore::Node::ensureRareData(a1) + 8);
  v8 = *v9;
  if (!*v9)
  {
    v24 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
    *v24 = 0u;
    v24[1] = 0u;
    v25 = (WTF *)*v9;
    *v9 = (uint64_t)v24;
    if (v25)
    {
      std::default_delete<WebCore::NodeMutationObserverData>::operator()[abi:sn180100]((int)v9, v25);
      v8 = *v9;
    }
    else
    {
      v8 = (uint64_t)v24;
    }
  }
  v10 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v10)
  {
    v16 = 0;
    v28 = *(uint64_t **)v8;
    v29 = 8 * v10;
    do
    {
      v30 = *v28;
      if (*(_DWORD **)(*v28 + 8) == a2)
      {
        WebCore::MutationObserverRegistration::resetObservation(*v28, a3, a4);
        v16 = v30;
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
    if (v16)
      goto LABEL_9;
  }
  v11 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v11 = 0;
  ++*a2;
  *(_QWORD *)(v11 + 8) = a2;
  WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>((unsigned int **)(v11 + 16), (uint64_t)a1);
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 40) = a3;
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable(v11 + 48, a4);
  v12 = *(WebCore::MutationObserver **)(v11 + 8);
  ++*(_DWORD *)v12;
  WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MutationObserverRegistration>((uint64_t)v12 + 40, (uint64_t *)v11, (uint64_t)v31);
  if (*(_DWORD *)v12 == 1)
  {
    WebCore::MutationObserver::~MutationObserver(v12, v13);
    bmalloc::api::isoDeallocate(v26, v27);
  }
  else
  {
    --*(_DWORD *)v12;
  }
  v31[0] = (WebCore::MutationObserverRegistration *)v11;
  v14 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 8))
  {
    v17 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::HTMLFrameOwnerElement,WTF::RawPtrTraits<WebCore::HTMLFrameOwnerElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLFrameOwnerElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v14 + 1, (unint64_t)v31);
    v18 = *(unsigned int *)(v8 + 12);
    v19 = *(uint64_t **)v8;
    v20 = *v17;
    *v17 = 0;
    v19[v18] = v20;
    v21 = v31[0];
    v15 = v18 + 1;
    *(_DWORD *)(v8 + 12) = v15;
    v31[0] = 0;
    if (v21)
    {
      WebCore::MutationObserverRegistration::~MutationObserverRegistration(v21);
      WTF::fastFree(v22, v23);
      v15 = *(_DWORD *)(v8 + 12);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v14) = v11;
    v15 = v14 + 1;
    *(_DWORD *)(v8 + 12) = v15;
  }
  if (v15)
  {
    v16 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v15 - 8);
LABEL_9:
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 3364) |= *(_BYTE *)(v16 + 40) & 7;
    return;
  }
  __break(0xC471u);
}

uint64_t WebCore::Node::unregisterTransientMutationObserver(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  if ((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v2 = *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 8);
    if (v2)
      return WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MutationObserverRegistration>(v2 + 16, a2);
  }
  return result;
}

WebCore::Node *WebCore::Node::dispatchInputEvent(WebCore::Node *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Event *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  WebCore::Node *result;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v8 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E820A;
  v9 = *(_QWORD *)(v4 + 1008) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v8 | v9;
  v10 = *(_DWORD **)(v4 + 1008);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  result = WebCore::EventDispatcher::dispatchScopedEvent(this, (WebCore::Node *)v5, v6);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

void WebCore::Node::defaultEventHandler(WebCore::Node *this, WebCore::Node **a2)
{
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  WebCore::Node *v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::Node *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  WebCore::WheelEvent *v29;
  WebCore::Node *v30;
  WebCore::Node **v31;
  uint64_t v32;
  WebCore::Quirks *v33;
  char shouldDispatchSimulatedMouseEvents;
  WebCore *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  WebCore::Event *v44;
  uint64_t v45;
  _DWORD *v46;
  WebCore::Node **v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  WebCore::Document *v52;
  WebCore::Editor *v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  _QWORD *v65;
  WebCore::Node *v66;
  uint64_t v67;
  const WebCore::Node *v68;
  void *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  unsigned int v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  unsigned int *v90;
  uint64_t v91;
  WTF *v92;
  WebCore::Editor *v93;
  void *v94;
  WebCore::Editor *v95;
  uint64_t v96;
  void *v97;
  _QWORD *v98;
  _QWORD *v99;

  if (a2[6] != this)
    return;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(this);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  v8 = *(_QWORD *)(v7 + 2552);
  if (!v8
    || (v9 = *(_DWORD *)(v7 + 2560),
        v10 = v9 - 1,
        v11 = *(_DWORD *)(v7 + 2568),
        v12 = a2[3],
        v13 = *((_DWORD *)v12 + 4),
        v14 = (v11 ^ (v13 >> 8)) & (v9 - 1),
        (v15 = *(WebCore::Node **)(v8 + 16 * v14)) == 0))
  {
LABEL_15:
    LOWORD(v19) = 0;
    v20 = 0;
LABEL_46:
    if (!(*((unsigned int (**)(WebCore::Node **))*a2 + 15))(a2))
      return;
    if ((v19 & 4) != 0 && (*((_QWORD *)this + 2) & 0x2000000000000) != 0)
    {
      v33 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 688);
      if (!v33)
        v33 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
      shouldDispatchSimulatedMouseEvents = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v33, this);
      if ((v19 & 0x100) == 0 && (shouldDispatchSimulatedMouseEvents & 1) == 0)
        return;
    }
    else if ((v19 & 0x100) == 0)
    {
      return;
    }
    if ((*((_WORD *)this + 14) & 8) != 0)
      v66 = this;
    else
      v66 = 0;
    if (v20 != 264 || !v66)
      goto LABEL_114;
    v67 = WebCore::Document::contentChangeObserver(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
    if (WebCore::ContentChangeObserver::isVisuallyHidden(this, v68))
    {
      v70 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v66);
      if (v70)
      {
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 + 1, v70));
      }
      v72 = *(unsigned int **)(v67 + 128);
      *(_QWORD *)(v67 + 128) = v70;
      if (!v72)
        goto LABEL_114;
      do
      {
        v73 = __ldaxr(v72);
        v74 = --v73 == 0;
      }
      while (__stlxr(v73, v72));
    }
    else
    {
      v72 = *(unsigned int **)(v67 + 128);
      *(_QWORD *)(v67 + 128) = 0;
      if (!v72)
      {
LABEL_114:
        v76 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
        if (v76)
        {
          while ((*(_BYTE *)(v76 + 45) & 4) == 0
               || (WebCore::RenderBox::canBeScrolledAndHasScrollableArea((WebCore::RenderBox *)v76) & 1) == 0)
          {
            v77 = *(_QWORD *)(v76 + 32);
            if (v77)
            {
              v76 = *(_QWORD *)(v77 + 8);
              if (v76)
                continue;
            }
            return;
          }
          if ((*(_BYTE *)(v76 + 45) & 1) == 0)
          {
            if (*(_QWORD *)(*(_QWORD *)(v76 + 24) + 8))
            {
              v78 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
              if (v78)
              {
                v79 = *(_QWORD *)(v78 + 8);
                if (v79)
                {
                  v80 = (unsigned int *)(v79 + 8);
                  do
                    v81 = __ldaxr(v80);
                  while (__stlxr(v81 + 1, v80));
                  v82 = *(_QWORD *)(*(_QWORD *)(v76 + 24) + 8);
                  *(_DWORD *)(v82 + 24) += 2;
                  WebCore::EventHandler::defaultTouchEventHandler(*(WebCore::EventNames ***)(v79 + 640), (WebCore::Node *)v82, (WebCore::TouchEvent *)a2);
                  if (*(_DWORD *)(v82 + 24) == 2)
                  {
                    v88 = *(_WORD *)(v82 + 30);
                    if ((v88 & 0x400) == 0)
                    {
                      v89 = *(_WORD *)(v82 + 28);
                      if ((v89 & 0xF000) == 0x9000)
                      {
                        WebCore::Document::removedLastRef((WebCore::Document *)v82, v83);
                      }
                      else
                      {
                        if ((v89 & 0x20) != 0)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)(v82 + 160) + 16))(*(_QWORD *)(v82 + 160));
                          v88 = *(_WORD *)(v82 + 30);
                        }
                        *(_WORD *)(v82 + 30) = v88 | 0x400;
                        (*(void (**)(uint64_t))(*(_QWORD *)v82 + 72))(v82);
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v82 + 24) -= 2;
                  }
                  do
                  {
                    v84 = __ldaxr(v80);
                    v85 = v84 - 1;
                  }
                  while (__stlxr(v85, v80));
                  if (!v85)
                  {
                    atomic_store(1u, v80);
                    v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v65 = off_1E31FE290;
                    v65[1] = v80;
LABEL_95:
                    v98 = v65;
                    WTF::ensureOnMainThread();
                    if (v98)
                      (*(void (**)(_QWORD *))(*v98 + 8))(v98);
                  }
                }
              }
            }
          }
        }
        return;
      }
      do
      {
        v75 = __ldaxr(v72);
        v74 = --v75 == 0;
      }
      while (__stlxr(v75, v72));
    }
    if (v74)
    {
      atomic_store(1u, v72);
      v90 = v72;
      v91 = v72[7];
      if ((_DWORD)v91)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v90 + 2), (WTF::StringImpl *)(*((_QWORD *)v90 + 2) + 32 * v91));
      v92 = (WTF *)*((_QWORD *)v90 + 2);
      if (v92)
      {
        *((_QWORD *)v90 + 2) = 0;
        v90[6] = 0;
        WTF::fastFree(v92, v69);
      }
      WTF::fastFree((WTF *)v90, v69);
    }
    goto LABEL_114;
  }
  v16 = v13 >> 8;
  v17 = -1;
  while (1)
  {
    v18 = *((_DWORD *)v15 + 4);
    if (++v17 > (((_DWORD)v14 + v9 - ((v11 ^ (v18 >> 8)) & v10)) & v10))
      goto LABEL_15;
    if (v15 == v12 && v18 >> 8 == v16)
      break;
    v14 = ((_DWORD)v14 + 1) & v10;
    v15 = *(WebCore::Node **)(v8 + 16 * v14);
    if (!v15)
      goto LABEL_15;
  }
  v21 = *(_DWORD *)(v8 + 16 * v14 + 8);
  v20 = (unsigned __int16)v21;
  v19 = HIWORD(v21);
  if ((unsigned __int16)v21 > 0x9Eu)
  {
    if ((unsigned __int16)v21 != 159)
    {
      if ((unsigned __int16)v21 == 255)
      {
        if (!(*((unsigned int (**)(WebCore::Node **))*a2 + 13))(a2))
          return;
        ++*((_DWORD *)a2 + 4);
        v48 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
        if (!v48)
          goto LABEL_28;
        v49 = *(_QWORD *)(v48 + 8);
        if (!v49)
          goto LABEL_28;
        v50 = (unsigned int *)(v49 + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 + 1, v50));
        v52 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 640) + 8) + 8) + 296);
        v53 = (WebCore::Editor *)*((_QWORD *)v52 + 382);
        if (!v53)
        {
          v93 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v93, v52);
          v95 = (WebCore::Editor *)*((_QWORD *)v52 + 382);
          *((_QWORD *)v52 + 382) = v93;
          if (v95)
          {
            WebCore::Editor::~Editor(v95, v94);
            if (*(_DWORD *)v96)
            {
              *(_QWORD *)(v96 + 496) = 0;
              *(_OWORD *)(v96 + 464) = 0u;
              *(_OWORD *)(v96 + 480) = 0u;
              *(_OWORD *)(v96 + 432) = 0u;
              *(_OWORD *)(v96 + 448) = 0u;
              *(_OWORD *)(v96 + 400) = 0u;
              *(_OWORD *)(v96 + 416) = 0u;
              *(_OWORD *)(v96 + 368) = 0u;
              *(_OWORD *)(v96 + 384) = 0u;
              *(_OWORD *)(v96 + 336) = 0u;
              *(_OWORD *)(v96 + 352) = 0u;
              *(_OWORD *)(v96 + 304) = 0u;
              *(_OWORD *)(v96 + 320) = 0u;
              *(_OWORD *)(v96 + 272) = 0u;
              *(_OWORD *)(v96 + 288) = 0u;
              *(_OWORD *)(v96 + 240) = 0u;
              *(_OWORD *)(v96 + 256) = 0u;
              *(_OWORD *)(v96 + 208) = 0u;
              *(_OWORD *)(v96 + 224) = 0u;
              *(_OWORD *)(v96 + 176) = 0u;
              *(_OWORD *)(v96 + 192) = 0u;
              *(_OWORD *)(v96 + 144) = 0u;
              *(_OWORD *)(v96 + 160) = 0u;
              *(_OWORD *)(v96 + 112) = 0u;
              *(_OWORD *)(v96 + 128) = 0u;
              *(_OWORD *)(v96 + 80) = 0u;
              *(_OWORD *)(v96 + 96) = 0u;
              *(_OWORD *)(v96 + 48) = 0u;
              *(_OWORD *)(v96 + 64) = 0u;
              *(_OWORD *)(v96 + 16) = 0u;
              *(_OWORD *)(v96 + 32) = 0u;
              *(_OWORD *)v96 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v96, v97);
            }
          }
          v53 = (WebCore::Editor *)*((_QWORD *)v52 + 382);
        }
        if (WebCore::Editor::handleTextEvent(v53, (WebCore::TextEvent *)a2))
          *((_DWORD *)a2 + 5) |= 0x80u;
        do
        {
          v54 = __ldaxr(v50);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v50));
        if (v55)
          goto LABEL_28;
        atomic_store(1u, v50);
        v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v56 = off_1E31FE290;
        v56[1] = v50;
        goto LABEL_139;
      }
      if ((unsigned __int16)v21 != 315)
        goto LABEL_46;
    }
    v28 = (*((uint64_t (**)(WebCore::Node **))*a2 + 18))(a2);
    if (v28)
      v29 = (WebCore::WheelEvent *)a2;
    else
      v29 = 0;
    if (this && v28)
    {
      v30 = this;
      while ((*((_QWORD *)v30 + 8) & 0xFFFFFFFFFFFFLL) == 0)
      {
        if ((*((_WORD *)v30 + 14) & 0x80) != 0)
        {
          v32 = *((_QWORD *)v30 + 25);
          if (!v32)
            return;
          v31 = (WebCore::Node **)(v32 + 8);
        }
        else
        {
          v31 = (WebCore::Node **)((char *)v30 + 32);
        }
        v30 = *v31;
        if (!*v31)
          return;
      }
      v57 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
      if (v57)
      {
        v58 = *(_QWORD *)(v57 + 8);
        if (v58)
        {
          v59 = (unsigned int *)(v58 + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 + 1, v59));
          v61 = *(_QWORD *)(v58 + 640);
          *((_DWORD *)v30 + 6) += 2;
          WebCore::EventHandler::defaultWheelEventHandler(v61, v30, v29);
          if (*((_DWORD *)v30 + 6) == 2)
          {
            v86 = *((_WORD *)v30 + 15);
            if ((v86 & 0x400) == 0)
            {
              v87 = *((_WORD *)v30 + 14);
              if ((v87 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef(v30, v62);
              }
              else
              {
                if ((v87 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v30 + 20) + 16))(*((_QWORD *)v30 + 20));
                  v86 = *((_WORD *)v30 + 15);
                }
                *((_WORD *)v30 + 15) = v86 | 0x400;
                (*(void (**)(WebCore::Node *))(*(_QWORD *)v30 + 72))(v30);
              }
            }
          }
          else
          {
            *((_DWORD *)v30 + 6) -= 2;
          }
          do
          {
            v63 = __ldaxr(v59);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v59));
          if (!v64)
          {
            atomic_store(1u, v59);
            v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v65 = off_1E31FE290;
            v65[1] = v59;
            goto LABEL_95;
          }
        }
      }
    }
  }
  else
  {
    if ((unsigned __int16)v21 - 132 < 2)
    {
LABEL_20:
      if (!(*((unsigned int (**)(WebCore::Node **))*a2 + 10))(a2))
        return;
      ++*((_DWORD *)a2 + 4);
      v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
      if (!v22)
        goto LABEL_28;
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
        goto LABEL_28;
      v24 = (unsigned int *)(v23 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      WebCore::EventHandler::defaultKeyboardEventHandler(*(WebCore::EventHandler **)(v23 + 640), (WebCore::KeyboardEvent *)a2);
      do
      {
        v26 = __ldaxr(v24);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v24));
      if (v27)
        goto LABEL_28;
      atomic_store(1u, v24);
      v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v56 = off_1E31FE290;
      v56[1] = v24;
LABEL_139:
      v99 = v56;
      WTF::ensureOnMainThread();
      if (v99)
        (*(void (**)(_QWORD *))(*v99 + 8))(v99);
LABEL_28:
      if (*((_DWORD *)a2 + 4) == 1)
        (*((void (**)(WebCore::Node **))*a2 + 1))(a2);
      else
        --*((_DWORD *)a2 + 4);
      return;
    }
    if ((unsigned __int16)v21 != 51)
    {
      if ((unsigned __int16)v21 != 135)
        goto LABEL_46;
      goto LABEL_20;
    }
    v35 = (WebCore *)(*((uint64_t (**)(WebCore::Node **))*a2 + 16))(a2);
    if ((_DWORD)v35)
      v36 = *((_DWORD *)a2 + 20);
    else
      v36 = 0;
    v37 = *(_QWORD *)(StatusReg + 736);
    if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
      v38 = WebCore::threadGlobalDataSlow(v35);
    v39 = *(_QWORD **)(v38 + 40);
    if (!v39)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v38);
      v39 = *(_QWORD **)(v38 + 40);
    }
    v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v40 && (v41 = *(_QWORD *)(v40 + 8)) != 0)
    {
      v42 = *(_DWORD **)(v41 + 112);
      if (v42)
        ++*v42;
    }
    else
    {
      v42 = 0;
    }
    v43 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v43);
    *(_QWORD *)(v43 + 8) = 0;
    *(_DWORD *)(v43 + 16) = 1;
    *(_DWORD *)(v43 + 20) = *(_DWORD *)(v43 + 20) & 0xFFC00000 | 0x2F820E | (*v39 != 0);
    v46 = (_DWORD *)*v39;
    if (*v39)
      *v46 += 2;
    *(_QWORD *)(v43 + 24) = v46;
    *(_QWORD *)(v43 + 32) = 0;
    *(_QWORD *)(v43 + 40) = 0;
    *(_QWORD *)(v43 + 48) = 0;
    *(_QWORD *)(v43 + 56) = v45;
    *(_QWORD *)v43 = off_1E33A8B00;
    *(_QWORD *)(v43 + 64) = 0;
    *(_QWORD *)(v43 + 72) = v42;
    v47 = a2;
    *(_DWORD *)(v43 + 80) = v36;
    while (v47 != (WebCore::Node **)v43)
    {
      v47 = (WebCore::Node **)v47[8];
      if (!v47)
      {
        ++*((_DWORD *)a2 + 4);
        *(_QWORD *)(v43 + 64) = a2;
        break;
      }
    }
    WebCore::EventDispatcher::dispatchScopedEvent(this, (WebCore::Node *)v43, v44);
    if ((*(_BYTE *)(v43 + 20) & 0x80) != 0)
      *((_DWORD *)a2 + 5) |= 0x80u;
    if (*(_DWORD *)(v43 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    else
      --*(_DWORD *)(v43 + 16);
  }
}

WebCore::EventNames **WebCore::Node::willRespondToMouseMoveEvents(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) == 0)
    return 0;
  v7 = v5 & 0xFFFFFFFFFFFFLL;
  v8 = *(unsigned int *)((v5 & 0xFFFFFFFFFFFFLL) + 0x1C);
  if (!(_DWORD)v8)
    return 0;
  if (!(v8 >> 29))
  {
    v9 = WTF::fastMalloc((WTF *)(8 * v8));
    v11 = (WTF *)v9;
    v12 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD ***)(v7 + 16);
      v14 = *(unsigned int *)(v7 + 28);
      v15 = (_QWORD *)v9;
      do
      {
        v16 = *v13;
        if (*v13)
          *v16 += 2;
        *v15++ = v16;
        v13 += 4;
        --v14;
      }
      while (v14);
      v17 = *(_QWORD *)(v4 + 2552);
      if (v17)
      {
        v18 = 0;
        v19 = *(_DWORD *)(v4 + 2560);
        v20 = v19 - 1;
        v21 = *(_DWORD *)(v4 + 2568);
        do
        {
          v22 = *((_QWORD *)v11 + v18);
          v23 = *(_DWORD *)(v22 + 16);
          v24 = (v21 ^ (v23 >> 8)) & v20;
          v25 = *(_QWORD *)(v17 + 16 * v24);
          if (v25)
          {
            v26 = v23 >> 8;
            v27 = -1;
            do
            {
              v10 = (WTF::StringImpl *)*(unsigned int *)(v25 + 16);
              if (++v27 > (((_DWORD)v24 + v19 - ((v21 ^ (v10 >> 8)) & v20)) & v20))
                break;
              if (v25 == v22 && v10 >> 8 == v26)
              {
                if ((*(_BYTE *)(v17 + 16 * v24 + 10) & 0x40) == 0)
                  break;
                v6 = 1;
                goto LABEL_31;
              }
              v24 = ((_DWORD)v24 + 1) & v20;
              v25 = *(_QWORD *)(v17 + 16 * v24);
            }
            while (v25);
          }
          ++v18;
        }
        while (v18 != v12);
      }
      v6 = 0;
LABEL_31:
      v28 = 8 * v12;
      v29 = (WTF::StringImpl **)v11;
      do
      {
        v30 = *v29;
        *v29 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v10);
          else
            *(_DWORD *)v30 -= 2;
        }
        ++v29;
        v28 -= 8;
      }
      while (v28);
    }
    else
    {
      v6 = 0;
    }
    WTF::fastFree(v11, v10);
    return (WebCore::EventNames **)v6;
  }
  __break(0xC471u);
  return this;
}

WebCore::EventNames **WebCore::Node::willRespondToTouchEvents(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) == 0)
    return 0;
  v7 = v5 & 0xFFFFFFFFFFFFLL;
  v8 = *(unsigned int *)((v5 & 0xFFFFFFFFFFFFLL) + 0x1C);
  if (!(_DWORD)v8)
    return 0;
  if (!(v8 >> 29))
  {
    v9 = WTF::fastMalloc((WTF *)(8 * v8));
    v11 = (WTF *)v9;
    v12 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD ***)(v7 + 16);
      v14 = *(unsigned int *)(v7 + 28);
      v15 = (_QWORD *)v9;
      do
      {
        v16 = *v13;
        if (*v13)
          *v16 += 2;
        *v15++ = v16;
        v13 += 4;
        --v14;
      }
      while (v14);
      v17 = *(_QWORD *)(v4 + 2552);
      if (v17)
      {
        v18 = 0;
        v19 = *(_DWORD *)(v4 + 2560);
        v20 = v19 - 1;
        v21 = *(_DWORD *)(v4 + 2568);
        do
        {
          v22 = *((_QWORD *)v11 + v18);
          v23 = *(_DWORD *)(v22 + 16);
          v24 = (v21 ^ (v23 >> 8)) & v20;
          v25 = *(_QWORD *)(v17 + 16 * v24);
          if (v25)
          {
            v26 = v23 >> 8;
            v27 = -1;
            do
            {
              v10 = (WTF::StringImpl *)*(unsigned int *)(v25 + 16);
              if (++v27 > (((_DWORD)v24 + v19 - ((v21 ^ (v10 >> 8)) & v20)) & v20))
                break;
              if (v25 == v22 && v10 >> 8 == v26)
              {
                if ((*(_BYTE *)(v17 + 16 * v24 + 11) & 1) == 0)
                  break;
                v6 = 1;
                goto LABEL_31;
              }
              v24 = ((_DWORD)v24 + 1) & v20;
              v25 = *(_QWORD *)(v17 + 16 * v24);
            }
            while (v25);
          }
          ++v18;
        }
        while (v18 != v12);
      }
      v6 = 0;
LABEL_31:
      v28 = 8 * v12;
      v29 = (WTF::StringImpl **)v11;
      do
      {
        v30 = *v29;
        *v29 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v10);
          else
            *(_DWORD *)v30 -= 2;
        }
        ++v29;
        v28 -= 8;
      }
      while (v28);
    }
    else
    {
      v6 = 0;
    }
    WTF::fastFree(v11, v10);
    return (WebCore::EventNames **)v6;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::Node::willRespondToMouseClickEventsWithEditability(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;

  if (a2)
    return 1;
  v3 = result;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
  {
    result = WebCore::threadGlobalDataSlow((WebCore *)result);
    v5 = result;
  }
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = *(_QWORD *)(v3 + 16);
  if ((v7 & 0x1000000000000) == 0)
    return 0;
  v8 = v7 & 0xFFFFFFFFFFFFLL;
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFLL) + 0x1C);
  if (!(_DWORD)v9)
    return 0;
  if (!(v9 >> 29))
  {
    v10 = WTF::fastMalloc((WTF *)(8 * v9));
    v12 = (WTF *)v10;
    v13 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v13)
    {
      v14 = *(_DWORD ***)(v8 + 16);
      v15 = *(unsigned int *)(v8 + 28);
      v16 = (_QWORD *)v10;
      do
      {
        v17 = *v14;
        if (*v14)
          *v17 += 2;
        *v16++ = v17;
        v14 += 4;
        --v15;
      }
      while (v15);
      v18 = *(_QWORD *)(v6 + 2552);
      if (v18)
      {
        v19 = 0;
        v20 = *(_DWORD *)(v6 + 2560);
        v21 = v20 - 1;
        v22 = *(_DWORD *)(v6 + 2568);
        do
        {
          v23 = *((_QWORD *)v12 + v19);
          v24 = *(_DWORD *)(v23 + 16);
          v25 = (v22 ^ (v24 >> 8)) & v21;
          v26 = *(_QWORD *)(v18 + 16 * v25);
          if (v26)
          {
            v27 = v24 >> 8;
            v28 = -1;
            do
            {
              v11 = (WTF::StringImpl *)*(unsigned int *)(v26 + 16);
              if (++v28 > (((_DWORD)v25 + v20 - ((v22 ^ (v11 >> 8)) & v21)) & v21))
                break;
              if (v26 == v23 && v11 >> 8 == v27)
              {
                if ((*(_BYTE *)(v18 + 16 * v25 + 10) & 0x20) == 0)
                  break;
                v2 = 1;
                goto LABEL_33;
              }
              v25 = ((_DWORD)v25 + 1) & v21;
              v26 = *(_QWORD *)(v18 + 16 * v25);
            }
            while (v26);
          }
          ++v19;
        }
        while (v19 != v13);
      }
      v2 = 0;
LABEL_33:
      v29 = 8 * v13;
      v30 = (WTF::StringImpl **)v12;
      do
      {
        v31 = *v30;
        *v30 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v11);
          else
            *(_DWORD *)v31 -= 2;
        }
        ++v30;
        v29 -= 8;
      }
      while (v29);
    }
    else
    {
      v2 = 0;
    }
    WTF::fastFree(v12, v11);
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Node::incrementConnectedSubframeCount(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(this + 72);
  v3 = (HIWORD(v2) + (_WORD)a2) & 0x3FF;
  if ((HIWORD(v2) & 0x3FF) + a2 == v3)
  {
    *(_QWORD *)(this + 72) = v2 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v3 | HIWORD(v2) & 0xFC00) << 48);
  }
  else
  {
    this = 2895;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::Node::updateAncestorConnectedSubframeCountForRemoval(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(this + 72);
  v2 = HIWORD(v1) & 0x3FF;
  if ((_DWORD)v2)
  {
    if ((*(_WORD *)(this + 28) & 0x80) != 0)
    {
      v9 = *(_QWORD *)(this + 200);
      if (!v9)
        return this;
      v3 = (uint64_t *)(v9 + 8);
    }
    else
    {
      v3 = (uint64_t *)(this + 32);
    }
    v4 = *v3;
    if (v4)
    {
      v5 = HIWORD(v1);
      do
      {
        v6 = *(_QWORD *)(v4 + 72);
        if ((HIWORD(v6) & 0x3FFu) < v2)
        {
          __break(0xC471u);
          JUMPOUT(0x195A1717CLL);
        }
        *(_QWORD *)(v4 + 72) = v6 & 0xFFFFFFFFFFFFLL | ((unint64_t)(HIWORD(v6) & 0xFC00 | (HIWORD(v6) - (_WORD)v5) & 0x3FFu) << 48);
        if ((*(_WORD *)(v4 + 28) & 0x80) != 0)
        {
          v8 = *(_QWORD *)(v4 + 200);
          if (!v8)
            return this;
          v7 = (uint64_t *)(v8 + 8);
        }
        else
        {
          v7 = (uint64_t *)(v4 + 32);
        }
        v4 = *v7;
      }
      while (v4);
    }
  }
  return this;
}

BOOL WebCore::Node::effectiveTextDirection(WebCore::Node *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this + 9);
  if ((v1 & 0x4000000000000000) != 0)
    return v1 >> 63;
  else
    return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3360) != 0;
}

WebCore::Node *WebCore::Node::traverseToOpaqueRoot(WebCore::Node *this)
{
  WebCore::Node *result;
  WebCore::Node **v3;
  uint64_t v4;

  while (1)
  {
    result = this;
    if (this)
    {
      if ((*((_WORD *)this + 14) & 0x80) != 0)
        break;
    }
    v3 = (WebCore::Node **)((char *)this + 32);
LABEL_4:
    this = *v3;
    if (!this)
      return result;
  }
  v4 = *((_QWORD *)this + 25);
  if (v4)
  {
    v3 = (WebCore::Node **)(v4 + 8);
    goto LABEL_4;
  }
  return result;
}

double WebCore::Node::notifyInspectorOfRendererChange(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::MonotonicTime *v12;
  double v13;
  double result;
  _BYTE v15[24];

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v2 = *(_QWORD *)(v1 + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          goto LABEL_11;
      }
    }
  }
  v6 = *(_QWORD *)(v1 + 2632);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 528);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 24);
          if (v10)
          {
            v5 = *(_QWORD *)(v10 + 8);
            if (v5)
            {
LABEL_11:
              v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 8) + 112);
              if (v11)
              {
                v12 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v11 + 152, (uint64_t)this, (uint64_t)v15);
                if ((*(_QWORD *)(v11 + 200) & 0xFFFFFFFFFFFFLL) == 0
                  || (result = *(double *)((*(_QWORD *)(v11 + 200) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
                {
                  *(_QWORD *)(v11 + 192) = 0;
                  WTF::MonotonicTime::now(v12);
                  WebCore::TimerBase::setNextFireTime(v11 + 168, v13 + 0.0);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::parent<(WebCore::TreeType)1>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if ((*(_WORD *)(a1 + 28) & 0x80) == 0)
  {
    v1 = a1 + 32;
    return *(_QWORD *)v1;
  }
  v3 = *(_QWORD *)(a1 + 200);
  if (v3)
  {
    v1 = v3 + 8;
    return *(_QWORD *)v1;
  }
  return 0;
}

uint64_t WebCore::treeOrderForTesting(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v20;
  BOOL v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 == 2)
  {
    if (a2 == a3)
      return 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(a2, a3, &v27);
    if (v27)
    {
      v16 = v28;
      if (!v28)
        return 255;
      if (v29)
      {
        v17 = *(unsigned __int16 *)(v28 + 28);
        v18 = *(unsigned __int16 *)(v29 + 28);
        if (((v17 | v18) & 0x80) != 0)
          goto LABEL_40;
        if (v28 == v29)
          return 255;
        do
          v16 = *(_QWORD *)(v16 + 56);
        while (v16 != v29 && v16 != 0);
LABEL_64:
        if (v16)
          return 255;
      }
      return 1;
    }
    return 129;
  }
  if (a1 == 1)
  {
    if (a2 == a3)
      return 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)1>(&v27, a2, a3);
    if (v27)
    {
      v16 = v28;
      if (!v28)
        return 255;
      if (v29)
      {
        v17 = *(unsigned __int16 *)(v28 + 28);
        v18 = *(unsigned __int16 *)(v29 + 28);
        if (((v17 | v18) & 0x80) != 0)
          goto LABEL_40;
        if (v28 == v29)
          return 255;
        do
          v16 = *(_QWORD *)(v16 + 56);
        while (v16 != v29 && v16 != 0);
        goto LABEL_64;
      }
      return 1;
    }
    return 129;
  }
  if (a1)
    return 129;
  if (a2 == a3)
    return 0;
  v3 = 0;
  v4 = a2;
  do
  {
    v4 = *(_QWORD *)(v4 + 32);
    ++v3;
  }
  while (v4);
  v5 = 0;
  v6 = v3 - 1;
  v7 = a3;
  do
  {
    v7 = *(_QWORD *)(v7 + 32);
    ++v5;
  }
  while (v7);
  v8 = v5 - 1;
  v9 = v5 - v3;
  v10 = v3 - v5;
  if (v6 >= v8)
    v11 = a2;
  else
    v11 = a3;
  if (v6 >= v8)
    v12 = a3;
  else
    v12 = a2;
  if (v6 >= v8)
    v9 = v10;
  if (v9)
  {
    v26 = v11;
    do
    {
      v11 = *(_QWORD *)(v26 + 32);
      v13 = v26;
      v26 = v11;
      --v9;
    }
    while (v9);
  }
  else
  {
    v13 = 0;
  }
  if (v11 == v12)
  {
    v15 = 0;
  }
  else
  {
    v14 = v12;
    v12 = v11;
    do
    {
      v13 = v12;
      v15 = v14;
      v12 = *(_QWORD *)(v12 + 32);
      v14 = *(_QWORD *)(v14 + 32);
    }
    while (v12 != v14);
  }
  v22 = v6 >= v8;
  if (v6 < v8)
    v16 = v15;
  else
    v16 = v13;
  if (v22)
    v23 = v15;
  else
    v23 = v13;
  if (!v12)
    return 129;
  if (!v16)
    return 255;
  if (!v23)
    return 1;
  v17 = *(unsigned __int16 *)(v16 + 28);
  v18 = *(unsigned __int16 *)(v23 + 28);
  if (((v17 | v18) & 0x80) == 0)
  {
    if (v16 != v23)
    {
      do
        v16 = *(_QWORD *)(v16 + 56);
      while (v16 != v23 && v16 != 0);
      goto LABEL_64;
    }
    return 255;
  }
LABEL_40:
  if ((v17 & 0x80) != 0)
    v20 = -127;
  else
    v20 = 1;
  if ((v18 & 0x80) != 0)
    return v20;
  else
    return 0xFFFFFFFFLL;
}

void *WebCore::NodeIterator::bisoHeap(WebCore::NodeIterator *this)
{
  return &WebCore::NodeIterator::bisoHeap(void)::heap;
}

uint64_t WebCore::NodeIterator::operator new(uint64_t this)
{
  if (this == 80)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

unsigned int *WebCore::NodeIterator::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *result;
  void *v13;
  __int16 v14;
  __int16 v15;
  _BYTE v16[24];

  v8 = bmalloc::api::isoAllocate();
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  v9 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 24) = a1;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 32) = v10;
  *(_DWORD *)(v8 + 40) = a2;
  *(_BYTE *)(v8 + 44) = 0;
  *(_DWORD *)(a1 + 24) = v9 + 4;
  *(_QWORD *)(v8 + 48) = a1;
  *(_BYTE *)(v8 + 56) = 1;
  *(_QWORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 72) = 1;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 40) + 8);
  *(_DWORD *)(v11 + 24) += 2;
  result = WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(v11 + 1304, (_QWORD *)v8, (uint64_t)v16);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    v14 = *(_WORD *)(v11 + 30);
    if ((v14 & 0x400) == 0)
    {
      v15 = *(_WORD *)(v11 + 28);
      if ((v15 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef((WebCore::Document *)v11, v13);
      }
      else
      {
        if ((v15 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
          v14 = *(_WORD *)(v11 + 30);
        }
        *(_WORD *)(v11 + 30) = v14 | 0x400;
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
      }
    }
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  *a4 = v8;
  return result;
}

void WebCore::NodeIterator::~NodeIterator(WebCore::NodeIterator *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;

  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8) + 1304, this);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v11 = *(_WORD *)(v3 + 30);
      if ((v11 & 0x400) == 0)
      {
        v12 = *(_WORD *)(v3 + 28);
        if ((v12 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3);
        }
        else
        {
          if ((v12 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v11 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v11 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v13 = *(_WORD *)(v4 + 30);
      if ((v13 & 0x400) == 0)
      {
        v14 = *(_WORD *)(v4 + 28);
        if ((v14 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4);
        }
        else
        {
          if ((v14 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v13 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v13 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v15 = *(_WORD *)(v6 + 30);
      if ((v15 & 0x400) == 0)
      {
        v16 = *(_WORD *)(v6 + 28);
        if ((v16 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v6);
        }
        else
        {
          if ((v16 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v15 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v15 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

void WebCore::NodeIterator::nextNode(WebCore::NodeIterator *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t (*v16)();
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  WebCore::NodeIterator *v45;
  unsigned __int16 v46;
  uint64_t v47;
  unsigned int v48;
  char v49;

  v5 = *((_QWORD *)this + 6);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v5;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v39 = *(_WORD *)(v6 + 30);
      if ((v39 & 0x400) == 0)
      {
        v40 = *(_WORD *)(v6 + 28);
        if ((v40 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v6, a2);
        }
        else
        {
          if ((v40 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v39 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v39 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = 0;
  v8 = *((_QWORD *)this + 3);
  *((_BYTE *)this + 72) = *((_BYTE *)this + 56);
  *(_DWORD *)(v8 + 24) += 2;
  do
  {
    v9 = *((_QWORD *)this + 8);
    if (!v9)
    {
      *((_QWORD *)this + 8) = 0;
      goto LABEL_111;
    }
    v10 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v10 + 2;
    if (!*((_BYTE *)this + 72))
    {
      v11 = *(_WORD *)(v9 + 28);
      if ((v11 & 4) == 0 || (v12 = *(_QWORD *)(v9 + 80)) == 0)
      {
        if (v9 == v8)
        {
LABEL_14:
          v12 = 0;
          goto LABEL_23;
        }
        v12 = *(_QWORD *)(v9 + 56);
        if (!v12)
        {
          v13 = v9;
          do
          {
            v13 = *(_QWORD *)(v13 + 32);
            if (!v13 || v13 == v8)
              goto LABEL_14;
            v12 = *(_QWORD *)(v13 + 56);
          }
          while (!v12);
        }
      }
      *(_DWORD *)(v12 + 24) += 2;
      v10 = *(_DWORD *)(v9 + 24) - 2;
LABEL_23:
      *((_QWORD *)this + 8) = v12;
      if (v10)
      {
        *(_DWORD *)(v9 + 24) = v10;
      }
      else
      {
        v31 = *(_WORD *)(v9 + 30);
        if ((v31 & 0x400) == 0)
        {
          if ((v11 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
          }
          else
          {
            if ((v11 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
              v31 = *(_WORD *)(v9 + 30);
            }
            *(_WORD *)(v9 + 30) = v31 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          }
        }
      }
      v15 = *((_QWORD *)this + 8);
      if (v15)
        v16 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v16 = 0;
      v17 = v16 != 0;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        v28 = *(_WORD *)(v9 + 30);
        if ((v28 & 0x400) == 0)
        {
LABEL_82:
          v32 = *(_WORD *)(v9 + 28);
          if ((v32 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
          }
          else
          {
            if ((v32 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
              v28 = *(_WORD *)(v9 + 30);
            }
            *(_WORD *)(v9 + 30) = v28 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          }
          v15 = *((_QWORD *)this + 8);
          if (!v17)
            goto LABEL_108;
LABEL_31:
          v9 = v15;
          if (!v15)
            goto LABEL_33;
          goto LABEL_32;
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (!v16)
        goto LABEL_108;
      goto LABEL_31;
    }
    *((_BYTE *)this + 72) = 0;
    if (!v10)
    {
      v28 = *(_WORD *)(v9 + 30);
      if ((v28 & 0x400) != 0)
      {
        v15 = *((_QWORD *)this + 8);
        goto LABEL_31;
      }
      v17 = 1;
      goto LABEL_82;
    }
    *(_DWORD *)(v9 + 24) = v10;
LABEL_32:
    *(_DWORD *)(v9 + 24) += 2;
LABEL_33:
    if (!*((_QWORD *)this + 4))
    {
      if (((*((_DWORD *)this + 10) >> ((*(unsigned __int16 *)(v9 + 28) >> 12) - 1)) & 1) != 0)
        v22 = 1;
      else
        v22 = 3;
      v46 = v22;
      v48 = 0;
LABEL_45:
      if (v22 != 1)
      {
        v20 = 0;
        v25 = 0;
        v21 = v9;
LABEL_58:
        ((void (*)(char *, unsigned __int16 *))off_1E33A6530[v25])(&v49, &v46);
        goto LABEL_59;
      }
      v23 = *((_QWORD *)this + 8);
      if (v23)
        *(_DWORD *)(v23 + 24) += 2;
      v24 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v23;
      if (v24)
      {
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          v33 = *(_WORD *)(v24 + 30);
          if ((v33 & 0x400) == 0)
          {
            v34 = *(_WORD *)(v24 + 28);
            if ((v34 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v24, a2);
            }
            else
            {
              if ((v34 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 160) + 16))(*(_QWORD *)(v24 + 160));
                v33 = *(_WORD *)(v24 + 30);
              }
              *(_WORD *)(v24 + 30) = v33 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
            }
          }
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
      }
      *((_BYTE *)this + 56) = *((_BYTE *)this + 72);
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) != 2)
        {
          v21 = 0;
          *(_DWORD *)(v7 + 24) -= 2;
LABEL_54:
          v20 = 3;
          goto LABEL_55;
        }
        v35 = *(_WORD *)(v7 + 30);
        if ((v35 & 0x400) == 0)
        {
          v36 = *(_WORD *)(v7 + 28);
          if ((v36 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
          }
          else
          {
            if ((v36 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v35 = *(_WORD *)(v7 + 30);
            }
            *(_WORD *)(v7 + 30) = v35 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      v21 = 0;
      goto LABEL_54;
    }
    WebCore::NodeIteratorBase::acceptNodeSlowCase((WebCore::NodeIterator *)((char *)this + 24), (WebCore::Node *)v9, (uint64_t)&v46);
    if (!v48)
    {
      v22 = v46;
      goto LABEL_45;
    }
    v18 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v18)
    {
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        v29 = *(_WORD *)(v18 + 30);
        if ((v29 & 0x400) == 0)
        {
          v30 = *(_WORD *)(v18 + 28);
          if ((v30 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v18, a2);
          }
          else
          {
            if ((v30 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 160) + 16))(*(_QWORD *)(v18 + 160));
              v29 = *(_WORD *)(v18 + 30);
            }
            *(_WORD *)(v18 + 30) = v29 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
          }
        }
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
    }
    if (v48 != 1)
    {
      v45 = (WebCore::NodeIterator *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::NodeIterator::previousNode(v45);
      return;
    }
    v19 = v47;
    v47 = 0;
    *(_BYTE *)a3 = v46;
    *(_QWORD *)(a3 + 8) = v19;
    v20 = 1;
    *(_DWORD *)(a3 + 16) = 1;
    v21 = v9;
    v9 = v7;
LABEL_55:
    v25 = v48;
    v7 = v9;
    if (v48 != -1)
      goto LABEL_58;
LABEL_59:
    if (v21)
    {
      if (*(_DWORD *)(v21 + 24) == 2)
      {
        v26 = *(_WORD *)(v21 + 30);
        if ((v26 & 0x400) == 0)
        {
          v27 = *(_WORD *)(v21 + 28);
          if ((v27 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v21, a2);
          }
          else
          {
            if ((v27 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
              v26 = *(_WORD *)(v21 + 30);
            }
            *(_WORD *)(v21 + 30) = v26 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
          }
        }
      }
      else
      {
        *(_DWORD *)(v21 + 24) -= 2;
      }
    }
  }
  while (!v20);
  if (v20 != 3)
    goto LABEL_112;
  v15 = *((_QWORD *)this + 8);
LABEL_108:
  *((_QWORD *)this + 8) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      v43 = *(_WORD *)(v15 + 30);
      if ((v43 & 0x400) == 0)
      {
        v44 = *(_WORD *)(v15 + 28);
        if ((v44 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v15, a2);
        }
        else
        {
          if ((v44 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
            v43 = *(_WORD *)(v15 + 30);
          }
          *(_WORD *)(v15 + 30) = v43 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
        }
      }
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
LABEL_111:
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
  v7 = 0;
LABEL_112:
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    v37 = *(_WORD *)(v8 + 30);
    if ((v37 & 0x400) == 0)
    {
      v38 = *(_WORD *)(v8 + 28);
      if ((v38 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
      }
      else
      {
        if ((v38 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
          v37 = *(_WORD *)(v8 + 30);
        }
        *(_WORD *)(v8 + 30) = v37 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
      }
    }
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v41 = *(_WORD *)(v7 + 30);
      if ((v41 & 0x400) == 0)
      {
        v42 = *(_WORD *)(v7 + 28);
        if ((v42 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
        }
        else
        {
          if ((v42 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v41 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v41 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

void WebCore::NodeIterator::previousNode(WebCore::NodeIterator *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)();
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  WebCore::NodeIterator *v46;
  WebCore::Node *v47;
  unsigned __int16 v48;
  uint64_t v49;
  unsigned int v50;
  char v51;

  v5 = *((_QWORD *)this + 6);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v5;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v40 = *(_WORD *)(v6 + 30);
      if ((v40 & 0x400) == 0)
      {
        v41 = *(_WORD *)(v6 + 28);
        if ((v41 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v6, a2);
        }
        else
        {
          if ((v41 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v40 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v40 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = 0;
  v8 = *((_QWORD *)this + 3);
  *((_BYTE *)this + 72) = *((_BYTE *)this + 56);
  *(_DWORD *)(v8 + 24) += 2;
  do
  {
    v9 = *((_QWORD *)this + 8);
    if (!v9)
    {
      *((_QWORD *)this + 8) = 0;
      goto LABEL_116;
    }
    v10 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v10 + 2;
    if (!*((_BYTE *)this + 72))
    {
      *((_BYTE *)this + 72) = 1;
      if (v10)
      {
        *(_DWORD *)(v9 + 24) = v10;
LABEL_21:
        v14 = *((_QWORD *)this + 8);
        goto LABEL_27;
      }
      v26 = *(_WORD *)(v9 + 30);
      if ((v26 & 0x400) != 0)
        goto LABEL_21;
      v13 = 1;
LABEL_83:
      v31 = *(_WORD *)(v9 + 28);
      if ((v31 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
      }
      else
      {
        if ((v31 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
          v26 = *(_WORD *)(v9 + 30);
        }
        *(_WORD *)(v9 + 30) = v26 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      }
      goto LABEL_26;
    }
    if (v9 != v8)
    {
      v11 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFLL;
      if (v11)
      {
        if ((*(_WORD *)((*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          do
          {
            v23 = *(_QWORD *)(v11 + 88);
            if (!v23)
              break;
            v11 = *(_QWORD *)(v11 + 88);
          }
          while ((*(_WORD *)(v23 + 28) & 4) != 0);
        }
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 32);
        if (!v11)
        {
LABEL_13:
          *((_QWORD *)this + 8) = v11;
          if (v10)
          {
            *(_DWORD *)(v9 + 24) = v10;
          }
          else
          {
            v27 = *(_WORD *)(v9 + 30);
            if ((v27 & 0x400) == 0)
            {
              v28 = *(_WORD *)(v9 + 28);
              if ((v28 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
              }
              else
              {
                if ((v28 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
                  v27 = *(_WORD *)(v9 + 30);
                }
                *(_WORD *)(v9 + 30) = v27 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
              }
            }
          }
          if (*((_QWORD *)this + 8))
            v12 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v12 = 0;
          v13 = v12 != 0;
          goto LABEL_24;
        }
      }
      *(_DWORD *)(v11 + 24) += 2;
      v10 = *(_DWORD *)(v9 + 24) - 2;
      goto LABEL_13;
    }
    *((_QWORD *)this + 8) = 0;
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      v36 = *(_WORD *)(v8 + 30);
      if ((v36 & 0x400) == 0)
      {
        v37 = *(_WORD *)(v8 + 28);
        if ((v37 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
        }
        else
        {
          if ((v37 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v36 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v36 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
      v13 = 0;
    }
    else
    {
      v13 = 0;
      *(_DWORD *)(v8 + 24) -= 2;
    }
LABEL_24:
    if (*(_DWORD *)(v9 + 24) != 2)
    {
      *(_DWORD *)(v9 + 24) -= 2;
      goto LABEL_26;
    }
    v26 = *(_WORD *)(v9 + 30);
    if ((v26 & 0x400) == 0)
      goto LABEL_83;
LABEL_26:
    v14 = *((_QWORD *)this + 8);
    if (!v13)
      goto LABEL_113;
LABEL_27:
    if (v14)
      *(_DWORD *)(v14 + 24) += 2;
    if (!*((_QWORD *)this + 4))
    {
      if (((*((_DWORD *)this + 10) >> ((*(unsigned __int16 *)(v14 + 28) >> 12) - 1)) & 1) != 0)
        v19 = 1;
      else
        v19 = 3;
      v48 = v19;
      v50 = 0;
LABEL_41:
      if (v19 != 1)
      {
        v17 = 0;
        v22 = 0;
        v18 = v14;
LABEL_54:
        ((void (*)(char *, unsigned __int16 *))off_1E33A6530[v22])(&v51, &v48);
        goto LABEL_55;
      }
      v20 = *((_QWORD *)this + 8);
      if (v20)
        *(_DWORD *)(v20 + 24) += 2;
      v21 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v20;
      if (v21)
      {
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          v32 = *(_WORD *)(v21 + 30);
          if ((v32 & 0x400) == 0)
          {
            v33 = *(_WORD *)(v21 + 28);
            if ((v33 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v21, a2);
            }
            else
            {
              if ((v33 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
                v32 = *(_WORD *)(v21 + 30);
              }
              *(_WORD *)(v21 + 30) = v32 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
            }
          }
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      *((_BYTE *)this + 56) = *((_BYTE *)this + 72);
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) != 2)
        {
          v18 = 0;
          *(_DWORD *)(v7 + 24) -= 2;
LABEL_50:
          v17 = 3;
          goto LABEL_51;
        }
        v34 = *(_WORD *)(v7 + 30);
        if ((v34 & 0x400) == 0)
        {
          v35 = *(_WORD *)(v7 + 28);
          if ((v35 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
          }
          else
          {
            if ((v35 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v34 = *(_WORD *)(v7 + 30);
            }
            *(_WORD *)(v7 + 30) = v34 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      v18 = 0;
      goto LABEL_50;
    }
    WebCore::NodeIteratorBase::acceptNodeSlowCase((WebCore::NodeIterator *)((char *)this + 24), (WebCore::Node *)v14, (uint64_t)&v48);
    if (!v50)
    {
      v19 = v48;
      goto LABEL_41;
    }
    v15 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        v29 = *(_WORD *)(v15 + 30);
        if ((v29 & 0x400) == 0)
        {
          v30 = *(_WORD *)(v15 + 28);
          if ((v30 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v15, a2);
          }
          else
          {
            if ((v30 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
              v29 = *(_WORD *)(v15 + 30);
            }
            *(_WORD *)(v15 + 30) = v29 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
          }
        }
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    if (v50 != 1)
    {
      v46 = (WebCore::NodeIterator *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::NodeIterator::nodeWillBeRemoved(v46, v47);
      return;
    }
    v16 = v49;
    v49 = 0;
    *(_BYTE *)a3 = v48;
    *(_QWORD *)(a3 + 8) = v16;
    v17 = 1;
    *(_DWORD *)(a3 + 16) = 1;
    v18 = v14;
    v14 = v7;
LABEL_51:
    v22 = v50;
    v7 = v14;
    if (v50 != -1)
      goto LABEL_54;
LABEL_55:
    if (v18)
    {
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        v24 = *(_WORD *)(v18 + 30);
        if ((v24 & 0x400) == 0)
        {
          v25 = *(_WORD *)(v18 + 28);
          if ((v25 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v18, a2);
          }
          else
          {
            if ((v25 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 160) + 16))(*(_QWORD *)(v18 + 160));
              v24 = *(_WORD *)(v18 + 30);
            }
            *(_WORD *)(v18 + 30) = v24 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
          }
        }
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
    }
  }
  while (!v17);
  if (v17 != 3)
    goto LABEL_117;
  v14 = *((_QWORD *)this + 8);
LABEL_113:
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      v44 = *(_WORD *)(v14 + 30);
      if ((v44 & 0x400) == 0)
      {
        v45 = *(_WORD *)(v14 + 28);
        if ((v45 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v14, a2);
        }
        else
        {
          if ((v45 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 160) + 16))(*(_QWORD *)(v14 + 160));
            v44 = *(_WORD *)(v14 + 30);
          }
          *(_WORD *)(v14 + 30) = v44 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
        }
      }
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
LABEL_116:
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
  v7 = 0;
LABEL_117:
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    v38 = *(_WORD *)(v8 + 30);
    if ((v38 & 0x400) == 0)
    {
      v39 = *(_WORD *)(v8 + 28);
      if ((v39 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
      }
      else
      {
        if ((v39 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
          v38 = *(_WORD *)(v8 + 30);
        }
        *(_WORD *)(v8 + 30) = v38 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
      }
    }
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v42 = *(_WORD *)(v7 + 30);
      if ((v42 & 0x400) == 0)
      {
        v43 = *(_WORD *)(v7 + 28);
        if ((v43 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
        }
        else
        {
          if ((v43 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v42 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v42 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

uint64_t WebCore::NodeIterator::nodeWillBeRemoved(WebCore::NodeIterator *this, WebCore::Node *a2)
{
  WebCore::NodeIterator::updateForNodeRemoval(*((_QWORD *)this + 3), (uint64_t)a2, (uint64_t *)this + 8);
  return WebCore::NodeIterator::updateForNodeRemoval(*((_QWORD *)this + 3), (uint64_t)a2, (uint64_t *)this + 6);
}

uint64_t WebCore::NodeIterator::updateForNodeRemoval(uint64_t this, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::Document *v11;
  __int16 v12;
  uint64_t v13;
  WebCore::Document *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  __int16 v36;
  uint64_t v37;
  __int16 v39;
  uint64_t v40;
  __int16 v42;
  WebCore::Document *v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  WebCore::Document *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  WebCore::Document *v67;
  __int16 v68;
  __int16 v69;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = v6 + 2;
  v7 = *(_WORD *)(this + 28);
  if ((v7 & 0xF000) == 0x9000)
  {
    if (**(_QWORD **)(a2 + 40) != this)
      goto LABEL_168;
    if ((*(_WORD *)(a2 + 28) & 0xF000) == 0x9000)
      goto LABEL_168;
    v8 = *(_QWORD *)(a2 + 16);
    if ((v8 & 0x8000000000000) == 0)
      goto LABEL_168;
  }
  else
  {
    if ((v7 & 4) == 0)
      goto LABEL_168;
    if (!*(_QWORD *)(this + 80))
      goto LABEL_168;
    v8 = *(_QWORD *)(a2 + 16);
    if (((v8 >> 51) & 1) != (*(_BYTE *)(this + 22) & 8) >> 3)
      goto LABEL_168;
    v9 = a2;
    do
      v9 = *(_QWORD *)(v9 + 32);
    while (v9 != this && v9 != 0);
    if (!v9)
      goto LABEL_166;
  }
  v11 = (WebCore::Document *)*a3;
  if (!*a3)
    goto LABEL_30;
  v12 = *(_WORD *)(a2 + 28);
  if ((v12 & 0xF000) == 0x9000)
  {
    if (**((_QWORD **)v11 + 5) == a2 && (*((_WORD *)v11 + 14) & 0xF000) != 0x9000)
    {
      LODWORD(v13) = (*((unsigned __int8 *)v11 + 22) >> 3) & 1;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if ((v12 & 4) == 0)
    goto LABEL_30;
  v13 = *(_QWORD *)(a2 + 80);
  if (!v13)
    goto LABEL_31;
  if (((v8 >> 51) & 1) != (*((_BYTE *)v11 + 22) & 8) >> 3)
  {
LABEL_30:
    LODWORD(v13) = 0;
    goto LABEL_31;
  }
  v14 = (WebCore::Document *)*a3;
  do
  {
    v14 = (WebCore::Document *)*((_QWORD *)v14 + 4);
    LODWORD(v13) = v14 != 0;
  }
  while (v14 != (WebCore::Document *)a2 && v14 != 0);
LABEL_31:
  if (v11 != (WebCore::Document *)a2 && !(_DWORD)v13)
    goto LABEL_166;
  if (!*((_BYTE *)a3 + 8))
  {
    v26 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
    if (v26)
    {
      if ((*(_WORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v46 = *(_QWORD *)(v26 + 88);
          if (!v46)
            break;
          v26 = *(_QWORD *)(v26 + 88);
        }
        while ((*(_WORD *)(v46 + 28) & 4) != 0);
      }
LABEL_74:
      *(_DWORD *)(v26 + 24) += 2;
      if (!(_DWORD)v13)
      {
        v27 = v26;
LABEL_156:
        *a3 = v27;
        if (!v11)
          goto LABEL_166;
        if (*((_DWORD *)v11 + 6) == 2)
        {
          v50 = *((_WORD *)v11 + 15);
          if ((v50 & 0x400) != 0)
            goto LABEL_166;
          v51 = *((_WORD *)v11 + 14);
          if ((v51 & 0xF000) != 0x9000)
          {
            if ((v51 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v11 + 20) + 16))(*((_QWORD *)v11 + 20));
              v50 = *((_WORD *)v11 + 15);
            }
            *((_WORD *)v11 + 15) = v50 | 0x400;
            this = (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v11 + 72))(v11);
            goto LABEL_166;
          }
          v56 = v11;
          goto LABEL_207;
        }
        *((_DWORD *)v11 + 6) -= 2;
        goto LABEL_166;
      }
      while (1)
      {
        v27 = v26;
        v28 = *(_WORD *)(a2 + 28);
        if ((v28 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(v26 + 40) != a2
            || (*(_WORD *)(v26 + 28) & 0xF000) == 0x9000
            || (*(_BYTE *)(v26 + 22) & 8) == 0)
          {
            goto LABEL_106;
          }
        }
        else
        {
          if ((v28 & 4) == 0
            || !*(_QWORD *)(a2 + 80)
            || ((*(unsigned __int8 *)(v26 + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) != 0)
          {
            goto LABEL_106;
          }
          v29 = v26;
          do
            v29 = *(_QWORD *)(v29 + 32);
          while (v29 != a2 && v29 != 0);
          if (!v29)
          {
LABEL_106:
            v11 = (WebCore::Document *)*a3;
            goto LABEL_156;
          }
        }
        v26 = *(_QWORD *)(v26 + 48) & 0xFFFFFFFFFFFFLL;
        if (v26)
          break;
        v26 = *(_QWORD *)(v27 + 32);
        if (v26)
          goto LABEL_88;
LABEL_89:
        if (*(_DWORD *)(v27 + 24) == 2)
        {
          v32 = *(_WORD *)(v27 + 30);
          if ((v32 & 0x400) == 0)
          {
            v33 = *(_WORD *)(v27 + 28);
            if ((v33 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v27);
            }
            else
            {
              if ((v33 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v27 + 160) + 16))(*(_QWORD *)(v27 + 160));
                v32 = *(_WORD *)(v27 + 30);
              }
              *(_WORD *)(v27 + 30) = v32 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 72))(v27);
            }
          }
        }
        else
        {
          *(_DWORD *)(v27 + 24) -= 2;
        }
        if (!v26)
          goto LABEL_166;
      }
      if ((*(_WORD *)((*(_QWORD *)(v27 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v31 = *(_QWORD *)(v26 + 88);
          if (!v31)
            break;
          v26 = *(_QWORD *)(v26 + 88);
        }
        while ((*(_WORD *)(v31 + 28) & 4) != 0);
      }
LABEL_88:
      *(_DWORD *)(v26 + 24) += 2;
      goto LABEL_89;
    }
    v26 = *(_QWORD *)(a2 + 32);
    if (v26)
      goto LABEL_74;
    if ((*(_WORD *)(a2 + 28) & 4) == 0 || (v57 = *(_QWORD *)(a2 + 80)) == 0)
    {
      if (this == a2)
      {
LABEL_213:
        v57 = 0;
        goto LABEL_222;
      }
      v57 = *(_QWORD *)(a2 + 56);
      if (!v57)
      {
        v58 = a2;
        do
        {
          v58 = *(_QWORD *)(v58 + 32);
          if (!v58 || v58 == this)
            goto LABEL_213;
          v57 = *(_QWORD *)(v58 + 56);
        }
        while (!v57);
      }
    }
    *(_DWORD *)(v57 + 24) += 2;
LABEL_222:
    if (!(_DWORD)v13)
    {
      v60 = v57;
      if (!v57)
        goto LABEL_166;
LABEL_255:
      v67 = (WebCore::Document *)*a3;
      *a3 = v60;
      if (!v67)
        goto LABEL_166;
      if (*((_DWORD *)v67 + 6) != 2)
      {
        *((_DWORD *)v67 + 6) -= 2;
        goto LABEL_166;
      }
      v68 = *((_WORD *)v67 + 15);
      if ((v68 & 0x400) != 0)
        goto LABEL_166;
      v69 = *((_WORD *)v67 + 14);
      if ((v69 & 0xF000) != 0x9000)
      {
        if ((v69 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v67 + 20) + 16))(*((_QWORD *)v67 + 20));
          v68 = *((_WORD *)v67 + 15);
        }
        *((_WORD *)v67 + 15) = v68 | 0x400;
        this = (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v67 + 72))(v67);
        goto LABEL_166;
      }
      v56 = v67;
      goto LABEL_207;
    }
    while (1)
    {
      if (!v57)
        goto LABEL_166;
      v60 = v57;
      v61 = *(_WORD *)(a2 + 28);
      if ((v61 & 0xF000) == 0x9000)
      {
        if (**(_QWORD **)(v57 + 40) != a2
          || (*(_WORD *)(v57 + 28) & 0xF000) == 0x9000
          || (*(_BYTE *)(v57 + 22) & 8) == 0)
        {
          goto LABEL_255;
        }
      }
      else
      {
        if ((v61 & 4) == 0
          || !*(_QWORD *)(a2 + 80)
          || ((*(unsigned __int8 *)(v57 + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) != 0)
        {
          goto LABEL_255;
        }
        v62 = v57;
        do
          v62 = *(_QWORD *)(v62 + 32);
        while (v62 != a2 && v62 != 0);
        if (!v62)
          goto LABEL_255;
      }
      v57 = *(_QWORD *)(v57 + 48) & 0xFFFFFFFFFFFFLL;
      if (v57)
        break;
      v57 = *(_QWORD *)(v60 + 32);
      if (v57)
        goto LABEL_237;
LABEL_238:
      if (*(_DWORD *)(v60 + 24) == 2)
      {
        v65 = *(_WORD *)(v60 + 30);
        if ((v65 & 0x400) == 0)
        {
          v66 = *(_WORD *)(v60 + 28);
          if ((v66 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef((WebCore::Document *)v60);
          }
          else
          {
            if ((v66 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v60 + 160) + 16))(*(_QWORD *)(v60 + 160));
              v65 = *(_WORD *)(v60 + 30);
            }
            *(_WORD *)(v60 + 30) = v65 | 0x400;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 72))(v60);
          }
        }
      }
      else
      {
        *(_DWORD *)(v60 + 24) -= 2;
      }
    }
    if ((*(_WORD *)((*(_QWORD *)(v60 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
    {
      do
      {
        v64 = *(_QWORD *)(v57 + 88);
        if (!v64)
          break;
        v57 = *(_QWORD *)(v57 + 88);
      }
      while ((*(_WORD *)(v64 + 28) & 4) != 0);
    }
LABEL_237:
    *(_DWORD *)(v57 + 24) += 2;
    goto LABEL_238;
  }
  if ((*(_WORD *)(a2 + 28) & 4) != 0)
  {
    v16 = *(_QWORD *)(a2 + 80);
    if (v16)
    {
LABEL_114:
      *(_DWORD *)(v16 + 24) += 2;
      while (1)
      {
        v19 = v16;
        v36 = *(_WORD *)(a2 + 28);
        if ((v36 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(v16 + 40) != a2)
            goto LABEL_152;
          v39 = *(_WORD *)(v16 + 28);
          if ((v39 & 0xF000) == 0x9000 || (*(_BYTE *)(v16 + 22) & 8) == 0)
            goto LABEL_152;
        }
        else
        {
          if ((v36 & 4) == 0
            || !*(_QWORD *)(a2 + 80)
            || ((*(unsigned __int8 *)(v16 + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) != 0)
          {
            goto LABEL_152;
          }
          v37 = v16;
          do
            v37 = *(_QWORD *)(v37 + 32);
          while (v37 != a2 && v37 != 0);
          if (!v37)
          {
LABEL_152:
            *(_DWORD *)(v16 + 24) += 2;
            v43 = (WebCore::Document *)*a3;
            *a3 = v16;
            if (v43)
            {
              if (*((_DWORD *)v43 + 6) == 2)
              {
                v52 = *((_WORD *)v43 + 15);
                if ((v52 & 0x400) == 0)
                {
                  v53 = *((_WORD *)v43 + 14);
                  if ((v53 & 0xF000) == 0x9000)
                  {
                    this = WebCore::Document::removedLastRef(v43);
                  }
                  else
                  {
                    if ((v53 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)v43 + 20) + 16))(*((_QWORD *)v43 + 20));
                      v52 = *((_WORD *)v43 + 15);
                    }
                    *((_WORD *)v43 + 15) = v52 | 0x400;
                    this = (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v43 + 72))(v43);
                  }
                }
              }
              else
              {
                *((_DWORD *)v43 + 6) -= 2;
              }
            }
            goto LABEL_164;
          }
          v39 = *(_WORD *)(v16 + 28);
        }
        if ((v39 & 4) != 0)
        {
          v16 = *(_QWORD *)(v16 + 80);
          if (v16)
            break;
        }
        if (v19 != v5)
        {
          v16 = *(_QWORD *)(v19 + 56);
          if (v16)
            break;
          v40 = v19;
          while (1)
          {
            v40 = *(_QWORD *)(v40 + 32);
            if (!v40 || v40 == v5)
              break;
            v16 = *(_QWORD *)(v40 + 56);
            if (v16)
              goto LABEL_138;
          }
        }
        v16 = 0;
LABEL_139:
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          v42 = *(_WORD *)(v19 + 30);
          if ((v42 & 0x400) == 0)
          {
            if ((v39 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v19);
            }
            else
            {
              if ((v39 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 160) + 16))(*(_QWORD *)(v19 + 160));
                v42 = *(_WORD *)(v19 + 30);
              }
              *(_WORD *)(v19 + 30) = v42 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
            }
          }
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
        if (!v16)
          goto LABEL_166;
      }
LABEL_138:
      *(_DWORD *)(v16 + 24) += 2;
      goto LABEL_139;
    }
  }
  if (this != a2)
  {
    v16 = *(_QWORD *)(a2 + 56);
    if (!v16)
    {
      v34 = a2;
      while (1)
      {
        v34 = *(_QWORD *)(v34 + 32);
        if (!v34 || v34 == this)
          goto LABEL_37;
        v16 = *(_QWORD *)(v34 + 56);
        if (v16)
          goto LABEL_114;
      }
    }
    goto LABEL_114;
  }
LABEL_37:
  v17 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    if ((*(_WORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
    {
      do
      {
        v47 = *(_QWORD *)(v17 + 88);
        if (!v47)
          break;
        v17 = *(_QWORD *)(v17 + 88);
      }
      while ((*(_WORD *)(v47 + 28) & 4) != 0);
    }
    goto LABEL_39;
  }
  v17 = *(_QWORD *)(a2 + 32);
  if (v17)
  {
LABEL_39:
    v18 = *(_DWORD *)(v17 + 24) + 2;
    *(_DWORD *)(v17 + 24) = v18;
    if ((_DWORD)v13)
    {
      while (1)
      {
        v19 = v17;
        v20 = *(_WORD *)(a2 + 28);
        if ((v20 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(v17 + 40) != a2
            || (*(_WORD *)(v17 + 28) & 0xF000) == 0x9000
            || (*(_BYTE *)(v17 + 22) & 8) == 0)
          {
            goto LABEL_71;
          }
        }
        else
        {
          if ((v20 & 4) == 0
            || !*(_QWORD *)(a2 + 80)
            || ((*(unsigned __int8 *)(v17 + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) != 0)
          {
            goto LABEL_71;
          }
          v21 = v17;
          do
            v21 = *(_QWORD *)(v21 + 32);
          while (v21 != a2 && v21 != 0);
          if (!v21)
          {
LABEL_71:
            v18 = *(_DWORD *)(v17 + 24);
            v11 = (WebCore::Document *)*a3;
            goto LABEL_160;
          }
        }
        v17 = *(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL;
        if (v17)
          break;
        v17 = *(_QWORD *)(v19 + 32);
        if (v17)
          goto LABEL_53;
LABEL_54:
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          v24 = *(_WORD *)(v19 + 30);
          if ((v24 & 0x400) == 0)
          {
            v25 = *(_WORD *)(v19 + 28);
            if ((v25 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v19);
            }
            else
            {
              if ((v25 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 160) + 16))(*(_QWORD *)(v19 + 160));
                v24 = *(_WORD *)(v19 + 30);
              }
              *(_WORD *)(v19 + 30) = v24 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
            }
          }
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
        if (!v17)
          goto LABEL_166;
      }
      if ((*(_WORD *)((*(_QWORD *)(v19 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v23 = *(_QWORD *)(v17 + 88);
          if (!v23)
            break;
          v17 = *(_QWORD *)(v17 + 88);
        }
        while ((*(_WORD *)(v23 + 28) & 4) != 0);
      }
LABEL_53:
      *(_DWORD *)(v17 + 24) += 2;
      goto LABEL_54;
    }
    v19 = v17;
LABEL_160:
    *(_DWORD *)(v19 + 24) = v18 + 2;
    *a3 = v19;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        v54 = *((_WORD *)v11 + 15);
        if ((v54 & 0x400) == 0)
        {
          v55 = *((_WORD *)v11 + 14);
          if ((v55 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef(v11);
          }
          else
          {
            if ((v55 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v11 + 20) + 16))(*((_QWORD *)v11 + 20));
              v54 = *((_WORD *)v11 + 15);
            }
            *((_WORD *)v11 + 15) = v54 | 0x400;
            this = (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v11 + 72))(v11);
          }
        }
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    *((_BYTE *)a3 + 8) = 0;
LABEL_164:
    if (*(_DWORD *)(v19 + 24) != 2)
    {
      *(_DWORD *)(v19 + 24) -= 2;
      goto LABEL_166;
    }
    v48 = *(_WORD *)(v19 + 30);
    if ((v48 & 0x400) != 0)
      goto LABEL_166;
    v49 = *(_WORD *)(v19 + 28);
    if ((v49 & 0xF000) != 0x9000)
    {
      if ((v49 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 160) + 16))(*(_QWORD *)(v19 + 160));
        v48 = *(_WORD *)(v19 + 30);
      }
      *(_WORD *)(v19 + 30) = v48 | 0x400;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
      goto LABEL_166;
    }
    v56 = (WebCore::Document *)v19;
LABEL_207:
    this = WebCore::Document::removedLastRef(v56);
  }
LABEL_166:
  if (!v5)
    return this;
  v6 = *(_DWORD *)(v5 + 24) - 2;
LABEL_168:
  if (v6)
  {
    *(_DWORD *)(v5 + 24) = v6;
  }
  else
  {
    v44 = *(_WORD *)(v5 + 30);
    if ((v44 & 0x400) == 0)
    {
      v45 = *(_WORD *)(v5 + 28);
      if ((v45 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v5);
      }
      else
      {
        if ((v45 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
          v44 = *(_WORD *)(v5 + 30);
        }
        *(_WORD *)(v5 + 30) = v44 | 0x400;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
      }
    }
  }
  return this;
}

void *WebCore::NodeList::bisoHeap(WebCore::NodeList *this)
{
  return &WebCore::NodeList::bisoHeap(void)::heap;
}

uint64_t WebCore::NodeList::operator new(uint64_t this)
{
  if (this == 24)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::NodeTraversal::previousIncludingPseudo(WebCore::NodeTraversal *this, const WebCore::Node *a2, const WebCore::Node *a3)
{
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;

  if (this == a2)
    return 0;
  v4 = WebCore::Node::pseudoAwarePreviousSibling(this);
  if (v4)
  {
    v8 = v4;
    while (1)
    {
      result = v8;
      v9 = *(_WORD *)(v8 + 28);
      if (result && (v9 & 8) != 0)
      {
        if ((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_14;
        if (!*(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0xB0)
          && !*(_QWORD *)(result + 88)
          && !*(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0xA8))
        {
          return result;
        }
        v8 = *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0xB0);
        if (!v8)
        {
          v8 = *(_QWORD *)(result + 88);
          if (!v8)
            v8 = *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0xA8);
        }
      }
      else
      {
        if ((v9 & 4) == 0)
          return result;
LABEL_14:
        v8 = *(_QWORD *)(result + 88);
        if (!v8)
          return result;
      }
    }
  }
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this))
  {
    v5 = (char *)this + 32;
  }
  else
  {
    v7 = *((_QWORD *)this + 14);
    if (!v7)
      return 0;
    v5 = (char *)(v7 + 8);
  }
  return *(_QWORD *)v5;
}

uint64_t WebCore::NodeTraversal::nextIncludingPseudo(WebCore::NodeTraversal *this, const WebCore::Node *a2, const WebCore::Node *a3)
{
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const WebCore::Node **v11;
  const WebCore::Node *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *((unsigned __int16 *)this + 14);
  if ((v5 & 8) != 0)
  {
    v6 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
    if (!v6)
    {
      result = *((_QWORD *)this + 10);
      if (result)
        return result;
      goto LABEL_11;
    }
    result = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
    if (result)
      return result;
    result = *((_QWORD *)this + 10);
    if (result)
      return result;
    v8 = (uint64_t *)(v6 + 176);
  }
  else
  {
    if ((v5 & 4) == 0)
      goto LABEL_11;
    v8 = (uint64_t *)((char *)this + 80);
  }
  result = *v8;
  if (*v8)
    return result;
LABEL_11:
  if (this == a2)
    return 0;
  if ((~v5 & 0x408) != 0 || !(*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this))
  {
    v9 = *((_QWORD *)this + 4);
    if (!v9 || (*(_WORD *)(v9 + 28) & 8) == 0)
    {
LABEL_16:
      v10 = (uint64_t *)((char *)this + 56);
      goto LABEL_17;
    }
  }
  else
  {
    v16 = *((_QWORD *)this + 14);
    if (!v16)
      goto LABEL_16;
    v9 = *(_QWORD *)(v16 + 8);
    if (!v9)
      goto LABEL_16;
  }
  if (*((_QWORD *)this + 7))
    goto LABEL_16;
  if ((~*((unsigned __int16 *)this + 14) & 0x408) == 0
    && (*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this) == 6)
  {
    result = *(_QWORD *)(v9 + 80);
    if (result)
      return result;
  }
  if ((~*((unsigned __int16 *)this + 14) & 0x408) == 0
    && (*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this) == 7)
  {
    goto LABEL_16;
  }
  if ((*(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v10 = (uint64_t *)((*(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_17:
    result = *v10;
    if (*v10)
      return result;
  }
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this))
  {
    v11 = (const WebCore::Node **)((char *)this + 32);
  }
  else
  {
    v17 = *((_QWORD *)this + 14);
    if (!v17)
      return 0;
    v11 = (const WebCore::Node **)(v17 + 8);
  }
  result = 0;
  v12 = *v11;
  if (*v11 && v12 != a2)
  {
    while (1)
    {
      if ((~*((unsigned __int16 *)v12 + 14) & 0x408) != 0
        || !(*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v12 + 368))(v12))
      {
        v13 = *((_QWORD *)v12 + 4);
        if (!v13 || (*(_WORD *)(v13 + 28) & 8) == 0)
          break;
      }
      else
      {
        v15 = *((_QWORD *)v12 + 14);
        if (!v15)
          break;
        v13 = *(_QWORD *)(v15 + 8);
        if (!v13)
          break;
      }
      if (*((_QWORD *)v12 + 7))
        break;
      if ((~*((unsigned __int16 *)v12 + 14) & 0x408) == 0
        && (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v12 + 368))(v12) == 6)
      {
        result = *(_QWORD *)(v13 + 80);
        if (result)
          return result;
      }
      if ((~*((unsigned __int16 *)v12 + 14) & 0x408) == 0
        && (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v12 + 368))(v12) == 7)
      {
        break;
      }
      if ((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v14 = (uint64_t *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_27:
        result = *v14;
        if (*v14)
          return result;
      }
      result = 0;
      v12 = (const WebCore::Node *)*((_QWORD *)v12 + 4);
      if (!v12 || v12 == a2)
        return result;
    }
    v14 = (uint64_t *)((char *)v12 + 56);
    goto LABEL_27;
  }
  return result;
}

uint64_t WebCore::NodeTraversal::nextIncludingPseudoSkippingChildren(WebCore::NodeTraversal *this, const WebCore::Node *a2, const WebCore::Node *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  const WebCore::Node **v9;
  const WebCore::Node *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (this == a2)
    return 0;
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this))
  {
    v5 = *((_QWORD *)this + 4);
    if (!v5 || (*(_WORD *)(v5 + 28) & 8) == 0)
    {
LABEL_6:
      v6 = (uint64_t *)((char *)this + 56);
      goto LABEL_7;
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 14);
    if (!v8)
      goto LABEL_6;
    v5 = *(_QWORD *)(v8 + 8);
    if (!v5)
      goto LABEL_6;
  }
  if (*((_QWORD *)this + 7))
    goto LABEL_6;
  if ((~*((unsigned __int16 *)this + 14) & 0x408) == 0
    && (*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this) == 6)
  {
    result = *(_QWORD *)(v5 + 80);
    if (result)
      return result;
  }
  if ((~*((unsigned __int16 *)this + 14) & 0x408) == 0
    && (*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this) == 7)
  {
    goto LABEL_6;
  }
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_18;
  v6 = (uint64_t *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_7:
  result = *v6;
  if (*v6)
    return result;
LABEL_18:
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::NodeTraversal *))(*(_QWORD *)this + 368))(this))
  {
    v9 = (const WebCore::Node **)((char *)this + 32);
  }
  else
  {
    v14 = *((_QWORD *)this + 14);
    if (!v14)
      return 0;
    v9 = (const WebCore::Node **)(v14 + 8);
  }
  result = 0;
  v10 = *v9;
  if (*v9 && v10 != a2)
  {
    while (1)
    {
      if ((~*((unsigned __int16 *)v10 + 14) & 0x408) != 0
        || !(*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v10 + 368))(v10))
      {
        v11 = *((_QWORD *)v10 + 4);
        if (!v11 || (*(_WORD *)(v11 + 28) & 8) == 0)
          break;
      }
      else
      {
        v13 = *((_QWORD *)v10 + 14);
        if (!v13)
          break;
        v11 = *(_QWORD *)(v13 + 8);
        if (!v11)
          break;
      }
      if (*((_QWORD *)v10 + 7))
        break;
      if ((~*((unsigned __int16 *)v10 + 14) & 0x408) == 0
        && (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v10 + 368))(v10) == 6)
      {
        result = *(_QWORD *)(v11 + 80);
        if (result)
          return result;
      }
      if ((~*((unsigned __int16 *)v10 + 14) & 0x408) == 0
        && (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v10 + 368))(v10) == 7)
      {
        break;
      }
      if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v12 = (uint64_t *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_27:
        result = *v12;
        if (*v12)
          return result;
      }
      result = 0;
      v10 = (const WebCore::Node *)*((_QWORD *)v10 + 4);
      if (!v10 || v10 == a2)
        return result;
    }
    v12 = (uint64_t *)((char *)v10 + 56);
    goto LABEL_27;
  }
  return result;
}

uint64_t WebCore::NodeTraversal::nextAncestorSibling(WebCore::NodeTraversal *this, const WebCore::Node *a2)
{
  uint64_t v2;

  while (1)
  {
    this = (WebCore::NodeTraversal *)*((_QWORD *)this + 4);
    if (!this)
      break;
    v2 = *((_QWORD *)this + 7);
    if (v2)
      return v2;
  }
  return 0;
}

uint64_t WebCore::NodeTraversal::nextAncestorSibling(WebCore::NodeTraversal *this, const WebCore::Node *a2, const WebCore::Node *a3)
{
  while (1)
  {
    this = (WebCore::NodeTraversal *)*((_QWORD *)this + 4);
    if (!this || this == a2)
      break;
    if (*((_QWORD *)this + 7))
      return *((_QWORD *)this + 7);
  }
  return 0;
}

uint64_t WebCore::NodeTraversal::last(WebCore::NodeTraversal *this, const WebCore::ContainerNode *a2)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 11);
  if (result && (*(_WORD *)(result + 28) & 4) != 0)
  {
    do
    {
      v3 = *(_QWORD *)(result + 88);
      if (!v3)
        break;
      result = *(_QWORD *)(result + 88);
    }
    while ((*(_WORD *)(v3 + 28) & 4) != 0);
  }
  return result;
}

uint64_t WebCore::NodeTraversal::deepLastChild(uint64_t this, WebCore::Node *a2)
{
  uint64_t v2;

  if ((*(_WORD *)(this + 28) & 4) != 0)
  {
    do
    {
      v2 = *(_QWORD *)(this + 88);
      if (!v2)
        break;
      this = *(_QWORD *)(this + 88);
    }
    while ((*(_WORD *)(v2 + 28) & 4) != 0);
  }
  return this;
}

uint64_t WebCore::OverflowEvent::operator new(uint64_t this)
{
  if (this == 80)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WebCore::EventNames **WebCore::OverflowEvent::OverflowEvent(WebCore::EventNames **this, int a2, char a3, int a4, char a5)
{
  WebCore::EventNames **v9;
  uint64_t v10;
  WebCore::OverflowEvent *v11;
  uint64_t v12;
  WebCore::EventNames *v13;
  unsigned int v14;
  WebCore::EventNames *v15;
  __int16 v16;

  v9 = this;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(WebCore::OverflowEvent **)(v10 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v11 = (WebCore::OverflowEvent *)this;
  }
  v12 = *((_QWORD *)v11 + 5);
  if (!v12)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *((_QWORD *)v11 + 5);
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
  v9[1] = 0;
  v14 = *((_DWORD *)v9 + 5) & 0xFFC00000 | 0x280200 | (*(_QWORD *)(v12 + 1392) != 0);
  *((_DWORD *)v9 + 4) = 1;
  *((_DWORD *)v9 + 5) = v14;
  v15 = *(WebCore::EventNames **)(v12 + 1392);
  if (v15)
    *(_DWORD *)v15 += 2;
  v9[3] = v15;
  v9[4] = 0;
  v9[5] = 0;
  v9[6] = 0;
  v9[7] = v13;
  v9[8] = 0;
  *v9 = (WebCore::EventNames *)off_1E33A6400;
  *((_BYTE *)v9 + 74) = a3;
  v16 = a2 ^ 1;
  *((_BYTE *)v9 + 75) = a5;
  if ((a2 & a4) != 0)
    v16 = 2;
  *((_WORD *)v9 + 36) = v16;
  return v9;
}

uint64_t WebCore::OverflowEvent::initOverflowEvent(uint64_t this, __int16 a2, char a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*(_BYTE *)(this + 21) & 0x30) == 0)
  {
    v7 = this;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (this = *(_QWORD *)(v8 + 96)) == 0)
      this = WebCore::threadGlobalDataSlow((WebCore *)this);
    v9 = *(_QWORD *)(this + 40);
    if (!v9)
    {
      v10 = this;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
      v9 = *(_QWORD *)(v10 + 40);
    }
    this = WebCore::Event::initEvent(v7, (const WTF::AtomString *)(v9 + 1392), 0, 0);
    *(_WORD *)(v7 + 72) = a2;
    *(_BYTE *)(v7 + 74) = a3;
    *(_BYTE *)(v7 + 75) = a4;
  }
  return this;
}

void WebCore::NativeNodeFilter::~NativeNodeFilter(WebCore::NativeNodeFilter *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  _DWORD *v3;
  WTF *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::OverflowEvent::~OverflowEvent(WebCore::OverflowEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void std::default_delete<WebCore::NodeMutationObserverData>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::MutationObserverRegistration **v5;
  uint64_t v6;
  WebCore::MutationObserverRegistration *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  if (this)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      v11 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = *(unsigned int **)(v3 + 8 * i);
          if (v13 != (unsigned int *)-1)
          {
            *(_QWORD *)(v3 + 8 * i) = 0;
            if (v13)
            {
              do
              {
                v14 = __ldaxr(v13);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v13));
              if (!v15)
              {
                atomic_store(1u, v13);
                v17 = v3;
                v16 = i;
                WTF::fastFree((WTF *)v13, this);
                i = v16;
                v3 = v17;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v3 - 16), this);
    }
    v4 = *((unsigned int *)this + 3);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::MutationObserverRegistration ***)this;
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          WebCore::MutationObserverRegistration::~MutationObserverRegistration(v7);
          WTF::fastFree(v8, v9);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    v10 = *(WTF **)this;
    if (*(_QWORD *)this)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v10, this);
    }
    WTF::fastFree(this, this);
  }
}

WebCore::NodeListsNodeData *std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>(uint64_t a1, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  WebCore::NodeListsNodeData *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v2 = a1;
    a1 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (!a1)
      goto LABEL_5;
    do
    {
      v3 = __ldaxr((unsigned int *)a1);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)a1));
    if (v4)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  atomic_store(1u, (unsigned int *)a1);
  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9)
  {
    v12 = a1;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(*(_QWORD *)(a1 + 16) + 32 * v9));
    a1 = v12;
  }
  v10 = *(WTF **)(a1 + 16);
  if (v10)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v11 = a1;
    WTF::fastFree(v10, a2);
    a1 = v11;
  }
  WTF::fastFree((WTF *)a1, a2);
LABEL_5:
  v5 = *(WTF **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v5)
    std::default_delete<WebCore::NodeMutationObserverData>::operator()[abi:sn180100](v2 + 8, v5);
  result = *(WebCore::NodeListsNodeData **)v2;
  *(_QWORD *)v2 = 0;
  if (result)
  {
    WebCore::NodeListsNodeData::~NodeListsNodeData(result, v5);
    return (WebCore::NodeListsNodeData *)WTF::fastFree(v7, v8);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_13TrustedScriptENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJSG_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_13TrustedScriptENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJSG_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_13TrustedScriptENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJSG_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  unsigned int *result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      v3 = *(_WORD *)(v2 + 30);
      if ((v3 & 0x400) == 0)
      {
        v4 = *(_WORD *)(v2 + 28);
        if ((v4 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v2, a2);
        }
        else
        {
          if ((v4 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
            v3 = *(_WORD *)(v2 + 30);
          }
          *(_WORD *)(v2 + 30) = v3 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
        }
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::nodeSetPreTransformedFromNodeOrStringOrTrustedScriptVector(WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::String,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>>> const&)::$_0,WebCore::nodeSetPreTransformedFromNodeOrStringOrTrustedScriptVector(WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::String,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>>> const&)::$_1,WebCore::nodeSetPreTransformedFromNodeOrStringOrTrustedScriptVector(WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::String,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::String,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>> const&>(uint64_t ***a1, WebCore::Document **a2)
{
  WebCore::Document *v2;
  uint64_t *v3;
  uint64_t *result;
  void *v5;
  WebCore::Document *v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  WebCore::Document *v10;

  v2 = *a2;
  v3 = **a1;
  if (*a2)
    *((_DWORD *)v2 + 6) += 2;
  v10 = v2;
  result = WTF::HashTable<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(v3, (uint64_t *)&v10, (uint64_t)&v9);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      v7 = *((_WORD *)v6 + 15);
      if ((v7 & 0x400) == 0)
      {
        v8 = *((_WORD *)v6 + 14);
        if ((v8 & 0xF000) == 0x9000)
        {
          return (uint64_t *)WebCore::Document::removedLastRef(v6, v5);
        }
        else
        {
          if ((v8 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v6 + 20) + 16))(*((_QWORD *)v6 + 20));
            v7 = *((_WORD *)v6 + 15);
          }
          *((_WORD *)v6 + 15) = v7 | 0x400;
          return (uint64_t *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v6 - 4);
        v27 = 0;
        v28 = v6 + 8 * v21;
        goto LABEL_36;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  v18 = *v14;
  *v14 = v9;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      v29 = *(_WORD *)(v18 + 30);
      if ((v29 & 0x400) == 0)
      {
        v30 = *(_WORD *)(v18 + 28);
        if ((v30 & 0xF000) == 0x9000)
        {
          result = (uint64_t *)WebCore::Document::removedLastRef((WebCore::Document *)v18, a2);
        }
        else
        {
          if ((v30 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 160) + 16))(*(_QWORD *)(v18 + 160));
            v29 = *(_WORD *)(v18 + 30);
          }
          *(_WORD *)(v18 + 30) = v29 | 0x400;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
        }
      }
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *v4;
  if (*v4)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_26;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_31:
      result = WTF::HashTable<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(v4, v26, v14);
      v14 = result;
      v22 = *v4;
      if (*v4)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_35;
    }
LABEL_26:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_31;
  }
LABEL_35:
  v28 = v22 + 8 * v25;
  v27 = 1;
LABEL_36:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v28;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)(v26 + 24) == 2)
            {
              v27 = *(_WORD *)(v26 + 30);
              if ((v27 & 0x400) == 0)
              {
                v28 = *(_WORD *)(v26 + 28);
                if ((v28 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v26, v10);
                }
                else
                {
                  if ((v28 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v26 + 160) + 16))(*(_QWORD *)(v26 + 160));
                    v27 = *(_WORD *)(v26 + 30);
                  }
                  *(_WORD *)(v26 + 30) = v27 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
                }
              }
            }
            else
            {
              *(_DWORD *)(v26 + 24) -= 2;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::hashPointer(WebCore *this, const void *a2)
{
  CC_SHA1_CTX c;
  const void *data;

  data = a2;
  WTF::SHA1::SHA1((WTF::SHA1 *)&c);
  CC_SHA1_Update(&c, &data, 8u);
  return WTF::SHA1::computeHash();
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_24;
  }
  if (__stxr(1u, v13))
    goto LABEL_23;
LABEL_24:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v20 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v20);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::add<WTF::OptionSet<WebCore::MutationObserverOptionType>&>(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::MutationObserver *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::MutationObserver *v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v12 = 0;
  v13 = *a3;
  for (i = 1; ; ++i)
  {
    v15 = result & v9;
    v16 = v8 + 16 * (result & v9);
    v17 = *(_QWORD *)v16;
    if (!*(_QWORD *)v16)
    {
      if (v12)
      {
        *(_QWORD *)v12 = 0;
        *(_BYTE *)(v12 + 8) = 0;
        --*(_DWORD *)(*a2 - 16);
        v13 = *a3;
        v16 = v12;
      }
      *a3 = 0;
      v18 = *(WebCore::MutationObserver **)v16;
      *(_QWORD *)v16 = v13;
      v29 = v18;
      result = (uint64_t)WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>::~Ref(&v29, v11);
      *(_BYTE *)(v16 + 8) = *a4;
      v19 = *a2;
      if (*a2)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *a2;
      if (*a2)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_14;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_14:
        v25 = v21 + 16 * v24;
        v26 = 1;
        goto LABEL_15;
      }
      result = WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::expand(a2, (uint64_t *)v16);
      v16 = result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_14;
    }
    if (v17 == -1)
    {
      v12 = v8 + 16 * v15;
      goto LABEL_23;
    }
    if (v17 == v13)
      break;
LABEL_23:
    result = i + v15;
  }
  v27 = *a2;
  if (*a2)
    v28 = *(unsigned int *)(v27 - 4);
  else
    v28 = 0;
  v26 = 0;
  v25 = v27 + 16 * v28;
LABEL_15:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::reinsert(*a1, v14);
          WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>::~Ref((WebCore::MutationObserver **)v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>::~Ref((WebCore::MutationObserver **)v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_BYTE *)(v2 + 24);
    do
    {
      *((_QWORD *)v5 - 1) = 0;
      *v5 = 0;
      v5 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*a2 << 32) + *a2;
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = v2 & (((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27)));
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = a1 + 16 * v8;
  *(_QWORD *)result = 0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v11;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJtN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJtS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    v14 = *a2;
    *a2 = 0;
    v13[v12] = v14;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0xC)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 11;
    goto LABEL_11;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_11:
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,11ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 0xC)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 11;
        goto LABEL_13;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_13:
        memcpy(v11, v5, 8 * v6);
        v13 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195A1ABA8);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    v18 = *((unsigned int *)a1 + 3);
    if (v17 < 0xC)
    {
      v19 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 11;
    }
    else
    {
      if (v17 >> 29)
        goto LABEL_38;
      v19 = (char *)WTF::fastMalloc((WTF *)(8 * v17));
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
    }
    memcpy(v19, v5, 8 * v18);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WebCore::TreeScope *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 9)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 8;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195A1AD48);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 9)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 8;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Node::queueTaskKeepingThisNodeAlive(WebCore::TaskSource,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E33A6550;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Node::queueTaskKeepingThisNodeAlive(WebCore::TaskSource,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = (uint64_t)off_1E33A6550;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(a1 + 1);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Node::queueTaskKeepingThisNodeAlive(WebCore::TaskSource,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Node::queueTaskToDispatchEvent(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  __int16 v6;
  __int16 v7;

  *a1 = &off_1E33A6578;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v6 = *(_WORD *)(v4 + 30);
      if ((v6 & 0x400) == 0)
      {
        v7 = *(_WORD *)(v4 + 28);
        if ((v7 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
        }
        else
        {
          if ((v7 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v6 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v6 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Node::queueTaskToDispatchEvent(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  __int16 v6;
  __int16 v7;

  *(_QWORD *)this = &off_1E33A6578;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v6 = *(_WORD *)(v4 + 30);
      if ((v6 & 0x400) == 0)
      {
        v7 = *(_WORD *)(v4 + 28);
        if ((v7 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
        }
        else
        {
          if ((v7 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v6 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v6 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Node::queueTaskToDispatchEvent(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void **WTF::Vector<WebCore::Node *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 0x11)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 16;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 8 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Node *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Node *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x11)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 16;
    goto LABEL_13;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 8 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

int8x16_t **WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::HexNumberBuffer>@<X0>(int8x16_t **result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int8x16_t *v6;
  int8x16_t *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  size_t v12;
  int v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  char v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  uint64_t v26;
  _BYTE *v27;
  size_t v28;
  _BYTE *v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  char v33;
  uint64_t v35;

  v7 = *result;
  v6 = result[1];
  if (v6)
  {
    v8 = (size_t)&v6[-1].u64[1] + 7;
    if (((unint64_t)&v6[-1].u64[1] + 7) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195A1B3A0);
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = *a2;
  v11 = *(int8x16_t **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    v12 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195A1B3CCLL);
    }
  }
  else
  {
    v12 = 0;
  }
  if (v9)
    v13 = *(_DWORD *)(v9 + 4);
  else
    v13 = 0;
  v15 = (unsigned int *)(a4 + 16);
  v14 = *(_DWORD *)(a4 + 16);
  if (v14 < 0)
    goto LABEL_58;
  v16 = 0;
  v17 = __OFADD__((_DWORD)v12, v14);
  v18 = v12 + v14;
  v19 = v17;
  if (v13 < 0 || (v19 & 1) != 0)
    goto LABEL_35;
  v17 = __OFADD__(v13, v18);
  v20 = v13 + v18;
  if (v17)
    goto LABEL_58;
  v21 = (v8 + v20);
  if (__OFADD__((_DWORD)v8, v20))
    goto LABEL_58;
  if (!v9 || (*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    if ((_DWORD)v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
        result = (int8x16_t **)WTF::tryFastCompactMalloc((WTF *)(v21 + 20));
        v16 = v35;
        if (v35)
        {
          v22 = (_BYTE *)(v35 + 20);
          *(_DWORD *)v35 = 2;
          *(_DWORD *)(v35 + 4) = v21;
          *(_QWORD *)(v35 + 8) = v35 + 20;
          *(_DWORD *)(v35 + 16) = 4;
          if ((_DWORD)v8)
          {
            if ((_DWORD)v8 == 1)
              *v22 = v7->i8[0];
            else
              result = (int8x16_t **)memcpy((void *)(v35 + 20), v7, v8);
          }
          v23 = &v22[v8];
          if (v9)
          {
            v24 = *(_BYTE **)(v9 + 8);
            v25 = *(unsigned int *)(v9 + 4);
            if ((*(_BYTE *)(v9 + 16) & 4) != 0)
            {
              if ((_DWORD)v25)
              {
                if ((_DWORD)v25 == 1)
                  *v23 = *v24;
                else
                  result = (int8x16_t **)memcpy(v23, v24, v25);
              }
            }
            else
            {
              if (v25 < 0x10)
              {
                v30 = (unsigned __int128 *)v23;
              }
              else
              {
                v30 = (unsigned __int128 *)&v23[v25 & 0xFFFFFFF0];
                v31 = (unsigned __int128 *)v23;
                do
                {
                  v32 = (unsigned __int128)vld2q_s8(v24);
                  v24 += 32;
                  *v31++ = v32;
                }
                while (v31 != v30);
              }
              while (v30 != (unsigned __int128 *)&v23[v25])
              {
                v33 = *v24;
                v24 += 2;
                *(_BYTE *)v30 = v33;
                v30 = (unsigned __int128 *)((char *)v30 + 1);
              }
            }
            v26 = *(unsigned int *)(v9 + 4);
          }
          else
          {
            v26 = 0;
          }
          v27 = &v23[v26];
          if ((_DWORD)v12)
          {
            if ((_DWORD)v12 == 1)
              *v27 = v11->i8[0];
            else
              result = (int8x16_t **)memcpy(&v23[v26], v11, v12);
          }
          v28 = *v15;
          if ((_DWORD)v28)
          {
            result = (int8x16_t **)&v27[v12];
            v29 = (char *)v15 - v28;
            if ((_DWORD)v28 == 1)
              *(_BYTE *)result = *v29;
            else
              result = (int8x16_t **)memcpy(result, v29, v28);
          }
        }
        goto LABEL_35;
      }
LABEL_58:
      v16 = 0;
      goto LABEL_35;
    }
LABEL_59:
    v16 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_35;
  }
  if (!(_DWORD)v21)
    goto LABEL_59;
  if (v21 > 0x7FFFFFEF)
    goto LABEL_58;
  result = (int8x16_t **)WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20));
  v16 = v35;
  if (v35)
  {
    *(_DWORD *)v35 = 2;
    *(_DWORD *)(v35 + 4) = v21;
    *(_QWORD *)(v35 + 8) = v35 + 20;
    *(_DWORD *)(v35 + 16) = 0;
    result = (int8x16_t **)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((char *)(v35 + 20), v7, v8, v9, v11, v12, a4);
  }
LABEL_35:
  *a5 = v16;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7)
{
  char *v11;
  char *v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  int8x16_t *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int16 v45;
  unsigned int v46;
  int8x16_t *v47;
  char *v48;
  char *v49;
  __int128 v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int16 v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;

  v11 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v12 = &result[2 * (a3 & 0xFFFFFFC0)];
    v13 = 0uLL;
    do
    {
      v58.val[0] = *a2;
      v14 = a2[1];
      v62.val[0] = a2[2];
      v15 = a2[3];
      a2 += 4;
      v16 = v15;
      v62.val[1] = 0uLL;
      v66.val[0] = v14;
      v58.val[1] = 0uLL;
      v17 = result;
      vst2q_s8(v17, v58);
      v17 += 32;
      v66.val[1] = 0uLL;
      vst2q_s8(v17, v66);
      v18 = result + 64;
      vst2q_s8(v18, v62);
      v19 = result + 96;
      vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
      result += 128;
    }
    while (result != v12);
    result = v12;
  }
  while (result != v11)
  {
    v20 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v20;
    result += 2;
  }
  if (a4)
  {
    v21 = *(int8x16_t **)(a4 + 8);
    v22 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v23 = &v11[2 * v22];
      if (v22 >= 0x40)
      {
        v24 = &v11[2 * (v22 & 0xFFFFFFC0)];
        v26 = 0uLL;
        v27 = v11;
        do
        {
          v59.val[0] = *v21;
          v28 = v21[1];
          v63.val[0] = v21[2];
          v29 = v21[3];
          v21 += 4;
          v30 = v29;
          v63.val[1] = 0uLL;
          v67.val[0] = v28;
          v59.val[1] = 0uLL;
          v31 = v27;
          vst2q_s8(v31, v59);
          v31 += 32;
          v67.val[1] = 0uLL;
          vst2q_s8(v31, v67);
          v32 = v27 + 64;
          vst2q_s8(v32, v63);
          v33 = v27 + 96;
          vst2q_s8(v33, *(int8x16x2_t *)(&v26 - 1));
          v27 += 128;
        }
        while (v27 != v24);
      }
      else
      {
        v24 = v11;
      }
      while (v24 != v23)
      {
        v34 = v21->u8[0];
        v21 = (int8x16_t *)((char *)v21 + 1);
        *(_WORD *)v24 = v34;
        v24 += 2;
      }
    }
    else if ((_DWORD)v22 == 1)
    {
      *(_WORD *)v11 = v21->i16[0];
    }
    else if ((_DWORD)v22)
    {
      result = (char *)memcpy(v11, v21, 2 * v22);
    }
    v25 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v25 = 0;
  }
  v35 = &v11[2 * v25];
  v36 = &v35[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v37 = &v35[2 * (a6 & 0xFFFFFFC0)];
    v38 = 0uLL;
    do
    {
      v60.val[0] = *a5;
      v39 = a5[1];
      v64.val[0] = a5[2];
      v40 = a5[3];
      a5 += 4;
      v41 = v40;
      v64.val[1] = 0uLL;
      v68.val[0] = v39;
      v60.val[1] = 0uLL;
      v42 = v35;
      vst2q_s8(v42, v60);
      v42 += 32;
      v68.val[1] = 0uLL;
      vst2q_s8(v42, v68);
      v43 = v35 + 64;
      vst2q_s8(v43, v64);
      v44 = v35 + 96;
      vst2q_s8(v44, *(int8x16x2_t *)(&v38 - 1));
      v35 += 128;
    }
    while (v35 != v37);
    v35 = v37;
  }
  while (v35 != v36)
  {
    v45 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v35 = v45;
    v35 += 2;
  }
  v46 = *(_DWORD *)(a7 + 16);
  v47 = (int8x16_t *)(a7 + 16 - v46);
  v48 = &v36[2 * v46];
  if (v46 >= 0x40)
  {
    v49 = &v36[2 * (v46 & 0xFFFFFFC0)];
    v50 = 0uLL;
    do
    {
      v61.val[0] = *v47;
      v51 = v47[1];
      v65.val[0] = v47[2];
      v52 = v47[3];
      v47 += 4;
      v53 = v52;
      v65.val[1] = 0uLL;
      v69.val[0] = v51;
      v61.val[1] = 0uLL;
      v54 = v36;
      vst2q_s8(v54, v61);
      v54 += 32;
      v69.val[1] = 0uLL;
      vst2q_s8(v54, v69);
      v55 = v36 + 64;
      vst2q_s8(v55, v65);
      v56 = v36 + 96;
      vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
      v36 += 128;
    }
    while (v36 != v49);
    v36 = v49;
  }
  while (v36 != v48)
  {
    v57 = v47->u8[0];
    v47 = (int8x16_t *)((char *)v47 + 1);
    *(_WORD *)v36 = v57;
    v36 += 2;
  }
  return result;
}

uint64_t WebCore::Node::moveShadowTreeToNewDocumentFastCase(WebCore::Node *this, WebCore::ShadowRoot *a2, WebCore::Document *a3, WebCore::Document *a4)
{
  uint64_t v7;
  int *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  __int16 v11;
  uint64_t v12;
  WebCore::Node *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  BOOL v29;
  WebCore::Node *v30;
  WebCore::Document *v31;
  uint64_t result;

  LODWORD(v7) = 0;
  v8 = &dword_1ECE90000;
  v9 = this;
  while (1)
  {
    v10 = v9;
    v11 = *((_WORD *)v9 + 14);
    if (((v11 & 0x800) != 0
       || (*((_BYTE *)v10 + 23) & 6) != 0
       || (*((_QWORD *)v10 + 9) & 0x3000000000000000) == 0x2000000000000000)
      && (v11 & 8) != 0)
    {
      (*(void (**)(WebCore::Node *, WebCore::ShadowRoot *, WebCore::Document *, WebCore::Document *))(*(_QWORD *)v10 + 488))(v10, a2, a3, a4);
      v11 = *((_WORD *)v10 + 14);
    }
    v12 = (v7 + 1);
    v13 = (v11 & 8) != 0 ? v10 : 0;
    if ((v11 & 8) != 0)
    {
      if ((*((_BYTE *)v10 + 22) & 0x80) == 0)
        goto LABEL_27;
      v14 = *((_QWORD *)v8 + 161);
      v15 = *(_DWORD *)(v14 - 8);
      v16 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      for (i = 1; ; ++i)
      {
        v21 = v19;
        v22 = *(_QWORD *)(v14 + 24 * v19);
        if (v22 == -1)
          goto LABEL_16;
        if (!v22)
          break;
        if (*(WebCore::Node **)(v22 + 8) == v10)
          goto LABEL_18;
LABEL_16:
        v19 = (v21 + i) & v15;
      }
      v21 = *(_DWORD *)(v14 - 4);
LABEL_18:
      v23 = v14 + 24 * v21;
      v24 = *(unsigned int *)(v23 + 20);
      if ((_DWORD)v24)
      {
        v25 = *(uint64_t **)(v23 + 8);
        v26 = 8 * v24;
        v12 = v7 + ((unint64_t)(8 * v24 - 8) >> 3) + 2;
        do
        {
          v27 = *v25;
          v28 = *(_WORD *)(*v25 + 28);
          if (((v28 & 0x800) != 0
             || (*(_BYTE *)(v27 + 23) & 6) != 0
             || (*(_QWORD *)(v27 + 72) & 0x3000000000000000) == 0x2000000000000000)
            && (v28 & 8) != 0)
          {
            (*(void (**)(uint64_t, WebCore::ShadowRoot *, WebCore::Document *, WebCore::Document *))(*(_QWORD *)v27 + 488))(v27, a2, a3, a4);
          }
          ++v25;
          v26 -= 8;
        }
        while (v26);
        v8 = &dword_1ECE90000;
      }
LABEL_27:
      if ((*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v30 = *(WebCore::Node **)((*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v30)
          break;
      }
    }
    v7 = v12;
LABEL_29:
    if ((*((_WORD *)v10 + 14) & 4) != 0)
    {
      v9 = (WebCore::Node *)*((_QWORD *)v10 + 10);
      if (v9)
        continue;
    }
    if (v10 == this)
      return v7;
    while (1)
    {
      v9 = (WebCore::Node *)*((_QWORD *)v10 + 7);
      if (v9)
        break;
      v10 = (WebCore::Node *)*((_QWORD *)v10 + 4);
      if (v10)
        v29 = v10 == this;
      else
        v29 = 1;
      if (v29)
        return v7;
    }
  }
  if (*(WebCore::ShadowRoot **)(*((_QWORD *)v30 + 5) + 8) == a2)
  {
    WebCore::ShadowRoot::moveShadowRootToNewDocument(*(WebCore::ShadowRoot **)((*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL) + 0x58), a2, a3);
    v7 = WebCore::Node::moveShadowTreeToNewDocumentFastCase(v30, a2, a3, v31) + v12;
    goto LABEL_29;
  }
  result = 2242;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Node::moveShadowTreeToNewDocumentSlowCase(WebCore::Node *this, WebCore::ShadowRoot *a2, WebCore::Document *a3, WebCore::Document *a4)
{
  WebCore::Node *v7;
  WebCore::Node *v8;
  uint64_t result;
  __int16 v10;
  WebCore::Node *v11;
  uint64_t v12;
  WebCore::Node **v13;
  uint64_t v14;
  WebCore::Node *v15;
  BOOL v16;
  WebCore::ShadowRoot *v17;
  WebCore::Document *v18;

  v7 = this;
  while (1)
  {
    v8 = v7;
    result = WebCore::Node::moveNodeToNewDocumentSlowCase(v7, a2, a3);
    v10 = *((_WORD *)v8 + 14);
    if ((v10 & 8) != 0)
      v11 = v8;
    else
      v11 = 0;
    if ((v10 & 8) == 0)
      goto LABEL_11;
    if ((*((_BYTE *)v8 + 22) & 0x80) != 0)
    {
      result = (uint64_t)WebCore::Element::attrNodeList(v8);
      v12 = *(unsigned int *)(result + 12);
      if ((_DWORD)v12)
      {
        v13 = *(WebCore::Node ***)result;
        v14 = 8 * v12;
        do
        {
          v15 = *v13++;
          result = WebCore::Node::moveNodeToNewDocumentSlowCase(v15, a2, a3);
          v14 -= 8;
        }
        while (v14);
      }
    }
    if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_11;
    v17 = *(WebCore::ShadowRoot **)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (!v17)
      goto LABEL_11;
    if (*(WebCore::ShadowRoot **)(*((_QWORD *)v17 + 5) + 8) != a2)
      break;
    WebCore::ShadowRoot::moveShadowRootToNewDocument(v17, a2, a3);
    result = WebCore::Node::moveShadowTreeToNewDocumentSlowCase(v17, a2, a3, v18);
LABEL_11:
    if ((*((_WORD *)v8 + 14) & 4) != 0)
    {
      v7 = (WebCore::Node *)*((_QWORD *)v8 + 10);
      if (v7)
        continue;
    }
    if (v8 == this)
      return result;
    while (1)
    {
      v7 = (WebCore::Node *)*((_QWORD *)v8 + 7);
      if (v7)
        break;
      v8 = (WebCore::Node *)*((_QWORD *)v8 + 4);
      if (v8)
        v16 = v8 == this;
      else
        v16 = 1;
      if (v16)
        return result;
    }
  }
  result = 2254;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::depth<(WebCore::TreeType)2>(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  for (result = 0; ; ++result)
  {
    v4 = (uint64_t *)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 8) != 0)
      {
        v5 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL;
        if (v5)
        {
          v7 = *(_QWORD *)(v5 + 88);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 224);
            if (v8)
            {
              v12 = result;
              v13 = a1;
              v11 = (uint64_t *)(a1 + 32);
              v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a1);
              a1 = v13;
              v6 = v9;
              v4 = v11;
              result = v12;
              if (v6)
                goto LABEL_7;
            }
          }
        }
      }
    }
    if ((*(_WORD *)(a1 + 28) & 0x80) != 0)
      break;
LABEL_6:
    v6 = *v4;
    if (!*v4)
      return result;
LABEL_7:
    a1 = v6;
  }
  v10 = *(_QWORD *)(a1 + 200);
  if (v10)
  {
    v4 = (uint64_t *)(v10 + 8);
    goto LABEL_6;
  }
  return result;
}

uint64_t WebCore::PendingScript::notifyClientFinished(WebCore::PendingScript *this, void *a2)
{
  int v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = v3 + 1;
  result = *((_QWORD *)this + 6);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, WebCore::PendingScript *))(*(_QWORD *)result + 48))(result, this);
    v3 = *((_DWORD *)this + 4) - 1;
  }
  if (v3)
  {
    *((_DWORD *)this + 4) = v3;
  }
  else
  {
    WebCore::PendingScript::~PendingScript(this, a2);
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::PendingScript::setClient(WebCore::PendingScript *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  void *v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v4 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = a2;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  result = *((_QWORD *)a1 + 5);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      return WebCore::PendingScript::notifyClientFinished(a1, v6);
  }
  return result;
}

int *WebCore::PointerEvent::create@<X0>(WebCore *a1@<X0>, WTF::StringImpl *a2@<X1>, int a3@<W2>, WTF **a4@<X3>, WebCore::EventNames ***a5@<X8>)
{
  char v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int *result;
  int v15;
  int v16;
  WebCore::EventNames **v17;
  int *v18;

  v8 = (char)a1;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    v11 = WebCore::threadGlobalDataSlow(a1);
  v12 = *(_QWORD **)(v11 + 40);
  if (!v12)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *(_QWORD **)(v11 + 40);
  }
  v13 = *((_QWORD *)a2 + 3);
  if (v13 == v12[151])
  {
    result = (int *)v12[186];
    if (result)
      goto LABEL_16;
    goto LABEL_26;
  }
  if (v13 == v12[156])
  {
    result = (int *)v12[193];
    if (!result)
      goto LABEL_26;
    goto LABEL_16;
  }
  if (v13 == v12[152])
  {
    result = (int *)v12[187];
    if (result)
      goto LABEL_16;
LABEL_26:
    *a5 = 0;
    return result;
  }
  if (v13 == v12[154])
  {
    result = (int *)v12[191];
    if (!result)
      goto LABEL_26;
  }
  else if (v13 == v12[153])
  {
    result = (int *)v12[188];
    if (!result)
      goto LABEL_26;
  }
  else if (v13 == v12[155])
  {
    result = (int *)v12[192];
    if (!result)
      goto LABEL_26;
  }
  else if (v13 == v12[157])
  {
    result = (int *)v12[194];
    if (!result)
      goto LABEL_26;
  }
  else
  {
    result = (int *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_26;
  }
LABEL_16:
  v15 = *result;
  v16 = result[1];
  *result += 2;
  v18 = result;
  if (!v16)
  {
    *a5 = 0;
    v18 = 0;
    if (v15)
      goto LABEL_19;
    return (int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
  }
  v17 = (WebCore::EventNames **)bmalloc::api::isoAllocate();
  WebCore::PointerEvent::PointerEvent(v17, &v18, v8, (uint64_t)a2, a3, a4);
  result = v18;
  *a5 = v17;
  v18 = 0;
  if (!result)
    return result;
  v15 = *result - 2;
  if (*result == 2)
    return (int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
LABEL_19:
  *result = v15;
  return result;
}

uint64_t *WebCore::mousePointerEventType(WebCore *this)
{
  {
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  return &WebCore::mousePointerEventType(void)::mouseType;
}

uint64_t WebCore::PointerEvent::PointerEvent(WebCore::EventNames **a1, _QWORD *a2, char a3, uint64_t a4, int a5, WTF **a6)
{
  uint64_t v11;
  unint64_t StatusReg;
  uint64_t v13;
  WebCore::EventNames **v14;
  WebCore::EventNames *v15;
  int v16;
  uint64_t v17;
  WebCore::EventNames **v18;
  WebCore::EventNames *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF *v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  const WTF::StringImpl *v29;
  WTF *v30;
  const WTF::StringImpl *v36;
  float v37;
  double v38;
  double v39;
  double v40;
  WTF *v41;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  int32x2_t v47;
  WTF *v48;

  v11 = (uint64_t)a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = *(_QWORD *)(StatusReg + 736);
  if (!v13 || (v14 = *(WebCore::EventNames ***)(v13 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v14 = a1;
  }
  v15 = v14[5];
  if (!v15)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v14);
    v15 = v14[5];
  }
  v16 = *a2 != *((_QWORD *)v15 + 187) && *a2 != *((_QWORD *)v15 + 188);
  v17 = *(_QWORD *)(StatusReg + 736);
  if (!v17 || (v18 = *(WebCore::EventNames ***)(v17 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v18 = a1;
  }
  v19 = v18[5];
  if (!v19)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v18);
    v19 = v18[5];
  }
  v20 = *a2 != *((_QWORD *)v19 + 187) && *a2 != *((_QWORD *)v19 + 188);
  v21 = *(_QWORD *)(StatusReg + 736);
  if (!v21 || (v22 = *(_QWORD *)(v21 + 96)) == 0)
    v22 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v23 = *(_QWORD *)(v22 + 40);
  if (!v23)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v22);
    v23 = *(_QWORD *)(v22 + 40);
  }
  v24 = *a2 != *(_QWORD *)(v23 + 1496) && *a2 != *(_QWORD *)(v23 + 1504);
  v25 = *(WTF **)(a4 + 72);
  if (v25)
    ++*(_DWORD *)v25;
  v48 = v25;
  v26 = *(_DWORD *)(a4 + 80);
  v27 = *(_DWORD *)(a4 + 100);
  v47.i32[0] = *(_DWORD *)(a4 + 96) / 64;
  v47.i32[1] = v27 / 64;
  WebCore::MouseEvent::MouseEvent(v11, 82, a2, v16, v20, v24, (uint64_t *)&v48, v26, *(double *)(a4 + 104), *(double *)(a4 + 112), (_QWORD *)(a4 + 88), &v47, *(_BYTE *)(a4 + 84), 0, a3, *(_WORD *)(a4 + 156), *(_BYTE *)(a4 + 158), *(_QWORD *)(a4 + 160));
  v30 = v48;
  v48 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      v43 = (uint64_t *)*((_QWORD *)v30 + 2);
      *((_QWORD *)v30 + 2) = 0;
      if (v43)
      {
        if (*v43)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v43, v28);
        WTF::fastFree((WTF *)v43, v28);
      }
      v44 = (unsigned int *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = 0;
      if (v44)
      {
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v44);
          WTF::fastFree((WTF *)v44, v28);
        }
      }
      WTF::fastFree(v30, v28);
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
  *(_QWORD *)v11 = off_1E33A6AB8;
  *(_DWORD *)(v11 + 176) = a5;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v11 + 184) = _Q0;
  {
    v36 = (const WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
  }
  else
  {
    v36 = (const WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  if ((WTF::equal(*a6, v36, v29) & 1) != 0)
  {
    v37 = 0.5;
    if (!*(_WORD *)(v11 + 156))
      v37 = 0.0;
  }
  else
  {
    v38 = *(double *)(a4 + 168);
    v39 = 1.0;
    if (v38 <= 1.0)
      v39 = *(double *)(a4 + 168);
    _NF = v38 < 0.0;
    v40 = 0.0;
    if (!_NF)
      v40 = v39;
    v37 = v40;
  }
  *(float *)(v11 + 200) = v37;
  *(_QWORD *)(v11 + 204) = 0;
  *(_QWORD *)(v11 + 220) = 0;
  *(_QWORD *)(v11 + 212) = 0;
  *(_DWORD *)(v11 + 228) = 0;
  v41 = *a6;
  if (*a6)
    *(_DWORD *)v41 += 2;
  *(_QWORD *)(v11 + 232) = v41;
  *(_BYTE *)(v11 + 240) = 1;
  return v11;
}

uint64_t WebCore::PointerEvent::PointerEvent(WebCore::EventNames **a1, uint64_t *a2, int a3, _DWORD **a4, char a5)
{
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  WebCore::EventNames **v11;
  WebCore::EventNames *v12;
  int v13;
  uint64_t v14;
  WebCore::EventNames **v15;
  WebCore::EventNames *v16;
  int v17;
  uint64_t v18;
  WebCore::EventNames **v19;
  WebCore::EventNames *v20;
  int v21;
  uint64_t v22;
  WebCore::EventNames **v23;
  WebCore::EventNames *v24;
  __int16 v25;
  uint64_t v26;
  WebCore::EventNames **v27;
  WebCore::EventNames *v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  WebCore::MouseRelatedEvent *v32;
  float v38;
  _DWORD *v39;
  uint64_t v42;

  v8 = (uint64_t)a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (v11 = *(WebCore::EventNames ***)(v10 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v11 = a1;
  }
  v12 = v11[5];
  if (!v12)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v11);
    v12 = v11[5];
  }
  v13 = *a2 != *((_QWORD *)v12 + 187) && *a2 != *((_QWORD *)v12 + 188);
  v14 = *(_QWORD *)(StatusReg + 736);
  if (!v14 || (v15 = *(WebCore::EventNames ***)(v14 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v15 = a1;
  }
  v16 = v15[5];
  if (!v16)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v15);
    v16 = v15[5];
  }
  v17 = *a2 != *((_QWORD *)v16 + 187) && *a2 != *((_QWORD *)v16 + 188);
  v18 = *(_QWORD *)(StatusReg + 736);
  if (!v18 || (v19 = *(WebCore::EventNames ***)(v18 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v19 = a1;
  }
  v20 = v19[5];
  if (!v20)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v19);
    v20 = v19[5];
  }
  v21 = *a2 != *((_QWORD *)v20 + 187) && *a2 != *((_QWORD *)v20 + 188);
  v22 = *(_QWORD *)(StatusReg + 736);
  if (!v22 || (v23 = *(WebCore::EventNames ***)(v22 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v23 = a1;
  }
  v24 = v23[5];
  if (!v24)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v23);
    v24 = v23[5];
  }
  v25 = *a2 != *((_QWORD *)v24 + 194) && *a2 != *((_QWORD *)v24 + 186);
  v26 = *(_QWORD *)(StatusReg + 736);
  if (!v26 || (v27 = *(WebCore::EventNames ***)(v26 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v27 = a1;
  }
  v28 = v27[5];
  if (!v28)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v27);
    v28 = v27[5];
  }
  v29 = *a2;
  v30 = *a2 != *((_QWORD *)v28 + 194)
     && v29 != *((_QWORD *)v28 + 192)
     && v29 != *((_QWORD *)v28 + 188)
     && v29 != *((_QWORD *)v28 + 185);
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v42 = 0;
  v32 = (WebCore::MouseRelatedEvent *)WebCore::Event::Event(v8, 82, a2, v13, v17, v21, 1, v31);
  *(_QWORD *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 84) = 0;
  *(_QWORD *)v8 = off_1E33A5D38;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_WORD *)(v8 + 152) = 0;
  WebCore::MouseRelatedEvent::init(v32, 0, (const WebCore::IntPoint *)&v42);
  *(_QWORD *)v8 = off_1E33A5C38;
  *(_WORD *)(v8 + 154) = (__int16)(v25 << 15) >> 15;
  *(_WORD *)(v8 + 156) = v30;
  *(_WORD *)(v8 + 158) = 256;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  v42 = 0;
  WebCore::MouseRelatedEvent::initCoordinates((WebCore::MouseRelatedEvent *)v8, (const WebCore::LayoutPoint *)&v42);
  *(_QWORD *)v8 = off_1E33A6AB8;
  *(_DWORD *)(v8 + 176) = a3;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v8 + 184) = _Q0;
  v38 = 0.5;
  if (!*(_WORD *)(v8 + 156))
    v38 = 0.0;
  *(float *)(v8 + 200) = v38;
  *(_QWORD *)(v8 + 204) = 0;
  *(_QWORD *)(v8 + 220) = 0;
  *(_QWORD *)(v8 + 212) = 0;
  *(_DWORD *)(v8 + 228) = 0;
  v39 = *a4;
  if (*a4)
    *v39 += 2;
  *(_QWORD *)(v8 + 232) = v39;
  *(_BYTE *)(v8 + 240) = a5;
  return v8;
}

void WebCore::PointerEvent::~PointerEvent(WebCore::PointerEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E33A5C38;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  WebCore::UIEvent::~UIEvent(this, a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E33A5C38;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  WebCore::UIEvent::~UIEvent(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t *WebCore::penPointerEventType(WebCore *this)
{
  {
    WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::penPointerEventType(void)::penType = (uint64_t)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
  }
  return &WebCore::penPointerEventType(void)::penType;
}

void WebCore::PopStateEvent::~PopStateEvent(WebCore::PopStateEvent *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;

  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    WTF::RefCounted<WebCore::History>::deref(v3 + 8, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v4 + 2), a2);
      WTF::fastFree((WTF *)v4, v8);
    }
  }
  v7 = *((_QWORD *)this + 10);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 10) = 0;
  }
  WebCore::Event::~Event(this, a2);
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  void *v10;

  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    WTF::RefCounted<WebCore::History>::deref(v3 + 8, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v4 + 2), a2);
      WTF::fastFree((WTF *)v4, v10);
    }
  }
  v7 = *((_QWORD *)this + 10);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 10) = 0;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

uint64_t WebCore::PopStateEvent::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, WebCore **a3@<X8>)
{
  WebCore *v6;
  WebCore *v7;
  uint64_t v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (WebCore *)bmalloc::api::isoAllocate();
  v7 = v6;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(WebCore **)(v8 + 96)) == 0)
  {
    v6 = (WebCore *)WebCore::threadGlobalDataSlow(v6);
    v9 = v6;
  }
  v10 = *((_QWORD *)v9 + 5);
  if (!v10)
  {
    v6 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *((_QWORD *)v9 + 5);
  }
  result = WTF::MonotonicTime::now(v6);
  *((_QWORD *)v7 + 1) = 0;
  v13 = *((_DWORD *)v7 + 5) & 0xFFC00000 | 0x298200 | (*(_QWORD *)(v10 + 1560) != 0);
  *((_DWORD *)v7 + 4) = 1;
  *((_DWORD *)v7 + 5) = v13;
  v14 = *(_DWORD **)(v10 + 1560);
  if (v14)
    *v14 += 2;
  *((_QWORD *)v7 + 3) = v14;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = v12;
  *(_QWORD *)v7 = off_1E33A66C0;
  *((_QWORD *)v7 + 9) = 0;
  *((_QWORD *)v7 + 10) = 0;
  *((_QWORD *)v7 + 8) = 0;
  __dmb(0xAu);
  v15 = *((_QWORD *)v7 + 10);
  *((_QWORD *)v7 + 10) = 0;
  if (v15)
    *(_QWORD *)(v15 + 8) = 3;
  v16 = *a1;
  *a1 = 0;
  *((_QWORD *)v7 + 11) = v16;
  *((_WORD *)v7 + 48) = 0;
  if (a2)
    ++*(_DWORD *)(a2 + 8);
  *((_QWORD *)v7 + 13) = a2;
  *a3 = v7;
  return result;
}

_QWORD *WebCore::PopStateEvent::create@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v8 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  *(_QWORD *)(v8 + 8) = 0;
  if (a3)
    v14 = 2720256;
  else
    v14 = 2719744;
  v15 = v14 | (2 * v11) | (4 * v12) | (8 * v13) | (*a1 != 0) | *(_DWORD *)(v8 + 20) & 0xFFC00000;
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v15;
  v16 = (_DWORD *)*a1;
  if (*a1)
  {
    *v16 += 2;
    v15 = *(_DWORD *)(v8 + 20);
  }
  *(_QWORD *)(v8 + 24) = v16;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 20) = v15 | 0x4000;
  *(_QWORD *)v8 = off_1E33A66C0;
  v17 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  if ((v17 & 0xFFFE000000000002) != 0)
  {
    *(_QWORD *)(v8 + 72) = v17;
  }
  else
  {
    if (v17)
    {
      if ((v17 & 8) != 0)
        v19 = (v17 - 112) | 1;
      else
        v19 = v17 & 0xFFFFFFFFFFFFC000;
      if ((v19 & 1) != 0)
        v20 = v19 + 47;
      else
        v20 = *(_QWORD *)v19 + 32;
      result = *(_QWORD **)(v20 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v20 + 16) = *result;
      *result = v17;
      result[1] = 0;
      result[2] = 0;
    }
    else
    {
      result = 0;
    }
    __dmb(0xAu);
    v18 = *(_QWORD *)(v8 + 80);
    *(_QWORD *)(v8 + 80) = result;
    if (v18)
      *(_QWORD *)(v18 + 8) = 3;
  }
  *(_QWORD *)(v8 + 88) = 0;
  *(_BYTE *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 97) = a2[16];
  *(_QWORD *)(v8 + 104) = 0;
  *a4 = v8;
  return result;
}

uint64_t *WebCore::PopStateEvent::trySerializeState@<X0>(uint64_t *this@<X0>, JSC::JSGlobalObject *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  int v19;
  WTF *v20;
  uint64_t v21;

  v4 = (unsigned int *)this[11];
  if (v4)
  {
    do
LABEL_2:
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    goto LABEL_6;
  }
  v6 = this;
  if (*((_BYTE *)this + 96))
  {
    v4 = 0;
    goto LABEL_6;
  }
  v7 = this[9];
  if (!v7)
  {
    v8 = this[10];
    if (v8 && (v7 = *(_QWORD *)v8) != 0)
    {
      if ((*(_BYTE *)(v8 + 8) & 3) != 0)
        v7 = 10;
    }
    else
    {
      v7 = 10;
    }
  }
  v20 = 0;
  v21 = 0;
  v17[0] = 0;
  v17[1] = 0;
  WebCore::SerializedScriptValue::create(a2, v7, (uint64_t)v17, (uint64_t)&v20, 0, 0, 0, (uint64_t)v18);
  if (!v19)
  {
    v10 = (unsigned int *)v18[0];
    v18[0] = 0;
LABEL_14:
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v19])(v17, v18);
    v4 = v10;
    goto LABEL_15;
  }
  v10 = 0;
  v4 = 0;
  if (v19 != -1)
    goto LABEL_14;
LABEL_15:
  this = (uint64_t *)v20;
  if (!HIDWORD(v21))
  {
    if (!v20)
      goto LABEL_17;
    goto LABEL_30;
  }
  v16 = 8 * HIDWORD(v21);
  do
  {
    this = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(this, v9)+ 1;
    v16 -= 8;
  }
  while (v16);
  this = (uint64_t *)v20;
  if (v20)
  {
LABEL_30:
    v20 = 0;
    LODWORD(v21) = 0;
    this = (uint64_t *)WTF::fastFree((WTF *)this, v9);
  }
LABEL_17:
  v11 = (unsigned int *)v6[11];
  v6[11] = (uint64_t)v4;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v14 = (WTF *)v11;
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v11 + 2), v9);
      this = (uint64_t *)WTF::fastFree(v14, v15);
    }
    v4 = (unsigned int *)v6[11];
  }
  *((_BYTE *)v6 + 96) = 1;
  if (v4)
    goto LABEL_2;
LABEL_6:
  *a3 = v4;
  return this;
}

uint64_t WebCore::treeOrder<(WebCore::TreeType)2>(WebCore *this, uint64_t a2)
{
  uint64_t v2;
  WebCore::Node *v3;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  char *v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  WebCore::Node *v22;
  unint64_t v23;
  WebCore::Node *v24[2];
  char v25;
  WebCore::Node *v26[2];
  char v27;

  v2 = *(_QWORD *)this;
  v3 = *(WebCore::Node **)a2;
  if (!*(_QWORD *)this)
  {
    if (!v3)
    {
      v15 = &std::partial_ordering::equivalent;
      return *v15;
    }
LABEL_21:
    v15 = &std::partial_ordering::unordered;
    return *v15;
  }
  if (!v3)
    goto LABEL_21;
  v6 = *((_BYTE *)this + 12) & 7;
  if (v6 > 4)
  {
    v8 = 0;
  }
  else
  {
    v7 = 1 << v6;
    v8 = *(_QWORD *)this;
    if ((v7 & 0x19) == 0)
      goto LABEL_30;
  }
  while (1)
  {
    v9 = *(_BYTE *)(a2 + 12) & 7;
    if (v9 > 4)
      break;
    v10 = 1;
    if (((1 << v9) & 0x19) == 0)
      v10 = *((_QWORD *)v3 + 4) != 0;
    v11 = v8 != 0;
    if (!v8 || !v10)
      goto LABEL_33;
    WebCore::makeBoundaryPoint((uint64_t *)this, (uint64_t)v26);
    if (v27)
    {
      WebCore::makeBoundaryPoint((uint64_t *)a2, (uint64_t)v24);
      if (v25)
      {
        v12 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)v26, (uint64_t)v24);
        if (v25)
        {
          v13 = v24[0];
          v24[0] = 0;
          if (v13)
          {
            if (*((_DWORD *)v13 + 6) == 2)
            {
              if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v13);
            }
            else
            {
              *((_DWORD *)v13 + 6) -= 2;
            }
          }
        }
        if (v27)
        {
          v14 = v26[0];
          v26[0] = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 6) == 2)
            {
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v14);
            }
            else
            {
              *((_DWORD *)v14 + 6) -= 2;
            }
          }
        }
        return v12;
      }
    }
    __break(1u);
LABEL_30:
    v8 = *(_QWORD *)(v2 + 32);
  }
  v10 = 0;
  v11 = v8 != 0;
LABEL_33:
  if ((WebCore::Node *)v2 == v3)
    goto LABEL_35;
  v17 = WebCore::depth<(WebCore::TreeType)2>(v2);
  v18 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v3);
  v19 = v18 - v17;
  v20 = v17 >= v18;
  v21 = v17 - v18;
  if (v17 >= v18)
    v22 = (WebCore::Node *)v2;
  else
    v22 = v3;
  if (v20)
  {
    v23 = v21;
  }
  else
  {
    v3 = (WebCore::Node *)v2;
    v23 = v19;
  }
  for (; v23; --v23)
    v22 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v22);
  if (v22 != v3)
  {
    do
    {
      v22 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v22);
      v3 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v3);
    }
    while (v22 != v3);
    if (!v22)
      return 129;
  }
LABEL_35:
  if (!v11 && !v10 && ((*(_BYTE *)(a2 + 12) ^ *((_BYTE *)this + 12)) & 7) == 0)
    return 0;
  if (v10)
  {
    if ((*((_BYTE *)this + 12) & 7) == 1)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  else if ((*(_BYTE *)(a2 + 12) & 7) == 1)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t WebCore::Position::containerNode(WebCore::Position *this)
{
  uint64_t result;
  unsigned int v3;

  result = *(_QWORD *)this;
  if (result)
  {
    v3 = *((_BYTE *)this + 12) & 7;
    if (v3 > 4)
    {
      return 0;
    }
    else if (((1 << v3) & 0x19) == 0)
    {
      return *(_QWORD *)(result + 32);
    }
  }
  return result;
}

uint64_t *WebCore::makeBoundaryPoint@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *this;
  if (!*this
    || (v4 = *((_BYTE *)this + 12) & 7, v4 > 4)
    || (v5 = 1 << v4, v6 = *this, (v5 & 0x19) == 0) && (v6 = *(_QWORD *)(v3 + 32)) == 0)
  {
    v9 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_7;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *((_BYTE *)this + 12) & 7;
  if ((*((_BYTE *)this + 12) & 7) != 0)
  {
    switch(v7)
    {
      case 4:
        v10 = *(_WORD *)(v3 + 28);
        if ((v10 & 1) != 0)
        {
          v8 = *(_QWORD *)(v3 + 80);
          if (v8)
            LODWORD(v8) = *(_DWORD *)(v8 + 4);
          goto LABEL_6;
        }
        if ((v10 & 4) != 0)
        {
          v11 = *(_QWORD *)(v3 + 80);
          if (v11)
          {
            LODWORD(v8) = 0;
            do
            {
              LODWORD(v8) = v8 + 1;
              v11 = *(_QWORD *)(v11 + 56);
            }
            while (v11);
            goto LABEL_6;
          }
        }
        break;
      case 1:
        v13 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        if (v13)
        {
          LODWORD(v8) = 0;
          do
          {
            LODWORD(v8) = v8 + 1;
            v13 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v13);
          goto LABEL_6;
        }
        break;
      case 2:
        v12 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        if (v12)
        {
          LODWORD(v8) = 1;
          do
          {
            LODWORD(v8) = v8 + 1;
            v12 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v12);
        }
        else
        {
          LODWORD(v8) = 1;
        }
        goto LABEL_6;
    }
    LODWORD(v8) = 0;
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 2);
  }
LABEL_6:
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v8;
  v9 = 1;
LABEL_7:
  *(_BYTE *)(a2 + 16) = v9;
  return this;
}

uint64_t WebCore::Position::Position(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  char v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = a3;
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4) & 1) == 0)
  {
    if (a3)
      v6 = 10;
    else
      v6 = 9;
  }
  else
  {
    v6 = 8;
  }
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a1 + 12) & 0xF0 | v6;
  return a1;
}

{
  uint64_t v4;
  char v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = a3;
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4) & 1) == 0)
  {
    if (a3)
      v6 = 10;
    else
      v6 = 9;
  }
  else
  {
    v6 = 8;
  }
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a1 + 12) & 0xF0 | v6;
  return a1;
}

uint64_t WebCore::Position::Position(uint64_t result, uint64_t *a2, char a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = *(_BYTE *)(result + 12) & 0xF0 | a3 & 7;
  return result;
}

{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = *(_BYTE *)(result + 12) & 0xF0 | a3 & 7;
  return result;
}

uint64_t WebCore::Position::Position(uint64_t result, uint64_t *a2, int a3, char a4)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v4;
  *(_DWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 12) = *(_BYTE *)(result + 12) & 0xF0 | a4 & 7;
  return result;
}

{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v4;
  *(_DWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 12) = *(_BYTE *)(result + 12) & 0xF0 | a4 & 7;
  return result;
}

uint64_t WebCore::Position::Position(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  *(_DWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 12) &= 0xF0u;
  return result;
}

uint64_t WebCore::Position::moveToOffset(uint64_t this, int a2)
{
  uint64_t v2;
  char v4;

  *(_DWORD *)(this + 8) = a2;
  if ((*(_BYTE *)(this + 12) & 8) != 0)
  {
    v2 = this;
    this = *(_QWORD *)this;
    if (this && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 208))(this), (this & 1) == 0))
    {
      if (a2)
        v4 = 2;
      else
        v4 = 1;
    }
    else
    {
      v4 = 0;
    }
    *(_BYTE *)(v2 + 12) = *(_BYTE *)(v2 + 12) & 0xF8 | v4;
  }
  return this;
}

uint64_t WebCore::Position::offsetForPositionAfterAnchor(WebCore::Position *this)
{
  _WORD *v1;
  int v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_WORD **)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = *((_DWORD *)v1 + 6);
  *((_DWORD *)v1 + 6) = v2 + 2;
  v3 = v1[14];
  if ((v3 & 1) != 0)
  {
    v7 = *((_QWORD *)v1 + 10);
    if (v7)
      v5 = *(unsigned int *)(v7 + 4);
    else
      v5 = 0;
  }
  else if ((v3 & 4) != 0 && (v4 = *((_QWORD *)v1 + 10)) != 0)
  {
    LODWORD(v5) = 0;
    do
    {
      v5 = (v5 + 1);
      v4 = *(_QWORD *)(v4 + 56);
    }
    while (v4);
  }
  else
  {
    v5 = (*(unsigned int (**)(_WORD *))(*(_QWORD *)v1 + 208))(v1) ^ 1;
    v2 = *((_DWORD *)v1 + 6) - 2;
  }
  if (v2)
  {
    *((_DWORD *)v1 + 6) = v2;
  }
  else if ((v1[15] & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v5;
}

WebCore::Node *WebCore::positionInParentBeforeNode@<X0>(WebCore *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v4;
  WebCore::Node *v5;
  WebCore::Node *result;
  uint64_t v7;
  int i;
  uint64_t v9;
  WebCore::Node *v10;
  WebCore::Node *v11;

  if (this)
    *((_DWORD *)this + 6) += 2;
  v11 = this;
  v4 = (WebCore::Node *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_DWORD *)v4 + 6) += 2;
    v10 = v4;
    while (((*(uint64_t (**)(WebCore::Node *, WebCore::Node *))(*(_QWORD *)v4 + 208))(v4, a2) & 1) == 0)
    {
      WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)&v11, (uint64_t *)&v10);
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v10, *((_QWORD *)v10 + 4));
      v5 = 0;
      v4 = v10;
      if (!v10)
        goto LABEL_8;
    }
    v5 = v10;
    if (v10)
      *((_DWORD *)v10 + 6) += 2;
  }
  else
  {
    v5 = 0;
  }
LABEL_8:
  result = v11;
  v7 = *((_QWORD *)v11 + 6);
  for (i = 0; ; ++i)
  {
    v9 = v7 & 0xFFFFFFFFFFFFLL;
    if (!v9)
      break;
    v7 = *(_QWORD *)(v9 + 48);
  }
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = i;
  *(_BYTE *)(a3 + 12) &= 0xF0u;
  v10 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v5);
        result = v11;
      }
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  v11 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::positionInParentAfterNode@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _WORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v3 = this;
  if (this)
    *(_DWORD *)(this + 24) += 2;
  v5 = *(_WORD **)(this + 32);
  if (v5)
  {
    *((_DWORD *)v5 + 6) += 2;
    while (1)
    {
      v6 = (uint64_t)v5;
      this = (*(uint64_t (**)(_WORD *, WebCore::Node *))(*(_QWORD *)v5 + 208))(v5, a2);
      v7 = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = v7 + 2;
      if ((this & 1) != 0)
        break;
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
      v5 = (_WORD *)*((_QWORD *)v5 + 4);
      if (v5)
        *((_DWORD *)v5 + 6) += 2;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      v3 = v6;
      if (!v5)
        goto LABEL_34;
    }
    v8 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = 1;
      do
      {
        ++v9;
        v8 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
      }
      while (v8);
    }
    else
    {
      v9 = 1;
    }
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = v9;
    *(_BYTE *)(a3 + 12) &= 0xF0u;
    if (v7)
    {
      *((_DWORD *)v5 + 6) = v7;
    }
    else if ((v5[15] & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    v6 = v3;
  }
  else
  {
    v6 = this;
LABEL_34:
    v10 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      v11 = 1;
      do
      {
        ++v11;
        v10 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL;
      }
      while (v10);
    }
    else
    {
      v11 = 1;
    }
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 12) &= 0xF0u;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::Position::firstNode@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v10;
  uint64_t *v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this
    || (v3 = this, v4 = *(_BYTE *)(this + 12) & 7, v4 > 4)
    || (this = *(_QWORD *)this, ((1 << v4) & 0x19) == 0) && (this = *(_QWORD *)(v2 + 32)) == 0)
  {
    *a2 = 0;
    return this;
  }
  v5 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = v5 + 2;
  if ((*(_WORD *)(this + 28) & 1) == 0)
  {
    v6 = v2;
    switch(*(_BYTE *)(v3 + 12) & 7)
    {
      case 0:
        if ((*(_WORD *)(v2 + 28) & 4) == 0)
        {
LABEL_22:
          v12 = *(_DWORD *)(v3 + 8);
          goto LABEL_31;
        }
        v7 = *(_DWORD *)(v3 + 8);
        v6 = *(_QWORD *)(v2 + 80);
        if (v7 && v6)
        {
          v8 = v7 - 1;
          do
          {
            v6 = *(_QWORD *)(v6 + 56);
            v10 = v8-- != 0;
          }
          while (v6 && v10);
        }
LABEL_20:
        if (v6)
          goto LABEL_36;
        switch(*(_BYTE *)(v3 + 12) & 7)
        {
          case 0:
            goto LABEL_22;
          case 1:
            v17 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
            if (!v17)
              goto LABEL_46;
            v12 = 0;
            do
            {
              ++v12;
              v17 = *(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v17);
            break;
          case 2:
            v18 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
            if (!v18)
              goto LABEL_32;
            v12 = 1;
            do
            {
              ++v12;
              v18 = *(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v18);
            break;
          case 4:
            goto LABEL_23;
          default:
            goto LABEL_46;
        }
        goto LABEL_31;
      case 1:
        goto LABEL_36;
      case 2:
        v11 = (uint64_t *)(v2 + 56);
        goto LABEL_19;
      case 3:
        if ((*(_WORD *)(v2 + 28) & 4) == 0)
          break;
        v11 = (uint64_t *)(v2 + 80);
LABEL_19:
        v6 = *v11;
        goto LABEL_20;
      case 4:
LABEL_23:
        v13 = *(_WORD *)(v2 + 28);
        if ((v13 & 1) != 0)
        {
          v15 = *(_QWORD *)(v2 + 80);
          if (!v15)
            break;
          v12 = *(_DWORD *)(v15 + 4);
LABEL_31:
          if (!v12)
            break;
LABEL_32:
          v6 = *(_QWORD *)(this + 56);
          if (v6)
          {
LABEL_36:
            *(_DWORD *)(v6 + 24) += 2;
            v5 = *(_DWORD *)(this + 24) - 2;
          }
          else
          {
            v16 = this;
            while (1)
            {
              v16 = *(_QWORD *)(v16 + 32);
              if (!v16)
                break;
              v6 = *(_QWORD *)(v16 + 56);
              if (v6)
                goto LABEL_36;
            }
            v6 = 0;
          }
          *a2 = v6;
          if (v5)
          {
            *(_DWORD *)(this + 24) = v5;
          }
          else if ((*(_WORD *)(this + 30) & 0x400) == 0)
          {
            return WebCore::Node::removedLastRef((WebCore::Node *)this);
          }
          return this;
        }
        if ((v13 & 4) != 0)
        {
          v14 = *(_QWORD *)(v2 + 80);
          if (v14)
          {
            v12 = 0;
            do
            {
              ++v12;
              v14 = *(_QWORD *)(v14 + 56);
            }
            while (v14);
            goto LABEL_31;
          }
        }
        break;
      default:
        break;
    }
  }
LABEL_46:
  *a2 = this;
  return this;
}

uint64_t WebCore::Position::computeNodeAfterPosition(WebCore::Position *this)
{
  uint64_t result;
  int v3;
  int v4;
  BOOL v6;

  result = *(_QWORD *)this;
  if (result)
  {
    switch(*((_BYTE *)this + 12) & 7)
    {
      case 0:
        if ((*(_WORD *)(result + 28) & 4) == 0)
          goto LABEL_17;
        v3 = *((_DWORD *)this + 2);
        result = *(_QWORD *)(result + 80);
        if (v3 && result)
        {
          v4 = v3 - 1;
          do
          {
            result = *(_QWORD *)(result + 56);
            v6 = v4-- != 0;
          }
          while (result && v6);
        }
        break;
      case 1:
        return result;
      case 2:
        result = *(_QWORD *)(result + 56);
        break;
      case 3:
        if ((*(_WORD *)(result + 28) & 4) == 0)
          goto LABEL_17;
        result = *(_QWORD *)(result + 80);
        break;
      default:
LABEL_17:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t WebCore::Position::computeNodeBeforePosition(WebCore::Position *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  int v4;
  int v5;
  BOOL v7;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = *((_BYTE *)this + 12) & 7;
  if (v2 == 4)
  {
    if ((*(_WORD *)(v1 + 28) & 4) != 0)
      return *(_QWORD *)(v1 + 88);
    return 0;
  }
  if ((*((_BYTE *)this + 12) & 7) != 0)
  {
    if (v2 == 1)
    {
      return *(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL;
    }
    else if (v2 == 2)
    {
      return *(_QWORD *)this;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v4 = *((_DWORD *)this + 2);
    if (!v4 || (*(_WORD *)(v1 + 28) & 4) == 0)
      return 0;
    result = *(_QWORD *)(v1 + 80);
    if (v4 != 1 && result)
    {
      v5 = v4 - 2;
      do
      {
        result = *(_QWORD *)(result + 56);
        v7 = v5-- != 0;
      }
      while (result && v7);
    }
  }
  return result;
}

uint64_t WebCore::Position::previous@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  _WORD *v20;
  int v21;
  BOOL v23;
  __int16 v24;
  int v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int j;
  uint64_t v46;
  int v47;
  WebCore::Node *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int i;
  uint64_t v54;
  uint64_t v55;

  v3 = result;
  v5 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 8);
    v38 = *(_BYTE *)(result + 12);
LABEL_78:
    *(_BYTE *)(a3 + 12) = v38;
    return result;
  }
  v7 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v7 + 2;
  if ((*(_BYTE *)(result + 12) & 8) == 0
    && ((v8 = *(_BYTE *)(result + 12) & 7, v8 != 4) ? (v9 = v8 == 2) : (v9 = 1), v9))
  {
    v10 = v7 + 4;
    *(_DWORD *)(v5 + 24) = v10;
    v11 = *(_WORD *)(v5 + 28);
    if ((v11 & 1) != 0)
    {
      v49 = *(_QWORD *)(v5 + 80);
      if (v49)
        v13 = *(_DWORD *)(v49 + 4);
      else
        v13 = 0;
    }
    else if ((v11 & 4) != 0 && (v12 = *(_QWORD *)(v5 + 80)) != 0)
    {
      v13 = 0;
      do
      {
        ++v13;
        v12 = *(_QWORD *)(v12 + 56);
      }
      while (v12);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 208))(v5);
      v13 = result ^ 1;
      v10 = *(_DWORD *)(v5 + 24);
    }
    v14 = v10 - 2;
    if (v14)
    {
      *(_DWORD *)(v5 + 24) = v14;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
  }
  else
  {
    v13 = *(_DWORD *)(result + 8);
  }
  if ((*(_BYTE *)(v3 + 12) & 7) != 1)
  {
    v16 = v5;
    goto LABEL_30;
  }
  v15 = *(_QWORD *)v3;
  if (*(_QWORD *)v3)
  {
    v16 = *(_QWORD *)(v15 + 32);
    if (v16)
    {
      v17 = 0;
      *(_DWORD *)(v16 + 24) += 2;
      goto LABEL_19;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = 1;
LABEL_19:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v5);
      v15 = *(_QWORD *)v3;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (!v17)
  {
    if (!v15)
      goto LABEL_57;
    v18 = *(_BYTE *)(v3 + 12) & 7;
    if ((*(_BYTE *)(v3 + 12) & 7) != 0)
    {
      switch(v18)
      {
        case 4:
          v28 = *(_WORD *)(v15 + 28);
          if ((v28 & 1) != 0)
          {
            v43 = *(_QWORD *)(v15 + 80);
            if (!v43)
              goto LABEL_57;
            v13 = *(_DWORD *)(v43 + 4);
          }
          else
          {
            if ((v28 & 4) == 0)
              goto LABEL_57;
            v29 = *(_QWORD *)(v15 + 80);
            if (!v29)
              goto LABEL_57;
            v13 = 0;
            do
            {
              ++v13;
              v29 = *(_QWORD *)(v29 + 56);
            }
            while (v29);
          }
          break;
        case 1:
          v55 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v55)
            goto LABEL_57;
          v13 = 0;
          do
          {
            ++v13;
            v55 = *(_QWORD *)(v55 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v55);
          break;
        case 2:
          v52 = *(_QWORD *)(v15 + 48);
          for (i = 0; ; ++i)
          {
            v54 = v52 & 0xFFFFFFFFFFFFLL;
            if (!v54)
              break;
            v52 = *(_QWORD *)(v54 + 48);
          }
          v13 = i + 1;
          break;
        default:
          goto LABEL_57;
      }
    }
    else
    {
      v13 = *(_DWORD *)(v3 + 8);
    }
LABEL_30:
    if (!v13)
      goto LABEL_57;
    v19 = v13 - 1;
    if ((*(_WORD *)(v16 + 28) & 4) != 0)
    {
      v20 = *(_WORD **)(v16 + 80);
      if (v13 != 1 && v20)
      {
        v21 = v13 - 2;
        do
        {
          v20 = (_WORD *)*((_QWORD *)v20 + 7);
          v23 = v21-- != 0;
        }
        while (v20 && v23);
      }
      if (v20)
      {
        *((_DWORD *)v20 + 6) += 2;
        result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v20 + 208))(v20);
        if ((result & 1) != 0)
        {
          v24 = v20[14];
          v25 = *((_DWORD *)v20 + 6);
          *((_DWORD *)v20 + 6) = v25 + 2;
          if ((v24 & 1) != 0)
          {
            v27 = *((_QWORD *)v20 + 10);
            if (v27)
              LODWORD(v27) = *(_DWORD *)(v27 + 4);
            *(_QWORD *)a3 = v20;
            *(_DWORD *)(a3 + 8) = v27;
            v26 = *(_BYTE *)(a3 + 12) & 0xF0;
          }
          else
          {
            *(_QWORD *)a3 = v20;
            *(_DWORD *)(a3 + 8) = 0;
            v26 = *(_BYTE *)(a3 + 12) & 0xF0 | 4;
          }
        }
        else
        {
          v25 = *((_DWORD *)v20 + 6);
          *((_DWORD *)v20 + 6) = v25 + 2;
          *(_QWORD *)a3 = v20;
          *(_DWORD *)(a3 + 8) = 0;
          v26 = *(_BYTE *)(a3 + 12) & 0xF0 | 2;
        }
        *(_BYTE *)(a3 + 12) = v26;
        if (v25)
        {
          *((_DWORD *)v20 + 6) = v25;
          goto LABEL_112;
        }
        if ((v20[15] & 0x400) == 0)
        {
          v48 = (WebCore::Node *)v20;
          goto LABEL_126;
        }
        goto LABEL_112;
      }
    }
    switch(a2)
    {
      case 2:
        v35 = *(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL;
        if (v35)
        {
          v34 = *(uint64_t (**)(void))(*(_QWORD *)v35 + 552);
          goto LABEL_70;
        }
        break;
      case 1:
        v33 = *(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL;
        if (v33)
        {
          v34 = *(uint64_t (**)(void))(*(_QWORD *)v33 + 544);
LABEL_70:
          v19 = v34();
        }
        break;
      case 0:
        break;
      default:
LABEL_57:
        v30 = *(_QWORD *)(v16 + 32);
        if (!v30)
        {
          v50 = *(_QWORD *)v3;
          if (*(_QWORD *)v3)
            *(_DWORD *)(v50 + 24) += 2;
          *(_QWORD *)a3 = v50;
          *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
          v51 = *(_BYTE *)(v3 + 12);
          goto LABEL_146;
        }
        *(_DWORD *)(v30 + 24) += 2;
        if ((*(_WORD *)(v16 + 28) & 0x10) != 0)
        {
          v31 = *(_DWORD *)(v16 + 24);
          *(_DWORD *)(v16 + 24) = v31 + 2;
          if ((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195A1DED4);
            }
            v32 = *(unsigned __int8 *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
            if (v31)
            {
              *(_DWORD *)(v16 + 24) = v31;
            }
            else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            {
              result = WebCore::Node::removedLastRef((WebCore::Node *)v16);
            }
            if (v32 == 35 || v32 == 63)
              goto LABEL_91;
          }
          else if (v31)
          {
            *(_DWORD *)(v16 + 24) = v31;
          }
          else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v16);
          }
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 208))(v16);
        if ((result & 1) != 0)
        {
          v39 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
          if (v39)
          {
            v40 = *(_DWORD *)((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) + 0x18);
            v41 = v40 + 2;
            *(_DWORD *)((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) = v40 + 2;
            if ((*(_WORD *)(v39 + 28) & 0x10) != 0)
            {
              *(_DWORD *)(v39 + 24) = v40 + 4;
              if ((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195A1DF0CLL);
                }
                v42 = *(unsigned __int8 *)((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
                if (v40 == -2)
                {
                  if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                    result = WebCore::Node::removedLastRef((WebCore::Node *)v39);
                }
                else
                {
                  *(_DWORD *)(v39 + 24) = v41;
                }
                if (v42 == 35 || v42 == 63)
                  goto LABEL_107;
              }
              else if (v40 == -2)
              {
                if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v39);
              }
              else
              {
                *(_DWORD *)(v39 + 24) = v41;
              }
            }
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 208))(v39);
            if ((result & 1) != 0)
            {
              v44 = *(_QWORD *)(v16 + 48);
              for (j = 0; ; ++j)
              {
                v46 = v44 & 0xFFFFFFFFFFFFLL;
                if (!v46)
                  break;
                v44 = *(_QWORD *)(v46 + 48);
              }
              *(_QWORD *)a3 = v30;
              *(_DWORD *)(a3 + 8) = j;
              *(_BYTE *)(a3 + 12) &= 0xF0u;
              v47 = *(_DWORD *)(v39 + 24) - 2;
              v30 = 0;
              if (*(_DWORD *)(v39 + 24) == 2)
              {
LABEL_116:
                if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                  result = WebCore::Node::removedLastRef((WebCore::Node *)v39);
LABEL_109:
                if (!v30)
                  goto LABEL_112;
LABEL_110:
                if (*(_DWORD *)(v30 + 24) != 2)
                {
                  *(_DWORD *)(v30 + 24) -= 2;
                  goto LABEL_112;
                }
                if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                {
                  v48 = (WebCore::Node *)v30;
LABEL_126:
                  result = WebCore::Node::removedLastRef(v48);
                }
LABEL_112:
                if (*(_DWORD *)(v16 + 24) == 2)
                {
                  if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                    return WebCore::Node::removedLastRef((WebCore::Node *)v16);
                }
                else
                {
                  *(_DWORD *)(v16 + 24) -= 2;
                }
                return result;
              }
LABEL_108:
              *(_DWORD *)(v39 + 24) = v47;
              goto LABEL_109;
            }
LABEL_107:
            v47 = *(_DWORD *)(v39 + 24);
            *(_DWORD *)(v39 + 24) = v47 + 2;
            *(_QWORD *)a3 = v39;
            *(_DWORD *)(a3 + 8) = 0;
            *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | 2;
            if (!v47)
              goto LABEL_116;
            goto LABEL_108;
          }
          *(_QWORD *)a3 = v30;
          *(_DWORD *)(a3 + 8) = 0;
          v51 = *(_BYTE *)(a3 + 12) & 0xF0;
LABEL_146:
          *(_BYTE *)(a3 + 12) = v51;
          goto LABEL_112;
        }
LABEL_91:
        *(_DWORD *)(v16 + 24) += 2;
        *(_QWORD *)a3 = v16;
        *(_DWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | 1;
        goto LABEL_110;
    }
    *(_QWORD *)a3 = v16;
    *(_DWORD *)(a3 + 8) = v19;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 208))(v16);
    if (v19)
      v36 = 10;
    else
      v36 = 9;
    if ((result & 1) != 0)
      v37 = 8;
    else
      v37 = v36;
    v38 = *(_BYTE *)(a3 + 12) & 0xF0 | v37;
    goto LABEL_78;
  }
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  *(_QWORD *)a3 = v15;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(v3 + 12);
  if (v16)
    goto LABEL_112;
  return result;
}

uint64_t WebCore::Position::deprecatedEditingOffset(WebCore::Position *this, const WebCore::Node *a2)
{
  int v2;
  uint64_t v4;
  uint64_t OffsetForEditing;

  if ((*((_BYTE *)this + 12) & 8) != 0)
    return *((unsigned int *)this + 2);
  v2 = *((_BYTE *)this + 12) & 7;
  if (v2 != 4 && v2 != 2)
    return *((unsigned int *)this + 2);
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  OffsetForEditing = WebCore::lastOffsetForEditing((WebCore *)v4, a2);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return OffsetForEditing;
}

uint64_t WebCore::lastPositionInOrAfterNode(WebCore *this, WebCore::Node *a2)
{
  uint64_t result;
  __int16 v5;
  char v6;
  uint64_t v7;

  result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 208))(a2);
  if ((result & 1) != 0)
  {
    v5 = *((_WORD *)a2 + 14);
    *((_DWORD *)a2 + 6) += 2;
    if ((v5 & 1) != 0)
    {
      v7 = *((_QWORD *)a2 + 10);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 4);
      *(_QWORD *)this = a2;
      *((_DWORD *)this + 2) = v7;
      v6 = *((_BYTE *)this + 12) & 0xF0;
    }
    else
    {
      *(_QWORD *)this = a2;
      *((_DWORD *)this + 2) = 0;
      v6 = *((_BYTE *)this + 12) & 0xF0 | 4;
    }
  }
  else
  {
    *((_DWORD *)a2 + 6) += 2;
    *(_QWORD *)this = a2;
    *((_DWORD *)this + 2) = 0;
    v6 = *((_BYTE *)this + 12) & 0xF0 | 2;
  }
  *((_BYTE *)this + 12) = v6;
  return result;
}

uint64_t WebCore::Position::next@<X0>(uint64_t result@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v30;
  char v31;
  char v32;
  char v33;
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t v36;
  int i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;

  v3 = result;
  v5 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 8);
    v33 = *(_BYTE *)(result + 12);
LABEL_70:
    *(_BYTE *)(a3 + 12) = v33;
    return result;
  }
  v6 = (int)a2;
  v7 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v7 + 2;
  if ((*(_BYTE *)(result + 12) & 8) == 0
    && ((v8 = *(_BYTE *)(result + 12) & 7, v8 != 4) ? (v9 = v8 == 2) : (v9 = 1), v9))
  {
    v10 = v7 + 4;
    *(_DWORD *)(v5 + 24) = v10;
    v11 = *(_WORD *)(v5 + 28);
    if ((v11 & 1) != 0)
    {
      v35 = *(_QWORD *)(v5 + 80);
      if (v35)
        v13 = *(unsigned int *)(v35 + 4);
      else
        v13 = 0;
    }
    else if ((v11 & 4) != 0 && (v12 = *(_QWORD *)(v5 + 80)) != 0)
    {
      LODWORD(v13) = 0;
      do
      {
        v13 = (v13 + 1);
        v12 = *(_QWORD *)(v12 + 56);
      }
      while (v12);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 208))(v5);
      v13 = result ^ 1;
      v10 = *(_DWORD *)(v5 + 24);
    }
    v14 = v10 - 2;
    if (v14)
    {
      *(_DWORD *)(v5 + 24) = v14;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
  }
  else
  {
    v13 = *(unsigned int *)(result + 8);
  }
  if ((*(_BYTE *)(v3 + 12) & 7) != 2)
  {
    v16 = v5;
    goto LABEL_44;
  }
  v15 = *(_QWORD *)v3;
  if (*(_QWORD *)v3)
  {
    v16 = *(_QWORD *)(v15 + 32);
    if (v16)
    {
      v17 = 0;
      *(_DWORD *)(v16 + 24) += 2;
      goto LABEL_19;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = 1;
LABEL_19:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v5);
      v15 = *(_QWORD *)v3;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (!v17)
  {
    if (v15)
    {
      v18 = *(_BYTE *)(v3 + 12) & 7;
      if ((*(_BYTE *)(v3 + 12) & 7) == 0)
      {
        v13 = *(unsigned int *)(v3 + 8);
        goto LABEL_44;
      }
      switch(v18)
      {
        case 4:
          v19 = *(_WORD *)(v15 + 28);
          if ((v19 & 1) == 0)
          {
            if ((v19 & 4) == 0)
              break;
            v20 = *(_QWORD *)(v15 + 80);
            if (!v20)
              break;
            LODWORD(v13) = 0;
            do
            {
              v13 = (v13 + 1);
              v20 = *(_QWORD *)(v20 + 56);
            }
            while (v20);
LABEL_44:
            v22 = *(_WORD *)(v16 + 28);
            if ((v22 & 4) != 0)
            {
              v26 = *(_QWORD *)(v16 + 80);
              v27 = v26;
              if ((_DWORD)v13)
              {
                v27 = *(_QWORD *)(v16 + 80);
                if (v26)
                {
                  v28 = v13 - 1;
                  v27 = *(_QWORD *)(v16 + 80);
                  do
                  {
                    v27 = *(_QWORD *)(v27 + 56);
                    v30 = v28-- != 0;
                  }
                  while (v27 && v30);
                }
              }
              if (v27)
              {
                *(_DWORD *)(v27 + 24) += 2;
                result = WebCore::firstPositionInOrBeforeNode(v27, a2, a3);
                if (*(_DWORD *)(v27 + 24) != 2)
                {
                  *(_DWORD *)(v27 + 24) -= 2;
                  goto LABEL_129;
                }
                if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
                {
                  v34 = (WebCore::Node *)v27;
LABEL_136:
                  result = WebCore::Node::removedLastRef(v34);
                }
LABEL_129:
                if (*(_DWORD *)(v16 + 24) == 2)
                {
                  if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                    return WebCore::Node::removedLastRef((WebCore::Node *)v16);
                }
                else
                {
                  *(_DWORD *)(v16 + 24) -= 2;
                }
                return result;
              }
              if (v26)
              {
LABEL_95:
                v40 = *(_QWORD *)(v16 + 32);
                if (!v40)
                {
                  v50 = *(_QWORD *)v3;
                  if (*(_QWORD *)v3)
                    *(_DWORD *)(v50 + 24) += 2;
                  *(_QWORD *)a3 = v50;
                  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
                  v51 = *(_BYTE *)(v3 + 12);
                  goto LABEL_157;
                }
                *(_DWORD *)(v40 + 24) += 2;
                if ((*(_WORD *)(v16 + 28) & 0x10) != 0)
                {
                  v41 = *(_DWORD *)(v16 + 24);
                  *(_DWORD *)(v16 + 24) = v41 + 2;
                  if ((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195A1E6B8);
                    }
                    v42 = *(unsigned __int8 *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
                    if (v41)
                    {
                      *(_DWORD *)(v16 + 24) = v41;
                    }
                    else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                    {
                      result = WebCore::Node::removedLastRef((WebCore::Node *)v16);
                    }
                    if (v42 == 35 || v42 == 63)
                      goto LABEL_116;
                  }
                  else if (v41)
                  {
                    *(_DWORD *)(v16 + 24) = v41;
                  }
                  else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v16);
                  }
                }
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 208))(v16);
                if ((result & 1) != 0)
                {
                  v43 = *(_QWORD *)(v16 + 56);
                  if (v43)
                  {
                    v44 = *(_DWORD *)(v43 + 24);
                    v45 = v44 + 2;
                    *(_DWORD *)(v43 + 24) = v44 + 2;
                    if ((*(_WORD *)(v43 + 28) & 0x10) != 0)
                    {
                      *(_DWORD *)(v43 + 24) = v44 + 4;
                      if ((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) != 0)
                      {
                        if ((*(_BYTE *)((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195A1E700);
                        }
                        v46 = *(unsigned __int8 *)((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
                        if (v44 == -2)
                        {
                          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                            result = WebCore::Node::removedLastRef((WebCore::Node *)v43);
                        }
                        else
                        {
                          *(_DWORD *)(v43 + 24) = v45;
                        }
                        if (v46 == 35 || v46 == 63)
                          goto LABEL_123;
                      }
                      else if (v44 == -2)
                      {
                        if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v43);
                      }
                      else
                      {
                        *(_DWORD *)(v43 + 24) = v45;
                      }
                    }
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 208))(v43);
                    if ((result & 1) != 0)
                    {
                      v47 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
                      if (v47)
                      {
                        v48 = 1;
                        do
                        {
                          ++v48;
                          v47 = *(_QWORD *)(v47 + 48) & 0xFFFFFFFFFFFFLL;
                        }
                        while (v47);
                      }
                      else
                      {
                        v48 = 1;
                      }
                      *(_QWORD *)a3 = v40;
                      *(_DWORD *)(a3 + 8) = v48;
                      *(_BYTE *)(a3 + 12) &= 0xF0u;
                      v49 = *(_DWORD *)(v43 + 24) - 2;
                      v40 = 0;
LABEL_124:
                      if (v49)
                      {
                        *(_DWORD *)(v43 + 24) = v49;
                      }
                      else if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                      {
                        result = WebCore::Node::removedLastRef((WebCore::Node *)v43);
                      }
                      if (!v40)
                        goto LABEL_129;
LABEL_127:
                      if (*(_DWORD *)(v40 + 24) != 2)
                      {
                        *(_DWORD *)(v40 + 24) -= 2;
                        goto LABEL_129;
                      }
                      if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                      {
                        v34 = (WebCore::Node *)v40;
                        goto LABEL_136;
                      }
                      goto LABEL_129;
                    }
LABEL_123:
                    v49 = *(_DWORD *)(v43 + 24);
                    *(_DWORD *)(v43 + 24) = v49 + 2;
                    *(_QWORD *)a3 = v43;
                    *(_DWORD *)(a3 + 8) = 0;
                    *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | 1;
                    goto LABEL_124;
                  }
                  v52 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
                  if (v52)
                  {
                    v53 = 1;
                    do
                    {
                      ++v53;
                      v52 = *(_QWORD *)(v52 + 48) & 0xFFFFFFFFFFFFLL;
                    }
                    while (v52);
                  }
                  else
                  {
                    v53 = 1;
                  }
                  *(_QWORD *)a3 = v40;
                  *(_DWORD *)(a3 + 8) = v53;
                  v51 = *(_BYTE *)(a3 + 12) & 0xF0;
LABEL_157:
                  *(_BYTE *)(a3 + 12) = v51;
                  goto LABEL_129;
                }
LABEL_116:
                *(_DWORD *)(v16 + 24) += 2;
                *(_QWORD *)a3 = v16;
                *(_DWORD *)(a3 + 8) = 0;
                *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | 2;
                goto LABEL_127;
              }
              if ((v22 & 1) == 0)
                goto LABEL_46;
              LODWORD(v23) = 0;
            }
            else
            {
              if ((v22 & 1) == 0)
              {
LABEL_46:
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 208))(v16);
                LODWORD(v23) = result ^ 1;
                goto LABEL_47;
              }
              v23 = *(_QWORD *)(v16 + 80);
              if (v23)
                LODWORD(v23) = *(_DWORD *)(v23 + 4);
            }
LABEL_47:
            if (v13 < v23)
            {
              if (v6 == 1 && (v24 = *(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) != 0)
                v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 560))(v24, v13);
              else
                v25 = v13 + 1;
              *(_QWORD *)a3 = v16;
              *(_DWORD *)(a3 + 8) = v25;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 208))(v16);
              if (v25)
                v31 = 10;
              else
                v31 = 9;
              if ((result & 1) != 0)
                v32 = 8;
              else
                v32 = v31;
              v33 = *(_BYTE *)(a3 + 12) & 0xF0 | v32;
              goto LABEL_70;
            }
            goto LABEL_95;
          }
          v21 = *(_QWORD *)(v15 + 80);
          if (v21)
          {
            v13 = *(unsigned int *)(v21 + 4);
            goto LABEL_44;
          }
          break;
        case 1:
          v39 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
          if (v39)
          {
            LODWORD(v13) = 0;
            do
            {
              v13 = (v13 + 1);
              v39 = *(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v39);
            goto LABEL_44;
          }
          break;
        case 2:
          v36 = *(_QWORD *)(v15 + 48);
          for (i = 0; ; ++i)
          {
            v38 = v36 & 0xFFFFFFFFFFFFLL;
            if (!v38)
              break;
            v36 = *(_QWORD *)(v38 + 48);
          }
          v13 = (i + 1);
          goto LABEL_44;
      }
    }
    v13 = 0;
    goto LABEL_44;
  }
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  *(_QWORD *)a3 = v15;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(v3 + 12);
  if (v16)
    goto LABEL_129;
  return result;
}

uint64_t WebCore::Position::atFirstEditingPositionForNode(WebCore::Position *this, const WebCore::Node *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  unsigned int v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v3 = *((_BYTE *)this + 12) & 7;
  if ((*((_BYTE *)this + 12) & 7) == 0)
    return *((_DWORD *)this + 2) == 0;
  result = 1;
  switch(v3)
  {
    case 1:
    case 3:
      return result;
    case 2:
    case 4:
      *(_DWORD *)(v2 + 24) += 2;
      result = WebCore::lastOffsetForEditing((WebCore *)v2, a2) == 0;
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        v5 = result;
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
        result = v5;
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL WebCore::Position::atLastEditingPositionForNode(WebCore::Position *this, const WebCore::Node *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v5;
  _BOOL8 v6;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v3 = *((_BYTE *)this + 12) & 7;
  if (v3 == 2 || v3 == 4)
    return 1;
  v5 = *((_DWORD *)this + 2);
  *(_DWORD *)(v2 + 24) += 2;
  v6 = v5 >= WebCore::lastOffsetForEditing((WebCore *)v2, a2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v6;
}

BOOL WebCore::Position::atEditingBoundary(WebCore::Position *this)
{
  const WebCore::Node *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _BOOL8 v6;
  _WORD *v7;
  int v8;
  unsigned int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t (*v15)();
  int v16;
  WebCore::Node *v17;
  uint64_t (*v19)();
  uint64_t (*v20)();
  int OffsetForEditing;
  uint64_t v22;
  WebCore::Node *v23;
  uint64_t v24;

  WebCore::Position::downstream((uint64_t)this, 0, (uint64_t)&v24);
  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_4;
  if ((*((_BYTE *)this + 12) & 7) != 0)
  {
    switch(*((_BYTE *)this + 12) & 7)
    {
      case 1:
      case 3:
        goto LABEL_4;
      case 2:
      case 4:
        *(_DWORD *)(v3 + 24) += 2;
        OffsetForEditing = WebCore::lastOffsetForEditing((WebCore *)v3, v2);
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
        if (OffsetForEditing)
          goto LABEL_9;
        goto LABEL_4;
      default:
        goto LABEL_9;
    }
  }
  if (!*((_DWORD *)this + 2))
  {
LABEL_4:
    v4 = v24;
    if (v24)
      v5 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v5 = 0;
    if (v5)
    {
      v6 = 1;
      if (!WebCore::Node::computeEditability(v24, 0, 1))
        goto LABEL_31;
    }
  }
LABEL_9:
  WebCore::Position::upstream((uint64_t)this, 0, (uint64_t)&v23);
  v7 = *(_WORD **)this;
  if (*(_QWORD *)this)
  {
    v8 = *((_BYTE *)this + 12) & 7;
    if (v8 != 2 && v8 != 4)
    {
      v10 = *((_DWORD *)this + 2);
      v11 = *((_DWORD *)v7 + 6);
      *((_DWORD *)v7 + 6) = v11 + 2;
      v12 = v7[14];
      if ((v12 & 1) != 0)
      {
        v22 = *((_QWORD *)v7 + 10);
        v14 = v22 ? *(_DWORD *)(v22 + 4) : 0;
      }
      else if ((v12 & 4) != 0 && (v13 = *((_QWORD *)v7 + 10)) != 0)
      {
        v14 = 0;
        do
        {
          ++v14;
          v13 = *(_QWORD *)(v13 + 56);
        }
        while (v13);
      }
      else
      {
        v14 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v7 + 208))(v7) ^ 1;
        v11 = *((_DWORD *)v7 + 6) - 2;
      }
      if (v11)
      {
        *((_DWORD *)v7 + 6) = v11;
      }
      else if ((v7[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      if (v10 < v14)
        goto LABEL_21;
    }
  }
  v17 = v23;
  v19 = v23
      ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
      : 0;
  if (!v19 || (v6 = 1, WebCore::Node::computeEditability((uint64_t)v23, 0, 1)))
  {
LABEL_21:
    if (v24)
      v15 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v15 = 0;
    if (v15)
    {
      v16 = WebCore::Node::computeEditability(v24, 0, 1);
      v17 = v23;
      v6 = !v16
        && (v23
          ? (v20 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance)
          : (v20 = 0),
            v20)
        && WebCore::Node::computeEditability((uint64_t)v23, 0, 1) == 0;
    }
    else
    {
      v6 = 0;
      v17 = v23;
    }
  }
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  v4 = v24;
LABEL_31:
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return v6;
}

uint64_t WebCore::Position::downstream@<X0>(uint64_t result@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore *v7;
  int v8;
  int v9;
  char v10;
  WebCore::Node *v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::Node *v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  WTF *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::InlineIterator::TextBox *v46;
  char v47;
  int v48;
  WebCore::InlineIterator::TextBox *v49;
  WebCore::InlineIterator::Box *v50;
  WebCore::InlineIterator::Box *v51;
  char v52;
  int v53;
  WebCore::Node *v54;
  int v55;
  WebCore::Node *v56;
  int v57;
  int v59;
  uint64_t v60[2];
  int v61;
  uint64_t v62[2];
  int v63;
  _QWORD v64[2];
  int v65;
  unsigned int v66[4];
  int v67;
  WebCore::Node *v68;
  int v69;
  char v70;
  int v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  char v79[9];

  v59 = (int)a2;
  v3 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) &= 0xF0u;
    return result;
  }
  v4 = result;
  *(_DWORD *)(v3 + 24) += 2;
  v5 = v3;
  while (1)
  {
    v6 = WebCore::endsOfNodeAreVisuallyDistinctPositions(v5, a2);
    if ((v6 & 1) != 0)
      break;
    v5 = *(_QWORD *)(v5 + 32);
    if (!v5)
    {
      v55 = v6;
      goto LABEL_7;
    }
  }
  v55 = v6;
  *(_DWORD *)(v5 + 24) += 2;
LABEL_7:
  v7 = *(WebCore **)v4;
  if (!*(_QWORD *)v4)
  {
    if ((*(_BYTE *)(v4 + 12) & 7) != 2)
      goto LABEL_9;
LABEL_232:
    v53 = WebCore::caretMaxOffset(v7, a2);
    v68 = v7;
    v69 = v53;
    if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)v7 + 208))(v7) & 1) != 0)
    {
      v10 = 8;
    }
    else if (v53)
    {
      v10 = 10;
    }
    else
    {
      v10 = 9;
    }
    goto LABEL_10;
  }
  v8 = *((_DWORD *)v7 + 6);
  *((_DWORD *)v7 + 6) = v8 + 2;
  v9 = *(_BYTE *)(v4 + 12) & 7;
  *((_DWORD *)v7 + 6) = v8 + 4;
  if (v9 == 2)
    goto LABEL_232;
LABEL_9:
  v68 = v7;
  v69 = *(_DWORD *)(v4 + 8);
  v10 = *(_BYTE *)(v4 + 12);
LABEL_10:
  v70 = v10;
  WebCore::PositionIterator::PositionIterator((WebCore::PositionIterator *)&v76, (const WebCore::Position *)&v68);
  v11 = v68;
  v68 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v12 = v76;
  if (v76)
    *(_DWORD *)(v76 + 24) += 2;
  v54 = v7;
  v73 = v12;
  v13 = v77;
  if (v77)
    *(_DWORD *)(v77 + 24) += 2;
  v74 = v13;
  v75 = v78;
  v57 = WebCore::Node::computeEditability(v3, 0, 1);
  *(_DWORD *)(v3 + 24) += 2;
  v15 = v73;
  v56 = (WebCore::Node *)v3;
  if (v73)
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = v17 + 2;
      if (v74 || *(_QWORD *)(v15 + 32))
      {
        v18 = 0;
      }
      else
      {
        if ((*(_WORD *)(v15 + 28) & 4) != 0 && *(_QWORD *)(v15 + 80))
        {
          if (v17)
          {
            *(_DWORD *)(v15 + 24) = v17;
          }
          else
          {
LABEL_237:
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15);
          }
          goto LABEL_153;
        }
        v48 = v75;
        v18 = v48 >= (int)WebCore::lastOffsetForEditing((WebCore *)v15, v14);
        v17 = *(_DWORD *)(v15 + 24) - 2;
      }
      if (v17)
      {
        *(_DWORD *)(v15 + 24) = v17;
      }
      else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v15);
      }
      if (v18)
        goto LABEL_153;
      v19 = v73;
      *(_DWORD *)(v73 + 24) += 2;
      if (v19 != v3)
      {
        v39 = (v57 == 0) ^ (WebCore::Node::computeEditability(v19, 0, 1) != 0);
        if (v59 == 1 && !v39)
        {
LABEL_206:
          v30 = 2;
          goto LABEL_77;
        }
        v16 |= v39 ^ 1;
        *(_DWORD *)(v19 + 24) += 2;
        if (v3)
        {
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v3);
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
        }
        v3 = v19;
      }
      v20 = *(_WORD *)(v19 + 28);
      if ((v20 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        if (WebCore::PositionIterator::atEndOfNode((WebCore::PositionIterator *)&v73))
          goto LABEL_206;
        v20 = *(_WORD *)(v19 + 28);
      }
      if ((v20 & 0x20) != 0
        && *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::textTag + 24))
      {
LABEL_208:
        v30 = 4;
LABEL_77:
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v19);
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
        goto LABEL_79;
      }
      v21 = WebCore::endsOfNodeAreVisuallyDistinctPositions(v19, v14);
      if (v5 != v19 && (v21 & 1) != 0 || v5 && *(_QWORD *)(v5 + 32) == v19)
      {
        WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v76, a3);
        v30 = 1;
        goto LABEL_77;
      }
      v15 = *(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v15)
        goto LABEL_208;
      ++*(_DWORD *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      v22 = v15;
      if ((*(_BYTE *)(v15 + 45) & 2) != 0)
        v22 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8);
      if ((*(_BYTE *)(v22 + 120) & 0x30) != 0)
      {
LABEL_130:
        v30 = 4;
        goto LABEL_75;
      }
      if (((v59 == 0) & v16) == 1)
      {
        WebCore::PositionIterator::operator=(&v76, &v73);
        v30 = 2;
        goto LABEL_75;
      }
      v23 = v73;
      if (!v73)
        break;
      *(_DWORD *)(v73 + 24) += 2;
      if ((*(_WORD *)(v23 + 28) & 4) == 0
        || !*(_QWORD *)(v23 + 80)
        || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 208))(v23)
        || !v73)
      {
        v24 = 1;
        goto LABEL_42;
      }
      if (v74)
      {
        v40 = (*(_QWORD *)(v74 + 48) & 0xFFFFFFFFFFFFLL) == 0;
LABEL_107:
        v24 = v40;
LABEL_42:
        if (*(_DWORD *)(v23 + 24) == 2)
        {
          if ((*(_WORD *)(v23 + 30) & 0x400) != 0)
          {
            if (!v24)
              goto LABEL_55;
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v23);
            if ((v24 & 1) == 0)
              goto LABEL_55;
          }
        }
        else
        {
          *(_DWORD *)(v23 + 24) -= 2;
          if ((v24 & 1) == 0)
            goto LABEL_55;
        }
        v25 = v73;
        if (v73)
          *(_DWORD *)(v73 + 24) += 2;
LABEL_46:
        v26 = v76;
        v76 = v25;
        if (v26)
        {
          if (*(_DWORD *)(v26 + 24) == 2)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v26);
          }
          else
          {
            *(_DWORD *)(v26 + 24) -= 2;
          }
        }
        v27 = v74;
        if (v74)
          *(_DWORD *)(v74 + 24) += 2;
        v28 = v77;
        v77 = v27;
        if (v28)
        {
          if (*(_DWORD *)(v28 + 24) == 2)
          {
            if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v28);
          }
          else
          {
            *(_DWORD *)(v28 + 24) -= 2;
          }
        }
        v78 = v75;
        goto LABEL_55;
      }
      if ((*(_WORD *)(v73 + 28) & 4) == 0 || !*(_QWORD *)(v73 + 80))
      {
        v40 = v75 == 0;
        goto LABEL_107;
      }
      if (*(_DWORD *)(v23 + 24) == 2)
      {
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23);
      }
      else
      {
        *(_DWORD *)(v23 + 24) -= 2;
      }
LABEL_55:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 208))(v19))
        goto LABEL_89;
      if ((*(_WORD *)(v19 + 28) & 0x10) == 0)
        goto LABEL_57;
      v37 = *(_DWORD *)(v19 + 24);
      *(_DWORD *)(v19 + 24) = v37 + 2;
      if ((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      {
        if (v37)
        {
          *(_DWORD *)(v19 + 24) = v37;
        }
        else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v19);
        }
LABEL_57:
        if ((*(_BYTE *)(v15 + 45) & 2) == 0)
          goto LABEL_74;
        WebCore::InlineIterator::firstTextBoxInLogicalOrderFor((WebCore::InlineIterator *)v15, (uint64_t)&v68);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v68) & 1) != 0)
        {
          v30 = 4;
        }
        else if (v56 == (WebCore::Node *)v19)
        {
          v41 = v75;
          LOBYTE(v66[0]) = 0;
          v67 = -1;
          v42 = v71;
          if (v71 != -1)
          {
            ((void (*)(_QWORD *, unsigned int *, WebCore::Node **))off_1E33A6978[v71])(v64, v66, &v68);
            v67 = v42;
          }
          while (1)
          {
            if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v66) & 1) != 0)
            {
              v30 = 0;
              goto LABEL_127;
            }
            if (v67 == -1)
              goto LABEL_236;
            v64[0] = v62;
            if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E33A6988[v67])(v64, v66) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195A1F6ACLL);
            }
            if (v67 == -1)
            {
LABEL_236:
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_237;
            }
            v64[0] = v62;
            if (!((unsigned int (*)(_QWORD *, unsigned int *))off_1E33A69C8[v67])(v64, v66))
            {
              v49 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v66);
              if (v41 == WebCore::InlineIterator::TextBox::start(v49))
                break;
            }
            if (v67 == -1)
              goto LABEL_236;
            v64[0] = v62;
            if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E33A6988[v67])(v64, v66) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195A1F6CCLL);
            }
            if (v67 == -1)
              goto LABEL_236;
            v64[0] = v62;
            if (v41 >= ((unsigned int (*)(_QWORD *, unsigned int *))off_1E33A6998[v67])(v64, v66))
            {
              if (v67 == -1)
                goto LABEL_236;
              v64[0] = v62;
              if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E33A6988[v67])(v64, v66) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195A1F6ECLL);
              }
              if (v67 == -1)
                goto LABEL_236;
              v64[0] = v62;
              if (v41 < ((unsigned int (*)(_QWORD *, unsigned int *))off_1E33A69A8[v67])(v64, v66))
                break;
            }
            WebCore::InlineIterator::nextTextBoxInLogicalOrder(v66, &v72, v64);
            v46 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v66);
            if (v41 != WebCore::InlineIterator::TextBox::end(v46)
              || (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v64) & 1) != 0)
            {
              goto LABEL_200;
            }
            v50 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v66);
            WebCore::InlineIterator::Box::lineBox(v62, v50);
            v51 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v64);
            WebCore::InlineIterator::Box::lineBox(v60, v51);
            v52 = WebCore::InlineIterator::LineBoxIterator::operator==((uint64_t)v62, (uint64_t)v60);
            if (v61 != -1)
              ((void (*)(char *, uint64_t *))off_1E33A69B8[v61])(v79, v60);
            if (v63 != -1)
              ((void (*)(uint64_t *, uint64_t *))off_1E33A69B8[v63])(v60, v62);
            if ((v52 & 1) != 0)
            {
LABEL_200:
              WebCore::InlineIterator::TextBoxIterator::operator=((uint64_t)v66, (uint64_t)v64);
              v47 = 0;
            }
            else
            {
              WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v73, a3);
              v47 = 1;
            }
            if (v65 != -1)
              ((void (*)(uint64_t *, _QWORD *))off_1E33A6968[v65])(v62, v64);
            if ((v47 & 1) != 0)
              goto LABEL_126;
          }
          WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v73, a3);
LABEL_126:
          v30 = 1;
LABEL_127:
          if (v67 != -1)
            ((void (*)(_QWORD *, unsigned int *))off_1E33A6968[v67])(v64, v66);
        }
        else
        {
          *(_DWORD *)(v19 + 24) += 2;
          v29 = WebCore::RenderText::caretMinOffset((WebCore::RenderText *)v15, v14);
          *(_QWORD *)a3 = v19;
          *(_DWORD *)(a3 + 8) = v29;
          *(_BYTE *)(a3 + 12) &= 0xF0u;
          v30 = 1;
        }
        v31 = v72;
        v72 = 0;
        if (v31)
        {
          v32 = *((unsigned int *)v31 + 3);
          v33 = *(unsigned int **)v31;
          if ((_DWORD)v32)
          {
            v34 = 24 * v32;
            do
            {
              v35 = v33[4];
              if ((_DWORD)v35 != -1)
                ((void (*)(unsigned int *, unsigned int *))off_1E33A6968[v35])(v66, v33);
              v33[4] = -1;
              v33 += 6;
              v34 -= 24;
            }
            while (v34);
            v33 = *(unsigned int **)v31;
          }
          if (v33)
          {
            *(_QWORD *)v31 = 0;
            *((_DWORD *)v31 + 2) = 0;
            WTF::fastFree((WTF *)v33, v14);
          }
          WTF::fastFree(v31, v14);
        }
        if (v71 != -1)
          ((void (*)(unsigned int *, WebCore::Node **))off_1E33A6968[v71])(v66, &v68);
        if (!v30)
LABEL_74:
          v30 = 0;
        goto LABEL_75;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195A1F68CLL);
      }
      v38 = *(unsigned __int8 *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
      if (v37)
      {
        *(_DWORD *)(v19 + 24) = v37;
LABEL_87:
        if (v38 != 35 && v38 != 63)
          goto LABEL_57;
        goto LABEL_89;
      }
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
        goto LABEL_87;
      }
      if (v38 != 63 && v38 != 35)
        goto LABEL_57;
LABEL_89:
      if (!v73)
        goto LABEL_136;
      if (v74)
      {
        if ((*(_QWORD *)(v74 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          goto LABEL_130;
LABEL_136:
        *(_DWORD *)(v19 + 24) += 2;
        *(_QWORD *)a3 = v19;
        *(_DWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | 1;
        v30 = 1;
        goto LABEL_75;
      }
      if ((*(_WORD *)(v73 + 28) & 4) == 0)
      {
        if (v75)
          goto LABEL_130;
        goto LABEL_136;
      }
      v30 = 4;
      if (!*(_QWORD *)(v73 + 80) && !v75)
        goto LABEL_136;
LABEL_75:
      v36 = *(_DWORD *)(v15 + 16);
      if (!v36)
      {
        __break(0xC471u);
        JUMPOUT(0x195A1F5B4);
      }
      *(_DWORD *)(v15 + 16) = v36 - 1;
      if (v19)
        goto LABEL_77;
LABEL_79:
      if (v30 && v30 != 4)
      {
        if (v30 != 2)
          goto LABEL_154;
        goto LABEL_153;
      }
      WebCore::PositionIterator::increment((uint64_t)&v73, v14);
      v15 = v73;
      if (!v73)
        goto LABEL_153;
    }
    v25 = 0;
    goto LABEL_46;
  }
LABEL_153:
  WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v76, a3);
LABEL_154:
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v43 = v74;
  v74 = 0;
  if (v43)
  {
    if (*(_DWORD *)(v43 + 24) == 2)
    {
      if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v43);
    }
    else
    {
      *(_DWORD *)(v43 + 24) -= 2;
    }
  }
  v44 = v73;
  v73 = 0;
  if (v44)
  {
    if (*(_DWORD *)(v44 + 24) == 2)
    {
      if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v44);
    }
    else
    {
      *(_DWORD *)(v44 + 24) -= 2;
    }
  }
  v45 = v77;
  v77 = 0;
  if (v45)
  {
    if (*(_DWORD *)(v45 + 24) == 2)
    {
      if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v45);
    }
    else
    {
      *(_DWORD *)(v45 + 24) -= 2;
    }
  }
  result = v76;
  v76 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (v54)
  {
    if (*((_DWORD *)v54 + 6) == 2)
    {
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v54);
    }
    else
    {
      *((_DWORD *)v54 + 6) -= 2;
    }
  }
  if (v55)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if (*((_DWORD *)v56 + 6) == 2)
  {
    if ((*((_WORD *)v56 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v56);
  }
  else
  {
    *((_DWORD *)v56 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::Position::upstream@<X0>(uint64_t result@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WebCore *v9;
  int v10;
  int v11;
  char v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  const WebCore::PositionIterator *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  uint64_t v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  int v28;
  int v29;
  const WebCore::Node *v30;
  void *v31;
  unsigned int v32;
  int v33;
  int v34;
  WTF *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  char v42;
  WebCore::InlineIterator::Box *v43;
  WebCore::InlineIterator::Box *v44;
  BOOL v45;
  int v46;
  WebCore::Node *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51[2];
  int v52;
  uint64_t v53[2];
  int v54;
  _QWORD v55[2];
  int v56;
  unsigned int v57[4];
  int v58;
  WebCore::Node *v59;
  int v60;
  char v61;
  int v62;
  WTF *v63;
  WebCore::Node *v64;
  WebCore::Node *v65;
  unsigned int v66;
  WebCore::Node *v67;
  WebCore::Node *v68;
  unsigned int v69;
  char v70[9];

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) &= 0xF0u;
    return result;
  }
  v5 = (int)a2;
  v6 = result;
  *(_DWORD *)(v4 + 24) += 2;
  v7 = v4;
  while (1)
  {
    v8 = WebCore::endsOfNodeAreVisuallyDistinctPositions(v7, a2);
    if ((v8 & 1) != 0)
      break;
    v7 = *(_QWORD *)(v7 + 32);
    if (!v7)
    {
      v48 = v8;
      goto LABEL_7;
    }
  }
  v48 = v8;
  *(_DWORD *)(v7 + 24) += 2;
LABEL_7:
  v9 = *(WebCore **)v6;
  if (!*(_QWORD *)v6)
  {
    if ((*(_BYTE *)(v6 + 12) & 7) != 2)
      goto LABEL_9;
LABEL_196:
    v46 = WebCore::caretMaxOffset(v9, a2);
    v59 = v9;
    v60 = v46;
    if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)v9 + 208))(v9) & 1) != 0)
    {
      v12 = 8;
    }
    else if (v46)
    {
      v12 = 10;
    }
    else
    {
      v12 = 9;
    }
    goto LABEL_10;
  }
  v10 = *((_DWORD *)v9 + 6);
  *((_DWORD *)v9 + 6) = v10 + 2;
  v11 = *(_BYTE *)(v6 + 12) & 7;
  *((_DWORD *)v9 + 6) = v10 + 4;
  if (v11 == 2)
    goto LABEL_196;
LABEL_9:
  v59 = v9;
  v60 = *(_DWORD *)(v6 + 8);
  v12 = *(_BYTE *)(v6 + 12);
LABEL_10:
  v61 = v12;
  WebCore::PositionIterator::PositionIterator((WebCore::PositionIterator *)&v67, (const WebCore::Position *)&v59);
  v13 = v59;
  v59 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  v14 = v67;
  if (v67)
    *((_DWORD *)v67 + 6) += 2;
  v47 = v9;
  v64 = v14;
  v15 = v68;
  if (v68)
    *((_DWORD *)v68 + 6) += 2;
  v65 = v15;
  v66 = v69;
  v50 = WebCore::Node::computeEditability(v4, 0, 1);
  *(_DWORD *)(v4 + 24) += 2;
  v17 = v4;
  if (!v14)
    goto LABEL_117;
  v18 = 0;
  v49 = v4;
  v17 = v4;
  while (1)
  {
    if (!*((_QWORD *)v14 + 4))
    {
      if ((*((_WORD *)v14 + 14) & 4) != 0)
      {
        if (*((_QWORD *)v14 + 10))
          v45 = 0;
        else
          v45 = v66 == 0;
        if (v45)
          goto LABEL_117;
      }
      else if (!v66)
      {
        goto LABEL_117;
      }
      if (v65 && (*((_QWORD *)v65 + 6) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_117;
    }
    *((_DWORD *)v14 + 6) += 2;
    if ((WebCore::Node *)v17 == v14)
      goto LABEL_21;
    v34 = (v50 == 0) ^ (WebCore::Node::computeEditability((uint64_t)v14, 0, 1) != 0);
    if (v5 != 1 || v34)
    {
      v18 |= v34 ^ 1;
      *((_DWORD *)v14 + 6) += 2;
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
LABEL_21:
      if ((*((_WORD *)v14 + 14) & 0x20) != 0
        && *(_QWORD *)(*((_QWORD *)v14 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::textTag + 24))
      {
        goto LABEL_166;
      }
      v19 = WebCore::endsOfNodeAreVisuallyDistinctPositions((uint64_t)v14, v16);
      if ((WebCore::Node *)v7 != v14 && v19)
      {
        WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v67, a3);
        v28 = 1;
        goto LABEL_51;
      }
      v21 = *((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL;
      if (!v21)
      {
LABEL_166:
        v28 = 4;
LABEL_51:
        v17 = (uint64_t)v14;
        goto LABEL_52;
      }
      ++*(_DWORD *)((*((_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      v22 = v21;
      if ((*(_BYTE *)(v21 + 45) & 2) != 0)
        v22 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8);
      if ((*(_BYTE *)(v22 + 120) & 0x30) != 0)
        goto LABEL_164;
      if (((v5 == 0) & v18) == 1)
      {
        WebCore::PositionIterator::operator=((uint64_t *)&v67, (uint64_t *)&v64);
        v28 = 2;
        goto LABEL_49;
      }
      if (WebCore::isStreamer((WebCore *)&v64, v20))
      {
        v24 = v64;
        if (v64)
          *((_DWORD *)v64 + 6) += 2;
        v25 = (uint64_t)v67;
        v67 = v24;
        if (v25)
        {
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v26 = v65;
        if (v65)
          *((_DWORD *)v65 + 6) += 2;
        v27 = v68;
        v68 = v26;
        if (v27)
        {
          if (*((_DWORD *)v27 + 6) == 2)
          {
            if ((*((_WORD *)v27 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v27);
          }
          else
          {
            *((_DWORD *)v27 + 6) -= 2;
          }
        }
        v69 = v66;
      }
      if (!WebCore::endsOfNodeAreVisuallyDistinctPositions((uint64_t)v14, v23))
        goto LABEL_59;
      if (v64)
      {
        if (!v65)
        {
          if (((*((_WORD *)v64 + 14) & 4) == 0 || !*((_QWORD *)v64 + 10)) && !v66)
            goto LABEL_47;
          goto LABEL_59;
        }
        if ((*((_QWORD *)v65 + 6) & 0xFFFFFFFFFFFFLL) != 0)
        {
LABEL_59:
          if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v14 + 208))(v14)
            && !WebCore::isRenderedTable(v14, v30))
          {
            if ((*(_BYTE *)(v21 + 45) & 2) != 0)
            {
              WebCore::InlineIterator::firstTextBoxInLogicalOrderFor((WebCore::InlineIterator *)v21, (uint64_t)&v59);
              if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v59) & 1) != 0)
              {
                v28 = 4;
              }
              else if ((WebCore::Node *)v4 == v14)
              {
                v32 = v66;
                LOBYTE(v57[0]) = 0;
                v58 = -1;
                v33 = v62;
                if (v62 != -1)
                {
                  ((void (*)(_QWORD *, unsigned int *, WebCore::Node **))off_1E33A6978[v62])(v55, v57, &v59);
                  v58 = v33;
                }
                if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v57) & 1) == 0)
                {
                  while (1)
                  {
                    if (v58 == -1)
                      goto LABEL_199;
                    v55[0] = v53;
                    if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E33A6988[v58])(v55, v57) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195A2020CLL);
                    }
                    if (v58 == -1)
                    {
LABEL_199:
                      std::__throw_bad_variant_access[abi:sn180100]();
                      goto LABEL_200;
                    }
                    v55[0] = v53;
                    if (v32 > ((unsigned int (*)(_QWORD *, unsigned int *))off_1E33A6998[v58])(v55, v57))
                    {
                      if (v58 == -1)
                        goto LABEL_199;
                      v55[0] = v53;
                      if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E33A6988[v58])(v55, v57) & 1) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195A202A4);
                      }
                      if (v32 <= WebCore::InlineIterator::TextBox::end((WebCore::InlineIterator::TextBox *)v57))
                      {
                        WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v64, a3);
LABEL_115:
                        v28 = 1;
                        goto LABEL_89;
                      }
                    }
                    WebCore::InlineIterator::nextTextBoxInLogicalOrder(v57, &v63, v55);
                    if (v58 == -1)
                      goto LABEL_199;
                    v53[0] = (uint64_t)v51;
                    if ((((uint64_t (*)(uint64_t *, unsigned int *))off_1E33A6988[v58])(v53, v57) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195A2022CLL);
                    }
                    if (v32 == WebCore::InlineIterator::TextBox::end((WebCore::InlineIterator::TextBox *)v57)
                              + 1
                      && (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v55) & 1) == 0)
                    {
                      v43 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v57);
                      WebCore::InlineIterator::Box::lineBox(v53, v43);
                      v44 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v55);
                      WebCore::InlineIterator::Box::lineBox(v51, v44);
                      LODWORD(v4) = WebCore::InlineIterator::LineBoxIterator::operator==((uint64_t)v53, (uint64_t)v51);
                      if (v52 != -1)
                        ((void (*)(char *, uint64_t *))off_1E33A69B8[v52])(v70, v51);
                      if (v54 != -1)
                        ((void (*)(uint64_t *, uint64_t *))off_1E33A69B8[v54])(v51, v53);
                      if (!(_DWORD)v4)
                      {
                        WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v64, a3);
                        if (v56 != -1)
                          ((void (*)(uint64_t *, _QWORD *))off_1E33A6968[v56])(v53, v55);
                        goto LABEL_115;
                      }
                    }
                    if (v58 != -1)
                      break;
                    if (v56 != -1)
                      goto LABEL_76;
LABEL_79:
                    if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v57))
                      goto LABEL_88;
                  }
                  if (v56 == -1)
                  {
                    ((void (*)(uint64_t *, unsigned int *))off_1E33A6968[v58])(v53, v57);
                    v58 = -1;
                  }
                  else
                  {
LABEL_76:
                    v53[0] = (uint64_t)v57;
                    ((void (*)(uint64_t *, unsigned int *, _QWORD *))off_1E33A6A28[v56])(v53, v57, v55);
                  }
                  if (v56 != -1)
                    ((void (*)(uint64_t *, _QWORD *))off_1E33A6968[v56])(v53, v55);
                  goto LABEL_79;
                }
LABEL_88:
                v28 = 0;
LABEL_89:
                if (v58 != -1)
                  ((void (*)(_QWORD *, unsigned int *))off_1E33A6968[v58])(v55, v57);
              }
              else
              {
                *((_DWORD *)v14 + 6) += 2;
                LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 536))(v21);
                *(_QWORD *)a3 = v14;
                *(_DWORD *)(a3 + 8) = v4;
                if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v14 + 208))(v14) & 1) != 0)
                {
                  v42 = 8;
                }
                else
                {
LABEL_200:
                  if ((_DWORD)v4)
                    v42 = 10;
                  else
                    v42 = 9;
                }
                *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | v42;
                v28 = 1;
              }
              v35 = v63;
              v63 = 0;
              if (v35)
              {
                v36 = *((unsigned int *)v35 + 3);
                v37 = *(unsigned int **)v35;
                if ((_DWORD)v36)
                {
                  v38 = 24 * v36;
                  do
                  {
                    v39 = v37[4];
                    if ((_DWORD)v39 != -1)
                      ((void (*)(unsigned int *, unsigned int *))off_1E33A6968[v39])(v57, v37);
                    v37[4] = -1;
                    v37 += 6;
                    v38 -= 24;
                  }
                  while (v38);
                  v37 = *(unsigned int **)v35;
                }
                if (v37)
                {
                  *(_QWORD *)v35 = 0;
                  *((_DWORD *)v35 + 2) = 0;
                  WTF::fastFree((WTF *)v37, v31);
                }
                WTF::fastFree(v35, v31);
              }
              if (v62 != -1)
                ((void (*)(unsigned int *, WebCore::Node **))off_1E33A6968[v62])(v57, &v59);
              v4 = v49;
              if (v28)
                goto LABEL_49;
            }
            v28 = 0;
            goto LABEL_49;
          }
          if (WebCore::PositionIterator::atEndOfNode((WebCore::PositionIterator *)&v64))
          {
            *((_DWORD *)v14 + 6) += 2;
            *(_QWORD *)a3 = v14;
            *(_DWORD *)(a3 + 8) = 0;
            *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | 2;
            goto LABEL_48;
          }
LABEL_164:
          v28 = 4;
          goto LABEL_49;
        }
      }
LABEL_47:
      WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v67, a3);
LABEL_48:
      v28 = 1;
LABEL_49:
      v29 = *(_DWORD *)(v21 + 16);
      if (!v29)
      {
        __break(0xC471u);
        JUMPOUT(0x195A20004);
      }
      *(_DWORD *)(v21 + 16) = v29 - 1;
      goto LABEL_51;
    }
    v28 = 2;
LABEL_52:
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
    if (v28 && v28 != 4)
      break;
    WebCore::PositionIterator::decrement((WebCore::PositionIterator *)&v64);
    v14 = v64;
    if (!v64)
      goto LABEL_117;
  }
  if (v28 == 2)
LABEL_117:
    WebCore::PositionIterator::operator WebCore::Position((uint64_t)&v67, a3);
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    v40 = v47;
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
    v40 = v47;
  }
  if (v65)
  {
    if (*((_DWORD *)v65 + 6) == 2)
    {
      if ((*((_WORD *)v65 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v65);
    }
    else
    {
      *((_DWORD *)v65 + 6) -= 2;
    }
  }
  if (v64)
  {
    if (*((_DWORD *)v64 + 6) == 2)
    {
      if ((*((_WORD *)v64 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v64);
    }
    else
    {
      *((_DWORD *)v64 + 6) -= 2;
    }
  }
  v41 = v68;
  v68 = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v41);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  result = (uint64_t)v67;
  v67 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v40);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  if (v48)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t *WebCore::Position::parentEditingBoundary@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;

  v3 = *this;
  if (*this && (v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 1272)) != 0)
  {
    *(_DWORD *)(v4 + 24) += 2;
    *(_DWORD *)(v3 + 24) += 2;
    *a2 = v3;
    if (v3 != v4)
    {
      v5 = this;
      do
      {
        v6 = *(_QWORD *)(v3 + 32);
        if (!v6)
          break;
        if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
          break;
        v7 = v3;
        v8 = WebCore::Node::computeEditability(*v5, 0, 1) != 0;
        this = (uint64_t *)WebCore::Node::computeEditability(*(_QWORD *)(v7 + 32), 0, 1);
        if (((v8 ^ ((_DWORD)this != 0)) & 1) != 0)
          break;
        v3 = *(_QWORD *)(v7 + 32);
        if (v3)
        {
          if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
            v3 = 0;
          else
            *(_DWORD *)(v3 + 24) += 2;
        }
        *a2 = v3;
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            this = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      while (v3 != v4);
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

BOOL WebCore::Position::atStartOfTree(WebCore::Position *this)
{
  _WORD *v1;
  unsigned int v2;
  char v3;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_WORD **)this;
  if (!*(_QWORD *)this)
    return 1;
  v2 = *((_BYTE *)this + 12) & 7;
  v3 = 1;
  if (v2 > 4)
  {
    v4 = 0;
  }
  else
  {
    v4 = *(_QWORD *)this;
    if (((1 << v2) & 0x19) != 0 || (v4 = *((_QWORD *)v1 + 4)) != 0)
    {
      *(_DWORD *)(v4 + 24) += 2;
      if (*(_QWORD *)(v4 + 32))
      {
        v5 = 0;
LABEL_22:
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        return v5;
      }
      v3 = 0;
      v2 = *((_BYTE *)this + 12) & 7;
    }
  }
  v5 = 0;
  switch(v2)
  {
    case 0u:
      v6 = *((_DWORD *)this + 2) == 0;
      goto LABEL_11;
    case 1u:
      v6 = (*((_QWORD *)v1 + 6) & 0xFFFFFFFFFFFFLL) == 0;
LABEL_11:
      v5 = v6;
      break;
    case 3u:
      v5 = 1;
      break;
    case 4u:
      v7 = *((_DWORD *)v1 + 6);
      *((_DWORD *)v1 + 6) = v7 + 2;
      v8 = v1[14];
      if ((v8 & 1) != 0)
      {
        v10 = *((_QWORD *)v1 + 10);
        if (v10)
          LODWORD(v10) = *(_DWORD *)(v10 + 4);
      }
      else if ((v8 & 4) != 0 && (v9 = *((_QWORD *)v1 + 10)) != 0)
      {
        LODWORD(v10) = 0;
        do
        {
          LODWORD(v10) = v10 + 1;
          v9 = *(_QWORD *)(v9 + 56);
        }
        while (v9);
      }
      else
      {
        LODWORD(v10) = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v1 + 208))(v1) ^ 1;
        v7 = *((_DWORD *)v1 + 6) - 2;
      }
      v5 = (_DWORD)v10 == 0;
      if (v7)
      {
        *((_DWORD *)v1 + 6) = v7;
      }
      else if ((v1[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v1);
      }
      break;
    default:
      break;
  }
  if ((v3 & 1) == 0)
    goto LABEL_22;
  return v5;
}

BOOL WebCore::Position::atEndOfTree(WebCore::Position *this)
{
  _WORD *v1;
  unsigned int v2;
  char v3;
  uint64_t v4;
  _BOOL8 v5;
  unsigned int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_WORD **)this;
  if (!*(_QWORD *)this)
    return 1;
  v2 = *((_BYTE *)this + 12) & 7;
  v3 = 1;
  if (v2 > 4)
  {
    v4 = 0;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)this;
  if (((1 << v2) & 0x19) == 0)
  {
    v4 = *((_QWORD *)v1 + 4);
    if (!v4)
    {
LABEL_8:
      v5 = 0;
      switch(v2)
      {
        case 0u:
          v6 = *((_DWORD *)this + 2);
          v7 = *((_DWORD *)v1 + 6);
          *((_DWORD *)v1 + 6) = v7 + 2;
          v8 = v1[14];
          if ((v8 & 1) != 0)
          {
            v10 = *((_QWORD *)v1 + 10);
            if (v10)
              LODWORD(v10) = *(_DWORD *)(v10 + 4);
          }
          else if ((v8 & 4) != 0 && (v9 = *((_QWORD *)v1 + 10)) != 0)
          {
            LODWORD(v10) = 0;
            do
            {
              LODWORD(v10) = v10 + 1;
              v9 = *(_QWORD *)(v9 + 56);
            }
            while (v9);
          }
          else
          {
            LODWORD(v10) = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v1 + 208))(v1) ^ 1;
            v7 = *((_DWORD *)v1 + 6) - 2;
          }
          v5 = v6 >= v10;
          if (v7)
            goto LABEL_24;
          goto LABEL_14;
        case 2u:
          v5 = *((_QWORD *)v1 + 7) == 0;
          if ((v3 & 1) == 0)
            goto LABEL_26;
          return v5;
        case 3u:
          v7 = *((_DWORD *)v1 + 6);
          *((_DWORD *)v1 + 6) = v7 + 2;
          v11 = v1[14];
          if ((v11 & 1) != 0)
          {
            v13 = *((_QWORD *)v1 + 10);
            if (v13)
              LODWORD(v13) = *(_DWORD *)(v13 + 4);
          }
          else if ((v11 & 4) != 0 && (v12 = *((_QWORD *)v1 + 10)) != 0)
          {
            LODWORD(v13) = 0;
            do
            {
              LODWORD(v13) = v13 + 1;
              v12 = *(_QWORD *)(v12 + 56);
            }
            while (v12);
          }
          else
          {
            LODWORD(v13) = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v1 + 208))(v1) ^ 1;
            v7 = *((_DWORD *)v1 + 6) - 2;
          }
          v5 = (_DWORD)v13 == 0;
          if (v7)
          {
LABEL_24:
            *((_DWORD *)v1 + 6) = v7;
          }
          else
          {
LABEL_14:
            if ((v1[15] & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v1);
              if ((v3 & 1) == 0)
                goto LABEL_26;
              return v5;
            }
          }
LABEL_25:
          if ((v3 & 1) != 0)
            return v5;
          break;
        case 4u:
          v5 = 1;
          if ((v3 & 1) == 0)
            goto LABEL_26;
          return v5;
        default:
          goto LABEL_25;
      }
      goto LABEL_26;
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  if (!*(_QWORD *)(v4 + 32))
  {
    v3 = 0;
    v2 = *((_BYTE *)this + 12) & 7;
    goto LABEL_8;
  }
  v5 = 0;
LABEL_26:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v5;
}

BOOL WebCore::Position::isCandidate(WebCore::Position *this, const WebCore::Node *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  const WebCore::Node *v7;
  WebCore::Node *v8;
  __int16 v9;
  _DWORD *v10;
  char hasRenderedNonAnonymousDescendantsWithHeight;
  const WebCore::Node *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL8 v18;
  int v19;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _BOOL8 v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  int OffsetForEditing;
  uint64_t v31;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    ++*(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    v6 = v4;
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
    if ((*(_BYTE *)(v6 + 120) & 0x30) != 0)
      goto LABEL_84;
    if (*(_BYTE *)(v4 + 46) == 17 && ((*(_BYTE *)(v4 + 52) & 7) != 2 || (*(_BYTE *)(v4 + 53) & 1) == 0))
    {
      if (*((_DWORD *)this + 2) || (*((_BYTE *)this + 12) & 7) == 2)
        goto LABEL_84;
      goto LABEL_70;
    }
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      v23 = *(_QWORD **)(v4 + 32);
      if (v23)
        v23 = (_QWORD *)v23[1];
      v24 = v23[13];
      if ((*(_BYTE *)(v24 + 239) & 1) != 0)
        goto LABEL_84;
      v25 = *(_DWORD *)(v24 + 228);
      if (((v25 & 0x30) == 0 || (*(_DWORD *)(*(_QWORD *)(v23[11] + 32) + 148) & 0xC00000) == 0x800000)
        && (v25 & 0x18000) == 0)
      {
        goto LABEL_84;
      }
      v26 = WebCore::containsOffset(v4, *((_DWORD *)this + 2), 1);
      goto LABEL_49;
    }
    if ((WebCore::isRenderedTable((WebCore *)v2, a2) & 1) != 0
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2) & 1) == 0)
    {
      if ((!WebCore::Position::atFirstEditingPositionForNode(this, v7) || (*((_BYTE *)this + 12) & 7) != 1)
        && (!WebCore::Position::atLastEditingPositionForNode(this, a2) || (*((_BYTE *)this + 12) & 7) != 2))
      {
        goto LABEL_84;
      }
LABEL_70:
      v18 = !WebCore::Position::nodeIsUserSelectNone(*(_QWORD *)(v2 + 32), a2);
      goto LABEL_26;
    }
    v8 = *(WebCore::Node **)this;
    v9 = *(_WORD *)(*(_QWORD *)this + 28);
    if ((v9 & 0x10) == 0 || *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      if ((*(_BYTE *)(v4 + 45) & 0x40) == 0
        || (*(_BYTE *)(v4 + 52) & 7) != 1 && (*(_BYTE *)(v4 + 45) & 0x80) == 0 && *(_BYTE *)(v4 + 46) != 12)
      {
        if (!WebCore::Node::computeEditability((uint64_t)v8, 0, 1))
          goto LABEL_84;
        v31 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
        if (v31)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            v31 = *(_QWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
            if (v31)
              v31 = *(_QWORD *)(v31 + 8);
          }
          if (!WebCore::RenderStyle::usedUserSelect((WebCore::RenderStyle *)(v31 + 80)))
            goto LABEL_84;
        }
        goto LABEL_48;
      }
      v10 = (_DWORD *)(v4 + 160);
      if (((*(_DWORD *)(v4 + 124) >> 13) & 6u) - 2 >= 4)
        v10 = (_DWORD *)(v4 + 164);
      if (*v10
        || (v9 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
        || WebCore::Node::isRootEditableElement(v8))
      {
        hasRenderedNonAnonymousDescendantsWithHeight = WebCore::Position::hasRenderedNonAnonymousDescendantsWithHeight((WebCore::Position *)v4, (unint64_t)v7);
        v13 = *(_QWORD *)this;
        if ((hasRenderedNonAnonymousDescendantsWithHeight & 1) == 0)
        {
          if (!v13)
            goto LABEL_21;
          if ((*((_BYTE *)this + 12) & 7) != 0)
          {
            switch(*((_BYTE *)this + 12) & 7)
            {
              case 1:
              case 3:
                goto LABEL_21;
              case 2:
              case 4:
                *(_DWORD *)(v13 + 24) += 2;
                OffsetForEditing = WebCore::lastOffsetForEditing((WebCore *)v13, v12);
                if (*(_DWORD *)(v13 + 24) == 2)
                {
                  if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v13);
                }
                else
                {
                  *(_DWORD *)(v13 + 24) -= 2;
                }
                if (OffsetForEditing)
                  goto LABEL_84;
                goto LABEL_21;
              default:
                goto LABEL_84;
            }
          }
          if (!*((_DWORD *)this + 2))
          {
LABEL_21:
            v14 = (_QWORD *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
            if (v14)
            {
              if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                v14 = *(_QWORD **)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
                if (v14)
                  v14 = (_QWORD *)v14[1];
              }
              v15 = v14[13];
              if ((*(_BYTE *)(v15 + 239) & 1) != 0)
              {
                v17 = 0;
              }
              else
              {
                v16 = *(_DWORD *)(v15 + 228);
                v17 = (v16 >> 15) & 3;
                if ((v16 & 0x30) != 0)
                {
                  v21 = *(_DWORD *)(*(_QWORD *)(v14[11] + 32) + 148) & 0xC00000;
                  v22 = v17 <= 1 ? 1 : (v16 >> 15) & 3;
                  if (v21 != 0x800000)
                    v17 = v22;
                }
              }
              v18 = v17 != 0;
            }
            else
            {
              v18 = 1;
            }
            goto LABEL_26;
          }
          goto LABEL_84;
        }
        if (WebCore::Node::computeEditability(*(_QWORD *)this, 0, 1))
        {
          v27 = (_QWORD *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
          if (!v27)
            goto LABEL_48;
          if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            v27 = *(_QWORD **)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
            if (v27)
              v27 = (_QWORD *)v27[1];
          }
          v28 = v27[13];
          if ((*(_BYTE *)(v28 + 239) & 1) == 0)
          {
            if ((v29 = *(_DWORD *)(v28 + 228), (v29 & 0x30) != 0)
              && (*(_DWORD *)(*(_QWORD *)(v27[11] + 32) + 148) & 0xC00000) != 0x800000
              || (v29 & 0x18000) != 0)
            {
LABEL_48:
              v26 = WebCore::Position::atEditingBoundary(this);
LABEL_49:
              v18 = v26;
LABEL_26:
              v19 = *(_DWORD *)(v4 + 16);
              if (!v19)
              {
                __break(0xC471u);
                JUMPOUT(0x195A20AD8);
              }
              *(_DWORD *)(v4 + 16) = v19 - 1;
              v3 = *(_DWORD *)(v2 + 24) - 2;
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_84:
    v18 = 0;
    goto LABEL_26;
  }
  v18 = 0;
LABEL_28:
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return v18;
}

uint64_t *WebCore::Position::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_DWORD *)a2 + 2);
  *((_BYTE *)a1 + 12) = *((_BYTE *)a2 + 12);
  *((_DWORD *)a1 + 2) = v6;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)(v4 + 24) += 2;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_DWORD *)a2 + 2);
  *((_BYTE *)a1 + 12) = *((_BYTE *)a2 + 12);
  *((_DWORD *)a1 + 2) = v6;
  return a1;
}

unint64_t WebCore::Position::rendersInDifferentPosition(WebCore::Position *this, const WebCore::Position *a2)
{
  uint64_t v2;
  _WORD *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  __int16 v16;
  uint64_t v17;
  WebCore::Node *v18;
  int v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  _BOOL4 v30;
  int v31;
  WebCore *v32;
  uint64_t LeafNode;
  uint64_t v34;
  WebCore *v35;
  int hasInlineRun;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WebCore *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  WebCore::RenderText *v48;
  uint64_t v49;
  unsigned int v50;
  __int16 v51;
  WebCore::RenderText *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  int v58;
  _BYTE v59[16];
  int v60;
  _QWORD v61[2];
  unsigned int v62;
  _BYTE v63[16];
  int v64;
  char v65;
  char *v66;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = *(_WORD **)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v5 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    v12 = 0;
    if (v5)
      goto LABEL_17;
    goto LABEL_90;
  }
  ++*(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  v7 = *((_DWORD *)v4 + 6);
  *((_DWORD *)v4 + 6) = v7 + 2;
  v8 = *((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    v12 = 0;
    if (v7)
      goto LABEL_14;
    goto LABEL_93;
  }
  ++*(_DWORD *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v10 = v6;
  if ((*(_BYTE *)(v6 + 45) & 2) != 0)
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
  if ((*(_BYTE *)(v10 + 120) & 0x30) != 0)
    goto LABEL_11;
  v11 = v8;
  if ((*(_BYTE *)(v8 + 45) & 2) != 0)
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8);
  if ((*(_BYTE *)(v11 + 120) & 0x30) != 0)
  {
LABEL_11:
    v12 = 0;
    goto LABEL_12;
  }
  v16 = *(_WORD *)(v2 + 28);
  if ((_WORD *)v2 == v4)
  {
    if ((v16 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
      goto LABEL_11;
    v19 = *((_DWORD *)this + 2);
    if (v19 == WebCore::Position::deprecatedEditingOffset(a2, a2))
      goto LABEL_11;
    v16 = *(_WORD *)(v2 + 28);
    if ((v16 & 2) == 0)
      goto LABEL_28;
  }
  if ((v16 & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24)
    && WebCore::Position::isCandidate(a2, a2)
    || (v4[14] & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v4 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24)
    && WebCore::Position::isCandidate(this, a2)
    || (v17 = WebCore::deprecatedEnclosingBlockFlowElement(v2, a2),
        v17 != WebCore::deprecatedEnclosingBlockFlowElement((uint64_t)v4, v18)))
  {
LABEL_28:
    v12 = 1;
    goto LABEL_12;
  }
  v20 = *(_BYTE *)(v6 + 45);
  if ((v20 & 2) != 0 && !WebCore::containsOffset(v6, *((_DWORD *)this + 2), 1))
    goto LABEL_11;
  v21 = *(_BYTE *)(v8 + 45);
  if ((v21 & 2) != 0 && !WebCore::containsOffset(v8, *((_DWORD *)a2 + 2), 1))
    goto LABEL_11;
  v22 = *((_DWORD *)this + 2);
  if ((v20 & 2) != 0)
    v22 = WebCore::RenderText::countRenderedCharacterOffsetsUntil((WebCore::RenderText *)v6, (WebCore::RenderObject *)*((unsigned int *)this + 2));
  v12 = *((unsigned int *)a2 + 2);
  if ((v21 & 2) != 0)
    v12 = WebCore::RenderText::countRenderedCharacterOffsetsUntil((WebCore::RenderText *)v8, (WebCore::RenderObject *)*((unsigned int *)a2 + 2));
  if (v6 == v8 && v22 == (_DWORD)v12)
    goto LABEL_11;
  if (!*(_QWORD *)this)
    goto LABEL_159;
  v23 = *(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL;
  if (!v23)
    goto LABEL_159;
  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
  {
    v43 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v43)
    {
      v23 = *(_QWORD *)(v43 + 8);
      if (v23)
      {
        while ((*(_BYTE *)(v23 + 52) & 7) != 1)
        {
          v44 = *(_QWORD *)(v23 + 32);
          if (!v44)
            goto LABEL_159;
          v24 = 0;
          v23 = *(_QWORD *)(v44 + 8);
          if (!v23)
            goto LABEL_48;
        }
        goto LABEL_47;
      }
    }
LABEL_159:
    v24 = 0;
    goto LABEL_48;
  }
LABEL_47:
  v24 = (*(unsigned __int8 *)(v23 + 123) >> 2) & 1;
LABEL_48:
  WebCore::Position::inlineBoxAndOffset(this, (const WebCore::Node *)1, v24, (uint64_t)v61);
  v63[0] = 0;
  v64 = -1;
  v25 = v62;
  if (v62 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _QWORD *))off_1E33A69D8[v62])(v59, v63, v61);
    v64 = v25;
    if (v62 != -1)
      ((void (*)(_BYTE *, _QWORD *))off_1E33A6968[v62])(v59, v61);
  }
  if (!*(_QWORD *)a2)
    goto LABEL_160;
  v26 = *(_QWORD *)(*(_QWORD *)a2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v26)
    goto LABEL_160;
  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
  {
    v45 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v45)
    {
      v26 = *(_QWORD *)(v45 + 8);
      if (v26)
      {
        while ((*(_BYTE *)(v26 + 52) & 7) != 1)
        {
          v46 = *(_QWORD *)(v26 + 32);
          if (!v46)
            goto LABEL_160;
          v27 = 0;
          v26 = *(_QWORD *)(v46 + 8);
          if (!v26)
            goto LABEL_55;
        }
        goto LABEL_54;
      }
    }
LABEL_160:
    v27 = 0;
    goto LABEL_55;
  }
LABEL_54:
  v27 = (*(unsigned __int8 *)(v26 + 123) >> 2) & 1;
LABEL_55:
  WebCore::Position::inlineBoxAndOffset(a2, (const WebCore::Node *)1, v27, (uint64_t)v61);
  v59[0] = 0;
  v60 = -1;
  v28 = v62;
  if (v62 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E33A69D8[v62])(v57, v59, v61);
    v60 = v28;
    if (v62 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E33A6968[v62])(v57, v61);
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v63) & 1) != 0
    || (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v59) & 1) != 0)
  {
    goto LABEL_60;
  }
  if (v64 == -1
    || (v57[0] = &v66,
        ((void (*)(_QWORD *__return_ptr, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v64])(v61, v57, v63), v60 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_180;
  }
  v66 = &v65;
  ((void (*)(_QWORD *__return_ptr, char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v60])(v57, &v66, v59);
  v29 = v58;
  v30 = v58 == v62;
  if (v58 == -1)
    v30 = 0;
  if (v62 == -1)
    v31 = v58 == -1;
  else
    v31 = v30;
  if (v62 != -1 && v30)
  {
    v66 = &v65;
    v31 = ((uint64_t (*)(char **, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENSD_25LineBoxIteratorLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v62])(&v66, v61, v57);
    v29 = v58;
  }
  if (v29 != -1)
    ((void (*)(char **, _QWORD *))off_1E33A69B8[v29])(&v66, v57);
  if (v62 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E33A69B8[v62])(v57, v61);
  if (!v31)
  {
LABEL_154:
    v12 = 1;
    goto LABEL_155;
  }
  v32 = (WebCore *)v2;
  while (1)
  {
    LeafNode = WebCore::nextLeafNode(v32, a2);
    if (!LeafNode)
      break;
    v32 = (WebCore *)LeafNode;
    v34 = *(_QWORD *)(LeafNode + 64);
    v35 = (WebCore *)(v34 & 0xFFFFFFFFFFFFLL);
    if ((v34 & 0xFFFFFFFFFFFFLL) != 0)
    {
      ++*(_DWORD *)((v34 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (WebCore::Node::computeEditability(LeafNode, 0, 1))
      {
        hasInlineRun = WebCore::hasInlineRun(v35, a2);
        if (hasInlineRun)
          v25 = (uint64_t)v32;
      }
      else
      {
        hasInlineRun = 2;
      }
      v37 = *((_DWORD *)v35 + 4);
      if (!v37)
      {
        __break(0xC471u);
        JUMPOUT(0x195A214C8);
      }
      *((_DWORD *)v35 + 4) = v37 - 1;
    }
    else
    {
      hasInlineRun = 2;
    }
    if (hasInlineRun == 1)
      goto LABEL_98;
  }
  v25 = 0;
LABEL_98:
  if (v4 == (_WORD *)v25)
  {
    v47 = v4[14];
    if ((v47 & 2) != 0 && (v48 = (WebCore::RenderText *)(*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL)) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195A21550);
      }
      v50 = WebCore::RenderText::caretMaxOffset(v48, a2);
    }
    else if ((v47 & 1) != 0)
    {
      v56 = *((_QWORD *)v4 + 10);
      v50 = v56 ? *(_DWORD *)(v56 + 4) : 0;
    }
    else if ((v47 & 4) != 0 && (v49 = *((_QWORD *)v4 + 10)) != 0)
    {
      v50 = 0;
      do
      {
        ++v50;
        v49 = *(_QWORD *)(v49 + 56);
      }
      while (v49);
    }
    else
    {
      v50 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 208))(v4) ^ 1;
    }
    if (v22 == v50 && !(_DWORD)v12)
      goto LABEL_155;
  }
  v38 = v2;
  while (1)
  {
    v39 = *(_QWORD *)(v38 + 48) & 0xFFFFFFFFFFFFLL;
    if (!v39)
      break;
    do
    {
      v38 = v39;
      if ((*(_WORD *)(v39 + 28) & 4) == 0)
        break;
      if (!*(_QWORD *)(v39 + 80))
        break;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 208))(v39))
        break;
      if ((*(_WORD *)(v38 + 28) & 4) == 0)
        break;
      v39 = *(_QWORD *)(v38 + 88);
    }
    while (v39);
LABEL_108:
    if ((*(_WORD *)(v38 + 28) & 4) == 0
      || !*(_QWORD *)(v38 + 80)
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 208))(v38) & 1) == 0)
    {
      v40 = (WebCore *)(*(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL);
      if (v40)
      {
        ++*(_DWORD *)((*(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        if (WebCore::Node::computeEditability(v38, 0, 1))
        {
          v41 = WebCore::hasInlineRun(v40, a2);
          if (v41)
            v25 = v38;
        }
        else
        {
          v41 = 2;
        }
        v42 = *((_DWORD *)v40 + 4);
        if (!v42)
        {
          __break(0xC471u);
          JUMPOUT(0x195A214A8);
        }
        *((_DWORD *)v40 + 4) = v42 - 1;
      }
      else
      {
        v41 = 2;
      }
      if (v41 == 1)
        goto LABEL_145;
    }
  }
  v38 = *(_QWORD *)(v38 + 32);
  if (v38)
    goto LABEL_108;
  v25 = 0;
LABEL_145:
  if (v4 != (_WORD *)v25 || v22)
    goto LABEL_154;
  v51 = v4[14];
  if ((v51 & 2) == 0 || (v52 = (WebCore::RenderText *)(*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL)) == 0)
  {
    if ((v51 & 1) == 0)
    {
      if ((v51 & 4) != 0 && (v53 = *((_QWORD *)v4 + 10)) != 0)
      {
        v54 = 0;
        do
        {
          ++v54;
          v53 = *(_QWORD *)(v53 + 56);
        }
        while (v53);
      }
      else
      {
        v54 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 208))(v4) ^ 1;
      }
      goto LABEL_153;
    }
    v55 = *((_QWORD *)v4 + 10);
    if (v55)
    {
      v54 = *(_DWORD *)(v55 + 4);
      goto LABEL_153;
    }
LABEL_180:
    v54 = 0;
    goto LABEL_153;
  }
  if ((*(_BYTE *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A21530);
  }
  v54 = WebCore::RenderText::caretMaxOffset(v52, a2);
LABEL_153:
  if ((_DWORD)v12 != v54)
    goto LABEL_154;
LABEL_60:
  v12 = 0;
LABEL_155:
  if (v60 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E33A6968[v60])(v61, v59);
  if (v64 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E33A6968[v64])(v61, v63);
LABEL_12:
  v13 = *(_DWORD *)(v8 + 16);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x195A21220);
  }
  *(_DWORD *)(v8 + 16) = v13 - 1;
  v7 = *((_DWORD *)v4 + 6) - 2;
  if (*((_DWORD *)v4 + 6) != 2)
  {
LABEL_14:
    *((_DWORD *)v4 + 6) = v7;
    goto LABEL_15;
  }
LABEL_93:
  if ((v4[15] & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
LABEL_15:
  v14 = *(_DWORD *)(v6 + 16);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x195A21200);
  }
  *(_DWORD *)(v6 + 16) = v14 - 1;
  v5 = *(_DWORD *)(v2 + 24) - 2;
  if (*(_DWORD *)(v2 + 24) != 2)
  {
LABEL_17:
    *(_DWORD *)(v2 + 24) = v5;
    return v12;
  }
LABEL_90:
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  return v12;
}

BOOL WebCore::PositionIterator::atStart(WebCore::PositionIterator *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  if (*(_QWORD *)(v1 + 32))
    return 0;
  if (((*(_WORD *)(v1 + 28) & 4) == 0 || !*(_QWORD *)(v1 + 80)) && !*((_DWORD *)this + 4))
    return 1;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  return (*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) == 0;
}

uint64_t WebCore::endsOfNodeAreVisuallyDistinctPositions(uint64_t this, WebCore::Node *a2)
{
  WebCore *v2;
  int v3;
  unint64_t v4;
  WebCore *v5;

  if (this)
  {
    v2 = (WebCore *)this;
    if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) == 0)
      return 0;
    v3 = *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x14);
    if ((v3 & 1) != 0)
      return 1;
    if ((*(_WORD *)(this + 28) & 0x10) != 0)
    {
      this = 0;
      if ((v3 & 2) == 0 || *(_QWORD *)(*((_QWORD *)v2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
        return this;
    }
    else if ((v3 & 2) == 0)
    {
      return 0;
    }
    v5 = v2;
    this = WebCore::canHaveChildrenForEditing(v2, a2);
    if ((_DWORD)this)
    {
      if ((*(_BYTE *)((*((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
        goto LABEL_18;
      if (*(_DWORD *)((*((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL) + 0xA4))
      {
        if ((*((_WORD *)v5 + 14) & 4) == 0 || !*((_QWORD *)v5 + 10))
          return 1;
        if ((*(_BYTE *)((*((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          return WebCore::Position::hasRenderedNonAnonymousDescendantsWithHeight((WebCore::Position *)(*((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL), v4) ^ 1;
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x195A2169CLL);
      }
      return 0;
    }
  }
  return this;
}

uint64_t WebCore::PositionIterator::operator WebCore::Position@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  WebCore::PositionIterator *v2;
  uint64_t v4;
  int v5;
  int v6;
  WebCore **v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  char v11;
  int v12;
  WebCore::Node *v14;
  char v15;

  v2 = (WebCore::PositionIterator *)this;
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v7 = (WebCore **)(this + 8);
    if (!*(_QWORD *)(this + 8))
      goto LABEL_6;
    goto LABEL_25;
  }
  v5 = *(_DWORD *)(v4 + 24);
  v6 = v5 + 2;
  *(_DWORD *)(v4 + 24) = v5 + 2;
  v7 = (WebCore **)(this + 8);
  v8 = *(_QWORD *)(this + 8);
  if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
  {
    *(_DWORD *)(v4 + 24) = v5 + 4;
    if ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195A21858);
      }
      v12 = *(unsigned __int8 *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
      v9 = v12 == 35 || v12 == 63;
    }
    else
    {
      v9 = 0;
    }
    if (v6)
    {
      *(_DWORD *)(v4 + 24) = v6;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
  }
  else
  {
    v9 = 0;
  }
  if (v8)
  {
    if (v9)
    {
LABEL_44:
      v15 = 1;
LABEL_45:
      *(_DWORD *)(v4 + 24) += 2;
      *(_QWORD *)a2 = v4;
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | v15;
      goto LABEL_27;
    }
LABEL_25:
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4);
    if ((_DWORD)this)
    {
      this = (uint64_t)WebCore::positionInParentBeforeNode(*v7, v14, a2);
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  if (v9)
    goto LABEL_37;
LABEL_6:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4) & 1) == 0)
  {
LABEL_37:
    this = WebCore::PositionIterator::atStartOfNode(v2);
    if ((_DWORD)this)
      v15 = 1;
    else
      v15 = 2;
    goto LABEL_45;
  }
  if (!v4 || (*(_WORD *)(v4 + 28) & 4) == 0 || !*(_QWORD *)(v4 + 80))
  {
    v10 = *((_DWORD *)v2 + 4);
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = v10;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4);
    if ((this & 1) != 0)
    {
      v11 = 8;
    }
    else if (v10)
    {
      v11 = 10;
    }
    else
    {
      v11 = 9;
    }
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | v11;
    return this;
  }
  this = WebCore::lastPositionInOrAfterNode((WebCore *)a2, (WebCore::Node *)v4);
LABEL_27:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

uint64_t *WebCore::PositionIterator::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)(v4 + 24) += 2;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = a2[1];
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  return a1;
}

uint64_t WebCore::isStreamer(WebCore *this, const WebCore::PositionIterator *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  *(_DWORD *)(v2 + 24) += 2;
  if ((*(_WORD *)(v2 + 28) & 4) == 0
    || !*(_QWORD *)(v2 + 80)
    || !(*(unsigned int (**)(uint64_t, const WebCore::PositionIterator *))(*(_QWORD *)v2 + 208))(v2, a2)
    || (v6 = *(_QWORD *)this) == 0)
  {
    v3 = 1;
    goto LABEL_5;
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    v8 = (*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) == 0;
  }
  else
  {
    if ((*(_WORD *)(v6 + 28) & 4) != 0 && *(_QWORD *)(v6 + 80))
    {
      v3 = 0;
      goto LABEL_5;
    }
    v8 = *((_DWORD *)this + 4) == 0;
  }
  v3 = v8;
LABEL_5:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v3;
}

BOOL WebCore::PositionIterator::atStartOfNode(WebCore::PositionIterator *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    return (*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL) == 0;
  }
  else
  {
    if ((*(_WORD *)(v1 + 28) & 4) != 0 && *(_QWORD *)(v1 + 80))
      return 0;
    return *((_DWORD *)this + 4) == 0;
  }
}

BOOL WebCore::PositionIterator::atEndOfNode(WebCore::PositionIterator *this)
{
  _WORD *v1;
  int v2;
  _BOOL8 v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v1 = *(_WORD **)this;
  if (!*(_QWORD *)this)
    return 1;
  v2 = *((_DWORD *)v1 + 6);
  *((_DWORD *)v1 + 6) = v2 + 2;
  if (*((_QWORD *)this + 1))
  {
    v3 = 0;
    goto LABEL_13;
  }
  v4 = v1[14];
  if ((v4 & 4) != 0)
  {
    if (*((_QWORD *)v1 + 10))
    {
      v3 = 1;
      goto LABEL_13;
    }
    v5 = *((_DWORD *)this + 4);
    if ((v4 & 1) != 0)
    {
      LODWORD(v6) = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v5 = *((_DWORD *)this + 4);
    if ((v4 & 1) != 0)
    {
      v6 = *((_QWORD *)v1 + 10);
      if (v6)
        LODWORD(v6) = *(_DWORD *)(v6 + 4);
      goto LABEL_12;
    }
  }
  LODWORD(v6) = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v1 + 208))(v1) ^ 1;
  v2 = *((_DWORD *)v1 + 6) - 2;
LABEL_12:
  v3 = v5 >= (int)v6;
LABEL_13:
  if (v2)
  {
    *((_DWORD *)v1 + 6) = v2;
  }
  else if ((v1[15] & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebCore::InlineIterator::TextBoxIterator::operator->(uint64_t a1)
{
  uint64_t v1;
  WebCore::InlineIterator::TextBox *v4;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::InlineIterator::TextBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::TextBox::start(v4);
  }
  else
  {
    v6 = &v5;
    if ((((uint64_t (*)(char **, uint64_t))off_1E33A6988[v1])(&v6, a1) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A21BC0);
    }
    return a1;
  }
}

uint64_t WebCore::InlineIterator::TextBox::start(WebCore::InlineIterator::TextBox *this)
{
  uint64_t v1;
  WebCore::InlineIterator::TextBox *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::TextBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::TextBox::end(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::TextBox *))off_1E33A6998[v1])(&v5, this);
  }
}

uint64_t WebCore::InlineIterator::TextBox::end(WebCore::InlineIterator::TextBox *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::TextBoxIterator::operator=(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::TextBox *))off_1E33A69A8[v1])(&v6, this);
  }
}

uint64_t WebCore::InlineIterator::TextBoxIterator::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_5:
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33A6A28[v4])(&v6, a1, a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t, uint64_t))off_1E33A6968[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t WebCore::PositionIterator::decrement(WebCore::PositionIterator *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = *(_QWORD *)this;
  if (!result)
    return result;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    if ((*(_WORD *)(result + 28) & 4) != 0 && *(_QWORD *)(result + 80))
    {
      v11 = *(_QWORD *)(result + 88);
      if (v11)
        *(_DWORD *)(v11 + 24) += 2;
      *(_QWORD *)this = v11;
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
        {
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          v11 = *(_QWORD *)this;
        }
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
      v12 = *(_WORD *)(v11 + 28);
      if (v11)
        v13 = (v12 & 4) == 0;
      else
        v13 = 1;
      if (!v13 && *(_QWORD *)(v11 + 80))
      {
        LODWORD(v15) = 0;
      }
      else if ((v12 & 1) != 0)
      {
        v15 = *(_QWORD *)(v11 + 80);
        if (v15)
          LODWORD(v15) = *(_DWORD *)(v15 + 4);
      }
      else if ((v12 & 4) != 0 && (v14 = *(_QWORD *)(v11 + 80)) != 0)
      {
        LODWORD(v15) = 0;
        do
        {
          LODWORD(v15) = v15 + 1;
          v14 = *(_QWORD *)(v14 + 56);
        }
        while (v14);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 208))(v11);
        LODWORD(v15) = result ^ 1;
      }
      *((_DWORD *)this + 4) = v15;
    }
    else
    {
      if (*((_DWORD *)this + 4) && (*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 544))(*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL);
        *((_DWORD *)this + 4) = result;
        return result;
      }
      v4 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v4 + 2;
      *((_QWORD *)this + 1) = result;
      v5 = *(_QWORD *)(result + 32);
      if (v5)
      {
        *(_DWORD *)(v5 + 24) += 2;
        v4 = *(_DWORD *)(result + 24) - 2;
      }
      *(_QWORD *)this = v5;
      if (v4)
      {
        *(_DWORD *)(result + 24) = v4;
        return result;
      }
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    return result;
  }
  v6 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
  if (v6)
    *(_DWORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  *(_QWORD *)this = v6;
  if (*(_DWORD *)(result + 24) == 2)
  {
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result);
      v6 = *(_QWORD *)this;
    }
  }
  else
  {
    *(_DWORD *)(result + 24) -= 2;
  }
  if (!v6)
  {
    v16 = *((_QWORD *)this + 1);
    v17 = *(_QWORD *)(v16 + 32);
    if (v17)
      *(_DWORD *)(v17 + 24) += 2;
    *((_QWORD *)this + 1) = v17;
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v16);
        v17 = *((_QWORD *)this + 1);
      }
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
    v18 = *(_QWORD *)(v17 + 32);
    if (v18)
      *(_DWORD *)(v18 + 24) += 2;
    result = *(_QWORD *)this;
    *(_QWORD *)this = v18;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    *((_DWORD *)this + 4) = 0;
    return result;
  }
  *(_DWORD *)(v6 + 24) += 2;
  result = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  v7 = *(_WORD *)(v6 + 28);
  if ((v7 & 4) != 0)
  {
    v8 = v7 & 1;
    if (*(_QWORD *)(v6 + 80))
      v9 = 0;
    else
      v9 = v8 == 0;
    if (!v9)
    {
      LODWORD(v10) = 0;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if ((v7 & 1) == 0)
  {
LABEL_27:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 208))(v6);
    LODWORD(v10) = result ^ 1;
    goto LABEL_28;
  }
  v10 = *(_QWORD *)(v6 + 80);
  if (v10)
    LODWORD(v10) = *(_DWORD *)(v10 + 4);
LABEL_28:
  *((_DWORD *)this + 4) = v10;
  if (*(_DWORD *)(v6 + 24) != 2)
  {
    *(_DWORD *)(v6 + 24) -= 2;
    return result;
  }
  if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
  {
    result = v6;
    return WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  return result;
}

BOOL WebCore::PositionIterator::atEnd(WebCore::PositionIterator *this, const WebCore::Node *a2)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  int v6;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  if (*((_QWORD *)this + 1) || *(_QWORD *)(v2 + 32))
  {
    v4 = 0;
  }
  else if ((*(_WORD *)(v2 + 28) & 4) != 0 && *(_QWORD *)(v2 + 80))
  {
    v4 = 1;
  }
  else
  {
    v6 = *((_DWORD *)this + 4);
    v4 = v6 >= (int)WebCore::lastOffsetForEditing((WebCore *)v2, a2);
    v3 = *(_DWORD *)(v2 + 24) - 2;
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return v4;
}

uint64_t WebCore::PositionIterator::increment(uint64_t this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = this;
    v5 = (uint64_t *)(this + 8);
    v4 = *(_QWORD *)(this + 8);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      *(_QWORD *)this = v4;
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
          v4 = *(_QWORD *)v3;
        }
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
      v6 = 0;
      if (v4)
      {
        if ((*(_WORD *)(v4 + 28) & 4) != 0)
        {
          v6 = *(_QWORD *)(v4 + 80);
          if (v6)
            *(_DWORD *)(v6 + 24) += 2;
        }
      }
      this = *v5;
      *v5 = v6;
      if (this)
      {
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this);
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
      }
      *(_DWORD *)(v3 + 16) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 24) += 2;
      v10 = v2;
      if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) == 0
        || (*(_WORD *)(v2 + 28) & 4) != 0 && *(_QWORD *)(v2 + 80)
        || (v7 = *(_DWORD *)(this + 16), v7 >= (int)WebCore::lastOffsetForEditing((WebCore *)v2, a2)))
      {
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(v5, &v10);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v3, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 32));
        this = (uint64_t)WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(v5, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 56));
        *(_DWORD *)(v3 + 16) = 0;
        v2 = v10;
        v10 = 0;
        if (!v2)
          return this;
      }
      else
      {
        v8 = *(unsigned int *)(v3 + 16);
        v9 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
        if (v9)
          this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 560))(v9, v8);
        else
          this = (v8 + 1);
        *(_DWORD *)(v3 + 16) = this;
        v10 = 0;
      }
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::Position::hasRenderedNonAnonymousDescendantsWithHeight(WebCore::Position *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v10;
  unsigned __int16 *v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WebCore::RenderObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!(*(unsigned int *)((char *)this + 47) | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
    || (v2 = *(_QWORD *)((*(unsigned int *)((char *)this + 47) | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
                       + 8)) == 0)
  {
    for (i = *((_QWORD *)this + 4); i; i = *(_QWORD *)(v4 + 32))
    {
      v4 = *(_QWORD *)(i + 8);
      if (!v4)
        break;
      v5 = *(unsigned int *)(v4 + 47);
      if (v5 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32))
      {
        v2 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
        if (v2)
          goto LABEL_9;
      }
    }
    v2 = 0;
  }
LABEL_9:
  v6 = *((unsigned int *)this + 16);
  if (v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v7 = *(_QWORD *)((v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v7 && v7 != v2)
    {
      while (1)
      {
        v10 = *(_BYTE *)(v7 + 45);
        if ((v10 & 1) == 0)
        {
          v11 = *(unsigned __int16 **)(*(_QWORD *)(v7 + 24) + 8);
          if (v11)
          {
            if ((~v11[14] & 0x408) == 0)
            {
              if ((*(unsigned int (**)(unsigned __int16 *, unint64_t))(*(_QWORD *)v11 + 368))(v11, a2))
              {
                goto LABEL_38;
              }
              v10 = *(_BYTE *)(v7 + 45);
            }
          }
        }
        if ((v10 & 1) == 0 && *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8))
        {
          if ((v10 & 2) != 0)
          {
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 672))(v7, a2);
            v18 = v7;
            if ((*(_BYTE *)(v7 + 45) & 2) != 0)
              v18 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8);
            v19 = (unsigned __int16)*(_DWORD *)(v18 + 124) >> 13;
            if ((v19 - 2) >= 2 && v19 != 4 && v19 != 5)
              a2 >>= 32;
            if ((_DWORD)a2)
              return 1;
          }
          else
          {
            if (*(_BYTE *)(v7 + 46) == 17)
            {
              WebCore::RenderLineBreak::linesBoundingBox((WebCore::RenderLineBreak *)v7, (WebCore::RenderObject *)a2);
LABEL_56:
              if (WebCore::boundingBoxLogicalHeight((WebCore *)v7, v21, (const WebCore::IntRect *)((unint64_t)v21 >> 32)))return 1;
              goto LABEL_38;
            }
            if ((v10 & 4) == 0)
            {
              if ((v10 & 0x20) == 0
                || !WebCore::isEmptyInline((WebCore *)v7, (const WebCore::RenderInline *)a2))
              {
                goto LABEL_38;
              }
              WebCore::RenderInline::linesBoundingBox((WebCore::LegacyInlineBox **)v7, (WebCore::RenderObject *)a2);
              goto LABEL_56;
            }
            v12 = (int *)(v7 + 160);
            if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 >= 4)
              v12 = (int *)(v7 + 164);
            v13 = *v12;
            v14 = v13 / 64;
            v15 = -v13 < 0;
            v16 = -v13 & 0x3F;
            v17 = v13 & 0x3F;
            if (!v15)
              v17 = -v16;
            if (v14 + ((v17 + 32) >> 6))
              return 1;
          }
        }
LABEL_38:
        v20 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 112))(v7, a2);
        if (!v20)
        {
          v22 = *(unsigned int *)(v7 + 47);
          if (!(v22 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
            || (v20 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8)) == 0)
          {
            v23 = *(_QWORD *)(v7 + 32);
            if (!v23)
              return 0;
            v24 = *(_QWORD *)(v23 + 8);
            if (!v24)
              return 0;
            while (1)
            {
              v25 = *(unsigned int *)(v24 + 47);
              if (v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32))
              {
                v20 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32)) + 8);
                if (v20)
                  break;
              }
              v26 = *(_QWORD *)(v24 + 32);
              if (!v26)
                return 0;
              result = 0;
              v24 = *(_QWORD *)(v26 + 8);
              if (!v24)
                return result;
            }
          }
        }
        result = 0;
        v7 = v20;
        if (v20 == v2)
          return result;
      }
    }
  }
  return 0;
}

WebCore::RenderObject *WebCore::boundingBoxLogicalHeight(WebCore *this, WebCore::RenderObject *a2, const WebCore::IntRect *a3)
{
  int v3;

  if ((*((_BYTE *)this + 45) & 2) != 0)
    this = *(WebCore **)(*((_QWORD *)this + 4) + 8);
  v3 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v3 - 2) < 2 || v3 == 4 || v3 == 5)
    return a2;
  return a3;
}

BOOL WebCore::Position::nodeIsUserSelectNone(_BOOL8 this, WebCore::Node *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  if (this)
  {
    v2 = (_QWORD *)(*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL);
    if (v2)
    {
      if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v2 = *(_QWORD **)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v2)
          v2 = (_QWORD *)v2[1];
      }
      v3 = v2[13];
      if ((*(_BYTE *)(v3 + 239) & 1) != 0)
      {
        v5 = 0;
      }
      else
      {
        v4 = *(_DWORD *)(v3 + 228);
        v5 = (v4 >> 15) & 3;
        if ((v4 & 0x30) != 0)
        {
          v6 = *(_DWORD *)(*(_QWORD *)(v2[11] + 32) + 148) & 0xC00000;
          if (v5 <= 1)
            v7 = 1;
          else
            v7 = (v4 >> 15) & 3;
          if (v6 != 0x800000)
            v5 = v7;
        }
      }
      return v5 == 0;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t WebCore::Position::rootUserSelectAllForNode@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  if (!this)
    goto LABEL_53;
  v4 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (!v4)
    goto LABEL_53;
  v5 = *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v5 + 1;
  v6 = (_QWORD *)v4;
  if ((*(_BYTE *)(v4 + 45) & 2) != 0)
  {
    v6 = *(_QWORD **)(v4 + 32);
    if (v6)
      v6 = (_QWORD *)v6[1];
  }
  if (v5 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A22900);
  }
  v7 = v6[13];
  if ((*(_BYTE *)(v7 + 239) & 1) != 0)
  {
    *(_DWORD *)(v4 + 16) = v5;
LABEL_53:
    *a2 = 0;
    return this;
  }
  v8 = *(_DWORD *)(v7 + 228);
  v9 = (v8 >> 15) & 3;
  if ((v8 & 0x30) != 0)
  {
    v18 = *(_DWORD *)(*(_QWORD *)(v6[11] + 32) + 148) & 0xC00000;
    v19 = v9 <= 1 ? 1 : (v8 >> 15) & 3;
    if (v18 != 0x800000)
      v9 = v19;
  }
  *(_DWORD *)(v4 + 16) = v5;
  if (v9 != 2)
    goto LABEL_53;
  v10 = *(_QWORD *)(this + 32);
  if (!v10)
  {
    *(_DWORD *)(this + 24) += 2;
    *a2 = this;
    return this;
  }
  *(_DWORD *)(v10 + 24) += 2;
  *(_DWORD *)(this + 24) += 2;
  *a2 = this;
  while (1)
  {
    v11 = *(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v11)
    {
      v16 = *(_QWORD *)(v10 + 32);
      if (v16)
        *(_DWORD *)(v16 + 24) += 2;
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      goto LABEL_21;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A228C0);
    }
    v12 = *(_DWORD *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v12 + 1;
    if (v12 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x195A228E0);
    }
    v13 = *(_QWORD *)(v11 + 104);
    if ((*(_BYTE *)(v13 + 239) & 1) != 0)
      break;
    v14 = *(_DWORD *)(v13 + 228);
    v15 = (v14 >> 15) & 3;
    if ((v14 & 0x30) != 0)
    {
      v17 = v15 <= 1 ? 1 : (v14 >> 15) & 3;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 32) + 148) & 0xC00000) != 0x800000)
        v15 = v17;
    }
    *(_DWORD *)(v11 + 16) = v12;
    if (v15 != 2)
      goto LABEL_48;
    this = *a2;
    *a2 = v10;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
    v16 = *(_QWORD *)(v10 + 32);
    if (!v16)
      return this;
    *(_DWORD *)(v16 + 24) += 2;
LABEL_21:
    v10 = v16;
    if (!v16)
      return this;
  }
  *(_DWORD *)(v11 + 16) = v12;
LABEL_48:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v10);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::Position::inlineBoxAndOffset@<X0>(WebCore::Position *a1@<X0>, const WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;

  if (!*(_QWORD *)a1)
    goto LABEL_12;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    goto LABEL_12;
  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
  {
    v6 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v6)
    {
      v3 = *(_QWORD *)(v6 + 8);
      if (v3)
      {
        while ((*(_BYTE *)(v3 + 52) & 7) != 1)
        {
          v7 = *(_QWORD *)(v3 + 32);
          if (!v7)
            goto LABEL_12;
          v4 = 0;
          v3 = *(_QWORD *)(v7 + 8);
          if (!v3)
            return WebCore::Position::inlineBoxAndOffset(a1, a2, v4, a3);
        }
        goto LABEL_4;
      }
    }
LABEL_12:
    v4 = 0;
    return WebCore::Position::inlineBoxAndOffset(a1, a2, v4, a3);
  }
LABEL_4:
  v4 = (*(unsigned __int8 *)(v3 + 123) >> 2) & 1;
  return WebCore::Position::inlineBoxAndOffset(a1, a2, v4, a3);
}

unsigned int *WebCore::Position::leadingWhitespacePosition@<X0>(unsigned int *result@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  const WebCore::VisiblePosition *v15;
  WebCore::Node *v16;
  uint64_t (*v17)();
  _BOOL4 v18;
  WebCore::Node *v19;
  _BOOL4 isCandidate;
  uint64_t v21;
  void *v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  WebCore::Node *v27;
  WebCore::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t k;
  WebCore::Node *v32;
  WebCore::Node *v33;
  uint64_t v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  uint64_t v37;
  WebCore::Node *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Node *v43;
  unsigned int v44;
  int v45;
  int v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  int v49;
  WebCore::Node *v50;
  int v51;
  char v52;
  char v53;
  WebCore::Node *v54;
  int v55;
  char v56;
  char v57;

  if (!*(_QWORD *)result)
    goto LABEL_7;
  v7 = (uint64_t)result;
  WebCore::Position::upstream((uint64_t)result, (WebCore::Node *)1, (uint64_t)&v54);
  result = (unsigned int *)v54;
  v9 = (*((_WORD *)v54 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v54 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24);
  if (*((_DWORD *)v54 + 6) == 2)
  {
    if ((*((_WORD *)v54 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(v54, v8);
  }
  else
  {
    *((_DWORD *)v54 + 6) -= 2;
  }
  if (v9)
  {
LABEL_7:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 12) &= 0xF0u;
    return result;
  }
  v49 = a3;
  v10 = *(_QWORD *)v7;
  if (*(_QWORD *)v7)
  {
    v11 = 0;
    v12 = *(_QWORD *)v7;
    do
    {
      if (!WebCore::Node::hasEditableStyle(v12, 0))
        break;
      if ((*(_WORD *)(v12 + 28) & 8) != 0)
        v11 = v12;
      i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 1272);
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      if (i == v12)
        break;
      v12 = *(_QWORD *)(v12 + 32);
    }
    while (v12);
    if (v11)
      *(_DWORD *)(v11 + 24) += 2;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v7, (uint64_t)&v50);
    v53 = 1;
    v16 = v50;
    if ((a2 & 1) == 0 && v50)
    {
      *((_DWORD *)v50 + 6) += 2;
      v54 = v16;
      v55 = v51;
      v56 = v52;
      v57 = 0;
      if (!WebCore::inSameLine((WebCore *)&v50, (const WebCore::VisiblePosition *)&v54, v15))
        v53 = 0;
      v48 = v54;
      v54 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48, v14);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
      v16 = v50;
    }
    v17 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v16)
      v17 = 0;
    if (v17)
    {
      WebCore::startOfLine((uint64_t)&v54, (WebCore::VisiblePosition *)&v50, (WebCore::Node *)1, 0);
      v18 = WebCore::operator==((uint64_t *)&v50, (uint64_t *)&v54);
      v19 = v54;
      v54 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19, v14);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      v16 = v50;
    }
    else
    {
      v18 = 0;
    }
    v50 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v14);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    isCandidate = WebCore::Position::isCandidate((WebCore::Position *)v7, (const WebCore::Node *)v14);
    v21 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
      *(_DWORD *)(v21 + 24) += 2;
    v54 = (WebCore::Node *)v21;
    v55 = *(_DWORD *)(v7 + 8);
    v56 = *(_BYTE *)(v7 + 12);
    if (v18 || !isCandidate)
    {
      while (!WebCore::Position::atStartOfTree((WebCore::Position *)&v54))
      {
        WebCore::Position::previous((uint64_t)&v54, 0, (uint64_t)&v50);
        v23 = v50;
        v54 = v50;
        if (v21)
        {
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v21, v22);
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
        v55 = v51;
        v56 = v52;
        v24 = 0;
        if (v23)
        {
          v25 = (uint64_t)v23;
          do
          {
            if (!WebCore::Node::hasEditableStyle(v25, 0))
              break;
            if ((*(_WORD *)(v25 + 28) & 8) != 0)
              v24 = v25;
            j = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 5) + 8) + 1272);
            if (j)
            {
              if ((*(_WORD *)(j + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              {
                for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
                {
                  if ((*(_WORD *)(j + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                  {
                    break;
                  }
                }
              }
              else
              {
                j = 0;
              }
            }
            if (j == v25)
              break;
            v25 = *(_QWORD *)(v25 + 32);
          }
          while (v25);
        }
        if (v11 != v24)
          break;
        v21 = (uint64_t)v23;
        if (WebCore::Position::isCandidate((WebCore::Position *)&v54, (const WebCore::Node *)v22))
          goto LABEL_98;
      }
    }
    else
    {
      while (!WebCore::Position::atStartOfTree((WebCore::Position *)&v54))
      {
        WebCore::Position::previous((uint64_t)&v54, 0, (uint64_t)&v50);
        v27 = v50;
        v28 = v54;
        v54 = v50;
        if (v28)
        {
          if (*((_DWORD *)v28 + 6) == 2)
          {
            if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v28, v22);
              v27 = v54;
            }
          }
          else
          {
            *((_DWORD *)v28 + 6) -= 2;
          }
        }
        v55 = v51;
        v56 = v52;
        v29 = 0;
        if (v27)
        {
          v30 = (uint64_t)v27;
          do
          {
            if (!WebCore::Node::hasEditableStyle(v30, 0))
              break;
            if ((*(_WORD *)(v30 + 28) & 8) != 0)
              v29 = v30;
            k = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v27 + 5) + 8) + 1272);
            if (k)
            {
              if ((*(_WORD *)(k + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(k + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              {
                for (k = *(_QWORD *)(k + 80); k; k = *(_QWORD *)(k + 56))
                {
                  if ((*(_WORD *)(k + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(k + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                  {
                    break;
                  }
                }
              }
              else
              {
                k = 0;
              }
            }
            if (k == v30)
              break;
            v30 = *(_QWORD *)(v30 + 32);
          }
          while (v30);
        }
        if (v11 != v29)
          break;
        if (WebCore::Position::rendersInDifferentPosition((WebCore::Position *)v7, (const WebCore::Position *)&v54))
        {
          v23 = v54;
LABEL_98:
          v50 = v23;
          v51 = v55;
          v52 = v56;
          goto LABEL_99;
        }
      }
    }
    v32 = *(WebCore::Node **)v7;
    if (*(_QWORD *)v7)
      *((_DWORD *)v32 + 6) += 2;
    v50 = v32;
    v51 = *(_DWORD *)(v7 + 8);
    v52 = *(_BYTE *)(v7 + 12);
    v33 = v54;
    v54 = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v33, v22);
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
    }
LABEL_99:
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v22);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
  }
  else
  {
    v50 = 0;
    v51 = 0;
    v52 &= 0xF0u;
  }
  v34 = *(_QWORD *)v7;
  if (*(_QWORD *)v7)
    *(_DWORD *)(v34 + 24) += 2;
  v35 = v50;
  if (v50)
    *((_DWORD *)v50 + 6) += 2;
  if (!WebCore::operator==((uint64_t)&v50, v7) && v34 && v35)
  {
    v37 = WebCore::deprecatedEnclosingBlockFlowElement(v34, v36);
    if (v37 != WebCore::deprecatedEnclosingBlockFlowElement((uint64_t)v35, v38) || (*((_WORD *)v35 + 14) & 2) == 0)
      goto LABEL_113;
    v40 = WebCore::Position::deprecatedEditingOffset((WebCore::Position *)&v50, v36);
    v41 = *((_QWORD *)v35 + 10);
    if (v41)
    {
      if (*(_DWORD *)(v41 + 4) <= v40)
      {
        LODWORD(v41) = 0;
      }
      else
      {
        v42 = *(_QWORD *)(v41 + 8);
        if ((*(_BYTE *)(v41 + 16) & 4) != 0)
          LODWORD(v41) = *(unsigned __int8 *)(v42 + v40);
        else
          LODWORD(v41) = *(unsigned __int16 *)(v42 + 2 * v40);
      }
    }
    if (v49)
    {
      if ((v41 > 0x20 || ((1 << v41) & 0x100003600) == 0) && (_DWORD)v41 != 160)
        goto LABEL_113;
    }
    else if ((_DWORD)v41 != 32 && (_DWORD)v41 != 10)
    {
      goto LABEL_113;
    }
    v43 = v50;
    if (v50)
    {
      v44 = v52 & 7;
      if (v44 <= 4 && (((1 << v44) & 0x19) != 0 || (v43 = (WebCore::Node *)*((_QWORD *)v50 + 4)) != 0))
      {
        *((_DWORD *)v43 + 6) += 2;
        v45 = WebCore::Node::computeEditability((uint64_t)v43, 0, 0);
        v46 = *((_DWORD *)v43 + 6) - 2;
        if (v45)
        {
          if (*((_DWORD *)v43 + 6) == 2)
          {
            if ((*((_WORD *)v43 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v43, v36);
          }
          else
          {
            *((_DWORD *)v43 + 6) = v46;
          }
          v47 = v50;
          v50 = 0;
          *(_QWORD *)a4 = v47;
          *(_DWORD *)(a4 + 8) = v51;
          v39 = v52;
          goto LABEL_114;
        }
        if (*((_DWORD *)v43 + 6) == 2)
        {
          if ((*((_WORD *)v43 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v43, v36);
        }
        else
        {
          *((_DWORD *)v43 + 6) = v46;
        }
      }
    }
LABEL_113:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    v39 = *(_BYTE *)(a4 + 12) & 0xF0;
LABEL_114:
    *(_BYTE *)(a4 + 12) = v39;
LABEL_115:
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, v36);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
    goto LABEL_117;
  }
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 12) &= 0xF0u;
  if (v35)
    goto LABEL_115;
LABEL_117:
  if (v34)
  {
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v34, v36);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  result = (unsigned int *)v50;
  v50 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v36);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Position::trailingWhitespacePosition@<X0>(unsigned int *result@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned __int16 v6;
  uint64_t (*v7)();
  void *v8;
  BOOL v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  uint64_t (*v12)();
  uint64_t v13;
  char v14;
  WebCore::Node *v15[2];
  char v16;
  WebCore::Node *v17[3];

  if (!*(_QWORD *)result)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) &= 0xF0u;
    return result;
  }
  v5 = result;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)result, (uint64_t)v15);
  v16 = 1;
  v6 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)v15);
  if (v15[0])
    v7 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v7 = 0;
  if (v7)
  {
    WebCore::endOfParagraph((WebCore::Node *)v15, 1, v17);
    v9 = WebCore::operator==((uint64_t *)v15, (uint64_t *)v17);
    v10 = v17[0];
    v17[0] = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v8);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    if (v9)
      goto LABEL_28;
  }
  WebCore::VisiblePosition::next((unsigned __int8 *)v15, 1, 0, (uint64_t)v17);
  v11 = v17[0];
  if (v17[0])
    v12 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v12 = 0;
  v17[0] = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v8);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  if (!v12)
    goto LABEL_28;
  if (a2)
  {
    if ((v6 > 0x20u || ((1 << v6) & 0x100003600) == 0) && v6 != 160)
      goto LABEL_28;
LABEL_25:
    v13 = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
      *(_DWORD *)(v13 + 24) += 2;
    *(_QWORD *)a3 = v13;
    *(_DWORD *)(a3 + 8) = v5[2];
    v14 = *((_BYTE *)v5 + 12);
    goto LABEL_29;
  }
  if (v6 == 32 || v6 == 10)
    goto LABEL_25;
LABEL_28:
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  v14 = *(_BYTE *)(a3 + 12) & 0xF0;
LABEL_29:
  *(_BYTE *)(a3 + 12) = v14;
  result = (unsigned int *)v15[0];
  v15[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Position::inlineBoxAndOffset@<X0>(WebCore::Position *a1@<X0>, const WebCore::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t result;
  const WebCore::RenderLineBreak *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  WebCore::RenderText *v15;
  WebCore::LayoutIntegration::LineLayout *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  WebCore::InlineIterator::Box *v30;
  WebCore::InlineIterator::TextBox *v31;
  int v32;
  unsigned int *v33;
  int v34;
  WebCore::InlineIterator::Box *v35;
  const WebCore::RenderBox *v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _BOOL4 v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  int v61;
  char v62;
  _QWORD v63[2];
  int v64;
  uint64_t v65[2];
  int v66;
  uint64_t v67;
  int v68;
  char v69;
  int v70;
  unsigned int v71[4];
  int v72;
  _BYTE v73[9];

  v5 = (int)a2;
  v6 = (uint64_t)a1;
  result = WebCore::Position::deprecatedEditingOffset(a1, a2);
  v10 = result;
  v11 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
  {
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 1;
    *(_DWORD *)(a4 + 24) = result;
    return result;
  }
  v12 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 2;
  v13 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 1;
    *(_DWORD *)(a4 + 24) = result;
    goto LABEL_51;
  }
  v52 = a3;
  v53 = a4;
  *(_QWORD *)v71 = 0;
  v72 = 1;
  if (*(_BYTE *)(v13 + 46) == 17 && ((*(_BYTE *)(v13 + 52) & 7) != 2 || (*(_BYTE *)(v13 + 53) & 1) == 0))
  {
    if (!(_DWORD)result)
    {
      WebCore::InlineIterator::boxFor((WebCore::InlineIterator *)v13, v9, &v67);
      WebCore::InlineIterator::LeafBoxIterator::operator=((uint64_t)v71, (uint64_t)&v67);
      if (v70 != -1)
        ((void (*)(uint64_t *, uint64_t *))off_1E33A6968[v70])(v65, &v67);
      v10 = 0;
    }
    goto LABEL_45;
  }
  v14 = *(_BYTE *)(v13 + 45);
  if ((v14 & 2) != 0)
    v15 = (WebCore::RenderText *)v13;
  else
    v15 = 0;
  if ((*(_BYTE *)(v13 + 45) & 2) == 0)
  {
    *(_DWORD *)(v11 + 24) = v12 + 4;
    result = WebCore::canHaveChildrenForEditing((WebCore *)v11, v9);
    if ((_DWORD)result)
    {
      v37 = *(_BYTE *)(v13 + 52) & 7;
      if (v37 == 1)
        v38 = v13;
      else
        v38 = 0;
      if (v38)
        ++*(_DWORD *)(v38 + 16);
      if (v37 == 1)
      {
        result = WebCore::Position::hasRenderedNonAnonymousDescendantsWithHeight((WebCore::Position *)v13, (unint64_t)v36);
        if ((_DWORD)result)
          goto LABEL_202;
      }
      if (v38)
      {
        v39 = *(_DWORD *)(v38 + 16);
        if (!v39)
        {
          __break(0xC471u);
          JUMPOUT(0x195A2421CLL);
        }
        *(_DWORD *)(v38 + 16) = v39 - 1;
      }
    }
    if ((*(_BYTE *)(v13 + 45) & 4) == 0)
    {
LABEL_123:
      v40 = 1;
      goto LABEL_124;
    }
    WebCore::InlineIterator::boxFor((WebCore::InlineIterator *)v13, v36, &v67);
    if (v72 == -1)
    {
      if (v70 == -1)
        goto LABEL_122;
    }
    else if (v70 == -1)
    {
      ((void (*)(uint64_t *, unsigned int *))off_1E33A6968[v72])(v65, v71);
      v72 = -1;
LABEL_120:
      if (v70 != -1)
        ((void (*)(uint64_t *, uint64_t *))off_1E33A6968[v70])(v65, &v67);
LABEL_122:
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v71);
      if ((result & 1) == 0)
      {
        result = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v71);
        if (v10 > result)
        {
          result = WebCore::InlineIterator::Box::maximumCaretOffset((WebCore::InlineIterator::Box *)v71);
          if (v10 < result)
          {
            *(_BYTE *)v53 = 0;
            *(_DWORD *)(v53 + 16) = -1;
            v48 = v72;
            if (v72 != -1)
            {
              result = ((uint64_t (*)(uint64_t *, uint64_t, unsigned int *))off_1E33A6978[v72])(&v67, v53, v71);
              *(_DWORD *)(v53 + 16) = v48;
            }
            v40 = 0;
            *(_DWORD *)(v53 + 24) = v10;
            goto LABEL_124;
          }
        }
      }
      goto LABEL_123;
    }
    v65[0] = (uint64_t)v71;
    ((void (*)(uint64_t *, unsigned int *, uint64_t *))off_1E33A69E8[v70])(v65, v71, &v67);
    goto LABEL_120;
  }
  ++*(_DWORD *)(v13 + 16);
  v16 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v13, v9);
  if (v16)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v16, (const WebCore::RenderText *)v13, (uint64_t)&v67);
  }
  else
  {
    v67 = *(_QWORD *)(v13 + 64);
    v70 = 1;
  }
  v65[0] = 0;
  v66 = 1;
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67) & 1) != 0)
  {
LABEL_23:
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) == 0)
    {
      v31 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v65);
      WebCore::InlineIterator::TextBox::nextTextBox(v31, (uint64_t)v63);
      v32 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v63) & v5;
      if (v64 != -1)
        ((void (*)(_BYTE *, _QWORD *))off_1E33A6968[v64])(v73, v63);
      if (v32)
      {
        WebCore::searchAheadForBetterMatch((WebCore *)v63, v15);
        WebCore::InlineIterator::LeafBoxIterator::operator=((uint64_t)&v67, (uint64_t)v63);
        if (v64 != -1)
          ((void (*)(_BYTE *, _QWORD *))off_1E33A6968[v64])(v73, v63);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67) & 1) == 0)
        {
          v33 = (unsigned int *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)&v67);
          v10 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v33);
        }
      }
    }
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67);
    if ((_DWORD)result)
      v19 = v65;
    else
      v19 = &v67;
    v20 = v66;
    v21 = v70;
    if ((_DWORD)result)
      v21 = v66;
    if (v72 == -1)
    {
      if (v21 == -1)
      {
        v22 = 1;
        goto LABEL_34;
      }
    }
    else if (v21 == -1)
    {
      result = ((uint64_t (*)(_QWORD *, unsigned int *, uint64_t *))off_1E33A6968[v72])(v63, v71, v19);
      v72 = -1;
      goto LABEL_32;
    }
    v63[0] = v71;
    result = ((uint64_t (*)(_QWORD *, unsigned int *, uint64_t *))off_1E33A6A28[v21])(v63, v71, v19);
LABEL_32:
    v22 = 1;
    goto LABEL_33;
  }
  while (1)
  {
    if (v70 == -1)
    {
LABEL_201:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_202:
      v46 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        *(_DWORD *)(v46 + 24) += 2;
      v60 = v46;
      v61 = *(_DWORD *)(v6 + 8);
      v62 = *(_BYTE *)(v6 + 12);
      WebCore::downstreamIgnoringEditingBoundaries((uint64_t)&v67, (uint64_t)&v60);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v60);
      if (!WebCore::operator==((uint64_t)&v67, v6))
        goto LABEL_218;
      v47 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        *(_DWORD *)(v47 + 24) += 2;
      v57 = v47;
      v58 = *(_DWORD *)(v6 + 8);
      v59 = *(_BYTE *)(v6 + 12);
      WebCore::upstreamIgnoringEditingBoundaries((uint64_t)v65, (uint64_t)&v57);
      WebCore::Position::operator=(&v67, v65);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v65);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v57);
      if (WebCore::operator==((uint64_t)&v67, v6))
        goto LABEL_208;
      v49 = v67;
      if (v67)
        *(_DWORD *)(v67 + 24) += 2;
      v54 = v49;
      v55 = v68;
      v56 = v69;
      WebCore::downstreamIgnoringEditingBoundaries((uint64_t)v65, (uint64_t)&v54);
      v50 = WebCore::operator==((uint64_t)v65, v6);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v65);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v54);
      if (v50)
      {
LABEL_208:
        *(_QWORD *)(v53 + 8) = 0;
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)v53 = 0;
        *(_DWORD *)(v53 + 16) = 1;
        *(_DWORD *)(v53 + 24) = v10;
      }
      else
      {
LABEL_218:
        WebCore::Position::inlineBoxAndOffset(&v67, 0, a3);
      }
      result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v67);
      v51 = *(_DWORD *)(v13 + 16);
      if (!v51)
      {
        __break(0xC471u);
LABEL_222:
        JUMPOUT(0x195A23A40);
      }
      v40 = 0;
      *(_DWORD *)(v13 + 16) = v51 - 1;
LABEL_124:
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
      if (v40)
        goto LABEL_39;
      goto LABEL_48;
    }
    v63[0] = v73;
    if ((((uint64_t (*)(_QWORD *, uint64_t *))off_1E33A6988[v70])(v63, &v67) & 1) == 0)
    {
      __break(0xC471u);
      goto LABEL_222;
    }
    v17 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)&v67);
    if (v70 == -1)
      goto LABEL_201;
    v6 = v17;
    v63[0] = v73;
    if ((((uint64_t (*)(_QWORD *, uint64_t *))off_1E33A6988[v70])(v63, &v67) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A23A60);
    }
    if (v70 == -1)
      goto LABEL_201;
    v63[0] = v73;
    result = ((uint64_t (*)(_QWORD *, uint64_t *))off_1E33A6A08[v70])(v63, &v67);
    if (v10 >= v6)
    {
      v18 = result;
      if (v10 <= result)
      {
        if (v10 != (_DWORD)result)
          break;
        v30 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)&v67);
        result = WebCore::InlineIterator::Box::isLineBreak(v30);
        if ((result & 1) == 0)
          break;
      }
    }
LABEL_93:
    WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)&v67);
    if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67))
      goto LABEL_23;
  }
  if (v10 <= v6 || v10 >= v18)
  {
    if ((((v10 == v18) ^ v5) & 1) != 0 || (((v10 != (_DWORD)v6) ^ v5) & 1) != 0)
      goto LABEL_23;
    if (v10 == v18)
    {
      v35 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)&v67);
      WebCore::InlineIterator::Box::nextOnLine(v35, (uint64_t)v63);
      v6 = (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v63) & 1) != 0
        || (WebCore::InlineIterator::Box::isLineBreak((WebCore::InlineIterator::Box *)v63) & 1) == 0;
      if (v64 != -1)
        ((void (*)(_BYTE *, _QWORD *))off_1E33A6968[v64])(v73, v63);
      if (!(_DWORD)v6)
        goto LABEL_23;
    }
    WebCore::InlineIterator::TextBoxIterator::operator=((uint64_t)v65, (uint64_t)&v67);
    goto LABEL_93;
  }
  *(_BYTE *)v53 = 0;
  *(_DWORD *)(v53 + 16) = -1;
  v34 = v70;
  if (v70 != -1)
  {
    result = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))off_1E33A6978[v70])(v63, v53, &v67);
    *(_DWORD *)(v53 + 16) = v34;
  }
  v22 = 0;
  *(_DWORD *)(v53 + 24) = v10;
LABEL_33:
  v20 = v66;
LABEL_34:
  if (v20 != -1)
    result = ((uint64_t (*)(_QWORD *, uint64_t *))off_1E33A6968[v20])(v63, v65);
  if (v70 != -1)
    result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33A6968[v70])(v65, &v67);
  if ((v22 & 1) != 0)
LABEL_39:
    v23 = 1;
  else
    v23 = 0;
  if ((v14 & 2) != 0)
  {
    v24 = *(_DWORD *)(v13 + 16);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x195A23B90);
    }
    *(_DWORD *)(v13 + 16) = v24 - 1;
  }
  if (!v23)
    goto LABEL_48;
LABEL_45:
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v71);
  if ((_DWORD)result)
  {
    v25 = v53;
    *(_QWORD *)(v53 + 8) = 0;
    *(_QWORD *)(v53 + 16) = 0;
    *(_QWORD *)v53 = 0;
    *(_DWORD *)(v53 + 16) = 1;
    goto LABEL_47;
  }
  v26 = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v71);
  v25 = v53;
  if (WebCore::InlineIterator::Box::direction((WebCore::InlineIterator::Box *)v71) != v52)
  {
    v41 = WebCore::InlineIterator::Box::leftmostCaretOffset((WebCore::InlineIterator::Box *)v71);
    if (v10 == v41)
    {
      WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v71, (uint64_t)&v67);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67) & 1) != 0
        || WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67) < v26)
      {
        WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v71, (uint64_t)v65);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) == 0)
        {
          do
          {
            if (WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v65) < v26)
              break;
            WebCore::InlineIterator::TextBoxIterator::operator=((uint64_t)v71, (uint64_t)v65);
            WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLineIgnoringLineBreak((WebCore::InlineIterator::LeafBoxIterator *)v65);
          }
          while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65));
        }
        if (v66 != -1)
          ((void (*)(_QWORD *, uint64_t *))off_1E33A6968[v66])(v63, v65);
        result = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)v71);
        goto LABEL_166;
      }
      result = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67);
      if (result > v26)
      {
        WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v71, (uint64_t)v65);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) == 0)
        {
          do
          {
            if (WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v65) <= v26)
              break;
            WebCore::InlineIterator::TextBoxIterator::operator=((uint64_t)v71, (uint64_t)v65);
            WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLineIgnoringLineBreak((WebCore::InlineIterator::LeafBoxIterator *)v65);
          }
          while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65));
        }
        if (v66 != -1)
          ((void (*)(_QWORD *, uint64_t *))off_1E33A6968[v66])(v63, v65);
        result = WebCore::InlineIterator::Box::leftmostCaretOffset((WebCore::InlineIterator::Box *)v71);
        goto LABEL_197;
      }
    }
    else
    {
      WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v71, (uint64_t)&v67);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67) & 1) != 0
        || WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67) < v26)
      {
        WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v71, (uint64_t)v65);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) == 0)
        {
          do
          {
            if (WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v65) < v26)
              break;
            WebCore::InlineIterator::TextBoxIterator::operator=((uint64_t)v71, (uint64_t)v65);
            WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLineIgnoringLineBreak((WebCore::InlineIterator::LeafBoxIterator *)v65);
          }
          while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65));
        }
        if (v66 != -1)
          ((void (*)(_QWORD *, uint64_t *))off_1E33A6968[v66])(v63, v65);
        result = WebCore::InlineIterator::Box::leftmostCaretOffset((WebCore::InlineIterator::Box *)v71);
LABEL_166:
        v10 = result;
      }
      else
      {
        result = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67);
        if (result > v26)
        {
          WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v71, (uint64_t)v65);
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) == 0)
          {
            do
            {
              if (WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v65) <= v26)
                break;
              WebCore::InlineIterator::TextBoxIterator::operator=((uint64_t)v71, (uint64_t)v65);
              WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLineIgnoringLineBreak((WebCore::InlineIterator::LeafBoxIterator *)v65);
            }
            while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65));
          }
          if (v66 != -1)
            ((void (*)(_QWORD *, uint64_t *))off_1E33A6968[v66])(v63, v65);
          result = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)v71);
LABEL_197:
          v10 = result;
          v25 = v53;
        }
      }
    }
    if (v70 != -1)
      result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33A6968[v70])(v65, &v67);
LABEL_70:
    *(_BYTE *)v25 = 0;
    *(_DWORD *)(v25 + 16) = -1;
    v29 = v72;
    if (v72 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, unsigned int *))off_1E33A6978[v72])(&v67, v25, v71);
      *(_DWORD *)(v25 + 16) = v29;
    }
LABEL_47:
    *(_DWORD *)(v25 + 24) = v10;
    goto LABEL_48;
  }
  if (v10 == WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)v71))
  {
    WebCore::InlineIterator::Box::nextOnLine((WebCore::InlineIterator::Box *)v71, (uint64_t)&v67);
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67);
    if ((result & 1) != 0)
      goto LABEL_63;
    result = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67);
    if (result >= v26)
      goto LABEL_63;
    v42 = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67);
    WebCore::InlineIterator::Box::previousOnLine((WebCore::InlineIterator::Box *)v71, (uint64_t)v65);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) == 0)
    {
      do
      {
        if (WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v65) <= v42)
          break;
        WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine((WebCore::InlineIterator::LeafBoxIterator *)v65);
      }
      while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65));
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) != 0
      || (result = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v65), (_DWORD)result != v42))
    {
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67) & 1) == 0)
      {
        do
        {
          if (WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67) < v42)
            break;
          WebCore::InlineIterator::TextBoxIterator::operator=((uint64_t)v71, (uint64_t)&v67);
          WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLine((WebCore::InlineIterator::LeafBoxIterator *)&v67);
        }
        while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67));
      }
      result = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)v71);
      goto LABEL_175;
    }
    *(_BYTE *)v53 = 0;
    *(_DWORD *)(v53 + 16) = -1;
    v43 = v72;
    if (v72 != -1)
    {
      result = ((uint64_t (*)(_QWORD *, uint64_t, unsigned int *))off_1E33A6978[v72])(v63, v53, v71);
      *(_DWORD *)(v53 + 16) = v43;
    }
    *(_DWORD *)(v53 + 24) = v10;
LABEL_157:
    v28 = 1;
LABEL_176:
    if (v66 != -1)
      result = ((uint64_t (*)(_QWORD *, uint64_t *))off_1E33A6968[v66])(v63, v65);
  }
  else
  {
    WebCore::InlineIterator::Box::previousOnLine((WebCore::InlineIterator::Box *)v71, (uint64_t)&v67);
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67);
    if ((result & 1) == 0)
    {
      result = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67);
      if (result < v26)
      {
        v44 = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67);
        WebCore::InlineIterator::Box::nextOnLine((WebCore::InlineIterator::Box *)v71, (uint64_t)v65);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) == 0)
        {
          do
          {
            if (WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v65) <= v44)
              break;
            WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLine((WebCore::InlineIterator::LeafBoxIterator *)v65);
          }
          while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65));
        }
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v65) & 1) == 0)
        {
          result = WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)v65);
          if ((_DWORD)result == v44)
          {
            *(_BYTE *)v53 = 0;
            *(_DWORD *)(v53 + 16) = -1;
            v45 = v72;
            if (v72 != -1)
            {
              result = ((uint64_t (*)(_QWORD *, uint64_t, unsigned int *))off_1E33A6978[v72])(v63, v53, v71);
              *(_DWORD *)(v53 + 16) = v45;
            }
            *(_DWORD *)(v53 + 24) = v10;
            goto LABEL_157;
          }
        }
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67) & 1) == 0)
        {
          do
          {
            if (WebCore::InlineIterator::Box::bidiLevel((WebCore::InlineIterator::Box *)&v67) < v44)
              break;
            WebCore::InlineIterator::TextBoxIterator::operator=((uint64_t)v71, (uint64_t)&v67);
            WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine((WebCore::InlineIterator::LeafBoxIterator *)&v67);
          }
          while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v67));
        }
        result = WebCore::InlineIterator::Box::leftmostCaretOffset((WebCore::InlineIterator::Box *)v71);
LABEL_175:
        v10 = result;
        v28 = 0;
        goto LABEL_176;
      }
    }
LABEL_63:
    *(_BYTE *)v53 = 0;
    *(_DWORD *)(v53 + 16) = -1;
    v27 = v72;
    if (v72 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, unsigned int *))off_1E33A6978[v72])(v65, v53, v71);
      *(_DWORD *)(v53 + 16) = v27;
    }
    *(_DWORD *)(v53 + 24) = v10;
    v28 = 1;
  }
  if (v70 != -1)
    result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33A6968[v70])(v65, &v67);
  if (!v28)
  {
    v25 = v53;
    goto LABEL_70;
  }
LABEL_48:
  if (v72 != -1)
    result = ((uint64_t (*)(uint64_t *, unsigned int *))off_1E33A6968[v72])(&v67, v71);
  v12 = *(_DWORD *)(v11 + 24) - 2;
LABEL_51:
  if (v12)
  {
    *(_DWORD *)(v11 + 24) = v12;
  }
  else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  return result;
}

uint64_t WebCore::Position::primaryDirection(WebCore::Position *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  result = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
      return (*(unsigned __int8 *)(result + 123) >> 2) & 1;
    result = WebCore::ancestorsOfType<WebCore::RenderBlockFlow>(result);
    if (result)
      return (*(unsigned __int8 *)(result + 123) >> 2) & 1;
  }
  return result;
}

uint64_t WebCore::InlineIterator::LeafBoxIterator::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_5:
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33A69E8[v4])(&v6, a1, a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t, uint64_t))off_1E33A6968[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t WebCore::InlineIterator::Box::maximumCaretOffset(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  WebCore::InlineIterator::Box *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::isLineBreak(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E33A6A08[v1])(&v5, this);
  }
}

uint64_t WebCore::InlineIterator::Box::isLineBreak(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  WebCore *v3;
  WebCore::RenderText *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::searchAheadForBetterMatch(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E33A6A18[v1])(&v6, this);
  }
}

uint64_t WebCore::searchAheadForBetterMatch(WebCore *this, WebCore::RenderText *a2)
{
  WebCore::RenderText *v2;
  WebCore::RenderObject *v4;
  WebCore::RenderObject *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::RenderText *v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  int v15;
  WTF *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE v27[16];
  int v28;
  WTF *v29;
  char v30;

  v2 = a2;
  v4 = WebCore::RenderObject::containingBlock(a2);
  v5 = v4;
  if (v4)
    ++*((_DWORD *)v4 + 4);
  ++*((_DWORD *)v2 + 4);
  while (1)
  {
    while (1)
    {
      result = (*(uint64_t (**)(WebCore::RenderText *))(*(_QWORD *)v2 + 112))(v2);
      v7 = result;
      if (!result)
      {
        if (v2 == v5)
        {
          v2 = v5;
LABEL_51:
          v25 = *((_DWORD *)v2 + 4);
          if (!v25)
          {
LABEL_57:
            __break(0xC471u);
            JUMPOUT(0x195A2477CLL);
          }
          *((_DWORD *)v2 + 4) = v25 - 1;
          *((_QWORD *)this + 1) = 0;
          *((_QWORD *)this + 2) = 0;
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 4) = 1;
          goto LABEL_53;
        }
        v10 = v2;
        while (1)
        {
          v11 = *(unsigned int *)((char *)v10 + 47);
          if (v11 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32))
          {
            v7 = *(_QWORD *)((v11 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32)) + 8);
            if (v7)
              break;
          }
          v12 = *((_QWORD *)v10 + 4);
          if (v12)
          {
            v10 = *(WebCore::RenderText **)(v12 + 8);
            if (v10 && v10 != v5)
              continue;
          }
          goto LABEL_51;
        }
      }
      ++*(_DWORD *)(v7 + 16);
      v8 = *((_DWORD *)v2 + 4);
      if (!v8)
        goto LABEL_57;
      *((_DWORD *)v2 + 4) = v8 - 1;
      if ((*(_BYTE *)(v7 + 45) & 0x40) != 0
        || *(_BYTE *)(v7 + 46) == 17 && ((*(_BYTE *)(v7 + 52) & 7) != 2 || (*(_BYTE *)(v7 + 53) & 1) == 0))
      {
LABEL_43:
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 4) = 1;
        v23 = *(_DWORD *)(v7 + 16);
        if (v23)
          goto LABEL_44;
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x195A246C4);
      }
      if ((*(_BYTE *)(v7 + 45) & 2) != 0)
        break;
      v9 = *(unsigned int *)(v7 + 64);
      if (v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32))
      {
        v2 = (WebCore::RenderText *)v7;
        if (*(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32)) + 8))
          continue;
      }
      goto LABEL_43;
    }
    ++*(_DWORD *)(v7 + 16);
    WebCore::InlineIterator::firstTextBoxInLogicalOrderFor((WebCore::InlineIterator *)v7, (uint64_t)v27);
    *(_BYTE *)this = 0;
    *((_DWORD *)this + 4) = -1;
    v15 = v28;
    if (v28 != -1)
    {
      ((void (*)(char *, WebCore *, _BYTE *))off_1E33A69D8[v28])(&v30, this, v27);
      *((_DWORD *)this + 4) = v15;
    }
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      v17 = *((unsigned int *)v16 + 3);
      v18 = *(unsigned int **)v16;
      if ((_DWORD)v17)
      {
        v19 = 24 * v17;
        do
        {
          v20 = v18[4];
          if ((_DWORD)v20 != -1)
            ((void (*)(char *, unsigned int *))off_1E33A6968[v20])(&v30, v18);
          v18[4] = -1;
          v18 += 6;
          v19 -= 24;
        }
        while (v19);
        v18 = *(unsigned int **)v16;
      }
      if (v18)
      {
        *(_QWORD *)v16 = 0;
        *((_DWORD *)v16 + 2) = 0;
        WTF::fastFree((WTF *)v18, v14);
      }
      WTF::fastFree(v16, v14);
    }
    if (v28 != -1)
      ((void (*)(char *, _BYTE *))off_1E33A6968[v28])(&v30, v27);
    result = WebCore::InlineIterator::BoxIterator::atEnd(this);
    if (!(_DWORD)result)
      break;
    v21 = *((unsigned int *)this + 4);
    if ((_DWORD)v21 != -1)
      ((void (*)(_BYTE *, WebCore *))off_1E33A6968[v21])(v27, this);
    *((_DWORD *)this + 4) = -1;
    v22 = *(_DWORD *)(v7 + 16);
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x195A246E4);
    }
    *(_DWORD *)(v7 + 16) = v22 - 1;
    v2 = (WebCore::RenderText *)v7;
  }
  v24 = *(_DWORD *)(v7 + 16);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x195A24704);
  }
  v23 = v24 - 1;
  *(_DWORD *)(v7 + 16) = v23;
  if (!v23)
    goto LABEL_58;
LABEL_44:
  *(_DWORD *)(v7 + 16) = v23 - 1;
LABEL_53:
  if (v5)
  {
    v26 = *((_DWORD *)v5 + 4);
    if (!v26)
      goto LABEL_58;
    *((_DWORD *)v5 + 4) = v26 - 1;
  }
  return result;
}

WebCore::Node *WebCore::downstreamIgnoringEditingBoundaries(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  WebCore::Node *v5;
  int *v6;
  WebCore::Node *result;
  WebCore::Node *v8;
  WebCore::Node *v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  char v13;
  WebCore::Node *v14;
  int v15;
  char v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v4 = WebCore::operator==(a2, (uint64_t)&v14);
  v6 = (int *)(a2 + 8);
  v5 = *(WebCore::Node **)a2;
  if (!v4)
  {
    do
    {
      if (v5)
        *((_DWORD *)v5 + 6) += 2;
      v8 = v14;
      v14 = v5;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      v15 = *v6;
      v16 = *(_BYTE *)(a2 + 12);
      WebCore::Position::downstream(a2, 0, (uint64_t)&v11);
      v9 = *(WebCore::Node **)a2;
      *(_QWORD *)a2 = v11;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      *v6 = v12;
      *(_BYTE *)(a2 + 12) = v13;
      v10 = WebCore::operator==(a2, (uint64_t)&v14);
      v5 = *(WebCore::Node **)a2;
    }
    while (!v10);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = *v6;
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::upstreamIgnoringEditingBoundaries(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  WebCore::Node *v5;
  int *v6;
  WebCore::Node *result;
  WebCore::Node *v8;
  WebCore::Node *v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  char v13;
  WebCore::Node *v14;
  int v15;
  char v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v4 = WebCore::operator==(a2, (uint64_t)&v14);
  v6 = (int *)(a2 + 8);
  v5 = *(WebCore::Node **)a2;
  if (!v4)
  {
    do
    {
      if (v5)
        *((_DWORD *)v5 + 6) += 2;
      v8 = v14;
      v14 = v5;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      v15 = *v6;
      v16 = *(_BYTE *)(a2 + 12);
      WebCore::Position::upstream(a2, 0, (uint64_t)&v11);
      v9 = *(WebCore::Node **)a2;
      *(_QWORD *)a2 = v11;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      *v6 = v12;
      *(_BYTE *)(a2 + 12) = v13;
      v10 = WebCore::operator==(a2, (uint64_t)&v14);
      v5 = *(WebCore::Node **)a2;
    }
    while (!v10);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = *v6;
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InlineIterator::Box::bidiLevel(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  WebCore::InlineIterator::Box *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::direction(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E33A6A38[v1])(&v5, this);
  }
}

uint64_t WebCore::InlineIterator::Box::direction(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  WebCore::InlineIterator::Box *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::rightmostCaretOffset(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E33A6A38[v1])(&v5, this) & 1;
  }
}

uint64_t WebCore::InlineIterator::Box::rightmostCaretOffset(WebCore::InlineIterator::Box *this)
{
  if ((WebCore::InlineIterator::Box::direction(this) & 1) != 0)
    return WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)this);
  else
    return WebCore::InlineIterator::Box::maximumCaretOffset(this);
}

uint64_t WebCore::InlineIterator::Box::leftmostCaretOffset(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  uint64_t v4;
  WebCore::Position *v5;
  const WebCore::Position *v6;
  char v7;
  char *v8;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
    goto LABEL_7;
  v8 = &v7;
  if ((((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E33A6A38[v1])(&v8, this) & 1) == 0)
    return WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>((unsigned int *)this);
  v4 = *((unsigned int *)this + 4);
  if ((_DWORD)v4 == -1)
  {
LABEL_7:
    v5 = (WebCore::Position *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Position::equals(v5, v6);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E33A6A08[v4])(&v8, this);
  }
}

BOOL WebCore::Position::equals(WebCore::Position *this, const WebCore::Position *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  BOOL v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;

  v3 = *(_QWORD *)this;
  v4 = *(_QWORD *)a2;
  result = (*(_QWORD *)this | *(_QWORD *)a2) == 0;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    switch(*((_BYTE *)this + 12) & 7)
    {
      case 0:
        switch(*((_BYTE *)a2 + 12) & 7)
        {
          case 0:
            if (v3 != v4)
              goto LABEL_78;
            v7 = *((_DWORD *)this + 2) == *((_DWORD *)a2 + 2);
            goto LABEL_71;
          case 1:
            if ((*(_WORD *)(v3 + 28) & 4) == 0)
              goto LABEL_69;
            v19 = *((_DWORD *)this + 2);
            v18 = *(_QWORD *)(v3 + 80);
            if (v19 && v18)
            {
              v20 = v19 - 1;
              do
              {
                v18 = *(_QWORD *)(v18 + 56);
                v11 = v20-- != 0;
                v21 = v11;
              }
              while (v18 && (v21 & 1) != 0);
            }
            break;
          case 2:
            v22 = *((_DWORD *)this + 2);
            if (!v22)
              goto LABEL_78;
            if ((*(_WORD *)(v3 + 28) & 4) == 0)
              goto LABEL_69;
            v18 = *(_QWORD *)(v3 + 80);
            if (v22 != 1 && v18)
            {
              v26 = v22 - 2;
              do
              {
                v18 = *(_QWORD *)(v18 + 56);
                v11 = v26-- != 0;
                v27 = v11;
              }
              while (v18 && (v27 & 1) != 0);
            }
            break;
          case 3:
            if (v3 != v4)
              goto LABEL_78;
            v7 = *((_DWORD *)this + 2) == 0;
            goto LABEL_71;
          case 4:
            if (v3 != v4)
              goto LABEL_78;
            v23 = *((_DWORD *)this + 2);
            if ((*(_WORD *)(v3 + 28) & 4) != 0 && (v24 = *(_QWORD *)(v3 + 80)) != 0)
            {
              v25 = 0;
              do
              {
                ++v25;
                v24 = *(_QWORD *)(v24 + 56);
              }
              while (v24);
            }
            else
            {
              v25 = 0;
            }
            v7 = v23 == v25;
            goto LABEL_71;
          default:
            goto LABEL_78;
        }
LABEL_70:
        v7 = v4 == v18;
        goto LABEL_71;
      case 1:
        switch(*((_BYTE *)a2 + 12) & 7)
        {
          case 0:
            if ((*(_WORD *)(v4 + 28) & 4) == 0)
              goto LABEL_51;
            v8 = *((_DWORD *)a2 + 2);
            v9 = *(_QWORD *)(v4 + 80);
            if (v8 && v9)
            {
              v10 = v8 - 1;
              do
              {
                v9 = *(_QWORD *)(v9 + 56);
                v11 = v10-- != 0;
                v12 = v11;
              }
              while (v9 && (v12 & 1) != 0);
            }
            break;
          case 1:
            goto LABEL_41;
          case 2:
            v18 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
            goto LABEL_70;
          case 3:
            if ((*(_WORD *)(v4 + 28) & 4) == 0)
              goto LABEL_51;
            v9 = *(_QWORD *)(v4 + 80);
            break;
          default:
            goto LABEL_78;
        }
LABEL_52:
        v7 = v3 == v9;
LABEL_71:
        result = v7;
        break;
      case 2:
        result = 0;
        switch(*((_BYTE *)a2 + 12) & 7)
        {
          case 0:
            v13 = *((_DWORD *)a2 + 2);
            if (!v13)
              goto LABEL_78;
            if ((*(_WORD *)(v4 + 28) & 4) == 0)
              goto LABEL_51;
            v9 = *(_QWORD *)(v4 + 80);
            if (v13 != 1 && v9)
            {
              v14 = v13 - 2;
              do
              {
                v9 = *(_QWORD *)(v9 + 56);
                v11 = v14-- != 0;
                v15 = v11;
              }
              while (v9 && (v15 & 1) != 0);
            }
            goto LABEL_52;
          case 1:
            v18 = *(_QWORD *)(v3 + 56);
            goto LABEL_70;
          case 2:
            goto LABEL_41;
          case 4:
            if ((*(_WORD *)(v4 + 28) & 4) != 0)
              v9 = *(_QWORD *)(v4 + 88);
            else
LABEL_51:
              v9 = 0;
            goto LABEL_52;
          default:
            return result;
        }
      case 3:
        result = 0;
        switch(*((_BYTE *)a2 + 12) & 7)
        {
          case 0:
            v7 = v3 == v4 && *((_DWORD *)a2 + 2) == 0;
            goto LABEL_71;
          case 1:
            if ((*(_WORD *)(v3 + 28) & 4) == 0)
              goto LABEL_69;
            v18 = *(_QWORD *)(v3 + 80);
            goto LABEL_70;
          case 3:
            goto LABEL_41;
          case 4:
            goto LABEL_42;
          default:
            return result;
        }
      case 4:
        result = 0;
        switch(*((_BYTE *)a2 + 12) & 7)
        {
          case 0:
            if (v3 != v4)
              goto LABEL_78;
            if ((*(_WORD *)(v3 + 28) & 4) != 0 && (v16 = *(_QWORD *)(v3 + 80)) != 0)
            {
              v17 = 0;
              do
              {
                ++v17;
                v16 = *(_QWORD *)(v16 + 56);
              }
              while (v16);
            }
            else
            {
              v17 = 0;
            }
            v7 = v17 == *((_DWORD *)this + 2);
            goto LABEL_71;
          case 2:
            if ((*(_WORD *)(v3 + 28) & 4) != 0)
              v18 = *(_QWORD *)(v3 + 88);
            else
LABEL_69:
              v18 = 0;
            goto LABEL_70;
          case 3:
LABEL_42:
            if (v3 != v4)
              goto LABEL_78;
            if ((*(_WORD *)(v3 + 28) & 4) != 0)
            {
              v7 = *(_QWORD *)(v3 + 80) == 0;
              goto LABEL_71;
            }
            result = 1;
            break;
          case 4:
LABEL_41:
            v7 = v3 == v4;
            goto LABEL_71;
          default:
            return result;
        }
        break;
      default:
LABEL_78:
        result = 0;
        break;
    }
  }
  return result;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, uint64_t a2)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  LODWORD(a2) = *(_BYTE *)(a2 + 12) & 7;
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2 <= 4)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  WebCore::Node *v4;
  WTF::TextStream *v5;
  void *v6;
  WebCore::Node *v7;
  WebCore::Node *v9;
  int v10;
  char v11;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v4 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v4 + 6) += 2;
  v9 = v4;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_BYTE *)(a2 + 12);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v5 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v5, (uint64_t)&v9);
  WTF::TextStream::endGroup(a1);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v6);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  WTF::TextStream *v4;
  WTF::TextStream *v5;
  WTF::TextStream *v6;
  WTF::TextStream *v7;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v4 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v4, a2 + 32);
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v5 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v5, a2 + 48);
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v6 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v6, a2 + 64);
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v7 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v7, a2 + 80);
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  WTF::TextStream::startGroup(a1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2))
  {
    WTF::TextStream::operator<<();
  }
  (*(void (**)(uint64_t, WTF::TextStream *))(*(_QWORD *)a2 + 328))(a2, a1);
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  unsigned int *v8;

  WTF::TextStream::startGroup(a1);
  v4 = *(unsigned int **)(a2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v8 = v4;
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v8, v6);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v8;
  WTF::TextStream *v9;
  int v10;
  BOOL v11;
  float64x2_t *v12;
  float64x2_t *v13;
  float64x2_t *v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)a2, (uint64_t *)&v16);
  WTF::TextStream::operator<<();
  v5 = v16;
  v16 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::TextStream::endGroup(a1);
  v6 = *(_DWORD *)(a2 + 80);
  if (v6 == 1)
  {
    if (*(_DWORD *)(a2 + 24))
      return a1;
    v8 = *(_QWORD *)(a2 + 16);
    if (!v8)
      return a1;
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    v9 = (WTF::TextStream *)WTF::TextStream::operator<<();
    WebCore::operator<<(v9, v8);
    WTF::TextStream::endGroup(a1);
    v10 = *(_DWORD *)(a2 + 80);
    v11 = v10 == 1;
    if (v10 == 1)
      v12 = (float64x2_t *)(a2 + 16);
    else
      v12 = 0;
    v13 = v12 + 1;
    if (v11)
      v14 = v13;
    else
      v14 = (float64x2_t *)&WebCore::identity;
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    v15 = WTF::TextStream::operator<<();
    WebCore::operator<<(v15, v14);
    WTF::TextStream::endGroup(a1);
    v6 = *(_DWORD *)(a2 + 80);
  }
  if (v6 == 2 && *(_QWORD *)(a2 + 16))
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  return a1;
}

WebCore::Node *WebCore::commonInclusiveAncestor(WebCore *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  uint64_t v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  unsigned int v7;
  WebCore::Node *v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  WebCore::Node *v15;
  unint64_t v16;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = *((_BYTE *)this + 12) & 7;
    v5 = 1;
    if (v4 > 4)
    {
      v3 = 0;
    }
    else if (((1 << v4) & 0x19) != 0 || (v3 = *(_QWORD *)(v3 + 32)) != 0)
    {
      v5 = 0;
      *(_DWORD *)(v3 + 24) += 2;
    }
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    && (v7 = *((_BYTE *)a2 + 12) & 7, v7 <= 4)
    && (((1 << v7) & 0x19) != 0 || (v6 = *(_QWORD *)(v6 + 32)) != 0))
  {
    *(_DWORD *)(v6 + 24) += 2;
    if ((v5 & 1) != 0)
    {
      v8 = 0;
    }
    else
    {
      v8 = (WebCore::Node *)v3;
      if (v3 != v6)
      {
        v10 = WebCore::depth<(WebCore::TreeType)2>(v3);
        v11 = WebCore::depth<(WebCore::TreeType)2>(v6);
        v12 = v11 - v10;
        v13 = v10 >= v11;
        v14 = v10 - v11;
        if (v10 >= v11)
          v8 = (WebCore::Node *)v3;
        else
          v8 = (WebCore::Node *)v6;
        if (v13)
          v15 = (WebCore::Node *)v6;
        else
          v15 = (WebCore::Node *)v3;
        if (v13)
          v16 = v14;
        else
          v16 = v12;
        for (; v16; --v16)
          v8 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v8);
        if (v8 == v15)
        {
          v8 = v15;
        }
        else
        {
          do
          {
            v8 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v8);
            v15 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v15);
          }
          while (v8 != v15);
        }
      }
    }
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    v8 = 0;
  }
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v8;
}

_DWORD *WebCore::makeContainerOffsetPosition@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)this;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(*(_QWORD *)this + 24) + 2;
  v4 = this[2];
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 12) &= 0xF0u;
  return this;
}

uint64_t WebCore::makeDeprecatedLegacyPosition@<X0>(WebCore *this@<X0>, const WebCore::BoundaryPoint *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  int v5;
  uint64_t result;
  char v7;

  v4 = *(_DWORD **)this;
  v4[6] = *(_DWORD *)(*(_QWORD *)this + 24) + 2;
  v5 = *((_DWORD *)this + 2);
  *(_QWORD *)a3 = v4;
  *(_DWORD *)(a3 + 8) = v5;
  result = (*(uint64_t (**)(_DWORD *, const WebCore::BoundaryPoint *))(*(_QWORD *)v4 + 208))(v4, a2);
  if ((result & 1) != 0)
  {
    v7 = 8;
  }
  else if (v5)
  {
    v7 = 10;
  }
  else
  {
    v7 = 9;
  }
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(a3 + 12) & 0xF0 | v7;
  return result;
}

uint64_t WebCore::PositionIterator::isCandidate(WebCore::PositionIterator *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t isCandidate;
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  WebCore::Node *v8;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  WebCore::Node *v14;
  uint64_t v15;
  const WebCore::Node *v16;
  WebCore::Node *v17[2];

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  isCandidate = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (isCandidate)
  {
    v5 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v5 + 0x2D) & 2) != 0)
      v5 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if ((*(_BYTE *)(v5 + 120) & 0x30) != 0)
      goto LABEL_49;
    if (*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 17
      && ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 2
       || (*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0))
    {
      WebCore::PositionIterator::operator WebCore::Position((uint64_t)this, (uint64_t)v17);
      isCandidate = WebCore::Position::isCandidate((WebCore::Position *)v17, v16);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v17);
      goto LABEL_14;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v10 = *(_QWORD **)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v10)
        v10 = (_QWORD *)v10[1];
      v11 = v10[13];
      if ((*(_BYTE *)(v11 + 239) & 1) == 0)
      {
        if ((v12 = *(_DWORD *)(v11 + 228), (v12 & 0x30) != 0)
          && (*(_DWORD *)(*(_QWORD *)(v10[11] + 32) + 148) & 0xC00000) != 0x800000
          || (v12 & 0x18000) != 0)
        {
          isCandidate = WebCore::containsOffset(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL, *((_DWORD *)this + 4), 1);
          goto LABEL_14;
        }
      }
      goto LABEL_49;
    }
    if ((WebCore::isRenderedTable((WebCore *)v2, a2) & 1) != 0
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2) & 1) == 0)
    {
      if (WebCore::PositionIterator::atStartOfNode(this) || WebCore::PositionIterator::atEndOfNode(this))
      {
        v15 = *(_QWORD *)(v2 + 32);
        goto LABEL_45;
      }
    }
    else
    {
      v7 = *(_WORD *)(v2 + 28);
      if ((v7 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        if ((*(_BYTE *)(isCandidate + 45) & 0x40) == 0
          || (*(_BYTE *)(isCandidate + 52) & 7) != 1
          && (*(_BYTE *)(isCandidate + 45) & 0x80) == 0
          && *(_BYTE *)(isCandidate + 46) != 12)
        {
          goto LABEL_13;
        }
        v13 = (_DWORD *)(isCandidate + 160);
        if (((*(_DWORD *)(isCandidate + 124) >> 13) & 6u) - 2 >= 4)
          v13 = (_DWORD *)(isCandidate + 164);
        if (!*v13
          && ((v7 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          && !WebCore::Node::isRootEditableElement((WebCore::Node *)v2))
        {
          goto LABEL_49;
        }
        if ((WebCore::Position::hasRenderedNonAnonymousDescendantsWithHeight((WebCore::Position *)isCandidate, v6) & 1) != 0)
        {
LABEL_13:
          isCandidate = 0;
          if (!WebCore::Node::computeEditability(v2, 0, 1))
            goto LABEL_14;
          if (!WebCore::Position::nodeIsUserSelectNone(v2, v8))
          {
            WebCore::PositionIterator::operator WebCore::Position((uint64_t)this, (uint64_t)v17);
            isCandidate = WebCore::Position::atEditingBoundary((WebCore::Position *)v17);
            if (v17[0])
            {
              if (*((_DWORD *)v17[0] + 6) == 2)
              {
                if ((*((_WORD *)v17[0] + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v17[0]);
              }
              else
              {
                *((_DWORD *)v17[0] + 6) -= 2;
              }
            }
            goto LABEL_14;
          }
          goto LABEL_49;
        }
        if (WebCore::PositionIterator::atStartOfNode(this))
        {
          v15 = v2;
LABEL_45:
          isCandidate = !WebCore::Position::nodeIsUserSelectNone(v15, v14);
          goto LABEL_14;
        }
      }
    }
LABEL_49:
    isCandidate = 0;
  }
LABEL_14:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return isCandidate;
}

void WebCore::ProcessingInstruction::~ProcessingInstruction(WebCore::ProcessingInstruction *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  void *v9;
  uint64_t v10;
  _BOOL8 v11;
  double v12;
  int v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  unsigned int *v22;
  _BYTE v23[24];
  unsigned int **v24;

  v3 = (_DWORD *)*((_QWORD *)this + 18);
  if (v3)
  {
    ++v3[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 88))(v3);
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 17);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v22 = v4;
    v6 = *((_QWORD *)v4 + 1);
    if (v6)
    {
      v24 = &v22;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (!v7
        || !*(_QWORD *)(v7 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v24, (uint64_t)v23), (v4 = v22) != 0))
      {
        v8 = (WebCore::CachedResource *)*((_QWORD *)v4 + 1);
        if (v8)
          WebCore::CachedResource::removeClient(v8, (unsigned int **)this + 11);
      }
    }
  }
  else
  {
    v22 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v22, a2);
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1328);
    ++*(_DWORD *)(v10 + 8);
    v11 = WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>(v10 + 192, (uint64_t)this);
    if (v11)
    {
      if (!*(_BYTE *)(v10 + 233))
      {
        *(_WORD *)(v10 + 232) = 256;
        if (*(_QWORD *)(v10 + 24))
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 1328) + 234) = 1;
      }
      if ((*(_QWORD *)(v10 + 112) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v10 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *(_QWORD *)(v10 + 104) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
        WebCore::TimerBase::setNextFireTime(v10 + 80, v12 + 0.0);
      }
    }
    v13 = *(_DWORD *)(v10 + 8);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x195A2580CLL);
    }
    *(_DWORD *)(v10 + 8) = v13 - 1;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 17, v9);
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  *((_QWORD *)this + 11) = &off_1E33F87C8;
  v20 = *((_QWORD *)this + 12);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    v21 = (WTF *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v15);
      else
        --*(_DWORD *)v21;
    }
  }
  else
  {
    *((_QWORD *)this + 12) = 0;
  }
  WebCore::CharacterData::~CharacterData((uint64_t)this, v15);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ProcessingInstruction::~ProcessingInstruction(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::ProcessingInstruction::~ProcessingInstruction(WebCore::ProcessingInstruction *this, void *a2)
{
  WebCore::ProcessingInstruction::~ProcessingInstruction((WebCore::ProcessingInstruction *)((char *)this - 88), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ProcessingInstruction::~ProcessingInstruction((WebCore::ProcessingInstruction *)((char *)this - 88), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::ProcessingInstruction::nodeName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 104);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::ProcessingInstruction::cloneNodeInternal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v5 = *(_DWORD **)(a1 + 104);
  if (v5)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)(a1 + 80);
  if (v6)
    *(_DWORD *)v6 += 2;
  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x700100000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  v9 = v6;
  if (v6 || (v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)result = off_1E33A6788;
  *(_QWORD *)(result + 80) = v9;
  *(_QWORD *)(result + 88) = &unk_1E33A6928;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = v5;
  *(_OWORD *)(result + 112) = 0uLL;
  *(_OWORD *)(result + 128) = 0uLL;
  *(_OWORD *)(result + 141) = 0uLL;
  *a3 = result;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ProcessingInstruction::checkStyleSheet(WebCore::ProcessingInstruction *this)
{
  uint64_t v2;
  WTF::StringImpl *result;
  void *v4;
  uint64_t v5;
  WebCore *v6;
  WTF *v7;
  int v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  WTF *v14;
  char v15;
  char v16;
  WTF *v17;
  int v18;
  unsigned int v19;
  int j;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  int k;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  int v33;
  unsigned int v34;
  int m;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  int n;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  WTF::StringImpl *v57;
  __int128 v58;
  WTF::MonotonicTime *v59;
  double v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  WebCore::CachedResource *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::CachedResourceLoader *v76;
  WTF::StringImpl *v77;
  char v78;
  _DWORD *v79;
  __int128 v80;
  uint64_t v81;
  WebCore::CachedResource *v82;
  WTF *v83;
  int v84;
  unsigned int v85;
  int ii;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  WTF::StringImpl *v94;
  void *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  void *v100;
  char v101;
  _DWORD *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  void *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WebCore::CachedResourceLoader *v111;
  WebCore::CachedResource *v112;
  void *v113;
  void *v114;
  WTF::StringImpl *v115;
  unsigned int *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WebCore::CachedResourceClient *v121;
  void *v122;
  WTF *v123;
  void *v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  WTF::MonotonicTime *v131;
  int v132;
  double v133;
  WTF *v134;
  void *v135;
  uint64_t v136;
  WTF::StringImpl **v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  char v149;
  _BYTE *v150;
  WTF::StringImpl *v151;
  __int128 v152;
  __int128 v153;
  unsigned int *v154;
  WTF::StringImpl *v155;
  WTF *v156;
  char v157;
  _BYTE v158[24];
  unsigned int **v159;
  WTF::StringImpl *v160;
  __int128 v161;
  __int128 v162;
  _QWORD v163[5];
  uint64_t v164;
  WTF::StringImpl *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  int v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  _BYTE v185[144];
  __int16 v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191[10];
  unsigned int v192;
  unsigned int *v193;
  _BYTE v194[40];
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  char v200;
  __int16 v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](*((_QWORD *)this + 13), "xml-stylesheet", 14);
  if (!(_DWORD)result)
    goto LABEL_227;
  v5 = *(_QWORD *)(v2 + 528);
  if (!v5 || !*(_QWORD *)(v5 + 8) || *((_QWORD *)this + 4) != v2)
    goto LABEL_227;
  v6 = *(WebCore **)(v2 + 720);
  if (!v6)
    v6 = (WebCore *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v2, v4);
  result = WebCore::parseAttributes(v6, (WebCore::ProcessingInstruction *)((char *)this + 80), &v156);
  if (!v157)
    goto LABEL_227;
  v7 = v156;
  if (!v156)
  {
LABEL_14:
    v14 = 0;
LABEL_15:
    v15 = 1;
    goto LABEL_16;
  }
  v8 = 0;
  v9 = *((_DWORD *)v156 - 2);
  for (i = 1916283; ; i = v8 + v11)
  {
    v11 = i & v9;
    v12 = *((_QWORD *)v7 + 2 * v11);
    if (v12 != -1)
    {
      if (!v12)
        goto LABEL_14;
      if ((MEMORY[0x19AEA53F4](v12, "type", 4) & 1) != 0)
        break;
    }
    ++v8;
  }
  v14 = (WTF *)*((_QWORD *)v7 + 2 * v11 + 1);
  if (!v14)
    goto LABEL_15;
  v24 = *((_DWORD *)v14 + 1);
  *(_DWORD *)v14 += 2;
  if (v24)
  {
    v16 = WTF::equal(v14, (const WTF::StringImpl *)WebCore::cssContentTypeAtomData, v13);
    v15 = 0;
    goto LABEL_17;
  }
  v15 = 0;
LABEL_16:
  v16 = 1;
LABEL_17:
  *((_BYTE *)this + 155) = v16;
  if ((MEMORY[0x19AEA53F4](v14, "text/xml", 8) & 1) != 0
    || (MEMORY[0x19AEA53F4](v14, "text/xsl", 8) & 1) != 0
    || (MEMORY[0x19AEA53F4](v14, "application/xml", 15) & 1) != 0
    || (MEMORY[0x19AEA53F4](v14, "application/xhtml+xml", 21) & 1) != 0
    || MEMORY[0x19AEA53F4](v14, "application/rss+xml", 19))
  {
    *((_BYTE *)this + 156) = 1;
    v150 = (char *)this + 156;
  }
  else
  {
    result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](v14, "application/atom+xml", 20);
    *((_BYTE *)this + 156) = (_BYTE)result;
    v150 = (char *)this + 156;
    if (!*((_BYTE *)this + 155) && !(_DWORD)result)
    {
LABEL_221:
      if ((v15 & 1) != 0)
        goto LABEL_224;
      goto LABEL_222;
    }
  }
  if (!v157)
    goto LABEL_249;
  v17 = v156;
  if (v156)
  {
    v18 = 0;
    v19 = *((_DWORD *)v156 - 2);
    for (j = 5797448; ; j = v18 + v21)
    {
      v21 = j & v19;
      v22 = *((_QWORD *)v17 + 2 * v21);
      if (v22 != -1)
      {
        if (!v22)
          goto LABEL_30;
        if ((MEMORY[0x19AEA53F4](v22, "href", 4) & 1) != 0)
          break;
      }
      ++v18;
    }
    v23 = (WTF::StringImpl *)*((_QWORD *)v17 + 2 * v21 + 1);
    if (v23)
      *(_DWORD *)v23 += 2;
  }
  else
  {
LABEL_30:
    v23 = 0;
  }
  v155 = v23;
  if (!v157)
    goto LABEL_249;
  v25 = v156;
  if (v156)
  {
    v26 = 0;
    v27 = *((_DWORD *)v156 - 2);
    for (k = 11260662; ; k = v26 + v29)
    {
      v29 = k & v27;
      v30 = *((_QWORD *)v25 + 2 * v29);
      if (v30 != -1)
      {
        if (!v30)
          goto LABEL_43;
        if ((MEMORY[0x19AEA53F4](v30, "alternate", 9) & 1) != 0)
          break;
      }
      ++v26;
    }
    v31 = (WTF::StringImpl *)*((_QWORD *)v25 + 2 * v29 + 1);
    if (v31)
      *(_DWORD *)v31 += 2;
  }
  else
  {
LABEL_43:
    v31 = 0;
  }
  *((_BYTE *)this + 153) = MEMORY[0x19AEA53F4](v31, "yes", 3);
  if (!v157)
    goto LABEL_249;
  v32 = v156;
  if (v156)
  {
    v33 = 0;
    v34 = *((_DWORD *)v156 - 2);
    for (m = 2337488; ; m = v33 + v36)
    {
      v36 = m & v34;
      v37 = *((_QWORD *)v32 + 2 * v36);
      if (v37 != -1)
      {
        if (!v37)
          goto LABEL_53;
        if ((MEMORY[0x19AEA53F4](v37, "title", 5) & 1) != 0)
          break;
      }
      ++v33;
    }
    v38 = (_DWORD *)*((_QWORD *)v32 + 2 * v36 + 1);
    if (v38)
      *v38 += 2;
  }
  else
  {
LABEL_53:
    v38 = 0;
  }
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (!v157)
    goto LABEL_249;
  v40 = v156;
  if (v156)
  {
    v41 = 0;
    v42 = *((_DWORD *)v156 - 2);
    for (n = 13905581; ; n = v41 + v44)
    {
      v44 = n & v42;
      v45 = *((_QWORD *)v40 + 2 * v44);
      if (v45 != -1)
      {
        if (!v45)
          goto LABEL_66;
        if ((MEMORY[0x19AEA53F4](v45, "media", 5) & 1) != 0)
          break;
      }
      ++v41;
    }
    v46 = (_DWORD *)*((_QWORD *)v40 + 2 * v44 + 1);
    if (v46)
      *v46 += 2;
  }
  else
  {
LABEL_66:
    v46 = 0;
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v46;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v47 -= 2;
  }
  if (*((_BYTE *)this + 153))
  {
    v48 = *((_QWORD *)this + 15);
    if (!v48 || !*(_DWORD *)(v48 + 4))
    {
LABEL_215:
      if (!v31)
        goto LABEL_218;
      goto LABEL_216;
    }
  }
  if (!v155
    || *((_DWORD *)v155 + 1) < 2u
    || ((v49 = (unsigned __int16 *)*((_QWORD *)v155 + 1), (*((_BYTE *)v155 + 16) & 4) == 0)
      ? (v50 = *v49)
      : (v50 = *(unsigned __int8 *)v49),
        v50 != 35))
  {
    v63 = (uint64_t *)((char *)this + 136);
    v62 = *((_QWORD *)this + 17);
    if (v62)
    {
      do
        v64 = __ldaxr((unsigned int *)v62);
      while (__stlxr(v64 + 1, (unsigned int *)v62));
      v193 = (unsigned int *)v62;
      v65 = *(_QWORD *)(v62 + 8);
      if (v65)
      {
        v160 = (WTF::StringImpl *)&v193;
        ++*(_DWORD *)(v65 + 548);
        v66 = *(_QWORD *)(v65 + 488);
        if (v66)
        {
          if (*(_QWORD *)(v66 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v65 + 464), (uint64_t *)&v160, (uint64_t)&v176);
        }
      }
    }
    else
    {
      v193 = 0;
    }
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 17, 0);
    if (v193)
    {
      v68 = (WebCore::CachedResource *)*((_QWORD *)v193 + 1);
      if (v68)
        WebCore::CachedResource::removeClient(v68, (unsigned int **)this + 11);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v193, v67);
    if (!*((_BYTE *)this + 152))
    {
      *((_BYTE *)this + 152) = 1;
      v69 = *(_QWORD *)(v2 + 1328);
      ++*(_DWORD *)(v69 + 8);
      WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v69 + 144, (uint64_t)this, (uint64_t)&v176);
      v70 = *(_DWORD *)(v69 + 8);
      if (!v70)
      {
        __break(0xC471u);
        JUMPOUT(0x195A26B18);
      }
      *(_DWORD *)(v69 + 8) = v70 - 1;
    }
    if (*v150)
    {
      {
        WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
      }
      LODWORD(v193) = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
      *(_DWORD *)((char *)&v193 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                              + 3);
      v71 = qword_1ECE90818;
      if (qword_1ECE90818)
        *(_DWORD *)qword_1ECE90818 += 2;
      *(_QWORD *)v194 = v71;
      *(_OWORD *)&v194[8] = xmmword_1ECE90820;
      *(_OWORD *)&v194[24] = *(_OWORD *)algn_1ECE90830;
      v72 = dword_1ECE90854;
      v196 = 0;
      v197 = 0;
      v195 = qword_1ECE90840;
      v198 = dword_1ECE90854;
      if (dword_1ECE90854)
      {
        if (dword_1ECE90854 >> 28)
        {
          __break(0xC471u);
          goto LABEL_289;
        }
        v144 = v15;
        v145 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
        v197 = v72;
        v196 = v145;
        if (dword_1ECE90854)
        {
          v146 = qword_1ECE90848;
          v147 = qword_1ECE90848 + 16 * dword_1ECE90854;
          do
          {
            v148 = *(_DWORD **)v146;
            if (*(_QWORD *)v146)
              *v148 += 2;
            *(_QWORD *)v145 = v148;
            *(_BYTE *)(v145 + 8) = *(_BYTE *)(v146 + 8);
            v146 += 16;
            v145 += 16;
            v15 = v144;
            v63 = (uint64_t *)((char *)this + 136);
          }
          while (v146 != v147);
        }
      }
      v199 = dword_1ECE90858;
      v200 = byte_1ECE9085C;
      LOBYTE(v201) = 0;
      v204 = 0;
      if (byte_1ECE90878)
      {
        v201 = word_1ECE90860;
        v73 = qword_1ECE90868;
        if (qword_1ECE90868)
          *(_DWORD *)qword_1ECE90868 += 2;
        v202 = v73;
        v74 = qword_1ECE90870;
        if (qword_1ECE90870)
          *(_DWORD *)qword_1ECE90870 += 2;
        v203 = v74;
        v204 = 1;
      }
      v205 = xmmword_1ECE90880;
      v75 = qword_1ECE90890;
      if (qword_1ECE90890)
        *(_DWORD *)qword_1ECE90890 += 2;
      v206 = v75;
      BYTE1(v193) = 1;
      v76 = *(WebCore::CachedResourceLoader **)(v2 + 720);
      if (!v76)
        v76 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v2, v4);
      ++*(_DWORD *)v76;
      WebCore::Document::completeURL((WebCore::Document *)v2, &v155, v2 + 848, 0, (WTF::URL *)&v151);
      v77 = v151;
      if (v151)
        *(_DWORD *)v151 += 2;
      v160 = v77;
      v161 = v152;
      v162 = v153;
      v163[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v163);
      v164 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v165 = v176;
      v166 = 0u;
      v167 = 0u;
      v168 = 0u;
      v169 = 0x10000;
      v78 = v170 & 0x80 | 4;
      v170 = v78;
      *(_QWORD *)&v171 = 0;
      v79 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *v79 += 2;
        v78 = v170;
      }
      *((_QWORD *)&v171 + 1) = v79;
      v172 = 0;
      LOBYTE(v173) = 0;
      BYTE4(v173) = 0;
      v174 = v174 & 0xE0 | 5;
      v170 = v78 | 2;
      v175 = 0;
      WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)&v176, (uint64_t *)&v160);
      v80 = v171;
      v171 = 0u;
      v179 = v80;
      v180 = v172;
      v181 = v173;
      v182 = v174;
      v81 = v175;
      v172 = 0;
      v175 = 0;
      v183 = v81;
      v184 = 0;
      WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v185, (const WebCore::ResourceLoaderOptions *)&v193);
      v186 = 0;
      v187 = 0;
      v188 = 0u;
      WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v176, &v189);
      v190 = 0;
      WebCore::CachedResourceLoader::requestXSLStyleSheet((WebCore::ResourceRequest *)&v176, (int)v76, (uint64_t)v191);
      if (v192 || (v89 = (unsigned int *)v191[0]) == 0)
      {
        v82 = 0;
        v154 = 0;
      }
      else
      {
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 + 1, v89));
        v154 = v89;
        v91 = *((_QWORD *)v89 + 1);
        if (v91
          && ((v159 = &v154, ++*(_DWORD *)(v91 + 548), (v92 = *(_QWORD *)(v91 + 488)) == 0)
           || !*(_QWORD *)(v92 + 8)
           || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v91 + 464), (uint64_t *)&v159, (uint64_t)v158), (v89 = v154) != 0)))
        {
          v82 = (WebCore::CachedResource *)*((_QWORD *)v89 + 1);
        }
        else
        {
          v82 = 0;
        }
      }
      WebCore::CachedResourceHandleBase::setResource(v63, v82);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v154, v93);
      if (v192 != -1)
        (*(&off_1E33A6A48 + v192))((int)v158, (WebCore::CachedResourceHandleBase *)v191);
      v192 = -1;
      WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v176, v94);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v160, v95);
      v97 = v151;
      v151 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 2)
          WTF::StringImpl::destroy(v97, v96);
        else
          *(_DWORD *)v97 -= 2;
      }
      if (*(_DWORD *)v76 == 1)
      {
        WebCore::CachedResourceLoader::~CachedResourceLoader(v76, v96);
        WTF::fastFree(v123, v124);
      }
      else
      {
        --*(_DWORD *)v76;
      }
      WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v193, v96);
LABEL_188:
      v116 = (unsigned int *)*v63;
      if (*v63)
      {
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 + 1, v116));
        v193 = v116;
        v118 = *((_QWORD *)v116 + 1);
        if (v118)
        {
          v160 = (WTF::StringImpl *)&v193;
          ++*(_DWORD *)(v118 + 548);
          v119 = *(_QWORD *)(v118 + 488);
          if (!v119
            || !*(_QWORD *)(v119 + 8)
            || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v118 + 464), (uint64_t *)&v160, (uint64_t)&v176), (v116 = v193) != 0))
          {
            v120 = *((_QWORD *)v116 + 1);
            if (v120)
            {
              v121 = (WebCore::ProcessingInstruction *)((char *)this + 88);
              if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v116 + 1), v121))
                (*(void (**)(uint64_t, WebCore::CachedResourceClient *))(*(_QWORD *)v120 + 88))(v120, v121);
LABEL_214:
              WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v193, v122);
              goto LABEL_215;
            }
          }
        }
      }
      else
      {
        v193 = 0;
      }
      *((_BYTE *)this + 152) = 0;
      v125 = *(_QWORD *)(v2 + 1328);
      ++*(_DWORD *)(v125 + 8);
      v126 = *(_DWORD *)(v125 + 156);
      v127 = *(_DWORD *)(v125 + 152) + 1;
      *(_DWORD *)(v125 + 152) = v127;
      if (v127 > v126)
      {
        _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v125 + 144), &v176);
        v128 = 0;
        *(_DWORD *)(v125 + 152) = 0;
        v129 = *(_QWORD *)(v125 + 144);
        if (v129)
        {
          v128 = *(_DWORD *)(v129 - 12);
          if (v128 > 0x7FFFFFFE)
            v128 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v125 + 156) = 2 * v128;
      }
      v130 = *((_QWORD *)this + 2);
      if ((v130 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v130 & 0xFFFFFFFFFFFFLL) + 8))
        WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)(v125 + 144), (WTF *)(v130 & 0xFFFFFFFFFFFFLL));
      v131 = (WTF::MonotonicTime *)WebCore::Style::Scope::didRemovePendingStylesheet((WebCore::Document **)v125);
      v132 = *(_DWORD *)(v125 + 8);
      if (v132)
      {
        *(_DWORD *)(v125 + 8) = v132 - 1;
        if (*v150)
        {
          *(_BYTE *)(v2 + 3438) = 1;
          if ((*(_QWORD *)(v2 + 1672) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v2 + 1672) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v2 + 1664) = 0;
            WTF::MonotonicTime::now(v131);
            WebCore::TimerBase::setNextFireTime(v2 + 1640, v133 + 0.0);
          }
        }
        goto LABEL_214;
      }
      __break(0xC471u);
LABEL_289:
      JUMPOUT(0x195A26AF8);
    }
    if (v157)
    {
      v83 = v156;
      if (v156)
      {
        v149 = v15;
        v84 = 0;
        v85 = *((_DWORD *)v156 - 2);
        for (ii = 14273970; ; ii = v84 + v87)
        {
          v87 = ii & v85;
          v88 = *((_QWORD *)v83 + 2 * v87);
          if (v88 != -1)
          {
            if (!v88)
            {
              v98 = 0;
              v15 = v149;
              v63 = (uint64_t *)((char *)this + 136);
              goto LABEL_164;
            }
            if ((MEMORY[0x19AEA53F4](v88, "charset", 7) & 1) != 0)
              break;
          }
          ++v84;
        }
        v98 = (WTF::StringImpl *)*((_QWORD *)v83 + 2 * v87 + 1);
        v63 = (uint64_t *)((char *)this + 136);
        if (v98)
          *(_DWORD *)v98 += 2;
        v15 = v149;
      }
      else
      {
        v98 = 0;
      }
LABEL_164:
      WebCore::Document::completeURL((WebCore::Document *)v2, &v155, v2 + 848, 0, (WTF::URL *)&v193);
      v99 = (WTF::StringImpl *)v193;
      if (v193)
        *v193 += 2;
      v160 = v99;
      v161 = *(_OWORD *)v194;
      v162 = *(_OWORD *)&v194[16];
      v163[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v163);
      v164 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v165 = v176;
      v166 = 0u;
      v167 = 0u;
      v168 = 0u;
      v169 = 0x10000;
      v101 = v170 & 0x80 | 4;
      v170 = v101;
      *(_QWORD *)&v171 = 0;
      v102 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *v102 += 2;
        v101 = v170;
      }
      *((_QWORD *)&v171 + 1) = v102;
      v172 = 0;
      LOBYTE(v173) = 0;
      BYTE4(v173) = 0;
      v174 = v174 & 0xE0 | 5;
      v170 = v101 | 2;
      v175 = 0;
      {
        WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
      }
      if (v98 && *((_DWORD *)v98 + 1))
      {
        v104 = v98;
        v98 = 0;
      }
      else
      {
        WebCore::Document::encoding(v2, v100, &v176);
        v104 = v176;
        if (v176)
        {
          v105 = *(_DWORD *)v176;
          *(_DWORD *)v176 += 2;
          if (v105)
            *(_DWORD *)v104 = v105;
          else
            WTF::StringImpl::destroy(v104, v103);
        }
      }
      WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)&v176, (uint64_t *)&v160);
      v106 = v171;
      v171 = 0u;
      v179 = v106;
      v107 = v175;
      v180 = v172;
      v181 = v173;
      v182 = v174;
      v172 = 0;
      v175 = 0;
      v183 = v107;
      v184 = v104;
      WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v185, (const WebCore::ResourceLoaderOptions *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options);
      v186 = 0;
      v187 = 0;
      v188 = 0u;
      WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v176, &v189);
      v190 = 0;
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v160, v108);
      v110 = (WTF::StringImpl *)v193;
      v193 = 0;
      if (v110)
      {
        if (*(_DWORD *)v110 == 2)
          WTF::StringImpl::destroy(v110, v109);
        else
          *(_DWORD *)v110 -= 2;
      }
      v111 = *(WebCore::CachedResourceLoader **)(v2 + 720);
      if (!v111)
        v111 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v2, v109);
      ++*(_DWORD *)v111;
      WebCore::CachedResourceLoader::requestCSSStyleSheet((WebCore::ResourceRequest *)&v176, v111, (uint64_t)&v160);
      if ((_DWORD)v164 || (v140 = v160) == 0)
      {
        v112 = 0;
        v151 = 0;
      }
      else
      {
        do
          v141 = __ldaxr((unsigned int *)v140);
        while (__stlxr(v141 + 1, (unsigned int *)v140));
        v151 = v140;
        v142 = *((_QWORD *)v140 + 1);
        if (v142
          && ((v191[0] = (uint64_t)&v151, ++*(_DWORD *)(v142 + 548), (v143 = *(_QWORD *)(v142 + 488)) == 0)
           || !*(_QWORD *)(v143 + 8)
           || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v142 + 464), v191, (uint64_t)&v193), (v140 = v151) != 0)))
        {
          v112 = (WebCore::CachedResource *)*((_QWORD *)v140 + 1);
        }
        else
        {
          v112 = 0;
        }
      }
      WebCore::CachedResourceHandleBase::setResource(v63, v112);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v151, v113);
      if ((_DWORD)v164 != -1)
        (*(&off_1E33A6A58 + v164))((int)&v193, (WebCore::CachedResourceHandleBase *)&v160);
      LODWORD(v164) = -1;
      if (*(_DWORD *)v111 == 1)
      {
        WebCore::CachedResourceLoader::~CachedResourceLoader(v111, v114);
        WTF::fastFree(v134, v135);
      }
      else
      {
        --*(_DWORD *)v111;
      }
      WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v176, (WTF::StringImpl *)v114);
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
          WTF::StringImpl::destroy(v98, v115);
        else
          *(_DWORD *)v98 -= 2;
      }
      goto LABEL_188;
    }
LABEL_249:
    __break(1u);
    goto LABEL_250;
  }
  WTF::StringImpl::substring(v155);
  v51 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v176;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v51 -= 2;
  }
  if (!*v150)
    goto LABEL_215;
  v160 = 0;
  WTF::URL::invalidate((WTF::URL *)&v160);
  MEMORY[0x19AEA52F8](&v176, &v160, (char *)this + 112, 0);
  v53 = v160;
  v160 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v54 + 8) = 1;
  *(_QWORD *)(v54 + 16) = 0;
  *(_QWORD *)v54 = off_1E34849B0;
  v55 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (v55)
  {
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
  }
  *(_QWORD *)(v54 + 24) = v55;
  v57 = v176;
  if (v176)
    *(_DWORD *)v176 += 4;
  *(_QWORD *)(v54 + 32) = v57;
  *(_QWORD *)(v54 + 40) = v57;
  v58 = v178;
  *(_OWORD *)(v54 + 48) = v177;
  *(_OWORD *)(v54 + 64) = v58;
  *(_BYTE *)(v54 + 80) = 0;
  *(_QWORD *)(v54 + 88) = 0;
  *(_QWORD *)(v54 + 96) = 0;
  *(_WORD *)(v54 + 104) = 257;
  *(_QWORD *)(v54 + 112) = 0;
  *(_WORD *)(v54 + 120) = 0;
  *(_QWORD *)(v54 + 128) = 0;
  v59 = (WTF::MonotonicTime *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v54;
  if (v59)
  {
    if (*((_DWORD *)v59 + 2) == 1)
      v59 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v59 + 8))(v59);
    else
      --*((_DWORD *)v59 + 2);
  }
  *((_BYTE *)this + 152) = 0;
  *(_BYTE *)(v2 + 3438) = 1;
  if ((*(_QWORD *)(v2 + 1672) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(v2 + 1672) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *(_QWORD *)(v2 + 1664) = 0;
    WTF::MonotonicTime::now(v59);
    WebCore::TimerBase::setNextFireTime(v2 + 1640, v60 + 0.0);
  }
  v61 = v176;
  v176 = 0;
  if (!v61)
    goto LABEL_215;
  if (*(_DWORD *)v61 == 2)
  {
    WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v4);
    if (!v31)
      goto LABEL_218;
  }
  else
  {
    *(_DWORD *)v61 -= 2;
    if (!v31)
      goto LABEL_218;
  }
LABEL_216:
  if (*(_DWORD *)v31 == 2)
    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v4);
  else
    *(_DWORD *)v31 -= 2;
LABEL_218:
  result = v155;
  v155 = 0;
  if (!result)
    goto LABEL_221;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_221;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
  if ((v15 & 1) != 0)
    goto LABEL_224;
LABEL_222:
  if (*(_DWORD *)v14 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v4);
  else
    *(_DWORD *)v14 -= 2;
LABEL_224:
  if (!v157 || (v14 = v156) == 0)
  {
    if (!v2)
      return result;
    goto LABEL_227;
  }
LABEL_250:
  v136 = *((unsigned int *)v14 - 1);
  if ((_DWORD)v136)
  {
    v137 = (WTF::StringImpl **)v14;
    do
    {
      v138 = *v137;
      if (*v137 != (WTF::StringImpl *)-1)
      {
        v139 = v137[1];
        v137[1] = 0;
        if (v139)
        {
          if (*(_DWORD *)v139 == 2)
          {
            WTF::StringImpl::destroy(v139, (WTF::StringImpl *)v4);
            v138 = *v137;
          }
          else
          {
            *(_DWORD *)v139 -= 2;
          }
        }
        *v137 = 0;
        if (v138)
        {
          if (*(_DWORD *)v138 == 2)
            WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v138 -= 2;
        }
      }
      v137 += 2;
      --v136;
    }
    while (v136);
  }
  result = (WTF::StringImpl *)WTF::fastFree((WTF *)((char *)v14 - 16), v4);
  if (v2)
  {
LABEL_227:
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ProcessingInstruction::sheetLoaded(WebCore::ProcessingInstruction *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  WTF *v17;
  unsigned int v19;
  uint64_t v20;
  double v21;
  char v22;

  if (*((_BYTE *)this + 152))
    return 0;
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
    if ((v3 & 1) != 0)
      return 0;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 1328);
  v6 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v6;
  v7 = *(_DWORD *)(v5 + 152);
  *(_DWORD *)(v5 + 152) = v7 + 1;
  v8 = *((_QWORD *)this + 2);
  v9 = (WTF *)(v8 & 0xFFFFFFFFFFFFLL);
  if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v10 = *(_QWORD *)(v5 + 144);
      if (v10)
      {
        v11 = *(_DWORD *)(v10 - 8);
        v12 = ((unint64_t)v9 + ~(v8 << 32)) ^ (((unint64_t)v9 + ~(v8 << 32)) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        for (i = 1; ; ++i)
        {
          v17 = *(WTF **)(v10 + 8 * v15);
          if (!v17)
            break;
          if (v17 != (WTF *)-1 && v17 == v9)
          {
            *(_DWORD *)(v5 + 152) = v7 + 2;
            if ((v7 + 2) <= *(_DWORD *)(v5 + 156))
              goto LABEL_38;
            _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v5 + 144), &v22);
            v19 = 0;
            *(_DWORD *)(v5 + 152) = 0;
            v20 = *(_QWORD *)(v5 + 144);
            if (v20)
            {
              v19 = *(_DWORD *)(v20 - 12);
              if (v19 > 0x7FFFFFFE)
                v19 = 0x7FFFFFFF;
            }
            *(_DWORD *)(v5 + 156) = 2 * v19;
            v9 = (WTF *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
            if (v9)
            {
LABEL_38:
              if (*((_QWORD *)v9 + 1))
                WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)(v5 + 144), v9);
            }
            v3 = WebCore::Style::Scope::didRemovePendingStylesheet((WebCore::Document **)v5);
            v6 = *(_DWORD *)(v5 + 8);
            break;
          }
          v15 = (v15 + i) & v11;
        }
      }
    }
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195A26E78);
  }
  *(_DWORD *)(v5 + 8) = v6 - 1;
  if (*((_BYTE *)this + 156))
  {
    *(_BYTE *)(v4 + 3438) = 1;
    if ((*(_QWORD *)(v4 + 1672) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(v4 + 1672) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *(_QWORD *)(v4 + 1664) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
      WebCore::TimerBase::setNextFireTime(v4 + 1640, v21 + 0.0);
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v9);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return 1;
}

unsigned int *WebCore::ProcessingInstruction::setCSSStyleSheet(unsigned int *this, const WTF::String *a2, const WTF::URL *a3, const WTF::String *a4, const WebCore::CachedCSSStyleSheet *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  const WebCore::CSSParserToken *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const WebCore::CSSParserToken *v24;
  WebCore::CSSTokenizer *v25;
  WTF *v26;
  void *v27;
  unsigned int v28;
  WTF *v29;
  uint64_t v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  void *v36;
  _BYTE v37[3];
  WebCore::StyleSheetContents *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  const WebCore::CSSParserToken *v47[2];

  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v7 = (uint64_t)this;
    v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v40, (const WebCore::Document *)v8, a3, a4);
    v9 = WTF::fastMalloc((WTF *)0xD8);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    v10 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v10 += 2;
    *(_QWORD *)(v9 + 24) = v10;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    v11 = WebCore::starAtomData;
    if (WebCore::starAtomData)
      *(_DWORD *)WebCore::starAtomData += 2;
    *(_QWORD *)(v9 + 112) = v11;
    *(_WORD *)(v9 + 120) = 0;
    *(_BYTE *)(v9 + 122) = 1;
    *(_QWORD *)(v9 + 123) = 0;
    *(_BYTE *)(v9 + 131) = 0;
    v12 = v40;
    if (v40)
      *(_DWORD *)v40 += 2;
    *(_QWORD *)(v9 + 136) = v12;
    v13 = v42;
    *(_OWORD *)(v9 + 144) = v41;
    *(_OWORD *)(v9 + 160) = v13;
    v14 = v43;
    if (v43)
      *(_DWORD *)v43 += 2;
    v15 = v44;
    *(_QWORD *)(v9 + 176) = v14;
    *(_QWORD *)(v9 + 184) = v15;
    *(_WORD *)(v9 + 192) = v45;
    *(_QWORD *)(v9 + 200) = 0;
    *(_QWORD *)(v9 + 208) = 0;
    v38 = (WebCore::StyleSheetContents *)v9;
    LOWORD(v46) = 0;
    v16 = WTF::fastMalloc((WTF *)0x98);
    v47[0] = 0;
    WebCore::CSSStyleSheet::CSSStyleSheet(v16, (uint64_t *)&v38, v7, v47, 0, &v46);
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
      {
        WebCore::StyleSheetContents::~StyleSheetContents(v38, v17);
        WTF::fastFree(v35, v36);
      }
      else
      {
        --*(_DWORD *)v38;
      }
    }
    v18 = *(unsigned __int8 *)(v7 + 153);
    if (*(unsigned __int8 *)(v16 + 33) != v18)
    {
      *(_BYTE *)(v16 + 33) = v18;
      v19 = (const WebCore::CSSParserToken *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E3398D48;
      v47[0] = v19;
      WebCore::CSSStyleSheet::forEachStyleScope(v16, v47);
      (*(void (**)(const WebCore::CSSParserToken *))(*(_QWORD *)v19 + 8))(v19);
    }
    v20 = *(_DWORD **)(v7 + 120);
    if (v20)
      *v20 += 2;
    v21 = *(WTF::StringImpl **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = *(_QWORD *)(v8 + 528);
    if (v22)
    {
      v22 = *(_QWORD *)(v22 + 8);
      if (v22)
      {
        v22 = *(_QWORD *)(v22 + 24);
        if (v22)
        {
          v22 = *(_QWORD *)(v22 + 8);
          if (v22)
            LOBYTE(v22) = *(_BYTE *)(v22 + 450) != 0;
        }
      }
    }
    v37[0] = v22;
    v37[1] = (*(_DWORD *)(*(_QWORD *)(v8 + 680) + 672) & 0x8000000) != 0;
    v37[2] = 0;
    WebCore::CSSTokenizer::tryCreate((unsigned int **)(v7 + 128), &v46);
    if (v46)
    {
      v24 = (const WebCore::CSSParserToken *)(*(_QWORD *)(v46 + 48) + 24 * *(unsigned int *)(v46 + 60));
      v47[0] = *(const WebCore::CSSParserToken **)(v46 + 48);
      v47[1] = v24;
      WebCore::MQ::MediaQueryParser::consumeMediaQueryList(v47, (WebCore::CSSParserTokenRange *)v37, (uint64_t)&v38);
      v25 = (WebCore::CSSTokenizer *)v46;
      v46 = 0;
      if (v25)
      {
        WebCore::CSSTokenizer::~CSSTokenizer(v25, v23);
        WTF::fastFree(v26, v27);
      }
    }
    else
    {
      v38 = 0;
      v39 = 0;
    }
    v28 = *(_DWORD *)(v16 + 60);
    if (v28)
      WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v16 + 48), (WTF::StringImpl *)(*(_QWORD *)(v16 + 48) + 56 * v28));
    v29 = *(WTF **)(v16 + 48);
    if (v29)
    {
      *(_QWORD *)(v16 + 48) = 0;
      *(_DWORD *)(v16 + 56) = 0;
      WTF::fastFree(v29, v23);
    }
    *(_QWORD *)(v16 + 48) = v38;
    v30 = v39;
    v38 = 0;
    v39 = 0;
    *(_QWORD *)(v16 + 56) = v30;
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v23);
    v31 = *(_DWORD **)(v7 + 144);
    *(_QWORD *)(v7 + 144) = v16;
    if (v31)
    {
      if (v31[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
      else
        --v31[2];
    }
    WebCore::CachedCSSStyleSheet::sheetText(a5, 0, 0, 0, v47);
    WebCore::ProcessingInstruction::parseStyleSheet((WebCore::ProcessingInstruction *)v7, (const WTF::String *)v47);
    v33 = v47[0];
    v47[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v43;
    v43 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    this = (unsigned int *)v40;
    v40 = 0;
    if (this)
    {
      if (*this == 2)
        this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v32);
      else
        *this -= 2;
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8, v32);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return this;
}

void WebCore::ProcessingInstruction::parseStyleSheet(WebCore::ProcessingInstruction *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::StyleSheetContents *v6;
  WebCore::StyleSheetContents *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore::CachedResource *v14;
  void *v15;
  WebCore::StyleSheetContents *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  unsigned int *v22;
  _BYTE v23[24];
  unsigned int **v24;

  v4 = *((_QWORD *)this + 18);
  ++*(_DWORD *)(v4 + 8);
  if (*((_BYTE *)this + 155))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4) & 1) == 0)
    {
      __break(0xC471u);
      goto LABEL_34;
    }
    v7 = *(WebCore::StyleSheetContents **)(v4 + 24);
    ++*(_DWORD *)v7;
    WebCore::StyleSheetContents::parseString(v7, a2, v5, v6);
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v7, v8);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  else if (*((_BYTE *)this + 156))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195A274A0);
    }
    WebCore::XSLStyleSheet::parseString((WebCore::XSLStyleSheet *)v4, a2);
  }
  v9 = *((_QWORD *)this + 17);
  if (v9)
  {
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
    v22 = (unsigned int *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      v24 = &v22;
      ++*(_DWORD *)(v11 + 548);
      v12 = *(_QWORD *)(v11 + 488);
      if (v12)
      {
        if (*(_QWORD *)(v12 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v11 + 464), (uint64_t *)&v24, (uint64_t)v23);
      }
    }
  }
  else
  {
    v22 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 17, 0);
  if (v22)
  {
    v14 = (WebCore::CachedResource *)*((_QWORD *)v22 + 1);
    if (v14)
      WebCore::CachedResource::removeClient(v14, (unsigned int **)this + 11);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v22, v13);
  *((_BYTE *)this + 152) = 0;
  if (!*((_BYTE *)this + 155))
  {
    if (!*((_BYTE *)this + 156))
      goto LABEL_24;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4) & 1) != 0)
    {
      WebCore::XSLStyleSheet::checkLoaded((WebCore::XSLStyleSheet *)v4);
      goto LABEL_24;
    }
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x195A27460);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195A27480);
  }
  v16 = *(WebCore::StyleSheetContents **)(v4 + 24);
  ++*(_DWORD *)v16;
  WebCore::StyleSheetContents::checkLoaded((uint64_t)v16, v15);
  if (*(_DWORD *)v16 == 1)
  {
    WebCore::StyleSheetContents::~StyleSheetContents(v16, v17);
    WTF::fastFree(v20, v21);
  }
  else
  {
    --*(_DWORD *)v16;
  }
LABEL_24:
  if (*(_DWORD *)(v4 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  else
    --*(_DWORD *)(v4 + 8);
}

unsigned int *`non-virtual thunk to'WebCore::ProcessingInstruction::setCSSStyleSheet(WebCore::ProcessingInstruction *this, const WTF::String *a2, const WTF::URL *a3, const WTF::String *a4, const WebCore::CachedCSSStyleSheet *a5)
{
  return WebCore::ProcessingInstruction::setCSSStyleSheet((unsigned int *)this - 22, a2, a3, a4, a5);
}

void WebCore::ProcessingInstruction::setXSLStyleSheet(WebCore::ProcessingInstruction *this, const WTF::String *a2, const WTF::URL *a3, const WTF::String *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  __int128 v13;
  _DWORD *v14;
  uint64_t v15;
  void *v16;

  v8 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = off_1E34849B0;
  if (this)
  {
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v8 + 24) = v9;
  v11 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v11 += 2;
  *(_QWORD *)(v8 + 32) = v11;
  v12 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v12 += 2;
  *(_QWORD *)(v8 + 40) = v12;
  v13 = *(_OWORD *)((char *)a3 + 24);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)((char *)a3 + 8);
  *(_OWORD *)(v8 + 64) = v13;
  *(_BYTE *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_WORD *)(v8 + 104) = 256;
  *(_QWORD *)(v8 + 112) = 0;
  *(_WORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  v14 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v8;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v15 + 24) += 2;
  WebCore::ProcessingInstruction::parseStyleSheet(this, a4);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
}

void `non-virtual thunk to'WebCore::ProcessingInstruction::setXSLStyleSheet(WebCore::ProcessingInstruction *this, const WTF::String *a2, const WTF::URL *a3, const WTF::String *a4)
{
  WebCore::ProcessingInstruction::setXSLStyleSheet((WebCore::ProcessingInstruction *)((char *)this - 88), a2, a3, a4);
}

WTF::StringImpl *WebCore::ProcessingInstruction::addSubresourceAttributeURLs(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];
  _BYTE v7[24];

  result = *(WTF::StringImpl **)(a1 + 144);
  if (result)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 96))(v6);
    if (v6[0])
    {
      WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v6, v4, (uint64_t)v7);
      result = v6[0];
      v6[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::ProcessingInstruction::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  void *v8;
  unsigned int v9;

  v3 = a2;
  WebCore::Node::insertedIntoAncestor((unsigned int *)a1, (unsigned int *)a2, a3);
  if ((v3 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(unsigned int **)(v6 + 1328);
  ++v7[2];
  WebCore::Style::Scope::addStyleSheetCandidateNode(v7, (WebCore::Node *)a1, *(unsigned __int8 *)(a1 + 154));
  v9 = v7[2];
  if (v9)
  {
    v7[2] = v9 - 1;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    return 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ProcessingInstruction::removedFromAncestor(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int v14;
  WebCore::AXObjectCache *v15;
  WebCore::AXObjectCache *v16;
  int v17;
  char v18;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if ((a2 & 1) != 0)
  {
    v4 &= ~0x8000000000000uLL;
    *(_QWORD *)(result + 16) = v4;
  }
  if ((v4 & 0x10000000000000) != 0 && (*(_WORD *)(**(_QWORD **)(result + 40) + 28) & 0x80) == 0)
    *(_QWORD *)(result + 16) = v4 & 0xFFEFFFFFFFFFFFFFLL;
  if ((a2 & 1) != 0 && WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v15 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(a3 + 40) + 8));
    if (v15)
    {
      v16 = v15;
      ++*((_DWORD *)v15 + 2);
      WebCore::AXObjectCache::remove(v15, (WebCore::Node *)v3);
      v17 = *((_DWORD *)v16 + 2);
      if (!v17)
      {
        __break(0xC471u);
LABEL_46:
        JUMPOUT(0x195A279A4);
      }
      *((_DWORD *)v16 + 2) = v17 - 1;
    }
  }
  else if ((a2 & 1) == 0)
  {
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 1328);
  ++*(_DWORD *)(v5 + 8);
  result = WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>(v5 + 192, v3);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(v5 + 233))
    {
      *(_WORD *)(v5 + 232) = 256;
      if (*(_QWORD *)(v5 + 24))
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 1328) + 234) = 1;
    }
    if ((*(_QWORD *)(v5 + 112) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(v5 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *(_QWORD *)(v5 + 104) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      result = WebCore::TimerBase::setNextFireTime(v5 + 80, v6 + 0.0);
    }
  }
  v7 = *(_DWORD **)(v3 + 144);
  *(_QWORD *)(v3 + 144) = 0;
  if (v7)
  {
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 88))(v7);
    if (v7[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  if (*(_BYTE *)(v3 + 152))
  {
    *(_BYTE *)(v3 + 152) = 0;
    v8 = *(_DWORD *)(v5 + 156);
    v9 = *(_DWORD *)(v5 + 152) + 1;
    *(_DWORD *)(v5 + 152) = v9;
    if (v9 > v8)
    {
      _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v5 + 144), &v18);
      v10 = 0;
      *(_DWORD *)(v5 + 152) = 0;
      v11 = *(_QWORD *)(v5 + 144);
      if (v11)
      {
        v10 = *(_DWORD *)(v11 - 12);
        if (v10 > 0x7FFFFFFE)
          v10 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v5 + 156) = 2 * v10;
    }
    v12 = *(_QWORD *)(v3 + 16);
    if ((v12 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 8))
      WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)(v5 + 144), (WTF *)(v12 & 0xFFFFFFFFFFFFLL));
    result = WebCore::Style::Scope::didRemovePendingStylesheet((WebCore::Document **)v5);
  }
  if (!*(_BYTE *)(v5 + 233))
  {
    *(_WORD *)(v5 + 232) = 256;
    if (*(_QWORD *)(v5 + 24))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 1328) + 234) = 1;
  }
  if ((*(_QWORD *)(v5 + 112) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(v5 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *(_QWORD *)(v5 + 104) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    result = WebCore::TimerBase::setNextFireTime(v5 + 80, v13 + 0.0);
  }
  v14 = *(_DWORD *)(v5 + 8);
  if (!v14)
  {
    __break(0xC471u);
    goto LABEL_46;
  }
  *(_DWORD *)(v5 + 8) = v14 - 1;
  return result;
}

uint64_t WebCore::PointerEvent::isPointerEvent(WebCore::PointerEvent *this)
{
  return 1;
}

void WebCore::PointerEvent::toElement(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::PointerEvent::fromElement(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

WebCore::PositionIterator *WebCore::PositionIterator::PositionIterator(WebCore::PositionIterator *this, const WebCore::Position *a2)
{
  _WORD *v4;
  int v5;
  BOOL v6;
  _WORD *v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v15;
  int v16;
  int v18;
  BOOL v19;
  _WORD *v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_WORD **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v4 + 6) += 2;
  *(_QWORD *)this = v4;
  if ((*((_BYTE *)a2 + 12) & 8) == 0 && ((v5 = *((_BYTE *)a2 + 12) & 7, v5 != 4) ? (v6 = v5 == 2) : (v6 = 1), v6))
  {
    v7 = *(_WORD **)a2;
    if (*(_QWORD *)a2)
    {
      v8 = *((_DWORD *)v7 + 6);
      *((_DWORD *)v7 + 6) = v8 + 2;
      v9 = v7[14];
      if ((v9 & 1) != 0)
      {
        v24 = *((_QWORD *)v7 + 10);
        if (v24)
          v11 = *(_DWORD *)(v24 + 4);
        else
          v11 = 0;
      }
      else if ((v9 & 4) != 0 && (v10 = *((_QWORD *)v7 + 10)) != 0)
      {
        v11 = 0;
        do
        {
          ++v11;
          v10 = *(_QWORD *)(v10 + 56);
        }
        while (v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v7 + 208))(v7) ^ 1;
        v8 = *((_DWORD *)v7 + 6) - 2;
      }
      if (v8)
      {
        *((_DWORD *)v7 + 6) = v8;
      }
      else if ((v7[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = *((_DWORD *)a2 + 2);
  }
  if (!v4 || (v4[14] & 4) == 0)
    goto LABEL_29;
  v12 = *((_QWORD *)v4 + 10);
  if (v11 && v12)
  {
    v13 = v11 - 1;
    do
    {
      v12 = *(_QWORD *)(v12 + 56);
      v15 = v13-- != 0;
    }
    while (v12 && v15);
  }
  if (v12)
  {
    v16 = 0;
    *(_DWORD *)(v12 + 24) += 2;
    *((_QWORD *)this + 1) = v12;
  }
  else
  {
LABEL_29:
    *((_QWORD *)this + 1) = 0;
    if ((*((_BYTE *)a2 + 12) & 8) == 0
      && ((v18 = *((_BYTE *)a2 + 12) & 7, v18 != 4) ? (v19 = v18 == 2) : (v19 = 1), v19))
    {
      v20 = *(_WORD **)a2;
      if (v20)
      {
        v21 = *((_DWORD *)v20 + 6);
        *((_DWORD *)v20 + 6) = v21 + 2;
        v22 = v20[14];
        if ((v22 & 1) != 0)
        {
          v25 = *((_QWORD *)v20 + 10);
          if (v25)
            v16 = *(_DWORD *)(v25 + 4);
          else
            v16 = 0;
        }
        else if ((v22 & 4) != 0 && (v23 = *((_QWORD *)v20 + 10)) != 0)
        {
          v16 = 0;
          do
          {
            ++v16;
            v23 = *(_QWORD *)(v23 + 56);
          }
          while (v23);
        }
        else
        {
          v16 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v20 + 208))(v20) ^ 1;
          v21 = *((_DWORD *)v20 + 6) - 2;
        }
        if (v21)
        {
          *((_DWORD *)v20 + 6) = v21;
        }
        else if ((v20[15] & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v20);
        }
      }
      else
      {
        v16 = 0;
      }
    }
    else
    {
      v16 = *((_DWORD *)a2 + 2);
    }
  }
  *((_DWORD *)this + 4) = v16;
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;

  v3 = *a3;
  if (*a3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = a3[1];
  *a2 = v3;
  a2[1] = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  __int16 v4;
  _BOOL8 result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 >= *(unsigned int *)(v3 + 60))
  {
    __break(0xC471u);
  }
  else
  {
    v4 = *(_WORD *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 50);
    return (v4 & 0xE) == 0 || (v4 & 0xF) == 3;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return *(unsigned int *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 68);
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *a2;
  if (!*a2 || ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 80))(*a2) & 1) != 0)
    return v2[18];
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox3endEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return (*(_DWORD *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 72)
                        + *(_DWORD *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 68));
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox3endEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t result;

  v2 = (_DWORD *)*a2;
  if (!*a2 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*a2) & 1) != 0)
    return (v2[19] + v2[18]);
  result = 105;
  __break(0xC471u);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox6lengthEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return *(unsigned int *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 72);
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox6lengthEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *a2;
  if (!*a2 || ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 80))(*a2) & 1) != 0)
    return v2[19];
  result = 105;
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  v4 = a3[1];
  *a3 = 0;
  *a2 = v3;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t WebCore::hasInlineRun(WebCore *this, WebCore::RenderObject *a2)
{
  char v3;
  WebCore::LayoutIntegration::LineLayout *v4;
  int v5;
  WebCore::LayoutIntegration::LineLayout *v6;
  int v7;
  WebCore::LayoutIntegration::LineLayout *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *((_BYTE *)this + 45);
  if ((v3 & 4) != 0)
  {
    v4 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
    if (v4)
    {
      WebCore::LayoutIntegration::LineLayout::boxFor(v4, this, (uint64_t)&v11);
    }
    else
    {
      v12 = 0;
      v11 = 0;
      v13 = 1;
    }
    v5 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v11);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t *))off_1E33A6968[v13])(&v14, &v11);
    if (!v5)
      return 1;
    v3 = *((_BYTE *)this + 45);
  }
  if ((v3 & 2) == 0)
    goto LABEL_20;
  v6 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v6)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v6, this, (uint64_t)&v11);
  }
  else
  {
    v11 = *((_QWORD *)this + 8);
    LODWORD(v13) = 1;
  }
  v7 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v11);
  if ((_DWORD)v13 != -1)
    ((void (*)(char *, uint64_t *))off_1E33A6968[v13])(&v14, &v11);
  if (v7)
  {
LABEL_20:
    if (*((_BYTE *)this + 46) != 17)
      return 0;
    v8 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
    if (v8)
    {
      WebCore::LayoutIntegration::LineLayout::boxFor(v8, this, (uint64_t)&v11);
    }
    else
    {
      v12 = 0;
      v11 = 0;
      v13 = 1;
    }
    v9 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v11);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t *))off_1E33A6968[v13])(&v14, &v11);
    if (v9)
      return 0;
  }
  return 1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSQ_EEEDcSI_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E33A6968[v5])(&v12, v4);
LABEL_9:
    v10 = *a3;
    v11 = a3[1];
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_QWORD *)(v4 + 8) = v11;
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v7;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  a2[1] = a3[1];
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E33A6968[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(unsigned int *a1)
{
  uint64_t v1;
  int v3;
  WebCore::InlineIterator::BoxModernPath *v4;
  char v5;
  char *v6;

  v1 = a1[4];
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box18minimumCaretOffsetEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(v3, v4);
  }
  else
  {
    v6 = &v5;
    return (*(&off_1E33A69F8 + v1))((int)&v6, (WebCore::InlineIterator::BoxModernPath *)a1);
  }
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box18minimumCaretOffsetEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(int a1, WebCore::InlineIterator::BoxModernPath *this)
{
  return WebCore::InlineIterator::BoxModernPath::minimumCaretOffset(this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box18minimumCaretOffsetEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 160))(*a2);
}

_QWORD *WebCore::InlineIterator::BoxModernPath::minimumCaretOffset(_QWORD *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this[1];
  v2 = *(_QWORD *)(*this + 8);
  if (v1 >= *(unsigned int *)(v2 + 60))
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 48);
    if ((*(_WORD *)(v3 + 80 * v1 + 50) & 0xE) == 0 || (*(_WORD *)(v3 + 80 * v1 + 50) & 0xF) == 3)
      return (_QWORD *)*(unsigned int *)(v3 + 80 * v1 + 68);
    else
      return 0;
  }
  return this;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box18maximumCaretOffsetEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 >= *(unsigned int *)(v3 + 60))
  {
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(v3 + 48);
    if ((*(_WORD *)(v4 + 80 * v2 + 50) & 0xE) == 0 || (*(_WORD *)(v4 + 80 * v2 + 50) & 0xF) == 3)
      return (*(_DWORD *)(v4 + 80 * v2 + 72) + *(_DWORD *)(v4 + 80 * v2 + 68));
    else
      return 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box18maximumCaretOffsetEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 168))(*a2);
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return (*(_WORD *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 50) & 0xFu) - 3 < 2;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(unsigned int *result, unsigned int **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *(unsigned int **)a3;
      if (*(_QWORD *)a3)
      {
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
      result = *a2;
      *a2 = v7;
      if (result)
      {
        do
        {
          v9 = __ldaxr(result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, result));
        if (!v10)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      a2[1] = *(unsigned int **)(a3 + 8);
      return result;
    }
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E33A6968[v5])(&v14, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v11 = *(unsigned int **)a3;
  if (*(_QWORD *)a3)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v4 = v11;
  *(_QWORD *)(v4 + 8) = v13;
  *(_DWORD *)(v4 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E33A6968[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 49);
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 52) >> 2;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_19CachedXSLStyleSheetEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_19CachedXSLStyleSheetEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl ***v11;
  int i;
  unsigned int v13;
  WTF::StringImpl ***v14;
  WTF **v15;
  WTF::StringImpl **result;
  WTF::StringImpl *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  WTF::StringImpl **v29;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(a1, 8u, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl ***)(v7 + 8 * (v10 & v8));
    v15 = *v14;
    if (*v14 == (WTF::StringImpl **)-1)
    {
      v11 = (WTF::StringImpl ***)(v7 + 8 * v13);
      goto LABEL_13;
    }
    if (!v15)
      break;
    result = (WTF::StringImpl **)WTF::equal(*v15, *(const WTF::StringImpl **)a2, a3);
    if ((result & 1) != 0)
    {
      v21 = 0;
      goto LABEL_36;
    }
LABEL_13:
    v10 = i + v13;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*a1 - 16);
    v14 = v11;
  }
  result = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
  v17 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v17 += 2;
  *result = v17;
  v18 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 3) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 1) = v18;
  result[5] = 0;
  result[6] = 0;
  *v14 = result;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_30;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_31;
    }
LABEL_30:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_31:
    v14 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(a1, v26, v14);
    result = *v14;
  }
  v27 = (_QWORD *)a1[2];
  result[5] = (WTF::StringImpl *)v27;
  result[6] = 0;
  if (v27)
    v28 = v27 + 6;
  else
    v28 = a1 + 1;
  *v28 = result;
  a1[2] = (uint64_t)result;
  v21 = 1;
LABEL_36:
  v29 = *v14;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v21;
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl ***a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl ***)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = *v14;
        v18 = *((_DWORD *)*v14 + 4);
        if (v18 < 0x100)
          v19 = WTF::StringImpl::hashSlowCase(v17);
        else
          v19 = v18 >> 8;
        v20 = 0;
        do
        {
          v21 = v19 & v16;
          v19 = ++v20 + v21;
        }
        while (*(_QWORD *)(v15 + 8 * v21));
        *(_QWORD *)(v15 + 8 * v21) = *v13;
        if (v13 == a3)
          v12 = v15 + 8 * v21;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::ancestorsOfType<WebCore::RenderBlockFlow>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  while ((*(_BYTE *)(v2 + 52) & 7) != 1)
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (!v4)
      return 0;
    result = 0;
    v2 = *(_QWORD *)(v4 + 8);
    if (!v2)
      return result;
  }
  return v2;
}

uint64_t WebCore::ProgressEvent::ProgressEvent(uint64_t a1, char a2, _QWORD *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = WebCore::Event::Event(a1, a2, a3, 0, 0, 0);
  *(_QWORD *)result = off_1E33A6BE0;
  *(_BYTE *)(result + 72) = a4;
  *(_QWORD *)(result + 80) = a5;
  *(_QWORD *)(result + 88) = a6;
  return result;
}

uint64_t WebCore::PromiseRejectionEvent::PromiseRejectionEvent(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *Allocator;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_QWORD *)(a1 + 8) = 0;
  if (a4)
    v12 = 2785792;
  else
    v12 = 2785280;
  v13 = v12 | (2 * v9) | (4 * v10) | (8 * v11) | (*a2 != 0) | *(_DWORD *)(a1 + 20) & 0xFFC00000;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v13;
  v14 = (_DWORD *)*a2;
  if (*a2)
  {
    *v14 += 2;
    v13 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = v13 | 0x4000;
  *(_QWORD *)a1 = off_1E33A6CA8;
  v15 = *((_QWORD *)a3 + 1);
  ++*(_DWORD *)(v15 + 16);
  *(_QWORD *)(a1 + 72) = v15;
  v16 = *((_QWORD *)a3 + 2);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if ((v16 & 0xFFFE000000000002) != 0)
  {
    *(_QWORD *)(a1 + 80) = v16;
  }
  else
  {
    if (v16)
    {
      if ((v16 & 8) != 0)
        v20 = (v16 - 112) | 1;
      else
        v20 = v16 & 0xFFFFFFFFFFFFC000;
      if ((v20 & 1) != 0)
        v21 = v20 + 47;
      else
        v21 = *(_QWORD *)v20 + 32;
      Allocator = *(_QWORD **)(v21 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v21 + 16) = *Allocator;
      *Allocator = v16;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    else
    {
      Allocator = 0;
    }
    __dmb(0xAu);
    v18 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = Allocator;
    if (v18)
      *(_QWORD *)(v18 + 8) = 3;
  }
  return a1;
}

void WebCore::PromiseRejectionEvent::~PromiseRejectionEvent(WebCore::PromiseRejectionEvent *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 11) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  WebCore::Event::~Event(this, a2);
}

{
  uint64_t v3;
  _DWORD *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 11) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::PseudoElement::~PseudoElement(WebCore::PseudoElement *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v6, v7);
}

WTF::StringImpl *WebCore::PseudoElement::clearHostElement(WebCore::PseudoElement *this, WebCore::Page *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::InspectorInstrumentation *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::PseudoElement *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  WebCore::PseudoElement *v25;
  int v26;
  WTF::StringImpl *v27;
  char v28;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 24)) != 0)
  {
    v6 = *(WebCore::InspectorInstrumentation **)(v5 + 8);
    if (v6)
      ++*(_DWORD *)v6;
  }
  else
  {
    v6 = 0;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    if (!v6)
      goto LABEL_10;
    v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v6, a2);
    WebCore::InspectorInstrumentation::pseudoElementDestroyedImpl(v21, this, v22);
  }
  else if (!v6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::Page::~Page(v6);
    WTF::fastFree(v19, v20);
  }
  else
  {
    --*(_DWORD *)v6;
  }
LABEL_10:
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::PseudoElement *))(*(_QWORD *)this + 368))(this))
  {
    v25 = this;
    LOBYTE(v26) = 0;
    v28 = 0;
  }
  else
  {
    v14 = *((_QWORD *)this + 14);
    if (v14)
      v15 = *(WebCore::PseudoElement **)(v14 + 8);
    else
      v15 = 0;
    if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0)
      v16 = 0;
    else
      v16 = (*(uint64_t (**)(WebCore::PseudoElement *))(*(_QWORD *)this + 368))(this);
    v17 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      v18 = *(_DWORD *)v17;
      v25 = v15;
      v26 = v16;
      *(_DWORD *)v17 = v18 + 4;
      v27 = v17;
      v28 = 1;
      if (v18 == -2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 = v18 + 2;
    }
    else
    {
      v25 = v15;
      v26 = v16;
      v27 = 0;
      v28 = 1;
    }
  }
  result = (WTF::StringImpl *)WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v25);
  if (v28)
  {
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v10 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v23 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v23)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v23));
      v24 = *(WTF **)(v10 + 16);
      if (v24)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v24, v9);
      }
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v10, v9);
    }
  }
  return result;
}

void WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(WTF::StringImpl **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v4 = *(uint64_t **)(v3 + 56);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v3);
    v4 = *(uint64_t **)(v3 + 56);
  }
  WebCore::QualifiedNameCache::remove(v4, (WebCore::QualifiedName::QualifiedNameImpl *)this);
  v6 = this[6];
  this[6] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = this[5];
  this[5] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = this[4];
  this[4] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = this[3];
  this[3] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = this[2];
  this[2] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
}

uint64_t *WebCore::QualifiedNameCache::remove(uint64_t *this, WebCore::QualifiedName::QualifiedNameImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int i;
  uint64_t v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;

  v2 = *this;
  if (*this)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *((_DWORD *)a2 + 1);
    if (!v4)
    {
      v16 = *((_QWORD *)a2 + 2);
      v17 = *((_QWORD *)a2 + 3);
      v18 = *((_QWORD *)a2 + 4);
      v19 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16
                                                                                                 - 1640531527);
      LODWORD(v16) = (v16 >> 37) & 0x7FFF800 ^ ((v19 + WORD2(v16) + (v19 >> 11)) << 16) ^ (v19 + WORD2(v16) + (v19 >> 11));
      LODWORD(v16) = (v17 >> 5) & 0x7FFF800 ^ (((_DWORD)v16
                                                            + (unsigned __int16)v17
                                                            + (v16 >> 11)) << 16) ^ (v16
                                                                                                 + (unsigned __int16)v17
                                                                                                 + (v16 >> 11));
      LODWORD(v16) = (v17 >> 37) & 0x7FFF800 ^ (((_DWORD)v16 + WORD2(v17) + (v16 >> 11)) << 16) ^ (v16 + WORD2(v17) + (v16 >> 11));
      LODWORD(v16) = (v18 >> 5) & 0x7FFF800 ^ (((_DWORD)v16
                                                            + (unsigned __int16)v18
                                                            + (v16 >> 11)) << 16) ^ (v16
                                                                                                 + (unsigned __int16)v18
                                                                                                 + (v16 >> 11));
      LODWORD(v16) = (v18 >> 37) & 0x7FFF800 ^ (((_DWORD)v16 + WORD2(v18) + (v16 >> 11)) << 16) ^ (v16 + WORD2(v18) + (v16 >> 11));
      LODWORD(v16) = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
      LODWORD(v16) = (v16 + (v16 >> 5)) ^ (4 * (v16 + (v16 >> 5)));
      v20 = (v16 + (v16 >> 15)) ^ (((_DWORD)v16 + (v16 >> 15)) << 10);
      if (v20)
        v4 = v20;
      else
        v4 = 0x800000;
      *((_DWORD *)a2 + 1) = v4;
    }
    for (i = 0; ; v4 = i + v6)
    {
      v6 = v4 & v3;
      v7 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v2 + 8 * v6);
      if (v7 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        if (!v7)
        {
          v9 = (_QWORD *)*this;
          if (!*this)
            return this;
          v10 = *((unsigned int *)v9 - 1);
          v8 = &v9[v10];
          goto LABEL_10;
        }
        if (v7 == a2)
          break;
      }
      ++i;
    }
    v8 = (_QWORD *)(v2 + 8 * v6);
    v9 = (_QWORD *)*this;
    if (!*this)
      goto LABEL_11;
    v10 = *((unsigned int *)v9 - 1);
LABEL_10:
    v9 += v10;
    if (v9 == v8)
      return this;
LABEL_11:
    if (v9 != v8)
    {
      *v8 = -1;
      ++*(_DWORD *)(*this - 16);
      v11 = *this;
      if (*this)
        v12 = *(_DWORD *)(v11 - 12) - 1;
      else
        v12 = -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *this;
      if (*this)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 0x801)
          return WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WebCore::QualifiedNameCache::QualifiedNameHashTraits>::rehash(this, v15 >> 1, 0);
      }
    }
  }
  return this;
}

WebCore *WebCore::QualifiedName::init(WebCore::QualifiedName *this)
{
  uint64_t *v1;
  WebCore *result;

  if ((WebCore::QualifiedName::init(void)::initialized & 1) == 0)
  {
    v1 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    WebCore::QualifiedName::QualifiedName((WebCore *)&WebCore::anyName, MEMORY[0x1E0CBF2F8], &WebCore::starAtomData, &WebCore::starAtomData, 0, 0);
    result = WebCore::QualifiedName::QualifiedName((WebCore *)&WebCore::nullName, v1, v1, v1, (WTF::StringImpl *)1, 0);
    WebCore::QualifiedName::init(void)::initialized = 1;
  }
  return result;
}

uint64_t WebCore::QualifiedName::QualifiedNameImpl::computeHash(WebCore::QualifiedName::QualifiedNameImpl *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  v4 = (v1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v1 - 1640531527) << 16) ^ ((unsigned __int16)v1
                                                                                          - 1640531527);
  LODWORD(v1) = (v1 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(v1) + (v4 >> 11)) << 16) ^ (v4 + WORD2(v1) + (v4 >> 11));
  LODWORD(v1) = (v2 >> 5) & 0x7FFF800 ^ (((_DWORD)v1 + (unsigned __int16)v2 + (v1 >> 11)) << 16) ^ (v1 + (unsigned __int16)v2 + (v1 >> 11));
  LODWORD(v1) = (v2 >> 37) & 0x7FFF800 ^ (((_DWORD)v1 + WORD2(v2) + (v1 >> 11)) << 16) ^ (v1 + WORD2(v2) + (v1 >> 11));
  LODWORD(v1) = (v3 >> 5) & 0x7FFF800 ^ (((_DWORD)v1 + (unsigned __int16)v3 + (v1 >> 11)) << 16) ^ (v1 + (unsigned __int16)v3 + (v1 >> 11));
  LODWORD(v1) = (v3 >> 37) & 0x7FFF800 ^ (((_DWORD)v1 + WORD2(v3) + (v1 >> 11)) << 16) ^ (v1 + WORD2(v3) + (v1 >> 11));
  LODWORD(v1) = (v1 + (v1 >> 11)) ^ (8 * (v1 + (v1 >> 11)));
  LODWORD(v1) = (v1 + (v1 >> 5)) ^ (4 * (v1 + (v1 >> 5)));
  v5 = (v1 + (v1 >> 15)) ^ (((_DWORD)v1 + (v1 >> 15)) << 10);
  if (v5)
    return v5;
  else
    return 0x800000;
}

uint64_t *WebCore::RadioButtonGroup::members@<X0>(WebCore::RadioButtonGroup *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_16HTMLTableElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this, a2);
  *((_DWORD *)this + 2) = 0;
  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v7 = 0;
    v8 = 0;
    *((_DWORD *)this + 3) = 0;
    goto LABEL_3;
  }
  v10 = *(_DWORD *)(v6 - 12);
  if (v10 >= 0x7FFFFFFF)
    v11 = -2;
  else
    v11 = 2 * v10;
  *((_DWORD *)this + 3) = v11;
  v12 = *(unsigned int *)(v6 - 12);
  if (!(_DWORD)v12)
  {
    v7 = 0;
    v8 = 0;
    goto LABEL_3;
  }
  if (!(v12 >> 29))
  {
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a3 + 8) = v12;
    *(_QWORD *)a3 = v8;
    v13 = *(_QWORD *)this;
    if (*(_QWORD *)this && *(_DWORD *)(v13 - 12))
    {
      v14 = *(unsigned int *)(v13 - 4);
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        v16 = *(uint64_t **)this;
        while ((unint64_t)(*v16 + 1) <= 1)
        {
          ++v16;
          v15 -= 8;
          if (!v15)
            goto LABEL_24;
        }
      }
      else
      {
        v16 = *(uint64_t **)this;
      }
      v17 = (uint64_t *)(v13 + 8 * v14);
      if (v16 != v17)
      {
        v18 = *v16;
LABEL_20:
        v19 = *(_QWORD *)(v18 + 8);
        if (v19)
        {
          v20 = *((_DWORD *)this + 2);
          *(_DWORD *)(v19 + 24) += 2;
          *(_QWORD *)v8 = v19;
          v21 = v16 + 1;
          if (v16 + 1 == v17)
          {
            v25 = 1;
          }
          else
          {
            v22 = 1;
            while (1)
            {
              while (1)
              {
                v23 = *v21;
                if ((unint64_t)(*v21 + 1) > 1)
                  break;
                if (++v21 == v17)
                  goto LABEL_36;
              }
LABEL_32:
              if (v21 == v17)
                break;
              v24 = *(_QWORD *)(v23 + 8);
              if (!v24)
              {
                while (1)
                {
                  if (++v21 == v17)
                    goto LABEL_36;
                  v23 = *v21;
                  if ((unint64_t)(*v21 + 1) > 1)
                    goto LABEL_32;
                }
              }
              ++v20;
              *(_DWORD *)(v24 + 24) += 2;
              v25 = v22 + 1;
              *(_QWORD *)&v8[2 * v22] = v24;
              ++v21;
              ++v22;
              if (v21 == v17)
                goto LABEL_37;
            }
LABEL_36:
            v25 = v22;
          }
LABEL_37:
          *(_DWORD *)(a3 + 12) = v25;
          *((_DWORD *)this + 2) = v20 + 1;
          v7 = &v8[2 * v25];
          if (v25)
          {
            v9 = 126 - 2 * __clz(v25);
            return (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *,false>((uint64_t)v8, v7, v9, 1);
          }
LABEL_3:
          v9 = 0;
          return (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *,false>((uint64_t)v8, v7, v9, 1);
        }
        while (++v16 != v17)
        {
          v18 = *v16;
          if ((unint64_t)(*v16 + 1) > 1)
          {
            if (v16 != v17)
              goto LABEL_20;
            break;
          }
        }
      }
    }
LABEL_24:
    v7 = v8;
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RadioButtonGroup::setCheckedButton(uint64_t this, WebCore::HTMLInputElement *a2)
{
  WebCore::HTMLInputElement *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::HTMLInputElement *v5;
  BOOL v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;

  v2 = a2;
  v3 = this;
  v4 = *(_QWORD *)(this + 16);
  if (!v4)
  {
    if (!a2)
      return this;
    v5 = 0;
    v6 = 1;
LABEL_6:
    this = (uint64_t)WebCore::RadioButtonGroup::setNeedsStyleRecalcForAllButtons((_QWORD *)this);
    goto LABEL_7;
  }
  v5 = *(WebCore::HTMLInputElement **)(v4 + 8);
  v6 = v5 == 0;
  if (v5)
    *((_DWORD *)v5 + 6) += 2;
  if (v5 == a2)
  {
LABEL_28:
    v5 = v2;
    if (v6)
      return this;
    goto LABEL_29;
  }
  if ((a2 != 0) == (v5 == 0))
    goto LABEL_6;
LABEL_7:
  if (v2)
  {
    if ((*((_QWORD *)v2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      this = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)this = 1;
      *(_QWORD *)(this + 16) = 0;
      *(_QWORD *)(this + 24) = 0;
      *(_QWORD *)(this + 8) = v2;
      *(_BYTE *)(this + 32) = 0;
      v7 = *((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = v7 & 0xFFFF000000000000 | this;
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v20 = (WTF *)v8;
          v18 = v8[7];
          if ((_DWORD)v18)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v18));
          v19 = (WTF *)*((_QWORD *)v20 + 2);
          if (v19)
          {
            *((_QWORD *)v20 + 2) = 0;
            *((_DWORD *)v20 + 6) = 0;
            WTF::fastFree(v19, a2);
          }
          this = WTF::fastFree(v20, a2);
        }
      }
    }
    v11 = (unsigned int *)(*((_QWORD *)v2 + 2) & 0xFFFFFFFFFFFFLL);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  else
  {
    v11 = 0;
  }
  v13 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v11;
  if (!v13)
    goto LABEL_19;
  do
  {
    v14 = __ldaxr((unsigned int *)v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v13));
  if (v15)
  {
LABEL_19:
    if (v5)
      goto LABEL_20;
    goto LABEL_27;
  }
  atomic_store(1u, (unsigned int *)v13);
  v16 = *(unsigned int *)(v13 + 28);
  if ((_DWORD)v16)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v16));
  v17 = *(WTF **)(v13 + 16);
  if (v17)
  {
    *(_QWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 24) = 0;
    WTF::fastFree(v17, a2);
  }
  this = WTF::fastFree((WTF *)v13, a2);
  if (!v5)
  {
LABEL_27:
    v2 = 0;
    goto LABEL_28;
  }
LABEL_20:
  this = WebCore::HTMLInputElement::setChecked(v5, 0, 1);
  if (v6)
    return this;
LABEL_29:
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v5);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  return this;
}

_QWORD *WebCore::RadioButtonGroup::setNeedsStyleRecalcForAllButtons(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *ElementSibling;
  WebCore::Element *v15;
  uint64_t v16;

  v1 = this;
  v2 = *this;
  if (!*this)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = v2 + 8 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = v2 + 8 * v4;
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v7 = 0;
    v5 = *this;
    goto LABEL_7;
  }
  v16 = 8 * v4;
  v5 = *this;
  while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
  {
    v5 += 8;
    v16 -= 8;
    if (!v16)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_8;
  }
  v7 = *(unsigned int *)(v2 - 4);
LABEL_7:
  v6 = v2 + 8 * v7;
LABEL_8:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v8 = v5 + 8;
      v5 = v3;
      if (v8 != v3)
      {
        v5 = v8;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v9 = v2 + 8 * *(unsigned int *)(v2 - 4);
  else
    v9 = 0;
  while (v5 != v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    *(_DWORD *)(v10 + 24) += 2;
    this = (_QWORD *)WebCore::Node::invalidateStyle(v10, 4u, 0);
    if ((*(_BYTE *)(v10 + 71) & 1) != 0)
    {
      v13 = *(_QWORD *)(v10 + 32);
      if (!v13 || (*(_WORD *)(v13 + 28) & 8) == 0 || (*(_BYTE *)(v13 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v10);
        this = WebCore::invalidateForSiblingCombinators(ElementSibling, v15);
      }
    }
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        this = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    v11 = v3;
    if (v5 + 8 != v3)
    {
      v11 = v5 + 8;
      while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
      {
        v11 += 8;
        if (v11 == v3)
        {
          v11 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v11 != v6)
    {
      v5 = v11;
      if (!*(_QWORD *)(*(_QWORD *)v11 + 8))
      {
        while (1)
        {
          v12 = v5 + 8;
          v5 = v3;
          if (v12 != v3)
          {
            v5 = v12;
            while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
            {
              v5 += 8;
              if (v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*(_QWORD *)v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*((_DWORD *)v1 + 2);
  }
  return this;
}

_QWORD *WebCore::RadioButtonGroup::add(WebCore::RadioButtonGroup *this, WebCore::HTMLInputElement *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  result = (_QWORD *)WTF::WeakHashSet<WebCore::HTMLInputElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLInputElement>((uint64_t)this, a2, (uint64_t)v10);
  if (!v10[16])
    return result;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = *((_QWORD *)this + 2);
    if (v6)
      v7 = *(_QWORD *)(v6 + 8) != 0;
    else
      v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  if ((*((_BYTE *)a2 + 168) & 1) != 0)
    *((_QWORD *)this + 3) = ++v5;
  if ((*((_WORD *)a2 + 115) & 1) != 0)
  {
    result = (_QWORD *)WebCore::RadioButtonGroup::setCheckedButton((uint64_t)this, a2);
    v5 = *((_QWORD *)this + 3);
  }
  if (!v5)
  {
    if (v7)
      return result;
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(this);
  }
  v8 = *((_QWORD *)this + 2);
  if (!v8)
  {
    if (!v7)
      return (_QWORD *)WebCore::ValidatedFormListedElement::updateValidity((uint64_t)a2 + 112);
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(this);
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (v7 != (v9 != 0))
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(this);
  if (!v9)
    return (_QWORD *)WebCore::ValidatedFormListedElement::updateValidity((uint64_t)a2 + 112);
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLInputElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLInputElement>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  void *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_16HTMLTableElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, a2);
    v8 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a1 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v8;
  }
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = a2;
    *(_BYTE *)(v9 + 32) = 0;
    v11 = a2[2];
    a2[2] = v11 & 0xFFFF000000000000 | v9;
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v27 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v27)
        {
          v32 = v12;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v27));
          v12 = v32;
        }
        v28 = *(WTF **)(v12 + 16);
        if (v28)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          v31 = v12;
          WTF::fastFree(v28, v10);
          v12 = v31;
        }
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  v15 = a2[2] & 0xFFFFFFFFFFFFLL;
  do
    v16 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v16 + 1, (unsigned int *)v15));
  do
    v17 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v17 + 1, (unsigned int *)v15));
  v33 = (WTF *)v15;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a1, (uint64_t *)&v33, a3);
  v20 = v33;
  v33 = 0;
  if (!v20)
    goto LABEL_14;
  do
  {
    v21 = __ldaxr((unsigned int *)v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v20));
  if (v22)
  {
LABEL_14:
    if (!v15)
      return result;
    goto LABEL_15;
  }
  atomic_store(1u, (unsigned int *)v20);
  v29 = *((unsigned int *)v20 + 7);
  if ((_DWORD)v29)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v29));
  v30 = (WTF *)*((_QWORD *)v20 + 2);
  if (v30)
  {
    *((_QWORD *)v20 + 2) = 0;
    *((_DWORD *)v20 + 6) = 0;
    WTF::fastFree(v30, v19);
  }
  result = WTF::fastFree(v20, v19);
  if (v15)
  {
    do
    {
LABEL_15:
      v23 = __ldaxr((unsigned int *)v15);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v15));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v15);
      v25 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v25));
      v26 = *(WTF **)(v15 + 16);
      if (v26)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        WTF::fastFree(v26, v19);
      }
      return WTF::fastFree((WTF *)v15, v19);
    }
  }
  return result;
}

_QWORD *WebCore::RadioButtonGroup::updateValidityForAllButtons(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = this;
  v2 = *this;
  if (!*this)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = v2 + 8 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = v2 + 8 * v4;
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v7 = 0;
    v5 = *this;
    goto LABEL_7;
  }
  v13 = 8 * v4;
  v5 = *this;
  while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
  {
    v5 += 8;
    v13 -= 8;
    if (!v13)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_8;
  }
  v7 = *(unsigned int *)(v2 - 4);
LABEL_7:
  v6 = v2 + 8 * v7;
LABEL_8:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v8 = v5 + 8;
      v5 = v3;
      if (v8 != v3)
      {
        v5 = v8;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v9 = v2 + 8 * *(unsigned int *)(v2 - 4);
  else
    v9 = 0;
  while (v5 != v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    *(_DWORD *)(v10 + 24) += 2;
    this = (_QWORD *)WebCore::ValidatedFormListedElement::updateValidity(v10 + 112);
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        this = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    v11 = v3;
    if (v5 + 8 != v3)
    {
      v11 = v5 + 8;
      while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
      {
        v11 += 8;
        if (v11 == v3)
        {
          v11 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v11 != v6)
    {
      v5 = v11;
      if (!*(_QWORD *)(*(_QWORD *)v11 + 8))
      {
        while (1)
        {
          v12 = v5 + 8;
          v5 = v3;
          if (v12 != v3)
          {
            v5 = v12;
            while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
            {
              v5 += 8;
              if (v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*(_QWORD *)v5 + 8))
            goto LABEL_39;
        }
        v5 = v6;
      }
    }
LABEL_39:
    ++*((_DWORD *)v1 + 2);
  }
  return this;
}

uint64_t WebCore::RadioButtonGroup::remove(uint64_t this, WebCore::HTMLInputElement *a2)
{
  int v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  void *v15;
  uint64_t v17;
  _BOOL4 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Node *ElementSibling;
  WebCore::Element *v37;
  WTF *v38;

  v3 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v3 + 1;
  v4 = *((_QWORD *)a2 + 2);
  v5 = (void *)(v4 & 0xFFFFFFFFFFFFLL);
  if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 8);
    if (v6)
    {
      v7 = this;
      v8 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = ((unint64_t)v5 + ~(v4 << 32)) ^ (((unint64_t)v5 + ~(v4 << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        for (i = 1; ; ++i)
        {
          v15 = *(void **)(v8 + 8 * v13);
          if (!v15)
            return this;
          if (v15 != (void *)-1 && v15 == v5)
            break;
          v13 = (v13 + i) & v9;
        }
        if (*(_QWORD *)(this + 24))
        {
          v17 = *(_QWORD *)(this + 16);
          if (v17)
            v18 = *(_QWORD *)(v17 + 8) != 0;
          else
            v18 = 0;
        }
        else
        {
          v18 = 1;
        }
        v19 = v3 + 2;
        *(_DWORD *)(this + 8) = v19;
        if (v19 > *(_DWORD *)(this + 12))
        {
          this = (uint64_t)_ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_16HTMLTableElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this, v5);
          v20 = 0;
          *(_DWORD *)(v7 + 8) = 0;
          if (*(_QWORD *)v7)
          {
            v20 = *(_DWORD *)(*(_QWORD *)v7 - 12);
            if (v20 > 0x7FFFFFFE)
              v20 = 0x7FFFFFFF;
          }
          *(_DWORD *)(v7 + 12) = 2 * v20;
          v5 = (void *)(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL);
          if (!v5)
            goto LABEL_21;
          v6 = *(_QWORD *)((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) + 8);
        }
        if (v6)
          this = WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)v7, (WTF *)v5);
LABEL_21:
        if ((*((_BYTE *)a2 + 168) & 1) != 0)
          --*(_QWORD *)(v7 + 24);
        v21 = *(_QWORD *)(v7 + 16);
        if (v21 && *(_QWORD *)(v21 + 8))
        {
          this = WebCore::Node::invalidateStyle((uint64_t)a2, 4u, 0);
          if ((*((_BYTE *)a2 + 71) & 1) != 0)
          {
            v35 = *((_QWORD *)a2 + 4);
            if (!v35 || (*(_WORD *)(v35 + 28) & 8) == 0 || (*(_BYTE *)(v35 + 70) & 4) == 0)
            {
              ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)a2);
              this = (uint64_t)WebCore::invalidateForSiblingCombinators(ElementSibling, v37);
            }
          }
          v23 = *(_QWORD *)(v7 + 16);
          if (v23 && *(WebCore::HTMLInputElement **)(v23 + 8) == a2)
          {
            *(_QWORD *)(v7 + 16) = 0;
            do
            {
              v24 = __ldaxr((unsigned int *)v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, (unsigned int *)v23));
            if (!v25)
            {
              atomic_store(1u, (unsigned int *)v23);
              v38 = (WTF *)v23;
              v30 = *(unsigned int *)(v23 + 28);
              if ((_DWORD)v30)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v38 + 2), (WTF::StringImpl *)(*((_QWORD *)v38 + 2) + 32 * v30));
              v31 = (WTF *)*((_QWORD *)v38 + 2);
              if (v31)
              {
                *((_QWORD *)v38 + 2) = 0;
                *((_DWORD *)v38 + 6) = 0;
                WTF::fastFree(v31, v22);
              }
              WTF::fastFree(v38, v22);
            }
            this = (uint64_t)WebCore::RadioButtonGroup::setNeedsStyleRecalcForAllButtons((_QWORD *)v7);
          }
        }
        v26 = *(_QWORD *)v7;
        if (*(_QWORD *)v7 && *(_DWORD *)(v26 - 12))
        {
          v27 = *(unsigned int *)(v26 - 4);
          if ((_DWORD)v27)
          {
            v28 = 8 * v27;
            v29 = *(uint64_t **)v7;
            while ((unint64_t)(*v29 + 1) <= 1)
            {
              ++v29;
              v28 -= 8;
              if (!v28)
                goto LABEL_33;
            }
          }
          else
          {
            v29 = *(uint64_t **)v7;
          }
          v32 = (uint64_t *)(v26 + 8 * v27);
          if (v29 != v32)
          {
            v33 = *v29;
LABEL_51:
            if (*(_QWORD *)(v33 + 8))
            {
              if (*(_QWORD *)(v7 + 24))
              {
                v34 = *(_QWORD *)(v7 + 16);
                if (v34)
                {
                  if (v18 == (*(_QWORD *)(v34 + 8) != 0))
                    goto LABEL_33;
                }
                else if (!v18)
                {
                  return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)a2 + 112);
                }
              }
              else if (v18)
              {
                return this;
              }
              this = (uint64_t)WebCore::RadioButtonGroup::updateValidityForAllButtons((_QWORD *)v7);
            }
            else
            {
              while (++v29 != v32)
              {
                v33 = *v29;
                if ((unint64_t)(*v29 + 1) > 1)
                {
                  if (v29 != v32)
                    goto LABEL_51;
                  break;
                }
              }
            }
          }
        }
LABEL_33:
        if (v18)
          return this;
        return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)a2 + 112);
      }
    }
  }
  return this;
}

_QWORD *WebCore::RadioButtonGroups::RadioButtonGroups(_QWORD *this)
{
  *this = 0;
  return this;
}

void WebCore::RadioButtonGroups::~RadioButtonGroups(WebCore::RadioButtonGroups *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  WTF::StringImpl *v5;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (uint64_t **)(v2 + 8);
      do
      {
        if (*(v4 - 1) != (uint64_t *)-1)
        {
          std::unique_ptr<WebCore::RadioButtonGroup>::~unique_ptr[abi:sn180100](v4, a2);
          v5 = (WTF::StringImpl *)*(v4 - 1);
          *(v4 - 1) = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

uint64_t *WebCore::RadioButtonGroups::addButton(uint64_t *this, WebCore::HTMLInputElement *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WebCore::RadioButtonGroup *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20[3];

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 26);
  if (v3 || (v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8]) != 0)
  {
    if (*((_DWORD *)v3 + 1))
    {
      *(_DWORD *)v3 += 2;
      v19 = v3;
      WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::add<decltype(nullptr)>(this, (WTF::StringImpl *)&v19, (uint64_t)v20);
      v5 = v19;
      v6 = v20[0];
      v19 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
      v7 = *(WebCore::RadioButtonGroup **)(v6 + 8);
      if (!v7)
      {
        v7 = (WebCore::RadioButtonGroup *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        v9 = *(uint64_t **)(v6 + 8);
        *(_QWORD *)(v6 + 8) = v7;
        if (v9)
        {
          v10 = v9[2];
          v9[2] = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr((unsigned int *)v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, (unsigned int *)v10));
            if (!v12)
            {
              atomic_store(1u, (unsigned int *)v10);
              v15 = *(unsigned int *)(v10 + 28);
              if ((_DWORD)v15)
              {
                v18 = v10;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v15));
                v10 = v18;
              }
              v16 = *(WTF **)(v10 + 16);
              if (v16)
              {
                *(_QWORD *)(v10 + 16) = 0;
                *(_DWORD *)(v10 + 24) = 0;
                v17 = v10;
                WTF::fastFree(v16, v8);
                v10 = v17;
              }
              WTF::fastFree((WTF *)v10, v8);
            }
          }
          v13 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v9, v8);
          WTF::fastFree((WTF *)v13, v14);
          v7 = *(WebCore::RadioButtonGroup **)(v6 + 8);
        }
      }
      return WebCore::RadioButtonGroup::add(v7, a2);
    }
  }
  return this;
}

uint64_t *WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *(WTF::StringImpl **)a2;
  v11 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v13 = v11 & v8;
    v14 = (uint64_t *)(v6 + 16 * v13);
    v15 = (WTF::StringImpl *)*v14;
    if (*v14 != -1)
      break;
    v9 = (uint64_t *)(v6 + 16 * v13);
LABEL_10:
    v11 = i + v13;
  }
  if (!v15)
  {
    if (v9)
    {
      *v9 = 0;
      v9[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *(WTF::StringImpl **)a2;
      v14 = v9;
    }
    *(_QWORD *)a2 = 0;
    result = (uint64_t *)*v14;
    *v14 = (uint64_t)v10;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v16 = (uint64_t *)v14[1];
    v14[1] = 0;
    if (v16)
    {
      v17 = v16[2];
      v16[2] = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr((unsigned int *)v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, (unsigned int *)v17));
        if (!v19)
        {
          atomic_store(1u, (unsigned int *)v17);
          v32 = *(unsigned int *)(v17 + 28);
          if ((_DWORD)v32)
          {
            v35 = v17;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v32));
            v17 = v35;
          }
          v33 = *(WTF **)(v17 + 16);
          if (v33)
          {
            *(_QWORD *)(v17 + 16) = 0;
            *(_DWORD *)(v17 + 24) = 0;
            v34 = v17;
            WTF::fastFree(v33, a2);
            v17 = v34;
          }
          WTF::fastFree((WTF *)v17, a2);
        }
      }
      v20 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v16, a2);
      result = (uint64_t *)WTF::fastFree((WTF *)v20, v21);
    }
    v22 = *v4;
    if (*v4)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v27 = *v4;
    if (*v4)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_33;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_36:
        result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v4, v31, (WTF::StringImpl **)v14);
        v14 = result;
        v27 = *v4;
        if (*v4)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
        goto LABEL_38;
      }
LABEL_33:
      v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
      goto LABEL_36;
    }
LABEL_38:
    v26 = v27 + 16 * v30;
    v25 = 1;
    goto LABEL_39;
  }
  if (v15 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v6 - 4);
  v25 = 0;
  v26 = v6 + 16 * v24;
LABEL_39:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

uint64_t *WebCore::RadioButtonGroups::updateCheckedState(uint64_t *this, WebCore::HTMLInputElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)a2 + 26);
  v3 = v2;
  if (!v2)
  {
    v3 = *MEMORY[0x1E0CBF3B8];
    if (!*MEMORY[0x1E0CBF3B8])
      return this;
  }
  if (!*(_DWORD *)(v3 + 4))
    return this;
  v4 = *this;
  if (!*this)
    return this;
  if (!v2)
    v2 = *MEMORY[0x1E0CBF3B8];
  v5 = 0;
  for (i = *(_DWORD *)(v2 + 16) >> 8; ; i = ++v5 + v7)
  {
    v7 = i & *(_DWORD *)(v4 - 8);
    v8 = *(_QWORD *)(v4 + 16 * v7);
    if (v8 != -1)
    {
      if (!v8)
        return this;
      if (v8 == v2)
        break;
    }
  }
  v9 = *(_QWORD **)(v4 + 16 * v7 + 8);
  if (!v9)
    return this;
  if (v9[3])
  {
    v10 = v9[2];
    if (v10)
      v11 = *(_QWORD *)(v10 + 8) != 0;
    else
      v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  if ((*((_WORD *)a2 + 115) & 1) != 0)
  {
    v13 = *(_QWORD *)(v4 + 16 * v7 + 8);
    goto LABEL_21;
  }
  v12 = v9[2];
  if (v12 && *(WebCore::HTMLInputElement **)(v12 + 8) == a2)
  {
    v13 = *(_QWORD *)(v4 + 16 * v7 + 8);
    a2 = 0;
LABEL_21:
    this = (uint64_t *)WebCore::RadioButtonGroup::setCheckedButton(v13, a2);
  }
  if (!v9[3])
  {
    if (v11)
      return this;
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(v9);
  }
  v14 = v9[2];
  if (!v14)
  {
    if (!v11)
      return this;
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(v9);
  }
  if (v11 != (*(_QWORD *)(v14 + 8) != 0))
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(v9);
  return this;
}

uint64_t *WebCore::RadioButtonGroups::requiredStateChanged(uint64_t *this, WebCore::HTMLInputElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)a2 + 26);
  v3 = v2;
  if (!v2)
  {
    v3 = *MEMORY[0x1E0CBF3B8];
    if (!*MEMORY[0x1E0CBF3B8])
      return this;
  }
  if (!*(_DWORD *)(v3 + 4))
    return this;
  v4 = *this;
  if (!*this)
    return this;
  if (!v2)
    v2 = *MEMORY[0x1E0CBF3B8];
  v5 = 0;
  for (i = *(_DWORD *)(v2 + 16) >> 8; ; i = ++v5 + v7)
  {
    v7 = i & *(_DWORD *)(v4 - 8);
    v8 = *(_QWORD *)(v4 + 16 * v7);
    if (v8 != -1)
    {
      if (!v8)
        return this;
      if (v8 == v2)
        break;
    }
  }
  this = *(uint64_t **)(v4 + 16 * v7 + 8);
  if (!this)
    return this;
  v9 = this[3];
  if (v9)
  {
    v10 = this[2];
    if (v10)
      LODWORD(v10) = *(_QWORD *)(v10 + 8) != 0;
  }
  else
  {
    LODWORD(v10) = 1;
  }
  if ((*((_BYTE *)a2 + 168) & 1) != 0)
    v11 = v9 + 1;
  else
    v11 = v9 - 1;
  this[3] = v11;
  if (!v11)
  {
    if ((v10 & 1) != 0)
      return this;
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(this);
  }
  v12 = this[2];
  if (!v12)
  {
    if ((v10 & 1) == 0)
      return this;
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(this);
  }
  if ((_DWORD)v10 != (*(_QWORD *)(v12 + 8) != 0))
    return WebCore::RadioButtonGroup::updateValidityForAllButtons(this);
  return this;
}

WTF::StringImpl *WebCore::RadioButtonGroups::checkedButtonForGroup@<X0>(WebCore::RadioButtonGroups *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v6;
  int v7;
  unsigned int i;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;

  result = *a2;
  if (*a2)
    *(_DWORD *)result += 2;
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v7 = 0;
    for (i = *((_DWORD *)result + 4) >> 8; ; i = v7 + v9)
    {
      v9 = i & *(_DWORD *)(v6 - 8);
      v10 = *(WTF::StringImpl **)(v6 + 16 * v9);
      if (v10 != (WTF::StringImpl *)-1)
      {
        if (!v10)
          goto LABEL_9;
        if (v10 == result)
          break;
      }
      ++v7;
    }
    v11 = *(_QWORD *)(v6 + 16 * v9 + 8);
    if (!result)
      goto LABEL_14;
  }
  else
  {
LABEL_9:
    v11 = 0;
    if (!result)
      goto LABEL_14;
  }
  if (*(_DWORD *)result == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    if (v11)
      goto LABEL_15;
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  *(_DWORD *)result -= 2;
LABEL_14:
  if (!v11)
    goto LABEL_19;
LABEL_15:
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v12 = *(_QWORD *)(v12 + 8);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
  }
LABEL_20:
  *a3 = v12;
  return result;
}

uint64_t WebCore::RadioButtonGroups::hasCheckedButton(WebCore::RadioButtonGroups *this, const WebCore::HTMLInputElement *a2)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int i;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 26);
  if (!v3)
  {
    v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    if (!*MEMORY[0x1E0CBF3B8])
      return *((_WORD *)a2 + 115) & 1;
  }
  if (!*((_DWORD *)v3 + 1))
    return *((_WORD *)a2 + 115) & 1;
  v4 = *(_DWORD *)v3;
  *(_DWORD *)v3 += 2;
  v5 = *(_QWORD *)this;
  if (v5)
  {
    v6 = 0;
    for (i = *((_DWORD *)v3 + 4) >> 8; ; i = v6 + v8)
    {
      v8 = i & *(_DWORD *)(v5 - 8);
      v9 = *(WTF::StringImpl **)(v5 + 16 * v8);
      if (v9 != (WTF::StringImpl *)-1)
      {
        if (!v9)
          goto LABEL_9;
        if (v9 == v3)
          break;
      }
      ++v6;
    }
    v10 = *(_QWORD *)(v5 + 16 * v8 + 8);
    if (!v4)
    {
LABEL_17:
      WTF::StringImpl::destroy(v3, a2);
      if (!v10)
        return 0;
      goto LABEL_11;
    }
  }
  else
  {
LABEL_9:
    v10 = 0;
    if (!v4)
      goto LABEL_17;
  }
  *(_DWORD *)v3 = v4;
  if (!v10)
    return 0;
LABEL_11:
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 0;
  result = *(_QWORD *)(v11 + 8);
  if (result)
  {
    v13 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v13 + 2;
    if (v13)
    {
      *(_DWORD *)(result + 24) = v13;
    }
    else if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::RadioButtonGroups::isInRequiredGroup(WebCore::RadioButtonGroups *this, WebCore::HTMLInputElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int j;
  uint64_t v19;

  v2 = *((_QWORD *)a2 + 26);
  v3 = v2;
  if (v2 || (v3 = *MEMORY[0x1E0CBF3B8]) != 0)
  {
    if (*(_DWORD *)(v3 + 4))
    {
      v4 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        if (!v2)
          v2 = *MEMORY[0x1E0CBF3B8];
        v5 = 0;
        for (i = *(_DWORD *)(v2 + 16) >> 8; ; i = v5 + v7)
        {
          v7 = i & *(_DWORD *)(v4 - 8);
          v8 = *(_QWORD *)(v4 + 16 * v7);
          if (v8 != -1)
          {
            if (!v8)
              return 0;
            if (v8 == v2)
              break;
          }
          ++v5;
        }
        v9 = *(uint64_t **)(v4 + 16 * v7 + 8);
        if (v9)
        {
          if (v9[3])
          {
            ++*((_DWORD *)v9 + 2);
            v10 = *((_QWORD *)a2 + 2);
            v11 = v10 & 0xFFFFFFFFFFFFLL;
            if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
            {
              if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 8))
              {
                v12 = *v9;
                if (v12)
                {
                  v13 = *(_DWORD *)(v12 - 8);
                  v14 = (v11 + ~(v10 << 32)) ^ ((unint64_t)(v11 + ~(v10 << 32)) >> 22);
                  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
                  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
                  v17 = v13 & ((v16 >> 31) ^ v16);
                  for (j = 1; ; ++j)
                  {
                    v19 = *(_QWORD *)(v12 + 8 * v17);
                    if (!v19)
                      break;
                    if (v19 != -1 && v19 == v11)
                      return 1;
                    v17 = (v17 + j) & v13;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::RadioButtonGroups::removeButton(uint64_t this, WebCore::HTMLInputElement *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)this;
  v4 = *((_QWORD *)a2 + 26);
  v5 = v4;
  if ((v4 || (v5 = *MEMORY[0x1E0CBF3B8]) != 0) && *(_DWORD *)(v5 + 4) && *(_QWORD *)this)
  {
    if (v4)
      v6 = (char *)a2 + 208;
    else
      v6 = (char *)MEMORY[0x1E0CBF3B8];
    this = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>((uint64_t *)this, (uint64_t)v6);
    v7 = *v3;
    if (this)
    {
      v8 = this;
      if (!v7)
      {
LABEL_10:
        WebCore::RadioButtonGroup::remove(*(_QWORD *)(v8 + 8), a2);
        this = WebCore::RadioButtonGroup::isEmpty(*(WebCore::RadioButtonGroup **)(v8 + 8));
        if ((_DWORD)this)
          return WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::remove(v3, (uint64_t **)v8);
        return this;
      }
      v9 = *(unsigned int *)(v7 - 4);
    }
    else
    {
      if (!v7)
        return this;
      v9 = *(unsigned int *)(v7 - 4);
      v8 = v7 + 16 * v9;
    }
    if (v8 == v7 + 16 * v9)
      return this;
    goto LABEL_10;
  }
  return this;
}

BOOL WebCore::RadioButtonGroup::isEmpty(WebCore::RadioButtonGroup *this)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD **)this;
  if (!*(_QWORD *)this || !*((_DWORD *)v1 - 3))
    return 1;
  v3 = *((unsigned int *)v1 - 1);
  v4 = &v1[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*v1 + 1) <= 1)
    {
      ++v1;
      v5 -= 8;
      if (!v5)
        goto LABEL_15;
    }
  }
  if (v1 != v4)
  {
    v6 = *v1;
LABEL_11:
    if (*(_QWORD *)(v6 + 8))
      return v1 == v4;
    while (++v1 != v4)
    {
      v6 = *v1;
      if ((unint64_t)(*v1 + 1) > 1)
      {
        if (v1 != v4)
          goto LABEL_11;
        break;
      }
    }
  }
LABEL_15:
  v1 = v4;
  return v1 == v4;
}

uint64_t WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  if (*a1)
  {
    v4 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((uint64_t **)v4 != a2)
      goto LABEL_4;
    return 0;
  }
  if (!a2)
    return 0;
  v4 = 0;
LABEL_4:
  if ((uint64_t **)v4 != a2)
  {
    v5 = (WTF::StringImpl *)*a2;
    *a2 = (uint64_t *)-1;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    std::unique_ptr<WebCore::RadioButtonGroup>::~unique_ptr[abi:sn180100](a2 + 1, a2);
    ++*(_DWORD *)(*a1 - 16);
    v6 = *a1;
    if (*a1)
      v7 = *(_DWORD *)(v6 - 12) - 1;
    else
      v7 = -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *a1;
    if (*a1)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v10 >> 1, 0);
    }
  }
  return 1;
}

WebCore::Range *WebCore::Range::create@<X0>(WebCore::Range *this@<X0>, WebCore::Range **a2@<X8>)
{
  WebCore::Range *v5;
  WebCore::Range *result;

  v5 = (WebCore::Range *)bmalloc::api::isoAllocate();
  result = WebCore::Range::Range(v5, this);
  *a2 = result;
  return result;
}

uint64_t WebCore::Range::commonAncestorContainer(WebCore::Range *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v1 = *((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 7);
  if (v1 == v2)
    return v1;
  v3 = 0;
  v4 = *((_QWORD *)this + 4);
  do
  {
    v4 = *(_QWORD *)(v4 + 32);
    ++v3;
  }
  while (v4);
  v5 = 0;
  v6 = v3 - 1;
  v7 = *((_QWORD *)this + 7);
  do
  {
    v7 = *(_QWORD *)(v7 + 32);
    ++v5;
  }
  while (v7);
  v8 = v5 - v3;
  v9 = v3 - v5;
  if (v6 >= v5 - 1)
    result = *((_QWORD *)this + 4);
  else
    result = *((_QWORD *)this + 7);
  if (v6 < v5 - 1)
  {
    v11 = v8;
  }
  else
  {
    v1 = v2;
    v11 = v9;
  }
  for (; v11; --v11)
    result = *(_QWORD *)(result + 32);
  if (result == v1)
    return v1;
  do
  {
    result = *(_QWORD *)(result + 32);
    v1 = *(_QWORD *)(v1 + 32);
  }
  while (result != v1);
  return result;
}

uint64_t WebCore::Range::startContainer(WebCore::Range *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::Range::endContainer(WebCore::Range *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t WebCore::Range::updateAssociatedSelection(uint64_t this)
{
  uint64_t v1;
  WebCore::FrameSelection *v2;
  int v3;
  uint64_t v4;
  WebCore::FrameSelection *v5;

  if (*(_BYTE *)(this + 80))
  {
    v1 = *(_QWORD *)(this + 24);
    *(_DWORD *)(v1 + 24) += 2;
    v4 = v1;
    WebCore::Document::checkedSelection(v1, &v5);
    WebCore::FrameSelection::updateFromAssociatedLiveRange(v5);
    v2 = v5;
    v5 = 0;
    if (!v2)
      return (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v4);
    v3 = *((_DWORD *)v2 + 7);
    if (v3)
    {
      *((_DWORD *)v2 + 7) = v3 - 1;
      return (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v4);
    }
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::Range::setStart@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  int v16;
  unsigned __int8 v17;
  BOOL v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  int v27;
  WebCore::Node *v28;
  unsigned int v29;
  BOOL v31;
  WebCore::Node *v32;
  int v33;
  WebCore::Node *v34;
  unsigned int v35;
  _QWORD v36[2];
  int v37;

  v4 = a3;
  v7 = *a2;
  v8 = *(unsigned __int16 *)(*a2 + 28);
  v9 = v8 >> 12;
  if ((v8 >> 12) - 3 < 2)
  {
LABEL_2:
    v10 = *(_QWORD *)(v7 + 80);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 4);
    if (v10 >= a3)
      goto LABEL_5;
LABEL_43:
    v24 = 0;
    LOBYTE(v36[0]) = 0;
LABEL_44:
    v22 = 1;
    v37 = 1;
    v36[1] = 0;
    *(_BYTE *)a4 = v24;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return ((uint64_t (*)(WebCore::Node **, _QWORD *))off_1E33A7228[v22])(&v34, v36);
  }
  if (v9 > 0xB)
  {
LABEL_46:
    v24 = 20;
    LOBYTE(v36[0]) = 20;
    goto LABEL_44;
  }
  if (((1 << v9) & 0xA06) == 0)
  {
    if (((1 << v9) & 0x180) != 0)
      goto LABEL_2;
    goto LABEL_46;
  }
  if (!a3)
  {
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  if ((v8 & 4) == 0)
    goto LABEL_43;
  v11 = *(_QWORD *)(v7 + 80);
  if (a3 != 1 && v11)
  {
    v29 = a3 - 2;
    do
    {
      v11 = *(_QWORD *)(v11 + 56);
      v31 = v29-- != 0;
    }
    while (v11 && v31);
  }
  if (!v11)
    goto LABEL_43;
  *(_DWORD *)(v11 + 24) += 2;
LABEL_6:
  v37 = 0;
  *a2 = 0;
  v12 = *(_QWORD *)(a1 + 32);
  v36[0] = 0;
  *(_QWORD *)(a1 + 32) = v7;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  *(_DWORD *)(a1 + 40) = v4;
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
        v4 = *(_DWORD *)(a1 + 40);
      }
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  v14 = *(WebCore::Node **)(a1 + 32);
  *((_DWORD *)v14 + 6) += 2;
  v34 = v14;
  v35 = v4;
  v15 = *(WebCore::Node **)(a1 + 56);
  *((_DWORD *)v15 + 6) += 2;
  v16 = *(_DWORD *)(a1 + 64);
  v32 = v15;
  v33 = v16;
  v17 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v34, (uint64_t)&v32);
  v19 = v17 != 129 && (char)v17 < 1;
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  if (!v19)
    WebCore::RangeBoundaryPoint::operator=((uint64_t *)(a1 + 56), (uint64_t *)(a1 + 32));
  if (!*(_BYTE *)(a1 + 80))
    goto LABEL_27;
  v25 = *(WebCore::Node **)(a1 + 24);
  *((_DWORD *)v25 + 6) += 2;
  v32 = v25;
  WebCore::Document::checkedSelection((uint64_t)v25, &v34);
  WebCore::FrameSelection::updateFromAssociatedLiveRange(v34);
  v26 = v34;
  v34 = 0;
  if (!v26)
  {
LABEL_50:
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v32);
LABEL_27:
    WebCore::Range::updateDocument((WebCore::Range *)a1);
    if (*(_BYTE *)(a1 + 82))
    {
      *(_BYTE *)(a1 + 81) = 1;
      v28 = *(WebCore::Node **)(a1 + 24);
      *((_DWORD *)v28 + 6) += 2;
      v34 = v28;
      WebCore::Document::scheduleRenderingUpdate(v28, 0);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v34);
    }
    v22 = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return ((uint64_t (*)(WebCore::Node **, _QWORD *))off_1E33A7228[v22])(&v34, v36);
  }
  v27 = *((_DWORD *)v26 + 7);
  if (v27)
  {
    *((_DWORD *)v26 + 7) = v27 - 1;
    goto LABEL_50;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Range::checkNodeOffsetPair@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v10;

  v3 = *(unsigned __int16 *)(this + 28);
  v4 = v3 >> 12;
  if ((v3 >> 12) - 3 < 2)
  {
LABEL_2:
    v5 = *(_QWORD *)(this + 80);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 4);
    if (v5 >= a2)
      goto LABEL_5;
    goto LABEL_11;
  }
  if (v4 > 0xB)
  {
LABEL_14:
    *(_BYTE *)a3 = 20;
    goto LABEL_12;
  }
  if (((1 << v4) & 0xA06) == 0)
  {
    if (((1 << v4) & 0x180) != 0)
      goto LABEL_2;
    goto LABEL_14;
  }
  if ((_DWORD)a2)
  {
    if ((v3 & 4) != 0)
    {
      v7 = *(_QWORD *)(this + 80);
      if ((_DWORD)a2 != 1 && v7)
      {
        v8 = (_DWORD)a2 - 2;
        do
        {
          v7 = *(_QWORD *)(v7 + 56);
          v10 = v8-- != 0;
        }
        while (v7 && v10);
      }
      if (v7)
      {
        v6 = 0;
        *(_DWORD *)(v7 + 24) += 2;
        *(_QWORD *)a3 = v7;
        goto LABEL_6;
      }
    }
LABEL_11:
    *(_BYTE *)a3 = 0;
LABEL_12:
    *(_QWORD *)(a3 + 8) = 0;
    v6 = 1;
    goto LABEL_6;
  }
LABEL_5:
  v6 = 0;
  *(_QWORD *)a3 = 0;
LABEL_6:
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

unsigned int *WebCore::RangeBoundaryPoint::set(uint64_t *a1, uint64_t *a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;

  v7 = *a2;
  *a2 = 0;
  v8 = *a1;
  *a1 = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  *((_DWORD *)a1 + 2) = a3;
  v9 = *a4;
  *a4 = 0;
  result = (unsigned int *)a1[2];
  a1[2] = v9;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::RangeBoundaryPoint::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(*a2 + 24) + 2;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::Range::setEnd@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  int v15;
  WebCore::Node *v16;
  unsigned __int8 v17;
  BOOL v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  int v27;
  WebCore::Node *v28;
  unsigned int v29;
  BOOL v31;
  WebCore::Node *v32;
  unsigned int v33;
  WebCore::Node *v34;
  int v35;
  _QWORD v36[2];
  int v37;

  v4 = a3;
  v7 = *a2;
  v8 = *(unsigned __int16 *)(*a2 + 28);
  v9 = v8 >> 12;
  if ((v8 >> 12) - 3 < 2)
  {
LABEL_2:
    v10 = *(_QWORD *)(v7 + 80);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 4);
    if (v10 >= a3)
      goto LABEL_5;
LABEL_43:
    v24 = 0;
    LOBYTE(v36[0]) = 0;
LABEL_44:
    v22 = 1;
    v37 = 1;
    v36[1] = 0;
    *(_BYTE *)a4 = v24;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return ((uint64_t (*)(WebCore::Node **, _QWORD *))off_1E33A7228[v22])(&v34, v36);
  }
  if (v9 > 0xB)
  {
LABEL_46:
    v24 = 20;
    LOBYTE(v36[0]) = 20;
    goto LABEL_44;
  }
  if (((1 << v9) & 0xA06) == 0)
  {
    if (((1 << v9) & 0x180) != 0)
      goto LABEL_2;
    goto LABEL_46;
  }
  if (!a3)
  {
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  if ((v8 & 4) == 0)
    goto LABEL_43;
  v11 = *(_QWORD *)(v7 + 80);
  if (a3 != 1 && v11)
  {
    v29 = a3 - 2;
    do
    {
      v11 = *(_QWORD *)(v11 + 56);
      v31 = v29-- != 0;
    }
    while (v11 && v31);
  }
  if (!v11)
    goto LABEL_43;
  *(_DWORD *)(v11 + 24) += 2;
LABEL_6:
  v37 = 0;
  *a2 = 0;
  v12 = *(_QWORD *)(a1 + 56);
  v36[0] = 0;
  *(_QWORD *)(a1 + 56) = v7;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  *(_DWORD *)(a1 + 64) = v4;
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
        v4 = *(_DWORD *)(a1 + 64);
      }
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  v14 = *(WebCore::Node **)(a1 + 32);
  *((_DWORD *)v14 + 6) += 2;
  v15 = *(_DWORD *)(a1 + 40);
  v34 = v14;
  v35 = v15;
  v16 = *(WebCore::Node **)(a1 + 56);
  *((_DWORD *)v16 + 6) += 2;
  v32 = v16;
  v33 = v4;
  v17 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v34, (uint64_t)&v32);
  v19 = v17 != 129 && (char)v17 < 1;
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  if (!v19)
    WebCore::RangeBoundaryPoint::operator=((uint64_t *)(a1 + 32), (uint64_t *)(a1 + 56));
  if (!*(_BYTE *)(a1 + 80))
    goto LABEL_27;
  v25 = *(WebCore::Node **)(a1 + 24);
  *((_DWORD *)v25 + 6) += 2;
  v32 = v25;
  WebCore::Document::checkedSelection((uint64_t)v25, &v34);
  WebCore::FrameSelection::updateFromAssociatedLiveRange(v34);
  v26 = v34;
  v34 = 0;
  if (!v26)
  {
LABEL_50:
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v32);
LABEL_27:
    WebCore::Range::updateDocument((WebCore::Range *)a1);
    if (*(_BYTE *)(a1 + 82))
    {
      *(_BYTE *)(a1 + 81) = 1;
      v28 = *(WebCore::Node **)(a1 + 24);
      *((_DWORD *)v28 + 6) += 2;
      v34 = v28;
      WebCore::Document::scheduleRenderingUpdate(v28, 0);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v34);
    }
    v22 = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return ((uint64_t (*)(WebCore::Node **, _QWORD *))off_1E33A7228[v22])(&v34, v36);
  }
  v27 = *((_DWORD *)v26 + 7);
  if (v27)
  {
    *((_DWORD *)v26 + 7) = v27 - 1;
    goto LABEL_50;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Range::collapse(WebCore::Range *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a2)
  {
    v3 = *((_QWORD *)this + 4);
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    *((_DWORD *)this + 16) = *((_DWORD *)this + 10);
    v5 = *((_QWORD *)this + 6);
    if (v5)
      *(_DWORD *)(v5 + 24) += 2;
    v6 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v5;
    if (!v6)
      return WebCore::Range::updateAssociatedSelection((uint64_t)this);
LABEL_15:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    return WebCore::Range::updateAssociatedSelection((uint64_t)this);
  }
  v7 = *((_QWORD *)this + 7);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 10) = *((_DWORD *)this + 16);
  v9 = *((_QWORD *)this + 9);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v9;
  if (v6)
    goto LABEL_15;
  return WebCore::Range::updateAssociatedSelection((uint64_t)this);
}

unsigned int *WebCore::Range::isPointInRange@<X0>(WebCore::Range *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  WebCore::Node *v5;
  unsigned int *result;
  void *v9;
  uint64_t v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  int v13;
  WebCore::Node *v14;
  int v15;
  unsigned __int8 v16;
  void *v17;
  BOOL v18;
  unsigned __int8 v19;
  WebCore::Node *v21;
  WebCore::Node *v22;
  uint64_t v23;
  WebCore::Node *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  int v29;
  WebCore::Node *v30;
  uint64_t v31;
  WebCore::Node *v32;
  int v33;

  v4 = (int)a3;
  v5 = a2;
  result = (unsigned int *)WebCore::Range::checkNodeOffsetPair((uint64_t)a2, a3, (uint64_t)&v30);
  v10 = v32;
  if ((_DWORD)v32)
  {
    if ((*((_BYTE *)v5 + 22) & 0x18) != 0)
    {
      v11 = (WebCore::Node *)**((_QWORD **)v5 + 5);
    }
    else
    {
      do
      {
        v11 = v5;
        v5 = (WebCore::Node *)*((_QWORD *)v5 + 4);
      }
      while (v5);
    }
    v23 = *((_QWORD *)this + 4);
    if ((*(_BYTE *)(v23 + 22) & 0x18) != 0)
    {
      v24 = **(WebCore::Node ***)(v23 + 40);
    }
    else
    {
      do
      {
        v24 = (WebCore::Node *)v23;
        v23 = *(_QWORD *)(v23 + 32);
      }
      while (v23);
    }
    if (v11 == v24)
    {
      if ((_DWORD)v32 != 1)
      {
        v26 = std::__throw_bad_variant_access[abi:sn180100]();
        return (unsigned int *)WebCore::makeSimpleRange(v26, v27);
      }
      v25 = v31;
      v31 = 0;
      *(_BYTE *)a4 = (_BYTE)v30;
      *(_QWORD *)(a4 + 8) = v25;
      *(_DWORD *)(a4 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if ((_DWORD)v10 == -1)
        return result;
    }
    return (unsigned int *)((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33A7228[v10])(&v28, &v30);
  }
  else
  {
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30, v9);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    v12 = (WebCore::Node *)*((_QWORD *)this + 4);
    *((_DWORD *)v12 + 6) += 2;
    v13 = *((_DWORD *)this + 10);
    v14 = (WebCore::Node *)*((_QWORD *)this + 7);
    *((_DWORD *)v14 + 6) += 2;
    v15 = *((_DWORD *)this + 16);
    v30 = v12;
    LODWORD(v31) = v13;
    v32 = v14;
    v33 = v15;
    *((_DWORD *)v5 + 6) += 2;
    v28 = v5;
    v29 = v4;
    v16 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v30, (uint64_t)&v28);
    v18 = 0;
    if (v16 != 129 && (char)v16 <= 0)
    {
      v19 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v28, (uint64_t)&v32);
      v18 = v19 != 129 && (char)v19 < 1;
    }
    *(_BYTE *)a4 = v18;
    *(_DWORD *)(a4 + 16) = 0;
    v21 = v28;
    v28 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v17);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    v22 = v32;
    v32 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v17);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    result = (unsigned int *)v30;
    v30 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v17);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::makeSimpleRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(this + 32);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_DWORD *)(this + 40);
  v5 = *(_QWORD *)(this + 56);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_DWORD *)(this + 64);
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = v6;
  return this;
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;

  if (this)
  {
    v3 = *(_QWORD *)(this + 32);
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *(_DWORD *)(this + 40);
    v5 = *(_QWORD *)(this + 56);
    *(_DWORD *)(v5 + 24) += 2;
    v6 = *(_DWORD *)(this + 64);
    *(_QWORD *)a2 = v3;
    *(_DWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 24) = v6;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v7;
  return this;
}

uint64_t WebCore::Range::comparePoint@<X0>(WebCore::Range *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  WebCore::Node *v5;
  uint64_t result;
  void *v9;
  uint64_t v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  int v13;
  WebCore::Node *v14;
  int v15;
  void *v16;
  int v17;
  unsigned __int8 v18;
  WebCore::Node *v20;
  WebCore::Node *v21;
  __int16 v22;
  uint64_t v23;
  WebCore::Node *v24;
  uint64_t v25;
  WebCore::Range *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  uint64_t v29;
  WebCore::Node *v30;
  int v31;
  WebCore::Node *v32;
  int v33;

  v4 = (int)a3;
  v5 = a2;
  result = WebCore::Range::checkNodeOffsetPair((uint64_t)a2, a3, (uint64_t)&v28);
  v10 = v30;
  if (!(_DWORD)v30)
  {
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28, v9);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    *((_DWORD *)v5 + 6) += 2;
    v32 = v5;
    v33 = v4;
    v12 = (WebCore::Node *)*((_QWORD *)this + 4);
    *((_DWORD *)v12 + 6) += 2;
    v13 = *((_DWORD *)this + 10);
    v14 = (WebCore::Node *)*((_QWORD *)this + 7);
    *((_DWORD *)v14 + 6) += 2;
    v15 = *((_DWORD *)this + 16);
    v28 = v12;
    LODWORD(v29) = v13;
    v30 = v14;
    v31 = v15;
    v17 = (char)WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v32, (uint64_t)&v28);
    if (v17 >= 1)
    {
      v18 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v32, (uint64_t)&v30);
      if ((v18 & 0x80u) == 0 || v18 == 129)
        LOBYTE(v17) = v18;
      else
        LOBYTE(v17) = 0;
    }
    v20 = v30;
    v30 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, v16);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    v21 = v28;
    v28 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v16);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    result = (uint64_t)v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v16);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (v17 == 129 || (v17 & 0x80) == 0)
    {
      if (!(_BYTE)v17)
      {
        *(_WORD *)a4 = 0;
        goto LABEL_43;
      }
      if ((char)v17 < 1)
      {
        *(_BYTE *)a4 = 2;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 1;
        return result;
      }
      v22 = 1;
    }
    else
    {
      v22 = -1;
    }
    *(_WORD *)a4 = v22;
LABEL_43:
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if ((*((_BYTE *)v5 + 22) & 0x18) != 0)
  {
    v11 = (WebCore::Node *)**((_QWORD **)v5 + 5);
  }
  else
  {
    do
    {
      v11 = v5;
      v5 = (WebCore::Node *)*((_QWORD *)v5 + 4);
    }
    while (v5);
  }
  v23 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v23 + 22) & 0x18) != 0)
  {
    v24 = **(WebCore::Node ***)(v23 + 40);
  }
  else
  {
    do
    {
      v24 = (WebCore::Node *)v23;
      v23 = *(_QWORD *)(v23 + 32);
    }
    while (v23);
  }
  if (v11 == v24)
  {
    if ((_DWORD)v30 != 1)
    {
      v26 = (WebCore::Range *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::Range::compareNode(v26, v27);
    }
    v25 = v29;
    v29 = 0;
    *(_BYTE *)a4 = (_BYTE)v28;
    *(_QWORD *)(a4 + 8) = v25;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33A7228[v10])(&v32, &v28);
  }
  *(_BYTE *)a4 = 2;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 1;
  if ((_DWORD)v10 != -1)
    return ((uint64_t (*)(WebCore::Node **, WebCore::Node **))off_1E33A7228[v10])(&v32, &v28);
  return result;
}

unsigned int *WebCore::Range::compareNode@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  WebCore::Node *v9;
  unsigned int v10;
  void *v11;
  char v12;
  WebCore::Node *v13;
  unsigned int v14;
  char v15;
  char v16;
  WebCore::Node *v17;
  char v18;
  WebCore::Node *v19;
  unsigned int v20;
  WebCore::Node *v21;
  int v22;
  WebCore::Node *v23;
  int v24;
  char v25;

  if ((*((_BYTE *)a2 + 22) & 8) == 0 || (v4 = this, *(_QWORD *)(*((_QWORD *)a2 + 5) + 8) != *((_QWORD *)this + 3)))
  {
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return this;
  }
  this = (unsigned int *)*((_QWORD *)a2 + 4);
  if (this)
  {
    v5 = this[6];
    v6 = *((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = 0;
      do
      {
        ++v7;
        v6 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    this[6] = v5 + 6;
    v21 = (WebCore::Node *)this;
    v22 = v7;
    v23 = (WebCore::Node *)this;
    v24 = v7 + 1;
    v25 = 1;
    v8 = v5 + 4;
    if (v8)
    {
      this[6] = v8;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
    v9 = (WebCore::Node *)*((_QWORD *)v4 + 4);
    *((_DWORD *)v9 + 6) += 2;
    v10 = v4[10];
    v19 = v9;
    v20 = v10;
    v12 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v21, (uint64_t)&v19);
    this = (unsigned int *)v19;
    v19 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, v11);
      }
      else
      {
        this[6] -= 2;
      }
    }
    if (!v25)
    {
      __break(1u);
      return this;
    }
    v13 = (WebCore::Node *)*((_QWORD *)v4 + 7);
    *((_DWORD *)v13 + 6) += 2;
    v14 = v4[16];
    v19 = v13;
    v20 = v14;
    v15 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v23, (uint64_t)&v19);
    this = (unsigned int *)v19;
    v19 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
    if ((v12 & 0x80000000) == 0 && v15 != -127 && v15 <= 0)
    {
      v16 = 3;
      goto LABEL_27;
    }
    if (v12 != -127 && v12 <= 0)
    {
      if (v15 < 0)
      {
        *(_BYTE *)a3 = 0;
        goto LABEL_28;
      }
      v16 = 2;
LABEL_27:
      *(_BYTE *)a3 = v16;
LABEL_28:
      *(_DWORD *)(a3 + 16) = 0;
      goto LABEL_29;
    }
    if ((v15 & 0x80000000) == 0)
    {
      v16 = 1;
      goto LABEL_27;
    }
    v18 = 2;
  }
  else
  {
    LOBYTE(v21) = 0;
    v25 = 0;
    v18 = 5;
  }
  *(_BYTE *)a3 = v18;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_29:
  if (v25)
  {
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, a2);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    this = (unsigned int *)v21;
    v21 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
  }
  return this;
}

_DWORD *WebCore::Range::compareBoundaryPoints@<X0>(_DWORD *this@<X0>, const WebCore::Range *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  _DWORD *v5;
  char v6;
  _DWORD *v7;
  WebCore::Node *v8;
  int v9;
  WebCore::Node *v10;
  int v11;
  void *v12;
  char v13;
  WebCore::Node *v14;
  int v15;
  __int16 v16;
  WebCore::Node *v17;
  int v18;
  WebCore::Node *v19;
  int v20;

  switch(a3)
  {
    case 0:
      v5 = this + 8;
      goto LABEL_5;
    case 1:
      v5 = this + 14;
LABEL_5:
      v7 = (_DWORD *)((char *)a2 + 32);
      goto LABEL_9;
    case 2:
      v5 = this + 14;
      goto LABEL_8;
    case 3:
      v5 = this + 8;
LABEL_8:
      v7 = (_DWORD *)((char *)a2 + 56);
LABEL_9:
      v8 = *(WebCore::Node **)v5;
      *((_DWORD *)v8 + 6) = *(_DWORD *)(*(_QWORD *)v5 + 24) + 2;
      v9 = v5[2];
      v19 = v8;
      v20 = v9;
      v10 = *(WebCore::Node **)v7;
      *((_DWORD *)v10 + 6) = *(_DWORD *)(*(_QWORD *)v7 + 24) + 2;
      v11 = v7[2];
      v17 = v10;
      v18 = v11;
      v13 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v19, (uint64_t)&v17);
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v12);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      this = v19;
      v19 = 0;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, v12);
        }
        else
        {
          this[6] -= 2;
        }
      }
      if (v13 != -127 && v13 < 0)
      {
        v15 = 0;
        v16 = -1;
LABEL_21:
        *(_WORD *)a4 = v16;
        goto LABEL_25;
      }
      if (v13)
      {
        if (v13 >= 1)
        {
          v15 = 0;
          v16 = 1;
          goto LABEL_21;
        }
        v6 = 2;
LABEL_24:
        *(_BYTE *)a4 = v6;
        *(_QWORD *)(a4 + 8) = 0;
        v15 = 1;
      }
      else
      {
        v15 = 0;
        *(_WORD *)a4 = 0;
      }
LABEL_25:
      *(_DWORD *)(a4 + 16) = v15;
      return this;
    default:
      v6 = 6;
      goto LABEL_24;
  }
}

void WebCore::Range::deleteContents(WebCore::Range *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Node *v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  unsigned int v10;
  char v11;

  WebCore::Range::processContents((uint64_t)this, 0, (uint64_t)v8);
  v3 = v10;
  if (!v10)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_5;
  }
  if (v10 == 1)
  {
    v4 = v9;
    v9 = 0;
    *(_BYTE *)a2 = v8[0];
    a2[1] = v4;
    *((_BYTE *)a2 + 16) = 1;
LABEL_5:
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v3])(&v11, v8);
    return;
  }
  v5 = std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::Range::processContents(v5, v6, v7);
}

void WebCore::Range::processContents(uint64_t a1@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Node **v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  _BOOL4 v30;
  unsigned __int8 v31;
  WebCore::Node *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::JSGlobalObject *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Node *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  void *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  WebCore::Node *v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  void *v64;
  int v65;
  int v66;
  WebCore::Node *v67;
  unsigned int v68;
  unsigned int v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  WebCore::Node *v73;
  void *v75;
  int v76;
  int v77;
  WebCore::Node *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  uint64_t v82;
  WebCore::Node *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  int v90;
  int v91;
  __int16 v92;
  WebCore::Node *v93;
  WebCore::Node *v95;
  WebCore::Node *v96;
  unsigned int v97;
  BOOL v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  WebCore::Node *v103;
  uint64_t v104;
  int j;
  uint64_t v106;
  unsigned int i;
  __int16 v108;
  WebCore::Node **v109;
  WebCore::Node *v111;
  WebCore::Node *v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  void *v119;
  WebCore::Node *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  void *v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  WebCore::Node *v129;
  uint64_t v130;
  uint64_t v131;
  WebCore::Node *v132;
  WebCore::Node *v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  WTF *v140;
  WTF *v142;
  uint64_t v143;
  WebCore::Element **v144;
  WebCore::Element *v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  int k;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  BOOL v157;
  unint64_t v158;
  unint64_t v159;
  WTF *v160;
  int v161;
  WebCore::Node *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  uint64_t v173;
  uint64_t v174;
  WebCore::Node *v175;
  uint64_t v176;
  WebCore::Node *v177;
  WebCore::Node *v178;
  unsigned int v179;
  char v180;
  unsigned int v181;
  unsigned int v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  BOOL v187;
  unsigned __int8 v188;
  int v189;
  WebCore::Node *__src;
  uint64_t v191;
  WebCore::Node *v192;
  char v193;
  char v194;
  WebCore::Node *v195;
  unsigned int v196;
  WTF *v197;
  WebCore::Node *v198;
  WebCore::Node *v199;
  uint64_t v200;
  _DWORD v201[8];
  uint64_t v202;
  uint64_t v203;
  WebCore::CharacterData *v204;
  WTF::StringImpl *v205;
  WebCore::Node *v206[2];
  int v207;
  WebCore::CharacterData *v208;
  WTF::StringImpl *v209;
  WebCore::Node *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  char v214;
  uint64_t v215;
  JSC::JSGlobalObject *v216;
  WebCore::CharacterData *v217;
  WTF::StringImpl *v218;

  v5 = (WebCore::Node **)a2;
  v8 = ((_DWORD)a2 - 1);
  if (((_BYTE)a2 - 1) > 1u)
  {
    v10 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v9 + 24) += 2;
    WebCore::DocumentFragment::create((WebCore::DocumentFragment *)v9, (uint64_t *)&v210);
    v10 = (uint64_t)v210;
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 40);
  v14 = *(_DWORD *)(a1 + 64);
  if (v11 == v12 && v13 == v14)
  {
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  v16 = *(_QWORD *)(a1 + 32);
  if (v11 == v12)
  {
LABEL_26:
    if (!v16)
      goto LABEL_28;
    goto LABEL_27;
  }
  v17 = 0;
  v18 = *(_QWORD *)(a1 + 32);
  do
  {
    v18 = *(_QWORD *)(v18 + 32);
    ++v17;
  }
  while (v18);
  v19 = 0;
  v20 = v17 - 1;
  v21 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = *(_QWORD *)(v21 + 32);
    ++v19;
  }
  while (v21);
  v22 = v19 - 1;
  v23 = v19 - v17;
  v24 = v17 - v19;
  if (v20 >= v22)
    v16 = *(_QWORD *)(a1 + 32);
  else
    v16 = *(_QWORD *)(a1 + 56);
  if (v20 >= v22)
    v25 = *(_QWORD *)(a1 + 56);
  else
    v25 = *(_QWORD *)(a1 + 32);
  if (v20 >= v22)
    v26 = v24;
  else
    v26 = v23;
  for (; v26; --v26)
    v16 = *(_QWORD *)(v16 + 32);
  if (v16 != v25)
  {
    do
    {
      v16 = *(_QWORD *)(v16 + 32);
      v25 = *(_QWORD *)(v25 + 32);
    }
    while (v16 != v25);
    goto LABEL_26;
  }
  v16 = v25;
  if (v25)
LABEL_27:
    *(_DWORD *)(v16 + 24) += 2;
LABEL_28:
  if ((_DWORD)v5 == 1)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
    *(_DWORD *)(v27 + 24) += 2;
    v3 = *(_QWORD *)(v27 + 80);
    if (v3)
    {
      while ((*(_WORD *)(v3 + 28) & 0xF000) != 0xA000)
      {
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          goto LABEL_60;
      }
      v28 = v10;
      *(_DWORD *)(v3 + 24) += 2;
      *(_DWORD *)(v11 + 24) += 2;
      *(_DWORD *)(v12 + 24) += 2;
      v210 = (WebCore::Node *)v11;
      LODWORD(v211) = v13;
      v212 = v12;
      v213 = v14;
      *(_DWORD *)(v3 + 24) += 2;
      v199 = (WebCore::Node *)v3;
      LODWORD(v200) = 0;
      v29 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v210, (uint64_t)&v199);
      v30 = 0;
      if (v29 != 129 && (char)v29 <= 0)
      {
        v31 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v199, (uint64_t)&v212);
        v30 = v31 != 129 && (char)v31 < 1;
      }
      v33 = v199;
      v199 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33, a2);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
      v34 = v212;
      v212 = 0;
      if (v34)
      {
        if (*(_DWORD *)(v34 + 24) == 2)
        {
          if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v34, a2);
        }
        else
        {
          *(_DWORD *)(v34 + 24) -= 2;
        }
      }
      v35 = (uint64_t)v210;
      v210 = 0;
      if (v35)
      {
        if (*(_DWORD *)(v35 + 24) == 2)
        {
          if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v35, a2);
        }
        else
        {
          *(_DWORD *)(v35 + 24) -= 2;
        }
      }
      if (v30)
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 16) = 1;
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          v10 = v28;
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
          v10 = v28;
        }
        if (*(_DWORD *)(v27 + 24) == 2)
        {
          if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v27, a2);
        }
        else
        {
          *(_DWORD *)(v27 + 24) -= 2;
        }
        goto LABEL_579;
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        v10 = v28;
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
        v10 = v28;
      }
    }
LABEL_60:
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27, a2);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  v36 = *(_QWORD *)(a1 + 32);
  if (v36 == *(_QWORD *)(a1 + 56))
  {
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    v217 = (WebCore::CharacterData *)v36;
    v218 = (WTF::StringImpl *)v10;
    *(_DWORD *)(v36 + 24) += 4;
    WebCore::processContentsBetweenOffsets((unsigned int *)&v210, v5, &v218, &v217, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 64));
    v217 = 0;
    v48 = *(_DWORD *)(v36 + 24) - 2;
    if (*(_DWORD *)(v36 + 24) == 2)
    {
      v70 = *(_WORD *)(v36 + 30);
      if ((v70 & 0x400) != 0)
        goto LABEL_151;
      WebCore::Node::removedLastRef((WebCore::Node *)v36, v47);
      v48 = *(_DWORD *)(v36 + 24);
    }
    else
    {
      *(_DWORD *)(v36 + 24) = v48;
    }
    v49 = v48 - 2;
    if (v49)
    {
      *(_DWORD *)(v36 + 24) = v49;
      goto LABEL_78;
    }
    v70 = *(_WORD *)(v36 + 30);
LABEL_151:
    if ((v70 & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v36, v47);
LABEL_78:
    v218 = 0;
    if (v10)
    {
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v47);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    v50 = v212;
    if ((_DWORD)v212)
    {
      if ((_DWORD)v212 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_176;
      }
      v51 = v211;
      v211 = 0;
      *(_BYTE *)a3 = (_BYTE)v210;
      *(_QWORD *)(a3 + 8) = v51;
    }
    else
    {
      *(_QWORD *)a3 = v10;
      v10 = 0;
    }
    *(_DWORD *)(a3 + 16) = v50;
    ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33A7228[v50])(&v199, &v210);
    if (v16)
      goto LABEL_579;
    goto LABEL_581;
  }
  v191 = a3;
  v37 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8) + 192));
  __src = (WebCore::Node *)&v212;
  v210 = (WebCore::Node *)&v212;
  v4 = 4;
  v211 = 4;
  v214 = 0;
  v215 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v216 = v37;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v210;
  v39 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v39 + 24) += 2;
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  v40 = *(_QWORD *)(a1 + 48);
  if (v40)
    *(_DWORD *)(v40 + 24) += 2;
  v41 = *(WebCore::Node **)(a1 + 56);
  *((_DWORD *)v41 + 6) += 2;
  v42 = *(_DWORD *)(a1 + 64);
  v43 = *(_QWORD *)(a1 + 72);
  if (v43)
    *(_DWORD *)(v43 + 24) += 2;
  v188 = v8;
  v184 = v43;
  v185 = v40;
  v44 = *(_DWORD *)(v39 + 24) + 2;
  *(_DWORD *)(v39 + 24) = v44;
  v45 = v39 == v16;
  if (v39 == v16)
  {
    v8 = 0;
  }
  else
  {
    v46 = v39;
    do
    {
      v8 = v46;
      v46 = *(_QWORD *)(v46 + 32);
    }
    while (v46 != v16);
    *(_DWORD *)(v8 + 24) += 2;
    if (!v39)
    {
      v45 = 0;
      v194 = 1;
      goto LABEL_87;
    }
    v44 = *(_DWORD *)(v39 + 24);
  }
  v52 = v44 - 2;
  if (v52)
  {
    v194 = 0;
    *(_DWORD *)(v39 + 24) = v52;
  }
  else
  {
    v68 = v42;
    if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v39, v38);
    v194 = 0;
    v42 = v68;
  }
LABEL_87:
  v196 = v5;
  v183 = v45;
  v53 = *((_DWORD *)v41 + 6) + 2;
  *((_DWORD *)v41 + 6) = v53;
  v187 = v41 == (WebCore::Node *)v16;
  if (v41 == (WebCore::Node *)v16)
  {
    v5 = 0;
LABEL_93:
    v55 = v53 - 2;
    if (v55)
    {
      v193 = 0;
      *((_DWORD *)v41 + 6) = v55;
    }
    else
    {
      v69 = v42;
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v41, v38);
      v193 = 0;
      v42 = v69;
    }
    goto LABEL_95;
  }
  v54 = v41;
  do
  {
    v5 = (WebCore::Node **)v54;
    v54 = (WebCore::Node *)*((_QWORD *)v54 + 4);
  }
  while (v54 != (WebCore::Node *)v16);
  *((_DWORD *)v5 + 6) += 2;
  if (v41)
  {
    v53 = *((_DWORD *)v41 + 6);
    goto LABEL_93;
  }
  v187 = 0;
  v193 = 1;
LABEL_95:
  v186 = v39;
  v178 = v41;
  if (v39 == v16)
    goto LABEL_177;
  v56 = *(_WORD *)(v16 + 28);
  if ((v56 & 0xF000) != 0x9000)
  {
    if ((v56 & 4) != 0
      && *(_QWORD *)(v16 + 80)
      && ((*(unsigned __int8 *)(v39 + 22) ^ *(unsigned __int8 *)(v16 + 22)) & 8) == 0)
    {
      v57 = v39;
      do
        v57 = *(_QWORD *)(v57 + 32);
      while (v57 != v16 && v57 != 0);
      if (v57)
      {
        v59 = *(_WORD *)(v39 + 28);
        goto LABEL_108;
      }
    }
LABEL_177:
    v67 = 0;
    goto LABEL_178;
  }
  if (**(_QWORD **)(v39 + 40) != v16 || (v59 = *(_WORD *)(v39 + 28), (v59 & 0xF000) == 0x9000))
  {
    v67 = 0;
    goto LABEL_178;
  }
LABEL_176:
  v39 = v186;
  v41 = v178;
  if ((*(_BYTE *)(v186 + 22) & 8) == 0)
    goto LABEL_177;
LABEL_108:
  v208 = (WebCore::CharacterData *)v39;
  v209 = 0;
  *(_DWORD *)(v39 + 24) += 4;
  if ((v59 & 1) != 0)
  {
    v63 = *(_QWORD *)(v39 + 80);
    if (!v63)
    {
LABEL_111:
      v61 = v42;
      v62 = 0;
      goto LABEL_124;
    }
    v61 = v42;
    v62 = *(_DWORD *)(v63 + 4);
  }
  else
  {
    if ((v59 & 4) == 0)
      goto LABEL_111;
    v60 = *(_QWORD *)(v39 + 80);
    if (!v60)
      goto LABEL_111;
    v61 = v42;
    v62 = 0;
    do
    {
      ++v62;
      v60 = *(_QWORD *)(v60 + 56);
    }
    while (v60);
  }
LABEL_124:
  WebCore::processContentsBetweenOffsets((unsigned int *)&v199, (void *)v196, &v209, &v208, v3, v62);
  v208 = 0;
  v65 = *(_DWORD *)(v39 + 24) - 2;
  if (*(_DWORD *)(v39 + 24) == 2)
  {
    v71 = *(_WORD *)(v39 + 30);
    if ((v71 & 0x400) != 0)
      goto LABEL_170;
    WebCore::Node::removedLastRef((WebCore::Node *)v39, v64);
    v65 = *(_DWORD *)(v39 + 24);
  }
  else
  {
    *(_DWORD *)(v39 + 24) = v65;
  }
  v66 = v65 - 2;
  if (!v66)
  {
    v71 = *(_WORD *)(v39 + 30);
LABEL_170:
    if ((v71 & 0x400) != 0)
    {
      v66 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v39, v64);
      v66 = *(_DWORD *)(v39 + 24);
    }
  }
  v209 = 0;
  *(_DWORD *)(v39 + 24) = v66 + 2;
  WebCore::processAncestorsAndTheirSiblings((unsigned int *)v206, (WebCore::Node *)v196, (_QWORD *)v39, 0, (uint64_t)&v199, v16);
  if (*(_DWORD *)(v39 + 24) == 2)
  {
    if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v39, v38);
  }
  else
  {
    *(_DWORD *)(v39 + 24) -= 2;
  }
  v67 = 0;
  if (v207 != -1)
  {
    if (!v207)
    {
      v67 = v206[0];
      v206[0] = 0;
    }
    ((void (*)(uint64_t *, WebCore::Node **))off_1E33A7228[v207])(&v202, v206);
  }
  if (v201[0] != -1)
    ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33A7228[v201[0]])(v206, &v199);
  v39 = v186;
  v42 = v61;
LABEL_178:
  if (v16 == *(_QWORD *)(a1 + 56))
    goto LABEL_216;
  if (v41 == (WebCore::Node *)v16)
    goto LABEL_191;
  v72 = *(_WORD *)(v16 + 28);
  if ((v72 & 0xF000) != 0x9000)
  {
    if ((v72 & 4) != 0
      && *(_QWORD *)(v16 + 80)
      && ((*((unsigned __int8 *)v41 + 22) ^ *(unsigned __int8 *)(v16 + 22)) & 8) == 0)
    {
      v73 = v41;
      do
        v73 = (WebCore::Node *)*((_QWORD *)v73 + 4);
      while (v73 != (WebCore::Node *)v16 && v73 != 0);
      if (v73)
        goto LABEL_191;
    }
LABEL_216:
    v78 = 0;
    goto LABEL_217;
  }
  if (**((_QWORD **)v41 + 5) != v16 || (*((_WORD *)v178 + 14) & 0xF000) == 0x9000)
  {
    v78 = 0;
    v39 = v186;
    v41 = v178;
    goto LABEL_217;
  }
  v41 = v178;
  v39 = v186;
  if ((*((_BYTE *)v178 + 22) & 8) == 0)
    goto LABEL_216;
LABEL_191:
  v204 = v41;
  v205 = 0;
  *((_DWORD *)v41 + 6) += 4;
  v179 = v42;
  WebCore::processContentsBetweenOffsets((unsigned int *)&v199, (void *)v196, &v205, &v204, 0, v42);
  v204 = 0;
  v76 = *((_DWORD *)v41 + 6) - 2;
  if (*((_DWORD *)v41 + 6) == 2)
  {
    v79 = *((_WORD *)v41 + 15);
    if ((v79 & 0x400) != 0)
      goto LABEL_208;
    WebCore::Node::removedLastRef(v41, v75);
    v76 = *((_DWORD *)v41 + 6);
  }
  else
  {
    *((_DWORD *)v41 + 6) = v76;
  }
  v77 = v76 - 2;
  if (!v77)
  {
    v79 = *((_WORD *)v41 + 15);
LABEL_208:
    if ((v79 & 0x400) != 0)
    {
      v77 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef(v41, v75);
      v77 = *((_DWORD *)v41 + 6);
    }
  }
  v205 = 0;
  *((_DWORD *)v41 + 6) = v77 + 2;
  WebCore::processAncestorsAndTheirSiblings((unsigned int *)v206, (WebCore::Node *)v196, v41, 1, (uint64_t)&v199, v16);
  if (*((_DWORD *)v41 + 6) == 2)
  {
    if ((*((_WORD *)v41 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v41, v38);
  }
  else
  {
    *((_DWORD *)v41 + 6) -= 2;
  }
  v78 = 0;
  if (v207 != -1)
  {
    if (!v207)
    {
      v78 = v206[0];
      v206[0] = 0;
    }
    ((void (*)(uint64_t *, WebCore::Node **))off_1E33A7228[v207])(&v202, v206);
  }
  if (v201[0] != -1)
    ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33A7228[v201[0]])(v206, &v199);
  v42 = v179;
LABEL_217:
  v192 = v78;
  v80 = *(_DWORD *)(v39 + 24) + 2;
  *(_DWORD *)(v39 + 24) = v80;
  if ((v194 & 1) != 0)
  {
    v195 = 0;
    v82 = v191;
    goto LABEL_256;
  }
  v81 = *(_WORD *)(v16 + 28);
  if (v39 == v16)
  {
    v83 = v67;
    if ((v81 & 4) == 0)
    {
      v87 = 0;
      v82 = v191;
      goto LABEL_246;
    }
    v87 = *(_QWORD *)(v16 + 80);
    if ((_DWORD)v3 && v87)
    {
      v88 = 1;
      do
      {
        v87 = *(_QWORD *)(v87 + 56);
        if (v87)
          v89 = v88 >= v3;
        else
          v89 = 1;
        ++v88;
      }
      while (!v89);
    }
    v82 = v191;
    if (!v87)
      goto LABEL_246;
    goto LABEL_242;
  }
  if ((v81 & 0xF000) == 0x9000)
  {
    v83 = v67;
    v82 = v191;
    if (**(_QWORD **)(v39 + 40) != v16 || (*(_WORD *)(v186 + 28) & 0xF000) == 0x9000)
    {
      v87 = 0;
      v39 = v186;
      v41 = v178;
      goto LABEL_246;
    }
    v39 = v186;
    v86 = v186;
    v41 = v178;
    if ((*(_BYTE *)(v186 + 22) & 8) != 0)
      goto LABEL_230;
LABEL_244:
    v87 = 0;
    goto LABEL_246;
  }
  v82 = v191;
  if ((v81 & 4) == 0
    || !*(_QWORD *)(v16 + 80)
    || ((*(unsigned __int8 *)(v39 + 22) ^ *(unsigned __int8 *)(v16 + 22)) & 8) != 0)
  {
    v83 = v67;
    goto LABEL_244;
  }
  v83 = v67;
  v84 = v39;
  do
    v84 = *(_QWORD *)(v84 + 32);
  while (v84 != v16 && v84 != 0);
  v86 = v39;
  if (!v84)
    goto LABEL_244;
  do
  {
LABEL_230:
    v87 = v86;
    v86 = *(_QWORD *)(v86 + 32);
  }
  while (v86 != v16);
LABEL_242:
  *(_DWORD *)(v87 + 24) += 2;
  v80 = *(_DWORD *)(v39 + 24);
LABEL_246:
  v90 = v80 - 2;
  if (v90)
  {
    *(_DWORD *)(v39 + 24) = v90;
  }
  else if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
  {
    v181 = v42;
    WebCore::Node::removedLastRef((WebCore::Node *)v39, v38);
    v42 = v181;
  }
  if (v39 == v16 || !v87)
  {
    v195 = (WebCore::Node *)v87;
    goto LABEL_255;
  }
  v195 = *(WebCore::Node **)(v87 + 56);
  if (v195)
    *((_DWORD *)v195 + 6) += 2;
  if (*(_DWORD *)(v87 + 24) != 2)
  {
    *(_DWORD *)(v87 + 24) -= 2;
LABEL_255:
    v67 = v83;
    goto LABEL_256;
  }
  v182 = v42;
  if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v87, v38);
  v67 = v83;
  v42 = v182;
LABEL_256:
  v91 = *((_DWORD *)v41 + 6) + 2;
  *((_DWORD *)v41 + 6) = v91;
  if ((v193 & 1) != 0)
  {
    v96 = 0;
    v180 = 1;
    goto LABEL_302;
  }
  v92 = *(_WORD *)(v16 + 28);
  if (v41 == (WebCore::Node *)v16)
  {
    if ((v92 & 4) != 0)
    {
      v96 = *(WebCore::Node **)(v16 + 80);
      if (v42 && v96)
      {
        v97 = 1;
        do
        {
          v96 = (WebCore::Node *)*((_QWORD *)v96 + 7);
          if (v96)
            v98 = v97 >= v42;
          else
            v98 = 1;
          ++v97;
        }
        while (!v98);
      }
      if (v96)
        goto LABEL_281;
      goto LABEL_299;
    }
  }
  else if ((v92 & 0xF000) == 0x9000)
  {
    if (**((_QWORD **)v41 + 5) != v16 || (*((_WORD *)v178 + 14) & 0xF000) == 0x9000)
    {
      v96 = 0;
      v180 = 1;
      v39 = v186;
      v41 = v178;
      goto LABEL_300;
    }
    v41 = v178;
    v95 = v178;
    v39 = v186;
    if ((*((_BYTE *)v178 + 22) & 8) != 0)
    {
      do
      {
LABEL_269:
        v96 = v95;
        v95 = (WebCore::Node *)*((_QWORD *)v95 + 4);
      }
      while (v95 != (WebCore::Node *)v16);
LABEL_281:
      v180 = 0;
      *((_DWORD *)v96 + 6) += 2;
      v91 = *((_DWORD *)v41 + 6);
      goto LABEL_300;
    }
  }
  else if ((v92 & 4) != 0
         && *(_QWORD *)(v16 + 80)
         && ((*((unsigned __int8 *)v41 + 22) ^ *(unsigned __int8 *)(v16 + 22)) & 8) == 0)
  {
    v93 = v41;
    do
      v93 = (WebCore::Node *)*((_QWORD *)v93 + 4);
    while (v93 != (WebCore::Node *)v16 && v93 != 0);
    v95 = v41;
    if (v93)
      goto LABEL_269;
  }
  v96 = 0;
LABEL_299:
  v180 = 1;
LABEL_300:
  v99 = v91 - 2;
  if (v99)
  {
    *((_DWORD *)v41 + 6) = v99;
  }
  else if ((*((_WORD *)v41 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v41, v38);
  }
LABEL_302:
  if (v196 <= 1)
  {
    if (!v8)
      goto LABEL_334;
    if (v16 != v8)
    {
      v100 = *(_WORD *)(v16 + 28);
      if ((v100 & 0xF000) != 0x9000)
      {
        if ((v100 & 4) != 0
          && *(_QWORD *)(v16 + 80)
          && ((*(unsigned __int8 *)(v8 + 22) ^ *(unsigned __int8 *)(v16 + 22)) & 8) == 0)
        {
          v101 = v8;
          do
            v101 = *(_QWORD *)(v101 + 32);
          while (v101 != v16 && v101 != 0);
          if (v101)
            goto LABEL_316;
        }
LABEL_334:
        if (!v5)
          goto LABEL_355;
        if ((WebCore::Node **)v16 != v5)
        {
          v108 = *(_WORD *)(v16 + 28);
          if ((v108 & 0xF000) != 0x9000)
          {
            if ((v108 & 4) != 0
              && *(_QWORD *)(v16 + 80)
              && ((*((unsigned __int8 *)v5 + 22) ^ *(unsigned __int8 *)(v16 + 22)) & 8) == 0)
            {
              v109 = v5;
              do
                v109 = (WebCore::Node **)v109[4];
              while (v109 != (WebCore::Node **)v16 && v109 != 0);
              if (v109)
                goto LABEL_347;
            }
LABEL_355:
            WebCore::Range::collapse((WebCore::Range *)a1, (void *)1);
            goto LABEL_356;
          }
          if (*(_QWORD *)v5[5] != v16 || (*((_WORD *)v5 + 14) & 0xF000) == 0x9000 || (*((_BYTE *)v5 + 22) & 8) == 0)
            goto LABEL_355;
        }
LABEL_347:
        v111 = v5[4];
        if (v111)
          *((_DWORD *)v111 + 6) += 2;
        v206[0] = v111;
        v112 = v5[6];
        for (i = 0; ; ++i)
        {
          v113 = (unint64_t)v112 & 0xFFFFFFFFFFFFLL;
          if (!v113)
            break;
          v112 = *(WebCore::Node **)(v113 + 48);
        }
LABEL_322:
        WebCore::Range::setStart(a1, (uint64_t *)v206, i, (uint64_t)&v199);
        if (v206[0])
        {
          if (*((_DWORD *)v206[0] + 6) == 2)
          {
            if ((*((_WORD *)v206[0] + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v206[0], a2);
          }
          else
          {
            *((_DWORD *)v206[0] + 6) -= 2;
          }
        }
        if (LOBYTE(v201[0]))
          goto LABEL_359;
        goto LABEL_355;
      }
      if (**(_QWORD **)(v8 + 40) != v16 || (*(_WORD *)(v8 + 28) & 0xF000) == 0x9000 || (*(_BYTE *)(v8 + 22) & 8) == 0)
        goto LABEL_334;
    }
LABEL_316:
    v103 = *(WebCore::Node **)(v8 + 32);
    if (v103)
      *((_DWORD *)v103 + 6) += 2;
    v206[0] = v103;
    v104 = *(_QWORD *)(v8 + 48);
    for (j = 0; ; ++j)
    {
      v106 = v104 & 0xFFFFFFFFFFFFLL;
      if (!v106)
        break;
      v104 = *(_QWORD *)(v106 + 48);
    }
    i = j + 1;
    goto LABEL_322;
  }
LABEL_356:
  if (v188 <= 1u)
  {
    if (v67)
    {
      WebCore::ContainerNode::appendChild(v10, v67, (uint64_t)&v199);
      if (LOBYTE(v201[0]))
      {
LABEL_359:
        v197 = 0;
        v114 = 0;
        v115 = 0;
        v116 = v200;
        *(_BYTE *)v82 = (_BYTE)v199;
        *(_QWORD *)(v82 + 8) = v116;
        *(_DWORD *)(v82 + 16) = 1;
        goto LABEL_434;
      }
    }
  }
  v177 = v67;
  if (v195)
  {
    v176 = v10;
    if (v96 == v195)
    {
      v119 = 0;
      v117 = 0;
    }
    else
    {
      v117 = 0;
      LODWORD(v118) = 0;
      v119 = 0;
      v120 = v195;
      do
      {
        v121 = v117;
        if (v117 == (_DWORD)v118)
        {
          v122 = v117 + ((unint64_t)v117 >> 2);
          if (v122 >= 0x10)
            v123 = v122 + 1;
          else
            v123 = 16;
          if (v123 <= (unint64_t)v117 + 1)
            v118 = v117 + 1;
          else
            v118 = v123;
          if (v118 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195A2D9DCLL);
          }
          v124 = (void *)WTF::fastMalloc((WTF *)(8 * v118));
          memcpy(v124, v119, 8 * v121);
          if (v119)
          {
            if (v124 == v119)
            {
              v124 = 0;
              LODWORD(v118) = 0;
            }
            WTF::fastFree((WTF *)v119, v125);
          }
          v119 = v124;
        }
        *((_DWORD *)v120 + 6) += 2;
        *((_QWORD *)v119 + v121) = v120;
        v117 = v121 + 1;
        v120 = (WebCore::Node *)*((_QWORD *)v120 + 7);
        if (v120)
          v126 = v96 == v120;
        else
          v126 = 1;
      }
      while (!v126);
    }
    v10 = v176;
    if (v176)
    {
      *(_DWORD *)(v176 + 24) += 2;
      v203 = v176;
      WebCore::processNodes(&v199, v196, (WebCore::Node **)v119, v117, (WebCore::ContainerNode *)v16, (uint64_t)&v203);
      v203 = 0;
      v82 = v191;
      if (*(_DWORD *)(v176 + 24) == 2)
      {
        if ((*(_WORD *)(v176 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v176, a2);
      }
      else
      {
        *(_DWORD *)(v176 + 24) -= 2;
      }
    }
    else
    {
      v203 = 0;
      WebCore::processNodes(&v199, v196, (WebCore::Node **)v119, v117, (WebCore::ContainerNode *)v16, (uint64_t)&v203);
      v203 = 0;
      v82 = v191;
    }
    if (LOBYTE(v201[0]))
    {
      v127 = v200;
      *(_BYTE *)v82 = (_BYTE)v199;
      *(_QWORD *)(v82 + 8) = v127;
      *(_DWORD *)(v82 + 16) = 1;
      if (v117)
      {
        v165 = 8 * v117;
        v166 = (uint64_t *)v119;
        v10 = v176;
        v82 = v191;
        do
        {
          v167 = *v166;
          *v166 = 0;
          if (v167)
          {
            if (*(_DWORD *)(v167 + 24) == 2)
            {
              if ((*(_WORD *)(v167 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v167, a2);
            }
            else
            {
              *(_DWORD *)(v167 + 24) -= 2;
            }
          }
          ++v166;
          v165 -= 8;
        }
        while (v165);
      }
      if (v119)
        WTF::fastFree((WTF *)v119, a2);
      v197 = 0;
      v114 = 0;
      v115 = 0;
      v39 = v186;
      goto LABEL_433;
    }
    if (v117)
    {
      v168 = 8 * v117;
      v169 = (uint64_t *)v119;
      v10 = v176;
      v82 = v191;
      do
      {
        v170 = *v169;
        *v169 = 0;
        if (v170)
        {
          if (*(_DWORD *)(v170 + 24) == 2)
          {
            if ((*(_WORD *)(v170 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v170, a2);
          }
          else
          {
            *(_DWORD *)(v170 + 24) -= 2;
          }
        }
        ++v169;
        v168 -= 8;
      }
      while (v168);
    }
    v39 = v186;
    if (v119)
      WTF::fastFree((WTF *)v119, a2);
  }
  if (v188 > 1u || !v192 || (WebCore::ContainerNode::appendChild(v10, v192, (uint64_t)&v199), !LOBYTE(v201[0])))
  {
    v202 = 0;
    if (v214)
    {
      __break(0xC471u);
    }
    else
    {
      v199 = (WebCore::Node *)v201;
      LODWORD(v200) = 4;
      v129 = v210;
      a2 = __src;
      if (v210 == __src)
      {
        v130 = HIDWORD(v211);
        memcpy(v201, __src, 8 * HIDWORD(v211));
        v129 = (WebCore::Node *)v201;
      }
      else
      {
        v210 = __src;
        v199 = v129;
        v130 = HIDWORD(v211);
        LODWORD(v200) = v211;
      }
      HIDWORD(v200) = v130;
      v211 = v4;
      if ((_DWORD)v130)
      {
        v131 = 8 * v130;
        do
        {
          v132 = *(WebCore::Node **)v129;
          *((_DWORD *)v132 + 6) = *(_DWORD *)(*(_QWORD *)v129 + 24) + 2;
          v198 = v132;
          WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add(&v202, (uint64_t *)&v198, (uint64_t)v206);
          v133 = v198;
          v198 = 0;
          if (v133)
          {
            if (*((_DWORD *)v133 + 6) == 2)
            {
              if ((*((_WORD *)v133 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v133, a2);
            }
            else
            {
              *((_DWORD *)v133 + 6) -= 2;
            }
          }
          v129 = (WebCore::Node *)((char *)v129 + 8);
          v131 -= 8;
        }
        while (v131);
        v129 = v199;
        if (HIDWORD(v200))
        {
          v174 = 8 * HIDWORD(v200);
          do
          {
            v175 = *(WebCore::Node **)v129;
            *(_QWORD *)v129 = 0;
            if (v175)
            {
              if (*((_DWORD *)v175 + 6) == 2)
              {
                if ((*((_WORD *)v175 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v175, a2);
              }
              else
              {
                *((_DWORD *)v175 + 6) -= 2;
              }
            }
            v129 = (WebCore::Node *)((char *)v129 + 8);
            v174 -= 8;
          }
          while (v174);
          v129 = v199;
        }
      }
      v39 = v186;
      if (v201 != (_DWORD *)v129 && v129 != 0)
      {
        v199 = 0;
        LODWORD(v200) = 0;
        WTF::fastFree(v129, a2);
      }
      v135 = v202;
      if (!v202)
      {
        v197 = 0;
        v114 = 0;
LABEL_432:
        v115 = 1;
        goto LABEL_433;
      }
      if (!*(_DWORD *)(v202 - 12) || (v136 = *(_QWORD *)(v10 + 80)) == 0)
      {
        v197 = 0;
        v114 = 0;
        goto LABEL_421;
      }
      while ((*(_WORD *)(v136 + 28) & 8) == 0)
      {
        v136 = *(_QWORD *)(v136 + 56);
        if (!v136)
        {
          v197 = 0;
          v114 = 0;
          goto LABEL_421;
        }
      }
      v197 = 0;
      v146 = 0;
      v114 = 0;
LABEL_502:
      v147 = *(_DWORD *)(v135 - 8);
      v148 = (~(v136 << 32) + v136) ^ ((unint64_t)(~(v136 << 32) + v136) >> 22);
      v149 = 9 * ((v148 + ~(v148 << 13)) ^ ((v148 + ~(v148 << 13)) >> 8));
      v150 = (v149 ^ (v149 >> 15)) + ~((v149 ^ (v149 >> 15)) << 27);
      v151 = v147 & ((v150 >> 31) ^ v150);
      for (k = 1; ; ++k)
      {
        v153 = *(_QWORD *)(v135 + 8 * v151);
        if (v153 != -1)
        {
          if (!v153)
            goto LABEL_509;
          if (v153 == v136)
            break;
        }
        v151 = (v151 + k) & v147;
      }
      v154 = v114;
      if (v114 != v146)
      {
LABEL_508:
        ++v114;
        *(_DWORD *)(v136 + 24) += 2;
        *((_QWORD *)v197 + v154) = v136;
        v39 = v186;
        while (1)
        {
LABEL_509:
          v155 = *(_QWORD *)(v136 + 80);
          if (!v155)
          {
            if (v136 == v10)
              goto LABEL_544;
            while (1)
            {
              v155 = *(_QWORD *)(v136 + 56);
              if (v155)
                break;
              v136 = *(_QWORD *)(v136 + 32);
              if (v136)
                v157 = v136 == v10;
              else
                v157 = 1;
              if (v157)
                goto LABEL_544;
            }
          }
          if ((*(_WORD *)(v155 + 28) & 8) == 0)
            break;
          v136 = v155;
LABEL_522:
          v135 = v202;
          if (v202)
            goto LABEL_502;
        }
        while (v155 != v10)
        {
          while (1)
          {
            v136 = *(_QWORD *)(v155 + 56);
            if (v136)
              break;
            v155 = *(_QWORD *)(v155 + 32);
            if (v155)
              v156 = v155 == v10;
            else
              v156 = 1;
            if (v156)
              goto LABEL_544;
          }
          v155 = *(_QWORD *)(v155 + 56);
          if ((*(_WORD *)(v136 + 28) & 8) != 0)
            goto LABEL_522;
        }
LABEL_544:
        v135 = v202;
        if (v202)
        {
LABEL_421:
          v137 = *(unsigned int *)(v135 - 4);
          if ((_DWORD)v137)
          {
            v138 = (uint64_t *)v135;
            do
            {
              v139 = *v138;
              if (*v138 != -1)
              {
                *v138 = 0;
                if (v139)
                {
                  if (*(_DWORD *)(v139 + 24) == 2)
                  {
                    if ((*(_WORD *)(v139 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v139, a2);
                  }
                  else
                  {
                    *(_DWORD *)(v139 + 24) -= 2;
                  }
                }
              }
              ++v138;
              --v137;
            }
            while (v137);
          }
          WTF::fastFree((WTF *)(v135 - 16), a2);
          v39 = v186;
        }
        goto LABEL_432;
      }
      v158 = v114 + ((unint64_t)v114 >> 2);
      if (v158 >= 0x10)
        v159 = v158 + 1;
      else
        v159 = 16;
      if (v159 <= (unint64_t)v114 + 1)
        v159 = v114 + 1;
      if (!(v159 >> 29))
      {
        v189 = v159;
        v160 = (WTF *)WTF::fastMalloc((WTF *)(8 * v159));
        memcpy(v160, v197, 8 * v114);
        if (v197)
        {
          if (v160 == v197)
          {
            v160 = 0;
            v161 = 0;
          }
          else
          {
            v161 = v189;
          }
          WTF::fastFree(v197, a2);
          v146 = v161;
          v197 = v160;
          v82 = v191;
        }
        else
        {
          v197 = v160;
          v82 = v191;
          v146 = v189;
        }
        goto LABEL_508;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x195A2D7F0);
  }
  v197 = 0;
  v114 = 0;
  v115 = 0;
  v128 = v200;
  *(_BYTE *)v82 = (_BYTE)v199;
  *(_QWORD *)(v82 + 8) = v128;
  *(_DWORD *)(v82 + 16) = 1;
LABEL_433:
  v67 = v177;
LABEL_434:
  if ((v180 & 1) == 0)
  {
    if (*((_DWORD *)v96 + 6) == 2)
    {
      if ((*((_WORD *)v96 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v96, a2);
    }
    else
    {
      *((_DWORD *)v96 + 6) -= 2;
    }
  }
  if (v195)
  {
    if (*((_DWORD *)v195 + 6) == 2)
    {
      if ((*((_WORD *)v195 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v195, a2);
    }
    else
    {
      *((_DWORD *)v195 + 6) -= 2;
    }
  }
  if (v192)
  {
    if (*((_DWORD *)v192 + 6) == 2)
    {
      if ((*((_WORD *)v192 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v192, a2);
    }
    else
    {
      *((_DWORD *)v192 + 6) -= 2;
    }
  }
  if (v67)
  {
    if (*((_DWORD *)v67 + 6) == 2)
    {
      if ((*((_WORD *)v67 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v67, a2);
    }
    else
    {
      *((_DWORD *)v67 + 6) -= 2;
    }
  }
  if (!v187)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  if (!v183)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if (v184)
  {
    if (*(_DWORD *)(v184 + 24) == 2)
    {
      if ((*(_WORD *)(v184 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v184, a2);
    }
    else
    {
      *(_DWORD *)(v184 + 24) -= 2;
    }
  }
  if ((v193 & 1) == 0)
  {
    if (*((_DWORD *)v178 + 6) == 2)
    {
      if ((*((_WORD *)v178 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v178, a2);
    }
    else
    {
      *((_DWORD *)v178 + 6) -= 2;
    }
  }
  if (v185)
  {
    if (*(_DWORD *)(v185 + 24) == 2)
    {
      if ((*(_WORD *)(v185 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v185, a2);
    }
    else
    {
      *(_DWORD *)(v185 + 24) -= 2;
    }
  }
  if ((v194 & 1) == 0)
  {
    if (*(_DWORD *)(v39 + 24) == 2)
    {
      if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v39, a2);
    }
    else
    {
      *(_DWORD *)(v39 + 24) -= 2;
    }
  }
  if (HIDWORD(v211))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v210, v216);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v215;
    if (HIDWORD(v211))
    {
      v162 = v210;
      v163 = 8 * HIDWORD(v211);
      do
      {
        v164 = *(_QWORD *)v162;
        *(_QWORD *)v162 = 0;
        if (v164)
        {
          if (*(_DWORD *)(v164 + 24) == 2)
          {
            if ((*(_WORD *)(v164 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v164, a2);
          }
          else
          {
            *(_DWORD *)(v164 + 24) -= 2;
          }
        }
        v162 = (WebCore::Node *)((char *)v162 + 8);
        v163 -= 8;
      }
      while (v163);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v215;
  }
  v140 = v210;
  if (__src == v210 || v210 == 0)
  {
    if (!v115)
    {
LABEL_575:
      v142 = v197;
      goto LABEL_576;
    }
  }
  else
  {
    v210 = 0;
    LODWORD(v211) = 0;
    WTF::fastFree(v140, a2);
    if (!v115)
      goto LABEL_575;
  }
  v142 = v197;
  if (v114)
  {
    v143 = 8 * v114;
    v144 = (WebCore::Element **)v197;
    do
    {
      v145 = *v144++;
      WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v145, a2);
      v143 -= 8;
    }
    while (v143);
  }
  *(_QWORD *)v82 = v10;
  *(_DWORD *)(v82 + 16) = 0;
  v10 = 0;
LABEL_576:
  if (v114)
  {
    v171 = 8 * v114;
    v172 = v142;
    do
    {
      v173 = *(_QWORD *)v172;
      *(_QWORD *)v172 = 0;
      if (v173)
      {
        if (*(_DWORD *)(v173 + 24) == 2)
        {
          if ((*(_WORD *)(v173 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v173, a2);
        }
        else
        {
          *(_DWORD *)(v173 + 24) -= 2;
        }
      }
      v172 = (WTF *)((char *)v172 + 8);
      v171 -= 8;
    }
    while (v171);
  }
  if (v142)
  {
    WTF::fastFree(v142, a2);
    if (v16)
    {
LABEL_579:
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
  }
  else if (v16)
  {
    goto LABEL_579;
  }
LABEL_581:
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
}

uint64_t WebCore::Range::intersectsNode(WebCore::Range *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  int v3;
  WebCore::Node *v4;
  int v5;
  void *v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13;
  int v14;

  v2 = (WebCore::Node *)*((_QWORD *)this + 4);
  *((_DWORD *)v2 + 6) += 2;
  v3 = *((_DWORD *)this + 10);
  v4 = (WebCore::Node *)*((_QWORD *)this + 7);
  *((_DWORD *)v4 + 6) += 2;
  v5 = *((_DWORD *)this + 16);
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v7 = WebCore::intersects<(WebCore::TreeType)0>((int *)&v11, (uint64_t)a2);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v6);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v6);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  return v7;
}

BOOL WebCore::Range::collapsed(WebCore::Range *this)
{
  return *((_QWORD *)this + 4) == *((_QWORD *)this + 7) && *((_DWORD *)this + 10) == *((_DWORD *)this + 16);
}

unsigned int *WebCore::processContentsBetweenOffsets(unsigned int *result, void *a2, WTF::StringImpl **a3, WebCore::CharacterData **a4, unsigned int a5, unsigned int a6)
{
  unsigned int *v6;
  WTF::StringImpl *v7;
  WebCore::CharacterData *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v14;
  uint64_t v16;
  char *v17;
  const WTF::String *v18;
  const WTF::String *v19;
  unsigned int v20;
  unsigned int *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unint64_t v31;
  const WTF::StringImpl *v32;
  WebCore::CharacterData *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  unint64_t v39;
  void *v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  void *v52;
  BOOL v53;
  WebCore::ContainerNode *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  const WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int **v66;
  unsigned int v67;
  unsigned int *v68;
  WTF::StringImpl *v69;
  WebCore::CharacterData *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  char v73;
  WTF *v74;

  v6 = result;
  v7 = 0;
  v8 = *a4;
  v9 = *((unsigned __int16 *)*a4 + 14);
  v10 = v9 >> 12;
  if (v9 >> 12 > 0xB)
    goto LABEL_173;
  v14 = a2;
  if (((1 << v10) & 0xE06) != 0)
  {
    if (((_BYTE)a2 - 1) > 1u)
    {
      v7 = 0;
    }
    else
    {
      v7 = *a3;
      if (*a3)
      {
        *((_DWORD *)v7 + 6) += 2;
      }
      else
      {
        result = (unsigned int *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::CharacterData *, _QWORD, _QWORD))(*(_QWORD *)v8 + 136))(&v71, *a4, *(_QWORD *)(*((_QWORD *)v8 + 5) + 8), 0);
        v7 = v71;
        v8 = *a4;
        LOWORD(v9) = *((_WORD *)*a4 + 14);
      }
    }
    v68 = v6;
    if ((v9 & 4) != 0)
    {
      v36 = *((_QWORD *)v8 + 10);
      if (a5 && v36)
      {
        v37 = a5 - 1;
        do
        {
          v36 = *(_QWORD *)(v36 + 56);
          v53 = v37-- != 0;
          v38 = v53;
        }
        while (v36 && (v38 & 1) != 0);
      }
      LODWORD(v39) = 0;
      v40 = 0;
      if (a5 < a6 && v36)
      {
        v67 = v14;
        if (v14)
        {
          v39 = 0;
          v41 = 0;
          v40 = 0;
          v42 = a5 + 1;
          while ((*(_WORD *)(v36 + 28) & 0xF000) != 0xA000)
          {
            if (v39 == v41)
            {
              v43 = v39 + (v39 >> 2);
              if (v43 >= 0x10)
                v44 = v43 + 1;
              else
                v44 = 16;
              if (v44 <= v39 + 1)
                v41 = v39 + 1;
              else
                v41 = v44;
              if (v41 >> 29)
                goto LABEL_191;
              v45 = (void *)WTF::fastMalloc((WTF *)(8 * v41));
              v41 = v41;
              result = (unsigned int *)memcpy(v45, v40, 8 * v39);
              if (v40)
              {
                if (v45 == v40)
                {
                  v45 = 0;
                  v41 = 0;
                }
                result = (unsigned int *)WTF::fastFree((WTF *)v40, a2);
              }
              v40 = v45;
              *(_DWORD *)(v36 + 24) += 2;
              *((_QWORD *)v45 + v39++) = v36;
            }
            else
            {
              *(_DWORD *)(v36 + 24) += 2;
              *((_QWORD *)v40 + v39++) = v36;
            }
            v36 = *(_QWORD *)(v36 + 56);
            if (v36)
            {
              v53 = v42++ >= a6;
              if (!v53)
                continue;
            }
            goto LABEL_99;
          }
          v56 = 1;
          v6 = v68;
          *(_BYTE *)v68 = 1;
          *((_QWORD *)v68 + 1) = 0;
          goto LABEL_105;
        }
        v46 = 0;
        v47 = 0;
        v40 = 0;
        v48 = a5 + 1;
        do
        {
          if (v46 == v47)
          {
            v49 = v46 + (v46 >> 2);
            if (v49 >= 0x10)
              v50 = v49 + 1;
            else
              v50 = 16;
            if (v50 <= v46 + 1)
              v47 = v46 + 1;
            else
              v47 = v50;
            if (v47 >> 29)
            {
LABEL_191:
              __break(0xC471u);
              return result;
            }
            v51 = (void *)WTF::fastMalloc((WTF *)(8 * v47));
            v47 = v47;
            result = (unsigned int *)memcpy(v51, v40, 8 * v46);
            if (v40)
            {
              if (v51 == v40)
              {
                v51 = 0;
                v47 = 0;
              }
              result = (unsigned int *)WTF::fastFree((WTF *)v40, v52);
            }
            v40 = v51;
            *(_DWORD *)(v36 + 24) += 2;
            *((_QWORD *)v51 + v46++) = v36;
          }
          else
          {
            *(_DWORD *)(v36 + 24) += 2;
            *((_QWORD *)v40 + v46++) = v36;
          }
          v36 = *(_QWORD *)(v36 + 56);
          if (v36)
            v53 = v48 >= a6;
          else
            v53 = 1;
          ++v48;
        }
        while (!v53);
        LODWORD(v39) = v46;
LABEL_99:
        v14 = v67;
      }
    }
    else
    {
      v40 = 0;
      LODWORD(v39) = 0;
    }
    v54 = *a4;
    if (v7)
    {
      *((_DWORD *)v7 + 6) += 2;
      v69 = v7;
      result = (unsigned int *)WebCore::processNodes(&v71, v14, (WebCore::Node **)v40, v39, v54, (uint64_t)&v69);
      v69 = 0;
      v6 = v68;
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v7, a2);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
    else
    {
      v69 = 0;
      result = (unsigned int *)WebCore::processNodes(&v71, v14, (WebCore::Node **)v40, v39, v54, (uint64_t)&v69);
      v69 = 0;
      v6 = v68;
    }
    if (!v73)
    {
      v56 = 2;
      if (!(_DWORD)v39)
        goto LABEL_108;
      goto LABEL_180;
    }
    v55 = v72;
    *(_BYTE *)v6 = (_BYTE)v71;
    *((_QWORD *)v6 + 1) = v55;
    v56 = 1;
LABEL_105:
    v6[4] = 1;
    if (!(_DWORD)v39)
      goto LABEL_108;
LABEL_180:
    v65 = 8 * v39;
    v66 = (unsigned int **)v40;
    v6 = v68;
    do
    {
      result = *v66;
      *v66 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      ++v66;
      v65 -= 8;
    }
    while (v65);
LABEL_108:
    if (v40)
      result = (unsigned int *)WTF::fastFree((WTF *)v40, a2);
    if (v56 == 2)
      goto LABEL_173;
    goto LABEL_139;
  }
  if (((1 << v10) & 0x118) != 0)
  {
    v17 = (char *)v8 + 80;
    v16 = *((_QWORD *)v8 + 10);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 4);
    if (v16 >= a6)
      v18 = (const WTF::String *)a6;
    else
      v18 = (const WTF::String *)v16;
    if (v18 >= a5)
      v19 = (const WTF::String *)a5;
    else
      v19 = (const WTF::String *)v18;
    if (((_BYTE)a2 - 1) > 1u)
    {
      v7 = 0;
    }
    else
    {
      v20 = a2;
      v21 = result;
      result = (unsigned int *)(*(_QWORD *(**)(WTF **__return_ptr, WebCore::CharacterData *, _QWORD, uint64_t))(*(_QWORD *)v8 + 136))(&v74, *a4, *(_QWORD *)(*((_QWORD *)v8 + 5) + 8), 2);
      v22 = v74;
      v74 = 0;
      v24 = (uint64_t *)((char *)v22 + 80);
      v23 = *((_QWORD *)v22 + 10);
      if (v23)
      {
        v25 = *(_DWORD *)(v23 + 4);
        v26 = v25 - v18;
        if (v25 != (_DWORD)v18)
        {
          if (v25 < v18)
          {
LABEL_19:
            v7 = 0;
            *(_BYTE *)v21 = 0;
            *((_QWORD *)v21 + 1) = 0;
            v21[4] = 1;
            goto LABEL_130;
          }
          WTF::makeStringByRemoving((WTF *)((char *)v22 + 80), v18);
          (*(void (**)(WTF *, WTF::StringImpl **, const WTF::String *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 376))(v22, &v71, v18, v26, 0, 1);
          result = (unsigned int *)v71;
          v71 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
            else
              *result -= 2;
          }
        }
      }
      else if ((_DWORD)v18)
      {
        goto LABEL_19;
      }
      if ((_DWORD)v19)
      {
        v57 = *v24;
        if (*v24)
          LODWORD(v57) = *(_DWORD *)(v57 + 4);
        if (v57 >= v19)
          v58 = v19;
        else
          v58 = v57;
        WTF::makeStringByRemoving((WTF *)((char *)v22 + 80), 0);
        (*(void (**)(WTF *, WTF::StringImpl **, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 376))(v22, &v71, 0, v58, 0, 1);
        result = (unsigned int *)v71;
        v71 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *result -= 2;
        }
      }
      v7 = *a3;
      if (*a3)
      {
        *((_DWORD *)v7 + 6) += 2;
        v6 = v21;
        if ((*((_WORD *)v7 + 14) & 4) == 0)
        {
          LOBYTE(v71) = 1;
          v72 = 0;
          goto LABEL_129;
        }
        result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)v7, v22, (uint64_t)&v71);
        if (v73)
        {
LABEL_129:
          v59 = v72;
          *(_BYTE *)v21 = (_BYTE)v71;
          *((_QWORD *)v21 + 1) = v59;
          v21[4] = 1;
LABEL_130:
          if (*((_DWORD *)v22 + 6) == 2)
          {
            if ((*((_WORD *)v22 + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef(v22, a2);
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
LABEL_139:
          if (!v7)
            return result;
          goto LABEL_140;
        }
        v14 = v20;
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef(v22, a2);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      else
      {
        v7 = v22;
        v6 = v21;
        v14 = v20;
      }
    }
    if (v14 <= 1)
    {
      if (*(_QWORD *)v17)
      {
        v60 = *(_DWORD *)(*(_QWORD *)v17 + 4);
        if (v60 < v19)
        {
LABEL_138:
          *(_BYTE *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          v6[4] = 1;
          goto LABEL_139;
        }
      }
      else
      {
        if ((_DWORD)v19)
          goto LABEL_138;
        v60 = 0;
      }
      v63 = v60 - (_DWORD)v19;
      v64 = v63 >= (int)v18 - (int)v19 ? ((_DWORD)v18 - (_DWORD)v19) : v63;
      WTF::makeStringByRemoving((WebCore::CharacterData *)((char *)v8 + 80), v19);
      (*(void (**)(WebCore::CharacterData *, WTF::StringImpl **, const WTF::String *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 376))(v8, &v71, v19, v64, 0, 1);
      result = (unsigned int *)v71;
      v71 = 0;
      if (result)
        goto LABEL_171;
    }
    goto LABEL_173;
  }
  if (v10 != 7)
    goto LABEL_173;
  v27 = a2;
  v28 = *((_QWORD *)v8 + 10);
  v29 = result;
  if (v28)
    LODWORD(v28) = *(_DWORD *)(v28 + 4);
  if (v28 >= a6)
    v30 = a6;
  else
    v30 = v28;
  if (v30 >= a5)
    v31 = a5;
  else
    v31 = v30;
  if (((_BYTE)a2 - 1) > 1u)
  {
    v7 = 0;
    goto LABEL_149;
  }
  (*(void (**)(WebCore::CharacterData **__return_ptr, WebCore::CharacterData *, _QWORD, uint64_t))(*(_QWORD *)v8 + 136))(&v70, *a4, *(_QWORD *)(*((_QWORD *)v8 + 5) + 8), 2);
  v33 = v70;
  v70 = 0;
  v34 = (WTF::StringImpl *)*((_QWORD *)v33 + 10);
  if (v34)
  {
    v32 = (const WTF::StringImpl *)(v30 - v31);
    if ((_DWORD)v31 || *((_DWORD *)v34 + 1) > v32)
    {
      WTF::StringImpl::substring(v34);
    }
    else
    {
      *(_DWORD *)v34 += 2;
      v71 = v34;
    }
  }
  else
  {
    v71 = 0;
  }
  WebCore::CharacterData::setData(v33, &v71, v32);
  result = (unsigned int *)v71;
  v71 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *result -= 2;
  }
  v7 = *a3;
  if (!*a3)
  {
    v7 = v33;
    goto LABEL_149;
  }
  *((_DWORD *)v7 + 6) += 2;
  if ((*((_WORD *)v7 + 14) & 4) != 0)
  {
    result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)v7, v33, (uint64_t)&v71);
    if (v73)
      goto LABEL_42;
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v33, a2);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
LABEL_149:
    if (v27 > 1)
    {
      v6 = v29;
    }
    else
    {
      WTF::makeStringByRemoving((WebCore::CharacterData *)((char *)v8 + 80), (const WTF::String *)v31);
      WebCore::CharacterData::setData(v8, &v71, v61);
      result = (unsigned int *)v71;
      v71 = 0;
      v6 = v29;
      if (result)
      {
LABEL_171:
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v62);
        else
          *result -= 2;
      }
    }
LABEL_173:
    *(_QWORD *)v6 = v7;
    v6[4] = 0;
    return result;
  }
  LOBYTE(v71) = 1;
  v72 = 0;
LABEL_42:
  v35 = v72;
  *(_BYTE *)v29 = (_BYTE)v71;
  *((_QWORD *)v29 + 1) = v35;
  v29[4] = 1;
  if (*((_DWORD *)v33 + 6) == 2)
  {
    if ((*((_WORD *)v33 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(v33, a2);
  }
  else
  {
    *((_DWORD *)v33 + 6) -= 2;
  }
LABEL_140:
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v7, a2);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  return result;
}

unsigned int *WebCore::processAncestorsAndTheirSiblings(unsigned int *result, WebCore::Node *a2, _QWORD *a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v11;
  BOOL v12;
  void *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  WebCore::Node *v22;
  WebCore::ContainerNode **v23;
  BOOL v24;
  uint64_t v25;
  WebCore::Node *v26;
  char *v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unsigned int **v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Node *v41;
  WebCore::Node *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int **v46;
  uint64_t *v47;
  WebCore::Node *v48;
  unsigned int **v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::ContainerNode *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int **v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  unsigned int **v65;
  unsigned int **v66;
  uint64_t v67;
  unsigned int **v68;
  uint64_t v69;
  unsigned int **v70;
  WTF *v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  WebCore::Node *v75;
  WebCore::Node *v76;
  WebCore::Node *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  WebCore::Node *v81;

  v6 = result;
  v7 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v7)
  {
    *(_BYTE *)result = 0;
    result[4] = -1;
    if ((_DWORD)v7 != -1)
    {
      result = (unsigned int *)((uint64_t (*)(uint64_t *, unsigned int *, uint64_t))off_1E33A7248[v7])(&v78, result, a5);
      v6[4] = v7;
    }
    return result;
  }
  v73 = (int)a2;
  v72 = result;
  v75 = *(WebCore::Node **)a5;
  *(_QWORD *)a5 = 0;
  v11 = a3[4];
  if (v11)
    v12 = v11 == a6;
  else
    v12 = 1;
  if (v12)
  {
    v15 = 0;
    v13 = 0;
  }
  else
  {
    v13 = 0;
    LODWORD(v14) = 0;
    v15 = 0;
    do
    {
      if (v15 == (_DWORD)v14)
      {
        v16 = ((unint64_t)v14 >> 2) + v14;
        if (v16 >= 0x10)
          v17 = v16 + 1;
        else
          v17 = 16;
        if (v17 <= (unint64_t)v15 + 1)
          v14 = v15 + 1;
        else
          v14 = v17;
        if (v14 >> 29)
        {
          __break(0xC471u);
LABEL_209:
          JUMPOUT(0x195A2EC98);
        }
        v18 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
        result = (unsigned int *)memcpy(v18, v13, 8 * v15);
        if (v13)
        {
          if (v18 == v13)
          {
            LODWORD(v14) = 0;
            v18 = 0;
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v13, a2);
        }
        v13 = v18;
      }
      *(_DWORD *)(v11 + 24) += 2;
      *((_QWORD *)v13 + v15++) = v11;
      v11 = *(_QWORD *)(v11 + 32);
      if (v11)
        v19 = v11 == a6;
      else
        v19 = 1;
    }
    while (!v19);
  }
  v71 = (WTF *)v13;
  if (a4)
    v20 = a3[6] & 0xFFFFFFFFFFFFLL;
  else
    v20 = a3[7];
  v21 = v73;
  v22 = v75;
  if (v20)
  {
    *(_DWORD *)(v20 + 24) += 2;
    v21 = v73;
  }
  if (!v15)
  {
    v25 = v20;
LABEL_177:
    *(_QWORD *)v72 = v22;
    v72[4] = 0;
    v22 = 0;
    goto LABEL_178;
  }
  v74 = v21 - 1;
  v23 = (WebCore::ContainerNode **)v71;
  while (1)
  {
    if (v74 > 1)
      goto LABEL_50;
    result = (unsigned int *)*v23;
    v24 = !*v23 || (*((_WORD *)*v23 + 14) & 0x80) == 0;
    if (v24 || (result[48] & 4) != 0)
      break;
    v25 = v20;
LABEL_140:
    ++v23;
    v20 = v25;
    if (v23 == (WebCore::ContainerNode **)((char *)v71 + 8 * v15))
      goto LABEL_177;
  }
  result = (unsigned int *)(*(_QWORD *(**)(WebCore::Node **__return_ptr, unsigned int *, _QWORD, _QWORD))(*(_QWORD *)result + 136))(&v81, result, *(_QWORD *)(*((_QWORD *)result + 5) + 8), 0);
  if (!v22)
  {
    v26 = v81;
LABEL_49:
    v22 = v26;
LABEL_50:
    if (!v20)
    {
      v38 = 0;
      v27 = 0;
      v43 = 1;
      goto LABEL_130;
    }
    v76 = v22;
    v27 = 0;
    LODWORD(v28) = 0;
    v29 = 0;
    v30 = 1;
    v31 = v20;
    do
    {
      v32 = v30;
      v33 = v29;
      if (v29 == (_DWORD)v28)
      {
        v34 = v29 + 1;
        v35 = ((unint64_t)v28 >> 2) + v28;
        if (v35 >= 0x10)
          v36 = v35 + 1;
        else
          v36 = 16;
        if (v36 <= v34)
          v28 = v33 + 1;
        else
          v28 = v36;
        if (v28 >> 29)
        {
          __break(0xC471u);
          goto LABEL_209;
        }
        v37 = (char *)WTF::fastMalloc((WTF *)(8 * v28));
        result = (unsigned int *)memcpy(v37, v27, 8 * v33);
        if (v27)
        {
          if (v37 == v27)
          {
            LODWORD(v28) = 0;
            v37 = 0;
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v27, a2);
        }
        v27 = v37;
      }
      *(_DWORD *)(v31 + 24) += 2;
      *(_QWORD *)&v27[8 * v33] = v31;
      if (a4)
        v31 = *(_QWORD *)(v31 + 48) & 0xFFFFFFFFFFFFLL;
      else
        v31 = *(_QWORD *)(v31 + 56);
      v29 = v33 + 1;
      v30 = v32 + 1;
    }
    while (v31);
    v38 = (unsigned int **)&v27[8 * v29];
    if ((_DWORD)v33 != -1)
    {
      v22 = v76;
      if (v73)
      {
        if (v73 != 1)
        {
          if (v73 == 2)
          {
            v70 = (unsigned int **)&v27[8 * v29];
            if (a4)
            {
              v39 = 0;
              v40 = 8 * v32;
              while (1)
              {
                (*(void (**)(WebCore::Node **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)&v27[v39]
                                                                                              + 136))(&v81, *(_QWORD *)&v27[v39], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v27[v39] + 40) + 8), 2);
                if (v76 && (*((_WORD *)v76 + 14) & 4) != 0)
                {
                  v41 = (WebCore::Node *)*((_QWORD *)v76 + 10);
                  if (v41)
                    *((_DWORD *)v41 + 6) += 2;
                  v77 = v41;
                  WebCore::ContainerNode::insertBefore((uint64_t)v76, (uint64_t *)v81, &v77, (uint64_t)&v78);
                  v42 = v77;
                  v77 = 0;
                  if (v42)
                  {
                    if (*((_DWORD *)v42 + 6) == 2)
                    {
                      if ((*((_WORD *)v42 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v42, a2);
                    }
                    else
                    {
                      *((_DWORD *)v42 + 6) -= 2;
                    }
                  }
                }
                else
                {
                  LOBYTE(v78) = 1;
                  v79 = 0;
                  v80 = 1;
                }
                result = (unsigned int *)v81;
                v81 = 0;
                if (result)
                {
                  if (result[6] == 2)
                  {
                    if ((*((_WORD *)result + 15) & 0x400) == 0)
                      result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                  }
                  else
                  {
                    result[6] -= 2;
                  }
                }
                if (v80)
                  break;
                v39 += 8;
                if (v40 == v39)
                  goto LABEL_129;
              }
            }
            else
            {
              v55 = 0;
              while (1)
              {
                result = (unsigned int *)(*(_QWORD *(**)(WebCore::Node **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)&v27[v55] + 136))(&v81, *(_QWORD *)&v27[v55], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v27[v55] + 40) + 8), 2);
                a2 = v81;
                if (v76 && (*((_WORD *)v76 + 14) & 4) != 0)
                {
                  result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)v76, v81, (uint64_t)&v78);
                  a2 = v81;
                }
                else
                {
                  LOBYTE(v78) = 1;
                  v79 = 0;
                  v80 = 1;
                }
                v81 = 0;
                if (a2)
                {
                  if (*((_DWORD *)a2 + 6) == 2)
                  {
                    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
                      result = WebCore::Node::removedLastRef(a2, a2);
                  }
                  else
                  {
                    *((_DWORD *)a2 + 6) -= 2;
                  }
                }
                if (v80)
                  break;
                v55 += 8;
                if (8 * v32 == v55)
                {
LABEL_129:
                  v43 = 0;
                  v38 = v70;
                  goto LABEL_130;
                }
              }
            }
            v52 = 0;
            v56 = v79;
            *(_BYTE *)v72 = v78;
            *((_QWORD *)v72 + 1) = v56;
            v72[4] = 1;
            v38 = v70;
            goto LABEL_159;
          }
LABEL_109:
          v43 = 0;
LABEL_130:
          v57 = *v23;
          if (a4)
          {
            v25 = *((_QWORD *)v57 + 6) & 0xFFFFFFFFFFFFLL;
            if (!v25)
              goto LABEL_133;
          }
          else
          {
            v25 = *((_QWORD *)v57 + 7);
            if (!v25)
            {
LABEL_133:
              if (v20)
              {
                if (*(_DWORD *)(v20 + 24) == 2)
                {
                  if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                  {
                    v60 = v38;
                    result = WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
                    v38 = v60;
                  }
                }
                else
                {
                  *(_DWORD *)(v20 + 24) -= 2;
                }
              }
              v52 = 1;
              v20 = v25;
              if ((v43 & 1) != 0)
              {
                if (!v27)
                  goto LABEL_139;
                goto LABEL_138;
              }
LABEL_159:
              v65 = (unsigned int **)v27;
              do
              {
                result = *v65;
                *v65 = 0;
                if (result)
                {
                  if (result[6] == 2)
                  {
                    if ((*((_WORD *)result + 15) & 0x400) == 0)
                    {
                      v66 = v38;
                      result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                      v38 = v66;
                    }
                  }
                  else
                  {
                    result[6] -= 2;
                  }
                }
                ++v65;
              }
              while (v65 != v38);
              v25 = v20;
              if (!v27)
              {
LABEL_139:
                if (!v52)
                  goto LABEL_178;
                goto LABEL_140;
              }
LABEL_138:
              result = (unsigned int *)WTF::fastFree((WTF *)v27, a2);
              goto LABEL_139;
            }
          }
          *(_DWORD *)(v25 + 24) += 2;
          goto LABEL_133;
        }
        if (a4)
        {
          if (v76)
          {
            v44 = 0;
            v45 = 8 * v32;
            while (1)
            {
              v46 = v38;
              if ((*((_WORD *)v76 + 14) & 4) == 0)
                break;
              v47 = *(uint64_t **)&v27[v44];
              v48 = (WebCore::Node *)*((_QWORD *)v76 + 10);
              if (v48)
                *((_DWORD *)v48 + 6) += 2;
              v81 = v48;
              WebCore::ContainerNode::insertBefore((uint64_t)v76, v47, &v81, (uint64_t)&v78);
              result = (unsigned int *)v81;
              v81 = 0;
              v38 = v46;
              if (result)
              {
                if (result[6] == 2)
                {
                  if ((*((_WORD *)result + 15) & 0x400) == 0)
                  {
                    result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                    v38 = v46;
                  }
                }
                else
                {
                  result[6] -= 2;
                }
              }
              if (v80)
              {
                v62 = v78;
                v61 = v79;
                goto LABEL_154;
              }
              v44 += 8;
              if (v45 == v44)
                goto LABEL_109;
            }
          }
          else
          {
            v46 = (unsigned int **)&v27[8 * v29];
          }
          v61 = 0;
          v62 = 1;
LABEL_154:
          v52 = 0;
          *(_BYTE *)v72 = v62;
          *((_QWORD *)v72 + 1) = v61;
          v72[4] = 1;
          v38 = v46;
          goto LABEL_159;
        }
        v49 = (unsigned int **)&v27[8 * v29];
        if (v76)
        {
          v58 = 0;
          v59 = 8 * v32;
          while ((*((_WORD *)v76 + 14) & 4) != 0)
          {
            result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)v76, *(WebCore::Node **)&v27[v58], (uint64_t)&v78);
            if (v80)
            {
              v64 = v78;
              v63 = v79;
              goto LABEL_157;
            }
            v58 += 8;
            if (v59 == v58)
              goto LABEL_113;
          }
        }
        v63 = 0;
        v64 = 1;
LABEL_157:
        v52 = 0;
        v54 = v72;
        *(_BYTE *)v72 = v64;
        *((_QWORD *)v72 + 1) = v63;
      }
      else
      {
        v49 = (unsigned int **)&v27[8 * v29];
        v50 = 0;
        v51 = 8 * v32;
        while (1)
        {
          result = (unsigned int *)WebCore::ContainerNode::removeChild(*v23, *(WebCore::Node **)&v27[v50], &v78);
          if (v80)
            break;
          v50 += 8;
          if (v51 == v50)
          {
LABEL_113:
            v43 = 0;
            v38 = v49;
            goto LABEL_130;
          }
        }
        v52 = 0;
        v53 = v79;
        v54 = v72;
        *(_BYTE *)v72 = v78;
        *((_QWORD *)v72 + 1) = v53;
      }
      v54[4] = 1;
      v38 = v49;
      goto LABEL_159;
    }
    v43 = 1;
    v22 = v76;
    goto LABEL_130;
  }
  result = (unsigned int *)v81;
  if (!v81 || (*((_WORD *)v81 + 14) & 4) == 0)
  {
    *(_BYTE *)v72 = 1;
    *((_QWORD *)v72 + 1) = 0;
    v72[4] = 1;
    v81 = 0;
    goto LABEL_197;
  }
  result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)v81, v22, (uint64_t)&v78);
  if (!v80)
  {
    v26 = v81;
    v81 = 0;
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v22, a2);
        result = (unsigned int *)v81;
        v81 = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
          }
          else
          {
            result[6] -= 2;
          }
        }
      }
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
    goto LABEL_49;
  }
  v69 = v79;
  result = (unsigned int *)v81;
  *(_BYTE *)v72 = v78;
  *((_QWORD *)v72 + 1) = v69;
  v72[4] = 1;
  v81 = 0;
  if (!result)
    goto LABEL_199;
LABEL_197:
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  else
  {
    result[6] -= 2;
  }
LABEL_199:
  v25 = v20;
LABEL_178:
  if (v25)
  {
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v25, a2);
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
  }
  if (v15)
  {
    v67 = 8 * v15;
    v68 = (unsigned int **)v71;
    do
    {
      result = *v68;
      *v68 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      ++v68;
      v67 -= 8;
    }
    while (v67);
  }
  if (v71)
    result = (unsigned int *)WTF::fastFree(v71, a2);
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v22, a2);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::processNodes(_QWORD *result, int a2, WebCore::Node **a3, unsigned int a4, WebCore::ContainerNode *this, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WebCore::Node *v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WebCore::Node *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v6 = result;
  if (!a4)
    goto LABEL_18;
  if (!a2)
  {
    if (this)
    {
      v12 = 8 * a4;
      while ((*((_WORD *)this + 14) & 4) != 0)
      {
        result = WebCore::ContainerNode::removeChild(this, *a3, &v23);
        if (v25)
        {
          v21 = v23;
          v20 = v24;
          goto LABEL_39;
        }
        ++a3;
        v12 -= 8;
        if (!v12)
          goto LABEL_18;
      }
    }
    v20 = 0;
    v21 = 5;
LABEL_39:
    *(_BYTE *)v6 = v21;
    v6[1] = v20;
    goto LABEL_40;
  }
  if (a2 == 2)
  {
    v13 = 8 * a4;
    while (1)
    {
      v14 = *(_QWORD **)a6;
      result = (*(_QWORD *(**)(WebCore::Node **__return_ptr, WebCore::Node *, _QWORD, uint64_t))(*(_QWORD *)*a3 + 136))(&v22, *a3, *(_QWORD *)(*((_QWORD *)*a3 + 5) + 8), 2);
      v15 = v22;
      if (v14)
        v16 = (*((_WORD *)v14 + 14) & 4) == 0;
      else
        v16 = 1;
      if (v16)
      {
        LOBYTE(v23) = 1;
        v24 = 0;
        v25 = 1;
      }
      else
      {
        result = (_QWORD *)WebCore::ContainerNode::appendChild((uint64_t)v14, v22, (uint64_t)&v23);
        v15 = v22;
      }
      v22 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef(v15, v15);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      if (v25)
        break;
      ++a3;
      v13 -= 8;
      if (!v13)
        goto LABEL_18;
    }
    v17 = v24;
    *(_BYTE *)v6 = v23;
    v6[1] = v17;
LABEL_40:
    *((_BYTE *)v6 + 16) = 1;
    return result;
  }
  if (a2 != 1)
  {
LABEL_18:
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    return result;
  }
  v9 = 8 * a4;
  while (1)
  {
    result = *(_QWORD **)a6;
    if (!*(_QWORD *)a6 || (*(_WORD *)(*(_QWORD *)a6 + 28) & 4) == 0)
      break;
    result = (_QWORD *)WebCore::ContainerNode::appendChild((uint64_t)result, *a3, (uint64_t)&v23);
    if (v25)
    {
      v18 = v23;
      v19 = v24;
      goto LABEL_36;
    }
    ++a3;
    v9 -= 8;
    if (!v9)
      goto LABEL_18;
  }
  v19 = 0;
  v18 = 1;
LABEL_36:
  *(_BYTE *)v6 = v18;
  v6[1] = v19;
  *((_BYTE *)v6 + 16) = 1;
  return result;
}

uint64_t WebCore::Range::extractContents@<X0>(WebCore::Range *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Range *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;

  WebCore::Range::processContents((uint64_t)this, (WebCore::Node *)1, (uint64_t)&v8);
  v3 = v10;
  if (!v10)
  {
    v5 = v8;
    v8 = 0;
    *(_QWORD *)a2 = v5;
    goto LABEL_5;
  }
  if (v10 == 1)
  {
    v4 = v9;
    v9 = 0;
    *(_BYTE *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v4;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v3;
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v3])(&v11, &v8);
  }
  v7 = (WebCore::Range *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Range::cloneContents(v7);
}

unsigned int *WebCore::Range::cloneContents@<X0>(WebCore::Range *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;

  WebCore::Range::processContents((uint64_t)this, (WebCore::Node *)2, (uint64_t)&v10);
  v3 = v12;
  if (!v12)
  {
    v5 = v10;
    v10 = 0;
    *(_QWORD *)a2 = v5;
    goto LABEL_5;
  }
  if (v12 == 1)
  {
    v4 = v11;
    v11 = 0;
    *(_BYTE *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v4;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v3;
    return (unsigned int *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v3])(&v13, &v10);
  }
  v7 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Range::insertNode(v7, v8, v9);
}

unsigned int *WebCore::Range::insertNode@<X0>(unsigned int *result@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  WebCore::Node **v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::Node *v11;
  WTF::StringImpl *Ref;
  WTF::StringImpl *v13;
  int v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  int v17;
  int v18;
  int v19;
  WebCore::Node *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WebCore::Node *v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  __int16 v34;
  __int16 v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  WebCore::Node *v44;
  char v45[8];
  WTF::StringImpl *v46;
  char v47;
  WebCore::Node *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  char v53;
  WebCore::Node *v54;

  v4 = *((_QWORD *)result + 4);
  v5 = *(unsigned __int16 *)(v4 + 28);
  if ((v5 >> 12) - 7 <= 1)
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v6 = (WebCore::Node **)a2;
  v7 = (uint64_t)result;
  if ((v5 & 2) != 0)
    v8 = *((_QWORD *)result + 4);
  else
    v8 = 0;
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v9 + 2;
    v10 = *(_QWORD *)(v4 + 32);
    if (!v10)
    {
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_56;
    }
    a2 = *(WebCore::Node **)a2;
    if (*v6 != (WebCore::Node *)v4)
      goto LABEL_9;
  }
  else
  {
    a2 = *(WebCore::Node **)a2;
    if (*v6 != (WebCore::Node *)v4)
    {
      if ((v5 & 4) == 0)
      {
        v54 = 0;
LABEL_12:
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 16) = 1;
        goto LABEL_51;
      }
      v36 = result[10];
      v37 = *(_QWORD *)(v4 + 80);
      if (v36 && v37)
      {
        v38 = v36 - 1;
        do
        {
          v37 = *(_QWORD *)(v37 + 56);
          v40 = v38-- != 0;
        }
        while (v37 && v40);
      }
      if (!v37)
      {
        v11 = 0;
        goto LABEL_10;
      }
      v10 = *(_QWORD *)(v37 + 32);
      v4 = v37;
LABEL_9:
      v11 = (WebCore::Node *)v4;
      *(_DWORD *)(v4 + 24) += 2;
      v4 = v10;
LABEL_10:
      v54 = v11;
      if (!v4 || (*(_WORD *)(v4 + 28) & 4) == 0)
        goto LABEL_12;
      *(_DWORD *)(v4 + 24) += 2;
      Ref = (WTF::StringImpl *)WebCore::ContainerNode::ensurePreInsertionValidity(v4, a2, v11, &v51);
      if (v53)
      {
        v13 = v52;
        *(_BYTE *)a3 = v51;
        *(_QWORD *)(a3 + 8) = v13;
        *(_BYTE *)(a3 + 16) = 1;
        goto LABEL_49;
      }
      {
        v14 = qword_1EE2F5808;
      }
      else
      {
        v14 = 0;
        WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
        unk_1EE2F5800 = 0;
        qword_1EE2F5808 = 0;
      }
      LODWORD(qword_1EE2F5808) = v14 + 1;
      if (v8)
      {
        Ref = WebCore::Text::splitText((WebCore::Text *)v8, *(_DWORD *)(v7 + 40), (uint64_t)&v48);
        if ((_DWORD)v50)
        {
          if ((_DWORD)v50 == 1)
          {
LABEL_39:
            v22 = v49;
            *(_BYTE *)a3 = (_BYTE)v48;
            *(_QWORD *)(a3 + 8) = v22;
            *(_BYTE *)(a3 + 16) = 1;
            goto LABEL_40;
          }
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        v15 = v48;
        v48 = 0;
        v16 = v54;
        v54 = v15;
        if (!v16)
          goto LABEL_128;
        v17 = *((_DWORD *)v16 + 6);
        v18 = v17 - 2;
        if (v17 != 2)
        {
          v19 = 0;
          *((_DWORD *)v16 + 6) = v18;
LABEL_29:
          Ref = (WTF::StringImpl *)((uint64_t (*)(char *, WebCore::Node **))off_1E33A7258[v19])(v45, &v48);
          goto LABEL_30;
        }
        if ((*((_WORD *)v16 + 15) & 0x400) != 0)
        {
LABEL_128:
          v19 = 0;
          goto LABEL_29;
        }
        Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef(v16, a2);
        v19 = v50;
        if ((_DWORD)v50 != -1)
          goto LABEL_29;
      }
LABEL_30:
      a2 = *v6;
      if (v54 == *v6)
      {
        v20 = (WebCore::Node *)*((_QWORD *)a2 + 7);
        if (v20)
          *((_DWORD *)v20 + 6) += 2;
        v54 = v20;
        if (*((_DWORD *)a2 + 6) == 2)
        {
          if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          {
            Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef(a2, a2);
            a2 = *v6;
          }
        }
        else
        {
          *((_DWORD *)a2 + 6) -= 2;
        }
      }
      v21 = *((_QWORD *)a2 + 4);
      if (v21)
      {
        *(_DWORD *)(v21 + 24) += 2;
        Ref = WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v21, a2, &v48);
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          v34 = *(_WORD *)(v21 + 30);
          if ((v34 & 0x400) == 0)
          {
            v35 = *(_WORD *)(v21 + 28);
            if ((v35 & 0xF000) == 0x9000)
            {
              Ref = (WTF::StringImpl *)WebCore::Document::removedLastRef((WebCore::Document *)v21, a2);
            }
            else
            {
              if ((v35 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
                v34 = *(_WORD *)(v21 + 30);
              }
              *(_WORD *)(v21 + 30) = v34 | 0x400;
              Ref = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
            }
          }
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
      }
      if ((_BYTE)v50)
        goto LABEL_39;
      if (v54)
      {
        v26 = *((_QWORD *)v54 + 6) & 0xFFFFFFFFFFFFLL;
        if (v26)
        {
          v27 = 0;
          do
          {
            ++v27;
            v26 = *(_QWORD *)(v26 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v26);
          goto LABEL_72;
        }
      }
      else
      {
        v28 = *(_QWORD *)(v4 + 80);
        if (v28)
        {
          v27 = 0;
          do
          {
            ++v27;
            v28 = *(_QWORD *)(v28 + 56);
          }
          while (v28);
LABEL_72:
          v29 = *v6;
          v30 = 1;
          if (v29 && (*((_WORD *)v29 + 14) & 0xF000) == 0xB000)
          {
            v31 = *((_QWORD *)v29 + 10);
            if (v31)
            {
              v30 = 0;
              do
              {
                ++v30;
                v31 = *(_QWORD *)(v31 + 56);
              }
              while (v31);
            }
            else
            {
              v30 = 0;
            }
          }
          Ref = WebCore::ContainerNode::insertBefore(v4, (uint64_t *)v29, &v54, (uint64_t)v45);
          if (v47)
          {
            v32 = v46;
            *(_BYTE *)a3 = v45[0];
            *(_QWORD *)(a3 + 8) = v32;
            *(_BYTE *)(a3 + 16) = 1;
          }
          else
          {
            if (*(_QWORD *)(v7 + 32) == *(_QWORD *)(v7 + 56) && *(_DWORD *)(v7 + 40) == *(_DWORD *)(v7 + 64))
            {
              v44 = (WebCore::Node *)v4;
              WebCore::Range::setEnd(v7, (uint64_t *)&v44, v30 + v27, a3);
              Ref = v44;
              if (v44)
              {
                if (*((_DWORD *)v44 + 6) == 2)
                {
                  if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                    Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef(v44, a2);
                }
                else
                {
                  *((_DWORD *)v44 + 6) -= 2;
                }
              }
              if (v47)
              {
                Ref = v46;
                v46 = 0;
                if (Ref)
                {
                  if (*(_DWORD *)Ref != 2)
                  {
                    v4 = 0;
                    *(_DWORD *)Ref -= 2;
                    goto LABEL_120;
                  }
                  Ref = (WTF::StringImpl *)WTF::StringImpl::destroy(Ref, a2);
                }
              }
              v4 = 0;
              goto LABEL_120;
            }
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
          }
LABEL_120:
          if ((_BYTE)v50)
          {
            Ref = v49;
            v49 = 0;
            if (Ref)
            {
              if (*(_DWORD *)Ref == 2)
                Ref = (WTF::StringImpl *)WTF::StringImpl::destroy(Ref, a2);
              else
                *(_DWORD *)Ref -= 2;
            }
          }
LABEL_40:
          {
            unk_1EE2F5800 = 0;
            qword_1EE2F5808 = 0xFFFFFFFFLL;
            WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
            goto LABEL_44;
          }
          LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
          if (!(_DWORD)qword_1EE2F5808)
          {
            v23 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
            v24 = dword_1EE2F5804;
            WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
            unk_1EE2F5800 = 0;
            if (!(_DWORD)v24)
            {
              if (!v23)
                goto LABEL_44;
LABEL_132:
              WTF::fastFree(v23, a2);
              goto LABEL_44;
            }
            v41 = 0;
            v42 = 16 * v24;
            v43 = (_DWORD *)((char *)v23 + 16 * v24);
            do
            {
              Ref = (WTF::StringImpl *)WebCore::ScopedEventQueue::dispatchEvent((uint64_t)Ref, (WTF *)((char *)v23 + v41));
              v41 += 16;
            }
            while (v42 != v41);
            WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v23, v43);
            if (v23)
              goto LABEL_132;
          }
LABEL_44:
          if (v53)
          {
            v25 = v52;
            v52 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
              {
                WTF::StringImpl::destroy(v25, a2);
                if (v4)
                {
LABEL_49:
                  if (*(_DWORD *)(v4 + 24) == 2)
                  {
                    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
                  }
                  else
                  {
                    *(_DWORD *)(v4 + 24) -= 2;
                  }
                }
LABEL_51:
                result = (unsigned int *)v54;
                v54 = 0;
                if (result)
                {
                  if (result[6] == 2)
                  {
                    if ((*((_WORD *)result + 15) & 0x400) == 0)
                      result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                  }
                  else
                  {
                    result[6] -= 2;
                  }
                }
                goto LABEL_54;
              }
              *(_DWORD *)v25 -= 2;
            }
          }
          if (v4)
            goto LABEL_49;
          goto LABEL_51;
        }
      }
      v27 = 0;
      goto LABEL_72;
    }
  }
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_54:
  if (!v8)
    return result;
  v9 = *(_DWORD *)(v8 + 24) - 2;
LABEL_56:
  if (v9)
  {
    *(_DWORD *)(v8 + 24) = v9;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
  }
  return result;
}

uint64_t WebCore::Range::startOffset(WebCore::Range *this)
{
  return *((unsigned int *)this + 10);
}

WTF::StringImpl *WebCore::Range::toString@<X0>(WebCore::Range *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *result;
  void *v8;
  WebCore::Node *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WebCore::Node *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  char v29;

  v3 = *((_QWORD *)this + 4);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *((unsigned int *)this + 10);
  v5 = *((_QWORD *)this + 7);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_DWORD *)this + 16);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  *(_DWORD *)(v3 + 24) += 2;
  v22 = v3;
  v23 = v4;
  *(_DWORD *)(v5 + 24) += 2;
  v24 = v5;
  v25 = v6;
  result = WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v20, (const WebCore::SimpleRange *)&v22);
  v9 = v20;
  if (v20)
  {
    while (1)
    {
      *((_DWORD *)v9 + 6) += 2;
      if ((*((_WORD *)v9 + 14) & 2) != 0)
        break;
LABEL_22:
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v8);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
      result = (WTF::StringImpl *)WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v20);
      v9 = v20;
      if (!v20)
        goto LABEL_32;
    }
    if ((WebCore::Node *)v3 == v9)
      v10 = v4;
    else
      v10 = 0;
    if ((WebCore::Node *)v5 == v9)
      v11 = v6;
    else
      v11 = -1;
    v12 = *((_QWORD *)v9 + 10);
    if (v12)
      v13 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
    else
      v13 = 0x100000000;
    if (v13 <= v10)
    {
LABEL_21:
      WTF::StringBuilder::append();
      goto LABEL_22;
    }
    LODWORD(v14) = v11 - v10;
    if ((int)v13 - (int)v10 <= v14)
    {
      if (!(_DWORD)v10)
      {
        v14 = v13;
        goto LABEL_20;
      }
      LODWORD(v14) = v13 - v10;
    }
    v14 = v14;
    v15 = v13 - v10;
    if ((v13 & 0x100000000) != 0)
    {
      if (v15 < v14)
        goto LABEL_73;
      v14 = v14 | 0x100000000;
    }
    else if (v15 < v14)
    {
LABEL_73:
      __break(1u);
      return result;
    }
LABEL_20:
    if ((v14 & 0x100000000) == 0)
    {
      WTF::StringBuilder::append();
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_32:
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    v17 = *((_DWORD *)v16 + 6) - 2;
    if (*((_DWORD *)v16 + 6) != 2)
    {
LABEL_34:
      *((_DWORD *)v16 + 6) = v17;
      goto LABEL_35;
    }
    if ((*((_WORD *)v16 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v16, v8);
      v16 = v20;
      v20 = 0;
      if (v16)
      {
        v17 = *((_DWORD *)v16 + 6) - 2;
        if (*((_DWORD *)v16 + 6) != 2)
          goto LABEL_34;
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v8);
      }
    }
  }
LABEL_35:
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v8);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v18 = v26;
  if (v26
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v26),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v26),
        (v18 = v26) != 0))
  {
    *(_DWORD *)v18 += 2;
  }
  *a2 = v18;
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v26;
  v26 = 0;
  if (!result)
  {
LABEL_50:
    if (v5)
      goto LABEL_51;
    goto LABEL_53;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_50;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
  if (v5)
  {
LABEL_51:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
LABEL_53:
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v3, v8);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Range::createContextualFragment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::Range *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl *v29[2];
  WTF::StringImpl **v30;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 40) + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = (WTF::StringImpl *)(v6 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29[0] = v9;
  v29[1] = (WTF::StringImpl *)&v25;
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_44;
  v30 = v29;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v26, &v30, a2);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  if (!v28)
  {
    v14 = *(_WORD *)(v5 + 28);
    if ((v14 & 0xD000 | 0x2000) != 0xB000
      && ((v15 = v5, (v14 & 8) != 0) || (v15 = *(_QWORD *)(v5 + 32)) != 0
                                     && (v14 = *(_WORD *)(v15 + 28), (v14 & 8) != 0)))
    {
      *(_DWORD *)(v15 + 24) += 2;
      if ((v14 & 0x10) == 0
        || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 8) + 3358) & 1) == 0
        || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        goto LABEL_27;
      }
      v16 = 0;
      v17 = v15;
    }
    else
    {
      v17 = 0;
      v16 = 1;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    *(_DWORD *)(v18 + 24) += 2;
    v19 = bmalloc::api::isoAllocate();
    v15 = v19;
    *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v19 + 24) = 0x101C00000002;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = v18 + 96;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    ++*(_DWORD *)(v18 + 3324);
    *(_QWORD *)(v19 + 80) = 0;
    *(_QWORD *)(v19 + 88) = 0;
    v21 = WebCore::HTMLNames::bodyTag;
    if (WebCore::HTMLNames::bodyTag)
      ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
    *(_QWORD *)(v19 + 96) = v21;
    *(_QWORD *)(v19 + 104) = 0;
    *(_QWORD *)v19 = off_1E33B5118;
    if ((v16 & 1) == 0)
    {
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17, v20);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
    }
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18, v20);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
    if (v28)
      goto LABEL_44;
LABEL_27:
    v22 = v26;
    v26 = 0;
    v29[0] = v22;
    WebCore::createContextualFragment(v15, (unsigned int **)v29, 3u, a3);
    result = v29[0];
    v29[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v15, v23);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
    goto LABEL_32;
  }
  if (v28 != 1)
  {
LABEL_44:
    v24 = (WebCore::Range *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::Range::cloneRange(v24);
  }
  v13 = v27;
  v27 = 0;
  *(_BYTE *)a3 = (_BYTE)v26;
  *(_QWORD *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_32:
  if (v28 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33A7268[v28])(v29, &v26);
  return result;
}

unsigned int *WebCore::Range::cloneRange@<X0>(WebCore::Range *this@<X0>, WebCore::Range **a2@<X8>)
{
  WebCore::Document *v4;
  WebCore::Range *v5;
  WebCore::Range *v6;
  WebCore::Node *v7;
  WTF::StringImpl *v8;
  WebCore::Node *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  _BYTE v12[8];
  WTF::StringImpl *v13;
  char v14;
  WebCore::Node *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v4 = (WebCore::Document *)*((_QWORD *)this + 3);
  v5 = (WebCore::Range *)bmalloc::api::isoAllocate();
  v6 = WebCore::Range::Range(v5, v4);
  *a2 = v6;
  v7 = (WebCore::Node *)*((_QWORD *)this + 4);
  *((_DWORD *)v7 + 6) += 2;
  v15 = v7;
  WebCore::Range::setStart((uint64_t)v6, (uint64_t *)&v15, *((_DWORD *)this + 10), (uint64_t)v16);
  if (v18 && v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v8);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v8);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  v9 = (WebCore::Node *)*((_QWORD *)this + 7);
  *((_DWORD *)v9 + 6) += 2;
  v15 = v9;
  WebCore::Range::setEnd((uint64_t)v5, (uint64_t *)&v15, *((_DWORD *)this + 16), (uint64_t)v12);
  if (v14 && v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = (unsigned int *)v15;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v15, v10);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Range::setStartAfter@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v3;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  void *v7;
  WebCore::Node *v8;

  v3 = (WebCore::Node *)*((_QWORD *)a2 + 4);
  if (v3)
  {
    *((_DWORD *)v3 + 6) += 2;
    v8 = v3;
    v4 = *((_QWORD *)a2 + 6);
    for (i = 1; ; ++i)
    {
      v6 = v4 & 0xFFFFFFFFFFFFLL;
      if (!v6)
        break;
      v4 = *(_QWORD *)(v6 + 48);
    }
    WebCore::Range::setStart((uint64_t)this, (uint64_t *)&v8, i, a3);
    this = (unsigned int *)v8;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v8, v7);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 20;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  return this;
}

unsigned int *WebCore::Range::setEndBefore@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v3;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  void *v7;
  WebCore::Node *v8;

  v3 = (WebCore::Node *)*((_QWORD *)a2 + 4);
  if (v3)
  {
    *((_DWORD *)v3 + 6) += 2;
    v8 = v3;
    v4 = *((_QWORD *)a2 + 6);
    for (i = 0; ; ++i)
    {
      v6 = v4 & 0xFFFFFFFFFFFFLL;
      if (!v6)
        break;
      v4 = *(_QWORD *)(v6 + 48);
    }
    WebCore::Range::setEnd((uint64_t)this, (uint64_t *)&v8, i, a3);
    this = (unsigned int *)v8;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v8, v7);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 20;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  return this;
}

unsigned int *WebCore::Range::setEndAfter@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v3;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  void *v7;
  WebCore::Node *v8;

  v3 = (WebCore::Node *)*((_QWORD *)a2 + 4);
  if (v3)
  {
    *((_DWORD *)v3 + 6) += 2;
    v8 = v3;
    v4 = *((_QWORD *)a2 + 6);
    for (i = 1; ; ++i)
    {
      v6 = v4 & 0xFFFFFFFFFFFFLL;
      if (!v6)
        break;
      v4 = *(_QWORD *)(v6 + 48);
    }
    WebCore::Range::setEnd((uint64_t)this, (uint64_t *)&v8, i, a3);
    this = (unsigned int *)v8;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v8, v7);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 20;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::Range::selectNodeContents@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*((_WORD *)a2 + 14) & 0xF000) == 0xA000)
  {
    *(_BYTE *)a3 = 20;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v4 = a2;
    v5 = this;
    *((_DWORD *)a2 + 6) += 2;
    v6 = *(_QWORD *)(this + 32);
    *(_QWORD *)(v5 + 32) = a2;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    *(_DWORD *)(v5 + 40) = 0;
    v7 = *(_QWORD *)(v5 + 48);
    *(_QWORD *)(v5 + 48) = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    *((_DWORD *)v4 + 6) += 2;
    v8 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 56) = v4;
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
          v4 = *(WebCore::Node **)(v5 + 56);
        }
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    v9 = *((_WORD *)v4 + 14);
    if (v4 && (v9 & 1) != 0)
    {
      v11 = *((_QWORD *)v4 + 10);
      if (v11)
        LODWORD(v11) = *(_DWORD *)(v11 + 4);
    }
    else if ((v9 & 4) != 0 && (v10 = *((_QWORD *)v4 + 10)) != 0)
    {
      LODWORD(v11) = 0;
      do
      {
        LODWORD(v11) = v11 + 1;
        v10 = *(_QWORD *)(v10 + 56);
      }
      while (v10);
    }
    else
    {
      LODWORD(v11) = 0;
    }
    *(_DWORD *)(v5 + 64) = v11;
    if ((v9 & 4) != 0)
    {
      v12 = *((_QWORD *)v4 + 11);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
    }
    else
    {
      v12 = 0;
    }
    v13 = *(_QWORD *)(v5 + 72);
    *(_QWORD *)(v5 + 72) = v12;
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    WebCore::Range::updateAssociatedSelection(v5);
    this = WebCore::Range::updateDocument((WebCore::Range *)v5);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return this;
}

unsigned int *WebCore::Range::surroundContents@<X0>(WebCore::Range *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int *result;
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebCore::Node *v26;
  WTF::StringImpl *v27;
  char v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;

  *((_DWORD *)a2 + 6) += 2;
  v7 = *((_QWORD *)this + 4);
  v8 = *(_DWORD *)(v7 + 24) + 2;
  *(_DWORD *)(v7 + 24) = v8;
  if ((*(_BYTE *)(v7 + 28) & 2) != 0)
  {
    v9 = *(_QWORD *)(v7 + 32);
    if (v9)
    {
      *(_DWORD *)(v9 + 24) += 2;
      v8 = *(_DWORD *)(v7 + 24);
    }
    v10 = v8 - 2;
    if (v10)
    {
      *(_DWORD *)(v7 + 24) = v10;
    }
    else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
  }
  else
  {
    v9 = v7;
  }
  result = (unsigned int *)*((_QWORD *)this + 7);
  v12 = result[6] + 2;
  result[6] = v12;
  if ((result[7] & 2) != 0)
  {
    v13 = (unsigned int *)*((_QWORD *)result + 4);
    if (v13)
    {
      v13[6] += 2;
      v12 = result[6];
    }
    v14 = v12 - 2;
    if (v14)
    {
      result[6] = v14;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
  }
  else
  {
    v13 = result;
  }
  if ((unsigned int *)v9 != v13)
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_20;
  }
  v15 = *((unsigned __int16 *)a2 + 14) >> 12;
  v16 = v15 > 0xB;
  v17 = (1 << v15) & 0xE04;
  if (v16 || v17 == 0)
  {
    WebCore::Range::processContents((uint64_t)this, (WebCore::Node *)1, (uint64_t)&v31);
    if (v33)
    {
      if (v33 == 1)
      {
        v19 = v32;
        LOBYTE(v29[0]) = v31;
        v20 = 1;
        v30 = 1;
        v29[1] = 0;
        *(_BYTE *)a3 = v31;
        *(_QWORD *)(a3 + 8) = v19;
        *(_BYTE *)(a3 + 16) = 1;
        goto LABEL_57;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v3 = v31;
      v29[0] = v31;
      v30 = 0;
      if ((*((_WORD *)a2 + 14) & 4) != 0 && *((_QWORD *)a2 + 10))
        WebCore::ContainerNode::replaceAll(a2, 0);
      *((_DWORD *)a2 + 6) += 2;
      v26 = a2;
      WebCore::Range::insertNode((unsigned int *)this, (WebCore::Node *)&v26, (uint64_t)&v31);
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2, v21);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      if ((_BYTE)v33)
      {
        v22 = v31;
        v23 = v32;
        goto LABEL_55;
      }
      v29[0] = 0;
      if ((*((_WORD *)a2 + 14) & 4) != 0)
      {
        WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v3, (uint64_t)&v26);
LABEL_51:
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3, v21);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
        if (!v28)
        {
          WebCore::Range::selectNode((unsigned int *)this, a2, a3);
          if (v28)
          {
            v25 = v27;
            v27 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v24);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          goto LABEL_56;
        }
        v22 = (char)v26;
        v23 = v27;
LABEL_55:
        *(_BYTE *)a3 = v22;
        *(_QWORD *)(a3 + 8) = v23;
        *(_BYTE *)(a3 + 16) = 1;
LABEL_56:
        v20 = 0;
LABEL_57:
        result = (unsigned int *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E33A7278[v20])(&v31, v29);
        if (!v13)
          goto LABEL_23;
        goto LABEL_21;
      }
    }
    LOBYTE(v26) = 1;
    v27 = 0;
    v28 = 1;
    goto LABEL_51;
  }
  *(_BYTE *)a3 = 20;
  *(_QWORD *)(a3 + 8) = 0;
LABEL_20:
  *(_BYTE *)(a3 + 16) = 1;
  if (!v13)
    goto LABEL_23;
LABEL_21:
  if (v13[6] == 2)
  {
    if ((*((_WORD *)v13 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
  }
  else
  {
    v13[6] -= 2;
  }
LABEL_23:
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(a2, a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return result;
}

unsigned int *WebCore::Range::setStartBefore@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v3;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  void *v7;
  WebCore::Node *v8;

  v3 = (WebCore::Node *)*((_QWORD *)a2 + 4);
  if (v3)
  {
    *((_DWORD *)v3 + 6) += 2;
    v8 = v3;
    v4 = *((_QWORD *)a2 + 6);
    for (i = 0; ; ++i)
    {
      v6 = v4 & 0xFFFFFFFFFFFFLL;
      if (!v6)
        break;
      v4 = *(_QWORD *)(v6 + 48);
    }
    WebCore::Range::setStart((uint64_t)this, (uint64_t *)&v8, i, a3);
    this = (unsigned int *)v8;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v8, v7);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 20;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::Range::nodeChildrenWillBeRemoved(WebCore::Range *this, WebCore::ContainerNode *a2)
{
  uint64_t v4;
  __int16 v5;
  WebCore::ContainerNode *v6;
  uint64_t v8;
  uint64_t result;
  __int16 v10;
  WebCore::ContainerNode *v11;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
    goto LABEL_19;
  if ((WebCore::ContainerNode *)v4 != a2)
  {
    v5 = *((_WORD *)a2 + 14);
    if ((v5 & 0xF000) == 0x9000)
    {
      if (**(WebCore::ContainerNode ***)(v4 + 40) != a2
        || (*(_WORD *)(v4 + 28) & 0xF000) == 0x9000
        || (*(_BYTE *)(v4 + 22) & 8) == 0)
      {
        goto LABEL_19;
      }
    }
    else
    {
      if ((v5 & 4) == 0
        || !*((_QWORD *)a2 + 10)
        || ((*(unsigned __int8 *)(v4 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
      {
        goto LABEL_19;
      }
      v6 = (WebCore::ContainerNode *)v4;
      do
        v6 = (WebCore::ContainerNode *)*((_QWORD *)v6 + 4);
      while (v6 != a2 && v6 != 0);
      if (!v6)
        goto LABEL_19;
    }
  }
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)this + 4) = a2;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  *((_DWORD *)this + 10) = 0;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
LABEL_19:
  result = *((_QWORD *)this + 7);
  if (!result)
    goto LABEL_37;
  if ((WebCore::ContainerNode *)result != a2)
  {
    v10 = *((_WORD *)a2 + 14);
    if ((v10 & 0xF000) == 0x9000)
    {
      if (**(WebCore::ContainerNode ***)(result + 40) != a2
        || (*(_WORD *)(result + 28) & 0xF000) == 0x9000
        || (*(_BYTE *)(result + 22) & 8) == 0)
      {
        goto LABEL_37;
      }
    }
    else
    {
      if ((v10 & 4) == 0
        || !*((_QWORD *)a2 + 10)
        || ((*(unsigned __int8 *)(result + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
      {
        goto LABEL_37;
      }
      v11 = (WebCore::ContainerNode *)*((_QWORD *)this + 7);
      do
        v11 = (WebCore::ContainerNode *)*((_QWORD *)v11 + 4);
      while (v11 != a2 && v11 != 0);
      if (!v11)
        goto LABEL_37;
    }
  }
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)this + 7) = a2;
  if (*(_DWORD *)(result + 24) == 2)
  {
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  else
  {
    *(_DWORD *)(result + 24) -= 2;
  }
  *((_DWORD *)this + 16) = 0;
  result = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
LABEL_37:
  *((_BYTE *)this + 81) = 1;
  return result;
}

uint64_t WebCore::boundaryNodeWillBeRemoved(WebCore::RangeBoundaryPoint *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (*((_QWORD *)a1 + 2) == a2)
    return WebCore::RangeBoundaryPoint::childBeforeWillBeRemoved(a1);
  result = *(_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 24);
  *(_DWORD *)(result + 24) = v5 + 2;
  if (result == a2)
  {
    v8 = 1;
  }
  else
  {
    v6 = *(_WORD *)(a2 + 28);
    if ((v6 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(result + 40) == a2 && (*(_WORD *)(result + 28) & 0xF000) != 0x9000)
      {
        v8 = (*(unsigned __int8 *)(result + 22) >> 3) & 1;
        goto LABEL_15;
      }
    }
    else if ((v6 & 4) != 0
           && *(_QWORD *)(a2 + 80)
           && ((*(unsigned __int8 *)(result + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) == 0)
    {
      v7 = result;
      do
      {
        v7 = *(_QWORD *)(v7 + 32);
        v8 = v7 != 0;
      }
      while (v7 != a2 && v7 != 0);
      goto LABEL_15;
    }
    v8 = 0;
  }
LABEL_15:
  if (v5)
  {
    *(_DWORD *)(result + 24) = v5;
  }
  else if ((*(_WORD *)(result + 30) & 0x400) == 0)
  {
    result = WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(v10 + 24) += 2;
    v11 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v10;
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    v12 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
      do
      {
        ++v13;
        v14 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
      }
      while (v14);
      *((_DWORD *)a1 + 2) = v13;
      *(_DWORD *)(v12 + 24) += 2;
    }
    else
    {
      *((_DWORD *)a1 + 2) = 0;
    }
    result = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v12;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  return result;
}

WTF *WebCore::Range::updateRangeForParentlessNodeMovedToNewDocument(WebCore::Range *this, WebCore::Node *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *result;

  v4 = *((_QWORD *)this + 3);
  *(_DWORD *)(v4 + 24) += 2;
  WTF::HashSet<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v4 + 1320), (uint64_t)this);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v5;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 3);
  *(_DWORD *)(v7 + 24) += 2;
  result = WebCore::Document::attachRange((WebCore::Document *)v7, this);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::boundaryTextNodesMerged(unsigned int *result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  void *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;

  v3 = *(_QWORD *)result;
  v4 = *a2;
  if (*(_QWORD *)result == *a2)
  {
    v9 = (WebCore::Node *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL);
    if (v9)
      *(_DWORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    v12 = v9;
    a3 += result[2];
    goto LABEL_14;
  }
  if (v3 == *(_QWORD *)(v4 + 32))
  {
    v5 = result[2];
    v6 = *((_DWORD *)a2 + 2);
    if (v6 == -1)
    {
      v7 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
      if (v7)
      {
        v6 = 0;
        do
        {
          ++v6;
          v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
        }
        while (v7);
      }
      else
      {
        v6 = 0;
      }
      *((_DWORD *)a2 + 2) = v6;
    }
    if (v5 == v6)
    {
      v8 = (WebCore::Node *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL);
      if (v8)
        *((_DWORD *)v8 + 6) += 2;
      v12 = v8;
LABEL_14:
      v11 = 0;
      WebCore::RangeBoundaryPoint::set((uint64_t *)result, (uint64_t *)&v12, a3, (uint64_t *)&v11);
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11, v10);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
      result = (unsigned int *)v12;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef(v12, v10);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::boundaryTextNodesSplit(unsigned int *result, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;

  v2 = result;
  v3 = a2[4];
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    if (*(_QWORD **)result != a2)
    {
      if (v3 != *(_QWORD *)result || *((_QWORD **)result + 2) != a2)
        goto LABEL_29;
      v4 = a2[7];
      if (v4)
        *(_DWORD *)(v4 + 24) += 2;
      v5 = *(_QWORD *)(v4 + 32);
      *(_DWORD *)(v5 + 24) += 2;
      *(_QWORD *)result = v5;
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
      v6 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
      if (v6)
      {
        v7 = 1;
        do
        {
          ++v7;
          v6 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
        }
        while (v6);
      }
      else
      {
        v7 = 1;
      }
      v2[2] = v7;
      result = (unsigned int *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = v4;
      if (!result)
        goto LABEL_29;
      goto LABEL_26;
    }
  }
  else if (*(_QWORD **)result != a2)
  {
    return result;
  }
  v8 = a2[10];
  if (v8)
    LODWORD(v8) = *(_DWORD *)(v8 + 4);
  v9 = result[2];
  v10 = v9 - v8;
  if (v9 <= v8)
  {
    if (!v3)
      return result;
    goto LABEL_29;
  }
  if (!v3)
  {
    result[2] = v8;
    return result;
  }
  v11 = (WebCore::Node *)a2[7];
  if (v11)
    *((_DWORD *)v11 + 6) += 2;
  v12 = 0;
  v13 = v11;
  WebCore::RangeBoundaryPoint::set((uint64_t *)result, (uint64_t *)&v13, v10, (uint64_t *)&v12);
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, a2);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  result = (unsigned int *)v13;
  if (v13)
  {
LABEL_26:
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
LABEL_29:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::Range::expand@<X0>(WebCore::Range *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  const WebCore::Node *v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  int v24;
  WebCore::Node *v25;
  int v26;
  int v27;
  unsigned int v28;
  WebCore::Node *v29;
  int v30;
  unsigned int i;
  __int16 v32;
  uint64_t v33;
  WebCore::Node *v34;
  void *v35;
  int v36;
  int v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  int v41;
  int v42;
  WebCore::Node *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  WebCore::Node *v48;
  int v49;
  unsigned int j;
  __int16 v51;
  uint64_t v52;
  WebCore::Node *v53;
  uint64_t v54;
  WebCore::Node *v55;
  unsigned int *result;
  void *v57;
  WebCore::Node *v58;
  void *v59;
  WebCore::Node *v60;
  __int16 v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::Node *v69;
  WebCore::Node *v70;
  uint64_t v71;
  char v72;
  WebCore::Node *v73;
  unsigned int v74;
  char v75;
  char v76;
  WebCore::Node *v77;
  unsigned int v78;
  char v79;
  char v80;

  v6 = *((_QWORD *)this + 4);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *((_DWORD *)this + 10);
  v73 = (WebCore::Node *)v6;
  v74 = v7;
  v75 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v73, (uint64_t)&v77);
  v80 = 1;
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  v9 = *((_QWORD *)this + 7);
  *(_DWORD *)(v9 + 24) += 2;
  v10 = *((_DWORD *)this + 16);
  v70 = (WebCore::Node *)v9;
  LODWORD(v71) = v10;
  BYTE4(v71) = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v70, (uint64_t)&v73);
  v76 = 1;
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "word", 4))
  {
    WebCore::startOfWord((uint64_t)&v77, 0, (uint64_t)&v70);
    v13 = v70;
    v70 = 0;
    v14 = v77;
    v77 = v13;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v14, v12);
          v58 = v70;
          v78 = v71;
          v79 = BYTE4(v71);
          v80 = v72;
          v70 = 0;
          if (v58)
          {
            if (*((_DWORD *)v58 + 6) == 2)
            {
              if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v58, v57);
            }
            else
            {
              *((_DWORD *)v58 + 6) -= 2;
            }
          }
          goto LABEL_10;
        }
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    v78 = v71;
    v79 = BYTE4(v71);
    v80 = v72;
LABEL_10:
    WebCore::endOfWord((WebCore *)&v73, 0, (uint64_t)&v70);
    goto LABEL_22;
  }
  if (!MEMORY[0x19AEA53F4](*(_QWORD *)a2, "sentence", 8))
  {
    if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "block", 5))
    {
      WebCore::startOfParagraph((uint64_t)&v77, 1, &v70);
      v20 = v70;
      v70 = 0;
      v21 = v77;
      v77 = v20;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v21, v19);
            v60 = v70;
            v78 = v71;
            v79 = BYTE4(v71);
            v80 = v72;
            v70 = 0;
            if (v60)
            {
              if (*((_DWORD *)v60 + 6) == 2)
              {
                if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v60, v59);
              }
              else
              {
                *((_DWORD *)v60 + 6) -= 2;
              }
            }
            goto LABEL_21;
          }
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      v78 = v71;
      v79 = BYTE4(v71);
      v80 = v72;
LABEL_21:
      WebCore::endOfParagraph((WebCore::Node *)&v73, 1, &v70);
      goto LABEL_22;
    }
    if (!MEMORY[0x19AEA53F4](*(_QWORD *)a2, "document", 8))
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      goto LABEL_109;
    }
    v34 = v77;
    if (!v77)
    {
      WebCore::startOfDocument(0, v15, (uint64_t)&v70);
      goto LABEL_45;
    }
    *((_DWORD *)v77 + 6) += 4;
    WebCore::startOfDocument(v34, v15, (uint64_t)&v70);
    v36 = *((_DWORD *)v34 + 6) - 2;
    if (*((_DWORD *)v34 + 6) == 2)
    {
      v61 = *((_WORD *)v34 + 15);
      if ((v61 & 0x400) != 0)
      {
LABEL_144:
        if ((v61 & 0x400) == 0)
          WebCore::Node::removedLastRef(v34, v35);
LABEL_45:
        v38 = v70;
        v70 = 0;
        v39 = v77;
        v77 = v38;
        if (v39)
        {
          if (*((_DWORD *)v39 + 6) == 2)
          {
            if ((*((_WORD *)v39 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v39, v35);
          }
          else
          {
            *((_DWORD *)v39 + 6) -= 2;
          }
        }
        v78 = v71;
        v79 = BYTE4(v71);
        v80 = v72;
        v40 = v73;
        if (!v73)
        {
          WebCore::endOfDocument(0, (const WebCore::Node *)v35, (uint64_t)&v70);
          goto LABEL_53;
        }
        *((_DWORD *)v73 + 6) += 4;
        WebCore::endOfDocument(v40, (const WebCore::Node *)v35, (uint64_t)&v70);
        v41 = *((_DWORD *)v40 + 6) - 2;
        if (*((_DWORD *)v40 + 6) == 2)
        {
          v62 = *((_WORD *)v40 + 15);
          if ((v62 & 0x400) != 0)
            goto LABEL_147;
          WebCore::Node::removedLastRef(v40, v15);
          v41 = *((_DWORD *)v40 + 6);
        }
        else
        {
          *((_DWORD *)v40 + 6) = v41;
        }
        v42 = v41 - 2;
        if (v42)
        {
          *((_DWORD *)v40 + 6) = v42;
LABEL_53:
          v43 = v70;
          v70 = 0;
          v23 = v73;
          v73 = v43;
          if (!v23)
            goto LABEL_25;
          v24 = *((_DWORD *)v23 + 6) - 2;
          if (*((_DWORD *)v23 + 6) == 2)
          {
            if ((*((_WORD *)v23 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v23, v15);
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        v62 = *((_WORD *)v40 + 15);
LABEL_147:
        if ((v62 & 0x400) == 0)
          WebCore::Node::removedLastRef(v40, v15);
        goto LABEL_53;
      }
      WebCore::Node::removedLastRef(v34, v35);
      v36 = *((_DWORD *)v34 + 6);
    }
    else
    {
      *((_DWORD *)v34 + 6) = v36;
    }
    v37 = v36 - 2;
    if (v37)
    {
      *((_DWORD *)v34 + 6) = v37;
      goto LABEL_45;
    }
    v61 = *((_WORD *)v34 + 15);
    goto LABEL_144;
  }
  WebCore::previousBoundary((uint64_t)&v70, (uint64_t)&v77, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
  v17 = v70;
  v70 = 0;
  v18 = v77;
  v77 = v17;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v16);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  v78 = v71;
  v79 = BYTE4(v71);
  v80 = v72;
  WebCore::nextBoundary((uint64_t)&v70, (uint64_t)&v73, (WebCore::Node *)WebCore::endSentenceBoundary);
LABEL_22:
  v22 = v70;
  v70 = 0;
  v23 = v73;
  v73 = v22;
  if (v23)
  {
    v24 = *((_DWORD *)v23 + 6) - 2;
    if (*((_DWORD *)v23 + 6) != 2)
    {
LABEL_24:
      *((_DWORD *)v23 + 6) = v24;
      goto LABEL_25;
    }
    if ((*((_WORD *)v23 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v23, v15);
      v53 = v70;
      v74 = v71;
      v75 = BYTE4(v71);
      v76 = v72;
      v70 = 0;
      if (v53)
      {
        if (*((_DWORD *)v53 + 6) == 2)
        {
          if ((*((_WORD *)v53 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v53, v15);
        }
        else
        {
          *((_DWORD *)v53 + 6) -= 2;
        }
      }
      goto LABEL_26;
    }
  }
LABEL_25:
  v74 = v71;
  v75 = BYTE4(v71);
  v76 = v72;
LABEL_26:
  v25 = v77;
  if (!v77)
    goto LABEL_181;
  v26 = *((_DWORD *)v77 + 6);
  v27 = v26 + 2;
  *((_DWORD *)v77 + 6) = v26 + 2;
  v28 = v79 & 7;
  if (v28 > 4)
    goto LABEL_179;
  v29 = v25;
  if (((1 << v28) & 0x19) != 0)
    goto LABEL_29;
  v29 = (WebCore::Node *)*((_QWORD *)v25 + 4);
  if (!v29)
  {
LABEL_179:
    if (v26)
    {
      *((_DWORD *)v25 + 6) = v26;
    }
    else if ((*((_WORD *)v25 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v25, v15);
    }
    goto LABEL_181;
  }
  v27 = *((_DWORD *)v29 + 6);
LABEL_29:
  *((_DWORD *)v29 + 6) = v27 + 2;
  if (*((_DWORD *)v25 + 6) != 2)
  {
    *((_DWORD *)v25 + 6) -= 2;
LABEL_31:
    v69 = v29;
    goto LABEL_32;
  }
  if ((*((_WORD *)v25 + 15) & 0x400) != 0)
    goto LABEL_31;
  WebCore::Node::removedLastRef(v25, v15);
  v25 = v77;
  v69 = v29;
  if (!v77)
  {
    WebCore::Range::setStart((uint64_t)this, (uint64_t *)&v69, 0, (uint64_t)&v70);
    goto LABEL_65;
  }
LABEL_32:
  *((_DWORD *)v25 + 6) += 2;
  v30 = v79 & 7;
  if ((v79 & 7) == 0)
  {
    i = v78;
    goto LABEL_63;
  }
  if (v30 != 4)
  {
    if (v30 == 1)
    {
      v67 = *((_QWORD *)v25 + 6) & 0xFFFFFFFFFFFFLL;
      if (v67)
      {
        i = 0;
        do
        {
          ++i;
          v67 = *(_QWORD *)(v67 + 48) & 0xFFFFFFFFFFFFLL;
        }
        while (v67);
        goto LABEL_63;
      }
    }
    else if (v30 == 2)
    {
      v63 = *((_QWORD *)v25 + 6);
      for (i = 1; ; ++i)
      {
        v64 = v63 & 0xFFFFFFFFFFFFLL;
        if (!v64)
          break;
        v63 = *(_QWORD *)(v64 + 48);
      }
      goto LABEL_63;
    }
LABEL_38:
    i = 0;
    goto LABEL_63;
  }
  v32 = *((_WORD *)v25 + 14);
  if ((v32 & 1) != 0)
  {
    v44 = *((_QWORD *)v25 + 10);
    if (v44)
    {
      i = *(_DWORD *)(v44 + 4);
      goto LABEL_63;
    }
    goto LABEL_38;
  }
  if ((v32 & 4) == 0)
    goto LABEL_38;
  v33 = *((_QWORD *)v25 + 10);
  if (!v33)
    goto LABEL_38;
  i = 0;
  do
  {
    ++i;
    v33 = *(_QWORD *)(v33 + 56);
  }
  while (v33);
LABEL_63:
  WebCore::Range::setStart((uint64_t)this, (uint64_t *)&v69, i, (uint64_t)&v70);
  if (*((_DWORD *)v25 + 6) == 2)
  {
    if ((*((_WORD *)v25 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v25, v15);
  }
  else
  {
    *((_DWORD *)v25 + 6) -= 2;
  }
LABEL_65:
  if (v69)
  {
    if (*((_DWORD *)v69 + 6) == 2)
    {
      if ((*((_WORD *)v69 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v69, v15);
    }
    else
    {
      *((_DWORD *)v69 + 6) -= 2;
    }
  }
  if (v72)
  {
    v45 = v71;
    *(_BYTE *)a3 = (_BYTE)v70;
    a3[1] = v45;
LABEL_70:
    *((_BYTE *)a3 + 16) = 1;
    goto LABEL_109;
  }
  v25 = v73;
  if (!v73)
  {
LABEL_181:
    *(_BYTE *)a3 = 33;
    a3[1] = 0;
    goto LABEL_70;
  }
  v26 = *((_DWORD *)v73 + 6);
  v46 = v26 + 2;
  *((_DWORD *)v73 + 6) = v26 + 2;
  v47 = v75 & 7;
  if (v47 > 4)
    goto LABEL_179;
  v48 = v25;
  if (((1 << v47) & 0x19) != 0)
    goto LABEL_74;
  v48 = (WebCore::Node *)*((_QWORD *)v25 + 4);
  if (!v48)
    goto LABEL_179;
  v46 = *((_DWORD *)v48 + 6);
LABEL_74:
  *((_DWORD *)v48 + 6) = v46 + 2;
  if (*((_DWORD *)v25 + 6) != 2)
  {
    *((_DWORD *)v25 + 6) -= 2;
LABEL_76:
    v69 = v48;
    goto LABEL_77;
  }
  if ((*((_WORD *)v25 + 15) & 0x400) != 0)
    goto LABEL_76;
  WebCore::Node::removedLastRef(v25, v15);
  v25 = v73;
  v69 = v48;
  if (v73)
  {
LABEL_77:
    *((_DWORD *)v25 + 6) += 2;
    v49 = v75 & 7;
    if ((v75 & 7) == 0)
    {
      j = v74;
      goto LABEL_104;
    }
    switch(v49)
    {
      case 4:
        v51 = *((_WORD *)v25 + 14);
        if ((v51 & 1) == 0)
        {
          if ((v51 & 4) == 0)
            break;
          v52 = *((_QWORD *)v25 + 10);
          if (!v52)
            break;
          j = 0;
          do
          {
            ++j;
            v52 = *(_QWORD *)(v52 + 56);
          }
          while (v52);
LABEL_104:
          WebCore::Range::setEnd((uint64_t)this, (uint64_t *)&v69, j, (uint64_t)a3);
          if (*((_DWORD *)v25 + 6) == 2)
          {
            if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v25, v15);
          }
          else
          {
            *((_DWORD *)v25 + 6) -= 2;
          }
          goto LABEL_106;
        }
        v54 = *((_QWORD *)v25 + 10);
        if (v54)
        {
          j = *(_DWORD *)(v54 + 4);
          goto LABEL_104;
        }
        break;
      case 1:
        v68 = *((_QWORD *)v25 + 6) & 0xFFFFFFFFFFFFLL;
        if (v68)
        {
          j = 0;
          do
          {
            ++j;
            v68 = *(_QWORD *)(v68 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v68);
          goto LABEL_104;
        }
        break;
      case 2:
        v65 = *((_QWORD *)v25 + 6);
        for (j = 1; ; ++j)
        {
          v66 = v65 & 0xFFFFFFFFFFFFLL;
          if (!v66)
            break;
          v65 = *(_QWORD *)(v66 + 48);
        }
        goto LABEL_104;
    }
    j = 0;
    goto LABEL_104;
  }
  WebCore::Range::setEnd((uint64_t)this, (uint64_t *)&v69, 0, (uint64_t)a3);
LABEL_106:
  if (v69)
  {
    if (*((_DWORD *)v69 + 6) == 2)
    {
      if ((*((_WORD *)v69 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v69, v15);
    }
    else
    {
      *((_DWORD *)v69 + 6) -= 2;
    }
  }
LABEL_109:
  v55 = v73;
  v73 = 0;
  if (v55)
  {
    if (*((_DWORD *)v55 + 6) == 2)
    {
      if ((*((_WORD *)v55 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v55, v15);
    }
    else
    {
      *((_DWORD *)v55 + 6) -= 2;
    }
  }
  result = (unsigned int *)v77;
  v77 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v15);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Range::endOffset(WebCore::Range *this)
{
  return *((unsigned int *)this + 16);
}

unsigned int *WebCore::Range::getClientRects@<X0>(WebCore::Range *this@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v4;
  void *v5;
  WebCore::Node *v6;
  int v7;
  WebCore::Node *v8;
  int v9;
  unsigned int *result;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  WTF *v19;
  WebCore::Node *v20;
  float64x2_t v21;
  float64x2_t v22;
  WebCore::Node *v23;
  int v24;
  WebCore::Node *v25;
  int v26;
  WTF *v27;
  int v28;
  unsigned int v29;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 40) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 0, 0);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v6 = (WebCore::Node *)*((_QWORD *)this + 4);
  *((_DWORD *)v6 + 6) += 2;
  v7 = *((_DWORD *)this + 10);
  v8 = (WebCore::Node *)*((_QWORD *)this + 7);
  *((_DWORD *)v8 + 6) += 2;
  v9 = *((_DWORD *)this + 16);
  v23 = v6;
  v24 = v7;
  v25 = v8;
  v26 = v9;
  WebCore::borderAndTextRects((uint64_t)&v27, (uint64_t)&v23, 0, 0);
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  v12 = result;
  *result = 1;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  v13 = v29;
  if (v29)
  {
    if (v29 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v14 = WTF::fastMalloc((WTF *)(8 * v29));
    v12[4] = v13;
    *((_QWORD *)v12 + 1) = v14;
    if (v29)
    {
      v15 = v14;
      v16 = 0;
      for (i = 0; i < v29; ++i)
      {
        v21 = vcvtq_f64_f32(*(float32x2_t *)((char *)v27 + v16));
        v22 = vcvtq_f64_f32(*(float32x2_t *)((char *)v27 + v16 + 8));
        v18 = bmalloc::api::isoAllocate();
        *(_QWORD *)v18 = 0;
        *(_DWORD *)(v18 + 8) = 1;
        *(float64x2_t *)(v18 + 16) = v21;
        *(float64x2_t *)(v18 + 32) = v22;
        *(_QWORD *)(v15 + 8 * i) = v18;
        v12[5] = i + 1;
        v16 += 16;
      }
    }
  }
  *a2 = v12;
  v19 = v27;
  if (v27)
  {
    v27 = 0;
    v28 = 0;
    WTF::fastFree(v19, v11);
  }
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v11);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  result = (unsigned int *)v23;
  v23 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Range::getBoundingClientRect@<X0>(WebCore::Range *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  WebCore::Node *v6;
  int v7;
  WebCore::Node *v8;
  int v9;
  WebCore::FloatRect *v10;
  uint64_t v11;
  float64x2_t v12;
  uint64_t v13;
  void *v14;
  WebCore::FloatRect *v15;
  WebCore::Node *v16;
  unsigned int *result;
  float64x2_t v18;
  float64x2_t v19;
  WebCore::Node *v20;
  int v21;
  WebCore::Node *v22;
  int v23;
  WebCore::FloatRect *v24;
  int v25;
  unsigned int v26;
  float32x2_t v27;
  float32x2_t v28;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 40) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 0, 0);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v6 = (WebCore::Node *)*((_QWORD *)this + 4);
  *((_DWORD *)v6 + 6) += 2;
  v7 = *((_DWORD *)this + 10);
  v8 = (WebCore::Node *)*((_QWORD *)this + 7);
  *((_DWORD *)v8 + 6) += 2;
  v9 = *((_DWORD *)this + 16);
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = v9;
  WebCore::borderAndTextRects((uint64_t)&v24, (uint64_t)&v20, 0, 0);
  v27 = 0;
  v28 = 0;
  if (v26)
  {
    v10 = v24;
    v11 = 16 * v26;
    do
    {
      WebCore::FloatRect::uniteIfNonZero(&v27, (float32x2_t *)v10);
      v10 = (WebCore::FloatRect *)((char *)v10 + 16);
      v11 -= 16;
    }
    while (v11);
    v19 = vcvtq_f64_f32(v27);
    v12 = vcvtq_f64_f32(v28);
  }
  else
  {
    v12 = 0uLL;
    v19 = 0u;
  }
  v18 = v12;
  v13 = bmalloc::api::isoAllocate();
  *(_QWORD *)v13 = 0;
  *(_DWORD *)(v13 + 8) = 1;
  *(float64x2_t *)(v13 + 16) = v19;
  *(float64x2_t *)(v13 + 32) = v18;
  *a2 = v13;
  v15 = v24;
  if (v24)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree(v15, v14);
  }
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v14);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  result = (unsigned int *)v20;
  v20 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::Range::updateFromSelection(WebCore::Range *this, const WebCore::SimpleRange *a2, const WebCore::SimpleRange *a3)
{
  WebCore::Node *result;

  *((_BYTE *)this + 80) = 0;
  result = WebCore::setBothEndpoints(this, a2, a3);
  *((_BYTE *)this + 80) = 1;
  return result;
}

WebCore::Node *WebCore::setBothEndpoints(WebCore *this, WebCore::Range *a2, const WebCore::SimpleRange *a3)
{
  WebCore::Node *v5;
  WTF::StringImpl *v6;
  WebCore::Node *v7;
  WTF::StringImpl *v8;
  WebCore::Node *result;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;
  WebCore::Node *v13;
  _BYTE v14[8];
  WTF::StringImpl *v15;
  char v16;
  WebCore::Node *v17;

  v5 = *(WebCore::Node **)a2;
  *((_DWORD *)v5 + 6) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v17 = v5;
  WebCore::Range::setStart((uint64_t)this, (uint64_t *)&v17, *((_DWORD *)a2 + 2), (uint64_t)v14);
  if (v16 && v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v6);
    else
      *(_DWORD *)v15 -= 2;
  }
  v7 = (WebCore::Node *)*((_QWORD *)a2 + 2);
  *((_DWORD *)v7 + 6) += 2;
  v13 = v7;
  WebCore::Range::setEnd((uint64_t)this, (uint64_t *)&v13, *((_DWORD *)a2 + 6), (uint64_t)&v10);
  if (v12 && v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  result = v17;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::makeSimpleRange@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *result;
  v3 = *(_QWORD *)(*result + 32);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_DWORD *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 56);
  *(_DWORD *)(v5 + 24) += 2;
  LODWORD(v2) = *(_DWORD *)(v2 + 64);
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *result;
  if (*result)
  {
    v3 = *(_QWORD *)(v2 + 32);
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *(_DWORD *)(v2 + 40);
    v5 = *(_QWORD *)(v2 + 56);
    *(_DWORD *)(v5 + 24) += 2;
    LODWORD(v2) = *(_DWORD *)(v2 + 64);
    *(_QWORD *)a2 = v3;
    *(_DWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 24) = v2;
    LOBYTE(v2) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v2;
  return result;
}

WebCore::Node *WebCore::createLiveRange@<X0>(WebCore *this@<X0>, WebCore **a2@<X8>)
{
  WebCore::Document *v5;
  WebCore::Range *v6;
  WebCore *v7;
  const WebCore::SimpleRange *v8;

  v5 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)this + 40) + 8);
  v6 = (WebCore::Range *)bmalloc::api::isoAllocate();
  v7 = WebCore::Range::Range(v6, v5);
  *a2 = v7;
  return WebCore::setBothEndpoints(v7, this, v8);
}

WebCore::Node *WebCore::createLiveRange@<X0>(WebCore::Node *result@<X0>, WebCore::Range **a2@<X8>)
{
  WebCore::Range *v3;
  WebCore::Document *v4;
  WebCore::Range *v5;
  WebCore *v6;
  const WebCore::SimpleRange *v7;

  if (*((_BYTE *)result + 32))
  {
    v3 = result;
    v4 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)result + 40) + 8);
    v5 = (WebCore::Range *)bmalloc::api::isoAllocate();
    v6 = WebCore::Range::Range(v5, v4);
    result = WebCore::setBothEndpoints(v6, v3, v7);
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t WebCore::Range::visitNodesConcurrently(WebCore::Range *this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  WebCore::Node *v7;

  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 8) != 0)
      v5 = *(WebCore::Node **)(*(_QWORD *)(v4 + 40) + 8);
    else
      v5 = WebCore::Node::traverseToOpaqueRoot((WebCore::Node *)v4);
  }
  else
  {
    v5 = 0;
  }
  JSC::AbstractSlotVisitor::addOpaqueRoot(a2, v5);
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 22) & 8) != 0)
      v7 = *(WebCore::Node **)(*(_QWORD *)(v6 + 40) + 8);
    else
      v7 = WebCore::Node::traverseToOpaqueRoot((WebCore::Node *)v6);
  }
  else
  {
    v7 = 0;
  }
  return JSC::AbstractSlotVisitor::addOpaqueRoot(a2, v7);
}

void WebCore::RejectedPromiseTracker::~RejectedPromiseTracker(WebCore::RejectedPromiseTracker *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  _DWORD *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  JSC::Heap::unregisterWeakGCHashTable();
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v5 - 8) != -1 && *(_QWORD *)v5)
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
          *(_QWORD *)v5 = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    v8 = (_DWORD **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v9 = *v8;
      *v8 = 0;
      if (v9)
      {
        if (*v9 == 1)
        {
          v11 = (WTF *)MEMORY[0x19AEA6024]();
          WTF::fastFree(v11, v12);
        }
        else
        {
          --*v9;
        }
      }
      v10 = *(v8 - 1);
      *(v8 - 1) = 0;
      if (v10)
      {
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[4];
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v13 = (WTF *)*((_QWORD *)this + 2);
  if (v13)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v13, v2);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v2);
    }
  }
}

uint64_t JSC::WeakGCMap<JSC::JSPromise *,JSC::JSPromise,WTF::DefaultHash<JSC::JSPromise *>,WTF::HashTraits<JSC::JSPromise *>>::~WeakGCMap(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  JSC::Heap::unregisterWeakGCHashTable();
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v5 - 8) != -1 && *(_QWORD *)v5)
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
          *(_QWORD *)v5 = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  return a1;
}

WebCore::DOMGuardedObject *WebCore::RejectedPromiseTracker::promiseRejected(WebCore::RejectedPromiseTracker *this, JSC::VM **a2, JSC::JSPromise *a3)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::DOMGuardedObject *v8;
  WebCore::DOMGuardedObject *v9;
  WebCore::DOMGuardedObject *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::DOMGuardedObject *v17;
  uint64_t v18;
  WebCore::DOMGuardedObject **v19;
  WebCore::DOMGuardedObject *result;
  WTF *v21;
  void *v22;
  WebCore::DOMGuardedObject *v23;
  WebCore::DOMGuardedObject *v24;

  v6 = JSC::JSPromise::result(a3, a2[7]);
  v7 = *((_QWORD *)a2[7] + 4);
  if (v7 && *(_QWORD *)(v7 + 8) == v6)
  {
    Inspector::createScriptCallStackFromException();
LABEL_6:
    v8 = v23;
    goto LABEL_8;
  }
  if (a2[252])
  {
    Inspector::createScriptCallStack((Inspector *)a2, (JSC::JSGlobalObject *)0xC8);
    goto LABEL_6;
  }
  v8 = 0;
LABEL_8:
  v9 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  v10 = WebCore::DOMGuardedObject::DOMGuardedObject(v9, (unint64_t)a2, (unint64_t)a3);
  *(_QWORD *)v10 = &off_1E3251870;
  v23 = v10;
  v24 = v8;
  v11 = *((unsigned int *)this + 7);
  if ((_DWORD)v11 == *((_DWORD *)this + 6))
  {
    v12 = (uint64_t *)WTF::Vector<WebCore::UnhandledPromise,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this + 4, v11 + 1, (unint64_t)&v23);
    v13 = *((unsigned int *)this + 7);
    v14 = (_QWORD *)(*((_QWORD *)this + 2) + 16 * v13);
    v15 = *v12;
    *v12 = 0;
    *v14 = v15;
    v16 = v12[1];
    v12[1] = 0;
    v14[1] = v16;
    v17 = v24;
    *((_DWORD *)this + 7) = v13 + 1;
    v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        v21 = (WTF *)MEMORY[0x19AEA6024]();
        WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
  }
  else
  {
    v18 = *((_QWORD *)this + 2);
    v23 = 0;
    v19 = (WebCore::DOMGuardedObject **)(v18 + 16 * v11);
    *v19 = v10;
    v19[1] = v8;
    *((_DWORD *)this + 7) = v11 + 1;
    v24 = 0;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (WebCore::DOMGuardedObject *)(*(uint64_t (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)result
                                                                                                 + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

uint64_t *WebCore::RejectedPromiseTracker::promiseHandled(WebCore::RejectedPromiseTracker *this, WebCore::JSDOMGlobalObject *a2, JSC::JSPromise *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  JSC::JSPromise *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  WebCore::DOMGuardedObject *v32;
  uint64_t *v33;
  uint64_t v34;
  _DWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  uint64_t *v42;
  char v43;

  if (*((_DWORD *)this + 7))
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 2) + v6);
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        if (*(_QWORD *)v9)
        {
          if ((*(_BYTE *)(v9 + 8) & 3) == 0
            && WebCore::ActiveDOMCallback::canInvokeCallback(*(WebCore::ActiveDOMCallback **)(*((_QWORD *)this + 2) + v6), a2))
          {
            v10 = **(_QWORD **)(v8 + 24);
            if ((v10 & 0xFFFE000000000002) == 0 && (JSC::JSPromise *)v10 == a3 && *(_BYTE *)(v10 + 5) == 68)
              break;
          }
        }
      }
      ++v7;
      v6 += 16;
      if (v7 >= *((unsigned int *)this + 7))
        goto LABEL_11;
    }
    v34 = *((_QWORD *)this + 2);
    v35 = *(_DWORD **)(v34 + v6 + 8);
    *(_QWORD *)(v34 + v6 + 8) = 0;
    if (v35)
    {
      if (*v35 == 1)
      {
        v40 = (WTF *)MEMORY[0x19AEA6024]();
        WTF::fastFree(v40, v41);
      }
      else
      {
        --*v35;
      }
    }
    result = *(uint64_t **)(v34 + v6);
    *(_QWORD *)(v34 + v6) = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
      else
        --*((_DWORD *)result + 4);
    }
    v36 = (_QWORD *)(v34 + v6 + 16);
    v37 = *((unsigned int *)this + 7);
    v38 = *((_QWORD *)this + 2) + 16 * v37;
    if (v36 != (_QWORD *)v38)
    {
      do
      {
        v39 = v36[1];
        *(v36 - 2) = *v36;
        *(v36 - 1) = v39;
        *v36 = 0;
        v36[1] = 0;
        v36 += 2;
      }
      while (v36 != (_QWORD *)v38);
      LODWORD(v37) = *((_DWORD *)this + 7);
    }
    *((_DWORD *)this + 7) = v37 - 1;
  }
  else
  {
LABEL_11:
    result = (uint64_t *)((char *)this + 40);
    v12 = *((_QWORD *)this + 5);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(JSC::JSPromise **)(v12 + 16 * v17);
      if (v18 != a3)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(JSC::JSPromise **)(v12 + 16 * v17);
          ++v19;
          if (v18 == a3)
            goto LABEL_18;
        }
        v17 = *(unsigned int *)(v12 - 4);
      }
LABEL_18:
      if (v17 != *(_DWORD *)(v12 - 4))
      {
        v20 = (_QWORD *)(v12 + 16 * v17);
        *v20 = -1;
        v23 = v20[1];
        v22 = v20 + 1;
        v21 = v23;
        if (v23)
        {
          *(_QWORD *)(v21 + 8) = 3;
          *v22 = 0;
        }
        ++*(_DWORD *)(*result - 16);
        v24 = *result;
        if (*result)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *result;
        if (*result)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
            WTF::HashTable<JSC::Bindings::RuntimeObject *,WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashMap<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Bindings::RuntimeObject *>>::rehash(result, v28 >> 1);
        }
        v30 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
        if (v30)
          v31 = v30 - 96;
        else
          v31 = 0;
        v32 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)WebCore::DOMGuardedObject::DOMGuardedObject(v32, (unint64_t)a2, (unint64_t)a3) = &off_1E3251870;
        v33 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *v33 = (uint64_t)&off_1E33A7300;
        v33[1] = (uint64_t)this;
        v33[2] = (uint64_t)v32;
        v42 = v33;
        v43 = 0;
        (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v31 + 336))(v31, &v42);
        result = v42;
        v42 = 0;
        if (result)
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

_QWORD *WebCore::PromiseRejectionEvent::create(uint64_t *a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v6 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_QWORD *)(v6 + 8) = 0;
  if (v9)
    v12 = 2785282;
  else
    v12 = 2785280;
  v13 = v12 | (4 * v10) | (8 * v11) | (*a2 != 0) | *(_DWORD *)(v6 + 20) & 0xFFC00000;
  *(_DWORD *)(v6 + 16) = 1;
  *(_DWORD *)(v6 + 20) = v13;
  v14 = (_DWORD *)*a2;
  if (*a2)
  {
    *v14 += 2;
    v13 = *(_DWORD *)(v6 + 20);
  }
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 24) = v14;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 20) = v13 | 0x4000;
  *(_QWORD *)v6 = off_1E33A6CA8;
  v15 = *((_QWORD *)a3 + 1);
  ++*(_DWORD *)(v15 + 16);
  *(_QWORD *)(v6 + 72) = v15;
  v16 = *((_QWORD *)a3 + 2);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  if ((v16 & 0xFFFE000000000002) != 0)
  {
    *(_QWORD *)(v6 + 80) = v16;
  }
  else
  {
    if (v16)
    {
      if ((v16 & 8) != 0)
        v18 = (v16 - 112) | 1;
      else
        v18 = v16 & 0xFFFFFFFFFFFFC000;
      if ((v18 & 1) != 0)
        v19 = v18 + 47;
      else
        v19 = *(_QWORD *)v18 + 32;
      result = *(_QWORD **)(v19 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v19 + 16) = *result;
      *result = v16;
      result[1] = 0;
      result[2] = 0;
    }
    else
    {
      result = 0;
    }
    __dmb(0xAu);
    v17 = *(_QWORD *)(v6 + 88);
    *(_QWORD *)(v6 + 88) = result;
    if (v17)
      *(_QWORD *)(v17 + 8) = 3;
  }
  *a1 = v6;
  return result;
}

uint64_t WebCore::PseudoElement::canContainRangeEndPoint(WebCore::PseudoElement *this)
{
  return 0;
}

uint64_t WebCore::PseudoElement::canStartSelection(WebCore::PseudoElement *this)
{
  return 0;
}

uint64_t WebCore::Range::isLiveRange(WebCore::Range *this)
{
  return 1;
}

void WebCore::ProgressEvent::~ProgressEvent(WebCore::ProgressEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  void *v10;
  void *v11;
  WebCore::Node *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned __int8 v39;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::Node *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  WebCore::Node *v61;
  unint64_t v62;
  WebCore::Node *v63;
  WebCore::Node *v64;
  WebCore::Node *v65;
  WebCore::Node *v66;
  WebCore::Node *v67;
  WebCore::Node *v68;
  int v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t *v88;
  unsigned int *v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v94;
  WebCore::Node *v95;
  WebCore::Node *v96;
  unint64_t v97;
  unint64_t v98;
  WebCore::Node *v99;
  unint64_t v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WebCore::Node *v103;
  WebCore::Node *v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  int v107;
  int v108;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  WebCore::Node *v114;
  unint64_t v115;
  WebCore::Node *v116;
  WebCore::Node *v117;
  WebCore::Node *v118;
  WebCore::Node *v119;
  WebCore::Node *v120;
  int v121;
  int v122;
  unsigned __int8 v123;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unsigned __int8 v131;
  uint64_t *v132;
  BOOL v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  int v140;
  int v141;
  unsigned __int8 v142;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  unsigned __int8 v151;
  int64_t v153;
  int64_t v154;
  int64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  char v163;
  unsigned int **v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  unsigned __int8 v170;
  uint64_t v172;
  uint64_t *v173;
  unsigned int *v174;
  unsigned int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  char v181;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  unsigned __int8 v187;
  unsigned int *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  char v201;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  int v212;
  int v213;
  unsigned __int8 v214;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  unsigned __int8 v225;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  unsigned __int8 v234;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  unsigned __int8 v240;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int **v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;

  v251 = (uint64_t *)a2;
  v252 = (uint64_t *)result;
LABEL_2:
  v5 = v252;
  v247 = (unsigned int **)(v251 - 1);
  while (2)
  {
    v6 = (char *)v251 - (char *)v5;
    v7 = v251 - v5;
    v252 = v5;
    switch(v7)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = *(v251 - 1);
        v128 = *v5;
        if (result != *v5)
        {
          v253 = 0;
          v254 = 0;
          v255 = 0;
          result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(result, v128, &v253);
          if (v253)
          {
            v24 = v254;
            if (!v254)
              goto LABEL_813;
            v9 = v255;
            if (v255)
            {
              v129 = *(unsigned __int16 *)(v254 + 28);
              v130 = *(unsigned __int16 *)(v255 + 28);
              if (((v129 | v130) & 0x80) == 0)
                goto LABEL_806;
              if ((v129 & 0x80) != 0)
                v131 = -127;
              else
                v131 = 1;
              if ((v130 & 0x80) == 0)
                v131 = -1;
              goto LABEL_814;
            }
          }
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)v5, v5 + 1, v247);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)v5, v5 + 1, (unsigned int **)v5 + 2, v247);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *,0>((void **)v5, v5 + 1, (unsigned int **)v5 + 2, (unsigned int **)v5 + 3, v247);
      default:
        if (v6 <= 191)
        {
          v132 = v5 + 1;
          v134 = v5 == v251 || v132 == v251;
          if ((a4 & 1) != 0)
          {
            if (v134)
              return result;
            v135 = v5;
            while (1)
            {
              v136 = v135;
              v135 = v132;
              v137 = *v136;
              result = v136[1];
              if (result == *v136)
                goto LABEL_530;
              v253 = 0;
              v254 = 0;
              v255 = 0;
              result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(result, v137, &v253);
              if (!v253)
                goto LABEL_530;
              v139 = v254;
              if (v254)
              {
                if (!v255)
                  goto LABEL_530;
                v140 = *(unsigned __int16 *)(v254 + 28);
                v141 = *(unsigned __int16 *)(v255 + 28);
                if (((v140 | v141) & 0x80) != 0)
                {
                  if ((v140 & 0x80) != 0)
                    v142 = -127;
                  else
                    v142 = 1;
                  if ((v141 & 0x80) == 0)
                    v142 = -1;
                  goto LABEL_498;
                }
                if (v254 != v255)
                {
                  do
                    v139 = *(_QWORD *)(v139 + 56);
                  while (v139 != v255 && v139 != 0);
                  if (!v139)
                    goto LABEL_530;
                }
              }
              v142 = -1;
LABEL_498:
              if (v142 == 129 || (v142 & 0x80) == 0)
                goto LABEL_530;
              v144 = 0;
              v145 = *v132;
              for (*v132 = 0; ; v144 = *v132)
              {
                v146 = v132;
                v132 = v136;
                v147 = *v136;
                *v136 = 0;
                *v146 = v147;
                if (v144)
                {
                  if (*(_DWORD *)(v144 + 24) == 2)
                  {
                    if ((*(_WORD *)(v144 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v144, v138);
                  }
                  else
                  {
                    *(_DWORD *)(v144 + 24) -= 2;
                  }
                }
                if (v136 == v5)
                  break;
                --v136;
                v138 = (void *)*(v132 - 1);
                if ((void *)v145 == v138)
                  goto LABEL_529;
                v253 = 0;
                v254 = 0;
                v255 = 0;
                WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v145, (uint64_t)v138, &v253);
                if (!v253)
                  goto LABEL_529;
                v148 = v254;
                if (!v254)
                  goto LABEL_520;
                if (!v255)
                  goto LABEL_529;
                v149 = *(unsigned __int16 *)(v254 + 28);
                v150 = *(unsigned __int16 *)(v255 + 28);
                if (((v149 | v150) & 0x80) == 0)
                {
                  if (v254 != v255)
                  {
                    do
                      v148 = *(_QWORD *)(v148 + 56);
                    while (v148 != v255 && v148 != 0);
                    if (!v148)
                      goto LABEL_529;
                  }
LABEL_520:
                  v151 = -1;
                  goto LABEL_521;
                }
                if ((v149 & 0x80) != 0)
                  v151 = -127;
                else
                  v151 = 1;
                if ((v150 & 0x80) == 0)
                  v151 = -1;
LABEL_521:
                if (v151 == 129 || (v151 & 0x80) == 0)
                  goto LABEL_529;
              }
              v132 = v5;
LABEL_529:
              result = *v132;
              *v132 = v145;
              if (result)
              {
                if (*(_DWORD *)(result + 24) == 2)
                {
                  if ((*(_WORD *)(result + 30) & 0x400) == 0)
                    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v138);
                }
                else
                {
                  *(_DWORD *)(result + 24) -= 2;
                }
              }
LABEL_530:
              v132 = v135 + 1;
              if (v135 + 1 == v251)
                return result;
            }
          }
          if (v134)
            return result;
          v227 = 0;
          v228 = 1;
          while (1)
          {
            v229 = v227;
            v227 = v228;
            result = *v132;
            v230 = v5[v229];
            if (*v132 == v230)
              goto LABEL_799;
            v253 = 0;
            v254 = 0;
            v255 = 0;
            result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(result, v230, &v253);
            if (!v253)
              goto LABEL_799;
            v231 = v254;
            if (!v254)
              goto LABEL_767;
            if (!v255)
              goto LABEL_799;
            v232 = *(unsigned __int16 *)(v254 + 28);
            v233 = *(unsigned __int16 *)(v255 + 28);
            if (((v232 | v233) & 0x80) == 0)
              break;
            if ((v232 & 0x80) != 0)
              v234 = -127;
            else
              v234 = 1;
            if ((v233 & 0x80) == 0)
              v234 = -1;
LABEL_768:
            if (v234 != 129 && (v234 & 0x80) != 0)
            {
              result = 0;
              v236 = *v132;
              for (*v132 = 0; ; result = *v132)
              {
                v24 = (uint64_t)v132;
                v132 = &v5[v229];
                v9 = *v132;
                *v132 = 0;
                *(_QWORD *)v24 = v9;
                if (result)
                {
                  v24 = (*(_DWORD *)(result + 24) - 2);
                  if (*(_DWORD *)(result + 24) == 2)
                  {
                    v24 = *(unsigned __int16 *)(result + 30);
                    if ((v24 & 0x400) == 0)
                      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                  }
                  else
                  {
                    *(_DWORD *)(result + 24) = v24;
                  }
                }
                if (v229 == -1)
                  goto LABEL_805;
                a2 = (unsigned int *)v5[--v229];
                if ((unsigned int *)v236 == a2
                  || (v253 = 0,
                      v254 = 0,
                      v255 = 0,
                      WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v236, (uint64_t)a2, &v253),
                      !v253))
                {
LABEL_798:
                  result = *v132;
                  *v132 = v236;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 24) == 2)
                    {
                      if ((*(_WORD *)(result + 30) & 0x400) == 0)
                        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                    }
                    else
                    {
                      *(_DWORD *)(result + 24) -= 2;
                    }
                  }
                  goto LABEL_799;
                }
                v237 = v254;
                if (!v254)
                  goto LABEL_790;
                if (!v255)
                  goto LABEL_798;
                v238 = *(unsigned __int16 *)(v254 + 28);
                v239 = *(unsigned __int16 *)(v255 + 28);
                if (((v238 | v239) & 0x80) == 0)
                  break;
                if ((v238 & 0x80) != 0)
                  v240 = -127;
                else
                  v240 = 1;
                if ((v239 & 0x80) == 0)
                  v240 = -1;
LABEL_791:
                if (v240 == 129 || (v240 & 0x80) == 0)
                  goto LABEL_798;
              }
              if (v254 != v255)
              {
                do
                  v237 = *(_QWORD *)(v237 + 56);
                while (v237 != v255 && v237 != 0);
                if (!v237)
                  goto LABEL_798;
              }
LABEL_790:
              v240 = -1;
              goto LABEL_791;
            }
LABEL_799:
            v228 = v227 + 1;
            v132 = &v5[v227 + 1];
            if (v132 == v251)
              return result;
          }
          if (v254 != v255)
          {
            do
              v231 = *(_QWORD *)(v231 + 56);
            while (v231 != v255 && v231 != 0);
            if (!v231)
              goto LABEL_799;
          }
LABEL_767:
          v234 = -1;
          goto LABEL_768;
        }
        if (!a3)
        {
          if (v5 == v251)
            return result;
          v153 = (v7 - 2) >> 1;
          v154 = v153;
          while (1)
          {
            v155 = v154;
            if (v153 < v154)
              goto LABEL_641;
            v156 = (2 * v154) | 1;
            v157 = &v252[v156];
            if (2 * v154 + 2 < (uint64_t)v7)
              break;
LABEL_563:
            v165 = (unsigned int **)&v252[v155];
            v166 = *v157;
            a2 = *v165;
            if ((unsigned int *)*v157 == *v165)
              goto LABEL_583;
            v253 = 0;
            v254 = 0;
            v255 = 0;
            WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v166, (uint64_t)a2, &v253);
            if (!v253)
              goto LABEL_583;
            v167 = v254;
            if (!v254)
              goto LABEL_580;
            if (!v255)
              goto LABEL_583;
            v168 = *(unsigned __int16 *)(v254 + 28);
            v169 = *(unsigned __int16 *)(v255 + 28);
            if (((v168 | v169) & 0x80) == 0)
            {
              if (v254 != v255)
              {
                do
                  v167 = *(_QWORD *)(v167 + 56);
                while (v167 != v255 && v167 != 0);
                if (!v167)
                  goto LABEL_583;
              }
LABEL_580:
              v170 = -1;
              goto LABEL_581;
            }
            if ((v168 & 0x80) != 0)
              v170 = -127;
            else
              v170 = 1;
            if ((v169 & 0x80) == 0)
              v170 = -1;
LABEL_581:
            if (v170 != 129 && (v170 & 0x80) != 0)
              goto LABEL_641;
LABEL_583:
            v172 = (uint64_t)*v165;
            *v165 = 0;
            while (1)
            {
              v173 = v157;
              v174 = (unsigned int *)*v157;
              *v157 = 0;
              v175 = *v165;
              *v165 = v174;
              if (v175)
              {
                if (v175[6] == 2)
                {
                  if ((*((_WORD *)v175 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v175, a2);
                }
                else
                {
                  v175[6] -= 2;
                }
              }
              if (v153 < v156)
                break;
              v176 = (2 * v156) | 1;
              v157 = &v252[v176];
              v156 = 2 * v156 + 2;
              if (v156 >= (uint64_t)v7)
              {
                v156 = v176;
                goto LABEL_614;
              }
              a2 = (unsigned int *)v157[1];
              v177 = *v157;
              if ((unsigned int *)*v157 == a2)
              {
                v181 = 0;
              }
              else
              {
                v253 = 0;
                v254 = 0;
                v255 = 0;
                WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v177, (uint64_t)a2, &v253);
                if (v253)
                {
                  v178 = v254;
                  if (!v254)
                    goto LABEL_609;
                  if (!v255)
                    goto LABEL_610;
                  v179 = *(unsigned __int16 *)(v254 + 28);
                  v180 = *(unsigned __int16 *)(v255 + 28);
                  if (((v179 | v180) & 0x80) != 0)
                  {
                    if ((v179 & 0x80) != 0)
                      v181 = -127;
                    else
                      v181 = 1;
                    if ((v180 & 0x80) == 0)
                      v181 = -1;
                    goto LABEL_611;
                  }
                  if (v254 == v255)
                    goto LABEL_609;
                  do
                    v178 = *(_QWORD *)(v178 + 56);
                  while (v178 != v255 && v178 != 0);
                  if (v178)
LABEL_609:
                    v181 = -1;
                  else
LABEL_610:
                    v181 = 1;
                }
                else
                {
                  v181 = -127;
                }
              }
LABEL_611:
              if (v181 != 129 && v181 < 0)
                ++v157;
              else
                v156 = v176;
LABEL_614:
              v183 = *v157;
              if (*v157 == v172)
              {
                v187 = 0;
              }
              else
              {
                v253 = 0;
                v254 = 0;
                v255 = 0;
                WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v183, v172, &v253);
                if (v253)
                {
                  v184 = v254;
                  if (!v254)
                    goto LABEL_633;
                  if (!v255)
                    goto LABEL_634;
                  v185 = *(unsigned __int16 *)(v254 + 28);
                  v186 = *(unsigned __int16 *)(v255 + 28);
                  if (((v185 | v186) & 0x80) != 0)
                  {
                    if ((v185 & 0x80) != 0)
                      v187 = -127;
                    else
                      v187 = 1;
                    if ((v186 & 0x80) == 0)
                      v187 = -1;
                    goto LABEL_635;
                  }
                  if (v254 == v255)
                    goto LABEL_633;
                  do
                    v184 = *(_QWORD *)(v184 + 56);
                  while (v184 != v255 && v184 != 0);
                  if (v184)
LABEL_633:
                    v187 = -1;
                  else
LABEL_634:
                    v187 = 1;
                }
                else
                {
                  v187 = -127;
                }
              }
LABEL_635:
              v165 = (unsigned int **)v173;
              if (v187 != 129)
              {
                v165 = (unsigned int **)v173;
                if ((v187 & 0x80) != 0)
                  break;
              }
            }
            v189 = (unsigned int *)*v173;
            *v173 = v172;
            if (v189)
            {
              if (v189[6] == 2)
              {
                if ((*((_WORD *)v189 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v189, a2);
              }
              else
              {
                v189[6] -= 2;
              }
            }
LABEL_641:
            v154 = v155 - 1;
            if (!v155)
            {
              v190 = (unint64_t)v6 >> 3;
              while (1)
              {
                v191 = 0;
                v192 = v252;
                v193 = *v252;
                *v252 = 0;
                do
                {
                  v194 = v192;
                  v192 += v191 + 1;
                  v195 = 2 * v191;
                  v191 = (2 * v191) | 1;
                  v196 = v195 + 2;
                  if (v195 + 2 >= v190)
                    goto LABEL_672;
                  a2 = (unsigned int *)v192[1];
                  v197 = *v192;
                  if ((unsigned int *)*v192 == a2)
                  {
                    v201 = 0;
                  }
                  else
                  {
                    v253 = 0;
                    v254 = 0;
                    v255 = 0;
                    WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v197, (uint64_t)a2, &v253);
                    if (v253)
                    {
                      v198 = v254;
                      if (!v254)
                        goto LABEL_668;
                      if (!v255)
                        goto LABEL_669;
                      v199 = *(unsigned __int16 *)(v254 + 28);
                      v200 = *(unsigned __int16 *)(v255 + 28);
                      if (((v199 | v200) & 0x80) != 0)
                      {
                        if ((v199 & 0x80) != 0)
                          v201 = -127;
                        else
                          v201 = 1;
                        if ((v200 & 0x80) == 0)
                          v201 = -1;
                        goto LABEL_670;
                      }
                      if (v254 == v255)
                        goto LABEL_668;
                      do
                        v198 = *(_QWORD *)(v198 + 56);
                      while (v198 != v255 && v198 != 0);
                      if (v198)
LABEL_668:
                        v201 = -1;
                      else
LABEL_669:
                        v201 = 1;
                    }
                    else
                    {
                      v201 = -127;
                    }
                  }
LABEL_670:
                  if (v201 != 129 && v201 < 0)
                  {
                    ++v192;
                    v191 = v196;
                  }
LABEL_672:
                  v203 = *v192;
                  *v192 = 0;
                  v204 = *v194;
                  *v194 = v203;
                  if (v204)
                  {
                    if (*(_DWORD *)(v204 + 24) == 2)
                    {
                      if ((*(_WORD *)(v204 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v204, a2);
                    }
                    else
                    {
                      *(_DWORD *)(v204 + 24) -= 2;
                    }
                  }
                }
                while (v191 <= (uint64_t)((unint64_t)(v190 - 2) >> 1));
                v205 = v251 - 1;
                v20 = v192 == --v251;
                if (!v20)
                {
                  v206 = *v205;
                  *v205 = 0;
                  v207 = *v192;
                  *v192 = v206;
                  if (v207)
                  {
                    if (*(_DWORD *)(v207 + 24) == 2)
                    {
                      if ((*(_WORD *)(v207 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v207, a2);
                    }
                    else
                    {
                      *(_DWORD *)(v207 + 24) -= 2;
                    }
                  }
                  result = *v205;
                  *v205 = v193;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 24) == 2)
                    {
                      if ((*(_WORD *)(result + 30) & 0x400) == 0)
                        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                    }
                    else
                    {
                      *(_DWORD *)(result + 24) -= 2;
                    }
                  }
                  v208 = (char *)(v192 + 1) - (char *)v252;
                  if (v208 < 9)
                    goto LABEL_694;
                  v209 = (((unint64_t)v208 >> 3) - 2) >> 1;
                  v210 = &v252[v209];
                  result = *v210;
                  a2 = (unsigned int *)*v192;
                  if (*v210 == *v192)
                    goto LABEL_694;
                  v253 = 0;
                  v254 = 0;
                  v255 = 0;
                  result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(result, (uint64_t)a2, &v253);
                  if (!v253)
                    goto LABEL_694;
                  v211 = v254;
                  if (v254)
                  {
                    if (!v255)
                      goto LABEL_694;
                    v212 = *(unsigned __int16 *)(v254 + 28);
                    v213 = *(unsigned __int16 *)(v255 + 28);
                    if (((v212 | v213) & 0x80) != 0)
                    {
                      if ((v212 & 0x80) != 0)
                        v214 = -127;
                      else
                        v214 = 1;
                      if ((v213 & 0x80) == 0)
                        v214 = -1;
LABEL_705:
                      if (v214 == 129 || (v214 & 0x80) == 0)
                        goto LABEL_694;
                      v217 = *v192;
                      *v192 = 0;
                      while (2)
                      {
                        v218 = v210;
                        v219 = *v210;
                        *v210 = 0;
                        v220 = *v192;
                        *v192 = v219;
                        if (v220)
                        {
                          if (*(_DWORD *)(v220 + 24) == 2)
                          {
                            if ((*(_WORD *)(v220 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v220, a2);
                          }
                          else
                          {
                            *(_DWORD *)(v220 + 24) -= 2;
                          }
                        }
                        if (!v209
                          || (v209 = (v209 - 1) >> 1, v210 = &v252[v209], v221 = *v210, *v210 == v217)
                          || (v253 = 0,
                              v254 = 0,
                              v255 = 0,
                              WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v221, v217, &v253),
                              !v253))
                        {
LABEL_735:
                          result = *v218;
                          *v218 = v217;
                          if (result)
                            goto LABEL_736;
                          goto LABEL_694;
                        }
                        v222 = v254;
                        if (v254)
                        {
                          if (!v255)
                            goto LABEL_735;
                          v223 = *(unsigned __int16 *)(v254 + 28);
                          v224 = *(unsigned __int16 *)(v255 + 28);
                          if (((v223 | v224) & 0x80) != 0)
                          {
                            if ((v223 & 0x80) != 0)
                              v225 = -127;
                            else
                              v225 = 1;
                            if ((v224 & 0x80) == 0)
                              v225 = -1;
LABEL_728:
                            if (v225 == 129)
                              goto LABEL_735;
                            v192 = v218;
                            if ((v225 & 0x80) == 0)
                              goto LABEL_735;
                            continue;
                          }
                          if (v254 != v255)
                          {
                            do
                              v222 = *(_QWORD *)(v222 + 56);
                            while (v222 != v255 && v222 != 0);
                            if (!v222)
                              goto LABEL_735;
                          }
                        }
                        break;
                      }
                      v225 = -1;
                      goto LABEL_728;
                    }
                    if (v254 != v255)
                    {
                      do
                        v211 = *(_QWORD *)(v211 + 56);
                      while (v211 != v255 && v211 != 0);
                      if (!v211)
                        goto LABEL_694;
                    }
                  }
                  v214 = -1;
                  goto LABEL_705;
                }
                result = *v192;
                *v192 = v193;
                if (result)
                {
LABEL_736:
                  if (*(_DWORD *)(result + 24) == 2)
                  {
                    if ((*(_WORD *)(result + 30) & 0x400) == 0)
                      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                  }
                  else
                  {
                    *(_DWORD *)(result + 24) -= 2;
                  }
                }
LABEL_694:
                if (v190-- <= 2)
                  return result;
              }
            }
          }
          v158 = v157[1];
          v159 = *v157;
          if (*v157 == v158)
          {
            v163 = 0;
          }
          else
          {
            v253 = 0;
            v254 = 0;
            v255 = 0;
            WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v159, v158, &v253);
            if (v253)
            {
              v160 = v254;
              if (!v254)
                goto LABEL_559;
              if (!v255)
                goto LABEL_560;
              v161 = *(unsigned __int16 *)(v254 + 28);
              v162 = *(unsigned __int16 *)(v255 + 28);
              if (((v161 | v162) & 0x80) != 0)
              {
                if ((v161 & 0x80) != 0)
                  v163 = -127;
                else
                  v163 = 1;
                if ((v162 & 0x80) == 0)
                  v163 = -1;
                goto LABEL_561;
              }
              if (v254 == v255)
                goto LABEL_559;
              do
                v160 = *(_QWORD *)(v160 + 56);
              while (v160 != v255 && v160 != 0);
              if (v160)
LABEL_559:
                v163 = -1;
              else
LABEL_560:
                v163 = 1;
            }
            else
            {
              v163 = -127;
            }
          }
LABEL_561:
          if (v163 != 129 && v163 < 0)
          {
            ++v157;
            v156 = 2 * v155 + 2;
          }
          goto LABEL_563;
        }
        v8 = (void **)&v5[v7 >> 1];
        if ((unint64_t)v6 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)&v5[v7 >> 1], v5, v247);
          v13 = v251;
          v14 = v5;
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)v5, &v5[v7 >> 1], v247);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)v5 + 1, (uint64_t *)v8 - 1, (unsigned int **)v251 - 2);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)v5 + 2, &v5[(v7 >> 1) + 1], (unsigned int **)v251 - 3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>(v8 - 1, &v5[v7 >> 1], (unsigned int **)&v5[(v7 >> 1) + 1]);
          v10 = (void *)*v5;
          *v5 = 0;
          v11 = *v8;
          *v8 = 0;
          v12 = (WebCore::Node *)*v5;
          *v5 = (uint64_t)v11;
          v13 = v251;
          if (v12)
          {
            if (*((_DWORD *)v12 + 6) == 2)
            {
              if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v12, a2);
            }
            else
            {
              *((_DWORD *)v12 + 6) -= 2;
            }
          }
          result = (uint64_t)*v8;
          *v8 = v10;
          v14 = v5;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
        }
        v248 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          result = *(v14 - 1);
          v15 = *v14;
          if (result == *v14)
            goto LABEL_223;
          v253 = 0;
          v254 = 0;
          v255 = 0;
          result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(result, v15, &v253);
          if (!v253)
            goto LABEL_223;
          v16 = v254;
          if (!v254)
            goto LABEL_30;
          v9 = v255;
          if (!v255)
            goto LABEL_223;
          v17 = *(unsigned __int16 *)(v254 + 28);
          v18 = *(unsigned __int16 *)(v255 + 28);
          if (((v17 | v18) & 0x80) == 0)
          {
            if (v254 != v255)
            {
              do
              {
                v16 = *(_QWORD *)(v16 + 56);
                v20 = v16 == v255 || v16 == 0;
              }
              while (!v20);
              if (!v16)
                goto LABEL_223;
            }
LABEL_30:
            v19 = -1;
            goto LABEL_31;
          }
          if ((v17 & 0x80) != 0)
            v19 = -127;
          else
            v19 = 1;
          if ((v18 & 0x80) == 0)
            v19 = -1;
LABEL_31:
          v9 = v19;
          if (v19 != 129 && (v19 & 0x80) != 0)
            goto LABEL_33;
LABEL_223:
          v76 = *v14;
          *v14 = 0;
          v24 = (uint64_t)(v251 - 1);
          a2 = *v247;
          v5 = v14;
          if ((unsigned int *)v76 == *v247)
            goto LABEL_277;
          v253 = 0;
          v254 = 0;
          v255 = 0;
          result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v76, (uint64_t)a2, &v253);
          v24 = v253;
          if (!v253)
          {
LABEL_276:
            v5 = v14;
            goto LABEL_277;
          }
          v24 = v254;
          if (!v254)
            goto LABEL_247;
          v9 = v255;
          if (!v255)
            goto LABEL_276;
          v77 = *(unsigned __int16 *)(v254 + 28);
          v78 = *(unsigned __int16 *)(v255 + 28);
          if (((v77 | v78) & 0x80) == 0)
          {
            if (v254 != v255)
            {
              do
                v24 = *(_QWORD *)(v24 + 56);
              while (v24 != v255 && v24 != 0);
              if (!v24)
                goto LABEL_276;
            }
LABEL_247:
            v24 = 255;
            goto LABEL_248;
          }
          if ((v77 & 0x80) != 0)
            LODWORD(v24) = -127;
          else
            LODWORD(v24) = 1;
          if ((v78 & 0x80) != 0)
            v24 = v24;
          else
            v24 = 0xFFFFFFFFLL;
LABEL_248:
          v9 = v24;
          v5 = v14;
          if (v24 != 129)
          {
            v5 = v14;
            if ((v24 & 0x80) != 0)
            {
              while (1)
              {
                if (++v5 == v13)
                  goto LABEL_805;
                a2 = (unsigned int *)*v5;
                if (v76 == *v5)
                {
                  v24 = 0;
                }
                else
                {
                  v253 = 0;
                  v254 = 0;
                  v255 = 0;
                  result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v76, (uint64_t)a2, &v253);
                  if (v253)
                  {
                    v80 = v254;
                    if (!v254)
                      goto LABEL_271;
                    if (!v255)
                      goto LABEL_272;
                    v81 = *(unsigned __int16 *)(v254 + 28);
                    v82 = *(unsigned __int16 *)(v255 + 28);
                    if (((v81 | v82) & 0x80) != 0)
                    {
                      if ((v81 & 0x80) != 0)
                        LODWORD(v24) = -127;
                      else
                        LODWORD(v24) = 1;
                      if ((v82 & 0x80) != 0)
                        v24 = v24;
                      else
                        v24 = 0xFFFFFFFFLL;
                      goto LABEL_273;
                    }
                    if (v254 == v255)
                      goto LABEL_271;
                    do
                      v80 = *(_QWORD *)(v80 + 56);
                    while (v80 != v255 && v80 != 0);
                    if (v80)
LABEL_271:
                      v24 = 255;
                    else
LABEL_272:
                      v24 = 1;
                  }
                  else
                  {
                    v24 = 129;
                  }
                }
LABEL_273:
                v9 = v24;
                if (v24 != 129 && (v24 & 0x80) != 0)
                  goto LABEL_302;
              }
            }
          }
LABEL_277:
          do
          {
            if (++v5 >= v13)
              break;
            a2 = (unsigned int *)*v5;
            if (v76 == *v5)
            {
              v24 = 0;
            }
            else
            {
              v253 = 0;
              v254 = 0;
              v255 = 0;
              result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v76, (uint64_t)a2, &v253);
              if (v253)
              {
                v84 = v254;
                if (!v254)
                  goto LABEL_298;
                if (!v255)
                  goto LABEL_299;
                v85 = *(unsigned __int16 *)(v254 + 28);
                v86 = *(unsigned __int16 *)(v255 + 28);
                if (((v85 | v86) & 0x80) != 0)
                {
                  if ((v85 & 0x80) != 0)
                    LODWORD(v24) = -127;
                  else
                    LODWORD(v24) = 1;
                  if ((v86 & 0x80) != 0)
                    v24 = v24;
                  else
                    v24 = 0xFFFFFFFFLL;
                  goto LABEL_300;
                }
                if (v254 == v255)
                  goto LABEL_298;
                do
                  v84 = *(_QWORD *)(v84 + 56);
                while (v84 != v255 && v84 != 0);
                if (v84)
LABEL_298:
                  v24 = 255;
                else
LABEL_299:
                  v24 = 1;
              }
              else
              {
                v24 = 129;
              }
            }
LABEL_300:
            v9 = v24;
          }
          while (v24 == 129 || (v24 & 0x80) == 0);
LABEL_302:
          v88 = v13;
          if (v5 < v13)
          {
            v88 = v13;
            do
            {
              if (v88 == v14)
                goto LABEL_805;
              v89 = (unsigned int *)*--v88;
              a2 = v89;
              if ((unsigned int *)v76 == v89)
                break;
              v253 = 0;
              v254 = 0;
              v255 = 0;
              result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v76, (uint64_t)a2, &v253);
              if (!v253)
                break;
              v90 = v254;
              if (v254)
              {
                v9 = v255;
                if (!v255)
                  break;
                v91 = *(unsigned __int16 *)(v254 + 28);
                v92 = *(unsigned __int16 *)(v255 + 28);
                if (((v91 | v92) & 0x80) != 0)
                {
                  if ((v91 & 0x80) != 0)
                    LODWORD(v24) = -127;
                  else
                    LODWORD(v24) = 1;
                  if ((v92 & 0x80) != 0)
                    v24 = v24;
                  else
                    v24 = 0xFFFFFFFFLL;
                  goto LABEL_324;
                }
                if (v254 != v255)
                {
                  do
                    v90 = *(_QWORD *)(v90 + 56);
                  while (v90 != v255 && v90 != 0);
                  if (!v90)
                    break;
                }
              }
              v24 = 255;
LABEL_324:
              v9 = v24;
            }
            while (v24 != 129 && (v24 & 0x80) != 0);
          }
          if (v5 < v88)
          {
            while (2)
            {
              v94 = *v5;
              *v5 = 0;
              v24 = *v88;
              *v88 = 0;
              v95 = (WebCore::Node *)*v5;
              *v5 = v24;
              if (v95)
              {
                v24 = (*((_DWORD *)v95 + 6) - 2);
                if (*((_DWORD *)v95 + 6) == 2)
                {
                  v24 = *((unsigned __int16 *)v95 + 15);
                  if ((v24 & 0x400) == 0)
                    WebCore::Node::removedLastRef(v95, a2);
                }
                else
                {
                  *((_DWORD *)v95 + 6) = v24;
                }
              }
              result = *v88;
              *v88 = v94;
              if (result)
              {
                v24 = (*(_DWORD *)(result + 24) - 2);
                if (*(_DWORD *)(result + 24) == 2)
                {
                  v24 = *(unsigned __int16 *)(result + 30);
                  if ((v24 & 0x400) == 0)
                    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                }
                else
                {
                  *(_DWORD *)(result + 24) = v24;
                }
              }
              while (2)
              {
                if (++v5 == v13)
                  goto LABEL_805;
                v96 = (WebCore::Node *)*v5;
                if (v76 == *v5)
                {
                  v24 = 0;
                }
                else
                {
                  v97 = WebCore::depth<(WebCore::TreeType)2>(v76);
                  v98 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v96);
                  if (v97 >= v98)
                    result = v76;
                  else
                    result = (uint64_t)v96;
                  if (v97 >= v98)
                    v99 = v96;
                  else
                    v99 = (WebCore::Node *)v76;
                  if (v97 >= v98)
                    v100 = v97 - v98;
                  else
                    v100 = v98 - v97;
                  if (v100)
                  {
                    v101 = (WebCore::Node *)result;
                    do
                    {
                      result = WebCore::Node::parentInComposedTree(v101);
                      v102 = v101;
                      v101 = (WebCore::Node *)result;
                      --v100;
                    }
                    while (v100);
                  }
                  else
                  {
                    v102 = 0;
                  }
                  if ((WebCore::Node *)result == v99)
                  {
                    v104 = 0;
                  }
                  else
                  {
                    v103 = v99;
                    v99 = (WebCore::Node *)result;
                    do
                    {
                      v102 = v99;
                      v104 = v103;
                      v99 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v99);
                      result = WebCore::Node::parentInComposedTree(v104);
                      v103 = (WebCore::Node *)result;
                    }
                    while (v99 != (WebCore::Node *)result);
                  }
                  if (v97 >= v98)
                    v105 = v102;
                  else
                    v105 = v104;
                  if (v97 >= v98)
                    v106 = v104;
                  else
                    v106 = v102;
                  if (v99)
                  {
                    if (!v105)
                      goto LABEL_375;
                    if (!v106)
                      goto LABEL_376;
                    v107 = *((unsigned __int16 *)v105 + 14);
                    v108 = *((unsigned __int16 *)v106 + 14);
                    if (((v107 | v108) & 0x80) != 0)
                    {
                      if ((v107 & 0x80) != 0)
                        LODWORD(v24) = -127;
                      else
                        LODWORD(v24) = 1;
                      if ((v108 & 0x80) != 0)
                        v24 = v24;
                      else
                        v24 = 0xFFFFFFFFLL;
                      goto LABEL_377;
                    }
                    if (v105 == v106)
                      goto LABEL_375;
                    do
                      v105 = (WebCore::Node *)*((_QWORD *)v105 + 7);
                    while (v105 != v106 && v105 != 0);
                    if (v105)
LABEL_375:
                      v24 = 255;
                    else
LABEL_376:
                      v24 = 1;
                  }
                  else
                  {
                    v24 = 129;
                  }
                }
LABEL_377:
                v9 = v24;
                if (v24 == 129 || (v24 & 0x80) == 0)
                  continue;
                break;
              }
LABEL_379:
              v24 = (uint64_t)v252;
              if (v88 == v252)
                goto LABEL_805;
              v111 = *--v88;
              v110 = v111;
              if (v76 == v111)
                goto LABEL_425;
              v112 = WebCore::depth<(WebCore::TreeType)2>(v76);
              v113 = WebCore::depth<(WebCore::TreeType)2>(v110);
              result = v112 >= v113 ? v76 : v110;
              v114 = (WebCore::Node *)(v112 >= v113 ? v110 : v76);
              v115 = v112 >= v113 ? v112 - v113 : v113 - v112;
              if (v115)
              {
                v116 = (WebCore::Node *)result;
                do
                {
                  result = WebCore::Node::parentInComposedTree(v116);
                  v117 = v116;
                  v116 = (WebCore::Node *)result;
                  --v115;
                }
                while (v115);
              }
              else
              {
                v117 = 0;
              }
              if ((WebCore::Node *)result == v114)
              {
                v119 = 0;
              }
              else
              {
                v118 = v114;
                v114 = (WebCore::Node *)result;
                do
                {
                  v117 = v114;
                  v119 = v118;
                  v114 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v114);
                  result = WebCore::Node::parentInComposedTree(v119);
                  v118 = (WebCore::Node *)result;
                }
                while (v114 != (WebCore::Node *)result);
              }
              v120 = v112 >= v113 ? v117 : v119;
              v9 = (uint64_t)(v112 >= v113 ? v119 : v117);
              if (!v114)
              {
LABEL_425:
                v14 = v252;
                if (v5 >= v88)
                  goto LABEL_435;
                continue;
              }
              break;
            }
            if (v120)
            {
              if (!v9)
                goto LABEL_425;
              v121 = *((unsigned __int16 *)v120 + 14);
              v122 = *(unsigned __int16 *)(v9 + 28);
              if (((v121 | v122) & 0x80) != 0)
              {
                if ((v121 & 0x80) != 0)
                  v123 = -127;
                else
                  v123 = 1;
                if ((v122 & 0x80) == 0)
                  v123 = -1;
LABEL_423:
                v9 = v123;
                if (v123 == 129 || (v123 & 0x80) == 0)
                  goto LABEL_425;
                goto LABEL_379;
              }
              if (v120 != (WebCore::Node *)v9)
              {
                do
                  v120 = (WebCore::Node *)*((_QWORD *)v120 + 7);
                while (v120 != (WebCore::Node *)v9 && v120 != 0);
                if (!v120)
                  goto LABEL_425;
              }
            }
            v123 = -1;
            goto LABEL_423;
          }
LABEL_435:
          v125 = v5 - 1;
          if (v5 - 1 != v14)
          {
            v126 = *v125;
            *v125 = 0;
            v127 = *v14;
            *v14 = v126;
            if (v127)
            {
              if (*(_DWORD *)(v127 + 24) == 2)
              {
                if ((*(_WORD *)(v127 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v127, a2);
              }
              else
              {
                *(_DWORD *)(v127 + 24) -= 2;
              }
            }
          }
          a4 = 0;
          result = *v125;
          *v125 = v76;
          a3 = v248;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              a4 = 0;
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
              {
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                a4 = 0;
              }
            }
            else
            {
              a4 = 0;
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          continue;
        }
LABEL_33:
        v21 = *v14;
        *v14 = 0;
        v22 = v14;
        do
        {
          v23 = v22++;
          v24 = (uint64_t)v251;
          if (v22 == v251)
            goto LABEL_805;
          result = *v22;
          if (*v22 == v21)
            break;
          v253 = 0;
          v254 = 0;
          v255 = 0;
          result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(result, v21, &v253);
          v24 = v253;
          if (!v253)
            break;
          v24 = v254;
          if (v254)
          {
            v9 = v255;
            if (!v255)
              break;
            v25 = *(unsigned __int16 *)(v254 + 28);
            v26 = *(unsigned __int16 *)(v255 + 28);
            if (((v25 | v26) & 0x80) != 0)
            {
              if ((v25 & 0x80) != 0)
                LODWORD(v24) = -127;
              else
                LODWORD(v24) = 1;
              if ((v26 & 0x80) != 0)
                v24 = v24;
              else
                v24 = 0xFFFFFFFFLL;
              goto LABEL_54;
            }
            if (v254 != v255)
            {
              do
                v24 = *(_QWORD *)(v24 + 56);
              while (v24 != v255 && v24 != 0);
              if (!v24)
                break;
            }
          }
          v24 = 255;
LABEL_54:
          v9 = v24;
        }
        while (v24 != 129 && (v24 & 0x80) != 0);
        v28 = v251;
        if (v23 != v14)
        {
          while (1)
          {
            if (v28 == v14)
              goto LABEL_805;
            v29 = *--v28;
            result = v29;
            if (v29 == v21)
            {
              v24 = 0;
            }
            else
            {
              v253 = 0;
              v254 = 0;
              v255 = 0;
              result = WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(result, v21, &v253);
              if (v253)
              {
                v30 = v254;
                if (!v254)
                  goto LABEL_78;
                if (!v255)
                  goto LABEL_79;
                v31 = *(unsigned __int16 *)(v254 + 28);
                v32 = *(unsigned __int16 *)(v255 + 28);
                if (((v31 | v32) & 0x80) != 0)
                {
                  if ((v31 & 0x80) != 0)
                    LODWORD(v24) = -127;
                  else
                    LODWORD(v24) = 1;
                  if ((v32 & 0x80) != 0)
                    v24 = v24;
                  else
                    v24 = 0xFFFFFFFFLL;
                  goto LABEL_80;
                }
                if (v254 == v255)
                  goto LABEL_78;
                do
                  v30 = *(_QWORD *)(v30 + 56);
                while (v30 != v255 && v30 != 0);
                if (v30)
LABEL_78:
                  v24 = 255;
                else
LABEL_79:
                  v24 = 1;
              }
              else
              {
                v24 = 129;
              }
            }
LABEL_80:
            v9 = v24;
            if (v24 != 129 && (v24 & 0x80) != 0)
              goto LABEL_108;
          }
        }
        v28 = v251;
        while (v22 < v28)
        {
          v35 = *--v28;
          v34 = v35;
          if (v35 == v21)
          {
            v39 = 0;
          }
          else
          {
            v253 = 0;
            v254 = 0;
            v255 = 0;
            WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v34, v21, &v253);
            if (v253)
            {
              v36 = v254;
              if (!v254)
                goto LABEL_104;
              if (!v255)
                goto LABEL_105;
              v37 = *(unsigned __int16 *)(v254 + 28);
              v38 = *(unsigned __int16 *)(v255 + 28);
              if (((v37 | v38) & 0x80) != 0)
              {
                if ((v37 & 0x80) != 0)
                  v39 = -127;
                else
                  v39 = 1;
                if ((v38 & 0x80) == 0)
                  v39 = -1;
                goto LABEL_106;
              }
              if (v254 == v255)
                goto LABEL_104;
              do
                v36 = *(_QWORD *)(v36 + 56);
              while (v36 != v255 && v36 != 0);
              if (v36)
LABEL_104:
                v39 = -1;
              else
LABEL_105:
                v39 = 1;
            }
            else
            {
              v39 = -127;
            }
          }
LABEL_106:
          v9 = v39;
          if (v39 != 129 && (v39 & 0x80) != 0)
            break;
        }
LABEL_108:
        v249 = v28;
        v250 = v22;
        if (v22 >= v28)
        {
LABEL_216:
          if (v23 != v14)
          {
            v72 = *v23;
            *v23 = 0;
            v73 = *v14;
            *v14 = v72;
            if (v73)
            {
              if (*(_DWORD *)(v73 + 24) == 2)
              {
                if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v73, a2);
              }
              else
              {
                *(_DWORD *)(v73 + 24) -= 2;
              }
            }
          }
          v74 = *v23;
          *v23 = v21;
          a3 = v248;
          if (v74)
          {
            if (*(_DWORD *)(v74 + 24) == 2)
            {
              if ((*(_WORD *)(v74 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v74, a2);
            }
            else
            {
              *(_DWORD *)(v74 + 24) -= 2;
            }
          }
          if (v250 < v249)
          {
LABEL_222:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *,false>(v14, v23, v248, a4 & 1);
            a4 = 0;
            v5 = v23 + 1;
            continue;
          }
          v75 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((uint64_t)v14, v23);
          v5 = v23 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((uint64_t)(v23 + 1), v251);
          if (!(_DWORD)result)
          {
            if (v75)
              continue;
            goto LABEL_222;
          }
          v251 = v23;
          if (v75)
            return result;
          goto LABEL_2;
        }
        v41 = v28;
        v42 = v250;
LABEL_110:
        v43 = *v42;
        *v42 = 0;
        v44 = *v41;
        *v41 = 0;
        v45 = *v42;
        *v42 = v44;
        if (v45)
        {
          if (*(_DWORD *)(v45 + 24) == 2)
          {
            if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v45, a2);
          }
          else
          {
            *(_DWORD *)(v45 + 24) -= 2;
          }
        }
        result = *v41;
        *v41 = v43;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        while (2)
        {
          v23 = v42++;
          v24 = (uint64_t)v251;
          if (v42 != v251)
          {
            v46 = (WebCore::Node *)*v42;
            if (*v42 == v21)
              goto LABEL_156;
            v47 = WebCore::depth<(WebCore::TreeType)2>(*v42);
            v48 = WebCore::depth<(WebCore::TreeType)2>(v21);
            result = v47 >= v48 ? (uint64_t)v46 : v21;
            if (v47 < v48)
            {
              v49 = v48 - v47;
            }
            else
            {
              v46 = (WebCore::Node *)v21;
              v49 = v47 - v48;
            }
            if (v49)
            {
              v50 = (WebCore::Node *)result;
              do
              {
                result = WebCore::Node::parentInComposedTree(v50);
                v51 = v50;
                v50 = (WebCore::Node *)result;
                --v49;
              }
              while (v49);
            }
            else
            {
              v51 = 0;
            }
            if ((WebCore::Node *)result == v46)
            {
              v53 = 0;
            }
            else
            {
              v52 = v46;
              v46 = (WebCore::Node *)result;
              do
              {
                v51 = v46;
                v53 = v52;
                v46 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v46);
                result = WebCore::Node::parentInComposedTree(v53);
                v52 = (WebCore::Node *)result;
              }
              while (v46 != (WebCore::Node *)result);
            }
            v24 = (uint64_t)(v47 >= v48 ? v51 : v53);
            v9 = (uint64_t)(v47 >= v48 ? v53 : v51);
            v14 = v252;
            if (!v46)
              goto LABEL_156;
            if (!v24)
              goto LABEL_153;
            if (!v9)
              goto LABEL_156;
            v54 = *(unsigned __int16 *)(v24 + 28);
            v55 = *(unsigned __int16 *)(v9 + 28);
            if (((v54 | v55) & 0x80) != 0)
            {
              if ((v54 & 0x80) != 0)
                LODWORD(v24) = -127;
              else
                LODWORD(v24) = 1;
              if ((v55 & 0x80) != 0)
                v24 = v24;
              else
                v24 = 0xFFFFFFFFLL;
LABEL_154:
              v9 = v24;
              if (v24 == 129 || (v24 & 0x80) == 0)
                goto LABEL_156;
              continue;
            }
            if (v24 == v9)
              goto LABEL_153;
            do
              v24 = *(_QWORD *)(v24 + 56);
            while (v24 != v9 && v24 != 0);
            if (v24)
            {
LABEL_153:
              v24 = 255;
              goto LABEL_154;
            }
LABEL_156:
            if (v41 == v14)
              break;
            v58 = *--v41;
            v57 = v58;
            if (v58 != v21)
            {
              v59 = WebCore::depth<(WebCore::TreeType)2>(v57);
              v60 = WebCore::depth<(WebCore::TreeType)2>(v21);
              if (v59 >= v60)
                result = v57;
              else
                result = v21;
              if (v59 >= v60)
                v61 = (WebCore::Node *)v21;
              else
                v61 = (WebCore::Node *)v57;
              if (v59 >= v60)
                v62 = v59 - v60;
              else
                v62 = v60 - v59;
              if (v62)
              {
                v63 = (WebCore::Node *)result;
                do
                {
                  result = WebCore::Node::parentInComposedTree(v63);
                  v64 = v63;
                  v63 = (WebCore::Node *)result;
                  --v62;
                }
                while (v62);
              }
              else
              {
                v64 = 0;
              }
              if ((WebCore::Node *)result == v61)
              {
                v66 = 0;
              }
              else
              {
                v65 = v61;
                v61 = (WebCore::Node *)result;
                do
                {
                  v64 = v61;
                  v66 = v65;
                  v61 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v61);
                  result = WebCore::Node::parentInComposedTree(v66);
                  v65 = (WebCore::Node *)result;
                }
                while (v61 != (WebCore::Node *)result);
              }
              if (v59 >= v60)
                v67 = v64;
              else
                v67 = v66;
              if (v59 >= v60)
                v68 = v66;
              else
                v68 = v64;
              if (!v61)
              {
                v24 = 129;
                v14 = v252;
                goto LABEL_204;
              }
              v14 = v252;
              if (!v67)
                goto LABEL_202;
              if (v68)
              {
                v69 = *((unsigned __int16 *)v67 + 14);
                v70 = *((unsigned __int16 *)v68 + 14);
                if (((v69 | v70) & 0x80) != 0)
                {
                  if ((v69 & 0x80) != 0)
                    LODWORD(v24) = -127;
                  else
                    LODWORD(v24) = 1;
                  if ((v70 & 0x80) != 0)
                    v24 = v24;
                  else
                    v24 = 0xFFFFFFFFLL;
LABEL_204:
                  v9 = v24;
                  if (v24 != 129 && (v24 & 0x80) != 0)
                  {
                    if (v42 >= v41)
                      goto LABEL_216;
                    goto LABEL_110;
                  }
                  goto LABEL_156;
                }
                if (v67 == v68)
                  goto LABEL_202;
                do
                  v67 = (WebCore::Node *)*((_QWORD *)v67 + 7);
                while (v67 != v68 && v67 != 0);
                if (v67)
                {
LABEL_202:
                  v24 = 255;
                  goto LABEL_204;
                }
              }
              v24 = 1;
              goto LABEL_204;
            }
            v24 = 0;
            goto LABEL_204;
          }
          break;
        }
LABEL_805:
        __break(1u);
LABEL_806:
        if (v24 == v9)
          goto LABEL_813;
        do
          v24 = *(_QWORD *)(v24 + 56);
        while (v24 != v9 && v24 != 0);
        if (v24)
        {
LABEL_813:
          v131 = -1;
LABEL_814:
          if (v131 != 129 && (v131 & 0x80) != 0)
          {
            v243 = *v252;
            *v252 = 0;
            v244 = *(v251 - 1);
            *(v251 - 1) = 0;
            v245 = *v252;
            *v252 = v244;
            if (v245)
            {
              if (*(_DWORD *)(v245 + 24) == 2)
              {
                if ((*(_WORD *)(v245 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v245, a2);
              }
              else
              {
                *(_DWORD *)(v245 + 24) -= 2;
              }
            }
            result = *(v251 - 1);
            *(v251 - 1) = v243;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
          }
        }
        return result;
    }
  }
}

unsigned int *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *,0>(void **a1, uint64_t *a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int *result;
  unsigned int *v11;
  void *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  void *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int8 v38;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int8 v49;
  void *v51;
  uint64_t v52;
  WebCore::Node *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>(a1, a2, a3, a4);
  result = *a5;
  v11 = *a4;
  if (*a5 == *a4)
    return result;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, (uint64_t)v11, &v54);
  if (!v54)
    return result;
  v13 = v55;
  if (!v55)
  {
LABEL_18:
    v16 = -1;
    goto LABEL_19;
  }
  if (!v56)
    return result;
  v14 = *(unsigned __int16 *)(v55 + 28);
  v15 = *(unsigned __int16 *)(v56 + 28);
  if (((v14 | v15) & 0x80) == 0)
  {
    if (v55 != v56)
    {
      do
        v13 = *(_QWORD *)(v13 + 56);
      while (v13 != v56 && v13 != 0);
      if (!v13)
        return result;
    }
    goto LABEL_18;
  }
  if ((v14 & 0x80) != 0)
    v16 = -127;
  else
    v16 = 1;
  if ((v15 & 0x80) == 0)
    v16 = -1;
LABEL_19:
  if (v16 == 129 || (v16 & 0x80) == 0)
    return result;
  v18 = *a4;
  *a4 = 0;
  v19 = *a5;
  *a5 = 0;
  v20 = *a4;
  *a4 = v19;
  if (v20)
  {
    if (v20[6] == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20, v12);
    }
    else
    {
      v20[6] -= 2;
    }
  }
  v21 = *a5;
  *a5 = v18;
  if (v21)
  {
    if (v21[6] == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v12);
    }
    else
    {
      v21[6] -= 2;
    }
  }
  result = *a4;
  v22 = *a3;
  if (*a4 == *a3)
    return result;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, (uint64_t)v22, &v54);
  if (!v54)
    return result;
  v24 = v55;
  if (!v55)
    goto LABEL_40;
  if (!v56)
    return result;
  v25 = *(unsigned __int16 *)(v55 + 28);
  v26 = *(unsigned __int16 *)(v56 + 28);
  if (((v25 | v26) & 0x80) == 0)
  {
    if (v55 != v56)
    {
      do
        v24 = *(_QWORD *)(v24 + 56);
      while (v24 != v56 && v24 != 0);
      if (!v24)
        return result;
    }
LABEL_40:
    v27 = -1;
    goto LABEL_41;
  }
  if ((v25 & 0x80) != 0)
    v27 = -127;
  else
    v27 = 1;
  if ((v26 & 0x80) == 0)
    v27 = -1;
LABEL_41:
  if (v27 == 129 || (v27 & 0x80) == 0)
    return result;
  v29 = *a3;
  *a3 = 0;
  v30 = *a4;
  *a4 = 0;
  v31 = *a3;
  *a3 = v30;
  if (v31)
  {
    if (v31[6] == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31, v23);
    }
    else
    {
      v31[6] -= 2;
    }
  }
  v32 = *a4;
  *a4 = v29;
  if (v32)
  {
    if (v32[6] == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32, v23);
    }
    else
    {
      v32[6] -= 2;
    }
  }
  result = *a3;
  v33 = *a2;
  if (*a3 == (unsigned int *)*a2)
    return result;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, v33, &v54);
  if (!v54)
    return result;
  v35 = v55;
  if (!v55)
    goto LABEL_66;
  if (!v56)
    return result;
  v36 = *(unsigned __int16 *)(v55 + 28);
  v37 = *(unsigned __int16 *)(v56 + 28);
  if (((v36 | v37) & 0x80) == 0)
  {
    if (v55 != v56)
    {
      do
        v35 = *(_QWORD *)(v35 + 56);
      while (v35 != v56 && v35 != 0);
      if (!v35)
        return result;
    }
LABEL_66:
    v38 = -1;
    goto LABEL_67;
  }
  if ((v36 & 0x80) != 0)
    v38 = -127;
  else
    v38 = 1;
  if ((v37 & 0x80) == 0)
    v38 = -1;
LABEL_67:
  if (v38 != 129 && (v38 & 0x80) != 0)
  {
    v40 = *a2;
    *a2 = 0;
    v41 = *a3;
    *a3 = 0;
    v42 = *a2;
    *a2 = (uint64_t)v41;
    if (v42)
    {
      if (*(_DWORD *)(v42 + 24) == 2)
      {
        if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v42, v34);
      }
      else
      {
        *(_DWORD *)(v42 + 24) -= 2;
      }
    }
    v43 = *a3;
    *a3 = (unsigned int *)v40;
    if (v43)
    {
      if (v43[6] == 2)
      {
        if ((*((_WORD *)v43 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v43, v34);
      }
      else
      {
        v43[6] -= 2;
      }
    }
    result = (unsigned int *)*a2;
    v44 = *a1;
    if ((void *)*a2 != *a1)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, (uint64_t)v44, &v54);
      if (v54)
      {
        v46 = v55;
        if (v55)
        {
          if (!v56)
            return result;
          v47 = *(unsigned __int16 *)(v55 + 28);
          v48 = *(unsigned __int16 *)(v56 + 28);
          if (((v47 | v48) & 0x80) != 0)
          {
            if ((v47 & 0x80) != 0)
              v49 = -127;
            else
              v49 = 1;
            if ((v48 & 0x80) == 0)
              v49 = -1;
            goto LABEL_97;
          }
          if (v55 != v56)
          {
            do
              v46 = *(_QWORD *)(v46 + 56);
            while (v46 != v56 && v46 != 0);
            if (!v46)
              return result;
          }
        }
        v49 = -1;
LABEL_97:
        if (v49 != 129 && (v49 & 0x80) != 0)
        {
          v51 = *a1;
          *a1 = 0;
          v52 = *a2;
          *a2 = 0;
          v53 = (WebCore::Node *)*a1;
          *a1 = (void *)v52;
          if (v53)
          {
            if (*((_DWORD *)v53 + 6) == 2)
            {
              if ((*((_WORD *)v53 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v53, v45);
            }
            else
            {
              *((_DWORD *)v53 + 6) -= 2;
            }
          }
          result = (unsigned int *)*a2;
          *a2 = (uint64_t)v51;
          if (result)
          {
            if (result[6] == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)result, v45);
            }
            else
            {
              result[6] -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>(void **a1, uint64_t *a2, unsigned int **a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  BOOL v14;
  unsigned int *result;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int *v24;
  WebCore::Node *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned __int8 v34;
  void *v35;
  WebCore::Node *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned __int8 v41;
  void *v43;
  void *v44;
  WebCore::Node *v45;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *a2;
  v7 = *a1;
  if ((void *)v6 == *a1)
  {
    v11 = 0;
    goto LABEL_23;
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v6, (uint64_t)v7, &v50);
  if (v50)
  {
    v8 = v51;
    if (!v51)
      goto LABEL_20;
    if (!v52)
      goto LABEL_21;
    v9 = *(unsigned __int16 *)(v51 + 28);
    v10 = *(unsigned __int16 *)(v52 + 28);
    if (((v9 | v10) & 0x80) != 0)
    {
      if ((v9 & 0x80) != 0)
        v11 = -127;
      else
        v11 = 1;
      if ((v10 & 0x80) == 0)
        v11 = -1;
      goto LABEL_22;
    }
    if (v51 == v52)
      goto LABEL_20;
    do
      v8 = *(_QWORD *)(v8 + 56);
    while (v8 != v52 && v8 != 0);
    if (v8)
LABEL_20:
      v11 = -1;
    else
LABEL_21:
      v11 = 1;
  }
  else
  {
    v11 = -127;
  }
LABEL_22:
  v6 = *a2;
LABEL_23:
  v14 = v11 != 129 && v11 < 0;
  result = *a3;
  if (*a3 == (unsigned int *)v6)
  {
    v19 = 0;
    goto LABEL_50;
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, v6, &v50);
  if (!v50)
  {
    v19 = -127;
    goto LABEL_50;
  }
  v16 = v51;
  if (!v51)
    goto LABEL_48;
  if (!v52)
  {
LABEL_49:
    v19 = 1;
    goto LABEL_50;
  }
  v17 = *(unsigned __int16 *)(v51 + 28);
  v18 = *(unsigned __int16 *)(v52 + 28);
  if (((v17 | v18) & 0x80) == 0)
  {
    if (v51 == v52)
      goto LABEL_48;
    do
      v16 = *(_QWORD *)(v16 + 56);
    while (v16 != v52 && v16 != 0);
    if (v16)
    {
LABEL_48:
      v19 = -1;
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  if ((v17 & 0x80) != 0)
    v19 = -127;
  else
    v19 = 1;
  if ((v18 & 0x80) == 0)
    v19 = -1;
LABEL_50:
  v22 = v19 != 129 && v19 < 0;
  if (!v14)
  {
    if (!v22)
      return result;
    v26 = (unsigned int *)*a2;
    *a2 = 0;
    v27 = *a3;
    *a3 = 0;
    v28 = *a2;
    *a2 = (uint64_t)v27;
    if (v28)
    {
      if (*(_DWORD *)(v28 + 24) == 2)
      {
        if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v28, v7);
      }
      else
      {
        *(_DWORD *)(v28 + 24) -= 2;
      }
    }
    v29 = *a3;
    *a3 = v26;
    if (v29)
    {
      if (v29[6] == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v29, v7);
      }
      else
      {
        v29[6] -= 2;
      }
    }
    result = (unsigned int *)*a2;
    v30 = (uint64_t)*a1;
    if ((void *)*a2 == *a1)
      return result;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, v30, &v50);
    if (!v50)
      return result;
    v31 = v51;
    if (v51)
    {
      if (!v52)
        return result;
      v32 = *(unsigned __int16 *)(v51 + 28);
      v33 = *(unsigned __int16 *)(v52 + 28);
      if (((v32 | v33) & 0x80) != 0)
      {
        if ((v32 & 0x80) != 0)
          v34 = -127;
        else
          v34 = 1;
        if ((v33 & 0x80) == 0)
          v34 = -1;
LABEL_95:
        if (v34 != 129 && (v34 & 0x80) != 0)
        {
          v43 = *a1;
          *a1 = 0;
          v44 = (void *)*a2;
          *a2 = 0;
          v45 = (WebCore::Node *)*a1;
          *a1 = v44;
          if (v45)
          {
            if (*((_DWORD *)v45 + 6) == 2)
            {
              if ((*((_WORD *)v45 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v45, v7);
            }
            else
            {
              *((_DWORD *)v45 + 6) -= 2;
            }
          }
          result = (unsigned int *)*a2;
          *a2 = (uint64_t)v43;
          if (result)
            goto LABEL_60;
        }
        return result;
      }
      if (v51 != v52)
      {
        do
          v31 = *(_QWORD *)(v31 + 56);
        while (v31 != v52 && v31 != 0);
        if (!v31)
          return result;
      }
    }
    v34 = -1;
    goto LABEL_95;
  }
  v23 = (uint64_t)*a1;
  *a1 = 0;
  if (!v22)
  {
    v35 = (void *)*a2;
    *a2 = 0;
    v36 = (WebCore::Node *)*a1;
    *a1 = v35;
    if (v36)
    {
      if (*((_DWORD *)v36 + 6) == 2)
      {
        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v36, v7);
      }
      else
      {
        *((_DWORD *)v36 + 6) -= 2;
      }
    }
    v37 = *a2;
    *a2 = v23;
    if (v37)
    {
      if (*(_DWORD *)(v37 + 24) == 2)
      {
        if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v37, v7);
          v23 = *a2;
        }
      }
      else
      {
        *(_DWORD *)(v37 + 24) -= 2;
      }
    }
    result = *a3;
    if (*a3 == (unsigned int *)v23)
      return result;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, v23, &v50);
    if (!v50)
      return result;
    v38 = v51;
    if (v51)
    {
      if (!v52)
        return result;
      v39 = *(unsigned __int16 *)(v51 + 28);
      v40 = *(unsigned __int16 *)(v52 + 28);
      if (((v39 | v40) & 0x80) != 0)
      {
        if ((v39 & 0x80) != 0)
          v41 = -127;
        else
          v41 = 1;
        if ((v40 & 0x80) == 0)
          v41 = -1;
LABEL_108:
        if (v41 != 129 && (v41 & 0x80) != 0)
        {
          v47 = (unsigned int *)*a2;
          *a2 = 0;
          v48 = *a3;
          *a3 = 0;
          v49 = *a2;
          *a2 = (uint64_t)v48;
          if (v49)
          {
            if (*(_DWORD *)(v49 + 24) == 2)
            {
              if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v49, v7);
            }
            else
            {
              *(_DWORD *)(v49 + 24) -= 2;
            }
          }
          result = *a3;
          *a3 = v47;
          if (result)
            goto LABEL_60;
        }
        return result;
      }
      if (v51 != v52)
      {
        do
          v38 = *(_QWORD *)(v38 + 56);
        while (v38 != v52 && v38 != 0);
        if (!v38)
          return result;
      }
    }
    v41 = -1;
    goto LABEL_108;
  }
  v24 = *a3;
  *a3 = 0;
  v25 = (WebCore::Node *)*a1;
  *a1 = v24;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v7);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  result = *a3;
  *a3 = (unsigned int *)v23;
  if (result)
  {
LABEL_60:
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  WebCore::Node *v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned __int8 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int8 v32;
  uint64_t v34;
  WebCore::Node *v36;
  uint64_t v37;
  WebCore::Node *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *(WebCore::Node **)a1;
      if (v6 == *(_QWORD *)a1)
        return 1;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v6, (uint64_t)v7, &v40);
      if (!v40)
        return 1;
      v9 = v41;
      if (!v41)
        goto LABEL_83;
      if (!v42)
        return 1;
      v10 = *(unsigned __int16 *)(v41 + 28);
      v11 = *(unsigned __int16 *)(v42 + 28);
      if (((v10 | v11) & 0x80) != 0)
      {
        if ((v10 & 0x80) != 0)
          v12 = -127;
        else
          v12 = 1;
        if ((v11 & 0x80) == 0)
          v12 = -1;
      }
      else
      {
        if (v41 != v42)
        {
          do
            v9 = *(_QWORD *)(v9 + 56);
          while (v9 != v42 && v9 != 0);
          if (!v9)
            return 1;
        }
LABEL_83:
        v12 = -1;
      }
      result = 1;
      if (v12 != 129 && (v12 & 0x80) != 0)
      {
        v36 = *(WebCore::Node **)a1;
        *(_QWORD *)a1 = 0;
        v37 = *(a2 - 1);
        *(a2 - 1) = 0;
        v38 = *(WebCore::Node **)a1;
        *(_QWORD *)a1 = v37;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v38, v8);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
        }
        v39 = *(a2 - 1);
        *(a2 - 1) = (uint64_t)v36;
        if (v39)
        {
          if (*(_DWORD *)(v39 + 24) == 2)
          {
            if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v39, v8);
          }
          else
          {
            *(_DWORD *)(v39 + 24) -= 2;
          }
        }
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)a1, (uint64_t *)(a1 + 8), (unsigned int **)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)a1, (uint64_t *)(a1 + 8), (unsigned int **)(a1 + 16), (unsigned int **)a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *,0>((void **)a1, (uint64_t *)(a1 + 8), (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 24), (unsigned int **)a2 - 1);
      return 1;
    default:
      v13 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>((void **)a1, (uint64_t *)(a1 + 8), (unsigned int **)(a1 + 16));
      v14 = (uint64_t *)(a1 + 24);
      if ((uint64_t *)(a1 + 24) == a2)
        return 1;
      v15 = 0;
      break;
  }
  do
  {
    v16 = *v14;
    v17 = *v13;
    if (*v14 == *v13)
      goto LABEL_65;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v16, v17, &v40);
    if (!v40)
      goto LABEL_65;
    v19 = v41;
    if (v41)
    {
      if (!v42)
        goto LABEL_65;
      v20 = *(unsigned __int16 *)(v41 + 28);
      v21 = *(unsigned __int16 *)(v42 + 28);
      if (((v20 | v21) & 0x80) != 0)
      {
        if ((v20 & 0x80) != 0)
          v22 = -127;
        else
          v22 = 1;
        if ((v21 & 0x80) == 0)
          v22 = -1;
        goto LABEL_32;
      }
      if (v41 != v42)
      {
        do
          v19 = *(_QWORD *)(v19 + 56);
        while (v19 != v42 && v19 != 0);
        if (!v19)
          goto LABEL_65;
      }
    }
    v22 = -1;
LABEL_32:
    if (v22 == 129 || (v22 & 0x80) == 0)
      goto LABEL_65;
    v24 = 0;
    v25 = *v14;
    *v14 = 0;
    for (i = v14; ; v24 = *i)
    {
      v27 = i;
      i = v13;
      v28 = *v13;
      *v13 = 0;
      *v27 = v28;
      if (v24)
      {
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v24, v18);
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
      }
      if (v13 == (uint64_t *)a1)
        break;
      --v13;
      v18 = (void *)*(i - 1);
      if ((void *)v25 == v18)
        goto LABEL_63;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v25, (uint64_t)v18, &v40);
      if (!v40)
        goto LABEL_63;
      v29 = v41;
      if (!v41)
        goto LABEL_54;
      if (!v42)
        goto LABEL_63;
      v30 = *(unsigned __int16 *)(v41 + 28);
      v31 = *(unsigned __int16 *)(v42 + 28);
      if (((v30 | v31) & 0x80) == 0)
      {
        if (v41 != v42)
        {
          do
            v29 = *(_QWORD *)(v29 + 56);
          while (v29 != v42 && v29 != 0);
          if (!v29)
            goto LABEL_63;
        }
LABEL_54:
        v32 = -1;
        goto LABEL_55;
      }
      if ((v30 & 0x80) != 0)
        v32 = -127;
      else
        v32 = 1;
      if ((v31 & 0x80) == 0)
        v32 = -1;
LABEL_55:
      if (v32 == 129 || (v32 & 0x80) == 0)
        goto LABEL_63;
    }
    i = (uint64_t *)a1;
LABEL_63:
    v34 = *i;
    *i = v25;
    if (v34)
    {
      if (*(_DWORD *)(v34 + 24) == 2)
      {
        if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v34, v18);
      }
      else
      {
        *(_DWORD *)(v34 + 24) -= 2;
      }
    }
    if (++v15 == 8)
      return v14 + 1 == a2;
LABEL_65:
    v13 = v14++;
  }
  while (v14 != a2);
  return 1;
}

unsigned int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>(void **a1, uint64_t *a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int *result;
  unsigned int *v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 v36;
  void *v38;
  uint64_t v39;
  WebCore::Node *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::RadioButtonGroup::members(void)::$_0 &,WTF::Ref<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>> *>(a1, a2, a3);
  result = *a4;
  v9 = *a3;
  if (*a4 == *a3)
    return result;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, (uint64_t)v9, &v41);
  if (!v41)
    return result;
  v11 = v42;
  if (!v42)
  {
LABEL_18:
    v14 = -1;
    goto LABEL_19;
  }
  if (!v43)
    return result;
  v12 = *(unsigned __int16 *)(v42 + 28);
  v13 = *(unsigned __int16 *)(v43 + 28);
  if (((v12 | v13) & 0x80) == 0)
  {
    if (v42 != v43)
    {
      do
        v11 = *(_QWORD *)(v11 + 56);
      while (v11 != v43 && v11 != 0);
      if (!v11)
        return result;
    }
    goto LABEL_18;
  }
  if ((v12 & 0x80) != 0)
    v14 = -127;
  else
    v14 = 1;
  if ((v13 & 0x80) == 0)
    v14 = -1;
LABEL_19:
  if (v14 == 129 || (v14 & 0x80) == 0)
    return result;
  v16 = *a3;
  *a3 = 0;
  v17 = *a4;
  *a4 = 0;
  v18 = *a3;
  *a3 = v17;
  if (v18)
  {
    if (v18[6] == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18, v10);
    }
    else
    {
      v18[6] -= 2;
    }
  }
  v19 = *a4;
  *a4 = v16;
  if (v19)
  {
    if (v19[6] == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, v10);
    }
    else
    {
      v19[6] -= 2;
    }
  }
  result = *a3;
  v20 = *a2;
  if (*a3 == (unsigned int *)*a2)
    return result;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, v20, &v41);
  if (!v41)
    return result;
  v22 = v42;
  if (!v42)
    goto LABEL_40;
  if (!v43)
    return result;
  v23 = *(unsigned __int16 *)(v42 + 28);
  v24 = *(unsigned __int16 *)(v43 + 28);
  if (((v23 | v24) & 0x80) == 0)
  {
    if (v42 != v43)
    {
      do
        v22 = *(_QWORD *)(v22 + 56);
      while (v22 != v43 && v22 != 0);
      if (!v22)
        return result;
    }
LABEL_40:
    v25 = -1;
    goto LABEL_41;
  }
  if ((v23 & 0x80) != 0)
    v25 = -127;
  else
    v25 = 1;
  if ((v24 & 0x80) == 0)
    v25 = -1;
LABEL_41:
  if (v25 != 129 && (v25 & 0x80) != 0)
  {
    v27 = *a2;
    *a2 = 0;
    v28 = *a3;
    *a3 = 0;
    v29 = *a2;
    *a2 = (uint64_t)v28;
    if (v29)
    {
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v29, v21);
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
    v30 = *a3;
    *a3 = (unsigned int *)v27;
    if (v30)
    {
      if (v30[6] == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v30, v21);
      }
      else
      {
        v30[6] -= 2;
      }
    }
    result = (unsigned int *)*a2;
    v31 = *a1;
    if ((void *)*a2 != *a1)
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      result = (unsigned int *)WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>((uint64_t)result, (uint64_t)v31, &v41);
      if (v41)
      {
        v33 = v42;
        if (v42)
        {
          if (!v43)
            return result;
          v34 = *(unsigned __int16 *)(v42 + 28);
          v35 = *(unsigned __int16 *)(v43 + 28);
          if (((v34 | v35) & 0x80) != 0)
          {
            if ((v34 & 0x80) != 0)
              v36 = -127;
            else
              v36 = 1;
            if ((v35 & 0x80) == 0)
              v36 = -1;
            goto LABEL_67;
          }
          if (v42 != v43)
          {
            do
              v33 = *(_QWORD *)(v33 + 56);
            while (v33 != v43 && v33 != 0);
            if (!v33)
              return result;
          }
        }
        v36 = -1;
LABEL_67:
        if (v36 != 129 && (v36 & 0x80) != 0)
        {
          v38 = *a1;
          *a1 = 0;
          v39 = *a2;
          *a2 = 0;
          v40 = (WebCore::Node *)*a1;
          *a1 = (void *)v39;
          if (v40)
          {
            if (*((_DWORD *)v40 + 6) == 2)
            {
              if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v40, v32);
            }
            else
            {
              *((_DWORD *)v40 + 6) -= 2;
            }
          }
          result = (unsigned int *)*a2;
          *a2 = (uint64_t)v38;
          if (result)
          {
            if (result[6] == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)result, v32);
            }
            else
            {
              result[6] -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t **std::unique_ptr<WebCore::RadioButtonGroup>::~unique_ptr[abi:sn180100](uint64_t **a1, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  void *v8;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = v3[2];
    v3[2] = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        v10 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v10)
        {
          v13 = v4;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v10));
          v4 = v13;
        }
        v11 = *(WTF **)(v4 + 16);
        if (v11)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          v12 = v4;
          WTF::fastFree(v11, a2);
          v4 = v12;
        }
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    v7 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v3, a2);
    WTF::fastFree((WTF *)v7, v8);
  }
  return a1;
}

WebCore::Range *WebCore::Range::Range(WebCore::Range *this, WebCore::Document *a2)
{
  int v3;
  WebCore::Document *v5;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E33A71E8;
  v3 = *((_DWORD *)a2 + 6);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a2;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = a2;
  *((_DWORD *)this + 16) = 0;
  *(_DWORD *)((char *)this + 79) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)a2 + 6) = v3 + 8;
  v5 = a2;
  WebCore::Document::attachRange(a2, this);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v5);
  return this;
}

WTF **WTF::WeakPtrFactory<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakPtrFactory(WTF **a1, void *a2)
{
  WTF *v3;

  if (*a1)
  {
    *((_QWORD *)*a1 + 1) = 0;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
        WTF::fastFree(v3, a2);
      else
        --*(_DWORD *)v3;
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t WebCore::RangeBoundaryPoint::childBeforeWillBeRemoved(WebCore::RangeBoundaryPoint *this)
{
  uint64_t result;
  uint64_t v3;

  --*((_DWORD *)this + 2);
  result = *((_QWORD *)this + 2);
  v3 = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
  if (v3)
    *(_DWORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  *((_QWORD *)this + 2) = v3;
  if (*(_DWORD *)(result + 24) == 2)
  {
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  else
  {
    *(_DWORD *)(result + 24) -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v20 = v19 & v17;
            v19 = ++v18 + v20;
          }
          while (*(_QWORD *)(v16 + 16 * v20));
          v21 = v16 + 16 * v20;
          std::unique_ptr<WebCore::RadioButtonGroup>::~unique_ptr[abi:sn180100]((uint64_t **)(v21 + 8), v10);
          v23 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = *v13;
          *v13 = 0;
          *(_QWORD *)v21 = v24;
          v25 = v6 + 16 * v11;
          v26 = *(_QWORD *)(v25 + 8);
          v25 += 8;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v21 + 8) = v26;
          std::unique_ptr<WebCore::RadioButtonGroup>::~unique_ptr[abi:sn180100]((uint64_t **)v25, v22);
          v27 = *v13;
          *v13 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
        else
        {
          std::unique_ptr<WebCore::RadioButtonGroup>::~unique_ptr[abi:sn180100]((uint64_t **)(v6 + 16 * v11 + 8), v10);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::RadioButtonGroup>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::RadioButtonGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v3 + v5)
  {
    v5 = i & *(_DWORD *)(v2 - 8);
    v6 = *(_QWORD *)(v2 + 16 * v5);
    if (v6 != -1)
    {
      if (!v6)
        return 0;
      if (v6 == *(_QWORD *)a2)
        break;
    }
    ++v3;
  }
  return v2 + 16 * v5;
}

uint64_t JSC::WeakGCMap<JSC::JSPromise *,JSC::JSPromise,WTF::DefaultHash<JSC::JSPromise *>,WTF::HashTraits<JSC::JSPromise *>>::~WeakGCMap(WTF *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  JSC::Heap::unregisterWeakGCHashTable();
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v5 - 8) != -1 && *(_QWORD *)v5)
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
          *(_QWORD *)v5 = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  return WTF::fastFree(a1, v2);
}

uint64_t *JSC::WeakGCMap<JSC::JSPromise *,JSC::JSPromise,WTF::DefaultHash<JSC::JSPromise *>,WTF::HashTraits<JSC::JSPromise *>>::pruneStaleEntries(uint64_t a1)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v3 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v2 = v3;
  if (!v3)
    return result;
  v4 = *(_DWORD *)(v2 - 4);
  if (!v4)
    return result;
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = v6;
    v8 = (_QWORD *)(v2 + 16 * v6);
    if ((unint64_t)(*v8 + 1) < 2)
      goto LABEL_11;
    v9 = v2 + 16 * v6;
    v12 = *(_QWORD **)(v9 + 8);
    v10 = (_QWORD *)(v9 + 8);
    v11 = v12;
    if (!v12)
    {
      *v8 = -1;
      goto LABEL_10;
    }
    if (!*v11 || (v11[1] & 3) != 0)
    {
      *v8 = -1;
      v11[1] = 3;
      *v10 = 0;
LABEL_10:
      ++v5;
    }
LABEL_11:
    --v6;
  }
  while (v7);
  v13 = *result;
  if (v5)
  {
    *(_DWORD *)(v13 - 16) += v5;
    v14 = *result;
    if (*result)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v5;
    v13 = *result;
  }
  if (v13)
  {
    v16 = *(_DWORD *)(v13 - 4);
    v17 = *(unsigned int *)(v13 - 12);
    if (v16 >= 9 && 6 * (int)v17 < v16)
    {
      v19 = (v17 - 1) | ((v17 - 1) >> 1) | ((((_DWORD)v17 - 1) | ((v17 - 1) >> 1)) >> 2);
      v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
      v21 = (v20 | HIWORD(v20)) + 1;
      if (v21 > 0x400)
      {
        if (v21 <= 2 * v17)
        {
LABEL_26:
          LODWORD(v21) = 2 * v21;
          if (v21 <= 0x400)
            goto LABEL_27;
        }
        v22 = (double)v17;
        v23 = (double)v21;
        v24 = 0.416666667;
      }
      else
      {
        if (3 * v21 <= 4 * v17)
          goto LABEL_26;
LABEL_27:
        v22 = (double)v17;
        v23 = (double)v21;
        v24 = 0.604166667;
      }
      if (v23 * v24 <= v22)
        LODWORD(v21) = 2 * v21;
      if (v21 <= 8)
        v25 = 8;
      else
        v25 = v21;
      return (uint64_t *)WTF::HashTable<JSC::Bindings::RuntimeObject *,WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashMap<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Bindings::RuntimeObject *>>::rehash(result, v25);
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::UnhandledPromise,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::UnhandledPromise,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::UnhandledPromise,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::UnhandledPromise,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  WTF *v13;
  void *v14;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = v9[1];
          v9[1] = 0;
          if (v12)
          {
            if (*v12 == 1)
            {
              v13 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v13, v14);
            }
            else
            {
              --*v12;
            }
          }
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (result[4] == 1)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
            else
              --result[4];
          }
          v9 += 2;
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RejectedPromiseTracker::promiseHandled(WebCore::JSDOMGlobalObject &,JSC::JSPromise &)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33A7300;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RejectedPromiseTracker::promiseHandled(WebCore::JSDOMGlobalObject &,JSC::JSPromise &)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33A7300;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RejectedPromiseTracker::promiseHandled(WebCore::JSDOMGlobalObject &,JSC::JSPromise &)::$_1,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  JSC::VM *v6;
  unsigned int v7;
  void *v8;
  WebCore::ActiveDOMCallback *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSPromise *v13;
  WebCore *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  void *v23;
  uint64_t result;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  void *v28;
  _DWORD *v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  WebCore *v33;
  _BYTE v34[8];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (v3)
    v4 = v3 - 96;
  else
    v4 = 0;
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4);
  v6 = (JSC::VM *)v5;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  MEMORY[0x19AEA3294](v34, v5);
  v9 = *(WebCore::ActiveDOMCallback **)(a1 + 16);
  v10 = *((_QWORD *)v9 + 3);
  if (v10 && *(_QWORD *)v10 && (*(_BYTE *)(v10 + 8) & 3) == 0 && WebCore::ActiveDOMCallback::canInvokeCallback(v9, v8))
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = **(_QWORD **)(v11 + 24);
    if ((v12 & 0xFFFE000000000002) != 0)
    {
      v13 = 0;
    }
    else if (*(_BYTE *)(v12 + 5) == 68)
    {
      v13 = **(JSC::JSPromise ***)(v11 + 24);
    }
    else
    {
      v13 = 0;
    }
    v30 = 0;
    v31 = 0;
    ++*(_DWORD *)(v11 + 16);
    v32 = v11;
    v14 = (WebCore *)JSC::JSPromise::result(v13, v6);
    v33 = v14;
    v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
      v16 = WebCore::threadGlobalDataSlow(v14);
    v17 = *(_QWORD *)(v16 + 40);
    if (!v17)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
      v17 = *(_QWORD *)(v16 + 40);
    }
    WebCore::PromiseRejectionEvent::create((uint64_t *)&v29, (_QWORD *)(v17 + 1640), (unsigned __int8 *)&v30);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    if (v18)
      v19 = v18 - 96;
    else
      v19 = 0;
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 384))(v19);
    v21 = v20;
    if (v20)
    {
      if ((*(_BYTE *)(v20 + 22) & 2) != 0)
        *(_DWORD *)(v20 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 88))(v20);
    }
    v22 = v29;
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v21 + 48))(v21, v29);
    if ((*(_BYTE *)(v21 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v21 + 24) == 2)
      {
        if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v21, v23);
      }
      else
      {
        *(_DWORD *)(v21 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
    }
    if (v22)
    {
      if (v22[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[4];
    }
    if (*(_DWORD *)(v11 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      --*(_DWORD *)(v11 + 16);
  }
  result = MEMORY[0x19AEA32A0](v34);
  do
  {
    v25 = __ldaxr((unsigned int *)v6);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)v6));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)v6);
    v27 = (WTF *)MEMORY[0x19AEA3AF8](v6);
    return WTF::fastFree(v27, v28);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RejectedPromiseTracker::processQueueSoon(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;
  void *v9;
  WTF *v10;

  *(_QWORD *)a1 = &off_1E33A7328;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_DWORD **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 1)
        {
          v8 = (WTF *)MEMORY[0x19AEA6024]();
          WTF::fastFree(v8, v9);
        }
        else
        {
          --*v6;
        }
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (v7[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
        else
          --v7[4];
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v10 = *(WTF **)(a1 + 16);
  if (v10)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RejectedPromiseTracker::processQueueSoon(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;
  void *v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E33A7328;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_DWORD **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 1)
        {
          v8 = (WTF *)MEMORY[0x19AEA6024]();
          WTF::fastFree(v8, v9);
        }
        else
        {
          --*v6;
        }
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (v7[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
        else
          --v7[4];
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v10 = (WTF *)*((_QWORD *)this + 2);
  if (v10)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v10, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RejectedPromiseTracker::processQueueSoon(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  JSC::VM *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  JSC::JSPromise *v19;
  WebCore *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  JSC::JSPromise *Allocator;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  JSC::JSPromise **v41;
  JSC::JSPromise *v42;
  JSC::JSPromise **v43;
  int v44;
  JSC::JSPromise *v45;
  uint64_t v46;
  int v47;
  JSC::JSPromise *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  WTF *v54;
  void *v55;
  uint64_t result;
  unsigned int v57;
  unsigned int v58;
  WTF *v59;
  void *v60;
  _DWORD *v61;
  _DWORD *v62;
  __int16 v63;
  char v64;
  _DWORD *v65;
  WebCore *v66;
  char v67[8];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (v3)
    v4 = v3 - 96;
  else
    v4 = 0;
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4);
  v6 = (JSC::VM *)v5;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  MEMORY[0x19AEA3294](v67, v5);
  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)(a1 + 16);
    v11 = &v10[2 * v9];
    v12 = (uint64_t *)(v2 + 40);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v14 = *v10;
      v15 = *(_QWORD *)(*v10 + 24);
      if (v15)
      {
        if (*(_QWORD *)v15
          && (*(_BYTE *)(v15 + 8) & 3) == 0
          && WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)*v10, (void *)v8))
        {
          v16 = *(_QWORD *)(v14 + 32);
          if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
            v17 = 0;
          else
            v17 = *(JSC::JSGlobalObject **)v16;
          v18 = **(_QWORD **)(v14 + 24);
          if ((v18 & 0xFFFE000000000002) != 0)
            v19 = 0;
          else
            v19 = *(_BYTE *)(v18 + 5) == 68 ? **(JSC::JSPromise ***)(v14 + 24) : 0;
          if ((JSC::JSPromise::isHandled(v19, v6) & 1) == 0)
            break;
        }
      }
LABEL_88:
      v10 += 2;
      if (v10 == v11)
        goto LABEL_102;
    }
    v63 = 256;
    v64 = 0;
    ++*(_DWORD *)(v14 + 16);
    v65 = (_DWORD *)v14;
    v20 = (WebCore *)JSC::JSPromise::result(v19, v6);
    v66 = v20;
    v21 = *(_QWORD *)(StatusReg + 736);
    if (!v21 || (v22 = *(_QWORD *)(v21 + 96)) == 0)
      v22 = WebCore::threadGlobalDataSlow(v20);
    v23 = *(_QWORD *)(v22 + 40);
    if (!v23)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v22);
      v23 = *(_QWORD *)(v22 + 40);
    }
    WebCore::PromiseRejectionEvent::create((uint64_t *)&v62, (_QWORD *)(v23 + 2160), (unsigned __int8 *)&v63);
    v24 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    if (v24)
      v25 = v24 - 96;
    else
      v25 = 0;
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 384))(v25);
    v27 = v26;
    if (v26)
    {
      if ((*(_BYTE *)(v26 + 22) & 2) != 0)
        *(_DWORD *)(v26 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
    }
    v28 = v62;
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v27 + 48))(v27, v62);
    if ((v28[5] & 0x40) == 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
      if (v29)
        v30 = v29 - 96;
      else
        v30 = 0;
      v31 = (_DWORD *)v10[1];
      if (v31)
        ++*v31;
      v61 = v31;
      WebCore::ScriptExecutionContext::reportUnhandledPromiseRejection(v30, v17, v19, &v61);
      v32 = v61;
      v61 = 0;
      if (v32)
      {
        if (*v32 == 1)
        {
          v54 = (WTF *)MEMORY[0x19AEA6024](v32);
          WTF::fastFree(v54, v55);
        }
        else
        {
          --*v32;
        }
      }
    }
    if ((JSC::JSPromise::isHandled(v19, v6) & 1) == 0)
    {
      if (v19)
      {
        if ((v19 & 8) != 0)
          v8 = ((unint64_t)v19 - 112) | 1;
        else
          v8 = (unint64_t)v19 & 0xFFFFFFFFFFFFC000;
        if ((v8 & 1) != 0)
          v33 = v8 + 47;
        else
          v33 = *(_QWORD *)v8 + 32;
        Allocator = *(JSC::JSPromise **)(v33 + 16);
        if (!Allocator)
          Allocator = (JSC::JSPromise *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v33 + 16) = *(_QWORD *)Allocator;
        *(_QWORD *)Allocator = v19;
        *((_QWORD *)Allocator + 1) = 0;
        *((_QWORD *)Allocator + 2) = 0;
      }
      else
      {
        Allocator = 0;
      }
      v35 = *v12;
      if (*v12
        || (WTF::HashTable<JSC::Bindings::RuntimeObject *,WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashMap<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Bindings::RuntimeObject *>>::rehash((uint64_t *)(v2 + 40), 8u), (v35 = *v12) != 0))
      {
        v36 = *(_DWORD *)(v35 - 8);
      }
      else
      {
        v36 = 0;
      }
      v37 = ((unint64_t)v19 + ~((_QWORD)v19 << 32)) ^ (((unint64_t)v19 + ~((_QWORD)v19 << 32)) >> 22);
      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      v40 = v36 & ((v39 >> 31) ^ v39);
      v41 = (JSC::JSPromise **)(v35 + 16 * v40);
      v42 = *v41;
      if (*v41)
      {
        v43 = 0;
        v44 = 1;
        while (v42 != v19)
        {
          if (v42 == (JSC::JSPromise *)-1)
            v43 = v41;
          v40 = (v40 + v44) & v36;
          v41 = (JSC::JSPromise **)(v35 + 16 * v40);
          v42 = *v41;
          ++v44;
          if (!*v41)
          {
            if (v43)
            {
              *v43 = 0;
              v43[1] = 0;
              --*(_DWORD *)(*v12 - 16);
              v41 = v43;
            }
            goto LABEL_62;
          }
        }
        v48 = v41[1];
        v41[1] = Allocator;
        if (v48)
          *((_QWORD *)v48 + 1) = 3;
        goto LABEL_79;
      }
LABEL_62:
      v45 = v41[1];
      *v41 = v19;
      v41[1] = Allocator;
      if (v45)
        *((_QWORD *)v45 + 1) = 3;
      v46 = *v12;
      if (*v12)
        v47 = *(_DWORD *)(v46 - 12) + 1;
      else
        v47 = 1;
      *(_DWORD *)(v46 - 12) = v47;
      v49 = *v12;
      if (*v12)
        v50 = *(_DWORD *)(v49 - 12);
      else
        v50 = 0;
      v51 = (*(_DWORD *)(v49 - 16) + v50);
      v52 = *(unsigned int *)(v49 - 4);
      if (v52 > 0x400)
      {
        if (v52 > 2 * v51)
          goto LABEL_79;
        goto LABEL_75;
      }
      if (3 * v52 <= 4 * v51)
      {
        if (!(_DWORD)v52)
        {
          v53 = 8;
          goto LABEL_78;
        }
LABEL_75:
        v53 = (_DWORD)v52 << (6 * *(_DWORD *)(v49 - 12) >= (2 * v52));
LABEL_78:
        WTF::HashTable<JSC::Bindings::RuntimeObject *,WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashMap<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Bindings::RuntimeObject *>>::rehash((uint64_t *)(v2 + 40), v53);
      }
    }
LABEL_79:
    if ((*(_BYTE *)(v27 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v27 + 24) == 2)
      {
        if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v27, (void *)v8);
      }
      else
      {
        *(_DWORD *)(v27 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 96))(v27);
    }
    if (v62)
    {
      if (v62[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
      else
        --v62[4];
    }
    if (v65)
    {
      if (v65[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 16))(v65);
      else
        --v65[4];
    }
    goto LABEL_88;
  }
LABEL_102:
  result = MEMORY[0x19AEA32A0](v67);
  do
  {
    v57 = __ldaxr((unsigned int *)v6);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, (unsigned int *)v6));
  if (!v58)
  {
    atomic_store(1u, (unsigned int *)v6);
    v59 = (WTF *)MEMORY[0x19AEA3AF8](v6);
    return WTF::fastFree(v59, v60);
  }
  return result;
}

uint64_t WebCore::ScopedEventQueue::enqueueEvent(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  WebCore::Node *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(result + 16))
  {
    v4 = *(unsigned int *)(result + 12);
    if ((_DWORD)v4 == *(_DWORD *)(result + 8))
    {
      return WTF::Vector<WebCore::ScopedEventQueue::ScopedEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ScopedEventQueue::ScopedEvent>(result, (unint64_t)a2);
    }
    else
    {
      v5 = v4 + 1;
      v6 = (_QWORD *)(*(_QWORD *)result + 16 * v4);
      v7 = *a2;
      *a2 = 0;
      *v6 = v7;
      v8 = a2[1];
      a2[1] = 0;
      v6[1] = v8;
      *(_DWORD *)(result + 12) = v5;
    }
  }
  else
  {
    v2 = *a2;
    v3 = (WebCore::Node *)a2[1];
    if ((*(_DWORD *)(*a2 + 20) & 0x3F8000) != 0x268000 || (*((_BYTE *)v3 + 22) & 0x10) == 0)
    {
      *((_DWORD *)v3 + 6) += 2;
      result = (*(uint64_t (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v3 + 48))(v3, v2);
      if (*((_DWORD *)v3 + 6) == 2)
      {
        if ((*((_WORD *)v3 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v3);
      }
      else
      {
        *((_DWORD *)v3 + 6) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::ScopedEventQueue::dispatchEvent(uint64_t a1, _QWORD *a2)
{
  WebCore::Node *v2;
  uint64_t result;

  v2 = (WebCore::Node *)a2[1];
  if ((*(_DWORD *)(*a2 + 20) & 0x3F8000) != 0x268000 || (*((_BYTE *)v2 + 22) & 0x10) == 0)
  {
    *((_DWORD *)v2 + 6) += 2;
    result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v2 + 48))(v2);
    if (*((_DWORD *)v2 + 6) == 2)
    {
      if ((*((_WORD *)v2 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v2);
    }
    else
    {
      *((_DWORD *)v2 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ScriptElement::didFinishInsertingNode(uint64_t this)
{
  uint64_t v1;

  if ((*(_WORD *)(this + 21) & 1) == 0)
  {
    v1 = 0;
    return WebCore::ScriptElement::prepareScript(this, (const WebCore::ContainerNode *)&v1);
  }
  return this;
}

WTF::StringImpl *WebCore::ScriptElement::finishParsingChildren(WTF::StringImpl *this, const WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if ((*(_WORD *)((_BYTE *)this + 21) & 0x400) == 0)
  {
    v2 = this;
    v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *(_DWORD *)(v3 + 24) += 2;
    WebCore::TextNodeTraversal::childTextContent((WebCore::TextNodeTraversal *)v3, a2, &v8);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
    v5 = v8;
    v8 = 0;
    this = (WTF::StringImpl *)*((_QWORD *)v2 + 12);
    *((_QWORD *)v2 + 12) = v5;
    if (this)
    {
      v6 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this != 2)
      {
LABEL_6:
        *(_DWORD *)this = v6;
        return this;
      }
      WTF::StringImpl::destroy(this, (WTF::StringImpl *)v4);
      this = v8;
      v8 = 0;
      if (this)
      {
        v6 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
        goto LABEL_6;
      }
    }
  }
  return this;
}

unsigned int *WebCore::ScriptElement::dispatchErrorEvent(WebCore::ScriptElement *this)
{
  WebCore::Node *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  unsigned int *result;
  void *v11;

  v1 = *(WebCore::Node **)(*((_QWORD *)this + 1) + 8);
  *((_DWORD *)v1 + 6) += 2;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 784) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 784);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  result = (unsigned int *)(*(uint64_t (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v1 + 48))(v1, v5);
  if (*(_DWORD *)(v5 + 16) == 1)
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 16);
  if (*((_DWORD *)v1 + 6) == 2)
  {
    if ((*((_WORD *)v1 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v1, v11);
  }
  else
  {
    *((_DWORD *)v1 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::ScriptElement::prepareScript(WTF::TextPosition const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::ScriptElement::requestImportMap(WebCore::ScriptElement *this, WebCore::ScriptController **a2, const WTF::String *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD **v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD **v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  WTF::String *v52;
  __n128 v53;
  uint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned int v58;
  WebCore::ScriptController *v59;
  int v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  char v64;
  _DWORD **v65;
  char v66;
  _DWORD **v67;
  uint64_t v68;
  int v69;
  char v70;
  WTF::StringImpl *v71[5];
  WTF::StringImpl *v72[5];

  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
LABEL_9:
    if (*((_QWORD *)this + 5))
    {
      v17 = 1;
    }
    else
    {
      v18 = WebCore::Document::eventLoop((WebCore::Document *)v7, (WTF::StringImpl *)a2);
      ++*(_DWORD *)(v18 + 8);
      *(_DWORD *)(v6 + 24) += 2;
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v19 = &off_1E33A78B0;
      *((_QWORD *)v19 + 1) = this;
      *((_QWORD *)v19 + 2) = v6;
      v72[0] = v19;
      WebCore::EventLoopTaskGroup::queueTask(v18, 0, (uint64_t *)v72);
      v20 = v72[0];
      v72[0] = 0;
      if (v20)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
      v21 = *(_DWORD *)(v18 + 8);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x195A36AF0);
      }
      v17 = 0;
      *(_DWORD *)(v18 + 8) = v21 - 1;
    }
    goto LABEL_15;
  }
  v11 = *(unsigned __int8 **)(v8 + 8);
  v12 = *(unsigned int *)(v8 + 4);
  if ((*(_BYTE *)(v8 + 16) & 4) != 0)
  {
    if (!(_DWORD)v12)
      goto LABEL_9;
    while (1)
    {
      v13 = *v11;
      v14 = v13 > 0x20;
      v15 = (1 << v13) & 0x100003600;
      if (v14 || v15 == 0)
        break;
      ++v11;
      if (!--v12)
        goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)v12)
      goto LABEL_9;
    v23 = 2 * v12;
    while (1)
    {
      v24 = *(unsigned __int16 *)v11;
      v14 = v24 > 0x20;
      v25 = (1 << v24) & 0x100003600;
      if (v14 || v25 == 0)
        break;
      v11 += 2;
      v23 -= 2;
      if (!v23)
        goto LABEL_9;
    }
  }
  if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && WebCore::Element::isNonceable((WebCore::Element *)v6, (unsigned __int8 *)a2, (uint64_t)a3, a4, a5))
  {
    v27 = (*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 216;
  }
  else
  {
    v27 = MEMORY[0x1E0CBF3B8];
  }
  v28 = *(_QWORD *)(v6 + 104);
  v67 = (_DWORD **)v27;
  if (!v28)
    goto LABEL_47;
  v29 = *(_DWORD *)(v28 + 4);
  if ((v29 & 1) == 0)
  {
    v30 = v28 + 32;
    LODWORD(v31) = v29 >> 5;
    if ((_DWORD)v31)
      goto LABEL_39;
LABEL_47:
    v32 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_48;
  }
  v30 = *(_QWORD *)(v28 + 40);
  LODWORD(v31) = *(_DWORD *)(v28 + 52);
  if (!(_DWORD)v31)
    goto LABEL_47;
LABEL_39:
  v31 = v31;
  v32 = (_DWORD **)(v30 + 8);
  while (1)
  {
    v33 = (uint64_t)*(v32 - 1);
    if (v33 == WebCore::HTMLNames::integrityAttr
      || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::integrityAttr + 24)
      && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::integrityAttr + 32))
    {
      break;
    }
    v32 += 2;
    if (!--v31)
    {
      v32 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_48:
  v34 = (*(uint64_t (**)(WebCore::ScriptElement *))(*(_QWORD *)this + 96))(this);
  v35 = *(_QWORD *)(v6 + 104);
  v66 = v34;
  if (!v35)
    goto LABEL_59;
  v36 = *(_DWORD *)(v35 + 4);
  if ((v36 & 1) == 0)
  {
    v37 = v35 + 32;
    LODWORD(v38) = v36 >> 5;
    if ((_DWORD)v38)
      goto LABEL_51;
LABEL_59:
    v39 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_60;
  }
  v37 = *(_QWORD *)(v35 + 40);
  LODWORD(v38) = *(_DWORD *)(v35 + 52);
  if (!(_DWORD)v38)
    goto LABEL_59;
LABEL_51:
  v38 = v38;
  v39 = (_DWORD **)(v37 + 8);
  while (1)
  {
    v40 = (uint64_t)*(v39 - 1);
    if (v40 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v40 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v40 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      break;
    }
    v39 += 2;
    if (!--v38)
    {
      v39 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_60:
  v65 = (_DWORD **)(*(_QWORD *)(v6 + 96) + 24);
  v41 = **(_QWORD **)(v6 + 40);
  if (v41)
    v42 = (*(_WORD *)(v41 + 28) & 0x80) == 0;
  else
    v42 = 1;
  v64 = !v42 && *(_BYTE *)(v41 + 193) == 0;
  v43 = (*(uint64_t (**)(WebCore::ScriptElement *))(*(_QWORD *)this + 16))(this);
  v44 = WTF::fastMalloc((WTF *)0xA8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::LoadableNonModuleScriptBase::LoadableNonModuleScriptBase(v44, v67, v32, v66, 2, v39, (_DWORD **)v72, v65, v64, v43);
  v46 = v72[0];
  v72[0] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  *(_QWORD *)v44 = off_1E33A56D8;
  *(_QWORD *)(v44 + 72) = &unk_1E33A5738;
  WebCore::Document::completeURL((WebCore::Document *)v7, a3, v7 + 848, 0, (WTF::URL *)v72);
  WebCore::Document::willLoadScriptElement(v7, (const WTF::URL *)v72);
  v47 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 + 192));
  v48 = v47;
  if (v47)
  {
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 + 1, v47));
  }
  v71[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v71);
  if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && WebCore::Element::isNonceable((WebCore::Element *)v6, v50, v51, v52, v53))
  {
    v54 = (*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 216;
  }
  else
  {
    v54 = MEMORY[0x1E0CBF3B8];
  }
  v68 = 0;
  v69 = 0;
  v70 = 1;
  v55 = WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts((uint64_t)v48, (uint64_t)v72, (uint64_t)v71, (uint64_t)this + 16, v54, &v68, *(_WORD *)((_BYTE *)this + 21) & 1);
  v56 = v71[0];
  v71[0] = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)a2);
      if (!v48)
        goto LABEL_79;
      goto LABEL_77;
    }
    *(_DWORD *)v56 -= 2;
  }
  if (!v48)
    goto LABEL_79;
LABEL_77:
  if (!atomic_load(v48))
  {
    __break(0xC471u);
    JUMPOUT(0x195A36B10);
  }
  do
    v58 = __ldaxr(v48);
  while (__stlxr(v58 - 1, v48));
LABEL_79:
  if (v55)
  {
    v59 = a2[38];
    ++*((_DWORD *)v59 + 2);
    WebCore::ScriptController::setPendingImportMaps(v59);
    v60 = *((_DWORD *)v59 + 2);
    if (!v60)
    {
      __break(0xC471u);
      JUMPOUT(0x195A36B30);
    }
    *((_DWORD *)v59 + 2) = v60 - 1;
    if (WebCore::LoadableNonModuleScriptBase::load((WebCore::LoadableNonModuleScriptBase *)v44, (WebCore::Document *)v7, (const WTF::URL *)v72))
    {
      v61 = (_DWORD *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v44;
      if (v61)
      {
        if (v61[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 8))(v61);
        else
          --v61[2];
      }
      v44 = 0;
      *(_WORD *)((char *)this + 21) |= 2u;
    }
    v62 = v72[0];
    v72[0] = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::destroy(v62, (WTF::StringImpl *)a2);
        if (!v44)
          goto LABEL_9;
        goto LABEL_90;
      }
      *(_DWORD *)v62 -= 2;
    }
    if (!v44)
      goto LABEL_9;
LABEL_90:
    if (*(_DWORD *)(v44 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    else
      --*(_DWORD *)(v44 + 8);
    goto LABEL_9;
  }
  v63 = v72[0];
  v72[0] = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v63 -= 2;
  }
  if (*(_DWORD *)(v44 + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    v17 = 0;
  }
  else
  {
    v17 = 0;
    --*(_DWORD *)(v44 + 8);
  }
LABEL_15:
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return v17;
}

_QWORD *WebCore::ScriptElement::registerImportMap(_QWORD *this, const WebCore::ScriptSourceCode *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  WTF::String *v15;
  __n128 v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::String *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v31;
  WebCore::ScriptController *v32;
  int v33;
  WebCore::ScriptController *v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v40;
  _QWORD *v41;
  int v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  __int16 v46;
  char *v47;
  int v48;
  NSObject *v49;
  NSObject *v50;
  uint64_t v51;
  os_signpost_id_t v52;
  os_signpost_id_t v53;
  __int16 v54;
  char *v55;
  os_signpost_id_t v56;
  os_signpost_id_t v57;
  int v58;
  int v59;
  void *v60;
  unsigned __int8 *v61;
  WTF::String *v62;
  int v63;
  int v64;
  WTF *v65;
  WTF *v66[2];
  _BYTE buf[14];
  _BYTE v68[10];
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  uint64_t v77;

  v3 = this;
  v77 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this[1] + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(v5 + 528);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v7 = 0;
  }
  if (*((_DWORD *)a2 + 5) == *((_DWORD *)a2 + 4))
  {
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 56))(this);
    goto LABEL_7;
  }
  if ((*(_WORD *)((_BYTE *)this + 21) & 2) == 0)
  {
    v10 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v5 + 192));
    v11 = v10;
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 + 1, v10));
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && WebCore::Element::isNonceable((WebCore::Element *)v4, v13, v14, v15, v16))
    {
      v17 = (*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 216;
    }
    else
    {
      v17 = MEMORY[0x1E0CBF3B8];
    }
    v66[0] = (WTF *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
    v66[1] = v18;
    v20 = WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts((uint64_t)v11, (uint64_t)buf, v5 + 736, (uint64_t)(v3 + 2), v17, (uint64_t *)v66, *(_WORD *)((_BYTE *)v3 + 21) & 1);
    this = *(_QWORD **)buf;
    *(_QWORD *)buf = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v19);
        if (v20)
        {
LABEL_18:
          v21 = (WTF::String *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
          v25 = (uint64_t)v21;
          v26 = (uint64_t)v22;
          if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v61 = v22;
            v62 = v21;
            if (WebCore::Element::isNonceable((WebCore::Element *)v4, v22, v23, v21, v24))
              v27 = (*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 216;
            else
              v27 = MEMORY[0x1E0CBF3B8];
            v25 = (uint64_t)v62;
            v26 = (uint64_t)v61;
          }
          else
          {
            v27 = MEMORY[0x1E0CBF3B8];
          }
          v28 = 0;
          v29 = **(_QWORD **)(v4 + 40);
          if (v29 && (*(_WORD *)(v29 + 28) & 0x80) != 0)
            v28 = *(_BYTE *)(v29 + 193) == 0;
          this = (_QWORD *)WebCore::ContentSecurityPolicy::allowInlineScript((uint64_t)v11, v5 + 736, (uint64_t)(v3 + 2), v25, v26, v4, v27, v28);
          if (v11)
          {
            if (!atomic_load(v11))
            {
              __break(0xC471u);
              JUMPOUT(0x195A36FECLL);
            }
            do
              v31 = __ldaxr(v11);
            while (__stlxr(v31 - 1, v11));
          }
          if ((_DWORD)this)
            goto LABEL_27;
LABEL_7:
          if (!v7)
            goto LABEL_35;
          goto LABEL_31;
        }
LABEL_45:
        if (v11)
        {
          if (!atomic_load(v11))
          {
            __break(0xC471u);
            JUMPOUT(0x195A3700CLL);
          }
          do
            v40 = __ldaxr(v11);
          while (__stlxr(v40 - 1, v11));
        }
        goto LABEL_7;
      }
      *(_DWORD *)this -= 2;
    }
    if (v20)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_27:
  if (!v7)
    goto LABEL_35;
  if (!kdebug_is_enabled())
    goto LABEL_29;
  v42 = *MEMORY[0x1E0CBE150];
  v43 = WTFSignpostLogHandle();
  v44 = v43;
  if (v42)
  {
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v45 = WTFCurrentContinuousTime();
      v46 = *(_WORD *)((char *)v3 + 21);
      if ((v46 & 2) != 0)
      {
        WTF::String::utf8();
        v47 = v66[0] ? (char *)v66[0] + 16 : 0;
      }
      else
      {
        v47 = "inline";
      }
      v58 = (*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
      v59 = (*(uint64_t (**)(_QWORD *))(*v3 + 24))(v3);
      *(_DWORD *)buf = 67110659;
      *(_DWORD *)&buf[4] = 1;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 3;
      *(_WORD *)v68 = 2048;
      *(_QWORD *)&v68[2] = v3;
      v69 = 2048;
      v70 = v45;
      v71 = 2081;
      v72 = v47;
      v73 = 1024;
      v74 = v58;
      v75 = 1024;
      v76 = v59;
      _os_log_impl(&dword_1940B8000, v44, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu registering import-map from URL: %{private}s async: %d defer: %d", buf, 0x38u);
      if ((v46 & 2) != 0)
        goto LABEL_84;
    }
  }
  else
  {
    v52 = os_signpost_id_make_with_pointer(v43, v3);
    if (v52 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v53 = v52;
      if (os_signpost_enabled(v44))
      {
        v54 = *(_WORD *)((char *)v3 + 21);
        if ((v54 & 2) != 0)
        {
          WTF::String::utf8();
          v55 = v66[0] ? (char *)v66[0] + 16 : 0;
        }
        else
        {
          v55 = "inline";
        }
        v63 = (*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
        v64 = (*(uint64_t (**)(_QWORD *))(*v3 + 24))(v3);
        *(_DWORD *)buf = 136381187;
        *(_QWORD *)&buf[4] = v55;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)v68 = v63;
        *(_WORD *)&v68[4] = 1024;
        *(_DWORD *)&v68[6] = v64;
        _os_signpost_emit_with_name_impl(&dword_1940B8000, v44, OS_SIGNPOST_INTERVAL_BEGIN, v53, "RegisterImportMap", "registering import-map from URL: %{private}s async: %d defer: %d", buf, 0x18u);
        if ((v54 & 2) != 0)
        {
LABEL_84:
          v65 = v66[0];
          v66[0] = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 1)
              WTF::fastFree(v65, v60);
            else
              --*(_DWORD *)v65;
          }
        }
      }
    }
  }
LABEL_29:
  v32 = *(WebCore::ScriptController **)(v7 + 304);
  ++*((_DWORD *)v32 + 2);
  WebCore::ScriptController::registerImportMap(v32, a2, (const WTF::URL *)(v5 + 848));
  v33 = *((_DWORD *)v32 + 2);
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x195A36F44);
  }
  *((_DWORD *)v32 + 2) = v33 - 1;
  if (kdebug_is_enabled())
  {
    v48 = *MEMORY[0x1E0CBE150];
    v49 = WTFSignpostLogHandle();
    v50 = v49;
    if (v48)
    {
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        v51 = WTFCurrentContinuousTime();
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = 2;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = 3;
        *(_WORD *)v68 = 2048;
        *(_QWORD *)&v68[2] = v3;
        v69 = 2048;
        v70 = v51;
        _os_log_impl(&dword_1940B8000, v50, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu ", buf, 0x22u);
      }
    }
    else
    {
      v56 = os_signpost_id_make_with_pointer(v49, v3);
      if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v57 = v56;
        if (os_signpost_enabled(v50))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1940B8000, v50, OS_SIGNPOST_INTERVAL_END, v57, "RegisterImportMap", (const char *)&unk_196B7A1D3, buf, 2u);
        }
      }
    }
  }
LABEL_31:
  v34 = *(WebCore::ScriptController **)(v7 + 304);
  ++*((_DWORD *)v34 + 2);
  this = (_QWORD *)WebCore::ScriptController::clearPendingImportMaps(v34);
  v35 = *((_DWORD *)v34 + 2);
  if (!v35)
  {
    __break(0xC471u);
    JUMPOUT(0x195A36E9CLL);
  }
  *((_DWORD *)v34 + 2) = v35 - 1;
  v36 = (unsigned int *)(v7 + 8);
  do
  {
    v37 = __ldaxr(v36);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, v36));
  if (!v38)
  {
    atomic_store(1u, v36);
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v41 = off_1E31FE290;
    v41[1] = v36;
    *(_QWORD *)buf = v41;
    WTF::ensureOnMainThread();
    this = *(_QWORD **)buf;
    *(_QWORD *)buf = 0;
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
LABEL_35:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      this = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

void WebCore::ScriptElement::executeModuleScript(WebCore::ScriptElement *this, WebCore::LoadableModuleScript *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScriptElement *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  char *v18;
  WebCore::ScriptController *v19;
  WebCore::DOMWrapperWorld *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  char *v29;
  WebCore::ScriptElement *v30;
  int v31;
  NSObject *v32;
  NSObject *v33;
  WebCore::ScriptElement *v34;
  int v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  os_signpost_id_t v41;
  os_signpost_id_t v42;
  os_signpost_id_t v43;
  os_signpost_id_t v44;
  uint64_t v45;
  WebCore::ScriptElement *v46;
  _DWORD *v47;
  uint64_t v49;
  uint8_t buf[8];
  __int16 v51;
  int v52;
  __int16 v53;
  WebCore::ScriptElement *v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)(v2 + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = this;
      v6 = (unsigned int *)(v4 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      ++*(_DWORD *)(v2 + 3344);
      v8 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v2);
      do
        v10 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v10 + 1, (unsigned int *)v8));
      v49 = v8;
      v11 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 8);
      if ((*(_BYTE *)(v11 + 22) & 0x10) != 0)
      {
        v13 = *(_QWORD *)(v8 + 8);
        v14 = (_DWORD *)(v13 + 24);
        *(_DWORD *)(v13 + 24) += 2;
        v16 = (void **)(v13 + 1608);
        v17 = *(unsigned int *)(v13 + 1620);
        if ((_DWORD)v17 != *(_DWORD *)(v13 + 1616))
        {
          v15 = 0;
          v18 = (char *)*v16 + 8 * v17;
LABEL_14:
          *(_QWORD *)v18 = v15;
          *(_DWORD *)(v13 + 1620) = v17 + 1;
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v9);
          }
          else
          {
            *v14 = *(_DWORD *)(v13 + 24) - 2;
          }
          if (kdebug_is_enabled())
          {
            v30 = v5;
            v31 = *MEMORY[0x1E0CBE150];
            v32 = WTFSignpostLogHandle();
            v33 = v32;
            if (v31)
            {
              v5 = v30;
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)&buf[4] = 1;
                v51 = 1024;
                v52 = 2;
                v53 = 2048;
                v54 = v30;
                v55 = 2048;
                v56 = WTFCurrentContinuousTime();
                _os_log_impl(&dword_1940B8000, v33, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu executing module script", buf, 0x22u);
              }
            }
            else
            {
              v5 = v30;
              v41 = os_signpost_id_make_with_pointer(v32, v30);
              if (v41 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v42 = v41;
                if (os_signpost_enabled(v33))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl(&dword_1940B8000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v42, "ExecuteScriptElement", "executing module script", buf, 2u);
                }
              }
            }
          }
          v19 = *(WebCore::ScriptController **)(v4 + 304);
          {
            v20 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
          }
          else
          {
            v45 = WebCore::g_commonVMOrNull;
            if (!WebCore::g_commonVMOrNull)
              v45 = WebCore::commonVMSlow(0);
            v20 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v45 + 41456) + 16);
            WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v20;
          }
          WebCore::ScriptController::linkAndEvaluateModuleScriptInWorld(v19, a2, v20);
          if (kdebug_is_enabled())
          {
            v34 = v5;
            v35 = *MEMORY[0x1E0CBE150];
            v36 = WTFSignpostLogHandle();
            v37 = v36;
            if (v35)
            {
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                v38 = WTFCurrentContinuousTime();
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)&buf[4] = 2;
                v51 = 1024;
                v52 = 2;
                v53 = 2048;
                v54 = v34;
                v55 = 2048;
                v56 = v38;
                _os_log_impl(&dword_1940B8000, v37, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu executing module script", buf, 0x22u);
              }
            }
            else
            {
              v43 = os_signpost_id_make_with_pointer(v36, v34);
              if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v44 = v43;
                if (os_signpost_enabled(v37))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl(&dword_1940B8000, v37, OS_SIGNPOST_INTERVAL_END, v44, "ExecuteScriptElement", "executing module script", buf, 2u);
                }
              }
            }
          }
          WebCore::CurrentScriptIncrementer::~CurrentScriptIncrementer((WebCore::CurrentScriptIncrementer *)&v49, v21);
          --*(_DWORD *)(v2 + 3344);
          do
          {
            v22 = __ldaxr(v6);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v6));
          if (!v23)
          {
            atomic_store(1u, v6);
            v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v39 = off_1E31FE290;
            v39[1] = v6;
            *(_QWORD *)buf = v39;
            WTF::ensureOnMainThread();
            v40 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v40)
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          }
          goto LABEL_23;
        }
        v46 = v5;
        v15 = 0;
      }
      else
      {
        v12 = *(_WORD *)((char *)v5 + 21);
        v13 = *(_QWORD *)(v8 + 8);
        v14 = (_DWORD *)(v13 + 24);
        *(_DWORD *)(v13 + 24) += 2;
        if ((v12 & 0x1800) != 0)
          v15 = 0;
        else
          v15 = v11;
        v16 = (void **)(v13 + 1608);
        v17 = *(unsigned int *)(v13 + 1620);
        if ((_DWORD)v17 != *(_DWORD *)(v13 + 1616))
        {
          v18 = (char *)*v16 + 8 * v17;
          if (v15)
          {
            *(_DWORD *)(v15 + 24) += 2;
            v15 = v11;
          }
          goto LABEL_14;
        }
        v46 = v5;
      }
      v47 = (_DWORD *)(v13 + 1616);
      v24 = v17 + (v17 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v17 + 1)
        v26 = v17 + 1;
      else
        v26 = v25;
      if (v26 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v27 = *(void **)(v13 + 1608);
      v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
      *v47 = v26;
      *v16 = v28;
      memcpy(v28, v27, 8 * v17);
      v5 = v46;
      if (v27)
      {
        if (*v16 == v27)
        {
          *v16 = 0;
          *v47 = 0;
        }
        WTF::fastFree((WTF *)v27, v9);
      }
      v17 = *(unsigned int *)(v13 + 1620);
      v29 = (char *)*v16;
      if (v15)
        *(_DWORD *)(v15 + 24) += 2;
      v18 = &v29[8 * v17];
      goto LABEL_14;
    }
  }
LABEL_23:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
}

uint64_t WebCore::LoadableScriptError::LoadableScriptError(uint64_t this, const WebCore::LoadableScriptError *a2)
{
  _DWORD *v2;
  uint64_t v3;
  JSC::HandleSet *v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  JSC::HandleSet *v17;
  const WebCore::LoadableScriptError *v18;
  uint64_t v19;

  *(_BYTE *)this = *(_BYTE *)a2;
  *(_BYTE *)(this + 8) = 0;
  *(_BYTE *)(this + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *(_WORD *)(this + 8) = *((_WORD *)a2 + 4);
    v2 = (_DWORD *)*((_QWORD *)a2 + 2);
    if (v2)
      *v2 += 2;
    *(_QWORD *)(this + 16) = v2;
    *(_BYTE *)(this + 24) = 1;
  }
  *(_QWORD *)(this + 32) = 0;
  v3 = *((_QWORD *)a2 + 4);
  if (v3)
  {
    v4 = *(JSC::HandleSet **)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v5 = (_QWORD *)*((_QWORD *)v4 + 5);
    if (!v5)
    {
      v19 = this;
      v17 = v4;
      v18 = a2;
      JSC::HandleSet::grow(v4);
      v4 = v17;
      a2 = v18;
      this = v19;
      v5 = (_QWORD *)*((_QWORD *)v17 + 5);
    }
    *((_QWORD *)v4 + 5) = *v5;
    v5[2] = 0;
    v6 = v5 + 2;
    *v5 = 0;
    v5[1] = 0;
    *(_QWORD *)(this + 32) = v5 + 2;
    v7 = *((_QWORD *)a2 + 4);
    if (v7)
      v7 = *(_QWORD *)v7;
    v8 = (unint64_t)(v6 - 2);
    v9 = *v6;
    v11 = (v7 & 0xFFFE000000000002) == 0 && v7 != 0;
    v12 = (v9 & 0xFFFE000000000002) == 0;
    if (!v9)
      v12 = 0;
    if (v12 != v11)
    {
      if ((v11 & 1) != 0)
      {
        v13 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
        v14 = v13[3];
        v13 += 3;
        *(_QWORD *)v8 = v14;
        *(v6 - 1) = (unint64_t)v13;
        *v13 = v8;
        *(_QWORD *)(v14 + 8) = v8;
      }
      else
      {
        v16 = *(_QWORD *)v8;
        v15 = (_QWORD *)*(v6 - 1);
        *v15 = *(_QWORD *)v8;
        *(_QWORD *)(v16 + 8) = v15;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        v6 = *(unint64_t **)(this + 32);
      }
    }
    *v6 = v7;
  }
  return this;
}

unsigned int *WebCore::ScriptElement::deref(WebCore::ScriptElement *this, void *a2)
{
  unsigned int *result;

  result = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  else
  {
    result[6] -= 2;
  }
  return result;
}

BOOL WebCore::isScriptElement(WebCore *this, WebCore::Element *a2)
{
  __int16 v2;

  v2 = *((_WORD *)this + 14);
  if ((v2 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24))
    return 1;
  if ((v2 & 0x20) != 0)
    return *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::scriptTag + 24);
  return 0;
}

WTF::StringImpl *WebCore::ScriptElementCachedScriptFetcher::requestModuleScript@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, WebCore::CachedResourceHandleBase *a5@<X8>)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 24))(a1))
  {
    v10 = (WTF::StringImpl *)a1[6];
    if (v10)
      *(_DWORD *)v10 += 2;
    v13 = v10;
  }
  else
  {
    WTF::AtomStringImpl::add();
  }
  WebCore::CachedScriptFetcher::requestScriptWithCache((uint64_t)a1, a2, a3, (uint64_t *)&v13, a4, 0, a5);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::ScriptExecutionContext(uint64_t a1, char a2, _OWORD *a3)
{
  uint64_t WeakRandomUUIDVersion4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v11;
  char v12;
  char **v13;
  char *v14;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 7;
  *(_QWORD *)(a1 + 81) = 0;
  *(_BYTE *)(a1 + 89) = 0;
  *(_QWORD *)a1 = off_1E33A73D8;
  *(_QWORD *)(a1 + 96) = &unk_1E33A7598;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  if (*a3 != 0)
    goto LABEL_8;
  WeakRandomUUIDVersion4 = WTF::UUID::generateWeakRandomUUIDVersion4((WTF::UUID *)a1);
  v7 = v6;
  v8 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
  {
    __break(1u);
LABEL_8:
    v11 = a3[1];
    *(_OWORD *)(a1 + 224) = *a3;
    *(_OWORD *)(a1 + 240) = v11;
    goto LABEL_6;
  }
  v9 = WebCore::Process::globalIdentifier;
  *(_QWORD *)(a1 + 224) = WeakRandomUUIDVersion4;
  *(_QWORD *)(a1 + 232) = v7;
  *(_QWORD *)(a1 + 240) = v9;
LABEL_6:
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 272) = -256;
  *(_BYTE *)(a1 + 274) = a2;
  *(_DWORD *)(a1 + 275) = 0;
  *(_WORD *)(a1 + 279) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  return a1;
}

WTF::StringImpl *WebCore::ScriptExecutionContext::makeEmptyContentSecurityPolicy@<X0>(WebCore::ScriptExecutionContext *this@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10[5];
  WTF::StringImpl *v11;

  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v4 += 2;
  v11 = v4;
  MEMORY[0x19AEA52D4](v10, &v11, 0);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = WTF::fastMalloc((WTF *)0xF0);
  *a2 = WebCore::ContentSecurityPolicy::ContentSecurityPolicy(v7, (uint64_t *)v10, (uint64_t)this);
  result = v10[0];
  v10[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::regenerateIdentifier(WebCore::ScriptExecutionContext *this)
{
  uint64_t *v1;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  WebCore::ScriptExecutionContext *v7;
  uint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::ScriptExecutionContext *v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  _QWORD v20[3];
  char v21;
  uint64_t *v22;

  v1 = (uint64_t *)this;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  this = (WebCore::ScriptExecutionContext *)MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    v4 = v1 + 28;
    goto LABEL_20;
  }
  v3 = &webThreadDelegateMessageScopeCount;
  v4 = v1 + 28;
  if (!WebCore::allScriptExecutionContextsMap(void)::contexts)
    goto LABEL_20;
  this = (WebCore::ScriptExecutionContext *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, v1 + 28);
  v5 = WebCore::allScriptExecutionContextsMap(void)::contexts;
  if (this)
  {
    if (!WebCore::allScriptExecutionContextsMap(void)::contexts)
    {
      v7 = 0;
      goto LABEL_11;
    }
    v6 = *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 4);
  }
  else
  {
    if (!WebCore::allScriptExecutionContextsMap(void)::contexts)
      goto LABEL_20;
    v6 = *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 4);
    this = (WebCore::ScriptExecutionContext *)(WebCore::allScriptExecutionContextsMap(void)::contexts + 48 * v6);
  }
  v7 = (WebCore::ScriptExecutionContext *)(WebCore::allScriptExecutionContextsMap(void)::contexts + 48 * v6);
  if (v7 == this)
    goto LABEL_20;
LABEL_11:
  if (v7 == this)
    goto LABEL_20;
  *(_QWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = -1;
  ++*(_DWORD *)(v5 - 16);
  v8 = WebCore::allScriptExecutionContextsMap(void)::contexts;
  if (!WebCore::allScriptExecutionContextsMap(void)::contexts)
    goto LABEL_31;
  for (i = *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 12) - 1; ; i = -1)
  {
    *(_DWORD *)(v8 - 12) = i;
    v10 = *((_QWORD *)v3 + 259);
    if (v10)
    {
      v11 = 6 * *(_DWORD *)(v10 - 12);
      v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
        this = (WebCore::ScriptExecutionContext *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(&WebCore::allScriptExecutionContextsMap(void)::contexts, v12 >> 1, 0);
    }
LABEL_20:
    this = (WebCore::ScriptExecutionContext *)WTF::UUID::generateWeakRandomUUIDVersion4(this);
    v14 = this;
    v3 = v15;
    v16 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v16 != -1)
    {
      v20[0] = &v21;
      v22 = v20;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    v8 = WebCore::Process::globalIdentifier;
    if ((WebCore::Process::globalIdentifier & 1) != 0)
      break;
    __break(1u);
LABEL_31:
    ;
  }
  v17 = WebCore::Process::globalIdentifier;
  v1[28] = (uint64_t)v14;
  v1[29] = (uint64_t)v3;
  v1[30] = v17;
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v22 = v1;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, v4, (uint64_t *)&v22, (uint64_t)v20);
  v19 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v19 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return result;
}

WebCore::ServiceWorker *WebCore::ScriptExecutionContext::setActiveServiceWorker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::ServiceWorker *result;
  bmalloc::api *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(WebCore::ServiceWorker **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v3;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::ServiceWorker::~ServiceWorker(result, a2);
      return (WebCore::ServiceWorker *)bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

void WebCore::SecurityContext::setContentSecurityPolicy(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ContentSecurityPolicy *v4;
  WTF *v5;
  void *v6;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(WebCore::ContentSecurityPolicy **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v4)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v4, a2);
    if (atomic_load((unsigned int *)v5))
    {
      *((_OWORD *)v5 + 13) = 0u;
      *((_OWORD *)v5 + 14) = 0u;
      *((_OWORD *)v5 + 11) = 0u;
      *((_OWORD *)v5 + 12) = 0u;
      *((_OWORD *)v5 + 9) = 0u;
      *((_OWORD *)v5 + 10) = 0u;
      *((_OWORD *)v5 + 7) = 0u;
      *((_OWORD *)v5 + 8) = 0u;
      *((_OWORD *)v5 + 5) = 0u;
      *((_OWORD *)v5 + 6) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *((_OWORD *)v5 + 4) = 0u;
      *((_OWORD *)v5 + 1) = 0u;
      *((_OWORD *)v5 + 2) = 0u;
      *(_OWORD *)v5 = 0u;
    }
    else
    {
      WTF::fastFree(v5, v6);
    }
  }
  *(_BYTE *)(a1 + 89) = 0;
}

uint64_t *WebCore::ScriptExecutionContext::cssValuePool(WebCore::ScriptExecutionContext *this)
{
  {
    WebCore::CSSValuePool::singleton(void)::pool = 0;
    unk_1ECE88B90 = 0;
    qword_1ECE88B98 = 0;
  }
  return &WebCore::CSSValuePool::singleton(void)::pool;
}

void WebCore::ScriptExecutionContext::fontLoadRequest(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ScriptExecutionContext::jscScriptExecutionStatus(WebCore::ScriptExecutionContext *this)
{
  if (*((_BYTE *)this + 275))
    return 1;
  else
    return 2 * *((unsigned __int8 *)this + 276);
}

uint64_t WebCore::ScriptExecutionContext::currentSourceURL@<X0>(WebCore::ScriptExecutionContext *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;

  if (!*((_BYTE *)this + 274))
  {
    v3 = *((_QWORD *)this + 42);
    if (!v3)
      goto LABEL_42;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      goto LABEL_42;
    v5 = *(_QWORD *)(v4 + 304);
    {
      v6 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_6:
      v7 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v5 + 16) + 112), v6)
           + 2);
      goto LABEL_7;
    }
    v21 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_51:
      v6 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v21 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v6;
      goto LABEL_6;
    }
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v21 = v23[0];
    WebCore::g_commonVMOrNull = v23[0];
    if (__ldaxr((unsigned int *)(v23[0] + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v23[0] + 1096)))
    {
LABEL_48:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v23[0] + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v21 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v21, 0);
      goto LABEL_51;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v23[0] + 192));
    goto LABEL_48;
  }
  if (*((_BYTE *)this + 274) != 1)
    goto LABEL_42;
  v18 = *((_QWORD *)this + 43);
  if (!v18)
    goto LABEL_42;
  v19 = *(uint64_t **)(v18 + 24);
  if (!v19 || (v7 = *v19) == 0)
  {
    WebCore::WorkerOrWorkletScriptController::initScript(*((_QWORD *)this + 43));
    v20 = *(uint64_t **)(v18 + 24);
    if (!v20)
      goto LABEL_42;
    v7 = *v20;
  }
LABEL_7:
  if (!v7)
  {
LABEL_42:
    *(_QWORD *)a2 = 0;
    return WTF::URL::invalidate((WTF::URL *)a2);
  }
  v8 = *(_QWORD *)(v7 + 56);
  v9 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)a2 = 0;
  result = WTF::URL::invalidate((WTF::URL *)a2);
  if (v9)
  {
    MEMORY[0x19AEA32D0](v23, v9, v8, 0);
    while (v24)
    {
      if (v26 || (v25 & 0xFFFE000000000007) == 3)
      {
        JSC::StackVisitor::Frame::sourceURL((JSC::StackVisitor::Frame *)v23);
        v12 = v31;
        if (v31)
        {
          if (*((_DWORD *)v31 + 1))
          {
            MEMORY[0x19AEA52D4](&v28, &v31, 0);
            v13 = v28;
            v28 = 0;
            v14 = *(WTF::StringImpl **)a2;
            *(_QWORD *)a2 = v13;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
              {
                WTF::StringImpl::destroy(v14, v11);
                v15 = v28;
              }
              else
              {
                v15 = 0;
                *(_DWORD *)v14 -= 2;
              }
            }
            else
            {
              v15 = 0;
            }
            v16 = v29;
            *(_OWORD *)(a2 + 8) = v29;
            LODWORD(v29) = v16 & 0xFFFFFFFE;
            *(_OWORD *)(a2 + 24) = v30;
            v28 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v11);
              else
                *(_DWORD *)v15 -= 2;
            }
            v17 = (*(_DWORD *)(a2 + 8) & 1) == 0;
            v12 = v31;
            v31 = 0;
            if (!v12)
              goto LABEL_25;
          }
          else
          {
            v17 = 0;
            v31 = 0;
          }
          if (*(_DWORD *)v12 != 2)
          {
            *(_DWORD *)v12 -= 2;
LABEL_25:
            if (v17)
              break;
            goto LABEL_26;
          }
          WTF::StringImpl::destroy(v12, v11);
          if (v17)
            break;
        }
      }
LABEL_26:
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v23);
    }
    result = (uint64_t)v27;
    v27 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(result, v11);
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::suspendActiveDOMObjects(uint64_t result, char a2)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;

  if (!*(_BYTE *)(result + 275))
  {
    v3 = result;
    *(_BYTE *)(result + 275) = 1;
    v4 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E33A7900;
    v4[8] = a2;
    v5 = v4;
    WebCore::ScriptExecutionContext::forEachActiveDOMObject(v3, &v5);
    result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 8))(v4);
    *(_BYTE *)(v3 + 273) = a2;
  }
  return result;
}

unsigned __int8 *WebCore::ScriptExecutionContext::resumeActiveDOMObjects(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  char v13;

  if (result[273] == a2)
  {
    v2 = result;
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E33A7928;
    v12 = (_QWORD *)v3;
    WebCore::ScriptExecutionContext::forEachActiveDOMObject((uint64_t)v2, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v2 + 344))(v2);
    JSC::DeferredWorkTimer::didResumeScriptExecutionOwner(*(JSC::DeferredWorkTimer **)(v4 + 41888));
    v2[275] = 0;
    v5 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E33A7950;
    v11 = v5;
    v6 = *((unsigned int *)v2 + 49);
    if ((_DWORD)v6 == *((_DWORD *)v2 + 48))
    {
      v7 = (unsigned __int8 **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v2 + 184), v6 + 1, (unint64_t)&v11);
      v6 = *((unsigned int *)v2 + 49);
      v8 = (unsigned __int8 **)(*((_QWORD *)v2 + 23) + 8 * v6);
      v5 = *v7;
    }
    else
    {
      v8 = (unsigned __int8 **)(*((_QWORD *)v2 + 23) + 8 * v6);
      v7 = &v11;
    }
    *v7 = 0;
    *v8 = v5;
    *((_DWORD *)v2 + 49) = v6 + 1;
    if (!v2[279])
    {
      v2[279] = 1;
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E33A78D8;
      v12 = v9;
      v13 = 0;
      (*(void (**)(unsigned __int8 *, _QWORD **))(*(_QWORD *)v2 + 336))(v2, &v12);
      v10 = v12;
      v12 = 0;
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
    result = v11;
    v11 = 0;
    if (result)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_BYTE *WebCore::ScriptExecutionContext::stopActiveDOMObjects(_BYTE *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _DWORD **v4;
  _QWORD *v5;
  _BYTE *v6;

  if (!this[276])
  {
    v1 = (uint64_t)this;
    this[276] = 1;
    v2 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E33A7978;
    v6 = (_BYTE *)v2;
    WebCore::ScriptExecutionContext::forEachActiveDOMObject(v1, &v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v4 = *(_DWORD ***)(v1 + 264);
    if (v4)
    {
      *(_QWORD *)(v1 + 264) = 0;
      WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::deallocateTable(v4, v3);
    }
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E33A79A0;
    v6 = v5;
    WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(v1 + 296), &v6);
    this = v6;
    v6 = 0;
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

WTF *WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, _QWORD *a2)
{
  unsigned int *v4;
  WTF *result;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  WTF::Mapper<WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::NativePromiseRequest&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v14, a1);
  result = v14;
  if (HIDWORD(v15))
  {
    v6 = 8 * HIDWORD(v15);
    do
    {
      v11 = v6;
      v12 = result;
      v4 = *(unsigned int **)result;
      if (*(_QWORD *)result
        && *((_QWORD *)v4 + 1)
        && WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::contains<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(a1, (uint64_t)v4))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*(_QWORD *)v12 + 8));
      }
      result = (WTF *)((char *)v12 + 8);
      v6 = v11 - 8;
    }
    while (v11 != 8);
    result = v14;
    if (HIDWORD(v15))
    {
      v7 = (WTF *)((char *)v14 + 8 * HIDWORD(v15));
      do
      {
        v8 = *(unsigned int **)result;
        *(_QWORD *)result = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            v13 = result;
            WTF::fastFree((WTF *)v8, v4);
            result = v13;
          }
        }
        result = (WTF *)((char *)result + 8);
      }
      while (result != v7);
      result = v14;
    }
  }
  if (result)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

void WebCore::ScriptExecutionContext::createRTCDataChannelRemoteHandlerConnection(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ScriptExecutionContext::reportUnhandledPromiseRejection(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSPromise *this, _QWORD *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  _BOOL4 v31;
  unint64_t v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;

  v6 = result;
  if (*(_BYTE *)(result + 274)
    || (v12 = *(_QWORD *)(result + 336)) == 0
    || (v13 = *(_QWORD *)(v12 + 8)) == 0
    || (v14 = *(_QWORD *)(v13 + 24)) == 0
    || (v15 = *(_QWORD *)(v14 + 8)) == 0
    || (*(_QWORD *)(*(_QWORD *)(v15 + 112) + 696) & 0x1000000000000000) != 0)
  {
    v7 = (unsigned int *)*((_QWORD *)a2 + 7);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v41 = (JSC::VM *)v7;
    v9 = JSC::JSPromise::result(this, (JSC::VM *)v7);
    WebCore::retrieveErrorMessage(a2, v9, (uint64_t)v7, &v41, &v40);
    v39 = 0;
    if (!v40 || *((_QWORD *)v41 + 2))
      goto LABEL_6;
    v23 = *((_DWORD *)v40 + 1);
    v24 = "";
    if (v23)
    {
      if (v23 >= 0xC8)
        v25 = 200;
      else
        v25 = v23;
      v26 = ((unint64_t)*((unsigned int *)v40 + 4) >> 2) & 1;
      v27 = (char *)*((_QWORD *)v40 + 1);
      v28 = v25 + 29;
      v29 = v25 & 0xFFFFFFFEFFFFFFFFLL | (v26 << 32);
      if (v23 >= 0xC9)
        v30 = 3;
      else
        v30 = 0;
      if (v23 >= 0xC9)
        v24 = "...";
      v31 = v26 != 0;
    }
    else
    {
      v30 = 0;
      v29 = 0x100000000;
      v31 = 1;
      v28 = 29;
      v27 = "";
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v28 + v30, v31, "Unhandled Promise Rejection: ", 0x1Du, v27, v29, v24, v30, &v38);
    v39 = v38;
    if (!v38)
    {
      if (!v40
        || *((_DWORD *)v40 + 1) < 0xBu
        || (v32 = ((unint64_t)*((unsigned int *)v40 + 4) >> 2) & 1,
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(42, v32, "Unhandled Promise Rejection: ", 0x1Du, *((_BYTE **)v40 + 1), (v32 << 32) | 0xA, "...", 3u, &v38), (v39 = v38) == 0))
      {
LABEL_6:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
    }
    if (*a4)
    {
      v37 = (_DWORD *)*a4;
      *a4 = 0;
      v10 = WTF::fastMalloc((WTF *)0x60);
      v38 = (WTF::StringImpl *)MEMORY[0x19AEA5F34](v10, 1, 0, 2, &v39, &v37, 0, 0.0);
      v11 = v37;
      v37 = 0;
      if (v11)
      {
        if (*v11 == 1)
        {
          v33 = (WTF *)MEMORY[0x19AEA6024]();
          WTF::fastFree(v33, v34);
        }
        else
        {
          --*v11;
        }
      }
    }
    else
    {
      WTF::fastMalloc((WTF *)0x60);
      v38 = (WTF::StringImpl *)Inspector::ConsoleMessage::ConsoleMessage();
    }
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 240))(v6, &v38);
    v17 = v38;
    v38 = 0;
    if (v17)
    {
      v18 = (WTF *)MEMORY[0x19AEA5F58]();
      WTF::fastFree(v18, v19);
    }
    v20 = v39;
    v39 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    result = (uint64_t)v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      else
        *(_DWORD *)result -= 2;
    }
    do
    {
      v21 = __ldaxr(v7);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v7));
    if (!v22)
    {
      atomic_store(1u, v7);
      v35 = (WTF *)MEMORY[0x19AEA3AF8](v7);
      return WTF::fastFree(v35, v36);
    }
  }
  return result;
}

unsigned int *WebCore::ScriptExecutionContext::protectedVM@<X0>(WebCore::ScriptExecutionContext *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *result;
  unsigned int v4;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 344))(this);
  do
    v4 = __ldaxr(result);
  while (__stlxr(v4 + 1, result));
  *a2 = result;
  return result;
}

WebCore::ActiveDOMObject **WTF::Ref<WebCore::PublicURLManager,WTF::RawPtrTraits<WebCore::PublicURLManager>,WTF::DefaultRefDerefTraits<WebCore::PublicURLManager>>::~Ref(WebCore::ActiveDOMObject **a1, void *a2)
{
  WebCore::ActiveDOMObject *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::ActiveDOMObject::~ActiveDOMObject(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

double WebCore::ScriptExecutionContext::minimumDOMTimerInterval(WebCore::ScriptExecutionContext *this)
{
  return 0.004;
}

double WebCore::ScriptExecutionContext::domTimerAlignmentInterval(WebCore::ScriptExecutionContext *this)
{
  return 0.0;
}

uint64_t WebCore::ScriptExecutionContext::ensureRejectedPromiseTrackerSlow(WebCore::ScriptExecutionContext *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::RejectedPromiseTracker *v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v23;
  void *v24;
  unsigned int *v25;

  if (!this || *((_BYTE *)this + 274) != 1)
    goto LABEL_14;
  v2 = *((_QWORD *)this + 43);
  if (!v2)
    return 0;
  v3 = (unsigned __int8 *)(v2 + 40);
  if (__ldaxr((unsigned __int8 *)(v2 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v2 + 40);
LABEL_8:
  v5 = *(unsigned __int8 *)(v2 + 41);
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v5)
      return 0;
    goto LABEL_14;
  }
  if (__stlxr(0, v3))
    goto LABEL_13;
  if (v5)
    return 0;
LABEL_14:
  (*(void (**)(unsigned int **__return_ptr, WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 352))(&v25, this);
  v8 = WTF::fastMalloc((WTF *)0x38);
  v9 = v25;
  *(_DWORD *)v8 = 0;
  if (!*((_QWORD *)this + 13))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = (char *)this + 96;
    v20 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v19;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v18);
      }
    }
  }
  v10 = (unsigned int *)*((_QWORD *)this + 13);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 32) = off_1E33A72D8;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = v9;
  JSC::Heap::registerWeakGCHashTable();
  v12 = (WebCore::RejectedPromiseTracker *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v8;
  if (v12)
  {
    WebCore::RejectedPromiseTracker::~RejectedPromiseTracker(v12);
    if (*(_DWORD *)v13)
    {
      *(_QWORD *)(v13 + 48) = 0;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)v13 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v13, v14);
    }
  }
  v15 = v25;
  v25 = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      v23 = (WTF *)MEMORY[0x19AEA3AF8]();
      WTF::fastFree(v23, v24);
    }
  }
  return *((_QWORD *)this + 19);
}

double WebCore::ScriptExecutionContext::removeRejectedPromiseTracker(WebCore::ScriptExecutionContext *this)
{
  WebCore::RejectedPromiseTracker *v2;
  uint64_t v3;
  void *v4;
  double result;

  v2 = (WebCore::RejectedPromiseTracker *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
  {
    WebCore::RejectedPromiseTracker::~RejectedPromiseTracker(v2);
    if (*(_DWORD *)v3)
    {
      *(_QWORD *)(v3 + 48) = 0;
      result = 0.0;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v3, v4);
    }
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::domainForCachePartition@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  WebCore::SecurityOrigin *v4;

  v3 = *(_DWORD **)(this + 216);
  if (v3)
    goto LABEL_5;
  if (*(_BYTE *)(this + 272) == 1)
  {
    v4 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 256))(this);
    return WebCore::SecurityOrigin::domainForCachePartition(v4, a2);
  }
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
LABEL_5:
    *v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebCore::ScriptExecutionContext::allowsMediaDevices(WebCore::ScriptExecutionContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)this + 274))
    return 0;
  v2 = *((_QWORD *)this + 42);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 112);
  if (*(_BYTE *)(v6 + 239))
    LODWORD(v6) = *(unsigned __int8 *)(v6 + 238) != 0;
  else
    v6 = (*(_QWORD *)(v6 + 712) >> 22) & 1;
  return v6 ^ 1;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorker *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ServiceWorker *>,WTF::HashTableTraits>::add<WebCore::ServiceWorker *>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v22;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v6, v27, v16);
    v16 = result;
    v23 = *v6;
    if (*v6)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
  v29 = v23 + 16 * v26;
  v28 = 1;
LABEL_33:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t *WebCore::ScriptExecutionContext::unregisterServiceWorker(WebCore::ScriptExecutionContext *this, WebCore::ServiceWorker *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v4 = *((_QWORD *)this + 26);
  result = (uint64_t *)((char *)this + 208);
  v3 = v4;
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 7);
    v6 = *(_DWORD *)(v3 - 8);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v3 + 16 * v10);
    if (v11 != v5)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v3 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 16 * v10) = -1;
      ++*(_DWORD *)(*result - 16);
      v13 = *result;
      v14 = *result ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *result;
      if (*result)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v17 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::ensureServiceWorkerContainer(WebCore::ScriptExecutionContext *this)
{
  uint64_t v2;
  char v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t result;

  if (*((_BYTE *)this + 274))
  {
    if (((*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 64))(this) & 1) != 0)
    {
      v2 = *((_QWORD *)this + 69);
      if (!v2)
      {
        v3 = *((_BYTE *)this + 560);
        v2 = WTF::fastMalloc((WTF *)0x58);
        *(_DWORD *)(v2 + 16) = 1;
        *(_QWORD *)v2 = &off_1E33A18C0;
        *(_QWORD *)(v2 + 8) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v2, this);
        *(_QWORD *)(v2 + 56) = 0;
        *(_OWORD *)(v2 + 40) = 0u;
        *(_OWORD *)(v2 + 24) = 0u;
        *(_QWORD *)v2 = &off_1E3402F28;
        v4 = (_DWORD *)*((_QWORD *)this + 67);
        if (v4)
          *v4 += 2;
        *(_QWORD *)(v2 + 64) = v4;
        *(_BYTE *)(v2 + 72) = v3;
        *(_QWORD *)(v2 + 80) = 0;
        v5 = (_DWORD *)*((_QWORD *)this + 69);
        *((_QWORD *)this + 69) = v2;
        if (v5)
        {
          if (v5[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
            v2 = *((_QWORD *)this + 69);
          }
          else
          {
            --v5[4];
          }
        }
      }
      return WebCore::NavigatorBase::serviceWorker((WebCore::NavigatorBase *)v2);
    }
    result = 96;
    __break(0xC471u);
  }
  else
  {
    result = *((_QWORD *)this + 63);
    if (result)
    {
      v2 = WebCore::LocalDOMWindow::navigator((WebCore::LocalDOMWindow *)result);
      return WebCore::NavigatorBase::serviceWorker((WebCore::NavigatorBase *)v2);
    }
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::postTaskTo(uint64_t *a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, a1);
  if (v5 && (v6 = v5[4]) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 336))(v6, a2);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v8 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return v7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return v7;
}

uint64_t WebCore::ScriptExecutionContext::postTaskForModeToWorkerOrWorklet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, a1);
  if (v7 && (v8 = v7[4]) != 0 && *(_BYTE *)(v8 + 274) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v8 + 360) + 48), a2, a3);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v10 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return v9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return v9;
}

uint64_t WebCore::ScriptExecutionContext::postTaskToResponsibleDocument(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;

  v3 = result;
  if (*(_BYTE *)(result + 274) == 1)
  {
    v5 = *(_QWORD **)(result + 360);
    if (!v5)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
      if ((result & 1) != 0)
      {
        v20 = *(_QWORD *)(v3 + 432);
        if (v20)
        {
          v4 = *(_QWORD *)(v20 + 8);
          if (v4)
            return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v4);
        }
      }
      else
      {
        result = 96;
        __break(0xC471u);
      }
      return result;
    }
    v6 = v5[1];
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    ++*(_QWORD *)(v6 + 8);
    v8 = __ldxr((unsigned __int8 *)v6);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_15:
    result = (*(uint64_t (**)(_QWORD *))(*v5 + 48))(v5);
    if (result)
    {
      v10 = result;
      v11 = *a2;
      *a2 = 0;
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = &off_1E33A79C8;
      v12[1] = v11;
      v22 = v12;
      v23 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v10 + 56))(v10, &v22);
      result = (uint64_t)v22;
      v22 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v13 = v5[1];
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_22;
    }
    result = MEMORY[0x19AEA534C](v13);
LABEL_22:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v21 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v21 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return result;
LABEL_30:
        if (v17)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        if (!v18)
          return WTF::fastFree((WTF *)v13, v9);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return result;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(result + 274))
  {
    v4 = result - 192;
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v4);
  }
  return result;
}

void WebCore::ScriptExecutionContext::canAccessResource(unsigned __int8 *a1, WTF::StringImpl *a2)
{
  unsigned int v2;
  uint64_t v4;
  const WebCore::SecurityOrigin *v5;
  int v6;
  WebCore::SecurityOrigin *v7;

  v2 = a2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)a1, a2);
  if (v4)
  {
    v5 = (const WebCore::SecurityOrigin *)v4;
    if (*(_DWORD *)(v4 + 32) != 1)
    {
      if (v2 > 8)
      {
        __break(0xC471u);
        JUMPOUT(0x195A394FCLL);
      }
      if (((1 << v2) & 0x1B9) == 0)
      {
        if (((1 << v2) & 6) != 0)
          return;
        goto LABEL_6;
      }
      if (!*(_BYTE *)(v4 + 63) || *(_BYTE *)(v4 + 60) || *(_BYTE *)(v4 + 56))
      {
LABEL_6:
        v6 = a1[272];
        if (v6 == 1)
        {
          v7 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 256))(a1);
          WebCore::SecurityOrigin::isSameOriginAs(v7, v5);
        }
      }
    }
  }
}

uint64_t WebCore::ScriptExecutionContext::addNotificationCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t IdentifierInternal;

  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ScriptExecutionContext::NotificationCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ScriptExecutionContext::NotificationCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ScriptExecutionContext::NotificationCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(void)>>((uint64_t *)(a1 + 256), &IdentifierInternal, a2, (uint64_t)&v5);
  return IdentifierInternal;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ScriptExecutionContext::NotificationCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ScriptExecutionContext::NotificationCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ScriptExecutionContext::NotificationCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(void)>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v28;
        goto LABEL_30;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_21;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_27:
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v6, v27, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_29;
    }
LABEL_21:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_27;
  }
LABEL_29:
  v30 = v23 + 16 * v26;
  v29 = 1;
LABEL_30:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t *WebCore::ScriptExecutionContext::takeNotificationCallback@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = a2;
  return WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 256), &v4, a3);
}

uint64_t *WTF::HashSet<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v3 = *result;
  if (!*result)
    goto LABEL_8;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v10 + i++) & v4)
  {
    v10 = v8;
    v11 = *(_QWORD *)(v3 + 8 * v8);
    if (v11 != -1)
    {
      if (!v11)
        goto LABEL_8;
      if (v11 == a2)
        break;
    }
  }
  v12 = *(_DWORD *)(v3 - 4);
  if (v12 == (_DWORD)v10)
  {
LABEL_8:
    *a3 = 0;
    return result;
  }
  v13 = (_QWORD *)(v3 + 8 * v10);
  if (!a2)
  {
    *a3 = 0;
LABEL_12:
    v14 = (_QWORD *)(v3 + 8 * v12);
    if (v14 == v13)
      return result;
    goto LABEL_15;
  }
  *v13 = 0;
  v3 = *result;
  *a3 = a2;
  if (v3)
  {
    v12 = *(_DWORD *)(v3 - 4);
    goto LABEL_12;
  }
  v14 = 0;
LABEL_15:
  if (v14 != v13)
  {
    *v13 = -1;
    ++*(_DWORD *)(*result - 16);
    v15 = *result;
    v16 = *result ? *(_DWORD *)(v15 - 12) - 1 : -1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *result;
    if (*result)
    {
      v18 = 6 * *(_DWORD *)(v17 - 12);
      v19 = *(_DWORD *)(v17 - 4);
      if (v18 < v19 && v19 >= 9)
        return WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::rehash(result, v19 >> 1, 0);
    }
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::ref(uint64_t this)
{
  int v1;

  v1 = *(unsigned __int8 *)(this + 274);
  if (*(_BYTE *)(this + 274))
  {
    if (v1 == 1 || v1 == 2)
      ++*(_DWORD *)(this + 312);
  }
  else
  {
    *(_DWORD *)(this - 168) += 2;
  }
  return this;
}

_DWORD *WebCore::ScriptExecutionContext::deref(_DWORD *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 274);
  if (*((_BYTE *)this + 274))
  {
    if (v1 == 1)
    {
      if (this[78] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 40))(this);
      else
        --this[78];
    }
    else if (v1 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(this + 78);
    }
  }
  else if (*(this - 42) == 2)
  {
    if ((*((_WORD *)this - 81) & 0x400) == 0)
      return (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(this - 48));
  }
  else
  {
    *(this - 42) -= 2;
  }
  return this;
}

_DWORD *WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext((WebCore::EmptyScriptExecutionContext *)(result - 78));
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::refAllowingPartiallyDestroyed(uint64_t this)
{
  int v1;

  v1 = *(unsigned __int8 *)(this + 274);
  if (*(_BYTE *)(this + 274))
  {
    if (v1 == 1 || v1 == 2)
      ++*(_DWORD *)(this + 312);
  }
  else
  {
    *(_DWORD *)(this - 168) += 2;
  }
  return this;
}

unsigned int *WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(unsigned int *this, void *a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 274);
  if (*((_BYTE *)this + 274))
  {
    if (v2 == 1)
    {
      if (this[78] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 40))(this);
      else
        --this[78];
    }
    else if (v2 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(this + 78);
    }
  }
  else if (*(this - 42) == 2)
  {
    if ((*((_WORD *)this - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(this - 48), a2);
  }
  else
  {
    *(this - 42) -= 2;
  }
  return this;
}

WTF::FunctionDispatcher *WebCore::ScriptExecutionContext::nativePromiseDispatcher(WebCore::ScriptExecutionContext *this)
{
  WTF::FunctionDispatcher *v1;
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (WTF::FunctionDispatcher *)*((_QWORD *)this + 36);
  if (!v1)
  {
    v1 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
    v3 = 1;
    *((_DWORD *)v1 + 2) = 1;
    v4 = WTF::FunctionDispatcher::FunctionDispatcher(v1);
    *(_QWORD *)v4 = off_1E33A7800;
    v5 = *((_OWORD *)this + 15);
    *(_OWORD *)(v4 + 16) = *((_OWORD *)this + 14);
    *(_OWORD *)(v4 + 32) = v5;
    if ((*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 64))(this))
    {
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6)
        v6 = WTF::Thread::initializeCurrentTLS(0);
      v3 = *(_DWORD *)(v6 + 48);
    }
    *((_DWORD *)v1 + 12) = v3;
    v7 = *((_QWORD *)this + 36);
    *((_QWORD *)this + 36) = v1;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      return (WTF::FunctionDispatcher *)*((_QWORD *)this + 36);
    }
  }
  return v1;
}

uint64_t WebCore::ScriptRunner::resume(uint64_t this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;

  if ((*(_DWORD *)(this + 52) || *(_DWORD *)(this + 36) || (v3 = *(_QWORD *)(this + 56)) != 0 && *(_DWORD *)(v3 - 12))
    && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 8) + 3280))
  {
    v1 = this + 64;
    *(_QWORD *)(this + 88) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    return WebCore::TimerBase::setNextFireTime(v1, v2 + 0.0);
  }
  return this;
}

uint64_t WebCore::ScriptableDocumentParser::detach(WebCore::ScriptableDocumentParser *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ScriptableDocumentParser *)((char *)this + 32));
  *((_BYTE *)this + 12) = 3;
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 28);
      if ((_DWORD)v6)
      {
        v9 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v6));
        result = v9;
      }
      v7 = *(WTF **)(result + 16);
      if (v7)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v8 = result;
        WTF::fastFree(v7, a2);
        result = v8;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::ScriptedAnimationController::~ScriptedAnimationController(WebCore::ScriptedAnimationController *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_DWORD *)this + 5);
  if (v6)
    WTF::VectorDestructor<true,WebCore::ScriptedAnimationController::CallbackData>::destruct(*((_DWORD **)this + 1), (_DWORD *)(*((_QWORD *)this + 1) + 24 * v6));
  v7 = (WTF *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, a2);
  }
}

uint64_t WebCore::ScriptedAnimationController::suspend(uint64_t this)
{
  ++*(_DWORD *)(this + 36);
  return this;
}

uint64_t WebCore::ScriptedAnimationController::resume(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  WTF *v8;
  void *v9;

  v1 = *(_DWORD *)(this + 36);
  if (v1 >= 1)
    *(_DWORD *)(this + 36) = --v1;
  if (!v1)
  {
    if (*(_DWORD *)(this + 20))
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 8);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 528);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 8);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 24);
              if (v6)
              {
                v7 = *(WebCore::Page **)(v6 + 8);
                if (v7)
                {
                  ++*(_DWORD *)v7;
                  this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v7, 32);
                  if (*(_DWORD *)v7 == 1)
                  {
                    WebCore::Page::~Page(v7);
                    return WTF::fastFree(v8, v9);
                  }
                  else
                  {
                    --*(_DWORD *)v7;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ScriptedAnimationController::scheduleAnimation(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  WTF *v6;
  void *v7;

  if (this)
  {
    v1 = *(_QWORD *)(this + 8);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 528);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 8);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 24);
          if (v4)
          {
            v5 = *(_DWORD **)(v4 + 8);
            if (v5)
            {
              ++*v5;
              this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v5, 32);
              if (*v5 == 1)
              {
                WebCore::Page::~Page((uint64_t)v5);
                return WTF::fastFree(v6, v7);
              }
              else
              {
                --*v5;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

double WebCore::ScriptedAnimationController::interval(WebCore::ScriptedAnimationController *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 3);
  result = 0.015;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 24);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
              return WebCore::preferredFrameInterval(*(_BYTE *)(v7 + 1168) | *((_BYTE *)this + 48), *(_QWORD *)(v7 + 316), (*(_QWORD *)(*(_QWORD *)(v7 + 112) + 688) >> 31) & 1);
          }
        }
      }
    }
  }
  return result;
}

double WebCore::ScriptedAnimationController::preferredScriptedAnimationInterval(WebCore::ScriptedAnimationController *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 3);
  result = 0.015;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 24);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
              return WebCore::preferredFrameInterval(*(_BYTE *)(v7 + 1168) | *((_BYTE *)this + 48), *(_QWORD *)(v7 + 316), (*(_QWORD *)(*(_QWORD *)(v7 + 112) + 688) >> 31) & 1);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ScriptedAnimationController::throttlingReasons(WebCore::ScriptedAnimationController *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 3);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 528)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    return *((unsigned __int8 *)this + 48) | *(unsigned __int8 *)(v6 + 1168);
  }
  else
  {
    return *((unsigned __int8 *)this + 48);
  }
}

WebCore::TimelineRecordFactory *WebCore::ScriptedAnimationController::registerCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::TimelineRecordFactory *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  _DWORD *v15;
  void *v16;
  WebCore::UserGestureToken *v17;
  _DWORD *v18;
  uint64_t v19;
  WTF **v20;
  _QWORD *v21;
  WebCore::UserGestureToken *v22;
  WTF **v23;
  WTF *v24;
  WTF *v25;
  WebCore::UserGestureToken *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  _DWORD *v57;
  WebCore::UserGestureToken *v58;
  WTF *v59;

  v3 = a1;
  v4 = (WebCore::TimelineRecordFactory *)(*(_DWORD *)(a1 + 32) + 1);
  *(_DWORD *)(a1 + 32) = (_DWORD)v4;
  v5 = (_DWORD *)*a2;
  *((_BYTE *)v5 + 24) = 0;
  v5[5] = (_DWORD)v4;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && (v8 = *(_QWORD *)(v7 + 528)) != 0
    && (v9 = *(_QWORD *)(v8 + 8)) != 0
    && (v10 = *(_QWORD *)(v9 + 24)) != 0
    && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    ++*(_DWORD *)v11;
    v12 = *(_QWORD *)(v11 + 1784);
    v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    a1 = *(_QWORD *)(v12 + 8);
    if (a1)
      goto LABEL_70;
    a1 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)a1 = 1;
    *(_QWORD *)(a1 + 8) = v12;
    v54 = *(unsigned int **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = a1;
    if (!v54)
      goto LABEL_70;
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      WTF::fastFree((WTF *)v54, v53);
    }
    a1 = *(_QWORD *)(v12 + 8);
    if (a1)
    {
LABEL_70:
      do
        v14 = __ldaxr((unsigned int *)a1);
      while (__stlxr(v14 + 1, (unsigned int *)a1));
    }
    *((_QWORD *)v13 + 1) = a1;
    ++*(_QWORD *)(v12 + 24);
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::Page::~Page(v11);
      a1 = WTF::fastFree(v44, v45);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  else
  {
    v13 = 0;
  }
  v15 = (_DWORD *)*a2;
  *a2 = 0;
  v57 = v15;
  if (WTF::isMainThread((WTF *)a1))
  {
    {
      v17 = (WebCore::UserGestureToken *)WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v17 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = (_DWORD *)(v3 + 8);
  v58 = v17;
  v59 = v13;
  v19 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v19 == *(_DWORD *)(v3 + 16))
  {
    v48 = WTF::Vector<WebCore::ScriptedAnimationController::CallbackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v57);
    LODWORD(v19) = *(_DWORD *)(v3 + 20);
    v49 = (_QWORD *)(*(_QWORD *)(v3 + 8) + 24 * v19);
    v50 = *v48;
    *v48 = 0;
    *v49 = v50;
    v51 = v48[1];
    v48[1] = 0;
    v49[1] = v51;
    v23 = (WTF **)(v49 + 2);
    v20 = (WTF **)(v48 + 2);
  }
  else
  {
    v20 = &v59;
    v21 = (_QWORD *)(*(_QWORD *)v18 + 24 * v19);
    v57 = 0;
    *v21 = v15;
    v22 = v58;
    v58 = 0;
    v21[1] = v22;
    v23 = (WTF **)(v21 + 2);
  }
  v24 = *v20;
  *v20 = 0;
  *v23 = v24;
  *(_DWORD *)(v3 + 20) = v19 + 1;
  v25 = v59;
  v59 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v38 = *((_QWORD *)v25 + 1);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 8);
        if (v39)
          --*(_QWORD *)(v39 + 24);
        *((_QWORD *)v25 + 1) = 0;
        do
        {
          v40 = __ldaxr((unsigned int *)v38);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, (unsigned int *)v38));
        if (!v41)
        {
          atomic_store(1u, (unsigned int *)v38);
          WTF::fastFree((WTF *)v38, v16);
        }
      }
      else
      {
        *((_QWORD *)v25 + 1) = 0;
      }
      WTF::fastFree(v25, v16);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  v26 = v58;
  v58 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v26, v16);
      WTF::fastFree(v42, v43);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  v27 = v57;
  v57 = 0;
  if (v27)
  {
    if (v27[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
    else
      --v27[4];
  }
  v28 = *(_QWORD *)(v3 + 24);
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    if (v29)
    {
      *(_DWORD *)(v29 + 24) += 2;
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v52 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v29, (WebCore::Document *)v16);
        if (v52)
          WebCore::InspectorInstrumentation::didRequestAnimationFrameImpl(v52, v4, v29);
      }
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v29, v16);
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
  }
  if (!*(_DWORD *)(v3 + 36))
  {
    v31 = *(_QWORD *)(v3 + 24);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 528);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 24);
            if (v35)
            {
              v36 = *(_DWORD **)(v35 + 8);
              if (v36)
              {
                ++*v36;
                WebCore::Page::scheduleRenderingUpdate((uint64_t)v36, 32);
                if (*v36 == 1)
                {
                  WebCore::Page::~Page((uint64_t)v36);
                  WTF::fastFree(v46, v47);
                }
                else
                {
                  --*v36;
                }
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

void WebCore::ScriptedAnimationController::CallbackData::~CallbackData(WebCore::ScriptedAnimationController::CallbackData *this, void *a2)
{
  WTF *v3;
  WebCore::UserGestureToken *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  WTF *v12;

  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 1);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
          --*(_QWORD *)(v7 + 24);
        *((_QWORD *)v3 + 1) = 0;
        do
        {
          v8 = __ldaxr((unsigned int *)v6);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v6));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v6);
          v12 = v3;
          WTF::fastFree((WTF *)v6, a2);
          v3 = v12;
        }
      }
      else
      {
        *((_QWORD *)v3 + 1) = 0;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
}

WebCore::InspectorInstrumentation *WebCore::ScriptedAnimationController::cancelCallback(WebCore::ScriptedAnimationController *this, WebCore::Document *a2)
{
  WebCore::InspectorInstrumentation *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  result = (WebCore::InspectorInstrumentation *)WTF::Vector<WebCore::ScriptedAnimationController::CallbackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<WebCore::ScriptedAnimationController::cancelCallback(int)::$_0>((uint64_t)this + 8, (int)a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        *(_DWORD *)(v6 + 24) += 2;
        result = WebCore::InspectorInstrumentation::didCancelAnimationFrame((WebCore::InspectorInstrumentation *)v6, a2);
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            return (WebCore::InspectorInstrumentation *)WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
    }
  }
  return result;
}

BOOL WTF::Vector<WebCore::ScriptedAnimationController::CallbackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<WebCore::ScriptedAnimationController::cancelCallback(int)::$_0>(uint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v2)
    return 0;
  v4 = **(_QWORD **)a1;
  if (*(_DWORD *)(v4 + 20) != a2)
  {
    v5 = 0;
    v7 = (uint64_t *)(*(_QWORD *)a1 + 24);
    while ((char *)(v2 - 1) != v5)
    {
      v8 = *v7;
      v7 += 3;
      v4 = v8;
      ++v5;
      if (*(_DWORD *)(v8 + 20) == a2)
      {
        v6 = (unint64_t)v5 < v2;
        goto LABEL_8;
      }
    }
    return 0;
  }
  v5 = 0;
  v6 = 1;
LABEL_8:
  *(_BYTE *)(v4 + 24) = 1;
  WTF::Vector<WebCore::ScriptedAnimationController::CallbackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(a1, v5);
  return v6;
}

WebCore::InspectorInstrumentation *WebCore::InspectorInstrumentation::didCancelAnimationFrame(WebCore::InspectorInstrumentation *this, WebCore::Document *a2)
{
  WebCore::InspectorInstrumentation *v4;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v4 = this;
    this = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(this, a2);
    if (this)
      return (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::didCancelAnimationFrameImpl((uint64_t)this, a2, (uint64_t)v4);
  }
  return this;
}

void WebCore::SecurityContext::setSecurityOriginPolicy(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)a1, a2);
  if (v5)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)a1, v4);
    LOBYTE(v23) = 0;
    DWORD2(v24) = -1;
    v16 = *(unsigned int *)(v15 + 32);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(__int128 *, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_4[v16])(&v21, &v23, v15 + 8);
      DWORD2(v24) = v16;
    }
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  v6 = *(unsigned __int8 *)(a1 + 82);
  *(_BYTE *)(a1 + 82) = 1;
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    WTF::RefCounted<WebCore::SecurityOriginPolicy>::deref(v8, v4);
  *(_BYTE *)(a1 + 88) = 0;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)a1, v4);
  if (v10)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)a1, v9);
    LOBYTE(v21) = 0;
    v11 = -1;
    DWORD2(v22) = -1;
    v18 = *(unsigned int *)(v17 + 32);
    if ((_DWORD)v18 != -1)
    {
      ((void (*)(char **, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_4[v18])(&v20, &v21, v17 + 8);
      DWORD2(v22) = v18;
      v11 = v18;
    }
  }
  else
  {
    v11 = 0;
    v21 = 0u;
    v22 = 0u;
  }
  if (!v6)
    goto LABEL_21;
  v13 = v11 == DWORD2(v24) && v11 != -1;
  if (DWORD2(v24) != -1 && v13)
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v11])(&v20, &v23, &v21) & 1) != 0)goto LABEL_22;
LABEL_21:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    goto LABEL_22;
  }
  v14 = v11 == -1;
  if (DWORD2(v24) != -1)
    v14 = v13;
  if (!v14)
    goto LABEL_21;
LABEL_22:
  if (DWORD2(v22) != -1)
    ((void (*)(char **, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[DWORD2(v22)])(&v20, &v21);
  if (DWORD2(v24) != -1)
    ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[DWORD2(v24)])(&v21, &v23);
}

void WebCore::SecurityContext::protectedSecurityOrigin(WebCore::SecurityContext *this@<X0>, WTF::StringImpl *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;

  WebCore::SecurityContext::securityOrigin(this, a2);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *a3 = v4;
}

uint64_t **WTF::Ref<WebCore::SecurityOriginPolicy,WTF::RawPtrTraits<WebCore::SecurityOriginPolicy>,WTF::DefaultRefDerefTraits<WebCore::SecurityOriginPolicy>>::~Ref(uint64_t **result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t **v3;
  void *v4;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    v3 = result;
    if (*(_DWORD *)v2 == 1)
    {
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v2 + 1, a2);
      WTF::fastFree((WTF *)v2, v4);
    }
    else
    {
      --*(_DWORD *)v2;
    }
    return v3;
  }
  return result;
}

uint64_t WebCore::SecurityContext::isSupportedSandboxPolicy(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3;
  const char **v4;
  const char *v5;
  size_t v6;
  unint64_t v7;
  int v8;
  int v9;
  const char **v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t result;

  v3 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      v4 = (const char **)&WebCore::SecurityContext::isSupportedSandboxPolicy(WTF::StringView)::supportedPolicies;
      while (1)
      {
        v5 = *v4;
        v6 = *v4 ? strlen(*v4) : 0;
        if (v6 == v3
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *(unsigned __int8 *)v5))
        {
          break;
        }
LABEL_12:
        v4 += 2;
        if (v4 == (const char **)off_1E33A77E0)
          return 0;
      }
      v7 = 0;
      while (v3 - 1 != v7)
      {
        v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v7 + 1]);
        v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[++v7]);
        if (v8 != v9)
        {
          if (v7 >= v3)
            return 1;
          goto LABEL_12;
        }
      }
      return 1;
    }
  }
  else if ((_DWORD)a2)
  {
    v10 = (const char **)&WebCore::SecurityContext::isSupportedSandboxPolicy(WTF::StringView)::supportedPolicies;
    while (1)
    {
      v11 = *v10;
      v12 = *v10 ? strlen(*v10) : 0;
      if (v12 == v3
        && (*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v11))
      {
        v13 = 1;
        do
        {
          v14 = v13;
          if (v3 == v13)
            break;
          v15 = *(unsigned __int16 *)&a1[2 * v13] | (32 * (*(unsigned __int16 *)&a1[2 * v13] - 65 < 0x1A));
          ++v13;
        }
        while (v15 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[v14]));
        if (v14 >= v3)
          break;
      }
      result = 0;
      v10 += 2;
      if (v10 == (const char **)off_1E33A77E0)
        return result;
    }
    return 1;
  }
  return 0;
}

uint64_t WebCore::SecurityContext::policyContainer@<X0>(WebCore::SecurityContext *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t result;

  WebCore::ContentSecurityPolicy::responseHeaders(*((_QWORD *)this + 2), a2, a3);
  *(_WORD *)(a3 + 24) = *((_WORD *)this + 12);
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a3 + 32) = v5;
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a3 + 40) = v6;
  v7 = (**(uint64_t (***)(WebCore::SecurityContext *))this)(this);
  *(_WORD *)(a3 + 48) = *(_WORD *)v7;
  v8 = *(_DWORD **)(v7 + 8);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a3 + 56) = v8;
  v9 = *(_DWORD **)(v7 + 16);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(a3 + 64) = v9;
  result = (*(uint64_t (**)(WebCore::SecurityContext *))(*(_QWORD *)this + 8))(this);
  *(_BYTE *)(a3 + 72) = result;
  return result;
}

uint64_t WebCore::SecurityContext::inheritPolicyContainerFrom(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t result;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  char v25;
  WTF::StringImpl *v26[5];
  WebCore::ContentSecurityPolicy *v27;

  if (!WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)this))
  {
    v26[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v26);
    v19 = WTF::fastMalloc((WTF *)0xF0);
    v27 = (WebCore::ContentSecurityPolicy *)WebCore::ContentSecurityPolicy::ContentSecurityPolicy(v19, v26, 0, 0);
    WebCore::SecurityContext::setContentSecurityPolicy((uint64_t)this, (WTF::StringImpl *)&v27);
    std::unique_ptr<WebCore::ContentSecurityPolicy>::~unique_ptr[abi:sn180100](&v27, v20);
    v22 = v26[0];
    v26[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  v4 = WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)this);
  if (v4)
  {
    v6 = (unsigned int *)v4;
    do
      v7 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v7 + 1, (unsigned int *)v4));
    if (!*(_BYTE *)(v4 + 183))
    {
      v8 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v8)
      {
        v23 = *a2;
        v24 = 16 * v8;
        do
        {
          v25 = *((_BYTE *)v23 + 8);
          v26[0] = 0;
          WebCore::ContentSecurityPolicy::didReceiveHeader((uint64_t)v6, v23, v25, 3, (uint64_t *)v26, 0);
          if (v26[0])
          {
            if (*(_DWORD *)v26[0] == 2)
              WTF::StringImpl::destroy(v26[0], v5);
            else
              *(_DWORD *)v26[0] -= 2;
          }
          v23 = (WTF::StringImpl *)((char *)v23 + 16);
          v24 -= 16;
        }
        while (v24);
      }
    }
    if (!atomic_load(v6))
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    do
      v10 = __ldaxr(v6);
    while (__stlxr(v10 - 1, v6));
  }
  else
  {
    WebCore::ContentSecurityPolicy::inheritHeadersFrom(0, a2);
  }
  *((_WORD *)this + 24) = *((_WORD *)a2 + 24);
  v11 = a2[7];
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = this[7];
  this[7] = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = a2[8];
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = this[8];
  this[8] = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v5);
    else
      *(_DWORD *)v14 -= 2;
  }
  *((_WORD *)this + 12) = *((_WORD *)a2 + 12);
  v15 = a2[4];
  if (v15)
    *(_DWORD *)v15 += 2;
  v16 = this[4];
  this[4] = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v5);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = a2[5];
  if (v17)
    *(_DWORD *)v17 += 2;
  result = (uint64_t)this[5];
  this[5] = v17;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  if (*((_BYTE *)a2 + 72))
    *((_BYTE *)this + 80) = *((_BYTE *)a2 + 72);
  return result;
}

uint64_t WebCore::ScriptElement::fetchPriorityHint(WebCore::ScriptElement *this)
{
  return 2;
}

uint64_t WebCore::ScriptElement::isScriptPreventedByAttributes(WebCore::ScriptElement *this)
{
  return 0;
}

uint64_t WebCore::ScriptExecutionContext::notificationClient(WebCore::ScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::ScriptRunner::ptrCount(WebCore::ScriptRunner *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t WebCore::ScriptRunner::ptrCountWithoutThreadCheck(WebCore::ScriptRunner *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t WebCore::ScriptRunner::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t WebCore::ScriptRunner::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 8);
  if (v1)
  {
    *(_DWORD *)(this + 8) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::ScriptableDocumentParser::isExecutingScript(WebCore::ScriptableDocumentParser *this)
{
  return 0;
}

uint64_t WebCore::ScriptableDocumentParser::hasScriptsWaitingForStylesheets(WebCore::ScriptableDocumentParser *this)
{
  return 0;
}

_DWORD *WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(_DWORD *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[11];

  if (result != a2)
  {
    v8[9] = v2;
    v8[10] = v3;
    v5 = result;
    do
    {
      v6 = *((_QWORD *)v5 + 1);
      if (v6)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v8[0] = v6;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v8))*(_QWORD *)(v6 + 16) &= ~0x4000000000000uLL;
        v7 = *((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
        }
      }
      else
      {
        *((_QWORD *)v5 + 1) = 0;
      }
      result = *(_DWORD **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (result[4] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[4];
      }
      v5 += 4;
    }
    while (v5 != a2);
  }
  return result;
}

void WebCore::CurrentScriptIncrementer::~CurrentScriptIncrementer(WebCore::CurrentScriptIncrementer *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;

  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(unsigned int *)(v2 + 1620);
  if (!(_DWORD)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A3AF2CLL);
  }
  v5 = v3 - 1;
  v6 = *(_QWORD *)(v2 + 1608);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  *(_QWORD *)(v6 + 8 * v5) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  *(_DWORD *)(v2 + 1620) = v5;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v11 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v11)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
      v12 = *(WTF **)(v8 + 16);
      if (v12)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v12, a2);
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::deallocateTable(_DWORD **a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (_DWORD *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (v5[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
          else
            --v5[4];
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t std::default_delete<WebCore::ScriptExecutionContext::PendingException>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      v7 = (WTF *)MEMORY[0x19AEA6024]();
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WebCore::ScriptExecutionContextDispatcher::~ScriptExecutionContextDispatcher(WebCore::ScriptExecutionContextDispatcher *this)
{
  WTF *v1;
  void *v2;

  WTF::FunctionDispatcher::~FunctionDispatcher(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::ScriptExecutionContextDispatcher::dispatch(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 48) == 1)
    return WTF::callOnMainThread();
  v3 = *(_OWORD *)(a1 + 32);
  v12[0] = *(_OWORD *)(a1 + 16);
  v12[1] = v3;
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E335A090;
  v5[1] = v4;
  v10 = v5;
  v11 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v12);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 336))(v8, &v10);
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::ScriptExecutionContextDispatcher::isCurrent(WebCore::ScriptExecutionContextDispatcher *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 12);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2)
    v2 = WTF::Thread::initializeCurrentTLS(0);
  return v1 == *(_DWORD *)(v2 + 48);
}

uint64_t WebCore::ScriptExecutionContextDispatcher::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::ScriptExecutionContextDispatcher::deref(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  void *v5;

  v1 = this + 2;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 2);
    WTF::FunctionDispatcher::~FunctionDispatcher((WTF::FunctionDispatcher *)this);
    return (unsigned int *)WTF::fastFree(v4, v5);
  }
  return this;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>>::deallocateTable(WebCore::PendingScript **a1, void *a2)
{
  uint64_t v3;
  WebCore::PendingScript **v4;
  WebCore::PendingScript *v5;
  WTF *v6;
  void *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebCore::PendingScript *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*((_DWORD *)v5 + 4) == 1)
          {
            WebCore::PendingScript::~PendingScript(v5, a2);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*((_DWORD *)v5 + 4);
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::Vector<WebCore::ScopedEventQueue::ScopedEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ScopedEventQueue::ScopedEvent>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)WTF::Vector<WebCore::ScopedEventQueue::ScopedEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *v3;
  *v3 = 0;
  *v6 = v7;
  v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

_DWORD *WTF::Vector<WebCore::ScopedEventQueue::ScopedEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (_QWORD *)((char *)v5 + 16 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195A3B47CLL);
      }
      v18 = (_QWORD *)((char *)v5 + 16 * *(unsigned int *)(a1 + 12));
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ScopedEventQueue::ScopedEvent>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v10 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195A3B484);
      }
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ScopedEventQueue::ScopedEvent>::move(v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (_DWORD *)((char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4));
  }
  return (_DWORD *)v3;
}

_DWORD *WTF::VectorMover<false,WebCore::ScopedEventQueue::ScopedEvent>::move(_DWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[11];

  if (result != (_DWORD *)a2)
  {
    v12[9] = v3;
    v12[10] = v4;
    v7 = result;
    do
    {
      v8 = (_DWORD *)*v7;
      *v7 = 0;
      *a3 = v8;
      v9 = v7[1];
      v7[1] = 0;
      a3[1] = v9;
      v10 = v7[1];
      if (v10)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v12[0] = v10;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v12))*(_QWORD *)(v10 + 16) &= ~0x4000000000000uLL;
        v11 = v7[1];
        v7[1] = 0;
        if (v11)
        {
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11);
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
        }
      }
      else
      {
        v7[1] = 0;
      }
      result = (_DWORD *)*v7;
      *v7 = 0;
      if (result)
      {
        if (result[4] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[4];
      }
      v7 += 2;
      a3 += 2;
    }
    while (v7 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptElement::prepareScript(WTF::TextPosition const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E33A7860;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptElement::prepareScript(WTF::TextPosition const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33A7860;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptElement::prepareScript(WTF::TextPosition const&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptElement::requestClassicScript(WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E33A7888;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptElement::requestClassicScript(WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33A7888;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptElement::requestClassicScript(WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptElement::requestImportMap(WebCore::LocalFrame &,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E33A78B0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptElement::requestImportMap(WebCore::LocalFrame &,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33A78B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptElement::requestImportMap(WebCore::LocalFrame &,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

WebCore::ActiveDOMObject *WebCore::PublicURLManager::deref(WebCore::ActiveDOMObject *this, void *a2)
{
  WTF *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
    return (WebCore::ActiveDOMObject *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

void WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::processMessageWithMessagePortsSoon(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ScriptExecutionContext&>::call(int a1, WebCore::EmptyScriptExecutionContext *this)
{
  unint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  WTF *v37;
  void *v38;

  v3 = *((char *)this + 274);
  if (v3 <= 2)
    *(_DWORD *)((char *)this + qword_1969F07C8[v3]) += dword_1969F07E0[v3];
  *((_BYTE *)this + 279) = 0;
  v4 = (WTF *)*((_QWORD *)this + 23);
  v5 = *((unsigned int *)this + 49);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  v6 = *((_QWORD *)this + 14);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 12);
    if ((_DWORD)v7)
    {
      if (v7 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v8 = WTF::fastMalloc((WTF *)(8 * v7));
      v10 = (WTF *)v8;
      v11 = *((_QWORD *)this + 14);
      if (v11 && *(_DWORD *)(v11 - 12))
      {
        v12 = *(unsigned int *)(v11 - 4);
        if ((_DWORD)v12)
        {
          v13 = 8 * v12;
          v14 = (uint64_t *)*((_QWORD *)this + 14);
          while ((unint64_t)(*v14 + 1) <= 1)
          {
            ++v14;
            v13 -= 8;
            if (!v13)
              goto LABEL_12;
          }
        }
        else
        {
          v14 = (uint64_t *)*((_QWORD *)this + 14);
        }
        v22 = (uint64_t *)(v11 + 8 * v12);
        if (v14 != v22)
        {
          v23 = 0;
          v24 = *v14;
LABEL_29:
          *(_QWORD *)(v8 + 8 * v23++) = v24;
          while (++v14 != v22)
          {
            v24 = *v14;
            if ((unint64_t)(*v14 + 1) > 1)
            {
              if (v14 != v22)
                goto LABEL_29;
              break;
            }
          }
          if (v23)
          {
            v25 = *((_QWORD *)this + 14);
            if (v25)
            {
              v26 = (uint64_t *)(v8 + 8 * v23);
              v27 = (uint64_t *)v8;
LABEL_36:
              v28 = *v27;
              v29 = *(_DWORD *)(v25 - 8);
              v30 = ~(*v27 << 32) + *v27;
              v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
              v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
              v33 = v29 & (((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~((_DWORD)v32 << 27)));
              v34 = *(_QWORD *)(v25 + 8 * v33);
              if (v34 != *v27)
              {
                v35 = 1;
                do
                {
                  if (!v34)
                    goto LABEL_39;
                  v33 = (v33 + v35) & v29;
                  v34 = *(_QWORD *)(v25 + 8 * v33);
                  ++v35;
                }
                while (v34 != v28);
              }
              if (*(_BYTE *)(v28 + 56))
                WebCore::MessagePort::dispatchMessages((unsigned int *)v28, v9);
LABEL_39:
              while (++v27 != v26)
              {
                v25 = *((_QWORD *)this + 14);
                if (v25)
                  goto LABEL_36;
              }
            }
          }
        }
      }
LABEL_12:
      WTF::fastFree(v10, v9);
    }
  }
  if ((_DWORD)v5)
  {
    v15 = 8 * v5;
    v16 = v15;
    v17 = v4;
    do
    {
      v18 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      v17 = (WTF *)((char *)v17 + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v16 -= 8;
    }
    while (v16);
    v19 = v4;
    do
    {
      v20 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v19 = (WTF *)((char *)v19 + 8);
      v15 -= 8;
    }
    while (v15);
  }
  if (v4)
    WTF::fastFree(v4, this);
  v21 = *((unsigned __int8 *)this + 274);
  if (*((_BYTE *)this + 274))
  {
    if (v21 == 1)
    {
      v36 = *((_DWORD *)this + 78) - 1;
      if (*((_DWORD *)this + 78) == 1)
      {
        (*(void (**)(WebCore::EmptyScriptExecutionContext *))(*(_QWORD *)this + 40))(this);
        return;
      }
    }
    else
    {
      if (v21 != 2)
        return;
      v36 = *((_DWORD *)this + 78) - 1;
      if (*((_DWORD *)this + 78) == 1)
      {
        WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext(this);
        WTF::fastFree(v37, v38);
        return;
      }
    }
    *((_DWORD *)this + 78) = v36;
    return;
  }
  if (*((_DWORD *)this - 42) == 2)
  {
    if ((*((_WORD *)this - 81) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::EmptyScriptExecutionContext *)((char *)this - 192), this);
  }
  else
  {
    *((_DWORD *)this - 42) -= 2;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::suspendActiveDOMObjects(WebCore::ReasonForSuspension)::$_0,WebCore::ScriptExecutionContext::ShouldContinue,WebCore::ActiveDOMObject &>::call(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(unsigned __int8 *)(a1 + 8));
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::resumeActiveDOMObjects(WebCore::ReasonForSuspension)::$_0,WebCore::ScriptExecutionContext::ShouldContinue,WebCore::ActiveDOMObject &>::call(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::stopActiveDOMObjects(void)::$_0,WebCore::ScriptExecutionContext::ShouldContinue,WebCore::ActiveDOMObject &>::call(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  return 1;
}

uint64_t WTF::Mapper<WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::NativePromiseRequest&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *j;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (*a2)
  {
    v2 = *(unsigned int *)(*a2 - 12);
    if ((_DWORD)v2)
    {
      v13 = result;
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        result = WTF::fastMalloc((WTF *)(8 * v2));
        *(_DWORD *)(v13 + 8) = v2;
        *(_QWORD *)v13 = result;
        v3 = (_QWORD *)*a2;
        if (*a2 && *((_DWORD *)v3 - 3))
        {
          v4 = *((unsigned int *)v3 - 1);
          if ((_DWORD)v4)
          {
            v5 = 8 * v4;
            for (i = (_QWORD *)*a2; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v5 -= 8;
              if (!v5)
                return result;
            }
          }
          else
          {
            i = (_QWORD *)*a2;
          }
          v7 = &v3[v4];
          if (i != v7)
          {
            v8 = *i;
LABEL_15:
            v12 = i;
            result = WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::NativePromiseRequest&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1}::operator()(&v14, *(uint64_t **)(v8 + 8));
            v9 = *(unsigned int *)(v13 + 12);
            *(_QWORD *)(*(_QWORD *)v13 + 8 * v9) = v14;
            *(_DWORD *)(v13 + 12) = v9 + 1;
            for (j = v12 + 1; j != v7; ++j)
            {
              v8 = *j;
              if ((unint64_t)(*j + 1) > 1)
              {
                i = j;
                if (j == v7)
                  return result;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::NativePromiseRequest&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1}::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    result = *a2;
    if (*a2)
      goto LABEL_14;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v6 = (unsigned int *)*a2;
    *a2 = result;
    if (!v6)
      goto LABEL_14;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
    result = *a2;
    if (*a2)
    {
LABEL_14:
      do
        v9 = __ldaxr((unsigned int *)result);
      while (__stlxr(v9 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::stopActiveDOMObjects(void)::$_1,void,WTF::NativePromiseRequest &>::call(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  v2 = *(unsigned int **)(a2 + 8);
  if (v2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    v3 = v2 + 2;
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v2 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::postTaskToResponsibleDocument(WTF::Function<void ()(WebCore::Document &)> &&)::$_0,void,WebCore::ScriptExecutionContext&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33A79C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::postTaskToResponsibleDocument(WTF::Function<void ()(WebCore::Document &)> &&)::$_0,void,WebCore::ScriptExecutionContext&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A79C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::postTaskToResponsibleDocument(WTF::Function<void ()(WebCore::Document &)> &&)::$_0,void,WebCore::ScriptExecutionContext&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!*(_BYTE *)(a2 + 274))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2 - 192);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = (uint64_t *)*a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = (uint64_t *)*v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = (uint64_t *)*a2;
      v17 = v9;
    }
    *a2 = 0;
    result = (uint64_t *)*v17;
    *v17 = (uint64_t)v10;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
      else
        --*((_DWORD *)result + 4);
    }
    v19 = *v4;
    if (*v4)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v24 = *v4;
    if (*v4)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_29;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_32:
        result = WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::rehash(v4, v28, v17);
        v17 = result;
        v24 = *v4;
        if (*v4)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_36;
      }
LABEL_29:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_32;
    }
LABEL_36:
    v23 = v24 + 8 * v27;
    v22 = 1;
    goto LABEL_37;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v21 = 0;
  else
    v21 = *(unsigned int *)(v6 - 4);
  v22 = 0;
  v23 = v6 + 8 * v21;
LABEL_37:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 8 * v11);
      v14 = (_DWORD *)*v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = (_DWORD *)*v13;
          *v13 = 0;
          *v24 = v25;
          v26 = (_DWORD *)*v13;
          *v13 = 0;
          if (v26)
          {
            if (v26[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
            else
              --v26[4];
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_DWORD *WTF::RefCounted<WebCore::PendingScript>::deref(_DWORD *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*result == 1)
  {
    WebCore::PendingScript::~PendingScript((WebCore::PendingScript *)(result - 4), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  WebCore::PendingScript **v10;
  WebCore::PendingScript *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::PendingScript **v21;
  WebCore::PendingScript *v22;
  WebCore::PendingScript *v23;
  WTF *v24;
  void *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WebCore::PendingScript **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (WebCore::PendingScript *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (WebCore::PendingScript **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*((_DWORD *)v23 + 4) == 1)
            {
              WebCore::PendingScript::~PendingScript(v23, v8);
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*((_DWORD *)v23 + 4);
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((void *)v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 8 * (_QWORD)a2);
    v6 = 8 * v4 - 8 * (_QWORD)a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (result[4] == 1)
        {
          WebCore::PendingScript::~PendingScript((WebCore::PendingScript *)result, a2);
          result = (unsigned int *)WTF::fastFree(v7, v8);
        }
        else
        {
          --result[4];
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

_DWORD *WTF::Vector<WTF::RefPtr<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(_DWORD *result, void *a2)
{
  int v2;
  _DWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (int)a2;
  v3 = result;
  v4 = result[3];
  if ((void *)v4 != a2)
  {
    v5 = (uint64_t *)(*(_QWORD *)result + 8 * (_QWORD)a2);
    v6 = 8 * v4 - 8 * (_QWORD)a2;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        result = WTF::RefCounted<WebCore::PendingScript>::deref((_DWORD *)(v7 + 16), a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

_DWORD *WTF::VectorDestructor<true,WebCore::ScriptedAnimationController::CallbackData>::destruct(_DWORD *result, _DWORD *a2)
{
  _DWORD *v3;
  WTF *v4;
  WebCore::UserGestureToken *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  WTF *v12;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
        {
          v6 = *((_QWORD *)v4 + 1);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
              --*(_QWORD *)(v7 + 24);
            *((_QWORD *)v4 + 1) = 0;
            do
            {
              v8 = __ldaxr((unsigned int *)v6);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, (unsigned int *)v6));
            if (!v9)
            {
              atomic_store(1u, (unsigned int *)v6);
              v12 = v4;
              WTF::fastFree((WTF *)v6, a2);
              v4 = v12;
            }
          }
          else
          {
            *((_QWORD *)v4 + 1) = 0;
          }
          WTF::fastFree(v4, a2);
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
      v5 = (WebCore::UserGestureToken *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          WebCore::UserGestureToken::~UserGestureToken(v5, a2);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
      result = *(_DWORD **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (result[4] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[4];
      }
      v3 += 6;
    }
    while (v3 != a2);
  }
  return result;
}

_DWORD *WTF::Vector<WebCore::ScriptedAnimationController::CallbackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(_DWORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _DWORD *v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * result[3] > a3)
  {
    WTF::Vector<WebCore::ScriptedAnimationController::CallbackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return (_DWORD *)(*(_QWORD *)v4 + v3 - (_QWORD)v5);
  }
  v6 = result[2];
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return (_DWORD *)v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = (_QWORD *)((char *)v5 + 24 * result[3]);
    v10 = 24 * v8;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * v8));
    v4[2] = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,WebCore::ScriptedAnimationController::CallbackData>::move(v5, v9, v11);
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        v4[2] = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return (_DWORD *)v3;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WTF::Vector<WebCore::ScriptedAnimationController::CallbackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(_DWORD *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  WTF *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  void *v10;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x195A3C7F0);
    }
    v5 = result;
    v6 = *(WTF **)result;
    v7 = (_QWORD *)(*(_QWORD *)result + 24 * result[3]);
    v8 = 24 * v4;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * v4));
    v5[2] = (v8 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v5 = v9;
    result = WTF::VectorMover<false,WebCore::ScriptedAnimationController::CallbackData>::move(v6, v7, v9);
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        v5[2] = 0;
      }
      return (_DWORD *)WTF::fastFree(v6, v10);
    }
  }
  return result;
}

_DWORD *WTF::VectorMover<false,WebCore::ScriptedAnimationController::CallbackData>::move(_DWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WebCore::UserGestureToken *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  WTF *v17;

  if (result != (_DWORD *)a2)
  {
    v5 = result;
    do
    {
      v6 = (_DWORD *)*v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      v8 = v5[2];
      v5[2] = 0;
      a3[2] = v8;
      v9 = (WTF *)v5[2];
      v5[2] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          v11 = *((_QWORD *)v9 + 1);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
              --*(_QWORD *)(v12 + 24);
            *((_QWORD *)v9 + 1) = 0;
            do
            {
              v13 = __ldaxr((unsigned int *)v11);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, (unsigned int *)v11));
            if (!v14)
            {
              atomic_store(1u, (unsigned int *)v11);
              v17 = v9;
              WTF::fastFree((WTF *)v11, a2);
              v9 = v17;
            }
          }
          else
          {
            *((_QWORD *)v9 + 1) = 0;
          }
          WTF::fastFree(v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v10 = (WebCore::UserGestureToken *)v5[1];
      v5[1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::UserGestureToken::~UserGestureToken(v10, a2);
          WTF::fastFree(v15, v16);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      result = (_DWORD *)*v5;
      *v5 = 0;
      if (result)
      {
        if (result[4] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[4];
      }
      a3 += 3;
      v5 += 3;
    }
    while (v5 != a2);
  }
  return result;
}

char *WTF::Vector<WebCore::ScriptedAnimationController::CallbackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, void *a2)
{
  char *v3;
  char *result;

  v3 = (char *)(*(_QWORD *)a1 + 24 * (_QWORD)a2);
  WebCore::ScriptedAnimationController::CallbackData::~CallbackData((WebCore::ScriptedAnimationController::CallbackData *)v3, a2);
  result = WTF::VectorTypeOperations<WebCore::ScriptedAnimationController::CallbackData>::moveOverlapping(v3 + 24, (char *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12)), v3);
  --*(_DWORD *)(a1 + 12);
  return result;
}

char *WTF::VectorTypeOperations<WebCore::ScriptedAnimationController::CallbackData>::moveOverlapping(char *result, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  BOOL v9;

  v3 = result;
  if (result > a3)
    return (char *)WTF::VectorMover<false,WebCore::ScriptedAnimationController::CallbackData>::move(result, a2, a3);
  if (a2 != result)
  {
    result = a2 - 24;
    v4 = &a3[24 * ((a2 - v3) / 24) - 8];
    do
    {
      v5 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *((_QWORD *)v4 - 2) = v5;
      v6 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)v4 - 1) = v6;
      v7 = *((_QWORD *)result + 2);
      *((_QWORD *)result + 2) = 0;
      *(_QWORD *)v4 = v7;
      v4 -= 24;
      WebCore::ScriptedAnimationController::CallbackData::~CallbackData((WebCore::ScriptedAnimationController::CallbackData *)result, a2);
      v9 = v8 == v3;
      result = v8 - 24;
    }
    while (!v9);
  }
  return result;
}

uint64_t WebCore::SecurityPolicyViolationEventInit::SecurityPolicyViolationEventInit(uint64_t result, __int16 *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, char a11, __int16 a12, int a13, int a14)
{
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v14 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v14;
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v15;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 16) = v16;
  v17 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 24) = v17;
  v18 = *a6;
  *a6 = 0;
  *(_QWORD *)(result + 32) = v18;
  v19 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 40) = v19;
  v20 = *a8;
  *a8 = 0;
  *(_QWORD *)(result + 48) = v20;
  v21 = *a9;
  *a9 = 0;
  *(_QWORD *)(result + 56) = v21;
  v22 = *a10;
  *a10 = 0;
  *(_QWORD *)(result + 64) = v22;
  *(_BYTE *)(result + 72) = a11;
  *(_WORD *)(result + 74) = a12;
  *(_DWORD *)(result + 76) = a13;
  *(_DWORD *)(result + 80) = a14;
  return result;
}

{
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v14 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v14;
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v15;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 16) = v16;
  v17 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 24) = v17;
  v18 = *a6;
  *a6 = 0;
  *(_QWORD *)(result + 32) = v18;
  v19 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 40) = v19;
  v20 = *a8;
  *a8 = 0;
  *(_QWORD *)(result + 48) = v20;
  v21 = *a9;
  *a9 = 0;
  *(_QWORD *)(result + 56) = v21;
  v22 = *a10;
  *a10 = 0;
  *(_QWORD *)(result + 64) = v22;
  *(_BYTE *)(result + 72) = a11;
  *(_WORD *)(result + 74) = a12;
  *(_DWORD *)(result + 76) = a13;
  *(_DWORD *)(result + 80) = a14;
  return result;
}

void WebCore::SelectorDataList::SelectorData::~SelectorData(WebCore::SelectorDataList::SelectorData *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;

  v1 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
    {
      atomic_store(1u, v1);
      v4 = v1;
      WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v4);
    }
  }
}

uint64_t WebCore::SelectorDataList::selectorMatches(WebCore::SelectorDataList *this, const WebCore::SelectorDataList::SelectorData *a2, WebCore::Element *a3, const WebCore::ContainerNode *a4, __n128 a5)
{
  uint64_t v5;
  WebCore::Element *v6;
  unint64_t matched;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  char v15[4];
  int v16;
  WTF::StringImpl *v17;
  char v18;
  char v19;
  WebCore::Element *v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[128];
  unsigned int v27;
  char v28;
  _BYTE v29[2];
  unsigned int v30;
  unsigned int *v31[2];
  char v32;
  WebCore::SelectorDataList *v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  uint64_t v37;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v29[0] = *(_BYTE *)(v5 + 3384) != 2;
  v29[1] = *(_BYTE *)(v5 + 3358) & 1;
  v15[0] = 3;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v22 = 0;
  v23 = 0;
  v24 = (WTF *)v26;
  v25 = 8;
  v27 = 0;
  v28 = 0;
  if ((*((_WORD *)a3 + 14) & 0xF000) == 0x9000)
    v6 = 0;
  else
    v6 = a3;
  v20 = v6;
  v21 = 0;
  v31[0] = (unsigned int *)this;
  v31[1] = (unsigned int *)a2;
  v32 = 0;
  v33 = this;
  v34 = 0;
  v36 = 0;
  a5.n128_u64[0] = 16777473;
  v37 = 16777473;
  v30 = 0;
  matched = WebCore::SelectorChecker::matchRecursively((WebCore::SelectorChecker *)v29, v15, v31, &v30, a5);
  v9 = 0;
  if (!(_DWORD)matched)
  {
    if (v16)
    {
      v9 = (v30 >> v16) & 1;
    }
    else if (v30)
    {
      if ((v30 & 0x1FFFE) != 0 && !v15[0])
        v27 = v30 & 0x1FFFE;
      v9 = HIDWORD(matched) == 1 || v15[0] == 2;
    }
    else
    {
      v9 = 1;
    }
  }
  if (v36)
  {
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = v24;
  if (v26 != (_BYTE *)v24 && v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v11, v8);
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v9;
}

WebCore::Element *WebCore::SelectorDataList::closest(const WebCore::CSSSelector ***this, WebCore::Element *a2, __n128 a3)
{
  WebCore::Element *v3;
  uint64_t v4;
  WebCore::Element *v6;
  const WebCore::CSSSelector **v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Element *v10;
  void *v11;
  char v12;
  WTF *v13;
  WTF::StringImpl *v14;
  char v16[4];
  int v17;
  WTF::StringImpl *v18;
  char v19;
  char v20;
  WebCore::Element *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _DWORD v27[33];
  char v28;
  _BYTE v29[2];

  v3 = a2;
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4)
  {
    v6 = a2;
    while (!v4)
    {
LABEL_14:
      v6 = (WebCore::Element *)*((_QWORD *)v6 + 4);
      if (!v6)
        return v6;
      if ((*((_WORD *)v6 + 14) & 8) == 0)
        return 0;
      v4 = *((unsigned int *)this + 3);
    }
    v7 = *this;
    v8 = 32 * v4;
    while (1)
    {
      v9 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
      v29[0] = *(_BYTE *)(v9 + 3384) != 2;
      v29[1] = *(_BYTE *)(v9 + 3358) & 1;
      v16[0] = 3;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = (WTF *)v27;
      v26 = 8;
      v27[32] = 0;
      v28 = 0;
      if ((*((_WORD *)v3 + 14) & 0xF000) == 0x9000)
        v10 = 0;
      else
        v10 = v3;
      v21 = v10;
      v12 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v29, *v7, v6, (WebCore::SelectorChecker::CheckingContext *)v16, a3);
      v13 = v25;
      if (v27 != (_DWORD *)v25 && v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v13, v11);
      }
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      if ((v12 & 1) != 0)
        break;
      v7 += 4;
      v8 -= 32;
      if (!v8)
        goto LABEL_14;
    }
  }
  else
  {
    do
      v3 = (WebCore::Element *)*((_QWORD *)v3 + 4);
    while (v3 && (*((_WORD *)v3 + 14) & 8) != 0);
    return 0;
  }
  return v6;
}

void WebCore::SelectorDataList::execute<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const WebCore::CSSSelector *v4;
  __n128 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  WebCore *v10;
  WebCore *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  __int16 v31;
  uint64_t *v32;
  int v33;
  void *v34;
  WebCore::ContainerNode **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  BOOL v83;
  BOOL v84;
  WebCore::ContainerNode **v85;
  const WebCore::CSSSelector *v86;
  const WebCore::ContainerNode *v87;
  const WebCore::CSSSelector *v88;
  const WTF::AtomString *v89;
  const WebCore::ContainerNode *v90;
  __n128 v91;
  WebCore::Node *v92;
  __int16 v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  const WebCore::CSSSelector **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  int v111;
  WTF *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  BOOL v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  WebCore *i;
  const WebCore::CSSSelector **v129;
  WebCore *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  int v134;
  WTF *v135;
  WTF::StringImpl *v136;
  unint64_t v137;
  WebCore **v138;
  WebCore *v139;
  BOOL v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  void *v145;
  void *v146;
  uint64_t *AllElementsById;
  const WebCore::ContainerNode *v148;
  __n128 v149;
  unsigned int v150;
  int v151;
  int v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  WebCore *v161;
  BOOL v162;
  BOOL v163;
  uint64_t v164;
  WebCore *v165;
  BOOL v166;
  BOOL v167;
  uint64_t v168;
  _QWORD *v169;
  WTF *v170;
  uint64_t v172;
  uint64_t (**v173)(uint64_t);
  uint64_t v174;
  uint64_t (*v175)(uint64_t);
  uint64_t v177;
  BOOL v178;
  BOOL v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *__src;
  BOOL v183;
  char v184;
  WebCore::Node *v185;
  WTF::StringImpl *v186;
  char v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  __int16 v191;
  uint64_t v192;
  WTF *v193;
  uint64_t v194;
  _BYTE v195[128];
  int v196;
  char v197;
  uint64_t v198;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v198 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(v2 + 16);
  v7 = (uint64_t)v4;
  v8 = v3;
  v9 = (unsigned int *)v2;
  v10 = (WebCore *)v3;
  v11 = (WebCore *)v3;
  switch(v6)
  {
    case 0u:
    case 1u:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x195A3DEE4);
      }
      v32 = *(uint64_t **)v9;
      v33 = *(unsigned __int8 *)(*(_QWORD *)v9 + 8);
      if (*(_BYTE *)(*(_QWORD *)v9 + 8))
        goto LABEL_37;
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
      {
        WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)&v185, (WebCore *)*v32, (const WebCore::CSSSelector *)1);
        *((_BYTE *)v32 + 8) = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)&v185, (int **)v32 + 2);
        WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v185, v34);
        v33 = *((unsigned __int8 *)v32 + 8);
        v6 = v9[4];
LABEL_37:
        if (v33 != 1)
        {
          if (!v6)
          {
            v9[4] = 3;
            v10 = (WebCore *)v8;
            goto LABEL_40;
          }
          v9[4] = 4;
          goto LABEL_117;
        }
      }
      else
      {
        *((_BYTE *)v32 + 8) = 1;
      }
      if (v6)
      {
        v9[4] = 7;
        goto LABEL_290;
      }
      v9[4] = 6;
      v11 = (WebCore *)v8;
      goto LABEL_292;
    case 2u:
      v58 = v9[3];
      if (!(_DWORD)v58)
        goto LABEL_126;
      v59 = (_BYTE *)(*(_QWORD *)v9 + 8);
      v60 = 32 * v58;
      while (1)
      {
        v61 = *v59;
        if (!*v59)
        {
          WebCore::SelectorCompiler::compileSelector((uint64_t)v59, *((_QWORD *)v59 - 1));
          v61 = *v59;
        }
        if (v61 == 1)
          break;
        v59 += 32;
        v60 -= 32;
        if (!v60)
        {
LABEL_126:
          v9[4] = 5;
LABEL_127:
          v62 = 0;
          LOBYTE(v185) = 3;
          HIDWORD(v185) = 0;
          v186 = 0;
          v187 = 0;
          v188 = 0;
          v190 = 0;
          v191 = 0;
          v192 = 0;
          v193 = (WTF *)v195;
          v194 = 8;
          v196 = 0;
          v63 = *(_WORD *)(v8 + 28) & 0xF000;
          v197 = 0;
          if (v63 != 36864)
            v62 = v8;
          v189 = v62;
          v64 = *(_QWORD *)(v8 + 80);
          if (v64)
          {
            while ((*(_WORD *)(v64 + 28) & 8) == 0)
            {
              v64 = *(_QWORD *)(v64 + 56);
              if (!v64)
                goto LABEL_130;
            }
            do
            {
LABEL_427:
              v172 = v9[3];
              if ((_DWORD)v172)
              {
                v173 = (uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16);
                v174 = 32 * v172;
                while (1)
                {
                  v175 = *v173;
                  if (*((_BYTE *)v173 - 8) == 2
                     ? v175(v64)
                     : ((unsigned int (*)(uint64_t, WebCore::Node **))v175)(v64, &v185))
                  {
                    break;
                  }
                  v173 += 4;
                  v174 -= 32;
                  if (!v174)
                    goto LABEL_433;
                }
                v180 = *(unsigned int *)(v7 + 12);
                if ((_DWORD)v180 == *(_DWORD *)(v7 + 8))
                {
                  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, v64);
                }
                else
                {
                  v181 = *(_QWORD **)v7;
                  *(_DWORD *)(v64 + 24) += 2;
                  v181[v180] = v64;
                  *(_DWORD *)(v7 + 12) = v180 + 1;
                }
              }
LABEL_433:
              v177 = *(_QWORD *)(v64 + 80);
              if (!v177)
              {
                if (v64 == v8)
                  goto LABEL_422;
                while (1)
                {
                  v177 = *(_QWORD *)(v64 + 56);
                  if (v177)
                    break;
                  v64 = *(_QWORD *)(v64 + 32);
                  if (v64)
                    v179 = v64 == v8;
                  else
                    v179 = 1;
                  if (v179)
                    goto LABEL_422;
                }
              }
              v64 = v177;
            }
            while ((*(_WORD *)(v177 + 28) & 8) != 0);
            while (v177 != v8)
            {
              while (1)
              {
                v64 = *(_QWORD *)(v177 + 56);
                if (v64)
                  break;
                v177 = *(_QWORD *)(v177 + 32);
                if (v177)
                  v178 = v177 == v8;
                else
                  v178 = 1;
                if (v178)
                  goto LABEL_422;
              }
              v177 = *(_QWORD *)(v177 + 56);
              if ((*(_WORD *)(v64 + 28) & 8) != 0)
                goto LABEL_427;
            }
LABEL_422:
            v170 = v193;
            if (v195 != (_BYTE *)v193 && v193 != 0)
            {
              v193 = 0;
              LODWORD(v194) = 0;
              WTF::fastFree(v170, (void *)v3);
            }
          }
LABEL_130:
          v65 = v186;
          v186 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v65 -= 2;
          }
          return;
        }
      }
      v9[4] = 12;
LABEL_205:
      v99 = *(_QWORD *)(v8 + 80);
      if (v99)
      {
        while ((*(_WORD *)(v99 + 28) & 8) == 0)
        {
          v99 = *(_QWORD *)(v99 + 56);
          if (!v99)
            return;
        }
        do
        {
LABEL_224:
          v105 = v9[3];
          if ((_DWORD)v105)
          {
            v106 = *(const WebCore::CSSSelector ***)v9;
            v107 = 32 * v105;
            while (1)
            {
              v108 = *(_QWORD *)(*(_QWORD *)(v99 + 40) + 8);
              v183 = *(_BYTE *)(v108 + 3384) != 2;
              v184 = *(_BYTE *)(v108 + 3358) & 1;
              LOBYTE(v185) = 3;
              HIDWORD(v185) = 0;
              v186 = 0;
              v187 = 0;
              v188 = 0;
              v190 = 0;
              v191 = 0;
              v192 = 0;
              v193 = (WTF *)v195;
              v194 = 8;
              v196 = 0;
              v197 = 0;
              if ((*(_WORD *)(v8 + 28) & 0xF000) == 0x9000)
                v109 = 0;
              else
                v109 = v8;
              v189 = v109;
              v111 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v183, *v106, (const WebCore::Element *)v99, (WebCore::SelectorChecker::CheckingContext *)&v185, v5);
              v112 = v193;
              if (v195 != (_BYTE *)v193 && v193)
              {
                v193 = 0;
                LODWORD(v194) = 0;
                WTF::fastFree(v112, v110);
              }
              v113 = v186;
              v186 = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v110);
                else
                  *(_DWORD *)v113 -= 2;
              }
              if (v111)
                break;
              v106 += 4;
              v107 -= 32;
              if (!v107)
                goto LABEL_239;
            }
            v114 = *(unsigned int *)(v7 + 12);
            if ((_DWORD)v114 == *(_DWORD *)(v7 + 8))
            {
              WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, v99);
            }
            else
            {
              v115 = *(_QWORD **)v7;
              *(_DWORD *)(v99 + 24) += 2;
              v115[v114] = v99;
              *(_DWORD *)(v7 + 12) = v114 + 1;
            }
          }
LABEL_239:
          v116 = *(_QWORD *)(v99 + 80);
          if (!v116)
          {
            if (v99 == v8)
              return;
            while (1)
            {
              v116 = *(_QWORD *)(v99 + 56);
              if (v116)
                break;
              v99 = *(_QWORD *)(v99 + 32);
              if (v99)
                v118 = v99 == v8;
              else
                v118 = 1;
              if (v118)
                return;
            }
          }
          v99 = v116;
        }
        while ((*(_WORD *)(v116 + 28) & 8) != 0);
        while (v116 != v8)
        {
          while (1)
          {
            v99 = *(_QWORD *)(v116 + 56);
            if (v99)
              break;
            v116 = *(_QWORD *)(v116 + 32);
            if (v116)
              v117 = v116 == v8;
            else
              v117 = 1;
            if (v117)
              return;
          }
          v116 = *(_QWORD *)(v116 + 56);
          if ((*(_WORD *)(v99 + 28) & 8) != 0)
            goto LABEL_224;
        }
      }
      return;
    case 3u:
      goto LABEL_40;
    case 4u:
LABEL_117:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x195A3DEECLL);
      }
      v10 = WebCore::filterRootById((WebCore *)v8, **(WebCore::ContainerNode ***)v9, v4);
      goto LABEL_40;
    case 5u:
      goto LABEL_127;
    case 6u:
      goto LABEL_292;
    case 7u:
LABEL_290:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x195A3DEFCLL);
      }
      v11 = WebCore::filterRootById((WebCore *)v8, **(WebCore::ContainerNode ***)v9, v4);
      goto LABEL_292;
    case 8u:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x195A3DF04);
      }
      v85 = *(WebCore::ContainerNode ***)v9;
      v86 = **(const WebCore::CSSSelector ***)v9;
      v87 = *(const WebCore::ContainerNode **)(v3 + 40);
      v88 = WebCore::selectorForIdLookup(*(_QWORD *)(v3 + 16), v87, v86);
      if (v88)
      {
        v89 = (const WebCore::CSSSelector *)((char *)v88 + 8);
        if ((*((_BYTE *)v88 + 2) & 0x10) != 0)
          v89 = (const WTF::AtomString *)(*(_QWORD *)v89 + 8);
        if (WebCore::TreeScope::containsMultipleElementsWithId((uint64_t)v87, (uint64_t *)v89))
        {
          AllElementsById = WebCore::TreeScope::getAllElementsById(*(WebCore::TreeScopeOrderedMap ***)(v8 + 40), v89);
          v150 = *(unsigned __int16 *)(v8 + 28);
          v151 = v150 & 0xF000;
          v152 = (v150 >> 7) & 1;
          if (v151 == 36864)
            v153 = 1;
          else
            v153 = v152;
          v154 = *((unsigned int *)AllElementsById + 3);
          if ((_DWORD)v154)
          {
            v155 = *AllElementsById;
            v156 = 8 * v154;
            do
            {
              if (((v153 & 1) != 0
                 || WebCore::Node::isDescendantOf(*(const WebCore::Node ****)(*(_QWORD *)v155 + 8), (const WebCore::Node ***)v8))&& WebCore::SelectorDataList::selectorMatches(*v85, *(const WebCore::SelectorDataList::SelectorData **)(*(_QWORD *)v155 + 8), (WebCore::Element *)v8, v148, v149))
              {
                v157 = *(_QWORD *)(*(_QWORD *)v155 + 8);
                v158 = *(unsigned int *)(v7 + 12);
                if ((_DWORD)v158 == *(_DWORD *)(v7 + 8))
                {
                  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, v157);
                }
                else
                {
                  v159 = *(_QWORD **)v7;
                  *(_DWORD *)(v157 + 24) += 2;
                  v159[v158] = v157;
                  *(_DWORD *)(v7 + 12) = v158 + 1;
                }
              }
              v155 += 8;
              v156 -= 8;
            }
            while (v156);
          }
        }
        else
        {
          WebCore::TreeScope::getElementById(*(unsigned int **)(v8 + 40), v89, (uint64_t *)&v185);
          v92 = v185;
          if (v185)
          {
            v93 = *(_WORD *)(v8 + 28);
            if (((v93 & 0xF000) == 0x9000
               || (v93 & 0x80) != 0
               || WebCore::Node::isDescendantOf((const WebCore::Node ***)v185, (const WebCore::Node ***)v8))&& WebCore::SelectorDataList::selectorMatches(*v85, v92, (WebCore::Element *)v8, v90, v91))
            {
              v95 = *(unsigned int *)(v7 + 12);
              if ((_DWORD)v95 == *(_DWORD *)(v7 + 8))
              {
                WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, (uint64_t)v92);
              }
              else
              {
                v96 = *(_QWORD **)v7;
                *((_DWORD *)v92 + 6) += 2;
                v96[v95] = v92;
                *(_DWORD *)(v7 + 12) = v95 + 1;
              }
            }
            if (*((_DWORD *)v92 + 6) == 2)
            {
              if ((*((_WORD *)v92 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v92, v94);
            }
            else
            {
              *((_DWORD *)v92 + 6) -= 2;
            }
          }
        }
        return;
      }
      v102 = *((unsigned __int8 *)v85 + 8);
      v101 = (unsigned __int8 *)(v85 + 1);
      v100 = v102;
      if (!v102)
      {
        WebCore::SelectorCompiler::compileSelector((uint64_t)v101, (uint64_t)v86);
        v100 = *v101;
      }
      v10 = (WebCore *)v8;
      v11 = (WebCore *)v8;
      if (v100 != 1)
      {
LABEL_40:
        if (!v9[3])
        {
          __break(0xC471u);
          JUMPOUT(0x195A3DEC4);
        }
        v35 = *(WebCore::ContainerNode ***)v9;
        if (*((_BYTE *)v35 + 8) == 2)
        {
          v36 = *((_QWORD *)v10 + 10);
          if (!v36)
            return;
          while ((*(_WORD *)(v36 + 28) & 8) == 0)
          {
            v36 = *(_QWORD *)(v36 + 56);
            if (!v36)
              return;
          }
          while (1)
          {
            if (((unsigned int (*)(uint64_t))v35[2])(v36))
            {
              v164 = *(unsigned int *)(v7 + 12);
              if ((_DWORD)v164 == *(_DWORD *)(v7 + 8))
              {
                WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, v36);
              }
              else
              {
                v160 = *(_QWORD **)v7;
                *(_DWORD *)(v36 + 24) += 2;
                v160[v164] = v36;
                *(_DWORD *)(v7 + 12) = v164 + 1;
              }
            }
            v161 = *(WebCore **)(v36 + 80);
            if (!v161)
            {
              if ((WebCore *)v36 == v10)
                return;
              while (1)
              {
                v161 = *(WebCore **)(v36 + 56);
                if (v161)
                  break;
                v36 = *(_QWORD *)(v36 + 32);
                if (v36)
                  v163 = v36 == (_QWORD)v10;
                else
                  v163 = 1;
                if (v163)
                  return;
              }
            }
            v36 = (uint64_t)v161;
            if ((*((_WORD *)v161 + 14) & 8) == 0)
            {
              do
              {
                if (v161 == v10)
                  return;
                while (1)
                {
                  v36 = *((_QWORD *)v161 + 7);
                  if (v36)
                    break;
                  v161 = (WebCore *)*((_QWORD *)v161 + 4);
                  if (v161)
                    v162 = v161 == v10;
                  else
                    v162 = 1;
                  if (v162)
                    return;
                }
                v161 = (WebCore *)*((_QWORD *)v161 + 7);
              }
              while ((*(_WORD *)(v36 + 28) & 8) == 0);
            }
          }
        }
        LOBYTE(v185) = 3;
        HIDWORD(v185) = 0;
        v186 = 0;
        v187 = 0;
        v188 = 0;
        v191 = 0;
        v192 = 0;
        v193 = (WTF *)v195;
        v194 = 8;
        v196 = 0;
        v197 = 0;
        if ((*(_WORD *)(v8 + 28) & 0xF000) == 0x9000)
          v45 = 0;
        else
          v45 = v8;
        v189 = v45;
        v190 = 0;
        v46 = *((_QWORD *)v10 + 10);
        if (v46)
        {
          while ((*(_WORD *)(v46 + 28) & 8) == 0)
          {
            v46 = *(_QWORD *)(v46 + 56);
            if (!v46)
              goto LABEL_130;
          }
          while (1)
          {
            if (((unsigned int (*)(uint64_t, WebCore::Node **))v35[2])(v46, &v185))
            {
              v168 = *(unsigned int *)(v7 + 12);
              if ((_DWORD)v168 == *(_DWORD *)(v7 + 8))
              {
                WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, v46);
              }
              else
              {
                v169 = *(_QWORD **)v7;
                *(_DWORD *)(v46 + 24) += 2;
                v169[v168] = v46;
                *(_DWORD *)(v7 + 12) = v168 + 1;
              }
            }
            v165 = *(WebCore **)(v46 + 80);
            if (!v165)
            {
              if ((WebCore *)v46 == v10)
                goto LABEL_422;
              while (1)
              {
                v165 = *(WebCore **)(v46 + 56);
                if (v165)
                  break;
                v46 = *(_QWORD *)(v46 + 32);
                if (v46)
                  v167 = v46 == (_QWORD)v10;
                else
                  v167 = 1;
                if (v167)
                  goto LABEL_422;
              }
            }
            v46 = (uint64_t)v165;
            if ((*((_WORD *)v165 + 14) & 8) == 0)
            {
              do
              {
                if (v165 == v10)
                  goto LABEL_422;
                while (1)
                {
                  v46 = *((_QWORD *)v165 + 7);
                  if (v46)
                    break;
                  v165 = (WebCore *)*((_QWORD *)v165 + 4);
                  if (v165)
                    v166 = v165 == v10;
                  else
                    v166 = 1;
                  if (v166)
                    goto LABEL_422;
                }
                v165 = (WebCore *)*((_QWORD *)v165 + 7);
              }
              while ((*(_WORD *)(v46 + 28) & 8) == 0);
            }
          }
        }
        goto LABEL_130;
      }
LABEL_292:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x195A3DEF4);
      }
      i = (WebCore *)*((_QWORD *)v11 + 10);
      if (i)
      {
        v129 = *(const WebCore::CSSSelector ***)v9;
        while (1)
        {
          v130 = v11;
          if ((*((_WORD *)i + 14) & 8) != 0)
            break;
          i = (WebCore *)*((_QWORD *)i + 7);
          if (!i)
            return;
        }
        while (1)
        {
          v131 = *(_QWORD *)(*((_QWORD *)i + 5) + 8);
          v183 = *(_BYTE *)(v131 + 3384) != 2;
          v184 = *(_BYTE *)(v131 + 3358) & 1;
          LOBYTE(v185) = 3;
          HIDWORD(v185) = 0;
          v186 = 0;
          v187 = 0;
          v188 = 0;
          v190 = 0;
          v191 = 0;
          v192 = 0;
          v193 = (WTF *)v195;
          v194 = 8;
          v196 = 0;
          v197 = 0;
          if ((*(_WORD *)(v8 + 28) & 0xF000) == 0x9000)
            v132 = 0;
          else
            v132 = v8;
          v189 = v132;
          v134 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v183, *v129, i, (WebCore::SelectorChecker::CheckingContext *)&v185, v5);
          v135 = v193;
          if (v195 != (_BYTE *)v193 && v193)
          {
            v193 = 0;
            LODWORD(v194) = 0;
            WTF::fastFree(v135, v133);
          }
          v136 = v186;
          v186 = 0;
          if (v136)
          {
            if (*(_DWORD *)v136 == 2)
              WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v133);
            else
              *(_DWORD *)v136 -= 2;
          }
          if (v134)
          {
            v137 = *(unsigned int *)(v7 + 12);
            if ((_DWORD)v137 == *(_DWORD *)(v7 + 8))
            {
              v142 = v137 + (v137 >> 2);
              if (v142 >= 0x10)
                v143 = v142 + 1;
              else
                v143 = 16;
              if (v143 <= v137 + 1)
                v144 = v137 + 1;
              else
                v144 = v143;
              if (v144 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195A3DF0CLL);
              }
              __src = *(_QWORD **)v7;
              v145 = (void *)WTF::fastMalloc((WTF *)(8 * v144));
              *(_DWORD *)(v7 + 8) = v144;
              *(_QWORD *)v7 = v145;
              memcpy(v145, __src, 8 * v137);
              if (__src)
              {
                if (*(_QWORD **)v7 == __src)
                {
                  *(_QWORD *)v7 = 0;
                  *(_DWORD *)(v7 + 8) = 0;
                }
                WTF::fastFree((WTF *)__src, v146);
              }
              v137 = *(unsigned int *)(v7 + 12);
              v138 = (WebCore **)(*(_QWORD *)v7 + 8 * v137);
            }
            else
            {
              v138 = (WebCore **)(*(_QWORD *)v7 + 8 * v137);
            }
            *((_DWORD *)i + 6) += 2;
            *v138 = i;
            *(_DWORD *)(v7 + 12) = v137 + 1;
          }
          v139 = (WebCore *)*((_QWORD *)i + 10);
          if (!v139)
          {
            if (i == v130)
              return;
            while (1)
            {
              v139 = (WebCore *)*((_QWORD *)i + 7);
              if (v139)
                break;
              i = (WebCore *)*((_QWORD *)i + 4);
              if (i)
                v141 = i == v130;
              else
                v141 = 1;
              if (v141)
                return;
            }
          }
          for (i = v139; (*((_WORD *)i + 14) & 8) == 0; v139 = (WebCore *)*((_QWORD *)v139 + 7))
          {
            if (v139 == v130)
              return;
            while (1)
            {
              i = (WebCore *)*((_QWORD *)v139 + 7);
              if (i)
                break;
              v139 = (WebCore *)*((_QWORD *)v139 + 4);
              if (v139)
                v140 = v139 == v130;
              else
                v140 = 1;
              if (v140)
                return;
            }
          }
        }
      }
      return;
    case 9u:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x195A3DEA4);
      }
      v15 = *(_QWORD **)(**(_QWORD **)v9 + 8);
      v16 = v15[4];
      if (v16 == WebCore::starAtomData)
      {
        v17 = v15[3];
        if (v17 == v16)
        {
          WebCore::anyElement<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, (uint64_t)v4);
          return;
        }
        v18 = v15[5];
        if ((*(_WORD *)(v3 + 28) & 0xF000) == 0x9000 && v18 == *(_QWORD *)(WebCore::HTMLNames::baseTag + 24))
        {
          v20 = *(_QWORD *)(v3 + 1184);
          if (!v20)
            return;
          v21 = *(_QWORD *)(v20 + 8);
          if (!v21)
            return;
          v22 = *(_DWORD *)(v21 + 24);
          *(_DWORD *)(v21 + 24) = v22 + 2;
          if (v22)
          {
            *(_DWORD *)(v21 + 24) = v22;
          }
          else if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v21, (void *)v3);
            v17 = v15[3];
            v18 = v15[5];
          }
        }
        if (v17 == v18)
        {
          v19 = *(_QWORD *)(v8 + 80);
          if (!v19)
            return;
          while ((*(_WORD *)(v19 + 28) & 8) == 0)
          {
            v19 = *(_QWORD *)(v19 + 56);
            if (!v19)
              return;
          }
          while (1)
          {
            if (*(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == v18)
            {
              v47 = *(unsigned int *)(v7 + 12);
              if ((_DWORD)v47 == *(_DWORD *)(v7 + 8))
              {
                v52 = v47 + (v47 >> 2);
                if (v52 >= 0x10)
                  v53 = v52 + 1;
                else
                  v53 = 16;
                if (v53 <= v47 + 1)
                  v54 = v47 + 1;
                else
                  v54 = v53;
                if (v54 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195A3DED4);
                }
                v55 = *(_QWORD **)v7;
                v56 = (void *)WTF::fastMalloc((WTF *)(8 * v54));
                *(_DWORD *)(v7 + 8) = v54;
                *(_QWORD *)v7 = v56;
                memcpy(v56, v55, 8 * v47);
                if (v55)
                {
                  if (*(_QWORD **)v7 == v55)
                  {
                    *(_QWORD *)v7 = 0;
                    *(_DWORD *)(v7 + 8) = 0;
                  }
                  WTF::fastFree((WTF *)v55, v57);
                }
                v47 = *(unsigned int *)(v7 + 12);
                v48 = (_QWORD *)(*(_QWORD *)v7 + 8 * v47);
              }
              else
              {
                v48 = (_QWORD *)(*(_QWORD *)v7 + 8 * v47);
              }
              *(_DWORD *)(v19 + 24) += 2;
              *v48 = v19;
              *(_DWORD *)(v7 + 12) = v47 + 1;
            }
            v49 = *(_QWORD *)(v19 + 80);
            if (!v49)
            {
              if (v19 == v8)
                return;
              while (1)
              {
                v49 = *(_QWORD *)(v19 + 56);
                if (v49)
                  break;
                v19 = *(_QWORD *)(v19 + 32);
                if (v19)
                  v51 = v19 == v8;
                else
                  v51 = 1;
                if (v51)
                  return;
              }
            }
            if ((*(_WORD *)(v49 + 28) & 8) != 0)
            {
              v19 = v49;
            }
            else
            {
              do
              {
                if (v49 == v8)
                  return;
                while (1)
                {
                  v19 = *(_QWORD *)(v49 + 56);
                  if (v19)
                    break;
                  v49 = *(_QWORD *)(v49 + 32);
                  if (v49)
                    v50 = v49 == v8;
                  else
                    v50 = 1;
                  if (v50)
                    return;
                }
                v49 = *(_QWORD *)(v49 + 56);
              }
              while ((*(_WORD *)(v19 + 28) & 8) == 0);
            }
            v18 = v15[3];
          }
        }
        v98 = *(WTF::StringImpl **)(v8 + 80);
        if (!v98)
          return;
        while ((*((_WORD *)v98 + 14) & 8) == 0)
        {
          v98 = (WTF::StringImpl *)*((_QWORD *)v98 + 7);
          if (!v98)
            return;
        }
        v185 = (WebCore::Node *)v8;
        v186 = v98;
        do
        {
          if ((*((_WORD *)v98 + 14) & 0x10) != 0
            && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)v98 + 5) + 8) + 3358) & 1) != 0)
          {
            v124 = *(_QWORD *)(*((_QWORD *)v98 + 12) + 24);
            v125 = v15[5];
          }
          else
          {
            v124 = *(_QWORD *)(*((_QWORD *)v98 + 12) + 24);
            v125 = v15[3];
          }
          if (v124 == v125)
          {
            v126 = *(unsigned int *)(v7 + 12);
            if ((_DWORD)v126 == *(_DWORD *)(v7 + 8))
            {
              WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, (uint64_t)v98);
            }
            else
            {
              v127 = *(_QWORD **)v7;
              *((_DWORD *)v98 + 6) += 2;
              v127[v126] = v98;
              *(_DWORD *)(v7 + 12) = v126 + 1;
            }
          }
          WebCore::ElementDescendantIterator<WebCore::Element>::operator++(&v185);
          v98 = v186;
        }
        while (v186);
      }
      else
      {
        v97 = *(WTF::StringImpl **)(v3 + 80);
        if (!v97)
          return;
        while ((*((_WORD *)v97 + 14) & 8) == 0)
        {
          v97 = (WTF::StringImpl *)*((_QWORD *)v97 + 7);
          if (!v97)
            return;
        }
        v185 = (WebCore::Node *)v8;
        v186 = v97;
        do
        {
          v119 = *((_QWORD *)v97 + 12);
          if (*(_QWORD *)(v119 + 32) == v15[4])
          {
            if ((*((_WORD *)v97 + 14) & 0x10) != 0
              && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)v97 + 5) + 8) + 3358) & 1) != 0)
            {
              v120 = *(_QWORD *)(v119 + 24);
              v121 = v15[5];
            }
            else
            {
              v120 = *(_QWORD *)(v119 + 24);
              v121 = v15[3];
            }
            if (v120 == v121)
            {
              v122 = *(unsigned int *)(v7 + 12);
              if ((_DWORD)v122 == *(_DWORD *)(v7 + 8))
              {
                WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, (uint64_t)v97);
              }
              else
              {
                v123 = *(_QWORD **)v7;
                *((_DWORD *)v97 + 6) += 2;
                v123[v122] = v97;
                *(_DWORD *)(v7 + 12) = v122 + 1;
              }
            }
          }
          WebCore::ElementDescendantIterator<WebCore::Element>::operator++(&v185);
          v97 = v186;
        }
        while (v186);
      }
      return;
    case 0xAu:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x195A3DE9CLL);
      }
      v12 = **(_QWORD **)v9;
      v13 = (_QWORD *)(v12 + 8);
      if ((*(_BYTE *)(v12 + 2) & 0x10) != 0)
        v13 = (_QWORD *)(*v13 + 8);
      v14 = *(_QWORD *)(v3 + 80);
      if (!v14)
        return;
      while ((*(_WORD *)(v14 + 28) & 8) == 0)
      {
        v14 = *(_QWORD *)(v14 + 56);
        if (!v14)
          return;
      }
      do
      {
LABEL_46:
        v37 = *(_QWORD *)(v14 + 104);
        if (v37)
        {
          v38 = *(_QWORD *)(v37 + 16);
          if (v38)
          {
            v39 = 0;
            while (*(_QWORD *)(v38 + 16 + 8 * v39) != *v13)
            {
              if (++v39 >= (unint64_t)*(unsigned int *)(v38 + 12))
                goto LABEL_51;
            }
            v43 = *(unsigned int *)(v7 + 12);
            if ((_DWORD)v43 == *(_DWORD *)(v7 + 8))
            {
              v66 = v43 + (v43 >> 2);
              if (v66 >= 0x10)
                v67 = v66 + 1;
              else
                v67 = 16;
              if (v67 <= v43 + 1)
                v68 = v43 + 1;
              else
                v68 = v67;
              if (v68 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195A3DECCLL);
              }
              v69 = *(_QWORD **)v7;
              v70 = (void *)WTF::fastMalloc((WTF *)(8 * v68));
              *(_DWORD *)(v7 + 8) = v68;
              *(_QWORD *)v7 = v70;
              memcpy(v70, v69, 8 * v43);
              if (v69)
              {
                if (*(_QWORD **)v7 == v69)
                {
                  *(_QWORD *)v7 = 0;
                  *(_DWORD *)(v7 + 8) = 0;
                }
                WTF::fastFree((WTF *)v69, v71);
              }
              v43 = *(unsigned int *)(v7 + 12);
              v44 = (_QWORD *)(*(_QWORD *)v7 + 8 * v43);
            }
            else
            {
              v44 = (_QWORD *)(*(_QWORD *)v7 + 8 * v43);
            }
            *(_DWORD *)(v14 + 24) += 2;
            *v44 = v14;
            *(_DWORD *)(v7 + 12) = v43 + 1;
          }
        }
LABEL_51:
        v40 = *(_QWORD *)(v14 + 80);
        if (!v40)
        {
          if (v14 == v8)
            return;
          while (1)
          {
            v40 = *(_QWORD *)(v14 + 56);
            if (v40)
              break;
            v14 = *(_QWORD *)(v14 + 32);
            if (v14)
              v42 = v14 == v8;
            else
              v42 = 1;
            if (v42)
              return;
          }
        }
        v14 = v40;
      }
      while ((*(_WORD *)(v40 + 28) & 8) != 0);
      while (v40 != v8)
      {
        while (1)
        {
          v14 = *(_QWORD *)(v40 + 56);
          if (v14)
            break;
          v40 = *(_QWORD *)(v40 + 32);
          if (v40)
            v41 = v40 == v8;
          else
            v41 = 1;
          if (v41)
            return;
        }
        v40 = *(_QWORD *)(v40 + 56);
        if ((*(_WORD *)(v14 + 28) & 8) != 0)
          goto LABEL_46;
      }
      return;
    case 0xBu:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x195A3DEDCLL);
      }
      v23 = **(_QWORD **)v9;
      v26 = *(_QWORD *)(v23 + 8);
      v25 = (_QWORD *)(v23 + 8);
      v24 = v26;
      v27 = (_QWORD *)(v26 + 8);
      if ((*((_BYTE *)v25 - 6) & 0x10) != 0)
        v28 = v27;
      else
        v28 = v25;
      v29 = *(_QWORD *)(v3 + 80);
      if (!v29)
        return;
      v30 = *(_QWORD **)(v24 + 32);
      v31 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3358);
      break;
    case 0xCu:
      goto LABEL_205;
    default:
      return;
  }
  while ((*(_WORD *)(v29 + 28) & 8) == 0)
  {
    v29 = *(_QWORD *)(v29 + 56);
    if (!v29)
      return;
  }
  do
  {
LABEL_146:
    v72 = *(_QWORD *)(v29 + 104);
    if (v72)
    {
      v73 = *(_DWORD *)(v72 + 4);
      v74 = v73 >> 5;
      if ((v73 & 1) != 0 ? *(_DWORD *)(v72 + 52) : v73 >> 5)
      {
        v76 = v30 + 3;
        if ((v31 & 1) != 0)
        {
          if ((*(_WORD *)(v29 + 28) & 0x10) != 0)
            v76 = v30 + 5;
          else
            v76 = v30 + 3;
        }
        if ((v73 & 1) != 0)
        {
          v77 = *(_QWORD *)(v72 + 40);
          v74 = *(_DWORD *)(v72 + 52);
        }
        else
        {
          v77 = v72 + 32;
        }
        if (v74)
        {
          v78 = 0;
          v79 = *v76;
          while (1)
          {
            v80 = *(_QWORD *)(v77 + 16 * v78);
            if (v79 == *(_QWORD *)(v80 + 24)
              && (v30[2] == WebCore::starAtomData || v30[4] == *(_QWORD *)(v80 + 32))
              && *v28 == *(_QWORD *)(v77 + 16 * v78 + 8))
            {
              break;
            }
            v81 = v78 + 1;
            v78 = (v78 + 1);
            if (v74 == v81)
              goto LABEL_160;
          }
          v103 = *(unsigned int *)(v7 + 12);
          if ((_DWORD)v103 == *(_DWORD *)(v7 + 8))
          {
            WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v7, v29);
          }
          else
          {
            v104 = *(_QWORD **)v7;
            *(_DWORD *)(v29 + 24) += 2;
            v104[v103] = v29;
            *(_DWORD *)(v7 + 12) = v103 + 1;
          }
        }
      }
    }
LABEL_160:
    v82 = *(_QWORD *)(v29 + 80);
    if (!v82)
    {
      if (v29 == v8)
        return;
      while (1)
      {
        v82 = *(_QWORD *)(v29 + 56);
        if (v82)
          break;
        v29 = *(_QWORD *)(v29 + 32);
        if (v29)
          v84 = v29 == v8;
        else
          v84 = 1;
        if (v84)
          return;
      }
    }
    v29 = v82;
  }
  while ((*(_WORD *)(v82 + 28) & 8) != 0);
  while (v82 != v8)
  {
    while (1)
    {
      v29 = *(_QWORD *)(v82 + 56);
      if (v29)
        break;
      v82 = *(_QWORD *)(v82 + 32);
      if (v82)
        v83 = v82 == v8;
      else
        v83 = 1;
      if (v83)
        return;
    }
    v82 = *(_QWORD *)(v82 + 56);
    if ((*(_WORD *)(v29 + 28) & 8) != 0)
      goto LABEL_146;
  }
}

uint64_t *WebCore::SelectorQueryCache::singleton(WebCore::SelectorQueryCache *this)
{
  {
    WebCore::SelectorQueryCache::singleton(void)::cache = 0;
  }
  return &WebCore::SelectorQueryCache::singleton(void)::cache;
}

WTF::StringImpl *WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::remove(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v14;

  v3 = (uint64_t *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_QWORD *)result + ((unint64_t)*(unsigned int *)(*(_QWORD *)result - 4) << 6);
    if (v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if (v4 != a2)
  {
    v5 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E33A7D18[v5])(&v14, a2 + 24);
    *(_DWORD *)(a2 + 48) = -1;
    result = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_QWORD *)a2 = -1;
    v6 = *(WTF **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    if (v6)
    {
      WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6 + 8, (void *)a2);
      v7 = *(WTF::StringImpl **)v6;
      *(_QWORD *)v6 = 0;
      if (v7)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v6, v7);
      result = (WTF::StringImpl *)WTF::fastFree(v6, v7);
    }
    ++*(_DWORD *)(*v3 - 16);
    v8 = *v3;
    if (*v3)
      v9 = *(_DWORD *)(v8 - 12) - 1;
    else
      v9 = -1;
    *(_DWORD *)(v8 - 12) = v9;
    v10 = *v3;
    if (*v3)
    {
      v11 = 6 * *(_DWORD *)(v10 - 12);
      v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
        return (WTF::StringImpl *)WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::rehash(v3, v12 >> 1, 0);
    }
  }
  return result;
}

_QWORD *WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::random(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *a1;
  if (!*a1)
    return 0;
  if (!*(_DWORD *)(v1 - 12))
    return (_QWORD *)(v1 + ((unint64_t)*(unsigned int *)(v1 - 4) << 6));
  do
  {
    v3 = *a1;
    v4 = WTF::weakRandomNumber<unsigned int>();
    v7 = *a1;
    if (*a1)
      LODWORD(v7) = *(_DWORD *)(v7 - 8);
    v8 = (_QWORD *)(v3 + ((unint64_t)(v7 & v4) << 6));
  }
  while ((WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::isEmptyBucket((uint64_t)v8, v5, v6) & 1) != 0|| *v8 == -1);
  return v8;
}

_QWORD *WebCore::SelectorQueryCache::clear(WebCore::SelectorQueryCache *this, void *a2)
{
  _QWORD *result;

  result = *(_QWORD **)this;
  if (result)
  {
    *(_QWORD *)this = 0;
    return (_QWORD *)WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t WebCore::ShadowRoot::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;
  WTF::MonotonicTime *Ref;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  _BYTE v14[24];

  v3 = a2;
  Ref = (WTF::MonotonicTime *)WebCore::Node::insertedIntoAncestor((unsigned int *)a1, (unsigned int *)a2, a3);
  if ((v3 & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_DWORD *)(v6 + 24) += 2;
    Ref = (WTF::MonotonicTime *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Node>(v6 + 2688, a1, (uint64_t)v14);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        Ref = (WTF::MonotonicTime *)WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v8 = *(_QWORD *)(a1 + 176);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 36))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
        {
          v11 = *(_QWORD *)(a1 + 216);
          ++*(_DWORD *)(v11 + 8);
          if (!*(_BYTE *)(v11 + 233))
          {
            *(_WORD *)(v11 + 232) = 256;
            if (*(_QWORD *)(v11 + 24))
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 1328) + 234) = 1;
          }
          if ((*(_QWORD *)(v11 + 112) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v11 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v11 + 104) = 0;
            WTF::MonotonicTime::now(Ref);
            WebCore::TimerBase::setNextFireTime(v11 + 80, v12 + 0.0);
          }
          v13 = *(_DWORD *)(v11 + 8);
          if (!v13)
          {
            __break(0xC471u);
            JUMPOUT(0x195A3E574);
          }
          *(_DWORD *)(v11 + 8) = v13 - 1;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::ShadowRoot::removedFromAncestor(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WebCore::AXObjectCache *v7;
  WebCore::AXObjectCache *v8;
  int v9;
  WebCore::Node *v10;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if ((a2 & 1) != 0)
  {
    v4 &= ~0x8000000000000uLL;
    *(_QWORD *)(result + 16) = v4;
  }
  if ((v4 & 0x10000000000000) != 0 && (*(_WORD *)(**(_QWORD **)(result + 40) + 28) & 0x80) == 0)
    *(_QWORD *)(result + 16) = v4 & 0xFFEFFFFFFFFFFFFFLL;
  if ((a2 & 1) != 0 && WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v10 = (WebCore::Node *)result;
    v7 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(a3 + 40) + 8));
    v3 = (uint64_t)v10;
    if (v7)
    {
      v8 = v7;
      ++*((_DWORD *)v7 + 2);
      WebCore::AXObjectCache::remove(v7, v10);
      v9 = *((_DWORD *)v8 + 2);
      if (!v9)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *((_DWORD *)v8 + 2) = v9 - 1;
      v3 = (uint64_t)v10;
    }
  }
  else if ((a2 & 1) == 0)
  {
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  result = WTF::WeakListHashSet<WebCore::ShadowRoot,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ShadowRoot>(v5 + 2688, v3);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

double WebCore::ShadowRoot::moveShadowRootToNewDocument(WebCore::ShadowRoot *this, WebCore::Document *a2, WebCore::Document *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WebCore::Style::Scope *v10;
  void *v11;
  double result;
  WebCore::Style::Scope *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  v5 = *((_QWORD *)a2 + 329);
  if (!v5 || *(WebCore::Document **)(v5 + 8) != a3)
  {
    v6 = *((_QWORD *)a3 + 329);
    if (!v6 || *(WebCore::Document **)(v6 + 8) != a2)
    {
      v19 = 0;
      v20 = 0;
      v7 = *((_QWORD *)this + 22);
      if (v7)
      {
        WebCore::CSSStyleSheetObservableArray::setSheets(v7, (unsigned int *)&v19, (uint64_t)&v21);
        if ((_BYTE)v23)
        {
          v18 = v22;
          v22 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, a2);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
      }
      else
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
      }
      v8 = v19;
      if (!HIDWORD(v20))
      {
        if (!v19)
          goto LABEL_9;
LABEL_24:
        v19 = 0;
        LODWORD(v20) = 0;
        WTF::fastFree(v8, a2);
        goto LABEL_9;
      }
      v16 = 8 * HIDWORD(v20);
      do
      {
        v17 = *(_DWORD **)v8;
        *(_QWORD *)v8 = 0;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
        v8 = (WTF *)((char *)v8 + 8);
        v16 -= 8;
      }
      while (v16);
      v8 = v19;
      if (v19)
        goto LABEL_24;
    }
  }
LABEL_9:
  *((_QWORD *)this + 13) = a3;
  v9 = *((_QWORD *)this + 14);
  if (v9 && *(WebCore::Document **)(v9 + 8) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A3E810);
  }
  v10 = (WebCore::Style::Scope *)WTF::fastMalloc((WTF *)0x140);
  WebCore::Style::Scope::Scope(v10, this);
  v13 = (WebCore::Style::Scope *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v10;
  if (v13)
  {
    WebCore::Style::Scope::~Scope(v13, v11);
    if (*(_DWORD *)(v14 + 8))
    {
      result = 0.0;
      *(_OWORD *)(v14 + 288) = 0u;
      *(_OWORD *)(v14 + 304) = 0u;
      *(_OWORD *)(v14 + 256) = 0u;
      *(_OWORD *)(v14 + 272) = 0u;
      *(_OWORD *)(v14 + 224) = 0u;
      *(_OWORD *)(v14 + 240) = 0u;
      *(_OWORD *)(v14 + 192) = 0u;
      *(_OWORD *)(v14 + 208) = 0u;
      *(_OWORD *)(v14 + 160) = 0u;
      *(_OWORD *)(v14 + 176) = 0u;
      *(_OWORD *)(v14 + 128) = 0u;
      *(_OWORD *)(v14 + 144) = 0u;
      *(_OWORD *)(v14 + 96) = 0u;
      *(_OWORD *)(v14 + 112) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 80) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v14, v15);
    }
  }
  if (*(WebCore::Document **)(*((_QWORD *)this + 27) + 16) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A3E7F0);
  }
  return result;
}

WebCore::ChildListMutationAccumulator *WebCore::ShadowRoot::replaceChildrenWithMarkup@<X0>(WebCore::ContainerNode *a1@<X0>, unsigned int **a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  void *v7;
  WebCore::ChildListMutationAccumulator *result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore::Node *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::ChildListMutationAccumulator *v19;
  uint64_t v20;
  unsigned int v21;

  if (*a2 && (*a2)[1])
  {
    v9 = *(_QWORD *)(*((_QWORD *)a1 + 25) + 8);
    *(_DWORD *)(v9 + 24) += 2;
    WebCore::createFragmentForInnerOuterHTML(v9, a2, a3 & 0xFE | 1, (uint64_t)&v19, a5);
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    v11 = v21;
    if (!v21)
    {
      v18 = v19;
      v19 = 0;
      WebCore::replaceChildrenWithFragment(a1, &v18, (_QWORD *)a4);
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v13);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      return (WebCore::ChildListMutationAccumulator *)((uint64_t (*)(WebCore::Node **, WebCore::ChildListMutationAccumulator **))off_1E33A7D38[v11])(&v18, &v19);
    }
    if (v21 == 1)
    {
      v12 = v20;
      v20 = 0;
      *(_BYTE *)a4 = (_BYTE)v19;
      *(_QWORD *)(a4 + 8) = v12;
      *(_BYTE *)(a4 + 16) = 1;
      return (WebCore::ChildListMutationAccumulator *)((uint64_t (*)(WebCore::Node **, WebCore::ChildListMutationAccumulator **))off_1E33A7D38[v11])(&v18, &v19);
    }
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::ChildListMutationAccumulator *)WebCore::ShadowRoot::setHTMLUnsafe(v17);
  }
  else
  {
    WebCore::ChildListMutationScope::ChildListMutationScope(&v19, a1);
    WebCore::ContainerNode::removeChildren((uint64_t)a1);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(result, v7);
        return (WebCore::ChildListMutationAccumulator *)WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ShadowRoot::setHTMLUnsafe@<X0>(WebCore::ContainerNode *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WebCore::ShadowRoot *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25[2];
  WTF::StringImpl **v26;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 40) + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = (WTF::StringImpl *)(v6 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25[0] = v9;
  v25[1] = (WTF::StringImpl *)&v21;
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_19;
  v26 = v25;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v22, &v26, a2);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v24)
  {
    if (v24 == 1)
    {
      v14 = v23;
      v23 = 0;
      *(_BYTE *)a3 = (_BYTE)v22;
      *(_QWORD *)(a3 + 8) = v14;
      v15 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(v25, &v22);
    }
LABEL_19:
    v19 = (WebCore::ShadowRoot *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ShadowRoot::innerHTML(v19, v20);
  }
  v16 = v22;
  v22 = 0;
  v25[0] = v16;
  WebCore::ShadowRoot::replaceChildrenWithMarkup(a1, (unsigned int **)v25, 12, a3, v12);
  result = v25[0];
  v25[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  v15 = v24;
  if (v24 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(v25, &v22);
  return result;
}

WTF *WebCore::ShadowRoot::innerHTML@<X0>(WebCore::ShadowRoot *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  WTF *v3;
  WTF *result;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  WebCore::serializeFragment((uint64_t)this, 1, 0, 1, 0, 0, (uint64_t *)&v10, (uint64_t *)&v8, a2);
  if (HIDWORD(v9))
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v8, (WTF *)((char *)v8 + 24 * HIDWORD(v9)));
  v3 = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v3, v2);
  }
  if (HIDWORD(v11))
  {
    v5 = v10;
    v6 = 8 * HIDWORD(v11);
    do
    {
      v7 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7, v2);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      v5 = (WTF *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  result = v10;
  if (v10)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WebCore::Style::Scope *WebCore::ShadowRoot::setInnerHTML@<X0>(WebCore::ContainerNode *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::Style::Scope *result;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27[2];
  WTF::StringImpl **v28;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 40) + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = (WTF::StringImpl *)(v6 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27[0] = v9;
  v27[1] = (WTF::StringImpl *)&v23;
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_19;
  v28 = v27;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v24, &v28, a2);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v26)
  {
    if (v26 == 1)
    {
      v14 = v25;
      v25 = 0;
      *(_BYTE *)a3 = (_BYTE)v24;
      *(_QWORD *)(a3 + 8) = v14;
      v15 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (WebCore::Style::Scope *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(v27, &v24);
    }
LABEL_19:
    v19 = (_BYTE *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ShadowRoot::cloneNodeInternal(v19, v20, v21, v22);
  }
  v16 = v24;
  v24 = 0;
  v27[0] = v16;
  WebCore::ShadowRoot::replaceChildrenWithMarkup(a1, (unsigned int **)v27, 0, a3, v12);
  result = v27[0];
  v27[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WebCore::Style::Scope *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  v15 = v26;
  if (v26 != -1)
    return (WebCore::Style::Scope *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(v27, &v24);
  return result;
}

WebCore::Style::Scope *WebCore::ShadowRoot::cloneNodeInternal@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  char v4;
  char v7;
  char v8;
  uint64_t v9;
  WebCore::Style::Scope *v10;
  WebCore::Style::Scope *result;
  uint64_t v12;

  v4 = a1[193];
  if (!v4 || a3 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195A3EEF8);
  }
  v7 = a1[194];
  v8 = a1[192];
  v9 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(v9 + 24) = 2;
  *(_WORD *)(v9 + 28) = -20348;
  *(_OWORD *)(v9 + 30) = 0u;
  *(_OWORD *)(v9 + 46) = 0u;
  *(_OWORD *)(v9 + 62) = 0u;
  *(_WORD *)(v9 + 78) = 0;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 96) = v9;
  *(_QWORD *)(v9 + 104) = a2;
  *(_QWORD *)(v9 + 112) = a2 + 96;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_QWORD *)(v9 + 184) = 0;
  *(_QWORD *)(v9 + 40) = v9 + 96;
  *(_QWORD *)v9 = off_1E33A7A70;
  *(_BYTE *)(v9 + 192) = v8 & 0x2A | *(_BYTE *)(v9 + 192) & 0x80 | 4;
  *(_BYTE *)(v9 + 193) = v4;
  *(_BYTE *)(v9 + 194) = v7;
  *(_QWORD *)(v9 + 200) = 0;
  *(_QWORD *)(v9 + 208) = 0;
  v10 = (WebCore::Style::Scope *)WTF::fastMalloc((WTF *)0x140);
  result = WebCore::Style::Scope::Scope(v10, (WebCore::ShadowRoot *)v9);
  *(_QWORD *)(v9 + 216) = result;
  *(_QWORD *)(v9 + 224) = 0;
  *(_BYTE *)(v9 + 232) = 0;
  *(_BYTE *)(v9 + 240) = 0;
  v12 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = v12 | 0x10000000000000;
  if (!*(_BYTE *)(v9 + 193))
    *(_QWORD *)(v9 + 16) = v12 | 0x30000000000000;
  *a4 = v9;
  return result;
}

uint64_t WebCore::ShadowRoot::removeAllEventListeners(WebCore::ShadowRoot *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  result = WebCore::Node::removeAllEventListeners((uint64_t)this, a2);
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    do
    {
      v5 = v4;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      if ((*(_WORD *)(v4 + 28) & 4) != 0 && (v4 = *(_QWORD *)(v4 + 80)) != 0 || (v4 = *(_QWORD *)(v5 + 56)) != 0)
      {
LABEL_6:
        *(_DWORD *)(v4 + 24) += 2;
      }
      else
      {
        v7 = v5;
        while (1)
        {
          v7 = *(_QWORD *)(v7 + 32);
          if (!v7)
            break;
          v4 = *(_QWORD *)(v7 + 56);
          if (v4)
            goto LABEL_6;
        }
        v4 = 0;
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    while (v4);
  }
  return result;
}

uint64_t WebCore::ShadowRoot::findAssignedSlot(WebCore::ShadowRoot *this, const WebCore::Node *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 28);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

uint64_t *WebCore::ShadowRoot::partMappings(WebCore::ShadowRoot *this, WTF::StringImpl *a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  char *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v30;
  uint64_t v31;
  unsigned int v33;
  uint64_t v34;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v51;
  unsigned __int16 *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v65;
  uint64_t v66;
  uint64_t v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  _QWORD *v71;
  WTF::StringImpl *v72;
  int v73;
  int i;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  void *v83;
  WTF::StringImpl *v84;
  int v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  WTF::StringImpl *v92;
  unsigned int v93;
  WTF::StringImpl *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  unint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  WTF::StringImpl *v116;
  unsigned int v117;
  uint64_t v118;
  char v120;
  WTF::StringImpl *v121;
  WTF *v122;
  unint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  char v141;

  v2 = (uint64_t *)((char *)this + 232);
  if (*((_BYTE *)this + 240))
    return v2;
  v3 = (unint64_t)this;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 25) + 8) + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_5:
        v7 = v7;
        v8 = (uint64_t *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::exportpartsAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::exportpartsAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::exportpartsAttr + 32))
          {
            goto LABEL_14;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_5;
    }
  }
  v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_14:
  v10 = *v8;
  if (!*v8
    || (v11 = *(unsigned int *)(v10 + 4),
        *(_DWORD *)v10 += 2,
        v12 = *(unsigned int *)(v10 + 16),
        v13 = *(_QWORD *)(v10 + 8),
        v135 = 0,
        !(_DWORD)v11))
  {
    v125 = 0;
LABEL_275:
    *(_QWORD *)(v3 + 232) = v125;
    *(_BYTE *)(v3 + 240) = 1;
    goto LABEL_276;
  }
  v132 = (WTF::StringImpl *)v10;
  v134 = (uint64_t *)((char *)this + 232);
  v14 = 0;
  v15 = (v12 >> 2) & 1;
  v16 = v11 & 0xFFFFFFFEFFFFFFFFLL | (v15 << 32);
  v17 = (WTF::StringImpl *)&v138;
  v10 = 0x100003600;
  do
  {
    if ((unint64_t)(v14 + 1) > v11)
      v18 = v14 + 1;
    else
      v18 = (char *)v11;
    v2 = (uint64_t *)v14;
    while (1)
    {
      if ((_DWORD)v15)
      {
        if (v11 <= v2)
          goto LABEL_281;
        v19 = *(unsigned __int8 *)(v13 + v2);
      }
      else
      {
        if (v11 <= v2)
          goto LABEL_281;
        v19 = *(unsigned __int16 *)(v13 + 2 * v2);
      }
      if (v19 == 44)
        break;
      v2 = (uint64_t *)((char *)v2 + 1);
      if (v18 == (char *)v2)
      {
        v2 = (uint64_t *)v18;
        break;
      }
    }
    if (v11 <= v14)
      goto LABEL_219;
    v20 = (_DWORD)v2 - (_DWORD)v14;
    if ((int)v11 - (int)v14 > ((_DWORD)v2 - (_DWORD)v14))
      goto LABEL_31;
    v24 = v13;
    v22 = v16;
    if ((_DWORD)v14)
    {
      v20 = v11 - (_DWORD)v14;
LABEL_31:
      v21 = v14;
      v22 = v20;
      v23 = v11 - v14;
      if ((_DWORD)v15)
      {
        if (v23 < v20)
          goto LABEL_281;
        v24 = v13 + v21;
        v22 = v20 | 0x100000000;
      }
      else
      {
        if (v23 < v20)
          goto LABEL_281;
        v24 = v13 + 2 * v21;
      }
    }
    if ((_DWORD)v22)
    {
      v25 = 0;
      if ((v22 & 0x100000000) != 0)
      {
        while (1)
        {
          v30 = *(unsigned __int8 *)(v24 + v25);
          v27 = v30 > 0x20;
          v31 = (1 << v30) & 0x100003600;
          if (v27 || v31 == 0)
            break;
          if (v22 == ++v25)
            goto LABEL_219;
        }
      }
      else
      {
        while (1)
        {
          v26 = *(unsigned __int16 *)(v24 + 2 * v25);
          v27 = v26 > 0x20;
          v28 = (1 << v26) & 0x100003600;
          if (v27 || v28 == 0)
            break;
          if (v22 == ++v25)
            goto LABEL_219;
        }
      }
      if (v22 > v25)
      {
        v3 = v25;
        if ((v22 & 0x100000000) != 0)
        {
          do
          {
            if ((_DWORD)v22 == (_DWORD)v3)
              goto LABEL_281;
            v36 = *(unsigned __int8 *)(v24 + v3);
            v27 = v36 > 0x3A;
            v37 = (1 << v36) & 0x400000100003600;
            if (!v27 && v37 != 0)
              goto LABEL_70;
            ++v3;
          }
          while (v22 != v3);
LABEL_69:
          v3 = v22;
        }
        else
        {
          v3 = v25;
          while (1)
          {
            if ((_DWORD)v22 == (_DWORD)v3)
              goto LABEL_281;
            v33 = *(unsigned __int16 *)(v24 + 2 * v3);
            v27 = v33 > 0x3A;
            v34 = (1 << v33) & 0x400000100003600;
            if (!v27 && v34 != 0)
              break;
            if (v22 == ++v3)
              goto LABEL_69;
          }
        }
LABEL_70:
        if (v3 == v25)
          goto LABEL_219;
        v129 = v22 & 0x100000000;
        v130 = v17;
        v131 = (WTF::StringImpl *)v16;
        if (v22 <= v25)
          goto LABEL_81;
        LODWORD(v39) = v3 - v25;
        if ((int)v22 - (int)v25 <= (v3 - v25))
        {
          v39 = v22;
          if ((_DWORD)v25)
          {
            LODWORD(v39) = v22 - v25;
            goto LABEL_73;
          }
        }
        else
        {
LABEL_73:
          v39 = v39;
          v40 = v22 - (unint64_t)v25;
          if ((v22 & 0x100000000) != 0)
          {
            if (v40 < v39)
              goto LABEL_281;
            v39 = v39 | 0x100000000;
          }
          else if (v40 < v39)
          {
            goto LABEL_281;
          }
        }
        if ((v39 & 0x100000000) != 0)
LABEL_81:
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v41 = v136;
        if (v22 <= v3)
        {
          v17 = v130;
          v16 = (unint64_t)v131;
        }
        else
        {
          v17 = v130;
          v16 = (unint64_t)v131;
          v42 = 0;
          v43 = (char *)(v3 - v22);
          if (v129)
          {
            while (1)
            {
              if (v22 <= (int)v3 + (int)v42)
                goto LABEL_281;
              v48 = *(unsigned __int8 *)(v24 + v3 + v42);
              v27 = v48 > 0x20;
              v49 = (1 << v48) & 0x100003600;
              if (v27 || v49 == 0)
                break;
              if (!&v43[++v42])
                goto LABEL_102;
            }
          }
          else
          {
            while (1)
            {
              if (v22 <= (int)v3 + (int)v42)
                goto LABEL_281;
              v44 = *(unsigned __int16 *)(v24 + 2 * v3 + 2 * v42);
              v27 = v44 > 0x20;
              v45 = (1 << v44) & 0x100003600;
              if (v27 || v45 == 0)
                break;
              if (!&v43[++v42])
                goto LABEL_102;
            }
          }
          v3 += v42;
        }
        if (v3 == v22)
        {
LABEL_102:
          if (v136)
            *(_DWORD *)v136 += 4;
          v139 = v41;
          v140 = v41;
          v141 = 1;
          goto LABEL_150;
        }
        if (v129)
        {
          if (v22 <= v3)
            goto LABEL_281;
          v47 = *(unsigned __int8 *)(v24 + v3);
        }
        else
        {
          if (v22 <= v3)
            goto LABEL_281;
          v47 = *(unsigned __int16 *)(v24 + 2 * v3);
        }
        if (v47 != 58)
          goto LABEL_149;
        v51 = v3 + 1;
        if (v22 > v3 + 1)
        {
          if (v129)
          {
            v56 = (unsigned __int8 *)(v24 + (v3 + 1));
            while (1)
            {
              if (v22 <= v51)
                goto LABEL_281;
              v57 = *v56;
              v27 = v57 > 0x20;
              v58 = (1 << v57) & 0x100003600;
              if (v27 || v58 == 0)
                break;
              ++v51;
              ++v56;
              if (v22 == v51)
                goto LABEL_149;
            }
          }
          else
          {
            v52 = (unsigned __int16 *)(v24 + 2 * (v3 + 1));
            while (1)
            {
              if (v22 <= v51)
                goto LABEL_281;
              v53 = *v52;
              v27 = v53 > 0x20;
              v54 = (1 << v53) & 0x100003600;
              if (v27 || v54 == 0)
                break;
              ++v51;
              ++v52;
              if (v22 == v51)
                goto LABEL_149;
            }
          }
        }
        if (v22 <= v51)
          goto LABEL_149;
        v60 = 0;
        v61 = v51 - v22;
        if (v129)
        {
          do
          {
            if (v22 <= (int)v51 + (int)v60)
              goto LABEL_281;
            v65 = *(unsigned __int8 *)(v24 + v51 + v60);
            v27 = v65 > 0x3A;
            v66 = (1 << v65) & 0x400000100003600;
            if (!v27 && v66 != 0)
              goto LABEL_147;
            ++v60;
          }
          while (v61 + v60);
LABEL_146:
          v3 = v22;
        }
        else
        {
          while (1)
          {
            if (v22 <= (int)v51 + (int)v60)
              goto LABEL_281;
            v62 = *(unsigned __int16 *)(v24 + 2 * v51 + 2 * v60);
            v27 = v62 > 0x3A;
            v63 = (1 << v62) & 0x400000100003600;
            if (!v27 && v63 != 0)
              break;
            ++v60;
            if (!(v61 + v60))
              goto LABEL_146;
          }
LABEL_147:
          v3 = v51 + v60;
        }
        if (v3 == v51)
        {
LABEL_149:
          LOBYTE(v139) = 0;
          v141 = 0;
          goto LABEL_150;
        }
        v128 = v136;
        if (v22 <= v51)
          goto LABEL_235;
        LODWORD(v109) = v3 - v51;
        if ((int)v22 - (int)v51 <= (v3 - v51))
        {
          v109 = v22;
          if ((_DWORD)v51)
          {
            LODWORD(v109) = v22 - v51;
            goto LABEL_228;
          }
        }
        else
        {
LABEL_228:
          v109 = v109;
          v110 = v22 - (unint64_t)v51;
          if (v129)
          {
            if (v110 < v109)
              goto LABEL_281;
            v109 = v109 | 0x100000000;
          }
          else if (v110 < v109)
          {
            goto LABEL_281;
          }
        }
        if ((v109 & 0x100000000) != 0)
LABEL_235:
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v111 = v136;
        v17 = v130;
        v16 = (unint64_t)v131;
        v41 = v128;
        v112 = v22 & 0x100000000;
        if (v22 > v3)
        {
          if (v129)
          {
            v112 = 0;
            while (1)
            {
              if (v22 <= (int)v3 + (int)v112)
                goto LABEL_281;
              v117 = *(unsigned __int8 *)(v24 + v3 + v112);
              v27 = v117 > 0x20;
              v118 = (1 << v117) & 0x100003600;
              if (v27 || v118 == 0)
                break;
              ++v112;
              if (!(v3 - v22 + v112))
                goto LABEL_257;
            }
          }
          else
          {
            while (1)
            {
              if (v22 <= (int)v3 + (int)v112)
                goto LABEL_281;
              v113 = *(unsigned __int16 *)(v24 + 2 * v3 + 2 * v112);
              v27 = v113 > 0x20;
              v114 = (1 << v113) & 0x100003600;
              if (v27 || v114 == 0)
                break;
              ++v112;
              if (!(v3 - v22 + v112))
                goto LABEL_257;
            }
          }
          v3 += v112;
        }
        if (v3 == v22)
        {
LABEL_257:
          if (v128)
            *(_DWORD *)v128 += 2;
          if (v111)
            *(_DWORD *)v111 += 2;
          v139 = v128;
          v140 = v111;
          v120 = 1;
        }
        else
        {
          v120 = 0;
          LOBYTE(v139) = 0;
        }
        v141 = v120;
        if (v111)
        {
          if (*(_DWORD *)v111 == 2)
          {
            v3 = (unint64_t)v131;
            WTF::StringImpl::destroy(v111, a2);
            v41 = v128;
            v17 = v130;
            v16 = (unint64_t)v131;
          }
          else
          {
            *(_DWORD *)v111 -= 2;
          }
        }
LABEL_150:
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            v3 = v16;
            v94 = v17;
            WTF::StringImpl::destroy(v41, a2);
            v17 = v94;
            v16 = v3;
          }
          else
          {
            *(_DWORD *)v41 -= 2;
          }
        }
        if (!v141)
          goto LABEL_219;
        v136 = v17;
        v137 = 1;
        v68 = v135;
        if (v135
          || (v3 = v16,
              v69 = v17,
              WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(&v135, 8u, 0), v17 = v69, v16 = v3, (v68 = v135) != 0))
        {
          v70 = *(_DWORD *)(v68 - 8);
        }
        else
        {
          v70 = 0;
        }
        v71 = 0;
        v72 = v139;
        v73 = *((_DWORD *)v139 + 4) >> 8;
        for (i = 1; ; ++i)
        {
          v75 = v73 & v70;
          v76 = v68 + 32 * v75;
          v77 = *(WTF::StringImpl **)v76;
          if (*(_QWORD *)v76 == -1)
          {
            v71 = (_QWORD *)(v68 + 32 * v75);
          }
          else
          {
            if (!v77)
            {
              if (v71)
              {
                *v71 = 0;
                v71[1] = v71 + 3;
                v71[2] = 1;
                --*(_DWORD *)(v135 - 16);
                v72 = v139;
                v76 = (uint64_t)v71;
              }
              if (v72)
                *(_DWORD *)v72 += 2;
              *(_QWORD *)v76 = v72;
              v78 = *(unsigned int *)(v76 + 20);
              v79 = *(WTF::StringImpl ***)(v76 + 8);
              if ((_DWORD)v78)
              {
                v80 = 8 * v78;
                do
                {
                  v81 = *v79;
                  *v79 = 0;
                  if (v81)
                  {
                    if (*(_DWORD *)v81 == 2)
                    {
                      v82 = v17;
                      WTF::StringImpl::destroy(v81, a2);
                      v17 = v82;
                      v16 = (unint64_t)v131;
                    }
                    else
                    {
                      *(_DWORD *)v81 -= 2;
                    }
                  }
                  ++v79;
                  v80 -= 8;
                }
                while (v80);
                v79 = *(WTF::StringImpl ***)(v76 + 8);
              }
              v83 = (void *)(v76 + 24);
              if (v79 != (WTF::StringImpl **)(v76 + 24))
              {
                if (v79)
                {
                  *(_QWORD *)(v76 + 8) = 0;
                  *(_DWORD *)(v76 + 16) = 0;
                  v122 = (WTF *)v79;
                  v123 = v16;
                  v124 = v17;
                  WTF::fastFree(v122, a2);
                  v17 = v124;
                  v16 = v123;
                  v83 = (void *)(v76 + 24);
                }
                *(_QWORD *)(v76 + 8) = v83;
              }
              v84 = v136;
              if (v136 == v17)
              {
                v3 = HIDWORD(v137);
                v86 = v16;
                v87 = v17;
                memcpy(v83, v17, 8 * HIDWORD(v137));
                v17 = v87;
                v16 = v86;
                v85 = v137;
              }
              else
              {
                v136 = v17;
                *(_QWORD *)(v76 + 8) = v84;
                v85 = v137;
                v3 = HIDWORD(v137);
                LODWORD(v137) = 1;
              }
              HIDWORD(v137) = 0;
              *(_DWORD *)(v76 + 16) = v85;
              *(_DWORD *)(v76 + 20) = v3;
              v88 = v135;
              if (v135)
                v89 = *(_DWORD *)(v135 - 12) + 1;
              else
                v89 = 1;
              *(_DWORD *)(v135 - 12) = v89;
              v90 = (*(_DWORD *)(v88 - 16) + v89);
              v91 = *(unsigned int *)(v88 - 4);
              if (v91 > 0x400)
              {
                if (v91 <= 2 * v90)
                {
LABEL_189:
                  v92 = v17;
                  v3 = v16;
                  v93 = (_DWORD)v91 << (6 * v89 >= (2 * v91));
                  goto LABEL_193;
                }
              }
              else if (3 * v91 <= 4 * v90)
              {
                if ((_DWORD)v91)
                  goto LABEL_189;
                v92 = v17;
                v3 = v16;
                v93 = 8;
LABEL_193:
                v76 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(&v135, v93, (WTF::StringImpl **)v76);
                v16 = v3;
                v17 = v92;
              }
LABEL_194:
              if (!v141)
                goto LABEL_281;
              v95 = (uint64_t *)(v76 + 8);
              v96 = *(unsigned int *)(v76 + 20);
              if ((_DWORD)v96 == *(_DWORD *)(v76 + 16))
              {
                v3 = v16;
                v116 = v17;
                WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString&>((uint64_t)v95, (unint64_t)&v140);
                v17 = v116;
                v16 = v3;
              }
              else
              {
                v97 = *v95;
                v98 = v140;
                if (v140)
                  *(_DWORD *)v140 += 2;
                *(_QWORD *)(v97 + 8 * v96) = v98;
                *(_DWORD *)(v76 + 20) = v96 + 1;
              }
              if (HIDWORD(v137))
              {
                v3 = (unint64_t)v136;
                v99 = 8 * HIDWORD(v137);
                do
                {
                  v100 = *(WTF::StringImpl **)v3;
                  *(_QWORD *)v3 = 0;
                  if (v100)
                  {
                    if (*(_DWORD *)v100 == 2)
                    {
                      v101 = v16;
                      v102 = v17;
                      WTF::StringImpl::destroy(v100, a2);
                      v17 = v102;
                      v16 = v101;
                    }
                    else
                    {
                      *(_DWORD *)v100 -= 2;
                    }
                  }
                  v3 += 8;
                  v99 -= 8;
                }
                while (v99);
              }
              v103 = v136;
              if (v17 != v136 && v136 != 0)
              {
                v136 = 0;
                LODWORD(v137) = 0;
                v3 = v16;
                v121 = v17;
                WTF::fastFree(v103, a2);
                v17 = v121;
                v16 = v3;
              }
              if (v141)
              {
                v105 = v140;
                v140 = 0;
                if (v105)
                {
                  if (*(_DWORD *)v105 == 2)
                  {
                    v3 = v16;
                    v107 = v17;
                    WTF::StringImpl::destroy(v105, a2);
                    v17 = v107;
                    v16 = v3;
                  }
                  else
                  {
                    *(_DWORD *)v105 -= 2;
                  }
                }
                v106 = v139;
                v139 = 0;
                if (v106)
                {
                  if (*(_DWORD *)v106 == 2)
                  {
                    v3 = v16;
                    v108 = v17;
                    WTF::StringImpl::destroy(v106, a2);
                    v17 = v108;
                    v16 = v3;
                  }
                  else
                  {
                    *(_DWORD *)v106 -= 2;
                  }
                }
              }
              break;
            }
            if (v77 == v139)
              goto LABEL_194;
          }
          v73 = i + v75;
        }
      }
    }
LABEL_219:
    if (v2 == (uint64_t *)v11)
      break;
    v14 = (char *)v2 + 1;
  }
  while ((unint64_t)v2 + 1 < v11);
  v3 = (unint64_t)this;
  v125 = v135;
  if (!*((_BYTE *)this + 240))
  {
    v2 = v134;
    v10 = (uint64_t)v132;
    goto LABEL_275;
  }
  v2 = v134;
  v126 = *v134;
  *v134 = v135;
  v10 = (uint64_t)v132;
  if (v126)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v126, a2);
LABEL_276:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      goto LABEL_282;
    *(_DWORD *)v10 -= 2;
  }
  while (!*(_BYTE *)(v3 + 240))
  {
LABEL_281:
    __break(1u);
LABEL_282:
    WTF::StringImpl::destroy((WTF::StringImpl *)v10, a2);
  }
  return v2;
}

uint64_t WebCore::ShadowRoot::invalidatePartMappings(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 240))
  {
    v2 = this;
    this = *(_QWORD *)(this + 232);
    if (this)
      this = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(this, a2);
    *(_BYTE *)(v2 + 240) = 0;
  }
  return this;
}

_QWORD *WebCore::assignedShadowRootsIfSlotted@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = this[4];
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 8) != 0)
    {
      v4 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL;
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 88);
        if (v5)
        {
          v6 = this;
          this = *(_QWORD **)(v5 + 224);
          if (this)
          {
            this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*this + 16))(this, v6);
            v7 = a2;
            if (this)
            {
              v8 = (WebCore::Node *)this;
              do
              {
                if ((*(_WORD *)(**((_QWORD **)v8 + 5) + 28) & 0x80) != 0)
                  v9 = **((_QWORD **)v8 + 5);
                else
                  v9 = 0;
                v10 = *(unsigned int *)(v7 + 12);
                if ((_DWORD)v10 == *(_DWORD *)(v7 + 8))
                {
                  WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShadowRoot&>(a2, v9);
                }
                else
                {
                  v11 = *(_QWORD *)a2;
                  *(_DWORD *)(v9 + 24) += 2;
                  *(_QWORD *)(v11 + 8 * v10) = v9;
                  *(_DWORD *)(a2 + 12) = v10 + 1;
                }
                this = (_QWORD *)WebCore::Node::assignedSlot(v8);
                v8 = (WebCore::Node *)this;
                v7 = a2;
              }
              while (this);
            }
          }
        }
      }
    }
  }
  return this;
}

WebCore::Node *WebCore::commonInclusiveAncestor<(WebCore::TreeType)2>(uint64_t *a1)
{
  WebCore::Node *v1;
  uint64_t v2;
  WebCore::Node *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v1 = (WebCore::Node *)*a1;
  v2 = a1[2];
  if (*a1 == v2)
    return v1;
  v5 = WebCore::depth<(WebCore::TreeType)2>(*a1);
  v6 = WebCore::depth<(WebCore::TreeType)2>(v2);
  v7 = v6 - v5;
  v8 = v5 >= v6;
  v9 = v5 - v6;
  if (v5 >= v6)
    v3 = v1;
  else
    v3 = (WebCore::Node *)v2;
  if (v8)
    v1 = (WebCore::Node *)v2;
  v10 = v8 ? v9 : v7;
  for (; v10; --v10)
    v3 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v3);
  if (v3 == v1)
    return v1;
  do
  {
    v3 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v3);
    v1 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v1);
  }
  while (v3 != v1);
  return v3;
}

BOOL WebCore::contains<(WebCore::TreeType)0>(int *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  void *v9;
  _BOOL8 v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v14;
  int v15;
  WebCore::Node *v16;
  int v17;
  char v18;

  v3 = a2[4];
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 + 24);
  v5 = a2[6] & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = 0;
    do
    {
      ++v6;
      v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(v3 + 24) = v4 + 6;
  v14 = (WebCore::Node *)v3;
  v15 = v6;
  v16 = (WebCore::Node *)v3;
  v17 = v6 + 1;
  v18 = 1;
  v7 = v4 + 4;
  if (v7)
  {
    *(_DWORD *)(v3 + 24) = v7;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  v8 = WebCore::treeOrder<(WebCore::TreeType)0>(a1, (uint64_t)&v14);
  v10 = 0;
  if (v8 != 129 && (char)v8 <= 0)
    v10 = (WebCore::treeOrder<(WebCore::TreeType)0>(a1 + 4, (uint64_t)&v16) & 0x80u) == 0;
  if (v18)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v9);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v9);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
  }
  return v10;
}

unsigned int *WebCore::makeRangeSelectingNode@<X0>(WebCore *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  unsigned int v5;
  uint64_t v6;
  int v7;

  result = (unsigned int *)*((_QWORD *)this + 4);
  if (result)
  {
    v5 = result[6];
    v6 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = 0;
      do
      {
        ++v7;
        v6 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    result[6] = v5 + 6;
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = result;
    *(_DWORD *)(a3 + 24) = v7 + 1;
    *(_BYTE *)(a3 + 32) = 1;
    if (v5 == -4)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] = v5 + 4;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

BOOL WebCore::contains<(WebCore::TreeType)2>(int *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  void *v9;
  _BOOL8 v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v14;
  int v15;
  WebCore::Node *v16;
  int v17;
  char v18;

  v3 = a2[4];
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 + 24);
  v5 = a2[6] & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = 0;
    do
    {
      ++v6;
      v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(v3 + 24) = v4 + 6;
  v14 = (WebCore::Node *)v3;
  v15 = v6;
  v16 = (WebCore::Node *)v3;
  v17 = v6 + 1;
  v18 = 1;
  v7 = v4 + 4;
  if (v7)
  {
    *(_DWORD *)(v3 + 24) = v7;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  v8 = WebCore::treeOrder<(WebCore::TreeType)2>(a1, (uint64_t)&v14);
  v10 = 0;
  if (v8 != 129 && (char)v8 <= 0)
    v10 = (WebCore::treeOrder<(WebCore::TreeType)2>(a1 + 4, (uint64_t)&v16) & 0x80u) == 0;
  if (v18)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v9);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v9);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
  }
  return v10;
}

uint64_t WebCore::intersects<(WebCore::TreeType)0>(int *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  void *v9;
  _BOOL8 v10;
  int v11;
  unsigned __int8 v12;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t v17;
  __int16 v18;
  WebCore::Node *v20;
  int v21;
  WebCore::Node *v22;
  int v23;
  unsigned __int8 v24;

  v3 = *(_QWORD *)(a2 + 32);
  if (!v3)
  {
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 != a2)
    {
      v18 = *(_WORD *)(a2 + 28);
      if ((v18 & 0xF000) == 0x9000)
      {
        if (**(_QWORD **)(v17 + 40) == a2 && (*(_WORD *)(v17 + 28) & 0xF000) != 0x9000)
          return (*(unsigned __int8 *)(v17 + 22) >> 3) & 1;
      }
      else if ((v18 & 4) != 0
             && *(_QWORD *)(a2 + 80)
             && ((*(unsigned __int8 *)(v17 + 22) ^ *(unsigned __int8 *)(a2 + 22)) & 8) == 0)
      {
        do
        {
          v17 = *(_QWORD *)(v17 + 32);
          v10 = v17 != 0;
        }
        while (v17 != a2 && v17 != 0);
        return v10;
      }
      return 0;
    }
    return 1;
  }
  v4 = *(_DWORD *)(v3 + 24);
  v5 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = 0;
    do
    {
      ++v6;
      v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(v3 + 24) = v4 + 6;
  v20 = (WebCore::Node *)v3;
  v21 = v6;
  v22 = (WebCore::Node *)v3;
  v23 = v6 + 1;
  v24 = 1;
  v7 = v4 + 4;
  if (v7)
  {
    *(_DWORD *)(v3 + 24) = v7;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, (void *)a2);
  }
  v8 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v20, (uint64_t)(a1 + 4));
  v10 = 0;
  v11 = v24;
  if (v8 == 129 || ((char)v8 & 0x80000000) == 0)
    goto LABEL_16;
  if (!v24)
  {
    __break(1u);
    return 1;
  }
  v12 = WebCore::treeOrder<(WebCore::TreeType)0>(a1, (uint64_t)&v22);
  v10 = v12 != 129 && (v12 & 0x80u) != 0;
  v11 = v24;
LABEL_16:
  if (v11)
  {
    v14 = v22;
    v22 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v9);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v9);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
  }
  return v10;
}

uint64_t WebCore::intersects<(WebCore::TreeType)2>(int *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  _BOOL8 v9;
  int v10;
  unsigned __int8 v11;
  WebCore::Node *v13;
  WebCore::Node *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v26;
  int v27;
  WebCore::Node *v28;
  int v29;
  unsigned __int8 v30;

  v3 = *(_QWORD *)(a2 + 32);
  if (!v3)
  {
    v16 = *(_QWORD *)a1;
    if (v16 != a2)
    {
      while (1)
      {
        v18 = (uint64_t *)(v16 + 32);
        v17 = *(_QWORD *)(v16 + 32);
        if (!v17
          || (*(_WORD *)(v17 + 28) & 8) == 0
          || (v19 = *(_QWORD *)(v17 + 72) & 0xFFFFFFFFFFFFLL) == 0
          || (v22 = *(_QWORD *)(v19 + 88)) == 0
          || (v23 = *(_QWORD *)(v22 + 224)) == 0
          || (v25 = a2,
              v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v16),
              a2 = v25,
              !v20))
        {
          if ((*(_WORD *)(v16 + 28) & 0x80) != 0)
          {
            v24 = *(_QWORD *)(v16 + 200);
            if (!v24)
              return 0;
            v18 = (uint64_t *)(v24 + 8);
          }
          v20 = *v18;
        }
        v9 = v20 != 0;
        v21 = v20 == a2 || v20 == 0;
        v16 = v20;
        if (v21)
          return v9;
      }
    }
    return 1;
  }
  v4 = *(_DWORD *)(v3 + 24);
  v5 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = 0;
    do
    {
      ++v6;
      v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(v3 + 24) = v4 + 6;
  v26 = (WebCore::Node *)v3;
  v27 = v6;
  v28 = (WebCore::Node *)v3;
  v29 = v6 + 1;
  v30 = 1;
  v7 = v4 + 4;
  if (v7)
  {
    *(_DWORD *)(v3 + 24) = v7;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  v8 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v26, (uint64_t)(a1 + 4));
  v9 = 0;
  v10 = v30;
  if (v8 == 129 || ((char)v8 & 0x80000000) == 0)
    goto LABEL_16;
  if (!v30)
  {
    __break(1u);
    return 1;
  }
  v11 = WebCore::treeOrder<(WebCore::TreeType)2>(a1, (uint64_t)&v28);
  v9 = v11 != 129 && (v11 & 0x80u) != 0;
  v10 = v30;
LABEL_16:
  if (v10)
  {
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    v14 = v26;
    v26 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
  }
  return v9;
}

uint64_t WebCore::SimpleRange::SimpleRange(uint64_t this, const WebCore::BoundaryPoint *a2, const WebCore::BoundaryPoint *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)a2;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  *(_QWORD *)this = v3;
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  v4 = *(_QWORD *)a3;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
  *(_QWORD *)(this + 16) = v4;
  *(_DWORD *)(this + 24) = *((_DWORD *)a3 + 2);
  return this;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)a2;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  *(_QWORD *)this = v3;
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  v4 = *(_QWORD *)a3;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
  *(_QWORD *)(this + 16) = v4;
  *(_DWORD *)(this + 24) = *((_DWORD *)a3 + 2);
  return this;
}

uint64_t WebCore::SimpleRange::SimpleRange(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 24) = *((_DWORD *)a3 + 2);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 24) = *((_DWORD *)a3 + 2);
  return result;
}

uint64_t WebCore::makeRangeSelectingNodeContents@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(this + 24) += 4;
  v3 = *(_WORD *)(this + 28);
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(this + 80);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 4);
  }
  else if ((v3 & 4) != 0 && (v4 = *(_QWORD *)(this + 80)) != 0)
  {
    LODWORD(v5) = 0;
    do
    {
      LODWORD(v5) = v5 + 1;
      v4 = *(_QWORD *)(v4 + 56);
    }
    while (v4);
  }
  else
  {
    LODWORD(v5) = 0;
  }
  *(_QWORD *)a2 = this;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = this;
  *(_DWORD *)(a2 + 24) = v5;
  return this;
}

WebCore::IntersectingNodeIterator *WebCore::IntersectingNodeIterator::IntersectingNodeIterator(WebCore::IntersectingNodeIterator *this, const WebCore::SimpleRange *a2)
{
  _QWORD *v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  int v17;
  int v18;

  v3 = *(_QWORD **)a2;
  v4 = *(_WORD *)(*(_QWORD *)a2 + 28);
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)a2;
  }
  else
  {
    if ((v4 & 4) == 0)
      goto LABEL_57;
    v5 = *((_DWORD *)a2 + 2);
    v6 = v3[10];
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = v5 - 1;
      do
      {
        v6 = *(_QWORD *)(v6 + 56);
        v9 = v8-- != 0;
        v10 = v9;
      }
      while (v6 && (v10 & 1) != 0);
    }
    if (!v6)
    {
LABEL_57:
      while (1)
      {
        v6 = v3[7];
        if (v6)
          break;
        v3 = (_QWORD *)v3[4];
        if (!v3)
        {
          v6 = 0;
          goto LABEL_19;
        }
      }
    }
  }
  *(_DWORD *)(v6 + 24) += 2;
LABEL_19:
  *(_QWORD *)this = v6;
  v11 = *((_QWORD *)a2 + 2);
  v12 = *(_WORD *)(v11 + 28);
  if ((v12 & 1) != 0)
  {
    while (1)
    {
      v13 = *(_QWORD *)(v11 + 56);
      if (v13)
        break;
      v11 = *(_QWORD *)(v11 + 32);
      if (!v11)
        goto LABEL_22;
    }
  }
  else
  {
    if ((v12 & 4) == 0)
      goto LABEL_58;
    v14 = *((_DWORD *)a2 + 6);
    v13 = *(_QWORD *)(v11 + 80);
    if (v14 && v13)
    {
      v15 = v14 - 1;
      do
      {
        v13 = *(_QWORD *)(v13 + 56);
        v9 = v15-- != 0;
        v16 = v9;
      }
      while (v13 && (v16 & 1) != 0);
    }
    if (!v13)
    {
LABEL_58:
      while (1)
      {
        v13 = *(_QWORD *)(v11 + 56);
        if (v13)
          break;
        v11 = *(_QWORD *)(v11 + 32);
        if (!v11)
        {
LABEL_22:
          v13 = 0;
          goto LABEL_34;
        }
      }
    }
  }
  *(_DWORD *)(v13 + 24) += 2;
LABEL_34:
  *((_QWORD *)this + 1) = v13;
  if (v6 != v13)
  {
    if (v6)
      return this;
    *(_QWORD *)this = 0;
    goto LABEL_47;
  }
  *(_QWORD *)this = 0;
  if (!v6)
  {
    *((_QWORD *)this + 1) = 0;
    return this;
  }
  v17 = *(_DWORD *)(v6 + 24);
  v18 = v17 - 2;
  if (v17 == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) != 0)
    {
      v18 = 2;
      goto LABEL_38;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)v6);
    v13 = *((_QWORD *)this + 1);
LABEL_47:
    *((_QWORD *)this + 1) = 0;
    if (!v13)
      return this;
    v18 = *(_DWORD *)(v13 + 24);
    v6 = v13;
    goto LABEL_39;
  }
  *(_DWORD *)(v6 + 24) = v18;
LABEL_38:
  *((_QWORD *)this + 1) = 0;
LABEL_39:
  if (v18 == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) = v18 - 2;
  }
  return this;
}

unsigned int *WebCore::IntersectingNodeIterator::enforceEndInvariant(unsigned int **this, void *a2)
{
  unsigned int *result;
  unsigned int *v4;
  int v5;
  int v6;

  result = *this;
  v4 = this[1];
  if (result == v4)
  {
    *this = 0;
    if (!result)
    {
      this[1] = 0;
      return result;
    }
    v5 = result[6] - 2;
    if (result[6] != 2)
    {
      result[6] = v5;
LABEL_5:
      this[1] = 0;
      goto LABEL_6;
    }
    if ((*((_WORD *)result + 15) & 0x400) != 0)
    {
      v5 = 2;
      goto LABEL_5;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    result = this[1];
  }
  else
  {
    if (result)
      return result;
    *this = 0;
    result = v4;
  }
  this[1] = 0;
  if (!result)
    return result;
  v5 = result[6];
LABEL_6:
  v6 = v5 - 2;
  if (v6)
  {
    result[6] = v6;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  return result;
}

_QWORD *WebCore::IntersectingNodeIterator::IntersectingNodeIterator(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  char v14;
  int v15;
  int v16;
  int v18;
  char v19;

  v3 = (_QWORD *)*a2;
  v4 = *(_WORD *)(*a2 + 28);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  v9 = *((_DWORD *)a2 + 2);
  if ((v4 & 4) != 0)
  {
    v5 = v3[10];
    if (v9)
      v10 = v5 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v18 = v9 - 1;
      do
      {
        v5 = *(_QWORD *)(v5 + 56);
        v13 = v18-- != 0;
        v19 = v13;
      }
      while (v5 && (v19 & 1) != 0);
    }
    if (v5)
      goto LABEL_3;
  }
  if (!v9)
  {
LABEL_2:
    v5 = *a2;
  }
  else
  {
    while (1)
    {
      v5 = v3[7];
      if (v5)
        break;
      v3 = (_QWORD *)v3[4];
      if (!v3)
      {
        v5 = 0;
        goto LABEL_4;
      }
    }
  }
LABEL_3:
  *(_DWORD *)(v5 + 24) += 2;
LABEL_4:
  *a1 = v5;
  v6 = a2[2];
  v7 = *(_WORD *)(v6 + 28);
  if ((v7 & 1) != 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)(v6 + 56);
      if (v8)
        break;
      v6 = *(_QWORD *)(v6 + 32);
      if (!v6)
        goto LABEL_7;
    }
  }
  else
  {
    if ((v7 & 4) == 0)
      goto LABEL_60;
    v11 = *((_DWORD *)a2 + 6);
    v8 = *(_QWORD *)(v6 + 80);
    if (v11 && v8)
    {
      v12 = v11 - 1;
      do
      {
        v8 = *(_QWORD *)(v8 + 56);
        v13 = v12-- != 0;
        v14 = v13;
      }
      while (v8 && (v14 & 1) != 0);
    }
    if (!v8)
    {
LABEL_60:
      while (1)
      {
        v8 = *(_QWORD *)(v6 + 56);
        if (v8)
          break;
        v6 = *(_QWORD *)(v6 + 32);
        if (!v6)
        {
LABEL_7:
          v8 = 0;
          goto LABEL_34;
        }
      }
    }
  }
  *(_DWORD *)(v8 + 24) += 2;
LABEL_34:
  a1[1] = v8;
  if (v5 != v8)
  {
    if (v5)
      return a1;
    *a1 = 0;
    goto LABEL_47;
  }
  *a1 = 0;
  if (!v5)
  {
    a1[1] = 0;
    return a1;
  }
  v15 = *(_DWORD *)(v5 + 24);
  v16 = v15 - 2;
  if (v15 == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) != 0)
    {
      v16 = 2;
      goto LABEL_38;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)v5);
    v8 = a1[1];
LABEL_47:
    a1[1] = 0;
    if (!v8)
      return a1;
    v16 = *(_DWORD *)(v8 + 24);
    v5 = v8;
    goto LABEL_39;
  }
  *(_DWORD *)(v5 + 24) = v16;
LABEL_38:
  a1[1] = 0;
LABEL_39:
  if (v16 == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) = v16 - 2;
  }
  return a1;
}

uint64_t WebCore::IntersectingNodeIterator::advance(WebCore::IntersectingNodeIterator *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)this;
  if ((*(_WORD *)(*(_QWORD *)this + 28) & 4) != 0 && (result = *(_QWORD *)(v2 + 80)) != 0
    || (result = *(_QWORD *)(v2 + 56)) != 0)
  {
LABEL_4:
    *(_DWORD *)(result + 24) += 2;
  }
  else
  {
    v7 = v2;
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 32);
      if (!v7)
        break;
      result = *(_QWORD *)(v7 + 56);
      if (result)
        goto LABEL_4;
    }
    result = 0;
  }
  *(_QWORD *)this = result;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
        result = *(_QWORD *)this;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 1);
  if (result == v4)
  {
    *(_QWORD *)this = 0;
    if (!result)
    {
      *((_QWORD *)this + 1) = 0;
      return result;
    }
    v5 = *(_DWORD *)(result + 24) - 2;
    if (*(_DWORD *)(result + 24) != 2)
    {
      *(_DWORD *)(result + 24) = v5;
LABEL_12:
      *((_QWORD *)this + 1) = 0;
      goto LABEL_13;
    }
    if ((*(_WORD *)(result + 30) & 0x400) != 0)
    {
      v5 = 2;
      goto LABEL_12;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)result);
    result = *((_QWORD *)this + 1);
  }
  else
  {
    if (result)
      return result;
    *(_QWORD *)this = 0;
    result = v4;
  }
  *((_QWORD *)this + 1) = 0;
  if (!result)
    return result;
  v5 = *(_DWORD *)(result + 24);
LABEL_13:
  v6 = v5 - 2;
  if (v6)
  {
    *(_DWORD *)(result + 24) = v6;
  }
  else if ((*(_WORD *)(result + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  return result;
}

unsigned int *WebCore::IntersectingNodeIterator::advanceSkippingChildren(WebCore::IntersectingNodeIterator *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *result;
  void *v10;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (v3 == v4)
    {
LABEL_15:
      v7 = 0;
      goto LABEL_24;
    }
    v5 = *(_WORD *)(v3 + 28);
    if ((v5 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v4 + 40) == v3 && (*(_WORD *)(v4 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(v4 + 22) & 8) != 0)
      {
        *(_QWORD *)this = 0;
        goto LABEL_25;
      }
    }
    else if ((v5 & 4) != 0
           && *(_QWORD *)(v3 + 80)
           && ((*(unsigned __int8 *)(v4 + 22) ^ *(unsigned __int8 *)(v3 + 22)) & 8) == 0)
    {
      do
        v4 = *(_QWORD *)(v4 + 32);
      while (v4 != v3 && v4 != 0);
      if (v4)
        goto LABEL_15;
    }
  }
  v7 = *(_QWORD *)(v3 + 56);
  if (!v7)
  {
    v8 = v3;
    do
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        goto LABEL_15;
      v7 = *(_QWORD *)(v8 + 56);
    }
    while (!v7);
  }
  *(_DWORD *)(v7 + 24) += 2;
LABEL_24:
  *(_QWORD *)this = v7;
  if (!v3)
    return WebCore::IntersectingNodeIterator::enforceEndInvariant((unsigned int **)this, a2);
LABEL_25:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  result = WebCore::IntersectingNodeIterator::enforceEndInvariant((unsigned int **)this, a2);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v10);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

BOOL WebCore::contains<(WebCore::TreeType)2>(int *a1, uint64_t a2)
{
  unsigned __int8 v4;
  _BOOL8 result;
  unsigned __int8 v6;

  if (!*(_BYTE *)(a2 + 16))
    return 0;
  v4 = WebCore::treeOrder<(WebCore::TreeType)2>(a1, a2);
  result = 0;
  if (v4 != 129 && (char)v4 <= 0)
  {
    v6 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)a2, (uint64_t)(a1 + 4));
    return v6 != 129 && (char)v6 < 1;
  }
  return result;
}

BOOL WebCore::contains(int a1, int *a2, int *a3)
{
  unsigned __int8 v5;
  _BOOL8 result;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  if (a1 == 2)
  {
    v8 = WebCore::treeOrder<(WebCore::TreeType)2>(a2, (uint64_t)a3);
    result = 0;
    if (v8 == 129 || (char)v8 > 0)
      return result;
    v7 = WebCore::treeOrder<(WebCore::TreeType)2>(a3, (uint64_t)(a2 + 4));
    return v7 != 129 && (char)v7 < 1;
  }
  if (a1 == 1)
  {
    v9 = WebCore::treeOrder<(WebCore::TreeType)1>(a2, (uint64_t)a3);
    result = 0;
    if (v9 == 129 || (char)v9 > 0)
      return result;
    v7 = WebCore::treeOrder<(WebCore::TreeType)1>(a3, (uint64_t)(a2 + 4));
    return v7 != 129 && (char)v7 < 1;
  }
  if (a1)
    return 0;
  v5 = WebCore::treeOrder<(WebCore::TreeType)0>(a2, (uint64_t)a3);
  result = 0;
  if (v5 != 129 && (char)v5 <= 0)
  {
    v7 = WebCore::treeOrder<(WebCore::TreeType)0>(a3, (uint64_t)(a2 + 4));
    return v7 != 129 && (char)v7 < 1;
  }
  return result;
}

BOOL WebCore::contains(int a1, int *a2, uint64_t a3)
{
  unsigned __int8 v5;
  _BOOL8 result;
  char v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  if (a1 == 2)
  {
    v8 = WebCore::treeOrder<(WebCore::TreeType)2>(a2, a3);
    result = 0;
    if (v8 != 129 && (char)v8 <= 0)
    {
      v7 = WebCore::treeOrder<(WebCore::TreeType)2>(a2 + 4, a3 + 16);
      return v7 >= 0;
    }
  }
  else if (a1 == 1)
  {
    v9 = WebCore::treeOrder<(WebCore::TreeType)1>(a2, a3);
    result = 0;
    if (v9 != 129 && (char)v9 <= 0)
    {
      v7 = WebCore::treeOrder<(WebCore::TreeType)1>(a2 + 4, a3 + 16);
      return v7 >= 0;
    }
  }
  else if (a1)
  {
    return 0;
  }
  else
  {
    v5 = WebCore::treeOrder<(WebCore::TreeType)0>(a2, a3);
    result = 0;
    if (v5 != 129 && (char)v5 <= 0)
    {
      v7 = WebCore::treeOrder<(WebCore::TreeType)0>(a2 + 4, a3 + 16);
      return v7 >= 0;
    }
  }
  return result;
}

BOOL WebCore::intersectsForTesting(int a1, int *a2, int *a3)
{
  unsigned __int8 v5;
  _BOOL8 result;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v10;

  switch(a1)
  {
    case 2:
      v8 = WebCore::treeOrder<(WebCore::TreeType)2>(a2, (uint64_t)(a3 + 4));
      if (v8 == 129 || (char)v8 > 0)
        return 0;
      v7 = WebCore::treeOrder<(WebCore::TreeType)2>(a3, (uint64_t)(a2 + 4));
      break;
    case 1:
      v10 = WebCore::treeOrder<(WebCore::TreeType)1>(a2, (uint64_t)(a3 + 4));
      result = 0;
      if (v10 == 129 || (char)v10 > 0)
        return result;
      v7 = WebCore::treeOrder<(WebCore::TreeType)1>(a3, (uint64_t)(a2 + 4));
      break;
    case 0:
      v5 = WebCore::treeOrder<(WebCore::TreeType)0>(a2, (uint64_t)(a3 + 4));
      result = 0;
      if (v5 == 129 || (char)v5 > 0)
        return result;
      v7 = WebCore::treeOrder<(WebCore::TreeType)0>(a3, (uint64_t)(a2 + 4));
      return v7 != 129 && (char)v7 < 1;
    default:
      return 0;
  }
  return v7 != 129 && (char)v7 < 1;
}

uint64_t WebCore::unionRange@<X0>(WebCore *this@<X0>, const WebCore::SimpleRange *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v7;
  WebCore *v9;
  uint64_t result;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  WebCore *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v7 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)a2, (uint64_t)this);
  if ((v7 & 0x80u) == 0 || v7 == 129)
    v9 = this;
  else
    v9 = a2;
  result = WebCore::treeOrder<(WebCore::TreeType)2>((int *)this + 4, (uint64_t)a2 + 16);
  v11 = result != 129;
  v12 = (result & 0x80u) != 0;
  v13 = !v11 || !v12;
  if (v11 && v12)
    v14 = a2;
  else
    v14 = this;
  if (v13)
    v15 = (char *)this + 16;
  else
    v15 = (char *)a2 + 16;
  v16 = *(_QWORD *)v9;
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(*(_QWORD *)v9 + 24) + 2;
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v9 + 2);
  v17 = *((_QWORD *)v14 + 2);
  *(_DWORD *)(v17 + 24) += 2;
  *(_QWORD *)(a3 + 16) = v17;
  *(_DWORD *)(a3 + 24) = *((_DWORD *)v15 + 2);
  return result;
}

uint64_t WebCore::intersection@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  _DWORD *v7;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;

  if (!*(_BYTE *)(result + 32)
    || !*(_BYTE *)(a2 + 32)
    || (v5 = result,
        result = WebCore::treeOrder<(WebCore::TreeType)2>((int *)result, a2 + 16),
        result == 129)
    || (char)result > 0
    || (result = WebCore::treeOrder<(WebCore::TreeType)2>((int *)a2, v5 + 16), result == 129)
    || (char)result >= 1)
  {
    v14 = 0;
    *(_BYTE *)a3 = 0;
LABEL_25:
    *(_BYTE *)(a3 + 32) = v14;
    return result;
  }
  if (*(_BYTE *)(v5 + 32) && *(_BYTE *)(a2 + 32))
  {
    result = WebCore::treeOrder<(WebCore::TreeType)2>((int *)v5, a2);
    v6 = (result & 0x80u) == 0 || result == 129;
    v7 = (_DWORD *)(v6 ? v5 : a2);
    if (*(_BYTE *)(v5 + 32) && *(_BYTE *)(a2 + 32))
    {
      result = WebCore::treeOrder<(WebCore::TreeType)2>((int *)(a2 + 16), v5 + 16);
      if ((result & 0x80u) == 0 || result == 129)
        v9 = (_DWORD *)(v5 + 16);
      else
        v9 = (_DWORD *)(a2 + 16);
      v10 = *(_QWORD *)v7;
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(*(_QWORD *)v7 + 24) + 2;
      v11 = v7[2];
      v12 = *(_QWORD *)v9;
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(*(_QWORD *)v9 + 24) + 2;
      v13 = v9[2];
      *(_QWORD *)a3 = v10;
      *(_DWORD *)(a3 + 8) = v11;
      *(_QWORD *)(a3 + 16) = v12;
      *(_DWORD *)(a3 + 24) = v13;
      v14 = 1;
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

BOOL WebCore::contains(int a1, int *a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  void *v11;
  _BOOL8 v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  int v16;
  WebCore::Node *v17;
  int v18;
  char v19;

  switch(a1)
  {
    case 2:
      return WebCore::contains<(WebCore::TreeType)2>(a2, a3);
    case 1:
      v5 = a3[4];
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 24);
        v7 = a3[6] & 0xFFFFFFFFFFFFLL;
        if (v7)
        {
          v8 = 0;
          do
          {
            ++v8;
            v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v7);
        }
        else
        {
          v8 = 0;
        }
        *(_DWORD *)(v5 + 24) = v6 + 6;
        v15 = (WebCore::Node *)v5;
        v16 = v8;
        v17 = (WebCore::Node *)v5;
        v18 = v8 + 1;
        v19 = 1;
        v9 = v6 + 4;
        if (v9)
        {
          *(_DWORD *)(v5 + 24) = v9;
        }
        else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
        }
        v10 = WebCore::treeOrder<(WebCore::TreeType)1>(a2, (uint64_t)&v15);
        v12 = 0;
        if (v10 != 129 && (char)v10 <= 0)
          v12 = (WebCore::treeOrder<(WebCore::TreeType)1>(a2 + 4, (uint64_t)&v17) & 0x80u) == 0;
        if (v19)
        {
          v13 = v17;
          v17 = 0;
          if (v13)
          {
            if (*((_DWORD *)v13 + 6) == 2)
            {
              if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v13, v11);
            }
            else
            {
              *((_DWORD *)v13 + 6) -= 2;
            }
          }
          v14 = v15;
          v15 = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 6) == 2)
            {
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v14, v11);
            }
            else
            {
              *((_DWORD *)v14 + 6) -= 2;
            }
          }
        }
        return v12;
      }
      break;
    case 0:
      return WebCore::contains<(WebCore::TreeType)0>(a2, a3);
  }
  return 0;
}

uint64_t WebCore::intersectsForTesting(int a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  void *v11;
  _BOOL8 v12;
  int v13;
  unsigned __int8 v14;
  WebCore::Node *v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;
  WebCore::Node *v22;
  int v23;
  WebCore::Node *v24;
  int v25;
  unsigned __int8 v26;

  if (a1 == 2)
    return WebCore::intersects<(WebCore::TreeType)2>(a2, a3);
  if (a1 != 1)
  {
    if (!a1)
      return WebCore::intersects<(WebCore::TreeType)0>(a2, a3);
    return 0;
  }
  v5 = *(_QWORD *)(a3 + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 24);
    v7 = *(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      v8 = 0;
      do
      {
        ++v8;
        v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
      }
      while (v7);
    }
    else
    {
      v8 = 0;
    }
    *(_DWORD *)(v5 + 24) = v6 + 6;
    v22 = (WebCore::Node *)v5;
    v23 = v8;
    v24 = (WebCore::Node *)v5;
    v25 = v8 + 1;
    v26 = 1;
    v9 = v6 + 4;
    if (v9)
    {
      *(_DWORD *)(v5 + 24) = v9;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    v10 = WebCore::treeOrder<(WebCore::TreeType)1>((int *)&v22, (uint64_t)(a2 + 4));
    v12 = 0;
    v13 = v26;
    if (v10 == 129 || ((char)v10 & 0x80000000) == 0)
      goto LABEL_21;
    if (v26)
    {
      v14 = WebCore::treeOrder<(WebCore::TreeType)1>(a2, (uint64_t)&v24);
      v12 = v14 != 129 && (v14 & 0x80u) != 0;
      v13 = v26;
LABEL_21:
      if (v13)
      {
        v16 = v24;
        v24 = 0;
        if (v16)
        {
          if (*((_DWORD *)v16 + 6) == 2)
          {
            if ((*((_WORD *)v16 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v16, v11);
          }
          else
          {
            *((_DWORD *)v16 + 6) -= 2;
          }
        }
        v17 = v22;
        v22 = 0;
        if (v17)
        {
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17, v11);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
        }
      }
      return v12;
    }
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != a3)
    {
      do
      {
        if ((*(_WORD *)(v18 + 28) & 0x80) != 0)
        {
          v21 = *(_QWORD *)(v18 + 200);
          if (!v21)
            return 0;
          v19 = (uint64_t *)(v21 + 8);
        }
        else
        {
          v19 = (uint64_t *)(v18 + 32);
        }
        v18 = *v19;
        v12 = v18 != 0;
      }
      while (v18 != a3 && v18 != 0);
      return v12;
    }
  }
  return 1;
}

BOOL WebCore::containsCrossingDocumentBoundaries(WebCore *this, const WebCore::SimpleRange *a2, WebCore::Node *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  while (1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8) == v3)
      break;
    v4 = *(_QWORD *)(v3 + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 120);
        if (v6)
        {
          a2 = *(const WebCore::SimpleRange **)(v6 + 8);
          if (a2)
            continue;
        }
      }
    }
    return 0;
  }
  return WebCore::contains<(WebCore::TreeType)2>((int *)this, a2);
}

uint64_t WebCore::simulateClick(WebCore *a1, uint64_t a2, int a3, int a4, int a5)
{
  void *v10;
  int v11;
  WebCore::Node *Ref;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  WebCore *v17;
  _BYTE v18[24];

  if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)a1 + 960))(a1) & 1) != 0)
    return 0;
  {
    WebCore::simulateClick(WebCore::Element &,WebCore::Event *,WebCore::SimulatedClickMouseEventOptions,WebCore::SimulatedClickVisualOptions,WebCore::SimulatedClickSource)::elementsDispatchingSimulatedClicks = 0;
  }
  *((_DWORD *)a1 + 6) += 2;
  v17 = a1;
  WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add(&WebCore::simulateClick(WebCore::Element &,WebCore::Event *,WebCore::SimulatedClickMouseEventOptions,WebCore::SimulatedClickVisualOptions,WebCore::SimulatedClickSource)::elementsDispatchingSimulatedClicks, (uint64_t *)&v17, (uint64_t)v18);
  v11 = v18[16];
  Ref = v17;
  v17 = 0;
  if (Ref)
  {
    if (*((_DWORD *)Ref + 6) == 2)
    {
      if ((*((_WORD *)Ref + 15) & 0x400) == 0)
        Ref = (WebCore::Node *)WebCore::Node::removedLastRef(Ref, v10);
    }
    else
    {
      *((_DWORD *)Ref + 6) -= 2;
    }
  }
  if (!v11)
    return 0;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow(Ref);
  v15 = *(_QWORD **)(v14 + 40);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v15 = *(_QWORD **)(v14 + 40);
  }
  if (a3)
  {
    WebCore::simulateMouseEvent(v15 + 151, a1, a2, a5);
    (*(void (**)(WebCore *, uint64_t, _QWORD))(*(_QWORD *)a1 + 520))(a1, 1, 0);
    WebCore::simulateMouseEvent(v15 + 157, a1, a2, a5);
  }
  else if (a4 == 1)
  {
    (*(void (**)(WebCore *, uint64_t, _QWORD))(*(_QWORD *)a1 + 520))(a1, 1, 0);
  }
  (*(void (**)(WebCore *, _QWORD, _QWORD))(*(_QWORD *)a1 + 520))(a1, 0, 0);
  WebCore::simulateMouseEvent(v15 + 50, a1, a2, a5);
  WTF::HashSet<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>(&WebCore::simulateClick(WebCore::Element &,WebCore::Event *,WebCore::SimulatedClickMouseEventOptions,WebCore::SimulatedClickVisualOptions,WebCore::SimulatedClickSource)::elementsDispatchingSimulatedClicks, a1);
  return 1;
}

uint64_t WebCore::simulateMouseEvent(_QWORD *a1, WebCore::Element *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  char v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  WebCore::MouseRelatedEvent *v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t result;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  double v25;
  const WebCore::LayoutPoint *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  int v38;
  int v39;
  double v40;
  int v41;
  uint64_t v42;

  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v10 = *(WTF **)(v9 + 112);
    if (v10)
    {
      v11 = 0;
      *(_DWORD *)v10 += 2;
      goto LABEL_5;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = 1;
LABEL_5:
  if (a3)
  {
    ++*(_DWORD *)(a3 + 16);
    v12 = bmalloc::api::isoAllocate();
    v13 = *(double *)(a3 + 56);
    v14 = a3;
    v42 = 0;
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 80))(v14) & 1) == 0
         && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) & 1) == 0)
    {
      v14 = *(_QWORD *)(v14 + 64);
      if (!v14)
        goto LABEL_10;
    }
    LOBYTE(v14) = *(_BYTE *)(v14 + 84);
  }
  else
  {
    v12 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
    v13 = v25;
    LOBYTE(v14) = 0;
    v42 = 0;
  }
LABEL_10:
  v15 = (WebCore::MouseRelatedEvent *)WebCore::Event::Event(v12, 76, a1, 1, 1, 1, a4 == 1, v13);
  *(_QWORD *)(v12 + 72) = v10;
  *(_DWORD *)(v12 + 80) = 0;
  *(_BYTE *)(v12 + 84) = v14;
  *(_QWORD *)v12 = off_1E33A5D38;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_WORD *)(v12 + 152) = 1;
  WebCore::MouseRelatedEvent::init(v15, 1, (const WebCore::IntPoint *)&v42);
  *(_DWORD *)(v12 + 154) = 0;
  *(_WORD *)(v12 + 158) = 256;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)v12 = off_1E33A7D78;
  if (a3)
  {
    v20 = a3;
    while (v20 != v12)
    {
      v20 = *(_QWORD *)(v20 + 64);
      if (!v20)
      {
        ++*(_DWORD *)(a3 + 16);
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v16 = *(_DWORD **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = a3;
    if (v16)
    {
      if (v16[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[4];
    }
  }
  v17 = *(_QWORD **)(v12 + 64);
  if (v17 && (*(unsigned int (**)(_QWORD))(*v17 + 88))(*(_QWORD *)(v12 + 64)))
  {
    *(_QWORD *)(v12 + 88) = v17[11];
    v26 = (const WebCore::LayoutPoint *)(v17 + 12);
  }
  else
  {
    if (a4 != 1)
      goto LABEL_16;
    v27 = WebCore::Element::screenRect(a2);
    if ((v28 & 0x80000000) == 0)
      v29 = v28;
    else
      v29 = v28 + 1;
    v30 = (v27 + (v29 >> 1));
    v31 = HIDWORD(v28);
    if ((v28 & 0x8000000000000000) != 0)
      LODWORD(v31) = HIDWORD(v28) + 1;
    *(_QWORD *)(v12 + 88) = v30 | ((unint64_t)(HIDWORD(v27) + ((int)v31 >> 1)) << 32);
    WebCore::Element::boundingClientRect(a2);
    v36 = v35 + (float)(v33 * 0.5);
    v37 = (float)(v34 + (float)(v32 * 0.5)) * 64.0;
    if (v37 > -2147483650.0)
      v38 = (int)v37;
    else
      v38 = 0x80000000;
    if (v37 < 2147483650.0)
      v39 = v38;
    else
      v39 = 0x7FFFFFFF;
    LODWORD(v42) = v39;
    v40 = v36 * 64.0;
    if (v40 >= 2147483650.0)
    {
      v41 = 0x7FFFFFFF;
    }
    else if (v40 <= -2147483650.0)
    {
      v41 = 0x80000000;
    }
    else
    {
      v41 = (int)v40;
    }
    HIDWORD(v42) = v41;
    v26 = (const WebCore::LayoutPoint *)&v42;
  }
  WebCore::MouseRelatedEvent::initCoordinates((WebCore::MouseRelatedEvent *)v12, v26);
LABEL_16:
  result = (*(uint64_t (**)(WebCore::Element *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v12);
  if (*(_DWORD *)(v12 + 16) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  else
    --*(_DWORD *)(v12 + 16);
  if (a3)
  {
    if (*(_DWORD *)(a3 + 16) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
    else
      --*(_DWORD *)(a3 + 16);
  }
  if ((v11 & 1) == 0)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v21 = (uint64_t *)*((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      if (v21)
      {
        if (*v21)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v21, v19);
        WTF::fastFree((WTF *)v21, v19);
      }
      v22 = (unsigned int *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v19);
        }
      }
      return WTF::fastFree(v10, v19);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  return result;
}

void WebCore::NamedSlotAssignment::~NamedSlotAssignment(WebCore::NamedSlotAssignment *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebCore::NamedSlotAssignment::Slot *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E33A7C10;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          v6 = v4[1];
          v4[1] = 0;
          if (v6)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v6, a2);
            WTF::fastFree(v7, v8);
            v5 = *v4;
          }
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::NamedSlotAssignment::Slot *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = off_1E33A7C10;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v7, a2);
            WTF::fastFree(v8, v9);
            v6 = *v5;
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::NamedSlotAssignment::findAssignedSlot(WebCore::NamedSlotAssignment *this, const WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if ((*((_WORD *)a2 + 14) & 0xA) == 0)
    return 0;
  v3 = (*(uint64_t (**)(WebCore::NamedSlotAssignment *))(*(_QWORD *)this + 120))(this);
  v4 = *((_QWORD *)this + 3);
  if (!v4)
    return 0;
  v5 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)v3 + 16) >> 8; ; i = ++v5 + v7)
  {
    v7 = i & *(_DWORD *)(v4 - 8);
    v8 = *(_QWORD *)(v4 + 16 * v7);
    if (v8 != -1)
    {
      if (!v8)
        return 0;
      if (v8 == *(_QWORD *)v3)
        break;
    }
  }
  v9 = *(uint64_t **)(v4 + 16 * v7 + 8);
  if (v9 && (v10 = *v9) != 0)
    return *(_QWORD *)(v10 + 8);
  else
    return 0;
}

unsigned int *WebCore::NamedSlotAssignment::renameSlotElement(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::StringImpl **a4, uint64_t a5)
{
  ++*(_DWORD *)(a1 + 12);
  WebCore::NamedSlotAssignment::removeSlotElementByName((_QWORD *)a1, a3, a2, 0, a5);
  return WebCore::NamedSlotAssignment::addSlotElementByName(a1, a4, a2, a5);
}

_QWORD *WebCore::NamedSlotAssignment::removeSlotElementByName(_QWORD *result, uint64_t *a2, uint64_t a3, WebCore::ShadowRoot *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  WebCore::ShadowRoot *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;

  v9 = (uint64_t)result;
  --*((_DWORD *)result + 5);
  v10 = *(_QWORD *)(a5 + 200);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      *(_DWORD *)(v11 + 24) += 2;
      result = (_QWORD *)WebCore::Node::invalidateStyle(v11, 4u, 2);
      if (!*(_DWORD *)(v9 + 20))
        *(_QWORD *)(v11 + 16) &= ~0x1000000000000000uLL;
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
  }
  v12 = *(_QWORD *)(v9 + 24);
  if (!v12)
    goto LABEL_52;
  v13 = 0;
  v14 = *a2;
  if (*a2 == *MEMORY[0x1E0CBF2F8])
    v14 = *MEMORY[0x1E0CBF3B8];
  for (i = *(_DWORD *)(v14 + 16) >> 8; ; i = ++v13 + v16)
  {
    v16 = i & *(_DWORD *)(v12 - 8);
    v17 = *(_QWORD *)(v12 + 16 * v16);
    if (v17 != -1)
    {
      if (!v17)
        goto LABEL_52;
      if (v17 == v14)
        break;
    }
  }
  v18 = *(uint64_t **)(v12 + 16 * v16 + 8);
  if (!v18 || (v19 = *((_DWORD *)v18 + 4)) == 0)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x195A41FE0);
  }
  v20 = v19 - 1;
  *((_DWORD *)v18 + 4) = v20;
  if (!v20)
  {
    v23 = *v18;
    *v18 = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr((unsigned int *)v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unsigned int *)v23));
      if (!v25)
      {
        atomic_store(1u, (unsigned int *)v23);
        v32 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v32)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v32));
        v33 = *(WTF **)(v23 + 16);
        if (v33)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          WTF::fastFree(v33, a2);
        }
        result = (_QWORD *)WTF::fastFree((WTF *)v23, a2);
      }
    }
    if (*(_BYTE *)(a5 + 193) && (*(_BYTE *)(a5 + 192) & 1) == 0)
    {
      v27 = *(_DWORD *)(v9 + 12);
      v26 = *(_DWORD *)(v9 + 16);
      if (!*(_BYTE *)(v9 + 8))
        result = (_QWORD *)WebCore::NamedSlotAssignment::assignSlots(v9, (WebCore::ShadowRoot *)a5);
      if (*((_DWORD *)v18 + 9) && v26 != v27 && !*(_BYTE *)(a3 + 112))
      {
        *(_BYTE *)(a3 + 112) = 1;
        return WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)a3, (WTF::StringImpl *)a2);
      }
    }
    return result;
  }
  v21 = *v18;
  if (a4)
  {
    if (!v21)
      goto LABEL_39;
  }
  else
  {
    if (!v21)
      goto LABEL_39;
    v22 = *(_QWORD *)(v21 + 8);
    if (v22 != a3)
      goto LABEL_34;
    if (!*(_BYTE *)(a3 + 112))
    {
      *(_BYTE *)(a3 + 112) = 1;
      result = WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)a3, (WTF::StringImpl *)a2);
      v21 = *v18;
      if (!*v18)
        goto LABEL_39;
    }
  }
  v22 = *(_QWORD *)(v21 + 8);
LABEL_34:
  if (v22)
  {
    if (*(_BYTE *)(v9 + 9))
      v28 = a4;
    else
      v28 = 0;
    result = (_QWORD *)WebCore::NamedSlotAssignment::resolveSlotsAfterSlotMutation(v9, (WebCore::ShadowRoot *)a5, a4 != 0, v28);
  }
LABEL_39:
  v29 = v18[1];
  if (v29 && *(_QWORD *)(v29 + 8) == a3)
  {
    if (*(_BYTE *)(a3 + 112))
    {
      v18[1] = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 112) = 1;
      result = WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)a3, (WTF::StringImpl *)a2);
      v29 = v18[1];
      v18[1] = 0;
      if (!v29)
        return result;
    }
    do
    {
      v30 = __ldaxr((unsigned int *)v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v29));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v29);
      v34 = *(unsigned int *)(v29 + 28);
      if ((_DWORD)v34)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v29 + 16), (WTF::StringImpl *)(*(_QWORD *)(v29 + 16) + 32 * v34));
      v35 = *(WTF **)(v29 + 16);
      if (v35)
      {
        *(_QWORD *)(v29 + 16) = 0;
        *(_DWORD *)(v29 + 24) = 0;
        WTF::fastFree(v35, a2);
      }
      return (_QWORD *)WTF::fastFree((WTF *)v29, a2);
    }
  }
  return result;
}

unsigned int *WebCore::NamedSlotAssignment::addSlotElementByName(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  WTF::StringImpl **v14;
  int v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  int i;
  unsigned int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;
  WebCore::NamedSlotAssignment::Slot *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  int v36;
  unsigned int *result;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v44;

  v8 = *(_QWORD *)(a4 + 200);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  *(_DWORD *)(v9 + 24) += 2;
  WebCore::Node::invalidateStyle(v9, 4u, 2);
  v10 = *(_DWORD *)(a1 + 20);
  if (!v10)
    *(_QWORD *)(v9 + 16) |= 0x1000000000000000uLL;
  v11 = v10 + 1;
  v13 = (uint64_t *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 20) = v11;
  if (*a2 == (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8])
    v14 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  else
    v14 = a2;
  if (v12
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 24), 8u, 0), (v12 = *v13) != 0))
  {
    v15 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = 0;
  v17 = *v14;
  v18 = *((_DWORD *)*v14 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v20 = v18 & v15;
    v21 = (WTF::StringImpl **)(v12 + 16 * v20);
    v22 = *v21;
    if (*v21 == (WTF::StringImpl *)-1)
    {
      v16 = (WTF::StringImpl **)(v12 + 16 * v20);
      goto LABEL_18;
    }
    if (!v22)
      break;
    if (v22 == v17)
      goto LABEL_38;
LABEL_18:
    v18 = i + v20;
  }
  if (v16)
  {
    *v16 = 0;
    v16[1] = 0;
    --*(_DWORD *)(*v13 - 16);
    v17 = *v14;
    v21 = v16;
  }
  if (v17)
    *(_DWORD *)v17 += 2;
  *v21 = v17;
  *(_BYTE *)(a1 + 8) = 0;
  v24 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_QWORD *)(v24 + 32) = 0;
  v25 = v21[1];
  v21[1] = (WTF::StringImpl *)v24;
  if (v25)
  {
    WebCore::NamedSlotAssignment::Slot::~Slot(v25, v23);
    WTF::fastFree(v26, v27);
  }
  v28 = *v13;
  if (*v13)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v13;
  if (*v13)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 <= 2 * v32)
    {
LABEL_34:
      v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
      goto LABEL_37;
    }
  }
  else if (3 * v33 <= 4 * v32)
  {
    if ((_DWORD)v33)
      goto LABEL_34;
    v34 = 8;
LABEL_37:
    v21 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 24), v34, v21);
  }
LABEL_38:
  v35 = v21[1];
  if (!*(_BYTE *)(a1 + 8))
    WebCore::NamedSlotAssignment::assignSlots(a1, (WebCore::ShadowRoot *)a4);
  v36 = *((_DWORD *)v35 + 4);
  *((_DWORD *)v35 + 4) = v36 + 1;
  if (v36)
  {
    result = (unsigned int *)WebCore::NamedSlotAssignment::resolveSlotsAfterSlotMutation(a1, (WebCore::ShadowRoot *)a4, 0, 0);
  }
  else
  {
    result = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a3);
    if (result)
    {
      do
        v39 = __ldaxr(result);
      while (__stlxr(v39 + 1, result));
    }
    v40 = *(_QWORD *)v35;
    *(_QWORD *)v35 = result;
    if (v40)
    {
      do
      {
        v41 = __ldaxr((unsigned int *)v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, (unsigned int *)v40));
      if (!v42)
      {
        atomic_store(1u, (unsigned int *)v40);
        v43 = *(unsigned int *)(v40 + 28);
        if ((_DWORD)v43)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v40 + 16), (WTF::StringImpl *)(*(_QWORD *)(v40 + 16) + 32 * v43));
        v44 = *(WTF **)(v40 + 16);
        if (v44)
        {
          *(_QWORD *)(v40 + 16) = 0;
          *(_DWORD *)(v40 + 24) = 0;
          WTF::fastFree(v44, v38);
        }
        result = (unsigned int *)WTF::fastFree((WTF *)v40, v38);
      }
    }
    if (*(_BYTE *)(a4 + 193) && (*(_BYTE *)(a4 + 192) & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 8))
        result = (unsigned int *)WebCore::NamedSlotAssignment::assignSlots(a1, (WebCore::ShadowRoot *)a4);
      if (*((_DWORD *)v35 + 9) && !*(_BYTE *)(a3 + 112))
      {
        *(_BYTE *)(a3 + 112) = 1;
        result = (unsigned int *)WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)a3, (WTF::StringImpl *)v38);
      }
    }
  }
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v9, v38);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::NamedSlotAssignment::assignSlots(uint64_t this, WebCore::ShadowRoot *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  WTF::StringImpl *v32;

  v3 = (_QWORD *)this;
  *(_BYTE *)(this + 8) = 1;
  v4 = *(_QWORD *)(this + 24);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (_QWORD *)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = *(_QWORD **)(this + 24);
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = *(_QWORD **)(this + 24);
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v7 = (_QWORD *)(v4 + 16 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (v4)
  {
LABEL_8:
    v9 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  while (v7 != v9)
  {
    v10 = v7[1];
    v11 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v10 + 24);
      v13 = &v12[v11];
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr((unsigned int *)v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, (unsigned int *)v14));
          if (!v16)
          {
            atomic_store(1u, (unsigned int *)v14);
            v17 = *(unsigned int *)(v14 + 28);
            if ((_DWORD)v17)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v17));
            v18 = *(WTF **)(v14 + 16);
            if (v18)
            {
              *(_QWORD *)(v14 + 16) = 0;
              *(_DWORD *)(v14 + 24) = 0;
              WTF::fastFree(v18, a2);
            }
            this = WTF::fastFree((WTF *)v14, a2);
          }
        }
        ++v12;
      }
      while (v12 != v13);
    }
    *(_DWORD *)(v10 + 36) = 0;
    v19 = v7 + 2;
    v7 = v6;
    if (v19 != v6)
    {
      v7 = v19;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  v20 = *((_QWORD *)a2 + 25);
  if (v20)
  {
    v27 = *(_QWORD *)(v20 + 8);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 80);
      if (v28)
      {
        *(_DWORD *)(v28 + 24) += 2;
        do
        {
          v29 = v28;
          if ((*(_WORD *)(v28 + 28) & 0xA) != 0)
          {
            v30 = *(WTF::StringImpl **)(*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 120))(v3, v28);
            if (v30)
            {
              *(_DWORD *)v30 += 2;
              v32 = v30;
              this = WebCore::NamedSlotAssignment::assignToSlot((uint64_t)v3, (WebCore::Node *)v29, &v32);
              if (*(_DWORD *)v30 == 2)
                this = WTF::StringImpl::destroy(v30, a2);
              else
                *(_DWORD *)v30 -= 2;
            }
            else
            {
              v32 = 0;
              this = WebCore::NamedSlotAssignment::assignToSlot((uint64_t)v3, (WebCore::Node *)v29, &v32);
            }
          }
          v28 = *(_QWORD *)(v29 + 56);
          if (v28)
            *(_DWORD *)(v28 + 24) += 2;
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v29, a2);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
        while (v28);
      }
    }
  }
  v21 = (_QWORD *)v3[3];
  if (v21)
  {
    v22 = *((unsigned int *)v21 - 1);
    v23 = &v21[2 * v22];
    if (*((_DWORD *)v21 - 3))
    {
      v24 = v21;
      if ((_DWORD)v22)
      {
        v25 = 16 * v22;
        v24 = v21;
        while ((unint64_t)(*v24 + 1) <= 1)
        {
          v24 += 2;
          v25 -= 16;
          if (!v25)
          {
            v24 = v23;
            goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
    v24 = &v21[2 * v22];
  }
  else
  {
    v24 = 0;
    v22 = 0;
  }
  v23 = &v21[2 * v22];
  if (v21)
  {
LABEL_40:
    v26 = &v21[2 * *((unsigned int *)v21 - 1)];
    goto LABEL_62;
  }
  v26 = 0;
LABEL_62:
  while (v24 != v26)
  {
    this = WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v24[1] + 24, *(unsigned int *)(v24[1] + 36));
    v31 = v24 + 2;
    v24 = v23;
    if (v31 != v23)
    {
      v24 = v31;
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        v24 += 2;
        if (v24 == v23)
        {
          v24 = v23;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::NamedSlotAssignment::resolveSlotsAfterSlotMutation(uint64_t this, WebCore::ShadowRoot *a2, int a3, WebCore::ShadowRoot *a4)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::ShadowRoot *v13;
  WebCore::ShadowRoot *v14;
  WebCore::ShadowRoot *v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  WebCore::ShadowRoot *v66;
  WebCore::ShadowRoot *v67;
  __int16 v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  WTF *v72;
  int v73;
  int v74;
  uint64_t v75;

  v4 = *(_DWORD *)(this + 12);
  if (*(_DWORD *)(this + 16) == v4)
    return this;
  v6 = this;
  *(_DWORD *)(this + 16) = v4;
  v7 = *(_QWORD **)(this + 24);
  if (v7)
  {
    v8 = *((unsigned int *)v7 - 1);
    v9 = &v7[2 * v8];
    if (*((_DWORD *)v7 - 3))
    {
      v10 = *(_QWORD **)(this + 24);
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = *(_QWORD **)(this + 24);
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v10 = &v7[2 * v8];
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = &v7[2 * v8];
LABEL_13:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  while (v10 != v7)
  {
    *(_BYTE *)(v10[1] + 20) = 0;
    v12 = v10 + 2;
    v10 = v9;
    if (v12 != v9)
    {
      v10 = v12;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  if (a4 == a2)
  {
    v13 = (WebCore::ShadowRoot *)*((_QWORD *)a4 + 7);
    v14 = a4;
    if (v13)
      goto LABEL_28;
    goto LABEL_26;
  }
  if ((*((_WORD *)a2 + 14) & 4) == 0 || (v13 = (WebCore::ShadowRoot *)*((_QWORD *)a2 + 10)) == 0)
  {
    v13 = (WebCore::ShadowRoot *)*((_QWORD *)a2 + 7);
    v14 = a2;
    if (!v13)
    {
LABEL_26:
      while (1)
      {
        v14 = (WebCore::ShadowRoot *)*((_QWORD *)v14 + 4);
        if (!v14)
          break;
        v13 = (WebCore::ShadowRoot *)*((_QWORD *)v14 + 7);
        if (v13)
          goto LABEL_28;
      }
LABEL_38:
      v17 = 0;
      goto LABEL_39;
    }
  }
LABEL_28:
  while (1)
  {
    v15 = v13;
    v16 = *((_WORD *)v13 + 14);
    if ((v16 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v15 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      break;
    if (v15 == a4)
    {
      v13 = (WebCore::ShadowRoot *)*((_QWORD *)a4 + 7);
      v15 = a4;
      if (!v13)
      {
LABEL_37:
        v15 = (WebCore::ShadowRoot *)*((_QWORD *)v15 + 4);
        if (!v15)
          goto LABEL_38;
        goto LABEL_36;
      }
    }
    else if ((v16 & 4) == 0 || (v13 = (WebCore::ShadowRoot *)*((_QWORD *)v15 + 10)) == 0)
    {
LABEL_36:
      v13 = (WebCore::ShadowRoot *)*((_QWORD *)v15 + 7);
      if (!v13)
        goto LABEL_37;
    }
  }
  v75 = (uint64_t)v15;
  v73 = a3;
  v74 = 0;
  v40 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  v41 = (uint64_t *)MEMORY[0x1E0CBF3B8];
LABEL_88:
  v42 = *(_QWORD *)(v75 + 104);
  if (!v42
    || ((v43 = *(unsigned int *)(v42 + 4), (v43 & 1) != 0)
      ? (v44 = *(_QWORD *)(v42 + 40), v45 = *(unsigned int *)(v42 + 52))
      : (v44 = v42 + 32, v45 = v43 >> 5),
        !v45))
  {
LABEL_100:
    v46 = v40;
    goto LABEL_101;
  }
  v46 = (uint64_t *)(v44 + 8);
  while (2)
  {
    v47 = *(v46 - 1);
    if (v47 != WebCore::HTMLNames::nameAttr
      && (*(_QWORD *)(v47 + 24) != *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
       || *(_QWORD *)(v47 + 32) != *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32)))
    {
      v46 += 2;
      if (--v45)
        continue;
      goto LABEL_100;
    }
    break;
  }
LABEL_101:
  v48 = *(_QWORD *)(v6 + 24);
  if (v48)
  {
    v49 = 0;
    v50 = *v46;
    if (*v46 == *v40)
      v50 = *v41;
    v51 = *(_DWORD *)(v50 + 16) >> 8;
    while (2)
    {
      v52 = v51 & *(_DWORD *)(v48 - 8);
      v53 = *(_QWORD *)(v48 + 16 * v52);
      if (v53 == -1)
      {
LABEL_108:
        v51 = ++v49 + v52;
        continue;
      }
      break;
    }
    if (v53)
    {
      if (v53 != v50)
        goto LABEL_108;
      v54 = *(uint64_t **)(v48 + 16 * v52 + 8);
      if (v54)
      {
        if (*((_BYTE *)v54 + 20))
        {
          if (!v73)
          {
            v55 = v54[1];
            v56 = v55 ? *(_QWORD *)(v55 + 8) : 0;
            if (v56 == v75)
            {
              if (!*(_BYTE *)(v75 + 112))
              {
                *(_BYTE *)(v75 + 112) = 1;
                this = (uint64_t)WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)v75, a2);
                v55 = v54[1];
              }
              v54[1] = 0;
              if (v55)
              {
                do
                {
                  v65 = __ldaxr((unsigned int *)v55);
                  v64 = --v65 == 0;
                }
                while (__stlxr(v65, (unsigned int *)v55));
LABEL_138:
                if (v64)
                {
                  atomic_store(1u, (unsigned int *)v55);
                  v69 = *(unsigned int *)(v55 + 28);
                  if ((_DWORD)v69)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v55 + 16), (WTF::StringImpl *)(*(_QWORD *)(v55 + 16) + 32 * v69));
                  v70 = *(WTF **)(v55 + 16);
                  if (v70)
                  {
                    *(_QWORD *)(v55 + 16) = 0;
                    *(_DWORD *)(v55 + 24) = 0;
                    WTF::fastFree(v70, a2);
                  }
                  this = WTF::fastFree((WTF *)v55, a2);
                }
              }
            }
          }
        }
        else
        {
          *((_BYTE *)v54 + 20) = 1;
          v57 = *v54;
          if (*v54)
            v57 = *(_QWORD *)(v57 + 8);
          ++v74;
          if (v57 != v75)
          {
            if (*((_BYTE *)a2 + 193) && (*((_BYTE *)a2 + 192) & 1) == 0)
            {
              if (!*(_BYTE *)(v6 + 8))
                WebCore::NamedSlotAssignment::assignSlots(v6, a2);
              if (*((_DWORD *)v54 + 9))
              {
                v58 = *v54;
                v59 = v54[1];
                *v54 = 0;
                v54[1] = v58;
                if (v59)
                {
                  do
                  {
                    v60 = __ldaxr((unsigned int *)v59);
                    v61 = v60 - 1;
                  }
                  while (__stlxr(v61, (unsigned int *)v59));
                  if (!v61)
                  {
                    atomic_store(1u, (unsigned int *)v59);
                    v71 = *(unsigned int *)(v59 + 28);
                    if ((_DWORD)v71)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v59 + 16), (WTF::StringImpl *)(*(_QWORD *)(v59 + 16) + 32 * v71));
                    v72 = *(WTF **)(v59 + 16);
                    if (v72)
                    {
                      *(_QWORD *)(v59 + 16) = 0;
                      *(_DWORD *)(v59 + 24) = 0;
                      WTF::fastFree(v72, a2);
                    }
                    WTF::fastFree((WTF *)v59, a2);
                  }
                }
                if (!*(_BYTE *)(v75 + 112))
                {
                  *(_BYTE *)(v75 + 112) = 1;
                  WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)v75, a2);
                }
              }
            }
            this = WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v75);
            if (this)
            {
              do
                v62 = __ldaxr((unsigned int *)this);
              while (__stlxr(v62 + 1, (unsigned int *)this));
            }
            v55 = *v54;
            *v54 = this;
            if (v55)
            {
              do
              {
                v63 = __ldaxr((unsigned int *)v55);
                v64 = --v63 == 0;
              }
              while (__stlxr(v63, (unsigned int *)v55));
              goto LABEL_138;
            }
          }
        }
      }
    }
  }
  if ((WebCore::ShadowRoot *)v75 == a4)
  {
    v66 = (WebCore::ShadowRoot *)*((_QWORD *)a4 + 7);
    v75 = (uint64_t)a4;
    if (v66)
      goto LABEL_146;
    goto LABEL_144;
  }
  if ((*(_WORD *)(v75 + 28) & 4) != 0)
  {
    v66 = *(WebCore::ShadowRoot **)(v75 + 80);
    if (v66)
      goto LABEL_146;
  }
  while (2)
  {
    v66 = *(WebCore::ShadowRoot **)(v75 + 56);
    if (!v66)
    {
LABEL_144:
      v75 = *(_QWORD *)(v75 + 32);
      if (v75)
        continue;
      goto LABEL_167;
    }
    break;
  }
  do
  {
LABEL_146:
    while (2)
    {
      v67 = v66;
      v68 = *((_WORD *)v66 + 14);
      if ((v68 & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v67 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        v75 = (uint64_t)v67;
        goto LABEL_88;
      }
      if (v67 == a4)
      {
        v67 = a4;
      }
      else if ((v68 & 4) != 0)
      {
        v66 = (WebCore::ShadowRoot *)*((_QWORD *)v67 + 10);
        if (v66)
          continue;
      }
      break;
    }
    v66 = (WebCore::ShadowRoot *)*((_QWORD *)v67 + 7);
  }
  while (v66);
  while (1)
  {
    v67 = (WebCore::ShadowRoot *)*((_QWORD *)v67 + 4);
    if (!v67)
      break;
    v66 = (WebCore::ShadowRoot *)*((_QWORD *)v67 + 7);
    if (v66)
      goto LABEL_146;
  }
LABEL_167:
  a3 = v73;
  v17 = v74;
LABEL_39:
  v18 = *(_QWORD *)(v6 + 24);
  if (!v18)
  {
    if (!a3 || !v17)
      return this;
    v22 = 0;
    v20 = 0;
LABEL_52:
    v21 = (_QWORD *)(v18 + 16 * v20);
    goto LABEL_53;
  }
  if (!a3)
    return this;
  v19 = *(_DWORD *)(v18 - 12);
  if (v17 == v19)
    return this;
  v20 = *(unsigned int *)(v18 - 4);
  v21 = (_QWORD *)(v18 + 16 * v20);
  if (!v19)
  {
    v22 = (_QWORD *)(v18 + 16 * v20);
    goto LABEL_52;
  }
  v22 = *(_QWORD **)(v6 + 24);
  if ((_DWORD)v20)
  {
    v23 = 16 * v20;
    v22 = *(_QWORD **)(v6 + 24);
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      v22 += 2;
      v23 -= 16;
      if (!v23)
      {
        v22 = v21;
        break;
      }
    }
  }
LABEL_53:
  if (v18)
    v24 = (_QWORD *)(v18 + 16 * *(unsigned int *)(v18 - 4));
  else
    v24 = 0;
  while (v22 != v24)
  {
    v25 = v22[1];
    if (!*(_BYTE *)(v25 + 20) && *(_DWORD *)(v25 + 16))
    {
      *(_BYTE *)(v25 + 20) = 1;
      if (!*(_BYTE *)(v6 + 8))
        this = WebCore::NamedSlotAssignment::assignSlots(v6, a2);
      if (*(_DWORD *)(v25 + 36))
      {
        v26 = (uint64_t *)v22[1];
        v27 = *v26;
        v28 = v26[1];
        *v26 = 0;
        v26[1] = v27;
        if (v28)
        {
          do
          {
            v29 = __ldaxr((unsigned int *)v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, (unsigned int *)v28));
          if (!v30)
          {
            atomic_store(1u, (unsigned int *)v28);
            v38 = *(unsigned int *)(v28 + 28);
            if ((_DWORD)v38)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v38));
            v39 = *(WTF **)(v28 + 16);
            if (v39)
            {
              *(_QWORD *)(v28 + 16) = 0;
              *(_DWORD *)(v28 + 24) = 0;
              WTF::fastFree(v39, a2);
            }
            this = WTF::fastFree((WTF *)v28, a2);
          }
        }
      }
      v31 = (uint64_t *)v22[1];
      v32 = *v31;
      *v31 = 0;
      if (v32)
      {
        do
        {
          v33 = __ldaxr((unsigned int *)v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, (unsigned int *)v32));
        if (!v34)
        {
          atomic_store(1u, (unsigned int *)v32);
          v36 = *(unsigned int *)(v32 + 28);
          if ((_DWORD)v36)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v36));
          v37 = *(WTF **)(v32 + 16);
          if (v37)
          {
            *(_QWORD *)(v32 + 16) = 0;
            *(_DWORD *)(v32 + 24) = 0;
            WTF::fastFree(v37, a2);
          }
          this = WTF::fastFree((WTF *)v32, a2);
        }
      }
    }
    v35 = v22 + 2;
    v22 = v21;
    if (v35 != v21)
    {
      v22 = v35;
      while ((unint64_t)(*v22 + 1) <= 1)
      {
        v22 += 2;
        if (v22 == v21)
        {
          v22 = v21;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::NamedSlotAssignment::slotFallbackDidChange(uint64_t *result, uint64_t a2, WebCore::ShadowRoot *a3)
{
  WTF::StringImpl *v4;

  if (*((_BYTE *)a3 + 193))
  {
    result = WebCore::NamedSlotAssignment::assignedNodesForSlot((uint64_t)result, a2, a3);
    if (!result && !*(_BYTE *)(a2 + 112))
    {
      *(_BYTE *)(a2 + 112) = 1;
      return WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)a2, v4);
    }
  }
  return result;
}

uint64_t *WebCore::NamedSlotAssignment::assignedNodesForSlot(uint64_t a1, uint64_t a2, WebCore::ShadowRoot *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int i;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)(a2 + 104);
  if (!v4)
  {
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (uint64_t *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::nameAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    v11 = 0;
    v12 = *v8;
    if (v12 == *MEMORY[0x1E0CBF2F8])
      v12 = *MEMORY[0x1E0CBF3B8];
    for (i = *(_DWORD *)(v12 + 16) >> 8; ; i = v11 + v14)
    {
      v14 = i & *(_DWORD *)(v10 - 8);
      v15 = *(_QWORD *)(v10 + 16 * v14);
      if (v15 != -1)
      {
        if (!v15)
          goto LABEL_21;
        if (v15 == v12)
          break;
      }
      ++v11;
    }
    v16 = *(uint64_t **)(v10 + 16 * v14 + 8);
  }
  else
  {
LABEL_21:
    v16 = 0;
  }
  if ((*((_BYTE *)a3 + 22) & 8) == 0 || (v17 = 0, (*(_BYTE *)(a2 + 22) & 8) != 0) && !*(_BYTE *)(a2 + 113))
  {
    if (!v16)
      goto LABEL_38;
    if (!*(_BYTE *)(a1 + 8))
      WebCore::NamedSlotAssignment::assignSlots(a1, a3);
    if (!*((_DWORD *)v16 + 9))
      return 0;
    v18 = *((_DWORD *)v16 + 4);
    if (v18 == 1)
      return v16 + 3;
    if (!v18)
    {
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195A43044);
    }
    v17 = *v16;
    if (*v16)
    {
      if (*(_QWORD *)(v17 + 8) != a2)
        return 0;
      return v16 + 3;
    }
  }
  return (uint64_t *)v17;
}

unsigned int *WebCore::NamedSlotAssignment::didChangeSlot(unsigned int *this, const WTF::AtomString *a2, WebCore::ShadowRoot *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WebCore::Node *ElementSibling;
  WebCore::Element *v19;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v5 = (uint64_t)this;
    v6 = 0;
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == *MEMORY[0x1E0CBF2F8])
      v7 = *MEMORY[0x1E0CBF3B8];
    for (i = *(_DWORD *)(v7 + 16) >> 8; ; i = v6 + v9)
    {
      v9 = i & *(_DWORD *)(v3 - 8);
      v10 = *(_QWORD *)(v3 + 16 * v9);
      if (v10 != -1)
      {
        if (!v10)
          return this;
        if (v10 == v7)
          break;
      }
      ++v6;
    }
    v11 = *(_QWORD *)(v3 + 16 * v9 + 8);
    if (v11)
    {
      v12 = *((_QWORD *)a3 + 25);
      if (v12)
        v13 = *(_QWORD *)(v12 + 8);
      else
        v13 = 0;
      *(_DWORD *)(v13 + 24) += 2;
      WebCore::RenderTreeUpdater::tearDownRenderers((WebCore *)v13, 1);
      WebCore::Node::invalidateStyle(v13, 4u, 0);
      if ((*(_BYTE *)(v13 + 71) & 1) != 0)
      {
        v17 = *(_QWORD *)(v13 + 32);
        if (!v17 || (*(_WORD *)(v17 + 28) & 8) == 0 || (*(_BYTE *)(v17 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v13);
          WebCore::invalidateForSiblingCombinators(ElementSibling, v19);
        }
      }
      this = (unsigned int *)WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v11 + 24, 0);
      *(_BYTE *)(v5 + 8) = 0;
      if (*(_QWORD *)v11)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v11 + 8);
        if (v15)
        {
          v16 = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = v16 + 2;
          if (*((_BYTE *)a3 + 193) && (*((_BYTE *)a3 + 192) & 1) == 0 && !*(_BYTE *)(v15 + 112))
          {
            *(_BYTE *)(v15 + 112) = 1;
            this = (unsigned int *)WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)v15, v14);
            v16 = *(_DWORD *)(v15 + 24) - 2;
          }
          if (v16)
          {
            *(_DWORD *)(v15 + 24) = v16;
          }
          else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          {
            this = WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
          }
        }
      }
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::NamedSlotAssignment::didRemoveAllChildrenOfShadowHost(WebCore::NamedSlotAssignment *this, WebCore::ShadowRoot *a2)
{
  return WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, MEMORY[0x1E0CBF2F8], a2);
}

unsigned int *WebCore::NamedSlotAssignment::didMutateTextNodesOfShadowHost(WebCore::NamedSlotAssignment *this, WebCore::ShadowRoot *a2)
{
  return WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, MEMORY[0x1E0CBF2F8], a2);
}

unsigned int *WebCore::NamedSlotAssignment::hostChildElementDidChange(WebCore::NamedSlotAssignment *this, const WebCore::Element *a2, WebCore::ShadowRoot *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::AtomString *v7;
  uint64_t v8;

  v3 = *((_QWORD *)a2 + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    return WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, v7, a3);
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (const WTF::AtomString *)(v5 + 8);
  while (1)
  {
    v8 = *((_QWORD *)v7 - 1);
    if (v8 == WebCore::HTMLNames::slotAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::slotAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::slotAttr + 32))
    {
      break;
    }
    v7 = (const WTF::AtomString *)((char *)v7 + 16);
    if (!--v6)
    {
      v7 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      return WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, v7, a3);
    }
  }
  return WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, v7, a3);
}

void WebCore::NamedSlotAssignment::hostChildElementDidChangeSlotAttribute(WebCore::NamedSlotAssignment *this, WebCore::Element *a2, const WTF::AtomString *a3, const WTF::AtomString *a4, WebCore::ShadowRoot *a5)
{
  WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, a3, a5);
  WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, a4, a5);
  WebCore::RenderTreeUpdater::tearDownRenderers(a2, 0);
}

_BYTE *WebCore::NamedSlotAssignment::willRemoveAssignedNode(_BYTE *this, const WebCore::Node *a2, WebCore::ShadowRoot *a3)
{
  _BYTE *v4;
  void *v5;
  uint64_t v6;
  int v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *j;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _QWORD *v20;

  if (this[8])
  {
    if ((*((_WORD *)a2 + 14) & 0xA) != 0)
    {
      v4 = this;
      this = (_BYTE *)(*(uint64_t (**)(_BYTE *, const WebCore::Node *, WebCore::ShadowRoot *))(*(_QWORD *)this + 120))(this, a2, a3);
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
      {
        v7 = 0;
        for (i = *(_DWORD *)(*(_QWORD *)this + 16) >> 8; ; i = v7 + v9)
        {
          v9 = i & *(_DWORD *)(v6 - 8);
          v10 = *(_QWORD *)(v6 + 16 * v9);
          if (v10 != -1)
          {
            if (!v10)
              return this;
            if (v10 == *(_QWORD *)this)
              break;
          }
          ++v7;
        }
        v11 = *(_QWORD *)(v6 + 16 * v9 + 8);
        if (v11)
        {
          v12 = *(unsigned int *)(v11 + 36);
          if ((_DWORD)v12)
          {
            for (j = *(_QWORD **)(v11 + 24); ; ++j)
            {
              v14 = *j;
              if (*j)
              {
                if (*(const WebCore::Node **)(v14 + 8) == a2)
                  break;
              }
              if (!--v12)
                return this;
            }
            *j = 0;
            do
            {
              v15 = __ldaxr((unsigned int *)v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, (unsigned int *)v14));
            if (!v16)
            {
              v20 = j;
              atomic_store(1u, (unsigned int *)v14);
              v17 = v14;
              v18 = *(unsigned int *)(v14 + 28);
              if ((_DWORD)v18)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v18));
              v19 = *(WTF **)(v17 + 16);
              if (v19)
              {
                *(_QWORD *)(v17 + 16) = 0;
                *(_DWORD *)(v17 + 24) = 0;
                WTF::fastFree(v19, v5);
              }
              WTF::fastFree((WTF *)v17, v5);
              j = v20;
            }
            this = (_BYTE *)WTF::VectorMover<false,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::move((uint64_t)(j + 1), (uint64_t *)(*(_QWORD *)(v11 + 24) + 8 * *(unsigned int *)(v11 + 36)), j);
            --*(_DWORD *)(v11 + 36);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::NamedSlotAssignment::slotNameForHostChild(WebCore::NamedSlotAssignment *this, const WebCore::Node *a2)
{
  __int16 v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *((_WORD *)a2 + 14);
  result = MEMORY[0x1E0CBF3B8];
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    v4 = *((_QWORD *)a2 + 13);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ((v5 & 1) != 0)
      {
        v6 = *(_QWORD *)(v4 + 40);
        LODWORD(v7) = *(_DWORD *)(v4 + 52);
        if ((_DWORD)v7)
        {
LABEL_6:
          v7 = v7;
          v8 = (_QWORD *)(v6 + 8);
          while (1)
          {
            v9 = *(v8 - 1);
            if (v9 == WebCore::HTMLNames::slotAttr
              || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::slotAttr + 24)
              && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::slotAttr + 32))
            {
              goto LABEL_15;
            }
            v8 += 2;
            if (!--v7)
            {
              v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              goto LABEL_15;
            }
          }
        }
      }
      else
      {
        v6 = v4 + 32;
        LODWORD(v7) = v5 >> 5;
        if ((_DWORD)v7)
          goto LABEL_6;
      }
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
    else
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
LABEL_15:
    if (*v8 != *MEMORY[0x1E0CBF2F8])
      return (uint64_t)v8;
  }
  return result;
}

uint64_t WebCore::NamedSlotAssignment::assignToSlot(uint64_t this, WebCore::Node *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  int v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  int v16;
  unsigned int j;
  uint64_t v18;
  WTF::StringImpl *v19;
  void *v20;
  uint64_t v21;
  WebCore::NamedSlotAssignment::Slot *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;

  v4 = *a3;
  v6 = (uint64_t *)(this + 24);
  v5 = *(_QWORD *)(this + 24);
  if (*a3 != (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8])
  {
    if (v5
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(this + 24), 8u, 0), (v5 = *v6) != 0))
    {
      v8 = *(_DWORD *)(v5 - 8);
    }
    else
    {
      v8 = 0;
    }
    v9 = 0;
    v10 = *a3;
    v11 = *((_DWORD *)*a3 + 4) >> 8;
    for (i = 1; ; ++i)
    {
      v13 = v11 & v8;
      v14 = (WTF::StringImpl **)(v5 + 16 * v13);
      v15 = *v14;
      if (*v14 == (WTF::StringImpl *)-1)
      {
        v9 = (WTF::StringImpl **)(v5 + 16 * v13);
      }
      else
      {
        if (!v15)
        {
          if (v9)
          {
            *v9 = 0;
            v9[1] = 0;
            --*(_DWORD *)(*v6 - 16);
            v10 = *a3;
            v14 = v9;
          }
          if (v10)
            *(_DWORD *)v10 += 2;
          *v14 = v10;
          v21 = WTF::fastMalloc((WTF *)0x28);
          *(_OWORD *)v21 = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          *(_QWORD *)(v21 + 32) = 0;
          v22 = v14[1];
          v14[1] = (WTF::StringImpl *)v21;
          if (v22)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v22, v20);
            WTF::fastFree(v23, v24);
          }
          v25 = *v6;
          if (*v6)
            v26 = *(_DWORD *)(v25 - 12) + 1;
          else
            v26 = 1;
          *(_DWORD *)(v25 - 12) = v26;
          v27 = *v6;
          if (*v6)
            v28 = *(_DWORD *)(v27 - 12);
          else
            v28 = 0;
          v29 = (*(_DWORD *)(v27 - 16) + v28);
          v30 = *(unsigned int *)(v27 - 4);
          if (v30 > 0x400)
          {
            if (v30 <= 2 * v29)
            {
LABEL_33:
              v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
              goto LABEL_41;
            }
          }
          else if (3 * v30 <= 4 * v29)
          {
            if ((_DWORD)v30)
              goto LABEL_33;
            v31 = 8;
LABEL_41:
            v14 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v6, v31, v14);
          }
LABEL_42:
          v39 = v14[1];
          v40 = *((_DWORD *)v39 + 9);
          v33 = (_DWORD *)((char *)v39 + 36);
          v34 = v40;
          v41 = (uint64_t *)(v33 - 3);
          if (v40 == *(v33 - 1))
          {
            v43 = v34 + (v34 >> 2);
            if (v43 >= 0x10)
              v44 = v43 + 1;
            else
              v44 = 16;
            if (v44 <= v34 + 1)
              v45 = v34 + 1;
            else
              v45 = v44;
            WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(v33 - 3), v45);
            v34 = *v33;
            v37 = *v41;
            this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
            if (this)
            {
              do
                v46 = __ldaxr((unsigned int *)this);
              while (__stlxr(v46 + 1, (unsigned int *)this));
            }
          }
          else
          {
            v37 = *v41;
            this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
            if (this)
            {
              do
                v42 = __ldaxr((unsigned int *)this);
              while (__stlxr(v42 + 1, (unsigned int *)this));
            }
          }
LABEL_45:
          *(_QWORD *)(v37 + 8 * v34) = this;
          ++*v33;
          return this;
        }
        if (v15 == v10)
          goto LABEL_42;
      }
      v11 = i + v13;
    }
  }
  if (!v5)
    return this;
  v16 = 0;
  for (j = *((_DWORD *)v4 + 4) >> 8; ; j = v16 + v18)
  {
    v18 = j & *(_DWORD *)(v5 - 8);
    v19 = *(WTF::StringImpl **)(v5 + 16 * v18);
    if (v19 != (WTF::StringImpl *)-1)
    {
      if (!v19)
        return this;
      if (v19 == v4)
        break;
    }
    ++v16;
  }
  if ((_DWORD)v18 != *(_DWORD *)(v5 - 4))
  {
    v32 = *(_QWORD *)(v5 + 16 * v18 + 8);
    v35 = *(_DWORD *)(v32 + 36);
    v33 = (_DWORD *)(v32 + 36);
    v34 = v35;
    v36 = (uint64_t *)(v33 - 3);
    if (v35 == *(v33 - 1))
    {
      v47 = v34 + (v34 >> 2);
      if (v47 >= 0x10)
        v48 = v47 + 1;
      else
        v48 = 16;
      if (v48 <= v34 + 1)
        v49 = v34 + 1;
      else
        v49 = v48;
      WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(v33 - 3), v49);
      v34 = *v33;
      v37 = *v36;
      this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
      if (this)
      {
        do
          v50 = __ldaxr((unsigned int *)this);
        while (__stlxr(v50 + 1, (unsigned int *)this));
      }
    }
    else
    {
      v37 = *v36;
      this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
      if (this)
      {
        do
          v38 = __ldaxr((unsigned int *)this);
        while (__stlxr(v38 + 1, (unsigned int *)this));
      }
    }
    goto LABEL_45;
  }
  return this;
}

uint64_t WebCore::ManualSlotAssignment::findAssignedSlot(WebCore::ManualSlotAssignment *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v2 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x10);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = **(_QWORD **)(v3 + 40);
  if (!v4 || (*(_WORD *)(v4 + 28) & 0x80) == 0)
    return 0;
  v7 = *(_QWORD *)(v4 + 200);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  if (v7 == *((_QWORD *)a2 + 4))
    return v3;
  else
    return 0;
}

uint64_t *WebCore::ManualSlotAssignment::assignedNodesForSlot(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int i;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  void *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;

  v6 = (uint64_t *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 24) = v7 + 1;
  if (v7 > v8)
    WTF::WeakHashMap<WebCore::HTMLSlotElement,WebCore::ManualSlotAssignment::Slot,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1 + 16, a2);
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = a2;
    *(_BYTE *)(v9 + 32) = 0;
    v10 = a2[2];
    a2[2] = v10 & 0xFFFF000000000000 | v9;
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v57 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v57)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v57));
        v58 = *(WTF **)(v11 + 16);
        if (v58)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          WTF::fastFree(v58, a2);
        }
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  v14 = a2[2];
  v15 = v14 & 0xFFFFFFFFFFFFLL;
  do
    v16 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v16 + 1, (unsigned int *)v15));
  do
    v17 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v17 + 1, (unsigned int *)v15));
  if (v15)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v15);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v15));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v15);
      v55 = *(unsigned int *)((v14 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v55)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v14 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v55));
      v56 = *(WTF **)((v14 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v56)
      {
        *(_QWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v56, a2);
      }
      WTF::fastFree((WTF *)(v14 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v20 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ManualSlotAssignment::Slot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v6, 8u, 0), (v20 = *v6) != 0))
  {
    v21 = 0;
    v22 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v22 = 0;
    v21 = 1;
  }
  v23 = 0;
  v24 = (v15 + ~(v14 << 32)) ^ ((unint64_t)(v15 + ~(v14 << 32)) >> 22);
  v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
  v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
  v27 = (v26 >> 31) ^ v26;
  for (i = 1; ; ++i)
  {
    v29 = v27 & v22;
    v30 = (uint64_t *)(v20 + 32 * v29);
    v31 = *v30;
    if (*v30 != -1)
      break;
    v23 = (uint64_t *)(v20 + 32 * v29);
LABEL_22:
    v27 = i + v29;
  }
  if (!v31)
  {
    if (v23)
    {
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      --*(_DWORD *)(*v6 - 16);
      *v23 = v15;
      v30 = v23;
    }
    else
    {
      *v30 = v15;
    }
    v38 = v30 + 1;
    v39 = *((unsigned int *)v30 + 5);
    if ((_DWORD)v39)
      WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::destruct(*v38, (uint64_t *)(*v38 + 8 * v39));
    v40 = (WTF *)*v38;
    if (*v38)
    {
      v30[1] = 0;
      *((_DWORD *)v30 + 4) = 0;
      WTF::fastFree(v40, a2);
    }
    *v38 = 0;
    v30[2] = 0;
    v30[3] = 0;
    v41 = *v6;
    if (*v6)
      v42 = *(_DWORD *)(v41 - 12) + 1;
    else
      v42 = 1;
    *(_DWORD *)(v41 - 12) = v42;
    v43 = *v6;
    if (*v6)
      v44 = *(_DWORD *)(v43 - 12);
    else
      v44 = 0;
    v45 = (*(_DWORD *)(v43 - 16) + v44);
    v46 = *(unsigned int *)(v43 - 4);
    if (v46 > 0x400)
    {
      if (v46 <= 2 * v45)
        goto LABEL_51;
    }
    else if (3 * v46 <= 4 * v45)
    {
      if (!(_DWORD)v46)
      {
        v47 = 8;
LABEL_54:
        v30 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ManualSlotAssignment::Slot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v6, v47, v30);
        v43 = *v6;
        if (*v6)
          v46 = *(unsigned int *)(v43 - 4);
        else
          v46 = 0;
        goto LABEL_58;
      }
LABEL_51:
      v47 = (_DWORD)v46 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v46));
      goto LABEL_54;
    }
LABEL_58:
    v35 = 0;
    v33 = (uint64_t *)(v43 + 32 * v46);
    goto LABEL_59;
  }
  if (v31 != v15)
    goto LABEL_22;
  if ((v21 & 1) != 0)
    v32 = 0;
  else
    v32 = *(unsigned int *)(v20 - 4);
  v33 = (uint64_t *)(v20 + 32 * v32);
  if (v15)
  {
    do
      v34 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v34 - 1, (unsigned int *)v15));
    v35 = 1;
    if (v34 == 1)
    {
      v59 = v33;
      atomic_store(1u, (unsigned int *)v15);
      v36 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v36)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v36));
      v37 = *(WTF **)(v15 + 16);
      if (v37)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        WTF::fastFree(v37, a2);
      }
      WTF::fastFree((WTF *)v15, a2);
      v35 = 1;
      v33 = v59;
    }
  }
  else
  {
    v35 = 1;
  }
LABEL_59:
  v48 = *v6;
  if (*v6)
    v48 += 32 * *(unsigned int *)(v48 - 4);
  if (v30 != (uint64_t *)v48)
  {
    while (!*(_QWORD *)(*v30 + 8))
    {
      v49 = v30 + 4;
      v30 = v33;
      if (v49 != v33)
      {
        v30 = v49;
        while ((unint64_t)(*v30 + 1) <= 1)
        {
          v30 += 4;
          if (v30 == v33)
          {
            v30 = v33;
            break;
          }
        }
      }
      if (v30 == (uint64_t *)v48)
      {
        v30 = (uint64_t *)v48;
        break;
      }
    }
  }
  if (v35 && v30[3] == *(_QWORD *)(a1 + 32))
  {
    v50 = *((_DWORD *)v30 + 5);
  }
  else
  {
    WebCore::effectiveAssignedNodes(&v60, a3, a2 + 15);
    v52 = *((unsigned int *)v30 + 5);
    if ((_DWORD)v52)
      WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::destruct(v30[1], (uint64_t *)(v30[1] + 8 * v52));
    v53 = (WTF *)v30[1];
    if (v53)
    {
      v30[1] = 0;
      *((_DWORD *)v30 + 4) = 0;
      WTF::fastFree(v53, v51);
    }
    v30[1] = v60;
    v50 = v62;
    *((_DWORD *)v30 + 4) = v61;
    *((_DWORD *)v30 + 5) = v50;
    v30[3] = *(_QWORD *)(a1 + 32);
  }
  if (v50)
    return v30 + 1;
  else
    return 0;
}

_QWORD *WebCore::effectiveAssignedNodes(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  unint64_t v26;
  WTF *v27;
  unsigned int *v28;

  v3 = (uint64_t)result;
  *result = 0;
  result[1] = 0;
  v4 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v4)
    goto LABEL_25;
  if (!(v4 >> 29))
  {
    v7 = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(v3 + 8) = v4;
    *(_QWORD *)v3 = v7;
    v8 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v8)
    {
      v9 = *a3;
      v10 = v9 + 8 * v8;
      do
      {
        if (*(_QWORD *)v9)
        {
          v11 = *(_QWORD *)(*(_QWORD *)v9 + 8);
          if (v11)
          {
            v12 = *(_QWORD *)(a2 + 200);
            if (v12)
              v12 = *(_QWORD *)(v12 + 8);
            if (*(_QWORD *)(v11 + 32) == v12)
            {
              v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v11);
              if (v13)
              {
                do
                  v15 = __ldaxr(v13);
                while (__stlxr(v15 + 1, v13));
              }
              v28 = v13;
              v16 = *(unsigned int *)(v3 + 12);
              if ((_DWORD)v16 == *(_DWORD *)(v3 + 8))
              {
                v17 = (uint64_t *)WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v16 + 1, (unint64_t)&v28);
                v16 = *(unsigned int *)(v3 + 12);
                v18 = *(_QWORD *)v3;
                v19 = *v17;
                *v17 = 0;
                *(_QWORD *)(v18 + 8 * v16) = v19;
              }
              else
              {
                v20 = *(_QWORD *)v3;
                v28 = 0;
                *(_QWORD *)(v20 + 8 * v16) = v13;
              }
              *(_DWORD *)(v3 + 12) = v16 + 1;
              v21 = v28;
              v28 = 0;
              if (v21)
              {
                do
                {
                  v22 = __ldaxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                {
                  atomic_store(1u, v21);
                  v27 = (WTF *)v21;
                  v24 = v21[7];
                  if ((_DWORD)v24)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v27 + 2), (WTF::StringImpl *)(*((_QWORD *)v27 + 2) + 32 * v24));
                  v25 = (WTF *)*((_QWORD *)v27 + 2);
                  if (v25)
                  {
                    *((_QWORD *)v27 + 2) = 0;
                    *((_DWORD *)v27 + 6) = 0;
                    WTF::fastFree(v25, v14);
                  }
                  WTF::fastFree(v27, v14);
                }
              }
            }
          }
        }
        v9 += 8;
      }
      while (v9 != v10);
      v26 = *(unsigned int *)(v3 + 12);
      return (_QWORD *)WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, v26);
    }
LABEL_25:
    v26 = 0;
    return (_QWORD *)WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, v26);
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::ManualSlotAssignment::addSlotElementByName(_QWORD *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;

  v6 = (uint64_t)result;
  v7 = *((_DWORD *)result + 10);
  if (!v7)
  {
    result = *(_QWORD **)(*(_QWORD *)(a4 + 200) + 8);
    v8 = *((_DWORD *)result + 6);
    *((_DWORD *)result + 6) = v8 + 2;
    result[2] |= 0x1000000000000000uLL;
    if (v8)
    {
      v7 = 0;
      *((_DWORD *)result + 6) = v8;
    }
    else if ((*((_WORD *)result + 15) & 0x400) != 0)
    {
      v7 = 0;
    }
    else
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      v7 = *(_DWORD *)(v6 + 40);
    }
  }
  *(_DWORD *)(v6 + 40) = v7 + 1;
  ++*(_QWORD *)(v6 + 32);
  if (*(_BYTE *)(a4 + 193))
  {
    if ((*(_BYTE *)(a4 + 192) & 1) == 0)
    {
      result = WebCore::ManualSlotAssignment::assignedNodesForSlot(v6, (uint64_t *)a3, a4);
      if (result)
      {
        if (!*(_BYTE *)(a3 + 112))
        {
          *(_BYTE *)(a3 + 112) = 1;
          return WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)a3, v9);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ManualSlotAssignment::removeSlotElementByName(uint64_t result, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(result + 40);
  if (v5)
  {
    *(_DWORD *)(result + 40) = v5 - 1;
    ++*(_QWORD *)(result + 32);
    if (*(_BYTE *)(a5 + 193))
    {
      if ((*(_BYTE *)(a5 + 192) & 1) == 0)
      {
        v6 = *(unsigned int *)(a3 + 132);
        if ((_DWORD)v6)
        {
          v7 = *(_QWORD *)(a3 + 120);
          v8 = *(_QWORD *)(a5 + 200);
          if (v8)
          {
            v11 = 8 * v6;
            while (1)
            {
              if (*(_QWORD *)v7)
              {
                v12 = *(_QWORD *)(*(_QWORD *)v7 + 8);
                if (v12)
                {
                  if (*(_QWORD *)(v12 + 32) == *(_QWORD *)(v8 + 8))
                    break;
                }
              }
              v7 += 8;
              v11 -= 8;
              if (!v11)
                return result;
            }
          }
          else
          {
            v9 = 8 * v6;
            while (1)
            {
              if (*(_QWORD *)v7)
              {
                v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
                if (v10)
                {
                  if (!*(_QWORD *)(v10 + 32))
                    break;
                }
              }
              v7 += 8;
              v9 -= 8;
              if (!v9)
                return result;
            }
          }
          if (!*(_BYTE *)(a3 + 112))
          {
            *(_BYTE *)(a3 + 112) = 1;
            return (uint64_t)WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)a3, a2);
          }
        }
      }
    }
  }
  else
  {
    result = 482;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ManualSlotAssignment::slotManualAssignmentDidChange(uint64_t a1, WebCore::Text *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  WebCore::Node *ElementSibling;
  WebCore::Element *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  int j;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  BOOL v77;
  BOOL v78;
  _QWORD *v80;
  WTF *v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t *v85;

  WebCore::effectiveAssignedNodes(&v81, a5, a3);
  v80 = 0;
  v8 = *((unsigned int *)a4 + 3);
  if (!(_DWORD)v8)
    goto LABEL_70;
  v9 = *a4;
  v10 = *a4 + 8 * v8;
  do
  {
    if (*(_QWORD *)v9)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v9 + 8);
      if (v11)
      {
        v12 = 0;
        *(_DWORD *)(v11 + 24) += 2;
        goto LABEL_6;
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = 1;
LABEL_6:
    if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_55;
    v13 = *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x10);
    if (!v13)
      goto LABEL_55;
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      goto LABEL_55;
    *(_DWORD *)(v14 + 24) += 2;
    v84 = v11;
    v85 = &v84;
    WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::Node*>(WebCore::Node* const&)::{lambda(WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>((uint64_t *)(v14 + 120), &v85, 0);
    if ((*(_WORD *)(**(_QWORD **)(v14 + 40) + 28) & 0x80) != 0)
      v16 = **(_QWORD **)(v14 + 40);
    else
      v16 = 0;
    if (v16)
      *(_DWORD *)(v16 + 24) += 2;
    if (v16 != a5)
      goto LABEL_18;
    v17 = *(_QWORD *)(a5 + 200);
    if (v17)
      v17 = *(_QWORD *)(v17 + 8);
    if (*(_QWORD *)(v11 + 32) != v17)
    {
LABEL_18:
      if (v16)
      {
        v18 = *(_QWORD *)(v16 + 200);
        if (v18)
          v18 = *(_QWORD *)(v18 + 8);
        if (v18 == *(_QWORD *)(v11 + 32))
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v16 + 224) + 64))(*(_QWORD *)(v16 + 224), v14, v11, v16);
        goto LABEL_51;
      }
      goto LABEL_53;
    }
    *(_DWORD *)(v14 + 24) += 2;
    v19 = (uint64_t)v80;
    if (v80
      || (WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash((uint64_t *)&v80, 8u), (v19 = (uint64_t)v80) != 0))
    {
      v20 = *(_DWORD *)(v19 - 8);
    }
    else
    {
      v20 = 0;
    }
    v21 = 0;
    v22 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = (v24 >> 31) ^ v24;
    for (i = 1; ; ++i)
    {
      v27 = v25 & v20;
      v28 = (uint64_t *)(v19 + 8 * v27);
      v29 = *v28;
      if (*v28 != -1)
        break;
      v21 = (_QWORD *)(v19 + 8 * v27);
LABEL_32:
      v25 = i + v27;
    }
    if (!v29)
    {
      if (v21)
      {
        *v21 = 0;
        --*((_DWORD *)v80 - 4);
        *v21 = v14;
      }
      else
      {
        *v28 = v14;
      }
      v30 = (uint64_t)v80;
      if (v80)
        v31 = *((_DWORD *)v80 - 3) + 1;
      else
        v31 = 1;
      *((_DWORD *)v80 - 3) = v31;
      v32 = (*(_DWORD *)(v30 - 16) + v31);
      v33 = *(unsigned int *)(v30 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_50;
      }
      else
      {
        if (3 * v33 > 4 * v32)
          goto LABEL_50;
        if (!(_DWORD)v33)
        {
          v34 = 8;
          goto LABEL_49;
        }
      }
      v34 = (_DWORD)v33 << (6 * v31 >= (2 * v33));
LABEL_49:
      WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash((uint64_t *)&v80, v34);
      goto LABEL_50;
    }
    if (v29 != v14)
      goto LABEL_32;
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
LABEL_50:
    if (v16)
    {
LABEL_51:
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
LABEL_53:
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
LABEL_55:
    WebCore::Node::setManuallyAssignedSlot(v11, a2);
    if ((v12 & 1) == 0)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v35);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    v9 += 8;
  }
  while (v9 != v10);
LABEL_70:
  ++*(_QWORD *)(a1 + 32);
  v36 = WebCore::ManualSlotAssignment::assignedNodesForSlot(a1, (uint64_t *)a2, a5);
  v37 = *(_QWORD *)(a5 + 200);
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 8);
    if (v38)
      *(_DWORD *)(v38 + 24) += 2;
  }
  else
  {
    v38 = 0;
  }
  WebCore::RenderTreeUpdater::tearDownRenderers((WebCore *)v38, 1);
  result = WebCore::Node::invalidateStyle(v38, 4u, 0);
  if ((*(_BYTE *)(v38 + 71) & 1) != 0)
  {
    v61 = *(_QWORD *)(v38 + 32);
    if (!v61 || (*(_WORD *)(v61 + 28) & 8) == 0 || (*(_BYTE *)(v61 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v38);
      result = (uint64_t)WebCore::invalidateForSiblingCombinators(ElementSibling, v63);
    }
  }
  if (!*(_BYTE *)(a5 + 193) || (*(_BYTE *)(a5 + 192) & 1) != 0)
    goto LABEL_108;
  v41 = (uint64_t)v80;
  if (v80 && *((_DWORD *)v80 - 3))
  {
    v42 = *(_QWORD *)(a5 + 80);
    if (!v42)
      goto LABEL_108;
    while (1)
    {
      v43 = v42;
      v44 = *(_WORD *)(v42 + 28);
      if ((v44 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v43 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        break;
      }
      if ((v44 & 4) != 0)
      {
        v42 = *(_QWORD *)(v43 + 80);
        if (v42)
          continue;
      }
      if (v43 == a5)
        goto LABEL_108;
      while (1)
      {
        v42 = *(_QWORD *)(v43 + 56);
        if (v42)
          break;
        v43 = *(_QWORD *)(v43 + 32);
        if (v43)
          v45 = v43 == a5;
        else
          v45 = 1;
        if (v45)
          goto LABEL_108;
      }
    }
LABEL_145:
    v64 = *(_DWORD *)(v41 - 8);
    v65 = (~(v43 << 32) + v43) ^ ((unint64_t)(~(v43 << 32) + v43) >> 22);
    v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
    v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
    v68 = v64 & ((v67 >> 31) ^ v67);
    for (j = 1; ; ++j)
    {
      v70 = *(_QWORD **)(v41 + 8 * v68);
      if (v70 != (_QWORD *)-1)
      {
        if (!v70)
        {
          while (1)
          {
            if ((WebCore::Text *)v43 == a2)
            {
              if (v36)
                v71 = *((unsigned int *)v36 + 3);
              else
                v71 = 0;
              result = (uint64_t)a2;
              if (v71 != v83)
                goto LABEL_167;
              if (v83)
                break;
            }
LABEL_169:
            v75 = *(_QWORD *)(v43 + 80);
            if (!v75)
            {
              if (v43 != a5)
              {
                do
                {
                  v75 = *(_QWORD *)(v43 + 56);
                  if (v75)
                    goto LABEL_170;
                  v43 = *(_QWORD *)(v43 + 32);
                  if (v43)
                    v78 = v43 == a5;
                  else
                    v78 = 1;
                }
                while (!v78);
              }
              goto LABEL_108;
            }
LABEL_170:
            while (1)
            {
              v43 = v75;
              v76 = *(_WORD *)(v75 + 28);
              if ((v76 & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v43 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
              {
                break;
              }
              if ((v76 & 4) != 0)
              {
                v75 = *(_QWORD *)(v43 + 80);
                if (v75)
                  continue;
              }
              if (v43 == a5)
                goto LABEL_108;
              while (1)
              {
                v75 = *(_QWORD *)(v43 + 56);
                if (v75)
                  break;
                v43 = *(_QWORD *)(v43 + 32);
                if (v43)
                  v77 = v43 == a5;
                else
                  v77 = 1;
                if (v77)
                  goto LABEL_108;
              }
            }
            v41 = (uint64_t)v80;
            if (v80)
              goto LABEL_145;
          }
          v72 = 0;
          while (1)
          {
            if (8 * *((unsigned int *)v36 + 3) == v72)
              goto LABEL_192;
            v73 = *(_QWORD *)((char *)v81 + v72);
            if (v73)
              v73 = *(_QWORD *)(v73 + 8);
            v74 = *(_QWORD *)(*v36 + v72);
            if (v74)
              v74 = *(_QWORD *)(v74 + 8);
            if (v73 != v74)
              break;
            v72 += 8;
            if (8 * v83 == v72)
              goto LABEL_169;
          }
          result = (uint64_t)a2;
LABEL_167:
          if (!*(_BYTE *)(result + 112))
          {
            *(_BYTE *)(result + 112) = 1;
            result = (uint64_t)WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)result, v40);
          }
          goto LABEL_169;
        }
        if (v70 == (_QWORD *)v43)
        {
          result = v43;
          goto LABEL_167;
        }
      }
      v68 = (v68 + j) & v64;
    }
  }
  if (v36)
    v46 = *((unsigned int *)v36 + 3);
  else
    v46 = 0;
  if (v46 == v83)
  {
    if (!v83)
      goto LABEL_108;
    v47 = 0;
    while (1)
    {
      if (8 * *((unsigned int *)v36 + 3) == v47)
      {
LABEL_192:
        __break(0xC471u);
        JUMPOUT(0x195A44924);
      }
      v48 = *(_QWORD *)((char *)v81 + v47);
      if (v48)
        v48 = *(_QWORD *)(v48 + 8);
      v49 = *(_QWORD *)(*v36 + v47);
      if (v49)
        v49 = *(_QWORD *)(v49 + 8);
      if (v48 != v49)
        break;
      v47 += 8;
      if (8 * v83 == v47)
        goto LABEL_108;
    }
  }
  if (!*((_BYTE *)a2 + 112))
  {
    *((_BYTE *)a2 + 112) = 1;
    result = (uint64_t)WebCore::MutationObserver::enqueueSlotChangeEvent(a2, v40);
  }
LABEL_108:
  if (*(_DWORD *)(v38 + 24) == 2)
  {
    if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v38, v40);
  }
  else
  {
    *(_DWORD *)(v38 + 24) -= 2;
  }
  v50 = (uint64_t)v80;
  if (v80)
  {
    v51 = *((unsigned int *)v80 - 1);
    if ((_DWORD)v51)
    {
      v52 = v80;
      do
      {
        v53 = *v52;
        if (*v52 != -1)
        {
          *v52 = 0;
          if (v53)
          {
            if (*(_DWORD *)(v53 + 24) == 2)
            {
              if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v53, v40);
            }
            else
            {
              *(_DWORD *)(v53 + 24) -= 2;
            }
          }
        }
        ++v52;
        --v51;
      }
      while (v51);
    }
    result = WTF::fastFree((WTF *)(v50 - 16), v40);
  }
  v54 = v81;
  if (v83)
  {
    v55 = (WTF *)((char *)v81 + 8 * v83);
    do
    {
      v56 = *(_QWORD *)v54;
      *(_QWORD *)v54 = 0;
      if (v56)
      {
        do
        {
          v57 = __ldaxr((unsigned int *)v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, (unsigned int *)v56));
        if (!v58)
        {
          atomic_store(1u, (unsigned int *)v56);
          v59 = *(unsigned int *)(v56 + 28);
          if ((_DWORD)v59)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v56 + 16), (WTF::StringImpl *)(*(_QWORD *)(v56 + 16) + 32 * v59));
          v60 = *(WTF **)(v56 + 16);
          if (v60)
          {
            *(_QWORD *)(v56 + 16) = 0;
            *(_DWORD *)(v56 + 24) = 0;
            WTF::fastFree(v60, v40);
          }
          result = WTF::fastFree((WTF *)v56, v40);
        }
      }
      v54 = (WTF *)((char *)v54 + 8);
    }
    while (v54 != v55);
    v54 = v81;
    if (v81)
    {
LABEL_124:
      v81 = 0;
      v82 = 0;
      return WTF::fastFree(v54, v40);
    }
  }
  else if (v81)
  {
    goto LABEL_124;
  }
  return result;
}

unsigned int *WebCore::ManualSlotAssignment::didRemoveManuallyAssignedNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebCore::Node *ElementSibling;
  WebCore::Element *v12;

  v6 = *(_QWORD *)(a4 + 200);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
  }
  else
  {
    v7 = 0;
  }
  ++*(_QWORD *)(a1 + 32);
  WebCore::RenderTreeUpdater::tearDownRenderers((WebCore *)v7, 1);
  result = (unsigned int *)WebCore::Node::invalidateStyle(v7, 4u, 0);
  if ((*(_BYTE *)(v7 + 71) & 1) != 0)
  {
    v10 = *(_QWORD *)(v7 + 32);
    if (!v10 || (*(_WORD *)(v10 + 28) & 8) == 0 || (*(_BYTE *)(v10 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v7);
      result = (unsigned int *)WebCore::invalidateForSiblingCombinators(ElementSibling, v12);
    }
  }
  if (*(_BYTE *)(a4 + 193) && (*(_BYTE *)(a4 + 192) & 1) == 0 && !*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(a2 + 112) = 1;
    result = (unsigned int *)WebCore::MutationObserver::enqueueSlotChangeEvent((_QWORD *)a2, v9);
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ManualSlotAssignment::slotFallbackDidChange(uint64_t result)
{
  ++*(_QWORD *)(result + 32);
  return result;
}

uint64_t WebCore::ManualSlotAssignment::hostChildElementDidChange(uint64_t this, const WebCore::Element *a2, WebCore::ShadowRoot *a3)
{
  ++*(_QWORD *)(this + 32);
  return this;
}

unsigned int *WebCore::ManualSlotAssignment::willRemoveAssignedNode(unsigned int *this, const WebCore::Node *a2, WebCore::ShadowRoot *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  int v8;
  WebCore::ShadowRoot *v9;
  BOOL v11;

  ++*((_QWORD *)this + 4);
  v3 = *((_QWORD *)a2 + 4);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 8) != 0)
    {
      v4 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL;
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 88);
        if (v5)
        {
          this = *(unsigned int **)(v5 + 224);
          if (this)
          {
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
            if (this)
            {
              v7 = this;
              v8 = this[6];
              this[6] = v8 + 2;
              v9 = (WebCore::ShadowRoot *)**((_QWORD **)this + 5);
              v11 = v9 != a3 || (*((_WORD *)v9 + 14) & 0x80) == 0 || *((_BYTE *)a3 + 193) == 0;
              if (!v11 && (*((_BYTE *)a3 + 192) & 1) == 0 && !*((_BYTE *)this + 112))
              {
                *((_BYTE *)this + 112) = 1;
                this = (unsigned int *)WebCore::MutationObserver::enqueueSlotChangeEvent(this, v6);
                v8 = v7[6] - 2;
              }
              if (v8)
              {
                v7[6] = v8;
              }
              else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
              {
                return WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ManualSlotAssignment::didRemoveAllChildrenOfShadowHost(uint64_t this, WebCore::ShadowRoot *a2)
{
  ++*(_QWORD *)(this + 32);
  return this;
}

uint64_t WebCore::ManualSlotAssignment::didMutateTextNodesOfShadowHost(uint64_t this, WebCore::ShadowRoot *a2)
{
  ++*(_QWORD *)(this + 32);
  return this;
}

uint64_t WebCore::SpaceSplitStringData::containsAll(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (a1 == a2)
  {
    return 1;
  }
  else
  {
    v2 = 0;
    v3 = *(unsigned int *)(a2 + 12);
    while (v2 != v3)
    {
      v4 = 0;
      while (*(_QWORD *)(a1 + 16 + 8 * v4) != *(_QWORD *)(a2 + 16 + 8 * v2))
      {
        if (++v4 >= (unint64_t)*(unsigned int *)(a1 + 12))
          return 0;
      }
      if (v3 <= 1)
        v7 = 1;
      else
        v7 = v3;
      ++v2;
      v5 = 1;
      if (v2 == v7)
        return v5;
    }
    result = 58;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::SpaceSplitString::spaceSplitStringContainsValue@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, int16x8_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, WTF::StringImpl *a6@<X8>)
{
  unsigned int v7;
  _BOOL8 v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  int8x16_t *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v25;
  int v26;
  int v27;
  uint8x16_t v28;
  uint8x16_t v29;
  unsigned int v30;
  uint8x16_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v64;
  unsigned int v65;
  unsigned __int16 *v66;
  unsigned int v67;
  uint64_t v69;
  int16x8_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v77;
  uint16x8_t v78;
  uint16x8_t v79;
  unsigned int v80;
  uint16x8_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int16 *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  int v93;
  int v94;
  unsigned int v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int v107;
  int v108;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v130;
  unsigned __int16 *v131;
  unsigned int v132;
  uint64_t v133;
  int16x8_t *v135;
  uint64_t v136;
  unint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint16x8_t v141;
  unsigned int v142;
  uint16x8_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v149;
  uint8x8_t *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint16x8_t v155;
  unsigned int v156;
  uint16x8_t v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  unint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v171;
  unsigned int v172;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v183;
  _QWORD v184[2];

  v184[0] = result;
  v184[1] = a2;
  if (!result)
    return 0;
  v7 = a4;
  if ((a4 & 0xFF00000000) == 0)
  {
    if (a5)
    {
      WTF::StringView::convertToASCIILowercase((WTF::StringView *)v184);
      a6 = (WTF::StringImpl *)v183;
      if (v183)
      {
        result = *(_QWORD *)(v183 + 8);
        a2 = *(unsigned int *)(v183 + 4) | ((unint64_t)((*(_DWORD *)(v183 + 16) >> 2) & 1) << 32);
      }
      else
      {
        result = 0;
        a2 = 0x100000000;
      }
    }
    if ((a2 & 0xFF00000000) != 0)
    {
      if ((_DWORD)a2)
      {
        if (v7 >= 8)
        {
          v145 = 0;
          while (1)
          {
            while (1)
            {
              v146 = *(unsigned __int8 *)(result + v145);
              v22 = v146 > 0x20;
              v147 = (1 << v146) & 0x100003600;
              if (v22 || v147 == 0)
                break;
              v9 = 0;
              if (++v145 >= (unint64_t)a2)
                goto LABEL_162;
            }
            v149 = 0;
            v150 = (uint8x8_t *)(result + v145);
            do
            {
              v151 = v149;
              if (v145 + v149 + 1 >= (unint64_t)a2)
                break;
              v152 = *(unsigned __int8 *)(result + v145 + v149++ + 1);
              v22 = v152 > 0x20;
              v153 = (1 << v152) & 0x100003600;
            }
            while (v22 || v153 == 0);
            if ((unint64_t)a2 - v145 < v151 + 1)
              break;
            if (v7 - 1 == (_DWORD)v151)
            {
              v155 = (uint16x8_t)vceqq_s16(*a3, (int16x8_t)vmovl_u8(*v150));
              v155.i16[0] = vminvq_u16(v155);
              if (v155.i32[0])
              {
                v156 = v7 & 7;
                while (1)
                {
                  v157 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a3 + 2 * v156), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v150 + v156)));
                  v157.i16[0] = vminvq_u16(v157);
                  if (!v157.i32[0])
                    break;
                  v156 += 8;
                  v9 = 1;
                  if (v156 >= v7)
                    goto LABEL_162;
                }
              }
            }
            v9 = 0;
            v158 = v145 + v151 + 2;
            v145 = v158;
            if (v158 >= a2)
              goto LABEL_162;
          }
        }
        else
        {
          if (v7 >= 4)
          {
            v49 = 0;
            while (1)
            {
              v50 = v49;
              v51 = (unsigned __int8 *)(result + v49);
              v52 = *v51;
              v22 = v52 > 0x20;
              v53 = (1 << v52) & 0x100003600;
              if (v22 || v53 == 0)
              {
                v55 = 1;
                do
                {
                  v56 = v55;
                  if (v50 + v55 >= (unint64_t)a2)
                    break;
                  v57 = *(unsigned __int8 *)(result + v50 + v55++);
                  v22 = v57 > 0x20;
                  v58 = (1 << v57) & 0x100003600;
                }
                while (v22 || v58 == 0);
                if ((unint64_t)a2 - v50 < v56)
                  goto LABEL_311;
                if (v7 == (_DWORD)v56)
                {
                  v60 = (*(unsigned int *)v51 | ((unint64_t)*(unsigned int *)v51 << 16)) & 0xFFFF0000FFFFLL;
                  v61 = (*(unsigned int *)&v51[v56 & 3] | ((unint64_t)*(unsigned int *)&v51[v56 & 3] << 16)) & 0xFFFF0000FFFFLL;
                  v62 = (v61 | (v61 << 8)) & 0xFF00FF00FF00FFLL;
                  if (((v60 | (v60 << 8)) & 0xFF00FF00FF00FFLL) == a3->i64[0]
                    && v62 == *(uint64_t *)((char *)a3->i64 + 2 * (v56 & 3)))
                  {
                    goto LABEL_310;
                  }
                }
                v49 = v50 + v56 + 1;
              }
              else
              {
                v49 = v50 + 1;
              }
              if (v49 >= a2)
                goto LABEL_161;
            }
          }
          if (v7 >= 2)
          {
            v96 = 0;
            while (1)
            {
              v97 = v96;
              v98 = (unsigned __int8 *)(result + v96);
              v99 = *v98;
              v22 = v99 > 0x20;
              v100 = (1 << v99) & 0x100003600;
              if (v22 || v100 == 0)
              {
                v102 = 1;
                do
                {
                  v103 = v102;
                  if (v97 + v102 >= (unint64_t)a2)
                    break;
                  v104 = *(unsigned __int8 *)(result + v97 + v102++);
                  v22 = v104 > 0x20;
                  v105 = (1 << v104) & 0x100003600;
                }
                while (v22 || v105 == 0);
                if ((unint64_t)a2 - v97 < v103)
                  goto LABEL_311;
                if (v7 == (_DWORD)v103)
                {
                  v107 = (*(unsigned __int16 *)v98 | (*(unsigned __int16 *)v98 << 8)) & 0xFF00FF;
                  v108 = (*(unsigned __int16 *)&v98[v103 & 1] | (*(unsigned __int16 *)&v98[v103 & 1] << 8)) & 0xFF00FF;
                  if (v107 == a3->i32[0] && v108 == *(__int32 *)((char *)a3->i32 + 2 * (v103 & 1)))
                    goto LABEL_310;
                }
                v96 = v97 + v103 + 1;
              }
              else
              {
                v96 = v97 + 1;
              }
              if (v96 >= a2)
                goto LABEL_161;
            }
          }
          if (v7 == 1)
          {
            v171 = 0;
            v172 = 0;
            while (1)
            {
              v173 = v172;
              v174 = v172 + 1;
              while (1)
              {
                v175 = *(unsigned __int8 *)(result + v171);
                if (v175 > 0x20 || ((1 << v175) & 0x100003600) == 0)
                  break;
                v9 = 0;
                ++v173;
                ++v174;
                v171 = v173;
                if (v173 >= a2)
                  goto LABEL_162;
              }
              v177 = 0;
              v178 = result + v174;
              do
              {
                v179 = v177;
                if ((int)v173 + (int)v177 + 1 >= a2)
                  break;
                v180 = *(unsigned __int8 *)(v178 + v177++);
                v22 = v180 > 0x20;
                v181 = (1 << v180) & 0x100003600;
              }
              while (v22 || v181 == 0);
              if (a2 - v171 < (v179 + 1))
                break;
              if (!v179 && a3->u16[0] == v175)
                goto LABEL_310;
              v9 = 0;
              v172 = v173 + v179 + 2;
              v171 = v172;
              if (v172 >= a2)
                goto LABEL_162;
            }
          }
          else
          {
            v120 = 0;
            while (1)
            {
              while (1)
              {
                v121 = v120;
                v122 = *(unsigned __int8 *)(result + v120);
                v22 = v122 > 0x20;
                v123 = (1 << v122) & 0x100003600;
                if (v22 || v123 == 0)
                  break;
                v9 = 0;
                ++v120;
                if (v121 + 1 >= a2)
                  goto LABEL_162;
              }
              v125 = 1;
              do
              {
                v126 = v125;
                if ((unint64_t)v120 + v125 >= a2)
                  break;
                v127 = *(unsigned __int8 *)(result + v120 + v125++);
                v22 = v127 > 0x20;
                v128 = (1 << v127) & 0x100003600;
              }
              while (v22 || v128 == 0);
              if (a2 - (unint64_t)v120 < v126)
                break;
              v9 = v7 == (_DWORD)v126;
              v120 += v126 + 1;
              if (v120 >= a2 || v7 == (_DWORD)v126)
                goto LABEL_162;
            }
          }
        }
        goto LABEL_311;
      }
    }
    else if ((_DWORD)a2)
    {
      v64 = 0;
      v65 = 31 - __clz(v7 - 1);
      while (1)
      {
        v66 = (unsigned __int16 *)(result + 2 + 2 * v64);
        while (1)
        {
          v67 = *(unsigned __int16 *)(result + 2 * v64);
          if (v67 > 0x20 || ((1 << v67) & 0x100003600) == 0)
            break;
          ++v64;
          ++v66;
          if (v64 >= a2)
            goto LABEL_161;
        }
        v69 = 0;
        v70 = (int16x8_t *)(result + 2 * v64);
        v71 = 1;
        do
        {
          v72 = v71;
          v73 = v69;
          if (v64 + v71 >= a2)
            break;
          v74 = *v66++;
          ++v71;
          v69 += 2;
          v75 = (1 << v74) & 0x100003600;
        }
        while (v74 > 0x20 || v75 == 0);
        if (a2 - v64 < v72)
          goto LABEL_311;
        if (v7 == (_DWORD)v72)
        {
          if (!v7)
            goto LABEL_310;
          if (v7 == 1)
          {
            if (a3->u16[0] == v67)
            {
LABEL_310:
              v9 = 1;
              goto LABEL_162;
            }
          }
          else
          {
            switch(v65)
            {
              case 0u:
                if (a3->i32[0] == v70->i32[0])
                  goto LABEL_310;
                goto LABEL_128;
              case 1u:
                if (a3->i32[0] != v70->i32[0]
                  || *(__int32 *)((char *)a3->i32 + v73 - 2) != *(__int32 *)((char *)v70->i32 + v73 - 2))
                {
                  goto LABEL_128;
                }
                goto LABEL_310;
              case 2u:
                if (a3->i64[0] == v70->i64[0]
                  && *(uint64_t *)((char *)a3->i64 + v73 - 6) == *(uint64_t *)((char *)v70->i64 + v73 - 6))
                {
                  goto LABEL_310;
                }
                goto LABEL_128;
              case 3u:
                v78 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)a3 + v73 - 14), *(int16x8_t *)((char *)v70 + v73 - 14)), (int8x16_t)vceqq_s16(*a3, *v70));
                v78.i16[0] = vminvq_u16(v78);
                if (v78.i32[0])
                  goto LABEL_310;
                goto LABEL_128;
              default:
                v79 = (uint16x8_t)vceqq_s16(*a3, *v70);
                v79.i16[0] = vminvq_u16(v79);
                if (!v79.i32[0])
                  goto LABEL_128;
                v80 = v7 & 7;
                if (v7 < 8)
                  goto LABEL_310;
                break;
            }
            while (1)
            {
              v81 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a3 + 2 * v80), *(int16x8_t *)((char *)v70 + 2 * v80));
              v81.i16[0] = vminvq_u16(v81);
              if (!v81.i32[0])
                break;
              v80 += 8;
              v9 = 1;
              if (v80 >= v7)
                goto LABEL_162;
            }
          }
        }
LABEL_128:
        v9 = 0;
        v77 = v64 + v72 + 1;
        v64 = v77;
        if (v77 >= a2)
          goto LABEL_162;
      }
    }
    goto LABEL_161;
  }
  if (a5)
  {
    WTF::StringView::convertToASCIILowercase((WTF::StringView *)v184);
    a6 = (WTF::StringImpl *)v183;
    if (v183)
    {
      result = *(_QWORD *)(v183 + 8);
      a2 = *(unsigned int *)(v183 + 4) | ((unint64_t)((*(_DWORD *)(v183 + 16) >> 2) & 1) << 32);
    }
    else
    {
      result = 0;
      a2 = 0x100000000;
    }
  }
  if ((a2 & 0xFF00000000) == 0)
  {
    if ((_DWORD)a2)
    {
      if (v7 >= 8)
      {
        v130 = 0;
        while (1)
        {
          v131 = (unsigned __int16 *)(result + 2 + 2 * v130);
          while (1)
          {
            v132 = *(unsigned __int16 *)(result + 2 * v130);
            v22 = v132 > 0x20;
            v133 = (1 << v132) & 0x100003600;
            if (v22 || v133 == 0)
              break;
            v9 = 0;
            ++v130;
            ++v131;
            if (v130 >= a2)
              goto LABEL_162;
          }
          v135 = (int16x8_t *)(result + 2 * v130);
          v136 = 1;
          do
          {
            v137 = v136;
            if (v130 + v136 >= a2)
              break;
            v138 = *v131++;
            ++v136;
            v139 = (1 << v138) & 0x100003600;
          }
          while (v138 > 0x20 || v139 == 0);
          if (a2 - v130 < v137)
            break;
          if (v7 == (_DWORD)v137)
          {
            v141 = (uint16x8_t)vceqq_s16(*v135, (int16x8_t)vmovl_u8(*(uint8x8_t *)a3->i8));
            v141.i16[0] = vminvq_u16(v141);
            if (v141.i32[0])
            {
              v142 = v7 & 7;
              while (1)
              {
                v143 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v135 + 2 * v142), (int16x8_t)vmovl_u8(*(uint8x8_t *)&a3->i8[v142]));
                v143.i16[0] = vminvq_u16(v143);
                if (!v143.i32[0])
                  break;
                v142 += 8;
                v9 = 1;
                if (v142 >= v7)
                  goto LABEL_162;
              }
            }
          }
          v9 = 0;
          v144 = v130 + v137 + 1;
          v130 = v144;
          if (v144 >= a2)
            goto LABEL_162;
        }
      }
      else
      {
        if (v7 >= 4)
        {
          v32 = 0;
          while (1)
          {
            v33 = v32;
            v34 = (unsigned __int16 *)(result + 2 * v32);
            v35 = *v34;
            v22 = v35 > 0x20;
            v36 = (1 << v35) & 0x100003600;
            if (v22 || v36 == 0)
            {
              v38 = 1;
              do
              {
                v39 = v38;
                if (v33 + v38 >= (unint64_t)a2)
                  break;
                v40 = *(unsigned __int16 *)(result + 2 * v33 + 2 * v38++);
                v22 = v40 > 0x20;
                v41 = (1 << v40) & 0x100003600;
              }
              while (v22 || v41 == 0);
              if ((unint64_t)a2 - v33 < v39)
                goto LABEL_311;
              if (v7 == (_DWORD)v39)
              {
                v43 = (a3->u32[0] | ((unint64_t)a3->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                v44 = *(_QWORD *)v34;
                v45 = (*(unsigned int *)((char *)a3->u32 + (v39 & 3)) | ((unint64_t)*(unsigned int *)((char *)a3->u32 + (v39 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                v46 = (v45 | (v45 << 8)) & 0xFF00FF00FF00FFLL;
                v47 = *(_QWORD *)&v34[v39 & 3];
                if (((v43 | (v43 << 8)) & 0xFF00FF00FF00FFLL) == v44 && v46 == v47)
                  goto LABEL_310;
              }
              v32 = v33 + v39 + 1;
            }
            else
            {
              v32 = v33 + 1;
            }
            if (v32 >= a2)
              goto LABEL_161;
          }
        }
        if (v7 < 2)
        {
          if (v7 == 1)
          {
            v159 = 0;
            v160 = 0;
            while (1)
            {
              v161 = v160;
              v162 = v160 + 1;
              while (1)
              {
                v163 = *(unsigned __int16 *)(result + 2 * v159);
                if (v163 > 0x20 || ((1 << v163) & 0x100003600) == 0)
                  break;
                v9 = 0;
                ++v161;
                ++v162;
                v159 = v161;
                if (v161 >= a2)
                  goto LABEL_162;
              }
              v165 = 0;
              v166 = result + 2 * v162;
              do
              {
                v167 = v165;
                if ((int)v161 + (int)v165 + 1 >= a2)
                  break;
                v168 = *(unsigned __int16 *)(v166 + 2 * v165++);
                v22 = v168 > 0x20;
                v169 = (1 << v168) & 0x100003600;
              }
              while (v22 || v169 == 0);
              if (a2 - v159 < (v167 + 1))
                break;
              if (!v167 && v163 == a3->u8[0])
                goto LABEL_310;
              v9 = 0;
              v160 = v161 + v167 + 2;
              v159 = v160;
              if (v160 >= a2)
                goto LABEL_162;
            }
          }
          else
          {
            v110 = 0;
            while (1)
            {
              while (1)
              {
                v111 = v110;
                v112 = *(unsigned __int16 *)(result + 2 * v110);
                v22 = v112 > 0x20;
                v113 = (1 << v112) & 0x100003600;
                if (v22 || v113 == 0)
                  break;
                v9 = 0;
                ++v110;
                if (v111 + 1 >= a2)
                  goto LABEL_162;
              }
              v115 = 1;
              do
              {
                v116 = v115;
                if ((unint64_t)v110 + v115 >= a2)
                  break;
                v117 = *(unsigned __int16 *)(result + 2 * v110 + 2 * v115++);
                v22 = v117 > 0x20;
                v118 = (1 << v117) & 0x100003600;
              }
              while (v22 || v118 == 0);
              if (a2 - (unint64_t)v110 < v116)
                break;
              v9 = v7 == (_DWORD)v116;
              v110 += v116 + 1;
              if (v110 >= a2 || v7 == (_DWORD)v116)
                goto LABEL_162;
            }
          }
        }
        else
        {
          v82 = 0;
          while (1)
          {
            while (1)
            {
              v83 = v82;
              v84 = (unsigned __int16 *)(result + 2 * v82);
              v85 = *v84;
              v22 = v85 > 0x20;
              v86 = (1 << v85) & 0x100003600;
              if (v22 || v86 == 0)
                break;
              v9 = 0;
              v82 = v83 + 1;
              if ((int)v83 + 1 >= a2)
                goto LABEL_162;
            }
            v88 = 1;
            do
            {
              v89 = v88;
              if (v83 + v88 >= (unint64_t)a2)
                break;
              v90 = *(unsigned __int16 *)(result + 2 * v83 + 2 * v88++);
              v22 = v90 > 0x20;
              v91 = (1 << v90) & 0x100003600;
            }
            while (v22 || v91 == 0);
            if ((unint64_t)a2 - v83 < v89)
              break;
            if (v7 == (_DWORD)v89)
            {
              v93 = *(_DWORD *)v84;
              v94 = *(_DWORD *)&v84[v89 & 1];
              if (((a3->u16[0] | (a3->u16[0] << 8)) & 0xFF00FF) == v93
                && ((*(unsigned __int16 *)((char *)a3->u16 + (v89 & 1)) | (*(unsigned __int16 *)((char *)a3->u16
                                                                                               + (v89 & 1)) << 8)) & 0xFF00FF) == v94)
              {
                goto LABEL_310;
              }
            }
            v82 = v83 + v89 + 1;
            if (v82 >= a2)
              goto LABEL_161;
          }
        }
      }
      goto LABEL_311;
    }
    goto LABEL_161;
  }
  if (!(_DWORD)a2)
  {
LABEL_161:
    v9 = 0;
LABEL_162:
    if (a5 && a6)
    {
      if (*(_DWORD *)a6 == 2)
        WTF::StringImpl::destroy(a6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)a6 -= 2;
    }
    return v9;
  }
  v10 = 0;
  v11 = 0;
  v12 = 32 - __clz(v7 - 1);
  while (1)
  {
    v13 = v11;
    v14 = v11 + 1;
    while (1)
    {
      v15 = *(unsigned __int8 *)(result + v10);
      if (v15 > 0x20 || ((1 << v15) & 0x100003600) == 0)
        break;
      ++v13;
      ++v14;
      v10 = v13;
      if (v13 >= a2)
        goto LABEL_161;
    }
    v17 = 0;
    v18 = (int8x16_t *)(result + v10);
    v19 = result + v14;
    do
    {
      v20 = v17;
      if ((int)v13 + (int)v17 + 1 >= a2)
        break;
      v21 = *(unsigned __int8 *)(v19 + v17++);
      v22 = v21 > 0x20;
      v23 = (1 << v21) & 0x100003600;
    }
    while (v22 || v23 == 0);
    v25 = (v20 + 1);
    if (a2 - v10 < v25)
      break;
    if (v7 - 1 == v20)
    {
      if (!v7)
        goto LABEL_310;
      if (v7 == 1)
      {
        if (a3->u8[0] == v15)
          goto LABEL_310;
      }
      else if (v12 == 1)
      {
        v26 = a3->u16[0];
        v27 = v18->u16[0];
LABEL_35:
        if (v26 == v27)
          goto LABEL_310;
      }
      else
      {
        switch(v12)
        {
          case 2u:
            if (a3->u16[0] != v18->u16[0])
              goto LABEL_36;
            v26 = *(unsigned __int16 *)((char *)&a3[-1].u16[7] + v25);
            v27 = *(unsigned __int16 *)((char *)&v18->u16[-1] + v25);
            goto LABEL_35;
          case 3u:
            if (a3->i32[0] != v18->i32[0])
              goto LABEL_36;
            v26 = *(__int32 *)((char *)&a3[-1].i32[3] + v25);
            v27 = *(__int32 *)((char *)&v18->i32[-1] + v25);
            goto LABEL_35;
          case 4u:
            if (a3->i64[0] == v18->i64[0]
              && *(uint64_t *)((char *)&a3[-1].i64[1] + v25) == *(uint64_t *)((char *)&v18->i64[-1] + v25))
            {
              goto LABEL_310;
            }
            goto LABEL_36;
          case 5u:
            v28 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&a3[-1] + v25), *(int8x16_t *)((char *)&v18[-1] + v25)), vceqq_s8(*(int8x16_t *)a3, *v18));
            v28.i8[0] = vminvq_u8(v28);
            if (v28.i32[0])
              goto LABEL_310;
            goto LABEL_36;
          default:
            v29 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a3, *v18);
            v29.i8[0] = vminvq_u8(v29);
            if (!v29.i32[0])
              goto LABEL_36;
            v30 = v7 & 0xF;
            if (v7 < 0x10)
              goto LABEL_310;
            break;
        }
        while (1)
        {
          v31 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)a3 + v30), *(int8x16_t *)((char *)v18 + v30));
          v31.i8[0] = vminvq_u8(v31);
          if (!v31.i32[0])
            break;
          v30 += 16;
          v9 = 1;
          if (v30 >= v7)
            goto LABEL_162;
        }
      }
    }
LABEL_36:
    v9 = 0;
    v11 = v13 + v20 + 2;
    v10 = v11;
    if (v11 >= a2)
      goto LABEL_162;
  }
LABEL_311:
  __break(1u);
  return result;
}

void WebCore::ManualSlotAssignment::~ManualSlotAssignment(WebCore::ManualSlotAssignment *this, void *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E33A7CA0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ManualSlotAssignment::Slot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v2, a2);
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E33A7CA0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ManualSlotAssignment::Slot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v3, a2);
  WTF::fastFree(this, a2);
}

void WebCore::SelectorChecker::CheckingContext::~CheckingContext(WebCore::SelectorChecker::CheckingContext *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if ((WebCore::SelectorChecker::CheckingContext *)((char *)this + 88) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  WTF *v24;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl ***v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl ***v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::StringImpl **v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF::StringImpl *v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v59;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v10 = v8 + 40;
    do
    {
      *(_QWORD *)(v10 - 24) = 0;
      *(_QWORD *)(v10 - 16) = v10;
      *(_QWORD *)(v10 - 8) = 1;
      v10 += 32;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v56 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 32 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v59 = v12;
          v27 = 0;
          v28 = *((_DWORD *)v15 + 4) >> 8;
          do
          {
            v29 = v28 & v23;
            v28 = ++v27 + v29;
          }
          while (*(_QWORD *)(v22 + 32 * v29));
          v30 = v22 + 32 * v29;
          v31 = (WTF::StringImpl ***)(v30 + 8);
          if (*(_DWORD *)(v30 + 20))
          {
            v32 = *v31;
            v33 = 8 * *(unsigned int *)(v30 + 20);
            do
            {
              v34 = *v32;
              *v32 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, v9);
                else
                  *(_DWORD *)v34 -= 2;
              }
              ++v32;
              v33 -= 8;
            }
            while (v33);
          }
          v35 = (WTF *)*v31;
          if ((WTF::StringImpl **)(v30 + 24) != *v31 && v35 != 0)
          {
            *v31 = 0;
            *(_DWORD *)(v22 + 32 * v29 + 16) = 0;
            WTF::fastFree(v35, v9);
          }
          v37 = *(WTF::StringImpl **)v30;
          *(_QWORD *)v30 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v9);
            else
              *(_DWORD *)v37 -= 2;
          }
          v38 = *v14;
          *v14 = 0;
          *(_QWORD *)v30 = v38;
          v39 = v4 + 32 * v11;
          *v31 = (WTF::StringImpl **)(v30 + 24);
          v41 = (WTF::StringImpl ***)(v39 + 8);
          v40 = *(WTF::StringImpl ***)(v39 + 8);
          v42 = v22 + 32 * v29;
          *(_QWORD *)(v42 + 16) = 1;
          v43 = (_DWORD *)(v42 + 16);
          v44 = (WTF::StringImpl **)(v39 + 24);
          if (v40 == (WTF::StringImpl **)(v39 + 24))
          {
            memcpy((void *)(v30 + 24), (const void *)(v39 + 24), 8 * *(unsigned int *)(v39 + 20));
          }
          else
          {
            *v41 = v44;
            *v31 = v40;
            v45 = *(_DWORD *)(v39 + 16);
            *(_DWORD *)(v39 + 16) = 1;
            *v43 = v45;
          }
          v12 = v59;
          v46 = v4 + 32 * v11;
          v47 = *(_DWORD *)(v46 + 20);
          *(_DWORD *)(v46 + 20) = 0;
          *(_DWORD *)(v30 + 20) = v47;
          v48 = *(unsigned int *)(v46 + 20);
          if ((_DWORD)v48)
          {
            v49 = *v41;
            v50 = 8 * v48;
            do
            {
              v51 = *v49;
              *v49 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v9);
                else
                  *(_DWORD *)v51 -= 2;
              }
              ++v49;
              v50 -= 8;
            }
            while (v50);
          }
          v52 = (WTF *)*v41;
          if (v44 != *v41 && v52 != 0)
          {
            *v41 = 0;
            *(_DWORD *)(v4 + 32 * v11 + 16) = 0;
            WTF::fastFree(v52, v9);
          }
          v54 = *v14;
          *v14 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v9);
            else
              *(_DWORD *)v54 -= 2;
          }
          if (v14 == a3)
            v12 = v30;
          v13 = v56;
        }
        else
        {
          v16 = v4 + 32 * v11;
          v17 = (WTF::StringImpl ***)(v16 + 8);
          v18 = *(unsigned int *)(v16 + 20);
          if ((_DWORD)v18)
          {
            v19 = *v17;
            v20 = 8 * v18;
            do
            {
              v21 = *v19;
              *v19 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v9);
                else
                  *(_DWORD *)v21 -= 2;
              }
              ++v19;
              v20 -= 8;
            }
            while (v20);
          }
          v24 = (WTF *)*v17;
          if ((WTF::StringImpl **)(v16 + 24) != *v17 && v24 != 0)
          {
            *v17 = 0;
            *(_DWORD *)(v4 + 32 * v11 + 16) = 0;
            WTF::fastFree(v24, v9);
          }
          v26 = *v14;
          *v14 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v9);
            else
              *(_DWORD *)v26 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v12;
}

uint64_t WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 2)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 1;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((void *)(v6 + 16) != v7 && v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WTF::StringImpl ***v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 32 * i;
      if (*(_QWORD *)v5 != -1)
      {
        v6 = (WTF::StringImpl ***)(v5 + 8);
        v7 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v7)
        {
          v8 = *v6;
          v9 = 8 * v7;
          do
          {
            v10 = *v8;
            *v8 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, a2);
              else
                *(_DWORD *)v10 -= 2;
            }
            ++v8;
            v9 -= 8;
          }
          while (v9);
        }
        v11 = (WTF *)*v6;
        v12 = a1 + 32 * i;
        if ((WTF::StringImpl **)(v12 + 24) != *v6 && v11 != 0)
        {
          *v6 = 0;
          *(_DWORD *)(v12 + 16) = 0;
          WTF::fastFree(v11, a2);
        }
        v14 = *(WTF::StringImpl **)v5;
        *(_QWORD *)v5 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, a2);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::SimulatedMouseEvent::~SimulatedMouseEvent(WebCore::SimulatedMouseEvent *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E33A5C38;
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33A5C38;
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::NamedSlotAssignment::Slot::~Slot(WebCore::NamedSlotAssignment::Slot *this, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v10 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v10)
      {
        v16 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v10));
        v4 = v16;
      }
      v11 = *(WTF **)(v4 + 16);
      if (v11)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v14 = v4;
        WTF::fastFree(v11, v3);
        v4 = v14;
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v12 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v12)
      {
        v17 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v12));
        v7 = v17;
      }
      v13 = *(WTF **)(v7 + 16);
      if (v13)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v15 = v7;
        WTF::fastFree(v13, v3);
        v7 = v15;
      }
      WTF::fastFree((WTF *)v7, v3);
    }
  }
}

unint64_t WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::VectorMover<false,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::move(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          v10 = *(unsigned int *)(v7 + 28);
          if ((_DWORD)v10)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
          v11 = *(WTF **)(v7 + 16);
          if (v11)
          {
            *(_QWORD *)(v7 + 16) = 0;
            *(_DWORD *)(v7 + 24) = 0;
            WTF::fastFree(v11, a2);
          }
          result = WTF::fastFree((WTF *)v7, a2);
        }
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ManualSlotAssignment::Slot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 32 * i);
      if (*v5 != -1)
      {
        WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v5 + 1), a2);
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr((unsigned int *)v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, (unsigned int *)v6));
          if (!v8)
          {
            atomic_store(1u, (unsigned int *)v6);
            v9 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v9)
            {
              v12 = v6;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
              v6 = v12;
            }
            v10 = *(WTF **)(v6 + 16);
            if (v10)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              v11 = v6;
              WTF::fastFree(v10, a2);
              v6 = v11;
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unint64_t WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorDataList::SelectorData>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = *(_QWORD *)result;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(result + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(v4 + 24) = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = v4;
        do
        {
          *(_QWORD *)v7 = *(_QWORD *)v8;
          *(_BYTE *)(v7 + 8) = *((_BYTE *)v8 + 8);
          *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
          v9 = *((_QWORD *)v8 + 3);
          *((_QWORD *)v8 + 3) = 0;
          *(_QWORD *)(v7 + 24) = v9;
          v10 = (unsigned int *)*((_QWORD *)v8 + 3);
          *((_QWORD *)v8 + 3) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v13 = v10;
              result = WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v13);
            }
          }
          v7 += 32;
          v8 = (WTF *)((char *)v8 + 32);
        }
        while (v8 != (WTF *)((char *)v4 + 32 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

const WebCore::CSSSelector *WebCore::selectorForIdLookup(unint64_t this, const WebCore::ContainerNode *a2, const WebCore::CSSSelector *a3)
{
  int v3;
  int v4;

  if ((this & 0x8000000000000) == 0 || *(_BYTE *)(*((_QWORD *)a2 + 1) + 3384) == 2)
    return 0;
  while (1)
  {
    v3 = *(_DWORD *)a3;
    v4 = (*(_DWORD *)a3 >> 4) & 0x1F;
    if (v4 == 2
      || v4 == 4 && *(_QWORD *)(*((_QWORD *)a3 + 1) + 32) == WebCore::HTMLNames::idAttr && (v3 & 0x800000) == 0)
    {
      break;
    }
    a3 = (const WebCore::CSSSelector *)((char *)a3 + 16);
    if ((v3 & 0x8000F) != 0)
      return 0;
  }
  return a3;
}

WebCore *WebCore::filterRootById(WebCore *this, WebCore::ContainerNode *a2, const WebCore::CSSSelector *a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  const WTF::AtomString *v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  const WebCore::TreeScope *v14;
  unsigned int *v15;
  void *v16;
  WebCore::Node *v17;
  uint64_t *v18;
  uint64_t v19;
  WebCore::Node *v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int i;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v30;
  unsigned __int8 v31;
  WebCore::Node *v33;

  if ((*((_BYTE *)this + 22) & 8) == 0 || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3384) == 2)
    return this;
  while (1)
  {
    v5 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 & 0xF) != 0)
      break;
    a2 = (WebCore::ContainerNode *)((char *)a2 + 16);
    if ((v5 & 0x80000) != 0)
      return this;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_DWORD *)a2;
    v8 = (*(_DWORD *)a2 >> 4) & 0x1F;
    if (v8 != 2
      && (v8 != 4 || *(_QWORD *)(*((_QWORD *)a2 + 1) + 32) != WebCore::HTMLNames::idAttr || (v7 & 0x800000) != 0))
    {
      goto LABEL_9;
    }
    v9 = (WebCore::ContainerNode *)((char *)a2 + 8);
    if ((v7 & 0x100000) != 0)
      v9 = (const WTF::AtomString *)(*(_QWORD *)v9 + 8);
    if (!*(_QWORD *)v9)
      goto LABEL_9;
    if (!*(_DWORD *)(*(_QWORD *)v9 + 4))
      goto LABEL_9;
    v14 = (const WebCore::TreeScope *)*((_QWORD *)this + 5);
    v15 = (unsigned int *)*((_QWORD *)v14 + 3);
    if (!v15)
      goto LABEL_9;
    WebCore::TreeScopeOrderedMap::getElementById(v15, v9, v14, (uint64_t *)&v33);
    v17 = v33;
    if (!v33)
      goto LABEL_9;
    v18 = *(uint64_t **)(*((_QWORD *)this + 5) + 24);
    if (v18)
    {
      v19 = *(_QWORD *)v9;
      if (*(_QWORD *)v9)
      {
        if (*(_DWORD *)(v19 + 4))
        {
          v22 = *v18;
          if (v22)
          {
            v23 = 0;
            v24 = *(_DWORD *)(v22 - 8);
            for (i = *(_DWORD *)(v19 + 16) >> 8; ; i = v23 + v26)
            {
              v26 = i & v24;
              v27 = (uint64_t *)(v22 + 40 * (i & v24));
              v28 = *v27;
              if (!*v27)
                break;
              if (v28 != -1 && v28 == v19)
              {
                v30 = *(_DWORD *)(v22 - 4);
                goto LABEL_40;
              }
              ++v23;
            }
            v30 = *(_DWORD *)(v22 - 4);
            v27 = (uint64_t *)(v22 + 40 * v30);
LABEL_40:
            if (v27 != (uint64_t *)(v22 + 40 * v30) && *((_DWORD *)v27 + 4) > 1u)
              goto LABEL_42;
          }
        }
      }
    }
    if ((v6 & 1) != 0)
    {
      v20 = (WebCore::Node *)*((_QWORD *)v33 + 4);
      if (v20)
        *((_DWORD *)v20 + 6) += 2;
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v16);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    else
    {
      v20 = v33;
    }
    if (!v20)
      goto LABEL_9;
    if (v20 == this)
      break;
    v21 = *((_WORD *)this + 14);
    if ((v21 & 0xF000) == 0x9000)
      break;
    if ((v21 & 0x80) != 0)
      break;
    v31 = WebCore::Node::isDescendantOf((const WebCore::Node ***)v20, (const WebCore::Node ***)this);
    if ((v31 & 1) != 0)
      break;
    v17 = v20;
LABEL_42:
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v16);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
LABEL_9:
    v11 = *(_DWORD *)a2;
    a2 = (WebCore::ContainerNode *)((char *)a2 + 16);
    v10 = v11;
    v12 = v11 & 0xF;
    v13 = v12 == 3;
    if ((v11 & 0xF) == 0)
      v13 = v6;
    v6 = v12 == 4 || v13;
    if ((v10 & 0x80000) != 0)
      return this;
  }
  if (*((_DWORD *)v20 + 6) == 2)
  {
    if ((*((_WORD *)v20 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v20, v16);
  }
  else
  {
    *((_DWORD *)v20 + 6) -= 2;
  }
  return v20;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    *(_DWORD *)(a2 + 24) += 2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return 1;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::ElementDescendantIterator<WebCore::Element>::operator++(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  v1 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v3 = (_QWORD *)v2[10];
  if (!v3)
  {
    if (v2 == v1)
    {
LABEL_20:
      result[1] = 0;
      return result;
    }
    while (1)
    {
      v3 = (_QWORD *)v2[7];
      if (v3)
        break;
      v2 = (_QWORD *)v2[4];
      if (v2)
        v6 = v2 == v1;
      else
        v6 = 1;
      if (v6)
        goto LABEL_20;
    }
  }
  if ((*((_WORD *)v3 + 14) & 8) != 0)
  {
    result[1] = v3;
    return result;
  }
  while (2)
  {
    if (v3 == v1)
      goto LABEL_20;
    while (1)
    {
      v4 = v3[7];
      if (v4)
        break;
      v3 = (_QWORD *)v3[4];
      if (v3)
        v5 = v3 == v1;
      else
        v5 = 1;
      if (v5)
      {
        result[1] = 0;
        return result;
      }
    }
    v3 = (_QWORD *)v3[7];
    if ((*(_WORD *)(v4 + 28) & 8) == 0)
      continue;
    break;
  }
  result[1] = v4;
  return result;
}

uint64_t WebCore::anyElement<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(_QWORD *)(result + 80);
  if (v2)
  {
    v4 = result;
    while ((*(_WORD *)(v2 + 28) & 8) == 0)
    {
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        return result;
    }
    do
    {
LABEL_15:
      v7 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v7 == *(_DWORD *)(a2 + 8))
      {
        result = WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(a2, v2);
      }
      else
      {
        v8 = *(_QWORD *)a2;
        *(_DWORD *)(v2 + 24) += 2;
        *(_QWORD *)(v8 + 8 * v7) = v2;
        *(_DWORD *)(a2 + 12) = v7 + 1;
      }
      v5 = *(_QWORD *)(v2 + 80);
      if (!v5)
      {
        if (v2 == v4)
          return result;
        while (1)
        {
          v5 = *(_QWORD *)(v2 + 56);
          if (v5)
            break;
          v2 = *(_QWORD *)(v2 + 32);
          if (v2)
            v6 = v2 == v4;
          else
            v6 = 1;
          if (v6)
            return result;
        }
      }
      v2 = v5;
    }
    while ((*(_WORD *)(v5 + 28) & 8) != 0);
    while (v5 != v4)
    {
      while (1)
      {
        v2 = *(_QWORD *)(v5 + 56);
        if (v2)
          break;
        v5 = *(_QWORD *)(v5 + 32);
        if (v5)
          v9 = v5 == v4;
        else
          v9 = 1;
        if (v9)
          return result;
      }
      v5 = *(_QWORD *)(v5 + 56);
      if ((*(_WORD *)(v2 + 28) & 8) != 0)
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::isEmptyBucket(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v15 = 0;
  v14 = 0;
  v4 = 0;
  if (!WTF::equal(*(WTF **)a1, 0, a3) || *(_QWORD *)(a1 + 8))
  {
    v5 = 0;
LABEL_7:
    ((void (*)(char *, _QWORD *))off_1E33A7D18[v5])(&v9, v13);
    goto LABEL_8;
  }
  v5 = 0;
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v4 = WebCore::operator==(a1 + 24, (uint64_t)v13);
  v5 = v15;
  if (v15 != -1)
    goto LABEL_7;
LABEL_8:
  v15 = -1;
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v4;
}

uint64_t WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::SelectorDataList::SelectorData *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::SelectorDataList::SelectorData **)a1;
    v5 = 32 * v3;
    do
    {
      WebCore::SelectorDataList::SelectorData::~SelectorData(v4);
      v4 = (WebCore::SelectorDataList::SelectorData *)(v6 + 32);
      v5 -= 32;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>::~KeyValuePair(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v8;

  v3 = *(WTF **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + 8, a2);
    v4 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v3, v4);
    WTF::fastFree(v3, v4);
  }
  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E33A7D18[v5])(&v8, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t std::optional<WebCore::CSSSelectorList>::operator=[abi:sn180100]<WebCore::CSSSelectorList,void>(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  if (v3)
  {
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(a1, v5);
  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::deallocateTable(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = (_QWORD *)WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>::~KeyValuePair((uint64_t)a1, a2);
      a1 += 8;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShadowRoot&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    *(_DWORD *)(a2 + 24) += 2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return 1;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::ShadowRoot::getAnimations(void)::$_0,BOOL,WebCore::Element &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a2 + 40);
  if ((*(_WORD *)(v2 + 28) & 0x80) == 0)
    v2 = 0;
  return v2 == *(_QWORD *)(a1 + 8);
}

uint64_t WTF::HashSet<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>(uint64_t *a1, WebCore::Node *this)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  WebCore::Node *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v10 + i++) & v4)
  {
    v10 = v8;
    v11 = *(WebCore::Node **)(v2 + 8 * v8);
    if (v11 != (WebCore::Node *)-1)
    {
      if (!v11)
        return 0;
      if (v11 == this)
        break;
    }
  }
  if ((_DWORD)v10 == *(_DWORD *)(v2 - 4))
    return 0;
  *(_QWORD *)(v2 + 8 * v10) = 0;
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this, this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  *(_QWORD *)(v2 + 8 * v10) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
  {
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a1, v16 >> 1, 0);
  }
  return 1;
}

uint64_t WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr((unsigned int *)result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, (unsigned int *)result));
        if (!v5)
        {
          atomic_store(1u, (unsigned int *)result);
          v6 = *(unsigned int *)(result + 28);
          if ((_DWORD)v6)
          {
            v9 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v6));
            result = v9;
          }
          v7 = *(WTF **)(result + 16);
          if (v7)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v8 = result;
            WTF::fastFree(v7, a2);
            result = v8;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::NamedSlotAssignment::Slot>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::NamedSlotAssignment::Slot>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::NamedSlotAssignment::Slot *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WebCore::NamedSlotAssignment::Slot *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore::NamedSlotAssignment::Slot *v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = 0;
          v22 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v23 = v22 & v20;
            v22 = ++v21 + v23;
          }
          while (*(_QWORD *)(v19 + 16 * v23));
          v24 = (WTF::StringImpl **)(v19 + 16 * v23);
          v25 = v24[1];
          v24[1] = 0;
          if (v25)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v25, v10);
            WTF::fastFree(v26, v27);
            v28 = *v24;
            *v24 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)v28 -= 2;
            }
          }
          else
          {
            *v24 = 0;
          }
          v29 = *v13;
          *v13 = 0;
          *v24 = v29;
          v30 = v6 + 16 * v11;
          v31 = *(WTF::StringImpl **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          v24[1] = v31;
          v32 = *(WebCore::NamedSlotAssignment::Slot **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v32, v10);
            WTF::fastFree(v33, v34);
          }
          v35 = *v13;
          *v13 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v35 -= 2;
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebCore::NamedSlotAssignment::Slot **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v16, v10);
            WTF::fastFree(v17, v18);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  _QWORD *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      v5 = *(_QWORD *)result + 8 * v4;
      v6 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr((unsigned int *)v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, (unsigned int *)v7));
          if (!v9)
          {
            atomic_store(1u, (unsigned int *)v7);
            v10 = *(unsigned int *)(v7 + 28);
            if ((_DWORD)v10)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
            v11 = *(WTF **)(v7 + 16);
            if (v11)
            {
              *(_QWORD *)(v7 + 16) = 0;
              *(_DWORD *)(v7 + 24) = 0;
              WTF::fastFree(v11, (void *)a2);
            }
            result = WTF::fastFree((WTF *)v7, (void *)a2);
          }
        }
        ++v6;
      }
      while (v6 != (uint64_t *)v5);
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v12 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4)
      {
        v13 = (_QWORD *)result;
        if ((WTF *)result != v12)
        {
          v14 = (WTF *)((char *)v12 + 8 * v4);
          v15 = v12;
          do
          {
            v16 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            *v13 = v16;
            v17 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            if (v17)
            {
              do
              {
                v18 = __ldaxr((unsigned int *)v17);
                v19 = v18 - 1;
              }
              while (__stlxr(v19, (unsigned int *)v17));
              if (!v19)
              {
                atomic_store(1u, (unsigned int *)v17);
                v20 = *(unsigned int *)(v17 + 28);
                if ((_DWORD)v20)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v20));
                v21 = *(WTF **)(v17 + 16);
                if (v21)
                {
                  *(_QWORD *)(v17 + 16) = 0;
                  *(_DWORD *)(v17 + 24) = 0;
                  WTF::fastFree(v21, (void *)a2);
                }
                result = WTF::fastFree((WTF *)v17, (void *)a2);
              }
            }
            ++v13;
            v15 = (WTF *)((char *)v15 + 8);
          }
          while (v15 != v14);
        }
      }
    }
    if (v12)
    {
      if (*(WTF **)v3 == v12)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v12, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::HTMLSlotElement,WebCore::ManualSlotAssignment::Slot,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_29;
    v5 = 0;
    do
    {
      while (1)
      {
        v6 = (uint64_t *)(v3 + 32 * --v4);
        result = *v6;
        if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
          break;
        if (!v4)
          goto LABEL_18;
      }
      *v6 = 0;
      do
      {
        v7 = __ldaxr((unsigned int *)result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)result));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)result);
        v9 = *(unsigned int *)(result + 28);
        if ((_DWORD)v9)
        {
          v26 = result;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
          result = v26;
        }
        v10 = *(WTF **)(result + 16);
        if (v10)
        {
          *(_QWORD *)(result + 16) = 0;
          *(_DWORD *)(result + 24) = 0;
          v25 = result;
          WTF::fastFree(v10, a2);
          result = v25;
        }
        WTF::fastFree((WTF *)result, a2);
      }
      *v6 = -1;
      result = WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 32 * v4 + 8, a2);
      ++v5;
    }
    while (v4);
LABEL_18:
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v11 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v12 = *(_DWORD *)(v11 - 12);
      else
        v12 = 0;
      *(_DWORD *)(v11 - 12) = v12 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v13 = *(_DWORD *)(v3 - 4);
      v14 = *(unsigned int *)(v3 - 12);
      if (v13 >= 9 && 6 * (int)v14 < v13)
      {
        v18 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v14)
            goto LABEL_40;
        }
        else if (3 * v20 > 4 * v14)
        {
LABEL_38:
          v21 = (double)v14;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_41;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_38;
LABEL_40:
        v21 = (double)v14;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_41:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ManualSlotAssignment::Slot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v2, v24, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v16 = 0;
          goto LABEL_33;
        }
LABEL_30:
        v16 = *(_DWORD *)(v3 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
          goto LABEL_34;
        goto LABEL_33;
      }
LABEL_29:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_30;
    }
  }
  v16 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_33:
  v17 = v16;
LABEL_34:
  *(_DWORD *)(v2 + 12) = 2 * v17;
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ManualSlotAssignment::Slot,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ManualSlotAssignment::Slot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t *result;
  uint64_t v49;
  uint64_t v50;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 32 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 32 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = *(_QWORD *)(v23 + 32 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (v31);
          v32 = (uint64_t *)(v23 + 32 * v30);
          v33 = v32 + 1;
          WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v32 + 1), v10);
          v35 = *v32;
          *v32 = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr((unsigned int *)v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, (unsigned int *)v35));
            if (!v37)
            {
              atomic_store(1u, (unsigned int *)v35);
              v44 = *(unsigned int *)(v35 + 28);
              if ((_DWORD)v44)
              {
                v50 = v35;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v35 + 16), (WTF::StringImpl *)(*(_QWORD *)(v35 + 16) + 32 * v44));
                v35 = v50;
              }
              v45 = *(WTF **)(v35 + 16);
              if (v45)
              {
                *(_QWORD *)(v35 + 16) = 0;
                *(_DWORD *)(v35 + 24) = 0;
                v49 = v35;
                WTF::fastFree(v45, v34);
                v35 = v49;
              }
              WTF::fastFree((WTF *)v35, v34);
            }
          }
          v38 = *v16;
          *v16 = 0;
          *v32 = v38;
          v39 = v6 + 32 * v13;
          *v33 = 0;
          v32[2] = 0;
          v40 = *(_QWORD *)(v39 + 8);
          v39 += 8;
          *(_QWORD *)v39 = 0;
          *v33 = v40;
          LODWORD(v38) = *(_DWORD *)(v39 + 8);
          *(_DWORD *)(v39 + 8) = 0;
          *((_DWORD *)v32 + 4) = v38;
          LODWORD(v38) = *(_DWORD *)(v39 + 12);
          *(_DWORD *)(v39 + 12) = 0;
          *((_DWORD *)v32 + 5) = v38;
          v32[3] = *(_QWORD *)(v39 + 16);
          WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v39, v34);
          v41 = *v16;
          *v16 = 0;
          if (v41)
          {
            do
            {
              v42 = __ldaxr((unsigned int *)v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, (unsigned int *)v41));
            if (!v43)
            {
              atomic_store(1u, (unsigned int *)v41);
              v46 = *(unsigned int *)(v41 + 28);
              if ((_DWORD)v46)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v41 + 16), (WTF::StringImpl *)(*(_QWORD *)(v41 + 16) + 32 * v46));
              v47 = *(WTF **)(v41 + 16);
              if (v47)
              {
                *(_QWORD *)(v41 + 16) = 0;
                *(_DWORD *)(v41 + 24) = 0;
                WTF::fastFree(v47, v10);
              }
              WTF::fastFree((WTF *)v41, v10);
            }
          }
          if (v16 == a3)
            v14 = v32;
        }
        else
        {
          WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 + 32 * v13 + 8, v10);
          v18 = *v16;
          *v16 = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr((unsigned int *)v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, (unsigned int *)v18));
            if (!v20)
            {
              atomic_store(1u, (unsigned int *)v18);
              v21 = *(unsigned int *)(v18 + 28);
              if ((_DWORD)v21)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v21));
              v22 = *(WTF **)(v18 + 16);
              if (v22)
              {
                *(_QWORD *)(v18 + 16) = 0;
                *(_DWORD *)(v18 + 24) = 0;
                WTF::fastFree(v22, v10);
              }
              WTF::fastFree((WTF *)v18, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WebCore::StaticNodeList::bisoHeap(WebCore::StaticNodeList *this)
{
  return &WebCore::StaticNodeList::bisoHeap(void)::heap;
}

uint64_t WebCore::StaticNodeList::operator new(uint64_t this)
{
  if (this == 40)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::StaticWrapperNodeList::length(WebCore::StaticWrapperNodeList *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
}

uint64_t WebCore::StaticWrapperNodeList::item(WebCore::StaticWrapperNodeList *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
}

uint64_t WebCore::StaticElementList::length(WebCore::StaticElementList *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t WebCore::StaticElementList::item(WebCore::StaticElementList *this, unsigned int a2)
{
  if (*((_DWORD *)this + 9) <= a2)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)this + 3) + 8 * a2);
}

uint64_t WebCore::StaticRange::create@<X0>(WebCore::StaticRange *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  v4 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 24) += 2;
  v5 = *((_DWORD *)this + 2);
  v6 = *((_QWORD *)this + 2);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *((_DWORD *)this + 6);
  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = v6;
  *(_DWORD *)(result + 40) = v7;
  *(_QWORD *)result = off_1E33A7EF0;
  *a2 = result;
  return result;
}

uint64_t WebCore::StaticRange::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;

  v3 = *(_QWORD *)result;
  v4 = *(unsigned __int16 *)(*(_QWORD *)result + 28);
  if (((v4 & 6) != 0 || (((v4 >> 12) - 2) & 0xFFFFFFF7) != 0)
    && ((v5 = *(_QWORD *)(result + 16), v6 = *(unsigned __int16 *)(v5 + 28), (v6 & 6) != 0)
     || (((v6 >> 12) - 2) & 0xFFFFFFF7) != 0))
  {
    *(_QWORD *)result = 0;
    v7 = *(_DWORD *)(result + 8);
    *(_QWORD *)(result + 16) = 0;
    v8 = *(_DWORD *)(result + 24);
    result = bmalloc::api::isoAllocate();
    v9 = 0;
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = v3;
    *(_DWORD *)(result + 24) = v7;
    *(_QWORD *)(result + 32) = v5;
    *(_DWORD *)(result + 40) = v8;
    *(_QWORD *)result = off_1E33A7EF0;
    *(_QWORD *)a2 = result;
  }
  else
  {
    *(_BYTE *)a2 = 20;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = 1;
  }
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t WebCore::StaticRange::visitNodesConcurrently(uint64_t this, JSC::AbstractSlotVisitor *a2)
{
  JSC::AbstractSlotVisitor *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  JSC::AbstractSlotVisitor *v31;

  v2 = a2;
  v3 = this;
  v4 = *(_QWORD *)(this + 16);
  if (v4)
  {
    v29 = this;
    if ((*(_BYTE *)(v4 + 22) & 8) == 0)
    {
      while (1)
      {
        v6 = v4;
        if ((*(_WORD *)(v4 + 28) & 0x80) != 0)
        {
          v8 = *(_QWORD *)(v4 + 200);
          if (!v8)
            goto LABEL_19;
          v7 = (uint64_t *)(v8 + 8);
        }
        else
        {
          v7 = (uint64_t *)(v4 + 32);
        }
        v4 = *v7;
        if (!*v7)
          goto LABEL_19;
      }
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
LABEL_19:
    v3 = this;
    v2 = a2;
    if (v6 && !*((_BYTE *)a2 + 130))
    {
      this = *((_QWORD *)a2 + 15);
      v12 = *(_QWORD *)(this + 48);
      v13 = *(_DWORD *)(v12 + 4);
      v14 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = v17;
      v3 = v29;
      while (1)
      {
        v19 = *(_QWORD *)(v12 + 8 * v18 + 16);
        if (!v19)
          break;
        v20 = v6 == v19;
        v2 = a2;
        if (v20)
          goto LABEL_2;
        v18 = (v18 + 1) & v13;
        if (v18 == v17)
        {
          __break(0xC471u);
          JUMPOUT(0x195A47F94);
        }
      }
      this = WTF::ConcurrentPtrHashSet::addSlow();
      v3 = v29;
      v2 = a2;
      if ((_DWORD)this)
      {
        if (*((_BYTE *)a2 + 131))
          this = (*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v6);
        v2 = a2;
        ++*((_QWORD *)a2 + 9);
        v3 = v29;
      }
    }
  }
LABEL_2:
  v5 = *(_QWORD *)(v3 + 32);
  if (v5)
  {
    v31 = v2;
    if ((*(_BYTE *)(v5 + 22) & 8) == 0)
    {
      while (1)
      {
        v9 = v5;
        if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
        {
          v11 = *(_QWORD *)(v5 + 200);
          if (!v11)
            goto LABEL_27;
          v10 = (uint64_t *)(v11 + 8);
        }
        else
        {
          v10 = (uint64_t *)(v5 + 32);
        }
        v5 = *v10;
        if (!*v10)
          goto LABEL_27;
      }
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
LABEL_27:
    if (v9 && !*((_BYTE *)v31 + 130))
    {
      this = *((_QWORD *)v31 + 15);
      v21 = *(_QWORD *)(this + 48);
      v22 = *(_DWORD *)(v21 + 4);
      v23 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v26 = v22 & ((v25 >> 31) ^ v25);
      v27 = v26;
      while (1)
      {
        v28 = *(_QWORD *)(v21 + 8 * v27 + 16);
        if (!v28)
          break;
        if (v9 == v28)
          return this;
        v27 = (v27 + 1) & v22;
        if (v27 == v26)
        {
          __break(0xC471u);
          JUMPOUT(0x195A48038);
        }
      }
      this = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)this)
      {
        if (*((_BYTE *)v31 + 131))
          this = (*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)v31 + 144))(v31, v9);
        ++*((_QWORD *)v31 + 9);
      }
    }
  }
  return this;
}

BOOL WebCore::StaticRange::computeValidity(WebCore::StaticRange *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v2 + 22) & 0x18) != 0)
  {
    v5 = **(_QWORD **)(v2 + 40);
  }
  else
  {
    v4 = v2;
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 32);
    }
    while (v4);
  }
  if ((*(_BYTE *)(v3 + 22) & 0x18) != 0)
  {
    v7 = **(_QWORD **)(v3 + 40);
  }
  else
  {
    v6 = *((_QWORD *)this + 4);
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 32);
    }
    while (v6);
  }
  v8 = 0;
  if (v5 && v7)
  {
    if (((*(unsigned __int8 *)(v5 + 22) ^ *(unsigned __int8 *)(v7 + 22)) & 8) != 0
      || *(_QWORD *)(v5 + 40) != *(_QWORD *)(v7 + 40))
    {
      return 0;
    }
    v9 = *((_DWORD *)this + 6);
    v10 = *(_WORD *)(v2 + 28);
    if ((v10 & 1) != 0)
    {
      v12 = *(_QWORD *)(v2 + 80);
      if (v12)
        LODWORD(v12) = *(_DWORD *)(v12 + 4);
    }
    else if ((v10 & 4) != 0 && (v11 = *(_QWORD *)(v2 + 80)) != 0)
    {
      LODWORD(v12) = 0;
      do
      {
        LODWORD(v12) = v12 + 1;
        v11 = *(_QWORD *)(v11 + 56);
      }
      while (v11);
    }
    else
    {
      LODWORD(v12) = 0;
    }
    if (v9 > v12)
      return 0;
    v13 = *((_DWORD *)this + 10);
    v14 = *(_WORD *)(v3 + 28);
    if ((v14 & 1) != 0)
    {
      v16 = *(_QWORD *)(v3 + 80);
      if (v16)
        LODWORD(v16) = *(_DWORD *)(v16 + 4);
    }
    else if ((v14 & 4) != 0 && (v15 = *(_QWORD *)(v3 + 80)) != 0)
    {
      LODWORD(v16) = 0;
      do
      {
        LODWORD(v16) = v16 + 1;
        v15 = *(_QWORD *)(v15 + 56);
      }
      while (v15);
    }
    else
    {
      LODWORD(v16) = 0;
    }
    if (v13 > v16)
      return 0;
    if (v2 == v3)
      return v13 > v9;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v2, v3, &v22);
    if (v22)
    {
      v18 = v23;
      if (v23)
      {
        v8 = v24;
        if (!v24)
          return v8;
        v19 = *(unsigned __int16 *)(v23 + 28);
        v20 = *(unsigned __int16 *)(v24 + 28);
        if (((v19 | v20) & 0x80) != 0)
        {
          if ((v20 & 0x80) != 0)
            return (v19 >> 7) & 1;
          else
            return 1;
        }
        if (v23 != v24)
        {
          do
            v18 = *(_QWORD *)(v18 + 56);
          while (v18 != v24 && v18 != 0);
          if (!v18)
            return 0;
        }
      }
    }
    return 1;
  }
  return v8;
}

uint64_t WebCore::StaticRange::startContainer(WebCore::StaticRange *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::StaticRange::endContainer(WebCore::StaticRange *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::StaticRange::startOffset(WebCore::StaticRange *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebCore::StaticRange::endOffset(WebCore::StaticRange *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t WebCore::StringCallback::scheduleCallback(WebCore::StringCallback *this, WebCore::ScriptExecutionContext *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  ++*((_DWORD *)this + 4);
  v5 = *a3;
  if (*a3)
  {
    *(_DWORD *)v5 += 2;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E33A8290;
    v6[1] = this;
    *(_DWORD *)v5 += 2;
  }
  else
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E33A8290;
    v6[1] = this;
  }
  v6[2] = v5;
  v9 = (uint64_t)v6;
  v10 = 0;
  (*(void (**)(WebCore::ScriptExecutionContext *, uint64_t *))(*(_QWORD *)a2 + 336))(a2, &v9);
  result = v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(WebCore::StyledElement *this, unsigned __int8 *a2, __n128 a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v6 = *((_QWORD *)this + 13);
  *(_DWORD *)(v6 + 4) &= ~8u;
  result = *(WTF::StringImpl **)(v6 + 8);
  if (result)
  {
    WebCore::StyleProperties::asTextInternal(result, a2, a5, (uint64_t)&v13, a3);
    WTF::StringBuilder::toAtomString((WTF::AtomString *)&v13, (WTF::AtomString *)&v12);
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    WebCore::Element::setSynchronizedLazyAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v12);
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::StyledElement::cssomStyle(WebCore::StyledElement *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  WTF *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WebCore::UniqueElementData *v20;
  WebCore::ElementData *v21;
  WebCore::ElementData *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  unsigned int *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  WTF *v51;
  void *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD **v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  _DWORD *v62;
  WTF *v63;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WebCore::MutableStyleProperties *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD **v77;
  _DWORD *v78;
  WTF *v79;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD **v85;
  _DWORD *v86;
  WTF *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD **v92;
  _DWORD *v93;
  WTF *v94;
  uint64_t v96;
  WTF *v97;
  WebCore::ElementData *v98;

  v3 = (uint64_t *)((char *)this + 104);
  v4 = *((_QWORD *)this + 13);
  if (!v4)
  {
    v17 = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)v17 = 0x100000001;
    *(_OWORD *)(v17 + 8) = 0u;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_QWORD *)(v17 + 40) = v17 + 56;
    *(_QWORD *)(v17 + 48) = 4;
    v18 = *v3;
    *v3 = v17;
    if (!v18)
      goto LABEL_29;
    if (*(_DWORD *)v18 != 1)
    {
      --*(_DWORD *)v18;
      goto LABEL_29;
    }
    v32 = *(unsigned int *)(v18 + 4);
    if ((v32 & 1) != 0)
    {
      v33 = *(unsigned int *)(v18 + 52);
      if ((_DWORD)v33)
      {
        v34 = 16 * v33;
        v35 = (WTF::StringImpl **)(*(_QWORD *)(v18 + 40) + 8);
        do
        {
          v36 = *v35;
          *v35 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, a2);
            else
              *(_DWORD *)v36 -= 2;
          }
          v37 = (WTF::StringImpl **)*(v35 - 1);
          *(v35 - 1) = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
              WTF::fastFree(v38, v39);
            }
            else
            {
              --*(_DWORD *)v37;
            }
          }
          v35 += 2;
          v34 -= 16;
        }
        while (v34);
      }
      v40 = *(WTF **)(v18 + 40);
      if ((WTF *)(v18 + 56) != v40 && v40 != 0)
      {
        *(_QWORD *)(v18 + 40) = 0;
        *(_DWORD *)(v18 + 48) = 0;
        WTF::fastFree(v40, a2);
      }
      v42 = *(unsigned int **)(v18 + 32);
      *(_QWORD *)(v18 + 32) = 0;
      if (v42)
      {
        if (*v42 == 1)
        {
          v71 = v42[1];
          if (v71 >= 0x10)
          {
            v72 = 0;
            v73 = (unsigned int *)((char *)v42 + ((v71 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v74 = (_DWORD *)(*v73 | ((unint64_t)*((unsigned __int8 *)v73 + 4) << 32));
              if (*v74 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v74, a2);
              else
                *v74 -= 2;
              ++v72;
              v73 = (unsigned int *)((char *)v73 + 5);
            }
            while (v72 < (unint64_t)v42[1] >> 4);
          }
          WTF::fastFree((WTF *)v42, a2);
        }
        else
        {
          --*v42;
        }
      }
      v43 = *(WTF::StringImpl **)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, a2);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = *(WTF **)(v18 + 16);
      *(_QWORD *)(v18 + 16) = 0;
      if (v44)
      {
        if (*((_DWORD *)v44 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v44, a2);
        else
          --*((_DWORD *)v44 + 2);
      }
      v45 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      if (!v45)
        goto LABEL_82;
      v46 = *(_DWORD *)v45 - 1;
      if (*(_DWORD *)v45 != 1)
        goto LABEL_81;
      if ((*(_BYTE *)(v45 + 4) & 8) != 0)
      {
        v75 = *(unsigned int *)(v45 + 28);
        if ((_DWORD)v75)
        {
          v76 = 16 * v75;
          v77 = (_DWORD **)(*(_QWORD *)(v45 + 16) + 8);
          do
          {
            v78 = *v77;
            *v77 = 0;
            if (v78)
            {
              if (*v78 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v78, a2);
              else
                *v78 -= 2;
            }
            v77 += 2;
            v76 -= 16;
          }
          while (v76);
        }
LABEL_154:
        v79 = *(WTF **)(v45 + 16);
        if ((WTF *)(v45 + 32) != v79 && v79 != 0)
        {
          *(_QWORD *)(v45 + 16) = 0;
          *(_DWORD *)(v45 + 24) = 0;
          WTF::fastFree(v79, a2);
        }
        v81 = *(_QWORD *)(v45 + 8);
        *(_QWORD *)(v45 + 8) = 0;
        if (v81)
          (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
        v82 = (WTF *)v45;
        goto LABEL_162;
      }
    }
    else
    {
      if (v32 >= 0x20)
      {
        v47 = v32 >> 5;
        v48 = (WTF::StringImpl **)(v18 + 40);
        do
        {
          v49 = *v48;
          *v48 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, a2);
            else
              *(_DWORD *)v49 -= 2;
          }
          v50 = (WTF::StringImpl **)*(v48 - 1);
          *(v48 - 1) = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v50);
              WTF::fastFree(v51, v52);
            }
            else
            {
              --*(_DWORD *)v50;
            }
          }
          v48 += 2;
          --v47;
        }
        while (v47);
      }
      v53 = *(WTF::StringImpl **)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, a2);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = *(WTF **)(v18 + 16);
      *(_QWORD *)(v18 + 16) = 0;
      if (v54)
      {
        if (*((_DWORD *)v54 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v54, a2);
        else
          --*((_DWORD *)v54 + 2);
      }
      v45 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      if (!v45)
        goto LABEL_82;
      v46 = *(_DWORD *)v45 - 1;
      if (*(_DWORD *)v45 != 1)
      {
LABEL_81:
        *(_DWORD *)v45 = v46;
LABEL_82:
        WTF::fastFree((WTF *)v18, a2);
        goto LABEL_29;
      }
      if ((*(_BYTE *)(v45 + 4) & 8) != 0)
      {
        v55 = *(unsigned int *)(v45 + 28);
        if ((_DWORD)v55)
        {
          v56 = 16 * v55;
          v57 = (_DWORD **)(*(_QWORD *)(v45 + 16) + 8);
          do
          {
            v58 = *v57;
            *v57 = 0;
            if (v58)
            {
              if (*v58 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v58, a2);
              else
                *v58 -= 2;
            }
            v57 += 2;
            v56 -= 16;
          }
          while (v56);
        }
        goto LABEL_154;
      }
    }
    WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v45, a2);
LABEL_162:
    WTF::fastFree(v82, a2);
    goto LABEL_82;
  }
  if ((*(_BYTE *)(v4 + 4) & 1) != 0)
    goto LABEL_3;
  v19 = *(_DWORD *)(v4 + 4);
  v20 = (WebCore::UniqueElementData *)WTF::fastMalloc((WTF *)0x78);
  if ((v19 & 1) != 0)
    v21 = WebCore::UniqueElementData::UniqueElementData(v20, (const WebCore::UniqueElementData *)v4);
  else
    v21 = (WebCore::ElementData *)WebCore::UniqueElementData::UniqueElementData((uint64_t)v20, v4);
  v98 = v21;
  WTF::RefPtr<WebCore::ElementData,WTF::RawPtrTraits<WebCore::ElementData>,WTF::DefaultRefDerefTraits<WebCore::ElementData>>::operator=<WebCore::UniqueElementData>(v3, (WTF::StringImpl *)&v98);
  v22 = v98;
  v98 = 0;
  if (v22)
    WebCore::ElementData::deref((uint64_t)v22, a2);
LABEL_29:
  v4 = *v3;
LABEL_3:
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
  {
    if ((*((_WORD *)this + 14) & 0x10) != 0)
      v23 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3384) == 2) | 8;
    else
      v23 = 9;
    v5 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = v5 + 32;
    *(_QWORD *)(v5 + 24) = 4;
    *(_DWORD *)v5 = 2;
    *(_DWORD *)(v5 + 4) = v23;
    v24 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v5;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        if ((*(_BYTE *)(v24 + 4) & 8) != 0)
        {
          v59 = *(unsigned int *)(v24 + 28);
          if ((_DWORD)v59)
          {
            v60 = 16 * v59;
            v61 = (_DWORD **)(*(_QWORD *)(v24 + 16) + 8);
            do
            {
              v62 = *v61;
              *v61 = 0;
              if (v62)
              {
                if (*v62 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, a2);
                else
                  *v62 -= 2;
              }
              v61 += 2;
              v60 -= 16;
            }
            while (v60);
          }
          v63 = *(WTF **)(v24 + 16);
          if ((WTF *)(v24 + 32) != v63 && v63 != 0)
          {
            *(_QWORD *)(v24 + 16) = 0;
            *(_DWORD *)(v24 + 24) = 0;
            WTF::fastFree(v63, a2);
          }
          v65 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v65)
            (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
          v66 = (WTF *)v24;
        }
        else
        {
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v24, a2);
        }
        WTF::fastFree(v66, a2);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    v6 = *(_DWORD *)v5 - 1;
    if (*(_DWORD *)v5 != 1)
      goto LABEL_6;
    v25 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v25)
    {
      v26 = 16 * v25;
      v27 = (_DWORD **)(*(_QWORD *)(v5 + 16) + 8);
      do
      {
        v28 = *v27;
        *v27 = 0;
        if (v28)
        {
          if (*v28 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, a2);
          else
            *v28 -= 2;
        }
        v27 += 2;
        v26 -= 16;
      }
      while (v26);
    }
    v13 = *(WTF **)(v5 + 16);
    v14 = v5 + 32 == (_QWORD)v13;
LABEL_18:
    if (!v14 && v13 != 0)
    {
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      WTF::fastFree(v13, a2);
    }
    v16 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    WTF::fastFree((WTF *)v5, a2);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v5 + 4) & 8) != 0)
  {
    v6 = (*(_DWORD *)v5)++;
    if (v6)
    {
LABEL_6:
      *(_DWORD *)v5 = v6;
      goto LABEL_7;
    }
    v9 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v9)
    {
      v10 = 16 * v9;
      v11 = (_DWORD **)(*(_QWORD *)(v5 + 16) + 8);
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          if (*v12 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
          else
            *v12 -= 2;
        }
        v11 += 2;
        v10 -= 16;
      }
      while (v10);
    }
    v13 = *(WTF **)(v5 + 16);
    v14 = v5 + 32 == (_QWORD)v13;
    goto LABEL_18;
  }
  v67 = WTF::fastMalloc((WTF *)0x60);
  v68 = WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v67, (const WebCore::StyleProperties *)v5);
  ++*(_DWORD *)v68;
  v70 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v68;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
    {
      if ((*(_BYTE *)(v70 + 4) & 8) != 0)
      {
        v90 = *(unsigned int *)(v70 + 28);
        if ((_DWORD)v90)
        {
          v91 = 16 * v90;
          v92 = (_DWORD **)(*(_QWORD *)(v70 + 16) + 8);
          do
          {
            v93 = *v92;
            *v92 = 0;
            if (v93)
            {
              if (*v93 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v93, v69);
              else
                *v93 -= 2;
            }
            v92 += 2;
            v91 -= 16;
          }
          while (v91);
        }
        v94 = *(WTF **)(v70 + 16);
        if ((WTF *)(v70 + 32) != v94 && v94 != 0)
        {
          *(_QWORD *)(v70 + 16) = 0;
          *(_DWORD *)(v70 + 24) = 0;
          WTF::fastFree(v94, v69);
        }
        v96 = *(_QWORD *)(v70 + 8);
        *(_QWORD *)(v70 + 8) = 0;
        if (v96)
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
        v97 = (WTF *)v70;
      }
      else
      {
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v70, v69);
      }
      WTF::fastFree(v97, v69);
    }
    else
    {
      --*(_DWORD *)v70;
    }
  }
  if (*(_DWORD *)v67 == 1)
  {
    v83 = *(unsigned int *)(v67 + 28);
    if ((_DWORD)v83)
    {
      v84 = 16 * v83;
      v85 = (_DWORD **)(*(_QWORD *)(v67 + 16) + 8);
      do
      {
        v86 = *v85;
        *v85 = 0;
        if (v86)
        {
          if (*v86 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v86, v69);
          else
            *v86 -= 2;
        }
        v85 += 2;
        v84 -= 16;
      }
      while (v84);
    }
    v87 = *(WTF **)(v67 + 16);
    if ((WTF *)(v67 + 32) != v87 && v87 != 0)
    {
      *(_QWORD *)(v67 + 16) = 0;
      *(_DWORD *)(v67 + 24) = 0;
      WTF::fastFree(v87, v69);
    }
    v89 = *(_QWORD *)(v67 + 8);
    *(_QWORD *)(v67 + 8) = 0;
    if (v89)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
    WTF::fastFree((WTF *)v67, v69);
  }
  else
  {
    --*(_DWORD *)v67;
  }
  v5 = v67;
LABEL_7:
  v7 = *(_QWORD **)(v5 + 8);
  if (!v7)
  {
    v7 = (_QWORD *)bmalloc::api::isoAllocate();
    v7[2] = 0;
    v7[3] = v5;
    v7[4] = 0;
    *v7 = off_1E3399AE8;
    v7[1] = 0;
    v29 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v29)
    {
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    v7[5] = v29;
    v31 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v7;
    if (v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      return *(_QWORD **)(v5 + 8);
    }
  }
  return v7;
}

WebCore::MutableStyleProperties *WebCore::StyledElement::ensureMutableInlineStyle(WebCore::StyledElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v13;
  WTF *v14;
  int v15;
  WTF::StringImpl *v16;
  WebCore::MutableStyleProperties *v17;
  WTF *v18;
  void *v19;
  WebCore::MutableStyleProperties *v20;
  WebCore::MutableStyleProperties *v21;
  WTF::StringImpl *v22;
  WebCore::MutableStyleProperties *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;

  v3 = *((_QWORD *)this + 13);
  if (!v3 || (*(_BYTE *)(v3 + 4) & 1) == 0)
  {
    WebCore::Element::createUniqueElementData(this);
    v3 = *((_QWORD *)this + 13);
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
  {
    if ((*((_WORD *)this + 14) & 0x10) != 0)
      v15 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3384) == 2) | 8;
    else
      v15 = 9;
    v4 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = v4 + 32;
    *(_QWORD *)(v4 + 24) = 4;
    *(_DWORD *)v4 = 2;
    *(_DWORD *)(v4 + 4) = v15;
    v17 = *(WebCore::MutableStyleProperties **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v4;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        if ((*((_BYTE *)v17 + 4) & 8) != 0)
          WebCore::MutableStyleProperties::~MutableStyleProperties(v17, v16);
        else
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v17, v16);
        WTF::fastFree(v18, v19);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
    v5 = *(_DWORD *)v4 - 1;
    if (*(_DWORD *)v4 != 1)
      goto LABEL_6;
    WebCore::MutableStyleProperties::~MutableStyleProperties((WebCore::MutableStyleProperties *)v4, v16);
    goto LABEL_25;
  }
  if ((*(_BYTE *)(v4 + 4) & 8) != 0)
  {
    v5 = (*(_DWORD *)v4)++;
    if (v5)
    {
LABEL_6:
      *(_DWORD *)v4 = v5;
      return (WebCore::MutableStyleProperties *)v4;
    }
    v7 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      v9 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
      do
      {
        v10 = *v9;
        *v9 = 0;
        if (v10)
        {
          if (*v10 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
          else
            *v10 -= 2;
        }
        v9 += 2;
        v8 -= 16;
      }
      while (v8);
    }
    v11 = *(WTF **)(v4 + 16);
    if ((WTF *)(v4 + 32) != v11 && v11 != 0)
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      WTF::fastFree(v11, a2);
    }
    v13 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = (WTF *)v4;
LABEL_25:
    WTF::fastFree(v14, a2);
    return (WebCore::MutableStyleProperties *)v4;
  }
  v20 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  v21 = WebCore::MutableStyleProperties::MutableStyleProperties(v20, (const WebCore::StyleProperties *)v4);
  ++*(_DWORD *)v21;
  v23 = *(WebCore::MutableStyleProperties **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v20;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      if ((*((_BYTE *)v23 + 4) & 8) != 0)
        WebCore::MutableStyleProperties::~MutableStyleProperties(v23, v22);
      else
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v23, v22);
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  if (*(_DWORD *)v20 == 1)
  {
    WebCore::MutableStyleProperties::~MutableStyleProperties(v20, v22);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v20;
  }
  return v20;
}

uint64_t WebCore::StyledElement::ensureAttributeStyleMap(WebCore::StyledElement *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 9);
  if ((v2 & 0xFFFFFFFFFFFFLL) == 0 || !*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 0xB8))
  {
    v3 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)v3 = off_1E339F460;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    *(_QWORD *)(v3 + 16) = v4;
    v2 = *((_QWORD *)this + 9);
    v6 = v2 & 0xFFFFFFFFFFFFLL;
    if ((v2 & 0xFFFFFFFFFFFFLL) == 0)
    {
      WebCore::Node::materializeRareData(this);
      v2 = *((_QWORD *)this + 9);
      v6 = v2 & 0xFFFFFFFFFFFFLL;
    }
    v7 = *(_DWORD **)(v6 + 184);
    *(_QWORD *)(v6 + 184) = v3;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        v2 = *((_QWORD *)this + 9);
      }
      else
      {
        --v7[2];
      }
    }
  }
  v8 = v2 & 0xFFFFFFFFFFFFLL;
  if (v8)
    return *(_QWORD *)(v8 + 184);
  else
    return 0;
}

void WebCore::StyledElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  unsigned int *AssignedSlot;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  WebCore::Element::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(WTF::StringImpl **)a3 != *a4)
  {
    if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr)
    {
      WebCore::StyledElement::styleAttributeChanged((WebCore::StyledElement *)a1, (WTF::StringImpl *)a4, a5);
      return;
    }
    AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)a1 + 1144))(a1, a2);
    if ((_DWORD)AssignedSlot)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4) |= 4u;
      if ((*(_BYTE *)(a1 + 22) & 8) != 0)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if (*(_QWORD *)(v13 + 1944))
        {
          if (!*(_BYTE *)(v13 + 3405) && !*(_BYTE *)(v13 + 3392))
          {
            *(_WORD *)(a1 + 30) |= 0x10u;
            v14 = *(_QWORD *)(a1 + 64);
            v15 = HIWORD(v14) & 7;
            if (v15 <= 2)
            {
              *(_QWORD *)(a1 + 64) = v14 & 0xFFF8FFFFFFFFFFFFLL | 0x3000000000000;
              if (!(_DWORD)v15)
              {
                *(_DWORD *)(a1 + 24) += 2;
                v16 = *(unsigned __int16 *)(a1 + 28);
                if ((v16 & 0x80) != 0)
                {
                  v21 = *(_QWORD *)(a1 + 200);
                  if (!v21)
                    goto LABEL_35;
                }
                else if ((~v16 & 0x408) == 0
                       && (AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1),
                           (_DWORD)AssignedSlot))
                {
                  v21 = *(_QWORD *)(a1 + 112);
                  if (!v21)
                    goto LABEL_35;
                }
                else
                {
                  v12 = *(unsigned int **)(a1 + 32);
                  if (!v12)
                    goto LABEL_35;
                  v17 = *((_WORD *)v12 + 14);
                  if ((v17 & 0x80) == 0)
                  {
                    if ((v17 & 8) != 0)
                    {
                      if ((*((_QWORD *)v12 + 9) & 0xFFFFFFFFFFFFLL) == 0)
                        goto LABEL_18;
                      AssignedSlot = *(unsigned int **)((*((_QWORD *)v12 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                      if (!AssignedSlot)
                        goto LABEL_18;
                      AssignedSlot = (unsigned int *)WebCore::ShadowRoot::findAssignedSlot((WebCore::ShadowRoot *)AssignedSlot, (const WebCore::Node *)a1);
                      v12 = AssignedSlot;
LABEL_58:
                      if (!v12)
                        goto LABEL_35;
LABEL_18:
                      *((_QWORD *)v12 + 8) |= 0x10000000000000uLL;
                      do
                      {
                        if ((*((_QWORD *)v12 + 9) & 0xFFFFFFFFFFFFLL) != 0)
                        {
                          v20 = *(_QWORD *)((*((_QWORD *)v12 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                          if (v20)
                            *(_QWORD *)(v20 + 64) |= 0x8000000000000uLL;
                        }
                        v18 = *((_QWORD *)v12 + 8);
                        if ((v18 & 0x8000000000000) != 0)
                          break;
                        *((_QWORD *)v12 + 8) = v18 | 0x8000000000000;
                        AssignedSlot = (unsigned int *)*((_QWORD *)v12 + 4);
                        if (!AssignedSlot)
                          break;
                        v19 = *((_WORD *)AssignedSlot + 14);
                        if ((v19 & 0x80) != 0)
                        {
                          v31 = *((_QWORD *)AssignedSlot + 25);
                          if (!v31)
                            break;
                          AssignedSlot = *(unsigned int **)(v31 + 8);
                        }
                        else
                        {
                          if ((v19 & 8) == 0)
                            break;
                          if ((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL) != 0
                            && *(_QWORD *)((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
                          {
                            AssignedSlot = (unsigned int *)WebCore::ShadowRoot::findAssignedSlot(*(WebCore::ShadowRoot **)((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL)+ 0x58), (const WebCore::Node *)v12);
                          }
                        }
                        v12 = AssignedSlot;
                      }
                      while (AssignedSlot);
                    }
LABEL_35:
                    if (*(_DWORD *)(a1 + 24) == 2)
                    {
                      v27 = *(_WORD *)(a1 + 30);
                      if ((v27 & 0x400) == 0)
                      {
                        v28 = *(_WORD *)(a1 + 28);
                        if ((v28 & 0xF000) == 0x9000)
                        {
                          AssignedSlot = WebCore::Document::removedLastRef((WebCore::Document *)a1, v12);
                        }
                        else
                        {
                          if ((v28 & 0x20) != 0)
                          {
                            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
                            v27 = *(_WORD *)(a1 + 30);
                          }
                          *(_WORD *)(a1 + 30) = v27 | 0x400;
                          AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)(a1 + 24) -= 2;
                    }
                    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
                    v23 = *(_QWORD *)(v22 + 1272);
                    if (v23)
                    {
                      v24 = *(_QWORD *)(v23 + 64);
                      if ((v24 & 0x8000000000000) != 0
                        || (v24 & 0x7000000000000) != 0
                        || (*(_WORD *)(v23 + 30) & 0x20) != 0)
                      {
                        *(_DWORD *)(v22 + 24) += 2;
                        *(_QWORD *)(v22 + 64) |= 0x8000000000000uLL;
                        if (((*(_QWORD *)(v22 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                           || *(double *)((*(_QWORD *)(v22 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                          && !*(_BYTE *)(v22 + 3362))
                        {
                          *(_QWORD *)(v22 + 1528) = 0;
                          WTF::MonotonicTime::now((WTF::MonotonicTime *)AssignedSlot);
                          WebCore::TimerBase::setNextFireTime(v22 + 1504, v25 + 0.0);
                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                          {
                            v32 = *(_QWORD *)(v22 + 528);
                            if (v32)
                            {
                              v33 = *(_QWORD *)(v32 + 8);
                              if (v33)
                              {
                                v34 = *(_QWORD *)(v33 + 24);
                                if (v34)
                                {
                                  v35 = *(_QWORD *)(v34 + 8);
                                  if (v35)
                                    goto LABEL_66;
                                }
                              }
                            }
                            v37 = *(_QWORD *)(v22 + 2632);
                            if (v37)
                            {
                              v38 = *(_QWORD *)(v37 + 8);
                              if (v38)
                              {
                                v39 = *(_QWORD *)(v38 + 528);
                                if (v39)
                                {
                                  v40 = *(_QWORD *)(v39 + 8);
                                  if (v40)
                                  {
                                    v41 = *(_QWORD *)(v40 + 24);
                                    if (v41)
                                    {
                                      v35 = *(_QWORD *)(v41 + 8);
                                      if (v35)
                                      {
LABEL_66:
                                        v36 = *(WTF::StringImpl **)(*(_QWORD *)(v35 + 80) + 8);
                                        if (v36)
                                          WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(v36, (WebCore::Document *)v22);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (*(_DWORD *)(v22 + 24) == 2)
                        {
                          v29 = *(_WORD *)(v22 + 30);
                          if ((v29 & 0x400) == 0)
                          {
                            v30 = *(_WORD *)(v22 + 28);
                            if ((v30 & 0xF000) == 0x9000)
                            {
                              WebCore::Document::removedLastRef((WebCore::Document *)v22, v12);
                            }
                            else
                            {
                              if ((v30 & 0x20) != 0)
                              {
                                (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 160) + 16))(*(_QWORD *)(v22 + 160));
                                v29 = *(_WORD *)(v22 + 30);
                              }
                              *(_WORD *)(v22 + 30) = v29 | 0x400;
                              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
                            }
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v22 + 24) -= 2;
                        }
                      }
                    }
                    return;
                  }
                  v21 = *((_QWORD *)v12 + 25);
                  if (!v21)
                    goto LABEL_35;
                }
                v12 = *(unsigned int **)(v21 + 8);
                goto LABEL_58;
              }
            }
          }
        }
      }
    }
  }
}

WebCore::StyleProperties *WebCore::StyledElement::dirtyStyleAttribute(WebCore::StyledElement *this)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  WebCore::StyleProperties *result;
  unsigned __int8 *v6;
  WTF::String *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::AtomString *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  char v26;
  void *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  char v32[8];
  WebCore::StyledElement *v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  *(_DWORD *)(*((_QWORD *)this + 13) + 4) |= 8u;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (*v2)
    v3 = (*(_WORD *)(*v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
    v28 = v2[1] + 1328;
  else
    v28 = *v2 + 216;
  v4 = *(_QWORD *)v28;
  if (!*(_QWORD *)(*(_QWORD *)v28 + 32))
  {
    if (*(_QWORD *)(v4 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v4);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v4);
    v30 = *(_QWORD *)(v4 + 32);
    if (*(_DWORD *)(v30 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v31 = *(_QWORD *)(v4 + 32);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v30 + 32), v29);
      v30 = v31;
    }
    if (*(_BYTE *)(v30 + 242)
      || *(_BYTE *)(v30 + 243)
      || *(_BYTE *)(v30 + 244)
      || *(_BYTE *)(v30 + 245)
      || *(_BYTE *)(v30 + 246)
      || *(_BYTE *)(v30 + 247)
      || *(_BYTE *)(v30 + 248))
    {
      *(_BYTE *)(v4 + 236) = 1;
    }
  }
  result = WebCore::Style::ScopeRuleSets::attributeInvalidationRuleSets((WebCore::Style::ScopeRuleSets *)(*(_QWORD *)(v4 + 32) + 32), (WTF::StringImpl **)(WebCore::HTMLNames::styleAttr + 24));
  if (result)
  {
    v9 = *((_QWORD *)this + 13);
    if (v9)
    {
      result = *(WebCore::StyleProperties **)(v9 + 8);
      if (result)
      {
        *(_DWORD *)(v9 + 4) &= ~8u;
        WebCore::StyleProperties::asTextAtom(result, v6, v7, (WTF::AtomString *)&v35, v8);
        v10 = *((_QWORD *)this + 13);
        if (v10)
        {
          v11 = *(_DWORD *)(v10 + 4);
          if ((v11 & 1) != 0)
          {
            v12 = *(_QWORD *)(v10 + 40);
            LODWORD(v13) = *(_DWORD *)(v10 + 52);
            if ((_DWORD)v13)
            {
LABEL_14:
              v13 = v13;
              v14 = (const WTF::AtomString *)(v12 + 8);
              while (1)
              {
                v15 = *((_QWORD *)v14 - 1);
                if (v15 == WebCore::HTMLNames::styleAttr
                  || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24)
                  && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 32))
                {
                  break;
                }
                v14 = (const WTF::AtomString *)((char *)v14 + 16);
                if (!--v13)
                {
                  v14 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
LABEL_23:
              if ((*((_BYTE *)this + 22) & 8) == 0)
                goto LABEL_42;
              v16 = (uint64_t *)*((_QWORD *)this + 5);
              v17 = v16[1];
              if (!*(_QWORD *)(v17 + 1944) || *(_BYTE *)(v17 + 3405))
                goto LABEL_42;
              if ((*((_BYTE *)this + 70) & 4) != 0)
              {
                v21 = *v16;
                v22 = (*(_WORD *)(v21 + 28) & 0x80) == 0 || v21 == 0;
                v23 = v21 + 216;
                if (v22)
                  v23 = v17 + 1328;
                if (!*(_BYTE *)(*(_QWORD *)v23 + 236))
                  goto LABEL_42;
              }
              v18 = *(_QWORD *)(v17 + 1272);
              if (v18 && (*(_BYTE *)(v18 + 70) & 4) != 0)
              {
LABEL_42:
                v32[0] = 0;
                v33 = this;
                v34 = 0;
              }
              else
              {
                if (!*(_BYTE *)(v17 + 3362)
                  && ((v19 = *(unsigned __int8 *)(v17 + 3390), *(_BYTE *)(v17 + 3390))
                   || (*(_BYTE *)(v17 + 70) & 8) != 0
                   || *(_QWORD *)(v17 + 1560)
                   || (v20 = *(_QWORD *)(v17 + 1328), *(_BYTE *)(v20 + 233))
                   || *(_BYTE *)(v20 + 234)))
                {
                  v24 = *(unsigned __int8 *)(v17 + 3391);
                  if (v19)
                    v25 = v24 == 0;
                  else
                    v25 = 0;
                  v26 = !v25;
                  v32[0] = v26;
                  v33 = this;
                  v34 = 0;
                  if (v25)
                    goto LABEL_51;
                }
                else
                {
                  v32[0] = 1;
                  v33 = this;
                  v34 = 0;
                }
                WebCore::Style::AttributeChangeInvalidation::invalidateStyle((WTF::StringImpl *)v32, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v14, (const WTF::AtomString *)&v35);
                WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets((WebCore::Style::AttributeChangeInvalidation *)v32);
              }
LABEL_51:
              WebCore::Element::setSynchronizedLazyAttribute((WTF::StringImpl **)this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::styleAttr, &v35);
              if (v32[0])
                WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets((WebCore::Style::AttributeChangeInvalidation *)v32);
              if (v34)
                WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v34, v27);
              result = v35;
              v35 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  return (WebCore::StyleProperties *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)result -= 2;
              }
              return result;
            }
          }
          else
          {
            v12 = v10 + 32;
            LODWORD(v13) = v11 >> 5;
            if ((_DWORD)v13)
              goto LABEL_14;
          }
        }
        v14 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
        goto LABEL_23;
      }
    }
  }
  return result;
}

WebCore::Style::AttributeChangeInvalidation *WebCore::Style::AttributeChangeInvalidation::AttributeChangeInvalidation(WebCore::Style::AttributeChangeInvalidation *this, WebCore::Element *a2, const WebCore::QualifiedName *a3, const WTF::AtomString *a4, const WTF::AtomString *a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char v16;

  if ((*((_BYTE *)a2 + 22) & 8) == 0)
    goto LABEL_20;
  v6 = (uint64_t *)*((_QWORD *)a2 + 5);
  v7 = v6[1];
  if (!*(_QWORD *)(v7 + 1944) || *(_BYTE *)(v7 + 3405))
    goto LABEL_20;
  if ((*((_BYTE *)a2 + 70) & 4) != 0)
  {
    v11 = *v6;
    v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0 || v11 == 0;
    v13 = v11 + 216;
    if (v12)
      v13 = v7 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v13 + 236))
      goto LABEL_20;
  }
  v8 = *(_QWORD *)(v7 + 1272);
  if (v8 && (*(_BYTE *)(v8 + 70) & 4) != 0)
  {
LABEL_20:
    *(_BYTE *)this = 0;
    *((_QWORD *)this + 1) = a2;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    if (*(_BYTE *)(v7 + 3362)
      || (v9 = *(unsigned __int8 *)(v7 + 3390), !*(_BYTE *)(v7 + 3390))
      && (*(_BYTE *)(v7 + 70) & 8) == 0
      && !*(_QWORD *)(v7 + 1560)
      && (v10 = *(_QWORD *)(v7 + 1328), !*(_BYTE *)(v10 + 233))
      && !*(_BYTE *)(v10 + 234))
    {
      *(_BYTE *)this = 1;
      *((_QWORD *)this + 1) = a2;
      *((_QWORD *)this + 2) = 0;
LABEL_28:
      WebCore::Style::AttributeChangeInvalidation::invalidateStyle(this, a3, a4, a5);
      WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets(this);
      return this;
    }
    v14 = *(unsigned __int8 *)(v7 + 3391);
    if (v9)
      v15 = v14 == 0;
    else
      v15 = 0;
    v16 = !v15;
    *(_BYTE *)this = v16;
    *((_QWORD *)this + 1) = a2;
    *((_QWORD *)this + 2) = 0;
    if (!v15)
      goto LABEL_28;
  }
  return this;
}

void WebCore::Style::AttributeChangeInvalidation::~AttributeChangeInvalidation(WebCore::Style::AttributeChangeInvalidation *this, void *a2)
{
  uint64_t v3;

  if (*(_BYTE *)this)
    WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets(this);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v3, a2);
}

double WebCore::StyledElement::inlineStyleChanged(WebCore::StyledElement *this, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  WebCore::StyledElement::invalidateStyleAttribute((uint64_t)this, a2, a5, a3, a4);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v9 = *(_QWORD *)(v8 + 528);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 24);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
            return WebCore::InspectorInstrumentation::didInvalidateStyleAttrImpl(*(_QWORD *)(*(_QWORD *)(v12 + 80) + 8), this);
        }
      }
    }
    v13 = *(_QWORD *)(v8 + 2632);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 528);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
          {
            v17 = *(_QWORD *)(v16 + 24);
            if (v17)
            {
              v12 = *(_QWORD *)(v17 + 8);
              if (v12)
                return WebCore::InspectorInstrumentation::didInvalidateStyleAttrImpl(*(_QWORD *)(*(_QWORD *)(v12 + 80) + 8), this);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::StyledElement::setInlineStyleProperty(WebCore::StyledElement *a1, WTF::StringImpl *a2, unsigned int a3, int a4)
{
  int v6;
  WebCore::MutableStyleProperties *v8;
  int *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::String *v12;
  __n128 v13;
  _DWORD *v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;

  v6 = (int)a2;
  v8 = WebCore::StyledElement::ensureMutableInlineStyle(a1, a2);
  if (a3 >= 0x48E)
  {
    __break(0xC471u);
    JUMPOUT(0x195A49954);
  }
  v9 = &WebCore::staticCSSValuePool[4 * a3];
  v9[3088] += 2;
  v27 = v9 + 3088;
  WebCore::MutableStyleProperties::setProperty(v8, v6, &v27, a4);
  v14 = v27;
  v27 = 0;
  if (v14)
  {
    if (*v14 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v10);
    else
      *v14 -= 2;
  }
  WebCore::StyledElement::invalidateStyleAttribute((uint64_t)a1, (uint64_t)v10, v13, v11, v12);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v17 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    v18 = *(_QWORD *)(v17 + 528);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 24);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (v21)
            goto LABEL_13;
        }
      }
    }
    v22 = *(_QWORD *)(v17 + 2632);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 528);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 8);
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 24);
            if (v26)
            {
              v21 = *(_QWORD *)(v26 + 8);
              if (v21)
LABEL_13:
                WebCore::InspectorInstrumentation::didInvalidateStyleAttrImpl(*(_QWORD *)(*(_QWORD *)(v21 + 80) + 8), a1);
            }
          }
        }
      }
    }
  }
  return 1;
}

uint64_t WebCore::StyledElement::setInlineStyleProperty(WebCore::StyledElement *a1, WTF::StringImpl *a2, int a3, int a4, double a5)
{
  int v8;
  WebCore::MutableStyleProperties *v10;
  int *v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::String *v16;
  __n128 v17;
  int *v18;
  int *v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;

  v8 = (int)a2;
  v10 = WebCore::StyledElement::ensureMutableInlineStyle(a1, a2);
  switch(a3)
  {
    case 6:
      if ((int)a5 > 0xFF || *(_QWORD *)&a5 != COERCE__INT64((double)(int)a5))
      {
LABEL_6:
        v12 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v12 = 2;
        v13 = *((_BYTE *)v12 + 6);
        *((_WORD *)v12 + 2) = a3 & 0x7F;
        *((_BYTE *)v12 + 6) = v13 & 0xFC;
        *((double *)v12 + 1) = a5;
        break;
      }
      v22 = &WebCore::staticCSSValuePool[4 * (int)a5];
      v23 = v22[16];
      v12 = v22 + 16;
      *v12 = v23 + 2;
      break;
    case 1:
      if ((int)a5 > 0xFF || *(_QWORD *)&a5 != COERCE__INT64((double)(int)a5))
        goto LABEL_6;
      v12 = &WebCore::staticCSSValuePool[4 * (int)a5 + 2064];
      *v12 += 2;
      break;
    case 3:
      if ((int)a5 > 0xFF || *(_QWORD *)&a5 != COERCE__INT64((double)(int)a5))
        goto LABEL_6;
      v12 = &WebCore::staticCSSValuePool[4 * (int)a5 + 1040];
      *v12 += 2;
      break;
    default:
      goto LABEL_6;
  }
  v35 = v12;
  WebCore::MutableStyleProperties::setProperty(v10, v8, &v35, a4);
  v18 = v35;
  v35 = 0;
  if (v18)
  {
    if (*v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v14);
    else
      *v18 -= 2;
  }
  WebCore::StyledElement::invalidateStyleAttribute((uint64_t)a1, (uint64_t)v14, v17, v15, v16);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v25 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    v26 = *(_QWORD *)(v25 + 528);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 24);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
            goto LABEL_32;
        }
      }
    }
    v30 = *(_QWORD *)(v25 + 2632);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 528);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 8);
          if (v33)
          {
            v34 = *(_QWORD *)(v33 + 24);
            if (v34)
            {
              v29 = *(_QWORD *)(v34 + 8);
              if (v29)
LABEL_32:
                WebCore::InspectorInstrumentation::didInvalidateStyleAttrImpl(*(_QWORD *)(*(_QWORD *)(v29 + 80) + 8), a1);
            }
          }
        }
      }
    }
  }
  return 1;
}

BOOL WebCore::StyledElement::setInlineStyleProperty(WebCore::StyledElement *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  WebCore::MutableStyleProperties *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::String *v13;
  _BOOL8 v14;
  __n128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;

  v10 = WebCore::StyledElement::ensureMutableInlineStyle(a1, a2);
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v19, *(const WebCore::Document **)(*((_QWORD *)a1 + 5) + 8));
  v14 = WebCore::MutableStyleProperties::setProperty((uint64_t)v10, (uint64_t)a2, a3, a4, (uint64_t)v19, a5);
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v19[0];
  v19[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v11);
      if (!v14)
        return v14;
      goto LABEL_8;
    }
    *(_DWORD *)v17 -= 2;
  }
  if (v14)
LABEL_8:
    WebCore::StyledElement::inlineStyleChanged(a1, (uint64_t)v11, v12, v13, v15);
  return v14;
}

uint64_t WebCore::StyledElement::setInlineStyleCustomProperty(WebCore::StyledElement *this, const WTF::AtomString *a2, const WTF::String *a3, WTF::String *a4)
{
  WebCore::MutableStyleProperties *v8;
  const WebCore::CSSParserContext *v9;
  __n128 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::String *v13;
  uint64_t v14;
  __n128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;

  v8 = WebCore::StyledElement::ensureMutableInlineStyle(this, a2);
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v19, *(const WebCore::Document **)(*((_QWORD *)this + 5) + 8));
  v14 = WebCore::MutableStyleProperties::setCustomProperty(v8, a2, a3, a4, (uint64_t)v19, v9, v10);
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v19[0];
  v19[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v11);
      if (!(_DWORD)v14)
        return v14;
      goto LABEL_8;
    }
    *(_DWORD *)v17 -= 2;
  }
  if ((_DWORD)v14)
LABEL_8:
    WebCore::StyledElement::inlineStyleChanged(this, (uint64_t)v11, v12, v13, v15);
  return v14;
}

BOOL WebCore::StyledElement::removeInlineStyleProperty(WebCore::StyledElement *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::MutableStyleProperties *v5;
  WTF::String *v6;
  __n128 v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  WTF::String *v11;
  __n128 v12;

  v2 = *((_QWORD *)a1 + 13);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  v5 = WebCore::StyledElement::ensureMutableInlineStyle(a1, a2);
  result = WebCore::MutableStyleProperties::removeProperty((uint64_t)v5, a2, 0, v6, v7);
  if (result)
  {
    WebCore::StyledElement::inlineStyleChanged(a1, v9, v10, v11, v12);
    return 1;
  }
  return result;
}

uint64_t WebCore::StyledElement::removeInlineStyleCustomProperty(WebCore::StyledElement *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  WebCore::MutableStyleProperties *v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  WTF::String *v11;
  __n128 v12;

  v2 = *((_QWORD *)this + 13);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  v5 = WebCore::StyledElement::ensureMutableInlineStyle(this, a2);
  result = WebCore::MutableStyleProperties::removeCustomProperty(v5, a2, 0, v6, v7);
  if ((_DWORD)result)
  {
    WebCore::StyledElement::inlineStyleChanged(this, v9, v10, v11, v12);
    return 1;
  }
  return result;
}

double WebCore::StyledElement::removeAllInlineStyleProperties(WebCore::StyledElement *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  WebCore::MutableStyleProperties *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  double result;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(_DWORD *)(v3 + 4);
      if ((v5 & 8) == 0)
      {
        if (!(v5 >> 4))
          return result;
        goto LABEL_5;
      }
      if (*(_DWORD *)(v3 + 28))
      {
LABEL_5:
        v6 = WebCore::StyledElement::ensureMutableInlineStyle(this, a2);
        WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebCore::MutableStyleProperties *)((char *)v6 + 16), v7);
        return WebCore::StyledElement::inlineStyleChanged(this, v8, v9, v10, v11);
      }
    }
  }
  return result;
}

_QWORD *WebCore::StyledElement::addSubresourceAttributeURLs(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  _DWORD *v22;
  _QWORD *v23;

  v2 = result[13];
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  ++*(_DWORD *)v3;
  v5 = (uint64_t *)(v3 + 8);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v8 = 0;
  *v6 = off_1E33A82B8;
  v6[1] = a2;
  v23 = v6;
  while (1)
  {
    v9 = *(unsigned int *)(v3 + 4);
    if ((v9 & 8) != 0)
      break;
    if (v8 >= v9 >> 4)
      goto LABEL_11;
    v10 = (unsigned int *)((char *)v5 + 5 * v8 + ((v9 >> 3) & 0x1FFFFFFE));
    v11 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
LABEL_7:
    if ((WebCore::CSSValue::traverseSubresources(v11, &v23) & 1) != 0)
      goto LABEL_11;
    v8 = (v8 + 1);
  }
  if (*(_DWORD *)(v3 + 28) > v8)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16 * v8 + 8);
    goto LABEL_7;
  }
LABEL_11:
  result = v23;
  v23 = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  if (*(_DWORD *)v3 == 1)
  {
    v12 = *(unsigned int *)(v3 + 4);
    if ((v12 & 8) != 0)
    {
      v13 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v13)
      {
        v14 = 16 * v13;
        v15 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
        do
        {
          v16 = *v15;
          *v15 = 0;
          if (v16)
          {
            if (*v16 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v7);
            else
              *v16 -= 2;
          }
          v15 += 2;
          v14 -= 16;
        }
        while (v14);
      }
      v17 = *(WTF **)(v3 + 16);
      if ((WTF *)(v3 + 32) != v17 && v17 != 0)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v17, v7);
      }
      v19 = *v5;
      *v5 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    else if (v12 >= 0x10)
    {
      v20 = 0;
      v21 = (unsigned int *)((char *)v5 + ((v12 >> 3) & 0x1FFFFFFE));
      do
      {
        v22 = (_DWORD *)(*v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
        if (*v22 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v7);
        else
          *v22 -= 2;
        ++v20;
        v21 = (unsigned int *)((char *)v21 + 5);
      }
      while (v20 < (unint64_t)*(unsigned int *)(v3 + 4) >> 4);
    }
    return (_QWORD *)WTF::fastFree((WTF *)v3, v7);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

uint64_t WebCore::StyledElement::addPropertyToPresentationalHintStyle(int a1, WebCore::MutableStyleProperties *this, int a3, unsigned int a4)
{
  WTF::StringImpl *v4;
  uint64_t result;
  int *v6;

  if (a4 >= 0x48E)
  {
    result = 92;
    __break(0xC471u);
  }
  else
  {
    WebCore::staticCSSValuePool[4 * a4 + 3088] += 2;
    v6 = &WebCore::staticCSSValuePool[4 * a4 + 3088];
    WebCore::MutableStyleProperties::setProperty(this, a3, &v6, 0);
    result = (uint64_t)v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

int *WebCore::StyledElement::addPropertyToPresentationalHintStyle(double a1, uint64_t a2, WebCore::MutableStyleProperties *a3, int a4, int a5)
{
  char v5;
  int *v10;
  char v11;
  WTF::StringImpl *v12;
  int *result;
  int *v15;
  int v16;
  int *v18;

  v5 = a5;
  switch(a5)
  {
    case 6:
      if ((int)a1 > 0xFF || *(_QWORD *)&a1 != COERCE__INT64((double)(int)a1))
      {
LABEL_6:
        v10 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v10 = 2;
        v11 = *((_BYTE *)v10 + 6);
        *((_WORD *)v10 + 2) = v5 & 0x7F;
        *((_BYTE *)v10 + 6) = v11 & 0xFC;
        *((double *)v10 + 1) = a1;
        break;
      }
      v15 = &WebCore::staticCSSValuePool[4 * (int)a1];
      v16 = v15[16];
      v10 = v15 + 16;
      *v10 = v16 + 2;
      break;
    case 1:
      if ((int)a1 > 0xFF || *(_QWORD *)&a1 != COERCE__INT64((double)(int)a1))
        goto LABEL_6;
      v10 = &WebCore::staticCSSValuePool[4 * (int)a1 + 2064];
      *v10 += 2;
      break;
    case 3:
      if ((int)a1 > 0xFF || *(_QWORD *)&a1 != COERCE__INT64((double)(int)a1))
        goto LABEL_6;
      v10 = &WebCore::staticCSSValuePool[4 * (int)a1 + 1040];
      *v10 += 2;
      break;
    default:
      goto LABEL_6;
  }
  v18 = v10;
  WebCore::MutableStyleProperties::setProperty(a3, a4, &v18, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v12);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::StyledElement::addPropertyToPresentationalHintStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _QWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26[3];

  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v21, *(const WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
  if ((WebCore::isExposed(a3, &v24) & 1) != 0 || WebCore::isInternal(a3))
  {
    if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
    {
      v23 = *(_BYTE *)(a2 + 4) & 7;
      WebCore::CSSParser::parseValue(a2, a3);
    }
    else if ((a3 - 2) > 0x1C8)
    {
      v17 = WebCore::shorthandForProperty(a3);
      if (*(_DWORD *)(a2 + 28))
      {
        v18 = a2 + 16;
        v25 = 0;
        if ((_DWORD)v7)
        {
          v19 = (_WORD *)v17;
          v20 = 2 * v7;
          do
          {
            WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::add(&v25, v19++, (uint64_t)v26);
            v20 -= 2;
          }
          while (v20);
        }
        v26[0] = &v25;
        WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::MutableStyleProperties::removeProperties(std::span<WebCore::CSSPropertyID const,18446744073709551615ul>)::$_0>(v18, v26);
        if (v25)
          WTF::fastFree((WTF *)(v25 - 16), v7);
      }
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_DWORD *)(a2 + 28);
      v10 = v9 - 1;
      while ((v10 & 0x80000000) == 0)
      {
        v11 = v10;
        v12 = *(_WORD *)(v8 + 16 * v10--) & 0x3FF;
        if (v12 == (_DWORD)a3)
        {
          v13 = (_QWORD *)(v8 + 16 * v11);
          v14 = (_DWORD *)v13[1];
          v13[1] = 0;
          if (v14)
          {
            if (*v14 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, (WTF::StringImpl *)v7);
              v9 = *(_DWORD *)(a2 + 28);
            }
            else
            {
              *v14 -= 2;
            }
          }
          memmove(v13, v13 + 2, *(_QWORD *)(a2 + 16) + 16 * v9 - (_QWORD)(v13 + 2));
          --*(_DWORD *)(a2 + 28);
          break;
        }
      }
    }
  }
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int16 *WebCore::StyledElement::addPropertyToPresentationalHintStyle(int a1, WebCore::MutableStyleProperties *this, int a3, _DWORD **a4)
{
  return WebCore::MutableStyleProperties::setProperty(this, a3, a4, 0);
}

uint64_t WebCore::TagCollection::operator new(uint64_t this)
{
  if (this == 96)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

void WebCore::TagCollectionNS::~TagCollectionNS(WebCore::TagCollectionNS *this)
{
  uint64_t v2;
  uint64_t *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  WebCore::NodeListsNodeData **v20;
  WebCore::NodeListsNodeData *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  unsigned int v25;
  WebCore::QualifiedName::QualifiedNameImpl *v26;
  int v27;
  int *v28;
  WTF::StringImpl **v29;
  int v30;
  int v31;
  WebCore::QualifiedName::QualifiedNameImpl **v32;
  int v33;
  WebCore::QualifiedName::QualifiedNameImpl *v34;
  WTF::StringImpl **v35;
  uint64_t *v37;
  int *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  WebCore::QualifiedName::QualifiedNameImpl *v42;
  int v44;
  WebCore::QualifiedName::QualifiedNameImpl *v45;
  uint64_t v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF *v61;
  void *v62;
  WTF *v63;
  void *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::QualifiedName::QualifiedNameImpl *v69;

  v2 = *((_QWORD *)this + 3);
  *(_DWORD *)(v2 + 24) += 2;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v3 = *(uint64_t **)(*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL);
  else
    v3 = 0;
  v4 = (WTF::StringImpl **)((char *)this + 88);
  v5 = (WTF::StringImpl **)((char *)this + 96);
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v69, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)this + 12, (WTF::StringImpl **)this + 11);
  v7 = *((_QWORD *)this + 3);
  v8 = *(_DWORD *)(v7 + 24);
  v9 = v8 + 2;
  *(_DWORD *)(v7 + 24) = v8 + 2;
  v10 = *v3;
  if (*v3)
    LODWORD(v10) = *(_QWORD *)(v10 + 8) != 0;
  v11 = v3[1];
  if (v11)
    LODWORD(v11) = *(_QWORD *)(v11 + 8) != 0;
  v12 = v11 + v10;
  v13 = v3[2];
  if (v13)
    LODWORD(v13) = *(_DWORD *)(v13 - 12);
  v14 = v12 + v13;
  v16 = v3 + 3;
  v15 = v3[3];
  if (v15)
    LODWORD(v15) = *(_DWORD *)(v15 - 12);
  v17 = v14 + v15;
  v18 = v3[4];
  if (v18)
    LODWORD(v18) = *(_DWORD *)(v18 - 12);
  v19 = v17 + v18;
  if (v17 + (_DWORD)v18 == 1)
  {
    v20 = (WebCore::NodeListsNodeData **)(*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL);
    v21 = *v20;
    *v20 = 0;
    if (v21)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v21, v6);
      WTF::fastFree(v22, v23);
      v9 = *(_DWORD *)(v7 + 24);
    }
    v8 = v9 - 2;
  }
  if (v8)
  {
    *(_DWORD *)(v7 + 24) = v8;
  }
  else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
  }
  if (v19 != 1)
  {
    v24 = *v16;
    if (*v16)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = v69;
      v27 = *((_DWORD *)v69 + 1);
      if (!v27)
      {
        v27 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(v69);
        *((_DWORD *)v26 + 1) = v27;
      }
      v28 = &webThreadDelegateMessageScopeCount;
      v29 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        v30 = 0;
        v68 = v2;
        while (1)
        {
          v31 = v27 & v25;
          v32 = (WebCore::QualifiedName::QualifiedNameImpl **)(v24 + 16 * (v27 & v25));
          if (v29)
          {
            v33 = (*(_DWORD *)v29)++;
            v34 = *v32;
            if (v33)
            {
              *(_DWORD *)v29 = v33;
              v35 = v29;
            }
            else
            {
              v37 = v16;
              v38 = v28;
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
              WTF::fastFree(v39, v40);
              v28 = v38;
              v16 = v37;
              v2 = v68;
              v35 = (WTF::StringImpl **)*((_QWORD *)v28 + 254);
            }
          }
          else
          {
            v35 = 0;
            v34 = *v32;
          }
          if (v34 == (WebCore::QualifiedName::QualifiedNameImpl *)v29)
            break;
          if (*v32 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && *v32 == v69)
            goto LABEL_49;
          v27 = ++v30 + v31;
          v29 = v35;
        }
      }
      else
      {
        LODWORD(v41) = v27 & v25;
        v32 = (WebCore::QualifiedName::QualifiedNameImpl **)(v24 + 16 * (v27 & v25));
        v42 = *v32;
        if (*v32)
        {
          if (v42 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && v42 == v69)
          {
LABEL_49:
            v47 = *v16;
            v5 = (WTF::StringImpl **)((char *)this + 96);
            v4 = (WTF::StringImpl **)((char *)this + 88);
            if (!*v16)
            {
LABEL_50:
              if ((WebCore::QualifiedName::QualifiedNameImpl **)v47 != v32)
              {
                v48 = (WTF::StringImpl **)*v32;
                *v32 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 1)
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
                    WTF::fastFree(v63, v64);
                  }
                  else
                  {
                    --*(_DWORD *)v48;
                  }
                }
                *v32 = (WebCore::QualifiedName::QualifiedNameImpl *)-1;
                ++*(_DWORD *)(*v16 - 16);
                v49 = *v16;
                if (*v16)
                  v50 = *(_DWORD *)(v49 - 12) - 1;
                else
                  v50 = -1;
                *(_DWORD *)(v49 - 12) = v50;
                v51 = *v16;
                if (*v16)
                {
                  v52 = 6 * *(_DWORD *)(v51 - 12);
                  v53 = *(_DWORD *)(v51 - 4);
                  if (v52 < v53 && v53 >= 9)
                    WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v16, v53 >> 1, 0);
                }
              }
              goto LABEL_64;
            }
            v67 = *(unsigned int *)(v47 - 4);
LABEL_92:
            v47 += 16 * v67;
            v5 = (WTF::StringImpl **)((char *)this + 96);
            v4 = (WTF::StringImpl **)((char *)this + 88);
            if ((WebCore::QualifiedName::QualifiedNameImpl **)v47 == v32)
              goto LABEL_64;
            goto LABEL_50;
          }
          v44 = 1;
          while (1)
          {
            v41 = ((_DWORD)v41 + v44) & v25;
            v45 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v24 + 16 * v41);
            if (!v45)
              break;
            ++v44;
            if (v45 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && v45 == v69)
            {
              v32 = (WebCore::QualifiedName::QualifiedNameImpl **)(v24 + 16 * v41);
              goto LABEL_49;
            }
          }
        }
      }
      v47 = *v16;
      v5 = (WTF::StringImpl **)((char *)this + 96);
      v4 = (WTF::StringImpl **)((char *)this + 88);
      if (!*v16)
        goto LABEL_64;
      v67 = *(unsigned int *)(v47 - 4);
      v32 = (WebCore::QualifiedName::QualifiedNameImpl **)(v47 + 16 * v67);
      goto LABEL_92;
    }
  }
LABEL_64:
  v55 = (WTF::StringImpl **)v69;
  v69 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v55);
      WTF::fastFree(v61, v62);
    }
    else
    {
      --*(_DWORD *)v55;
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v6);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v56 = *v5;
  *v5 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v6);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = *v4;
  *v4 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v6);
    else
      *(_DWORD *)v57 -= 2;
  }
  *(_QWORD *)this = off_1E33A8310;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v59 = v58 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    --*(_DWORD *)(v59 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v65 = (uint64_t *)(v58 + 1760);
      v69 = this;
      v66 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v58 + 1760), (uint64_t *)&v69);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v65, v66);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v6);
  WebCore::HTMLCollection::~HTMLCollection(this, v60);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::TagCollectionNS::~TagCollectionNS(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::TagCollection::TagCollection(uint64_t result, uint64_t a2, _DWORD **a3)
{
  _DWORD *v3;

  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x17;
  *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)(result + 24) = a2;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_BYTE *)(result + 80) &= 0xFCu;
  *(_QWORD *)result = off_1E33A7FA8;
  *(_QWORD *)(result + 8) = 0;
  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *(_QWORD *)(result + 88) = v3;
  return result;
}

void WebCore::TagCollection::~TagCollection(WebCore::TagCollection *this)
{
  uint64_t v2;
  uint64_t *v3;
  WTF::StringImpl **v4;
  void *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  _QWORD *v11;
  WebCore::TagCollection *v12;

  v2 = *((_QWORD *)this + 3);
  *(_DWORD *)(v2 + 24) += 2;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v3 = *(uint64_t **)(*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL);
  else
    v3 = 0;
  v4 = (WTF::StringImpl **)((char *)this + 88);
  WebCore::NodeListsNodeData::removeCachedCollection(v3, this, (WTF::StringImpl **)this + 11);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = off_1E33A8378;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v8 = v7 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    --*(_DWORD *)(v8 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v10 = (uint64_t *)(v7 + 1760);
      v12 = this;
      v11 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v7 + 1760), (uint64_t *)&v12);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v10, v11);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v5);
  WebCore::HTMLCollection::~HTMLCollection(this, v9);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::TagCollection::~TagCollection(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::Text::~Text(uint64_t this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::Text *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WebCore::ElementRareData *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  WebCore::InspectorDOMAgent *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::AXObjectCache *v68;
  WebCore::AXObjectCache *v69;
  int v70;
  uint64_t v71;

  *(_QWORD *)this = off_1E33A0BD8;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  if ((*(_BYTE *)(this + 22) & 1) != 0)
  {
    WebCore::Document::didRemoveWheelEventHandler(v3, (WebCore::Node *)this, 1);
    WebCore::Document::removeTouchEventListener(v3, this, 1);
    WebCore::Document::didRemoveTouchEventHandler((WebCore::Document *)v3, this, 1);
  }
  v4 = *(_QWORD *)(v3 + 632);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::Text **)(v4 + 16 * v9);
    if (v10 != (WebCore::Text *)this)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WebCore::Text **)(v4 + 16 * v9);
        ++v11;
        if (v10 == (WebCore::Text *)this)
          goto LABEL_10;
      }
      v9 = *(unsigned int *)(v4 - 4);
    }
LABEL_10:
    if (v9 != *(_DWORD *)(v4 - 4))
    {
      *(_QWORD *)(v4 + 16 * v9) = -1;
      v29 = (uint64_t *)(v3 + 632);
      ++*(_DWORD *)(*(_QWORD *)(v3 + 632) - 16);
      v30 = *(_QWORD *)(v3 + 632);
      if (v30)
        v31 = *(_DWORD *)(v30 - 12) - 1;
      else
        v31 = -1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *v29;
      if (*v29)
      {
        v33 = 6 * *(_DWORD *)(v32 - 12);
        v34 = *(_DWORD *)(v32 - 4);
        if (v33 < v34 && v34 >= 9)
          WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v29, v34 >> 1, 0);
      }
      v36 = *(_QWORD *)(v3 + 528);
      if (*(unsigned __int8 *)(v3 + 3362) | *(unsigned __int8 *)(v3 + 3405))
      {
        i = v3;
        if (v36)
        {
          v62 = *(_QWORD *)(v36 + 8);
          i = v3;
          if (v62)
          {
            v63 = *(_QWORD *)(v62 + 120);
            i = v3;
            if (v63)
            {
              v64 = *(_QWORD *)(v63 + 8);
              for (i = v3; v64; v64 = *(_QWORD *)(v67 + 8))
              {
                i = *(_QWORD *)(*(_QWORD *)(v64 + 40) + 8);
                v65 = *(_QWORD *)(i + 528);
                if (!v65)
                  break;
                v66 = *(_QWORD *)(v65 + 8);
                if (!v66)
                  break;
                v67 = *(_QWORD *)(v66 + 120);
                if (!v67)
                  break;
              }
            }
          }
        }
      }
      else
      {
        i = v3;
        if (v36)
        {
          v38 = *(_QWORD *)(v36 + 8);
          i = v3;
          if (v38)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v38 + 128) + 8);
            v40 = v39 && *(_BYTE *)(v39 + 144) == 0;
            i = v3;
            if (v40)
            {
              v41 = *(_QWORD *)(v39 + 296);
              i = v3;
              if (v41)
                i = v41;
            }
          }
        }
      }
      if (!*(_BYTE *)(i + 672))
      {
        *(_BYTE *)(i + 672) = 1;
        v42 = *(_QWORD *)(i + 528);
        if (v42)
        {
          v43 = *(_QWORD *)(v42 + 8);
          if (v43)
          {
            v44 = *(_QWORD *)(v43 + 24);
            if (v44)
            {
              v45 = *(_QWORD *)(v43 + 288);
              v46 = *(_QWORD *)(v44 + 8);
              if (v46 && v45 != 0)
              {
                v48 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v44 + 8));
                if (v48)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 88))(v48, v45);
                else
                  WebCore::Page::scheduleRenderingUpdate(v46, 0x2000);
              }
            }
          }
        }
      }
    }
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v68 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v3);
    if (v68)
    {
      v69 = v68;
      ++*((_DWORD *)v68 + 2);
      WebCore::AXObjectCache::remove(v68, (WebCore::Node *)this);
      v70 = *((_DWORD *)v69 + 2);
      if (!v70)
      {
        __break(0xC471u);
        return;
      }
      *((_DWORD *)v69 + 2) = v70 - 1;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  v12 = *(WTF::StringImpl **)(this + 80);
  *(_QWORD *)(this + 80) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)this = off_1E33A6278;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v49 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    v50 = *(_QWORD *)(v49 + 528);
    if (v50)
    {
      v51 = *(_QWORD *)(v50 + 8);
      if (v51)
      {
        v52 = *(_QWORD *)(v51 + 24);
        if (v52)
        {
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
            goto LABEL_79;
        }
      }
    }
    v57 = *(_QWORD *)(v49 + 2632);
    if (v57)
    {
      v58 = *(_QWORD *)(v57 + 8);
      if (v58)
      {
        v59 = *(_QWORD *)(v58 + 528);
        if (v59)
        {
          v60 = *(_QWORD *)(v59 + 8);
          if (v60)
          {
            v61 = *(_QWORD *)(v60 + 24);
            if (v61)
            {
              v53 = *(_QWORD *)(v61 + 8);
              if (v53)
              {
LABEL_79:
                v54 = *(_QWORD *)(*(_QWORD *)(v53 + 80) + 8);
                v55 = *(uint64_t **)(v54 + 152);
                if (v55)
                {
                  v71 = this;
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v55 + 21, (WTF::StringImpl *)&v71);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v55 + 22, (WTF::StringImpl *)&v71);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v55 + 23, (WTF::StringImpl *)&v71);
                }
                v56 = *(WebCore::InspectorDOMAgent **)(v54 + 40);
                if (v56)
                  WebCore::InspectorDOMAgent::willDestroyDOMNode(v56, (WebCore::Node *)this);
              }
            }
          }
        }
      }
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  *(_QWORD *)(this + 40) = 0;
  v15 = *(_DWORD *)(v14 + 3324) - 1;
  *(_DWORD *)(v14 + 3324) = v15;
  if (!v15 && *(_DWORD *)(v14 + 24) <= 1u && (*(_WORD *)(v14 + 30) & 0x400) == 0)
  {
    *(_WORD *)(v14 + 30) |= 0x400u;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  }
  v16 = *(_QWORD *)(this + 72);
  v17 = (WebCore::ElementRareData *)(v16 & 0xFFFFFFFFFFFFLL);
  if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_BYTE *)((v16 & 0xFFFFFFFFFFFFLL) + 0x18))
      WebCore::ElementRareData::~ElementRareData(v17, a2);
    else
      std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v17, a2);
    WTF::fastFree(v17, v25);
    v16 = *(_QWORD *)(this + 72);
  }
  *(_QWORD *)(this + 72) = v16 & 0xFFFF000000000000;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v18 = *(_QWORD *)(this + 16);
  if ((v18 & 0x1000000000000) != 0)
  {
    v26 = v18 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 0x18))
    {
      v27 = *(unsigned int *)((v18 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v27)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v27));
        *(_DWORD *)(v26 + 28) = 0;
      }
      v28 = *(WTF **)(v26 + 16);
      if (v28)
      {
        *(_QWORD *)(v26 + 16) = 0;
        *(_DWORD *)(v26 + 24) = 0;
        WTF::fastFree(v28, a2);
      }
    }
  }
  v19 = *(_QWORD *)(this + 16) & 0xFFFFFFFFFFFFLL;
  if (v19)
  {
    *(_QWORD *)((*(_QWORD *)(this + 16) & 0xFFFFFFFFFFFFLL) + 8) = 0;
    do
    {
      v21 = __ldaxr((unsigned int *)v19);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v19));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v19);
      v23 = *(unsigned int *)(v19 + 28);
      if ((_DWORD)v23)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v19 + 16), (WTF::StringImpl *)(*(_QWORD *)(v19 + 16) + 32 * v23));
      v24 = *(WTF **)(v19 + 16);
      if (v24)
      {
        *(_QWORD *)(v19 + 16) = 0;
        *(_DWORD *)(v19 + 24) = 0;
        WTF::fastFree(v24, a2);
      }
      WTF::fastFree((WTF *)v19, a2);
    }
  }
  v20 = *(_QWORD *)(this + 8);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 3;
    *(_QWORD *)(this + 8) = 0;
  }
}

WTF::StringImpl *WebCore::Text::splitText@<X0>(WebCore::Text *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  unsigned int v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  void *v17;
  WTF::StringImpl *v18;
  WebCore::RenderStyle *v19;
  WebCore::Node *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WebCore::RenderStyle *v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WebCore::Node *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WebCore::RenderStyle *v43;
  char v44;

  result = (WTF::StringImpl *)*((_QWORD *)this + 10);
  if (result)
    v7 = *((_DWORD *)result + 1);
  else
    v7 = 0;
  if (v7 < a2)
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  {
    v8 = qword_1EE2F5808;
  }
  else
  {
    v8 = 0;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0;
  }
  LODWORD(qword_1EE2F5808) = v8 + 1;
  if (result)
  {
    v9 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    v41 = result;
    if (a2 || (*((_DWORD *)result + 1) & 0x80000000) != 0)
    {
      WTF::StringImpl::substring(result);
      v39 = v42;
    }
    else
    {
      *(_DWORD *)result = v9 + 4;
      v39 = result;
    }
  }
  else
  {
    v41 = 0;
    v39 = 0;
  }
  (*(void (**)(WebCore::Node **__return_ptr, WebCore::Text *, WTF::StringImpl **))(*(_QWORD *)this + 384))(&v40, this, &v39);
  v11 = v39;
  v39 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v41;
  if (v41)
  {
    if (*((_DWORD *)v41 + 1) <= a2)
    {
      *(_DWORD *)v41 += 2;
      v42 = v12;
LABEL_17:
      *(_DWORD *)v12 += 2;
      goto LABEL_18;
    }
    WTF::StringImpl::substring(v41);
    v12 = v42;
    if (v42)
      goto LABEL_17;
  }
  else
  {
    v42 = 0;
  }
LABEL_18:
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v10);
      v12 = v42;
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  *((_WORD *)this + 15) &= ~0x100u;
  v42 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  WebCore::CharacterData::dispatchModifiedEvent((unsigned int *)this, (const WTF::String *)&v41);
  v14 = *((_QWORD *)this + 4);
  if (v14)
  {
    *(_DWORD *)(v14 + 24) += 2;
    v15 = (uint64_t *)v40;
    v16 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    if (v16)
      *((_DWORD *)v16 + 6) += 2;
    v39 = v16;
    WebCore::ContainerNode::insertBefore(v14, v15, &v39, (uint64_t)&v42);
    v18 = v39;
    v39 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v17);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    if (v44)
    {
      v19 = v43;
      *(_BYTE *)a3 = (_BYTE)v42;
      *(_QWORD *)(a3 + 8) = v19;
      *(_DWORD *)(a3 + 16) = 1;
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14, v17);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
      v20 = v40;
      v40 = 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20, v17);
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
      goto LABEL_66;
    }
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v17);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  v21 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v21 + 24) += 2;
  v22 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v21 + 1320));
  v23 = v22;
  v24 = v17;
  v25 = *(_QWORD *)(v21 + 1320);
  if (v25)
    v26 = (_QWORD *)(v25 + 8 * *(unsigned int *)(v25 - 4));
  else
    v26 = 0;
  if (v26 != v22)
  {
    do
    {
      v27 = *(_QWORD *)(*v23 + 8);
      ++*(_DWORD *)(v27 + 8);
      WebCore::boundaryTextNodesSplit((unsigned int *)(v27 + 32), this);
      WebCore::boundaryTextNodesSplit((unsigned int *)(v27 + 56), this);
      *(_BYTE *)(v27 + 81) = 1;
      if (*(_DWORD *)(v27 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      else
        --*(_DWORD *)(v27 + 8);
      while (++v23 != v24)
      {
        if ((unint64_t)(*v23 + 1) > 1)
          goto LABEL_47;
      }
      v23 = v24;
LABEL_47:
      ;
    }
    while (v23 != v26);
  }
  if (*(_DWORD *)(v21 + 24) == 2)
  {
    if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v21, v17);
  }
  else
  {
    *(_DWORD *)(v21 + 24) -= 2;
  }
  if (v41)
    v28 = *((_DWORD *)v41 + 1);
  else
    v28 = 0;
  if ((*((_BYTE *)this + 22) & 8) != 0 && (*((_WORD *)this + 15) & 0x20) == 0)
  {
    v29 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v30 = *(_DWORD *)(v29 + 24);
    *(_DWORD *)(v29 + 24) = v30 + 2;
    if (*(_QWORD *)(v29 + 1944) && !*(_BYTE *)(v29 + 3405))
    {
      v31 = WebCore::Document::ensurePendingRenderTreeUpdate((WebCore::Document *)v29);
      LODWORD(v42) = 0;
      HIDWORD(v42) = v28;
      LOBYTE(v43) = 0;
      v44 = 0;
      WebCore::Style::Update::addText(v31, (uint64_t)this, (uint64_t)&v42);
      if (v44)
      {
        v32 = v43;
        v43 = 0;
        if (v32)
        {
          WebCore::RenderStyle::~RenderStyle(v32, v17);
          if (*(_DWORD *)v33)
          {
            *((_OWORD *)v33 + 2) = 0u;
            *((_OWORD *)v33 + 3) = 0u;
            *(_OWORD *)v33 = 0u;
            *((_OWORD *)v33 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v33, v17);
          }
        }
      }
      v30 = *(_DWORD *)(v29 + 24) - 2;
    }
    if (v30)
    {
      *(_DWORD *)(v29 + 24) = v30;
    }
    else if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v29, v17);
    }
  }
  *(_QWORD *)a3 = v40;
  *(_DWORD *)(a3 + 16) = 0;
LABEL_66:
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  {
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0xFFFFFFFFLL;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    return result;
  }
  LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
  if (!(_DWORD)qword_1EE2F5808)
  {
    v34 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
    v35 = dword_1EE2F5804;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    if (!(_DWORD)v35)
    {
      if (!v34)
        return result;
      return (WTF::StringImpl *)WTF::fastFree(v34, v17);
    }
    v36 = 0;
    v37 = 16 * v35;
    v38 = (_DWORD *)((char *)v34 + 16 * v35);
    do
    {
      result = (WTF::StringImpl *)WebCore::ScopedEventQueue::dispatchEvent((uint64_t)result, (WTF *)((char *)v34 + v36));
      v36 += 16;
    }
    while (v37 != v36);
    result = (WTF::StringImpl *)WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v34, v38);
    if (v34)
      return (WTF::StringImpl *)WTF::fastFree(v34, v17);
  }
  return result;
}

WTF::StringImpl *WebCore::Text::wholeText@<X0>(WebCore::Text *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WebCore::Text *v4;
  WebCore::Text *v5;
  WebCore::Text *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  BOOL v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;

  v4 = this;
  do
  {
    v5 = v4;
    v4 = (WebCore::Text *)(*((_QWORD *)v4 + 6) & 0xFFFFFFFFFFFFLL);
  }
  while (v4 && (*((_WORD *)v4 + 14) & 2) != 0);
  do
  {
    v6 = this;
    this = (WebCore::Text *)*((_QWORD *)this + 7);
  }
  while (this && (*((_WORD *)this + 14) & 2) != 0);
  do
    v6 = (WebCore::Text *)*((_QWORD *)v6 + 7);
  while (v6 && (*((_WORD *)v6 + 14) & 2) == 0);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  if (v5 != v6)
  {
    do
    {
      v8 = *((_QWORD *)v5 + 10);
      if (v14)
        v9 = 0;
      else
        v9 = v13 == 0;
      if (v9)
      {
        if (v8)
          *(_DWORD *)v8 += 2;
        v10 = v12;
        v12 = (WTF::StringImpl *)v8;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
          {
            WTF::StringImpl::destroy(v10, a2);
            v8 = *((_QWORD *)v5 + 10);
          }
          else
          {
            *(_DWORD *)v10 -= 2;
          }
        }
        if (v8)
          LODWORD(v8) = *(_DWORD *)(v8 + 4);
        v14 = v8;
      }
      else if (v8 && (*(_BYTE *)(v8 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        WTF::StringBuilder::append();
      }
      do
        v5 = (WebCore::Text *)*((_QWORD *)v5 + 7);
      while (v5 && (*((_WORD *)v5 + 14) & 2) == 0);
    }
    while (v5 != v6);
    result = v12;
    if (v12)
      goto LABEL_34;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12);
  result = v12;
  if (v12)
LABEL_34:
    *(_DWORD *)result += 2;
  *a3 = result;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, a2);
      result = v12;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::Text::replaceWholeText(WebCore::Text *this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  unsigned int *v5;
  unsigned int *result;
  WebCore::Text *v7;
  WebCore::Text *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;
  _QWORD v16[3];
  _QWORD v17[3];
  WebCore::Node *v18;
  unsigned int *v19;

  v5 = (unsigned int *)this;
  do
  {
    result = v5;
    v5 = (unsigned int *)(*((_QWORD *)v5 + 6) & 0xFFFFFFFFFFFFLL);
  }
  while (v5 && (v5[7] & 2) != 0);
  result[6] += 2;
  v7 = this;
  do
  {
    v8 = v7;
    v7 = (WebCore::Text *)*((_QWORD *)v7 + 7);
  }
  while (v7 && (*((_WORD *)v7 + 14) & 2) != 0);
  *((_DWORD *)v8 + 6) += 2;
  v9 = *((_QWORD *)this + 4);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  while (result)
  {
    if (result == (unsigned int *)this || (result[7] & 2) == 0 || v9 != *((_QWORD *)result + 4))
    {
      v19 = 0;
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
      break;
    }
    v18 = (WebCore::Node *)result;
    v19 = 0;
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v19, *((_QWORD *)result + 7));
    WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v9, v18, v17);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v17, v12);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v18);
    result = v19;
  }
  if (v8 != this)
  {
    v10 = *((_QWORD *)v8 + 7);
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    result = (unsigned int *)*((_QWORD *)this + 7);
    if (result)
    {
      result[6] += 2;
      while (result != (unsigned int *)v10 && (result[7] & 2) != 0 && v9 == *((_QWORD *)result + 4))
      {
        v18 = (WebCore::Node *)result;
        v19 = 0;
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v19, *((_QWORD *)result + 7));
        WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v9, v18, v16);
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v16, v11);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v18);
        result = v19;
        if (!v19)
          goto LABEL_42;
      }
      v19 = 0;
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
LABEL_42:
    if (v10)
    {
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
  }
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    result = (unsigned int *)WebCore::CharacterData::setData(this, (const WTF::StringImpl **)a2, a3);
    if (!v9)
      goto LABEL_24;
  }
  else
  {
    if (!v9)
      goto LABEL_24;
    if (v9 == *((_QWORD *)this + 4))
    {
      result = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v9, this, &v13);
      if (v15)
      {
        result = (unsigned int *)v14;
        v14 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
      }
    }
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
LABEL_24:
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v8, a2);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::Text::nodeName(WebCore::Text *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::Text::cloneNodeInternal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  _DWORD *v8;
  int v9;

  v5 = *(WTF::StringImpl **)(a1 + 80);
  if (v5)
    *(_DWORD *)v5 += 2;
  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x300300000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  if (v5)
  {
    v9 = *(_DWORD *)v5;
    *(_DWORD *)v5 += 2;
    *(_QWORD *)(result + 80) = v5;
    *(_QWORD *)result = off_1E33A8078;
    *a3 = result;
    if (v9)
      *(_DWORD *)v5 = v9;
    else
      return WTF::StringImpl::destroy(v5, v7);
  }
  else
  {
    v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v8 += 2;
      *(_QWORD *)(result + 80) = v8;
    }
    else
    {
      *(_QWORD *)(result + 80) = 0;
    }
    *(_QWORD *)result = off_1E33A8078;
    *a3 = result;
  }
  return result;
}

unsigned int *WebCore::Text::virtualCreate@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  void *v7;
  uint64_t v8;
  _DWORD *v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  result = (unsigned int *)bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 2) = xmmword_1968BC9D0;
  *((_QWORD *)result + 3) = 0x300300000002;
  *((_QWORD *)result + 4) = 0;
  v8 = v5 + 96;
  if (!v5)
    v8 = 0;
  *((_QWORD *)result + 5) = v8;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  ++*(_DWORD *)(v5 + 3324);
  v9 = *a2;
  if (*a2 || (v9 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v9 += 2;
  *((_QWORD *)result + 10) = v9;
  *(_QWORD *)result = off_1E33A8078;
  *a3 = result;
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Text::description@<X0>(WTF::StringBuilder **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  const WebCore::Text *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  WebCore::Node::description((WebCore::Node *)this, &v11);
  v6 = v11;
  if (v11)
  {
    v7 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    v12 = v6;
    v14 = *((_DWORD *)v6 + 1);
    v11 = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v4);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  WebCore::appendTextRepresentation((WebCore *)&v12, this[10], v5);
  result = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (result = v12) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      result = v12;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::appendTextRepresentation(WebCore *this, WTF::StringBuilder *a2, const WebCore::Text *a3)
{
  WTF::StringBuilder *v3;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  int8x16_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  WTF::StringImpl *v16;
  int8x16_t v17;
  char v18;
  uint64_t v19;
  char v20;
  WTF::StringBuilder *v21;
  int8x16_t *v22;
  uint64_t v23;

  v3 = a2;
  if (!a2)
  {
    v22 = (int8x16_t *)" length=";
    LODWORD(v23) = 8;
    LODWORD(v21) = 0;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(this, &v22, (unsigned int *)&v21);
    goto LABEL_31;
  }
  v5 = *((_DWORD *)a2 + 1);
  *(_DWORD *)a2 += 2;
  v22 = (int8x16_t *)" length=";
  LODWORD(v23) = 8;
  LODWORD(v21) = v5;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(this, &v22, (unsigned int *)&v21);
  WTF::StringImpl::replace();
  v7 = (WTF::StringImpl *)v22;
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    if (v7)
      goto LABEL_4;
LABEL_26:
    v3 = 0;
    goto LABEL_31;
  }
  WTF::StringImpl::destroy(v3, v6);
  if (!v7)
    goto LABEL_26;
LABEL_4:
  WTF::StringImpl::replace();
  v3 = (WTF::StringBuilder *)v22;
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    if (v3)
      goto LABEL_6;
LABEL_31:
    v18 = 1;
LABEL_19:
    v21 = v3;
    v22 = (int8x16_t *)" \"";
    LODWORD(v23) = 2;
    v20 = 34;
    result = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(this, &v22, (uint64_t *)&v21, &v20);
    if ((v18 & 1) != 0)
      return result;
    goto LABEL_23;
  }
  WTF::StringImpl::destroy(v7, v8);
  if (!v3)
    goto LABEL_31;
LABEL_6:
  if (*((_DWORD *)v3 + 1) < 0x1Fu)
  {
    v18 = 0;
    goto LABEL_19;
  }
  v9 = *((_DWORD *)v3 + 4);
  v10 = (int8x16_t *)*((_QWORD *)v3 + 1);
  if ((v9 & 4) != 0)
    v11 = 0x100000014;
  else
    v11 = 20;
  v12 = *((_DWORD *)this + 4);
  if (v12 >= 0xFFFFFFE6)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12 + 26;
  v14 = *((_QWORD *)this + 1);
  if ((v14 || (v14 = *(_QWORD *)this) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0 || (v9 & 4) == 0)
  {
    result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
    if (result)
    {
      *(_DWORD *)result = 2228256;
      v19 = result + 4;
      v22 = v10;
      v23 = v11;
      result = (uint64_t)WTF::StringView::getCharacters<char16_t>(&v22, (char *)(result + 4));
      *(_QWORD *)(v19 + 2 * v23) = 0x22002E002E002ELL;
    }
  }
  else
  {
    result = MEMORY[0x19AEA4824](this, v13);
    if (result)
    {
      *(_WORD *)result = 8736;
      v17 = *v10;
      *(_DWORD *)(result + 18) = v10[1].i32[0];
      *(int8x16_t *)(result + 2) = v17;
      *(_DWORD *)(result + 22) = 573451822;
    }
  }
LABEL_23:
  if (*(_DWORD *)v3 == 2)
    return WTF::StringImpl::destroy(v3, v16);
  *(_DWORD *)v3 -= 2;
  return result;
}

WTF::StringImpl *WebCore::Text::debugDescription@<X0>(WTF::StringBuilder **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  const WebCore::Text *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  WebCore::Node::debugDescription((WebCore::Node *)this, &v11);
  v6 = v11;
  if (v11)
  {
    v7 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    v12 = v6;
    v14 = *((_DWORD *)v6 + 1);
    v11 = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v4);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  WebCore::appendTextRepresentation((WebCore *)&v12, this[10], v5);
  result = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (result = v12) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      result = v12;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Text::setDataAndUpdate(WebCore::Text *this, const WTF::StringImpl **a2, const WebCore::Style::RuleSet *a3, int a4, int a5, int a6)
{
  int v6;
  WTF *v9;
  uint64_t result;
  void *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  v6 = (int)a3;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if (v9)
    *(_DWORD *)v9 += 2;
  result = (uint64_t)WebCore::CharacterData::setDataAndUpdate(this, a2, a3, a4, a5, a6);
  if (!v6)
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v14 = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v14 + 2;
    v15 = *(_QWORD *)(v13 + 3040);
    if (v15)
    {
      ++*(_DWORD *)(v15 + 8);
      result = WTF::equal(v9, *a2, v12);
      if ((result & 1) == 0)
        result = WebCore::TextManipulationController::didUpdateContentForNode(v15, this);
      v16 = *(_DWORD *)(v15 + 8);
      if (!v16)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v15 + 8) = v16 - 1;
      v14 = *(_DWORD *)(v13 + 24) - 2;
    }
    if (v14)
    {
      *(_DWORD *)(v13 + 24) = v14;
    }
    else if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
    {
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, v11);
    }
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

void WebCore::TextDecoder::~TextDecoder(WebCore::TextDecoder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::TextDecoder::create@<X0>(__int16 a1@<W1>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  float v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  WTF::StringImpl *v13;

  WTF::String::trim();
  if (v13 && WTF::StringImpl::find((uint64_t)v13, 0, 0, v4, v5, v6) != -1)
  {
    *(_BYTE *)a2 = 32;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  else
  {
    v8 = (_DWORD *)WTF::fastMalloc((WTF *)0x40);
    v9 = v8;
    if (v13)
    {
      v10 = *((_QWORD *)v13 + 1);
      v11 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v10 = 0;
      v11 = 0x100000000;
    }
    *v8 = 1;
    PAL::TextEncoding::TextEncoding((uint64_t)(v8 + 2), v10, (const char *)v11);
    *((_WORD *)v9 + 20) = a1;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = 0;
    if (!*((_QWORD *)v9 + 3) || !strcmp(*((const char **)v9 + 2), "replacement"))
    {
      *(_BYTE *)a2 = 32;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
      WTF::RefCounted<WebCore::TextDecoder>::deref((WebCore::TextDecoder *)v9);
    }
    else
    {
      *(_QWORD *)a2 = v9;
      *(_DWORD *)(a2 + 16) = 0;
    }
  }
  result = (uint64_t)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

void WebCore::TextDecoder::decode(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::StaticNodeList *v17;
  WTF::StringImpl *v18;
  int v19;
  _BYTE v20[8];
  int v21;
  char v22;
  _BYTE *v23;

  v20[0] = 0;
  v22 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    LOBYTE(v18) = 0;
    v19 = -1;
    v7 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v7 == -1)
    {
      v20[0] = 0;
      v21 = -1;
    }
    else
    {
      v8 = off_1E33A8210[v7];
      ((void (*)(_BYTE **, WTF::StringImpl **, uint64_t))v8)(&v23, &v18, a2);
      v19 = v7;
      if (v22)
      {
        v23 = v20;
        ((void (*)(_BYTE **, _BYTE *, WTF::StringImpl **))off_1E33A8220[v7])(&v23, v20, &v18);
        goto LABEL_9;
      }
      v20[0] = 0;
      v21 = -1;
      ((void (*)(_BYTE **, _BYTE *, WTF::StringImpl **))v8)(&v23, v20, &v18);
      v21 = v7;
    }
    v22 = 1;
LABEL_9:
    if (v19 != -1)
      ((void (*)(_BYTE **, WTF::StringImpl **))off_1E33A8200[v19])(&v23, &v18);
    if (v22)
    {
      if (v21 != -1)
      {
        v18 = (WTF::StringImpl *)&v23;
        v10 = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33A8230[v21])(&v18, v20);
        v9 = a2;
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    v17 = (WebCore::StaticNodeList *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::StaticNodeList::~StaticNodeList(v17);
    return;
  }
  v9 = 0;
  v10 = 0;
LABEL_14:
  if (!*(_QWORD *)(a1 + 48))
  {
    PAL::newTextCodec((PAL *)(a1 + 8), (const PAL::TextEncoding *)a2, &v18);
    v11 = v18;
    v18 = 0;
    v12 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v13 = v18;
      v18 = 0;
      if (v13)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
    }
    if (!*(_BYTE *)(a1 + 41))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  }
  v14 = *(_QWORD *)(a1 + 56) + v9;
  *(_QWORD *)(a1 + 56) = v14;
  if (v14 >> 31)
  {
    *(_BYTE *)a4 = 32;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  else
  {
    LOBYTE(v23) = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, uint64_t, BOOL, _QWORD, _BYTE **))(**(_QWORD **)(a1 + 48) + 24))(&v18, *(_QWORD *)(a1 + 48), v10, v9, (a3 & 1) == 0, *(unsigned __int8 *)(a1 + 40), &v23);
    if ((a3 & 1) == 0 && !*(_BYTE *)(a1 + 41))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
    if ((_BYTE)v23 && *(_BYTE *)(a1 + 40))
    {
      *(_BYTE *)a4 = 33;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 1;
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    else
    {
      *(_QWORD *)a4 = v18;
      *(_DWORD *)(a4 + 16) = 0;
    }
  }
  if (v22)
  {
    if (v21 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33A8200[v21])(&v18, v20);
  }
}

void WebCore::StaticWrapperNodeList::~StaticWrapperNodeList(WebCore::StaticWrapperNodeList *this)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::StaticWrapperNodeList::~StaticWrapperNodeList(WebCore::StaticWrapperNodeList *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::length(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    return *(unsigned int *)(a1 + 60);
  if ((*(_BYTE *)(a1 + 80) & 2) == 0 && !*(_QWORD *)(a1 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v3 = v2 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v3 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v24 = a1;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v2 + 1760), &v24, (uint64_t)&v23);
    }
  }
  result = WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::collectionBegin(a1);
  if (v5)
  {
    v6 = result;
    v7 = v5;
    v8 = *(_DWORD *)(a1 + 72);
    LODWORD(result) = *(_DWORD *)(a1 + 76);
    v9 = v8;
LABEL_8:
    v10 = result;
    if ((_DWORD)result == v9)
    {
      v14 = result + ((unint64_t)result >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= (unint64_t)result + 1)
        v16 = result + 1;
      else
        v16 = v15;
      WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 64, v16);
      v10 = *(unsigned int *)(a1 + 76);
      v11 = *(_QWORD *)(a1 + 64);
      v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
      if (v12)
      {
        do
          v17 = __ldaxr(v12);
        while (__stlxr(v17 + 1, v12));
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 64);
      v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
      if (v12)
      {
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
    }
    *(_QWORD *)(v11 + 8 * v10) = v12;
    result = (*(_DWORD *)(a1 + 76) + 1);
    *(_DWORD *)(a1 + 76) = result;
    v19 = *(_QWORD *)(a1 + 88);
    v18 = *(_QWORD *)(a1 + 96);
    while (1)
    {
      v20 = *(_QWORD *)(v7 + 80);
      if (!v20)
      {
        if (v7 == v6)
          goto LABEL_49;
        while (1)
        {
          v20 = *(_QWORD *)(v7 + 56);
          if (v20)
            break;
          v7 = *(_QWORD *)(v7 + 32);
          if (v7)
            v22 = v7 == v6;
          else
            v22 = 1;
          if (v22)
            goto LABEL_49;
        }
      }
      if ((*(_WORD *)(v20 + 28) & 8) == 0)
        break;
      v7 = v20;
LABEL_34:
      if ((v18 == WebCore::starAtomData || v18 == *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24))
        && (v19 == WebCore::starAtomData || v19 == *(_QWORD *)(*(_QWORD *)(v7 + 96) + 32)))
      {
        v9 = *(_DWORD *)(a1 + 72);
        goto LABEL_8;
      }
    }
    while (v20 != v6)
    {
      while (1)
      {
        v7 = *(_QWORD *)(v20 + 56);
        if (v7)
          break;
        v20 = *(_QWORD *)(v20 + 32);
        if (v20)
          v21 = v20 == v6;
        else
          v21 = 1;
        if (v21)
          goto LABEL_49;
      }
      v20 = *(_QWORD *)(v20 + 56);
      if ((*(_WORD *)(v7 + 28) & 8) != 0)
        goto LABEL_34;
    }
LABEL_49:
    *(_BYTE *)(a1 + 80) |= 2u;
    if (*(_DWORD *)(a1 + 72) != v8)
    {
      WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                           * (*(_DWORD *)(a1 + 72) - v8)));
      result = *(unsigned int *)(a1 + 76);
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 60) = result;
  *(_BYTE *)(a1 + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::item(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v3 = result;
  v4 = *(_BYTE *)(result + 80);
  if ((v4 & 1) != 0 && *(_DWORD *)(result + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(result + 80) & 2) != 0)
  {
    if (*(_DWORD *)(result + 76) <= a2)
    {
      __break(0xC471u);
      return result;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(result + 64) + 8 * a2);
    if (v18)
      return *(_QWORD *)(v18 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 48);
  if (!result)
  {
    if ((v4 & 1) != 0)
    {
      v40 = *(_DWORD *)(v3 + 60);
      if (v40 - a2 < a2)
      {
        if ((*(_WORD *)(v3 + 21) & 0x200) != 0 && (v68 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v68 + 22) & 0x18) != 0))
          v41 = *(uint64_t **)(v68 + 40);
        else
          v41 = (uint64_t *)(v3 + 24);
        v42 = *(_QWORD *)(v3 + 88);
        v43 = *(_QWORD *)(v3 + 96);
        v44 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::TagCollectionNS>(v42, v43, *v41);
        result = v45;
        *(_QWORD *)(v3 + 40) = v44;
        *(_QWORD *)(v3 + 48) = v45;
        if (v40 - 1 <= a2)
          goto LABEL_207;
        v46 = v40 + ~a2;
        if (!v46)
          goto LABEL_207;
        v47 = WebCore::starAtomData;
        while ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v50 = *(_QWORD *)(result + 88);
              if (!v50)
                break;
              result = *(_QWORD *)(result + 88);
            }
            while ((*(_WORD *)(v50 + 28) & 4) != 0);
          }
          else
          {
            result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          }
LABEL_119:
          while ((*(_WORD *)(result + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v49 = *(_QWORD *)(result + 88);
                  if (!v49)
                    break;
                  result = *(_QWORD *)(result + 88);
                }
                while ((*(_WORD *)(v49 + 28) & 4) != 0);
              }
              else
              {
                result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              result = *(_QWORD *)(result + 32);
              if (result == v44)
                goto LABEL_206;
            }
            if (!result)
              goto LABEL_206;
          }
          *(_QWORD *)(v3 + 48) = result;
          if ((v43 == v47 || v43 == *(_QWORD *)(*(_QWORD *)(result + 96) + 24))
            && (v42 == v47 || v42 == *(_QWORD *)(*(_QWORD *)(result + 96) + 32))
            && !--v46)
          {
            goto LABEL_207;
          }
        }
        result = *(_QWORD *)(result + 32);
        if (result != v44 && result != 0)
          goto LABEL_119;
        goto LABEL_206;
      }
    }
    else
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + 8);
      v20 = v19 + 4 * (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v20 + 1768);
      if ((*(_BYTE *)(v3 + 22) & 2) != 0)
      {
        v71 = v3;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v19 + 1760), &v71, (uint64_t)&v70);
      }
    }
    v52 = WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::collectionBegin(v3);
    result = v51;
    *(_QWORD *)(v3 + 40) = v52;
    *(_QWORD *)(v3 + 48) = v51;
    *(_DWORD *)(v3 + 56) = 0;
    if (a2)
    {
      if (v51)
      {
        v53 = 0;
        *(_DWORD *)(v3 + 56) = 0;
        v54 = WebCore::starAtomData;
        while (1)
        {
          v55 = *(_QWORD *)(result + 80);
          if (!v55)
          {
            if (result == v52)
              goto LABEL_171;
            while (1)
            {
              v55 = *(_QWORD *)(result + 56);
              if (v55)
                break;
              result = *(_QWORD *)(result + 32);
              if (result)
                v59 = result == v52;
              else
                v59 = 1;
              if (v59)
                goto LABEL_171;
            }
          }
          if ((*(_WORD *)(v55 + 28) & 8) == 0)
            break;
          result = v55;
LABEL_158:
          *(_QWORD *)(v3 + 48) = result;
          v57 = *(_QWORD *)(v3 + 96);
          if (v57 == v54 || v57 == *(_QWORD *)(*(_QWORD *)(result + 96) + 24))
          {
            v58 = *(_QWORD *)(v3 + 88);
            if (v58 == v54 || v58 == *(_QWORD *)(*(_QWORD *)(result + 96) + 32))
            {
              *(_DWORD *)(v3 + 56) = ++v53;
              if (v53 == a2)
                return result;
            }
          }
        }
        while (v55 != v52)
        {
          while (1)
          {
            result = *(_QWORD *)(v55 + 56);
            if (result)
              break;
            v55 = *(_QWORD *)(v55 + 32);
            if (v55)
              v56 = v55 == v52;
            else
              v56 = 1;
            if (v56)
              goto LABEL_171;
          }
          v55 = *(_QWORD *)(v55 + 56);
          if ((*(_WORD *)(result + 28) & 8) != 0)
            goto LABEL_158;
        }
LABEL_171:
        *(_QWORD *)(v3 + 48) = 0;
        v60 = v53 + 1;
        goto LABEL_174;
      }
    }
    else if (v51)
    {
      return result;
    }
    v60 = 0;
LABEL_174:
    result = 0;
    *(_DWORD *)(v3 + 60) = v60;
    v4 = *(_BYTE *)(v3 + 80);
LABEL_175:
    *(_BYTE *)(v3 + 80) = v4 | 1;
    return result;
  }
  v5 = *(_DWORD *)(v3 + 56);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    if ((v4 & 1) != 0)
    {
      v7 = *(_DWORD *)(v3 + 60);
      if (v7 - a2 < v6)
      {
        if ((*(_WORD *)(v3 + 21) & 0x200) != 0 && (v69 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v69 + 22) & 0x18) != 0))
          v8 = *(uint64_t **)(v69 + 40);
        else
          v8 = (uint64_t *)(v3 + 24);
        v9 = *(_QWORD *)(v3 + 88);
        v10 = *(_QWORD *)(v3 + 96);
        v11 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::TagCollectionNS>(v9, v10, *v8);
        result = v12;
        *(_QWORD *)(v3 + 40) = v11;
        *(_QWORD *)(v3 + 48) = v12;
        if (v7 - 1 <= a2)
          goto LABEL_207;
        v13 = v7 + ~a2;
        if (!v13)
          goto LABEL_207;
        v14 = WebCore::starAtomData;
        while ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v17 = *(_QWORD *)(result + 88);
              if (!v17)
                break;
              result = *(_QWORD *)(result + 88);
            }
            while ((*(_WORD *)(v17 + 28) & 4) != 0);
          }
          else
          {
            result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          }
LABEL_18:
          while ((*(_WORD *)(result + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v16 = *(_QWORD *)(result + 88);
                  if (!v16)
                    break;
                  result = *(_QWORD *)(result + 88);
                }
                while ((*(_WORD *)(v16 + 28) & 4) != 0);
              }
              else
              {
                result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              result = *(_QWORD *)(result + 32);
              if (result == v11)
                goto LABEL_206;
            }
            if (!result)
              goto LABEL_206;
          }
          *(_QWORD *)(v3 + 48) = result;
          if ((v10 == v14 || v10 == *(_QWORD *)(*(_QWORD *)(result + 96) + 24))
            && (v9 == v14 || v9 == *(_QWORD *)(*(_QWORD *)(result + 96) + 32))
            && !--v13)
          {
            goto LABEL_207;
          }
        }
        result = *(_QWORD *)(result + 32);
        if (result != v11 && result != 0)
          goto LABEL_18;
        goto LABEL_206;
      }
    }
    if (a2 != v5)
    {
      v31 = 0;
      v32 = *(_QWORD *)(v3 + 40);
      v33 = WebCore::starAtomData;
      while (1)
      {
        v34 = *(_QWORD *)(result + 80);
        if (!v34)
        {
          if (result == v32)
            goto LABEL_107;
          while (1)
          {
            v34 = *(_QWORD *)(result + 56);
            if (v34)
              break;
            result = *(_QWORD *)(result + 32);
            if (result)
              v38 = result == v32;
            else
              v38 = 1;
            if (v38)
              goto LABEL_107;
          }
        }
        if ((*(_WORD *)(v34 + 28) & 8) == 0)
          break;
        result = v34;
LABEL_94:
        *(_QWORD *)(v3 + 48) = result;
        v36 = *(_QWORD *)(v3 + 96);
        if (v36 == v33 || v36 == *(_QWORD *)(*(_QWORD *)(result + 96) + 24))
        {
          v37 = *(_QWORD *)(v3 + 88);
          if ((v37 == v33 || v37 == *(_QWORD *)(*(_QWORD *)(result + 96) + 32)) && ++v31 == v6)
            goto LABEL_207;
        }
      }
      while (v34 != v32)
      {
        while (1)
        {
          result = *(_QWORD *)(v34 + 56);
          if (result)
            break;
          v34 = *(_QWORD *)(v34 + 32);
          if (v34)
            v35 = v34 == v32;
          else
            v35 = 1;
          if (v35)
            goto LABEL_107;
        }
        v34 = *(_QWORD *)(v34 + 56);
        if ((*(_WORD *)(result + 28) & 8) != 0)
          goto LABEL_94;
      }
LABEL_107:
      result = 0;
      *(_QWORD *)(v3 + 48) = 0;
      v39 = v31 + v5;
      *(_DWORD *)(v3 + 56) = v39;
      *(_DWORD *)(v3 + 60) = v39 + 1;
      goto LABEL_175;
    }
LABEL_207:
    *(_DWORD *)(v3 + 56) = a2;
    return result;
  }
  if (a2 >= v5)
    return result;
  v21 = v5 - a2;
  if (v5 - a2 <= a2)
  {
    if (!v21)
      goto LABEL_207;
    v61 = *(_QWORD *)(v3 + 40);
    v62 = WebCore::starAtomData;
    while ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v65 = *(_QWORD *)(result + 88);
          if (!v65)
            break;
          result = *(_QWORD *)(result + 88);
        }
        while ((*(_WORD *)(v65 + 28) & 4) != 0);
      }
      else
      {
        result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
      }
LABEL_183:
      while ((*(_WORD *)(result + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v64 = *(_QWORD *)(result + 88);
              if (!v64)
                break;
              result = *(_QWORD *)(result + 88);
            }
            while ((*(_WORD *)(v64 + 28) & 4) != 0);
          }
          else
          {
            result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          result = *(_QWORD *)(result + 32);
          if (result == v61)
            goto LABEL_206;
        }
        if (!result)
          goto LABEL_206;
      }
      *(_QWORD *)(v3 + 48) = result;
      v66 = *(_QWORD *)(v3 + 96);
      if (v66 == v62 || v66 == *(_QWORD *)(*(_QWORD *)(result + 96) + 24))
      {
        v67 = *(_QWORD *)(v3 + 88);
        if ((v67 == v62 || v67 == *(_QWORD *)(*(_QWORD *)(result + 96) + 32)) && !--v21)
          goto LABEL_207;
      }
    }
    result = *(_QWORD *)(result + 32);
    if (result != v61 && result != 0)
      goto LABEL_183;
LABEL_206:
    result = 0;
    *(_QWORD *)(v3 + 48) = 0;
    goto LABEL_207;
  }
  v22 = WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::collectionBegin(v3);
  result = v23;
  *(_QWORD *)(v3 + 40) = v22;
  *(_QWORD *)(v3 + 48) = v23;
  *(_DWORD *)(v3 + 56) = 0;
  if (a2)
  {
    v24 = 0;
    *(_DWORD *)(v3 + 56) = 0;
    v25 = WebCore::starAtomData;
    while (1)
    {
      v26 = *(_QWORD *)(result + 80);
      if (!v26)
      {
        if (result == v22)
          goto LABEL_78;
        while (1)
        {
          v26 = *(_QWORD *)(result + 56);
          if (v26)
            break;
          result = *(_QWORD *)(result + 32);
          if (result)
            v30 = result == v22;
          else
            v30 = 1;
          if (v30)
            goto LABEL_78;
        }
      }
      if ((*(_WORD *)(v26 + 28) & 8) == 0)
        break;
      result = v26;
LABEL_65:
      *(_QWORD *)(v3 + 48) = result;
      v28 = *(_QWORD *)(v3 + 96);
      if (v28 == v25 || v28 == *(_QWORD *)(*(_QWORD *)(result + 96) + 24))
      {
        v29 = *(_QWORD *)(v3 + 88);
        if (v29 == v25 || v29 == *(_QWORD *)(*(_QWORD *)(result + 96) + 32))
        {
          *(_DWORD *)(v3 + 56) = ++v24;
          if (v24 == a2)
            return result;
        }
      }
    }
    while (v26 != v22)
    {
      while (1)
      {
        result = *(_QWORD *)(v26 + 56);
        if (result)
          break;
        v26 = *(_QWORD *)(v26 + 32);
        if (v26)
          v27 = v26 == v22;
        else
          v27 = 1;
        if (v27)
          goto LABEL_78;
      }
      v26 = *(_QWORD *)(v26 + 56);
      if ((*(_WORD *)(result + 28) & 8) != 0)
        goto LABEL_65;
    }
LABEL_78:
    result = 0;
    *(_QWORD *)(v3 + 48) = 0;
  }
  return result;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 20);
LABEL_5:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

WebCore::Node *WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, WTF::AtomString *a2)
{
  uint64_t v2;
  WebCore::Node *v3;
  uint64_t *v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  int v23;
  int k;
  unsigned int v25;
  uint64_t v26;
  int m;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  WebCore::Node *v38;
  int j;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::Node *v48;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v2 + 4))
    return 0;
  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v47 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v47 + 22) & 0x18) != 0))
    v7 = *(uint64_t **)(v47 + 40);
  else
    v7 = (uint64_t *)(a1 + 24);
  v8 = *v7;
  if ((*(_BYTE *)(*v7 + 22) & 0x18) != 0)
  {
    v9 = *(const WebCore::TreeScope **)(v8 + 40);
    v10 = (unsigned int *)*((_QWORD *)v9 + 3);
    if (!v10 || (v11 = *(_QWORD *)v10) == 0)
    {
LABEL_10:
      v12 = (unsigned int *)*((_QWORD *)v9 + 4);
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v14 = 0;
          v15 = *(_DWORD *)(v13 - 8);
          v16 = *(_DWORD *)(v2 + 16) >> 8;
          for (i = v16; ; i = v14 + v18)
          {
            v18 = i & v15;
            v19 = *(_QWORD *)(v13 + 40 * v18);
            if (!v19)
              break;
            if (v19 != -1 && v19 == v2)
            {
              for (j = 0; ; v16 = j + v41)
              {
                v41 = v16 & v15;
                v42 = (uint64_t *)(v13 + 40 * (v16 & v15));
                v43 = *v42;
                if (!*v42)
                  break;
                if (v43 != -1 && v43 == v2)
                {
                  v45 = *(_DWORD *)(v13 - 4);
                  goto LABEL_62;
                }
                ++j;
              }
              v45 = *(_DWORD *)(v13 - 4);
              v42 = (uint64_t *)(v13 + 40 * v45);
LABEL_62:
              if (v42 != (uint64_t *)(v13 + 40 * v45) && *((_DWORD *)v42 + 4) > 1u)
                return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              WebCore::TreeScopeOrderedMap::getElementByName(v12, a2, v9, (uint64_t *)&v48);
              v3 = v48;
              if (!v48)
                return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              if ((*((_WORD *)v48 + 14) & 0x10) == 0)
                goto LABEL_66;
              if ((*(_WORD *)(a1 + 21) & 0x1F) == 7)
              {
                v46 = *(_QWORD *)(*((_QWORD *)v48 + 12) + 24);
                if (*(_QWORD *)(WebCore::HTMLNames::aTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::embedTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::formTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::mapTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::metaTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::selectTag + 24) != v46
                  && *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) != v46)
                {
                  goto LABEL_66;
                }
              }
              goto LABEL_37;
            }
            ++v14;
          }
        }
      }
      return 0;
    }
    v21 = 0;
    v22 = *(_DWORD *)(v11 - 8);
    v23 = *(_DWORD *)(v2 + 16) >> 8;
    for (k = v23; ; k = v21 + v25)
    {
      v25 = k & v22;
      v26 = *(_QWORD *)(v11 + 40 * v25);
      if (!v26)
        goto LABEL_10;
      if (v26 != -1 && v26 == v2)
        break;
      ++v21;
    }
    for (m = 0; ; v23 = m + v29)
    {
      v29 = v23 & v22;
      v30 = (uint64_t *)(v11 + 40 * (v23 & v22));
      v31 = *v30;
      if (!*v30)
        break;
      if (v31 != -1 && v31 == v2)
      {
        v33 = *(_DWORD *)(v11 - 4);
        goto LABEL_34;
      }
      ++m;
    }
    v33 = *(_DWORD *)(v11 - 4);
    v30 = (uint64_t *)(v11 + 40 * v33);
LABEL_34:
    if (v30 == (uint64_t *)(v11 + 40 * v33) || *((_DWORD *)v30 + 4) <= 1u)
    {
      WebCore::TreeScopeOrderedMap::getElementById(v10, a2, v9, (uint64_t *)&v48);
      v3 = v48;
      if (v48)
      {
LABEL_37:
        v35 = *(_QWORD *)(a1 + 96);
        if (v35 == WebCore::starAtomData || v35 == *(_QWORD *)(*((_QWORD *)v3 + 12) + 24))
        {
          v36 = *(_QWORD *)(a1 + 88);
          if (v36 == WebCore::starAtomData || v36 == *(_QWORD *)(*((_QWORD *)v3 + 12) + 32))
          {
            v37 = *(_WORD *)(v8 + 28);
            if ((v37 & 0xF000) == 0x9000)
            {
              if (**((_QWORD **)v3 + 5) == v8
                && (*((_WORD *)v3 + 14) & 0xF000) != 0x9000
                && (*((_BYTE *)v3 + 22) & 8) != 0)
              {
LABEL_52:
                if (*((_DWORD *)v3 + 6) == 2)
                {
                  if ((*((_WORD *)v3 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v3, v34);
                }
                else
                {
                  *((_DWORD *)v3 + 6) -= 2;
                }
                return v3;
              }
            }
            else if ((v37 & 4) != 0
                   && *(_QWORD *)(v8 + 80)
                   && ((*((unsigned __int8 *)v3 + 22) ^ *(unsigned __int8 *)(v8 + 22)) & 8) == 0)
            {
              v38 = v3;
              do
                v38 = (WebCore::Node *)*((_QWORD *)v38 + 4);
              while (v38 != (WebCore::Node *)v8 && v38 != 0);
              if (v38)
                goto LABEL_52;
            }
          }
        }
LABEL_66:
        if (*((_DWORD *)v3 + 6) == 2)
        {
          if ((*((_WORD *)v3 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v3, v34);
        }
        else
        {
          *((_DWORD *)v3 + 6) -= 2;
        }
      }
    }
  }
  return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollection,(WebCore::CollectionTraversalType)0>::length(WebCore::TagCollection *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  char v36;
  unsigned int v37;
  BOOL v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42[3];
  WebCore::TagCollection *v43;

  if ((*((_BYTE *)this + 80) & 1) != 0)
    return *((unsigned int *)this + 15);
  if ((*((_BYTE *)this + 80) & 2) == 0 && !*((_QWORD *)this + 6))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v5 = v4 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v5 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v43 = this;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v4 + 1760), (uint64_t *)&v43, (uint64_t)v42);
    }
  }
  if ((*(_WORD *)((_BYTE *)this + 21) & 0x200) != 0
    && (v40 = *((_QWORD *)this + 3), (*(_BYTE *)(v40 + 22) & 0x18) != 0))
  {
    v6 = *(char **)(v40 + 40);
  }
  else
  {
    v6 = (char *)this + 24;
  }
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 80);
  if (!v8)
    goto LABEL_9;
  result = 0;
  while ((*(_WORD *)(v8 + 28) & 8) == 0)
  {
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      goto LABEL_14;
  }
LABEL_36:
  while ((WebCore::TagCollection::elementMatches((uint64_t)this, *(WebCore::Element **)(v8 + 96), a3) & 1) == 0)
  {
    v10 = *(_QWORD *)(v8 + 80);
    if (!v10)
    {
      if (v8 == v7)
        goto LABEL_9;
      while (1)
      {
        v10 = *(_QWORD *)(v8 + 56);
        if (v10)
          break;
        v8 = *(_QWORD *)(v8 + 32);
        if (v8)
          v12 = v8 == v7;
        else
          v12 = 1;
        if (v12)
          goto LABEL_9;
      }
    }
    if ((*(_WORD *)(v10 + 28) & 8) == 0)
    {
      while (v10 != v7)
      {
        while (1)
        {
          v8 = *(_QWORD *)(v10 + 56);
          if (v8)
            break;
          v10 = *(_QWORD *)(v10 + 32);
          if (v10)
            v11 = v10 == v7;
          else
            v11 = 1;
          if (v11)
            goto LABEL_9;
        }
        v10 = *(_QWORD *)(v10 + 56);
        if ((*(_WORD *)(v8 + 28) & 8) != 0)
          goto LABEL_36;
      }
LABEL_9:
      result = 0;
      goto LABEL_14;
    }
    v8 = v10;
  }
  v13 = *((_DWORD *)this + 18);
  v14 = v13;
LABEL_38:
  v15 = *((unsigned int *)this + 19);
  if ((_DWORD)v15 == v14)
  {
    v19 = v15 + (v15 >> 2);
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= v15 + 1)
      v21 = v15 + 1;
    else
      v21 = v20;
    WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 64, v21);
    v15 = *((unsigned int *)this + 19);
    v16 = *((_QWORD *)this + 8);
    result = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (result)
    {
      do
        v22 = __ldaxr((unsigned int *)result);
      while (__stlxr(v22 + 1, (unsigned int *)result));
    }
  }
  else
  {
    v16 = *((_QWORD *)this + 8);
    result = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (result)
    {
      do
        v18 = __ldaxr((unsigned int *)result);
      while (__stlxr(v18 + 1, (unsigned int *)result));
    }
  }
  *(_QWORD *)(v16 + 8 * v15) = result;
  ++*((_DWORD *)this + 19);
  while (1)
  {
    v23 = *(_QWORD *)(v8 + 80);
    if (!v23)
    {
      if (v8 == v7)
        goto LABEL_106;
      while (1)
      {
        v23 = *(_QWORD *)(v8 + 56);
        if (v23)
          break;
        v8 = *(_QWORD *)(v8 + 32);
        if (v8)
          v30 = v8 == v7;
        else
          v30 = 1;
        if (v30)
          goto LABEL_106;
      }
    }
    if ((*(_WORD *)(v23 + 28) & 8) == 0)
      break;
    v8 = v23;
LABEL_64:
    v25 = *(_QWORD *)(v8 + 96);
    v26 = *(_DWORD **)(v25 + 16);
    if (v26)
    {
      v41 = *(WTF::StringImpl **)(v25 + 16);
      *v26 += 2;
      v31 = *(_QWORD *)(v25 + 24);
      if (v31)
      {
        v32 = *(_DWORD *)(v31 + 4);
        *(_DWORD *)v31 += 2;
        if (v32 < 0)
          goto LABEL_111;
      }
      else
      {
        v32 = 0;
      }
      v33 = *((_DWORD *)v41 + 1);
      v34 = __OFADD__(v32, 1);
      v35 = v32 + 1;
      v36 = v34;
      if (v33 < 0 || (v36 & 1) != 0 || (result = (v33 + v35), __OFADD__(v33, v35)))
      {
LABEL_111:
        v42[0] = 0;
LABEL_112:
        __break(0xC471u);
        return result;
      }
      v37 = *((_DWORD *)v41 + 4);
      if (v31)
        v38 = (*((_DWORD *)v41 + 4) & 4) == 0;
      else
        v38 = 1;
      if (!v38)
        v37 = *(unsigned __int8 *)(v31 + 16);
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, (v37 >> 2) & 1, (uint64_t)v41, 58, v31, v42);
      if (!v42[0])
        goto LABEL_112;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v31, v39);
        else
          *(_DWORD *)v31 -= 2;
      }
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v39);
      else
        *(_DWORD *)v41 -= 2;
    }
    else
    {
      v27 = *(WTF::StringImpl **)(v25 + 24);
      if (v27)
        *(_DWORD *)v27 += 2;
      v42[0] = v27;
    }
    v29 = WTF::equal(*((WTF **)this + 11), v42[0], v17);
    result = (uint64_t)v42[0];
    v42[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_71;
      }
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v28);
      if (v29)
      {
LABEL_105:
        v14 = *((_DWORD *)this + 18);
        goto LABEL_38;
      }
    }
    else
    {
LABEL_71:
      if (v29)
        goto LABEL_105;
    }
  }
  while (v23 != v7)
  {
    while (1)
    {
      v8 = *(_QWORD *)(v23 + 56);
      if (v8)
        break;
      v23 = *(_QWORD *)(v23 + 32);
      if (v23)
        v24 = v23 == v7;
      else
        v24 = 1;
      if (v24)
        goto LABEL_106;
    }
    v23 = *(_QWORD *)(v23 + 56);
    if ((*(_WORD *)(v8 + 28) & 8) != 0)
      goto LABEL_64;
  }
LABEL_106:
  *((_BYTE *)this + 80) |= 2u;
  if (*((_DWORD *)this + 18) != v13)
    WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                         * (*((_DWORD *)this + 18) - v13)));
  result = *((unsigned int *)this + 19);
LABEL_14:
  *((_DWORD *)this + 15) = result;
  *((_BYTE *)this + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollection,(WebCore::CollectionTraversalType)0>::item(uint64_t this, unsigned int a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  int v36;
  uint64_t *v37;
  const WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  BOOL v63;
  unsigned int v64;
  BOOL v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  BOOL v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  BOOL v74;
  BOOL v75;
  uint64_t v76;
  BOOL v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v4 = this;
  v5 = *(_BYTE *)(this + 80);
  if ((v5 & 1) != 0 && *(_DWORD *)(this + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(this + 80) & 2) != 0)
  {
    if (*(_DWORD *)(this + 76) <= a2)
    {
      __break(0xC471u);
      return this;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(this + 64) + 8 * a2);
    if (v20)
      return *(_QWORD *)(v20 + 8);
    return 0;
  }
  this = *(_QWORD *)(this + 48);
  if (!this)
  {
    if ((v5 & 1) != 0)
    {
      if (*(_DWORD *)(v4 + 60) - a2 < a2)
      {
        if ((*(_WORD *)(v4 + 21) & 0x200) != 0 && (v80 = *(_QWORD *)(v4 + 24), (*(_BYTE *)(v80 + 22) & 0x18) != 0))
          v37 = *(uint64_t **)(v80 + 40);
        else
          v37 = (uint64_t *)(v4 + 24);
        v39 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::TagCollection>((WebCore::TagCollection *)v4, *v37, a3);
        this = v40;
        *(_QWORD *)(v4 + 40) = v39;
        *(_QWORD *)(v4 + 48) = v40;
        v41 = *(_DWORD *)(v4 + 60);
        if (v41 - 1 <= a2)
          goto LABEL_162;
        v42 = v41 + ~a2;
        if (!v42)
          goto LABEL_162;
        while (1)
        {
          v43 = *(_QWORD *)(v4 + 40);
          v44 = *(_QWORD *)(v4 + 48);
          v45 = *(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v45)
            break;
          if ((*(_WORD *)((*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            do
            {
              v48 = *(_QWORD *)(v45 + 88);
              if (!v48)
                break;
              v45 = *(_QWORD *)(v45 + 88);
            }
            while ((*(_WORD *)(v48 + 28) & 4) != 0);
          }
LABEL_85:
          while ((*(_WORD *)(v45 + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                v45 = *(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v47 = *(_QWORD *)(v45 + 88);
                  if (!v47)
                    break;
                  v45 = *(_QWORD *)(v45 + 88);
                }
                while ((*(_WORD *)(v47 + 28) & 4) != 0);
              }
              else
              {
                v45 = *(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v45 = *(_QWORD *)(v45 + 32);
              if (v45 == v43)
                goto LABEL_161;
            }
            if (!v45)
              goto LABEL_161;
          }
          *(_QWORD *)(v4 + 48) = v45;
          if (WebCore::TagCollection::elementMatches(v4, *(WebCore::Element **)(v45 + 96), v38))
          {
            if (!--v42)
            {
LABEL_102:
              this = *(_QWORD *)(v4 + 48);
              goto LABEL_162;
            }
          }
        }
        v45 = *(_QWORD *)(v44 + 32);
        if (v45 != v43 && v45 != 0)
          goto LABEL_85;
LABEL_161:
        this = 0;
        *(_QWORD *)(v4 + 48) = 0;
        goto LABEL_162;
      }
    }
    else
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 40) + 8);
      v22 = v21 + 4 * (((unint64_t)*(unsigned __int16 *)(v4 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v22 + 1768);
      if ((*(_BYTE *)(v4 + 22) & 2) != 0)
      {
        v84 = v4;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v21 + 1760), &v84, (uint64_t)&v83);
      }
    }
    if ((*(_WORD *)(v4 + 21) & 0x200) != 0 && (v79 = *(_QWORD *)(v4 + 24), (*(_BYTE *)(v79 + 22) & 0x18) != 0))
      v49 = *(_QWORD *)(v79 + 40);
    else
      v49 = v4 + 24;
    v50 = *(_QWORD *)v49;
    v51 = *(_QWORD *)(*(_QWORD *)v49 + 80);
    if (v51)
    {
      v52 = 0;
      while ((*(_WORD *)(v51 + 28) & 8) == 0)
      {
        v51 = *(_QWORD *)(v51 + 56);
        if (!v51)
          goto LABEL_134;
      }
      v52 = v51;
      if ((WebCore::TagCollection::elementMatches(v4, *(WebCore::Element **)(v51 + 96), a3) & 1) != 0)
      {
LABEL_134:
        *(_QWORD *)(v4 + 40) = v50;
        *(_QWORD *)(v4 + 48) = v52;
        this = v52;
        *(_DWORD *)(v4 + 56) = 0;
        if (a2)
        {
          if (!v52)
            goto LABEL_198;
          *(_DWORD *)(v4 + 56) = 0;
          while (1)
          {
            v59 = *(_QWORD **)(v4 + 40);
            v60 = *(_QWORD **)(v4 + 48);
            v61 = (_QWORD *)v60[10];
            if (!v61)
            {
              if (v60 == v59)
                goto LABEL_160;
              while (1)
              {
                v61 = (_QWORD *)v60[7];
                if (v61)
                  break;
                v60 = (_QWORD *)v60[4];
                if (v60)
                  v65 = v60 == v59;
                else
                  v65 = 1;
                if (v65)
                  goto LABEL_160;
              }
            }
            if ((*((_WORD *)v61 + 14) & 8) == 0)
              break;
            v62 = v61;
LABEL_150:
            *(_QWORD *)(v4 + 48) = v62;
            if (WebCore::TagCollection::elementMatches(v4, (WebCore::Element *)v62[12], a3))
            {
              v64 = *(_DWORD *)(v4 + 56) + 1;
              *(_DWORD *)(v4 + 56) = v64;
              if (v64 >= a2)
              {
                this = *(_QWORD *)(v4 + 48);
                goto LABEL_195;
              }
            }
          }
          while (v61 != v59)
          {
            while (1)
            {
              v62 = (_QWORD *)v61[7];
              if (v62)
                break;
              v61 = (_QWORD *)v61[4];
              if (v61)
                v63 = v61 == v59;
              else
                v63 = 1;
              if (v63)
                goto LABEL_160;
            }
            v61 = (_QWORD *)v61[7];
            if ((*((_WORD *)v62 + 14) & 8) != 0)
              goto LABEL_150;
          }
LABEL_160:
          *(_QWORD *)(v4 + 48) = 0;
        }
        else
        {
LABEL_195:
          if (this)
            return this;
        }
        if (v52)
        {
          v36 = *(_DWORD *)(v4 + 56) + 1;
          goto LABEL_199;
        }
LABEL_198:
        v36 = 0;
LABEL_199:
        this = 0;
LABEL_200:
        *(_DWORD *)(v4 + 60) = v36;
        *(_BYTE *)(v4 + 80) |= 1u;
        return this;
      }
      while (1)
      {
        v73 = *(_QWORD *)(v52 + 80);
        if (!v73)
        {
          if (v52 == v50)
            goto LABEL_106;
          while (1)
          {
            v73 = *(_QWORD *)(v52 + 56);
            if (v73)
              break;
            v52 = *(_QWORD *)(v52 + 32);
            if (v52)
              v75 = v52 == v50;
            else
              v75 = 1;
            if (v75)
              goto LABEL_106;
          }
        }
        if ((*(_WORD *)(v73 + 28) & 8) == 0)
          break;
        v52 = v73;
LABEL_216:
        if ((WebCore::TagCollection::elementMatches(v4, *(WebCore::Element **)(v52 + 96), a3) & 1) != 0)
          goto LABEL_134;
      }
      while (v73 != v50)
      {
        while (1)
        {
          v52 = *(_QWORD *)(v73 + 56);
          if (v52)
            break;
          v73 = *(_QWORD *)(v73 + 32);
          if (v73)
            v74 = v73 == v50;
          else
            v74 = 1;
          if (v74)
            goto LABEL_106;
        }
        v73 = *(_QWORD *)(v73 + 56);
        if ((*(_WORD *)(v52 + 28) & 8) != 0)
          goto LABEL_216;
      }
    }
LABEL_106:
    v52 = 0;
    goto LABEL_134;
  }
  v6 = *(_DWORD *)(v4 + 56);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return this;
    v23 = v6 - a2;
    if (v6 - a2 <= a2)
    {
      if (v23)
      {
        while (1)
        {
          v53 = *(_QWORD *)(v4 + 40);
          v54 = *(_QWORD *)(v4 + 48);
          v55 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v55)
            break;
          if ((*(_WORD *)((*(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            do
            {
              v58 = *(_QWORD *)(v55 + 88);
              if (!v58)
                break;
              v55 = *(_QWORD *)(v55 + 88);
            }
            while ((*(_WORD *)(v58 + 28) & 4) != 0);
          }
LABEL_113:
          while ((*(_WORD *)(v55 + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(v55 + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(v55 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                v55 = *(_QWORD *)(v55 + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v57 = *(_QWORD *)(v55 + 88);
                  if (!v57)
                    break;
                  v55 = *(_QWORD *)(v55 + 88);
                }
                while ((*(_WORD *)(v57 + 28) & 4) != 0);
              }
              else
              {
                v55 = *(_QWORD *)(v55 + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v55 = *(_QWORD *)(v55 + 32);
              if (v55 == v53)
                goto LABEL_163;
            }
            if (!v55)
              goto LABEL_163;
          }
          *(_QWORD *)(v4 + 48) = v55;
          if (WebCore::TagCollection::elementMatches(v4, *(WebCore::Element **)(v55 + 96), a3))
          {
            if (!--v23)
              goto LABEL_164;
          }
        }
        v55 = *(_QWORD *)(v54 + 32);
        if (v55 != v53 && v55 != 0)
          goto LABEL_113;
LABEL_163:
        *(_QWORD *)(v4 + 48) = 0;
      }
LABEL_164:
      *(_DWORD *)(v4 + 56) = a2;
      return *(_QWORD *)(v4 + 48);
    }
    if ((*(_WORD *)(v4 + 21) & 0x200) != 0 && (v82 = *(_QWORD *)(v4 + 24), (*(_BYTE *)(v82 + 22) & 0x18) != 0))
      v24 = *(_QWORD *)(v82 + 40);
    else
      v24 = v4 + 24;
    v25 = *(_QWORD *)v24;
    v26 = *(_QWORD *)(*(_QWORD *)v24 + 80);
    if (v26)
    {
      v27 = 0;
      while ((*(_WORD *)(v26 + 28) & 8) == 0)
      {
        v26 = *(_QWORD *)(v26 + 56);
        if (!v26)
          goto LABEL_168;
      }
      v27 = v26;
      if ((WebCore::TagCollection::elementMatches(v4, *(WebCore::Element **)(v26 + 96), a3) & 1) != 0)
        goto LABEL_168;
      while (1)
      {
        v76 = *(_QWORD *)(v27 + 80);
        if (!v76)
        {
          if (v27 == v25)
            goto LABEL_47;
          while (1)
          {
            v76 = *(_QWORD *)(v27 + 56);
            if (v76)
              break;
            v27 = *(_QWORD *)(v27 + 32);
            if (v27)
              v78 = v27 == v25;
            else
              v78 = 1;
            if (v78)
              goto LABEL_47;
          }
        }
        if ((*(_WORD *)(v76 + 28) & 8) == 0)
          break;
        v27 = v76;
LABEL_240:
        if ((WebCore::TagCollection::elementMatches(v4, *(WebCore::Element **)(v27 + 96), a3) & 1) != 0)
          goto LABEL_168;
      }
      while (v76 != v25)
      {
        while (1)
        {
          v27 = *(_QWORD *)(v76 + 56);
          if (v27)
            break;
          v76 = *(_QWORD *)(v76 + 32);
          if (v76)
            v77 = v76 == v25;
          else
            v77 = 1;
          if (v77)
            goto LABEL_47;
        }
        v76 = *(_QWORD *)(v76 + 56);
        if ((*(_WORD *)(v27 + 28) & 8) != 0)
          goto LABEL_240;
      }
    }
LABEL_47:
    v27 = 0;
LABEL_168:
    *(_QWORD *)(v4 + 40) = v25;
    *(_QWORD *)(v4 + 48) = v27;
    *(_DWORD *)(v4 + 56) = 0;
    if (a2)
    {
      *(_DWORD *)(v4 + 56) = 0;
      while (1)
      {
        v66 = *(_QWORD **)(v4 + 40);
        v67 = *(_QWORD **)(v4 + 48);
        v68 = (_QWORD *)v67[10];
        if (!v68)
        {
          if (v67 == v66)
            goto LABEL_193;
          while (1)
          {
            v68 = (_QWORD *)v67[7];
            if (v68)
              break;
            v67 = (_QWORD *)v67[4];
            if (v67)
              v72 = v67 == v66;
            else
              v72 = 1;
            if (v72)
              goto LABEL_193;
          }
        }
        if ((*((_WORD *)v68 + 14) & 8) == 0)
          break;
        v69 = v68;
LABEL_183:
        *(_QWORD *)(v4 + 48) = v69;
        if (WebCore::TagCollection::elementMatches(v4, (WebCore::Element *)v69[12], a3))
        {
          v71 = *(_DWORD *)(v4 + 56) + 1;
          *(_DWORD *)(v4 + 56) = v71;
          if (v71 >= a2)
            return *(_QWORD *)(v4 + 48);
        }
      }
      while (v68 != v66)
      {
        while (1)
        {
          v69 = (_QWORD *)v68[7];
          if (v69)
            break;
          v68 = (_QWORD *)v68[4];
          if (v68)
            v70 = v68 == v66;
          else
            v70 = 1;
          if (v70)
            goto LABEL_193;
        }
        v68 = (_QWORD *)v68[7];
        if ((*((_WORD *)v69 + 14) & 8) != 0)
          goto LABEL_183;
      }
LABEL_193:
      *(_QWORD *)(v4 + 48) = 0;
    }
    return *(_QWORD *)(v4 + 48);
  }
  if ((v5 & 1) != 0 && *(_DWORD *)(v4 + 60) - a2 < v7)
  {
    if ((*(_WORD *)(v4 + 21) & 0x200) != 0 && (v81 = *(_QWORD *)(v4 + 24), (*(_BYTE *)(v81 + 22) & 0x18) != 0))
      v8 = *(uint64_t **)(v81 + 40);
    else
      v8 = (uint64_t *)(v4 + 24);
    v10 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::TagCollection>((WebCore::TagCollection *)v4, *v8, a3);
    this = v11;
    *(_QWORD *)(v4 + 40) = v10;
    *(_QWORD *)(v4 + 48) = v11;
    v12 = *(_DWORD *)(v4 + 60);
    if (v12 - 1 <= a2)
      goto LABEL_162;
    v13 = v12 + ~a2;
    if (!v13)
      goto LABEL_162;
    while (1)
    {
      v14 = *(_QWORD *)(v4 + 40);
      v15 = *(_QWORD *)(v4 + 48);
      v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v16)
        break;
      if ((*(_WORD *)((*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v19 = *(_QWORD *)(v16 + 88);
          if (!v19)
            break;
          v16 = *(_QWORD *)(v16 + 88);
        }
        while ((*(_WORD *)(v19 + 28) & 4) != 0);
      }
LABEL_17:
      while ((*(_WORD *)(v16 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v16 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v18 = *(_QWORD *)(v16 + 88);
              if (!v18)
                break;
              v16 = *(_QWORD *)(v16 + 88);
            }
            while ((*(_WORD *)(v18 + 28) & 4) != 0);
          }
          else
          {
            v16 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v16 = *(_QWORD *)(v16 + 32);
          if (v16 == v14)
            goto LABEL_161;
        }
        if (!v16)
          goto LABEL_161;
      }
      *(_QWORD *)(v4 + 48) = v16;
      if (WebCore::TagCollection::elementMatches(v4, *(WebCore::Element **)(v16 + 96), v9))
      {
        if (!--v13)
          goto LABEL_102;
      }
    }
    v16 = *(_QWORD *)(v15 + 32);
    if (v16 != v14 && v16 != 0)
      goto LABEL_17;
    goto LABEL_161;
  }
  if (a2 == v6)
  {
LABEL_162:
    *(_DWORD *)(v4 + 56) = a2;
    return this;
  }
  v28 = 0;
  while (1)
  {
    v29 = *(_QWORD **)(v4 + 40);
    v30 = *(_QWORD **)(v4 + 48);
    v31 = (_QWORD *)v30[10];
    if (!v31)
    {
      if (v30 == v29)
        goto LABEL_73;
      while (1)
      {
        v31 = (_QWORD *)v30[7];
        if (v31)
          break;
        v30 = (_QWORD *)v30[4];
        if (v30)
          v34 = v30 == v29;
        else
          v34 = 1;
        if (v34)
          goto LABEL_73;
      }
    }
    if ((*((_WORD *)v31 + 14) & 8) == 0)
    {
      while (v31 != v29)
      {
        while (1)
        {
          v32 = (_QWORD *)v31[7];
          if (v32)
            break;
          v31 = (_QWORD *)v31[4];
          if (v31)
            v33 = v31 == v29;
          else
            v33 = 1;
          if (v33)
            goto LABEL_73;
        }
        v31 = (_QWORD *)v31[7];
        if ((*((_WORD *)v32 + 14) & 8) != 0)
          goto LABEL_63;
      }
LABEL_73:
      *(_QWORD *)(v4 + 48) = 0;
      v35 = *(_DWORD *)(v4 + 56) + v28;
      *(_DWORD *)(v4 + 56) = v35;
LABEL_74:
      this = 0;
      v36 = v35 + 1;
      goto LABEL_200;
    }
    v32 = v31;
LABEL_63:
    *(_QWORD *)(v4 + 48) = v32;
    if (WebCore::TagCollection::elementMatches(v4, (WebCore::Element *)v32[12], a3))
    {
      if (++v28 == v7)
        break;
    }
  }
  this = *(_QWORD *)(v4 + 48);
  v35 = *(_DWORD *)(v4 + 56) + v7;
  *(_DWORD *)(v4 + 56) = v35;
  if (!this)
    goto LABEL_74;
  return this;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::TagCollection,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 20);
LABEL_5:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollection,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, WTF::AtomString *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  int v23;
  int k;
  unsigned int v25;
  uint64_t v26;
  int m;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v33;
  const WTF::StringImpl *v34;
  void *v35;
  __int16 v36;
  uint64_t v37;
  int j;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v2 + 4))
    return 0;
  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v46 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v46 + 22) & 0x18) != 0))
    v7 = *(_QWORD *)(v46 + 40);
  else
    v7 = a1 + 24;
  v8 = *(_QWORD *)v7;
  if ((*(_BYTE *)(*(_QWORD *)v7 + 22) & 0x18) != 0)
  {
    v9 = *(const WebCore::TreeScope **)(v8 + 40);
    v10 = (unsigned int *)*((_QWORD *)v9 + 3);
    if (!v10 || (v11 = *(_QWORD *)v10) == 0)
    {
LABEL_10:
      v12 = (unsigned int *)*((_QWORD *)v9 + 4);
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v14 = 0;
          v15 = *(_DWORD *)(v13 - 8);
          v16 = *(_DWORD *)(v2 + 16) >> 8;
          for (i = v16; ; i = v14 + v18)
          {
            v18 = i & v15;
            v19 = *(_QWORD *)(v13 + 40 * v18);
            if (!v19)
              break;
            if (v19 != -1 && v19 == v2)
            {
              for (j = 0; ; v16 = j + v40)
              {
                v40 = v16 & v15;
                v41 = (uint64_t *)(v13 + 40 * (v16 & v15));
                v42 = *v41;
                if (!*v41)
                  break;
                if (v42 != -1 && v42 == v2)
                {
                  v44 = *(_DWORD *)(v13 - 4);
                  goto LABEL_59;
                }
                ++j;
              }
              v44 = *(_DWORD *)(v13 - 4);
              v41 = (uint64_t *)(v13 + 40 * v44);
LABEL_59:
              if (v41 != (uint64_t *)(v13 + 40 * v44) && *((_DWORD *)v41 + 4) > 1u)
                return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              WebCore::TreeScopeOrderedMap::getElementByName(v12, a2, v9, &v47);
              v3 = v47;
              if (!v47)
                return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              if ((*(_WORD *)(v47 + 28) & 0x10) == 0)
                goto LABEL_63;
              if ((*(_WORD *)(a1 + 21) & 0x1F) == 7)
              {
                v45 = *(_QWORD *)(*(_QWORD *)(v47 + 96) + 24);
                if (*(_QWORD *)(WebCore::HTMLNames::aTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::embedTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::formTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::mapTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::metaTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::selectTag + 24) != v45
                  && *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) != v45)
                {
                  goto LABEL_63;
                }
              }
              goto LABEL_37;
            }
            ++v14;
          }
        }
      }
      return 0;
    }
    v21 = 0;
    v22 = *(_DWORD *)(v11 - 8);
    v23 = *(_DWORD *)(v2 + 16) >> 8;
    for (k = v23; ; k = v21 + v25)
    {
      v25 = k & v22;
      v26 = *(_QWORD *)(v11 + 40 * v25);
      if (!v26)
        goto LABEL_10;
      if (v26 != -1 && v26 == v2)
        break;
      ++v21;
    }
    for (m = 0; ; v23 = m + v29)
    {
      v29 = v23 & v22;
      v30 = (uint64_t *)(v11 + 40 * (v23 & v22));
      v31 = *v30;
      if (!*v30)
        break;
      if (v31 != -1 && v31 == v2)
      {
        v33 = *(_DWORD *)(v11 - 4);
        goto LABEL_34;
      }
      ++m;
    }
    v33 = *(_DWORD *)(v11 - 4);
    v30 = (uint64_t *)(v11 + 40 * v33);
LABEL_34:
    if (v30 == (uint64_t *)(v11 + 40 * v33) || *((_DWORD *)v30 + 4) <= 1u)
    {
      WebCore::TreeScopeOrderedMap::getElementById(v10, a2, v9, &v47);
      v3 = v47;
      if (v47)
      {
LABEL_37:
        if (WebCore::TagCollection::elementMatches(a1, *(WebCore::Element **)(v3 + 96), v34))
        {
          v36 = *(_WORD *)(v8 + 28);
          if ((v36 & 0xF000) == 0x9000)
          {
            if (**(_QWORD **)(v3 + 40) == v8
              && (*(_WORD *)(v3 + 28) & 0xF000) != 0x9000
              && (*(_BYTE *)(v3 + 22) & 8) != 0)
            {
LABEL_49:
              if (*(_DWORD *)(v3 + 24) == 2)
              {
                if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v3, v35);
              }
              else
              {
                *(_DWORD *)(v3 + 24) -= 2;
              }
              return v3;
            }
          }
          else if ((v36 & 4) != 0
                 && *(_QWORD *)(v8 + 80)
                 && ((*(unsigned __int8 *)(v3 + 22) ^ *(unsigned __int8 *)(v8 + 22)) & 8) == 0)
          {
            v37 = v3;
            do
              v37 = *(_QWORD *)(v37 + 32);
            while (v37 != v8 && v37 != 0);
            if (v37)
              goto LABEL_49;
          }
        }
LABEL_63:
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3, v35);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
      }
    }
  }
  return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollection,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_24;
  }
  if (__stxr(1u, v13))
    goto LABEL_23;
LABEL_24:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v20 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v20);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::length(WebCore::HTMLTagCollection *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::HTMLTagCollection *v23;

  if ((*((_BYTE *)this + 80) & 1) != 0)
    return *((unsigned int *)this + 15);
  if ((*((_BYTE *)this + 80) & 2) == 0 && !*((_QWORD *)this + 6))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v6 = v5 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v6 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v23 = this;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v5 + 1760), (uint64_t *)&v23, (uint64_t)&v21);
    }
  }
  if ((*(_WORD *)((_BYTE *)this + 21) & 0x200) != 0
    && (v20 = *((_QWORD *)this + 3), (*(_BYTE *)(v20 + 22) & 0x18) != 0))
  {
    v7 = *(char **)(v20 + 40);
  }
  else
  {
    v7 = (char *)this + 24;
  }
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(*(_QWORD *)v7 + 80);
  if (v9)
  {
    result = 0;
    while ((*(_WORD *)(v9 + 28) & 8) == 0)
    {
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        goto LABEL_11;
    }
    while (1)
    {
LABEL_37:
      if ((WebCore::HTMLTagCollection::elementMatches((WTF **)this, (WebCore::Element *)v9, a3) & 1) != 0)
      {
        v21 = v8;
        v22 = v9;
        v13 = *((_DWORD *)this + 18);
        do
        {
          v14 = *((unsigned int *)this + 19);
          if ((_DWORD)v14 == *((_DWORD *)this + 18))
          {
            WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)this + 64, v9);
          }
          else
          {
            v15 = *((_QWORD *)this + 8);
            v16 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v9);
            if (v16)
            {
              do
                v17 = __ldaxr(v16);
              while (__stlxr(v17 + 1, v16));
            }
            *(_QWORD *)(v15 + 8 * v14) = v16;
            ++*((_DWORD *)this + 19);
          }
          LODWORD(v23) = 0;
          WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLTagCollection>((WTF **)this, &v21, (const WTF::StringImpl *)1, (unsigned int *)&v23);
          v9 = v22;
        }
        while (v22);
        v18 = *((_DWORD *)this + 18);
        *((_BYTE *)this + 80) |= 2u;
        v19 = v18 - v13;
        if (v19)
          WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8 * v19));
        result = *((unsigned int *)this + 19);
        goto LABEL_11;
      }
      v10 = *(_QWORD *)(v9 + 80);
      if (!v10)
      {
        if (v9 == v8)
          goto LABEL_10;
        while (1)
        {
          v10 = *(_QWORD *)(v9 + 56);
          if (v10)
            break;
          v9 = *(_QWORD *)(v9 + 32);
          if (v9)
            v12 = v9 == v8;
          else
            v12 = 1;
          if (v12)
            goto LABEL_10;
        }
      }
      if ((*(_WORD *)(v10 + 28) & 8) == 0)
        break;
      v9 = v10;
    }
    while (v10 != v8)
    {
      while (1)
      {
        v9 = *(_QWORD *)(v10 + 56);
        if (v9)
          break;
        v10 = *(_QWORD *)(v10 + 32);
        if (v10)
          v11 = v10 == v8;
        else
          v11 = 1;
        if (v11)
          goto LABEL_10;
      }
      v10 = *(_QWORD *)(v10 + 56);
      if ((*(_WORD *)(v9 + 28) & 8) != 0)
        goto LABEL_37;
    }
  }
LABEL_10:
  result = 0;
LABEL_11:
  *((_DWORD *)this + 15) = result;
  *((_BYTE *)this + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, uint64_t *a2)
{
  WebCore::Node *v2;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  WebCore::Node *v10;
  int v11;
  const WTF::StringImpl *v12;
  void *v13;
  WebCore::Node *v14;
  int v15;
  void *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore *v19;
  uint64_t v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;

  if (*a2 && *(_DWORD *)(*a2 + 4))
  {
    if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v20 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v20 + 22) & 0x18) != 0))
      v6 = *(uint64_t **)(v20 + 40);
    else
      v6 = (uint64_t *)(a1 + 24);
    v7 = *v6;
    if ((*(_BYTE *)(*v6 + 22) & 0x18) == 0)
      return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
    v23 = 0;
    v8 = *(unsigned int **)(v7 + 40);
    if (WebCore::TreeScope::hasElementWithId((uint64_t)v8, (uint64_t)a2))
    {
      if (!WebCore::TreeScope::containsMultipleElementsWithId((uint64_t)v8, a2))
      {
        WebCore::TreeScope::getElementById(v8, (const WTF::AtomString *)a2, (uint64_t *)&v22);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v23, (uint64_t *)&v22);
        v14 = v22;
        v22 = 0;
        if (v14)
        {
          if (*((_DWORD *)v14 + 6) == 2)
          {
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v14, v13);
          }
          else
          {
            *((_DWORD *)v14 + 6) -= 2;
          }
        }
      }
    }
    else
    {
      if (!WebCore::TreeScope::hasElementWithName((uint64_t)v8, (uint64_t)a2))
      {
        v10 = 0;
        v11 = 0;
        goto LABEL_12;
      }
      if (!WebCore::TreeScope::containsMultipleElementsWithName((uint64_t)v8, a2))
      {
        WebCore::TreeScope::getElementByName(v8, (const WTF::AtomString *)a2, (uint64_t *)&v22);
        v17 = *WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v23, (uint64_t *)&v22);
        v18 = v22;
        v22 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18, v16);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
        if (v17)
        {
          v19 = (WebCore *)*((unsigned __int16 *)v23 + 14);
          if ((v19 & 0x10) == 0
            || (*(_WORD *)(a1 + 21) & 0x1F) == 7
            && !WebCore::nameShouldBeVisibleInDocumentAll(v19, *((WebCore::Element **)v23 + 12)))
          {
            WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v23, 0);
          }
        }
      }
    }
    if (!v23)
      return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
    v15 = WebCore::HTMLTagCollection::elementMatches((WTF **)a1, v23, v12);
    v10 = v23;
    if (v15)
    {
      v21 = v23;
      if ((WebCore::Node::isDescendantOf((const WebCore::Node ***)v23, (const WebCore::Node ***)v7) & 1) != 0)
      {
        v11 = 0;
        v10 = v21;
        v2 = v21;
        goto LABEL_13;
      }
      v11 = 1;
      v10 = v21;
    }
    else
    {
      v11 = 1;
    }
LABEL_12:
    v2 = 0;
LABEL_13:
    v23 = 0;
    if (!v10)
      goto LABEL_46;
    if (*((_DWORD *)v10 + 6) != 2)
    {
      *((_DWORD *)v10 + 6) -= 2;
      if ((v11 & 1) == 0)
        return (uint64_t)v2;
      return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
    }
    if ((*((_WORD *)v10 + 15) & 0x400) != 0)
    {
LABEL_46:
      if (!v11)
        return (uint64_t)v2;
    }
    else
    {
      WebCore::Node::removedLastRef(v10, v9);
      if ((v11 & 1) == 0)
        return (uint64_t)v2;
    }
    return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
  }
  return 0;
}

void WebCore::StaticRange::~StaticRange(WebCore::StaticRange *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  bmalloc::api::isoDeallocate(this, a2);
}

BOOL WebCore::StaticRange::collapsed(WebCore::StaticRange *this)
{
  return *((_QWORD *)this + 2) == *((_QWORD *)this + 4) && *((_DWORD *)this + 6) == *((_DWORD *)this + 10);
}

uint64_t WebCore::StaticRange::isLiveRange(WebCore::StaticRange *this)
{
  return 0;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(WTF::StringBuilder *a1, int8x16_t **a2, unsigned int *a3)
{
  unsigned int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  char *result;
  int8x16_t *v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  _BYTE v25[13];
  uint64_t v26;
  int8x16x2_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = *((_DWORD *)a2 + 2);
  do
  {
    ++v6;
    v7 = v5 > 9;
    v5 /= 0xAu;
  }
  while (v7);
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *a2;
      v11 = *a3;
      v12 = &result[2 * a2[1]];
      v13 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v13)
      {
        v14 = &result[2 * v13];
        v15 = 0uLL;
        do
        {
          v27.val[0] = *v10;
          v16 = v10[1];
          v28.val[0] = v10[2];
          v17 = v10[3];
          v10 += 4;
          v18 = v17;
          v28.val[1] = 0uLL;
          v29.val[0] = v16;
          v27.val[1] = 0uLL;
          v19 = result;
          vst2q_s8(v19, v27);
          v19 += 32;
          v29.val[1] = 0uLL;
          vst2q_s8(v19, v29);
          v20 = result + 64;
          vst2q_s8(v20, v28);
          v21 = result + 96;
          vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
          result += 128;
        }
        while (result != v14);
        result = v14;
      }
      while (result != v12)
      {
        v22 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)result = v22;
        result += 2;
      }
      v23 = 0;
      do
      {
        v25[v23-- + 12] = (v11 % 0xA) | 0x30;
        v7 = v11 > 9;
        v11 /= 0xAu;
      }
      while (v7);
      if (v23 + 14 <= 13)
      {
        do
        {
          *(_WORD *)v12 = *((unsigned __int8 *)&v26 + v23);
          v12 += 2;
        }
        while (!__CFADD__(v23++, 1));
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(result, *a2, a2[1], *a3);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::StringCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *a1 = &off_1E33A8290;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StringCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33A8290;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StringCallback::scheduleCallback(WebCore::ScriptExecutionContext &,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a1 + 16);
}

unsigned int *WebCore::ImmutableStyleProperties::deref(unsigned int *this, WTF::StringImpl *a2)
{
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  _DWORD *v6;

  v2 = this;
  if (*this == 1)
  {
    v3 = this[1];
    if (v3 >= 0x10)
    {
      v4 = 0;
      v5 = (unsigned int *)((char *)this + ((v3 >> 3) & 0x1FFFFFFE) + 8);
      do
      {
        v6 = (_DWORD *)(*v5 | ((unint64_t)*((unsigned __int8 *)v5 + 4) << 32));
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
        else
          *v6 -= 2;
        ++v4;
        v5 = (unsigned int *)((char *)v5 + 5);
      }
      while (v4 < (unint64_t)v2[1] >> 4);
    }
    return (unsigned int *)WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*this;
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StyledElement::addSubresourceAttributeURLs(WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>> &)::$_0,BOOL,WebCore::CachedResource const&>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v7[24];

  v3 = *(uint64_t **)(a1 + 8);
  v4 = a2 + 160;
  if ((*(_BYTE *)(a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 160));
    *(_BYTE *)(a2 + 344) |= 1u;
  }
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(v3, v4, a3, (uint64_t)v7);
  return 0;
}

void WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33A8310;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33A8310;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::CachedHTMLCollection<WebCore::TagCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33A8378;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33A8378;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33A83E0;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33A83E0;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::TagCollectionNS,(WebCore::CollectionTraversalType)0>::collectionBegin(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;

  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v10 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v10 + 22) & 0x18) != 0))
    v2 = *(uint64_t **)(v10 + 40);
  else
    v2 = (uint64_t *)(a1 + 24);
  result = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  if (v4)
  {
    while ((*(_WORD *)(v4 + 28) & 8) == 0)
    {
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        return result;
    }
    v5 = *(_QWORD *)(a1 + 96);
LABEL_9:
    while (1)
    {
      if (v5 == WebCore::starAtomData || v5 == *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24))
      {
        v6 = *(_QWORD *)(a1 + 88);
        if (v6 == WebCore::starAtomData || v6 == *(_QWORD *)(*(_QWORD *)(v4 + 96) + 32))
          break;
      }
      v7 = *(_QWORD *)(v4 + 80);
      if (!v7)
      {
        if (v4 == result)
          return result;
        while (1)
        {
          v7 = *(_QWORD *)(v4 + 56);
          if (v7)
            break;
          v4 = *(_QWORD *)(v4 + 32);
          if (v4)
            v9 = v4 == result;
          else
            v9 = 1;
          if (v9)
            return result;
        }
      }
      v4 = v7;
      if ((*(_WORD *)(v7 + 28) & 8) == 0)
      {
        while (v7 != result)
        {
          while (1)
          {
            v4 = *(_QWORD *)(v7 + 56);
            if (v4)
              break;
            v7 = *(_QWORD *)(v7 + 32);
            if (v7)
              v8 = v7 == result;
            else
              v8 = 1;
            if (v8)
              return result;
          }
          v7 = *(_QWORD *)(v7 + 56);
          if ((*(_WORD *)(v4 + 28) & 8) != 0)
            goto LABEL_9;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::TagCollectionNS>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a3 + 88);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 4) != 0)
    {
      do
      {
        v4 = *(_QWORD *)(v3 + 88);
        if (!v4)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v4 + 28) & 4) != 0);
    }
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v5 = *(_QWORD *)(v3 + 88);
            if (!v5)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v5 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a3)
          return a3;
      }
      if (!v3)
        return a3;
    }
    while (WebCore::starAtomData != a2 && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != a2
         || WebCore::starAtomData != a1 && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 32) != a1)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 != a3 && v3 != 0)
          goto LABEL_27;
        return a3;
      }
      if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v9 = *(_QWORD *)(v3 + 88);
          if (!v9)
            break;
          v3 = *(_QWORD *)(v3 + 88);
        }
        while ((*(_WORD *)(v9 + 28) & 4) != 0);
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      }
LABEL_27:
      while ((*(_WORD *)(v3 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v8 = *(_QWORD *)(v3 + 88);
              if (!v8)
                break;
              v3 = *(_QWORD *)(v3 + 88);
            }
            while ((*(_WORD *)(v8 + 28) & 4) != 0);
          }
          else
          {
            v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 32);
          if (v3 == a3)
            return a3;
        }
        if (!v3)
          return a3;
      }
    }
  }
  return a3;
}

uint64_t WebCore::TreeScope::hasElementWithName(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v5;
  int i;
  unsigned int v7;
  uint64_t v8;

  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = *v2;
    if (v3)
    {
      v5 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v5 + v7)
      {
        v7 = i & *(_DWORD *)(v3 - 8);
        v8 = *(_QWORD *)(v3 + 40 * v7);
        if (!v8)
          break;
        if (v8 != -1 && v8 == *(_QWORD *)a2)
          return 1;
        ++v5;
      }
    }
  }
  return 0;
}

uint64_t WebCore::TagCollection::elementMatches(uint64_t this, WebCore::Element *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v3)
  {
    v17 = this;
    *(_DWORD *)v3 += 2;
    v8 = *((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      *(_DWORD *)v8 += 2;
      if (v9 < 0)
        goto LABEL_31;
    }
    else
    {
      v9 = 0;
    }
    v10 = *((_DWORD *)v3 + 1);
    v11 = __OFADD__(v9, 1);
    v12 = v9 + 1;
    v13 = v11;
    if ((v10 & 0x80000000) == 0 && (v13 & 1) == 0)
    {
      this = (v10 + v12);
      if (!__OFADD__(v10, v12))
      {
        v14 = *((_DWORD *)v3 + 4);
        v15 = (v14 >> 2) & 1;
        if (v8 && (v14 & 4) != 0)
          v15 = (*(unsigned __int8 *)(v8 + 16) >> 2) & 1;
        this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v15, (uint64_t)v3, 58, v8, &v18);
        if (v18)
        {
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v8, v16);
            else
              *(_DWORD *)v8 -= 2;
          }
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy(v3, v16);
          else
            *(_DWORD *)v3 -= 2;
          this = v17;
          goto LABEL_5;
        }
LABEL_32:
        __break(0xC471u);
        return this;
      }
    }
LABEL_31:
    v18 = 0;
    goto LABEL_32;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v4)
    *(_DWORD *)v4 += 2;
  v18 = v4;
LABEL_5:
  v6 = WTF::equal(*(WTF **)(this + 88), v18, a3);
  v7 = v18;
  v18 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::TagCollection>(WebCore::TagCollection *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v9;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 88);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 28) & 4) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v4 + 88);
        if (!v6)
          break;
        v4 = *(_QWORD *)(v4 + 88);
      }
      while ((*(_WORD *)(v6 + 28) & 4) != 0);
    }
    while ((*(_WORD *)(v4 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v7 = *(_QWORD *)(v4 + 88);
            if (!v7)
              break;
            v4 = *(_QWORD *)(v4 + 88);
          }
          while ((*(_WORD *)(v7 + 28) & 4) != 0);
        }
        else
        {
          v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v4 = *(_QWORD *)(v4 + 32);
        if (v4 == a2)
          return a2;
      }
      if (!v4)
        return a2;
    }
    if ((WebCore::TagCollection::elementMatches((uint64_t)this, *(WebCore::Element **)(v4 + 96), a3) & 1) == 0)
    {
      while ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v12 = *(_QWORD *)(v4 + 88);
            if (!v12)
              break;
            v4 = *(_QWORD *)(v4 + 88);
          }
          while ((*(_WORD *)(v12 + 28) & 4) != 0);
        }
        else
        {
          v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_24:
        while ((*(_WORD *)(v4 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v11 = *(_QWORD *)(v4 + 88);
                if (!v11)
                  break;
                v4 = *(_QWORD *)(v4 + 88);
              }
              while ((*(_WORD *)(v11 + 28) & 4) != 0);
            }
            else
            {
              v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 == a2)
              return a2;
          }
          if (!v4)
            return a2;
        }
        if ((WebCore::TagCollection::elementMatches((uint64_t)this, *(WebCore::Element **)(v4 + 96), v9) & 1) != 0)
          return a2;
      }
      v4 = *(_QWORD *)(v4 + 32);
      if (v4 != a2 && v4 != 0)
        goto LABEL_24;
    }
  }
  return a2;
}

WTF **WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLTagCollection>(WTF **this, _QWORD *a2, const WTF::StringImpl *a3, unsigned int *a4)
{
  unsigned int v5;
  WTF **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  WebCore::Element *v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;

  *a4 = 0;
  if ((_DWORD)a3)
  {
    v5 = a3;
    v7 = this;
    while (1)
    {
      v8 = (_QWORD *)*a2;
      v9 = (_QWORD *)a2[1];
      v10 = (_QWORD *)v9[10];
      if (!v10)
      {
        if (v9 == v8)
          goto LABEL_26;
        while (1)
        {
          v10 = (_QWORD *)v9[7];
          if (v10)
            break;
          v9 = (_QWORD *)v9[4];
          if (v9)
            v14 = v9 == v8;
          else
            v14 = 1;
          if (v14)
            goto LABEL_26;
        }
      }
      if ((*((_WORD *)v10 + 14) & 8) == 0)
        break;
      v11 = (WebCore::Element *)v10;
LABEL_16:
      a2[1] = v11;
      this = (WTF **)WebCore::HTMLTagCollection::elementMatches(v7, v11, a3);
      if ((_DWORD)this)
      {
        v13 = *a4 + 1;
        *a4 = v13;
        if (v13 >= v5)
          return this;
      }
    }
    while (v10 != v8)
    {
      while (1)
      {
        v11 = (WebCore::Element *)v10[7];
        if (v11)
          break;
        v10 = (_QWORD *)v10[4];
        if (v10)
          v12 = v10 == v8;
        else
          v12 = 1;
        if (v12)
          goto LABEL_26;
      }
      v10 = (_QWORD *)v10[7];
      if ((*((_WORD *)v11 + 14) & 8) != 0)
        goto LABEL_16;
    }
LABEL_26:
    a2[1] = 0;
  }
  return this;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::collectionLast(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t *v3;
  uint64_t v5;

  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v5 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v5 + 22) & 0x18) != 0))
    v3 = *(uint64_t **)(v5 + 40);
  else
    v3 = (uint64_t *)(a1 + 24);
  return WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLTagCollection>((WTF **)a1, *v3, a3);
}

WTF **WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward(WTF **this, uint64_t *a2, const WTF::StringImpl *a3)
{
  int v3;
  WTF **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a3)
  {
    v3 = (int)a3;
    v5 = this;
    while (1)
    {
      v6 = *a2;
      v7 = a2[1];
      v8 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v8)
        break;
      if ((*(_WORD *)((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v11 = *(_QWORD *)(v8 + 88);
          if (!v11)
            break;
          v8 = *(_QWORD *)(v8 + 88);
        }
        while ((*(_WORD *)(v11 + 28) & 4) != 0);
      }
LABEL_8:
      while ((*(_WORD *)(v8 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v8 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v10 = *(_QWORD *)(v8 + 88);
              if (!v10)
                break;
              v8 = *(_QWORD *)(v8 + 88);
            }
            while ((*(_WORD *)(v10 + 28) & 4) != 0);
          }
          else
          {
            v8 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v8 = *(_QWORD *)(v8 + 32);
          if (v8 == v6)
            goto LABEL_26;
        }
        if (!v8)
          goto LABEL_26;
      }
      a2[1] = v8;
      this = (WTF **)WebCore::HTMLTagCollection::elementMatches(v5, (WebCore::Element *)v8, a3);
      if ((_DWORD)this)
      {
        if (!--v3)
          return this;
      }
    }
    v8 = *(_QWORD *)(v7 + 32);
    if (v8 != v6 && v8 != 0)
      goto LABEL_8;
LABEL_26:
    a2[1] = 0;
  }
  return this;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLTagCollection>(WTF **this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v9;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 88);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 28) & 4) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v4 + 88);
        if (!v6)
          break;
        v4 = *(_QWORD *)(v4 + 88);
      }
      while ((*(_WORD *)(v6 + 28) & 4) != 0);
    }
    while ((*(_WORD *)(v4 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v7 = *(_QWORD *)(v4 + 88);
            if (!v7)
              break;
            v4 = *(_QWORD *)(v4 + 88);
          }
          while ((*(_WORD *)(v7 + 28) & 4) != 0);
        }
        else
        {
          v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v4 = *(_QWORD *)(v4 + 32);
        if (v4 == a2)
          return a2;
      }
      if (!v4)
        return a2;
    }
    if ((WebCore::HTMLTagCollection::elementMatches(this, (WebCore::Element *)v4, a3) & 1) == 0)
    {
      while ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v12 = *(_QWORD *)(v4 + 88);
            if (!v12)
              break;
            v4 = *(_QWORD *)(v4 + 88);
          }
          while ((*(_WORD *)(v12 + 28) & 4) != 0);
        }
        else
        {
          v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_24:
        while ((*(_WORD *)(v4 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v11 = *(_QWORD *)(v4 + 88);
                if (!v11)
                  break;
                v4 = *(_QWORD *)(v4 + 88);
              }
              while ((*(_WORD *)(v11 + 28) & 4) != 0);
            }
            else
            {
              v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 == a2)
              return a2;
          }
          if (!v4)
            return a2;
        }
        if ((WebCore::HTMLTagCollection::elementMatches(this, (WebCore::Element *)v4, v9) & 1) != 0)
          return a2;
      }
      v4 = *(_QWORD *)(v4 + 32);
      if (v4 != a2 && v4 != 0)
        goto LABEL_24;
    }
  }
  return a2;
}

uint64_t WebCore::TextEncoder::encode@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  WTF *v2;
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  uint64_t result;
  void *v8;
  int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  int v38;
  size_t v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  _BYTE v45[1024];

  v4 = *a1;
  if (!*a1)
    goto LABEL_13;
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 4);
  if ((*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if ((_DWORD)v6)
    {
      if (v6 <= 0x2AAAAAAA)
      {
        v42 = (WTF *)v45;
        v43 = 1024;
        v44 = 3 * v6;
        if (v6 >= 0x156)
        {
          v43 = 3 * v6;
          v42 = (WTF *)WTF::fastMalloc((WTF *)(3 * v6));
        }
        result = WTF::StringImpl::utf8ForCharactersIntoBuffer();
        v9 = v40;
        if (v40)
        {
          if (v40 == 1)
          {
            LOBYTE(v37) = v39;
            goto LABEL_80;
          }
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_65;
        }
        v24 = v39;
        if (v39 <= v44)
        {
          v25 = v42;
          JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(v39, (uint64_t *)&v37);
          v26 = (uint64_t)v37;
          if (!v37)
          {
LABEL_79:
            v37 = (WTF *)v26;
LABEL_80:
            v38 = v9;
            v36 = v42;
            if (v45 != (_BYTE *)v42 && v42)
            {
              v42 = 0;
              v43 = 0;
              WTF::fastFree(v36, v8);
            }
            if (v9)
              goto LABEL_84;
            v10 = v37;
LABEL_16:
            if (v10)
              ++*(_DWORD *)v10;
            v11 = 0;
            *a2 = (uint64_t)v10;
            return ((uint64_t (*)(WTF **, WTF **))off_1E33A8730[v11])(&v42, &v37);
          }
          v27 = *((_QWORD *)v37 + 4);
          if (v27)
          {
            v28 = *(_QWORD *)(v27 + 16);
            if (v28)
            {
              v29 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (!v29 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
              {
                v30 = *((_QWORD *)v37 + 3);
                goto LABEL_78;
              }
              if ((v28 & 0x3FFFFFFFFLL) + v29)
              {
                v30 = *((_QWORD *)v37 + 3);
                if (v30 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                  v30 = (v30 & 0x3FFFFFFFFLL) + v29;
                goto LABEL_78;
              }
            }
          }
          v30 = 0;
LABEL_78:
          memcpy((void *)v30, v25, v24);
          v26 = (uint64_t)v37;
          goto LABEL_79;
        }
        goto LABEL_95;
      }
LABEL_12:
      LOBYTE(v37) = 0;
      v38 = 1;
LABEL_84:
      JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(0, a2);
      v11 = 1;
      return ((uint64_t (*)(WTF **, WTF **))off_1E33A8730[v11])(&v42, &v37);
    }
LABEL_13:
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(0, (uint64_t *)&v42);
LABEL_14:
    v10 = v42;
LABEL_15:
    v37 = v10;
    v38 = 0;
    goto LABEL_16;
  }
  if (!(_DWORD)v6)
    goto LABEL_13;
  if (v6 >> 30)
    goto LABEL_12;
  v12 = 0;
  v13 = 16 - (v5 & 0xF);
  if (v6 >= v13)
    v14 = 16 - (v5 & 0xF);
  else
    v14 = v6;
  do
  {
    if (*(char *)(v5 + v12) < 0)
    {
      result = v5 + v12;
      goto LABEL_26;
    }
    ++v12;
  }
  while (v14 != v12);
  if (v13 >= v6 || (result = WTF::find8NonASCIIAlignedImpl()) == 0)
  {
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(v6, (uint64_t *)&v42);
    if (!v42)
    {
      v10 = 0;
      goto LABEL_15;
    }
    v31 = *((_QWORD *)v42 + 4);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 16);
      if (v32)
      {
        v33 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v33 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v34 = *((_QWORD *)v42 + 3);
          goto LABEL_91;
        }
        if ((v32 & 0x3FFFFFFFFLL) + v33)
        {
          v34 = *((_QWORD *)v42 + 3);
          if (v34 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v34 = (v34 & 0x3FFFFFFFFLL) + v33;
          goto LABEL_91;
        }
      }
    }
    v34 = 0;
LABEL_91:
    memcpy((void *)v34, (const void *)v5, v6);
    goto LABEL_14;
  }
LABEL_26:
  v15 = result - v5;
  v16 = v6 - (result - v5);
  v17 = result - v5 + 2 * v16;
  v2 = (WTF *)v45;
  v42 = (WTF *)v45;
  v43 = 1024;
  v44 = result - v5 + 2 * v16;
  if (v17 < 0x401)
  {
    v18 = (WTF *)v45;
  }
  else
  {
    if (HIDWORD(v17))
    {
      __break(0xC471u);
      goto LABEL_95;
    }
    v18 = (WTF *)WTF::fastMalloc((WTF *)(result - v5 + 2 * v16));
    v43 = v17;
    v42 = v18;
  }
  result = (uint64_t)memcpy(v18, (const void *)v5, v15);
  if (v6 >= v15 && v44 >= v15)
  {
    result = WTF::Unicode::convert();
    v5 = v41 + v15;
    if (v41 + v15 <= v44)
    {
      v6 = (unint64_t)v42;
      JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(v41 + v15, (uint64_t *)&v37);
      if (!v37)
      {
        v10 = 0;
        goto LABEL_71;
      }
      v20 = *((_QWORD *)v37 + 4);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 16);
        if (v21)
        {
          v22 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v22 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
          {
            if (!((v21 & 0x3FFFFFFFFLL) + v22))
              goto LABEL_65;
            v23 = *((_QWORD *)v37 + 3);
            if (v23 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v23 = (v23 & 0x3FFFFFFFFLL) + v22;
          }
          else
          {
            v23 = *((_QWORD *)v37 + 3);
          }
LABEL_70:
          memcpy((void *)v23, (const void *)v6, v5);
          v10 = v37;
LABEL_71:
          v37 = v10;
          v38 = 0;
          v35 = v42;
          if (v2 != v42 && v42)
          {
            v42 = 0;
            v43 = 0;
            WTF::fastFree(v35, v19);
          }
          goto LABEL_16;
        }
      }
LABEL_65:
      v23 = 0;
      goto LABEL_70;
    }
  }
LABEL_95:
  __break(1u);
  return result;
}

uint64_t WebCore::TextEncoder::encodeInto(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t result;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  BOOL v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;

  v3 = *a3;
  v4 = *(_QWORD *)(*a3 + 32);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v6 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v5 = *(_QWORD *)(v3 + 24);
    goto LABEL_15;
  }
  v7 = v5 & 0x3FFFFFFFFLL;
  if ((v5 & 0x3FFFFFFFFLL) + v6)
  {
    v5 = *(_QWORD *)(v3 + 24);
    if (v5)
    {
      if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        goto LABEL_15;
      v5 = (v5 & 0x3FFFFFFFFLL) + v6;
    }
  }
  else
  {
    v5 = 0;
  }
  v8 = -v6;
  if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
  {
    if (v7 == v8)
      goto LABEL_11;
  }
  else
  {
    if (*MEMORY[0x1E0CC10F0])
      v38 = 0;
    else
      v38 = v7 == v8;
    if (v38)
      goto LABEL_11;
  }
LABEL_15:
  v10 = *(_BYTE *)(v3 + 6);
  if ((v10 & 3) == 0)
  {
    v9 = *(_QWORD *)(v3 + 16);
    goto LABEL_17;
  }
  if (*(_BYTE *)(v4 + 64) && (v39 = *(_QWORD *)(v4 + 32)) != 0)
  {
    v32 = atomic_load((unint64_t *)(v39 + 32));
    v10 = *(_BYTE *)(v3 + 6);
  }
  else
  {
    v32 = *(_QWORD *)(v4 + 48);
  }
  v33 = *(_QWORD *)(v3 + 8);
  if ((v10 & 4) != 0)
  {
    v27 = v32 >= v33;
    v35 = v32 - v33;
    if (!v27)
    {
      v36 = *(_BYTE *)(v3 + 4) - 4;
      if (v36 > 7u)
        LOBYTE(v37) = 0;
      else
        v37 = qword_1969F0820[(char)v36];
      v9 = (-1 << v37) & v35;
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(v3 + 16);
  if (v9 + v33 <= v32 && v32 >= v33)
    v9 = 0;
LABEL_17:
  v11 = *a2;
  if (*a2)
  {
    v12 = *(char **)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  v14 = v13 & 0x100000000;
  v38 = (v13 & 0x100000000) == 0;
  v15 = &v12[v13];
  v16 = &v12[2 * v13];
  if (!v38)
    v16 = v15;
  if (v12 == v16)
    return 0;
  v17 = 0;
  result = 0;
  do
  {
    if (v14)
    {
      v19 = *v12;
    }
    else
    {
      v19 = *(unsigned __int16 *)v12;
      if ((v19 & 0xF800) == 0xD800 && v16 - v12 != 2 && (v19 & 0x400) == 0)
      {
        v20 = *((unsigned __int16 *)v12 + 1);
        v21 = v20 & 0xFC00;
        v22 = v20 + (v19 << 10) - 56613888;
        if (v21 == 56320)
          v19 = v22;
      }
    }
    if (v17 >= v9)
      break;
    if (v19 > 0x7F)
    {
      if (v19 > 0x7FF || (v24 = v17 + 1, v17 + 1 >= v9))
      {
        v26 = (v19 & 0xFFFFE000) != 0xE000 && v19 >> 11 > 0x1A;
        v24 = v17 + 2;
        v27 = v26 || v24 >= v9;
        if (v27)
        {
          if ((v19 - 0x10000) >> 20 || v17 + 3 >= v9)
            return result;
          v28 = (_BYTE *)(v5 + v17);
          *v28 = (v19 >> 18) | 0xF0;
          v28[1] = (v19 >> 12) & 0x3F | 0x80;
          *(_BYTE *)(v5 + v24) = (v19 >> 6) & 0x3F | 0x80;
          v25 = v19 & 0x3F | 0x80;
          v23 = 4;
          v24 = v17 + 3;
        }
        else
        {
          v29 = (_BYTE *)(v5 + v17);
          *v29 = (v19 >> 12) | 0xE0;
          v29[1] = (v19 >> 6) & 0x3F | 0x80;
          v25 = v19 & 0x3F | 0x80;
          v23 = 3;
        }
      }
      else
      {
        *(_BYTE *)(v5 + v17) = (v19 >> 6) | 0xC0;
        v25 = v19 & 0x3F | 0x80;
        v23 = 2;
      }
    }
    else
    {
      v23 = 1;
      v24 = v17;
      v25 = v19;
    }
    *(_BYTE *)(v5 + v24) = v25;
    v30 = v19 < 0x10000 ? 1 : 2;
    if (v14)
    {
      ++v12;
    }
    else
    {
      if ((*(_WORD *)v12 & 0xFC00) != 0xD800 || v16 - v12 == 2)
        v31 = 1;
      else
        v31 = (*((_WORD *)v12 + 1) & 0xFC00) == 0xDC00 ? 2 : 1;
      v12 += 2 * v31;
    }
    v17 += v23;
    result += v30;
  }
  while (v12 != v16);
  return result;
}

uint64_t WebCore::TextEncoderStreamEncoder::encode@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || (v5 = *(unsigned int *)(v4 + 4), !(_DWORD)v5))
  {
    *a3 = 0;
    return this;
  }
  v6 = this;
  v7 = *(_DWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    v9 = 0;
  }
  else
  {
    if ((v5 + 1) >= 0x55555556)
    {
      __break(0xC471u);
LABEL_64:
      __break(1u);
      return this;
    }
    this = WTF::fastMalloc((WTF *)(3 * (v5 + 1)));
    v9 = (_BYTE *)this;
  }
  v10 = 0;
  v11 = 0;
  if (v5 <= 1)
    v12 = 1;
  else
    v12 = v5;
  do
  {
    if ((v7 & 4) != 0)
    {
      if (v10 >= v5)
        goto LABEL_64;
      v13 = *(unsigned __int8 *)(v8 + v10);
    }
    else
    {
      if (v10 >= v5)
        goto LABEL_64;
      v13 = *(unsigned __int16 *)(v8 + 2 * v10);
    }
    if (!*(_BYTE *)(v6 + 6))
      goto LABEL_22;
    v14 = *(_DWORD *)(v6 + 4);
    if ((v14 & 0xFF0000) == 0)
      goto LABEL_64;
    *(_BYTE *)(v6 + 6) = 0;
    this = (unsigned __int16)v13 & 0xFC00;
    if ((_DWORD)this != 56320)
    {
      v16 = &v9[v11];
      *(_WORD *)v16 = -16401;
      v16[2] = -67;
      v11 += 3;
LABEL_22:
      if ((v13 & 0xFC00) == 0xDC00)
      {
        v17 = &v9[v11];
        *(_WORD *)v17 = -16401;
        v17[2] = -67;
        v11 += 3;
        goto LABEL_41;
      }
      if ((v13 & 0xFC00) == 0xD800)
      {
        *(_WORD *)(v6 + 4) = v13;
        *(_BYTE *)(v6 + 6) = 1;
        goto LABEL_41;
      }
      if (v13 > 0x7F)
      {
        v18 = v11 + 1;
        if (v13 > 0x7FF)
        {
          v19 = (v13 >> 12) | 0xE0;
          a2 = (const WTF::String *)((v13 >> 6) & 0x3F | 0x80);
          v9[v18] = (v13 >> 6) & 0x3F | 0x80;
          v18 = v11 + 2;
        }
        else
        {
          LOBYTE(v19) = (v13 >> 6) | 0xC0;
        }
        v9[v11] = v19;
        this = v13 & 0x3F | 0x80;
        v11 = v18;
      }
      else
      {
        this = v13;
      }
      v9[v11] = this;
LABEL_37:
      ++v11;
      goto LABEL_41;
    }
    this = v13 - 56613888;
    v15 = this + ((unsigned __int16)v14 << 10);
    if (v15 <= 0x7F)
    {
      v9[v11] = v13;
      goto LABEL_37;
    }
    if (v15 > 0x7FF)
    {
      v20 = v11 + 1;
      if (HIWORD(v15))
      {
        v21 = (v15 >> 18) | 0xFFFFFFF0;
        v9[v20] = (v15 >> 12) & 0x3F | 0x80;
        v20 = v11 + 2;
      }
      else
      {
        v21 = (v15 >> 12) | 0xFFFFFFE0;
      }
      v9[v11] = v21;
      a2 = (const WTF::String *)((v15 >> 6) & 0x3F | 0xFFFFFF80);
      v11 = v20;
    }
    else
    {
      a2 = (const WTF::String *)((v15 >> 6) | 0xFFFFFFC0);
    }
    v22 = &v9[v11];
    *v22 = (_BYTE)a2;
    this = v13 & 0x3F | 0x80;
    v11 += 2;
    v22[1] = v13 & 0x3F | 0x80;
LABEL_41:
    ++v10;
  }
  while (v12 != v10);
  if (v11)
  {
    this = JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(v11, &v28);
    v23 = v28;
    if (v28)
    {
      v24 = *(_QWORD *)(v28 + 32);
      if (!v24)
        goto LABEL_54;
      v25 = *(_QWORD *)(v24 + 16);
      if (!v25)
        goto LABEL_54;
      v26 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (!v26 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
      {
        v27 = *(_QWORD *)(v28 + 24);
        goto LABEL_57;
      }
      if (!((v25 & 0x3FFFFFFFFLL) + v26))
      {
LABEL_54:
        v27 = 0;
        goto LABEL_57;
      }
      v27 = *(_QWORD *)(v28 + 24);
      if (v27 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
        v27 = (v27 & 0x3FFFFFFFFLL) + v26;
LABEL_57:
      this = (uint64_t)memcpy((void *)v27, v9, v11);
      v23 = v28;
    }
    *a3 = v23;
    if (v9)
      return WTF::fastFree((WTF *)v9, a2);
  }
  else
  {
    *a3 = 0;
    if (v9)
      return WTF::fastFree((WTF *)v9, a2);
  }
  return this;
}

uint64_t WebCore::TextEvent::create@<X0>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, int a3@<W2>, WebCore **a4@<X8>)
{
  WebCore *v8;
  WebCore *v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;

  v8 = (WebCore *)bmalloc::api::isoAllocate();
  v9 = v8;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(WebCore **)(v10 + 96)) == 0)
  {
    v8 = (WebCore *)WebCore::threadGlobalDataSlow(v8);
    v11 = v8;
  }
  v12 = *((_QWORD *)v11 + 5);
  if (!v12)
  {
    v8 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *((_QWORD *)v11 + 5);
  }
  result = WTF::MonotonicTime::now(v8);
  *((_QWORD *)v9 + 1) = 0;
  v15 = *((_DWORD *)v9 + 5) & 0xFFC00000 | 0x2E820E | (*(_QWORD *)(v12 + 2032) != 0);
  *((_DWORD *)v9 + 4) = 1;
  *((_DWORD *)v9 + 5) = v15;
  v16 = *(_DWORD **)(v12 + 2032);
  if (v16)
    *v16 += 2;
  *((_QWORD *)v9 + 3) = v16;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = v14;
  *((_QWORD *)v9 + 8) = 0;
  v17 = *a1;
  *a1 = 0;
  *((_QWORD *)v9 + 9) = v17;
  *(_QWORD *)v9 = off_1E33A8558;
  *((_DWORD *)v9 + 20) = 0;
  *((_DWORD *)v9 + 21) = a3;
  v18 = *a2;
  if (*a2)
    *v18 += 2;
  *((_QWORD *)v9 + 14) = 0;
  *((_QWORD *)v9 + 15) = 0;
  *((_QWORD *)v9 + 11) = v18;
  *((_QWORD *)v9 + 12) = 0;
  *(_DWORD *)((char *)v9 + 103) = 0;
  *a4 = v9;
  return result;
}

uint64_t WebCore::TextEvent::createForPlainTextPaste@<X0>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, char a3@<W2>, WebCore **a4@<X8>)
{
  WebCore *v8;
  WebCore *v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;

  v8 = (WebCore *)bmalloc::api::isoAllocate();
  v9 = v8;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(WebCore **)(v10 + 96)) == 0)
  {
    v8 = (WebCore *)WebCore::threadGlobalDataSlow(v8);
    v11 = v8;
  }
  v12 = *((_QWORD *)v11 + 5);
  if (!v12)
  {
    v8 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *((_QWORD *)v11 + 5);
  }
  result = WTF::MonotonicTime::now(v8);
  *((_QWORD *)v9 + 1) = 0;
  v15 = *((_DWORD *)v9 + 5) & 0xFFC00000 | 0x2E820E | (*(_QWORD *)(v12 + 2032) != 0);
  *((_DWORD *)v9 + 4) = 1;
  *((_DWORD *)v9 + 5) = v15;
  v16 = *(_DWORD **)(v12 + 2032);
  if (v16)
    *v16 += 2;
  *((_QWORD *)v9 + 3) = v16;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = v14;
  *((_QWORD *)v9 + 8) = 0;
  v17 = *a1;
  *a1 = 0;
  *((_QWORD *)v9 + 9) = v17;
  *(_QWORD *)v9 = off_1E33A8558;
  *((_QWORD *)v9 + 10) = 0x500000000;
  v18 = *a2;
  if (*a2)
    *v18 += 2;
  *((_QWORD *)v9 + 11) = v18;
  *((_QWORD *)v9 + 12) = 0;
  *((_BYTE *)v9 + 104) = a3;
  *(_WORD *)((char *)v9 + 105) = 0;
  *((_QWORD *)v9 + 14) = 0;
  *((_QWORD *)v9 + 15) = 0;
  *a4 = v9;
  return result;
}

uint64_t WebCore::TextEvent::createForFragmentPaste@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, WebCore **a7@<X8>)
{
  WebCore *v14;
  WebCore *v15;
  uint64_t v16;
  WebCore *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;

  v14 = (WebCore *)bmalloc::api::isoAllocate();
  v15 = v14;
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16 || (v17 = *(WebCore **)(v16 + 96)) == 0)
  {
    v14 = (WebCore *)WebCore::threadGlobalDataSlow(v14);
    v17 = v14;
  }
  v18 = *((_QWORD *)v17 + 5);
  if (!v18)
  {
    v14 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
    v18 = *((_QWORD *)v17 + 5);
  }
  result = WTF::MonotonicTime::now(v14);
  *((_QWORD *)v15 + 1) = 0;
  v21 = *((_DWORD *)v15 + 5) & 0xFFC00000 | 0x2E820E | (*(_QWORD *)(v18 + 2032) != 0);
  *((_DWORD *)v15 + 4) = 1;
  *((_DWORD *)v15 + 5) = v21;
  v22 = *(_DWORD **)(v18 + 2032);
  if (v22)
    *v22 += 2;
  *((_QWORD *)v15 + 3) = v22;
  *((_QWORD *)v15 + 4) = 0;
  *((_QWORD *)v15 + 5) = 0;
  *((_QWORD *)v15 + 6) = 0;
  *((_QWORD *)v15 + 7) = v20;
  *((_QWORD *)v15 + 8) = 0;
  v23 = *a1;
  *a1 = 0;
  *((_QWORD *)v15 + 9) = v23;
  *(_QWORD *)v15 = off_1E33A8558;
  *((_DWORD *)v15 + 20) = 0;
  *((_DWORD *)v15 + 21) = a3;
  v24 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v24 += 2;
  *((_QWORD *)v15 + 11) = v24;
  v25 = *a2;
  *a2 = 0;
  *((_QWORD *)v15 + 12) = v25;
  *((_BYTE *)v15 + 104) = a4;
  *((_BYTE *)v15 + 105) = a5;
  *((_BYTE *)v15 + 106) = a6;
  *((_QWORD *)v15 + 14) = 0;
  *((_QWORD *)v15 + 15) = 0;
  *a7 = v15;
  return result;
}

uint64_t WebCore::TextEvent::createForDrop@<X0>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, WebCore **a3@<X8>)
{
  WebCore *v6;
  WebCore *v7;
  uint64_t v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;

  v6 = (WebCore *)bmalloc::api::isoAllocate();
  v7 = v6;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(WebCore **)(v8 + 96)) == 0)
  {
    v6 = (WebCore *)WebCore::threadGlobalDataSlow(v6);
    v9 = v6;
  }
  v10 = *((_QWORD *)v9 + 5);
  if (!v10)
  {
    v6 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *((_QWORD *)v9 + 5);
  }
  result = WTF::MonotonicTime::now(v6);
  *((_QWORD *)v7 + 1) = 0;
  v13 = *((_DWORD *)v7 + 5) & 0xFFC00000 | 0x2E820E | (*(_QWORD *)(v10 + 2032) != 0);
  *((_DWORD *)v7 + 4) = 1;
  *((_DWORD *)v7 + 5) = v13;
  v14 = *(_DWORD **)(v10 + 2032);
  if (v14)
    *v14 += 2;
  *((_QWORD *)v7 + 3) = v14;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = v12;
  *((_QWORD *)v7 + 8) = 0;
  v15 = *a1;
  *a1 = 0;
  *((_QWORD *)v7 + 9) = v15;
  *(_QWORD *)v7 = off_1E33A8558;
  *((_QWORD *)v7 + 10) = 0x600000000;
  v16 = *a2;
  if (*a2)
    *v16 += 2;
  *((_QWORD *)v7 + 14) = 0;
  *((_QWORD *)v7 + 15) = 0;
  *((_QWORD *)v7 + 11) = v16;
  *((_QWORD *)v7 + 12) = 0;
  *(_DWORD *)((char *)v7 + 103) = 0;
  *a3 = v7;
  return result;
}

uint64_t WebCore::TextEvent::TextEvent(WebCore::EventNames **a1, WebCore::EventNames **a2, WebCore::EventNames **a3, __int128 **a4)
{
  WebCore::EventNames **v7;
  uint64_t v8;
  WebCore::EventNames **v9;
  WebCore::EventNames *v10;
  uint64_t result;
  WebCore::EventNames *v12;
  unsigned int v13;
  WebCore::EventNames *v14;
  WebCore::EventNames *v15;
  WebCore::EventNames *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;

  v7 = a1;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(WebCore::EventNames ***)(v8 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v9 = a1;
  }
  v10 = v9[5];
  if (!v10)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v9);
    v10 = v9[5];
  }
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v7[1] = 0;
  v13 = *((_DWORD *)v7 + 5) & 0xFFC00000 | 0x2E820E | (*((_QWORD *)v10 + 254) != 0);
  *((_DWORD *)v7 + 4) = 1;
  *((_DWORD *)v7 + 5) = v13;
  v14 = (WebCore::EventNames *)*((_QWORD *)v10 + 254);
  if (v14)
    *(_DWORD *)v14 += 2;
  v7[3] = v14;
  v7[4] = 0;
  v7[5] = 0;
  v7[6] = 0;
  v7[7] = v12;
  v7[8] = 0;
  v15 = *a2;
  *a2 = 0;
  v7[9] = v15;
  *v7 = (WebCore::EventNames *)off_1E33A8558;
  v7[10] = (WebCore::EventNames *)0x700000000;
  v16 = *a3;
  if (*a3)
    *(_DWORD *)v16 += 2;
  v7[11] = v16;
  v7[12] = 0;
  *(_DWORD *)((char *)v7 + 103) = 0;
  v17 = *((unsigned int *)a4 + 3);
  v7[14] = 0;
  v7[15] = 0;
  *((_DWORD *)v7 + 31) = v17;
  if (!(_DWORD)v17)
    return (uint64_t)v7;
  if (v17 < 0xAAAAAAB)
  {
    v18 = 24 * v17;
    v19 = WTF::fastMalloc((WTF *)(24 * v17));
    *((_DWORD *)v7 + 30) = (v18 & 0xFFFFFFF8) / 0x18;
    v7[14] = (WebCore::EventNames *)v19;
    v20 = *((unsigned int *)a4 + 3);
    if ((_DWORD)v20)
    {
      v21 = *a4;
      v22 = 24 * v20;
      do
      {
        v23 = *v21;
        *(_QWORD *)(v19 + 16) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v19 = v23;
        v19 += 24;
        v21 = (__int128 *)((char *)v21 + 24);
        v22 -= 24;
      }
      while (v22);
    }
    return (uint64_t)v7;
  }
  __break(0xC471u);
  return result;
}

void WebCore::TextEvent::~TextEvent(WebCore::TextEvent *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
}

{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::UIEvent::~UIEvent(this, (WTF::StringImpl *)a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

WTF *WebCore::TextEvent::initTextEvent(WTF *result, const WTF::AtomString *a2, int a3, int a4, _DWORD **a5, _DWORD **a6)
{
  WTF *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;

  if ((*((_BYTE *)result + 21) & 0x30) == 0)
  {
    v7 = result;
    WebCore::UIEvent::initUIEvent((uint64_t)result, a2, a3, a4, a5, 0);
    *((_DWORD *)v7 + 21) = 0;
    v9 = *a6;
    if (*a6)
      *v9 += 2;
    v10 = (WTF::StringImpl *)*((_QWORD *)v7 + 11);
    *((_QWORD *)v7 + 11) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *((_QWORD *)v7 + 12);
    *((_QWORD *)v7 + 12) = 0;
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v8);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    result = (WTF *)*((_QWORD *)v7 + 14);
    *((_WORD *)v7 + 52) = 0;
    *((_BYTE *)v7 + 106) = 0;
    if (result)
    {
      *((_QWORD *)v7 + 14) = 0;
      *((_DWORD *)v7 + 30) = 0;
      result = (WTF *)WTF::fastFree(result, v8);
    }
    *((_QWORD *)v7 + 14) = 0;
    *((_QWORD *)v7 + 15) = 0;
  }
  return result;
}

uint64_t WebCore::TextEvent::isTextEvent(WebCore::TextEvent *this)
{
  return 1;
}

_xmlDoc **WebCore::TransformSource::TransformSource(_xmlDoc **this, _xmlDoc **a2)
{
  *this = *a2;
  return this;
}

void WebCore::NodeIteratorBase::acceptNodeSlowCase(WebCore::NodeIteratorBase *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  WebCore::ToggleEvent *v6;
  uint64_t v7;

  if (*((_BYTE *)this + 20))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  if (((*((_DWORD *)this + 4) >> ((*((unsigned __int16 *)a2 + 14) >> 12) - 1)) & 1) == 0)
  {
    *(_WORD *)a3 = 3;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  *((_BYTE *)this + 20) = 1;
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 40))(&v7);
  v5 = HIDWORD(v7);
  if (HIDWORD(v7))
  {
    if (HIDWORD(v7) != 1 || (_DWORD)v7 != 1)
    {
      v6 = (WebCore::ToggleEvent *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::ToggleEvent::~ToggleEvent(v6);
      return;
    }
    *(_BYTE *)a3 = 37;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_WORD *)a3 = v7;
  }
  *(_DWORD *)(a3 + 16) = v5;
  *((_BYTE *)this + 20) = 0;
}

void WebCore::ToggleEvent::~ToggleEvent(WebCore::ToggleEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebCore::ToggleEvent::isToggleEvent(WebCore::ToggleEvent *this)
{
  return 1;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_12Uint8AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

unsigned int *WebCore::TreeScope::getElementById@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t *a3@<X8>)
{
  const WebCore::TreeScope *v3;

  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v3 = (const WebCore::TreeScope *)this;
      this = (unsigned int *)*((_QWORD *)this + 3);
      if (this)
        return WebCore::TreeScopeOrderedMap::getElementById(this, a2, v3, a3);
    }
  }
  *a3 = 0;
  return this;
}

unsigned int *WebCore::TreeScope::getElementById@<X0>(WebCore::TreeScope *this@<X0>, WTF::AtomStringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *result;
  WTF::AtomStringImpl *v6;
  WTF::StringImpl *v7;
  WTF::AtomStringImpl *v8;
  WTF::AtomStringImpl *v9;

  result = (unsigned int *)*((_QWORD *)this + 3);
  if (!result)
    goto LABEL_6;
  v6 = *a2;
  if (!*a2)
    goto LABEL_6;
  if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
  {
    result = (unsigned int *)WTF::AtomStringImpl::lookUpSlowCase(*a2, (WTF::StringImpl *)a2);
    v6 = v9;
    v8 = v9;
    if (v9)
    {
      result = (unsigned int *)*((_QWORD *)this + 3);
      goto LABEL_8;
    }
LABEL_6:
    *a3 = 0;
    return result;
  }
  *(_DWORD *)v6 += 2;
  v8 = v6;
LABEL_8:
  result = WebCore::TreeScopeOrderedMap::getElementById(result, (const WTF::AtomString *)&v8, this, a3);
  if (*(_DWORD *)v6 == 2)
    return (unsigned int *)WTF::StringImpl::destroy(v6, v7);
  *(_DWORD *)v6 -= 2;
  return result;
}

uint64_t WebCore::TreeScope::getElementById@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  unsigned int **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (*(_QWORD *)(result + 24)
    && ((v4 = (unsigned int **)result, (a2 & 0xFF00000000) == 0)
      ? (result = WTF::AtomStringImpl::lookUp())
      : (result = WTF::AtomStringImpl::lookUp()),
        v5 = v8,
        (v7 = v8) != 0))
  {
    result = (uint64_t)WebCore::TreeScopeOrderedMap::getElementById(v4[3], (const WTF::AtomString *)&v7, (const WebCore::TreeScope *)v4, a3);
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v6);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t *WebCore::TreeScope::getAllElementsById(WebCore::TreeScopeOrderedMap **this, const WTF::AtomString *a2)
{
  WebCore::TreeScopeOrderedMap *v4;

  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4) && (v4 = this[3]) != 0)
    return WebCore::TreeScopeOrderedMap::getAllElementsById(v4, a2, (const WebCore::TreeScope *)this);
  else
    return 0;
}

uint64_t *WebCore::TreeScopeOrderedMap::getAllElementsById(WebCore::TreeScopeOrderedMap *this, const WTF::AtomString *a2, const WebCore::TreeScope *a3)
{
  uint64_t v3;
  int v6;
  int i;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v34;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v6 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v6 + v8)
  {
    v8 = i & *(_DWORD *)(v3 - 8);
    v9 = (uint64_t *)(v3 + 40 * v8);
    v10 = *v9;
    if (!*v9)
      break;
    if (v10 != -1 && v10 == *(_QWORD *)a2)
    {
      v12 = *(_DWORD *)(v3 - 4);
      goto LABEL_10;
    }
    ++v6;
  }
  v12 = *(_DWORD *)(v3 - 4);
  v9 = (uint64_t *)(v3 + 40 * v12);
LABEL_10:
  if (v9 == (uint64_t *)(v3 + 40 * v12))
    return 0;
  v13 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v13)
    goto LABEL_68;
  v14 = v9 + 3;
  if (!*((_DWORD *)v9 + 9))
  {
    WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(v9 + 3), v13);
    v16 = *(_QWORD *)a3;
    v17 = *(_DWORD *)(v16 + 24);
    *(_DWORD *)(v16 + 24) = v17 + 2;
    if (v17)
    {
      *(_DWORD *)(v16 + 24) = v17;
    }
    else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
    }
    v18 = v9[1];
    if (!v18 || (v19 = *(_QWORD *)(v18 + 8)) == 0)
    {
      v19 = *(_QWORD *)(v16 + 80);
      if (!v19)
        goto LABEL_63;
      while ((*(_WORD *)(v19 + 28) & 8) == 0)
      {
        v19 = *(_QWORD *)(v19 + 56);
        if (!v19)
          goto LABEL_63;
      }
    }
    v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    do
    {
LABEL_18:
      v21 = *(_QWORD *)(v19 + 104);
      if (v21)
      {
        v22 = v20;
        if (*(_QWORD *)(v21 + 24))
        {
          v26 = *(unsigned int *)(v21 + 4);
          if ((v26 & 1) != 0)
          {
            v27 = *(uint64_t **)(v21 + 40);
            v28 = *(unsigned int *)(v21 + 52);
          }
          else
          {
            v27 = (uint64_t *)(v21 + 32);
            v28 = v26 >> 5;
          }
          if (v28)
          {
            while (1)
            {
              v29 = *v27;
              if (*v27 == WebCore::HTMLNames::idAttr
                || *(_QWORD *)(v29 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                && *(_QWORD *)(v29 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
              {
                break;
              }
              v27 += 2;
              if (!--v28)
                goto LABEL_54;
            }
          }
          else
          {
LABEL_54:
            v27 = 0;
          }
          v22 = v27 + 1;
        }
      }
      else
      {
        v22 = v20;
      }
      if (*v22 == *(_QWORD *)a2)
      {
        if (*((_DWORD *)v9 + 9) == *((_DWORD *)v9 + 8))
        {
          WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)(v9 + 3), v19);
        }
        else
        {
          v34 = *((unsigned int *)v9 + 9);
          v30 = *v14;
          v31 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v19);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
          *(_QWORD *)(v30 + 8 * v34) = v31;
          ++*((_DWORD *)v9 + 9);
        }
      }
      v23 = *(_QWORD *)(v19 + 80);
      if (!v23)
      {
        if (v19 == v16)
          goto LABEL_63;
        while (1)
        {
          v23 = *(_QWORD *)(v19 + 56);
          if (v23)
            break;
          v19 = *(_QWORD *)(v19 + 32);
          if (v19)
            v25 = v19 == v16;
          else
            v25 = 1;
          if (v25)
            goto LABEL_63;
        }
      }
      v19 = v23;
    }
    while ((*(_WORD *)(v23 + 28) & 8) != 0);
    while (v23 != v16)
    {
      while (1)
      {
        v19 = *(_QWORD *)(v23 + 56);
        if (v19)
          break;
        v23 = *(_QWORD *)(v23 + 32);
        if (v23)
          v24 = v23 == v16;
        else
          v24 = 1;
        if (v24)
          goto LABEL_63;
      }
      v23 = *(_QWORD *)(v23 + 56);
      if ((*(_WORD *)(v19 + 28) & 8) != 0)
        goto LABEL_18;
    }
LABEL_63:
    if (*((_DWORD *)v9 + 9) == *((_DWORD *)v9 + 4))
      return v14;
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x195A51930);
  }
  return v14;
}

WTF::StringImpl **WebCore::TreeScope::removeElementById(WebCore::TreeScope *this, const WTF::AtomString *a2, WebCore::Element *a3, int a4)
{
  WTF::StringImpl **result;
  BOOL v8;
  WTF::StringImpl *v9;

  result = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (result)
  {
    WebCore::TreeScopeOrderedMap::remove((WebCore::TreeScopeOrderedMap *)result, a2, a3);
    result = (WTF::StringImpl **)*((_QWORD *)this + 8);
    if (result)
      v8 = a4 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = result[1];
      if (v9)
      {
        if (*((_DWORD *)v9 - 3))
          return WebCore::IdTargetObserverRegistry::notifyObserversInternal(result, a2);
      }
    }
  }
  return result;
}

unsigned int *WebCore::TreeScope::getElementByName@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t *a3@<X8>)
{
  const WebCore::TreeScope *v3;

  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v3 = (const WebCore::TreeScope *)this;
      this = (unsigned int *)*((_QWORD *)this + 4);
      if (this)
        return WebCore::TreeScopeOrderedMap::getElementByName(this, a2, v3, a3);
    }
  }
  *a3 = 0;
  return this;
}

unsigned int *WebCore::TreeScopeOrderedMap::getElementByName@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, const WebCore::TreeScope *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  int v8;
  unsigned int i;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_15;
  v8 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v8 + v10)
  {
    v10 = i & *(_DWORD *)(v5 - 8);
    v11 = (uint64_t *)(v5 + 40 * v10);
    v12 = *v11;
    if (!*v11)
      break;
    if (v12 != -1 && v12 == *(_QWORD *)a2)
    {
      v14 = *(_DWORD *)(v5 - 4);
      goto LABEL_10;
    }
  }
  v14 = *(_DWORD *)(v5 - 4);
  v11 = (uint64_t *)(v5 + 40 * v14);
LABEL_10:
  if (v11 == (uint64_t *)(v5 + 40 * v14))
  {
LABEL_15:
    *a4 = 0;
    return this;
  }
  v15 = v11[1];
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      *(_DWORD *)(v16 + 24) += 2;
      if (*(const WebCore::TreeScope **)(v16 + 40) != a3)
      {
        __break(0xC471u);
        JUMPOUT(0x195A51CDCLL);
      }
      *a4 = v16;
      return this;
    }
  }
  v17 = *(_QWORD *)a3;
  v18 = *(_DWORD *)(*(_QWORD *)a3 + 24);
  *(_DWORD *)(v17 + 24) = v18 + 2;
  v19 = *(_QWORD *)(v17 + 80);
  if (!v19)
  {
    *a4 = 0;
    if (v18)
    {
LABEL_18:
      *(_DWORD *)(v17 + 24) = v18;
      return this;
    }
    goto LABEL_81;
  }
  while ((*(_WORD *)(v19 + 28) & 8) == 0)
  {
    v19 = *(_QWORD *)(v19 + 56);
    if (!v19)
      goto LABEL_22;
  }
  v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_25:
  while (1)
  {
    v21 = *(_DWORD *)(v19 + 24);
    *(_DWORD *)(v19 + 24) = v21 + 2;
    if ((*(_BYTE *)(v19 + 22) & 0x18) != 0)
    {
      v22 = *(_QWORD *)(v19 + 104);
      if (v22)
      {
        v23 = *(unsigned int *)(v22 + 4);
        v24 = v20;
        if ((v23 & 2) != 0)
        {
          if ((v23 & 1) != 0)
          {
            v28 = *(uint64_t **)(v22 + 40);
            v29 = *(unsigned int *)(v22 + 52);
          }
          else
          {
            v28 = (uint64_t *)(v22 + 32);
            v29 = v23 >> 5;
          }
          if (v29)
          {
            while (1)
            {
              v30 = *v28;
              if (*v28 == WebCore::HTMLNames::nameAttr
                || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
              {
                break;
              }
              v28 += 2;
              if (!--v29)
                goto LABEL_64;
            }
          }
          else
          {
LABEL_64:
            v28 = 0;
          }
          v24 = v28 + 1;
        }
      }
      else
      {
        v24 = v20;
      }
      if (*v24 == *(_QWORD *)a2)
        break;
    }
    if (v21)
    {
      *(_DWORD *)(v19 + 24) = v21;
    }
    else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
    }
    v25 = *(_QWORD *)(v19 + 80);
    if (!v25)
    {
      if (v19 == v17)
        goto LABEL_66;
      while (1)
      {
        v25 = *(_QWORD *)(v19 + 56);
        if (v25)
          break;
        v19 = *(_QWORD *)(v19 + 32);
        if (v19)
          v27 = v19 == v17;
        else
          v27 = 1;
        if (v27)
          goto LABEL_66;
      }
    }
    v19 = v25;
    if ((*(_WORD *)(v25 + 28) & 8) == 0)
    {
      while (v25 != v17)
      {
        while (1)
        {
          v19 = *(_QWORD *)(v25 + 56);
          if (v19)
            break;
          v25 = *(_QWORD *)(v25 + 32);
          if (v25)
            v26 = v25 == v17;
          else
            v26 = 1;
          if (v26)
            goto LABEL_66;
        }
        v25 = *(_QWORD *)(v25 + 56);
        if ((*(_WORD *)(v19 + 28) & 8) != 0)
          goto LABEL_25;
      }
LABEL_66:
      v19 = 0;
      goto LABEL_22;
    }
  }
  this = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v19);
  if (this)
  {
    do
      v31 = __ldaxr(this);
    while (__stlxr(v31 + 1, this));
  }
  v32 = v11[1];
  v11[1] = (uint64_t)this;
  if (v32)
  {
    do
    {
      v33 = __ldaxr((unsigned int *)v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v32));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v32);
      v35 = *(unsigned int *)(v32 + 28);
      if ((_DWORD)v35)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v35));
      v36 = *(WTF **)(v32 + 16);
      if (v36)
      {
        *(_QWORD *)(v32 + 16) = 0;
        *(_DWORD *)(v32 + 24) = 0;
        WTF::fastFree(v36, a2);
      }
      this = (unsigned int *)WTF::fastFree((WTF *)v32, a2);
    }
  }
  if (*(const WebCore::TreeScope **)(v19 + 40) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A51CBCLL);
  }
LABEL_22:
  *a4 = v19;
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 24) - 2;
    if (*(_DWORD *)(v17 + 24) != 2)
      goto LABEL_18;
LABEL_81:
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
  }
  return this;
}

WTF *WebCore::TreeScope::retargetToScope@<X0>(WTF *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node **a3@<X8>)
{
  WTF *v3;
  WTF *v4;
  WebCore::Node *v5;
  int v6;
  int v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  _BYTE v20[64];
  WTF *v21;
  uint64_t v22;
  _BYTE v23[64];

  v3 = (WTF *)*((_QWORD *)a2 + 5);
  if (v3 == this || (*((_BYTE *)a2 + 22) & 0x10) == 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    *a3 = a2;
  }
  else
  {
    v4 = this;
    v5 = a2;
    v21 = (WTF *)v23;
    v22 = 8;
    while (1)
    {
      v18 = v3;
      if (!v3)
        break;
      v6 = HIDWORD(v22);
      if (HIDWORD(v22) == (_DWORD)v22)
      {
        WTF::Vector<WebCore::TreeScope *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TreeScope *&>((uint64_t)&v21, (unint64_t)&v18);
      }
      else
      {
        *((_QWORD *)v21 + HIDWORD(v22)) = v3;
        HIDWORD(v22) = v6 + 1;
      }
      v3 = (WTF *)*((_QWORD *)v18 + 2);
    }
    v17 = v4;
    v18 = (WTF *)v20;
    v19 = 8;
    if (v4)
    {
      do
      {
        v7 = HIDWORD(v19);
        if (HIDWORD(v19) == (_DWORD)v19)
        {
          WTF::Vector<WebCore::TreeScope *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TreeScope *&>((uint64_t)&v18, (unint64_t)&v17);
        }
        else
        {
          *((_QWORD *)v18 + HIDWORD(v19)) = v4;
          HIDWORD(v19) = v7 + 1;
        }
        v17 = (WTF *)*((_QWORD *)v17 + 2);
        v4 = v17;
      }
      while (v17);
      v8 = HIDWORD(v19);
      v9 = v18;
    }
    else
    {
      v8 = 0;
      v9 = (WTF *)v20;
    }
    v10 = 0;
    this = v21;
    while (HIDWORD(v22) + v10 && v8 + v10)
    {
      if ((unint64_t)HIDWORD(v22) + v10 - 1 >= HIDWORD(v22))
      {
        __break(0xC471u);
        JUMPOUT(0x195A51F90);
      }
      if (v8 + v10 - 1 >= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x195A51F98);
      }
      v11 = *((_QWORD *)v21 + HIDWORD(v22) + v10 - 1);
      v12 = *((_QWORD *)v9 + v8 + v10-- - 1);
      if (v11 != v12)
      {
        v13 = HIDWORD(v22) + v10;
        goto LABEL_24;
      }
    }
    if (!(HIDWORD(v22) + v10))
      goto LABEL_28;
    v13 = HIDWORD(v22) + v10 - 1;
LABEL_24:
    if (v13 >= HIDWORD(v22) || (v14 = **((_QWORD **)v21 + v13), (*(_WORD *)(v14 + 28) & 0x80) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x195A51F88);
    }
    v15 = *(_QWORD *)(v14 + 200);
    if (v15)
      v5 = *(WebCore::Node **)(v15 + 8);
    else
      v5 = 0;
LABEL_28:
    *((_DWORD *)v5 + 6) += 2;
    *a3 = v5;
    if (v20 != (_BYTE *)v9 && v9)
    {
      v18 = 0;
      LODWORD(v19) = 0;
      WTF::fastFree(v9, a2);
      this = v21;
    }
    if (v23 != (_BYTE *)this && this)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      return (WTF *)WTF::fastFree(this, a2);
    }
  }
  return this;
}

WebCore::Node *WebCore::TreeScope::ancestorNodeInThisScope(WebCore::TreeScope *this, WebCore::Node *a2)
{
  WebCore::TreeScope *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  if (!a2)
    return 0;
  while (1)
  {
    v2 = (WebCore::TreeScope *)*((_QWORD *)a2 + 5);
    if (v2 == this)
      break;
    if ((*((_BYTE *)a2 + 22) & 0x10) == 0)
      return 0;
    v5 = *(_QWORD *)v2;
    if (!v5 || (*(_WORD *)(v5 + 28) & 0x80) == 0)
      return 0;
    v7 = *(_QWORD *)(v5 + 200);
    if (!v7)
      return 0;
    v3 = 0;
    a2 = *(WebCore::Node **)(v7 + 8);
    if (!a2)
      return (WebCore::Node *)v3;
  }
  return a2;
}

WebCore::Element *WebCore::TreeScope::ancestorElementInThisScope(WebCore::TreeScope *this, WebCore::Element *a2)
{
  WebCore::TreeScope *v2;
  uint64_t v3;
  uint64_t v5;

  for (; a2; a2 = *(WebCore::Element **)(v5 + 8))
  {
    v2 = (WebCore::TreeScope *)*((_QWORD *)a2 + 5);
    if (v2 == this)
      break;
    if ((*((_BYTE *)a2 + 22) & 0x10) != 0)
    {
      v3 = *(_QWORD *)v2;
      if (v3 && (*(_WORD *)(v3 + 28) & 0x80) != 0)
      {
        v5 = *(_QWORD *)(v3 + 200);
        if (v5)
          continue;
      }
    }
    return 0;
  }
  return a2;
}

void WebCore::TreeScope::addImageMap(WebCore::TreeScope *a1, WebCore::Element *a2)
{
  WTF::StringImpl *v2;
  WebCore::TreeScopeOrderedMap *v5;
  void *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 14);
  if (v2)
  {
    *(_DWORD *)v2 += 2;
    v9 = v2;
    v5 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)a1 + 5);
    if (!v5)
    {
      v5 = (WebCore::TreeScopeOrderedMap *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v5 = 0;
      v7 = (uint64_t *)*((_QWORD *)a1 + 5);
      *((_QWORD *)a1 + 5) = v5;
      if (v7)
      {
        if (*v7)
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v7, v6);
        WTF::fastFree((WTF *)v7, v6);
        v5 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)a1 + 5);
      }
    }
    WebCore::TreeScopeOrderedMap::add(v5, &v9, (const WebCore::TreeScope **)a2, a1);
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v8);
    else
      *(_DWORD *)v2 -= 2;
  }
}

unsigned int *WebCore::TreeScopeOrderedMap::getElementByMapName@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, const WebCore::TreeScope *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  int v8;
  unsigned int i;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_15;
  v8 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v8 + v10)
  {
    v10 = i & *(_DWORD *)(v5 - 8);
    v11 = (uint64_t *)(v5 + 40 * v10);
    v12 = *v11;
    if (!*v11)
      break;
    if (v12 != -1 && v12 == *(_QWORD *)a2)
    {
      v14 = *(_DWORD *)(v5 - 4);
      goto LABEL_10;
    }
  }
  v14 = *(_DWORD *)(v5 - 4);
  v11 = (uint64_t *)(v5 + 40 * v14);
LABEL_10:
  if (v11 == (uint64_t *)(v5 + 40 * v14))
  {
LABEL_15:
    v16 = 0;
    goto LABEL_26;
  }
  v15 = v11[1];
  if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0)
  {
    v17 = *(_QWORD *)a3;
    v18 = *(_DWORD *)(*(_QWORD *)a3 + 24);
    *(_DWORD *)(v17 + 24) = v18 + 2;
    v16 = *(_QWORD *)(v17 + 80);
    if (v16)
    {
      while (1)
      {
        v19 = *(_WORD *)(v16 + 28);
        if ((v19 & 8) != 0)
          break;
        v16 = *(_QWORD *)(v16 + 56);
        if (!v16)
          goto LABEL_22;
      }
LABEL_28:
      while (1)
      {
        v20 = *(_DWORD *)(v16 + 24);
        *(_DWORD *)(v16 + 24) = v20 + 2;
        if ((*(_BYTE *)(v16 + 22) & 0x18) != 0
          && (v19 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::mapTag + 24)
          && *(_QWORD *)(v16 + 112) == *(_QWORD *)a2)
        {
          break;
        }
        if (v20)
        {
          *(_DWORD *)(v16 + 24) = v20;
        }
        else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        {
          this = (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v16);
        }
        v21 = *(_QWORD *)(v16 + 80);
        if (!v21)
        {
          if (v16 == v17)
            goto LABEL_58;
          while (1)
          {
            v21 = *(_QWORD *)(v16 + 56);
            if (v21)
              break;
            v16 = *(_QWORD *)(v16 + 32);
            if (v16)
              v24 = v16 == v17;
            else
              v24 = 1;
            if (v24)
              goto LABEL_58;
          }
        }
        v19 = *(_WORD *)(v21 + 28);
        v16 = v21;
        if ((v19 & 8) == 0)
        {
          while (v21 != v17)
          {
            if (!*(_QWORD *)(v21 + 56))
            {
              v22 = v21;
              while (1)
              {
                v22 = *(_QWORD *)(v22 + 32);
                if (!v22 || v22 == v17)
                  goto LABEL_58;
                v21 = *(_QWORD *)(v22 + 56);
                if (v21)
                  goto LABEL_46;
              }
            }
            v21 = *(_QWORD *)(v21 + 56);
LABEL_46:
            v19 = *(_WORD *)(v21 + 28);
            if ((v19 & 8) != 0)
            {
              v16 = v21;
              goto LABEL_28;
            }
          }
LABEL_58:
          v16 = 0;
          goto LABEL_22;
        }
      }
      this = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v16);
      if (this)
      {
        do
          v26 = __ldaxr(this);
        while (__stlxr(v26 + 1, this));
      }
      v27 = v11[1];
      v11[1] = (uint64_t)this;
      if (v27)
      {
        do
        {
          v28 = __ldaxr((unsigned int *)v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)v27));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)v27);
          v30 = *(unsigned int *)(v27 + 28);
          if ((_DWORD)v30)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v30));
          v31 = *(WTF **)(v27 + 16);
          if (v31)
          {
            *(_QWORD *)(v27 + 16) = 0;
            *(_DWORD *)(v27 + 24) = 0;
            WTF::fastFree(v31, v25);
          }
          this = (unsigned int *)WTF::fastFree((WTF *)v27, v25);
        }
      }
      if (*(const WebCore::TreeScope **)(v16 + 40) != a3)
      {
        __break(0xC471u);
        JUMPOUT(0x195A523DCLL);
      }
LABEL_22:
      if (!v17)
      {
LABEL_23:
        if (!v16)
          goto LABEL_26;
        goto LABEL_24;
      }
      v18 = *(_DWORD *)(v17 + 24) - 2;
      if (*(_DWORD *)(v17 + 24) != 2)
        goto LABEL_18;
    }
    else if (v18)
    {
LABEL_18:
      *(_DWORD *)(v17 + 24) = v18;
      goto LABEL_23;
    }
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      this = (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v17);
    goto LABEL_23;
  }
  *(_DWORD *)(v16 + 24) += 2;
  if (*(const WebCore::TreeScope **)(v16 + 40) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A521D0);
  }
LABEL_24:
  if ((*(_WORD *)(v16 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195A52288);
  }
LABEL_26:
  *a4 = v16;
  return this;
}

void WebCore::TreeScope::addImageElementByUsemap(WebCore::TreeScope *this, WTF::StringImpl **a2, const WebCore::TreeScope **a3)
{
  WebCore::TreeScopeOrderedMap *v6;
  void *v7;
  uint64_t *v8;

  v6 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)this + 6);
  if (!v6)
  {
    v6 = (WebCore::TreeScopeOrderedMap *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v6 = 0;
    v8 = (uint64_t *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v6;
    if (v8)
    {
      if (*v8)
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v8, v7);
      WTF::fastFree((WTF *)v8, v7);
      v6 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)this + 6);
    }
  }
  WebCore::TreeScopeOrderedMap::add(v6, a2, a3, this);
}

unsigned int *WebCore::TreeScopeOrderedMap::getElementByUsemap@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, const WebCore::TreeScope *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  int v8;
  unsigned int i;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_15;
  v8 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v8 + v10)
  {
    v10 = i & *(_DWORD *)(v5 - 8);
    v11 = (uint64_t *)(v5 + 40 * v10);
    v12 = *v11;
    if (!*v11)
      break;
    if (v12 != -1 && v12 == *(_QWORD *)a2)
    {
      v14 = *(_DWORD *)(v5 - 4);
      goto LABEL_10;
    }
  }
  v14 = *(_DWORD *)(v5 - 4);
  v11 = (uint64_t *)(v5 + 40 * v14);
LABEL_10:
  if (v11 == (uint64_t *)(v5 + 40 * v14))
  {
LABEL_15:
    v16 = 0;
    goto LABEL_26;
  }
  v15 = v11[1];
  if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0)
  {
    v17 = *(_QWORD *)a3;
    v18 = *(_DWORD *)(*(_QWORD *)a3 + 24);
    *(_DWORD *)(v17 + 24) = v18 + 2;
    v16 = *(_QWORD *)(v17 + 80);
    if (v16)
    {
      while (1)
      {
        v19 = *(_WORD *)(v16 + 28);
        if ((v19 & 8) != 0)
          break;
        v16 = *(_QWORD *)(v16 + 56);
        if (!v16)
          goto LABEL_22;
      }
LABEL_28:
      while (1)
      {
        v20 = *(_DWORD *)(v16 + 24);
        *(_DWORD *)(v16 + 24) = v20 + 2;
        if ((v19 & 0x10) != 0
          && (*(_QWORD *)(v16 + 16) & 0x18000000000000) != 0
          && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
          && *(_QWORD *)(v16 + 248) == *(_QWORD *)a2)
        {
          break;
        }
        if (v20)
        {
          *(_DWORD *)(v16 + 24) = v20;
        }
        else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
        }
        v21 = *(_QWORD *)(v16 + 80);
        if (!v21)
        {
          if (v16 == v17)
            goto LABEL_58;
          while (1)
          {
            v21 = *(_QWORD *)(v16 + 56);
            if (v21)
              break;
            v16 = *(_QWORD *)(v16 + 32);
            if (v16)
              v24 = v16 == v17;
            else
              v24 = 1;
            if (v24)
              goto LABEL_58;
          }
        }
        v19 = *(_WORD *)(v21 + 28);
        v16 = v21;
        if ((v19 & 8) == 0)
        {
          while (v21 != v17)
          {
            if (!*(_QWORD *)(v21 + 56))
            {
              v22 = v21;
              while (1)
              {
                v22 = *(_QWORD *)(v22 + 32);
                if (!v22 || v22 == v17)
                  goto LABEL_58;
                v21 = *(_QWORD *)(v22 + 56);
                if (v21)
                  goto LABEL_46;
              }
            }
            v21 = *(_QWORD *)(v21 + 56);
LABEL_46:
            v19 = *(_WORD *)(v21 + 28);
            if ((v19 & 8) != 0)
            {
              v16 = v21;
              goto LABEL_28;
            }
          }
LABEL_58:
          v16 = 0;
          goto LABEL_22;
        }
      }
      this = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v16);
      if (this)
      {
        do
          v25 = __ldaxr(this);
        while (__stlxr(v25 + 1, this));
      }
      v26 = v11[1];
      v11[1] = (uint64_t)this;
      if (v26)
      {
        do
        {
          v27 = __ldaxr((unsigned int *)v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v26));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)v26);
          v29 = *(unsigned int *)(v26 + 28);
          if ((_DWORD)v29)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v29));
          v30 = *(WTF **)(v26 + 16);
          if (v30)
          {
            *(_QWORD *)(v26 + 16) = 0;
            *(_DWORD *)(v26 + 24) = 0;
            WTF::fastFree(v30, a2);
          }
          this = (unsigned int *)WTF::fastFree((WTF *)v26, a2);
        }
      }
      if (*(const WebCore::TreeScope **)(v16 + 40) != a3)
      {
        __break(0xC471u);
        JUMPOUT(0x195A52788);
      }
LABEL_22:
      if (!v17)
      {
LABEL_23:
        if (!v16)
          goto LABEL_26;
        goto LABEL_24;
      }
      v18 = *(_DWORD *)(v17 + 24) - 2;
      if (*(_DWORD *)(v17 + 24) != 2)
        goto LABEL_18;
    }
    else if (v18)
    {
LABEL_18:
      *(_DWORD *)(v17 + 24) = v18;
      goto LABEL_23;
    }
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
    goto LABEL_23;
  }
  *(_DWORD *)(v16 + 24) += 2;
  if (*(const WebCore::TreeScope **)(v16 + 40) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A5257CLL);
  }
LABEL_24:
  if ((*(_WORD *)(v16 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195A52634);
  }
LABEL_26:
  *a4 = v16;
  return this;
}

uint64_t *WebCore::TreeScope::labelElementsForId(WebCore::TreeScope *this, const WTF::AtomString *a2)
{
  uint64_t *v2;
  uint64_t v6;
  int v7;
  unsigned int i;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  BOOL v42;
  WTF::StringImpl **v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  if (!*((_QWORD *)this + 7))
  {
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v35 = 0;
    v37 = (uint64_t *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v35;
    if (v37)
    {
      if (*v37)
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v37, v36);
      WTF::fastFree((WTF *)v37, v36);
    }
    v38 = *(_QWORD *)this;
    v39 = *(_QWORD *)(*(_QWORD *)this + 80);
    if (v39)
    {
      while (1)
      {
        v40 = v39;
        v41 = *(_WORD *)(v39 + 28);
        if ((v41 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v40 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
        {
          break;
        }
        if ((v41 & 4) != 0)
        {
          v39 = *(_QWORD *)(v40 + 80);
          if (v39)
            continue;
        }
        if (v40 == v38)
          goto LABEL_6;
        while (1)
        {
          v39 = *(_QWORD *)(v40 + 56);
          if (v39)
            break;
          v40 = *(_QWORD *)(v40 + 32);
          if (v40)
            v42 = v40 == v38;
          else
            v42 = 1;
          if (v42)
            goto LABEL_6;
        }
      }
      v43 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      while (1)
      {
        v44 = *(_DWORD *)(v40 + 24) + 2;
        *(_DWORD *)(v40 + 24) = v44;
        v45 = *(_QWORD *)(v40 + 104);
        if (v45
          && ((v46 = *(unsigned int *)(v45 + 4), (v46 & 1) != 0)
            ? (v47 = *(_QWORD *)(v45 + 40), v48 = *(unsigned int *)(v45 + 52))
            : (v47 = v45 + 32, v48 = v46 >> 5),
              v48))
        {
          v49 = (WTF::StringImpl **)(v47 + 8);
          while (1)
          {
            v50 = (uint64_t)*(v49 - 1);
            if (v50 == WebCore::HTMLNames::forAttr
              || *(_QWORD *)(v50 + 24) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 24)
              && *(_QWORD *)(v50 + 32) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 32))
            {
              break;
            }
            v49 += 2;
            if (!--v48)
              goto LABEL_103;
          }
        }
        else
        {
LABEL_103:
          v49 = v43;
        }
        if (*v49 && *((_DWORD *)*v49 + 1))
        {
          WebCore::TreeScopeOrderedMap::add(*((WebCore::TreeScopeOrderedMap **)this + 7), v49, (const WebCore::TreeScope **)v40, this);
          v44 = *(_DWORD *)(v40 + 24);
        }
        v51 = v44 - 2;
        if (v51)
        {
          *(_DWORD *)(v40 + 24) = v51;
        }
        else if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v40, v49);
        }
        v52 = *(_QWORD *)(v40 + 80);
        if (!v52)
          break;
LABEL_108:
        while (1)
        {
          v40 = v52;
          v53 = *(_WORD *)(v52 + 28);
          if ((v53 & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v40 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
          {
            break;
          }
          if ((v53 & 4) != 0)
          {
            v52 = *(_QWORD *)(v40 + 80);
            if (v52)
              continue;
          }
          if (v40 == v38)
            goto LABEL_6;
          while (1)
          {
            v52 = *(_QWORD *)(v40 + 56);
            if (v52)
              break;
            v40 = *(_QWORD *)(v40 + 32);
            if (v40)
              v54 = v40 == v38;
            else
              v54 = 1;
            if (v54)
              goto LABEL_6;
          }
        }
      }
      if (v40 != v38)
      {
        do
        {
          v52 = *(_QWORD *)(v40 + 56);
          if (v52)
            goto LABEL_108;
          v40 = *(_QWORD *)(v40 + 32);
          if (v40)
            v55 = v40 == v38;
          else
            v55 = 1;
        }
        while (!v55);
      }
    }
  }
LABEL_6:
  v6 = **((_QWORD **)this + 7);
  if (!v6)
    return 0;
  v7 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v7 + v9)
  {
    v9 = i & *(_DWORD *)(v6 - 8);
    v10 = (uint64_t *)(v6 + 40 * v9);
    v11 = *v10;
    if (!*v10)
      break;
    if (v11 != -1 && v11 == *(_QWORD *)a2)
    {
      v13 = *(_DWORD *)(v6 - 4);
      goto LABEL_15;
    }
  }
  v13 = *(_DWORD *)(v6 - 4);
  v10 = (uint64_t *)(v6 + 40 * v13);
LABEL_15:
  if (v10 == (uint64_t *)(v6 + 40 * v13))
    return 0;
  v14 = *((unsigned int *)v10 + 4);
  if (!(_DWORD)v14)
  {
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x195A52B5CLL);
  }
  v2 = v10 + 3;
  if (!*((_DWORD *)v10 + 9))
  {
    WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 3), v14);
    v16 = *(_QWORD *)this;
    v17 = *(_DWORD *)(v16 + 24);
    *(_DWORD *)(v16 + 24) = v17 + 2;
    if (v17)
    {
      *(_DWORD *)(v16 + 24) = v17;
    }
    else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
    }
    v18 = v10[1];
    if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
    {
      v20 = *(_WORD *)(v19 + 28);
    }
    else
    {
      v19 = *(_QWORD *)(v16 + 80);
      if (!v19)
        goto LABEL_87;
      while (1)
      {
        v20 = *(_WORD *)(v19 + 28);
        if ((v20 & 8) != 0)
          break;
        v19 = *(_QWORD *)(v19 + 56);
        if (!v19)
          goto LABEL_87;
      }
    }
    v21 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    do
    {
LABEL_24:
      if ((v20 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
      {
        v22 = *(_QWORD *)(v19 + 104);
        if (v22
          && ((v23 = *(unsigned int *)(v22 + 4), (v23 & 1) != 0)
            ? (v24 = *(_QWORD *)(v22 + 40), v25 = *(unsigned int *)(v22 + 52))
            : (v24 = v22 + 32, v25 = v23 >> 5),
              v25))
        {
          v26 = (_QWORD *)(v24 + 8);
          while (1)
          {
            v27 = *(v26 - 1);
            if (v27 == WebCore::HTMLNames::forAttr
              || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 24)
              && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 32))
            {
              break;
            }
            v26 += 2;
            if (!--v25)
              goto LABEL_38;
          }
        }
        else
        {
LABEL_38:
          v26 = v21;
        }
        if (*v26 == *(_QWORD *)a2)
        {
          if (*((_DWORD *)v10 + 9) == *((_DWORD *)v10 + 8))
          {
            WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)(v10 + 3), v19);
          }
          else
          {
            v56 = *((unsigned int *)v10 + 9);
            v32 = *v2;
            v33 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v19);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 + 1, v33));
            *(_QWORD *)(v32 + 8 * v56) = v33;
            ++*((_DWORD *)v10 + 9);
          }
        }
      }
      v28 = *(_QWORD *)(v19 + 80);
      if (!v28)
      {
        if (v19 == v16)
          goto LABEL_87;
        while (1)
        {
          v28 = *(_QWORD *)(v19 + 56);
          if (v28)
            break;
          v19 = *(_QWORD *)(v19 + 32);
          if (v19)
            v31 = v19 == v16;
          else
            v31 = 1;
          if (v31)
            goto LABEL_87;
        }
      }
      v20 = *(_WORD *)(v28 + 28);
      v19 = v28;
    }
    while ((v20 & 8) != 0);
    while (v28 != v16)
    {
      if (!*(_QWORD *)(v28 + 56))
      {
        v29 = v28;
        while (1)
        {
          v29 = *(_QWORD *)(v29 + 32);
          if (!v29 || v29 == v16)
            goto LABEL_87;
          v28 = *(_QWORD *)(v29 + 56);
          if (v28)
            goto LABEL_54;
        }
      }
      v28 = *(_QWORD *)(v28 + 56);
LABEL_54:
      v20 = *(_WORD *)(v28 + 28);
      if ((v20 & 8) != 0)
      {
        v19 = v28;
        goto LABEL_24;
      }
    }
LABEL_87:
    if (*((_DWORD *)v10 + 9) != *((_DWORD *)v10 + 4))
      goto LABEL_134;
  }
  return v2;
}

void WebCore::TreeScope::nodeFromPoint(uint64_t a1@<X0>, int32x2_t *a2@<X1>, const WebCore::LayoutPoint *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  char v14;
  _QWORD v15[3];
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v8 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = WebCore::absolutePointIfNotClipped((WebCore *)v8, a2, a3);
  if ((_BYTE)v10)
  {
    v15[0] = v9;
    v15[1] = v9 & 0xFFFFFFC0FFFFFFC0;
    v15[2] = 0x4000000040;
    v16 = (float)(int)v9 * 0.015625;
    v17 = (float)SHIDWORD(v9) * 0.015625;
    v18 = (float)(int)(v9 & 0xFFFFFFC0) * 0.015625;
    v19 = (float)(int)(HIDWORD(v9) & 0xFFFFFFC0) * 0.015625;
    v20 = v18 + 1.0;
    v21 = v19;
    v22 = v18 + 1.0;
    v23 = v19 + 1.0;
    v24 = v18;
    v25 = v19 + 1.0;
    v26 = 256;
    v27 = 0;
    v28 = 0;
    v34 = 0;
    v29 = v9;
    v30 = 0;
    v33 = 0;
    v31 = 0;
    v32 = 0;
    v13 = 259;
    v14 = a4;
    WebCore::Document::hitTest(v8, &v13, (WebCore::HitTestingTransformState *)v15, (uint64_t)v15);
    if (a3)
      *(_QWORD *)a3 = v30;
    v12 = v27;
    if (v27)
      *(_DWORD *)(v27 + 24) += 2;
    *a5 = v12;
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v15, v11);
  }
  else
  {
    *a5 = 0;
  }
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
}

unint64_t WebCore::absolutePointIfNotClipped(WebCore *this, int32x2_t *a2, const WebCore::LayoutPoint *a3)
{
  unint64_t v3;
  uint64_t v4;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  double v11;
  int v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  WTF *v36;
  void *v37;
  WebCore::LocalFrameView *v39;
  BOOL v40;
  float v42;
  int v43;
  int v44;
  float v45;
  double v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53[2];

  v3 = *((_QWORD *)this + 66);
  if (!v3)
    goto LABEL_82;
  v3 = *(_QWORD *)(v3 + 8);
  if (!v3)
    goto LABEL_82;
  v4 = *(_QWORD *)(v3 + 288);
  if (!v4)
    goto LABEL_81;
  if (!(~*(_QWORD *)(*(_QWORD *)(v3 + 136) + 664) & 0x20000000000000 | ~(unsigned __int16)*(_DWORD *)(*(_QWORD *)(v3 + 136) + 704) & 0x1000))
  {
    WebCore::Document::updateLayout((uint64_t)this, 0, 0);
    v3 = *((_QWORD *)this + 66);
    if (!v3)
      goto LABEL_82;
    v3 = *(_QWORD *)(v3 + 8);
    if (!v3)
      goto LABEL_82;
    v39 = *(WebCore::LocalFrameView **)(v3 + 288);
    if (v39)
      v40 = *((_QWORD *)this + 243) == 0;
    else
      v40 = 1;
    if (!v40 && *((_BYTE *)this + 3405) == 0)
    {
      v53[0] = WebCore::LocalFrameView::clientToLayoutViewportPoint((uint64_t)v39, vmul_f32(vcvt_f32_s32(*a2), (float32x2_t)vdup_n_s32(0x3C800000u)).f32[0]);
      v53[1] = v42;
      WebCore::LocalFrameView::layoutViewportRect(v39);
      v50 = 0;
      v51 = (float)v43 * 0.015625;
      v52 = (float)v44 * 0.015625;
      if (WebCore::FloatRect::contains((float *)&v50, v53, 0))
      {
        v46 = WebCore::LocalFrameView::layoutViewportToAbsolutePoint((uint64_t)v39, v53[0]) * 64.0;
        if (v46 >= 2147483650.0)
        {
          v47 = 0x7FFFFFFFLL;
        }
        else if (v46 <= -2147483650.0)
        {
          v47 = 0x80000000;
        }
        else
        {
          v47 = (int)v46;
        }
        v48 = v45 * 64.0;
        if (v48 >= 2147483650.0)
        {
          v49 = 0x7FFFFFFF00000000;
        }
        else if (v48 <= -2147483650.0)
        {
          v49 = 0x8000000000000000;
        }
        else
        {
          v49 = (unint64_t)(int)v48 << 32;
        }
        v3 = v49 | v47;
        goto LABEL_65;
      }
    }
LABEL_81:
    LOBYTE(v3) = 0;
LABEL_82:
    v32 = 0;
    return v32 & 0xFFFFFFFFFFFFFF00 | v3;
  }
  v6 = *(float *)(v3 + 592);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = 1.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v10 = (*(_DWORD *)v9)++;
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3 && !*(_BYTE *)(v9 + 1098))
        v8 = *(float *)(v9 + 356);
      if (v10)
      {
        *(_DWORD *)v9 = v10;
      }
      else
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v36, v37);
      }
    }
  }
  v11 = (float)((float)(v6 * v8) * (float)((float)a2->i32[0] * 0.015625)) * 64.0;
  if (v11 > -2147483650.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147483650.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v14 = (float)((float)(v6 * v8) * (float)((float)a2->i32[1] * 0.015625)) * 64.0;
  if (v14 >= 2147483650.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147483650.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
  if (*(_QWORD *)(v4 + 40))
    v16 = WebCore::ScrollView::unobscuredContentRect(v4, 0);
  else
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 + 64) + 832))(v4 + 64, 0, 1);
  if ((int)v16 >= -33554432)
    v17 = (_DWORD)v16 << 6;
  else
    v17 = 0x80000000;
  if ((int)v16 > 0x1FFFFFF)
    v17 = 0x7FFFFFFF;
  if (SHIDWORD(v16) >= -33554432)
    v18 = HIDWORD(v16) << 6;
  else
    v18 = 0x80000000;
  if (SHIDWORD(v16) <= 0x1FFFFFF)
    v19 = v18;
  else
    v19 = 0x7FFFFFFF;
  v20 = v13 + v17;
  if (__OFADD__(v13, v17))
    v20 = (v13 >> 31) + 0x7FFFFFFF;
  v21 = v15 + v19;
  if (__OFADD__(v15, v19))
    v21 = (v15 >> 31) + 0x7FFFFFFF;
  v22 = WebCore::ScrollView::unobscuredContentRect(v4, 0);
  v25 = (_DWORD)v22 << 6;
  if ((int)v22 < -33554432)
    v25 = 0x80000000;
  if ((int)v22 <= 0x1FFFFFF)
    v26 = v25;
  else
    v26 = 0x7FFFFFFF;
  v27 = HIDWORD(v22) << 6;
  if (SHIDWORD(v22) < -33554432)
    v27 = 0x80000000;
  if (SHIDWORD(v22) > 0x1FFFFFF)
    v27 = 0x7FFFFFFF;
  v28 = v24 << 6;
  if (v24 < -33554432)
    v28 = 0x80000000;
  if (v24 > 0x1FFFFFF)
    v28 = 0x7FFFFFFF;
  if (v26 > v20)
    goto LABEL_81;
  LOBYTE(v3) = 0;
  if (v23 >= -33554432)
    v29 = v23 << 6;
  else
    v29 = 0x80000000;
  if (v23 > 0x1FFFFFF)
    v29 = 0x7FFFFFFF;
  v30 = __OFADD__(v26, v29);
  v31 = v26 + v29;
  if (v30)
    v31 = (v26 >> 31) + 0x7FFFFFFF;
  v32 = 0;
  if (v31 > v20 && v27 <= (int)v21)
  {
    v30 = __OFADD__(v27, v28);
    v33 = v27 + v28;
    v34 = (v27 >> 31) + 0x7FFFFFFF;
    if (v30)
      v33 = v34;
    if (v33 > (int)v21)
    {
      v3 = v20 | (unint64_t)(v21 << 32);
LABEL_65:
      v32 = v3 & 0xFFFFFFFFFFFFFF00;
      return v32 & 0xFFFFFFFFFFFFFF00 | v3;
    }
    goto LABEL_81;
  }
  return v32 & 0xFFFFFFFFFFFFFF00 | v3;
}

void WebCore::TreeScope::elementFromPoint(WTF *a1@<X0>, void *a2@<X1>, WebCore::Node **a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  char v5;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  __int32 v14;
  double v15;
  int v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  uint64_t v20;
  WebCore::Node **v21;
  uint64_t v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;

  v5 = (char)a2;
  v10 = *((_QWORD *)a1 + 1);
  v11 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 2;
  if (*(_QWORD *)(v10 + 1944))
    v12 = *(_BYTE *)(v10 + 3405) == 0;
  else
    v12 = 0;
  if (v11)
  {
    *(_DWORD *)(v10 + 24) = v11;
  }
  else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
  }
  if (v12)
  {
    if (a4 * 64.0 > -2147483650.0)
      v13 = (int)(a4 * 64.0);
    else
      v13 = 0x80000000;
    if (a4 * 64.0 < 2147483650.0)
      v14 = v13;
    else
      v14 = 0x7FFFFFFF;
    LODWORD(v28) = v14;
    v15 = a5 * 64.0;
    if (a5 * 64.0 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
    HIDWORD(v28) = v16;
    WebCore::TreeScope::nodeFromPoint((uint64_t)a1, (int32x2_t *)&v28, 0, v5, &v29);
    v17 = v29;
    if (v29)
    {
      WebCore::TreeScope::retargetToScope(a1, v29, &v28);
      v19 = v28;
      v29 = v28;
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v18);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
      while (1)
      {
        if ((*((_WORD *)v19 + 14) & 8) != 0)
          goto LABEL_19;
        v21 = (WebCore::Node **)((char *)v19 + 32);
        v20 = *((_QWORD *)v19 + 4);
        if (v20)
        {
          if ((*(_WORD *)(v20 + 28) & 8) != 0)
          {
            v22 = *(_QWORD *)(v20 + 72) & 0xFFFFFFFFFFFFLL;
            if (v22)
            {
              v25 = *(_QWORD *)(v22 + 88);
              if (v25)
              {
                v26 = *(_QWORD *)(v25 + 224);
                if (v26)
                {
                  v23 = (WebCore::Node *)(*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v26 + 16))(v26, v19);
                  if (v23)
                    goto LABEL_30;
                }
              }
            }
          }
        }
        if ((*((_WORD *)v19 + 14) & 0x80) == 0)
          goto LABEL_29;
        v27 = *((_QWORD *)v19 + 25);
        if (v27)
          break;
        v23 = 0;
LABEL_31:
        v24 = v29;
        v29 = v23;
        if (v24)
        {
          if (*((_DWORD *)v24 + 6) == 2)
          {
            if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v24, v23);
              v23 = v29;
            }
          }
          else
          {
            *((_DWORD *)v24 + 6) -= 2;
          }
        }
        if (!v23)
          goto LABEL_43;
        WebCore::TreeScope::retargetToScope(a1, v23, &v28);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v29, (uint64_t *)&v28);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v28);
        v19 = v29;
      }
      v21 = (WebCore::Node **)(v27 + 8);
LABEL_29:
      v23 = *v21;
      if (!*v21)
        goto LABEL_31;
LABEL_30:
      *((_DWORD *)v23 + 6) += 2;
      goto LABEL_31;
    }
LABEL_43:
    v19 = 0;
LABEL_19:
    *a3 = v19;
  }
  else
  {
    *a3 = 0;
  }
}

void WebCore::TreeScope::elementsFromPoint(WTF *a1@<X0>, void *a2@<X1>, const WebCore::LayoutPoint *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v7;
  char v8;
  double v10;
  unsigned int v11;
  __int32 v12;
  double v13;
  unsigned int v14;
  unint64_t v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  WebCore::Node *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  void *v52;
  char *v53;
  WebCore::Node *v54;
  int32x2_t v55[3];
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v7 = *((_QWORD *)a1 + 1);
  *(_DWORD *)(v7 + 24) += 2;
  if (!*(_QWORD *)(v7 + 1944) || *(_BYTE *)(v7 + 3405))
    goto LABEL_109;
  v8 = (char)a2;
  v10 = a5 * 64.0;
  v11 = v10 > -2147483650.0 ? (int)v10 : 0x80000000;
  v12 = v10 < 2147483650.0 ? v11 : 0x7FFFFFFF;
  v55[0].i32[0] = v12;
  v13 = a6 * 64.0;
  if (a6 * 64.0 >= 2147483650.0)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13 > -2147483650.0 ? (int)v13 : 0x80000000;
  v55[0].i32[1] = v14;
  v15 = WebCore::absolutePointIfNotClipped((WebCore *)v7, v55, a3);
  if (!(_BYTE)a2)
    goto LABEL_109;
  v55[0] = (int32x2_t)v15;
  v55[1] = (int32x2_t)(v15 & 0xFFFFFFC0FFFFFFC0);
  v55[2] = (int32x2_t)0x4000000040;
  v56 = (float)(int)v15 * 0.015625;
  v57 = (float)SHIDWORD(v15) * 0.015625;
  v58 = (float)(int)(v15 & 0xFFFFFFC0) * 0.015625;
  v59 = (float)(int)(HIDWORD(v15) & 0xFFFFFFC0) * 0.015625;
  v60 = v58 + 1.0;
  v61 = v59;
  v62 = v58 + 1.0;
  v63 = v59 + 1.0;
  v64 = v58;
  v65 = v59 + 1.0;
  v66 = 256;
  v67 = 0;
  v68 = 0;
  v74 = 0;
  v69 = v15;
  v70 = 0;
  v73 = 0;
  v71 = 0;
  v72 = 0;
  LODWORD(v54) = 98563;
  BYTE4(v54) = v8;
  WebCore::Document::hitTest(v7, &v54, (WebCore::HitTestingTransformState *)v55, (uint64_t)v55);
  v16 = WebCore::HitTestResult::listBasedTestResult((WebCore::HitTestResult *)v55);
  v18 = v16;
  if (*(_QWORD *)v16)
  {
    v19 = *(unsigned int *)(*(_QWORD *)v16 - 12);
    if ((_DWORD)v19)
    {
      if (v19 >> 29)
        goto LABEL_120;
      v20 = WTF::fastMalloc((WTF *)(8 * v19));
      *(_DWORD *)(a4 + 8) = v19;
      *(_QWORD *)a4 = v20;
    }
  }
  v21 = *((_QWORD *)v18 + 1);
  if (!v21)
  {
    v34 = 0;
    goto LABEL_86;
  }
  v22 = 0;
  do
  {
    WebCore::TreeScope::retargetToScope(a1, *(WebCore::Node **)v21, &v54);
    v23 = v54;
    while (1)
    {
      if (v23)
      {
        v24 = *((unsigned __int16 *)v23 + 14);
        if ((v24 & 8) != 0)
          break;
      }
      v25 = (uint64_t *)((char *)v23 + 32);
      v26 = *((_QWORD *)v23 + 4);
      if (v26)
      {
        if ((*(_WORD *)(v26 + 28) & 8) != 0)
        {
          v27 = *(_QWORD *)(v26 + 72) & 0xFFFFFFFFFFFFLL;
          if (v27)
          {
            v30 = *(_QWORD *)(v27 + 88);
            if (v30)
            {
              v31 = *(_QWORD *)(v30 + 224);
              if (v31)
              {
                v32 = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v31 + 16))(v31, v23);
                v25 = (uint64_t *)((char *)v23 + 32);
                v28 = v32;
                if (v32)
                {
LABEL_28:
                  v29 = 0;
                  *(_DWORD *)(v28 + 24) += 2;
                  goto LABEL_29;
                }
              }
            }
          }
        }
      }
      if ((*((_WORD *)v23 + 14) & 0x80) != 0)
      {
        v33 = *((_QWORD *)v23 + 25);
        if (!v33)
        {
          v28 = 0;
          goto LABEL_44;
        }
        v25 = (uint64_t *)(v33 + 8);
      }
      v28 = *v25;
      if (*v25)
        goto LABEL_28;
LABEL_44:
      v29 = 1;
LABEL_29:
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23, v17);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
      if ((v29 & 1) != 0)
      {
        v34 = v22;
        goto LABEL_69;
      }
      WebCore::TreeScope::retargetToScope(a1, (WebCore::Node *)v28, &v54);
      v23 = v54;
      if (*(_DWORD *)(v28 + 24) == 2)
      {
        if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v28, v17);
      }
      else
      {
        *(_DWORD *)(v28 + 24) -= 2;
      }
    }
    if ((~v24 & 0x408) == 0 && (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v23 + 368))(v23))
    {
      v42 = *((_QWORD *)v23 + 14);
      if (v42)
      {
        v35 = *(WebCore::Node **)(v42 + 8);
        if (v35)
          *((_DWORD *)v35 + 6) += 2;
      }
      else
      {
        v35 = 0;
      }
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23, v17);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    else
    {
      v35 = v23;
    }
    if (v35 == v22)
    {
      v34 = v22;
    }
    else
    {
      if (v35)
        *((_DWORD *)v35 + 6) += 2;
      v54 = v35;
      v36 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v36 == *(_DWORD *)(a4 + 8))
      {
        v37 = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v36 + 1, (unint64_t)&v54);
        v36 = *(unsigned int *)(a4 + 12);
        v38 = *(char **)a4;
        v39 = *(_QWORD *)v37;
        *(_QWORD *)v37 = 0;
        *(_QWORD *)&v38[8 * v36] = v39;
      }
      else
      {
        v40 = *(char **)a4;
        v54 = 0;
        *(_QWORD *)&v40[8 * v36] = v35;
      }
      *(_DWORD *)(a4 + 12) = v36 + 1;
      v41 = v54;
      v54 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 6) == 2)
        {
          if ((*((_WORD *)v41 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v41, v17);
        }
        else
        {
          *((_DWORD *)v41 + 6) -= 2;
        }
      }
      if (v35)
        *((_DWORD *)v35 + 6) += 2;
      v34 = v35;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) != 2)
        {
          *((_DWORD *)v22 + 6) -= 2;
          goto LABEL_65;
        }
        v34 = v35;
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v22, v17);
LABEL_65:
          v34 = v35;
        }
      }
    }
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35, v17);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
LABEL_69:
    v21 = *(_QWORD *)(v21 + 16);
    v22 = v34;
  }
  while (v21);
LABEL_86:
  v43 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if ((*(_WORD *)(v43 + 28) & 0xF000) == 0x9000)
    {
      v44 = *(_QWORD *)(v43 + 1272);
      if (v44)
      {
        v45 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v45)
        {
          v46 = *(unsigned int *)(a4 + 12);
          if (*(_QWORD *)(*(_QWORD *)a4 + 8 * v45 - 8) == v44)
            goto LABEL_105;
        }
        else
        {
          v46 = 0;
        }
        if ((_DWORD)v45 != *(_DWORD *)(a4 + 8))
        {
          v47 = (char *)(*(_QWORD *)a4 + 8 * v46);
          *(_DWORD *)(v44 + 24) += 2;
LABEL_104:
          *(_QWORD *)v47 = v44;
          *(_DWORD *)(a4 + 12) = v45 + 1;
          goto LABEL_105;
        }
        v48 = v46 + (v46 >> 2);
        if (v48 >= 0x10)
          v49 = v48 + 1;
        else
          v49 = 16;
        if (v49 <= v46 + 1)
          v50 = v46 + 1;
        else
          v50 = v49;
        if (!(v50 >> 29))
        {
          v51 = *(char **)a4;
          v52 = (void *)WTF::fastMalloc((WTF *)(8 * v50));
          *(_DWORD *)(a4 + 8) = v50;
          *(_QWORD *)a4 = v52;
          memcpy(v52, v51, 8 * v46);
          if (v51)
          {
            if (*(char **)a4 == v51)
            {
              *(_QWORD *)a4 = 0;
              *(_DWORD *)(a4 + 8) = 0;
            }
            WTF::fastFree((WTF *)v51, v17);
          }
          v45 = *(unsigned int *)(a4 + 12);
          v53 = *(char **)a4;
          *(_DWORD *)(v44 + 24) += 2;
          v47 = &v53[8 * v45];
          goto LABEL_104;
        }
LABEL_120:
        __break(0xC471u);
        JUMPOUT(0x195A53A98);
      }
    }
  }
LABEL_105:
  if (v34)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34, v17);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v55, v17);
LABEL_109:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
}

uint64_t WebCore::TreeScope::findAnchor@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int **v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  __int16 v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  BOOL v23;
  BOOL v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  unsigned __int8 *v30[2];
  unsigned __int8 *v31[2];

  if ((_DWORD)a3)
  {
    v7 = (unsigned int **)result;
    if (!*(_QWORD *)(result + 24)
      || ((a3 & 0xFF00000000) == 0
        ? (result = WTF::AtomStringImpl::lookUp())
        : (result = WTF::AtomStringImpl::lookUp()),
          (v8 = (WTF::StringImpl *)v31[0], (v30[0] = v31[0]) == 0)
       || ((result = (uint64_t)WebCore::TreeScopeOrderedMap::getElementById(v7[3], (const WTF::AtomString *)v30, (const WebCore::TreeScope *)v7, a4), *(_DWORD *)v8 == 2)? (result = WTF::StringImpl::destroy(v8, v9)): (*(_DWORD *)v8 -= 2), !*a4)))
    {
      *a4 = 0;
      v11 = v7;
      v10 = *v7;
      v12 = *((unsigned __int8 *)v11[1] + 3384);
      v10[6] += 2;
      v13 = *((_QWORD *)v10 + 10);
      if (v13)
      {
        while (1)
        {
          v14 = (unsigned int *)v13;
          v15 = *(_WORD *)(v13 + 28);
          if ((v15 & 0x10) != 0
            && *(_QWORD *)(*((_QWORD *)v14 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
          {
            break;
          }
          if ((v15 & 4) != 0)
          {
            v13 = *((_QWORD *)v14 + 10);
            if (v13)
              continue;
          }
          if (v14 == v10)
            goto LABEL_54;
          while (1)
          {
            v13 = *((_QWORD *)v14 + 7);
            if (v13)
              break;
            v14 = (unsigned int *)*((_QWORD *)v14 + 4);
            if (v14)
              v16 = v14 == v10;
            else
              v16 = 1;
            if (v16)
              goto LABEL_54;
          }
        }
        while (1)
        {
          v14[6] += 2;
          v29 = (WebCore::Node *)v14;
          v17 = *WebCore::Element::getNameAttribute((WebCore::Element *)v14);
          if (v12 == 2)
          {
            if (v17)
            {
              v25 = *(unsigned int *)(v17 + 16);
              v26 = *(unsigned __int8 **)(v17 + 8);
              v17 = *(unsigned int *)(v17 + 4);
              v27 = (v25 >> 2) & 1;
            }
            else
            {
              v26 = 0;
              v27 = 1;
            }
            v31[0] = v26;
            v31[1] = (unsigned __int8 *)(v17 | (v27 << 32));
            v30[0] = a2;
            v30[1] = (unsigned __int8 *)a3;
            if ((WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(v31, v30) & 1) != 0)
            {
LABEL_66:
              v28 = v29;
              v29 = 0;
              *a4 = (uint64_t)v28;
              result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v29);
              goto LABEL_55;
            }
          }
          else
          {
            if (v17)
            {
              v18 = *(unsigned int *)(v17 + 16);
              v19 = *(unsigned __int8 **)(v17 + 8);
              v17 = *(unsigned int *)(v17 + 4);
              v20 = (v18 >> 2) & 1;
            }
            else
            {
              v19 = 0;
              v20 = 1;
            }
            if (WTF::operator==(v19, v17 | (v20 << 32), a2, a3))
              goto LABEL_66;
          }
          result = (uint64_t)v29;
          if (*((_DWORD *)v29 + 6) == 2)
          {
            if ((*((_WORD *)v29 + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef(v29);
          }
          else
          {
            *((_DWORD *)v29 + 6) -= 2;
          }
          v21 = *((_QWORD *)v14 + 10);
          if (!v21)
            break;
LABEL_32:
          while (1)
          {
            v14 = (unsigned int *)v21;
            v22 = *(_WORD *)(v21 + 28);
            if ((v22 & 0x10) != 0
              && *(_QWORD *)(*((_QWORD *)v14 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
            {
              break;
            }
            if ((v22 & 4) != 0)
            {
              v21 = *((_QWORD *)v14 + 10);
              if (v21)
                continue;
            }
            if (v14 == v10)
              goto LABEL_54;
            while (1)
            {
              v21 = *((_QWORD *)v14 + 7);
              if (v21)
                break;
              v14 = (unsigned int *)*((_QWORD *)v14 + 4);
              if (v14)
                v23 = v14 == v10;
              else
                v23 = 1;
              if (v23)
                goto LABEL_54;
            }
          }
        }
        if (v14 != v10)
        {
          do
          {
            v21 = *((_QWORD *)v14 + 7);
            if (v21)
              goto LABEL_32;
            v14 = (unsigned int *)*((_QWORD *)v14 + 4);
            if (v14)
              v24 = v14 == v10;
            else
              v24 = 1;
          }
          while (!v24);
        }
      }
LABEL_54:
      *a4 = 0;
LABEL_55:
      if (v10)
      {
        if (v10[6] == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
        else
        {
          v10[6] -= 2;
        }
      }
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebCore::commonTreeScope(WebCore *this, WebCore::Node *a2, WebCore::Node *a3)
{
  uint64_t v3;
  WebCore::Node *v4;
  WebCore *v5;
  unsigned int v6;
  WTF *v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[40];
  WTF *v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;

  v3 = 0;
  if (this)
  {
    v4 = a2;
    if (a2)
    {
      v5 = this;
      v3 = *((_QWORD *)this + 5);
      if (v3 != *((_QWORD *)a2 + 5))
      {
        v6 = 0;
        v30 = (WTF *)v32;
        v31 = 5;
        do
        {
          v7 = (WTF *)*((_QWORD *)v5 + 5);
          v27 = v7;
          if (v6 == (_DWORD)v31)
          {
            v8 = WTF::Vector<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v30, v6 + 1, (unint64_t)&v27);
            v6 = HIDWORD(v31);
            *((_QWORD *)v30 + HIDWORD(v31)) = *(_QWORD *)v8;
          }
          else
          {
            *((_QWORD *)v30 + v6) = v7;
          }
          HIDWORD(v31) = ++v6;
          v9 = **((_QWORD **)v5 + 5);
          if (v9)
            v10 = (*(_WORD *)(v9 + 28) & 0x80) == 0;
          else
            v10 = 1;
          if (v10)
            break;
          v11 = *(_QWORD *)(v9 + 200);
          if (!v11)
            break;
          v5 = *(WebCore **)(v11 + 8);
        }
        while (v5);
        LODWORD(v12) = 0;
        v27 = (WTF *)v29;
        v28 = 5;
        do
        {
          v13 = *((_QWORD *)v4 + 5);
          v33 = v13;
          if ((_DWORD)v12 == (_DWORD)v28)
          {
            v14 = WTF::Vector<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v27, v12 + 1, (unint64_t)&v33);
            LODWORD(v12) = HIDWORD(v28);
            *((_QWORD *)v27 + HIDWORD(v28)) = *(_QWORD *)v14;
          }
          else
          {
            *((_QWORD *)v27 + v12) = v13;
          }
          v12 = (v12 + 1);
          HIDWORD(v28) = v12;
          v15 = **((_QWORD **)v4 + 5);
          if (v15)
            v16 = (*(_WORD *)(v15 + 28) & 0x80) == 0;
          else
            v16 = 1;
          if (v16)
            break;
          v17 = *(_QWORD *)(v15 + 200);
          if (!v17)
            break;
          v4 = *(WebCore::Node **)(v17 + 8);
        }
        while (v4);
        v18 = 0;
        v19 = v30;
        v20 = v27;
        if (HIDWORD(v31) >= (unint64_t)v12)
          v21 = v12;
        else
          v21 = HIDWORD(v31);
        v22 = HIDWORD(v31) - v21;
        v23 = v12 - v21;
        while (HIDWORD(v31) + v18 && v12 + v18)
        {
          v24 = *((_QWORD *)v30 + HIDWORD(v31) + v18 - 1);
          v25 = *((_QWORD *)v27 + v12 + v18-- - 1);
          if (v24 != v25)
          {
            v22 = HIDWORD(v31) + v18 + 1;
            v23 = v12 + v18 + 1;
            break;
          }
        }
        if (v22 == HIDWORD(v31))
        {
          v3 = 0;
        }
        else
        {
          if (v22 >= HIDWORD(v31) || v23 >= v12)
          {
            __break(0xC471u);
            JUMPOUT(0x195A53FB4);
          }
          if (*((_QWORD *)v30 + v22) == *((_QWORD *)v27 + v23))
            v3 = *((_QWORD *)v30 + v22);
          else
            v3 = 0;
        }
        if (v29 != (_BYTE *)v27 && v27)
        {
          v27 = 0;
          LODWORD(v28) = 0;
          WTF::fastFree(v20, a2);
          v19 = v30;
        }
        if (v32 != (_BYTE *)v19 && v19)
        {
          v30 = 0;
          LODWORD(v31) = 0;
          WTF::fastFree(v19, a2);
        }
      }
    }
  }
  return v3;
}

unint64_t WebCore::TreeScope::adoptedStyleSheetWrapper(WebCore::TreeScope *this, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
  {
    v8 = *(_QWORD *)this;
    v3 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)v3 = off_1E3398B38;
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 16) = v9;
    v11 = (_DWORD *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v3;
    if (v11)
    {
      if (v11[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        v3 = *((_QWORD *)this + 10);
      }
      else
      {
        --v11[2];
      }
    }
  }
  ++*(_DWORD *)(v3 + 8);
  v12 = (_DWORD *)v3;
  v4 = JSC::JSObservableArray::create((uint64_t)a2, (uint64_t *)&v12);
  v5 = v12;
  v12 = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return v4;
}

unint64_t JSC::JSObservableArray::create(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t Structure;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t SlowCase;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&JSC::JSObservableArray::s_info + ~((_QWORD)&JSC::JSObservableArray::s_info << 32)) ^ (((unint64_t)&JSC::JSObservableArray::s_info + ~((_QWORD)&JSC::JSObservableArray::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &JSC::JSObservableArray::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &JSC::JSObservableArray::s_info)
          goto LABEL_6;
      }
    }
  }
  Structure = JSC::JSObservableArray::createStructure(*(uint64_t **)(a1 + 56), a1, *(JSC::JSCell **)(a1 + 672));
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&JSC::JSObservableArray::s_info);
LABEL_8:
  v15 = *(_QWORD **)(v4 + 41456);
  v16 = v15[2890];
  if (v16 >= v15[2891])
  {
    v16 = v15[2892];
    if ((v16 & 1) != 0)
    {
      v20 = v13;
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      v13 = v20;
      v16 = SlowCase;
      goto LABEL_10;
    }
    v19 = *(_QWORD *)(v16 + 8) ^ v15[2893];
    v15[2891] = v16 + HIDWORD(v19);
    v15[2892] = v16 + (int)v19;
  }
  v15[2890] = v16 + 32;
LABEL_10:
  *(_DWORD *)v16 = 0;
  v17 = JSC::JSObservableArray::JSObservableArray(v16, v4, v13);
  JSC::JSObservableArray::finishCreation(v17, v4, a2);
  return v16;
}

uint64_t WebCore::TreeScope::svgResourcesMap(WebCore::TreeScope *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF *v6;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x48);
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_QWORD *)(result + 64) = 0;
    v4 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = result;
    if (v4)
    {
      v5 = *(WTF::StringImpl ***)(v4 + 48);
      if (v5)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, (WTF::StringImpl *)*(unsigned int *)(v4 + 56));
      v6 = *(WTF **)(v4 + 24);
      if (v6)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v6, (void *)*(unsigned int *)(v4 + 32));
      if (*(_QWORD *)v4)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*(WTF **)v4, (void *)*(unsigned int *)(v4 + 8));
      WTF::fastFree((WTF *)v4, v3);
      return *((_QWORD *)this + 11);
    }
  }
  return result;
}

WebCore::TreeScope *WebCore::TreeScope::addSVGResource(WebCore::TreeScope *this, unsigned int **a2, WebCore::LegacyRenderSVGResourceContainer *a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::LegacyRenderSVGResourceContainer *v7;

  if (*a2)
  {
    if ((*a2)[1])
    {
      v5 = WebCore::TreeScope::svgResourcesMap(this);
      v7 = a3;
      return (WebCore::TreeScope *)WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::LegacyRenderSVGResourceContainer *>(v5 + 48, a2, &v7, (uint64_t)&v6);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::TreeScope::removeSVGResource(WTF::StringImpl *this, const WTF::AtomString *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl **v14;

  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v3 = WebCore::TreeScope::svgResourcesMap(this);
    this = (WTF::StringImpl *)(v3 + 48);
    v4 = *(_QWORD *)(v3 + 48);
    v5 = *(unsigned int *)(v3 + 56);
    if (v4)
    {
      v6 = v5 - 1;
      v7 = *(_DWORD *)(v3 + 64);
      v8 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      v9 = (v7 ^ (v8 >> 8)) & ((_DWORD)v5 - 1);
      v10 = *(_QWORD *)(v4 + 16 * v9);
      if (v10)
      {
        v11 = v8 >> 8;
        v12 = -1;
        do
        {
          v13 = *(_DWORD *)(v10 + 16);
          if (++v12 > (((_DWORD)v9 + (_DWORD)v5 - ((v7 ^ (v13 >> 8)) & v6)) & v6))
            break;
          if (v10 == *(_QWORD *)a2 && v13 >> 8 == v11)
          {
            v14 = (WTF::StringImpl **)(v4 + 16 * v9);
            goto LABEL_13;
          }
          v9 = ((_DWORD)v9 + 1) & v6;
          v10 = *(_QWORD *)(v4 + 16 * v9);
        }
        while (v10);
      }
      v14 = (WTF::StringImpl **)(v4 + 16 * v5);
    }
    else
    {
      v14 = (WTF::StringImpl **)(16 * v5);
    }
LABEL_13:
    if ((WTF::StringImpl **)(v4 + 16 * v5) != v14)
      return WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this, v14);
  }
  return this;
}

uint64_t WebCore::TreeScope::lookupLegacySVGResoureById(WebCore::TreeScope *this, const WTF::AtomString *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v4 = WebCore::TreeScope::svgResourcesMap(this);
      v5 = *(_QWORD *)(v4 + 48);
      if (v5)
      {
        v6 = *(_DWORD *)(v4 + 56);
        v7 = v6 - 1;
        v8 = *(_DWORD *)(v4 + 64);
        v9 = *(_DWORD *)(*(_QWORD *)a2 + 16);
        v10 = (v8 ^ (v9 >> 8)) & (v6 - 1);
        v11 = *(_QWORD *)(v5 + 16 * v10);
        if (v11)
        {
          v12 = v9 >> 8;
          v13 = -1;
          while (1)
          {
            v14 = *(_DWORD *)(v11 + 16);
            if (++v13 > (((_DWORD)v10 + v6 - ((v8 ^ (v14 >> 8)) & v7)) & v7))
              break;
            if (v11 == *(_QWORD *)a2 && v14 >> 8 == v12)
              return *(_QWORD *)(v5 + 16 * v10 + 8);
            result = 0;
            v10 = ((_DWORD)v10 + 1) & v7;
            v11 = *(_QWORD *)(v5 + 16 * v10);
            if (!v11)
              return result;
          }
        }
      }
    }
  }
  return 0;
}

WebCore::TreeScope *WebCore::TreeScope::addPendingSVGResource(WebCore::TreeScope *this, WTF::StringImpl **a2, WebCore::SVGElement *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  _QWORD v18[3];
  _QWORD v19[3];

  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    v5 = WebCore::TreeScope::svgResourcesMap(this);
    v18[0] = 0;
    v18[1] = 0;
    WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(v5, a2, (WTF::StringImpl *)v18, (uint64_t)v19);
    v7 = v18[0];
    if (v18[0])
    {
      v8 = *(unsigned int *)(v18[0] - 4);
      if ((_DWORD)v8)
      {
        for (i = 0; i != v8; ++i)
        {
          v10 = *(_QWORD *)(v7 + 8 * i);
          if (v10 != -1)
          {
            *(_QWORD *)(v7 + 8 * i) = 0;
            if (v10)
            {
              do
              {
                v11 = __ldaxr((unsigned int *)v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, (unsigned int *)v10));
              if (!v12)
              {
                v15 = v8;
                v16 = i;
                atomic_store(1u, (unsigned int *)v10);
                v17 = (WTF *)v10;
                v13 = *(unsigned int *)(v10 + 28);
                if ((_DWORD)v13)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
                v14 = (WTF *)*((_QWORD *)v17 + 2);
                if (v14)
                {
                  *((_QWORD *)v17 + 2) = 0;
                  *((_DWORD *)v17 + 6) = 0;
                  WTF::fastFree(v14, v6);
                }
                WTF::fastFree(v17, v6);
                v8 = v15;
                i = v16;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v7 - 16), v6);
    }
    this = (WebCore::TreeScope *)WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGElement>(v19[0] + 8, a3, (uint64_t)v18);
    *((_QWORD *)a3 + 2) |= 0x8000000000000000;
  }
  return this;
}

uint64_t WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>@<X0>(uint64_t result@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t i;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;

  v6 = result;
  v9 = *(unsigned int *)(result + 8);
  v8 = *(unsigned int *)(result + 12);
  if (10 * v8 >= (unint64_t)(9 * v9) || *(_BYTE *)(result + 20) && v9 <= 2 * (int)v8)
  {
    if ((_DWORD)v9)
      v45 = 2 * v9;
    else
      v45 = 8;
    result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(result, v45);
    LODWORD(v9) = *(_DWORD *)(v6 + 8);
  }
  v10 = v9 - 1;
  v11 = *(_DWORD *)(v6 + 16);
  v12 = *a2;
  v13 = *((_DWORD *)*a2 + 4);
  v14 = (v11 ^ (v13 >> 8)) & (v9 - 1);
  v15 = *(_QWORD *)v6;
  v16 = (WTF::StringImpl **)(*(_QWORD *)v6 + 24 * v14);
  v17 = *v16;
  if (!*v16)
    goto LABEL_20;
  v18 = v13 >> 8;
  if (v17 == v12 && *((_DWORD *)v17 + 4) >> 8 == v18)
  {
LABEL_16:
    v26 = 0;
    goto LABEL_23;
  }
  v20 = 1;
  while (1)
  {
    v14 = (v14 + 1) & v10;
    v16 = (WTF::StringImpl **)(v15 + 24 * v14);
    v21 = *v16;
    if (!*v16)
      break;
    v22 = *((_DWORD *)v21 + 4);
    v23 = (v14 + v9 - ((v11 ^ (v22 >> 8)) & v10)) & v10;
    if (v20 > v23)
    {
      if (v20 >= 0x80)
        *(_BYTE *)(v6 + 20) = 1;
      *v16 = 0;
      v46 = v21;
      v27 = (uint64_t *)(v15 + 24 * v14);
      v28 = v27[1];
      *++v27 = 0;
      v47 = v28;
      v48 = v27[1];
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v27, a2);
      v30 = *v16;
      *v16 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::AtomString const&,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v16, *a2, a3);
      v31 = (v14 + 1) & v10;
      v32 = *(_QWORD *)v6;
      v33 = (WTF::StringImpl *)(*(_QWORD *)v6 + 24 * v31);
      for (i = *(_QWORD *)v33; *(_QWORD *)v33; i = *(_QWORD *)v33)
      {
        ++v23;
        v35 = (v31 + v9 - ((v11 ^ (*(_DWORD *)(i + 16) >> 8)) & v10)) & v10;
        if (v23 > v35)
        {
          std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>((uint64_t)&v46, v33);
          v32 = *(_QWORD *)v6;
          v23 = v35;
        }
        v31 = (v31 + 1) & v10;
        v33 = (WTF::StringImpl *)(v32 + 24 * v31);
      }
      WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::operator=((uint64_t)v33, (WTF::StringImpl *)&v46);
      v37 = v47;
      if (v47)
      {
        v38 = *(unsigned int *)(v47 - 4);
        if ((_DWORD)v38)
        {
          for (j = 0; j != v38; ++j)
          {
            v40 = *(_QWORD *)(v37 + 8 * j);
            if (v40 != -1)
            {
              *(_QWORD *)(v37 + 8 * j) = 0;
              if (v40)
              {
                do
                {
                  v41 = __ldaxr((unsigned int *)v40);
                  v42 = v41 - 1;
                }
                while (__stlxr(v42, (unsigned int *)v40));
                if (!v42)
                {
                  atomic_store(1u, (unsigned int *)v40);
                  v43 = *(unsigned int *)(v40 + 28);
                  if ((_DWORD)v43)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v40 + 16), (WTF::StringImpl *)(*(_QWORD *)(v40 + 16) + 32 * v43));
                  v44 = *(WTF **)(v40 + 16);
                  if (v44)
                  {
                    *(_QWORD *)(v40 + 16) = 0;
                    *(_DWORD *)(v40 + 24) = 0;
                    WTF::fastFree(v44, v36);
                  }
                  WTF::fastFree((WTF *)v40, v36);
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v37 - 16), v36);
      }
      result = (uint64_t)v46;
      v46 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_22;
    }
    v24 = v22 >> 8;
    ++v20;
    if (v21 == v12 && v24 == v18)
      goto LABEL_16;
  }
  if (v20 >= 0x80)
    *(_BYTE *)(v6 + 20) = 1;
  if (v12)
LABEL_20:
    *(_DWORD *)v12 += 2;
  *v16 = v12;
  result = (uint64_t)WTF::GenericHashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::assignToEmpty<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((_QWORD *)(v15 + 24 * v14 + 8), (uint64_t *)a3);
LABEL_22:
  LODWORD(v9) = *(_DWORD *)(v6 + 8);
  ++*(_DWORD *)(v6 + 12);
  v15 = *(_QWORD *)v6;
  v26 = 1;
LABEL_23:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v15 + 24 * v9;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGElement>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  void *v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_6;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_3;
  v23 = *(unsigned int *)(v8 - 4);
  if (!(_DWORD)v23)
    goto LABEL_23;
  v32 = 0;
  v33 = v23 - 1;
  do
  {
    v34 = (uint64_t *)(v8 + 8 * v33);
    if ((unint64_t)(*v34 + 1) >= 2 && !*(_QWORD *)(*v34 + 8))
    {
      v45 = v33;
      v47 = v8;
      v44 = v32;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v34, a2);
      v33 = v45;
      v8 = v47;
      v32 = v44 + 1;
    }
  }
  while ((unint64_t)v33--);
  v8 = *(_QWORD *)a1;
  if (v32)
  {
    v41 = v32;
    *(_DWORD *)(v8 - 16) += v32;
    v42 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v43 = *(_DWORD *)(v42 - 12);
    else
      v43 = 0;
    *(_DWORD *)(v42 - 12) = v43 - v41;
    v8 = *(_QWORD *)a1;
  }
  if (v8)
  {
    v36 = *(_DWORD *)(v8 - 4);
    if (v36 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v36)
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
      v9 = 0;
      v38 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v38)
        goto LABEL_4;
      v8 = v38;
LABEL_24:
      v9 = *(_DWORD *)(v8 - 12);
      v10 = 0x7FFFFFFF;
      if (v9 >= 0x7FFFFFFF)
        goto LABEL_5;
      goto LABEL_4;
    }
LABEL_23:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_24;
  }
LABEL_3:
  v9 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
  v10 = v9;
LABEL_5:
  *(_DWORD *)(a1 + 12) = 2 * v10;
LABEL_6:
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 8) = a2;
    *(_BYTE *)(v24 + 32) = 0;
    v26 = a2[2];
    a2[2] = v26 & 0xFFFF000000000000 | v24;
    v27 = v26 & 0xFFFFFFFFFFFFLL;
    if ((v26 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v30 = *(unsigned int *)(v27 + 28);
        if ((_DWORD)v30)
        {
          v48 = v27;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v30));
          v27 = v48;
        }
        v31 = *(WTF **)(v27 + 16);
        if (v31)
        {
          *(_QWORD *)(v27 + 16) = 0;
          *(_DWORD *)(v27 + 24) = 0;
          v46 = v27;
          WTF::fastFree(v31, v25);
          v27 = v46;
        }
        WTF::fastFree((WTF *)v27, v25);
      }
    }
  }
  v11 = a2[2] & 0xFFFFFFFFFFFFLL;
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  do
    v13 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v13 + 1, (unsigned int *)v11));
  v49 = (WTF *)v11;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a1, (uint64_t *)&v49, a3);
  v16 = v49;
  v49 = 0;
  if (v16)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v16);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v16));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v16);
      v21 = *((unsigned int *)v16 + 7);
      if ((_DWORD)v21)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v16 + 2), (WTF::StringImpl *)(*((_QWORD *)v16 + 2) + 32 * v21));
      v22 = (WTF *)*((_QWORD *)v16 + 2);
      if (v22)
      {
        *((_QWORD *)v16 + 2) = 0;
        *((_DWORD *)v16 + 6) = 0;
        WTF::fastFree(v22, v15);
      }
      result = WTF::fastFree(v16, v15);
    }
  }
  if (v11)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v11);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v11));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v11);
      v39 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v39)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v39));
      v40 = *(WTF **)(v11 + 16);
      if (v40)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        WTF::fastFree(v40, v15);
      }
      return WTF::fastFree((WTF *)v11, v15);
    }
  }
  return result;
}

uint64_t WebCore::TreeScope::isElementWithPendingSVGResources(WebCore::TreeScope *this, WebCore::SVGElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int j;
  uint64_t v18;
  uint64_t result;

  v3 = WebCore::TreeScope::svgResourcesMap(this);
  if (*(_DWORD *)(v3 + 12))
  {
    v4 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      for (i = *(_QWORD *)v3; !*(_QWORD *)i; i += 24)
      {
        v5 -= 24;
        if (!v5)
          return 0;
      }
    }
    else
    {
      i = *(_QWORD *)v3;
    }
    v7 = *(_QWORD *)v3 + 24 * v4;
    if (i != v7)
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 8))
        {
          v10 = (v9 + ~(v8 << 32)) ^ ((unint64_t)(v9 + ~(v8 << 32)) >> 22);
          v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
          v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
          v13 = (v12 >> 31) ^ v12;
          while (1)
          {
            ++*(_DWORD *)(i + 16);
            v14 = *(_QWORD *)(i + 8);
            if (v14)
            {
              v15 = *(_DWORD *)(v14 - 8);
              v16 = v15 & v13;
              for (j = 1; ; ++j)
              {
                v18 = *(_QWORD *)(v14 + 8 * v16);
                if (!v18)
                  break;
                if (v18 != -1 && v18 == v9)
                  return 1;
                v16 = (v16 + j) & v15;
              }
            }
            i += 24;
            if (i == v7)
              break;
            while (!*(_QWORD *)i)
            {
              result = 0;
              i += 24;
              if (i == v7)
                return result;
            }
            result = 0;
            if (i == v7)
              return result;
          }
        }
        else
        {
          while (1)
          {
            ++*(_DWORD *)(i + 16);
            i += 24;
            if (i == v7)
              break;
            while (!*(_QWORD *)i)
            {
              result = 0;
              i += 24;
              if (i == v7)
                return result;
            }
            result = 0;
            if (i == v7)
              return result;
          }
        }
      }
      else
      {
        while (1)
        {
          ++*(_DWORD *)(i + 16);
          i += 24;
          if (i == v7)
            break;
          while (!*(_QWORD *)i)
          {
            result = 0;
            i += 24;
            if (i == v7)
              return result;
          }
          result = 0;
          if (i == v7)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::TreeScope::isPendingSVGResource(WebCore::TreeScope *this, WebCore::SVGElement *a2, const WTF::AtomString *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
    return 0;
  v6 = WebCore::TreeScope::svgResourcesMap(this);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 8);
  if (*(_QWORD *)v6)
  {
    v9 = v8 - 1;
    v10 = *(_DWORD *)(v6 + 16);
    v11 = *(_DWORD *)(*(_QWORD *)a3 + 16);
    v12 = (v10 ^ (v11 >> 8)) & (v8 - 1);
    v13 = v7 + 24 * v12;
    v14 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
    {
      v15 = v11 >> 8;
      v16 = -1;
      do
      {
        v17 = *(_DWORD *)(v14 + 16);
        if (++v16 > ((v12 + (_DWORD)v8 - ((v10 ^ (v17 >> 8)) & v9)) & v9))
          break;
        if (v14 == *(_QWORD *)a3 && v17 >> 8 == v15)
          goto LABEL_13;
        v12 = (v12 + 1) & v9;
        v13 = v7 + 24 * v12;
        v14 = *(_QWORD *)v13;
      }
      while (*(_QWORD *)v13);
    }
    v13 = v7 + 24 * v8;
  }
  else
  {
    v13 = 24 * v8;
  }
LABEL_13:
  if (v13 != v7 + 24 * v8)
    return WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::SVGElement>((uint64_t *)(v13 + 8), (uint64_t)a2);
  else
    return 0;
}

uint64_t *WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return (uint64_t *)(24 * v3);
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *(_DWORD *)(a2 + 16);
  v7 = (v5 ^ (v6 >> 8)) & (v3 - 1);
  result = (uint64_t *)(v2 + 24 * v7);
  v9 = *result;
  if (*result)
  {
    v10 = v6 >> 8;
    v11 = -1;
    do
    {
      v12 = *(_DWORD *)(v9 + 16);
      if (++v11 > ((v7 + (_DWORD)v3 - ((v5 ^ (v12 >> 8)) & v4)) & v4))
        break;
      if (v9 == a2 && v12 >> 8 == v10)
        return result;
      v7 = (v7 + 1) & v4;
      result = (uint64_t *)(v2 + 24 * v7);
      v9 = *result;
    }
    while (*result);
  }
  return (uint64_t *)(v2 + 24 * v3);
}

uint64_t WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::SVGElement>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;

  ++*((_DWORD *)a1 + 2);
  v2 = *(_QWORD *)(a2 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v4 = *a1;
      if (*a1)
      {
        v5 = *(_DWORD *)(v4 - 8);
        v6 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
        v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
        v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
        v9 = v5 & ((v8 >> 31) ^ v8);
        for (i = 1; ; ++i)
        {
          v11 = *(_QWORD *)(v4 + 8 * v9);
          if (!v11)
            break;
          if (v11 != -1 && v11 == v3)
            return 1;
          v9 = (v9 + i) & v5;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::TreeScope::clearHasPendingSVGResourcesIfPossible(WebCore::TreeScope *this, WebCore::SVGElement *a2)
{
  uint64_t result;

  result = WebCore::TreeScope::isElementWithPendingSVGResources(this, a2);
  if ((result & 1) == 0)
    *((_QWORD *)a2 + 2) &= ~0x8000000000000000;
  return result;
}

uint64_t WebCore::TreeScope::removeElementFromPendingSVGResources(WebCore::TreeScope *this, WebCore::SVGElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  WTF *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  WTF *v34;
  _DWORD *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t j;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;

  if (*(_DWORD *)(WebCore::TreeScope::svgResourcesMap(this) + 12) && (*((_QWORD *)a2 + 2) & 0x8000000000000000) != 0)
  {
    v54 = 0;
    v55 = 0;
    v4 = WebCore::TreeScope::svgResourcesMap(this);
    if (*(_DWORD *)(v4 + 12))
    {
      v5 = *(unsigned int *)(v4 + 8);
      if ((_DWORD)v5)
      {
        v6 = 24 * v5;
        v7 = *(_QWORD **)v4;
        while (!*v7)
        {
          v7 += 3;
          v6 -= 24;
          if (!v6)
            goto LABEL_8;
        }
      }
      else
      {
        v7 = *(_QWORD **)v4;
      }
      v23 = *(_QWORD *)v4 + 24 * v5;
LABEL_40:
      if (v7 != (_QWORD *)v23)
      {
        WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>((uint64_t)(v7 + 1), a2);
        v24 = v7[1];
        if (v24 && *(_DWORD *)(v24 - 12))
        {
          v29 = *(unsigned int *)(v24 - 4);
          if ((_DWORD)v29)
          {
            v30 = 8 * v29;
            v31 = (uint64_t *)v7[1];
            while ((unint64_t)(*v31 + 1) <= 1)
            {
              ++v31;
              v30 -= 8;
              if (!v30)
                goto LABEL_42;
            }
          }
          else
          {
            v31 = (uint64_t *)v7[1];
          }
          v32 = (uint64_t *)(v24 + 8 * v29);
          if (v31 != v32)
          {
            v33 = *v31;
LABEL_58:
            if (*(_QWORD *)(v33 + 8))
              goto LABEL_47;
            while (++v31 != v32)
            {
              v33 = *v31;
              if ((unint64_t)(*v31 + 1) > 1)
              {
                if (v31 == v32)
                  break;
                goto LABEL_58;
              }
            }
          }
        }
LABEL_42:
        v25 = HIDWORD(v55);
        if (HIDWORD(v55) == (_DWORD)v55)
        {
          v26 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, HIDWORD(v55) + 1, (unint64_t)v7);
          v25 = HIDWORD(v55);
          v27 = v54;
          v28 = *v26;
          if (*v26)
            *v28 += 2;
          *((_QWORD *)v27 + v25) = v28;
        }
        else
        {
          v34 = v54;
          v35 = (_DWORD *)*v7;
          if (*v7)
            *v35 += 2;
          *((_QWORD *)v34 + v25) = v35;
        }
        HIDWORD(v55) = v25 + 1;
LABEL_47:
        while (1)
        {
          v7 += 3;
          if (v7 == (_QWORD *)v23)
            break;
          if (*v7)
            goto LABEL_40;
        }
      }
    }
LABEL_8:
    if ((WebCore::TreeScope::isElementWithPendingSVGResources(this, a2) & 1) == 0)
      *((_QWORD *)a2 + 2) &= ~0x8000000000000000;
    v9 = (uint64_t *)v54;
    if (HIDWORD(v55))
    {
      v11 = (uint64_t *)((char *)v54 + 8 * HIDWORD(v55));
      do
      {
        v12 = (uint64_t *)WebCore::TreeScope::svgResourcesMap(this);
        WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::take(v12, v9, &v53);
        v13 = v53;
        if (v53)
        {
          v20 = *(unsigned int *)(v53 - 4);
          if ((_DWORD)v20)
          {
            for (i = 0; i != v20; ++i)
            {
              v14 = *(_QWORD *)(v13 + 8 * i);
              if (v14 != -1)
              {
                *(_QWORD *)(v13 + 8 * i) = 0;
                if (v14)
                {
                  do
                  {
                    v16 = __ldaxr((unsigned int *)v14);
                    v17 = v16 - 1;
                  }
                  while (__stlxr(v17, (unsigned int *)v14));
                  if (!v17)
                  {
                    v50 = v20;
                    v51 = i;
                    v49 = v13;
                    atomic_store(1u, (unsigned int *)v14);
                    v52 = (WTF *)v14;
                    v18 = *(unsigned int *)(v14 + 28);
                    if ((_DWORD)v18)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v18));
                    v19 = (WTF *)*((_QWORD *)v52 + 2);
                    if (v19)
                    {
                      *((_QWORD *)v52 + 2) = 0;
                      *((_DWORD *)v52 + 6) = 0;
                      WTF::fastFree(v19, v8);
                    }
                    WTF::fastFree(v52, v8);
                    v13 = v49;
                    v20 = v50;
                    i = v51;
                  }
                }
              }
            }
          }
          WTF::fastFree((WTF *)(v13 - 16), v8);
        }
        ++v9;
      }
      while (v9 != v11);
      v9 = (uint64_t *)v54;
      if (HIDWORD(v55))
      {
        v21 = 8 * HIDWORD(v55);
        do
        {
          v22 = (WTF::StringImpl *)*v9;
          *v9 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v22 -= 2;
          }
          ++v9;
          v21 -= 8;
        }
        while (v21);
        v9 = (uint64_t *)v54;
      }
    }
    if (v9)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  result = WebCore::TreeScope::svgResourcesMap(this);
  if (*(_DWORD *)(result + 36))
  {
    v54 = 0;
    v55 = 0;
    v36 = WebCore::TreeScope::svgResourcesMap(this);
    if (*(_DWORD *)(v36 + 36))
    {
      v38 = *(unsigned int *)(v36 + 32);
      if ((_DWORD)v38)
      {
        v39 = 24 * v38;
        for (j = *(_QWORD *)(v36 + 24); !*(_QWORD *)j; j += 24)
        {
          v39 -= 24;
          if (!v39)
            return WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v37);
        }
      }
      else
      {
        j = *(_QWORD *)(v36 + 24);
      }
      v41 = *(_QWORD *)(v36 + 24) + 24 * v38;
      if (j != v41)
      {
LABEL_77:
        WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>(j + 8, a2);
        if (WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(j + 8)))
        {
          v42 = HIDWORD(v55);
          if (HIDWORD(v55) == (_DWORD)v55)
          {
            WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString&>((uint64_t)&v54, j);
          }
          else
          {
            v47 = v54;
            v48 = *(_DWORD **)j;
            if (*(_QWORD *)j)
              *v48 += 2;
            *((_QWORD *)v47 + v42) = v48;
            HIDWORD(v55) = v42 + 1;
          }
        }
        while (1)
        {
          j += 24;
          if (j == v41)
            break;
          if (*(_QWORD *)j)
          {
            if (j != v41)
              goto LABEL_77;
            break;
          }
        }
        if (HIDWORD(v55))
        {
          v43 = v54;
          v44 = 8 * HIDWORD(v55);
          do
          {
            v45 = WebCore::TreeScope::svgResourcesMap(this);
            v46 = *(_QWORD *)v43;
            v43 = (WTF *)((char *)v43 + 8);
            WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::remove(v45 + 24, v46);
            v44 -= 8;
          }
          while (v44);
        }
      }
    }
    return WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v37);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v30;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  WTF *v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 > v3)
  {
    v5 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v6 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v7 = v6;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v7;
      goto LABEL_6;
    }
    v25 = *(_DWORD *)(v5 - 4);
    if (!v25)
      goto LABEL_27;
    v26 = 0;
    v27 = v25 - 1;
    do
    {
      v28 = (uint64_t *)(v5 + 8 * v27);
      if ((unint64_t)(*v28 + 1) >= 2 && !*(_QWORD *)(*v28 + 8))
      {
        v43 = a2;
        v41 = v26;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v28, a2);
        a2 = v43;
        v26 = v41 + 1;
      }
    }
    while ((unint64_t)v27--);
    v5 = *(_QWORD *)a1;
    if (v26)
    {
      v38 = v26;
      *(_DWORD *)(v5 - 16) += v26;
      v39 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v40 = *(_DWORD *)(v39 - 12);
      else
        v40 = 0;
      *(_DWORD *)(v39 - 12) = v40 - v38;
      v5 = *(_QWORD *)a1;
    }
    if (!v5)
      goto LABEL_3;
    v30 = *(_DWORD *)(v5 - 4);
    if (v30 < 9 || 6 * *(_DWORD *)(v5 - 12) >= v30)
    {
LABEL_27:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v32 = a2;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v32;
      v6 = 0;
      v5 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v5)
        goto LABEL_4;
    }
    v6 = *(_DWORD *)(v5 - 12);
    v7 = 0x7FFFFFFF;
    if (v6 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v8 = a2[2];
  result = v8 & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v11 = *(_DWORD *)(v10 - 8);
        v12 = (result + ~(v8 << 32)) ^ ((unint64_t)(result + ~(v8 << 32)) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        for (i = 1; ; ++i)
        {
          v17 = *(_QWORD *)(v10 + 8 * v15);
          if (!v17)
            break;
          v18 = v15;
          if (v17 != -1 && v17 == result)
          {
            if (v15 == *(_DWORD *)(v10 - 4))
              return 0;
            *(_QWORD *)(v10 + 8 * v15) = 0;
            do
            {
              v20 = __ldaxr((unsigned int *)result);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, (unsigned int *)result));
            if (!v21)
            {
              atomic_store(1u, (unsigned int *)result);
              v36 = *(unsigned int *)(result + 28);
              if ((_DWORD)v36)
              {
                v44 = result;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v36));
                result = v44;
              }
              v37 = *(WTF **)(result + 16);
              if (v37)
              {
                *(_QWORD *)(result + 16) = 0;
                *(_DWORD *)(result + 24) = 0;
                v42 = result;
                WTF::fastFree(v37, a2);
                result = v42;
              }
              WTF::fastFree((WTF *)result, a2);
            }
            *(_QWORD *)(v10 + 8 * v18) = -1;
            ++*(_DWORD *)(*(_QWORD *)a1 - 16);
            v22 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
              v23 = *(_DWORD *)(v22 - 12) - 1;
            else
              v23 = -1;
            *(_DWORD *)(v22 - 12) = v23;
            v24 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
            {
              v33 = 6 * *(_DWORD *)(v24 - 12);
              v34 = *(_DWORD *)(v24 - 4);
              if (v33 < v34 && v34 >= 9)
                WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v34 >> 1, 0);
            }
            return 1;
          }
          v15 = (v15 + i) & v11;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  if (!*a1 || !*((_DWORD *)v1 - 3))
    return 1;
  v3 = *((unsigned int *)v1 - 1);
  v4 = &v1[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*v1 + 1) <= 1)
    {
      ++v1;
      v5 -= 8;
      if (!v5)
        goto LABEL_10;
    }
  }
  if (v1 != v4)
  {
    v6 = *v1;
LABEL_13:
    if (*(_QWORD *)(v6 + 8))
      return v1 == v4;
    while (++v1 != v4)
    {
      v6 = *v1;
      if ((unint64_t)(*v1 + 1) > 1)
      {
        if (v1 == v4)
          break;
        goto LABEL_13;
      }
    }
  }
LABEL_10:
  v1 = v4;
  return v1 == v4;
}

uint64_t *WebCore::TreeScope::removePendingSVGResource@<X0>(WebCore::TreeScope *this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;

  v5 = (uint64_t *)WebCore::TreeScope::svgResourcesMap(this);
  return WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::take(v5, (uint64_t *)a2, a3);
}

uint64_t *WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  result = WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::find((uint64_t *)a1, a2);
  if ((uint64_t *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8)) != result)
    return WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(a1, result);
  return result;
}

uint64_t *WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::take@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16[2];

  v3 = *result;
  v4 = *((unsigned int *)result + 2);
  if (*result)
  {
    v5 = v4 - 1;
    v6 = *((_DWORD *)result + 4);
    v7 = *a2;
    v8 = *(_DWORD *)(*a2 + 16);
    v9 = (v6 ^ (v8 >> 8)) & (v4 - 1);
    v10 = v3 + 24 * v9;
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      v12 = v8 >> 8;
      v13 = -1;
      do
      {
        v14 = *(_DWORD *)(v11 + 16);
        if (++v13 > ((v9 + (_DWORD)v4 - ((v6 ^ (v14 >> 8)) & v5)) & v5))
          break;
        if (v11 == v7 && v14 >> 8 == v12)
          goto LABEL_7;
        v9 = (v9 + 1) & v5;
        v10 = v3 + 24 * v9;
        v11 = *(_QWORD *)v10;
      }
      while (*(_QWORD *)v10);
    }
    v10 = v3 + 24 * v4;
  }
  else
  {
    v10 = 24 * v4;
  }
LABEL_7:
  if (v3 + 24 * v4 == v10)
  {
    v16[0] = 0;
    v16[1] = 0;
    *a3 = 0;
    a3[1] = 0;
    return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v16, (void *)v10);
  }
  else
  {
    v15 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    *a3 = v15;
    a3[1] = *(_QWORD *)(v10 + 16);
    if (*result + 24 * v4 != v10)
      return WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)result, (uint64_t *)v10);
  }
  return result;
}

WebCore::TreeScope *WebCore::TreeScope::markPendingSVGResourcesForRemoval(WebCore::TreeScope *this, const WTF::AtomString *a2)
{
  WebCore::TreeScope *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _QWORD v23[2];

  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v3 = this;
      v4 = (uint64_t *)WebCore::TreeScope::svgResourcesMap(this);
      this = (WebCore::TreeScope *)WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::take(v4, (uint64_t *)a2, v23);
      v6 = v23[0];
      if (v23[0])
      {
        if (!*(_DWORD *)(v23[0] - 12))
          goto LABEL_6;
        v14 = *(unsigned int *)(v23[0] - 4);
        v15 = (uint64_t *)v23[0];
        if ((_DWORD)v14)
        {
          v16 = 0;
          while ((unint64_t)(*(_QWORD *)(v23[0] + v16) + 1) <= 1)
          {
            v16 += 8;
            if (8 * v14 == v16)
              goto LABEL_27;
          }
          v15 = (uint64_t *)(v23[0] + v16);
        }
        v17 = v23[0] + 8 * v14;
        if (v15 != (uint64_t *)v17)
        {
          v18 = *v15;
LABEL_30:
          if (*(_QWORD *)(v18 + 8))
          {
            v19 = WebCore::TreeScope::svgResourcesMap(v3);
            this = (WebCore::TreeScope *)WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(v19 + 24, (WTF::StringImpl **)a2, (WTF::StringImpl *)v23, (uint64_t)v22);
            v6 = v23[0];
          }
          else
          {
            while (++v15 != (uint64_t *)v17)
            {
              v18 = *v15;
              if ((unint64_t)(*v15 + 1) > 1)
              {
                if (v15 == (uint64_t *)v17)
                  break;
                goto LABEL_30;
              }
            }
          }
        }
LABEL_27:
        if (v6)
        {
LABEL_6:
          v7 = *(unsigned int *)(v6 - 4);
          if ((_DWORD)v7)
          {
            for (i = 0; i != v7; ++i)
            {
              v9 = *(_QWORD *)(v6 + 8 * i);
              if (v9 != -1)
              {
                *(_QWORD *)(v6 + 8 * i) = 0;
                if (v9)
                {
                  do
                  {
                    v10 = __ldaxr((unsigned int *)v9);
                    v11 = v10 - 1;
                  }
                  while (__stlxr(v11, (unsigned int *)v9));
                  if (!v11)
                  {
                    v20 = v6;
                    v21 = i;
                    atomic_store(1u, (unsigned int *)v9);
                    v12 = *(unsigned int *)(v9 + 28);
                    if ((_DWORD)v12)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v12));
                    v13 = *(WTF **)(v9 + 16);
                    if (v13)
                    {
                      *(_QWORD *)(v9 + 16) = 0;
                      *(_DWORD *)(v9 + 24) = 0;
                      WTF::fastFree(v13, v5);
                    }
                    WTF::fastFree((WTF *)v9, v5);
                    v6 = v20;
                    i = v21;
                  }
                }
              }
            }
          }
          return (WebCore::TreeScope *)WTF::fastFree((WTF *)(v6 - 16), v5);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::TreeScope::takeElementFromPendingSVGResourcesForRemovalMap@<X0>(uint64_t this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WebCore::TreeScope *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)a2
    || !*(_DWORD *)(*(_QWORD *)a2 + 4)
    || (v6 = (WebCore::TreeScope *)this,
        v7 = WebCore::TreeScope::svgResourcesMap((WebCore::TreeScope *)this),
        v8 = WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::find((uint64_t *)(v7 + 24), *(_QWORD *)a2), this = WebCore::TreeScope::svgResourcesMap(v6), (uint64_t *)(*(_QWORD *)(this + 24) + 24 * *(unsigned int *)(this + 32)) == v8))
  {
    v4 = 0;
    goto LABEL_3;
  }
  v11 = v8[1];
  v10 = (uint64_t **)(v8 + 1);
  v9 = v11;
  if (!v11)
  {
    v12 = 0;
    v13 = 0;
LABEL_8:
    v14 = v12;
    v12 = v9 + 8 * v13;
    goto LABEL_9;
  }
  v13 = *(unsigned int *)(v9 - 4);
  v12 = v9 + 8 * v13;
  if (!*(_DWORD *)(v9 - 12))
    goto LABEL_8;
  if (!(_DWORD)v13)
  {
    v15 = 0;
    v14 = v9;
    goto LABEL_11;
  }
  v18 = 8 * v13;
  v14 = v9;
  while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
  {
    v14 += 8;
    v18 -= 8;
    if (!v18)
    {
      v14 = v12;
      break;
    }
  }
LABEL_9:
  if (!v9)
    goto LABEL_12;
  v15 = *(unsigned int *)(v9 - 4);
LABEL_11:
  v9 += 8 * v15;
LABEL_12:
  if (v9 != v14)
  {
    while (!*(_QWORD *)(*(_QWORD *)v14 + 8))
    {
      v24 = v14 + 8;
      v14 = v12;
      if (v24 != v12)
      {
        v14 = v24;
        while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
        {
          v14 += 8;
          if (v14 == v12)
          {
            v14 = v12;
            break;
          }
        }
      }
      if (v14 == v9)
      {
        v14 = v9;
        break;
      }
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)v14 + 8);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    this = WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>((uint64_t)v10, (_QWORD *)v4);
    v16 = *v10;
    if (!*v10 || !*((_DWORD *)v16 - 3))
      goto LABEL_15;
    v19 = *((unsigned int *)v16 - 1);
    if ((_DWORD)v19)
    {
      v20 = 8 * v19;
      v21 = *v10;
      while ((unint64_t)(*v21 + 1) <= 1)
      {
        ++v21;
        v20 -= 8;
        if (!v20)
          goto LABEL_15;
      }
    }
    else
    {
      v21 = *v10;
    }
    v22 = &v16[v19];
    if (v21 == v22)
      goto LABEL_15;
    v23 = *v21;
LABEL_33:
    if (!*(_QWORD *)(v23 + 8))
    {
      while (++v21 != v22)
      {
        v23 = *v21;
        if ((unint64_t)(*v21 + 1) > 1)
        {
          if (v21 == v22)
            break;
          goto LABEL_33;
        }
      }
LABEL_15:
      v17 = WebCore::TreeScope::svgResourcesMap(v6);
      this = (uint64_t)WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::find((uint64_t *)(v17 + 24), *(_QWORD *)a2);
      if (*(_QWORD *)(v17 + 24) + 24 * *(unsigned int *)(v17 + 32) != this)
        this = (uint64_t)WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(v17 + 24, (uint64_t *)this);
    }
  }
LABEL_3:
  *a3 = v4;
  return this;
}

uint64_t WebCore::TreeScopeOrderedMap::getElementByWindowNamedItem@<X0>(uint64_t this@<X0>, const WTF::AtomString *a2@<X1>, const WebCore::TreeScope *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  int v8;
  unsigned int i;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_15;
  v8 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v8 + v10)
  {
    v10 = i & *(_DWORD *)(v5 - 8);
    v11 = (uint64_t *)(v5 + 40 * v10);
    v12 = *v11;
    if (!*v11)
      break;
    if (v12 != -1 && v12 == *(_QWORD *)a2)
    {
      v14 = *(_DWORD *)(v5 - 4);
      goto LABEL_10;
    }
  }
  v14 = *(_DWORD *)(v5 - 4);
  v11 = (uint64_t *)(v5 + 40 * v14);
LABEL_10:
  if (v11 == (uint64_t *)(v5 + 40 * v14))
  {
LABEL_15:
    *a4 = 0;
    return this;
  }
  v15 = v11[1];
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      *(_DWORD *)(v16 + 24) += 2;
      if (*(const WebCore::TreeScope **)(v16 + 40) != a3)
      {
        __break(0xC471u);
        JUMPOUT(0x195A55FBCLL);
      }
      *a4 = v16;
      return this;
    }
  }
  v17 = *(_QWORD *)a3;
  v18 = *(_DWORD *)(*(_QWORD *)a3 + 24);
  *(_DWORD *)(v17 + 24) = v18 + 2;
  v19 = *(_QWORD *)(v17 + 80);
  if (!v19)
  {
    *a4 = 0;
    if (v18)
    {
LABEL_18:
      *(_DWORD *)(v17 + 24) = v18;
      return this;
    }
LABEL_66:
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
    return this;
  }
  while ((*(_WORD *)(v19 + 28) & 8) == 0)
  {
    v19 = *(_QWORD *)(v19 + 56);
    if (!v19)
      goto LABEL_22;
  }
LABEL_49:
  while (1)
  {
    v20 = *(_DWORD *)(v19 + 24) + 2;
    *(_DWORD *)(v19 + 24) = v20;
    if ((*(_BYTE *)(v19 + 22) & 0x18) != 0)
      break;
LABEL_25:
    v21 = v20 - 2;
    if (v21)
    {
      *(_DWORD *)(v19 + 24) = v21;
    }
    else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
    {
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
    }
    v22 = *(_QWORD *)(v19 + 80);
    if (!v22)
    {
      if (v19 == v17)
        goto LABEL_58;
      while (1)
      {
        v22 = *(_QWORD *)(v19 + 56);
        if (v22)
          break;
        v19 = *(_QWORD *)(v19 + 32);
        if (v19)
          v24 = v19 == v17;
        else
          v24 = 1;
        if (v24)
          goto LABEL_58;
      }
    }
    v19 = v22;
    if ((*(_WORD *)(v22 + 28) & 8) == 0)
    {
      while (v22 != v17)
      {
        while (1)
        {
          v19 = *(_QWORD *)(v22 + 56);
          if (v19)
            break;
          v22 = *(_QWORD *)(v22 + 32);
          if (v22)
            v23 = v22 == v17;
          else
            v23 = 1;
          if (v23)
            goto LABEL_58;
        }
        v22 = *(_QWORD *)(v22 + 56);
        if ((*(_WORD *)(v19 + 28) & 8) != 0)
          goto LABEL_49;
      }
LABEL_58:
      v19 = 0;
      goto LABEL_22;
    }
  }
  this = WebCore::WindowNameCollection::elementMatches(v19, a2);
  if ((this & 1) == 0)
  {
    v20 = *(_DWORD *)(v19 + 24);
    goto LABEL_25;
  }
  this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v19);
  if (this)
  {
    do
      v25 = __ldaxr((unsigned int *)this);
    while (__stlxr(v25 + 1, (unsigned int *)this));
  }
  v26 = v11[1];
  v11[1] = this;
  if (v26)
  {
    do
    {
      v27 = __ldaxr((unsigned int *)v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)v26));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)v26);
      v29 = *(unsigned int *)(v26 + 28);
      if ((_DWORD)v29)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v29));
      v30 = *(WTF **)(v26 + 16);
      if (v30)
      {
        *(_QWORD *)(v26 + 16) = 0;
        *(_DWORD *)(v26 + 24) = 0;
        WTF::fastFree(v30, a2);
      }
      this = WTF::fastFree((WTF *)v26, a2);
    }
  }
  if (*(const WebCore::TreeScope **)(v19 + 40) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A55F94);
  }
LABEL_22:
  *a4 = v19;
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 24) - 2;
    if (*(_DWORD *)(v17 + 24) != 2)
      goto LABEL_18;
    goto LABEL_66;
  }
  return this;
}

uint64_t WebCore::TreeScopeOrderedMap::getElementByDocumentNamedItem@<X0>(uint64_t this@<X0>, const WTF::AtomString *a2@<X1>, const WebCore::TreeScope *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  int v8;
  unsigned int i;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_15;
  v8 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v8 + v10)
  {
    v10 = i & *(_DWORD *)(v5 - 8);
    v11 = (uint64_t *)(v5 + 40 * v10);
    v12 = *v11;
    if (!*v11)
      break;
    if (v12 != -1 && v12 == *(_QWORD *)a2)
    {
      v14 = *(_DWORD *)(v5 - 4);
      goto LABEL_10;
    }
  }
  v14 = *(_DWORD *)(v5 - 4);
  v11 = (uint64_t *)(v5 + 40 * v14);
LABEL_10:
  if (v11 == (uint64_t *)(v5 + 40 * v14))
  {
LABEL_15:
    *a4 = 0;
    return this;
  }
  v15 = v11[1];
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      *(_DWORD *)(v16 + 24) += 2;
      if (*(const WebCore::TreeScope **)(v16 + 40) != a3)
      {
        __break(0xC471u);
        JUMPOUT(0x195A5628CLL);
      }
      *a4 = v16;
      return this;
    }
  }
  v17 = *(_QWORD *)a3;
  v18 = *(_DWORD *)(*(_QWORD *)a3 + 24);
  *(_DWORD *)(v17 + 24) = v18 + 2;
  v19 = *(_QWORD *)(v17 + 80);
  if (!v19)
  {
    *a4 = 0;
    if (v18)
    {
LABEL_18:
      *(_DWORD *)(v17 + 24) = v18;
      return this;
    }
LABEL_66:
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
    return this;
  }
  while ((*(_WORD *)(v19 + 28) & 8) == 0)
  {
    v19 = *(_QWORD *)(v19 + 56);
    if (!v19)
      goto LABEL_22;
  }
LABEL_49:
  while (1)
  {
    v20 = *(_DWORD *)(v19 + 24) + 2;
    *(_DWORD *)(v19 + 24) = v20;
    if ((*(_BYTE *)(v19 + 22) & 0x18) != 0)
      break;
LABEL_25:
    v21 = v20 - 2;
    if (v21)
    {
      *(_DWORD *)(v19 + 24) = v21;
    }
    else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
    {
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
    }
    v22 = *(_QWORD *)(v19 + 80);
    if (!v22)
    {
      if (v19 == v17)
        goto LABEL_58;
      while (1)
      {
        v22 = *(_QWORD *)(v19 + 56);
        if (v22)
          break;
        v19 = *(_QWORD *)(v19 + 32);
        if (v19)
          v24 = v19 == v17;
        else
          v24 = 1;
        if (v24)
          goto LABEL_58;
      }
    }
    v19 = v22;
    if ((*(_WORD *)(v22 + 28) & 8) == 0)
    {
      while (v22 != v17)
      {
        while (1)
        {
          v19 = *(_QWORD *)(v22 + 56);
          if (v19)
            break;
          v22 = *(_QWORD *)(v22 + 32);
          if (v22)
            v23 = v22 == v17;
          else
            v23 = 1;
          if (v23)
            goto LABEL_58;
        }
        v22 = *(_QWORD *)(v22 + 56);
        if ((*(_WORD *)(v19 + 28) & 8) != 0)
          goto LABEL_49;
      }
LABEL_58:
      v19 = 0;
      goto LABEL_22;
    }
  }
  this = WebCore::DocumentNameCollection::elementMatches(v19, a2);
  if ((this & 1) == 0)
  {
    v20 = *(_DWORD *)(v19 + 24);
    goto LABEL_25;
  }
  this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v19);
  if (this)
  {
    do
      v25 = __ldaxr((unsigned int *)this);
    while (__stlxr(v25 + 1, (unsigned int *)this));
  }
  v26 = v11[1];
  v11[1] = this;
  if (v26)
  {
    do
    {
      v27 = __ldaxr((unsigned int *)v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)v26));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)v26);
      v29 = *(unsigned int *)(v26 + 28);
      if ((_DWORD)v29)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v29));
      v30 = *(WTF **)(v26 + 16);
      if (v30)
      {
        *(_QWORD *)(v26 + 16) = 0;
        *(_DWORD *)(v26 + 24) = 0;
        WTF::fastFree(v30, a2);
      }
      this = WTF::fastFree((WTF *)v26, a2);
    }
  }
  if (*(const WebCore::TreeScope **)(v19 + 40) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195A56264);
  }
LABEL_22:
  *a4 = v19;
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 24) - 2;
    if (*(_DWORD *)(v17 + 24) != 2)
      goto LABEL_18;
    goto LABEL_66;
  }
  return this;
}

_QWORD *WebCore::TreeScopeOrderedMap::keys@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  _QWORD *v9;
  int v10;
  _DWORD *v11;
  int v12;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (*this)
  {
    v3 = *(unsigned int *)(*this - 12);
    if ((_DWORD)v3)
    {
      if (v3 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = this;
        this = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
        *(_DWORD *)(a2 + 8) = v3;
        *(_QWORD *)a2 = this;
        v5 = (_QWORD *)*v4;
        if (*v4 && *((_DWORD *)v5 - 3))
        {
          v6 = *((unsigned int *)v5 - 1);
          if ((_DWORD)v6)
          {
            v7 = 40 * v6;
            for (i = (_QWORD *)*v4; (unint64_t)(*i + 1) <= 1; i += 5)
            {
              v7 -= 40;
              if (!v7)
                return this;
            }
          }
          else
          {
            i = (_QWORD *)*v4;
          }
          v9 = &v5[5 * v6];
          if (i != v9)
          {
            v10 = 0;
            v11 = (_DWORD *)*i;
LABEL_14:
            if (v11)
              *v11 += 2;
            v12 = v10 + 1;
            this[v10] = v11;
            while (1)
            {
              i += 5;
              if (i == v9)
                break;
              v11 = (_DWORD *)*i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v10;
                if (i != v9)
                  goto LABEL_14;
                break;
              }
            }
            *(_DWORD *)(a2 + 12) = v12;
          }
        }
      }
    }
  }
  return this;
}

void *WebCore::TreeWalker::bisoHeap(WebCore::TreeWalker *this)
{
  return &WebCore::TreeWalker::bisoHeap(void)::heap;
}

uint64_t WebCore::TreeWalker::operator new(uint64_t this)
{
  if (this == 48)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::TreeWalker::TreeWalker(uint64_t result, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)(result + 16) = a2;
  v4 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 32) = a3;
  *(_BYTE *)(result + 36) = 0;
  v5 = *(_QWORD *)(result + 16);
  *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)(result + 40) = v5;
  return result;
}

unsigned int *WebCore::TreeWalker::setCurrentNode(WebCore::TreeWalker *this, WebCore::Node *a2)
{
  unsigned int *result;

  *((_DWORD *)a2 + 6) += 2;
  result = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = a2;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::TreeWalker::parentNode@<X0>(WebCore::TreeWalker *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  WebCore::NodeIteratorBase *v6;
  unsigned int *result;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WebCore::NodeIteratorBase *v13;
  WebCore::Node *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int v17;
  char v18;

  v6 = (WebCore::TreeWalker *)((char *)this + 16);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  result = (unsigned int *)*((_QWORD *)this + 5);
  result[6] += 2;
  if (result == v5)
  {
    v8 = result;
LABEL_20:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_30;
  }
  while (1)
  {
    v8 = (unsigned int *)*((_QWORD *)result + 4);
    if (v8)
      v8[6] += 2;
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
    if (!v8)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 16) = 0;
      return result;
    }
    if (*((_QWORD *)this + 3))
    {
      WebCore::NodeIteratorBase::acceptNodeSlowCase(v6, (WebCore::Node *)v8, (uint64_t)&v15);
      if (v17)
      {
        if (v17 != 1)
        {
          v13 = (WebCore::NodeIteratorBase *)std::__throw_bad_variant_access[abi:sn180100]();
          return (unsigned int *)WebCore::NodeIteratorBase::acceptNode(v13, v14);
        }
        v12 = v16;
        v16 = 0;
        *(_BYTE *)a3 = v15;
        *(_QWORD *)(a3 + 8) = v12;
        v11 = 1;
        goto LABEL_28;
      }
      v9 = v15;
    }
    else
    {
      v9 = ((*((_DWORD *)this + 8) >> ((*((unsigned __int16 *)v8 + 14) >> 12) - 1)) & 1) != 0 ? 1 : 3;
      v15 = v9;
      v17 = 0;
    }
    if (v9 == 1)
      break;
    result = v8;
    if (v8 == *(unsigned int **)v6)
      goto LABEL_20;
  }
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v8;
  if (!v10)
    goto LABEL_25;
  if (*(_DWORD *)(v10 + 24) != 2)
  {
    *(_DWORD *)(v10 + 24) -= 2;
    goto LABEL_25;
  }
  if ((*(_WORD *)(v10 + 30) & 0x400) != 0)
  {
LABEL_25:
    v11 = 0;
    *(_QWORD *)a3 = v8;
    v8 = 0;
LABEL_28:
    *(_DWORD *)(a3 + 16) = v11;
    goto LABEL_29;
  }
  result = WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
  v11 = v17;
  *(_QWORD *)a3 = *((_QWORD *)this + 5);
  *(_DWORD *)(a3 + 16) = 0;
  if (v11 == -1)
    return result;
  v8 = 0;
LABEL_29:
  result = (unsigned int *)((uint64_t (*)(char *, unsigned __int16 *))off_1E33A8760[v11])(&v18, &v15);
  if (!v8)
    return result;
LABEL_30:
  if (v8[6] == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
  }
  else
  {
    v8[6] -= 2;
  }
  return result;
}

void WebCore::NodeIteratorBase::acceptNode(WebCore::NodeIteratorBase *this, WebCore::Node *a2, unsigned __int16 *a3)
{
  __int16 v3;

  if (*((_QWORD *)a2 + 1))
  {
    WebCore::NodeIteratorBase::acceptNodeSlowCase(a2, (WebCore::Node *)a3, (uint64_t)this);
  }
  else
  {
    if (((*((_DWORD *)a2 + 4) >> ((a3[14] >> 12) - 1)) & 1) != 0)
      v3 = 1;
    else
      v3 = 3;
    *(_WORD *)this = v3;
    *((_DWORD *)this + 4) = 0;
  }
}

uint64_t WebCore::TreeWalker::setCurrent(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        return *(_QWORD *)(a1 + 40);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

void WebCore::TreeWalker::firstChild(WebCore::TreeWalker *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WebCore::NodeIteratorBase *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WebCore::TreeWalker *v15;
  unsigned __int16 v16;
  uint64_t v17;
  int v18;
  char v19;

  v4 = *((_QWORD *)this + 5);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 4) == 0;
  else
    v5 = 1;
  if (v5 || (v6 = *(_QWORD *)(v4 + 80)) == 0)
  {
LABEL_57:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v8 = (WebCore::TreeWalker *)((char *)this + 16);
  while (1)
  {
    if (!*((_QWORD *)this + 3))
    {
      if (((*((_DWORD *)this + 8) >> ((*(unsigned __int16 *)(v6 + 28) >> 12) - 1)) & 1) != 0)
        v11 = 1;
      else
        v11 = 3;
      v16 = v11;
      v18 = 0;
LABEL_16:
      if (v11 == 3)
      {
        if ((*(_WORD *)(v6 + 28) & 4) != 0 && (v13 = *(_QWORD *)(v6 + 80)) != 0)
        {
          *(_DWORD *)(v13 + 24) += 2;
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
          v10 = 3;
        }
        else
        {
LABEL_31:
          while (1)
          {
            v13 = *(_QWORD *)(v6 + 56);
            if (v13)
              break;
            v13 = v6;
            v6 = *(_QWORD *)(v6 + 32);
            if (!v6)
            {
              *(_QWORD *)a3 = 0;
              *(_DWORD *)(a3 + 16) = 0;
LABEL_37:
              v10 = 1;
              goto LABEL_40;
            }
            v14 = *(_DWORD *)(v6 + 24);
            *(_DWORD *)(v6 + 24) = v14 + 2;
            if (v6 == *(_QWORD *)v8 || v6 == *((_QWORD *)this + 5))
            {
              *(_QWORD *)a3 = 0;
              *(_DWORD *)(a3 + 16) = 0;
              if (v14)
              {
                *(_DWORD *)(v6 + 24) = v14;
              }
              else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
              }
              goto LABEL_37;
            }
            if (*(_DWORD *)(v13 + 24) == 2)
            {
              if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
            }
            else
            {
              *(_DWORD *)(v13 + 24) -= 2;
            }
          }
          *(_DWORD *)(v13 + 24) += 2;
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
            v10 = 0;
          }
          else
          {
            v10 = 0;
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
LABEL_40:
        v6 = v13;
      }
      else
      {
        if (v11 != 1)
          goto LABEL_31;
        v12 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v6;
        if (v12)
        {
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
              v6 = *((_QWORD *)this + 5);
            }
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
        }
        *(_QWORD *)a3 = v6;
        *(_DWORD *)(a3 + 16) = 0;
        v10 = 1;
        v6 = 0;
      }
      goto LABEL_41;
    }
    WebCore::NodeIteratorBase::acceptNodeSlowCase(v8, (WebCore::Node *)v6, (uint64_t)&v16);
    if (!v18)
    {
      v11 = v16;
      goto LABEL_16;
    }
    if (v18 != 1)
    {
      v15 = (WebCore::TreeWalker *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::TreeWalker::lastChild(v15);
      return;
    }
    v9 = v17;
    v17 = 0;
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v9;
    v10 = 1;
    *(_DWORD *)(a3 + 16) = 1;
LABEL_41:
    if (v18 != -1)
      ((void (*)(char *, unsigned __int16 *))off_1E33A8760[v18])(&v19, &v16);
    if (v10 != 3 && v10)
      break;
    if (!v6)
      goto LABEL_57;
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
}

void WebCore::TreeWalker::lastChild(WebCore::TreeWalker *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WebCore::NodeIteratorBase *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore::TreeWalker *v16;
  unsigned __int16 v17;
  uint64_t v18;
  int v19;
  char v20;

  v4 = *((_QWORD *)this + 5);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 4) == 0;
  else
    v5 = 1;
  if (v5 || (v6 = *(_QWORD *)(v4 + 88)) == 0)
  {
LABEL_60:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v8 = (WebCore::TreeWalker *)((char *)this + 16);
  while (1)
  {
    if (!*((_QWORD *)this + 3))
    {
      if (((*((_DWORD *)this + 8) >> ((*(unsigned __int16 *)(v6 + 28) >> 12) - 1)) & 1) != 0)
        v11 = 1;
      else
        v11 = 3;
      v17 = v11;
      v19 = 0;
LABEL_16:
      if (v11 == 3)
      {
        if ((*(_WORD *)(v6 + 28) & 4) != 0)
        {
          v13 = *(_QWORD *)(v6 + 88);
          if (v13)
          {
            *(_DWORD *)(v13 + 24) += 2;
            if (*(_DWORD *)(v6 + 24) == 2)
            {
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
            }
            else
            {
              *(_DWORD *)(v6 + 24) -= 2;
            }
            v10 = 3;
            goto LABEL_30;
          }
        }
      }
      else if (v11 == 1)
      {
        v12 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v6;
        if (v12)
        {
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
              v6 = *((_QWORD *)this + 5);
            }
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
        }
        *(_QWORD *)a3 = v6;
        *(_DWORD *)(a3 + 16) = 0;
        v10 = 1;
        v6 = 0;
        goto LABEL_31;
      }
      v13 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v13)
      {
        v14 = v6;
        while (1)
        {
          v6 = v14;
          v14 = *(_QWORD *)(v14 + 32);
          if (!v14)
          {
            *(_QWORD *)a3 = 0;
            *(_DWORD *)(a3 + 16) = 0;
            goto LABEL_49;
          }
          v15 = *(_DWORD *)(v14 + 24);
          *(_DWORD *)(v14 + 24) = v15 + 2;
          if (v14 == *(_QWORD *)v8 || v14 == *((_QWORD *)this + 5))
            break;
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
          v13 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
          if (v13)
          {
            v6 = v14;
            goto LABEL_28;
          }
        }
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 16) = 0;
        if (v15)
        {
          *(_DWORD *)(v14 + 24) = v15;
        }
        else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
        }
LABEL_49:
        v10 = 1;
        goto LABEL_31;
      }
LABEL_28:
      *(_DWORD *)(v13 + 24) += 2;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
        v10 = 0;
      }
      else
      {
        v10 = 0;
        *(_DWORD *)(v6 + 24) -= 2;
      }
LABEL_30:
      v6 = v13;
      goto LABEL_31;
    }
    WebCore::NodeIteratorBase::acceptNodeSlowCase(v8, (WebCore::Node *)v6, (uint64_t)&v17);
    if (!v19)
    {
      v11 = v17;
      goto LABEL_16;
    }
    if (v19 != 1)
    {
      v16 = (WebCore::TreeWalker *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::TreeWalker::previousSibling(v16);
      return;
    }
    v9 = v18;
    v18 = 0;
    *(_BYTE *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v9;
    v10 = 1;
    *(_DWORD *)(a3 + 16) = 1;
LABEL_31:
    if (v19 != -1)
      ((void (*)(char *, unsigned __int16 *))off_1E33A8760[v19])(&v20, &v17);
    if (v10 != 3 && v10)
      break;
    if (!v6)
      goto LABEL_60;
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
}

void WebCore::TreeWalker::traverseSiblings<(WebCore::TreeWalker::SiblingTraversalType)0>(WebCore::NodeIteratorBase *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WebCore::NodeIteratorBase *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WebCore::TreeWalker *v22;
  unsigned __int16 v23;
  uint64_t v24;
  unsigned int v25;
  char v26;

  v5 = (WebCore::NodeIteratorBase *)((char *)this + 16);
  v4 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 5);
  *(_DWORD *)(v6 + 24) += 2;
  if (v6 == v4)
  {
LABEL_59:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_70;
  }
  while (1)
  {
    v8 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
    if (v8)
      break;
    v9 = v6;
LABEL_42:
    v6 = *(_QWORD *)(v9 + 32);
    if (v6)
      *(_DWORD *)(v6 + 24) += 2;
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    if (!v6)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 16) = 0;
      return;
    }
    if (v6 == *(_QWORD *)v5)
      goto LABEL_59;
    if (*((_QWORD *)this + 3))
    {
      WebCore::NodeIteratorBase::acceptNodeSlowCase(v5, (WebCore::Node *)v6, (uint64_t)&v23);
      if (v25)
      {
        if (v25 != 1)
        {
LABEL_84:
          v22 = (WebCore::TreeWalker *)std::__throw_bad_variant_access[abi:sn180100]();
          WebCore::TreeWalker::nextSibling(v22);
          return;
        }
        v21 = v24;
        v24 = 0;
        *(_BYTE *)a3 = v23;
        *(_QWORD *)(a3 + 8) = v21;
        v20 = 1;
LABEL_83:
        *(_DWORD *)(a3 + 16) = v20;
        ((void (*)(char *, unsigned __int16 *))off_1E33A8760[v20])(&v26, &v23);
        goto LABEL_70;
      }
      v16 = v23;
    }
    else
    {
      if (((*((_DWORD *)this + 8) >> ((*(unsigned __int16 *)(v6 + 28) >> 12) - 1)) & 1) != 0)
        v16 = 1;
      else
        v16 = 3;
      v23 = v16;
      v25 = 0;
    }
    if (v16 == 1)
    {
      v20 = 0;
      *(_QWORD *)a3 = 0;
      goto LABEL_83;
    }
  }
  *(_DWORD *)((*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  while (1)
  {
    v9 = v8;
    if (*((_QWORD *)this + 3))
    {
      WebCore::NodeIteratorBase::acceptNodeSlowCase(v5, (WebCore::Node *)v8, (uint64_t)&v23);
      if (v25)
      {
        if (v25 != 1)
          goto LABEL_84;
        v19 = v24;
        v24 = 0;
        *(_BYTE *)a3 = v23;
        *(_QWORD *)(a3 + 8) = v19;
        v18 = 1;
        goto LABEL_66;
      }
      v10 = v23;
    }
    else
    {
      v10 = ((*((_DWORD *)this + 8) >> ((*(unsigned __int16 *)(v8 + 28) >> 12) - 1)) & 1) != 0 ? 1 : 3;
      v23 = v10;
      v25 = 0;
    }
    if (v10 == 1)
      break;
    *(_DWORD *)(v8 + 24) += 2;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    if ((*(_WORD *)(v8 + 28) & 4) != 0)
    {
      v8 = *(_QWORD *)(v8 + 88);
      if (v8)
      {
        v11 = 0;
        *(_DWORD *)(v8 + 24) += 2;
        goto LABEL_17;
      }
    }
    else
    {
      v8 = 0;
    }
    v11 = 1;
LABEL_17:
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    if (v25)
      goto LABEL_84;
    if (((v23 != 2) & ~v11) != 0)
    {
      v15 = 0;
      goto LABEL_28;
    }
    v12 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFLL;
    if (v12)
      *(_DWORD *)((*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    if ((v11 & 1) != 0)
      goto LABEL_40;
    v13 = *(_DWORD *)(v8 + 24);
    v14 = v13 - 2;
    if (v13 == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        v15 = v25;
        v8 = v12;
        if (v25 == -1)
          goto LABEL_29;
        goto LABEL_28;
      }
LABEL_40:
      v15 = 0;
      goto LABEL_26;
    }
    v15 = 0;
    *(_DWORD *)(v8 + 24) = v14;
LABEL_26:
    v8 = v12;
LABEL_28:
    ((void (*)(char *, unsigned __int16 *))off_1E33A8760[v15])(&v26, &v23);
LABEL_29:
    v6 = v9;
    if (!v8)
      goto LABEL_42;
  }
  v17 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v8;
  if (!v17)
    goto LABEL_63;
  if (*(_DWORD *)(v17 + 24) != 2)
  {
    *(_DWORD *)(v17 + 24) -= 2;
    goto LABEL_63;
  }
  if ((*(_WORD *)(v17 + 30) & 0x400) != 0)
  {
LABEL_63:
    v18 = 0;
    *(_QWORD *)a3 = v8;
    v9 = 0;
LABEL_66:
    *(_DWORD *)(a3 + 16) = v18;
    goto LABEL_67;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
  v18 = v25;
  *(_QWORD *)a3 = *((_QWORD *)this + 5);
  *(_DWORD *)(a3 + 16) = 0;
  if (v18 == -1)
    goto LABEL_70;
  v9 = 0;
LABEL_67:
  ((void (*)(char *, unsigned __int16 *))off_1E33A8760[v18])(&v26, &v23);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
LABEL_70:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

void WebCore::TreeWalker::traverseSiblings<(WebCore::TreeWalker::SiblingTraversalType)1>(WebCore::NodeIteratorBase *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WebCore::NodeIteratorBase *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WebCore::TreeWalker *v22;
  unsigned __int16 v23;
  uint64_t v24;
  unsigned int v25;
  char v26;

  v5 = (WebCore::NodeIteratorBase *)((char *)this + 16);
  v4 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 5);
  *(_DWORD *)(v6 + 24) += 2;
  if (v6 == v4)
  {
LABEL_58:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_69;
  }
  while (1)
  {
    v8 = *(_QWORD *)(v6 + 56);
    if (v8)
      break;
    v9 = v6;
LABEL_41:
    v6 = *(_QWORD *)(v9 + 32);
    if (v6)
      *(_DWORD *)(v6 + 24) += 2;
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    if (!v6)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 16) = 0;
      return;
    }
    if (v6 == *(_QWORD *)v5)
      goto LABEL_58;
    if (*((_QWORD *)this + 3))
    {
      WebCore::NodeIteratorBase::acceptNodeSlowCase(v5, (WebCore::Node *)v6, (uint64_t)&v23);
      if (v25)
      {
        if (v25 != 1)
        {
LABEL_83:
          v22 = (WebCore::TreeWalker *)std::__throw_bad_variant_access[abi:sn180100]();
          WebCore::TreeWalker::previousNode(v22);
          return;
        }
        v21 = v24;
        v24 = 0;
        *(_BYTE *)a3 = v23;
        *(_QWORD *)(a3 + 8) = v21;
        v20 = 1;
LABEL_82:
        *(_DWORD *)(a3 + 16) = v20;
        ((void (*)(char *, unsigned __int16 *))off_1E33A8760[v20])(&v26, &v23);
        goto LABEL_69;
      }
      v16 = v23;
    }
    else
    {
      if (((*((_DWORD *)this + 8) >> ((*(unsigned __int16 *)(v6 + 28) >> 12) - 1)) & 1) != 0)
        v16 = 1;
      else
        v16 = 3;
      v23 = v16;
      v25 = 0;
    }
    if (v16 == 1)
    {
      v20 = 0;
      *(_QWORD *)a3 = 0;
      goto LABEL_82;
    }
  }
  *(_DWORD *)(v8 + 24) += 2;
  while (1)
  {
    v9 = v8;
    if (*((_QWORD *)this + 3))
    {
      WebCore::NodeIteratorBase::acceptNodeSlowCase(v5, (WebCore::Node *)v8, (uint64_t)&v23);
      if (v25)
      {
        if (v25 != 1)
          goto LABEL_83;
        v19 = v24;
        v24 = 0;
        *(_BYTE *)a3 = v23;
        *(_QWORD *)(a3 + 8) = v19;
        v18 = 1;
        goto LABEL_65;
      }
      v10 = v23;
    }
    else
    {
      v10 = ((*((_DWORD *)this + 8) >> ((*(unsigned __int16 *)(v8 + 28) >> 12) - 1)) & 1) != 0 ? 1 : 3;
      v23 = v10;
      v25 = 0;
    }
    if (v10 == 1)
      break;
    *(_DWORD *)(v8 + 24) += 2;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    if ((*(_WORD *)(v8 + 28) & 4) != 0)
    {
      v11 = *(_QWORD *)(v8 + 80);
      if (v11)
      {
        v12 = 0;
        *(_DWORD *)(v11 + 24) += 2;
        goto LABEL_19;
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = 1;
LABEL_19:
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    if (v25)
      goto LABEL_83;
    if (((v23 != 2) & ~v12) != 0)
    {
      v15 = 0;
      v8 = v11;
    }
    else
    {
      v8 = *(_QWORD *)(v8 + 56);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      if ((v12 & 1) != 0)
        goto LABEL_39;
      v13 = *(_DWORD *)(v11 + 24);
      v14 = v13 - 2;
      if (v13 == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
          v15 = v25;
          if (v25 == -1)
            goto LABEL_30;
          goto LABEL_29;
        }
LABEL_39:
        v15 = 0;
        goto LABEL_29;
      }
      v15 = 0;
      *(_DWORD *)(v11 + 24) = v14;
    }
LABEL_29:
    ((void (*)(char *, unsigned __int16 *))off_1E33A8760[v15])(&v26, &v23);
LABEL_30:
    v6 = v9;
    if (!v8)
      goto LABEL_41;
  }
  v17 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v8;
  if (!v17)
    goto LABEL_62;
  if (*(_DWORD *)(v17 + 24) != 2)
  {
    *(_DWORD *)(v17 + 24) -= 2;
    goto LABEL_62;
  }
  if ((*(_WORD *)(v17 + 30) & 0x400) != 0)
  {
LABEL_62:
    v18 = 0;
    *(_QWORD *)a3 = v8;
    v9 = 0;
LABEL_65:
    *(_DWORD *)(a3 + 16) = v18;
    goto LABEL_66;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
  v18 = v25;
  *(_QWORD *)a3 = *((_QWORD *)this + 5);
  *(_DWORD *)(a3 + 16) = 0;
  if (v18 == -1)
    goto LABEL_69;
  v9 = 0;
LABEL_66:
  ((void (*)(char *, unsigned __int16 *))off_1E33A8760[v18])(&v26, &v23);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
LABEL_69:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

unsigned int *WebCore::TreeWalker::previousNode@<X0>(unsigned int *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  WebCore::NodeIteratorBase *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  int v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned int v32;

  v3 = this;
  v5 = (WebCore::NodeIteratorBase *)(this + 4);
  v6 = (unsigned int *)*((_QWORD *)this + 5);
  if (!*((_QWORD *)this + 3))
  {
    if (v6 == *(unsigned int **)v5)
      goto LABEL_99;
    v19 = (unsigned int *)(*((_QWORD *)v6 + 6) & 0xFFFFFFFFFFFFLL);
    if (v19)
    {
      if ((*(_WORD *)((*((_QWORD *)v6 + 6) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v23 = *((_QWORD *)v19 + 11);
          if (!v23)
            break;
          v19 = (unsigned int *)*((_QWORD *)v19 + 11);
        }
        while ((*(_WORD *)(v23 + 28) & 4) != 0);
      }
    }
    else
    {
      v19 = (unsigned int *)*((_QWORD *)v6 + 4);
      if (!v19)
        goto LABEL_99;
    }
    v19[6] += 2;
    while (1)
    {
      this = v19;
      if (((v3[8] >> ((*((unsigned __int16 *)v19 + 14) >> 12) - 1)) & 1) != 0)
      {
        v22 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = v19;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v22, a2);
              this = (unsigned int *)*((_QWORD *)v3 + 5);
            }
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        *(_QWORD *)a3 = this;
        goto LABEL_100;
      }
      if (v19 == *(unsigned int **)v5)
      {
        if (v19[6] == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
        }
        else
        {
          v19[6] -= 2;
        }
LABEL_99:
        *(_QWORD *)a3 = 0;
LABEL_100:
        *(_DWORD *)(a3 + 16) = 0;
        return this;
      }
      v19 = (unsigned int *)(*((_QWORD *)v19 + 6) & 0xFFFFFFFFFFFFLL);
      if (v19)
      {
        if ((*(_WORD *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          do
          {
            v21 = *((_QWORD *)v19 + 11);
            if (!v21)
              break;
            v19 = (unsigned int *)*((_QWORD *)v19 + 11);
          }
          while ((*(_WORD *)(v21 + 28) & 4) != 0);
        }
      }
      else
      {
        v19 = (unsigned int *)*((_QWORD *)this + 4);
        if (!v19)
        {
          v20 = 1;
          goto LABEL_78;
        }
      }
      v20 = 0;
      v19[6] += 2;
LABEL_78:
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
      if ((v20 & 1) != 0)
        goto LABEL_99;
    }
  }
  v6[6] += 2;
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  if (v6 == v7)
  {
LABEL_89:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_90;
  }
LABEL_3:
  v8 = *((_QWORD *)v6 + 6) & 0xFFFFFFFFFFFFLL;
  if (!v8)
    goto LABEL_53;
  while (1)
  {
    *(_DWORD *)(v8 + 24) += 2;
    if (v6[6] == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      v6[6] -= 2;
    }
    if (*((_QWORD *)v3 + 3))
    {
      WebCore::NodeIteratorBase::acceptNodeSlowCase(v5, (WebCore::Node *)v8, (uint64_t)&v30);
      if (v32)
      {
        if (v32 == 1)
        {
          v9 = v31;
          v31 = 0;
          *(_BYTE *)a3 = v30;
          *(_QWORD *)(a3 + 8) = v9;
          v10 = 1;
          *(_DWORD *)(a3 + 16) = 1;
          v6 = (unsigned int *)v8;
          goto LABEL_41;
        }
        goto LABEL_120;
      }
      v12 = v30;
      if (v30 == 2)
      {
        v13 = 0;
        v10 = 7;
        v6 = (unsigned int *)v8;
LABEL_42:
        ((void (*)(unsigned __int16 *, unsigned __int16 *))off_1E33A8760[v13])(&v27, &v30);
        goto LABEL_43;
      }
      if ((*(_WORD *)(v8 + 28) & 4) == 0)
        goto LABEL_34;
    }
    else
    {
      v11 = *(unsigned __int16 *)(v8 + 28);
      if (((v3[8] >> ((v11 >> 12) - 1)) & 1) != 0)
        v12 = 1;
      else
        v12 = 3;
      v30 = v12;
      v32 = 0;
      if ((v11 & 4) == 0)
        goto LABEL_34;
    }
    v14 = *(unsigned int **)(v8 + 88);
    if (v14)
      break;
LABEL_34:
    v6 = (unsigned int *)v8;
LABEL_35:
    if (v12 == 1)
    {
      v16 = *((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 5) = v6;
      if (v16)
      {
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
            v6 = (unsigned int *)*((_QWORD *)v3 + 5);
          }
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
      }
      *(_QWORD *)a3 = v6;
      *(_DWORD *)(a3 + 16) = 0;
      v10 = 1;
      v6 = 0;
    }
    else
    {
LABEL_40:
      v10 = 0;
    }
LABEL_41:
    v13 = v32;
    if (v32 != -1)
      goto LABEL_42;
LABEL_43:
    if (v10 != 7 && v10)
      goto LABEL_90;
    v8 = *((_QWORD *)v6 + 6) & 0xFFFFFFFFFFFFLL;
    if (!v8)
    {
      v7 = *(unsigned int **)v5;
LABEL_53:
      this = v6;
      v6 = v7;
      if (this == v7)
        goto LABEL_89;
      v6 = (unsigned int *)*((_QWORD *)this + 4);
      if (!v6)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 16) = 0;
        goto LABEL_91;
      }
      v6[6] += 2;
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
      if (*((_QWORD *)v3 + 3))
      {
        WebCore::NodeIteratorBase::acceptNodeSlowCase(v5, (WebCore::Node *)v6, (uint64_t)&v30);
        if (v32)
        {
          if (v32 != 1)
            goto LABEL_120;
          v26 = v31;
          v31 = 0;
          *(_BYTE *)a3 = v30;
          *(_QWORD *)(a3 + 8) = v26;
          v25 = 1;
          goto LABEL_118;
        }
        v18 = v30;
      }
      else
      {
        if (((v3[8] >> ((*((unsigned __int16 *)v6 + 14) >> 12) - 1)) & 1) != 0)
          v18 = 1;
        else
          v18 = 3;
        v30 = v18;
        v32 = 0;
      }
      if (v18 == 1)
      {
        v24 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = v6;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
            goto LABEL_121;
          *(_DWORD *)(v24 + 24) -= 2;
        }
        goto LABEL_115;
      }
      v7 = *(unsigned int **)v5;
      if (v6 == *(unsigned int **)v5)
        goto LABEL_89;
      goto LABEL_3;
    }
  }
  while (1)
  {
    v6 = v14;
    v14[6] += 2;
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    if (!*((_QWORD *)v3 + 3))
    {
      v15 = *((unsigned __int16 *)v6 + 14);
      if (((v3[8] >> ((v15 >> 12) - 1)) & 1) != 0)
        v12 = 1;
      else
        v12 = 3;
      if ((v15 & 4) == 0)
        goto LABEL_35;
      goto LABEL_30;
    }
    WebCore::NodeIteratorBase::acceptNodeSlowCase(v5, (WebCore::Node *)v6, (uint64_t)&v27);
    if (v29)
      break;
    v12 = v27;
    if (v27 == 2)
      goto LABEL_40;
    if ((v6[7] & 4) == 0)
      goto LABEL_35;
LABEL_30:
    v14 = (unsigned int *)*((_QWORD *)v6 + 11);
    v8 = (uint64_t)v6;
    if (!v14)
      goto LABEL_35;
  }
  if (v29 == 1)
  {
    v17 = v28;
    *(_BYTE *)a3 = v27;
    *(_QWORD *)(a3 + 8) = v17;
    v10 = 1;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_41;
  }
LABEL_120:
  v24 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_121:
  if ((*(_WORD *)(v24 + 30) & 0x400) != 0)
  {
LABEL_115:
    v25 = 0;
    *(_QWORD *)a3 = v6;
    v6 = 0;
LABEL_118:
    *(_DWORD *)(a3 + 16) = v25;
    goto LABEL_119;
  }
  this = WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
  v25 = v32;
  *(_QWORD *)a3 = *((_QWORD *)v3 + 5);
  *(_DWORD *)(a3 + 16) = 0;
  if (v25 != -1)
  {
    v6 = 0;
LABEL_119:
    ((void (*)(unsigned __int16 *, unsigned __int16 *))off_1E33A8760[v25])(&v27, &v30);
LABEL_90:
    this = v6;
    if (v6)
    {
LABEL_91:
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::TreeWalker::nextNode@<X0>(unsigned int *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  BOOL v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  WebCore::Node *v15;
  WebCore::Node *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WebCore::Node *v21;
  uint64_t v22;
  int v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  BOOL v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::TrustedHTML *v29;
  WebCore::Node *v30;
  __int16 v31;
  uint64_t v32;
  unsigned int v33;
  WebCore::Node *v34;
  WebCore::Node *v35;

  v3 = (uint64_t)this;
  v5 = (WebCore::Node *)(this + 4);
  if (*((_QWORD *)this + 3))
  {
    v15 = (WebCore::Node *)*((_QWORD *)this + 5);
    *((_DWORD *)v15 + 6) += 2;
    v35 = v15;
LABEL_43:
    while (v35 && (*((_WORD *)v35 + 14) & 4) != 0)
    {
      v17 = (WebCore::Node *)*((_QWORD *)v35 + 10);
      if (!v17)
        break;
      *((_DWORD *)v17 + 6) += 2;
      v34 = v17;
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v35, (uint64_t *)&v34);
      WebCore::NodeIteratorBase::acceptNode((WebCore::NodeIteratorBase *)&v31, v5, (unsigned __int16 *)v35);
      if (v33)
      {
        if (v33 != 1)
        {
LABEL_98:
          v29 = (WebCore::TrustedHTML *)std::__throw_bad_variant_access[abi:sn180100]();
          return (unsigned int *)WebCore::TrustedHTML::bisoHeap(v29);
        }
        v18 = v32;
        v32 = 0;
        *(_BYTE *)a3 = v31;
        *(_QWORD *)(a3 + 8) = v18;
        v19 = 1;
        *(_DWORD *)(a3 + 16) = 1;
        v20 = 1;
      }
      else if (v31 == 1)
      {
        v30 = v35;
        v35 = 0;
        *(_QWORD *)a3 = WebCore::TreeWalker::setCurrent(v3, (uint64_t *)&v30);
        *(_DWORD *)(a3 + 16) = 0;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v30);
        v20 = v33;
        v19 = 1;
        if (v33 == -1)
          goto LABEL_52;
      }
      else
      {
        v20 = 0;
        if (v31 == 2)
          v19 = 7;
        else
          v19 = 0;
      }
      ((void (*)(WebCore::Node **, __int16 *))off_1E33A8760[v20])(&v30, &v31);
LABEL_52:
      v21 = v34;
      v34 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, a2);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      if (v19)
      {
        if (v19 == 7)
          goto LABEL_66;
LABEL_91:
        this = (unsigned int *)v35;
        v35 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            this[6] -= 2;
          }
        }
        return this;
      }
    }
    while (1)
    {
LABEL_66:
      v24 = v35;
      if (v35 == *(WebCore::Node **)v5)
      {
LABEL_90:
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 16) = 0;
        goto LABEL_91;
      }
      while (1)
      {
        v25 = (WebCore::Node *)*((_QWORD *)v24 + 7);
        if (v25)
          break;
        v24 = (WebCore::Node *)*((_QWORD *)v24 + 4);
        if (v24)
          v26 = v24 == *(WebCore::Node **)v5;
        else
          v26 = 1;
        if (v26)
          goto LABEL_90;
      }
      *((_DWORD *)v25 + 6) += 2;
      v34 = v25;
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v35, (uint64_t *)&v34);
      WebCore::NodeIteratorBase::acceptNode((WebCore::NodeIteratorBase *)&v31, v5, (unsigned __int16 *)v35);
      if (v33)
      {
        if (v33 != 1)
          goto LABEL_98;
        v27 = v32;
        v32 = 0;
        *(_BYTE *)a3 = v31;
        *(_QWORD *)(a3 + 8) = v27;
        v23 = 1;
        *(_DWORD *)(a3 + 16) = 1;
        v22 = 1;
      }
      else if (v31 == 1)
      {
        v30 = v35;
        v35 = 0;
        *(_QWORD *)a3 = WebCore::TreeWalker::setCurrent(v3, (uint64_t *)&v30);
        *(_DWORD *)(a3 + 16) = 0;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v30);
        v22 = v33;
        v23 = 1;
        if (v33 == -1)
          goto LABEL_78;
      }
      else
      {
        v22 = 0;
        if (v31 == 3)
          v23 = 5;
        else
          v23 = 0;
      }
      ((void (*)(WebCore::Node **, __int16 *))off_1E33A8760[v22])(&v30, &v31);
LABEL_78:
      v28 = v34;
      v34 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, a2);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      if (v23)
      {
        if (v23 != 5)
          goto LABEL_91;
        goto LABEL_43;
      }
    }
  }
  v6 = *((_QWORD *)this + 5);
  v7 = *((_QWORD *)this + 2);
  if ((*(_WORD *)(v6 + 28) & 4) == 0 || (v8 = *(unsigned int **)(v6 + 80)) == 0)
  {
    if (v6 == v7)
    {
LABEL_5:
      *(_QWORD *)a3 = 0;
      goto LABEL_24;
    }
    while (1)
    {
      v8 = *(unsigned int **)(v6 + 56);
      if (v8)
        break;
      v6 = *(_QWORD *)(v6 + 32);
      if (v6)
        v9 = v6 == v7;
      else
        v9 = 1;
      if (v9)
        goto LABEL_5;
    }
  }
  v8[6] += 2;
  while (1)
  {
    this = v8;
    v10 = *((unsigned __int16 *)v8 + 14);
    if (((*(_DWORD *)(v3 + 32) >> ((v10 >> 12) - 1)) & 1) != 0)
      break;
    v11 = *(unsigned int **)v5;
    if ((v10 & 4) == 0 || (v8 = (unsigned int *)*((_QWORD *)v8 + 10)) == 0)
    {
      if (this == v11)
        goto LABEL_37;
      v8 = (unsigned int *)*((_QWORD *)this + 7);
      if (!v8)
      {
        v13 = this;
        while (1)
        {
          v13 = (unsigned int *)*((_QWORD *)v13 + 4);
          if (!v13 || v13 == v11)
            break;
          v8 = (unsigned int *)*((_QWORD *)v13 + 7);
          if (v8)
            goto LABEL_29;
        }
LABEL_37:
        v8 = 0;
        goto LABEL_16;
      }
    }
LABEL_29:
    v8[6] += 2;
LABEL_16:
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
    else
    {
      this[6] -= 2;
    }
    if (!v8)
      goto LABEL_5;
  }
  v12 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v8;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
        this = *(unsigned int **)(v3 + 40);
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  *(_QWORD *)a3 = this;
LABEL_24:
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

void *WebCore::TrustedHTML::bisoHeap(WebCore::TrustedHTML *this)
{
  return &WebCore::TrustedHTML::bisoHeap(void)::heap;
}

uint64_t WebCore::TrustedHTML::operator new(uint64_t this)
{
  if (this == 24)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::TrustedHTML::create@<X0>(WebCore::TrustedHTML *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v6;

  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  v6 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v6 += 2;
  *(_QWORD *)(result + 16) = v6;
  *a2 = result;
  return result;
}

uint64_t WebCore::TrustedHTML::TrustedHTML(uint64_t this, const WTF::String *a2)
{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 16) = v2;
  return this;
}

{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 16) = v2;
  return this;
}

void *WebCore::TrustedScript::bisoHeap(WebCore::TrustedScript *this)
{
  return &WebCore::TrustedScript::bisoHeap(void)::heap;
}

uint64_t WebCore::TrustedScript::operator new(uint64_t this)
{
  if (this == 24)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::TrustedScript::create@<X0>(WebCore::TrustedScript *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v6;

  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  v6 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v6 += 2;
  *(_QWORD *)(result + 16) = v6;
  *a2 = result;
  return result;
}

uint64_t WebCore::TrustedScript::TrustedScript(uint64_t this, const WTF::String *a2)
{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 16) = v2;
  return this;
}

{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 16) = v2;
  return this;
}

void *WebCore::TrustedScriptURL::bisoHeap(WebCore::TrustedScriptURL *this)
{
  return &WebCore::TrustedScriptURL::bisoHeap(void)::heap;
}

uint64_t WebCore::TrustedScriptURL::operator new(uint64_t this)
{
  if (this == 24)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::TrustedScriptURL::create@<X0>(WebCore::TrustedScriptURL *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v6;

  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  v6 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v6 += 2;
  *(_QWORD *)(result + 16) = v6;
  *a2 = result;
  return result;
}

uint64_t WebCore::TrustedScriptURL::TrustedScriptURL(uint64_t this, const WTF::String *a2)
{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 16) = v2;
  return this;
}

{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 16) = v2;
  return this;
}

WTF *WebCore::processValueWithDefaultPolicy@<X0>(WTF *result@<X0>, WebCore::DOMWindow *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  WTF *v8;
  WebCore::WindowOrWorkerGlobalScopeTrustedTypes *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  uint64_t *v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  BOOL v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  bmalloc::api *v69;
  void *v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unsigned int v73;
  WebCore::WorkerGlobalScope *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unsigned int v78;
  WTF *v79;
  char v80;

  v7 = (int)a2;
  v8 = result;
  if (!*((_BYTE *)result + 274))
  {
    *((_DWORD *)result - 42) += 2;
    v10 = (WebCore::WindowOrWorkerGlobalScopeTrustedTypes *)*((_QWORD *)result + 63);
    if (v10)
    {
      ++*((_DWORD *)v10 + 6);
      result = (WTF *)WebCore::WindowOrWorkerGlobalScopeTrustedTypes::trustedTypes(v10, a2);
      v11 = *((_QWORD *)result + 4);
      if (v11)
        ++*(_DWORD *)(v11 + 8);
      if (*((_DWORD *)v10 + 6) == 1)
        result = (WTF *)(*(uint64_t (**)(WebCore::WindowOrWorkerGlobalScopeTrustedTypes *))(*(_QWORD *)v10 + 72))(v10);
      else
        --*((_DWORD *)v10 + 6);
    }
    else
    {
      v11 = 0;
    }
    if (*((_DWORD *)v8 - 42) == 2)
    {
      if ((*((_WORD *)v8 - 81) & 0x400) == 0)
        result = (WTF *)WebCore::Node::removedLastRef((WTF *)((char *)v8 - 192));
    }
    else
    {
      *((_DWORD *)v8 - 42) -= 2;
    }
    goto LABEL_9;
  }
  result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 64))(result);
  if ((_DWORD)result)
  {
    ++*((_DWORD *)v8 + 78);
    result = (WTF *)WebCore::WindowOrWorkerGlobalScopeTrustedTypes::trustedTypes(v8, v74);
    v11 = *((_QWORD *)result + 4);
    if (v11)
      ++*(_DWORD *)(v11 + 8);
    if (*((_DWORD *)v8 + 78) == 1)
      goto LABEL_107;
    --*((_DWORD *)v8 + 78);
    while (1)
    {
LABEL_9:
      if (!v11)
        break;
      v12 = (_QWORD *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v8 + 344))(v8);
      if (v7 && v7 != 2 && v7 != 1 || (WTF::StringImpl::createWithoutCopyingNonEmpty(), (v14 = v76) == 0))
      {
        v19 = v12[5246];
        goto LABEL_29;
      }
      v15 = *((_DWORD *)v76 + 1);
      if (v15)
      {
        if (v15 != 1)
          goto LABEL_28;
        v16 = (unsigned __int8 *)*((_QWORD *)v76 + 1);
        if ((*((_BYTE *)v76 + 16) & 4) != 0)
        {
          v17 = *v16;
        }
        else
        {
          v17 = *(unsigned __int16 *)v16;
          if (v17 > 0xFF)
          {
LABEL_28:
            v19 = JSC::JSString::create((uint64_t)v12, &v76);
            v14 = v76;
            v76 = 0;
            if (!v14)
              goto LABEL_29;
            goto LABEL_22;
          }
          v17 = v17;
        }
        v18 = &v12[v17 + 5277];
      }
      else
      {
        v18 = v12 + 5246;
      }
      v19 = *v18;
LABEL_22:
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
LABEL_29:
      v20 = *a4;
      if (!*a4)
        goto LABEL_96;
      v21 = *(_DWORD *)(v20 + 4);
      if (v21 == 1)
      {
        v71 = *(unsigned __int8 **)(v20 + 8);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          v72 = *v71;
LABEL_92:
          v23 = v12[v72 + 5277];
          goto LABEL_33;
        }
        v73 = *(unsigned __int16 *)v71;
        if (v73 <= 0xFF)
        {
          v72 = v73;
          goto LABEL_92;
        }
      }
      else if (!v21)
      {
LABEL_96:
        v23 = v12[5246];
        goto LABEL_33;
      }
      *(_DWORD *)v20 += 2;
      v76 = (WTF::StringImpl *)v20;
      v23 = JSC::JSString::create((uint64_t)v12, &v76);
      v24 = v76;
      v76 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v22);
        else
          *(_DWORD *)v24 -= 2;
      }
LABEL_33:
      v75 = a5;
      v25 = v12[89];
      if (!v25)
      {
        JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 84));
        v25 = v12[89];
      }
      v12[89] = *(_QWORD *)v25;
      *(_QWORD *)(v25 + 16) = 0;
      v26 = (uint64_t *)(v25 + 16);
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = 0;
      if (v19)
        v27 = (v19 & 0xFFFE000000000002) == 0;
      else
        v27 = 0;
      if (v27)
      {
        v28 = *(unint64_t **)((v25 & 0xFFFFFFFFFFFFF000) + 0x10);
        v29 = v28[3];
        v28 += 3;
        *(_QWORD *)v25 = v29;
        *(_QWORD *)(v25 + 8) = v28;
        *v28 = v25;
        *(_QWORD *)(v29 + 8) = v25;
      }
      *v26 = v19;
      v30 = v12[89];
      if (!v30)
      {
        JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 84));
        v30 = v12[89];
      }
      a5 = a3;
      v12[89] = *(_QWORD *)v30;
      *(_QWORD *)(v30 + 16) = 0;
      v31 = (uint64_t *)(v30 + 16);
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      if (v23)
        v32 = (v23 & 0xFFFE000000000002) == 0;
      else
        v32 = 0;
      if (v32)
      {
        v33 = *(unint64_t **)((v30 & 0xFFFFFFFFFFFFF000) + 0x10);
        v34 = v33[3];
        v33 += 3;
        *(_QWORD *)v30 = v34;
        *(_QWORD *)(v30 + 8) = v33;
        *v33 = v30;
        *(_QWORD *)(v34 + 8) = v30;
      }
      *v31 = v23;
      v35 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v35 = 2;
      *(_QWORD *)(v35 + 8) = 0;
      *(_QWORD *)(v35 + 16) = 0;
      v79 = (WTF *)v35;
      v38 = *v26;
      v37 = (unint64_t)(v26 - 2);
      v36 = v38;
      a3 = **(_QWORD **)((v37 & 0xFFFFFFFFFFFFF000) + 0x10);
      v39 = *(_QWORD **)(a3 + 712);
      if (!v39)
      {
        JSC::HandleSet::grow((JSC::HandleSet *)(a3 + 672));
        v39 = *(_QWORD **)(a3 + 712);
      }
      *(_QWORD *)(a3 + 712) = *v39;
      *v39 = 0;
      v39[1] = 0;
      v39[2] = 0;
      *(_QWORD *)(v35 + 8) = v39 + 2;
      JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::set((uint64_t **)(v35 + 8), v36);
      if (*(_DWORD *)v35 < 2u)
      {
        __break(0xC471u);
        JUMPOUT(0x195A586D0);
      }
      v42 = *(_QWORD *)(v35 + 16);
      v41 = (uint64_t **)(v35 + 16);
      v40 = v42;
      v44 = (uint64_t *)*v31;
      v43 = (unint64_t)(v31 - 2);
      a4 = v44;
      if (!v40)
      {
        a3 = **(_QWORD **)((v43 & 0xFFFFFFFFFFFFF000) + 0x10);
        v45 = *(_QWORD **)(a3 + 712);
        if (!v45)
        {
          JSC::HandleSet::grow((JSC::HandleSet *)(a3 + 672));
          v45 = *(_QWORD **)(a3 + 712);
        }
        *(_QWORD *)(a3 + 712) = *v45;
        *v45 = 0;
        v45[1] = 0;
        v45[2] = 0;
        *v41 = v45 + 2;
      }
      JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::set(v41, (uint64_t)a4);
      v46 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF000) + 0x10);
      v47 = *(_QWORD **)(v43 + 8);
      if (v47)
      {
        v48 = *(_QWORD *)v43;
        *v47 = *(_QWORD *)v43;
        *(_QWORD *)(v48 + 8) = v47;
        *(_QWORD *)v43 = 0;
        *(_QWORD *)(v43 + 8) = 0;
      }
      *(_QWORD *)v43 = *(_QWORD *)(v46 + 40);
      *(_QWORD *)(v46 + 40) = v43;
      v49 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF000) + 0x10);
      v50 = *(_QWORD **)(v37 + 8);
      if (v50)
      {
        v51 = *(_QWORD *)v37;
        *v50 = *(_QWORD *)v37;
        *(_QWORD *)(v51 + 8) = v50;
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v37 + 8) = 0;
      }
      *(_QWORD *)v37 = *(_QWORD *)(v49 + 40);
      *(_QWORD *)(v49 + 40) = v37;
      WebCore::TrustedTypePolicy::getPolicyValue((unsigned __int8 *)v11, v7, a5, (uint64_t)&v79, 1, (uint64_t)&v76);
      v8 = (WTF *)v78;
      if (!v78)
      {
        v54 = v76;
        v76 = 0;
        if (!v54)
        {
          *(_DWORD *)(v75 + 16) = 0;
          goto LABEL_73;
        }
        switch(v7)
        {
          case 2:
            v58 = bmalloc::api::isoAllocate();
            *(_QWORD *)v58 = 0;
            *(_DWORD *)(v58 + 8) = 1;
            v56 = *(_DWORD *)v54;
            *(_DWORD *)v54 += 2;
            *(_QWORD *)(v58 + 16) = v54;
            *(_QWORD *)v75 = v58;
            v57 = 4;
            break;
          case 1:
            v59 = bmalloc::api::isoAllocate();
            *(_QWORD *)v59 = 0;
            *(_DWORD *)(v59 + 8) = 1;
            v56 = *(_DWORD *)v54;
            *(_DWORD *)v54 += 2;
            *(_QWORD *)(v59 + 16) = v54;
            *(_QWORD *)v75 = v59;
            v57 = 3;
            break;
          case 0:
            v55 = bmalloc::api::isoAllocate();
            *(_QWORD *)v55 = 0;
            *(_DWORD *)(v55 + 8) = 1;
            v56 = *(_DWORD *)v54;
            *(_DWORD *)v54 += 2;
            *(_QWORD *)(v55 + 16) = v54;
            *(_QWORD *)v75 = v55;
            v57 = 2;
            break;
          default:
            *(_DWORD *)(v75 + 16) = 0;
            v56 = *(_DWORD *)v54 - 2;
            if (*(_DWORD *)v54 == 2)
            {
LABEL_86:
              WTF::StringImpl::destroy(v54, v52);
              goto LABEL_73;
            }
LABEL_72:
            *(_DWORD *)v54 = v56;
LABEL_73:
            ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[(_QWORD)v8])(&v80, &v76);
            result = v79;
            v79 = 0;
            if (result)
            {
              v61 = (uint64_t *)((char *)result + 8);
              v62 = *(unsigned int *)result;
              if ((_DWORD)v62)
              {
                v63 = 8 * v62;
                do
                {
                  v64 = *v61;
                  if (*v61)
                  {
                    v65 = (uint64_t *)(v64 - 16);
                    v66 = *(_QWORD *)(((v64 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v67 = *(uint64_t **)(v64 - 8);
                    if (v67)
                    {
                      v68 = *v65;
                      *v67 = *v65;
                      *(_QWORD *)(v68 + 8) = v67;
                      *v65 = 0;
                      v65[1] = 0;
                    }
                    *v65 = *(_QWORD *)(v66 + 40);
                    *(_QWORD *)(v66 + 40) = v65;
                    *v61 = 0;
                  }
                  ++v61;
                  v63 -= 8;
                }
                while (v63);
              }
              result = (WTF *)WTF::fastFree(result, v60);
            }
            if (*(_DWORD *)(v11 + 8) == 1)
            {
              WebCore::TrustedTypePolicy::~TrustedTypePolicy((WebCore::TrustedTypePolicy *)v11, (WTF::StringImpl *)v60);
              return (WTF *)bmalloc::api::isoDeallocate(v69, v70);
            }
            else
            {
              --*(_DWORD *)(v11 + 8);
            }
            return result;
        }
        *(_DWORD *)(v75 + 16) = v57;
        if (!v56)
          goto LABEL_86;
        goto LABEL_72;
      }
      if (v78 == 1)
      {
        v53 = v77;
        v77 = 0;
        *(_BYTE *)v75 = (_BYTE)v76;
        *(_QWORD *)(v75 + 8) = v53;
        *(_DWORD *)(v75 + 16) = 1;
        goto LABEL_73;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v8 + 40))(v8);
    }
  }
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

unsigned __int8 *WebCore::TrustedTypePolicy::getPolicyValue@<X0>(unsigned __int8 *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  unsigned __int8 *v14;
  char v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  int64x2_t v25;
  const char *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  _QWORD v33[2];
  int64x2_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;

  v10 = result;
  LODWORD(v31) = 2;
  v32 = 1;
  if (a2 == 2)
  {
    v14 = result + 48;
    if (__ldaxr(result + 48))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_30;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 48);
LABEL_30:
    v18 = (_DWORD *)*((_QWORD *)v10 + 5);
    if (!v18)
    {
LABEL_15:
      v19 = __ldxr(v14);
      if (v19 == 1)
      {
        if (!__stlxr(0, v14))
        {
          if (!v18)
            goto LABEL_51;
          goto LABEL_21;
        }
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (!v18)
        goto LABEL_51;
LABEL_21:
      result = (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 40))(v18);
      if (!(_DWORD)result)
        goto LABEL_49;
      (*(void (**)(const char **__return_ptr, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(&v35, v18, a3, a4);
      LOBYTE(v37) = 0;
      LODWORD(v38) = -1;
      v20 = v36;
      if ((_DWORD)v36 != -1)
      {
        ((void (*)(int64x2_t *, const char **, const char **))off_1E33A87E0[v36])(&v34, &v37, &v35);
        LODWORD(v38) = v20;
      }
      result = (unsigned __int8 *)std::__variant_detail::__impl<WTF::String,WebCore::CallbackResultType>::__swap[abi:sn180100]((uint64_t)&v37, (uint64_t)&v31);
      if ((_DWORD)v38 != -1)
        result = (unsigned __int8 *)((uint64_t (*)(int64x2_t *, const char **))off_1E33A87D0[v38])(&v34, &v37);
      if ((_DWORD)v36 == -1)
        goto LABEL_49;
LABEL_48:
      result = (unsigned __int8 *)((uint64_t (*)(const char **, const char **))off_1E33A87D0[v36])(&v37, &v35);
LABEL_49:
      if (v18[4] == 1)
        result = (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
      else
        --v18[4];
      goto LABEL_51;
    }
LABEL_14:
    ++v18[4];
    goto LABEL_15;
  }
  if (a2 == 1)
  {
    v14 = result + 48;
    if (__ldaxr(result + 48))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_13;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 48);
LABEL_13:
    v18 = (_DWORD *)*((_QWORD *)v10 + 4);
    if (!v18)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (a2)
  {
    v17 = 33;
    goto LABEL_61;
  }
  v12 = result + 48;
  if (__ldaxr(result + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_34;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 48);
LABEL_34:
  v18 = (_DWORD *)*((_QWORD *)v10 + 3);
  if (v18)
    ++v18[4];
  v21 = __ldxr(v12);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v12))
LABEL_40:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  if (v18)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 40))(v18);
    if (!(_DWORD)result)
      goto LABEL_49;
    (*(void (**)(const char **__return_ptr, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(&v35, v18, a3, a4);
    LOBYTE(v37) = 0;
    LODWORD(v38) = -1;
    v22 = v36;
    if ((_DWORD)v36 != -1)
    {
      ((void (*)(int64x2_t *, const char **, const char **))off_1E33A87E0[v36])(&v34, &v37, &v35);
      LODWORD(v38) = v22;
    }
    result = (unsigned __int8 *)std::__variant_detail::__impl<WTF::String,WebCore::CallbackResultType>::__swap[abi:sn180100]((uint64_t)&v37, (uint64_t)&v31);
    if ((_DWORD)v38 != -1)
      result = (unsigned __int8 *)((uint64_t (*)(int64x2_t *, const char **))off_1E33A87D0[v38])(&v34, &v37);
    if ((_DWORD)v36 == -1)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_51:
  if (!v32)
  {
    v23 = v31;
    v31 = 0;
LABEL_59:
    *(_QWORD *)a6 = v23;
    *(_DWORD *)(a6 + 16) = 0;
    goto LABEL_62;
  }
  if (v32 != 1)
    goto LABEL_78;
  if ((_DWORD)v31 != 1)
  {
    if ((_DWORD)v31)
    {
      if ((a5 & 1) != 0)
      {
        v23 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
        if (*MEMORY[0x1E0CBF6F0])
          *v23 += 2;
        goto LABEL_59;
      }
      v24 = (WTF::StringImpl *)*((_QWORD *)v10 + 2);
      if (v24)
        *(_DWORD *)v24 += 2;
      v29 = v24;
      if (a2 == 2)
      {
        v25 = vdupq_n_s64(0x10uLL);
        v26 = "createScriptURL";
      }
      else if (a2 == 1)
      {
        v25 = vdupq_n_s64(0xDuLL);
        v26 = "createScript";
      }
      else
      {
        v25 = vdupq_n_s64(0xBuLL);
        v26 = "createHTML";
      }
      v25.i64[0] = (uint64_t)v26;
      v37 = "Policy ";
      v38 = 8;
      v35 = "'s TrustedTypePolicyOptions did not specify a '";
      v36 = 48;
      v34 = v25;
      v33[0] = "' member.";
      v33[1] = 10;
      result = (unsigned __int8 *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v37, (uint64_t *)&v29, (uint64_t)&v35, (uint64_t)&v34, (uint64_t)v33, &v30);
      v28 = v30;
      if (v30)
      {
        *(_BYTE *)a6 = 33;
        *(_QWORD *)(a6 + 8) = v28;
        *(_DWORD *)(a6 + 16) = 1;
        result = (unsigned __int8 *)v29;
        v29 = 0;
        v30 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
          else
            *(_DWORD *)result -= 2;
        }
        goto LABEL_62;
      }
LABEL_79:
      __break(0xC471u);
      return result;
    }
LABEL_78:
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_79;
  }
  v17 = 37;
LABEL_61:
  *(_BYTE *)a6 = v17;
  *(_QWORD *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 16) = 1;
LABEL_62:
  if (v32 != -1)
    return (unsigned __int8 *)((uint64_t (*)(const char **, _DWORD **))off_1E33A87D0[v32])(&v37, &v31);
  return result;
}

WTF::StringImpl *WebCore::trustedTypeCompliantString@<X0>(WebCore::DOMWindow *a1@<X0>, WebCore::SecurityContext *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WebCore::ContentSecurityPolicy *v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  WebCore::ContentSecurityPolicy *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;

  v9 = *a3;
  if (*a3)
    *(_DWORD *)v9 += 2;
  v43 = v9;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::SecurityContext *))(*(_QWORD *)a2 + 136))(a2);
  if ((*((_QWORD *)result + 58) & 0x200000000000000) == 0)
  {
    *(_QWORD *)a5 = v9;
    *(_DWORD *)(a5 + 16) = 0;
    return result;
  }
  WebCore::SecurityContext::checkedContentSecurityPolicy(a2, (unsigned int **)&v42);
  v12 = v42;
  if (v42)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v44 = v39;
    v13 = WebCore::ContentSecurityPolicy::requireTrustedTypesForSinkGroup(v12, (const WTF::String *)&v44);
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v11);
      else
        *(_DWORD *)v39 -= 2;
    }
    if ((v13 & 1) != 0)
    {
      WebCore::processValueWithDefaultPolicy(a2, a1, (uint64_t)&v43, a4, (uint64_t)&v39);
      switch(v41)
      {
        case 0:
          goto LABEL_35;
        case 1:
          v14 = v40;
          v40 = 0;
          *(_BYTE *)a5 = (_BYTE)v39;
          *(_QWORD *)(a5 + 8) = v14;
          *(_DWORD *)(a5 + 16) = 1;
          goto LABEL_53;
        case -1:
          v33 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::StringImpl *)WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v33, v34, v35);
      }
      v44 = (WTF::StringImpl *)&v37;
      ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, WTF::StringImpl **))off_1E33A8780[v41])(&v38, &v44, &v39);
      v19 = v38;
      v38 = 0;
      v20 = v43;
      v43 = v19;
      if (!v20)
      {
LABEL_26:
        if (v19)
        {
          if (v41)
            goto LABEL_52;
          goto LABEL_35;
        }
        if (v41 == -1)
          goto LABEL_34;
        if (v41)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33A87A8[v41])(&v44, &v39);
LABEL_34:
          v41 = 0;
        }
LABEL_35:
        v22 = (unsigned int *)v42;
        if ((_DWORD)a1 == 2)
        {
          v23 = "TrustedScriptURL";
          v24 = 17;
        }
        else if ((_DWORD)a1 == 1)
        {
          v23 = "TrustedScript";
          v24 = 14;
        }
        else if ((_DWORD)a1)
        {
          v23 = 0;
          v24 = 0;
        }
        else
        {
          v23 = "TrustedHTML";
          v24 = 12;
        }
        WTF::String::String(&v44, (uint64_t)v23, v24);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (v43)
        {
          v25 = (const char *)*((_QWORD *)v43 + 1);
          v26 = *((unsigned int *)v43 + 1) | ((unint64_t)((*((_DWORD *)v43 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v25 = 0;
          v26 = 0x100000000;
        }
        v27 = WebCore::ContentSecurityPolicy::allowMissingTrustedTypesForSinkGroup((uint64_t)v22, &v44, a4, &v38, v25, v26);
        v28 = v38;
        v38 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v11);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = v44;
        v44 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v11);
          else
            *(_DWORD *)v29 -= 2;
        }
        if (!v27)
        {
          if ((_DWORD)a1 == 2)
          {
            v30 = "TrustedScriptURL";
            v31 = 17;
          }
          else if ((_DWORD)a1 == 1)
          {
            v30 = "TrustedScript";
            v31 = 14;
          }
          else if ((_DWORD)a1)
          {
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v30 = "TrustedHTML";
            v31 = 12;
          }
          WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v36, (uint64_t)v30, v31);
          v32 = v36;
          *(_BYTE *)a5 = 33;
          *(_QWORD *)(a5 + 8) = v32;
          *(_DWORD *)(a5 + 16) = 1;
          v36 = 0;
LABEL_53:
          if (v41 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33A87A8[v41])(&v44, &v39);
          goto LABEL_15;
        }
        v19 = v43;
LABEL_52:
        v43 = 0;
        *(_QWORD *)a5 = v19;
        *(_DWORD *)(a5 + 16) = 0;
        goto LABEL_53;
      }
      v21 = *(_DWORD *)v20 - 2;
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v11);
        v20 = v38;
        v38 = 0;
        if (!v20)
          goto LABEL_25;
        v21 = *(_DWORD *)v20 - 2;
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::destroy(v20, v11);
          goto LABEL_25;
        }
      }
      *(_DWORD *)v20 = v21;
LABEL_25:
      v19 = v43;
      goto LABEL_26;
    }
  }
  v15 = v43;
  v43 = 0;
  *(_QWORD *)a5 = v15;
  *(_DWORD *)(a5 + 16) = 0;
LABEL_15:
  v16 = (unsigned int *)v42;
  if (v42)
  {
    if (!atomic_load((unsigned int *)v42))
    {
      __break(0xC471u);
      JUMPOUT(0x195A58FF8);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD v5[2];
  _QWORD v6[2];

  v6[0] = "This assignment requires a ";
  v6[1] = 28;
  v5[0] = a2;
  v5[1] = a3;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v6, (uint64_t)v5, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

uint64_t WTF::switchOn<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>&&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>&,WTF::String const)::$_1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  WebCore *v6;
  WTF::AtomStringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  _QWORD v11[2];
  _QWORD *v12;

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v6 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::trustedTypeForAttribute(v6, v7, v8, v9, v10);
  }
  else
  {
    v12 = v11;
    return ((uint64_t (*)(_QWORD **))off_1E33A8860[v4])(&v12);
  }
}

uint64_t WebCore::trustedTypeForAttribute@<X0>(WebCore *this@<X0>, WTF::AtomStringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::StringImpl **a4@<X3>, WTF::StringImpl **a5@<X8>)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t result;
  WTF::AtomStringImpl *v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **v23;
  int v24;
  WTF *v25;
  void *v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  WTF::StringImpl **v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;
  WTF *v38;
  void *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WebCore::QualifiedName::QualifiedNameImpl *v43;
  WebCore::QualifiedName::QualifiedNameImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;

  *a5 = 0;
  a5[1] = 0;
  WTF::String::convertToASCIILowercase(this);
  v11 = *a3;
  if (*a3 && *((_DWORD *)v11 + 1))
  {
    if ((*((_BYTE *)v11 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase(v11, v10);
      v11 = v48;
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v11 = (WTF::StringImpl *)WebCore::HTMLNames::xhtmlNamespaceURI;
  if (WebCore::HTMLNames::xhtmlNamespaceURI)
LABEL_3:
    *(_DWORD *)v11 += 2;
LABEL_4:
  v46 = v11;
  v12 = *a4;
  if (!*a4 || !*((_DWORD *)v12 + 1))
  {
    v12 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((*((_BYTE *)v12 + 16) & 0x10) != 0)
  {
LABEL_6:
    *(_DWORD *)v12 += 2;
    goto LABEL_7;
  }
  WTF::AtomStringImpl::addSlowCase(v12, v10);
  v12 = v48;
LABEL_7:
  v45 = v12;
  v13 = v47;
  if (v47)
  {
    if ((*((_BYTE *)v47 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v47 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v47, v10);
      v13 = v48;
    }
  }
  v48 = v13;
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v44, MEMORY[0x1E0CBF2F8], &v48, &v46);
  v48 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  v15 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v15 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v15 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*a2, v14);
      v15 = v48;
    }
  }
  v48 = v15;
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v43, MEMORY[0x1E0CBF2F8], &v48, &v45);
  v48 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v45
    || !*a2
    || (result = WebCore::HTMLElement::eventNameForEventHandlerAttribute((WebCore::HTMLElement *)&v43, v16),
        !*(_QWORD *)result))
  {
    v27 = v44;
    if ((v44 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::iframeTag
       || *((_QWORD *)v44 + 3) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
       && *((_QWORD *)v44 + 4) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 32))
      && (v43 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::srcdocAttr
       || *((_QWORD *)v43 + 3) == *(_QWORD *)(WebCore::HTMLNames::srcdocAttr + 24)
       && *((_QWORD *)v43 + 4) == *(_QWORD *)(WebCore::HTMLNames::srcdocAttr + 32)))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = v48;
      a5[1] = v48;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = v48;
      *a5 = v48;
      v27 = v44;
    }
    else
    {
      v28 = 0;
      v29 = 0;
    }
    if ((v27 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::scriptTag
       || *((_QWORD *)v27 + 3) == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
       && *((_QWORD *)v27 + 4) == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 32))
      && (v43 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::srcAttr
       || *((_QWORD *)v43 + 3) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
       && *((_QWORD *)v43 + 4) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32)))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v31 = v48;
      a5[1] = v48;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v40);
        else
          *(_DWORD *)v29 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v30 = v48;
      *a5 = v48;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v16);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    else
    {
      v30 = v28;
      v31 = v29;
    }
    if (v44 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::scriptTag
      || *((_QWORD *)v44 + 3) == *(_QWORD *)(WebCore::SVGNames::scriptTag + 24)
      && *((_QWORD *)v44 + 4) == *(_QWORD *)(WebCore::SVGNames::scriptTag + 32))
    {
      if (v43 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::hrefAttr
        || (v41 = *((_QWORD *)v43 + 3), v41 == *(_QWORD *)(WebCore::SVGNames::hrefAttr + 24))
        && *((_QWORD *)v43 + 4) == *(_QWORD *)(WebCore::SVGNames::hrefAttr + 32)
        || v43 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::XLinkNames::hrefAttr
        || v41 == *(_QWORD *)(WebCore::XLinkNames::hrefAttr + 24)
        && *((_QWORD *)v43 + 4) == *(_QWORD *)(WebCore::XLinkNames::hrefAttr + 32))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::destroy(v31, v42);
            v30 = *a5;
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *a5 = v48;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v16);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
    }
    v32 = (WTF::StringImpl **)v43;
    v43 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v32);
        WTF::fastFree(v34, v35);
      }
      else
      {
        --*(_DWORD *)v32;
      }
    }
    v33 = (WTF::StringImpl **)v44;
    v44 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v33);
        WTF::fastFree(v36, v37);
      }
      else
      {
        --*(_DWORD *)v33;
      }
    }
    v23 = (WTF::StringImpl **)v45;
    if (!v45)
      goto LABEL_53;
    v24 = *(_DWORD *)v45 - 2;
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::destroy(v45, v16);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  v18 = *a2;
  if (v18)
  {
    v19 = *((_DWORD *)v18 + 1);
    *(_DWORD *)v18 += 2;
    if (v19 < 0 || (result = (v19 + 8), __OFADD__(v19, 8)))
    {
      v48 = 0;
      goto LABEL_112;
    }
    v20 = (*((unsigned __int8 *)v18 + 16) >> 2) & 1;
  }
  else
  {
    v20 = 1;
    result = 8;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (int8x16_t *)"Element ", 8u, (uint64_t)v18, &v48);
  if (!v48)
  {
LABEL_112:
    __break(0xC471u);
    return result;
  }
  a5[1] = v48;
  v48 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v21);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = (WTF::StringImpl **)v43;
  v43 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
      WTF::fastFree(v38, v39);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  v23 = (WTF::StringImpl **)v44;
  v44 = 0;
  if (!v23)
    goto LABEL_53;
  v24 = *(_DWORD *)v23 - 1;
  if (*(_DWORD *)v23 != 1)
  {
LABEL_52:
    *(_DWORD *)v23 = v24;
    goto LABEL_53;
  }
  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v23);
  WTF::fastFree(v25, v26);
LABEL_53:
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v16);
    else
      *(_DWORD *)v46 -= 2;
  }
  result = (uint64_t)v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::requireTrustedTypesForPreNavigationCheckPasses@<X0>(WebCore *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WebCore::ContentSecurityPolicy *v8;
  WTF::StringImpl *v9;
  int v10;
  const char *v11;
  __n128 v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  __int16 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51[2];

  result = (WTF::StringImpl *)WebCore::SecurityContext::contentSecurityPolicy(this);
  if (!result)
    goto LABEL_7;
  v8 = result;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v46 = v42;
  result = (WTF::StringImpl *)WebCore::ContentSecurityPolicy::requireTrustedTypesForSinkGroup(v8, (const WTF::String *)&v46);
  v10 = (int)result;
  if (!v42)
  {
LABEL_5:
    if ((_DWORD)result)
      goto LABEL_6;
LABEL_7:
    v13 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v13 += 2;
    *(_QWORD *)a3 = v13;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  if (*(_DWORD *)v42 != 2)
  {
    *(_DWORD *)v42 -= 2;
    goto LABEL_5;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(v42, v9);
  if (!v10)
    goto LABEL_7;
LABEL_6:
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 136))(this);
  if ((*((_QWORD *)result + 58) & 0x200000000000000) == 0)
    goto LABEL_7;
  v14 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
    v16 = v14[1];
    v17 = ((unint64_t)v14[4] >> 2) & 1;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 1;
  }
  {
    v41 = v15;
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", v11);
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v18;
    v42 = (WTF::StringImpl *)xmmword_1ECE86C80;
    v43 = v18;
    if (v18 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v42))
      {
        v19 = 165;
      }
      else
      {
        v19 = 92;
      }
    }
    else
    {
      v19 = 92;
    }
    word_1ECE86C90 = v19;
    v15 = v41;
    if (v16)
      goto LABEL_15;
LABEL_27:
    if (v17)
      WTF::String::String();
    else
      WTF::String::String();
    goto LABEL_30;
  }
  if (!v16)
    goto LABEL_27;
LABEL_15:
  PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v15, v16 | (v17 << 32), (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, &v50, v12);
LABEL_30:
  if (v50)
  {
    WTF::StringImpl::substring(v50);
    v20 = v42;
  }
  else
  {
    v20 = 0;
  }
  v49 = v20;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = v42;
  v51[0] = (uint64_t)v42;
  WebCore::processValueWithDefaultPolicy(this, (WebCore::DOMWindow *)1, (uint64_t)&v49, v51, (uint64_t)&v46);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (!v48)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v49)
    {
      v24 = (const char *)*((_QWORD *)v49 + 1);
      v25 = *((unsigned int *)v49 + 1) | ((unint64_t)((*((_DWORD *)v49 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v24 = 0;
      v25 = 0x100000000;
    }
    v26 = WebCore::ContentSecurityPolicy::allowMissingTrustedTypesForSinkGroup((uint64_t)v8, &v42, v51, &v45, v24, v25);
    v27 = v45;
    v45 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v22);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = (WTF::StringImpl *)v51[0];
    v51[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v22);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v42;
    v42 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v22);
        if ((v26 & 1) != 0)
          goto LABEL_50;
        goto LABEL_80;
      }
      *(_DWORD *)v29 -= 2;
    }
    if ((v26 & 1) != 0)
    {
LABEL_50:
      v30 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v30 += 2;
      *(_QWORD *)a3 = v30;
      *(_DWORD *)(a3 + 16) = 0;
      goto LABEL_82;
    }
LABEL_80:
    v42 = (WTF::StringImpl *)"This assignment requires a ";
    v43 = 28;
    v51[0] = (uint64_t)"TrustedScript";
    v51[1] = 14;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v42, (uint64_t)v51, &v44);
    v39 = v44;
    if (v44)
    {
      *(_BYTE *)a3 = 33;
      *(_QWORD *)(a3 + 8) = v39;
      *(_DWORD *)(a3 + 16) = 1;
      v44 = 0;
      goto LABEL_82;
    }
    goto LABEL_101;
  }
  if (v48 != 1)
  {
    if (v48 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v42 = (WTF::StringImpl *)&v45;
      ((void (*)(uint64_t *__return_ptr, WTF::StringImpl **, WTF::StringImpl **))off_1E33A8780[v48])(v51, &v42, &v46);
      v31 = (unsigned __int8 *)v51[0];
      if (!v51[0])
      {
        v34 = 1;
        v33 = 11;
LABEL_58:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v33, v34, (int8x16_t *)"javascript:", 0xBu, (uint64_t)v31, &v45);
        if (v45)
        {
          MEMORY[0x19AEA52D4](&v42, &v45, 0);
          v35 = v45;
          v45 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::destroy(v35, v22);
              if (v31)
              {
LABEL_63:
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v31, v22);
                else
                  *(_DWORD *)v31 -= 2;
              }
LABEL_65:
              v36 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
              v37 = v42;
              if ((v43 & 1) != 0)
                v36 = v42;
              if (v36)
                *(_DWORD *)v36 += 2;
              *(_QWORD *)a3 = v36;
              *(_DWORD *)(a3 + 16) = 0;
              v42 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, v22);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = (WTF::StringImpl *)v51[0];
              v51[0] = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, v22);
                else
                  *(_DWORD *)v38 -= 2;
              }
              goto LABEL_82;
            }
            *(_DWORD *)v35 -= 2;
          }
          if (v31)
            goto LABEL_63;
          goto LABEL_65;
        }
LABEL_101:
        __break(0xC471u);
        JUMPOUT(0x195A59C80);
      }
      v32 = *(_DWORD *)(v51[0] + 4);
      *(_DWORD *)v51[0] += 2;
      if ((v32 & 0x80000000) == 0)
      {
        v33 = (v32 + 11);
        if (!__OFADD__(v32, 11))
        {
          v34 = (v31[16] >> 2) & 1;
          goto LABEL_58;
        }
      }
    }
    v45 = 0;
    goto LABEL_101;
  }
  v23 = v47;
  v47 = 0;
  *(_BYTE *)a3 = (_BYTE)v46;
  *(_QWORD *)(a3 + 8) = v23;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_82:
  if (v48 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33A87A8[v48])(&v42, &v46);
  v40 = v49;
  v49 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v22);
    else
      *(_DWORD *)v40 -= 2;
  }
  result = v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::processNodeOrStringAsTrustedType@<X0>(unsigned int *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::SecurityContext *v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD v30[2];
  int v31;

  v6 = result;
  v8 = a3[2];
  if (v8)
  {
    if (v8 == 1)
    {
      v9 = *(_QWORD *)result;
      result = (unsigned int *)bmalloc::api::isoAllocate();
      v10 = result;
      *(_OWORD *)(result + 2) = xmmword_1968BC9D0;
      *((_QWORD *)result + 3) = 0x300300000002;
      *((_QWORD *)result + 4) = 0;
      *((_QWORD *)result + 5) = v9 + 96;
      *((_OWORD *)result + 3) = 0u;
      *((_OWORD *)result + 4) = 0u;
      ++*(_DWORD *)(v9 + 3324);
      v11 = *(_DWORD **)a3;
      if (*(_QWORD *)a3 || (v11 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
        *v11 += 2;
      *((_QWORD *)result + 10) = v11;
      *(_QWORD *)result = off_1E33A8078;
      goto LABEL_7;
    }
    goto LABEL_29;
  }
  v10 = *(unsigned int **)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_37;
  v21 = v10[6];
  v10[6] = v21 + 2;
  if ((v10[7] & 2) == 0)
  {
    if (v21)
    {
      v10[6] = v21;
    }
    else if ((*((_WORD *)v10 + 15) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      v8 = a3[2];
LABEL_29:
      if (v8 == 2)
      {
        v22 = *(_QWORD *)v6;
        v23 = *(unsigned int **)(*(_QWORD *)a3 + 16);
        if (v23)
          *v23 += 2;
        result = (unsigned int *)bmalloc::api::isoAllocate();
        v10 = result;
        *(_OWORD *)(result + 2) = xmmword_1968BC9D0;
        *((_QWORD *)result + 3) = 0x300300000002;
        *((_QWORD *)result + 4) = 0;
        *((_QWORD *)result + 5) = v22 + 96;
        *((_OWORD *)result + 3) = 0u;
        *((_OWORD *)result + 4) = 0u;
        ++*(_DWORD *)(v22 + 3324);
        if (!v23)
        {
          v25 = (_DWORD *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
          {
            *v25 += 2;
            *((_QWORD *)result + 10) = v25;
          }
          else
          {
            *((_QWORD *)result + 10) = 0;
          }
          *(_QWORD *)result = off_1E33A8078;
          goto LABEL_37;
        }
        v26 = *v23;
        *v23 += 2;
        *((_QWORD *)result + 10) = v23;
        *(_QWORD *)result = off_1E33A8078;
        if (v26)
        {
          *v23 = v26;
          goto LABEL_37;
        }
        result = v23;
        goto LABEL_54;
      }
    }
    v10 = 0;
    goto LABEL_37;
  }
  v10[6] = v21 + 4;
  if (v21 == -2)
  {
    if ((*((_WORD *)v10 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
  }
  else
  {
    v10[6] = v21 + 2;
  }
LABEL_7:
  v12 = *a2;
  if (!*a2
    || (*(_WORD *)(v12 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24))
  {
    goto LABEL_37;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 40) + 8);
  v14 = *(_QWORD *)(v13 + 704);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
      v13 = v15;
  }
  v16 = (WebCore::SecurityContext *)(v13 + 192);
  WebCore::Text::wholeText((WebCore::Text *)v10, (WTF::StringImpl *)a2, &v29);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)1, v16, &v29, (uint64_t *)&v28, (uint64_t)v30);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
    else
      *result -= 2;
  }
  if (!v31)
  {
    v29 = (WTF::StringImpl *)v30[0];
    WebCore::Text::replaceWholeText((WebCore::Text *)v10, (const WTF::String *)&v29, v18);
    result = (unsigned int *)v29;
    v29 = 0;
    if (result)
    {
      if (*result != 2)
      {
        *result -= 2;
        goto LABEL_37;
      }
LABEL_54:
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v24);
    }
LABEL_37:
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (v31 == 1)
  {
    v20 = v30[1];
    *(_BYTE *)a4 = v30[0];
    *(_QWORD *)(a4 + 8) = v20;
    *(_DWORD *)(a4 + 16) = 1;
    if (v10[6] == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v10, v17);
    }
    else
    {
      v10[6] -= 2;
    }
  }
  else
  {
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WebCore::canCompile(v27);
  }
  return result;
}

uint64_t WebCore::canCompile@<X0>(WebCore::SecurityContext *a1@<X0>, WTF::StringImpl **a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  BOOL v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *i;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;

  result = (*(uint64_t (**)(WebCore::SecurityContext *))(*(_QWORD *)a1 + 344))(a1);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) < 0x17u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    for (i = v23; ; i = 0)
    {
      WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)1, a1, a2, (uint64_t *)&i, (uint64_t)&v23);
      v17 = i;
      i = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v25;
      if (!v25)
        break;
      if (v25 == 1)
      {
        v19 = v24;
        v24 = 0;
        *(_BYTE *)a4 = (_BYTE)v23;
        *(_QWORD *)(a4 + 8) = v19;
        *(_DWORD *)(a4 + 16) = 1;
        return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v18])(&i, &v23);
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v20 = v23;
    v23 = 0;
    *(_BYTE *)a4 = WTF::equal(*a2, v20, v16);
    *(_DWORD *)(a4 + 16) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v18])(&i, &v23);
  }
  else
  {
    v9 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v10 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v11 = (char **)(16 * v9);
    if ((_DWORD)v9)
      v12 = v11 == &WebCore::JSTrustedScript::s_info;
    else
      v12 = 1;
    if (!v12)
    {
      do
      {
        v11 = (char **)v11[2];
        v10 = v11 != 0;
      }
      while (v11 != &WebCore::JSTrustedScript::s_info && v11 != 0);
    }
    v14 = v10 && *(_QWORD *)(a3 + 24) != 0;
    *(_BYTE *)a4 = v14;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::TrustedTypePolicy::createHTML@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  char v16;

  WebCore::TrustedTypePolicy::getPolicyValue(a1, 0, a2, a3, 0, (uint64_t)&v13);
  v5 = v15;
  if (!v15)
  {
    v7 = v13;
    v13 = 0;
    v8 = bmalloc::api::isoAllocate();
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 1;
    if (v7)
    {
      v10 = *(_DWORD *)v7;
      *(_DWORD *)v7 += 2;
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
      if (v10)
        *(_DWORD *)v7 = v10;
      else
        WTF::StringImpl::destroy(v7, v9);
    }
    else
    {
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
    }
    return ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v16, &v13);
  }
  if (v15 == 1)
  {
    v6 = v14;
    v14 = 0;
    *(_BYTE *)a4 = (_BYTE)v13;
    *(_QWORD *)(a4 + 8) = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v16, &v13);
  }
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::TrustedTypePolicy::createScript(v12);
}

uint64_t WebCore::TrustedTypePolicy::createScript@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  char v16;

  WebCore::TrustedTypePolicy::getPolicyValue(a1, 1, a2, a3, 0, (uint64_t)&v13);
  v5 = v15;
  if (!v15)
  {
    v7 = v13;
    v13 = 0;
    v8 = bmalloc::api::isoAllocate();
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 1;
    if (v7)
    {
      v10 = *(_DWORD *)v7;
      *(_DWORD *)v7 += 2;
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
      if (v10)
        *(_DWORD *)v7 = v10;
      else
        WTF::StringImpl::destroy(v7, v9);
    }
    else
    {
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
    }
    return ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v16, &v13);
  }
  if (v15 == 1)
  {
    v6 = v14;
    v14 = 0;
    *(_BYTE *)a4 = (_BYTE)v13;
    *(_QWORD *)(a4 + 8) = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v16, &v13);
  }
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::TrustedTypePolicy::createScriptURL(v12);
}

uint64_t WebCore::TrustedTypePolicy::createScriptURL@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  char v17;

  WebCore::TrustedTypePolicy::getPolicyValue(a1, 2, a2, a3, 0, (uint64_t)&v14);
  v5 = v16;
  if (!v16)
  {
    v7 = v14;
    v14 = 0;
    v8 = bmalloc::api::isoAllocate();
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 1;
    if (v7)
    {
      v10 = *(_DWORD *)v7;
      *(_DWORD *)v7 += 2;
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
      if (v10)
        *(_DWORD *)v7 = v10;
      else
        WTF::StringImpl::destroy(v7, v9);
    }
    else
    {
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
    }
    return ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v17, &v14);
  }
  if (v16 == 1)
  {
    v6 = v15;
    v15 = 0;
    *(_BYTE *)a4 = (_BYTE)v14;
    *(_QWORD *)(a4 + 8) = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v5])(&v17, &v14);
  }
  v12 = (WTF::StringImpl **)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v12, v13);
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = this;
    do
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)this, a2);
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl *v5;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = (uint64_t *)((char *)this + 8);
    do
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v4, a2);
      v5 = (WTF::StringImpl *)*(v4 - 1);
      *(v4 - 1) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 40 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 40 * i;
        WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 + 24, a2);
        v7 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)(v6 + 8) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr((unsigned int *)v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, (unsigned int *)v7));
          if (!v9)
          {
            atomic_store(1u, (unsigned int *)v7);
            v12 = *(unsigned int *)(v7 + 28);
            if ((_DWORD)v12)
            {
              v15 = v7;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v12));
              v7 = v15;
            }
            v13 = *(WTF **)(v7 + 16);
            if (v13)
            {
              *(_QWORD *)(v7 + 16) = 0;
              *(_DWORD *)(v7 + 24) = 0;
              v14 = v7;
              WTF::fastFree(v13, a2);
              v7 = v14;
            }
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        v10 = *v5;
        *v5 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::VectorTypeOperations<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  if ((uint64_t *)result != a2)
  {
    v2 = (uint64_t *)result;
    do
    {
      result = *v2;
      *v2 = 0;
      if (result)
      {
        do
        {
          v3 = __ldaxr((unsigned int *)result);
          v4 = v3 - 1;
        }
        while (__stlxr(v4, (unsigned int *)result));
        if (!v4)
        {
          atomic_store(1u, (unsigned int *)result);
          v5 = *(unsigned int *)(result + 28);
          v10 = v2;
          v9 = a2;
          if ((_DWORD)v5)
          {
            v8 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v5));
            result = v8;
          }
          v6 = *(WTF **)(result + 16);
          if (v6)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v7 = result;
            WTF::fastFree(v6, a2);
            result = v7;
          }
          result = WTF::fastFree((WTF *)result, a2);
          a2 = v9;
          v2 = v10;
        }
      }
      ++v2;
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t JSC::JSObservableArray::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::TrustedTypeVisitor> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::Exception,WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>,WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>,WTF<WebCore::TrustedScriptURL,WebCore::TrustedHTML<WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>>> &>(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v1 += 2;
  *a1 = v1;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::TrustedTypeVisitor> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::Exception,WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>,WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>,WTF<WebCore::TrustedScriptURL,WebCore::TrustedHTML<WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>>> &>@<X0>(WTF::StringImpl *a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  _DWORD *v3;

  result = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
  if (result)
    *(_DWORD *)result += 2;
  v3 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v3 += 2;
  *a2 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::TrustedTypeVisitor> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::Exception,WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>,WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>,WTF<WebCore::TrustedScriptURL,WebCore::TrustedHTML<WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>>> &>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::TrustedTypeVisitor> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::Exception,WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>,WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>,WTF<WebCore::TrustedScriptURL,WebCore::TrustedHTML<WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>>> &>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::TrustedTypeVisitor> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::Exception,WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>,WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>,WTF<WebCore::TrustedScriptURL,WebCore::TrustedHTML<WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF<WebCore::TrustedScript,WebCore::TrustedHTML<WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>,WebCore::Exception::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::TrustedHTML,WebCore::Exception::RawPtrTraits<WTF::Ref>,WebCore::Exception::DefaultRefDerefTraits<WTF::Ref>>>>>>> &>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore9ExceptionEN3WTF3RefINS9_11TrustedHTMLENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSC_INS9_13TrustedScriptENSE_ISJ_EENSG_ISJ_EEEENSC_INS9_16TrustedScriptURLENSE_ISN_EENSG_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_SA_SI_SM_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore9ExceptionEN3WTF3RefINS9_11TrustedHTMLENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSC_INS9_13TrustedScriptENSE_ISJ_EENSG_ISJ_EEEENSC_INS9_16TrustedScriptURLENSE_ISN_EENSG_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_SA_SI_SM_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore9ExceptionEN3WTF3RefINS9_11TrustedHTMLENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSC_INS9_13TrustedScriptENSE_ISJ_EENSG_ISJ_EEEENSC_INS9_16TrustedScriptURLENSE_ISN_EENSG_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_SA_SI_SM_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore9ExceptionEN3WTF3RefINS9_11TrustedHTMLENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSC_INS9_13TrustedScriptENSE_ISJ_EENSG_ISJ_EEEENSC_INS9_16TrustedScriptURLENSE_ISN_EENSG_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJS8_SA_SI_SM_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore18CallbackResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore18CallbackResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore18CallbackResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__impl<WTF::String,WebCore::CallbackResultType>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16[8];
  int v17;
  char v18;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = a2;
    v6 = result;
    v7 = v2 == -1;
    if (v2 == -1)
      v8 = -1;
    else
      v8 = *(unsigned int *)(result + 8);
    if ((_DWORD)v3 != -1)
      v7 = v8 == v3;
    if (v7)
    {
      return ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33A87F0[v8])(v16, result, a2);
    }
    else
    {
      if (v2 == 1 || v2 == -1)
      {
        if ((_DWORD)v3 == 1)
        {
          v2 = 1;
          v9 = result;
        }
        else
        {
          v9 = a2;
        }
        v10 = (_DWORD)v3 == 1 ? a2 : result;
        v11 = (_DWORD)v3 == -1;
        LODWORD(v3) = (_DWORD)v3 == -1 ? -1 : v2;
        if (!v11)
        {
          v6 = v9;
          v5 = v10;
        }
      }
      v16[0] = 0;
      v17 = -1;
      if ((_DWORD)v3 != -1)
      {
        result = ((uint64_t (*)(char *, char *, uint64_t))off_1E33A87E0[v3])(&v18, v16, v5);
        v17 = v3;
        v12 = *(unsigned int *)(v5 + 8);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33A87D0[v12])(&v18, v5);
      }
      *(_DWORD *)(v5 + 8) = -1;
      v13 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33A8800[v13])(&v18, v5, v6);
        *(_DWORD *)(v5 + 8) = v13;
        v14 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33A87D0[v14])(&v18, v6);
      }
      *(_DWORD *)(v6 + 8) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, char *))off_1E33A8800[v17])(&v18, v6, v16);
        *(_DWORD *)(v6 + 8) = v15;
        if (v17 != -1)
          return ((uint64_t (*)(char *, char *))off_1E33A87D0[v17])(&v18, v16);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore18CallbackResultTypeEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore18CallbackResultTypeEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, int *a2, int *a3)
{
  int v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore18CallbackResultTypeEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore18CallbackResultTypeEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

char *WTF::Vector<WebCore::TreeScope *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TreeScope *&>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<WebCore::TreeScope *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 8 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x195A5AECCLL);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 29)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(8 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 8 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::LegacyRenderSVGResourceContainer *>@<X0>(uint64_t result@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int **v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;

  v6 = result;
  v8 = *(unsigned int *)(result + 8);
  v9 = *(unsigned int *)(result + 12);
  if (10 * v9 >= (unint64_t)(9 * v8) || *(_BYTE *)(result + 20) && v8 <= 2 * (int)v9)
  {
    if ((_DWORD)v8)
      v36 = 2 * v8;
    else
      v36 = 8;
    result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(result, v36);
    LODWORD(v8) = *(_DWORD *)(v6 + 8);
  }
  v10 = v8 - 1;
  v11 = *(_DWORD *)(v6 + 16);
  v12 = *a2;
  v13 = (*a2)[4];
  v14 = (v11 ^ (v13 >> 8)) & ((_DWORD)v8 - 1);
  v15 = *(_QWORD *)v6;
  v16 = *(_QWORD *)v6 + 16 * v14;
  v17 = *(unsigned int **)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = v13 >> 8;
    do
    {
      result = v17[4];
      v20 = (v14 + v8 - ((v11 ^ (result >> 8)) & v10)) & v10;
      if (v18 > v20)
      {
        v23 = v15 + 16 * v14;
        v16 = v23;
        if (v18 >= 0x80)
          *(_BYTE *)(v6 + 20) = 1;
        v26 = *(_QWORD *)(v23 + 8);
        v25 = (_QWORD *)(v23 + 8);
        v24 = v26;
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        v38 = (WTF::StringImpl *)v17;
        v39 = v26;
        v27 = *a2;
        if (*a2)
          *v27 += 2;
        *(_QWORD *)v16 = v27;
        *v25 = *a3;
        v28 = ((_DWORD)v14 + 1) & v10;
        v29 = *(_QWORD *)v6;
        while (1)
        {
          v30 = (unsigned int **)(v29 + 16 * v28);
          v31 = (WTF::StringImpl *)*v30;
          if (!*v30)
            break;
          ++v20;
          v32 = (v28 + v8 - ((v11 ^ (*((_DWORD *)v31 + 4) >> 8)) & v10)) & v10;
          if (v20 > v32)
          {
            *v30 = 0;
            v38 = v31;
            v33 = v29 + 16 * v28;
            v39 = *(_QWORD *)(v33 + 8);
            v34 = v39;
            *v30 = v17;
            *(_QWORD *)(v33 + 8) = v24;
            v29 = *(_QWORD *)v6;
            v24 = v34;
            v17 = (unsigned int *)v31;
            v20 = v32;
          }
          v28 = ((_DWORD)v28 + 1) & v10;
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>((uint64_t)v30, (WTF::StringImpl *)&v38);
        result = (uint64_t)v38;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            result = WTF::StringImpl::destroy(v38, v35);
          else
            *(_DWORD *)v38 -= 2;
        }
        LODWORD(v8) = *(_DWORD *)(v6 + 8);
        goto LABEL_16;
      }
      if (result >> 8 == v19 && v17 == v12)
      {
        v37 = v15 + 16 * v14;
        *(_QWORD *)a4 = v37;
        *(_QWORD *)(a4 + 8) = v15 + 16 * v8;
        *(_BYTE *)(a4 + 16) = 0;
        *(_QWORD *)(v37 + 8) = *a3;
        return result;
      }
      v14 = ((_DWORD)v14 + 1) & v10;
      ++v18;
      v17 = *(unsigned int **)(v15 + 16 * v14);
    }
    while (v17);
    v16 = v15 + 16 * v14;
    if (v18 >= 0x80)
      *(_BYTE *)(v6 + 20) = 1;
    if (!v12)
      goto LABEL_15;
  }
  *v12 += 2;
LABEL_15:
  *(_QWORD *)v16 = v12;
  *(_QWORD *)(v15 + 16 * v14 + 8) = *a3;
LABEL_16:
  ++*(_DWORD *)(v6 + 12);
  v22 = *(_QWORD *)v6 + 16 * v8;
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v22;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  v8 = v4;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v9 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v11 >> 31) ^ v11;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v12 = 0;
    v43 = v4;
    do
    {
      v13 = (WTF::StringImpl **)((char *)v5 + 16 * v12);
      v14 = *v13;
      if (*v13)
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = v15 - 1;
        v17 = *(_DWORD *)(a1 + 16);
        v18 = (v17 ^ (*((_DWORD *)v14 + 4) >> 8)) & (v15 - 1);
        v19 = *(WTF **)a1;
        v20 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v18);
        v21 = *v20;
        if (*v20)
        {
          v24 = 0;
          do
          {
            v25 = (v18 + v15 - ((v17 ^ (*((_DWORD *)v21 + 4) >> 8)) & v16)) & v16;
            if (v24 > v25)
            {
              v26 = (char *)v5 + 16 * v12;
              v29 = *((_QWORD *)v26 + 1);
              v28 = v26 + 8;
              v27 = v29;
              v30 = *v13;
              *v13 = 0;
              v31 = *v20;
              *v20 = 0;
              v32 = *v13;
              *v13 = v31;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  v40 = v25;
                  v41 = v27;
                  v38 = v30;
                  v39 = v28;
                  WTF::StringImpl::destroy(v32, v7);
                  v30 = v38;
                  v28 = v39;
                  v27 = v41;
                  v8 = v43;
                  v25 = v40;
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              v33 = (char *)v19 + 16 * v18;
              v35 = *((_QWORD *)v33 + 1);
              v34 = v33 + 8;
              *v28 = v35;
              v36 = *v20;
              *v20 = v30;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                {
                  v37 = v25;
                  v42 = v27;
                  WTF::StringImpl::destroy(v36, v7);
                  v27 = v42;
                  v8 = v43;
                  v25 = v37;
                }
                else
                {
                  *(_DWORD *)v36 -= 2;
                }
              }
              *v34 = v27;
              v19 = *(WTF **)a1;
              v24 = v25;
            }
            v18 = ((_DWORD)v18 + 1) & v16;
            ++v24;
            v20 = (WTF::StringImpl **)((char *)v19 + 16 * v18);
            v21 = *v20;
          }
          while (*v20);
          v14 = *v13;
        }
        *v13 = 0;
        v22 = *v20;
        *v20 = v14;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::destroy(v22, v7);
            v8 = v43;
          }
          else
          {
            *(_DWORD *)v22 -= 2;
          }
        }
        *((_QWORD *)v19 + 2 * v18 + 1) = *((_QWORD *)v5 + 2 * v12 + 1);
        v23 = *v13;
        *v13 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::destroy(v23, v7);
            v8 = v43;
          }
          else
          {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v12;
    }
    while (v12 != v8);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  result = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *a2 = 0;
  a2[1] = 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = v5 - 1;
  v8 = (unint64_t)a2 - *(_QWORD *)a1;
  v9 = ((v8 >> 4) + 1) & (v5 - 1);
  v10 = (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v9);
  v11 = *(WTF::StringImpl **)v10;
  if (*(_QWORD *)v10)
  {
    v12 = *(_DWORD *)(a1 + 16);
    result = (WTF::StringImpl *)(*(_QWORD *)a1 + (v8 & 0xFFFFFFFF0));
    do
    {
      if (((v9 + v5 - ((v12 ^ (*((_DWORD *)v11 + 4) >> 8)) & v7)) & v7) == 0)
        break;
      WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>((uint64_t)result, v10);
      v14 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      result = (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v9);
      v9 = (v9 + 1) & v7;
      v10 = (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v9);
      v11 = *(WTF::StringImpl **)v10;
    }
    while (*(_QWORD *)v10);
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
  }
  if (v5 >= 9 && 6 * v6 < v5)
    return (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v5 >> 1);
  return result;
}

_QWORD *WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::AtomString const&,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v5;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::GenericHashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::assignToEmpty<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((_QWORD *)(a1 + 8), (uint64_t *)a3);
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t i;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  WTF *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  WTF *v22;
  uint64_t v23;
  unsigned int v24;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = 24 * a2;
  v7 = (void *)WTF::fastMalloc((WTF *)v6);
  v8 = (uint64_t)v7;
  if (a2)
    bzero(v7, v6);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v8);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v12 = (WTF *)((char *)v5 + 24 * i);
      if (*(_QWORD *)v12)
      {
        v13 = *(_DWORD *)(a1 + 8);
        v14 = v13 - 1;
        v15 = *(_DWORD *)(a1 + 16);
        v16 = (v15 ^ (*(_DWORD *)(*(_QWORD *)v12 + 16) >> 8)) & (v13 - 1);
        v17 = *(WTF **)a1;
        v18 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v16);
        v19 = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
        {
          v21 = 0;
          do
          {
            v22 = v5;
            v23 = v4;
            v24 = (v16 + v13 - ((v15 ^ (*(_DWORD *)(v19 + 16) >> 8)) & v14)) & v14;
            if (v21 > v24)
            {
              std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>((uint64_t)v12, v18);
              v17 = *(WTF **)a1;
              v21 = v24;
            }
            v16 = (v16 + 1) & v14;
            ++v21;
            v18 = (WTF *)((char *)v17 + 24 * v16);
            v19 = *(_QWORD *)v18;
            v4 = v23;
            v5 = v22;
          }
          while (*(_QWORD *)v18);
        }
        WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::operator=((uint64_t)v18, v12);
      }
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)v5 + 3 * i + 1, v10);
      v20 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v10);
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>(uint64_t a1, WTF::StringImpl *a2)
{
  __int128 v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18[2];
  uint64_t v19;

  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)v18 = v3;
  v19 = *(_QWORD *)(a1 + 16);
  WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::operator=(a1, a2);
  WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::operator=((uint64_t)a2, (WTF::StringImpl *)v18);
  v5 = v18[1];
  if (v18[1])
  {
    v7 = *((unsigned int *)v18[1] - 1);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *((_QWORD *)v5 + i);
        if (v9 != -1)
        {
          *((_QWORD *)v5 + i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr((unsigned int *)v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, (unsigned int *)v9));
            if (!v11)
            {
              v16 = v7;
              v17 = i;
              atomic_store(1u, (unsigned int *)v9);
              v12 = *(unsigned int *)(v9 + 28);
              if ((_DWORD)v12)
              {
                v15 = v9;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v12));
                v9 = v15;
              }
              v13 = *(WTF **)(v9 + 16);
              if (v13)
              {
                *(_QWORD *)(v9 + 16) = 0;
                *(_DWORD *)(v9 + 24) = 0;
                v14 = v9;
                WTF::fastFree(v13, v4);
                v9 = v14;
              }
              WTF::fastFree((WTF *)v9, v4);
              v7 = v16;
              i = v17;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v5 - 16), v4);
  }
  result = v18[0];
  if (v18[0])
  {
    if (*(_DWORD *)v18[0] == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v18[0], (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v18[0] -= 2;
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    v9 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = *(_QWORD *)(v7 + 8 * i);
        if (v11 != -1)
        {
          *(_QWORD *)(v7 + 8 * i) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr((unsigned int *)v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, (unsigned int *)v11));
            if (!v13)
            {
              v19 = v9;
              v20 = i;
              v18 = v7;
              atomic_store(1u, (unsigned int *)v11);
              v14 = *(unsigned int *)(v11 + 28);
              if ((_DWORD)v14)
              {
                v17 = v11;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
                v11 = v17;
              }
              v15 = *(WTF **)(v11 + 16);
              if (v15)
              {
                *(_QWORD *)(v11 + 16) = 0;
                *(_DWORD *)(v11 + 24) = 0;
                v16 = v11;
                WTF::fastFree(v15, a2);
                v11 = v16;
              }
              WTF::fastFree((WTF *)v11, a2);
              v7 = v18;
              v9 = v19;
              i = v20;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  return a1;
}

_QWORD *WTF::GenericHashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::assignToEmpty<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *a2;
  *a2 = 0;
  v5 = *result;
  *result = v4;
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = *(_QWORD *)(v5 + 8 * i);
        if (v8 != -1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr((unsigned int *)v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, (unsigned int *)v8));
            if (!v10)
            {
              v16 = v6;
              v17 = i;
              v15 = v5;
              atomic_store(1u, (unsigned int *)v8);
              v11 = *(unsigned int *)(v8 + 28);
              if ((_DWORD)v11)
              {
                v14 = v8;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
                v8 = v14;
              }
              v12 = *(WTF **)(v8 + 16);
              if (v12)
              {
                *(_QWORD *)(v8 + 16) = 0;
                *(_DWORD *)(v8 + 24) = 0;
                v13 = v8;
                WTF::fastFree(v12, a2);
                v8 = v13;
              }
              WTF::fastFree((WTF *)v8, a2);
              v5 = v15;
              v6 = v16;
              i = v17;
            }
          }
        }
      }
    }
    result = (_QWORD *)WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v3[1] = a2[1];
  return result;
}

uint64_t *WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *((_DWORD *)a1 + 2);
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *a2;
  v7 = *(_DWORD *)(*a2 + 16);
  v8 = (v5 ^ (v7 >> 8)) & (v3 - 1);
  result = (uint64_t *)(v2 + 24 * v8);
  v10 = *result;
  if (!*result)
    return 0;
  v11 = v7 >> 8;
  if (v10 != v6 || *(_DWORD *)(v10 + 16) >> 8 != v11)
  {
    v13 = 0;
    while (1)
    {
      v8 = (v8 + 1) & v4;
      result = (uint64_t *)(v2 + 24 * v8);
      v14 = *result;
      if (!*result)
        break;
      ++v13;
      v15 = *(_DWORD *)(v14 + 16);
      if (v13 > ((v8 + v3 - ((v5 ^ (v15 >> 8)) & v4)) & v4))
        break;
      v16 = v15 >> 8;
      if (v14 == v6 && v16 == v11)
        return result;
    }
    return 0;
  }
  return result;
}

_DWORD **WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomString&>(uint64_t a1, unint64_t a2)
{
  _DWORD **result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  result = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  if (*result)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t *WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t *result;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  unsigned int v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v4 = (WTF::StringImpl *)*a2;
  *a2 = -1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(a2 + 1, a2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *(_QWORD *)a1) >> 3);
  v11 = ((_DWORD)v10 + 1) & (v6 - 1);
  v12 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v11);
  v13 = *(WTF::StringImpl **)v12;
  if (*(_QWORD *)v12)
  {
    v14 = *(_DWORD *)(a1 + 16);
    result = (uint64_t *)(v9 + 24 * v10);
    v15 = (v10 + 1) & v8;
    do
    {
      if (((v15 + v6 - ((v14 ^ (*((_DWORD *)v13 + 4) >> 8)) & v8)) & v8) == 0)
        break;
      WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>::operator=((uint64_t)result, v12);
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)(v9 + 24 * v11 + 8), v16);
      v18 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
      v11 = (v15 + 1) & v8;
      v9 = *(_QWORD *)a1;
      result = (uint64_t *)(*(_QWORD *)a1 + 24 * v15);
      v12 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v11);
      v13 = *(WTF::StringImpl **)v12;
      v15 = (v15 + 1) & v8;
    }
    while (*(_QWORD *)v12);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  if (v6 >= 9 && 6 * v7 < v6)
    return (uint64_t *)WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v6 >> 1);
  return result;
}

uint64_t WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = 8 * v5;
        v8 = v4;
        v9 = v4;
        do
        {
          v10 = *(_QWORD *)v8;
          *(_QWORD *)v9 = 0;
          v9 = (WTF *)((char *)v9 + 8);
          *(_QWORD *)result = v10;
          v11 = result + 8;
          WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~ListHashSetNode(v8, v6);
          result = v11;
          v8 = v9;
          v7 -= 8;
        }
        while (v7);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  _QWORD *v20;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v10 = WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    if ((_DWORD)v5)
    {
      v20 = (_QWORD *)v10;
      v15 = 8 * v5;
      v16 = v9;
      v17 = v9;
      do
      {
        v18 = *(_QWORD *)v16;
        *(_QWORD *)v17 = 0;
        *v20++ = v18;
        v19 = (WTF *)((char *)v17 + 8);
        WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~ListHashSetNode(v16, v11);
        v17 = v19;
        v16 = v19;
        v15 -= 8;
      }
      while (v15);
      v10 = *(_QWORD *)v3;
    }
    if (v9)
    {
      if ((WTF *)v10 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v9, v11);
      v9 = *(WTF **)v3;
    }
    else
    {
      v9 = (WTF *)v10;
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v9 + v12) = v13;
  ++*(_DWORD *)(v3 + 12);
  return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String> &&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String> &,WTF::String const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String> &&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (v2)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String> &&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String> &,WTF::String const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String> &&>@<X0>(WebCore::SecurityContext ***a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::trustedTypeCompliantString(0, **a1, a2, (uint64_t *)(*a1)[1], a3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String> &&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String> &,WTF::String const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String> &&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (v2)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String> &&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String> &,WTF::String const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String> &&>@<X0>(WebCore::SecurityContext ***a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)1, **a1, a2, (uint64_t *)(*a1)[1], a3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String> &&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String> &,WTF::String const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String> &&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (v2)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String> &&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String> &,WTF::String const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String> &&>@<X0>(WebCore::SecurityContext ***a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)2, **a1, a2, (uint64_t *)(*a1)[1], a3);
}

uint64_t WebCore::TrustedTypePolicyFactory::createPolicy@<X0>(WebCore::SecurityContext *this@<X1>, uint64_t a2@<X0>, WTF::StringImpl **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int *v9;
  const WTF::StringImpl *v10;
  uint64_t (**v11)();
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int i;
  int v18;
  WTF **v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  BOOL v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  const WTF::StringImpl *v37;
  WebCore::TrustedTypePolicy *v38;
  uint64_t result;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v44;
  bmalloc::api *v45;
  void *v46;
  _BYTE v47[24];
  uint64_t v48;
  uint64_t v49;

  v9 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy(this);
  v11 = (uint64_t (**)())v9;
  if (v9)
  {
    do
      v12 = __ldaxr(v9);
    while (__stlxr(v12 + 1, v9));
  }
  v13 = *(_QWORD *)(a2 + 40);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 - 8);
    v15 = *((_DWORD *)*a3 + 4);
    if (v15 < 0x100)
      v16 = WTF::StringImpl::hashSlowCase(*a3);
    else
      v16 = v15 >> 8;
    for (i = 0; ; v16 = i + v18)
    {
      v18 = v16 & v14;
      v19 = *(WTF ***)(v13 + 8 * (v16 & v14));
      if (v19 != (WTF **)-1)
      {
        if (!v19)
          goto LABEL_12;
        if ((WTF::equal(*v19, *a3, v10) & 1) != 0)
          break;
      }
      ++i;
    }
    v20 = 1;
  }
  else
  {
LABEL_12:
    v20 = 0;
  }
  v21 = WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(v11, a3, (const WTF::StringImpl *)v20);
  if (v21 == 2)
  {
    v22 = *a3;
    if (v22)
    {
      v27 = *((_DWORD *)v22 + 1);
      *(_DWORD *)v22 += 2;
      if (v27 < 0)
        goto LABEL_65;
    }
    else
    {
      v27 = 0;
    }
    v24 = __OFADD__(v27, 17);
    v28 = v27 + 17;
    if (!v24 && !__OFADD__(v28, 52))
    {
      v29 = !v22 || (*((_BYTE *)v22 + 16) & 4) != 0;
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v28 + 52), v29, (int8x16_t *)"Failed to execute 'createPolicy': Policy with name '", 0x34u, (uint64_t)v22, (int8x16_t *)"' already exists.", 0x11u, &v48);
      v42 = v48;
      if (v48)
      {
        *(_BYTE *)a5 = 33;
        *(_QWORD *)(a5 + 8) = v42;
        *(_DWORD *)(a5 + 16) = 1;
        v48 = 0;
        if (!v22)
          goto LABEL_53;
        goto LABEL_51;
      }
LABEL_66:
      __break(0xC471u);
      goto LABEL_67;
    }
LABEL_65:
    v48 = 0;
    goto LABEL_66;
  }
  if (v21 == 1)
  {
    v22 = *a3;
    if (v22)
    {
      v23 = *((_DWORD *)v22 + 1);
      *(_DWORD *)v22 += 2;
      if (v23 < 0)
        goto LABEL_63;
    }
    else
    {
      v23 = 0;
    }
    v24 = __OFADD__(v23, 13);
    v25 = v23 + 13;
    if (!v24 && !__OFADD__(v25, 52))
    {
      v26 = !v22 || (*((_BYTE *)v22 + 16) & 4) != 0;
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v25 + 52), v26, (int8x16_t *)"Failed to execute 'createPolicy': Policy with name '", 0x34u, (uint64_t)v22, (int8x16_t *)"' disallowed.", 0xDu, &v49);
      v41 = v49;
      if (v49)
      {
        *(_BYTE *)a5 = 33;
        *(_QWORD *)(a5 + 8) = v41;
        *(_DWORD *)(a5 + 16) = 1;
        v49 = 0;
        if (!v22)
        {
LABEL_53:
          if (!v11)
            return result;
          goto LABEL_54;
        }
LABEL_51:
        if (*(_DWORD *)v22 == 2)
        {
          result = WTF::StringImpl::destroy(v22, v40);
          if (!v11)
            return result;
          goto LABEL_54;
        }
        *(_DWORD *)v22 -= 2;
        goto LABEL_53;
      }
LABEL_64:
      __break(0xC471u);
      JUMPOUT(0x195A5C2C8);
    }
LABEL_63:
    v49 = 0;
    goto LABEL_64;
  }
  v30 = bmalloc::api::isoAllocate();
  v31 = v30;
  *(_QWORD *)v30 = 0;
  *(_DWORD *)(v30 + 8) = 1;
  v32 = *a3;
  if (*a3)
    *(_DWORD *)v32 += 2;
  *(_QWORD *)(v30 + 16) = v32;
  v33 = *a4;
  if (*a4)
    ++*(_DWORD *)(v33 + 16);
  *(_QWORD *)(v30 + 24) = v33;
  v34 = a4[1];
  if (v34)
    ++*(_DWORD *)(v34 + 16);
  *(_QWORD *)(v30 + 32) = v34;
  v35 = a4[2];
  if (v35)
    ++*(_DWORD *)(v35 + 16);
  *(_QWORD *)(v30 + 40) = v35;
  *(_BYTE *)(v30 + 48) = 0;
  if (MEMORY[0x19AEA53F4](*a3, "default", 7))
  {
    ++*(_DWORD *)(v31 + 8);
    v38 = *(WebCore::TrustedTypePolicy **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v31;
    if (v38)
    {
      if (*((_DWORD *)v38 + 2) == 1)
      {
        WebCore::TrustedTypePolicy::~TrustedTypePolicy(v38, v36);
        bmalloc::api::isoDeallocate(v45, v46);
      }
      else
      {
        --*((_DWORD *)v38 + 2);
      }
    }
  }
  result = (uint64_t)WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)(a2 + 40), a3, v37, (uint64_t)v47);
  *(_QWORD *)a5 = v31;
  *(_DWORD *)(a5 + 16) = 0;
  if (v11)
  {
LABEL_54:
    if (atomic_load((unsigned int *)v11))
    {
      do
        v44 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v44 - 1, (unsigned int *)v11));
      return result;
    }
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x195A5C2ACLL);
  }
  return result;
}

WTF::StringImpl *WebCore::TrustedTypePolicyFactory::getAttributeType@<X0>(const WTF::String *a1@<X1>, const WTF::String *a2@<X2>, WTF::StringImpl **a3@<X3>, WTF::StringImpl **a4@<X4>, WTF::StringImpl **a5@<X8>)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  WTF::String::convertToASCIILowercase(a2);
  WebCore::trustedTypeForAttribute(a1, &v14, a3, a4, &v15);
  v11 = v16;
  *a5 = v15;
  v15 = 0;
  v16 = 0;
  if (!v11)
    goto LABEL_4;
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
LABEL_4:
    v15 = 0;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v11, v10);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_5:
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::TrustedTypePolicyFactory::getPropertyType@<X0>(const WTF::String *a1@<X1>, const WTF::String *a2@<X2>, WebCore::QualifiedName::QualifiedNameImpl **a3@<X3>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *v8;
  WebCore::QualifiedName::QualifiedNameImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *result;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebCore::QualifiedName::QualifiedNameImpl *v23;

  WTF::String::convertToASCIILowercase(a1);
  v9 = *a3;
  if (v9 && *((_DWORD *)v9 + 1))
  {
    if ((*((_BYTE *)v9 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase(v9, v8);
      v9 = v23;
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v9 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::xhtmlNamespaceURI;
  if (WebCore::HTMLNames::xhtmlNamespaceURI)
LABEL_3:
    *(_DWORD *)v9 += 2;
LABEL_4:
  v21 = v9;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "innerHTML", 9) & 1) != 0
    || MEMORY[0x19AEA53F4](*(_QWORD *)a2, "outerHTML", 9))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_29;
  }
  v12 = v22;
  if (v22)
  {
    if ((*((_BYTE *)v22 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v22 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v22, v10);
      v12 = v23;
    }
  }
  v20 = v12;
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v23, MEMORY[0x1E0CBF2F8], &v20, &v21);
  v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v23;
  if (v23 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::iframeTag
    || *((_QWORD *)v23 + 3) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
    && *((_QWORD *)v23 + 4) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 32))
  {
    if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "srcdoc", 6) & 1) != 0)
      goto LABEL_51;
    v13 = v23;
  }
  v14 = WebCore::HTMLNames::scriptTag;
  if (v13 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::scriptTag
    || *((_QWORD *)v13 + 3) == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24)
    && *((_QWORD *)v13 + 4) == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 32))
  {
    if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "src", 3) & 1) != 0)
      goto LABEL_51;
    v13 = v23;
    v14 = WebCore::HTMLNames::scriptTag;
  }
  if (v13 != (WebCore::QualifiedName::QualifiedNameImpl *)v14
    && (*((_QWORD *)v13 + 3) != *(_QWORD *)(v14 + 24) || *((_QWORD *)v13 + 4) != *(_QWORD *)(v14 + 32))
    || (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "innerText", 9) & 1) == 0
    && (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "textContent", 11) & 1) == 0
    && !MEMORY[0x19AEA53F4](*(_QWORD *)a2, "text", 4))
  {
    v15 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v15 += 2;
    *a4 = v15;
    goto LABEL_25;
  }
LABEL_51:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_25:
  v16 = (WTF::StringImpl **)v23;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  v9 = v21;
LABEL_29:
  v21 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v11);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::UIEvent::~UIEvent(WebCore::UIEvent *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E33A8B00;
  v3 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (uint64_t *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v4)
      {
        if (*v4)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v4, a2);
        WTF::fastFree((WTF *)v4, a2);
      }
      v5 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF *v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E33A8B00;
  v3 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (uint64_t *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v4)
      {
        if (*v4)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v4, a2);
        WTF::fastFree((WTF *)v4, a2);
      }
      v5 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF *v3;
  bmalloc::api *v4;
  void *v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E33A8B00;
  v3 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = (uint64_t *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v6)
      {
        if (*v6)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v6, a2);
        WTF::fastFree((WTF *)v6, a2);
      }
      v7 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::UIEvent::initUIEvent(uint64_t result, const WTF::AtomString *a2, int a3, int a4, _DWORD **a5, int a6)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if ((*(_BYTE *)(result + 21) & 0x30) == 0)
  {
    v8 = result;
    result = WebCore::Event::initEvent(result, a2, a3, a4);
    v10 = *a5;
    if (*a5)
      ++*v10;
    v11 = *(WTF **)(v8 + 72);
    *(_QWORD *)(v8 + 72) = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        v12 = (uint64_t *)*((_QWORD *)v11 + 2);
        *((_QWORD *)v11 + 2) = 0;
        if (v12)
        {
          if (*v12)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v12, v9);
          WTF::fastFree((WTF *)v12, v9);
        }
        v13 = (unsigned int *)*((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, v9);
          }
        }
        result = WTF::fastFree(v11, v9);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
    *(_DWORD *)(v8 + 80) = a6;
  }
  return result;
}

uint64_t WebCore::UIEvent::isUIEvent(WebCore::UIEvent *this)
{
  return 1;
}

uint64_t WebCore::UIEvent::layerX(WebCore::UIEvent *this)
{
  return 0;
}

uint64_t WebCore::UIEvent::layerY(WebCore::UIEvent *this)
{
  return 0;
}

uint64_t WebCore::UIEvent::pageX(WebCore::UIEvent *this)
{
  return 0;
}

uint64_t WebCore::UIEvent::pageY(WebCore::UIEvent *this)
{
  return 0;
}

uint64_t WebCore::UIEvent::which(WebCore::UIEvent *this)
{
  return 0;
}

uint64_t WebCore::UIEventWithKeyState::getModifierState(WebCore::UIEventWithKeyState *this, const WTF::String *a2)
{
  char v4;
  uint64_t result;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "Control", 7) & 1) != 0)
  {
    v4 = 2;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "Shift", 5) & 1) != 0)
  {
    v4 = 8;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "Alt", 3) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = 4;
    if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "Meta", 4) & 1) == 0)
    {
      result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "CapsLock", 8);
      if (!(_DWORD)result)
        return result;
      v4 = 16;
    }
  }
  return (*((_BYTE *)this + 84) & v4) != 0;
}

BOOL WebCore::UserActionElementSet::hasFlag(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 == a2)
    {
LABEL_3:
      LODWORD(v3) = *(_DWORD *)(v3 + 16 * v8 + 8);
    }
    else
    {
      v11 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v11) & v4;
        v9 = *(_QWORD *)(v3 + 16 * v8);
        ++v11;
        if (v9 == a2)
          goto LABEL_3;
      }
      LODWORD(v3) = 0;
    }
  }
  return (v3 & a3) != 0;
}

uint64_t *WebCore::UserActionElementSet::setFlags(uint64_t *result, uint64_t this, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  WebCore::Node *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;

  v5 = result;
  *(_DWORD *)(this + 24) += 2;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::OptionSet<WebCore::UserActionElementSet::Flag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(result, 8u, 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (uint64_t *)(v6 + 16 * v11);
  v13 = (WebCore::Node *)*v12;
  if (!*v12)
  {
LABEL_11:
    *v12 = this;
    *((_DWORD *)v12 + 2) = 0;
    v16 = *v5;
    if (*v5)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v5;
    if (*v5)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        goto LABEL_17;
    }
    else
    {
      if (3 * v21 > 4 * v20)
      {
LABEL_17:
        *((_DWORD *)v12 + 2) |= a3;
        goto LABEL_18;
      }
      if (!(_DWORD)v21)
      {
        v22 = 8;
LABEL_28:
        result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::OptionSet<WebCore::UserActionElementSet::Flag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(v5, v22, v12);
        v12 = result;
        goto LABEL_17;
      }
    }
    v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
    goto LABEL_28;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != (WebCore::Node *)this)
  {
    if (v13 == (WebCore::Node *)-1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (uint64_t *)(v6 + 16 * v11);
    v13 = (WebCore::Node *)*v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        *((_DWORD *)v14 + 2) = 0;
        --*(_DWORD *)(*v5 - 16);
        v12 = v14;
      }
      goto LABEL_11;
    }
  }
  *((_DWORD *)v12 + 2) |= a3;
  if (*(_DWORD *)(this + 24) == 2)
  {
    if ((*(_WORD *)(this + 30) & 0x400) == 0)
      result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)this);
  }
  else
  {
    *(_DWORD *)(this + 24) -= 2;
  }
LABEL_18:
  *(_QWORD *)(this + 48) |= 0x2000000000000uLL;
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  void *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  char v34;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v34);
    v8 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a1 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v8;
  }
  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = a2;
    *(_BYTE *)(v9 + 32) = 0;
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v11 & 0xFFFF000000000000 | v9;
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v27 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v27)
        {
          v32 = v12;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v27));
          v12 = v32;
        }
        v28 = *(WTF **)(v12 + 16);
        if (v28)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          v31 = v12;
          WTF::fastFree(v28, v10);
          v12 = v31;
        }
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  v15 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL;
  do
    v16 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v16 + 1, (unsigned int *)v15));
  do
    v17 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v17 + 1, (unsigned int *)v15));
  v33 = (WTF *)v15;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a1, (uint64_t *)&v33, a3);
  v20 = v33;
  v33 = 0;
  if (!v20)
    goto LABEL_14;
  do
  {
    v21 = __ldaxr((unsigned int *)v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v20));
  if (v22)
  {
LABEL_14:
    if (!v15)
      return result;
    goto LABEL_15;
  }
  atomic_store(1u, (unsigned int *)v20);
  v29 = *((unsigned int *)v20 + 7);
  if ((_DWORD)v29)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v29));
  v30 = (WTF *)*((_QWORD *)v20 + 2);
  if (v30)
  {
    *((_QWORD *)v20 + 2) = 0;
    *((_DWORD *)v20 + 6) = 0;
    WTF::fastFree(v30, v19);
  }
  result = WTF::fastFree(v20, v19);
  if (v15)
  {
    do
    {
LABEL_15:
      v23 = __ldaxr((unsigned int *)v15);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v15));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v15);
      v25 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v25));
      v26 = *(WTF **)(v15 + 16);
      if (v26)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        WTF::fastFree(v26, v19);
      }
      return WTF::fastFree((WTF *)v15, v19);
    }
  }
  return result;
}

uint64_t *WebCore::UserGestureToken::maximumIntervalForUserGestureForwardingForFetch(WebCore::UserGestureToken *this)
{
  return &WebCore::maxIntervalForUserGestureForwardingForFetch;
}

void WebCore::UserGestureToken::setMaximumIntervalForUserGestureForwardingForFetchForTesting(double a1)
{
  WebCore::maxIntervalForUserGestureForwardingForFetch = *(_QWORD *)&a1;
}

uint64_t WebCore::UserGestureToken::isValidForDocument(WebCore::UserGestureToken *this, const WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;

  ++*((_DWORD *)this + 14);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v4 = *((_QWORD *)this + 6);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 - 8);
        v6 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
        v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
        v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
        v9 = v5 & ((v8 >> 31) ^ v8);
        for (i = 1; ; ++i)
        {
          v11 = *(_QWORD *)(v4 + 8 * v9);
          if (!v11)
            break;
          if (v11 != -1 && v11 == v3)
            return 1;
          v9 = (v9 + i) & v5;
        }
      }
    }
  }
  return 0;
}

uint64_t **WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t **result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t **v4;
  void *v5;
  WTF *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int j;
  uint64_t v28;
  WTF *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;

  if (*result)
  {
    v2 = *((unsigned int *)*result - 3);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = result;
        v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
        v7 = *v4;
        if (*v4 && *((_DWORD *)v7 - 3))
        {
          v8 = *((unsigned int *)v7 - 1);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            for (i = *v4; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9)
                return (uint64_t **)WTF::fastFree(v6, v5);
            }
          }
          else
          {
            i = *v4;
          }
          v11 = &v7[v8];
          if (i != v11)
          {
            v12 = 0;
            v13 = *i;
LABEL_15:
            v14 = *(unsigned int **)(v13 + 8);
            if (v14)
            {
              v16 = v11;
              v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v14);
              if (v14)
              {
                do
                  v17 = __ldaxr(v14);
                while (__stlxr(v17 + 1, v14));
              }
              v11 = v16;
            }
            v15 = v12 + 1;
            *((_QWORD *)v6 + v12) = v14;
            while (++i != v11)
            {
              v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v12;
                if (i != v11)
                  goto LABEL_15;
                break;
              }
            }
            if (v15)
            {
              v18 = (WTF *)((char *)v6 + 8 * v15);
              v19 = v6;
              do
              {
                v20 = *(_QWORD *)v19;
                if (*(_QWORD *)v19)
                {
                  v5 = *(void **)(v20 + 8);
                  if (v5)
                  {
                    v21 = *v4;
                    if (*v4)
                    {
                      v22 = *((_DWORD *)v21 - 2);
                      v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
                      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
                      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
                      v26 = v22 & ((v25 >> 31) ^ v25);
                      for (j = 1; ; ++j)
                      {
                        v28 = v21[v26];
                        if (!v28)
                          break;
                        if (v28 != -1 && v28 == v20)
                        {
                          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
                          break;
                        }
                        v26 = (v26 + j) & v22;
                      }
                    }
                  }
                }
                v19 = (WTF *)((char *)v19 + 8);
              }
              while (v19 != v18);
              v30 = v6;
              do
              {
                v31 = *(_QWORD *)v30;
                *(_QWORD *)v30 = 0;
                if (v31)
                {
                  do
                  {
                    v32 = __ldaxr((unsigned int *)v31);
                    v33 = v32 - 1;
                  }
                  while (__stlxr(v33, (unsigned int *)v31));
                  if (!v33)
                  {
                    atomic_store(1u, (unsigned int *)v31);
                    v34 = *(unsigned int *)(v31 + 28);
                    if ((_DWORD)v34)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v34));
                    v35 = *(WTF **)(v31 + 16);
                    if (v35)
                    {
                      *(_QWORD *)(v31 + 16) = 0;
                      *(_DWORD *)(v31 + 24) = 0;
                      WTF::fastFree(v35, v5);
                    }
                    WTF::fastFree((WTF *)v31, v5);
                  }
                }
                v30 = (WTF *)((char *)v30 + 8);
              }
              while (v30 != v18);
            }
          }
        }
        return (uint64_t **)WTF::fastFree(v6, v5);
      }
    }
  }
  return result;
}

WebCore::UserGestureToken *WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=<WebCore::UserGestureToken>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  WebCore::UserGestureToken *result;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  result = (WebCore::UserGestureToken *)WebCore::currentToken(void)::token;
  WebCore::currentToken(void)::token = v2;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(result, a2);
      return (WebCore::UserGestureToken *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebCore::UserGestureToken *WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=(_DWORD *a1, void *a2)
{
  WebCore::UserGestureToken *result;
  WTF *v4;
  void *v5;

  if (a1)
    ++*a1;
  result = (WebCore::UserGestureToken *)WebCore::currentToken(void)::token;
  WebCore::currentToken(void)::token = (uint64_t)a1;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(result, a2);
      return (WebCore::UserGestureToken *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::UserGestureIndicator::processingUserGestureForMedia(WebCore::UserGestureIndicator *this)
{
  uint64_t result;

  result = WTF::isMainThread(this);
  if ((_DWORD)result)
  {
    {
      return WebCore::currentToken(void)::token
          && *(unsigned __int8 *)(WebCore::currentToken(void)::token + 16) - 1 < 2;
    }
    else
    {
      result = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  return result;
}

uint64_t WebCore::UserGestureIndicator::authorizationToken@<X0>(WebCore::UserGestureIndicator *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  __int128 v4;

  result = WTF::isMainThread(this);
  if ((result & 1) != 0)
  {
    {
      if (WebCore::currentToken(void)::token)
      {
        v4 = *(_OWORD *)(WebCore::currentToken(void)::token + 112);
        *a2 = *(_OWORD *)(WebCore::currentToken(void)::token + 96);
        a2[1] = v4;
        return result;
      }
    }
    else
    {
      WebCore::currentToken(void)::token = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *((_BYTE *)a2 + 16) = 0;
  return result;
}

uint64_t WebCore::UserTypingGestureIndicator::processingUserTypingGesture(WebCore::UserTypingGestureIndicator *this)
{
  return WebCore::s_processingUserTypingGesture;
}

uint64_t WebCore::UserTypingGestureIndicator::focusedElementAtGestureStart(WebCore::UserTypingGestureIndicator *this)
{
  uint64_t result;

    return WebCore::focusedNode(void)::node;
  result = 0;
  WebCore::focusedNode(void)::node = 0;
  return result;
}

WebCore::UserTypingGestureIndicator *WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator(WebCore::UserTypingGestureIndicator *this, WebCore::LocalFrame *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)this = WebCore::s_processingUserTypingGesture;
  {
    v3 = WebCore::focusedNode(void)::node;
    if (WebCore::focusedNode(void)::node)
      *(_DWORD *)(WebCore::focusedNode(void)::node + 24) += 2;
  }
  else
  {
    v3 = 0;
  }
  *((_QWORD *)this + 1) = v3;
  WebCore::s_processingUserTypingGesture = 1;
  v4 = *((_QWORD *)a2 + 37);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    v5 = *(_QWORD *)(v4 + 1248);
    if (v5)
      *(_DWORD *)(v5 + 24) += 2;
  }
  else
  {
    v5 = 0;
  }
  WebCore::focusedNode(void)::node = v5;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return this;
}

void WebCore::UserTypingGestureIndicator::~UserTypingGestureIndicator(WebCore::UserTypingGestureIndicator *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  WebCore::s_processingUserTypingGesture = *(_BYTE *)this;
  {
    WebCore::focusedNode(void)::node = 0;
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = WebCore::focusedNode(void)::node;
  WebCore::focusedNode(void)::node = v3;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        v3 = *((_QWORD *)this + 1);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;

  WebCore::s_processingUserTypingGesture = *(_BYTE *)this;
  {
    WebCore::focusedNode(void)::node = 0;
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = WebCore::focusedNode(void)::node;
  WebCore::focusedNode(void)::node = v3;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        v3 = *((_QWORD *)this + 1);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

uint64_t WebCore::createPromiseAndWrapper(WebCore *this, WebCore::Document *a2)
{
  unint64_t v3;
  JSC::Structure *v4;
  int v5;
  JSC::VM *v6;
  unint64_t v7;
  WebCore::DOMGuardedObject *v8;
  WebCore::DOMGuardedObject *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WebCore::DOMGuardedObject *v13;
  WebCore::DOMGuardedObject *v14;
  _BYTE v16[8];

  v3 = WebCore::ScriptExecutionContext::globalObject((WebCore::Document *)((char *)a2 + 192));
  MEMORY[0x19AEA3294](v16, *(_QWORD *)(v3 + 56));
  v5 = *(_DWORD *)(v3 + 1164);
  if (v5)
    v6 = (JSC::VM *)(16 * (v5 & 0xFFFFFFFE));
  else
    v6 = 0;
  v7 = JSC::JSPromise::create(*(JSC::JSPromise **)(v3 + 56), v6, v4);
  v8 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v9 = WebCore::DOMGuardedObject::DOMGuardedObject(v8, v3, v7);
  *(_QWORD *)v9 = &off_1E3226868;
  *((_DWORD *)v9 + 10) = 0;
  *((_BYTE *)v9 + 44) = 0;
  v10 = *((_QWORD *)v9 + 3);
  if (v10 && (v11 = *(_QWORD *)v10) != 0 && (*(_BYTE *)(v10 + 8) & 3) == 0)
  {
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      v12 = 0;
    }
    else if (*(_BYTE *)(v11 + 5) == 68)
    {
      v12 = *(_QWORD *)v10;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 10;
  }
  v13 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  v14 = WebCore::DOMGuardedObject::DOMGuardedObject(v13, v3, v12);
  *(_QWORD *)v14 = &off_1E3251870;
  *(_QWORD *)this = v14;
  *((_QWORD *)this + 1) = v8;
  return MEMORY[0x19AEA32A0](v16);
}

void WebCore::ViewTransition::~ViewTransition(WebCore::ViewTransition *this, void *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WebCore::CapturedElement *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  WTF::StringImpl *v26;

  *(_QWORD *)this = &off_1E33A8BF0;
  WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::ViewTransition *)((char *)this + 144), a2);
  v4 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[4];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
  {
    if (v10[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[4];
  }
  v11 = *((_QWORD *)this + 8);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)*((_QWORD *)this + 8);
      do
      {
        v14 = *v13;
        if (*v13 != (WTF::StringImpl *)-1)
        {
          v15 = v13[1];
          v13[1] = 0;
          if (v15)
          {
            WebCore::CapturedElement::~CapturedElement(v15, v3);
            WTF::fastFree(v16, v17);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v3);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), v3);
  }
  v18 = (WTF *)*((_QWORD *)this + 6);
  while (v18)
  {
    v25 = v18;
    v18 = (WTF *)*((_QWORD *)v18 + 2);
    v26 = *(WTF::StringImpl **)v25;
    *(_QWORD *)v25 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v3);
      else
        *(_DWORD *)v26 -= 2;
    }
    WTF::fastFree(v25, v3);
  }
  v19 = *((_QWORD *)this + 5);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v3);
  v21 = *((_QWORD *)this + 4);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v20);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ViewTransition::~ViewTransition(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ViewTransition::create@<X0>(WebCore::Document *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  WebCore::Document *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = WTF::fastMalloc((WTF *)0x98);
  v7 = v6;
  *(_DWORD *)(v6 + 24) = 1;
  *(_QWORD *)(v6 + 32) = 0;
  v8 = *((_QWORD *)a1 + 88);
  v9 = a1;
  if (v8)
  {
    v10 = *(WebCore::Document **)(v8 + 8);
    if (v10)
      v9 = v10;
    else
      v9 = a1;
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, (WebCore::Document *)((char *)v9 + 192));
  *(_QWORD *)v7 = &off_1E33A0540;
  *(_QWORD *)(v7 + 16) = 0;
  if (*((_BYTE *)v9 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v14 = v7;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v9 + 40, &v14, (uint64_t)&v13);
    *(_QWORD *)v7 = &off_1E33A8BF0;
    *(_DWORD *)(v7 + 76) = 0;
    *(_DWORD *)(v7 + 80) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_BYTE *)(v7 + 72) = 0;
    v11 = *a2;
    *a2 = 0;
    *(_QWORD *)(v7 + 88) = v11;
    WebCore::createPromiseAndWrapper((WebCore *)(v7 + 96), a1);
    WebCore::createPromiseAndWrapper((WebCore *)(v7 + 112), a1);
    WebCore::createPromiseAndWrapper((WebCore *)(v7 + 128), a1);
    *(_QWORD *)(v7 + 144) = 0;
    *a3 = v7;
    return (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v7);
  }
  return result;
}

uint64_t *WebCore::ViewTransition::skipViewTransition(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _DWORD *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::RenderLayerCompositor *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  uint64_t v35;
  JSC::Structure *v36;
  objc_class *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v42;
  int v43;
  objc_class *v44;
  _QWORD *v45;
  WTF::StringImpl *v46;
  uint64_t *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = result[1];
  if (!v4)
    return result;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return result;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A5DFF8);
  }
  v6 = (uint64_t)a2;
  v7 = result;
  if (*((unsigned __int8 *)result + 72) <= 1u)
  {
    v8 = (_DWORD *)(v5 - 264);
    *(_DWORD *)(v5 - 264) += 2;
    v2 = WebCore::Document::eventLoop((WebCore::Document *)(v5 - 288), a2);
    ++*(_DWORD *)(v2 + 8);
    v3 = v7[4];
    if (v3)
      goto LABEL_94;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = v7;
    v10 = (unsigned int *)v7[4];
    v7[4] = v3;
    if (!v10)
      goto LABEL_94;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    v3 = v7[4];
    if (v3)
    {
LABEL_94:
      do
        v13 = __ldaxr((unsigned int *)v3);
      while (__stlxr(v13 + 1, (unsigned int *)v3));
    }
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E33A88F0;
    v14[1] = v7;
    v14[2] = v3;
    v45 = v14;
    WebCore::EventLoopTaskGroup::queueTask(v2, 0, (uint64_t *)&v45);
    v16 = (uint64_t)v45;
    v45 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *(_DWORD *)(v2 + 8);
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x195A5E058);
    }
    *(_DWORD *)(v2 + 8) = v17 - 1;
    if (*v8 == 2)
    {
      if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v15);
    }
    else
    {
      *v8 -= 2;
    }
  }
  v18 = v7[1];
  if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
  {
    if (*(_BYTE *)(v19 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195A5E038);
    }
    v20 = (WebCore::RenderLayerCompositor *)(v19 - 288);
  }
  else
  {
    v20 = 0;
  }
  WebCore::Document::clearRenderingIsSuppressedForViewTransition(v20);
  v22 = *(_QWORD *)(v7[1] + 8);
  if (*(_BYTE *)(v22 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A5E018);
  }
  if (*(uint64_t **)(v22 + 1824) == v7)
    WebCore::ViewTransition::clearViewTransition((unsigned int *)v7, v21);
  *((_BYTE *)v7 + 72) = 4;
  v23 = *(_DWORD *)(v6 + 16);
  v24 = v7[13];
  if (!v23)
  {
    v29 = *(_QWORD *)(v24 + 24);
    if (!v29 || !*(_QWORD *)v29 || (*(_BYTE *)(v29 + 8) & 3) != 0)
      goto LABEL_45;
    v30 = *(_QWORD *)(v24 + 32);
    if (!v30 || (*(_BYTE *)(v30 + 8) & 3) != 0)
      v2 = 0;
    else
      v2 = *(_QWORD *)v30;
    v3 = *(_QWORD *)(v2 + 56);
    MEMORY[0x19AEA3294](&v45, v3);
    if (!*(_DWORD *)(v6 + 16))
    {
      if (!*(_QWORD *)(v3 + 16))
      {
        WebCore::DeferredPromise::callFunction(v24, (uint64_t *)v2, 2, *(objc_class **)v6);
LABEL_44:
        MEMORY[0x19AEA32A0](&v45);
        goto LABEL_45;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v2);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5))
        goto LABEL_70;
LABEL_74:
      v39 = *(_QWORD *)(v5 + 344);
      if (*(_QWORD *)(v3 + 24) == v6)
      {
LABEL_86:
        *(_BYTE *)(*(_QWORD *)(v39 + 8) + 93442) = 1;
        *(_BYTE *)(v24 + 44) = 1;
        goto LABEL_70;
      }
      if (!v39)
      {
LABEL_70:
        WebCore::reportException((JSC::JSGlobalObject *)v2, v6, 0, 0, 0);
        goto LABEL_44;
      }
      v40 = (unsigned __int8 *)(v39 + 40);
      if (__ldaxr((unsigned __int8 *)(v39 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v40))
      {
        goto LABEL_80;
      }
      MEMORY[0x19AEA534C](v39 + 40);
LABEL_80:
      v42 = *(unsigned __int8 *)(v39 + 41);
      v43 = __ldxr(v40);
      if (v43 == 1)
      {
        if (!__stlxr(0, v40))
        {
LABEL_85:
          if (v42)
            goto LABEL_86;
          goto LABEL_70;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v39 + 40));
      goto LABEL_85;
    }
LABEL_73:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_74;
  }
  if (v23 != 1)
    goto LABEL_73;
  v25 = *(_BYTE *)v6;
  v26 = *(WTF::StringImpl **)(v6 + 8);
  *(_QWORD *)(v6 + 8) = 0;
  v44 = 0;
  LOBYTE(v45) = v25;
  if (v26)
    *(_DWORD *)v26 += 2;
  v46 = v26;
  WebCore::DeferredPromise::reject(v24, (unsigned __int8 *)&v45, 0, &v44);
  v28 = v46;
  v46 = 0;
  if (!v28)
  {
LABEL_32:
    if (v26)
      goto LABEL_33;
    goto LABEL_45;
  }
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
    goto LABEL_32;
  }
  WTF::StringImpl::destroy(v28, v27);
  if (v26)
  {
LABEL_33:
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_45:
  v31 = v7[14];
  ++*((_DWORD *)v7 + 6);
  v32 = operator new(0x18uLL);
  *v32 = &off_1E33A8918;
  v32[1] = v7;
  v32[2] = v7;
  v33 = *(_QWORD *)(v31 + 32);
  if (!v33 || (*(_BYTE *)(v33 + 8) & 3) != 0)
    v34 = 0;
  else
    v34 = *(JSC::JSGlobalObject **)v33;
  v35 = **(_QWORD **)(v31 + 24);
  if ((v35 & 0xFFFE000000000002) != 0)
  {
    v36 = 0;
  }
  else if (*(_BYTE *)(v35 + 5) == 68)
  {
    v36 = **(JSC::Structure ***)(v31 + 24);
  }
  else
  {
    v36 = 0;
  }
  v37 = (objc_class *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v37 = &off_1E3392A30;
  *((_QWORD *)v37 + 4) = v32;
  v47 = 0;
  v44 = v37;
  WebCore::DOMPromise::whenPromiseIsSettled(v34, v36, (uint64_t *)&v44);
  if (v44)
    (*(void (**)(objc_class *))(*(_QWORD *)v44 + 8))(v44);
  result = v47;
  if (v47 == (uint64_t *)&v45)
  {
    v38 = 4;
    result = (uint64_t *)&v45;
  }
  else
  {
    if (!v47)
      return result;
    v38 = 5;
  }
  return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

unsigned int *WebCore::ViewTransition::clearViewTransition(unsigned int *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t i;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  char v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  _QWORD *v36;
  uint64_t v37;
  WebCore::Style::Resolver *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int *v45;
  int v46;
  WTF::StringImpl *v47;
  char v48;
  char v49;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195A5E758);
  }
  v4 = this;
  v44 = (_DWORD *)(v3 - 264);
  *(_DWORD *)(v3 - 264) += 2;
  v5 = *(_QWORD *)(v3 + 984);
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v6 += 4;
    v45 = (unsigned int *)v5;
    v46 = 12;
    v47 = v6;
    v48 = 1;
    WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v45);
    if (v48)
    {
      v7 = v47;
      v47 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, a2);
          if (v6)
          {
LABEL_12:
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
LABEL_14:
          for (i = *((_QWORD *)v4 + 6); i; i = *(_QWORD *)(i + 16))
          {
            v9 = *(WTF::StringImpl **)i;
            if (*(_QWORD *)i)
              *(_DWORD *)v9 += 4;
            v45 = (unsigned int *)v5;
            v46 = 13;
            v47 = v9;
            v48 = 1;
            WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v45);
            if (v48)
            {
              v11 = v47;
              v47 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                {
                  WTF::StringImpl::destroy(v11, v10);
                  if (!v9)
                    goto LABEL_24;
                  goto LABEL_22;
                }
                *(_DWORD *)v11 -= 2;
              }
            }
            if (!v9)
              goto LABEL_24;
LABEL_22:
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v10);
            else
              *(_DWORD *)v9 -= 2;
LABEL_24:
            v12 = *(WTF::StringImpl **)i;
            if (*(_QWORD *)i)
              *(_DWORD *)v12 += 4;
            v45 = (unsigned int *)v5;
            v46 = 14;
            v47 = v12;
            v48 = 1;
            WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v45);
            if (v48)
            {
              v14 = v47;
              v47 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                {
                  WTF::StringImpl::destroy(v14, v13);
                  if (!v12)
                    goto LABEL_33;
                  goto LABEL_31;
                }
                *(_DWORD *)v14 -= 2;
              }
            }
            if (!v12)
              goto LABEL_33;
LABEL_31:
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v13);
            else
              *(_DWORD *)v12 -= 2;
LABEL_33:
            v15 = *(WTF::StringImpl **)i;
            if (*(_QWORD *)i)
              *(_DWORD *)v15 += 4;
            v45 = (unsigned int *)v5;
            v46 = 16;
            v47 = v15;
            v48 = 1;
            WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v45);
            if (v48)
            {
              v17 = v47;
              v47 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                {
                  WTF::StringImpl::destroy(v17, v16);
                  if (!v15)
                    goto LABEL_42;
                  goto LABEL_40;
                }
                *(_DWORD *)v17 -= 2;
              }
            }
            if (!v15)
              goto LABEL_42;
LABEL_40:
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v16);
            else
              *(_DWORD *)v15 -= 2;
LABEL_42:
            v18 = *(WTF::StringImpl **)i;
            if (*(_QWORD *)i)
              *(_DWORD *)v18 += 4;
            v45 = (unsigned int *)v5;
            v46 = 15;
            v47 = v18;
            v48 = 1;
            WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v45);
            if (!v48)
              goto LABEL_48;
            v19 = v47;
            v47 = 0;
            if (!v19)
              goto LABEL_48;
            if (*(_DWORD *)v19 != 2)
            {
              *(_DWORD *)v19 -= 2;
LABEL_48:
              if (v18)
                goto LABEL_49;
              continue;
            }
            WTF::StringImpl::destroy(v19, a2);
            if (v18)
            {
LABEL_49:
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, a2);
              else
                *(_DWORD *)v18 -= 2;
            }
          }
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
          goto LABEL_67;
        }
        *(_DWORD *)v7 -= 2;
      }
    }
    if (v6)
      goto LABEL_12;
    goto LABEL_14;
  }
LABEL_67:
  v20 = *((_QWORD *)v4 + 8);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    v22 = (_QWORD *)(v20 + 16 * v21);
    if (*(_DWORD *)(v20 - 12))
    {
      v23 = (_QWORD *)*((_QWORD *)v4 + 8);
      if ((_DWORD)v21)
      {
        v24 = 16 * v21;
        v23 = (_QWORD *)*((_QWORD *)v4 + 8);
        while ((unint64_t)(*v23 + 1) <= 1)
        {
          v23 += 2;
          v24 -= 16;
          if (!v24)
          {
            v23 = v22;
            goto LABEL_74;
          }
        }
      }
      goto LABEL_74;
    }
    v23 = (_QWORD *)(v20 + 16 * v21);
  }
  else
  {
    v23 = 0;
    v21 = 0;
  }
  v22 = (_QWORD *)(v20 + 16 * v21);
  if (!v20)
  {
    v25 = 0;
    goto LABEL_79;
  }
LABEL_74:
  v25 = (_QWORD *)(v20 + 16 * *(unsigned int *)(v20 - 4));
LABEL_79:
  while (v23 != v25)
  {
    v26 = v23[1];
    v27 = *(_QWORD *)(v26 + 56);
    if (v27)
    {
      v28 = *(unsigned int **)(v27 + 8);
      if (v28)
      {
        v29 = *(_BYTE *)(v26 + 80);
        if (v29)
        {
          v30 = *(_DWORD *)(v26 + 64);
          v31 = *(WTF::StringImpl **)(v26 + 72);
          if (v31)
            *(_DWORD *)v31 += 2;
          v45 = v28;
          v46 = v30;
          v29 = 1;
          v47 = v31;
        }
        else
        {
          v45 = v28;
          LOBYTE(v46) = 0;
        }
        v48 = v29;
        v49 = 1;
        v32 = WebCore::Styleable::renderer((WebCore::Styleable *)&v45);
        if (v32)
        {
          v33 = v32;
          ++*(_DWORD *)(v32 + 16);
          WebCore::RenderObject::setCapturedInViewTransition(v32, 0);
          v34 = *(_DWORD *)(v33 + 16);
          if (!v34)
          {
            __break(0xC471u);
            JUMPOUT(0x195A5E738);
          }
          *(_DWORD *)(v33 + 16) = v34 - 1;
        }
        if (v49)
        {
          if (v48)
          {
            v35 = v47;
            v47 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, a2);
              else
                *(_DWORD *)v35 -= 2;
            }
          }
        }
      }
    }
    v36 = v23 + 2;
    v23 = v22;
    if (v36 != v22)
    {
      v23 = v36;
      while ((unint64_t)(*v23 + 1) <= 1)
      {
        v23 += 2;
        if (v23 == v22)
        {
          v23 = v22;
          break;
        }
      }
    }
  }
  *(_BYTE *)(v3 + 3152) = 0;
  v37 = *(_QWORD *)(v3 + 1040);
  v38 = *(WebCore::Style::Resolver **)(v37 + 32);
  *(_QWORD *)(v37 + 32) = 0;
  if (v38)
    WTF::RefCounted<WebCore::Style::Resolver>::deref(v38);
  v39 = *(WTF::StringImpl ****)(v37 + 296);
  v40 = v39[2];
  if (v40 && *((_DWORD *)v40 - 3))
  {
    WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear(v39 + 2, a2);
    WebCore::Style::CustomPropertyRegistry::invalidate((WebCore::Style::CustomPropertyRegistry *)v39, MEMORY[0x1E0CBF2F8]);
  }
  v41 = *(_QWORD *)(v37 + 304);
  if (*(_QWORD *)v41 && *(_DWORD *)(*(_QWORD *)v41 - 12))
  {
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(v37 + 304), a2);
    *(_BYTE *)(v41 + 8) = 1;
  }
  WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>::~Ref((WebCore::Style::RuleSet **)(v37 + 72), 0);
  v45 = 0;
  WebCore::Document::setActiveViewTransition(v3 - 288, (uint64_t *)&v45);
  this = v45;
  if (v45)
  {
    if (v45[6] == 1)
      this = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v45 + 16))();
    else
      --v45[6];
  }
  v43 = *(_QWORD *)(v3 + 984);
  if (v43)
  {
    *(_DWORD *)(v43 + 24) += 2;
    this = (unsigned int *)WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v43);
    if (*(_DWORD *)(v43 + 24) == 2)
    {
      if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v43, v42);
    }
    else
    {
      *(_DWORD *)(v43 + 24) -= 2;
    }
  }
  if (*v44 == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v42);
  }
  else
  {
    *v44 -= 2;
  }
  return this;
}

